import{S as ota,i as rta,s as tta,e as a,k as l,w as F,t as o,M as ata,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as nta,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as jft}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function sta($){let g,v,p,m,_,d,h,Ao,Oi,em,ft,Vi,Xi,f8,om,Oe,Qe,zi,Xn,m8,zn,Wn,g8,Wi,Qn,h8,Qi,rm,ja;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Ao=o(`, make sure its
`),Oi=a("code"),em=o("model_type"),ft=o(" attribute is set to the same key you use when registering the config (here "),Vi=a("code"),Xi=o('"new-model"'),f8=o(")."),om=l(),Oe=a("p"),Qe=o("Likewise, if your "),zi=a("code"),Xn=o("NewModel"),m8=o(" is a subclass of "),zn=a("a"),Wn=o("PreTrainedModel"),g8=o(`, make sure its
`),Wi=a("code"),Qn=o("config_class"),h8=o(` attribute is set to the same class you use when registering the model (here
`),Qi=a("code"),rm=o("NewModelConfig"),ja=o(")."),this.h()},l(Ue){g=n(Ue,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var nP=s(p);m=r(nP,"NewModelConfig"),nP.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ui=s(d);h=r(Ui,"PretrainedConfig"),Ui.forEach(t),Ao=r(Ae,`, make sure its
`),Oi=n(Ae,"CODE",{});var sP=s(Oi);em=r(sP,"model_type"),sP.forEach(t),ft=r(Ae," attribute is set to the same key you use when registering the config (here "),Vi=n(Ae,"CODE",{});var lP=s(Vi);Xi=r(lP,'"new-model"'),lP.forEach(t),f8=r(Ae,")."),Ae.forEach(t),om=i(Ue),Oe=n(Ue,"P",{});var Lo=s(Oe);Qe=r(Lo,"Likewise, if your "),zi=n(Lo,"CODE",{});var Da=s(zi);Xn=r(Da,"NewModel"),Da.forEach(t),m8=r(Lo," is a subclass of "),zn=n(Lo,"A",{href:!0});var iP=s(zn);Wn=r(iP,"PreTrainedModel"),iP.forEach(t),g8=r(Lo,`, make sure its
`),Wi=n(Lo,"CODE",{});var tm=s(Wi);Qn=r(tm,"config_class"),tm.forEach(t),h8=r(Lo,` attribute is set to the same class you use when registering the model (here
`),Qi=n(Lo,"CODE",{});var dP=s(Qi);rm=r(dP,"NewModelConfig"),dP.forEach(t),ja=r(Lo,")."),Lo.forEach(t),this.h()},h(){c(zn,"href","/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel")},m(Ue,Ae){b(Ue,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Ao),e(g,Oi),e(Oi,em),e(g,ft),e(g,Vi),e(Vi,Xi),e(g,f8),b(Ue,om,Ae),b(Ue,Oe,Ae),e(Oe,Qe),e(Oe,zi),e(zi,Xn),e(Oe,m8),e(Oe,zn),e(zn,Wn),e(Oe,g8),e(Oe,Wi),e(Wi,Qn),e(Oe,h8),e(Oe,Qi),e(Qi,rm),e(Oe,ja)},d(Ue){Ue&&t(g),Ue&&t(om),Ue&&t(Oe)}}}function lta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ita($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dta($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Ao=s(p);m=r(Ao,"use_auth_token=True"),Ao.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function cta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fta($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Ao=s(p);m=r(Ao,"use_auth_token=True"),Ao.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function mta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _ta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ata($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $ta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ita($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ota($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function raa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function taa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function naa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function saa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function laa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function daa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function caa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function faa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function maa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function haa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function paa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _aa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function baa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Faa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Taa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Maa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Caa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function waa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Aaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Laa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $aa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Saa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Raa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Paa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Baa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Naa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Daa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Waa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Haa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ena($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ona($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ana($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ina($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dna($){let g,v,p,m,_,d,h,Ao,Oi,em,ft,Vi,Xi,f8,om,Oe,Qe,zi,Xn,m8,zn,Wn,g8,Wi,Qn,h8,Qi,rm,ja,Ue,Ae,nP,Ui,sP,lP,Lo,Da,iP,tm,dP,bKe,UQe,Hi,am,Dse,p8,vKe,Gse,FKe,HQe,Un,TKe,Ose,MKe,EKe,Vse,CKe,wKe,JQe,_8,YQe,cP,AKe,KQe,nm,ZQe,Ji,sm,Xse,u8,LKe,zse,yKe,eUe,yo,b8,xKe,v8,$Ke,fP,kKe,SKe,RKe,F8,PKe,Wse,BKe,IKe,NKe,kr,T8,qKe,Qse,jKe,DKe,Yi,GKe,Use,OKe,VKe,Hse,XKe,zKe,WKe,A,lm,Jse,QKe,UKe,mP,HKe,JKe,YKe,im,Yse,KKe,ZKe,gP,eZe,oZe,rZe,dm,Kse,tZe,aZe,hP,nZe,sZe,lZe,cm,Zse,iZe,dZe,pP,cZe,fZe,mZe,fm,ele,gZe,hZe,_P,pZe,_Ze,uZe,mm,ole,bZe,vZe,uP,FZe,TZe,MZe,gm,rle,EZe,CZe,bP,wZe,AZe,LZe,hm,tle,yZe,xZe,vP,$Ze,kZe,SZe,pm,ale,RZe,PZe,FP,BZe,IZe,NZe,_m,nle,qZe,jZe,TP,DZe,GZe,OZe,um,sle,VZe,XZe,MP,zZe,WZe,QZe,bm,lle,UZe,HZe,EP,JZe,YZe,KZe,vm,ile,ZZe,eeo,CP,oeo,reo,teo,Fm,dle,aeo,neo,wP,seo,leo,ieo,Tm,cle,deo,ceo,AP,feo,meo,geo,Mm,fle,heo,peo,LP,_eo,ueo,beo,Em,mle,veo,Feo,yP,Teo,Meo,Eeo,Cm,gle,Ceo,weo,xP,Aeo,Leo,yeo,wm,hle,xeo,$eo,$P,keo,Seo,Reo,Am,ple,Peo,Beo,kP,Ieo,Neo,qeo,Lm,_le,jeo,Deo,SP,Geo,Oeo,Veo,ym,ule,Xeo,zeo,RP,Weo,Qeo,Ueo,xm,ble,Heo,Jeo,PP,Yeo,Keo,Zeo,$m,vle,eoo,ooo,BP,roo,too,aoo,km,Fle,noo,soo,IP,loo,ioo,doo,Sm,Tle,coo,foo,NP,moo,goo,hoo,Rm,Mle,poo,_oo,qP,uoo,boo,voo,Pm,Ele,Foo,Too,jP,Moo,Eoo,Coo,Bm,Cle,woo,Aoo,DP,Loo,yoo,xoo,Im,wle,$oo,koo,GP,Soo,Roo,Poo,Nm,Ale,Boo,Ioo,OP,Noo,qoo,joo,qm,Lle,Doo,Goo,VP,Ooo,Voo,Xoo,jm,yle,zoo,Woo,XP,Qoo,Uoo,Hoo,Dm,xle,Joo,Yoo,zP,Koo,Zoo,ero,Gm,$le,oro,rro,WP,tro,aro,nro,Om,kle,sro,lro,QP,iro,dro,cro,Vm,Sle,fro,mro,UP,gro,hro,pro,Xm,Rle,_ro,uro,HP,bro,vro,Fro,zm,Ple,Tro,Mro,JP,Ero,Cro,wro,Wm,Ble,Aro,Lro,YP,yro,xro,$ro,Qm,Ile,kro,Sro,KP,Rro,Pro,Bro,Um,Nle,Iro,Nro,ZP,qro,jro,Dro,Hm,qle,Gro,Oro,eB,Vro,Xro,zro,Jm,jle,Wro,Qro,oB,Uro,Hro,Jro,Ym,Dle,Yro,Kro,rB,Zro,eto,oto,Km,Gle,rto,tto,tB,ato,nto,sto,Zm,Ole,lto,ito,aB,dto,cto,fto,eg,Vle,mto,gto,nB,hto,pto,_to,og,Xle,uto,bto,sB,vto,Fto,Tto,rg,zle,Mto,Eto,lB,Cto,wto,Ato,tg,Wle,Lto,yto,iB,xto,$to,kto,ag,Qle,Sto,Rto,dB,Pto,Bto,Ito,ng,Ule,Nto,qto,cB,jto,Dto,Gto,sg,Hle,Oto,Vto,fB,Xto,zto,Wto,lg,Jle,Qto,Uto,mB,Hto,Jto,Yto,ig,Yle,Kto,Zto,gB,eao,oao,rao,dg,Kle,tao,aao,hB,nao,sao,lao,cg,Zle,iao,dao,pB,cao,fao,mao,fg,eie,gao,hao,_B,pao,_ao,uao,mg,oie,bao,vao,uB,Fao,Tao,Mao,gg,rie,Eao,Cao,bB,wao,Aao,Lao,hg,tie,yao,xao,vB,$ao,kao,Sao,pg,aie,Rao,Pao,FB,Bao,Iao,Nao,_g,nie,qao,jao,TB,Dao,Gao,Oao,ug,sie,Vao,Xao,MB,zao,Wao,Qao,bg,lie,Uao,Hao,EB,Jao,Yao,Kao,vg,iie,Zao,eno,CB,ono,rno,tno,Fg,die,ano,nno,wB,sno,lno,ino,Tg,cie,dno,cno,AB,fno,mno,gno,Mg,fie,hno,pno,LB,_no,uno,bno,Eg,mie,vno,Fno,yB,Tno,Mno,Eno,Cg,gie,Cno,wno,xB,Ano,Lno,yno,wg,hie,xno,$no,$B,kno,Sno,Rno,Ag,pie,Pno,Bno,kB,Ino,Nno,qno,Lg,_ie,jno,Dno,SB,Gno,Ono,Vno,yg,uie,Xno,zno,RB,Wno,Qno,Uno,xg,bie,Hno,Jno,PB,Yno,Kno,Zno,$g,vie,eso,oso,BB,rso,tso,aso,kg,Fie,nso,sso,IB,lso,iso,dso,Sg,Tie,cso,fso,NB,mso,gso,hso,Rg,Mie,pso,_so,qB,uso,bso,vso,Pg,Eie,Fso,Tso,jB,Mso,Eso,Cso,Bg,Cie,wso,Aso,DB,Lso,yso,xso,Ig,wie,$so,kso,GB,Sso,Rso,Pso,Ng,Aie,Bso,Iso,OB,Nso,qso,jso,qg,Lie,Dso,Gso,VB,Oso,Vso,Xso,jg,yie,zso,Wso,XB,Qso,Uso,Hso,Dg,xie,Jso,Yso,zB,Kso,Zso,elo,Gg,$ie,olo,rlo,WB,tlo,alo,nlo,Og,kie,slo,llo,QB,ilo,dlo,clo,Vg,Sie,flo,mlo,UB,glo,hlo,plo,Xg,Rie,_lo,ulo,HB,blo,vlo,Flo,zg,Pie,Tlo,Mlo,JB,Elo,Clo,wlo,Wg,Bie,Alo,Llo,YB,ylo,xlo,$lo,Qg,Iie,klo,Slo,KB,Rlo,Plo,Blo,Ug,Nie,Ilo,Nlo,ZB,qlo,jlo,Dlo,Hg,qie,Glo,Olo,eI,Vlo,Xlo,zlo,Jg,jie,Wlo,Qlo,oI,Ulo,Hlo,Jlo,Yg,Die,Ylo,Klo,rI,Zlo,eio,oio,Kg,Gie,rio,tio,tI,aio,nio,sio,Zg,Oie,lio,iio,aI,dio,cio,fio,eh,Vie,mio,gio,nI,hio,pio,_io,oh,Xie,uio,bio,sI,vio,Fio,Tio,rh,zie,Mio,Eio,lI,Cio,wio,Aio,th,Wie,Lio,yio,iI,xio,$io,kio,ah,Qie,Sio,Rio,dI,Pio,Bio,Iio,nh,Uie,Nio,qio,cI,jio,Dio,Gio,sh,Hie,Oio,Vio,fI,Xio,zio,Wio,lh,Jie,Qio,Uio,mI,Hio,Jio,Yio,ih,Yie,Kio,Zio,gI,edo,odo,rdo,dh,Kie,tdo,ado,hI,ndo,sdo,ldo,ch,Zie,ido,ddo,pI,cdo,fdo,mdo,fh,ede,gdo,hdo,_I,pdo,_do,udo,mh,ode,bdo,vdo,uI,Fdo,Tdo,Mdo,gh,rde,Edo,Cdo,bI,wdo,Ado,Ldo,hh,tde,ydo,xdo,vI,$do,kdo,Sdo,ph,ade,Rdo,Pdo,FI,Bdo,Ido,Ndo,_h,nde,qdo,jdo,TI,Ddo,Gdo,Odo,uh,sde,Vdo,Xdo,MI,zdo,Wdo,Qdo,bh,lde,Udo,Hdo,EI,Jdo,Ydo,Kdo,vh,ide,Zdo,eco,CI,oco,rco,tco,Fh,dde,aco,nco,wI,sco,lco,ico,Th,dco,Mh,M8,cco,cde,fco,oUe,Ki,Eh,fde,E8,mco,mde,gco,rUe,xo,C8,hco,w8,pco,AI,_co,uco,bco,A8,vco,gde,Fco,Tco,Mco,Sr,L8,Eco,hde,Cco,wco,Ga,Aco,pde,Lco,yco,_de,xco,$co,ude,kco,Sco,Rco,k,Hn,bde,Pco,Bco,LI,Ico,Nco,yI,qco,jco,Dco,Jn,vde,Gco,Oco,xI,Vco,Xco,$I,zco,Wco,Qco,Yn,Fde,Uco,Hco,kI,Jco,Yco,SI,Kco,Zco,efo,Ch,Tde,ofo,rfo,RI,tfo,afo,nfo,Kn,Mde,sfo,lfo,PI,ifo,dfo,BI,cfo,ffo,mfo,wh,Ede,gfo,hfo,II,pfo,_fo,ufo,Ah,Cde,bfo,vfo,NI,Ffo,Tfo,Mfo,Lh,wde,Efo,Cfo,qI,wfo,Afo,Lfo,Zn,Ade,yfo,xfo,jI,$fo,kfo,DI,Sfo,Rfo,Pfo,es,Lde,Bfo,Ifo,GI,Nfo,qfo,OI,jfo,Dfo,Gfo,os,yde,Ofo,Vfo,VI,Xfo,zfo,XI,Wfo,Qfo,Ufo,yh,xde,Hfo,Jfo,zI,Yfo,Kfo,Zfo,xh,$de,emo,omo,WI,rmo,tmo,amo,$h,kde,nmo,smo,QI,lmo,imo,dmo,rs,Sde,cmo,fmo,UI,mmo,gmo,HI,hmo,pmo,_mo,kh,Rde,umo,bmo,JI,vmo,Fmo,Tmo,ts,Pde,Mmo,Emo,YI,Cmo,wmo,KI,Amo,Lmo,ymo,as,Bde,xmo,$mo,ZI,kmo,Smo,eN,Rmo,Pmo,Bmo,ns,Ide,Imo,Nmo,oN,qmo,jmo,rN,Dmo,Gmo,Omo,ss,Nde,Vmo,Xmo,tN,zmo,Wmo,aN,Qmo,Umo,Hmo,Sh,qde,Jmo,Ymo,nN,Kmo,Zmo,ego,ls,jde,ogo,rgo,sN,tgo,ago,lN,ngo,sgo,lgo,is,Dde,igo,dgo,iN,cgo,fgo,dN,mgo,ggo,hgo,ds,Gde,pgo,_go,cN,ugo,bgo,fN,vgo,Fgo,Tgo,cs,Ode,Mgo,Ego,mN,Cgo,wgo,gN,Ago,Lgo,ygo,fs,Vde,xgo,$go,hN,kgo,Sgo,pN,Rgo,Pgo,Bgo,ms,Xde,Igo,Ngo,_N,qgo,jgo,uN,Dgo,Ggo,Ogo,Rh,zde,Vgo,Xgo,bN,zgo,Wgo,Qgo,gs,Wde,Ugo,Hgo,vN,Jgo,Ygo,FN,Kgo,Zgo,eho,Ph,Qde,oho,rho,TN,tho,aho,nho,hs,Ude,sho,lho,MN,iho,dho,EN,cho,fho,mho,ps,Hde,gho,hho,CN,pho,_ho,wN,uho,bho,vho,_s,Jde,Fho,Tho,AN,Mho,Eho,LN,Cho,who,Aho,Bh,Yde,Lho,yho,yN,xho,$ho,kho,us,Kde,Sho,Rho,xN,Pho,Bho,$N,Iho,Nho,qho,bs,Zde,jho,Dho,kN,Gho,Oho,SN,Vho,Xho,zho,vs,ece,Who,Qho,RN,Uho,Hho,PN,Jho,Yho,Kho,Ih,oce,Zho,epo,BN,opo,rpo,tpo,Fs,rce,apo,npo,IN,spo,lpo,NN,ipo,dpo,cpo,Ts,tce,fpo,mpo,qN,gpo,hpo,jN,ppo,_po,upo,Ms,ace,bpo,vpo,DN,Fpo,Tpo,GN,Mpo,Epo,Cpo,Es,nce,wpo,Apo,ON,Lpo,ypo,VN,xpo,$po,kpo,Cs,sce,Spo,Rpo,XN,Ppo,Bpo,zN,Ipo,Npo,qpo,ws,lce,jpo,Dpo,WN,Gpo,Opo,QN,Vpo,Xpo,zpo,As,ice,Wpo,Qpo,UN,Upo,Hpo,HN,Jpo,Ypo,Kpo,Ls,dce,Zpo,e_o,JN,o_o,r_o,YN,t_o,a_o,n_o,Nh,cce,s_o,l_o,KN,i_o,d_o,c_o,ys,fce,f_o,m_o,ZN,g_o,h_o,eq,p_o,__o,u_o,qh,mce,b_o,v_o,oq,F_o,T_o,M_o,jh,gce,E_o,C_o,rq,w_o,A_o,L_o,xs,hce,y_o,x_o,tq,$_o,k_o,aq,S_o,R_o,P_o,$s,pce,B_o,I_o,nq,N_o,q_o,sq,j_o,D_o,G_o,ks,_ce,O_o,V_o,lq,X_o,z_o,iq,W_o,Q_o,U_o,Dh,uce,H_o,J_o,dq,Y_o,K_o,Z_o,Ss,bce,euo,ouo,cq,ruo,tuo,fq,auo,nuo,suo,Rs,vce,luo,iuo,mq,duo,cuo,gq,fuo,muo,guo,Ps,Fce,huo,puo,hq,_uo,uuo,pq,buo,vuo,Fuo,Bs,Tce,Tuo,Muo,_q,Euo,Cuo,uq,wuo,Auo,Luo,Is,Mce,yuo,xuo,bq,$uo,kuo,vq,Suo,Ruo,Puo,Ns,Ece,Buo,Iuo,Fq,Nuo,quo,Tq,juo,Duo,Guo,qs,Cce,Ouo,Vuo,Mq,Xuo,zuo,Eq,Wuo,Quo,Uuo,js,wce,Huo,Juo,Cq,Yuo,Kuo,wq,Zuo,e1o,o1o,Gh,Ace,r1o,t1o,Aq,a1o,n1o,s1o,Ds,Lce,l1o,i1o,Lq,d1o,c1o,yq,f1o,m1o,g1o,Gs,yce,h1o,p1o,xq,_1o,u1o,$q,b1o,v1o,F1o,Oh,xce,T1o,M1o,kq,E1o,C1o,w1o,Vh,$ce,A1o,L1o,Sq,y1o,x1o,$1o,Xh,kce,k1o,S1o,Rq,R1o,P1o,B1o,zh,Sce,I1o,N1o,Pq,q1o,j1o,D1o,Os,Rce,G1o,O1o,Bq,V1o,X1o,Iq,z1o,W1o,Q1o,Wh,Pce,U1o,H1o,Nq,J1o,Y1o,K1o,Vs,Bce,Z1o,e4o,qq,o4o,r4o,jq,t4o,a4o,n4o,Xs,Ice,s4o,l4o,Dq,i4o,d4o,Gq,c4o,f4o,m4o,zs,Nce,g4o,h4o,Oq,p4o,_4o,Vq,u4o,b4o,v4o,Ws,qce,F4o,T4o,Xq,M4o,E4o,zq,C4o,w4o,A4o,Qs,jce,L4o,y4o,Wq,x4o,$4o,Qq,k4o,S4o,R4o,Us,Dce,P4o,B4o,Uq,I4o,N4o,Hq,q4o,j4o,D4o,Qh,Gce,G4o,O4o,Jq,V4o,X4o,z4o,Uh,Oce,W4o,Q4o,Yq,U4o,H4o,J4o,Hs,Vce,Y4o,K4o,Kq,Z4o,e2o,Zq,o2o,r2o,t2o,Js,Xce,a2o,n2o,ej,s2o,l2o,oj,i2o,d2o,c2o,Ys,zce,f2o,m2o,rj,g2o,h2o,tj,p2o,_2o,u2o,Hh,Wce,b2o,v2o,aj,F2o,T2o,M2o,Jh,Qce,E2o,C2o,nj,w2o,A2o,L2o,Yh,Uce,y2o,x2o,sj,$2o,k2o,S2o,Ks,Hce,R2o,P2o,lj,B2o,I2o,ij,N2o,q2o,j2o,Zs,Jce,D2o,G2o,dj,O2o,V2o,cj,X2o,z2o,W2o,Kh,Yce,Q2o,U2o,fj,H2o,J2o,Y2o,Zh,Kce,K2o,Z2o,mj,ebo,obo,rbo,ep,Zce,tbo,abo,gj,nbo,sbo,lbo,el,efe,ibo,dbo,hj,cbo,fbo,pj,mbo,gbo,hbo,op,ofe,pbo,_bo,_j,ubo,bbo,vbo,rp,rfe,Fbo,Tbo,uj,Mbo,Ebo,Cbo,ol,tfe,wbo,Abo,bj,Lbo,ybo,vj,xbo,$bo,kbo,rl,afe,Sbo,Rbo,Fj,Pbo,Bbo,Tj,Ibo,Nbo,qbo,tl,nfe,jbo,Dbo,Mj,Gbo,Obo,Ej,Vbo,Xbo,zbo,al,sfe,Wbo,Qbo,Cj,Ubo,Hbo,wj,Jbo,Ybo,Kbo,tp,Zbo,ap,y8,evo,lfe,ovo,tUe,Zi,np,ife,x8,rvo,dfe,tvo,aUe,$o,$8,avo,k8,nvo,Aj,svo,lvo,ivo,S8,dvo,cfe,cvo,fvo,mvo,He,R8,gvo,ffe,hvo,pvo,Oa,_vo,mfe,uvo,bvo,gfe,vvo,Fvo,hfe,Tvo,Mvo,Evo,Q,sp,pfe,Cvo,wvo,Lj,Avo,Lvo,yvo,lp,_fe,xvo,$vo,yj,kvo,Svo,Rvo,ip,ufe,Pvo,Bvo,xj,Ivo,Nvo,qvo,dp,bfe,jvo,Dvo,$j,Gvo,Ovo,Vvo,cp,vfe,Xvo,zvo,kj,Wvo,Qvo,Uvo,fp,Ffe,Hvo,Jvo,Sj,Yvo,Kvo,Zvo,mp,Tfe,e3o,o3o,Rj,r3o,t3o,a3o,gp,Mfe,n3o,s3o,Pj,l3o,i3o,d3o,hp,Efe,c3o,f3o,Bj,m3o,g3o,h3o,pp,Cfe,p3o,_3o,Ij,u3o,b3o,v3o,_p,wfe,F3o,T3o,Nj,M3o,E3o,C3o,up,Afe,w3o,A3o,qj,L3o,y3o,x3o,bp,Lfe,$3o,k3o,jj,S3o,R3o,P3o,vp,yfe,B3o,I3o,Dj,N3o,q3o,j3o,Fp,xfe,D3o,G3o,Gj,O3o,V3o,X3o,Tp,$fe,z3o,W3o,Oj,Q3o,U3o,H3o,Mp,kfe,J3o,Y3o,Vj,K3o,Z3o,e5o,Ep,Sfe,o5o,r5o,Xj,t5o,a5o,n5o,Cp,Rfe,s5o,l5o,zj,i5o,d5o,c5o,wp,Pfe,f5o,m5o,Wj,g5o,h5o,p5o,Ap,Bfe,_5o,u5o,Qj,b5o,v5o,F5o,Lp,Ife,T5o,M5o,Uj,E5o,C5o,w5o,yp,Nfe,A5o,L5o,Hj,y5o,x5o,$5o,xp,qfe,k5o,S5o,Jj,R5o,P5o,B5o,$p,jfe,I5o,N5o,Yj,q5o,j5o,D5o,kp,Dfe,G5o,O5o,Kj,V5o,X5o,z5o,Sp,Gfe,W5o,Q5o,Zj,U5o,H5o,J5o,Rp,Ofe,Y5o,K5o,eD,Z5o,e6o,o6o,Pp,Vfe,r6o,t6o,oD,a6o,n6o,s6o,Bp,Xfe,l6o,i6o,rD,d6o,c6o,f6o,Ip,zfe,m6o,g6o,tD,h6o,p6o,_6o,Np,Wfe,u6o,b6o,aD,v6o,F6o,T6o,qp,Qfe,M6o,E6o,nD,C6o,w6o,A6o,jp,Ufe,L6o,y6o,sD,x6o,$6o,k6o,Dp,Hfe,S6o,R6o,lD,P6o,B6o,I6o,Gp,Jfe,N6o,q6o,iD,j6o,D6o,G6o,Op,Yfe,O6o,V6o,dD,X6o,z6o,W6o,Vp,Kfe,Q6o,U6o,cD,H6o,J6o,Y6o,Xp,K6o,zp,Z6o,Wp,P8,eFo,Zfe,oFo,nUe,ed,Qp,eme,B8,rFo,ome,tFo,sUe,ko,I8,aFo,N8,nFo,fD,sFo,lFo,iFo,q8,dFo,rme,cFo,fFo,mFo,Je,j8,gFo,tme,hFo,pFo,od,_Fo,ame,uFo,bFo,nme,vFo,FFo,TFo,ie,Up,sme,MFo,EFo,mD,CFo,wFo,AFo,Hp,lme,LFo,yFo,gD,xFo,$Fo,kFo,Jp,ime,SFo,RFo,hD,PFo,BFo,IFo,Yp,dme,NFo,qFo,pD,jFo,DFo,GFo,Kp,cme,OFo,VFo,_D,XFo,zFo,WFo,Zp,fme,QFo,UFo,uD,HFo,JFo,YFo,e_,mme,KFo,ZFo,bD,eTo,oTo,rTo,o_,gme,tTo,aTo,vD,nTo,sTo,lTo,r_,hme,iTo,dTo,FD,cTo,fTo,mTo,t_,pme,gTo,hTo,TD,pTo,_To,uTo,a_,_me,bTo,vTo,MD,FTo,TTo,MTo,n_,ume,ETo,CTo,ED,wTo,ATo,LTo,s_,bme,yTo,xTo,CD,$To,kTo,STo,l_,vme,RTo,PTo,wD,BTo,ITo,NTo,i_,Fme,qTo,jTo,AD,DTo,GTo,OTo,d_,Tme,VTo,XTo,LD,zTo,WTo,QTo,c_,Mme,UTo,HTo,yD,JTo,YTo,KTo,f_,Eme,ZTo,eMo,xD,oMo,rMo,tMo,m_,Cme,aMo,nMo,$D,sMo,lMo,iMo,g_,wme,dMo,cMo,kD,fMo,mMo,gMo,h_,hMo,p_,pMo,__,D8,_Mo,Ame,uMo,lUe,rd,u_,Lme,G8,bMo,yme,vMo,iUe,So,O8,FMo,td,TMo,SD,MMo,EMo,RD,CMo,wMo,AMo,V8,LMo,xme,yMo,xMo,$Mo,mt,X8,kMo,$me,SMo,RMo,ad,PMo,kme,BMo,IMo,PD,NMo,qMo,jMo,b_,DMo,Ye,z8,GMo,Sme,OMo,VMo,Va,XMo,Rme,zMo,WMo,Pme,QMo,UMo,Bme,HMo,JMo,YMo,y,v_,Ime,KMo,ZMo,BD,eEo,oEo,rEo,F_,Nme,tEo,aEo,ID,nEo,sEo,lEo,T_,qme,iEo,dEo,ND,cEo,fEo,mEo,M_,jme,gEo,hEo,qD,pEo,_Eo,uEo,E_,Dme,bEo,vEo,jD,FEo,TEo,MEo,C_,Gme,EEo,CEo,DD,wEo,AEo,LEo,w_,Ome,yEo,xEo,GD,$Eo,kEo,SEo,A_,Vme,REo,PEo,OD,BEo,IEo,NEo,L_,Xme,qEo,jEo,VD,DEo,GEo,OEo,y_,zme,VEo,XEo,XD,zEo,WEo,QEo,x_,Wme,UEo,HEo,zD,JEo,YEo,KEo,$_,Qme,ZEo,eCo,WD,oCo,rCo,tCo,k_,Ume,aCo,nCo,QD,sCo,lCo,iCo,S_,Hme,dCo,cCo,UD,fCo,mCo,gCo,R_,Jme,hCo,pCo,HD,_Co,uCo,bCo,P_,Yme,vCo,FCo,JD,TCo,MCo,ECo,B_,Kme,CCo,wCo,YD,ACo,LCo,yCo,I_,Zme,xCo,$Co,KD,kCo,SCo,RCo,N_,ege,PCo,BCo,ZD,ICo,NCo,qCo,q_,oge,jCo,DCo,eG,GCo,OCo,VCo,j_,rge,XCo,zCo,oG,WCo,QCo,UCo,D_,tge,HCo,JCo,rG,YCo,KCo,ZCo,G_,age,e0o,o0o,tG,r0o,t0o,a0o,O_,nge,n0o,s0o,aG,l0o,i0o,d0o,V_,sge,c0o,f0o,nG,m0o,g0o,h0o,X_,lge,p0o,_0o,sG,u0o,b0o,v0o,z_,ige,F0o,T0o,lG,M0o,E0o,C0o,W_,dge,w0o,A0o,iG,L0o,y0o,x0o,Q_,cge,$0o,k0o,dG,S0o,R0o,P0o,U_,fge,B0o,I0o,cG,N0o,q0o,j0o,H_,mge,D0o,G0o,fG,O0o,V0o,X0o,J_,gge,z0o,W0o,mG,Q0o,U0o,H0o,Y_,hge,J0o,Y0o,gG,K0o,Z0o,ewo,K_,pge,owo,rwo,hG,two,awo,nwo,Z_,_ge,swo,lwo,pG,iwo,dwo,cwo,nl,uge,fwo,mwo,_G,gwo,hwo,uG,pwo,_wo,uwo,eu,bge,bwo,vwo,bG,Fwo,Two,Mwo,ou,vge,Ewo,Cwo,vG,wwo,Awo,Lwo,ru,Fge,ywo,xwo,FG,$wo,kwo,Swo,tu,Tge,Rwo,Pwo,TG,Bwo,Iwo,Nwo,au,Mge,qwo,jwo,MG,Dwo,Gwo,Owo,nu,Ege,Vwo,Xwo,EG,zwo,Wwo,Qwo,su,Cge,Uwo,Hwo,CG,Jwo,Ywo,Kwo,lu,wge,Zwo,eAo,wG,oAo,rAo,tAo,iu,Age,aAo,nAo,AG,sAo,lAo,iAo,du,Lge,dAo,cAo,LG,fAo,mAo,gAo,cu,yge,hAo,pAo,yG,_Ao,uAo,bAo,fu,xge,vAo,FAo,xG,TAo,MAo,EAo,mu,$ge,CAo,wAo,$G,AAo,LAo,yAo,gu,kge,xAo,$Ao,kG,kAo,SAo,RAo,hu,Sge,PAo,BAo,SG,IAo,NAo,qAo,pu,Rge,jAo,DAo,RG,GAo,OAo,VAo,_u,Pge,XAo,zAo,PG,WAo,QAo,UAo,uu,Bge,HAo,JAo,BG,YAo,KAo,ZAo,bu,Ige,e7o,o7o,IG,r7o,t7o,a7o,vu,Nge,n7o,s7o,NG,l7o,i7o,d7o,Fu,qge,c7o,f7o,qG,m7o,g7o,h7o,Tu,jge,p7o,_7o,jG,u7o,b7o,v7o,Mu,Dge,F7o,T7o,DG,M7o,E7o,C7o,Eu,Gge,w7o,A7o,GG,L7o,y7o,x7o,Cu,Oge,$7o,k7o,OG,S7o,R7o,P7o,wu,Vge,B7o,I7o,VG,N7o,q7o,j7o,Au,Xge,D7o,G7o,XG,O7o,V7o,X7o,Lu,zge,z7o,W7o,zG,Q7o,U7o,H7o,yu,Wge,J7o,Y7o,WG,K7o,Z7o,eLo,xu,Qge,oLo,rLo,QG,tLo,aLo,nLo,$u,Uge,sLo,lLo,UG,iLo,dLo,cLo,ku,Hge,fLo,mLo,HG,gLo,hLo,pLo,Su,Jge,_Lo,uLo,JG,bLo,vLo,FLo,Ru,Yge,TLo,MLo,YG,ELo,CLo,wLo,Pu,Kge,ALo,LLo,KG,yLo,xLo,$Lo,Bu,Zge,kLo,SLo,ZG,RLo,PLo,BLo,Iu,ehe,ILo,NLo,eO,qLo,jLo,DLo,Nu,ohe,GLo,OLo,oO,VLo,XLo,zLo,qu,rhe,WLo,QLo,rO,ULo,HLo,JLo,ju,the,YLo,KLo,tO,ZLo,eyo,oyo,Du,ahe,ryo,tyo,aO,ayo,nyo,syo,Gu,nhe,lyo,iyo,nO,dyo,cyo,fyo,Ou,she,myo,gyo,sO,hyo,pyo,_yo,Vu,lhe,uyo,byo,lO,vyo,Fyo,Tyo,Xu,ihe,Myo,Eyo,iO,Cyo,wyo,Ayo,zu,dhe,Lyo,yyo,dO,xyo,$yo,kyo,Wu,che,Syo,Ryo,cO,Pyo,Byo,Iyo,Qu,fhe,Nyo,qyo,fO,jyo,Dyo,Gyo,Uu,mhe,Oyo,Vyo,mO,Xyo,zyo,Wyo,Hu,ghe,Qyo,Uyo,gO,Hyo,Jyo,Yyo,Ju,hhe,Kyo,Zyo,hO,e8o,o8o,r8o,Yu,phe,t8o,a8o,pO,n8o,s8o,l8o,Ku,_he,i8o,d8o,_O,c8o,f8o,m8o,Zu,uhe,g8o,h8o,uO,p8o,_8o,u8o,e1,bhe,b8o,v8o,bO,F8o,T8o,M8o,o1,vhe,E8o,C8o,vO,w8o,A8o,L8o,r1,Fhe,y8o,x8o,FO,$8o,k8o,S8o,t1,The,R8o,P8o,TO,B8o,I8o,N8o,a1,Mhe,q8o,j8o,MO,D8o,G8o,O8o,n1,Ehe,V8o,X8o,EO,z8o,W8o,Q8o,s1,Che,U8o,H8o,CO,J8o,Y8o,K8o,l1,whe,Z8o,e9o,wO,o9o,r9o,t9o,i1,Ahe,a9o,n9o,AO,s9o,l9o,i9o,d1,Lhe,d9o,c9o,LO,f9o,m9o,g9o,c1,yhe,h9o,p9o,yO,_9o,u9o,b9o,f1,xhe,v9o,F9o,xO,T9o,M9o,E9o,m1,$he,C9o,w9o,$O,A9o,L9o,y9o,g1,khe,x9o,$9o,kO,k9o,S9o,R9o,h1,She,P9o,B9o,SO,I9o,N9o,q9o,p1,Rhe,j9o,D9o,RO,G9o,O9o,V9o,_1,Phe,X9o,z9o,PO,W9o,Q9o,U9o,u1,Bhe,H9o,J9o,BO,Y9o,K9o,Z9o,b1,Ihe,exo,oxo,IO,rxo,txo,axo,v1,Nhe,nxo,sxo,NO,lxo,ixo,dxo,F1,qhe,cxo,fxo,qO,mxo,gxo,hxo,T1,jhe,pxo,_xo,jO,uxo,bxo,vxo,M1,Dhe,Fxo,Txo,DO,Mxo,Exo,Cxo,E1,Ghe,wxo,Axo,GO,Lxo,yxo,xxo,C1,Ohe,$xo,kxo,OO,Sxo,Rxo,Pxo,w1,Vhe,Bxo,Ixo,VO,Nxo,qxo,jxo,A1,Dxo,Xhe,Gxo,Oxo,zhe,Vxo,Xxo,L1,dUe,nd,y1,Whe,W8,zxo,Qhe,Wxo,cUe,Ro,Q8,Qxo,sd,Uxo,XO,Hxo,Jxo,zO,Yxo,Kxo,Zxo,U8,e$o,Uhe,o$o,r$o,t$o,gt,H8,a$o,Hhe,n$o,s$o,ld,l$o,Jhe,i$o,d$o,WO,c$o,f$o,m$o,x1,g$o,Ke,J8,h$o,Yhe,p$o,_$o,Xa,u$o,Khe,b$o,v$o,Zhe,F$o,T$o,epe,M$o,E$o,C$o,G,$1,ope,w$o,A$o,QO,L$o,y$o,x$o,k1,rpe,$$o,k$o,UO,S$o,R$o,P$o,S1,tpe,B$o,I$o,HO,N$o,q$o,j$o,R1,ape,D$o,G$o,JO,O$o,V$o,X$o,P1,npe,z$o,W$o,YO,Q$o,U$o,H$o,B1,spe,J$o,Y$o,KO,K$o,Z$o,eko,I1,lpe,oko,rko,ZO,tko,ako,nko,N1,ipe,sko,lko,eV,iko,dko,cko,q1,dpe,fko,mko,oV,gko,hko,pko,j1,cpe,_ko,uko,rV,bko,vko,Fko,D1,fpe,Tko,Mko,tV,Eko,Cko,wko,G1,mpe,Ako,Lko,aV,yko,xko,$ko,O1,gpe,kko,Sko,nV,Rko,Pko,Bko,V1,hpe,Iko,Nko,sV,qko,jko,Dko,X1,ppe,Gko,Oko,lV,Vko,Xko,zko,z1,_pe,Wko,Qko,iV,Uko,Hko,Jko,W1,upe,Yko,Kko,dV,Zko,eSo,oSo,Q1,bpe,rSo,tSo,cV,aSo,nSo,sSo,U1,vpe,lSo,iSo,fV,dSo,cSo,fSo,H1,Fpe,mSo,gSo,mV,hSo,pSo,_So,J1,Tpe,uSo,bSo,gV,vSo,FSo,TSo,Y1,Mpe,MSo,ESo,hV,CSo,wSo,ASo,K1,Epe,LSo,ySo,pV,xSo,$So,kSo,Z1,Cpe,SSo,RSo,_V,PSo,BSo,ISo,e4,wpe,NSo,qSo,uV,jSo,DSo,GSo,o4,Ape,OSo,VSo,bV,XSo,zSo,WSo,r4,Lpe,QSo,USo,vV,HSo,JSo,YSo,t4,ype,KSo,ZSo,FV,eRo,oRo,rRo,a4,xpe,tRo,aRo,TV,nRo,sRo,lRo,n4,$pe,iRo,dRo,MV,cRo,fRo,mRo,s4,kpe,gRo,hRo,EV,pRo,_Ro,uRo,l4,Spe,bRo,vRo,CV,FRo,TRo,MRo,i4,Rpe,ERo,CRo,wV,wRo,ARo,LRo,d4,Ppe,yRo,xRo,AV,$Ro,kRo,SRo,c4,Bpe,RRo,PRo,LV,BRo,IRo,NRo,f4,Ipe,qRo,jRo,yV,DRo,GRo,ORo,m4,Npe,VRo,XRo,xV,zRo,WRo,QRo,g4,qpe,URo,HRo,$V,JRo,YRo,KRo,h4,jpe,ZRo,ePo,kV,oPo,rPo,tPo,p4,Dpe,aPo,nPo,SV,sPo,lPo,iPo,_4,Gpe,dPo,cPo,RV,fPo,mPo,gPo,u4,Ope,hPo,pPo,PV,_Po,uPo,bPo,b4,Vpe,vPo,FPo,BV,TPo,MPo,EPo,v4,Xpe,CPo,wPo,IV,APo,LPo,yPo,F4,zpe,xPo,$Po,NV,kPo,SPo,RPo,T4,Wpe,PPo,BPo,qV,IPo,NPo,qPo,M4,Qpe,jPo,DPo,jV,GPo,OPo,VPo,E4,XPo,Upe,zPo,WPo,Hpe,QPo,UPo,C4,fUe,id,w4,Jpe,Y8,HPo,Ype,JPo,mUe,Po,K8,YPo,dd,KPo,DV,ZPo,eBo,GV,oBo,rBo,tBo,Z8,aBo,Kpe,nBo,sBo,lBo,ht,e9,iBo,Zpe,dBo,cBo,cd,fBo,e_e,mBo,gBo,OV,hBo,pBo,_Bo,A4,uBo,Ze,o9,bBo,o_e,vBo,FBo,za,TBo,r_e,MBo,EBo,t_e,CBo,wBo,a_e,ABo,LBo,yBo,z,L4,n_e,xBo,$Bo,VV,kBo,SBo,RBo,y4,s_e,PBo,BBo,XV,IBo,NBo,qBo,x4,l_e,jBo,DBo,zV,GBo,OBo,VBo,$4,i_e,XBo,zBo,WV,WBo,QBo,UBo,k4,d_e,HBo,JBo,QV,YBo,KBo,ZBo,S4,c_e,eIo,oIo,UV,rIo,tIo,aIo,R4,f_e,nIo,sIo,HV,lIo,iIo,dIo,P4,m_e,cIo,fIo,JV,mIo,gIo,hIo,B4,g_e,pIo,_Io,YV,uIo,bIo,vIo,I4,h_e,FIo,TIo,KV,MIo,EIo,CIo,N4,p_e,wIo,AIo,ZV,LIo,yIo,xIo,q4,__e,$Io,kIo,eX,SIo,RIo,PIo,j4,u_e,BIo,IIo,oX,NIo,qIo,jIo,D4,b_e,DIo,GIo,rX,OIo,VIo,XIo,G4,v_e,zIo,WIo,tX,QIo,UIo,HIo,O4,F_e,JIo,YIo,aX,KIo,ZIo,eNo,V4,T_e,oNo,rNo,nX,tNo,aNo,nNo,X4,M_e,sNo,lNo,sX,iNo,dNo,cNo,z4,E_e,fNo,mNo,lX,gNo,hNo,pNo,W4,C_e,_No,uNo,iX,bNo,vNo,FNo,Q4,w_e,TNo,MNo,dX,ENo,CNo,wNo,U4,A_e,ANo,LNo,cX,yNo,xNo,$No,H4,L_e,kNo,SNo,fX,RNo,PNo,BNo,J4,y_e,INo,NNo,mX,qNo,jNo,DNo,Y4,x_e,GNo,ONo,gX,VNo,XNo,zNo,K4,$_e,WNo,QNo,hX,UNo,HNo,JNo,Z4,k_e,YNo,KNo,pX,ZNo,eqo,oqo,e2,S_e,rqo,tqo,_X,aqo,nqo,sqo,o2,R_e,lqo,iqo,uX,dqo,cqo,fqo,r2,P_e,mqo,gqo,bX,hqo,pqo,_qo,t2,B_e,uqo,bqo,vX,vqo,Fqo,Tqo,a2,I_e,Mqo,Eqo,FX,Cqo,wqo,Aqo,n2,N_e,Lqo,yqo,TX,xqo,$qo,kqo,s2,q_e,Sqo,Rqo,MX,Pqo,Bqo,Iqo,l2,j_e,Nqo,qqo,EX,jqo,Dqo,Gqo,i2,D_e,Oqo,Vqo,CX,Xqo,zqo,Wqo,d2,G_e,Qqo,Uqo,wX,Hqo,Jqo,Yqo,c2,O_e,Kqo,Zqo,AX,ejo,ojo,rjo,f2,V_e,tjo,ajo,LX,njo,sjo,ljo,m2,X_e,ijo,djo,yX,cjo,fjo,mjo,g2,gjo,z_e,hjo,pjo,W_e,_jo,ujo,h2,gUe,fd,p2,Q_e,r9,bjo,U_e,vjo,hUe,Bo,t9,Fjo,md,Tjo,xX,Mjo,Ejo,$X,Cjo,wjo,Ajo,a9,Ljo,H_e,yjo,xjo,$jo,pt,n9,kjo,J_e,Sjo,Rjo,gd,Pjo,Y_e,Bjo,Ijo,kX,Njo,qjo,jjo,_2,Djo,eo,s9,Gjo,K_e,Ojo,Vjo,Wa,Xjo,Z_e,zjo,Wjo,eue,Qjo,Ujo,oue,Hjo,Jjo,Yjo,U,u2,rue,Kjo,Zjo,SX,eDo,oDo,rDo,b2,tue,tDo,aDo,RX,nDo,sDo,lDo,v2,aue,iDo,dDo,PX,cDo,fDo,mDo,F2,nue,gDo,hDo,BX,pDo,_Do,uDo,T2,sue,bDo,vDo,IX,FDo,TDo,MDo,M2,lue,EDo,CDo,NX,wDo,ADo,LDo,E2,iue,yDo,xDo,qX,$Do,kDo,SDo,C2,due,RDo,PDo,jX,BDo,IDo,NDo,w2,cue,qDo,jDo,DX,DDo,GDo,ODo,A2,fue,VDo,XDo,GX,zDo,WDo,QDo,L2,mue,UDo,HDo,OX,JDo,YDo,KDo,y2,gue,ZDo,eGo,VX,oGo,rGo,tGo,x2,hue,aGo,nGo,XX,sGo,lGo,iGo,$2,pue,dGo,cGo,zX,fGo,mGo,gGo,k2,_ue,hGo,pGo,WX,_Go,uGo,bGo,S2,uue,vGo,FGo,QX,TGo,MGo,EGo,R2,bue,CGo,wGo,UX,AGo,LGo,yGo,P2,vue,xGo,$Go,HX,kGo,SGo,RGo,B2,Fue,PGo,BGo,JX,IGo,NGo,qGo,I2,Tue,jGo,DGo,YX,GGo,OGo,VGo,N2,Mue,XGo,zGo,KX,WGo,QGo,UGo,q2,Eue,HGo,JGo,ZX,YGo,KGo,ZGo,j2,Cue,eOo,oOo,ez,rOo,tOo,aOo,D2,wue,nOo,sOo,oz,lOo,iOo,dOo,G2,Aue,cOo,fOo,rz,mOo,gOo,hOo,O2,Lue,pOo,_Oo,tz,uOo,bOo,vOo,V2,yue,FOo,TOo,az,MOo,EOo,COo,X2,xue,wOo,AOo,nz,LOo,yOo,xOo,z2,$ue,$Oo,kOo,sz,SOo,ROo,POo,W2,kue,BOo,IOo,lz,NOo,qOo,jOo,Q2,Sue,DOo,GOo,iz,OOo,VOo,XOo,U2,Rue,zOo,WOo,dz,QOo,UOo,HOo,H2,Pue,JOo,YOo,cz,KOo,ZOo,eVo,J2,Bue,oVo,rVo,Iue,tVo,aVo,nVo,Y2,Nue,sVo,lVo,fz,iVo,dVo,cVo,K2,que,fVo,mVo,mz,gVo,hVo,pVo,Z2,jue,_Vo,uVo,gz,bVo,vVo,FVo,eb,Due,TVo,MVo,hz,EVo,CVo,wVo,ob,AVo,Gue,LVo,yVo,Oue,xVo,$Vo,rb,pUe,hd,tb,Vue,l9,kVo,Xue,SVo,_Ue,Io,i9,RVo,pd,PVo,pz,BVo,IVo,_z,NVo,qVo,jVo,d9,DVo,zue,GVo,OVo,VVo,_t,c9,XVo,Wue,zVo,WVo,_d,QVo,Que,UVo,HVo,uz,JVo,YVo,KVo,ab,ZVo,oo,f9,eXo,Uue,oXo,rXo,Qa,tXo,Hue,aXo,nXo,Jue,sXo,lXo,Yue,iXo,dXo,cXo,me,nb,Kue,fXo,mXo,bz,gXo,hXo,pXo,sb,Zue,_Xo,uXo,vz,bXo,vXo,FXo,lb,e1e,TXo,MXo,Fz,EXo,CXo,wXo,ib,o1e,AXo,LXo,Tz,yXo,xXo,$Xo,db,r1e,kXo,SXo,Mz,RXo,PXo,BXo,cb,t1e,IXo,NXo,Ez,qXo,jXo,DXo,fb,a1e,GXo,OXo,Cz,VXo,XXo,zXo,mb,n1e,WXo,QXo,wz,UXo,HXo,JXo,gb,s1e,YXo,KXo,Az,ZXo,ezo,ozo,hb,l1e,rzo,tzo,Lz,azo,nzo,szo,pb,i1e,lzo,izo,yz,dzo,czo,fzo,_b,d1e,mzo,gzo,xz,hzo,pzo,_zo,ub,c1e,uzo,bzo,$z,vzo,Fzo,Tzo,bb,f1e,Mzo,Ezo,kz,Czo,wzo,Azo,vb,m1e,Lzo,yzo,Sz,xzo,$zo,kzo,Fb,g1e,Szo,Rzo,Rz,Pzo,Bzo,Izo,Tb,h1e,Nzo,qzo,Pz,jzo,Dzo,Gzo,Mb,p1e,Ozo,Vzo,Bz,Xzo,zzo,Wzo,Eb,_1e,Qzo,Uzo,Iz,Hzo,Jzo,Yzo,Cb,Kzo,u1e,Zzo,eWo,b1e,oWo,rWo,wb,uUe,ud,Ab,v1e,m9,tWo,F1e,aWo,bUe,No,g9,nWo,bd,sWo,Nz,lWo,iWo,qz,dWo,cWo,fWo,h9,mWo,T1e,gWo,hWo,pWo,ut,p9,_Wo,M1e,uWo,bWo,vd,vWo,E1e,FWo,TWo,jz,MWo,EWo,CWo,Lb,wWo,ro,_9,AWo,C1e,LWo,yWo,Ua,xWo,w1e,$Wo,kWo,A1e,SWo,RWo,L1e,PWo,BWo,IWo,N,yb,y1e,NWo,qWo,Dz,jWo,DWo,GWo,xb,x1e,OWo,VWo,Gz,XWo,zWo,WWo,$b,$1e,QWo,UWo,Oz,HWo,JWo,YWo,kb,k1e,KWo,ZWo,Vz,eQo,oQo,rQo,Sb,S1e,tQo,aQo,Xz,nQo,sQo,lQo,Rb,R1e,iQo,dQo,zz,cQo,fQo,mQo,Pb,P1e,gQo,hQo,Wz,pQo,_Qo,uQo,Bb,B1e,bQo,vQo,Qz,FQo,TQo,MQo,Ib,I1e,EQo,CQo,Uz,wQo,AQo,LQo,Nb,N1e,yQo,xQo,Hz,$Qo,kQo,SQo,qb,q1e,RQo,PQo,Jz,BQo,IQo,NQo,jb,j1e,qQo,jQo,Yz,DQo,GQo,OQo,Db,D1e,VQo,XQo,Kz,zQo,WQo,QQo,Gb,G1e,UQo,HQo,Zz,JQo,YQo,KQo,Ob,O1e,ZQo,eUo,eW,oUo,rUo,tUo,Vb,V1e,aUo,nUo,oW,sUo,lUo,iUo,Xb,X1e,dUo,cUo,rW,fUo,mUo,gUo,zb,z1e,hUo,pUo,tW,_Uo,uUo,bUo,Wb,W1e,vUo,FUo,aW,TUo,MUo,EUo,Qb,Q1e,CUo,wUo,nW,AUo,LUo,yUo,Ub,U1e,xUo,$Uo,sW,kUo,SUo,RUo,Hb,H1e,PUo,BUo,lW,IUo,NUo,qUo,Jb,J1e,jUo,DUo,iW,GUo,OUo,VUo,Yb,Y1e,XUo,zUo,dW,WUo,QUo,UUo,Kb,K1e,HUo,JUo,cW,YUo,KUo,ZUo,Zb,Z1e,eHo,oHo,fW,rHo,tHo,aHo,ev,e4e,nHo,sHo,mW,lHo,iHo,dHo,ov,o4e,cHo,fHo,gW,mHo,gHo,hHo,rv,r4e,pHo,_Ho,hW,uHo,bHo,vHo,tv,t4e,FHo,THo,pW,MHo,EHo,CHo,av,a4e,wHo,AHo,_W,LHo,yHo,xHo,nv,n4e,$Ho,kHo,uW,SHo,RHo,PHo,sv,s4e,BHo,IHo,bW,NHo,qHo,jHo,lv,l4e,DHo,GHo,vW,OHo,VHo,XHo,iv,i4e,zHo,WHo,FW,QHo,UHo,HHo,dv,d4e,JHo,YHo,TW,KHo,ZHo,eJo,cv,c4e,oJo,rJo,MW,tJo,aJo,nJo,fv,f4e,sJo,lJo,EW,iJo,dJo,cJo,mv,m4e,fJo,mJo,CW,gJo,hJo,pJo,gv,g4e,_Jo,uJo,wW,bJo,vJo,FJo,hv,h4e,TJo,MJo,AW,EJo,CJo,wJo,pv,p4e,AJo,LJo,LW,yJo,xJo,$Jo,_v,_4e,kJo,SJo,yW,RJo,PJo,BJo,uv,u4e,IJo,NJo,xW,qJo,jJo,DJo,bv,b4e,GJo,OJo,$W,VJo,XJo,zJo,vv,v4e,WJo,QJo,kW,UJo,HJo,JJo,Fv,F4e,YJo,KJo,SW,ZJo,eYo,oYo,Tv,T4e,rYo,tYo,RW,aYo,nYo,sYo,Mv,M4e,lYo,iYo,PW,dYo,cYo,fYo,Ev,E4e,mYo,gYo,BW,hYo,pYo,_Yo,Cv,C4e,uYo,bYo,IW,vYo,FYo,TYo,wv,w4e,MYo,EYo,NW,CYo,wYo,AYo,Av,LYo,A4e,yYo,xYo,L4e,$Yo,kYo,Lv,vUe,Fd,yv,y4e,u9,SYo,x4e,RYo,FUe,qo,b9,PYo,Td,BYo,qW,IYo,NYo,jW,qYo,jYo,DYo,v9,GYo,$4e,OYo,VYo,XYo,bt,F9,zYo,k4e,WYo,QYo,Md,UYo,S4e,HYo,JYo,DW,YYo,KYo,ZYo,xv,eKo,to,T9,oKo,R4e,rKo,tKo,Ha,aKo,P4e,nKo,sKo,B4e,lKo,iKo,I4e,dKo,cKo,fKo,Z,$v,N4e,mKo,gKo,GW,hKo,pKo,_Ko,kv,q4e,uKo,bKo,OW,vKo,FKo,TKo,Sv,j4e,MKo,EKo,VW,CKo,wKo,AKo,Rv,D4e,LKo,yKo,XW,xKo,$Ko,kKo,Pv,G4e,SKo,RKo,zW,PKo,BKo,IKo,Bv,O4e,NKo,qKo,WW,jKo,DKo,GKo,Iv,V4e,OKo,VKo,QW,XKo,zKo,WKo,Nv,X4e,QKo,UKo,UW,HKo,JKo,YKo,qv,z4e,KKo,ZKo,HW,eZo,oZo,rZo,jv,W4e,tZo,aZo,JW,nZo,sZo,lZo,Dv,Q4e,iZo,dZo,YW,cZo,fZo,mZo,Gv,U4e,gZo,hZo,KW,pZo,_Zo,uZo,Ov,H4e,bZo,vZo,ZW,FZo,TZo,MZo,Vv,J4e,EZo,CZo,eQ,wZo,AZo,LZo,Xv,Y4e,yZo,xZo,oQ,$Zo,kZo,SZo,zv,K4e,RZo,PZo,rQ,BZo,IZo,NZo,Wv,Z4e,qZo,jZo,tQ,DZo,GZo,OZo,Qv,e2e,VZo,XZo,aQ,zZo,WZo,QZo,Uv,o2e,UZo,HZo,nQ,JZo,YZo,KZo,Hv,r2e,ZZo,eer,sQ,oer,rer,ter,Jv,t2e,aer,ner,lQ,ser,ler,ier,Yv,a2e,der,cer,iQ,fer,mer,ger,Kv,n2e,her,per,dQ,_er,uer,ber,Zv,s2e,ver,Fer,cQ,Ter,Mer,Eer,e3,l2e,Cer,wer,fQ,Aer,Ler,yer,o3,i2e,xer,$er,mQ,ker,Ser,Rer,r3,d2e,Per,Ber,gQ,Ier,Ner,qer,t3,c2e,jer,Der,hQ,Ger,Oer,Ver,a3,f2e,Xer,zer,pQ,Wer,Qer,Uer,n3,m2e,Her,Jer,_Q,Yer,Ker,Zer,s3,g2e,eor,oor,uQ,ror,tor,aor,l3,nor,h2e,sor,lor,p2e,ior,dor,i3,TUe,Ed,d3,_2e,M9,cor,u2e,mor,MUe,jo,E9,gor,Cd,hor,bQ,por,_or,vQ,uor,bor,vor,C9,For,b2e,Tor,Mor,Eor,vt,w9,Cor,v2e,wor,Aor,wd,Lor,F2e,yor,xor,FQ,$or,kor,Sor,c3,Ror,ao,A9,Por,T2e,Bor,Ior,Ja,Nor,M2e,qor,jor,E2e,Dor,Gor,C2e,Oor,Vor,Xor,Do,f3,w2e,zor,Wor,TQ,Qor,Uor,Hor,m3,A2e,Jor,Yor,MQ,Kor,Zor,err,g3,L2e,orr,rrr,EQ,trr,arr,nrr,h3,y2e,srr,lrr,CQ,irr,drr,crr,p3,x2e,frr,mrr,wQ,grr,hrr,prr,_3,$2e,_rr,urr,AQ,brr,vrr,Frr,u3,Trr,k2e,Mrr,Err,S2e,Crr,wrr,b3,EUe,Ad,v3,R2e,L9,Arr,P2e,Lrr,CUe,Go,y9,yrr,Ld,xrr,LQ,$rr,krr,yQ,Srr,Rrr,Prr,x9,Brr,B2e,Irr,Nrr,qrr,Ft,$9,jrr,I2e,Drr,Grr,yd,Orr,N2e,Vrr,Xrr,xQ,zrr,Wrr,Qrr,F3,Urr,no,k9,Hrr,q2e,Jrr,Yrr,Ya,Krr,j2e,Zrr,etr,D2e,otr,rtr,G2e,ttr,atr,ntr,H,T3,O2e,str,ltr,$Q,itr,dtr,ctr,M3,V2e,ftr,mtr,kQ,gtr,htr,ptr,E3,X2e,_tr,utr,SQ,btr,vtr,Ftr,C3,z2e,Ttr,Mtr,RQ,Etr,Ctr,wtr,w3,W2e,Atr,Ltr,PQ,ytr,xtr,$tr,A3,Q2e,ktr,Str,BQ,Rtr,Ptr,Btr,L3,U2e,Itr,Ntr,IQ,qtr,jtr,Dtr,y3,H2e,Gtr,Otr,NQ,Vtr,Xtr,ztr,x3,J2e,Wtr,Qtr,qQ,Utr,Htr,Jtr,$3,Y2e,Ytr,Ktr,jQ,Ztr,ear,oar,k3,K2e,rar,tar,DQ,aar,nar,sar,S3,Z2e,lar,iar,GQ,dar,car,far,R3,ebe,mar,gar,OQ,har,par,_ar,P3,obe,uar,bar,VQ,Far,Tar,Mar,B3,rbe,Ear,Car,XQ,war,Aar,Lar,I3,tbe,yar,xar,zQ,$ar,kar,Sar,N3,abe,Rar,Par,WQ,Bar,Iar,Nar,q3,nbe,qar,jar,QQ,Dar,Gar,Oar,j3,sbe,Var,Xar,UQ,zar,War,Qar,D3,lbe,Uar,Har,HQ,Jar,Yar,Kar,G3,ibe,Zar,enr,JQ,onr,rnr,tnr,O3,dbe,anr,nnr,YQ,snr,lnr,inr,V3,cbe,dnr,cnr,KQ,fnr,mnr,gnr,X3,fbe,hnr,pnr,ZQ,_nr,unr,bnr,z3,mbe,vnr,Fnr,eU,Tnr,Mnr,Enr,W3,gbe,Cnr,wnr,oU,Anr,Lnr,ynr,Q3,hbe,xnr,$nr,rU,knr,Snr,Rnr,U3,pbe,Pnr,Bnr,tU,Inr,Nnr,qnr,H3,_be,jnr,Dnr,aU,Gnr,Onr,Vnr,J3,ube,Xnr,znr,nU,Wnr,Qnr,Unr,Y3,bbe,Hnr,Jnr,sU,Ynr,Knr,Znr,K3,vbe,esr,osr,lU,rsr,tsr,asr,Z3,Fbe,nsr,ssr,iU,lsr,isr,dsr,e5,Tbe,csr,fsr,dU,msr,gsr,hsr,o5,Mbe,psr,_sr,cU,usr,bsr,vsr,r5,Ebe,Fsr,Tsr,fU,Msr,Esr,Csr,t5,Cbe,wsr,Asr,mU,Lsr,ysr,xsr,a5,$sr,wbe,ksr,Ssr,Abe,Rsr,Psr,n5,wUe,xd,s5,Lbe,S9,Bsr,ybe,Isr,AUe,Oo,R9,Nsr,$d,qsr,gU,jsr,Dsr,hU,Gsr,Osr,Vsr,P9,Xsr,xbe,zsr,Wsr,Qsr,Tt,B9,Usr,$be,Hsr,Jsr,kd,Ysr,kbe,Ksr,Zsr,pU,elr,olr,rlr,l5,tlr,so,I9,alr,Sbe,nlr,slr,Ka,llr,Rbe,ilr,dlr,Pbe,clr,flr,Bbe,mlr,glr,hlr,V,i5,Ibe,plr,_lr,_U,ulr,blr,vlr,d5,Nbe,Flr,Tlr,uU,Mlr,Elr,Clr,c5,qbe,wlr,Alr,bU,Llr,ylr,xlr,f5,jbe,$lr,klr,vU,Slr,Rlr,Plr,m5,Dbe,Blr,Ilr,FU,Nlr,qlr,jlr,g5,Gbe,Dlr,Glr,TU,Olr,Vlr,Xlr,h5,Obe,zlr,Wlr,MU,Qlr,Ulr,Hlr,p5,Vbe,Jlr,Ylr,EU,Klr,Zlr,eir,_5,Xbe,oir,rir,CU,tir,air,nir,u5,zbe,sir,lir,wU,iir,dir,cir,b5,Wbe,fir,mir,AU,gir,hir,pir,v5,Qbe,_ir,uir,LU,bir,vir,Fir,F5,Ube,Tir,Mir,yU,Eir,Cir,wir,T5,Hbe,Air,Lir,xU,yir,xir,$ir,M5,Jbe,kir,Sir,$U,Rir,Pir,Bir,E5,Ybe,Iir,Nir,kU,qir,jir,Dir,C5,Kbe,Gir,Oir,SU,Vir,Xir,zir,w5,Zbe,Wir,Qir,RU,Uir,Hir,Jir,A5,eve,Yir,Kir,PU,Zir,edr,odr,L5,ove,rdr,tdr,BU,adr,ndr,sdr,y5,rve,ldr,idr,IU,ddr,cdr,fdr,x5,tve,mdr,gdr,NU,hdr,pdr,_dr,$5,ave,udr,bdr,qU,vdr,Fdr,Tdr,k5,nve,Mdr,Edr,jU,Cdr,wdr,Adr,S5,sve,Ldr,ydr,DU,xdr,$dr,kdr,R5,lve,Sdr,Rdr,GU,Pdr,Bdr,Idr,P5,ive,Ndr,qdr,OU,jdr,Ddr,Gdr,B5,dve,Odr,Vdr,VU,Xdr,zdr,Wdr,I5,cve,Qdr,Udr,XU,Hdr,Jdr,Ydr,N5,fve,Kdr,Zdr,zU,ecr,ocr,rcr,q5,mve,tcr,acr,WU,ncr,scr,lcr,j5,gve,icr,dcr,QU,ccr,fcr,mcr,D5,hve,gcr,hcr,UU,pcr,_cr,ucr,G5,pve,bcr,vcr,HU,Fcr,Tcr,Mcr,O5,_ve,Ecr,Ccr,JU,wcr,Acr,Lcr,V5,uve,ycr,xcr,YU,$cr,kcr,Scr,X5,bve,Rcr,Pcr,KU,Bcr,Icr,Ncr,z5,vve,qcr,jcr,ZU,Dcr,Gcr,Ocr,W5,Fve,Vcr,Xcr,eH,zcr,Wcr,Qcr,Q5,Tve,Ucr,Hcr,oH,Jcr,Ycr,Kcr,U5,Mve,Zcr,efr,rH,ofr,rfr,tfr,H5,Eve,afr,nfr,tH,sfr,lfr,ifr,J5,Cve,dfr,cfr,aH,ffr,mfr,gfr,Y5,hfr,wve,pfr,_fr,Ave,ufr,bfr,K5,LUe,Sd,Z5,Lve,N9,vfr,yve,Ffr,yUe,Vo,q9,Tfr,Rd,Mfr,nH,Efr,Cfr,sH,wfr,Afr,Lfr,j9,yfr,xve,xfr,$fr,kfr,Mt,D9,Sfr,$ve,Rfr,Pfr,Pd,Bfr,kve,Ifr,Nfr,lH,qfr,jfr,Dfr,e6,Gfr,lo,G9,Ofr,Sve,Vfr,Xfr,Za,zfr,Rve,Wfr,Qfr,Pve,Ufr,Hfr,Bve,Jfr,Yfr,Kfr,Ive,o6,Nve,Zfr,emr,iH,omr,rmr,tmr,r6,amr,qve,nmr,smr,jve,lmr,imr,t6,xUe,Bd,a6,Dve,O9,dmr,Gve,cmr,$Ue,Xo,V9,fmr,Id,mmr,dH,gmr,hmr,cH,pmr,_mr,umr,X9,bmr,Ove,vmr,Fmr,Tmr,Et,z9,Mmr,Vve,Emr,Cmr,Nd,wmr,Xve,Amr,Lmr,fH,ymr,xmr,$mr,n6,kmr,io,W9,Smr,zve,Rmr,Pmr,en,Bmr,Wve,Imr,Nmr,Qve,qmr,jmr,Uve,Dmr,Gmr,Omr,be,s6,Hve,Vmr,Xmr,mH,zmr,Wmr,Qmr,l6,Jve,Umr,Hmr,gH,Jmr,Ymr,Kmr,i6,Yve,Zmr,egr,hH,ogr,rgr,tgr,d6,Kve,agr,ngr,pH,sgr,lgr,igr,sl,Zve,dgr,cgr,_H,fgr,mgr,uH,ggr,hgr,pgr,c6,e3e,_gr,ugr,bH,bgr,vgr,Fgr,ll,o3e,Tgr,Mgr,vH,Egr,Cgr,FH,wgr,Agr,Lgr,f6,r3e,ygr,xgr,TH,$gr,kgr,Sgr,Ct,t3e,Rgr,Pgr,MH,Bgr,Igr,EH,Ngr,qgr,CH,jgr,Dgr,Ggr,m6,a3e,Ogr,Vgr,wH,Xgr,zgr,Wgr,g6,n3e,Qgr,Ugr,AH,Hgr,Jgr,Ygr,h6,s3e,Kgr,Zgr,LH,ehr,ohr,rhr,p6,l3e,thr,ahr,yH,nhr,shr,lhr,_6,i3e,ihr,dhr,xH,chr,fhr,mhr,u6,d3e,ghr,hhr,$H,phr,_hr,uhr,b6,c3e,bhr,vhr,kH,Fhr,Thr,Mhr,v6,f3e,Ehr,Chr,SH,whr,Ahr,Lhr,F6,yhr,m3e,xhr,$hr,g3e,khr,Shr,T6,kUe,qd,M6,h3e,Q9,Rhr,p3e,Phr,SUe,zo,U9,Bhr,jd,Ihr,RH,Nhr,qhr,PH,jhr,Dhr,Ghr,H9,Ohr,_3e,Vhr,Xhr,zhr,wt,J9,Whr,u3e,Qhr,Uhr,Dd,Hhr,b3e,Jhr,Yhr,BH,Khr,Zhr,epr,E6,opr,co,Y9,rpr,v3e,tpr,apr,on,npr,F3e,spr,lpr,T3e,ipr,dpr,M3e,cpr,fpr,mpr,E3e,C6,C3e,gpr,hpr,IH,ppr,_pr,upr,w6,bpr,w3e,vpr,Fpr,A3e,Tpr,Mpr,A6,RUe,Gd,L6,L3e,K9,Epr,y3e,Cpr,PUe,Wo,Z9,wpr,Od,Apr,NH,Lpr,ypr,qH,xpr,$pr,kpr,ex,Spr,x3e,Rpr,Ppr,Bpr,At,ox,Ipr,$3e,Npr,qpr,Vd,jpr,k3e,Dpr,Gpr,jH,Opr,Vpr,Xpr,y6,zpr,fo,rx,Wpr,S3e,Qpr,Upr,rn,Hpr,R3e,Jpr,Ypr,P3e,Kpr,Zpr,B3e,e_r,o_r,r_r,I3e,x6,N3e,t_r,a_r,DH,n_r,s_r,l_r,$6,i_r,q3e,d_r,c_r,j3e,f_r,m_r,k6,BUe,Xd,S6,D3e,tx,g_r,G3e,h_r,IUe,Qo,ax,p_r,zd,__r,GH,u_r,b_r,OH,v_r,F_r,T_r,nx,M_r,O3e,E_r,C_r,w_r,Lt,sx,A_r,V3e,L_r,y_r,Wd,x_r,X3e,$_r,k_r,VH,S_r,R_r,P_r,R6,B_r,mo,lx,I_r,z3e,N_r,q_r,tn,j_r,W3e,D_r,G_r,Q3e,O_r,V_r,U3e,X_r,z_r,W_r,H3e,P6,J3e,Q_r,U_r,XH,H_r,J_r,Y_r,B6,K_r,Y3e,Z_r,eur,K3e,our,rur,I6,NUe,Qd,N6,Z3e,ix,tur,e5e,aur,qUe,Uo,dx,nur,Ud,sur,zH,lur,iur,WH,dur,cur,fur,cx,mur,o5e,gur,hur,pur,yt,fx,_ur,r5e,uur,bur,Hd,vur,t5e,Fur,Tur,QH,Mur,Eur,Cur,q6,wur,go,mx,Aur,a5e,Lur,yur,an,xur,n5e,$ur,kur,s5e,Sur,Rur,l5e,Pur,Bur,Iur,Pe,j6,i5e,Nur,qur,UH,jur,Dur,Gur,D6,d5e,Our,Vur,HH,Xur,zur,Wur,G6,c5e,Qur,Uur,JH,Hur,Jur,Yur,O6,f5e,Kur,Zur,YH,e1r,o1r,r1r,V6,m5e,t1r,a1r,KH,n1r,s1r,l1r,X6,g5e,i1r,d1r,ZH,c1r,f1r,m1r,z6,h5e,g1r,h1r,eJ,p1r,_1r,u1r,W6,p5e,b1r,v1r,oJ,F1r,T1r,M1r,Q6,_5e,E1r,C1r,rJ,w1r,A1r,L1r,U6,y1r,u5e,x1r,$1r,b5e,k1r,S1r,H6,jUe,Jd,J6,v5e,gx,R1r,F5e,P1r,DUe,Ho,hx,B1r,Yd,I1r,tJ,N1r,q1r,aJ,j1r,D1r,G1r,px,O1r,T5e,V1r,X1r,z1r,xt,_x,W1r,M5e,Q1r,U1r,Kd,H1r,E5e,J1r,Y1r,nJ,K1r,Z1r,e4r,Y6,o4r,ho,ux,r4r,C5e,t4r,a4r,nn,n4r,w5e,s4r,l4r,A5e,i4r,d4r,L5e,c4r,f4r,m4r,st,K6,y5e,g4r,h4r,sJ,p4r,_4r,u4r,Z6,x5e,b4r,v4r,lJ,F4r,T4r,M4r,eF,$5e,E4r,C4r,iJ,w4r,A4r,L4r,oF,k5e,y4r,x4r,dJ,$4r,k4r,S4r,rF,S5e,R4r,P4r,cJ,B4r,I4r,N4r,tF,q4r,R5e,j4r,D4r,P5e,G4r,O4r,aF,GUe,Zd,nF,B5e,bx,V4r,I5e,X4r,OUe,Jo,vx,z4r,ec,W4r,fJ,Q4r,U4r,mJ,H4r,J4r,Y4r,Fx,K4r,N5e,Z4r,e2r,o2r,$t,Tx,r2r,q5e,t2r,a2r,oc,n2r,j5e,s2r,l2r,gJ,i2r,d2r,c2r,sF,f2r,po,Mx,m2r,D5e,g2r,h2r,sn,p2r,G5e,_2r,u2r,O5e,b2r,v2r,V5e,F2r,T2r,M2r,Le,lF,X5e,E2r,C2r,hJ,w2r,A2r,L2r,iF,z5e,y2r,x2r,pJ,$2r,k2r,S2r,dF,W5e,R2r,P2r,_J,B2r,I2r,N2r,cF,Q5e,q2r,j2r,uJ,D2r,G2r,O2r,fF,U5e,V2r,X2r,bJ,z2r,W2r,Q2r,mF,H5e,U2r,H2r,vJ,J2r,Y2r,K2r,gF,J5e,Z2r,ebr,FJ,obr,rbr,tbr,hF,Y5e,abr,nbr,TJ,sbr,lbr,ibr,pF,K5e,dbr,cbr,MJ,fbr,mbr,gbr,_F,Z5e,hbr,pbr,EJ,_br,ubr,bbr,uF,vbr,e6e,Fbr,Tbr,o6e,Mbr,Ebr,bF,VUe,rc,vF,r6e,Ex,Cbr,t6e,wbr,XUe,Yo,Cx,Abr,tc,Lbr,CJ,ybr,xbr,wJ,$br,kbr,Sbr,wx,Rbr,a6e,Pbr,Bbr,Ibr,kt,Ax,Nbr,n6e,qbr,jbr,ac,Dbr,s6e,Gbr,Obr,AJ,Vbr,Xbr,zbr,FF,Wbr,_o,Lx,Qbr,l6e,Ubr,Hbr,ln,Jbr,i6e,Ybr,Kbr,d6e,Zbr,evr,c6e,ovr,rvr,tvr,yx,TF,f6e,avr,nvr,LJ,svr,lvr,ivr,MF,m6e,dvr,cvr,yJ,fvr,mvr,gvr,EF,hvr,g6e,pvr,_vr,h6e,uvr,bvr,CF,zUe,nc,wF,p6e,xx,vvr,_6e,Fvr,WUe,Ko,$x,Tvr,sc,Mvr,xJ,Evr,Cvr,$J,wvr,Avr,Lvr,kx,yvr,u6e,xvr,$vr,kvr,St,Sx,Svr,b6e,Rvr,Pvr,lc,Bvr,v6e,Ivr,Nvr,kJ,qvr,jvr,Dvr,AF,Gvr,uo,Rx,Ovr,F6e,Vvr,Xvr,dn,zvr,T6e,Wvr,Qvr,M6e,Uvr,Hvr,E6e,Jvr,Yvr,Kvr,lt,LF,C6e,Zvr,e3r,SJ,o3r,r3r,t3r,yF,w6e,a3r,n3r,RJ,s3r,l3r,i3r,xF,A6e,d3r,c3r,PJ,f3r,m3r,g3r,$F,L6e,h3r,p3r,BJ,_3r,u3r,b3r,kF,y6e,v3r,F3r,IJ,T3r,M3r,E3r,SF,C3r,x6e,w3r,A3r,$6e,L3r,y3r,RF,QUe,ic,PF,k6e,Px,x3r,S6e,$3r,UUe,Zo,Bx,k3r,dc,S3r,NJ,R3r,P3r,qJ,B3r,I3r,N3r,Ix,q3r,R6e,j3r,D3r,G3r,Rt,Nx,O3r,P6e,V3r,X3r,cc,z3r,B6e,W3r,Q3r,jJ,U3r,H3r,J3r,BF,Y3r,bo,qx,K3r,I6e,Z3r,e5r,cn,o5r,N6e,r5r,t5r,q6e,a5r,n5r,j6e,s5r,l5r,i5r,fn,IF,D6e,d5r,c5r,DJ,f5r,m5r,g5r,NF,G6e,h5r,p5r,GJ,_5r,u5r,b5r,qF,O6e,v5r,F5r,OJ,T5r,M5r,E5r,jF,V6e,C5r,w5r,VJ,A5r,L5r,y5r,DF,x5r,X6e,$5r,k5r,z6e,S5r,R5r,GF,HUe,fc,OF,W6e,jx,P5r,Q6e,B5r,JUe,er,Dx,I5r,mc,N5r,XJ,q5r,j5r,zJ,D5r,G5r,O5r,Gx,V5r,U6e,X5r,z5r,W5r,Pt,Ox,Q5r,H6e,U5r,H5r,gc,J5r,J6e,Y5r,K5r,WJ,Z5r,e6r,o6r,VF,r6r,vo,Vx,t6r,Y6e,a6r,n6r,mn,s6r,K6e,l6r,i6r,Z6e,d6r,c6r,eFe,f6r,m6r,g6r,Xx,XF,oFe,h6r,p6r,QJ,_6r,u6r,b6r,zF,rFe,v6r,F6r,UJ,T6r,M6r,E6r,WF,C6r,tFe,w6r,A6r,aFe,L6r,y6r,QF,YUe,hc,UF,nFe,zx,x6r,sFe,$6r,KUe,or,Wx,k6r,pc,S6r,HJ,R6r,P6r,JJ,B6r,I6r,N6r,Qx,q6r,lFe,j6r,D6r,G6r,Bt,Ux,O6r,iFe,V6r,X6r,_c,z6r,dFe,W6r,Q6r,YJ,U6r,H6r,J6r,HF,Y6r,Fo,Hx,K6r,cFe,Z6r,eFr,gn,oFr,fFe,rFr,tFr,mFe,aFr,nFr,gFe,sFr,lFr,iFr,hFe,JF,pFe,dFr,cFr,KJ,fFr,mFr,gFr,YF,hFr,_Fe,pFr,_Fr,uFe,uFr,bFr,KF,ZUe,uc,ZF,bFe,Jx,vFr,vFe,FFr,eHe,rr,Yx,TFr,bc,MFr,ZJ,EFr,CFr,eY,wFr,AFr,LFr,Kx,yFr,FFe,xFr,$Fr,kFr,It,Zx,SFr,TFe,RFr,PFr,vc,BFr,MFe,IFr,NFr,oY,qFr,jFr,DFr,eT,GFr,To,e$,OFr,EFe,VFr,XFr,hn,zFr,CFe,WFr,QFr,wFe,UFr,HFr,AFe,JFr,YFr,KFr,it,oT,LFe,ZFr,eTr,rY,oTr,rTr,tTr,rT,yFe,aTr,nTr,tY,sTr,lTr,iTr,tT,xFe,dTr,cTr,aY,fTr,mTr,gTr,aT,$Fe,hTr,pTr,nY,_Tr,uTr,bTr,nT,kFe,vTr,FTr,sY,TTr,MTr,ETr,sT,CTr,SFe,wTr,ATr,RFe,LTr,yTr,lT,oHe,Fc,iT,PFe,o$,xTr,BFe,$Tr,rHe,tr,r$,kTr,Tc,STr,lY,RTr,PTr,iY,BTr,ITr,NTr,t$,qTr,IFe,jTr,DTr,GTr,Nt,a$,OTr,NFe,VTr,XTr,Mc,zTr,qFe,WTr,QTr,dY,UTr,HTr,JTr,dT,YTr,Mo,n$,KTr,jFe,ZTr,eMr,pn,oMr,DFe,rMr,tMr,GFe,aMr,nMr,OFe,sMr,lMr,iMr,VFe,cT,XFe,dMr,cMr,cY,fMr,mMr,gMr,fT,hMr,zFe,pMr,_Mr,WFe,uMr,bMr,mT,tHe,Ec,gT,QFe,s$,vMr,UFe,FMr,aHe,ar,l$,TMr,Cc,MMr,fY,EMr,CMr,mY,wMr,AMr,LMr,i$,yMr,HFe,xMr,$Mr,kMr,qt,d$,SMr,JFe,RMr,PMr,wc,BMr,YFe,IMr,NMr,gY,qMr,jMr,DMr,hT,GMr,Rr,c$,OMr,KFe,VMr,XMr,_n,zMr,ZFe,WMr,QMr,eTe,UMr,HMr,oTe,JMr,YMr,KMr,q,pT,rTe,ZMr,eEr,hY,oEr,rEr,tEr,_T,tTe,aEr,nEr,pY,sEr,lEr,iEr,uT,aTe,dEr,cEr,_Y,fEr,mEr,gEr,bT,nTe,hEr,pEr,uY,_Er,uEr,bEr,vT,sTe,vEr,FEr,bY,TEr,MEr,EEr,FT,lTe,CEr,wEr,vY,AEr,LEr,yEr,TT,iTe,xEr,$Er,FY,kEr,SEr,REr,MT,dTe,PEr,BEr,TY,IEr,NEr,qEr,ET,cTe,jEr,DEr,MY,GEr,OEr,VEr,CT,fTe,XEr,zEr,EY,WEr,QEr,UEr,wT,mTe,HEr,JEr,CY,YEr,KEr,ZEr,AT,gTe,eCr,oCr,wY,rCr,tCr,aCr,LT,hTe,nCr,sCr,AY,lCr,iCr,dCr,yT,pTe,cCr,fCr,LY,mCr,gCr,hCr,xT,_Te,pCr,_Cr,yY,uCr,bCr,vCr,$T,uTe,FCr,TCr,xY,MCr,ECr,CCr,kT,bTe,wCr,ACr,$Y,LCr,yCr,xCr,ST,vTe,$Cr,kCr,kY,SCr,RCr,PCr,il,FTe,BCr,ICr,SY,NCr,qCr,RY,jCr,DCr,GCr,RT,TTe,OCr,VCr,PY,XCr,zCr,WCr,PT,MTe,QCr,UCr,BY,HCr,JCr,YCr,BT,ETe,KCr,ZCr,IY,e0r,o0r,r0r,IT,CTe,t0r,a0r,NY,n0r,s0r,l0r,NT,wTe,i0r,d0r,qY,c0r,f0r,m0r,qT,ATe,g0r,h0r,jY,p0r,_0r,u0r,jT,LTe,b0r,v0r,DY,F0r,T0r,M0r,DT,yTe,E0r,C0r,GY,w0r,A0r,L0r,GT,xTe,y0r,x0r,OY,$0r,k0r,S0r,OT,$Te,R0r,P0r,VY,B0r,I0r,N0r,VT,kTe,q0r,j0r,XY,D0r,G0r,O0r,XT,STe,V0r,X0r,zY,z0r,W0r,Q0r,zT,RTe,U0r,H0r,WY,J0r,Y0r,K0r,WT,PTe,Z0r,ewr,QY,owr,rwr,twr,QT,BTe,awr,nwr,UY,swr,lwr,iwr,UT,ITe,dwr,cwr,HY,fwr,mwr,gwr,HT,NTe,hwr,pwr,JY,_wr,uwr,bwr,JT,qTe,vwr,Fwr,YY,Twr,Mwr,Ewr,YT,jTe,Cwr,wwr,KY,Awr,Lwr,ywr,KT,DTe,xwr,$wr,ZY,kwr,Swr,Rwr,ZT,GTe,Pwr,Bwr,eK,Iwr,Nwr,qwr,eM,OTe,jwr,Dwr,oK,Gwr,Owr,Vwr,oM,VTe,Xwr,zwr,rK,Wwr,Qwr,Uwr,rM,XTe,Hwr,Jwr,tK,Ywr,Kwr,Zwr,tM,zTe,eAr,oAr,aK,rAr,tAr,aAr,aM,WTe,nAr,sAr,nK,lAr,iAr,dAr,nM,QTe,cAr,fAr,sK,mAr,gAr,hAr,sM,UTe,pAr,_Ar,lK,uAr,bAr,vAr,lM,HTe,FAr,TAr,iK,MAr,EAr,CAr,iM,JTe,wAr,AAr,dK,LAr,yAr,xAr,dM,YTe,$Ar,kAr,cK,SAr,RAr,PAr,cM,KTe,BAr,IAr,fK,NAr,qAr,jAr,fM,ZTe,DAr,GAr,mK,OAr,VAr,XAr,mM,nHe,Ac,gM,eMe,f$,zAr,oMe,WAr,sHe,nr,m$,QAr,Lc,UAr,gK,HAr,JAr,hK,YAr,KAr,ZAr,g$,e7r,rMe,o7r,r7r,t7r,jt,h$,a7r,tMe,n7r,s7r,yc,l7r,aMe,i7r,d7r,pK,c7r,f7r,m7r,hM,g7r,Pr,p$,h7r,nMe,p7r,_7r,un,u7r,sMe,b7r,v7r,lMe,F7r,T7r,iMe,M7r,E7r,C7r,se,pM,dMe,w7r,A7r,_K,L7r,y7r,x7r,_M,cMe,$7r,k7r,uK,S7r,R7r,P7r,uM,fMe,B7r,I7r,bK,N7r,q7r,j7r,bM,mMe,D7r,G7r,vK,O7r,V7r,X7r,vM,gMe,z7r,W7r,FK,Q7r,U7r,H7r,FM,hMe,J7r,Y7r,TK,K7r,Z7r,eLr,TM,pMe,oLr,rLr,MK,tLr,aLr,nLr,MM,_Me,sLr,lLr,EK,iLr,dLr,cLr,EM,uMe,fLr,mLr,CK,gLr,hLr,pLr,CM,bMe,_Lr,uLr,wK,bLr,vLr,FLr,wM,vMe,TLr,MLr,AK,ELr,CLr,wLr,AM,FMe,ALr,LLr,LK,yLr,xLr,$Lr,LM,TMe,kLr,SLr,yK,RLr,PLr,BLr,yM,MMe,ILr,NLr,xK,qLr,jLr,DLr,xM,EMe,GLr,OLr,$K,VLr,XLr,zLr,$M,CMe,WLr,QLr,kK,ULr,HLr,JLr,kM,wMe,YLr,KLr,SK,ZLr,eyr,oyr,SM,AMe,ryr,tyr,RK,ayr,nyr,syr,RM,LMe,lyr,iyr,PK,dyr,cyr,fyr,PM,yMe,myr,gyr,BK,hyr,pyr,_yr,BM,xMe,uyr,byr,IK,vyr,Fyr,Tyr,IM,$Me,Myr,Eyr,NK,Cyr,wyr,Ayr,NM,kMe,Lyr,yyr,qK,xyr,$yr,kyr,qM,lHe,xc,jM,SMe,_$,Syr,RMe,Ryr,iHe,sr,u$,Pyr,$c,Byr,jK,Iyr,Nyr,DK,qyr,jyr,Dyr,b$,Gyr,PMe,Oyr,Vyr,Xyr,Dt,v$,zyr,BMe,Wyr,Qyr,kc,Uyr,IMe,Hyr,Jyr,GK,Yyr,Kyr,Zyr,DM,e8r,Br,F$,o8r,NMe,r8r,t8r,bn,a8r,qMe,n8r,s8r,jMe,l8r,i8r,DMe,d8r,c8r,f8r,Me,GM,GMe,m8r,g8r,OK,h8r,p8r,_8r,OM,OMe,u8r,b8r,VK,v8r,F8r,T8r,VM,VMe,M8r,E8r,XK,C8r,w8r,A8r,XM,XMe,L8r,y8r,zK,x8r,$8r,k8r,zM,zMe,S8r,R8r,WK,P8r,B8r,I8r,WM,WMe,N8r,q8r,QK,j8r,D8r,G8r,QM,QMe,O8r,V8r,UK,X8r,z8r,W8r,UM,UMe,Q8r,U8r,HK,H8r,J8r,Y8r,HM,HMe,K8r,Z8r,JK,e9r,o9r,r9r,JM,JMe,t9r,a9r,YK,n9r,s9r,l9r,YM,YMe,i9r,d9r,KK,c9r,f9r,m9r,KM,KMe,g9r,h9r,ZK,p9r,_9r,u9r,ZM,ZMe,b9r,v9r,eZ,F9r,T9r,M9r,eE,eEe,E9r,C9r,oZ,w9r,A9r,L9r,oE,dHe,Sc,rE,oEe,T$,y9r,rEe,x9r,cHe,lr,M$,$9r,Rc,k9r,rZ,S9r,R9r,tZ,P9r,B9r,I9r,E$,N9r,tEe,q9r,j9r,D9r,Gt,C$,G9r,aEe,O9r,V9r,Pc,X9r,nEe,z9r,W9r,aZ,Q9r,U9r,H9r,tE,J9r,Ir,w$,Y9r,sEe,K9r,Z9r,vn,exr,lEe,oxr,rxr,iEe,txr,axr,dEe,nxr,sxr,lxr,Ve,aE,cEe,ixr,dxr,nZ,cxr,fxr,mxr,nE,fEe,gxr,hxr,sZ,pxr,_xr,uxr,dl,mEe,bxr,vxr,lZ,Fxr,Txr,iZ,Mxr,Exr,Cxr,sE,gEe,wxr,Axr,dZ,Lxr,yxr,xxr,lE,hEe,$xr,kxr,cZ,Sxr,Rxr,Pxr,iE,pEe,Bxr,Ixr,fZ,Nxr,qxr,jxr,dE,_Ee,Dxr,Gxr,mZ,Oxr,Vxr,Xxr,cE,uEe,zxr,Wxr,gZ,Qxr,Uxr,Hxr,fE,fHe,Bc,mE,bEe,A$,Jxr,vEe,Yxr,mHe,ir,L$,Kxr,Ic,Zxr,hZ,e$r,o$r,pZ,r$r,t$r,a$r,y$,n$r,FEe,s$r,l$r,i$r,Ot,x$,d$r,TEe,c$r,f$r,Nc,m$r,MEe,g$r,h$r,_Z,p$r,_$r,u$r,gE,b$r,Nr,$$,v$r,EEe,F$r,T$r,Fn,M$r,CEe,E$r,C$r,wEe,w$r,A$r,AEe,L$r,y$r,x$r,k$,hE,LEe,$$r,k$r,uZ,S$r,R$r,P$r,pE,yEe,B$r,I$r,bZ,N$r,q$r,j$r,_E,gHe,qc,uE,xEe,S$,D$r,$Ee,G$r,hHe,dr,R$,O$r,jc,V$r,vZ,X$r,z$r,FZ,W$r,Q$r,U$r,P$,H$r,kEe,J$r,Y$r,K$r,Vt,B$,Z$r,SEe,ekr,okr,Dc,rkr,REe,tkr,akr,TZ,nkr,skr,lkr,bE,ikr,qr,I$,dkr,PEe,ckr,fkr,Tn,mkr,BEe,gkr,hkr,IEe,pkr,_kr,NEe,ukr,bkr,vkr,de,vE,qEe,Fkr,Tkr,MZ,Mkr,Ekr,Ckr,FE,jEe,wkr,Akr,EZ,Lkr,ykr,xkr,TE,DEe,$kr,kkr,CZ,Skr,Rkr,Pkr,ME,GEe,Bkr,Ikr,wZ,Nkr,qkr,jkr,EE,OEe,Dkr,Gkr,AZ,Okr,Vkr,Xkr,CE,VEe,zkr,Wkr,LZ,Qkr,Ukr,Hkr,wE,XEe,Jkr,Ykr,yZ,Kkr,Zkr,eSr,AE,zEe,oSr,rSr,xZ,tSr,aSr,nSr,LE,WEe,sSr,lSr,$Z,iSr,dSr,cSr,yE,QEe,fSr,mSr,kZ,gSr,hSr,pSr,xE,UEe,_Sr,uSr,SZ,bSr,vSr,FSr,$E,HEe,TSr,MSr,RZ,ESr,CSr,wSr,kE,JEe,ASr,LSr,PZ,ySr,xSr,$Sr,SE,YEe,kSr,SSr,BZ,RSr,PSr,BSr,RE,KEe,ISr,NSr,IZ,qSr,jSr,DSr,PE,ZEe,GSr,OSr,NZ,VSr,XSr,zSr,BE,eCe,WSr,QSr,qZ,USr,HSr,JSr,IE,oCe,YSr,KSr,jZ,ZSr,eRr,oRr,NE,rCe,rRr,tRr,DZ,aRr,nRr,sRr,qE,tCe,lRr,iRr,GZ,dRr,cRr,fRr,jE,pHe,Gc,DE,aCe,N$,mRr,nCe,gRr,_He,cr,q$,hRr,Oc,pRr,OZ,_Rr,uRr,VZ,bRr,vRr,FRr,j$,TRr,sCe,MRr,ERr,CRr,Xt,D$,wRr,lCe,ARr,LRr,Vc,yRr,iCe,xRr,$Rr,XZ,kRr,SRr,RRr,GE,PRr,jr,G$,BRr,dCe,IRr,NRr,Mn,qRr,cCe,jRr,DRr,fCe,GRr,ORr,mCe,VRr,XRr,zRr,ye,OE,gCe,WRr,QRr,zZ,URr,HRr,JRr,VE,hCe,YRr,KRr,WZ,ZRr,ePr,oPr,XE,pCe,rPr,tPr,QZ,aPr,nPr,sPr,zE,_Ce,lPr,iPr,UZ,dPr,cPr,fPr,WE,uCe,mPr,gPr,HZ,hPr,pPr,_Pr,QE,bCe,uPr,bPr,JZ,vPr,FPr,TPr,UE,vCe,MPr,EPr,YZ,CPr,wPr,APr,HE,FCe,LPr,yPr,KZ,xPr,$Pr,kPr,JE,TCe,SPr,RPr,ZZ,PPr,BPr,IPr,YE,MCe,NPr,qPr,eee,jPr,DPr,GPr,KE,uHe,Xc,ZE,ECe,O$,OPr,CCe,VPr,bHe,fr,V$,XPr,zc,zPr,oee,WPr,QPr,ree,UPr,HPr,JPr,X$,YPr,wCe,KPr,ZPr,eBr,zt,z$,oBr,ACe,rBr,tBr,Wc,aBr,LCe,nBr,sBr,tee,lBr,iBr,dBr,eC,cBr,Dr,W$,fBr,yCe,mBr,gBr,En,hBr,xCe,pBr,_Br,$Ce,uBr,bBr,kCe,vBr,FBr,TBr,te,oC,SCe,MBr,EBr,aee,CBr,wBr,ABr,rC,RCe,LBr,yBr,nee,xBr,$Br,kBr,tC,PCe,SBr,RBr,see,PBr,BBr,IBr,aC,BCe,NBr,qBr,lee,jBr,DBr,GBr,nC,ICe,OBr,VBr,iee,XBr,zBr,WBr,sC,NCe,QBr,UBr,dee,HBr,JBr,YBr,lC,qCe,KBr,ZBr,cee,eIr,oIr,rIr,iC,jCe,tIr,aIr,fee,nIr,sIr,lIr,dC,DCe,iIr,dIr,mee,cIr,fIr,mIr,cC,GCe,gIr,hIr,gee,pIr,_Ir,uIr,fC,OCe,bIr,vIr,hee,FIr,TIr,MIr,mC,VCe,EIr,CIr,pee,wIr,AIr,LIr,gC,XCe,yIr,xIr,_ee,$Ir,kIr,SIr,hC,zCe,RIr,PIr,uee,BIr,IIr,NIr,pC,WCe,qIr,jIr,bee,DIr,GIr,OIr,_C,QCe,VIr,XIr,vee,zIr,WIr,QIr,uC,UCe,UIr,HIr,Fee,JIr,YIr,KIr,bC,HCe,ZIr,eNr,Tee,oNr,rNr,tNr,vC,JCe,aNr,nNr,Mee,sNr,lNr,iNr,FC,YCe,dNr,cNr,Eee,fNr,mNr,gNr,TC,KCe,hNr,pNr,Cee,_Nr,uNr,bNr,MC,ZCe,vNr,FNr,wee,TNr,MNr,ENr,EC,e0e,CNr,wNr,Aee,ANr,LNr,yNr,CC,o0e,xNr,$Nr,Lee,kNr,SNr,RNr,wC,r0e,PNr,BNr,yee,INr,NNr,qNr,AC,t0e,jNr,DNr,xee,GNr,ONr,VNr,LC,vHe,Qc,yC,a0e,Q$,XNr,n0e,zNr,FHe,mr,U$,WNr,Uc,QNr,$ee,UNr,HNr,kee,JNr,YNr,KNr,H$,ZNr,s0e,eqr,oqr,rqr,Wt,J$,tqr,l0e,aqr,nqr,Hc,sqr,i0e,lqr,iqr,See,dqr,cqr,fqr,xC,mqr,Gr,Y$,gqr,d0e,hqr,pqr,Cn,_qr,c0e,uqr,bqr,f0e,vqr,Fqr,m0e,Tqr,Mqr,Eqr,ve,$C,g0e,Cqr,wqr,Ree,Aqr,Lqr,yqr,kC,h0e,xqr,$qr,Pee,kqr,Sqr,Rqr,SC,p0e,Pqr,Bqr,Bee,Iqr,Nqr,qqr,RC,_0e,jqr,Dqr,Iee,Gqr,Oqr,Vqr,PC,u0e,Xqr,zqr,Nee,Wqr,Qqr,Uqr,BC,b0e,Hqr,Jqr,qee,Yqr,Kqr,Zqr,IC,v0e,ejr,ojr,jee,rjr,tjr,ajr,NC,F0e,njr,sjr,Dee,ljr,ijr,djr,qC,T0e,cjr,fjr,Gee,mjr,gjr,hjr,jC,M0e,pjr,_jr,Oee,ujr,bjr,vjr,DC,E0e,Fjr,Tjr,Vee,Mjr,Ejr,Cjr,GC,C0e,wjr,Ajr,Xee,Ljr,yjr,xjr,OC,w0e,$jr,kjr,zee,Sjr,Rjr,Pjr,VC,A0e,Bjr,Ijr,Wee,Njr,qjr,jjr,XC,L0e,Djr,Gjr,Qee,Ojr,Vjr,Xjr,zC,y0e,zjr,Wjr,Uee,Qjr,Ujr,Hjr,WC,x0e,Jjr,Yjr,Hee,Kjr,Zjr,eDr,QC,THe,Jc,UC,$0e,K$,oDr,k0e,rDr,MHe,gr,Z$,tDr,Yc,aDr,Jee,nDr,sDr,Yee,lDr,iDr,dDr,ek,cDr,S0e,fDr,mDr,gDr,Qt,ok,hDr,R0e,pDr,_Dr,Kc,uDr,P0e,bDr,vDr,Kee,FDr,TDr,MDr,HC,EDr,Or,rk,CDr,B0e,wDr,ADr,wn,LDr,I0e,yDr,xDr,N0e,$Dr,kDr,q0e,SDr,RDr,PDr,tk,JC,j0e,BDr,IDr,Zee,NDr,qDr,jDr,YC,D0e,DDr,GDr,eoe,ODr,VDr,XDr,KC,EHe,Zc,ZC,G0e,ak,zDr,O0e,WDr,CHe,hr,nk,QDr,ef,UDr,ooe,HDr,JDr,roe,YDr,KDr,ZDr,sk,eGr,V0e,oGr,rGr,tGr,Ut,lk,aGr,X0e,nGr,sGr,of,lGr,z0e,iGr,dGr,toe,cGr,fGr,mGr,e0,gGr,Vr,ik,hGr,W0e,pGr,_Gr,An,uGr,Q0e,bGr,vGr,U0e,FGr,TGr,H0e,MGr,EGr,CGr,J0e,o0,Y0e,wGr,AGr,aoe,LGr,yGr,xGr,r0,wHe,rf,t0,K0e,dk,$Gr,Z0e,kGr,AHe,pr,ck,SGr,tf,RGr,noe,PGr,BGr,soe,IGr,NGr,qGr,fk,jGr,ewe,DGr,GGr,OGr,Ht,mk,VGr,owe,XGr,zGr,af,WGr,rwe,QGr,UGr,loe,HGr,JGr,YGr,a0,KGr,Xr,gk,ZGr,twe,eOr,oOr,Ln,rOr,awe,tOr,aOr,nwe,nOr,sOr,swe,lOr,iOr,dOr,ce,n0,lwe,cOr,fOr,ioe,mOr,gOr,hOr,s0,iwe,pOr,_Or,doe,uOr,bOr,vOr,l0,dwe,FOr,TOr,coe,MOr,EOr,COr,i0,cwe,wOr,AOr,foe,LOr,yOr,xOr,d0,fwe,$Or,kOr,moe,SOr,ROr,POr,c0,mwe,BOr,IOr,goe,NOr,qOr,jOr,f0,gwe,DOr,GOr,hoe,OOr,VOr,XOr,m0,hwe,zOr,WOr,poe,QOr,UOr,HOr,g0,pwe,JOr,YOr,_oe,KOr,ZOr,eVr,h0,_we,oVr,rVr,uoe,tVr,aVr,nVr,p0,uwe,sVr,lVr,boe,iVr,dVr,cVr,_0,bwe,fVr,mVr,voe,gVr,hVr,pVr,u0,vwe,_Vr,uVr,Foe,bVr,vVr,FVr,b0,Fwe,TVr,MVr,Toe,EVr,CVr,wVr,v0,Twe,AVr,LVr,Moe,yVr,xVr,$Vr,F0,Mwe,kVr,SVr,Eoe,RVr,PVr,BVr,T0,Ewe,IVr,NVr,Coe,qVr,jVr,DVr,M0,Cwe,GVr,OVr,woe,VVr,XVr,zVr,E0,wwe,WVr,QVr,Aoe,UVr,HVr,JVr,C0,Awe,YVr,KVr,Loe,ZVr,eXr,oXr,w0,LHe,nf,A0,Lwe,hk,rXr,ywe,tXr,yHe,_r,pk,aXr,sf,nXr,yoe,sXr,lXr,xoe,iXr,dXr,cXr,_k,fXr,xwe,mXr,gXr,hXr,Jt,uk,pXr,$we,_Xr,uXr,lf,bXr,kwe,vXr,FXr,$oe,TXr,MXr,EXr,L0,CXr,zr,bk,wXr,Swe,AXr,LXr,yn,yXr,Rwe,xXr,$Xr,Pwe,kXr,SXr,Bwe,RXr,PXr,BXr,fe,y0,Iwe,IXr,NXr,koe,qXr,jXr,DXr,x0,Nwe,GXr,OXr,Soe,VXr,XXr,zXr,$0,qwe,WXr,QXr,Roe,UXr,HXr,JXr,k0,jwe,YXr,KXr,Poe,ZXr,ezr,ozr,S0,Dwe,rzr,tzr,Boe,azr,nzr,szr,R0,Gwe,lzr,izr,Ioe,dzr,czr,fzr,P0,Owe,mzr,gzr,Noe,hzr,pzr,_zr,B0,Vwe,uzr,bzr,qoe,vzr,Fzr,Tzr,I0,Xwe,Mzr,Ezr,joe,Czr,wzr,Azr,N0,zwe,Lzr,yzr,Doe,xzr,$zr,kzr,q0,Wwe,Szr,Rzr,Goe,Pzr,Bzr,Izr,j0,Qwe,Nzr,qzr,Ooe,jzr,Dzr,Gzr,D0,Uwe,Ozr,Vzr,Voe,Xzr,zzr,Wzr,G0,Hwe,Qzr,Uzr,Xoe,Hzr,Jzr,Yzr,O0,Jwe,Kzr,Zzr,zoe,eWr,oWr,rWr,V0,Ywe,tWr,aWr,Woe,nWr,sWr,lWr,X0,Kwe,iWr,dWr,Qoe,cWr,fWr,mWr,z0,Zwe,gWr,hWr,Uoe,pWr,_Wr,uWr,W0,eAe,bWr,vWr,Hoe,FWr,TWr,MWr,Q0,oAe,EWr,CWr,Joe,wWr,AWr,LWr,U0,xHe,df,H0,rAe,vk,yWr,tAe,xWr,$He,ur,Fk,$Wr,cf,kWr,Yoe,SWr,RWr,Koe,PWr,BWr,IWr,Tk,NWr,aAe,qWr,jWr,DWr,Yt,Mk,GWr,nAe,OWr,VWr,ff,XWr,sAe,zWr,WWr,Zoe,QWr,UWr,HWr,J0,JWr,Wr,Ek,YWr,lAe,KWr,ZWr,xn,eQr,iAe,oQr,rQr,dAe,tQr,aQr,cAe,nQr,sQr,lQr,fAe,Y0,mAe,iQr,dQr,ere,cQr,fQr,mQr,K0,kHe,mf,Z0,gAe,Ck,gQr,hAe,hQr,SHe,br,wk,pQr,gf,_Qr,ore,uQr,bQr,rre,vQr,FQr,TQr,Ak,MQr,pAe,EQr,CQr,wQr,Kt,Lk,AQr,_Ae,LQr,yQr,hf,xQr,uAe,$Qr,kQr,tre,SQr,RQr,PQr,ew,BQr,Qr,yk,IQr,bAe,NQr,qQr,$n,jQr,vAe,DQr,GQr,FAe,OQr,VQr,TAe,XQr,zQr,WQr,MAe,ow,EAe,QQr,UQr,are,HQr,JQr,YQr,rw,RHe,pf,tw,CAe,xk,KQr,wAe,ZQr,PHe,vr,$k,eUr,_f,oUr,nre,rUr,tUr,sre,aUr,nUr,sUr,kk,lUr,AAe,iUr,dUr,cUr,Zt,Sk,fUr,LAe,mUr,gUr,uf,hUr,yAe,pUr,_Ur,lre,uUr,bUr,vUr,aw,FUr,Ur,Rk,TUr,xAe,MUr,EUr,kn,CUr,$Ae,wUr,AUr,kAe,LUr,yUr,SAe,xUr,$Ur,kUr,re,nw,RAe,SUr,RUr,ire,PUr,BUr,IUr,sw,PAe,NUr,qUr,dre,jUr,DUr,GUr,lw,BAe,OUr,VUr,cre,XUr,zUr,WUr,iw,IAe,QUr,UUr,fre,HUr,JUr,YUr,dw,NAe,KUr,ZUr,mre,eHr,oHr,rHr,cw,qAe,tHr,aHr,gre,nHr,sHr,lHr,fw,jAe,iHr,dHr,hre,cHr,fHr,mHr,mw,DAe,gHr,hHr,pre,pHr,_Hr,uHr,gw,GAe,bHr,vHr,_re,FHr,THr,MHr,hw,OAe,EHr,CHr,ure,wHr,AHr,LHr,pw,VAe,yHr,xHr,bre,$Hr,kHr,SHr,_w,XAe,RHr,PHr,vre,BHr,IHr,NHr,uw,zAe,qHr,jHr,Fre,DHr,GHr,OHr,bw,WAe,VHr,XHr,Tre,zHr,WHr,QHr,vw,QAe,UHr,HHr,Mre,JHr,YHr,KHr,Fw,UAe,ZHr,eJr,Ere,oJr,rJr,tJr,Tw,HAe,aJr,nJr,Cre,sJr,lJr,iJr,Mw,JAe,dJr,cJr,wre,fJr,mJr,gJr,Ew,YAe,hJr,pJr,Are,_Jr,uJr,bJr,Cw,KAe,vJr,FJr,Lre,TJr,MJr,EJr,ww,ZAe,CJr,wJr,yre,AJr,LJr,yJr,Aw,e7e,xJr,$Jr,xre,kJr,SJr,RJr,Lw,o7e,PJr,BJr,$re,IJr,NJr,qJr,yw,r7e,jJr,DJr,kre,GJr,OJr,VJr,xw,t7e,XJr,zJr,Sre,WJr,QJr,UJr,$w,a7e,HJr,JJr,Rre,YJr,KJr,ZJr,kw,n7e,eYr,oYr,Pre,rYr,tYr,aYr,Sw,BHe,bf,Rw,s7e,Pk,nYr,l7e,sYr,IHe,Fr,Bk,lYr,vf,iYr,Bre,dYr,cYr,Ire,fYr,mYr,gYr,Ik,hYr,i7e,pYr,_Yr,uYr,ea,Nk,bYr,d7e,vYr,FYr,Ff,TYr,c7e,MYr,EYr,Nre,CYr,wYr,AYr,Pw,LYr,Hr,qk,yYr,f7e,xYr,$Yr,Sn,kYr,m7e,SYr,RYr,g7e,PYr,BYr,h7e,IYr,NYr,qYr,xe,Bw,p7e,jYr,DYr,qre,GYr,OYr,VYr,Iw,_7e,XYr,zYr,jre,WYr,QYr,UYr,Nw,u7e,HYr,JYr,Dre,YYr,KYr,ZYr,qw,b7e,eKr,oKr,Gre,rKr,tKr,aKr,jw,v7e,nKr,sKr,Ore,lKr,iKr,dKr,Dw,F7e,cKr,fKr,Vre,mKr,gKr,hKr,Gw,T7e,pKr,_Kr,Xre,uKr,bKr,vKr,Ow,M7e,FKr,TKr,zre,MKr,EKr,CKr,Vw,E7e,wKr,AKr,Wre,LKr,yKr,xKr,Xw,C7e,$Kr,kKr,Qre,SKr,RKr,PKr,zw,NHe,Tf,Ww,w7e,jk,BKr,A7e,IKr,qHe,Tr,Dk,NKr,Mf,qKr,Ure,jKr,DKr,Hre,GKr,OKr,VKr,Gk,XKr,L7e,zKr,WKr,QKr,oa,Ok,UKr,y7e,HKr,JKr,Ef,YKr,x7e,KKr,ZKr,Jre,eZr,oZr,rZr,Qw,tZr,Jr,Vk,aZr,$7e,nZr,sZr,Rn,lZr,k7e,iZr,dZr,S7e,cZr,fZr,R7e,mZr,gZr,hZr,Ee,Uw,P7e,pZr,_Zr,Yre,uZr,bZr,vZr,Hw,B7e,FZr,TZr,Kre,MZr,EZr,CZr,Jw,I7e,wZr,AZr,Zre,LZr,yZr,xZr,Yw,N7e,$Zr,kZr,ete,SZr,RZr,PZr,Kw,q7e,BZr,IZr,ote,NZr,qZr,jZr,Zw,j7e,DZr,GZr,rte,OZr,VZr,XZr,eA,D7e,zZr,WZr,tte,QZr,UZr,HZr,oA,G7e,JZr,YZr,ate,KZr,ZZr,eet,rA,O7e,oet,ret,nte,tet,aet,net,tA,V7e,set,iet,ste,det,cet,fet,aA,X7e,met,get,lte,het,pet,_et,nA,z7e,uet,bet,ite,vet,Fet,Tet,sA,W7e,Met,Eet,dte,Cet,wet,Aet,lA,jHe,Cf,iA,Q7e,Xk,Let,U7e,yet,DHe,Mr,zk,xet,wf,$et,cte,ket,Set,fte,Ret,Pet,Bet,Wk,Iet,H7e,Net,qet,jet,ra,Qk,Det,J7e,Get,Oet,Af,Vet,Y7e,Xet,zet,mte,Wet,Qet,Uet,dA,Het,Yr,Uk,Jet,K7e,Yet,Ket,Pn,Zet,Z7e,eot,oot,eLe,rot,tot,oLe,aot,not,sot,$e,cA,rLe,lot,iot,gte,dot,cot,fot,fA,tLe,mot,got,hte,hot,pot,_ot,mA,aLe,uot,bot,pte,vot,Fot,Tot,gA,nLe,Mot,Eot,_te,Cot,wot,Aot,hA,sLe,Lot,yot,ute,xot,$ot,kot,pA,lLe,Sot,Rot,bte,Pot,Bot,Iot,_A,iLe,Not,qot,vte,jot,Dot,Got,uA,dLe,Oot,Vot,Fte,Xot,zot,Wot,bA,cLe,Qot,Uot,Tte,Hot,Jot,Yot,vA,fLe,Kot,Zot,Mte,ert,ort,rrt,FA,GHe,Lf,TA,mLe,Hk,trt,gLe,art,OHe,Er,Jk,nrt,yf,srt,Ete,lrt,irt,Cte,drt,crt,frt,Yk,mrt,hLe,grt,hrt,prt,ta,Kk,_rt,pLe,urt,brt,xf,vrt,_Le,Frt,Trt,wte,Mrt,Ert,Crt,MA,wrt,Kr,Zk,Art,uLe,Lrt,yrt,Bn,xrt,bLe,$rt,krt,vLe,Srt,Rrt,FLe,Prt,Brt,Irt,ke,EA,TLe,Nrt,qrt,Ate,jrt,Drt,Grt,CA,MLe,Ort,Vrt,Lte,Xrt,zrt,Wrt,wA,ELe,Qrt,Urt,yte,Hrt,Jrt,Yrt,AA,CLe,Krt,Zrt,xte,ett,ott,rtt,LA,wLe,ttt,att,$te,ntt,stt,ltt,yA,ALe,itt,dtt,kte,ctt,ftt,mtt,xA,LLe,gtt,htt,Ste,ptt,_tt,utt,$A,yLe,btt,vtt,Rte,Ftt,Ttt,Mtt,kA,xLe,Ett,Ctt,Pte,wtt,Att,Ltt,SA,$Le,ytt,xtt,Bte,$tt,ktt,Stt,RA,VHe,$f,PA,kLe,eS,Rtt,SLe,Ptt,XHe,Cr,oS,Btt,kf,Itt,Ite,Ntt,qtt,Nte,jtt,Dtt,Gtt,rS,Ott,RLe,Vtt,Xtt,ztt,aa,tS,Wtt,PLe,Qtt,Utt,Sf,Htt,BLe,Jtt,Ytt,qte,Ktt,Ztt,eat,BA,oat,Zr,aS,rat,ILe,tat,aat,In,nat,NLe,sat,lat,qLe,iat,dat,jLe,cat,fat,mat,Se,IA,DLe,gat,hat,jte,pat,_at,uat,NA,GLe,bat,vat,Dte,Fat,Tat,Mat,qA,OLe,Eat,Cat,Gte,wat,Aat,Lat,jA,VLe,yat,xat,Ote,$at,kat,Sat,DA,XLe,Rat,Pat,Vte,Bat,Iat,Nat,GA,zLe,qat,jat,Xte,Dat,Gat,Oat,OA,WLe,Vat,Xat,zte,zat,Wat,Qat,VA,QLe,Uat,Hat,Wte,Jat,Yat,Kat,XA,ULe,Zat,ent,Qte,ont,rnt,tnt,zA,HLe,ant,nnt,Ute,snt,lnt,int,WA,zHe,Rf,QA,JLe,nS,dnt,YLe,cnt,WHe,wr,sS,fnt,Pf,mnt,Hte,gnt,hnt,Jte,pnt,_nt,unt,lS,bnt,KLe,vnt,Fnt,Tnt,na,iS,Mnt,ZLe,Ent,Cnt,Bf,wnt,eye,Ant,Lnt,Yte,ynt,xnt,$nt,UA,knt,et,dS,Snt,oye,Rnt,Pnt,Nn,Bnt,rye,Int,Nnt,tye,qnt,jnt,aye,Dnt,Gnt,Ont,Re,HA,nye,Vnt,Xnt,Kte,znt,Wnt,Qnt,JA,sye,Unt,Hnt,Zte,Jnt,Ynt,Knt,YA,lye,Znt,est,eae,ost,rst,tst,KA,iye,ast,nst,oae,sst,lst,ist,ZA,dye,dst,cst,rae,fst,mst,gst,e7,cye,hst,pst,tae,_st,ust,bst,o7,fye,vst,Fst,aae,Tst,Mst,Est,r7,mye,Cst,wst,nae,Ast,Lst,yst,t7,gye,xst,$st,sae,kst,Sst,Rst,a7,hye,Pst,Bst,lae,Ist,Nst,qst,n7,QHe,If,s7,pye,cS,jst,_ye,Dst,UHe,Ar,fS,Gst,Nf,Ost,iae,Vst,Xst,dae,zst,Wst,Qst,mS,Ust,uye,Hst,Jst,Yst,sa,gS,Kst,bye,Zst,elt,qf,olt,vye,rlt,tlt,cae,alt,nlt,slt,l7,llt,ot,hS,ilt,Fye,dlt,clt,qn,flt,Tye,mlt,glt,Mye,hlt,plt,Eye,_lt,ult,blt,Xe,i7,Cye,vlt,Flt,fae,Tlt,Mlt,Elt,d7,wye,Clt,wlt,mae,Alt,Llt,ylt,c7,Aye,xlt,$lt,gae,klt,Slt,Rlt,f7,Lye,Plt,Blt,hae,Ilt,Nlt,qlt,m7,yye,jlt,Dlt,pae,Glt,Olt,Vlt,g7,xye,Xlt,zlt,_ae,Wlt,Qlt,Ult,h7,$ye,Hlt,Jlt,uae,Ylt,Klt,Zlt,p7,kye,eit,oit,bae,rit,tit,ait,_7,HHe,jf,u7,Sye,pS,nit,Rye,sit,JHe,Lr,_S,lit,Df,iit,vae,dit,cit,Fae,fit,mit,git,uS,hit,Pye,pit,_it,uit,la,bS,bit,Bye,vit,Fit,Gf,Tit,Iye,Mit,Eit,Tae,Cit,wit,Ait,b7,Lit,rt,vS,yit,Nye,xit,$it,jn,kit,qye,Sit,Rit,jye,Pit,Bit,Dye,Iit,Nit,qit,ze,v7,Gye,jit,Dit,Mae,Git,Oit,Vit,F7,Oye,Xit,zit,Eae,Wit,Qit,Uit,T7,Vye,Hit,Jit,Cae,Yit,Kit,Zit,M7,Xye,edt,odt,wae,rdt,tdt,adt,E7,zye,ndt,sdt,Aae,ldt,idt,ddt,C7,Wye,cdt,fdt,Lae,mdt,gdt,hdt,w7,Qye,pdt,_dt,yae,udt,bdt,vdt,A7,Uye,Fdt,Tdt,xae,Mdt,Edt,Cdt,L7,YHe,Of,y7,Hye,FS,wdt,Jye,Adt,KHe,yr,TS,Ldt,Vf,ydt,$ae,xdt,$dt,kae,kdt,Sdt,Rdt,MS,Pdt,Yye,Bdt,Idt,Ndt,ia,ES,qdt,Kye,jdt,Ddt,Xf,Gdt,Zye,Odt,Vdt,Sae,Xdt,zdt,Wdt,x7,Qdt,tt,CS,Udt,e8e,Hdt,Jdt,Dn,Ydt,o8e,Kdt,Zdt,r8e,ect,oct,t8e,rct,tct,act,a8e,$7,n8e,nct,sct,Rae,lct,ict,dct,k7,ZHe,zf,S7,s8e,wS,cct,l8e,fct,eJe,xr,AS,mct,Wf,gct,Pae,hct,pct,Bae,_ct,uct,bct,LS,vct,i8e,Fct,Tct,Mct,da,yS,Ect,d8e,Cct,wct,Qf,Act,c8e,Lct,yct,Iae,xct,$ct,kct,R7,Sct,at,xS,Rct,f8e,Pct,Bct,Gn,Ict,m8e,Nct,qct,g8e,jct,Dct,h8e,Gct,Oct,Vct,$S,P7,p8e,Xct,zct,Nae,Wct,Qct,Uct,B7,_8e,Hct,Jct,qae,Yct,Kct,Zct,I7,oJe,Uf,N7,u8e,kS,eft,b8e,oft,rJe,$r,SS,rft,Hf,tft,jae,aft,nft,Dae,sft,lft,ift,RS,dft,v8e,cft,fft,mft,ca,PS,gft,F8e,hft,pft,Jf,_ft,T8e,uft,bft,Gae,vft,Fft,Tft,q7,Mft,nt,BS,Eft,M8e,Cft,wft,On,Aft,E8e,Lft,yft,C8e,xft,$ft,w8e,kft,Sft,Rft,A8e,j7,L8e,Pft,Bft,Oae,Ift,Nft,qft,D7,tJe;return d=new oe({}),ja=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),p8=new oe({}),_8=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),nm=new jft({props:{warning:!0,$$slots:{default:[sta]},$$scope:{ctx:$}}}),u8=new oe({}),b8=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/configuration_auto.py#L625"}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/configuration_auto.py#L648"}}),Th=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[lta]},$$scope:{ctx:$}}}),M8=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/configuration_auto.py#L771"}}),E8=new oe({}),C8=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/tokenization_auto.py#L418"}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16543/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/tokenization_auto.py#L432"}}),tp=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[ita]},$$scope:{ctx:$}}}),y8=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/tokenization_auto.py#L633"}}),x8=new oe({}),$8=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/feature_extraction_auto.py#L199"}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16543/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/feature_extraction_auto.py#L213"}}),Xp=new jft({props:{$$slots:{default:[dta]},$$scope:{ctx:$}}}),zp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[cta]},$$scope:{ctx:$}}}),P8=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/feature_extraction_auto.py#L340"}}),B8=new oe({}),I8=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/processing_auto.py#L91"}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/processing_auto.py#L105"}}),h_=new jft({props:{$$slots:{default:[fta]},$$scope:{ctx:$}}}),p_=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[mta]},$$scope:{ctx:$}}}),D8=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/processing_auto.py#L258"}}),G8=new oe({}),O8=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L808"}}),X8=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),b_=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[gta]},$$scope:{ctx:$}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),L1=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[hta]},$$scope:{ctx:$}}}),W8=new oe({}),Q8=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L815"}}),H8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),x1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[pta]},$$scope:{ctx:$}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),C4=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[_ta]},$$scope:{ctx:$}}}),Y8=new oe({}),K8=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L830"}}),e9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),A4=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[uta]},$$scope:{ctx:$}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),h2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[bta]},$$scope:{ctx:$}}}),r9=new oe({}),t9=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L837"}}),n9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),_2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[vta]},$$scope:{ctx:$}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),rb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Fta]},$$scope:{ctx:$}}}),l9=new oe({}),i9=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L844"}}),c9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),ab=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Tta]},$$scope:{ctx:$}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),wb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Mta]},$$scope:{ctx:$}}}),m9=new oe({}),g9=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L853"}}),p9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Lb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Eta]},$$scope:{ctx:$}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Lv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Cta]},$$scope:{ctx:$}}}),u9=new oe({}),b9=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L898"}}),F9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),xv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[wta]},$$scope:{ctx:$}}}),T9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),i3=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Ata]},$$scope:{ctx:$}}}),M9=new oe({}),E9=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L905"}}),w9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),c3=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Lta]},$$scope:{ctx:$}}}),A9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),b3=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[yta]},$$scope:{ctx:$}}}),L9=new oe({}),y9=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L891"}}),$9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),F3=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[xta]},$$scope:{ctx:$}}}),k9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),n5=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[$ta]},$$scope:{ctx:$}}}),S9=new oe({}),R9=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L862"}}),B9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),l5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[kta]},$$scope:{ctx:$}}}),I9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),K5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Sta]},$$scope:{ctx:$}}}),N9=new oe({}),q9=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L869"}}),D9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),e6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Rta]},$$scope:{ctx:$}}}),G9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),t6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Pta]},$$scope:{ctx:$}}}),O9=new oe({}),V9=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L914"}}),z9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),n6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Bta]},$$scope:{ctx:$}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),T6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Ita]},$$scope:{ctx:$}}}),Q9=new oe({}),U9=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L953"}}),J9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),E6=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[Nta]},$$scope:{ctx:$}}}),Y9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),A6=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[qta]},$$scope:{ctx:$}}}),K9=new oe({}),Z9=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L960"}}),ox=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),y6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[jta]},$$scope:{ctx:$}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),k6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Dta]},$$scope:{ctx:$}}}),tx=new oe({}),ax=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L880"}}),sx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),R6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[Gta]},$$scope:{ctx:$}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),I6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Ota]},$$scope:{ctx:$}}}),ix=new oe({}),dx=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L967"}}),fx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),q6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Vta]},$$scope:{ctx:$}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),H6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Xta]},$$scope:{ctx:$}}}),gx=new oe({}),hx=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L990"}}),_x=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Y6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[zta]},$$scope:{ctx:$}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),aF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Wta]},$$scope:{ctx:$}}}),bx=new oe({}),vx=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L974"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),sF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Qta]},$$scope:{ctx:$}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),bF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Uta]},$$scope:{ctx:$}}}),Ex=new oe({}),Cx=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L981"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),FF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Hta]},$$scope:{ctx:$}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),CF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Jta]},$$scope:{ctx:$}}}),xx=new oe({}),$x=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L999"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),AF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Yta]},$$scope:{ctx:$}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),RF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Kta]},$$scope:{ctx:$}}}),Px=new oe({}),Bx=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L1006"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),BF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Zta]},$$scope:{ctx:$}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),GF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[eaa]},$$scope:{ctx:$}}}),jx=new oe({}),Dx=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L946"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),VF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[oaa]},$$scope:{ctx:$}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),QF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[raa]},$$scope:{ctx:$}}}),zx=new oe({}),Wx=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L921"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),HF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[taa]},$$scope:{ctx:$}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[aaa]},$$scope:{ctx:$}}}),Jx=new oe({}),Yx=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L928"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[naa]},$$scope:{ctx:$}}}),e$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),lT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[saa]},$$scope:{ctx:$}}}),o$=new oe({}),r$=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L937"}}),a$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),dT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[laa]},$$scope:{ctx:$}}}),n$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),mT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[iaa]},$$scope:{ctx:$}}}),s$=new oe({}),l$=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),d$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),hT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[daa]},$$scope:{ctx:$}}}),c$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),mM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[caa]},$$scope:{ctx:$}}}),f$=new oe({}),m$=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L425"}}),h$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),hM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[faa]},$$scope:{ctx:$}}}),p$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),qM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[maa]},$$scope:{ctx:$}}}),_$=new oe({}),u$=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),v$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),DM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[gaa]},$$scope:{ctx:$}}}),F$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),oE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[haa]},$$scope:{ctx:$}}}),T$=new oe({}),M$=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),C$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),tE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[paa]},$$scope:{ctx:$}}}),w$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),fE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_aa]},$$scope:{ctx:$}}}),A$=new oe({}),L$=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L465"}}),x$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),gE=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[uaa]},$$scope:{ctx:$}}}),$$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[baa]},$$scope:{ctx:$}}}),S$=new oe({}),R$=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L481"}}),B$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),bE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[vaa]},$$scope:{ctx:$}}}),I$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),jE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Faa]},$$scope:{ctx:$}}}),N$=new oe({}),q$=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L488"}}),D$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),GE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Taa]},$$scope:{ctx:$}}}),G$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),KE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Maa]},$$scope:{ctx:$}}}),O$=new oe({}),V$=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L497"}}),z$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),eC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Eaa]},$$scope:{ctx:$}}}),W$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),LC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Caa]},$$scope:{ctx:$}}}),Q$=new oe({}),U$=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L533"}}),J$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),xC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[waa]},$$scope:{ctx:$}}}),Y$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),QC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Aaa]},$$scope:{ctx:$}}}),K$=new oe({}),Z$=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L540"}}),ok=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),HC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Laa]},$$scope:{ctx:$}}}),rk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[yaa]},$$scope:{ctx:$}}}),ak=new oe({}),nk=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L513"}}),lk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),e0=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[xaa]},$$scope:{ctx:$}}}),ik=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),r0=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[$aa]},$$scope:{ctx:$}}}),dk=new oe({}),ck=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L524"}}),mk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),a0=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[kaa]},$$scope:{ctx:$}}}),gk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),w0=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Saa]},$$scope:{ctx:$}}}),hk=new oe({}),pk=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L506"}}),uk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),L0=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Raa]},$$scope:{ctx:$}}}),bk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),U0=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Paa]},$$scope:{ctx:$}}}),vk=new oe({}),Fk=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L474"}}),Mk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),J0=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Baa]},$$scope:{ctx:$}}}),Ek=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),K0=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Iaa]},$$scope:{ctx:$}}}),Ck=new oe({}),wk=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L549"}}),Lk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),ew=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Naa]},$$scope:{ctx:$}}}),yk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),rw=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[qaa]},$$scope:{ctx:$}}}),xk=new oe({}),$k=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Sk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),aw=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[jaa]},$$scope:{ctx:$}}}),Rk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Sw=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Daa]},$$scope:{ctx:$}}}),Pk=new oe({}),Bk=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Nk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Pw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Gaa]},$$scope:{ctx:$}}}),qk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),zw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Oaa]},$$scope:{ctx:$}}}),jk=new oe({}),Dk=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Ok=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Qw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Vaa]},$$scope:{ctx:$}}}),Vk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),lA=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Xaa]},$$scope:{ctx:$}}}),Xk=new oe({}),zk=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Qk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),dA=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[zaa]},$$scope:{ctx:$}}}),Uk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),FA=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Waa]},$$scope:{ctx:$}}}),Hk=new oe({}),Jk=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Kk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),MA=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Qaa]},$$scope:{ctx:$}}}),Zk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),RA=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Uaa]},$$scope:{ctx:$}}}),eS=new oe({}),oS=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),tS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),BA=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Haa]},$$scope:{ctx:$}}}),aS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),WA=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Jaa]},$$scope:{ctx:$}}}),nS=new oe({}),sS=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),iS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),UA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Yaa]},$$scope:{ctx:$}}}),dS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),n7=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Kaa]},$$scope:{ctx:$}}}),cS=new oe({}),fS=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),gS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),l7=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Zaa]},$$scope:{ctx:$}}}),hS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),_7=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ena]},$$scope:{ctx:$}}}),pS=new oe({}),_S=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),bS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),b7=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[ona]},$$scope:{ctx:$}}}),vS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),L7=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[rna]},$$scope:{ctx:$}}}),FS=new oe({}),TS=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),ES=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),x7=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[tna]},$$scope:{ctx:$}}}),CS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),k7=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ana]},$$scope:{ctx:$}}}),wS=new oe({}),AS=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),yS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),R7=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[nna]},$$scope:{ctx:$}}}),xS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),I7=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[sna]},$$scope:{ctx:$}}}),kS=new oe({}),SS=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),PS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),q7=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[lna]},$$scope:{ctx:$}}}),BS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),D7=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ina]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Ao=a("span"),Oi=o("Auto Classes"),em=l(),ft=a("p"),Vi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=a("code"),f8=o("from_pretrained()"),om=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),zi=o("Instantiating one of "),Xn=a("a"),m8=o("AutoConfig"),zn=o(", "),Wn=a("a"),g8=o("AutoModel"),Wi=o(`, and
`),Qn=a("a"),h8=o("AutoTokenizer"),Qi=o(" will directly create a class of the relevant architecture. For instance"),rm=l(),F(ja.$$.fragment),Ue=l(),Ae=a("p"),nP=o("will create a model that is an instance of "),Ui=a("a"),sP=o("BertModel"),lP=o("."),Lo=l(),Da=a("p"),iP=o("There is one class of "),tm=a("code"),dP=o("AutoModel"),bKe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),UQe=l(),Hi=a("h2"),am=a("a"),Dse=a("span"),F(p8.$$.fragment),vKe=l(),Gse=a("span"),FKe=o("Extending the Auto Classes"),HQe=l(),Un=a("p"),TKe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Ose=a("code"),MKe=o("NewModel"),EKe=o(", make sure you have a "),Vse=a("code"),CKe=o("NewModelConfig"),wKe=o(` then you can add those to the auto
classes like this:`),JQe=l(),F(_8.$$.fragment),YQe=l(),cP=a("p"),AKe=o("You will then be able to use the auto classes like you would usually do!"),KQe=l(),F(nm.$$.fragment),ZQe=l(),Ji=a("h2"),sm=a("a"),Xse=a("span"),F(u8.$$.fragment),LKe=l(),zse=a("span"),yKe=o("AutoConfig"),eUe=l(),yo=a("div"),F(b8.$$.fragment),xKe=l(),v8=a("p"),$Ke=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),fP=a("a"),kKe=o("from_pretrained()"),SKe=o(" class method."),RKe=l(),F8=a("p"),PKe=o("This class cannot be instantiated directly using "),Wse=a("code"),BKe=o("__init__()"),IKe=o(" (throws an error)."),NKe=l(),kr=a("div"),F(T8.$$.fragment),qKe=l(),Qse=a("p"),jKe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),DKe=l(),Yi=a("p"),GKe=o("The configuration class to instantiate is selected based on the "),Use=a("code"),OKe=o("model_type"),VKe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Hse=a("code"),XKe=o("pretrained_model_name_or_path"),zKe=o(":"),WKe=l(),A=a("ul"),lm=a("li"),Jse=a("strong"),QKe=o("albert"),UKe=o(" \u2014 "),mP=a("a"),HKe=o("AlbertConfig"),JKe=o(" (ALBERT model)"),YKe=l(),im=a("li"),Yse=a("strong"),KKe=o("bart"),ZKe=o(" \u2014 "),gP=a("a"),eZe=o("BartConfig"),oZe=o(" (BART model)"),rZe=l(),dm=a("li"),Kse=a("strong"),tZe=o("beit"),aZe=o(" \u2014 "),hP=a("a"),nZe=o("BeitConfig"),sZe=o(" (BEiT model)"),lZe=l(),cm=a("li"),Zse=a("strong"),iZe=o("bert"),dZe=o(" \u2014 "),pP=a("a"),cZe=o("BertConfig"),fZe=o(" (BERT model)"),mZe=l(),fm=a("li"),ele=a("strong"),gZe=o("bert-generation"),hZe=o(" \u2014 "),_P=a("a"),pZe=o("BertGenerationConfig"),_Ze=o(" (Bert Generation model)"),uZe=l(),mm=a("li"),ole=a("strong"),bZe=o("big_bird"),vZe=o(" \u2014 "),uP=a("a"),FZe=o("BigBirdConfig"),TZe=o(" (BigBird model)"),MZe=l(),gm=a("li"),rle=a("strong"),EZe=o("bigbird_pegasus"),CZe=o(" \u2014 "),bP=a("a"),wZe=o("BigBirdPegasusConfig"),AZe=o(" (BigBird-Pegasus model)"),LZe=l(),hm=a("li"),tle=a("strong"),yZe=o("blenderbot"),xZe=o(" \u2014 "),vP=a("a"),$Ze=o("BlenderbotConfig"),kZe=o(" (Blenderbot model)"),SZe=l(),pm=a("li"),ale=a("strong"),RZe=o("blenderbot-small"),PZe=o(" \u2014 "),FP=a("a"),BZe=o("BlenderbotSmallConfig"),IZe=o(" (BlenderbotSmall model)"),NZe=l(),_m=a("li"),nle=a("strong"),qZe=o("bloom"),jZe=o(" \u2014 "),TP=a("a"),DZe=o("BloomConfig"),GZe=o(" (BLOOM model)"),OZe=l(),um=a("li"),sle=a("strong"),VZe=o("camembert"),XZe=o(" \u2014 "),MP=a("a"),zZe=o("CamembertConfig"),WZe=o(" (CamemBERT model)"),QZe=l(),bm=a("li"),lle=a("strong"),UZe=o("canine"),HZe=o(" \u2014 "),EP=a("a"),JZe=o("CanineConfig"),YZe=o(" (CANINE model)"),KZe=l(),vm=a("li"),ile=a("strong"),ZZe=o("clip"),eeo=o(" \u2014 "),CP=a("a"),oeo=o("CLIPConfig"),reo=o(" (CLIP model)"),teo=l(),Fm=a("li"),dle=a("strong"),aeo=o("codegen"),neo=o(" \u2014 "),wP=a("a"),seo=o("CodeGenConfig"),leo=o(" (CodeGen model)"),ieo=l(),Tm=a("li"),cle=a("strong"),deo=o("convbert"),ceo=o(" \u2014 "),AP=a("a"),feo=o("ConvBertConfig"),meo=o(" (ConvBERT model)"),geo=l(),Mm=a("li"),fle=a("strong"),heo=o("convnext"),peo=o(" \u2014 "),LP=a("a"),_eo=o("ConvNextConfig"),ueo=o(" (ConvNeXT model)"),beo=l(),Em=a("li"),mle=a("strong"),veo=o("ctrl"),Feo=o(" \u2014 "),yP=a("a"),Teo=o("CTRLConfig"),Meo=o(" (CTRL model)"),Eeo=l(),Cm=a("li"),gle=a("strong"),Ceo=o("cvt"),weo=o(" \u2014 "),xP=a("a"),Aeo=o("CvtConfig"),Leo=o(" (CvT model)"),yeo=l(),wm=a("li"),hle=a("strong"),xeo=o("data2vec-audio"),$eo=o(" \u2014 "),$P=a("a"),keo=o("Data2VecAudioConfig"),Seo=o(" (Data2VecAudio model)"),Reo=l(),Am=a("li"),ple=a("strong"),Peo=o("data2vec-text"),Beo=o(" \u2014 "),kP=a("a"),Ieo=o("Data2VecTextConfig"),Neo=o(" (Data2VecText model)"),qeo=l(),Lm=a("li"),_le=a("strong"),jeo=o("data2vec-vision"),Deo=o(" \u2014 "),SP=a("a"),Geo=o("Data2VecVisionConfig"),Oeo=o(" (Data2VecVision model)"),Veo=l(),ym=a("li"),ule=a("strong"),Xeo=o("deberta"),zeo=o(" \u2014 "),RP=a("a"),Weo=o("DebertaConfig"),Qeo=o(" (DeBERTa model)"),Ueo=l(),xm=a("li"),ble=a("strong"),Heo=o("deberta-v2"),Jeo=o(" \u2014 "),PP=a("a"),Yeo=o("DebertaV2Config"),Keo=o(" (DeBERTa-v2 model)"),Zeo=l(),$m=a("li"),vle=a("strong"),eoo=o("decision_transformer"),ooo=o(" \u2014 "),BP=a("a"),roo=o("DecisionTransformerConfig"),too=o(" (Decision Transformer model)"),aoo=l(),km=a("li"),Fle=a("strong"),noo=o("deit"),soo=o(" \u2014 "),IP=a("a"),loo=o("DeiTConfig"),ioo=o(" (DeiT model)"),doo=l(),Sm=a("li"),Tle=a("strong"),coo=o("detr"),foo=o(" \u2014 "),NP=a("a"),moo=o("DetrConfig"),goo=o(" (DETR model)"),hoo=l(),Rm=a("li"),Mle=a("strong"),poo=o("distilbert"),_oo=o(" \u2014 "),qP=a("a"),uoo=o("DistilBertConfig"),boo=o(" (DistilBERT model)"),voo=l(),Pm=a("li"),Ele=a("strong"),Foo=o("donut-swin"),Too=o(" \u2014 "),jP=a("a"),Moo=o("DonutSwinConfig"),Eoo=o(" (DonutSwin model)"),Coo=l(),Bm=a("li"),Cle=a("strong"),woo=o("dpr"),Aoo=o(" \u2014 "),DP=a("a"),Loo=o("DPRConfig"),yoo=o(" (DPR model)"),xoo=l(),Im=a("li"),wle=a("strong"),$oo=o("dpt"),koo=o(" \u2014 "),GP=a("a"),Soo=o("DPTConfig"),Roo=o(" (DPT model)"),Poo=l(),Nm=a("li"),Ale=a("strong"),Boo=o("electra"),Ioo=o(" \u2014 "),OP=a("a"),Noo=o("ElectraConfig"),qoo=o(" (ELECTRA model)"),joo=l(),qm=a("li"),Lle=a("strong"),Doo=o("encoder-decoder"),Goo=o(" \u2014 "),VP=a("a"),Ooo=o("EncoderDecoderConfig"),Voo=o(" (Encoder decoder model)"),Xoo=l(),jm=a("li"),yle=a("strong"),zoo=o("flaubert"),Woo=o(" \u2014 "),XP=a("a"),Qoo=o("FlaubertConfig"),Uoo=o(" (FlauBERT model)"),Hoo=l(),Dm=a("li"),xle=a("strong"),Joo=o("flava"),Yoo=o(" \u2014 "),zP=a("a"),Koo=o("FlavaConfig"),Zoo=o(" (FLAVA model)"),ero=l(),Gm=a("li"),$le=a("strong"),oro=o("fnet"),rro=o(" \u2014 "),WP=a("a"),tro=o("FNetConfig"),aro=o(" (FNet model)"),nro=l(),Om=a("li"),kle=a("strong"),sro=o("fsmt"),lro=o(" \u2014 "),QP=a("a"),iro=o("FSMTConfig"),dro=o(" (FairSeq Machine-Translation model)"),cro=l(),Vm=a("li"),Sle=a("strong"),fro=o("funnel"),mro=o(" \u2014 "),UP=a("a"),gro=o("FunnelConfig"),hro=o(" (Funnel Transformer model)"),pro=l(),Xm=a("li"),Rle=a("strong"),_ro=o("glpn"),uro=o(" \u2014 "),HP=a("a"),bro=o("GLPNConfig"),vro=o(" (GLPN model)"),Fro=l(),zm=a("li"),Ple=a("strong"),Tro=o("gpt2"),Mro=o(" \u2014 "),JP=a("a"),Ero=o("GPT2Config"),Cro=o(" (OpenAI GPT-2 model)"),wro=l(),Wm=a("li"),Ble=a("strong"),Aro=o("gpt_neo"),Lro=o(" \u2014 "),YP=a("a"),yro=o("GPTNeoConfig"),xro=o(" (GPT Neo model)"),$ro=l(),Qm=a("li"),Ile=a("strong"),kro=o("gpt_neox"),Sro=o(" \u2014 "),KP=a("a"),Rro=o("GPTNeoXConfig"),Pro=o(" (GPT NeoX model)"),Bro=l(),Um=a("li"),Nle=a("strong"),Iro=o("gptj"),Nro=o(" \u2014 "),ZP=a("a"),qro=o("GPTJConfig"),jro=o(" (GPT-J model)"),Dro=l(),Hm=a("li"),qle=a("strong"),Gro=o("groupvit"),Oro=o(" \u2014 "),eB=a("a"),Vro=o("GroupViTConfig"),Xro=o(" (GroupViT model)"),zro=l(),Jm=a("li"),jle=a("strong"),Wro=o("hubert"),Qro=o(" \u2014 "),oB=a("a"),Uro=o("HubertConfig"),Hro=o(" (Hubert model)"),Jro=l(),Ym=a("li"),Dle=a("strong"),Yro=o("ibert"),Kro=o(" \u2014 "),rB=a("a"),Zro=o("IBertConfig"),eto=o(" (I-BERT model)"),oto=l(),Km=a("li"),Gle=a("strong"),rto=o("imagegpt"),tto=o(" \u2014 "),tB=a("a"),ato=o("ImageGPTConfig"),nto=o(" (ImageGPT model)"),sto=l(),Zm=a("li"),Ole=a("strong"),lto=o("layoutlm"),ito=o(" \u2014 "),aB=a("a"),dto=o("LayoutLMConfig"),cto=o(" (LayoutLM model)"),fto=l(),eg=a("li"),Vle=a("strong"),mto=o("layoutlmv2"),gto=o(" \u2014 "),nB=a("a"),hto=o("LayoutLMv2Config"),pto=o(" (LayoutLMv2 model)"),_to=l(),og=a("li"),Xle=a("strong"),uto=o("layoutlmv3"),bto=o(" \u2014 "),sB=a("a"),vto=o("LayoutLMv3Config"),Fto=o(" (LayoutLMv3 model)"),Tto=l(),rg=a("li"),zle=a("strong"),Mto=o("led"),Eto=o(" \u2014 "),lB=a("a"),Cto=o("LEDConfig"),wto=o(" (LED model)"),Ato=l(),tg=a("li"),Wle=a("strong"),Lto=o("levit"),yto=o(" \u2014 "),iB=a("a"),xto=o("LevitConfig"),$to=o(" (LeViT model)"),kto=l(),ag=a("li"),Qle=a("strong"),Sto=o("longformer"),Rto=o(" \u2014 "),dB=a("a"),Pto=o("LongformerConfig"),Bto=o(" (Longformer model)"),Ito=l(),ng=a("li"),Ule=a("strong"),Nto=o("longt5"),qto=o(" \u2014 "),cB=a("a"),jto=o("LongT5Config"),Dto=o(" (LongT5 model)"),Gto=l(),sg=a("li"),Hle=a("strong"),Oto=o("luke"),Vto=o(" \u2014 "),fB=a("a"),Xto=o("LukeConfig"),zto=o(" (LUKE model)"),Wto=l(),lg=a("li"),Jle=a("strong"),Qto=o("lxmert"),Uto=o(" \u2014 "),mB=a("a"),Hto=o("LxmertConfig"),Jto=o(" (LXMERT model)"),Yto=l(),ig=a("li"),Yle=a("strong"),Kto=o("m2m_100"),Zto=o(" \u2014 "),gB=a("a"),eao=o("M2M100Config"),oao=o(" (M2M100 model)"),rao=l(),dg=a("li"),Kle=a("strong"),tao=o("marian"),aao=o(" \u2014 "),hB=a("a"),nao=o("MarianConfig"),sao=o(" (Marian model)"),lao=l(),cg=a("li"),Zle=a("strong"),iao=o("maskformer"),dao=o(" \u2014 "),pB=a("a"),cao=o("MaskFormerConfig"),fao=o(" (MaskFormer model)"),mao=l(),fg=a("li"),eie=a("strong"),gao=o("mbart"),hao=o(" \u2014 "),_B=a("a"),pao=o("MBartConfig"),_ao=o(" (mBART model)"),uao=l(),mg=a("li"),oie=a("strong"),bao=o("mctct"),vao=o(" \u2014 "),uB=a("a"),Fao=o("MCTCTConfig"),Tao=o(" (M-CTC-T model)"),Mao=l(),gg=a("li"),rie=a("strong"),Eao=o("megatron-bert"),Cao=o(" \u2014 "),bB=a("a"),wao=o("MegatronBertConfig"),Aao=o(" (Megatron-BERT model)"),Lao=l(),hg=a("li"),tie=a("strong"),yao=o("mobilebert"),xao=o(" \u2014 "),vB=a("a"),$ao=o("MobileBertConfig"),kao=o(" (MobileBERT model)"),Sao=l(),pg=a("li"),aie=a("strong"),Rao=o("mobilevit"),Pao=o(" \u2014 "),FB=a("a"),Bao=o("MobileViTConfig"),Iao=o(" (MobileViT model)"),Nao=l(),_g=a("li"),nie=a("strong"),qao=o("mpnet"),jao=o(" \u2014 "),TB=a("a"),Dao=o("MPNetConfig"),Gao=o(" (MPNet model)"),Oao=l(),ug=a("li"),sie=a("strong"),Vao=o("mt5"),Xao=o(" \u2014 "),MB=a("a"),zao=o("MT5Config"),Wao=o(" (MT5 model)"),Qao=l(),bg=a("li"),lie=a("strong"),Uao=o("mvp"),Hao=o(" \u2014 "),EB=a("a"),Jao=o("MvpConfig"),Yao=o(" (MVP model)"),Kao=l(),vg=a("li"),iie=a("strong"),Zao=o("nezha"),eno=o(" \u2014 "),CB=a("a"),ono=o("NezhaConfig"),rno=o(" (Nezha model)"),tno=l(),Fg=a("li"),die=a("strong"),ano=o("nystromformer"),nno=o(" \u2014 "),wB=a("a"),sno=o("NystromformerConfig"),lno=o(" (Nystr\xF6mformer model)"),ino=l(),Tg=a("li"),cie=a("strong"),dno=o("openai-gpt"),cno=o(" \u2014 "),AB=a("a"),fno=o("OpenAIGPTConfig"),mno=o(" (OpenAI GPT model)"),gno=l(),Mg=a("li"),fie=a("strong"),hno=o("opt"),pno=o(" \u2014 "),LB=a("a"),_no=o("OPTConfig"),uno=o(" (OPT model)"),bno=l(),Eg=a("li"),mie=a("strong"),vno=o("owlvit"),Fno=o(" \u2014 "),yB=a("a"),Tno=o("OwlViTConfig"),Mno=o(" (OWL-ViT model)"),Eno=l(),Cg=a("li"),gie=a("strong"),Cno=o("pegasus"),wno=o(" \u2014 "),xB=a("a"),Ano=o("PegasusConfig"),Lno=o(" (Pegasus model)"),yno=l(),wg=a("li"),hie=a("strong"),xno=o("perceiver"),$no=o(" \u2014 "),$B=a("a"),kno=o("PerceiverConfig"),Sno=o(" (Perceiver model)"),Rno=l(),Ag=a("li"),pie=a("strong"),Pno=o("plbart"),Bno=o(" \u2014 "),kB=a("a"),Ino=o("PLBartConfig"),Nno=o(" (PLBart model)"),qno=l(),Lg=a("li"),_ie=a("strong"),jno=o("poolformer"),Dno=o(" \u2014 "),SB=a("a"),Gno=o("PoolFormerConfig"),Ono=o(" (PoolFormer model)"),Vno=l(),yg=a("li"),uie=a("strong"),Xno=o("prophetnet"),zno=o(" \u2014 "),RB=a("a"),Wno=o("ProphetNetConfig"),Qno=o(" (ProphetNet model)"),Uno=l(),xg=a("li"),bie=a("strong"),Hno=o("qdqbert"),Jno=o(" \u2014 "),PB=a("a"),Yno=o("QDQBertConfig"),Kno=o(" (QDQBert model)"),Zno=l(),$g=a("li"),vie=a("strong"),eso=o("rag"),oso=o(" \u2014 "),BB=a("a"),rso=o("RagConfig"),tso=o(" (RAG model)"),aso=l(),kg=a("li"),Fie=a("strong"),nso=o("realm"),sso=o(" \u2014 "),IB=a("a"),lso=o("RealmConfig"),iso=o(" (REALM model)"),dso=l(),Sg=a("li"),Tie=a("strong"),cso=o("reformer"),fso=o(" \u2014 "),NB=a("a"),mso=o("ReformerConfig"),gso=o(" (Reformer model)"),hso=l(),Rg=a("li"),Mie=a("strong"),pso=o("regnet"),_so=o(" \u2014 "),qB=a("a"),uso=o("RegNetConfig"),bso=o(" (RegNet model)"),vso=l(),Pg=a("li"),Eie=a("strong"),Fso=o("rembert"),Tso=o(" \u2014 "),jB=a("a"),Mso=o("RemBertConfig"),Eso=o(" (RemBERT model)"),Cso=l(),Bg=a("li"),Cie=a("strong"),wso=o("resnet"),Aso=o(" \u2014 "),DB=a("a"),Lso=o("ResNetConfig"),yso=o(" (ResNet model)"),xso=l(),Ig=a("li"),wie=a("strong"),$so=o("retribert"),kso=o(" \u2014 "),GB=a("a"),Sso=o("RetriBertConfig"),Rso=o(" (RetriBERT model)"),Pso=l(),Ng=a("li"),Aie=a("strong"),Bso=o("roberta"),Iso=o(" \u2014 "),OB=a("a"),Nso=o("RobertaConfig"),qso=o(" (RoBERTa model)"),jso=l(),qg=a("li"),Lie=a("strong"),Dso=o("roformer"),Gso=o(" \u2014 "),VB=a("a"),Oso=o("RoFormerConfig"),Vso=o(" (RoFormer model)"),Xso=l(),jg=a("li"),yie=a("strong"),zso=o("segformer"),Wso=o(" \u2014 "),XB=a("a"),Qso=o("SegformerConfig"),Uso=o(" (SegFormer model)"),Hso=l(),Dg=a("li"),xie=a("strong"),Jso=o("sew"),Yso=o(" \u2014 "),zB=a("a"),Kso=o("SEWConfig"),Zso=o(" (SEW model)"),elo=l(),Gg=a("li"),$ie=a("strong"),olo=o("sew-d"),rlo=o(" \u2014 "),WB=a("a"),tlo=o("SEWDConfig"),alo=o(" (SEW-D model)"),nlo=l(),Og=a("li"),kie=a("strong"),slo=o("speech-encoder-decoder"),llo=o(" \u2014 "),QB=a("a"),ilo=o("SpeechEncoderDecoderConfig"),dlo=o(" (Speech Encoder decoder model)"),clo=l(),Vg=a("li"),Sie=a("strong"),flo=o("speech_to_text"),mlo=o(" \u2014 "),UB=a("a"),glo=o("Speech2TextConfig"),hlo=o(" (Speech2Text model)"),plo=l(),Xg=a("li"),Rie=a("strong"),_lo=o("speech_to_text_2"),ulo=o(" \u2014 "),HB=a("a"),blo=o("Speech2Text2Config"),vlo=o(" (Speech2Text2 model)"),Flo=l(),zg=a("li"),Pie=a("strong"),Tlo=o("splinter"),Mlo=o(" \u2014 "),JB=a("a"),Elo=o("SplinterConfig"),Clo=o(" (Splinter model)"),wlo=l(),Wg=a("li"),Bie=a("strong"),Alo=o("squeezebert"),Llo=o(" \u2014 "),YB=a("a"),ylo=o("SqueezeBertConfig"),xlo=o(" (SqueezeBERT model)"),$lo=l(),Qg=a("li"),Iie=a("strong"),klo=o("swin"),Slo=o(" \u2014 "),KB=a("a"),Rlo=o("SwinConfig"),Plo=o(" (Swin Transformer model)"),Blo=l(),Ug=a("li"),Nie=a("strong"),Ilo=o("swinv2"),Nlo=o(" \u2014 "),ZB=a("a"),qlo=o("Swinv2Config"),jlo=o(" (Swin Transformer V2 model)"),Dlo=l(),Hg=a("li"),qie=a("strong"),Glo=o("t5"),Olo=o(" \u2014 "),eI=a("a"),Vlo=o("T5Config"),Xlo=o(" (T5 model)"),zlo=l(),Jg=a("li"),jie=a("strong"),Wlo=o("tapas"),Qlo=o(" \u2014 "),oI=a("a"),Ulo=o("TapasConfig"),Hlo=o(" (TAPAS model)"),Jlo=l(),Yg=a("li"),Die=a("strong"),Ylo=o("trajectory_transformer"),Klo=o(" \u2014 "),rI=a("a"),Zlo=o("TrajectoryTransformerConfig"),eio=o(" (Trajectory Transformer model)"),oio=l(),Kg=a("li"),Gie=a("strong"),rio=o("transfo-xl"),tio=o(" \u2014 "),tI=a("a"),aio=o("TransfoXLConfig"),nio=o(" (Transformer-XL model)"),sio=l(),Zg=a("li"),Oie=a("strong"),lio=o("trocr"),iio=o(" \u2014 "),aI=a("a"),dio=o("TrOCRConfig"),cio=o(" (TrOCR model)"),fio=l(),eh=a("li"),Vie=a("strong"),mio=o("unispeech"),gio=o(" \u2014 "),nI=a("a"),hio=o("UniSpeechConfig"),pio=o(" (UniSpeech model)"),_io=l(),oh=a("li"),Xie=a("strong"),uio=o("unispeech-sat"),bio=o(" \u2014 "),sI=a("a"),vio=o("UniSpeechSatConfig"),Fio=o(" (UniSpeechSat model)"),Tio=l(),rh=a("li"),zie=a("strong"),Mio=o("van"),Eio=o(" \u2014 "),lI=a("a"),Cio=o("VanConfig"),wio=o(" (VAN model)"),Aio=l(),th=a("li"),Wie=a("strong"),Lio=o("videomae"),yio=o(" \u2014 "),iI=a("a"),xio=o("VideoMAEConfig"),$io=o(" (VideoMAE model)"),kio=l(),ah=a("li"),Qie=a("strong"),Sio=o("vilt"),Rio=o(" \u2014 "),dI=a("a"),Pio=o("ViltConfig"),Bio=o(" (ViLT model)"),Iio=l(),nh=a("li"),Uie=a("strong"),Nio=o("vision-encoder-decoder"),qio=o(" \u2014 "),cI=a("a"),jio=o("VisionEncoderDecoderConfig"),Dio=o(" (Vision Encoder decoder model)"),Gio=l(),sh=a("li"),Hie=a("strong"),Oio=o("vision-text-dual-encoder"),Vio=o(" \u2014 "),fI=a("a"),Xio=o("VisionTextDualEncoderConfig"),zio=o(" (VisionTextDualEncoder model)"),Wio=l(),lh=a("li"),Jie=a("strong"),Qio=o("visual_bert"),Uio=o(" \u2014 "),mI=a("a"),Hio=o("VisualBertConfig"),Jio=o(" (VisualBERT model)"),Yio=l(),ih=a("li"),Yie=a("strong"),Kio=o("vit"),Zio=o(" \u2014 "),gI=a("a"),edo=o("ViTConfig"),odo=o(" (ViT model)"),rdo=l(),dh=a("li"),Kie=a("strong"),tdo=o("vit_mae"),ado=o(" \u2014 "),hI=a("a"),ndo=o("ViTMAEConfig"),sdo=o(" (ViTMAE model)"),ldo=l(),ch=a("li"),Zie=a("strong"),ido=o("wav2vec2"),ddo=o(" \u2014 "),pI=a("a"),cdo=o("Wav2Vec2Config"),fdo=o(" (Wav2Vec2 model)"),mdo=l(),fh=a("li"),ede=a("strong"),gdo=o("wav2vec2-conformer"),hdo=o(" \u2014 "),_I=a("a"),pdo=o("Wav2Vec2ConformerConfig"),_do=o(" (Wav2Vec2-Conformer model)"),udo=l(),mh=a("li"),ode=a("strong"),bdo=o("wavlm"),vdo=o(" \u2014 "),uI=a("a"),Fdo=o("WavLMConfig"),Tdo=o(" (WavLM model)"),Mdo=l(),gh=a("li"),rde=a("strong"),Edo=o("xglm"),Cdo=o(" \u2014 "),bI=a("a"),wdo=o("XGLMConfig"),Ado=o(" (XGLM model)"),Ldo=l(),hh=a("li"),tde=a("strong"),ydo=o("xlm"),xdo=o(" \u2014 "),vI=a("a"),$do=o("XLMConfig"),kdo=o(" (XLM model)"),Sdo=l(),ph=a("li"),ade=a("strong"),Rdo=o("xlm-prophetnet"),Pdo=o(" \u2014 "),FI=a("a"),Bdo=o("XLMProphetNetConfig"),Ido=o(" (XLM-ProphetNet model)"),Ndo=l(),_h=a("li"),nde=a("strong"),qdo=o("xlm-roberta"),jdo=o(" \u2014 "),TI=a("a"),Ddo=o("XLMRobertaConfig"),Gdo=o(" (XLM-RoBERTa model)"),Odo=l(),uh=a("li"),sde=a("strong"),Vdo=o("xlm-roberta-xl"),Xdo=o(" \u2014 "),MI=a("a"),zdo=o("XLMRobertaXLConfig"),Wdo=o(" (XLM-RoBERTa-XL model)"),Qdo=l(),bh=a("li"),lde=a("strong"),Udo=o("xlnet"),Hdo=o(" \u2014 "),EI=a("a"),Jdo=o("XLNetConfig"),Ydo=o(" (XLNet model)"),Kdo=l(),vh=a("li"),ide=a("strong"),Zdo=o("yolos"),eco=o(" \u2014 "),CI=a("a"),oco=o("YolosConfig"),rco=o(" (YOLOS model)"),tco=l(),Fh=a("li"),dde=a("strong"),aco=o("yoso"),nco=o(" \u2014 "),wI=a("a"),sco=o("YosoConfig"),lco=o(" (YOSO model)"),ico=l(),F(Th.$$.fragment),dco=l(),Mh=a("div"),F(M8.$$.fragment),cco=l(),cde=a("p"),fco=o("Register a new configuration for this class."),oUe=l(),Ki=a("h2"),Eh=a("a"),fde=a("span"),F(E8.$$.fragment),mco=l(),mde=a("span"),gco=o("AutoTokenizer"),rUe=l(),xo=a("div"),F(C8.$$.fragment),hco=l(),w8=a("p"),pco=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),AI=a("a"),_co=o("AutoTokenizer.from_pretrained()"),uco=o(" class method."),bco=l(),A8=a("p"),vco=o("This class cannot be instantiated directly using "),gde=a("code"),Fco=o("__init__()"),Tco=o(" (throws an error)."),Mco=l(),Sr=a("div"),F(L8.$$.fragment),Eco=l(),hde=a("p"),Cco=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),wco=l(),Ga=a("p"),Aco=o("The tokenizer class to instantiate is selected based on the "),pde=a("code"),Lco=o("model_type"),yco=o(` property of the config object (either
passed as an argument or loaded from `),_de=a("code"),xco=o("pretrained_model_name_or_path"),$co=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ude=a("code"),kco=o("pretrained_model_name_or_path"),Sco=o(":"),Rco=l(),k=a("ul"),Hn=a("li"),bde=a("strong"),Pco=o("albert"),Bco=o(" \u2014 "),LI=a("a"),Ico=o("AlbertTokenizer"),Nco=o(" or "),yI=a("a"),qco=o("AlbertTokenizerFast"),jco=o(" (ALBERT model)"),Dco=l(),Jn=a("li"),vde=a("strong"),Gco=o("bart"),Oco=o(" \u2014 "),xI=a("a"),Vco=o("BartTokenizer"),Xco=o(" or "),$I=a("a"),zco=o("BartTokenizerFast"),Wco=o(" (BART model)"),Qco=l(),Yn=a("li"),Fde=a("strong"),Uco=o("barthez"),Hco=o(" \u2014 "),kI=a("a"),Jco=o("BarthezTokenizer"),Yco=o(" or "),SI=a("a"),Kco=o("BarthezTokenizerFast"),Zco=o(" (BARThez model)"),efo=l(),Ch=a("li"),Tde=a("strong"),ofo=o("bartpho"),rfo=o(" \u2014 "),RI=a("a"),tfo=o("BartphoTokenizer"),afo=o(" (BARTpho model)"),nfo=l(),Kn=a("li"),Mde=a("strong"),sfo=o("bert"),lfo=o(" \u2014 "),PI=a("a"),ifo=o("BertTokenizer"),dfo=o(" or "),BI=a("a"),cfo=o("BertTokenizerFast"),ffo=o(" (BERT model)"),mfo=l(),wh=a("li"),Ede=a("strong"),gfo=o("bert-generation"),hfo=o(" \u2014 "),II=a("a"),pfo=o("BertGenerationTokenizer"),_fo=o(" (Bert Generation model)"),ufo=l(),Ah=a("li"),Cde=a("strong"),bfo=o("bert-japanese"),vfo=o(" \u2014 "),NI=a("a"),Ffo=o("BertJapaneseTokenizer"),Tfo=o(" (BertJapanese model)"),Mfo=l(),Lh=a("li"),wde=a("strong"),Efo=o("bertweet"),Cfo=o(" \u2014 "),qI=a("a"),wfo=o("BertweetTokenizer"),Afo=o(" (BERTweet model)"),Lfo=l(),Zn=a("li"),Ade=a("strong"),yfo=o("big_bird"),xfo=o(" \u2014 "),jI=a("a"),$fo=o("BigBirdTokenizer"),kfo=o(" or "),DI=a("a"),Sfo=o("BigBirdTokenizerFast"),Rfo=o(" (BigBird model)"),Pfo=l(),es=a("li"),Lde=a("strong"),Bfo=o("bigbird_pegasus"),Ifo=o(" \u2014 "),GI=a("a"),Nfo=o("PegasusTokenizer"),qfo=o(" or "),OI=a("a"),jfo=o("PegasusTokenizerFast"),Dfo=o(" (BigBird-Pegasus model)"),Gfo=l(),os=a("li"),yde=a("strong"),Ofo=o("blenderbot"),Vfo=o(" \u2014 "),VI=a("a"),Xfo=o("BlenderbotTokenizer"),zfo=o(" or "),XI=a("a"),Wfo=o("BlenderbotTokenizerFast"),Qfo=o(" (Blenderbot model)"),Ufo=l(),yh=a("li"),xde=a("strong"),Hfo=o("blenderbot-small"),Jfo=o(" \u2014 "),zI=a("a"),Yfo=o("BlenderbotSmallTokenizer"),Kfo=o(" (BlenderbotSmall model)"),Zfo=l(),xh=a("li"),$de=a("strong"),emo=o("bloom"),omo=o(" \u2014 "),WI=a("a"),rmo=o("BloomTokenizerFast"),tmo=o(" (BLOOM model)"),amo=l(),$h=a("li"),kde=a("strong"),nmo=o("byt5"),smo=o(" \u2014 "),QI=a("a"),lmo=o("ByT5Tokenizer"),imo=o(" (ByT5 model)"),dmo=l(),rs=a("li"),Sde=a("strong"),cmo=o("camembert"),fmo=o(" \u2014 "),UI=a("a"),mmo=o("CamembertTokenizer"),gmo=o(" or "),HI=a("a"),hmo=o("CamembertTokenizerFast"),pmo=o(" (CamemBERT model)"),_mo=l(),kh=a("li"),Rde=a("strong"),umo=o("canine"),bmo=o(" \u2014 "),JI=a("a"),vmo=o("CanineTokenizer"),Fmo=o(" (CANINE model)"),Tmo=l(),ts=a("li"),Pde=a("strong"),Mmo=o("clip"),Emo=o(" \u2014 "),YI=a("a"),Cmo=o("CLIPTokenizer"),wmo=o(" or "),KI=a("a"),Amo=o("CLIPTokenizerFast"),Lmo=o(" (CLIP model)"),ymo=l(),as=a("li"),Bde=a("strong"),xmo=o("codegen"),$mo=o(" \u2014 "),ZI=a("a"),kmo=o("CodeGenTokenizer"),Smo=o(" or "),eN=a("a"),Rmo=o("CodeGenTokenizerFast"),Pmo=o(" (CodeGen model)"),Bmo=l(),ns=a("li"),Ide=a("strong"),Imo=o("convbert"),Nmo=o(" \u2014 "),oN=a("a"),qmo=o("ConvBertTokenizer"),jmo=o(" or "),rN=a("a"),Dmo=o("ConvBertTokenizerFast"),Gmo=o(" (ConvBERT model)"),Omo=l(),ss=a("li"),Nde=a("strong"),Vmo=o("cpm"),Xmo=o(" \u2014 "),tN=a("a"),zmo=o("CpmTokenizer"),Wmo=o(" or "),aN=a("a"),Qmo=o("CpmTokenizerFast"),Umo=o(" (CPM model)"),Hmo=l(),Sh=a("li"),qde=a("strong"),Jmo=o("ctrl"),Ymo=o(" \u2014 "),nN=a("a"),Kmo=o("CTRLTokenizer"),Zmo=o(" (CTRL model)"),ego=l(),ls=a("li"),jde=a("strong"),ogo=o("data2vec-text"),rgo=o(" \u2014 "),sN=a("a"),tgo=o("RobertaTokenizer"),ago=o(" or "),lN=a("a"),ngo=o("RobertaTokenizerFast"),sgo=o(" (Data2VecText model)"),lgo=l(),is=a("li"),Dde=a("strong"),igo=o("deberta"),dgo=o(" \u2014 "),iN=a("a"),cgo=o("DebertaTokenizer"),fgo=o(" or "),dN=a("a"),mgo=o("DebertaTokenizerFast"),ggo=o(" (DeBERTa model)"),hgo=l(),ds=a("li"),Gde=a("strong"),pgo=o("deberta-v2"),_go=o(" \u2014 "),cN=a("a"),ugo=o("DebertaV2Tokenizer"),bgo=o(" or "),fN=a("a"),vgo=o("DebertaV2TokenizerFast"),Fgo=o(" (DeBERTa-v2 model)"),Tgo=l(),cs=a("li"),Ode=a("strong"),Mgo=o("distilbert"),Ego=o(" \u2014 "),mN=a("a"),Cgo=o("DistilBertTokenizer"),wgo=o(" or "),gN=a("a"),Ago=o("DistilBertTokenizerFast"),Lgo=o(" (DistilBERT model)"),ygo=l(),fs=a("li"),Vde=a("strong"),xgo=o("dpr"),$go=o(" \u2014 "),hN=a("a"),kgo=o("DPRQuestionEncoderTokenizer"),Sgo=o(" or "),pN=a("a"),Rgo=o("DPRQuestionEncoderTokenizerFast"),Pgo=o(" (DPR model)"),Bgo=l(),ms=a("li"),Xde=a("strong"),Igo=o("electra"),Ngo=o(" \u2014 "),_N=a("a"),qgo=o("ElectraTokenizer"),jgo=o(" or "),uN=a("a"),Dgo=o("ElectraTokenizerFast"),Ggo=o(" (ELECTRA model)"),Ogo=l(),Rh=a("li"),zde=a("strong"),Vgo=o("flaubert"),Xgo=o(" \u2014 "),bN=a("a"),zgo=o("FlaubertTokenizer"),Wgo=o(" (FlauBERT model)"),Qgo=l(),gs=a("li"),Wde=a("strong"),Ugo=o("fnet"),Hgo=o(" \u2014 "),vN=a("a"),Jgo=o("FNetTokenizer"),Ygo=o(" or "),FN=a("a"),Kgo=o("FNetTokenizerFast"),Zgo=o(" (FNet model)"),eho=l(),Ph=a("li"),Qde=a("strong"),oho=o("fsmt"),rho=o(" \u2014 "),TN=a("a"),tho=o("FSMTTokenizer"),aho=o(" (FairSeq Machine-Translation model)"),nho=l(),hs=a("li"),Ude=a("strong"),sho=o("funnel"),lho=o(" \u2014 "),MN=a("a"),iho=o("FunnelTokenizer"),dho=o(" or "),EN=a("a"),cho=o("FunnelTokenizerFast"),fho=o(" (Funnel Transformer model)"),mho=l(),ps=a("li"),Hde=a("strong"),gho=o("gpt2"),hho=o(" \u2014 "),CN=a("a"),pho=o("GPT2Tokenizer"),_ho=o(" or "),wN=a("a"),uho=o("GPT2TokenizerFast"),bho=o(" (OpenAI GPT-2 model)"),vho=l(),_s=a("li"),Jde=a("strong"),Fho=o("gpt_neo"),Tho=o(" \u2014 "),AN=a("a"),Mho=o("GPT2Tokenizer"),Eho=o(" or "),LN=a("a"),Cho=o("GPT2TokenizerFast"),who=o(" (GPT Neo model)"),Aho=l(),Bh=a("li"),Yde=a("strong"),Lho=o("gpt_neox"),yho=o(" \u2014 "),yN=a("a"),xho=o("GPTNeoXTokenizerFast"),$ho=o(" (GPT NeoX model)"),kho=l(),us=a("li"),Kde=a("strong"),Sho=o("gptj"),Rho=o(" \u2014 "),xN=a("a"),Pho=o("GPT2Tokenizer"),Bho=o(" or "),$N=a("a"),Iho=o("GPT2TokenizerFast"),Nho=o(" (GPT-J model)"),qho=l(),bs=a("li"),Zde=a("strong"),jho=o("groupvit"),Dho=o(" \u2014 "),kN=a("a"),Gho=o("CLIPTokenizer"),Oho=o(" or "),SN=a("a"),Vho=o("CLIPTokenizerFast"),Xho=o(" (GroupViT model)"),zho=l(),vs=a("li"),ece=a("strong"),Who=o("herbert"),Qho=o(" \u2014 "),RN=a("a"),Uho=o("HerbertTokenizer"),Hho=o(" or "),PN=a("a"),Jho=o("HerbertTokenizerFast"),Yho=o(" (HerBERT model)"),Kho=l(),Ih=a("li"),oce=a("strong"),Zho=o("hubert"),epo=o(" \u2014 "),BN=a("a"),opo=o("Wav2Vec2CTCTokenizer"),rpo=o(" (Hubert model)"),tpo=l(),Fs=a("li"),rce=a("strong"),apo=o("ibert"),npo=o(" \u2014 "),IN=a("a"),spo=o("RobertaTokenizer"),lpo=o(" or "),NN=a("a"),ipo=o("RobertaTokenizerFast"),dpo=o(" (I-BERT model)"),cpo=l(),Ts=a("li"),tce=a("strong"),fpo=o("layoutlm"),mpo=o(" \u2014 "),qN=a("a"),gpo=o("LayoutLMTokenizer"),hpo=o(" or "),jN=a("a"),ppo=o("LayoutLMTokenizerFast"),_po=o(" (LayoutLM model)"),upo=l(),Ms=a("li"),ace=a("strong"),bpo=o("layoutlmv2"),vpo=o(" \u2014 "),DN=a("a"),Fpo=o("LayoutLMv2Tokenizer"),Tpo=o(" or "),GN=a("a"),Mpo=o("LayoutLMv2TokenizerFast"),Epo=o(" (LayoutLMv2 model)"),Cpo=l(),Es=a("li"),nce=a("strong"),wpo=o("layoutlmv3"),Apo=o(" \u2014 "),ON=a("a"),Lpo=o("LayoutLMv3Tokenizer"),ypo=o(" or "),VN=a("a"),xpo=o("LayoutLMv3TokenizerFast"),$po=o(" (LayoutLMv3 model)"),kpo=l(),Cs=a("li"),sce=a("strong"),Spo=o("layoutxlm"),Rpo=o(" \u2014 "),XN=a("a"),Ppo=o("LayoutXLMTokenizer"),Bpo=o(" or "),zN=a("a"),Ipo=o("LayoutXLMTokenizerFast"),Npo=o(" (LayoutXLM model)"),qpo=l(),ws=a("li"),lce=a("strong"),jpo=o("led"),Dpo=o(" \u2014 "),WN=a("a"),Gpo=o("LEDTokenizer"),Opo=o(" or "),QN=a("a"),Vpo=o("LEDTokenizerFast"),Xpo=o(" (LED model)"),zpo=l(),As=a("li"),ice=a("strong"),Wpo=o("longformer"),Qpo=o(" \u2014 "),UN=a("a"),Upo=o("LongformerTokenizer"),Hpo=o(" or "),HN=a("a"),Jpo=o("LongformerTokenizerFast"),Ypo=o(" (Longformer model)"),Kpo=l(),Ls=a("li"),dce=a("strong"),Zpo=o("longt5"),e_o=o(" \u2014 "),JN=a("a"),o_o=o("T5Tokenizer"),r_o=o(" or "),YN=a("a"),t_o=o("T5TokenizerFast"),a_o=o(" (LongT5 model)"),n_o=l(),Nh=a("li"),cce=a("strong"),s_o=o("luke"),l_o=o(" \u2014 "),KN=a("a"),i_o=o("LukeTokenizer"),d_o=o(" (LUKE model)"),c_o=l(),ys=a("li"),fce=a("strong"),f_o=o("lxmert"),m_o=o(" \u2014 "),ZN=a("a"),g_o=o("LxmertTokenizer"),h_o=o(" or "),eq=a("a"),p_o=o("LxmertTokenizerFast"),__o=o(" (LXMERT model)"),u_o=l(),qh=a("li"),mce=a("strong"),b_o=o("m2m_100"),v_o=o(" \u2014 "),oq=a("a"),F_o=o("M2M100Tokenizer"),T_o=o(" (M2M100 model)"),M_o=l(),jh=a("li"),gce=a("strong"),E_o=o("marian"),C_o=o(" \u2014 "),rq=a("a"),w_o=o("MarianTokenizer"),A_o=o(" (Marian model)"),L_o=l(),xs=a("li"),hce=a("strong"),y_o=o("mbart"),x_o=o(" \u2014 "),tq=a("a"),$_o=o("MBartTokenizer"),k_o=o(" or "),aq=a("a"),S_o=o("MBartTokenizerFast"),R_o=o(" (mBART model)"),P_o=l(),$s=a("li"),pce=a("strong"),B_o=o("mbart50"),I_o=o(" \u2014 "),nq=a("a"),N_o=o("MBart50Tokenizer"),q_o=o(" or "),sq=a("a"),j_o=o("MBart50TokenizerFast"),D_o=o(" (mBART-50 model)"),G_o=l(),ks=a("li"),_ce=a("strong"),O_o=o("megatron-bert"),V_o=o(" \u2014 "),lq=a("a"),X_o=o("BertTokenizer"),z_o=o(" or "),iq=a("a"),W_o=o("BertTokenizerFast"),Q_o=o(" (Megatron-BERT model)"),U_o=l(),Dh=a("li"),uce=a("strong"),H_o=o("mluke"),J_o=o(" \u2014 "),dq=a("a"),Y_o=o("MLukeTokenizer"),K_o=o(" (mLUKE model)"),Z_o=l(),Ss=a("li"),bce=a("strong"),euo=o("mobilebert"),ouo=o(" \u2014 "),cq=a("a"),ruo=o("MobileBertTokenizer"),tuo=o(" or "),fq=a("a"),auo=o("MobileBertTokenizerFast"),nuo=o(" (MobileBERT model)"),suo=l(),Rs=a("li"),vce=a("strong"),luo=o("mpnet"),iuo=o(" \u2014 "),mq=a("a"),duo=o("MPNetTokenizer"),cuo=o(" or "),gq=a("a"),fuo=o("MPNetTokenizerFast"),muo=o(" (MPNet model)"),guo=l(),Ps=a("li"),Fce=a("strong"),huo=o("mt5"),puo=o(" \u2014 "),hq=a("a"),_uo=o("MT5Tokenizer"),uuo=o(" or "),pq=a("a"),buo=o("MT5TokenizerFast"),vuo=o(" (MT5 model)"),Fuo=l(),Bs=a("li"),Tce=a("strong"),Tuo=o("mvp"),Muo=o(" \u2014 "),_q=a("a"),Euo=o("MvpTokenizer"),Cuo=o(" or "),uq=a("a"),wuo=o("MvpTokenizerFast"),Auo=o(" (MVP model)"),Luo=l(),Is=a("li"),Mce=a("strong"),yuo=o("nezha"),xuo=o(" \u2014 "),bq=a("a"),$uo=o("BertTokenizer"),kuo=o(" or "),vq=a("a"),Suo=o("BertTokenizerFast"),Ruo=o(" (Nezha model)"),Puo=l(),Ns=a("li"),Ece=a("strong"),Buo=o("nllb"),Iuo=o(" \u2014 "),Fq=a("a"),Nuo=o("NllbTokenizer"),quo=o(" or "),Tq=a("a"),juo=o("NllbTokenizerFast"),Duo=o(" (NLLB model)"),Guo=l(),qs=a("li"),Cce=a("strong"),Ouo=o("nystromformer"),Vuo=o(" \u2014 "),Mq=a("a"),Xuo=o("AlbertTokenizer"),zuo=o(" or "),Eq=a("a"),Wuo=o("AlbertTokenizerFast"),Quo=o(" (Nystr\xF6mformer model)"),Uuo=l(),js=a("li"),wce=a("strong"),Huo=o("openai-gpt"),Juo=o(" \u2014 "),Cq=a("a"),Yuo=o("OpenAIGPTTokenizer"),Kuo=o(" or "),wq=a("a"),Zuo=o("OpenAIGPTTokenizerFast"),e1o=o(" (OpenAI GPT model)"),o1o=l(),Gh=a("li"),Ace=a("strong"),r1o=o("opt"),t1o=o(" \u2014 "),Aq=a("a"),a1o=o("GPT2Tokenizer"),n1o=o(" (OPT model)"),s1o=l(),Ds=a("li"),Lce=a("strong"),l1o=o("owlvit"),i1o=o(" \u2014 "),Lq=a("a"),d1o=o("CLIPTokenizer"),c1o=o(" or "),yq=a("a"),f1o=o("CLIPTokenizerFast"),m1o=o(" (OWL-ViT model)"),g1o=l(),Gs=a("li"),yce=a("strong"),h1o=o("pegasus"),p1o=o(" \u2014 "),xq=a("a"),_1o=o("PegasusTokenizer"),u1o=o(" or "),$q=a("a"),b1o=o("PegasusTokenizerFast"),v1o=o(" (Pegasus model)"),F1o=l(),Oh=a("li"),xce=a("strong"),T1o=o("perceiver"),M1o=o(" \u2014 "),kq=a("a"),E1o=o("PerceiverTokenizer"),C1o=o(" (Perceiver model)"),w1o=l(),Vh=a("li"),$ce=a("strong"),A1o=o("phobert"),L1o=o(" \u2014 "),Sq=a("a"),y1o=o("PhobertTokenizer"),x1o=o(" (PhoBERT model)"),$1o=l(),Xh=a("li"),kce=a("strong"),k1o=o("plbart"),S1o=o(" \u2014 "),Rq=a("a"),R1o=o("PLBartTokenizer"),P1o=o(" (PLBart model)"),B1o=l(),zh=a("li"),Sce=a("strong"),I1o=o("prophetnet"),N1o=o(" \u2014 "),Pq=a("a"),q1o=o("ProphetNetTokenizer"),j1o=o(" (ProphetNet model)"),D1o=l(),Os=a("li"),Rce=a("strong"),G1o=o("qdqbert"),O1o=o(" \u2014 "),Bq=a("a"),V1o=o("BertTokenizer"),X1o=o(" or "),Iq=a("a"),z1o=o("BertTokenizerFast"),W1o=o(" (QDQBert model)"),Q1o=l(),Wh=a("li"),Pce=a("strong"),U1o=o("rag"),H1o=o(" \u2014 "),Nq=a("a"),J1o=o("RagTokenizer"),Y1o=o(" (RAG model)"),K1o=l(),Vs=a("li"),Bce=a("strong"),Z1o=o("realm"),e4o=o(" \u2014 "),qq=a("a"),o4o=o("RealmTokenizer"),r4o=o(" or "),jq=a("a"),t4o=o("RealmTokenizerFast"),a4o=o(" (REALM model)"),n4o=l(),Xs=a("li"),Ice=a("strong"),s4o=o("reformer"),l4o=o(" \u2014 "),Dq=a("a"),i4o=o("ReformerTokenizer"),d4o=o(" or "),Gq=a("a"),c4o=o("ReformerTokenizerFast"),f4o=o(" (Reformer model)"),m4o=l(),zs=a("li"),Nce=a("strong"),g4o=o("rembert"),h4o=o(" \u2014 "),Oq=a("a"),p4o=o("RemBertTokenizer"),_4o=o(" or "),Vq=a("a"),u4o=o("RemBertTokenizerFast"),b4o=o(" (RemBERT model)"),v4o=l(),Ws=a("li"),qce=a("strong"),F4o=o("retribert"),T4o=o(" \u2014 "),Xq=a("a"),M4o=o("RetriBertTokenizer"),E4o=o(" or "),zq=a("a"),C4o=o("RetriBertTokenizerFast"),w4o=o(" (RetriBERT model)"),A4o=l(),Qs=a("li"),jce=a("strong"),L4o=o("roberta"),y4o=o(" \u2014 "),Wq=a("a"),x4o=o("RobertaTokenizer"),$4o=o(" or "),Qq=a("a"),k4o=o("RobertaTokenizerFast"),S4o=o(" (RoBERTa model)"),R4o=l(),Us=a("li"),Dce=a("strong"),P4o=o("roformer"),B4o=o(" \u2014 "),Uq=a("a"),I4o=o("RoFormerTokenizer"),N4o=o(" or "),Hq=a("a"),q4o=o("RoFormerTokenizerFast"),j4o=o(" (RoFormer model)"),D4o=l(),Qh=a("li"),Gce=a("strong"),G4o=o("speech_to_text"),O4o=o(" \u2014 "),Jq=a("a"),V4o=o("Speech2TextTokenizer"),X4o=o(" (Speech2Text model)"),z4o=l(),Uh=a("li"),Oce=a("strong"),W4o=o("speech_to_text_2"),Q4o=o(" \u2014 "),Yq=a("a"),U4o=o("Speech2Text2Tokenizer"),H4o=o(" (Speech2Text2 model)"),J4o=l(),Hs=a("li"),Vce=a("strong"),Y4o=o("splinter"),K4o=o(" \u2014 "),Kq=a("a"),Z4o=o("SplinterTokenizer"),e2o=o(" or "),Zq=a("a"),o2o=o("SplinterTokenizerFast"),r2o=o(" (Splinter model)"),t2o=l(),Js=a("li"),Xce=a("strong"),a2o=o("squeezebert"),n2o=o(" \u2014 "),ej=a("a"),s2o=o("SqueezeBertTokenizer"),l2o=o(" or "),oj=a("a"),i2o=o("SqueezeBertTokenizerFast"),d2o=o(" (SqueezeBERT model)"),c2o=l(),Ys=a("li"),zce=a("strong"),f2o=o("t5"),m2o=o(" \u2014 "),rj=a("a"),g2o=o("T5Tokenizer"),h2o=o(" or "),tj=a("a"),p2o=o("T5TokenizerFast"),_2o=o(" (T5 model)"),u2o=l(),Hh=a("li"),Wce=a("strong"),b2o=o("tapas"),v2o=o(" \u2014 "),aj=a("a"),F2o=o("TapasTokenizer"),T2o=o(" (TAPAS model)"),M2o=l(),Jh=a("li"),Qce=a("strong"),E2o=o("tapex"),C2o=o(" \u2014 "),nj=a("a"),w2o=o("TapexTokenizer"),A2o=o(" (TAPEX model)"),L2o=l(),Yh=a("li"),Uce=a("strong"),y2o=o("transfo-xl"),x2o=o(" \u2014 "),sj=a("a"),$2o=o("TransfoXLTokenizer"),k2o=o(" (Transformer-XL model)"),S2o=l(),Ks=a("li"),Hce=a("strong"),R2o=o("vilt"),P2o=o(" \u2014 "),lj=a("a"),B2o=o("BertTokenizer"),I2o=o(" or "),ij=a("a"),N2o=o("BertTokenizerFast"),q2o=o(" (ViLT model)"),j2o=l(),Zs=a("li"),Jce=a("strong"),D2o=o("visual_bert"),G2o=o(" \u2014 "),dj=a("a"),O2o=o("BertTokenizer"),V2o=o(" or "),cj=a("a"),X2o=o("BertTokenizerFast"),z2o=o(" (VisualBERT model)"),W2o=l(),Kh=a("li"),Yce=a("strong"),Q2o=o("wav2vec2"),U2o=o(" \u2014 "),fj=a("a"),H2o=o("Wav2Vec2CTCTokenizer"),J2o=o(" (Wav2Vec2 model)"),Y2o=l(),Zh=a("li"),Kce=a("strong"),K2o=o("wav2vec2-conformer"),Z2o=o(" \u2014 "),mj=a("a"),ebo=o("Wav2Vec2CTCTokenizer"),obo=o(" (Wav2Vec2-Conformer model)"),rbo=l(),ep=a("li"),Zce=a("strong"),tbo=o("wav2vec2_phoneme"),abo=o(" \u2014 "),gj=a("a"),nbo=o("Wav2Vec2PhonemeCTCTokenizer"),sbo=o(" (Wav2Vec2Phoneme model)"),lbo=l(),el=a("li"),efe=a("strong"),ibo=o("xglm"),dbo=o(" \u2014 "),hj=a("a"),cbo=o("XGLMTokenizer"),fbo=o(" or "),pj=a("a"),mbo=o("XGLMTokenizerFast"),gbo=o(" (XGLM model)"),hbo=l(),op=a("li"),ofe=a("strong"),pbo=o("xlm"),_bo=o(" \u2014 "),_j=a("a"),ubo=o("XLMTokenizer"),bbo=o(" (XLM model)"),vbo=l(),rp=a("li"),rfe=a("strong"),Fbo=o("xlm-prophetnet"),Tbo=o(" \u2014 "),uj=a("a"),Mbo=o("XLMProphetNetTokenizer"),Ebo=o(" (XLM-ProphetNet model)"),Cbo=l(),ol=a("li"),tfe=a("strong"),wbo=o("xlm-roberta"),Abo=o(" \u2014 "),bj=a("a"),Lbo=o("XLMRobertaTokenizer"),ybo=o(" or "),vj=a("a"),xbo=o("XLMRobertaTokenizerFast"),$bo=o(" (XLM-RoBERTa model)"),kbo=l(),rl=a("li"),afe=a("strong"),Sbo=o("xlm-roberta-xl"),Rbo=o(" \u2014 "),Fj=a("a"),Pbo=o("RobertaTokenizer"),Bbo=o(" or "),Tj=a("a"),Ibo=o("RobertaTokenizerFast"),Nbo=o(" (XLM-RoBERTa-XL model)"),qbo=l(),tl=a("li"),nfe=a("strong"),jbo=o("xlnet"),Dbo=o(" \u2014 "),Mj=a("a"),Gbo=o("XLNetTokenizer"),Obo=o(" or "),Ej=a("a"),Vbo=o("XLNetTokenizerFast"),Xbo=o(" (XLNet model)"),zbo=l(),al=a("li"),sfe=a("strong"),Wbo=o("yoso"),Qbo=o(" \u2014 "),Cj=a("a"),Ubo=o("AlbertTokenizer"),Hbo=o(" or "),wj=a("a"),Jbo=o("AlbertTokenizerFast"),Ybo=o(" (YOSO model)"),Kbo=l(),F(tp.$$.fragment),Zbo=l(),ap=a("div"),F(y8.$$.fragment),evo=l(),lfe=a("p"),ovo=o("Register a new tokenizer in this mapping."),tUe=l(),Zi=a("h2"),np=a("a"),ife=a("span"),F(x8.$$.fragment),rvo=l(),dfe=a("span"),tvo=o("AutoFeatureExtractor"),aUe=l(),$o=a("div"),F($8.$$.fragment),avo=l(),k8=a("p"),nvo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Aj=a("a"),svo=o("AutoFeatureExtractor.from_pretrained()"),lvo=o(" class method."),ivo=l(),S8=a("p"),dvo=o("This class cannot be instantiated directly using "),cfe=a("code"),cvo=o("__init__()"),fvo=o(" (throws an error)."),mvo=l(),He=a("div"),F(R8.$$.fragment),gvo=l(),ffe=a("p"),hvo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),pvo=l(),Oa=a("p"),_vo=o("The feature extractor class to instantiate is selected based on the "),mfe=a("code"),uvo=o("model_type"),bvo=o(` property of the config object
(either passed as an argument or loaded from `),gfe=a("code"),vvo=o("pretrained_model_name_or_path"),Fvo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),hfe=a("code"),Tvo=o("pretrained_model_name_or_path"),Mvo=o(":"),Evo=l(),Q=a("ul"),sp=a("li"),pfe=a("strong"),Cvo=o("beit"),wvo=o(" \u2014 "),Lj=a("a"),Avo=o("BeitFeatureExtractor"),Lvo=o(" (BEiT model)"),yvo=l(),lp=a("li"),_fe=a("strong"),xvo=o("clip"),$vo=o(" \u2014 "),yj=a("a"),kvo=o("CLIPFeatureExtractor"),Svo=o(" (CLIP model)"),Rvo=l(),ip=a("li"),ufe=a("strong"),Pvo=o("convnext"),Bvo=o(" \u2014 "),xj=a("a"),Ivo=o("ConvNextFeatureExtractor"),Nvo=o(" (ConvNeXT model)"),qvo=l(),dp=a("li"),bfe=a("strong"),jvo=o("cvt"),Dvo=o(" \u2014 "),$j=a("a"),Gvo=o("ConvNextFeatureExtractor"),Ovo=o(" (CvT model)"),Vvo=l(),cp=a("li"),vfe=a("strong"),Xvo=o("data2vec-audio"),zvo=o(" \u2014 "),kj=a("a"),Wvo=o("Wav2Vec2FeatureExtractor"),Qvo=o(" (Data2VecAudio model)"),Uvo=l(),fp=a("li"),Ffe=a("strong"),Hvo=o("data2vec-vision"),Jvo=o(" \u2014 "),Sj=a("a"),Yvo=o("BeitFeatureExtractor"),Kvo=o(" (Data2VecVision model)"),Zvo=l(),mp=a("li"),Tfe=a("strong"),e3o=o("deit"),o3o=o(" \u2014 "),Rj=a("a"),r3o=o("DeiTFeatureExtractor"),t3o=o(" (DeiT model)"),a3o=l(),gp=a("li"),Mfe=a("strong"),n3o=o("detr"),s3o=o(" \u2014 "),Pj=a("a"),l3o=o("DetrFeatureExtractor"),i3o=o(" (DETR model)"),d3o=l(),hp=a("li"),Efe=a("strong"),c3o=o("donut"),f3o=o(" \u2014 "),Bj=a("a"),m3o=o("DonutFeatureExtractor"),g3o=o(" (Donut model)"),h3o=l(),pp=a("li"),Cfe=a("strong"),p3o=o("dpt"),_3o=o(" \u2014 "),Ij=a("a"),u3o=o("DPTFeatureExtractor"),b3o=o(" (DPT model)"),v3o=l(),_p=a("li"),wfe=a("strong"),F3o=o("flava"),T3o=o(" \u2014 "),Nj=a("a"),M3o=o("FlavaFeatureExtractor"),E3o=o(" (FLAVA model)"),C3o=l(),up=a("li"),Afe=a("strong"),w3o=o("glpn"),A3o=o(" \u2014 "),qj=a("a"),L3o=o("GLPNFeatureExtractor"),y3o=o(" (GLPN model)"),x3o=l(),bp=a("li"),Lfe=a("strong"),$3o=o("groupvit"),k3o=o(" \u2014 "),jj=a("a"),S3o=o("CLIPFeatureExtractor"),R3o=o(" (GroupViT model)"),P3o=l(),vp=a("li"),yfe=a("strong"),B3o=o("hubert"),I3o=o(" \u2014 "),Dj=a("a"),N3o=o("Wav2Vec2FeatureExtractor"),q3o=o(" (Hubert model)"),j3o=l(),Fp=a("li"),xfe=a("strong"),D3o=o("imagegpt"),G3o=o(" \u2014 "),Gj=a("a"),O3o=o("ImageGPTFeatureExtractor"),V3o=o(" (ImageGPT model)"),X3o=l(),Tp=a("li"),$fe=a("strong"),z3o=o("layoutlmv2"),W3o=o(" \u2014 "),Oj=a("a"),Q3o=o("LayoutLMv2FeatureExtractor"),U3o=o(" (LayoutLMv2 model)"),H3o=l(),Mp=a("li"),kfe=a("strong"),J3o=o("layoutlmv3"),Y3o=o(" \u2014 "),Vj=a("a"),K3o=o("LayoutLMv3FeatureExtractor"),Z3o=o(" (LayoutLMv3 model)"),e5o=l(),Ep=a("li"),Sfe=a("strong"),o5o=o("levit"),r5o=o(" \u2014 "),Xj=a("a"),t5o=o("LevitFeatureExtractor"),a5o=o(" (LeViT model)"),n5o=l(),Cp=a("li"),Rfe=a("strong"),s5o=o("maskformer"),l5o=o(" \u2014 "),zj=a("a"),i5o=o("MaskFormerFeatureExtractor"),d5o=o(" (MaskFormer model)"),c5o=l(),wp=a("li"),Pfe=a("strong"),f5o=o("mctct"),m5o=o(" \u2014 "),Wj=a("a"),g5o=o("MCTCTFeatureExtractor"),h5o=o(" (M-CTC-T model)"),p5o=l(),Ap=a("li"),Bfe=a("strong"),_5o=o("mobilevit"),u5o=o(" \u2014 "),Qj=a("a"),b5o=o("MobileViTFeatureExtractor"),v5o=o(" (MobileViT model)"),F5o=l(),Lp=a("li"),Ife=a("strong"),T5o=o("owlvit"),M5o=o(" \u2014 "),Uj=a("a"),E5o=o("OwlViTFeatureExtractor"),C5o=o(" (OWL-ViT model)"),w5o=l(),yp=a("li"),Nfe=a("strong"),A5o=o("perceiver"),L5o=o(" \u2014 "),Hj=a("a"),y5o=o("PerceiverFeatureExtractor"),x5o=o(" (Perceiver model)"),$5o=l(),xp=a("li"),qfe=a("strong"),k5o=o("poolformer"),S5o=o(" \u2014 "),Jj=a("a"),R5o=o("PoolFormerFeatureExtractor"),P5o=o(" (PoolFormer model)"),B5o=l(),$p=a("li"),jfe=a("strong"),I5o=o("regnet"),N5o=o(" \u2014 "),Yj=a("a"),q5o=o("ConvNextFeatureExtractor"),j5o=o(" (RegNet model)"),D5o=l(),kp=a("li"),Dfe=a("strong"),G5o=o("resnet"),O5o=o(" \u2014 "),Kj=a("a"),V5o=o("ConvNextFeatureExtractor"),X5o=o(" (ResNet model)"),z5o=l(),Sp=a("li"),Gfe=a("strong"),W5o=o("segformer"),Q5o=o(" \u2014 "),Zj=a("a"),U5o=o("SegformerFeatureExtractor"),H5o=o(" (SegFormer model)"),J5o=l(),Rp=a("li"),Ofe=a("strong"),Y5o=o("speech_to_text"),K5o=o(" \u2014 "),eD=a("a"),Z5o=o("Speech2TextFeatureExtractor"),e6o=o(" (Speech2Text model)"),o6o=l(),Pp=a("li"),Vfe=a("strong"),r6o=o("swin"),t6o=o(" \u2014 "),oD=a("a"),a6o=o("ViTFeatureExtractor"),n6o=o(" (Swin Transformer model)"),s6o=l(),Bp=a("li"),Xfe=a("strong"),l6o=o("swinv2"),i6o=o(" \u2014 "),rD=a("a"),d6o=o("ViTFeatureExtractor"),c6o=o(" (Swin Transformer V2 model)"),f6o=l(),Ip=a("li"),zfe=a("strong"),m6o=o("van"),g6o=o(" \u2014 "),tD=a("a"),h6o=o("ConvNextFeatureExtractor"),p6o=o(" (VAN model)"),_6o=l(),Np=a("li"),Wfe=a("strong"),u6o=o("videomae"),b6o=o(" \u2014 "),aD=a("a"),v6o=o("ViTFeatureExtractor"),F6o=o(" (VideoMAE model)"),T6o=l(),qp=a("li"),Qfe=a("strong"),M6o=o("vilt"),E6o=o(" \u2014 "),nD=a("a"),C6o=o("ViltFeatureExtractor"),w6o=o(" (ViLT model)"),A6o=l(),jp=a("li"),Ufe=a("strong"),L6o=o("vit"),y6o=o(" \u2014 "),sD=a("a"),x6o=o("ViTFeatureExtractor"),$6o=o(" (ViT model)"),k6o=l(),Dp=a("li"),Hfe=a("strong"),S6o=o("vit_mae"),R6o=o(" \u2014 "),lD=a("a"),P6o=o("ViTFeatureExtractor"),B6o=o(" (ViTMAE model)"),I6o=l(),Gp=a("li"),Jfe=a("strong"),N6o=o("wav2vec2"),q6o=o(" \u2014 "),iD=a("a"),j6o=o("Wav2Vec2FeatureExtractor"),D6o=o(" (Wav2Vec2 model)"),G6o=l(),Op=a("li"),Yfe=a("strong"),O6o=o("wav2vec2-conformer"),V6o=o(" \u2014 "),dD=a("a"),X6o=o("Wav2Vec2FeatureExtractor"),z6o=o(" (Wav2Vec2-Conformer model)"),W6o=l(),Vp=a("li"),Kfe=a("strong"),Q6o=o("yolos"),U6o=o(" \u2014 "),cD=a("a"),H6o=o("YolosFeatureExtractor"),J6o=o(" (YOLOS model)"),Y6o=l(),F(Xp.$$.fragment),K6o=l(),F(zp.$$.fragment),Z6o=l(),Wp=a("div"),F(P8.$$.fragment),eFo=l(),Zfe=a("p"),oFo=o("Register a new feature extractor for this class."),nUe=l(),ed=a("h2"),Qp=a("a"),eme=a("span"),F(B8.$$.fragment),rFo=l(),ome=a("span"),tFo=o("AutoProcessor"),sUe=l(),ko=a("div"),F(I8.$$.fragment),aFo=l(),N8=a("p"),nFo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),fD=a("a"),sFo=o("AutoProcessor.from_pretrained()"),lFo=o(" class method."),iFo=l(),q8=a("p"),dFo=o("This class cannot be instantiated directly using "),rme=a("code"),cFo=o("__init__()"),fFo=o(" (throws an error)."),mFo=l(),Je=a("div"),F(j8.$$.fragment),gFo=l(),tme=a("p"),hFo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),pFo=l(),od=a("p"),_Fo=o("The processor class to instantiate is selected based on the "),ame=a("code"),uFo=o("model_type"),bFo=o(` property of the config object (either
passed as an argument or loaded from `),nme=a("code"),vFo=o("pretrained_model_name_or_path"),FFo=o(" if possible):"),TFo=l(),ie=a("ul"),Up=a("li"),sme=a("strong"),MFo=o("clip"),EFo=o(" \u2014 "),mD=a("a"),CFo=o("CLIPProcessor"),wFo=o(" (CLIP model)"),AFo=l(),Hp=a("li"),lme=a("strong"),LFo=o("donut"),yFo=o(" \u2014 "),gD=a("a"),xFo=o("DonutProcessor"),$Fo=o(" (Donut model)"),kFo=l(),Jp=a("li"),ime=a("strong"),SFo=o("flava"),RFo=o(" \u2014 "),hD=a("a"),PFo=o("FlavaProcessor"),BFo=o(" (FLAVA model)"),IFo=l(),Yp=a("li"),dme=a("strong"),NFo=o("groupvit"),qFo=o(" \u2014 "),pD=a("a"),jFo=o("CLIPProcessor"),DFo=o(" (GroupViT model)"),GFo=l(),Kp=a("li"),cme=a("strong"),OFo=o("layoutlmv2"),VFo=o(" \u2014 "),_D=a("a"),XFo=o("LayoutLMv2Processor"),zFo=o(" (LayoutLMv2 model)"),WFo=l(),Zp=a("li"),fme=a("strong"),QFo=o("layoutlmv3"),UFo=o(" \u2014 "),uD=a("a"),HFo=o("LayoutLMv3Processor"),JFo=o(" (LayoutLMv3 model)"),YFo=l(),e_=a("li"),mme=a("strong"),KFo=o("layoutxlm"),ZFo=o(" \u2014 "),bD=a("a"),eTo=o("LayoutXLMProcessor"),oTo=o(" (LayoutXLM model)"),rTo=l(),o_=a("li"),gme=a("strong"),tTo=o("owlvit"),aTo=o(" \u2014 "),vD=a("a"),nTo=o("OwlViTProcessor"),sTo=o(" (OWL-ViT model)"),lTo=l(),r_=a("li"),hme=a("strong"),iTo=o("sew"),dTo=o(" \u2014 "),FD=a("a"),cTo=o("Wav2Vec2Processor"),fTo=o(" (SEW model)"),mTo=l(),t_=a("li"),pme=a("strong"),gTo=o("sew-d"),hTo=o(" \u2014 "),TD=a("a"),pTo=o("Wav2Vec2Processor"),_To=o(" (SEW-D model)"),uTo=l(),a_=a("li"),_me=a("strong"),bTo=o("speech_to_text"),vTo=o(" \u2014 "),MD=a("a"),FTo=o("Speech2TextProcessor"),TTo=o(" (Speech2Text model)"),MTo=l(),n_=a("li"),ume=a("strong"),ETo=o("speech_to_text_2"),CTo=o(" \u2014 "),ED=a("a"),wTo=o("Speech2Text2Processor"),ATo=o(" (Speech2Text2 model)"),LTo=l(),s_=a("li"),bme=a("strong"),yTo=o("trocr"),xTo=o(" \u2014 "),CD=a("a"),$To=o("TrOCRProcessor"),kTo=o(" (TrOCR model)"),STo=l(),l_=a("li"),vme=a("strong"),RTo=o("unispeech"),PTo=o(" \u2014 "),wD=a("a"),BTo=o("Wav2Vec2Processor"),ITo=o(" (UniSpeech model)"),NTo=l(),i_=a("li"),Fme=a("strong"),qTo=o("unispeech-sat"),jTo=o(" \u2014 "),AD=a("a"),DTo=o("Wav2Vec2Processor"),GTo=o(" (UniSpeechSat model)"),OTo=l(),d_=a("li"),Tme=a("strong"),VTo=o("vilt"),XTo=o(" \u2014 "),LD=a("a"),zTo=o("ViltProcessor"),WTo=o(" (ViLT model)"),QTo=l(),c_=a("li"),Mme=a("strong"),UTo=o("vision-text-dual-encoder"),HTo=o(" \u2014 "),yD=a("a"),JTo=o("VisionTextDualEncoderProcessor"),YTo=o(" (VisionTextDualEncoder model)"),KTo=l(),f_=a("li"),Eme=a("strong"),ZTo=o("wav2vec2"),eMo=o(" \u2014 "),xD=a("a"),oMo=o("Wav2Vec2Processor"),rMo=o(" (Wav2Vec2 model)"),tMo=l(),m_=a("li"),Cme=a("strong"),aMo=o("wav2vec2-conformer"),nMo=o(" \u2014 "),$D=a("a"),sMo=o("Wav2Vec2Processor"),lMo=o(" (Wav2Vec2-Conformer model)"),iMo=l(),g_=a("li"),wme=a("strong"),dMo=o("wavlm"),cMo=o(" \u2014 "),kD=a("a"),fMo=o("Wav2Vec2Processor"),mMo=o(" (WavLM model)"),gMo=l(),F(h_.$$.fragment),hMo=l(),F(p_.$$.fragment),pMo=l(),__=a("div"),F(D8.$$.fragment),_Mo=l(),Ame=a("p"),uMo=o("Register a new processor for this class."),lUe=l(),rd=a("h2"),u_=a("a"),Lme=a("span"),F(G8.$$.fragment),bMo=l(),yme=a("span"),vMo=o("AutoModel"),iUe=l(),So=a("div"),F(O8.$$.fragment),FMo=l(),td=a("p"),TMo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SD=a("a"),MMo=o("from_pretrained()"),EMo=o(" class method or the "),RD=a("a"),CMo=o("from_config()"),wMo=o(` class
method.`),AMo=l(),V8=a("p"),LMo=o("This class cannot be instantiated directly using "),xme=a("code"),yMo=o("__init__()"),xMo=o(" (throws an error)."),$Mo=l(),mt=a("div"),F(X8.$$.fragment),kMo=l(),$me=a("p"),SMo=o("Instantiates one of the base model classes of the library from a configuration."),RMo=l(),ad=a("p"),PMo=o(`Note:
Loading a model from its configuration file does `),kme=a("strong"),BMo=o("not"),IMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PD=a("a"),NMo=o("from_pretrained()"),qMo=o(" to load the model weights."),jMo=l(),F(b_.$$.fragment),DMo=l(),Ye=a("div"),F(z8.$$.fragment),GMo=l(),Sme=a("p"),OMo=o("Instantiate one of the base model classes of the library from a pretrained model."),VMo=l(),Va=a("p"),XMo=o("The model class to instantiate is selected based on the "),Rme=a("code"),zMo=o("model_type"),WMo=o(` property of the config object (either
passed as an argument or loaded from `),Pme=a("code"),QMo=o("pretrained_model_name_or_path"),UMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bme=a("code"),HMo=o("pretrained_model_name_or_path"),JMo=o(":"),YMo=l(),y=a("ul"),v_=a("li"),Ime=a("strong"),KMo=o("albert"),ZMo=o(" \u2014 "),BD=a("a"),eEo=o("AlbertModel"),oEo=o(" (ALBERT model)"),rEo=l(),F_=a("li"),Nme=a("strong"),tEo=o("bart"),aEo=o(" \u2014 "),ID=a("a"),nEo=o("BartModel"),sEo=o(" (BART model)"),lEo=l(),T_=a("li"),qme=a("strong"),iEo=o("beit"),dEo=o(" \u2014 "),ND=a("a"),cEo=o("BeitModel"),fEo=o(" (BEiT model)"),mEo=l(),M_=a("li"),jme=a("strong"),gEo=o("bert"),hEo=o(" \u2014 "),qD=a("a"),pEo=o("BertModel"),_Eo=o(" (BERT model)"),uEo=l(),E_=a("li"),Dme=a("strong"),bEo=o("bert-generation"),vEo=o(" \u2014 "),jD=a("a"),FEo=o("BertGenerationEncoder"),TEo=o(" (Bert Generation model)"),MEo=l(),C_=a("li"),Gme=a("strong"),EEo=o("big_bird"),CEo=o(" \u2014 "),DD=a("a"),wEo=o("BigBirdModel"),AEo=o(" (BigBird model)"),LEo=l(),w_=a("li"),Ome=a("strong"),yEo=o("bigbird_pegasus"),xEo=o(" \u2014 "),GD=a("a"),$Eo=o("BigBirdPegasusModel"),kEo=o(" (BigBird-Pegasus model)"),SEo=l(),A_=a("li"),Vme=a("strong"),REo=o("blenderbot"),PEo=o(" \u2014 "),OD=a("a"),BEo=o("BlenderbotModel"),IEo=o(" (Blenderbot model)"),NEo=l(),L_=a("li"),Xme=a("strong"),qEo=o("blenderbot-small"),jEo=o(" \u2014 "),VD=a("a"),DEo=o("BlenderbotSmallModel"),GEo=o(" (BlenderbotSmall model)"),OEo=l(),y_=a("li"),zme=a("strong"),VEo=o("bloom"),XEo=o(" \u2014 "),XD=a("a"),zEo=o("BloomModel"),WEo=o(" (BLOOM model)"),QEo=l(),x_=a("li"),Wme=a("strong"),UEo=o("camembert"),HEo=o(" \u2014 "),zD=a("a"),JEo=o("CamembertModel"),YEo=o(" (CamemBERT model)"),KEo=l(),$_=a("li"),Qme=a("strong"),ZEo=o("canine"),eCo=o(" \u2014 "),WD=a("a"),oCo=o("CanineModel"),rCo=o(" (CANINE model)"),tCo=l(),k_=a("li"),Ume=a("strong"),aCo=o("clip"),nCo=o(" \u2014 "),QD=a("a"),sCo=o("CLIPModel"),lCo=o(" (CLIP model)"),iCo=l(),S_=a("li"),Hme=a("strong"),dCo=o("codegen"),cCo=o(" \u2014 "),UD=a("a"),fCo=o("CodeGenModel"),mCo=o(" (CodeGen model)"),gCo=l(),R_=a("li"),Jme=a("strong"),hCo=o("convbert"),pCo=o(" \u2014 "),HD=a("a"),_Co=o("ConvBertModel"),uCo=o(" (ConvBERT model)"),bCo=l(),P_=a("li"),Yme=a("strong"),vCo=o("convnext"),FCo=o(" \u2014 "),JD=a("a"),TCo=o("ConvNextModel"),MCo=o(" (ConvNeXT model)"),ECo=l(),B_=a("li"),Kme=a("strong"),CCo=o("ctrl"),wCo=o(" \u2014 "),YD=a("a"),ACo=o("CTRLModel"),LCo=o(" (CTRL model)"),yCo=l(),I_=a("li"),Zme=a("strong"),xCo=o("cvt"),$Co=o(" \u2014 "),KD=a("a"),kCo=o("CvtModel"),SCo=o(" (CvT model)"),RCo=l(),N_=a("li"),ege=a("strong"),PCo=o("data2vec-audio"),BCo=o(" \u2014 "),ZD=a("a"),ICo=o("Data2VecAudioModel"),NCo=o(" (Data2VecAudio model)"),qCo=l(),q_=a("li"),oge=a("strong"),jCo=o("data2vec-text"),DCo=o(" \u2014 "),eG=a("a"),GCo=o("Data2VecTextModel"),OCo=o(" (Data2VecText model)"),VCo=l(),j_=a("li"),rge=a("strong"),XCo=o("data2vec-vision"),zCo=o(" \u2014 "),oG=a("a"),WCo=o("Data2VecVisionModel"),QCo=o(" (Data2VecVision model)"),UCo=l(),D_=a("li"),tge=a("strong"),HCo=o("deberta"),JCo=o(" \u2014 "),rG=a("a"),YCo=o("DebertaModel"),KCo=o(" (DeBERTa model)"),ZCo=l(),G_=a("li"),age=a("strong"),e0o=o("deberta-v2"),o0o=o(" \u2014 "),tG=a("a"),r0o=o("DebertaV2Model"),t0o=o(" (DeBERTa-v2 model)"),a0o=l(),O_=a("li"),nge=a("strong"),n0o=o("decision_transformer"),s0o=o(" \u2014 "),aG=a("a"),l0o=o("DecisionTransformerModel"),i0o=o(" (Decision Transformer model)"),d0o=l(),V_=a("li"),sge=a("strong"),c0o=o("deit"),f0o=o(" \u2014 "),nG=a("a"),m0o=o("DeiTModel"),g0o=o(" (DeiT model)"),h0o=l(),X_=a("li"),lge=a("strong"),p0o=o("detr"),_0o=o(" \u2014 "),sG=a("a"),u0o=o("DetrModel"),b0o=o(" (DETR model)"),v0o=l(),z_=a("li"),ige=a("strong"),F0o=o("distilbert"),T0o=o(" \u2014 "),lG=a("a"),M0o=o("DistilBertModel"),E0o=o(" (DistilBERT model)"),C0o=l(),W_=a("li"),dge=a("strong"),w0o=o("donut-swin"),A0o=o(" \u2014 "),iG=a("a"),L0o=o("DonutSwinModel"),y0o=o(" (DonutSwin model)"),x0o=l(),Q_=a("li"),cge=a("strong"),$0o=o("dpr"),k0o=o(" \u2014 "),dG=a("a"),S0o=o("DPRQuestionEncoder"),R0o=o(" (DPR model)"),P0o=l(),U_=a("li"),fge=a("strong"),B0o=o("dpt"),I0o=o(" \u2014 "),cG=a("a"),N0o=o("DPTModel"),q0o=o(" (DPT model)"),j0o=l(),H_=a("li"),mge=a("strong"),D0o=o("electra"),G0o=o(" \u2014 "),fG=a("a"),O0o=o("ElectraModel"),V0o=o(" (ELECTRA model)"),X0o=l(),J_=a("li"),gge=a("strong"),z0o=o("flaubert"),W0o=o(" \u2014 "),mG=a("a"),Q0o=o("FlaubertModel"),U0o=o(" (FlauBERT model)"),H0o=l(),Y_=a("li"),hge=a("strong"),J0o=o("flava"),Y0o=o(" \u2014 "),gG=a("a"),K0o=o("FlavaModel"),Z0o=o(" (FLAVA model)"),ewo=l(),K_=a("li"),pge=a("strong"),owo=o("fnet"),rwo=o(" \u2014 "),hG=a("a"),two=o("FNetModel"),awo=o(" (FNet model)"),nwo=l(),Z_=a("li"),_ge=a("strong"),swo=o("fsmt"),lwo=o(" \u2014 "),pG=a("a"),iwo=o("FSMTModel"),dwo=o(" (FairSeq Machine-Translation model)"),cwo=l(),nl=a("li"),uge=a("strong"),fwo=o("funnel"),mwo=o(" \u2014 "),_G=a("a"),gwo=o("FunnelModel"),hwo=o(" or "),uG=a("a"),pwo=o("FunnelBaseModel"),_wo=o(" (Funnel Transformer model)"),uwo=l(),eu=a("li"),bge=a("strong"),bwo=o("glpn"),vwo=o(" \u2014 "),bG=a("a"),Fwo=o("GLPNModel"),Two=o(" (GLPN model)"),Mwo=l(),ou=a("li"),vge=a("strong"),Ewo=o("gpt2"),Cwo=o(" \u2014 "),vG=a("a"),wwo=o("GPT2Model"),Awo=o(" (OpenAI GPT-2 model)"),Lwo=l(),ru=a("li"),Fge=a("strong"),ywo=o("gpt_neo"),xwo=o(" \u2014 "),FG=a("a"),$wo=o("GPTNeoModel"),kwo=o(" (GPT Neo model)"),Swo=l(),tu=a("li"),Tge=a("strong"),Rwo=o("gpt_neox"),Pwo=o(" \u2014 "),TG=a("a"),Bwo=o("GPTNeoXModel"),Iwo=o(" (GPT NeoX model)"),Nwo=l(),au=a("li"),Mge=a("strong"),qwo=o("gptj"),jwo=o(" \u2014 "),MG=a("a"),Dwo=o("GPTJModel"),Gwo=o(" (GPT-J model)"),Owo=l(),nu=a("li"),Ege=a("strong"),Vwo=o("groupvit"),Xwo=o(" \u2014 "),EG=a("a"),zwo=o("GroupViTModel"),Wwo=o(" (GroupViT model)"),Qwo=l(),su=a("li"),Cge=a("strong"),Uwo=o("hubert"),Hwo=o(" \u2014 "),CG=a("a"),Jwo=o("HubertModel"),Ywo=o(" (Hubert model)"),Kwo=l(),lu=a("li"),wge=a("strong"),Zwo=o("ibert"),eAo=o(" \u2014 "),wG=a("a"),oAo=o("IBertModel"),rAo=o(" (I-BERT model)"),tAo=l(),iu=a("li"),Age=a("strong"),aAo=o("imagegpt"),nAo=o(" \u2014 "),AG=a("a"),sAo=o("ImageGPTModel"),lAo=o(" (ImageGPT model)"),iAo=l(),du=a("li"),Lge=a("strong"),dAo=o("layoutlm"),cAo=o(" \u2014 "),LG=a("a"),fAo=o("LayoutLMModel"),mAo=o(" (LayoutLM model)"),gAo=l(),cu=a("li"),yge=a("strong"),hAo=o("layoutlmv2"),pAo=o(" \u2014 "),yG=a("a"),_Ao=o("LayoutLMv2Model"),uAo=o(" (LayoutLMv2 model)"),bAo=l(),fu=a("li"),xge=a("strong"),vAo=o("layoutlmv3"),FAo=o(" \u2014 "),xG=a("a"),TAo=o("LayoutLMv3Model"),MAo=o(" (LayoutLMv3 model)"),EAo=l(),mu=a("li"),$ge=a("strong"),CAo=o("led"),wAo=o(" \u2014 "),$G=a("a"),AAo=o("LEDModel"),LAo=o(" (LED model)"),yAo=l(),gu=a("li"),kge=a("strong"),xAo=o("levit"),$Ao=o(" \u2014 "),kG=a("a"),kAo=o("LevitModel"),SAo=o(" (LeViT model)"),RAo=l(),hu=a("li"),Sge=a("strong"),PAo=o("longformer"),BAo=o(" \u2014 "),SG=a("a"),IAo=o("LongformerModel"),NAo=o(" (Longformer model)"),qAo=l(),pu=a("li"),Rge=a("strong"),jAo=o("longt5"),DAo=o(" \u2014 "),RG=a("a"),GAo=o("LongT5Model"),OAo=o(" (LongT5 model)"),VAo=l(),_u=a("li"),Pge=a("strong"),XAo=o("luke"),zAo=o(" \u2014 "),PG=a("a"),WAo=o("LukeModel"),QAo=o(" (LUKE model)"),UAo=l(),uu=a("li"),Bge=a("strong"),HAo=o("lxmert"),JAo=o(" \u2014 "),BG=a("a"),YAo=o("LxmertModel"),KAo=o(" (LXMERT model)"),ZAo=l(),bu=a("li"),Ige=a("strong"),e7o=o("m2m_100"),o7o=o(" \u2014 "),IG=a("a"),r7o=o("M2M100Model"),t7o=o(" (M2M100 model)"),a7o=l(),vu=a("li"),Nge=a("strong"),n7o=o("marian"),s7o=o(" \u2014 "),NG=a("a"),l7o=o("MarianModel"),i7o=o(" (Marian model)"),d7o=l(),Fu=a("li"),qge=a("strong"),c7o=o("maskformer"),f7o=o(" \u2014 "),qG=a("a"),m7o=o("MaskFormerModel"),g7o=o(" (MaskFormer model)"),h7o=l(),Tu=a("li"),jge=a("strong"),p7o=o("mbart"),_7o=o(" \u2014 "),jG=a("a"),u7o=o("MBartModel"),b7o=o(" (mBART model)"),v7o=l(),Mu=a("li"),Dge=a("strong"),F7o=o("mctct"),T7o=o(" \u2014 "),DG=a("a"),M7o=o("MCTCTModel"),E7o=o(" (M-CTC-T model)"),C7o=l(),Eu=a("li"),Gge=a("strong"),w7o=o("megatron-bert"),A7o=o(" \u2014 "),GG=a("a"),L7o=o("MegatronBertModel"),y7o=o(" (Megatron-BERT model)"),x7o=l(),Cu=a("li"),Oge=a("strong"),$7o=o("mobilebert"),k7o=o(" \u2014 "),OG=a("a"),S7o=o("MobileBertModel"),R7o=o(" (MobileBERT model)"),P7o=l(),wu=a("li"),Vge=a("strong"),B7o=o("mobilevit"),I7o=o(" \u2014 "),VG=a("a"),N7o=o("MobileViTModel"),q7o=o(" (MobileViT model)"),j7o=l(),Au=a("li"),Xge=a("strong"),D7o=o("mpnet"),G7o=o(" \u2014 "),XG=a("a"),O7o=o("MPNetModel"),V7o=o(" (MPNet model)"),X7o=l(),Lu=a("li"),zge=a("strong"),z7o=o("mt5"),W7o=o(" \u2014 "),zG=a("a"),Q7o=o("MT5Model"),U7o=o(" (MT5 model)"),H7o=l(),yu=a("li"),Wge=a("strong"),J7o=o("mvp"),Y7o=o(" \u2014 "),WG=a("a"),K7o=o("MvpModel"),Z7o=o(" (MVP model)"),eLo=l(),xu=a("li"),Qge=a("strong"),oLo=o("nezha"),rLo=o(" \u2014 "),QG=a("a"),tLo=o("NezhaModel"),aLo=o(" (Nezha model)"),nLo=l(),$u=a("li"),Uge=a("strong"),sLo=o("nllb"),lLo=o(" \u2014 "),UG=a("a"),iLo=o("M2M100Model"),dLo=o(" (NLLB model)"),cLo=l(),ku=a("li"),Hge=a("strong"),fLo=o("nystromformer"),mLo=o(" \u2014 "),HG=a("a"),gLo=o("NystromformerModel"),hLo=o(" (Nystr\xF6mformer model)"),pLo=l(),Su=a("li"),Jge=a("strong"),_Lo=o("openai-gpt"),uLo=o(" \u2014 "),JG=a("a"),bLo=o("OpenAIGPTModel"),vLo=o(" (OpenAI GPT model)"),FLo=l(),Ru=a("li"),Yge=a("strong"),TLo=o("opt"),MLo=o(" \u2014 "),YG=a("a"),ELo=o("OPTModel"),CLo=o(" (OPT model)"),wLo=l(),Pu=a("li"),Kge=a("strong"),ALo=o("owlvit"),LLo=o(" \u2014 "),KG=a("a"),yLo=o("OwlViTModel"),xLo=o(" (OWL-ViT model)"),$Lo=l(),Bu=a("li"),Zge=a("strong"),kLo=o("pegasus"),SLo=o(" \u2014 "),ZG=a("a"),RLo=o("PegasusModel"),PLo=o(" (Pegasus model)"),BLo=l(),Iu=a("li"),ehe=a("strong"),ILo=o("perceiver"),NLo=o(" \u2014 "),eO=a("a"),qLo=o("PerceiverModel"),jLo=o(" (Perceiver model)"),DLo=l(),Nu=a("li"),ohe=a("strong"),GLo=o("plbart"),OLo=o(" \u2014 "),oO=a("a"),VLo=o("PLBartModel"),XLo=o(" (PLBart model)"),zLo=l(),qu=a("li"),rhe=a("strong"),WLo=o("poolformer"),QLo=o(" \u2014 "),rO=a("a"),ULo=o("PoolFormerModel"),HLo=o(" (PoolFormer model)"),JLo=l(),ju=a("li"),the=a("strong"),YLo=o("prophetnet"),KLo=o(" \u2014 "),tO=a("a"),ZLo=o("ProphetNetModel"),eyo=o(" (ProphetNet model)"),oyo=l(),Du=a("li"),ahe=a("strong"),ryo=o("qdqbert"),tyo=o(" \u2014 "),aO=a("a"),ayo=o("QDQBertModel"),nyo=o(" (QDQBert model)"),syo=l(),Gu=a("li"),nhe=a("strong"),lyo=o("reformer"),iyo=o(" \u2014 "),nO=a("a"),dyo=o("ReformerModel"),cyo=o(" (Reformer model)"),fyo=l(),Ou=a("li"),she=a("strong"),myo=o("regnet"),gyo=o(" \u2014 "),sO=a("a"),hyo=o("RegNetModel"),pyo=o(" (RegNet model)"),_yo=l(),Vu=a("li"),lhe=a("strong"),uyo=o("rembert"),byo=o(" \u2014 "),lO=a("a"),vyo=o("RemBertModel"),Fyo=o(" (RemBERT model)"),Tyo=l(),Xu=a("li"),ihe=a("strong"),Myo=o("resnet"),Eyo=o(" \u2014 "),iO=a("a"),Cyo=o("ResNetModel"),wyo=o(" (ResNet model)"),Ayo=l(),zu=a("li"),dhe=a("strong"),Lyo=o("retribert"),yyo=o(" \u2014 "),dO=a("a"),xyo=o("RetriBertModel"),$yo=o(" (RetriBERT model)"),kyo=l(),Wu=a("li"),che=a("strong"),Syo=o("roberta"),Ryo=o(" \u2014 "),cO=a("a"),Pyo=o("RobertaModel"),Byo=o(" (RoBERTa model)"),Iyo=l(),Qu=a("li"),fhe=a("strong"),Nyo=o("roformer"),qyo=o(" \u2014 "),fO=a("a"),jyo=o("RoFormerModel"),Dyo=o(" (RoFormer model)"),Gyo=l(),Uu=a("li"),mhe=a("strong"),Oyo=o("segformer"),Vyo=o(" \u2014 "),mO=a("a"),Xyo=o("SegformerModel"),zyo=o(" (SegFormer model)"),Wyo=l(),Hu=a("li"),ghe=a("strong"),Qyo=o("sew"),Uyo=o(" \u2014 "),gO=a("a"),Hyo=o("SEWModel"),Jyo=o(" (SEW model)"),Yyo=l(),Ju=a("li"),hhe=a("strong"),Kyo=o("sew-d"),Zyo=o(" \u2014 "),hO=a("a"),e8o=o("SEWDModel"),o8o=o(" (SEW-D model)"),r8o=l(),Yu=a("li"),phe=a("strong"),t8o=o("speech_to_text"),a8o=o(" \u2014 "),pO=a("a"),n8o=o("Speech2TextModel"),s8o=o(" (Speech2Text model)"),l8o=l(),Ku=a("li"),_he=a("strong"),i8o=o("splinter"),d8o=o(" \u2014 "),_O=a("a"),c8o=o("SplinterModel"),f8o=o(" (Splinter model)"),m8o=l(),Zu=a("li"),uhe=a("strong"),g8o=o("squeezebert"),h8o=o(" \u2014 "),uO=a("a"),p8o=o("SqueezeBertModel"),_8o=o(" (SqueezeBERT model)"),u8o=l(),e1=a("li"),bhe=a("strong"),b8o=o("swin"),v8o=o(" \u2014 "),bO=a("a"),F8o=o("SwinModel"),T8o=o(" (Swin Transformer model)"),M8o=l(),o1=a("li"),vhe=a("strong"),E8o=o("swinv2"),C8o=o(" \u2014 "),vO=a("a"),w8o=o("Swinv2Model"),A8o=o(" (Swin Transformer V2 model)"),L8o=l(),r1=a("li"),Fhe=a("strong"),y8o=o("t5"),x8o=o(" \u2014 "),FO=a("a"),$8o=o("T5Model"),k8o=o(" (T5 model)"),S8o=l(),t1=a("li"),The=a("strong"),R8o=o("tapas"),P8o=o(" \u2014 "),TO=a("a"),B8o=o("TapasModel"),I8o=o(" (TAPAS model)"),N8o=l(),a1=a("li"),Mhe=a("strong"),q8o=o("trajectory_transformer"),j8o=o(" \u2014 "),MO=a("a"),D8o=o("TrajectoryTransformerModel"),G8o=o(" (Trajectory Transformer model)"),O8o=l(),n1=a("li"),Ehe=a("strong"),V8o=o("transfo-xl"),X8o=o(" \u2014 "),EO=a("a"),z8o=o("TransfoXLModel"),W8o=o(" (Transformer-XL model)"),Q8o=l(),s1=a("li"),Che=a("strong"),U8o=o("unispeech"),H8o=o(" \u2014 "),CO=a("a"),J8o=o("UniSpeechModel"),Y8o=o(" (UniSpeech model)"),K8o=l(),l1=a("li"),whe=a("strong"),Z8o=o("unispeech-sat"),e9o=o(" \u2014 "),wO=a("a"),o9o=o("UniSpeechSatModel"),r9o=o(" (UniSpeechSat model)"),t9o=l(),i1=a("li"),Ahe=a("strong"),a9o=o("van"),n9o=o(" \u2014 "),AO=a("a"),s9o=o("VanModel"),l9o=o(" (VAN model)"),i9o=l(),d1=a("li"),Lhe=a("strong"),d9o=o("videomae"),c9o=o(" \u2014 "),LO=a("a"),f9o=o("VideoMAEModel"),m9o=o(" (VideoMAE model)"),g9o=l(),c1=a("li"),yhe=a("strong"),h9o=o("vilt"),p9o=o(" \u2014 "),yO=a("a"),_9o=o("ViltModel"),u9o=o(" (ViLT model)"),b9o=l(),f1=a("li"),xhe=a("strong"),v9o=o("vision-text-dual-encoder"),F9o=o(" \u2014 "),xO=a("a"),T9o=o("VisionTextDualEncoderModel"),M9o=o(" (VisionTextDualEncoder model)"),E9o=l(),m1=a("li"),$he=a("strong"),C9o=o("visual_bert"),w9o=o(" \u2014 "),$O=a("a"),A9o=o("VisualBertModel"),L9o=o(" (VisualBERT model)"),y9o=l(),g1=a("li"),khe=a("strong"),x9o=o("vit"),$9o=o(" \u2014 "),kO=a("a"),k9o=o("ViTModel"),S9o=o(" (ViT model)"),R9o=l(),h1=a("li"),She=a("strong"),P9o=o("vit_mae"),B9o=o(" \u2014 "),SO=a("a"),I9o=o("ViTMAEModel"),N9o=o(" (ViTMAE model)"),q9o=l(),p1=a("li"),Rhe=a("strong"),j9o=o("wav2vec2"),D9o=o(" \u2014 "),RO=a("a"),G9o=o("Wav2Vec2Model"),O9o=o(" (Wav2Vec2 model)"),V9o=l(),_1=a("li"),Phe=a("strong"),X9o=o("wav2vec2-conformer"),z9o=o(" \u2014 "),PO=a("a"),W9o=o("Wav2Vec2ConformerModel"),Q9o=o(" (Wav2Vec2-Conformer model)"),U9o=l(),u1=a("li"),Bhe=a("strong"),H9o=o("wavlm"),J9o=o(" \u2014 "),BO=a("a"),Y9o=o("WavLMModel"),K9o=o(" (WavLM model)"),Z9o=l(),b1=a("li"),Ihe=a("strong"),exo=o("xglm"),oxo=o(" \u2014 "),IO=a("a"),rxo=o("XGLMModel"),txo=o(" (XGLM model)"),axo=l(),v1=a("li"),Nhe=a("strong"),nxo=o("xlm"),sxo=o(" \u2014 "),NO=a("a"),lxo=o("XLMModel"),ixo=o(" (XLM model)"),dxo=l(),F1=a("li"),qhe=a("strong"),cxo=o("xlm-prophetnet"),fxo=o(" \u2014 "),qO=a("a"),mxo=o("XLMProphetNetModel"),gxo=o(" (XLM-ProphetNet model)"),hxo=l(),T1=a("li"),jhe=a("strong"),pxo=o("xlm-roberta"),_xo=o(" \u2014 "),jO=a("a"),uxo=o("XLMRobertaModel"),bxo=o(" (XLM-RoBERTa model)"),vxo=l(),M1=a("li"),Dhe=a("strong"),Fxo=o("xlm-roberta-xl"),Txo=o(" \u2014 "),DO=a("a"),Mxo=o("XLMRobertaXLModel"),Exo=o(" (XLM-RoBERTa-XL model)"),Cxo=l(),E1=a("li"),Ghe=a("strong"),wxo=o("xlnet"),Axo=o(" \u2014 "),GO=a("a"),Lxo=o("XLNetModel"),yxo=o(" (XLNet model)"),xxo=l(),C1=a("li"),Ohe=a("strong"),$xo=o("yolos"),kxo=o(" \u2014 "),OO=a("a"),Sxo=o("YolosModel"),Rxo=o(" (YOLOS model)"),Pxo=l(),w1=a("li"),Vhe=a("strong"),Bxo=o("yoso"),Ixo=o(" \u2014 "),VO=a("a"),Nxo=o("YosoModel"),qxo=o(" (YOSO model)"),jxo=l(),A1=a("p"),Dxo=o("The model is set in evaluation mode by default using "),Xhe=a("code"),Gxo=o("model.eval()"),Oxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zhe=a("code"),Vxo=o("model.train()"),Xxo=l(),F(L1.$$.fragment),dUe=l(),nd=a("h2"),y1=a("a"),Whe=a("span"),F(W8.$$.fragment),zxo=l(),Qhe=a("span"),Wxo=o("AutoModelForPreTraining"),cUe=l(),Ro=a("div"),F(Q8.$$.fragment),Qxo=l(),sd=a("p"),Uxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),XO=a("a"),Hxo=o("from_pretrained()"),Jxo=o(" class method or the "),zO=a("a"),Yxo=o("from_config()"),Kxo=o(` class
method.`),Zxo=l(),U8=a("p"),e$o=o("This class cannot be instantiated directly using "),Uhe=a("code"),o$o=o("__init__()"),r$o=o(" (throws an error)."),t$o=l(),gt=a("div"),F(H8.$$.fragment),a$o=l(),Hhe=a("p"),n$o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),s$o=l(),ld=a("p"),l$o=o(`Note:
Loading a model from its configuration file does `),Jhe=a("strong"),i$o=o("not"),d$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=a("a"),c$o=o("from_pretrained()"),f$o=o(" to load the model weights."),m$o=l(),F(x1.$$.fragment),g$o=l(),Ke=a("div"),F(J8.$$.fragment),h$o=l(),Yhe=a("p"),p$o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_$o=l(),Xa=a("p"),u$o=o("The model class to instantiate is selected based on the "),Khe=a("code"),b$o=o("model_type"),v$o=o(` property of the config object (either
passed as an argument or loaded from `),Zhe=a("code"),F$o=o("pretrained_model_name_or_path"),T$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),epe=a("code"),M$o=o("pretrained_model_name_or_path"),E$o=o(":"),C$o=l(),G=a("ul"),$1=a("li"),ope=a("strong"),w$o=o("albert"),A$o=o(" \u2014 "),QO=a("a"),L$o=o("AlbertForPreTraining"),y$o=o(" (ALBERT model)"),x$o=l(),k1=a("li"),rpe=a("strong"),$$o=o("bart"),k$o=o(" \u2014 "),UO=a("a"),S$o=o("BartForConditionalGeneration"),R$o=o(" (BART model)"),P$o=l(),S1=a("li"),tpe=a("strong"),B$o=o("bert"),I$o=o(" \u2014 "),HO=a("a"),N$o=o("BertForPreTraining"),q$o=o(" (BERT model)"),j$o=l(),R1=a("li"),ape=a("strong"),D$o=o("big_bird"),G$o=o(" \u2014 "),JO=a("a"),O$o=o("BigBirdForPreTraining"),V$o=o(" (BigBird model)"),X$o=l(),P1=a("li"),npe=a("strong"),z$o=o("bloom"),W$o=o(" \u2014 "),YO=a("a"),Q$o=o("BloomForCausalLM"),U$o=o(" (BLOOM model)"),H$o=l(),B1=a("li"),spe=a("strong"),J$o=o("camembert"),Y$o=o(" \u2014 "),KO=a("a"),K$o=o("CamembertForMaskedLM"),Z$o=o(" (CamemBERT model)"),eko=l(),I1=a("li"),lpe=a("strong"),oko=o("ctrl"),rko=o(" \u2014 "),ZO=a("a"),tko=o("CTRLLMHeadModel"),ako=o(" (CTRL model)"),nko=l(),N1=a("li"),ipe=a("strong"),sko=o("data2vec-text"),lko=o(" \u2014 "),eV=a("a"),iko=o("Data2VecTextForMaskedLM"),dko=o(" (Data2VecText model)"),cko=l(),q1=a("li"),dpe=a("strong"),fko=o("deberta"),mko=o(" \u2014 "),oV=a("a"),gko=o("DebertaForMaskedLM"),hko=o(" (DeBERTa model)"),pko=l(),j1=a("li"),cpe=a("strong"),_ko=o("deberta-v2"),uko=o(" \u2014 "),rV=a("a"),bko=o("DebertaV2ForMaskedLM"),vko=o(" (DeBERTa-v2 model)"),Fko=l(),D1=a("li"),fpe=a("strong"),Tko=o("distilbert"),Mko=o(" \u2014 "),tV=a("a"),Eko=o("DistilBertForMaskedLM"),Cko=o(" (DistilBERT model)"),wko=l(),G1=a("li"),mpe=a("strong"),Ako=o("electra"),Lko=o(" \u2014 "),aV=a("a"),yko=o("ElectraForPreTraining"),xko=o(" (ELECTRA model)"),$ko=l(),O1=a("li"),gpe=a("strong"),kko=o("flaubert"),Sko=o(" \u2014 "),nV=a("a"),Rko=o("FlaubertWithLMHeadModel"),Pko=o(" (FlauBERT model)"),Bko=l(),V1=a("li"),hpe=a("strong"),Iko=o("flava"),Nko=o(" \u2014 "),sV=a("a"),qko=o("FlavaForPreTraining"),jko=o(" (FLAVA model)"),Dko=l(),X1=a("li"),ppe=a("strong"),Gko=o("fnet"),Oko=o(" \u2014 "),lV=a("a"),Vko=o("FNetForPreTraining"),Xko=o(" (FNet model)"),zko=l(),z1=a("li"),_pe=a("strong"),Wko=o("fsmt"),Qko=o(" \u2014 "),iV=a("a"),Uko=o("FSMTForConditionalGeneration"),Hko=o(" (FairSeq Machine-Translation model)"),Jko=l(),W1=a("li"),upe=a("strong"),Yko=o("funnel"),Kko=o(" \u2014 "),dV=a("a"),Zko=o("FunnelForPreTraining"),eSo=o(" (Funnel Transformer model)"),oSo=l(),Q1=a("li"),bpe=a("strong"),rSo=o("gpt2"),tSo=o(" \u2014 "),cV=a("a"),aSo=o("GPT2LMHeadModel"),nSo=o(" (OpenAI GPT-2 model)"),sSo=l(),U1=a("li"),vpe=a("strong"),lSo=o("ibert"),iSo=o(" \u2014 "),fV=a("a"),dSo=o("IBertForMaskedLM"),cSo=o(" (I-BERT model)"),fSo=l(),H1=a("li"),Fpe=a("strong"),mSo=o("layoutlm"),gSo=o(" \u2014 "),mV=a("a"),hSo=o("LayoutLMForMaskedLM"),pSo=o(" (LayoutLM model)"),_So=l(),J1=a("li"),Tpe=a("strong"),uSo=o("longformer"),bSo=o(" \u2014 "),gV=a("a"),vSo=o("LongformerForMaskedLM"),FSo=o(" (Longformer model)"),TSo=l(),Y1=a("li"),Mpe=a("strong"),MSo=o("luke"),ESo=o(" \u2014 "),hV=a("a"),CSo=o("LukeForMaskedLM"),wSo=o(" (LUKE model)"),ASo=l(),K1=a("li"),Epe=a("strong"),LSo=o("lxmert"),ySo=o(" \u2014 "),pV=a("a"),xSo=o("LxmertForPreTraining"),$So=o(" (LXMERT model)"),kSo=l(),Z1=a("li"),Cpe=a("strong"),SSo=o("megatron-bert"),RSo=o(" \u2014 "),_V=a("a"),PSo=o("MegatronBertForPreTraining"),BSo=o(" (Megatron-BERT model)"),ISo=l(),e4=a("li"),wpe=a("strong"),NSo=o("mobilebert"),qSo=o(" \u2014 "),uV=a("a"),jSo=o("MobileBertForPreTraining"),DSo=o(" (MobileBERT model)"),GSo=l(),o4=a("li"),Ape=a("strong"),OSo=o("mpnet"),VSo=o(" \u2014 "),bV=a("a"),XSo=o("MPNetForMaskedLM"),zSo=o(" (MPNet model)"),WSo=l(),r4=a("li"),Lpe=a("strong"),QSo=o("mvp"),USo=o(" \u2014 "),vV=a("a"),HSo=o("MvpForConditionalGeneration"),JSo=o(" (MVP model)"),YSo=l(),t4=a("li"),ype=a("strong"),KSo=o("nezha"),ZSo=o(" \u2014 "),FV=a("a"),eRo=o("NezhaForPreTraining"),oRo=o(" (Nezha model)"),rRo=l(),a4=a("li"),xpe=a("strong"),tRo=o("openai-gpt"),aRo=o(" \u2014 "),TV=a("a"),nRo=o("OpenAIGPTLMHeadModel"),sRo=o(" (OpenAI GPT model)"),lRo=l(),n4=a("li"),$pe=a("strong"),iRo=o("retribert"),dRo=o(" \u2014 "),MV=a("a"),cRo=o("RetriBertModel"),fRo=o(" (RetriBERT model)"),mRo=l(),s4=a("li"),kpe=a("strong"),gRo=o("roberta"),hRo=o(" \u2014 "),EV=a("a"),pRo=o("RobertaForMaskedLM"),_Ro=o(" (RoBERTa model)"),uRo=l(),l4=a("li"),Spe=a("strong"),bRo=o("splinter"),vRo=o(" \u2014 "),CV=a("a"),FRo=o("SplinterForPreTraining"),TRo=o(" (Splinter model)"),MRo=l(),i4=a("li"),Rpe=a("strong"),ERo=o("squeezebert"),CRo=o(" \u2014 "),wV=a("a"),wRo=o("SqueezeBertForMaskedLM"),ARo=o(" (SqueezeBERT model)"),LRo=l(),d4=a("li"),Ppe=a("strong"),yRo=o("t5"),xRo=o(" \u2014 "),AV=a("a"),$Ro=o("T5ForConditionalGeneration"),kRo=o(" (T5 model)"),SRo=l(),c4=a("li"),Bpe=a("strong"),RRo=o("tapas"),PRo=o(" \u2014 "),LV=a("a"),BRo=o("TapasForMaskedLM"),IRo=o(" (TAPAS model)"),NRo=l(),f4=a("li"),Ipe=a("strong"),qRo=o("transfo-xl"),jRo=o(" \u2014 "),yV=a("a"),DRo=o("TransfoXLLMHeadModel"),GRo=o(" (Transformer-XL model)"),ORo=l(),m4=a("li"),Npe=a("strong"),VRo=o("unispeech"),XRo=o(" \u2014 "),xV=a("a"),zRo=o("UniSpeechForPreTraining"),WRo=o(" (UniSpeech model)"),QRo=l(),g4=a("li"),qpe=a("strong"),URo=o("unispeech-sat"),HRo=o(" \u2014 "),$V=a("a"),JRo=o("UniSpeechSatForPreTraining"),YRo=o(" (UniSpeechSat model)"),KRo=l(),h4=a("li"),jpe=a("strong"),ZRo=o("videomae"),ePo=o(" \u2014 "),kV=a("a"),oPo=o("VideoMAEForPreTraining"),rPo=o(" (VideoMAE model)"),tPo=l(),p4=a("li"),Dpe=a("strong"),aPo=o("visual_bert"),nPo=o(" \u2014 "),SV=a("a"),sPo=o("VisualBertForPreTraining"),lPo=o(" (VisualBERT model)"),iPo=l(),_4=a("li"),Gpe=a("strong"),dPo=o("vit_mae"),cPo=o(" \u2014 "),RV=a("a"),fPo=o("ViTMAEForPreTraining"),mPo=o(" (ViTMAE model)"),gPo=l(),u4=a("li"),Ope=a("strong"),hPo=o("wav2vec2"),pPo=o(" \u2014 "),PV=a("a"),_Po=o("Wav2Vec2ForPreTraining"),uPo=o(" (Wav2Vec2 model)"),bPo=l(),b4=a("li"),Vpe=a("strong"),vPo=o("wav2vec2-conformer"),FPo=o(" \u2014 "),BV=a("a"),TPo=o("Wav2Vec2ConformerForPreTraining"),MPo=o(" (Wav2Vec2-Conformer model)"),EPo=l(),v4=a("li"),Xpe=a("strong"),CPo=o("xlm"),wPo=o(" \u2014 "),IV=a("a"),APo=o("XLMWithLMHeadModel"),LPo=o(" (XLM model)"),yPo=l(),F4=a("li"),zpe=a("strong"),xPo=o("xlm-roberta"),$Po=o(" \u2014 "),NV=a("a"),kPo=o("XLMRobertaForMaskedLM"),SPo=o(" (XLM-RoBERTa model)"),RPo=l(),T4=a("li"),Wpe=a("strong"),PPo=o("xlm-roberta-xl"),BPo=o(" \u2014 "),qV=a("a"),IPo=o("XLMRobertaXLForMaskedLM"),NPo=o(" (XLM-RoBERTa-XL model)"),qPo=l(),M4=a("li"),Qpe=a("strong"),jPo=o("xlnet"),DPo=o(" \u2014 "),jV=a("a"),GPo=o("XLNetLMHeadModel"),OPo=o(" (XLNet model)"),VPo=l(),E4=a("p"),XPo=o("The model is set in evaluation mode by default using "),Upe=a("code"),zPo=o("model.eval()"),WPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=a("code"),QPo=o("model.train()"),UPo=l(),F(C4.$$.fragment),fUe=l(),id=a("h2"),w4=a("a"),Jpe=a("span"),F(Y8.$$.fragment),HPo=l(),Ype=a("span"),JPo=o("AutoModelForCausalLM"),mUe=l(),Po=a("div"),F(K8.$$.fragment),YPo=l(),dd=a("p"),KPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DV=a("a"),ZPo=o("from_pretrained()"),eBo=o(" class method or the "),GV=a("a"),oBo=o("from_config()"),rBo=o(` class
method.`),tBo=l(),Z8=a("p"),aBo=o("This class cannot be instantiated directly using "),Kpe=a("code"),nBo=o("__init__()"),sBo=o(" (throws an error)."),lBo=l(),ht=a("div"),F(e9.$$.fragment),iBo=l(),Zpe=a("p"),dBo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cBo=l(),cd=a("p"),fBo=o(`Note:
Loading a model from its configuration file does `),e_e=a("strong"),mBo=o("not"),gBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=a("a"),hBo=o("from_pretrained()"),pBo=o(" to load the model weights."),_Bo=l(),F(A4.$$.fragment),uBo=l(),Ze=a("div"),F(o9.$$.fragment),bBo=l(),o_e=a("p"),vBo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),FBo=l(),za=a("p"),TBo=o("The model class to instantiate is selected based on the "),r_e=a("code"),MBo=o("model_type"),EBo=o(` property of the config object (either
passed as an argument or loaded from `),t_e=a("code"),CBo=o("pretrained_model_name_or_path"),wBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=a("code"),ABo=o("pretrained_model_name_or_path"),LBo=o(":"),yBo=l(),z=a("ul"),L4=a("li"),n_e=a("strong"),xBo=o("bart"),$Bo=o(" \u2014 "),VV=a("a"),kBo=o("BartForCausalLM"),SBo=o(" (BART model)"),RBo=l(),y4=a("li"),s_e=a("strong"),PBo=o("bert"),BBo=o(" \u2014 "),XV=a("a"),IBo=o("BertLMHeadModel"),NBo=o(" (BERT model)"),qBo=l(),x4=a("li"),l_e=a("strong"),jBo=o("bert-generation"),DBo=o(" \u2014 "),zV=a("a"),GBo=o("BertGenerationDecoder"),OBo=o(" (Bert Generation model)"),VBo=l(),$4=a("li"),i_e=a("strong"),XBo=o("big_bird"),zBo=o(" \u2014 "),WV=a("a"),WBo=o("BigBirdForCausalLM"),QBo=o(" (BigBird model)"),UBo=l(),k4=a("li"),d_e=a("strong"),HBo=o("bigbird_pegasus"),JBo=o(" \u2014 "),QV=a("a"),YBo=o("BigBirdPegasusForCausalLM"),KBo=o(" (BigBird-Pegasus model)"),ZBo=l(),S4=a("li"),c_e=a("strong"),eIo=o("blenderbot"),oIo=o(" \u2014 "),UV=a("a"),rIo=o("BlenderbotForCausalLM"),tIo=o(" (Blenderbot model)"),aIo=l(),R4=a("li"),f_e=a("strong"),nIo=o("blenderbot-small"),sIo=o(" \u2014 "),HV=a("a"),lIo=o("BlenderbotSmallForCausalLM"),iIo=o(" (BlenderbotSmall model)"),dIo=l(),P4=a("li"),m_e=a("strong"),cIo=o("bloom"),fIo=o(" \u2014 "),JV=a("a"),mIo=o("BloomForCausalLM"),gIo=o(" (BLOOM model)"),hIo=l(),B4=a("li"),g_e=a("strong"),pIo=o("camembert"),_Io=o(" \u2014 "),YV=a("a"),uIo=o("CamembertForCausalLM"),bIo=o(" (CamemBERT model)"),vIo=l(),I4=a("li"),h_e=a("strong"),FIo=o("codegen"),TIo=o(" \u2014 "),KV=a("a"),MIo=o("CodeGenForCausalLM"),EIo=o(" (CodeGen model)"),CIo=l(),N4=a("li"),p_e=a("strong"),wIo=o("ctrl"),AIo=o(" \u2014 "),ZV=a("a"),LIo=o("CTRLLMHeadModel"),yIo=o(" (CTRL model)"),xIo=l(),q4=a("li"),__e=a("strong"),$Io=o("data2vec-text"),kIo=o(" \u2014 "),eX=a("a"),SIo=o("Data2VecTextForCausalLM"),RIo=o(" (Data2VecText model)"),PIo=l(),j4=a("li"),u_e=a("strong"),BIo=o("electra"),IIo=o(" \u2014 "),oX=a("a"),NIo=o("ElectraForCausalLM"),qIo=o(" (ELECTRA model)"),jIo=l(),D4=a("li"),b_e=a("strong"),DIo=o("gpt2"),GIo=o(" \u2014 "),rX=a("a"),OIo=o("GPT2LMHeadModel"),VIo=o(" (OpenAI GPT-2 model)"),XIo=l(),G4=a("li"),v_e=a("strong"),zIo=o("gpt_neo"),WIo=o(" \u2014 "),tX=a("a"),QIo=o("GPTNeoForCausalLM"),UIo=o(" (GPT Neo model)"),HIo=l(),O4=a("li"),F_e=a("strong"),JIo=o("gpt_neox"),YIo=o(" \u2014 "),aX=a("a"),KIo=o("GPTNeoXForCausalLM"),ZIo=o(" (GPT NeoX model)"),eNo=l(),V4=a("li"),T_e=a("strong"),oNo=o("gptj"),rNo=o(" \u2014 "),nX=a("a"),tNo=o("GPTJForCausalLM"),aNo=o(" (GPT-J model)"),nNo=l(),X4=a("li"),M_e=a("strong"),sNo=o("marian"),lNo=o(" \u2014 "),sX=a("a"),iNo=o("MarianForCausalLM"),dNo=o(" (Marian model)"),cNo=l(),z4=a("li"),E_e=a("strong"),fNo=o("mbart"),mNo=o(" \u2014 "),lX=a("a"),gNo=o("MBartForCausalLM"),hNo=o(" (mBART model)"),pNo=l(),W4=a("li"),C_e=a("strong"),_No=o("megatron-bert"),uNo=o(" \u2014 "),iX=a("a"),bNo=o("MegatronBertForCausalLM"),vNo=o(" (Megatron-BERT model)"),FNo=l(),Q4=a("li"),w_e=a("strong"),TNo=o("mvp"),MNo=o(" \u2014 "),dX=a("a"),ENo=o("MvpForCausalLM"),CNo=o(" (MVP model)"),wNo=l(),U4=a("li"),A_e=a("strong"),ANo=o("openai-gpt"),LNo=o(" \u2014 "),cX=a("a"),yNo=o("OpenAIGPTLMHeadModel"),xNo=o(" (OpenAI GPT model)"),$No=l(),H4=a("li"),L_e=a("strong"),kNo=o("opt"),SNo=o(" \u2014 "),fX=a("a"),RNo=o("OPTForCausalLM"),PNo=o(" (OPT model)"),BNo=l(),J4=a("li"),y_e=a("strong"),INo=o("pegasus"),NNo=o(" \u2014 "),mX=a("a"),qNo=o("PegasusForCausalLM"),jNo=o(" (Pegasus model)"),DNo=l(),Y4=a("li"),x_e=a("strong"),GNo=o("plbart"),ONo=o(" \u2014 "),gX=a("a"),VNo=o("PLBartForCausalLM"),XNo=o(" (PLBart model)"),zNo=l(),K4=a("li"),$_e=a("strong"),WNo=o("prophetnet"),QNo=o(" \u2014 "),hX=a("a"),UNo=o("ProphetNetForCausalLM"),HNo=o(" (ProphetNet model)"),JNo=l(),Z4=a("li"),k_e=a("strong"),YNo=o("qdqbert"),KNo=o(" \u2014 "),pX=a("a"),ZNo=o("QDQBertLMHeadModel"),eqo=o(" (QDQBert model)"),oqo=l(),e2=a("li"),S_e=a("strong"),rqo=o("reformer"),tqo=o(" \u2014 "),_X=a("a"),aqo=o("ReformerModelWithLMHead"),nqo=o(" (Reformer model)"),sqo=l(),o2=a("li"),R_e=a("strong"),lqo=o("rembert"),iqo=o(" \u2014 "),uX=a("a"),dqo=o("RemBertForCausalLM"),cqo=o(" (RemBERT model)"),fqo=l(),r2=a("li"),P_e=a("strong"),mqo=o("roberta"),gqo=o(" \u2014 "),bX=a("a"),hqo=o("RobertaForCausalLM"),pqo=o(" (RoBERTa model)"),_qo=l(),t2=a("li"),B_e=a("strong"),uqo=o("roformer"),bqo=o(" \u2014 "),vX=a("a"),vqo=o("RoFormerForCausalLM"),Fqo=o(" (RoFormer model)"),Tqo=l(),a2=a("li"),I_e=a("strong"),Mqo=o("speech_to_text_2"),Eqo=o(" \u2014 "),FX=a("a"),Cqo=o("Speech2Text2ForCausalLM"),wqo=o(" (Speech2Text2 model)"),Aqo=l(),n2=a("li"),N_e=a("strong"),Lqo=o("transfo-xl"),yqo=o(" \u2014 "),TX=a("a"),xqo=o("TransfoXLLMHeadModel"),$qo=o(" (Transformer-XL model)"),kqo=l(),s2=a("li"),q_e=a("strong"),Sqo=o("trocr"),Rqo=o(" \u2014 "),MX=a("a"),Pqo=o("TrOCRForCausalLM"),Bqo=o(" (TrOCR model)"),Iqo=l(),l2=a("li"),j_e=a("strong"),Nqo=o("xglm"),qqo=o(" \u2014 "),EX=a("a"),jqo=o("XGLMForCausalLM"),Dqo=o(" (XGLM model)"),Gqo=l(),i2=a("li"),D_e=a("strong"),Oqo=o("xlm"),Vqo=o(" \u2014 "),CX=a("a"),Xqo=o("XLMWithLMHeadModel"),zqo=o(" (XLM model)"),Wqo=l(),d2=a("li"),G_e=a("strong"),Qqo=o("xlm-prophetnet"),Uqo=o(" \u2014 "),wX=a("a"),Hqo=o("XLMProphetNetForCausalLM"),Jqo=o(" (XLM-ProphetNet model)"),Yqo=l(),c2=a("li"),O_e=a("strong"),Kqo=o("xlm-roberta"),Zqo=o(" \u2014 "),AX=a("a"),ejo=o("XLMRobertaForCausalLM"),ojo=o(" (XLM-RoBERTa model)"),rjo=l(),f2=a("li"),V_e=a("strong"),tjo=o("xlm-roberta-xl"),ajo=o(" \u2014 "),LX=a("a"),njo=o("XLMRobertaXLForCausalLM"),sjo=o(" (XLM-RoBERTa-XL model)"),ljo=l(),m2=a("li"),X_e=a("strong"),ijo=o("xlnet"),djo=o(" \u2014 "),yX=a("a"),cjo=o("XLNetLMHeadModel"),fjo=o(" (XLNet model)"),mjo=l(),g2=a("p"),gjo=o("The model is set in evaluation mode by default using "),z_e=a("code"),hjo=o("model.eval()"),pjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=a("code"),_jo=o("model.train()"),ujo=l(),F(h2.$$.fragment),gUe=l(),fd=a("h2"),p2=a("a"),Q_e=a("span"),F(r9.$$.fragment),bjo=l(),U_e=a("span"),vjo=o("AutoModelForMaskedLM"),hUe=l(),Bo=a("div"),F(t9.$$.fragment),Fjo=l(),md=a("p"),Tjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xX=a("a"),Mjo=o("from_pretrained()"),Ejo=o(" class method or the "),$X=a("a"),Cjo=o("from_config()"),wjo=o(` class
method.`),Ajo=l(),a9=a("p"),Ljo=o("This class cannot be instantiated directly using "),H_e=a("code"),yjo=o("__init__()"),xjo=o(" (throws an error)."),$jo=l(),pt=a("div"),F(n9.$$.fragment),kjo=l(),J_e=a("p"),Sjo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Rjo=l(),gd=a("p"),Pjo=o(`Note:
Loading a model from its configuration file does `),Y_e=a("strong"),Bjo=o("not"),Ijo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kX=a("a"),Njo=o("from_pretrained()"),qjo=o(" to load the model weights."),jjo=l(),F(_2.$$.fragment),Djo=l(),eo=a("div"),F(s9.$$.fragment),Gjo=l(),K_e=a("p"),Ojo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Vjo=l(),Wa=a("p"),Xjo=o("The model class to instantiate is selected based on the "),Z_e=a("code"),zjo=o("model_type"),Wjo=o(` property of the config object (either
passed as an argument or loaded from `),eue=a("code"),Qjo=o("pretrained_model_name_or_path"),Ujo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=a("code"),Hjo=o("pretrained_model_name_or_path"),Jjo=o(":"),Yjo=l(),U=a("ul"),u2=a("li"),rue=a("strong"),Kjo=o("albert"),Zjo=o(" \u2014 "),SX=a("a"),eDo=o("AlbertForMaskedLM"),oDo=o(" (ALBERT model)"),rDo=l(),b2=a("li"),tue=a("strong"),tDo=o("bart"),aDo=o(" \u2014 "),RX=a("a"),nDo=o("BartForConditionalGeneration"),sDo=o(" (BART model)"),lDo=l(),v2=a("li"),aue=a("strong"),iDo=o("bert"),dDo=o(" \u2014 "),PX=a("a"),cDo=o("BertForMaskedLM"),fDo=o(" (BERT model)"),mDo=l(),F2=a("li"),nue=a("strong"),gDo=o("big_bird"),hDo=o(" \u2014 "),BX=a("a"),pDo=o("BigBirdForMaskedLM"),_Do=o(" (BigBird model)"),uDo=l(),T2=a("li"),sue=a("strong"),bDo=o("camembert"),vDo=o(" \u2014 "),IX=a("a"),FDo=o("CamembertForMaskedLM"),TDo=o(" (CamemBERT model)"),MDo=l(),M2=a("li"),lue=a("strong"),EDo=o("convbert"),CDo=o(" \u2014 "),NX=a("a"),wDo=o("ConvBertForMaskedLM"),ADo=o(" (ConvBERT model)"),LDo=l(),E2=a("li"),iue=a("strong"),yDo=o("data2vec-text"),xDo=o(" \u2014 "),qX=a("a"),$Do=o("Data2VecTextForMaskedLM"),kDo=o(" (Data2VecText model)"),SDo=l(),C2=a("li"),due=a("strong"),RDo=o("deberta"),PDo=o(" \u2014 "),jX=a("a"),BDo=o("DebertaForMaskedLM"),IDo=o(" (DeBERTa model)"),NDo=l(),w2=a("li"),cue=a("strong"),qDo=o("deberta-v2"),jDo=o(" \u2014 "),DX=a("a"),DDo=o("DebertaV2ForMaskedLM"),GDo=o(" (DeBERTa-v2 model)"),ODo=l(),A2=a("li"),fue=a("strong"),VDo=o("distilbert"),XDo=o(" \u2014 "),GX=a("a"),zDo=o("DistilBertForMaskedLM"),WDo=o(" (DistilBERT model)"),QDo=l(),L2=a("li"),mue=a("strong"),UDo=o("electra"),HDo=o(" \u2014 "),OX=a("a"),JDo=o("ElectraForMaskedLM"),YDo=o(" (ELECTRA model)"),KDo=l(),y2=a("li"),gue=a("strong"),ZDo=o("flaubert"),eGo=o(" \u2014 "),VX=a("a"),oGo=o("FlaubertWithLMHeadModel"),rGo=o(" (FlauBERT model)"),tGo=l(),x2=a("li"),hue=a("strong"),aGo=o("fnet"),nGo=o(" \u2014 "),XX=a("a"),sGo=o("FNetForMaskedLM"),lGo=o(" (FNet model)"),iGo=l(),$2=a("li"),pue=a("strong"),dGo=o("funnel"),cGo=o(" \u2014 "),zX=a("a"),fGo=o("FunnelForMaskedLM"),mGo=o(" (Funnel Transformer model)"),gGo=l(),k2=a("li"),_ue=a("strong"),hGo=o("ibert"),pGo=o(" \u2014 "),WX=a("a"),_Go=o("IBertForMaskedLM"),uGo=o(" (I-BERT model)"),bGo=l(),S2=a("li"),uue=a("strong"),vGo=o("layoutlm"),FGo=o(" \u2014 "),QX=a("a"),TGo=o("LayoutLMForMaskedLM"),MGo=o(" (LayoutLM model)"),EGo=l(),R2=a("li"),bue=a("strong"),CGo=o("longformer"),wGo=o(" \u2014 "),UX=a("a"),AGo=o("LongformerForMaskedLM"),LGo=o(" (Longformer model)"),yGo=l(),P2=a("li"),vue=a("strong"),xGo=o("luke"),$Go=o(" \u2014 "),HX=a("a"),kGo=o("LukeForMaskedLM"),SGo=o(" (LUKE model)"),RGo=l(),B2=a("li"),Fue=a("strong"),PGo=o("mbart"),BGo=o(" \u2014 "),JX=a("a"),IGo=o("MBartForConditionalGeneration"),NGo=o(" (mBART model)"),qGo=l(),I2=a("li"),Tue=a("strong"),jGo=o("megatron-bert"),DGo=o(" \u2014 "),YX=a("a"),GGo=o("MegatronBertForMaskedLM"),OGo=o(" (Megatron-BERT model)"),VGo=l(),N2=a("li"),Mue=a("strong"),XGo=o("mobilebert"),zGo=o(" \u2014 "),KX=a("a"),WGo=o("MobileBertForMaskedLM"),QGo=o(" (MobileBERT model)"),UGo=l(),q2=a("li"),Eue=a("strong"),HGo=o("mpnet"),JGo=o(" \u2014 "),ZX=a("a"),YGo=o("MPNetForMaskedLM"),KGo=o(" (MPNet model)"),ZGo=l(),j2=a("li"),Cue=a("strong"),eOo=o("mvp"),oOo=o(" \u2014 "),ez=a("a"),rOo=o("MvpForConditionalGeneration"),tOo=o(" (MVP model)"),aOo=l(),D2=a("li"),wue=a("strong"),nOo=o("nezha"),sOo=o(" \u2014 "),oz=a("a"),lOo=o("NezhaForMaskedLM"),iOo=o(" (Nezha model)"),dOo=l(),G2=a("li"),Aue=a("strong"),cOo=o("nystromformer"),fOo=o(" \u2014 "),rz=a("a"),mOo=o("NystromformerForMaskedLM"),gOo=o(" (Nystr\xF6mformer model)"),hOo=l(),O2=a("li"),Lue=a("strong"),pOo=o("perceiver"),_Oo=o(" \u2014 "),tz=a("a"),uOo=o("PerceiverForMaskedLM"),bOo=o(" (Perceiver model)"),vOo=l(),V2=a("li"),yue=a("strong"),FOo=o("qdqbert"),TOo=o(" \u2014 "),az=a("a"),MOo=o("QDQBertForMaskedLM"),EOo=o(" (QDQBert model)"),COo=l(),X2=a("li"),xue=a("strong"),wOo=o("reformer"),AOo=o(" \u2014 "),nz=a("a"),LOo=o("ReformerForMaskedLM"),yOo=o(" (Reformer model)"),xOo=l(),z2=a("li"),$ue=a("strong"),$Oo=o("rembert"),kOo=o(" \u2014 "),sz=a("a"),SOo=o("RemBertForMaskedLM"),ROo=o(" (RemBERT model)"),POo=l(),W2=a("li"),kue=a("strong"),BOo=o("roberta"),IOo=o(" \u2014 "),lz=a("a"),NOo=o("RobertaForMaskedLM"),qOo=o(" (RoBERTa model)"),jOo=l(),Q2=a("li"),Sue=a("strong"),DOo=o("roformer"),GOo=o(" \u2014 "),iz=a("a"),OOo=o("RoFormerForMaskedLM"),VOo=o(" (RoFormer model)"),XOo=l(),U2=a("li"),Rue=a("strong"),zOo=o("squeezebert"),WOo=o(" \u2014 "),dz=a("a"),QOo=o("SqueezeBertForMaskedLM"),UOo=o(" (SqueezeBERT model)"),HOo=l(),H2=a("li"),Pue=a("strong"),JOo=o("tapas"),YOo=o(" \u2014 "),cz=a("a"),KOo=o("TapasForMaskedLM"),ZOo=o(" (TAPAS model)"),eVo=l(),J2=a("li"),Bue=a("strong"),oVo=o("wav2vec2"),rVo=o(" \u2014 "),Iue=a("code"),tVo=o("Wav2Vec2ForMaskedLM"),aVo=o(" (Wav2Vec2 model)"),nVo=l(),Y2=a("li"),Nue=a("strong"),sVo=o("xlm"),lVo=o(" \u2014 "),fz=a("a"),iVo=o("XLMWithLMHeadModel"),dVo=o(" (XLM model)"),cVo=l(),K2=a("li"),que=a("strong"),fVo=o("xlm-roberta"),mVo=o(" \u2014 "),mz=a("a"),gVo=o("XLMRobertaForMaskedLM"),hVo=o(" (XLM-RoBERTa model)"),pVo=l(),Z2=a("li"),jue=a("strong"),_Vo=o("xlm-roberta-xl"),uVo=o(" \u2014 "),gz=a("a"),bVo=o("XLMRobertaXLForMaskedLM"),vVo=o(" (XLM-RoBERTa-XL model)"),FVo=l(),eb=a("li"),Due=a("strong"),TVo=o("yoso"),MVo=o(" \u2014 "),hz=a("a"),EVo=o("YosoForMaskedLM"),CVo=o(" (YOSO model)"),wVo=l(),ob=a("p"),AVo=o("The model is set in evaluation mode by default using "),Gue=a("code"),LVo=o("model.eval()"),yVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=a("code"),xVo=o("model.train()"),$Vo=l(),F(rb.$$.fragment),pUe=l(),hd=a("h2"),tb=a("a"),Vue=a("span"),F(l9.$$.fragment),kVo=l(),Xue=a("span"),SVo=o("AutoModelForSeq2SeqLM"),_Ue=l(),Io=a("div"),F(i9.$$.fragment),RVo=l(),pd=a("p"),PVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pz=a("a"),BVo=o("from_pretrained()"),IVo=o(" class method or the "),_z=a("a"),NVo=o("from_config()"),qVo=o(` class
method.`),jVo=l(),d9=a("p"),DVo=o("This class cannot be instantiated directly using "),zue=a("code"),GVo=o("__init__()"),OVo=o(" (throws an error)."),VVo=l(),_t=a("div"),F(c9.$$.fragment),XVo=l(),Wue=a("p"),zVo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),WVo=l(),_d=a("p"),QVo=o(`Note:
Loading a model from its configuration file does `),Que=a("strong"),UVo=o("not"),HVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=a("a"),JVo=o("from_pretrained()"),YVo=o(" to load the model weights."),KVo=l(),F(ab.$$.fragment),ZVo=l(),oo=a("div"),F(f9.$$.fragment),eXo=l(),Uue=a("p"),oXo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rXo=l(),Qa=a("p"),tXo=o("The model class to instantiate is selected based on the "),Hue=a("code"),aXo=o("model_type"),nXo=o(` property of the config object (either
passed as an argument or loaded from `),Jue=a("code"),sXo=o("pretrained_model_name_or_path"),lXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=a("code"),iXo=o("pretrained_model_name_or_path"),dXo=o(":"),cXo=l(),me=a("ul"),nb=a("li"),Kue=a("strong"),fXo=o("bart"),mXo=o(" \u2014 "),bz=a("a"),gXo=o("BartForConditionalGeneration"),hXo=o(" (BART model)"),pXo=l(),sb=a("li"),Zue=a("strong"),_Xo=o("bigbird_pegasus"),uXo=o(" \u2014 "),vz=a("a"),bXo=o("BigBirdPegasusForConditionalGeneration"),vXo=o(" (BigBird-Pegasus model)"),FXo=l(),lb=a("li"),e1e=a("strong"),TXo=o("blenderbot"),MXo=o(" \u2014 "),Fz=a("a"),EXo=o("BlenderbotForConditionalGeneration"),CXo=o(" (Blenderbot model)"),wXo=l(),ib=a("li"),o1e=a("strong"),AXo=o("blenderbot-small"),LXo=o(" \u2014 "),Tz=a("a"),yXo=o("BlenderbotSmallForConditionalGeneration"),xXo=o(" (BlenderbotSmall model)"),$Xo=l(),db=a("li"),r1e=a("strong"),kXo=o("encoder-decoder"),SXo=o(" \u2014 "),Mz=a("a"),RXo=o("EncoderDecoderModel"),PXo=o(" (Encoder decoder model)"),BXo=l(),cb=a("li"),t1e=a("strong"),IXo=o("fsmt"),NXo=o(" \u2014 "),Ez=a("a"),qXo=o("FSMTForConditionalGeneration"),jXo=o(" (FairSeq Machine-Translation model)"),DXo=l(),fb=a("li"),a1e=a("strong"),GXo=o("led"),OXo=o(" \u2014 "),Cz=a("a"),VXo=o("LEDForConditionalGeneration"),XXo=o(" (LED model)"),zXo=l(),mb=a("li"),n1e=a("strong"),WXo=o("longt5"),QXo=o(" \u2014 "),wz=a("a"),UXo=o("LongT5ForConditionalGeneration"),HXo=o(" (LongT5 model)"),JXo=l(),gb=a("li"),s1e=a("strong"),YXo=o("m2m_100"),KXo=o(" \u2014 "),Az=a("a"),ZXo=o("M2M100ForConditionalGeneration"),ezo=o(" (M2M100 model)"),ozo=l(),hb=a("li"),l1e=a("strong"),rzo=o("marian"),tzo=o(" \u2014 "),Lz=a("a"),azo=o("MarianMTModel"),nzo=o(" (Marian model)"),szo=l(),pb=a("li"),i1e=a("strong"),lzo=o("mbart"),izo=o(" \u2014 "),yz=a("a"),dzo=o("MBartForConditionalGeneration"),czo=o(" (mBART model)"),fzo=l(),_b=a("li"),d1e=a("strong"),mzo=o("mt5"),gzo=o(" \u2014 "),xz=a("a"),hzo=o("MT5ForConditionalGeneration"),pzo=o(" (MT5 model)"),_zo=l(),ub=a("li"),c1e=a("strong"),uzo=o("mvp"),bzo=o(" \u2014 "),$z=a("a"),vzo=o("MvpForConditionalGeneration"),Fzo=o(" (MVP model)"),Tzo=l(),bb=a("li"),f1e=a("strong"),Mzo=o("nllb"),Ezo=o(" \u2014 "),kz=a("a"),Czo=o("M2M100ForConditionalGeneration"),wzo=o(" (NLLB model)"),Azo=l(),vb=a("li"),m1e=a("strong"),Lzo=o("pegasus"),yzo=o(" \u2014 "),Sz=a("a"),xzo=o("PegasusForConditionalGeneration"),$zo=o(" (Pegasus model)"),kzo=l(),Fb=a("li"),g1e=a("strong"),Szo=o("plbart"),Rzo=o(" \u2014 "),Rz=a("a"),Pzo=o("PLBartForConditionalGeneration"),Bzo=o(" (PLBart model)"),Izo=l(),Tb=a("li"),h1e=a("strong"),Nzo=o("prophetnet"),qzo=o(" \u2014 "),Pz=a("a"),jzo=o("ProphetNetForConditionalGeneration"),Dzo=o(" (ProphetNet model)"),Gzo=l(),Mb=a("li"),p1e=a("strong"),Ozo=o("t5"),Vzo=o(" \u2014 "),Bz=a("a"),Xzo=o("T5ForConditionalGeneration"),zzo=o(" (T5 model)"),Wzo=l(),Eb=a("li"),_1e=a("strong"),Qzo=o("xlm-prophetnet"),Uzo=o(" \u2014 "),Iz=a("a"),Hzo=o("XLMProphetNetForConditionalGeneration"),Jzo=o(" (XLM-ProphetNet model)"),Yzo=l(),Cb=a("p"),Kzo=o("The model is set in evaluation mode by default using "),u1e=a("code"),Zzo=o("model.eval()"),eWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b1e=a("code"),oWo=o("model.train()"),rWo=l(),F(wb.$$.fragment),uUe=l(),ud=a("h2"),Ab=a("a"),v1e=a("span"),F(m9.$$.fragment),tWo=l(),F1e=a("span"),aWo=o("AutoModelForSequenceClassification"),bUe=l(),No=a("div"),F(g9.$$.fragment),nWo=l(),bd=a("p"),sWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Nz=a("a"),lWo=o("from_pretrained()"),iWo=o(" class method or the "),qz=a("a"),dWo=o("from_config()"),cWo=o(` class
method.`),fWo=l(),h9=a("p"),mWo=o("This class cannot be instantiated directly using "),T1e=a("code"),gWo=o("__init__()"),hWo=o(" (throws an error)."),pWo=l(),ut=a("div"),F(p9.$$.fragment),_Wo=l(),M1e=a("p"),uWo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bWo=l(),vd=a("p"),vWo=o(`Note:
Loading a model from its configuration file does `),E1e=a("strong"),FWo=o("not"),TWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=a("a"),MWo=o("from_pretrained()"),EWo=o(" to load the model weights."),CWo=l(),F(Lb.$$.fragment),wWo=l(),ro=a("div"),F(_9.$$.fragment),AWo=l(),C1e=a("p"),LWo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),yWo=l(),Ua=a("p"),xWo=o("The model class to instantiate is selected based on the "),w1e=a("code"),$Wo=o("model_type"),kWo=o(` property of the config object (either
passed as an argument or loaded from `),A1e=a("code"),SWo=o("pretrained_model_name_or_path"),RWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=a("code"),PWo=o("pretrained_model_name_or_path"),BWo=o(":"),IWo=l(),N=a("ul"),yb=a("li"),y1e=a("strong"),NWo=o("albert"),qWo=o(" \u2014 "),Dz=a("a"),jWo=o("AlbertForSequenceClassification"),DWo=o(" (ALBERT model)"),GWo=l(),xb=a("li"),x1e=a("strong"),OWo=o("bart"),VWo=o(" \u2014 "),Gz=a("a"),XWo=o("BartForSequenceClassification"),zWo=o(" (BART model)"),WWo=l(),$b=a("li"),$1e=a("strong"),QWo=o("bert"),UWo=o(" \u2014 "),Oz=a("a"),HWo=o("BertForSequenceClassification"),JWo=o(" (BERT model)"),YWo=l(),kb=a("li"),k1e=a("strong"),KWo=o("big_bird"),ZWo=o(" \u2014 "),Vz=a("a"),eQo=o("BigBirdForSequenceClassification"),oQo=o(" (BigBird model)"),rQo=l(),Sb=a("li"),S1e=a("strong"),tQo=o("bigbird_pegasus"),aQo=o(" \u2014 "),Xz=a("a"),nQo=o("BigBirdPegasusForSequenceClassification"),sQo=o(" (BigBird-Pegasus model)"),lQo=l(),Rb=a("li"),R1e=a("strong"),iQo=o("bloom"),dQo=o(" \u2014 "),zz=a("a"),cQo=o("BloomForSequenceClassification"),fQo=o(" (BLOOM model)"),mQo=l(),Pb=a("li"),P1e=a("strong"),gQo=o("camembert"),hQo=o(" \u2014 "),Wz=a("a"),pQo=o("CamembertForSequenceClassification"),_Qo=o(" (CamemBERT model)"),uQo=l(),Bb=a("li"),B1e=a("strong"),bQo=o("canine"),vQo=o(" \u2014 "),Qz=a("a"),FQo=o("CanineForSequenceClassification"),TQo=o(" (CANINE model)"),MQo=l(),Ib=a("li"),I1e=a("strong"),EQo=o("convbert"),CQo=o(" \u2014 "),Uz=a("a"),wQo=o("ConvBertForSequenceClassification"),AQo=o(" (ConvBERT model)"),LQo=l(),Nb=a("li"),N1e=a("strong"),yQo=o("ctrl"),xQo=o(" \u2014 "),Hz=a("a"),$Qo=o("CTRLForSequenceClassification"),kQo=o(" (CTRL model)"),SQo=l(),qb=a("li"),q1e=a("strong"),RQo=o("data2vec-text"),PQo=o(" \u2014 "),Jz=a("a"),BQo=o("Data2VecTextForSequenceClassification"),IQo=o(" (Data2VecText model)"),NQo=l(),jb=a("li"),j1e=a("strong"),qQo=o("deberta"),jQo=o(" \u2014 "),Yz=a("a"),DQo=o("DebertaForSequenceClassification"),GQo=o(" (DeBERTa model)"),OQo=l(),Db=a("li"),D1e=a("strong"),VQo=o("deberta-v2"),XQo=o(" \u2014 "),Kz=a("a"),zQo=o("DebertaV2ForSequenceClassification"),WQo=o(" (DeBERTa-v2 model)"),QQo=l(),Gb=a("li"),G1e=a("strong"),UQo=o("distilbert"),HQo=o(" \u2014 "),Zz=a("a"),JQo=o("DistilBertForSequenceClassification"),YQo=o(" (DistilBERT model)"),KQo=l(),Ob=a("li"),O1e=a("strong"),ZQo=o("electra"),eUo=o(" \u2014 "),eW=a("a"),oUo=o("ElectraForSequenceClassification"),rUo=o(" (ELECTRA model)"),tUo=l(),Vb=a("li"),V1e=a("strong"),aUo=o("flaubert"),nUo=o(" \u2014 "),oW=a("a"),sUo=o("FlaubertForSequenceClassification"),lUo=o(" (FlauBERT model)"),iUo=l(),Xb=a("li"),X1e=a("strong"),dUo=o("fnet"),cUo=o(" \u2014 "),rW=a("a"),fUo=o("FNetForSequenceClassification"),mUo=o(" (FNet model)"),gUo=l(),zb=a("li"),z1e=a("strong"),hUo=o("funnel"),pUo=o(" \u2014 "),tW=a("a"),_Uo=o("FunnelForSequenceClassification"),uUo=o(" (Funnel Transformer model)"),bUo=l(),Wb=a("li"),W1e=a("strong"),vUo=o("gpt2"),FUo=o(" \u2014 "),aW=a("a"),TUo=o("GPT2ForSequenceClassification"),MUo=o(" (OpenAI GPT-2 model)"),EUo=l(),Qb=a("li"),Q1e=a("strong"),CUo=o("gpt_neo"),wUo=o(" \u2014 "),nW=a("a"),AUo=o("GPTNeoForSequenceClassification"),LUo=o(" (GPT Neo model)"),yUo=l(),Ub=a("li"),U1e=a("strong"),xUo=o("gptj"),$Uo=o(" \u2014 "),sW=a("a"),kUo=o("GPTJForSequenceClassification"),SUo=o(" (GPT-J model)"),RUo=l(),Hb=a("li"),H1e=a("strong"),PUo=o("ibert"),BUo=o(" \u2014 "),lW=a("a"),IUo=o("IBertForSequenceClassification"),NUo=o(" (I-BERT model)"),qUo=l(),Jb=a("li"),J1e=a("strong"),jUo=o("layoutlm"),DUo=o(" \u2014 "),iW=a("a"),GUo=o("LayoutLMForSequenceClassification"),OUo=o(" (LayoutLM model)"),VUo=l(),Yb=a("li"),Y1e=a("strong"),XUo=o("layoutlmv2"),zUo=o(" \u2014 "),dW=a("a"),WUo=o("LayoutLMv2ForSequenceClassification"),QUo=o(" (LayoutLMv2 model)"),UUo=l(),Kb=a("li"),K1e=a("strong"),HUo=o("layoutlmv3"),JUo=o(" \u2014 "),cW=a("a"),YUo=o("LayoutLMv3ForSequenceClassification"),KUo=o(" (LayoutLMv3 model)"),ZUo=l(),Zb=a("li"),Z1e=a("strong"),eHo=o("led"),oHo=o(" \u2014 "),fW=a("a"),rHo=o("LEDForSequenceClassification"),tHo=o(" (LED model)"),aHo=l(),ev=a("li"),e4e=a("strong"),nHo=o("longformer"),sHo=o(" \u2014 "),mW=a("a"),lHo=o("LongformerForSequenceClassification"),iHo=o(" (Longformer model)"),dHo=l(),ov=a("li"),o4e=a("strong"),cHo=o("luke"),fHo=o(" \u2014 "),gW=a("a"),mHo=o("LukeForSequenceClassification"),gHo=o(" (LUKE model)"),hHo=l(),rv=a("li"),r4e=a("strong"),pHo=o("mbart"),_Ho=o(" \u2014 "),hW=a("a"),uHo=o("MBartForSequenceClassification"),bHo=o(" (mBART model)"),vHo=l(),tv=a("li"),t4e=a("strong"),FHo=o("megatron-bert"),THo=o(" \u2014 "),pW=a("a"),MHo=o("MegatronBertForSequenceClassification"),EHo=o(" (Megatron-BERT model)"),CHo=l(),av=a("li"),a4e=a("strong"),wHo=o("mobilebert"),AHo=o(" \u2014 "),_W=a("a"),LHo=o("MobileBertForSequenceClassification"),yHo=o(" (MobileBERT model)"),xHo=l(),nv=a("li"),n4e=a("strong"),$Ho=o("mpnet"),kHo=o(" \u2014 "),uW=a("a"),SHo=o("MPNetForSequenceClassification"),RHo=o(" (MPNet model)"),PHo=l(),sv=a("li"),s4e=a("strong"),BHo=o("mvp"),IHo=o(" \u2014 "),bW=a("a"),NHo=o("MvpForSequenceClassification"),qHo=o(" (MVP model)"),jHo=l(),lv=a("li"),l4e=a("strong"),DHo=o("nezha"),GHo=o(" \u2014 "),vW=a("a"),OHo=o("NezhaForSequenceClassification"),VHo=o(" (Nezha model)"),XHo=l(),iv=a("li"),i4e=a("strong"),zHo=o("nystromformer"),WHo=o(" \u2014 "),FW=a("a"),QHo=o("NystromformerForSequenceClassification"),UHo=o(" (Nystr\xF6mformer model)"),HHo=l(),dv=a("li"),d4e=a("strong"),JHo=o("openai-gpt"),YHo=o(" \u2014 "),TW=a("a"),KHo=o("OpenAIGPTForSequenceClassification"),ZHo=o(" (OpenAI GPT model)"),eJo=l(),cv=a("li"),c4e=a("strong"),oJo=o("opt"),rJo=o(" \u2014 "),MW=a("a"),tJo=o("OPTForSequenceClassification"),aJo=o(" (OPT model)"),nJo=l(),fv=a("li"),f4e=a("strong"),sJo=o("perceiver"),lJo=o(" \u2014 "),EW=a("a"),iJo=o("PerceiverForSequenceClassification"),dJo=o(" (Perceiver model)"),cJo=l(),mv=a("li"),m4e=a("strong"),fJo=o("plbart"),mJo=o(" \u2014 "),CW=a("a"),gJo=o("PLBartForSequenceClassification"),hJo=o(" (PLBart model)"),pJo=l(),gv=a("li"),g4e=a("strong"),_Jo=o("qdqbert"),uJo=o(" \u2014 "),wW=a("a"),bJo=o("QDQBertForSequenceClassification"),vJo=o(" (QDQBert model)"),FJo=l(),hv=a("li"),h4e=a("strong"),TJo=o("reformer"),MJo=o(" \u2014 "),AW=a("a"),EJo=o("ReformerForSequenceClassification"),CJo=o(" (Reformer model)"),wJo=l(),pv=a("li"),p4e=a("strong"),AJo=o("rembert"),LJo=o(" \u2014 "),LW=a("a"),yJo=o("RemBertForSequenceClassification"),xJo=o(" (RemBERT model)"),$Jo=l(),_v=a("li"),_4e=a("strong"),kJo=o("roberta"),SJo=o(" \u2014 "),yW=a("a"),RJo=o("RobertaForSequenceClassification"),PJo=o(" (RoBERTa model)"),BJo=l(),uv=a("li"),u4e=a("strong"),IJo=o("roformer"),NJo=o(" \u2014 "),xW=a("a"),qJo=o("RoFormerForSequenceClassification"),jJo=o(" (RoFormer model)"),DJo=l(),bv=a("li"),b4e=a("strong"),GJo=o("squeezebert"),OJo=o(" \u2014 "),$W=a("a"),VJo=o("SqueezeBertForSequenceClassification"),XJo=o(" (SqueezeBERT model)"),zJo=l(),vv=a("li"),v4e=a("strong"),WJo=o("tapas"),QJo=o(" \u2014 "),kW=a("a"),UJo=o("TapasForSequenceClassification"),HJo=o(" (TAPAS model)"),JJo=l(),Fv=a("li"),F4e=a("strong"),YJo=o("transfo-xl"),KJo=o(" \u2014 "),SW=a("a"),ZJo=o("TransfoXLForSequenceClassification"),eYo=o(" (Transformer-XL model)"),oYo=l(),Tv=a("li"),T4e=a("strong"),rYo=o("xlm"),tYo=o(" \u2014 "),RW=a("a"),aYo=o("XLMForSequenceClassification"),nYo=o(" (XLM model)"),sYo=l(),Mv=a("li"),M4e=a("strong"),lYo=o("xlm-roberta"),iYo=o(" \u2014 "),PW=a("a"),dYo=o("XLMRobertaForSequenceClassification"),cYo=o(" (XLM-RoBERTa model)"),fYo=l(),Ev=a("li"),E4e=a("strong"),mYo=o("xlm-roberta-xl"),gYo=o(" \u2014 "),BW=a("a"),hYo=o("XLMRobertaXLForSequenceClassification"),pYo=o(" (XLM-RoBERTa-XL model)"),_Yo=l(),Cv=a("li"),C4e=a("strong"),uYo=o("xlnet"),bYo=o(" \u2014 "),IW=a("a"),vYo=o("XLNetForSequenceClassification"),FYo=o(" (XLNet model)"),TYo=l(),wv=a("li"),w4e=a("strong"),MYo=o("yoso"),EYo=o(" \u2014 "),NW=a("a"),CYo=o("YosoForSequenceClassification"),wYo=o(" (YOSO model)"),AYo=l(),Av=a("p"),LYo=o("The model is set in evaluation mode by default using "),A4e=a("code"),yYo=o("model.eval()"),xYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L4e=a("code"),$Yo=o("model.train()"),kYo=l(),F(Lv.$$.fragment),vUe=l(),Fd=a("h2"),yv=a("a"),y4e=a("span"),F(u9.$$.fragment),SYo=l(),x4e=a("span"),RYo=o("AutoModelForMultipleChoice"),FUe=l(),qo=a("div"),F(b9.$$.fragment),PYo=l(),Td=a("p"),BYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),qW=a("a"),IYo=o("from_pretrained()"),NYo=o(" class method or the "),jW=a("a"),qYo=o("from_config()"),jYo=o(` class
method.`),DYo=l(),v9=a("p"),GYo=o("This class cannot be instantiated directly using "),$4e=a("code"),OYo=o("__init__()"),VYo=o(" (throws an error)."),XYo=l(),bt=a("div"),F(F9.$$.fragment),zYo=l(),k4e=a("p"),WYo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),QYo=l(),Md=a("p"),UYo=o(`Note:
Loading a model from its configuration file does `),S4e=a("strong"),HYo=o("not"),JYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=a("a"),YYo=o("from_pretrained()"),KYo=o(" to load the model weights."),ZYo=l(),F(xv.$$.fragment),eKo=l(),to=a("div"),F(T9.$$.fragment),oKo=l(),R4e=a("p"),rKo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tKo=l(),Ha=a("p"),aKo=o("The model class to instantiate is selected based on the "),P4e=a("code"),nKo=o("model_type"),sKo=o(` property of the config object (either
passed as an argument or loaded from `),B4e=a("code"),lKo=o("pretrained_model_name_or_path"),iKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I4e=a("code"),dKo=o("pretrained_model_name_or_path"),cKo=o(":"),fKo=l(),Z=a("ul"),$v=a("li"),N4e=a("strong"),mKo=o("albert"),gKo=o(" \u2014 "),GW=a("a"),hKo=o("AlbertForMultipleChoice"),pKo=o(" (ALBERT model)"),_Ko=l(),kv=a("li"),q4e=a("strong"),uKo=o("bert"),bKo=o(" \u2014 "),OW=a("a"),vKo=o("BertForMultipleChoice"),FKo=o(" (BERT model)"),TKo=l(),Sv=a("li"),j4e=a("strong"),MKo=o("big_bird"),EKo=o(" \u2014 "),VW=a("a"),CKo=o("BigBirdForMultipleChoice"),wKo=o(" (BigBird model)"),AKo=l(),Rv=a("li"),D4e=a("strong"),LKo=o("camembert"),yKo=o(" \u2014 "),XW=a("a"),xKo=o("CamembertForMultipleChoice"),$Ko=o(" (CamemBERT model)"),kKo=l(),Pv=a("li"),G4e=a("strong"),SKo=o("canine"),RKo=o(" \u2014 "),zW=a("a"),PKo=o("CanineForMultipleChoice"),BKo=o(" (CANINE model)"),IKo=l(),Bv=a("li"),O4e=a("strong"),NKo=o("convbert"),qKo=o(" \u2014 "),WW=a("a"),jKo=o("ConvBertForMultipleChoice"),DKo=o(" (ConvBERT model)"),GKo=l(),Iv=a("li"),V4e=a("strong"),OKo=o("data2vec-text"),VKo=o(" \u2014 "),QW=a("a"),XKo=o("Data2VecTextForMultipleChoice"),zKo=o(" (Data2VecText model)"),WKo=l(),Nv=a("li"),X4e=a("strong"),QKo=o("deberta-v2"),UKo=o(" \u2014 "),UW=a("a"),HKo=o("DebertaV2ForMultipleChoice"),JKo=o(" (DeBERTa-v2 model)"),YKo=l(),qv=a("li"),z4e=a("strong"),KKo=o("distilbert"),ZKo=o(" \u2014 "),HW=a("a"),eZo=o("DistilBertForMultipleChoice"),oZo=o(" (DistilBERT model)"),rZo=l(),jv=a("li"),W4e=a("strong"),tZo=o("electra"),aZo=o(" \u2014 "),JW=a("a"),nZo=o("ElectraForMultipleChoice"),sZo=o(" (ELECTRA model)"),lZo=l(),Dv=a("li"),Q4e=a("strong"),iZo=o("flaubert"),dZo=o(" \u2014 "),YW=a("a"),cZo=o("FlaubertForMultipleChoice"),fZo=o(" (FlauBERT model)"),mZo=l(),Gv=a("li"),U4e=a("strong"),gZo=o("fnet"),hZo=o(" \u2014 "),KW=a("a"),pZo=o("FNetForMultipleChoice"),_Zo=o(" (FNet model)"),uZo=l(),Ov=a("li"),H4e=a("strong"),bZo=o("funnel"),vZo=o(" \u2014 "),ZW=a("a"),FZo=o("FunnelForMultipleChoice"),TZo=o(" (Funnel Transformer model)"),MZo=l(),Vv=a("li"),J4e=a("strong"),EZo=o("ibert"),CZo=o(" \u2014 "),eQ=a("a"),wZo=o("IBertForMultipleChoice"),AZo=o(" (I-BERT model)"),LZo=l(),Xv=a("li"),Y4e=a("strong"),yZo=o("longformer"),xZo=o(" \u2014 "),oQ=a("a"),$Zo=o("LongformerForMultipleChoice"),kZo=o(" (Longformer model)"),SZo=l(),zv=a("li"),K4e=a("strong"),RZo=o("luke"),PZo=o(" \u2014 "),rQ=a("a"),BZo=o("LukeForMultipleChoice"),IZo=o(" (LUKE model)"),NZo=l(),Wv=a("li"),Z4e=a("strong"),qZo=o("megatron-bert"),jZo=o(" \u2014 "),tQ=a("a"),DZo=o("MegatronBertForMultipleChoice"),GZo=o(" (Megatron-BERT model)"),OZo=l(),Qv=a("li"),e2e=a("strong"),VZo=o("mobilebert"),XZo=o(" \u2014 "),aQ=a("a"),zZo=o("MobileBertForMultipleChoice"),WZo=o(" (MobileBERT model)"),QZo=l(),Uv=a("li"),o2e=a("strong"),UZo=o("mpnet"),HZo=o(" \u2014 "),nQ=a("a"),JZo=o("MPNetForMultipleChoice"),YZo=o(" (MPNet model)"),KZo=l(),Hv=a("li"),r2e=a("strong"),ZZo=o("nezha"),eer=o(" \u2014 "),sQ=a("a"),oer=o("NezhaForMultipleChoice"),rer=o(" (Nezha model)"),ter=l(),Jv=a("li"),t2e=a("strong"),aer=o("nystromformer"),ner=o(" \u2014 "),lQ=a("a"),ser=o("NystromformerForMultipleChoice"),ler=o(" (Nystr\xF6mformer model)"),ier=l(),Yv=a("li"),a2e=a("strong"),der=o("qdqbert"),cer=o(" \u2014 "),iQ=a("a"),fer=o("QDQBertForMultipleChoice"),mer=o(" (QDQBert model)"),ger=l(),Kv=a("li"),n2e=a("strong"),her=o("rembert"),per=o(" \u2014 "),dQ=a("a"),_er=o("RemBertForMultipleChoice"),uer=o(" (RemBERT model)"),ber=l(),Zv=a("li"),s2e=a("strong"),ver=o("roberta"),Fer=o(" \u2014 "),cQ=a("a"),Ter=o("RobertaForMultipleChoice"),Mer=o(" (RoBERTa model)"),Eer=l(),e3=a("li"),l2e=a("strong"),Cer=o("roformer"),wer=o(" \u2014 "),fQ=a("a"),Aer=o("RoFormerForMultipleChoice"),Ler=o(" (RoFormer model)"),yer=l(),o3=a("li"),i2e=a("strong"),xer=o("squeezebert"),$er=o(" \u2014 "),mQ=a("a"),ker=o("SqueezeBertForMultipleChoice"),Ser=o(" (SqueezeBERT model)"),Rer=l(),r3=a("li"),d2e=a("strong"),Per=o("xlm"),Ber=o(" \u2014 "),gQ=a("a"),Ier=o("XLMForMultipleChoice"),Ner=o(" (XLM model)"),qer=l(),t3=a("li"),c2e=a("strong"),jer=o("xlm-roberta"),Der=o(" \u2014 "),hQ=a("a"),Ger=o("XLMRobertaForMultipleChoice"),Oer=o(" (XLM-RoBERTa model)"),Ver=l(),a3=a("li"),f2e=a("strong"),Xer=o("xlm-roberta-xl"),zer=o(" \u2014 "),pQ=a("a"),Wer=o("XLMRobertaXLForMultipleChoice"),Qer=o(" (XLM-RoBERTa-XL model)"),Uer=l(),n3=a("li"),m2e=a("strong"),Her=o("xlnet"),Jer=o(" \u2014 "),_Q=a("a"),Yer=o("XLNetForMultipleChoice"),Ker=o(" (XLNet model)"),Zer=l(),s3=a("li"),g2e=a("strong"),eor=o("yoso"),oor=o(" \u2014 "),uQ=a("a"),ror=o("YosoForMultipleChoice"),tor=o(" (YOSO model)"),aor=l(),l3=a("p"),nor=o("The model is set in evaluation mode by default using "),h2e=a("code"),sor=o("model.eval()"),lor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p2e=a("code"),ior=o("model.train()"),dor=l(),F(i3.$$.fragment),TUe=l(),Ed=a("h2"),d3=a("a"),_2e=a("span"),F(M9.$$.fragment),cor=l(),u2e=a("span"),mor=o("AutoModelForNextSentencePrediction"),MUe=l(),jo=a("div"),F(E9.$$.fragment),gor=l(),Cd=a("p"),hor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bQ=a("a"),por=o("from_pretrained()"),_or=o(" class method or the "),vQ=a("a"),uor=o("from_config()"),bor=o(` class
method.`),vor=l(),C9=a("p"),For=o("This class cannot be instantiated directly using "),b2e=a("code"),Tor=o("__init__()"),Mor=o(" (throws an error)."),Eor=l(),vt=a("div"),F(w9.$$.fragment),Cor=l(),v2e=a("p"),wor=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Aor=l(),wd=a("p"),Lor=o(`Note:
Loading a model from its configuration file does `),F2e=a("strong"),yor=o("not"),xor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),$or=o("from_pretrained()"),kor=o(" to load the model weights."),Sor=l(),F(c3.$$.fragment),Ror=l(),ao=a("div"),F(A9.$$.fragment),Por=l(),T2e=a("p"),Bor=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Ior=l(),Ja=a("p"),Nor=o("The model class to instantiate is selected based on the "),M2e=a("code"),qor=o("model_type"),jor=o(` property of the config object (either
passed as an argument or loaded from `),E2e=a("code"),Dor=o("pretrained_model_name_or_path"),Gor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=a("code"),Oor=o("pretrained_model_name_or_path"),Vor=o(":"),Xor=l(),Do=a("ul"),f3=a("li"),w2e=a("strong"),zor=o("bert"),Wor=o(" \u2014 "),TQ=a("a"),Qor=o("BertForNextSentencePrediction"),Uor=o(" (BERT model)"),Hor=l(),m3=a("li"),A2e=a("strong"),Jor=o("fnet"),Yor=o(" \u2014 "),MQ=a("a"),Kor=o("FNetForNextSentencePrediction"),Zor=o(" (FNet model)"),err=l(),g3=a("li"),L2e=a("strong"),orr=o("megatron-bert"),rrr=o(" \u2014 "),EQ=a("a"),trr=o("MegatronBertForNextSentencePrediction"),arr=o(" (Megatron-BERT model)"),nrr=l(),h3=a("li"),y2e=a("strong"),srr=o("mobilebert"),lrr=o(" \u2014 "),CQ=a("a"),irr=o("MobileBertForNextSentencePrediction"),drr=o(" (MobileBERT model)"),crr=l(),p3=a("li"),x2e=a("strong"),frr=o("nezha"),mrr=o(" \u2014 "),wQ=a("a"),grr=o("NezhaForNextSentencePrediction"),hrr=o(" (Nezha model)"),prr=l(),_3=a("li"),$2e=a("strong"),_rr=o("qdqbert"),urr=o(" \u2014 "),AQ=a("a"),brr=o("QDQBertForNextSentencePrediction"),vrr=o(" (QDQBert model)"),Frr=l(),u3=a("p"),Trr=o("The model is set in evaluation mode by default using "),k2e=a("code"),Mrr=o("model.eval()"),Err=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S2e=a("code"),Crr=o("model.train()"),wrr=l(),F(b3.$$.fragment),EUe=l(),Ad=a("h2"),v3=a("a"),R2e=a("span"),F(L9.$$.fragment),Arr=l(),P2e=a("span"),Lrr=o("AutoModelForTokenClassification"),CUe=l(),Go=a("div"),F(y9.$$.fragment),yrr=l(),Ld=a("p"),xrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),LQ=a("a"),$rr=o("from_pretrained()"),krr=o(" class method or the "),yQ=a("a"),Srr=o("from_config()"),Rrr=o(` class
method.`),Prr=l(),x9=a("p"),Brr=o("This class cannot be instantiated directly using "),B2e=a("code"),Irr=o("__init__()"),Nrr=o(" (throws an error)."),qrr=l(),Ft=a("div"),F($9.$$.fragment),jrr=l(),I2e=a("p"),Drr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Grr=l(),yd=a("p"),Orr=o(`Note:
Loading a model from its configuration file does `),N2e=a("strong"),Vrr=o("not"),Xrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=a("a"),zrr=o("from_pretrained()"),Wrr=o(" to load the model weights."),Qrr=l(),F(F3.$$.fragment),Urr=l(),no=a("div"),F(k9.$$.fragment),Hrr=l(),q2e=a("p"),Jrr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Yrr=l(),Ya=a("p"),Krr=o("The model class to instantiate is selected based on the "),j2e=a("code"),Zrr=o("model_type"),etr=o(` property of the config object (either
passed as an argument or loaded from `),D2e=a("code"),otr=o("pretrained_model_name_or_path"),rtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G2e=a("code"),ttr=o("pretrained_model_name_or_path"),atr=o(":"),ntr=l(),H=a("ul"),T3=a("li"),O2e=a("strong"),str=o("albert"),ltr=o(" \u2014 "),$Q=a("a"),itr=o("AlbertForTokenClassification"),dtr=o(" (ALBERT model)"),ctr=l(),M3=a("li"),V2e=a("strong"),ftr=o("bert"),mtr=o(" \u2014 "),kQ=a("a"),gtr=o("BertForTokenClassification"),htr=o(" (BERT model)"),ptr=l(),E3=a("li"),X2e=a("strong"),_tr=o("big_bird"),utr=o(" \u2014 "),SQ=a("a"),btr=o("BigBirdForTokenClassification"),vtr=o(" (BigBird model)"),Ftr=l(),C3=a("li"),z2e=a("strong"),Ttr=o("bloom"),Mtr=o(" \u2014 "),RQ=a("a"),Etr=o("BloomForTokenClassification"),Ctr=o(" (BLOOM model)"),wtr=l(),w3=a("li"),W2e=a("strong"),Atr=o("camembert"),Ltr=o(" \u2014 "),PQ=a("a"),ytr=o("CamembertForTokenClassification"),xtr=o(" (CamemBERT model)"),$tr=l(),A3=a("li"),Q2e=a("strong"),ktr=o("canine"),Str=o(" \u2014 "),BQ=a("a"),Rtr=o("CanineForTokenClassification"),Ptr=o(" (CANINE model)"),Btr=l(),L3=a("li"),U2e=a("strong"),Itr=o("convbert"),Ntr=o(" \u2014 "),IQ=a("a"),qtr=o("ConvBertForTokenClassification"),jtr=o(" (ConvBERT model)"),Dtr=l(),y3=a("li"),H2e=a("strong"),Gtr=o("data2vec-text"),Otr=o(" \u2014 "),NQ=a("a"),Vtr=o("Data2VecTextForTokenClassification"),Xtr=o(" (Data2VecText model)"),ztr=l(),x3=a("li"),J2e=a("strong"),Wtr=o("deberta"),Qtr=o(" \u2014 "),qQ=a("a"),Utr=o("DebertaForTokenClassification"),Htr=o(" (DeBERTa model)"),Jtr=l(),$3=a("li"),Y2e=a("strong"),Ytr=o("deberta-v2"),Ktr=o(" \u2014 "),jQ=a("a"),Ztr=o("DebertaV2ForTokenClassification"),ear=o(" (DeBERTa-v2 model)"),oar=l(),k3=a("li"),K2e=a("strong"),rar=o("distilbert"),tar=o(" \u2014 "),DQ=a("a"),aar=o("DistilBertForTokenClassification"),nar=o(" (DistilBERT model)"),sar=l(),S3=a("li"),Z2e=a("strong"),lar=o("electra"),iar=o(" \u2014 "),GQ=a("a"),dar=o("ElectraForTokenClassification"),car=o(" (ELECTRA model)"),far=l(),R3=a("li"),ebe=a("strong"),mar=o("flaubert"),gar=o(" \u2014 "),OQ=a("a"),har=o("FlaubertForTokenClassification"),par=o(" (FlauBERT model)"),_ar=l(),P3=a("li"),obe=a("strong"),uar=o("fnet"),bar=o(" \u2014 "),VQ=a("a"),Far=o("FNetForTokenClassification"),Tar=o(" (FNet model)"),Mar=l(),B3=a("li"),rbe=a("strong"),Ear=o("funnel"),Car=o(" \u2014 "),XQ=a("a"),war=o("FunnelForTokenClassification"),Aar=o(" (Funnel Transformer model)"),Lar=l(),I3=a("li"),tbe=a("strong"),yar=o("gpt2"),xar=o(" \u2014 "),zQ=a("a"),$ar=o("GPT2ForTokenClassification"),kar=o(" (OpenAI GPT-2 model)"),Sar=l(),N3=a("li"),abe=a("strong"),Rar=o("ibert"),Par=o(" \u2014 "),WQ=a("a"),Bar=o("IBertForTokenClassification"),Iar=o(" (I-BERT model)"),Nar=l(),q3=a("li"),nbe=a("strong"),qar=o("layoutlm"),jar=o(" \u2014 "),QQ=a("a"),Dar=o("LayoutLMForTokenClassification"),Gar=o(" (LayoutLM model)"),Oar=l(),j3=a("li"),sbe=a("strong"),Var=o("layoutlmv2"),Xar=o(" \u2014 "),UQ=a("a"),zar=o("LayoutLMv2ForTokenClassification"),War=o(" (LayoutLMv2 model)"),Qar=l(),D3=a("li"),lbe=a("strong"),Uar=o("layoutlmv3"),Har=o(" \u2014 "),HQ=a("a"),Jar=o("LayoutLMv3ForTokenClassification"),Yar=o(" (LayoutLMv3 model)"),Kar=l(),G3=a("li"),ibe=a("strong"),Zar=o("longformer"),enr=o(" \u2014 "),JQ=a("a"),onr=o("LongformerForTokenClassification"),rnr=o(" (Longformer model)"),tnr=l(),O3=a("li"),dbe=a("strong"),anr=o("luke"),nnr=o(" \u2014 "),YQ=a("a"),snr=o("LukeForTokenClassification"),lnr=o(" (LUKE model)"),inr=l(),V3=a("li"),cbe=a("strong"),dnr=o("megatron-bert"),cnr=o(" \u2014 "),KQ=a("a"),fnr=o("MegatronBertForTokenClassification"),mnr=o(" (Megatron-BERT model)"),gnr=l(),X3=a("li"),fbe=a("strong"),hnr=o("mobilebert"),pnr=o(" \u2014 "),ZQ=a("a"),_nr=o("MobileBertForTokenClassification"),unr=o(" (MobileBERT model)"),bnr=l(),z3=a("li"),mbe=a("strong"),vnr=o("mpnet"),Fnr=o(" \u2014 "),eU=a("a"),Tnr=o("MPNetForTokenClassification"),Mnr=o(" (MPNet model)"),Enr=l(),W3=a("li"),gbe=a("strong"),Cnr=o("nezha"),wnr=o(" \u2014 "),oU=a("a"),Anr=o("NezhaForTokenClassification"),Lnr=o(" (Nezha model)"),ynr=l(),Q3=a("li"),hbe=a("strong"),xnr=o("nystromformer"),$nr=o(" \u2014 "),rU=a("a"),knr=o("NystromformerForTokenClassification"),Snr=o(" (Nystr\xF6mformer model)"),Rnr=l(),U3=a("li"),pbe=a("strong"),Pnr=o("qdqbert"),Bnr=o(" \u2014 "),tU=a("a"),Inr=o("QDQBertForTokenClassification"),Nnr=o(" (QDQBert model)"),qnr=l(),H3=a("li"),_be=a("strong"),jnr=o("rembert"),Dnr=o(" \u2014 "),aU=a("a"),Gnr=o("RemBertForTokenClassification"),Onr=o(" (RemBERT model)"),Vnr=l(),J3=a("li"),ube=a("strong"),Xnr=o("roberta"),znr=o(" \u2014 "),nU=a("a"),Wnr=o("RobertaForTokenClassification"),Qnr=o(" (RoBERTa model)"),Unr=l(),Y3=a("li"),bbe=a("strong"),Hnr=o("roformer"),Jnr=o(" \u2014 "),sU=a("a"),Ynr=o("RoFormerForTokenClassification"),Knr=o(" (RoFormer model)"),Znr=l(),K3=a("li"),vbe=a("strong"),esr=o("squeezebert"),osr=o(" \u2014 "),lU=a("a"),rsr=o("SqueezeBertForTokenClassification"),tsr=o(" (SqueezeBERT model)"),asr=l(),Z3=a("li"),Fbe=a("strong"),nsr=o("xlm"),ssr=o(" \u2014 "),iU=a("a"),lsr=o("XLMForTokenClassification"),isr=o(" (XLM model)"),dsr=l(),e5=a("li"),Tbe=a("strong"),csr=o("xlm-roberta"),fsr=o(" \u2014 "),dU=a("a"),msr=o("XLMRobertaForTokenClassification"),gsr=o(" (XLM-RoBERTa model)"),hsr=l(),o5=a("li"),Mbe=a("strong"),psr=o("xlm-roberta-xl"),_sr=o(" \u2014 "),cU=a("a"),usr=o("XLMRobertaXLForTokenClassification"),bsr=o(" (XLM-RoBERTa-XL model)"),vsr=l(),r5=a("li"),Ebe=a("strong"),Fsr=o("xlnet"),Tsr=o(" \u2014 "),fU=a("a"),Msr=o("XLNetForTokenClassification"),Esr=o(" (XLNet model)"),Csr=l(),t5=a("li"),Cbe=a("strong"),wsr=o("yoso"),Asr=o(" \u2014 "),mU=a("a"),Lsr=o("YosoForTokenClassification"),ysr=o(" (YOSO model)"),xsr=l(),a5=a("p"),$sr=o("The model is set in evaluation mode by default using "),wbe=a("code"),ksr=o("model.eval()"),Ssr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Abe=a("code"),Rsr=o("model.train()"),Psr=l(),F(n5.$$.fragment),wUe=l(),xd=a("h2"),s5=a("a"),Lbe=a("span"),F(S9.$$.fragment),Bsr=l(),ybe=a("span"),Isr=o("AutoModelForQuestionAnswering"),AUe=l(),Oo=a("div"),F(R9.$$.fragment),Nsr=l(),$d=a("p"),qsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gU=a("a"),jsr=o("from_pretrained()"),Dsr=o(" class method or the "),hU=a("a"),Gsr=o("from_config()"),Osr=o(` class
method.`),Vsr=l(),P9=a("p"),Xsr=o("This class cannot be instantiated directly using "),xbe=a("code"),zsr=o("__init__()"),Wsr=o(" (throws an error)."),Qsr=l(),Tt=a("div"),F(B9.$$.fragment),Usr=l(),$be=a("p"),Hsr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Jsr=l(),kd=a("p"),Ysr=o(`Note:
Loading a model from its configuration file does `),kbe=a("strong"),Ksr=o("not"),Zsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),elr=o("from_pretrained()"),olr=o(" to load the model weights."),rlr=l(),F(l5.$$.fragment),tlr=l(),so=a("div"),F(I9.$$.fragment),alr=l(),Sbe=a("p"),nlr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),slr=l(),Ka=a("p"),llr=o("The model class to instantiate is selected based on the "),Rbe=a("code"),ilr=o("model_type"),dlr=o(` property of the config object (either
passed as an argument or loaded from `),Pbe=a("code"),clr=o("pretrained_model_name_or_path"),flr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=a("code"),mlr=o("pretrained_model_name_or_path"),glr=o(":"),hlr=l(),V=a("ul"),i5=a("li"),Ibe=a("strong"),plr=o("albert"),_lr=o(" \u2014 "),_U=a("a"),ulr=o("AlbertForQuestionAnswering"),blr=o(" (ALBERT model)"),vlr=l(),d5=a("li"),Nbe=a("strong"),Flr=o("bart"),Tlr=o(" \u2014 "),uU=a("a"),Mlr=o("BartForQuestionAnswering"),Elr=o(" (BART model)"),Clr=l(),c5=a("li"),qbe=a("strong"),wlr=o("bert"),Alr=o(" \u2014 "),bU=a("a"),Llr=o("BertForQuestionAnswering"),ylr=o(" (BERT model)"),xlr=l(),f5=a("li"),jbe=a("strong"),$lr=o("big_bird"),klr=o(" \u2014 "),vU=a("a"),Slr=o("BigBirdForQuestionAnswering"),Rlr=o(" (BigBird model)"),Plr=l(),m5=a("li"),Dbe=a("strong"),Blr=o("bigbird_pegasus"),Ilr=o(" \u2014 "),FU=a("a"),Nlr=o("BigBirdPegasusForQuestionAnswering"),qlr=o(" (BigBird-Pegasus model)"),jlr=l(),g5=a("li"),Gbe=a("strong"),Dlr=o("camembert"),Glr=o(" \u2014 "),TU=a("a"),Olr=o("CamembertForQuestionAnswering"),Vlr=o(" (CamemBERT model)"),Xlr=l(),h5=a("li"),Obe=a("strong"),zlr=o("canine"),Wlr=o(" \u2014 "),MU=a("a"),Qlr=o("CanineForQuestionAnswering"),Ulr=o(" (CANINE model)"),Hlr=l(),p5=a("li"),Vbe=a("strong"),Jlr=o("convbert"),Ylr=o(" \u2014 "),EU=a("a"),Klr=o("ConvBertForQuestionAnswering"),Zlr=o(" (ConvBERT model)"),eir=l(),_5=a("li"),Xbe=a("strong"),oir=o("data2vec-text"),rir=o(" \u2014 "),CU=a("a"),tir=o("Data2VecTextForQuestionAnswering"),air=o(" (Data2VecText model)"),nir=l(),u5=a("li"),zbe=a("strong"),sir=o("deberta"),lir=o(" \u2014 "),wU=a("a"),iir=o("DebertaForQuestionAnswering"),dir=o(" (DeBERTa model)"),cir=l(),b5=a("li"),Wbe=a("strong"),fir=o("deberta-v2"),mir=o(" \u2014 "),AU=a("a"),gir=o("DebertaV2ForQuestionAnswering"),hir=o(" (DeBERTa-v2 model)"),pir=l(),v5=a("li"),Qbe=a("strong"),_ir=o("distilbert"),uir=o(" \u2014 "),LU=a("a"),bir=o("DistilBertForQuestionAnswering"),vir=o(" (DistilBERT model)"),Fir=l(),F5=a("li"),Ube=a("strong"),Tir=o("electra"),Mir=o(" \u2014 "),yU=a("a"),Eir=o("ElectraForQuestionAnswering"),Cir=o(" (ELECTRA model)"),wir=l(),T5=a("li"),Hbe=a("strong"),Air=o("flaubert"),Lir=o(" \u2014 "),xU=a("a"),yir=o("FlaubertForQuestionAnsweringSimple"),xir=o(" (FlauBERT model)"),$ir=l(),M5=a("li"),Jbe=a("strong"),kir=o("fnet"),Sir=o(" \u2014 "),$U=a("a"),Rir=o("FNetForQuestionAnswering"),Pir=o(" (FNet model)"),Bir=l(),E5=a("li"),Ybe=a("strong"),Iir=o("funnel"),Nir=o(" \u2014 "),kU=a("a"),qir=o("FunnelForQuestionAnswering"),jir=o(" (Funnel Transformer model)"),Dir=l(),C5=a("li"),Kbe=a("strong"),Gir=o("gptj"),Oir=o(" \u2014 "),SU=a("a"),Vir=o("GPTJForQuestionAnswering"),Xir=o(" (GPT-J model)"),zir=l(),w5=a("li"),Zbe=a("strong"),Wir=o("ibert"),Qir=o(" \u2014 "),RU=a("a"),Uir=o("IBertForQuestionAnswering"),Hir=o(" (I-BERT model)"),Jir=l(),A5=a("li"),eve=a("strong"),Yir=o("layoutlmv2"),Kir=o(" \u2014 "),PU=a("a"),Zir=o("LayoutLMv2ForQuestionAnswering"),edr=o(" (LayoutLMv2 model)"),odr=l(),L5=a("li"),ove=a("strong"),rdr=o("layoutlmv3"),tdr=o(" \u2014 "),BU=a("a"),adr=o("LayoutLMv3ForQuestionAnswering"),ndr=o(" (LayoutLMv3 model)"),sdr=l(),y5=a("li"),rve=a("strong"),ldr=o("led"),idr=o(" \u2014 "),IU=a("a"),ddr=o("LEDForQuestionAnswering"),cdr=o(" (LED model)"),fdr=l(),x5=a("li"),tve=a("strong"),mdr=o("longformer"),gdr=o(" \u2014 "),NU=a("a"),hdr=o("LongformerForQuestionAnswering"),pdr=o(" (Longformer model)"),_dr=l(),$5=a("li"),ave=a("strong"),udr=o("luke"),bdr=o(" \u2014 "),qU=a("a"),vdr=o("LukeForQuestionAnswering"),Fdr=o(" (LUKE model)"),Tdr=l(),k5=a("li"),nve=a("strong"),Mdr=o("lxmert"),Edr=o(" \u2014 "),jU=a("a"),Cdr=o("LxmertForQuestionAnswering"),wdr=o(" (LXMERT model)"),Adr=l(),S5=a("li"),sve=a("strong"),Ldr=o("mbart"),ydr=o(" \u2014 "),DU=a("a"),xdr=o("MBartForQuestionAnswering"),$dr=o(" (mBART model)"),kdr=l(),R5=a("li"),lve=a("strong"),Sdr=o("megatron-bert"),Rdr=o(" \u2014 "),GU=a("a"),Pdr=o("MegatronBertForQuestionAnswering"),Bdr=o(" (Megatron-BERT model)"),Idr=l(),P5=a("li"),ive=a("strong"),Ndr=o("mobilebert"),qdr=o(" \u2014 "),OU=a("a"),jdr=o("MobileBertForQuestionAnswering"),Ddr=o(" (MobileBERT model)"),Gdr=l(),B5=a("li"),dve=a("strong"),Odr=o("mpnet"),Vdr=o(" \u2014 "),VU=a("a"),Xdr=o("MPNetForQuestionAnswering"),zdr=o(" (MPNet model)"),Wdr=l(),I5=a("li"),cve=a("strong"),Qdr=o("mvp"),Udr=o(" \u2014 "),XU=a("a"),Hdr=o("MvpForQuestionAnswering"),Jdr=o(" (MVP model)"),Ydr=l(),N5=a("li"),fve=a("strong"),Kdr=o("nezha"),Zdr=o(" \u2014 "),zU=a("a"),ecr=o("NezhaForQuestionAnswering"),ocr=o(" (Nezha model)"),rcr=l(),q5=a("li"),mve=a("strong"),tcr=o("nystromformer"),acr=o(" \u2014 "),WU=a("a"),ncr=o("NystromformerForQuestionAnswering"),scr=o(" (Nystr\xF6mformer model)"),lcr=l(),j5=a("li"),gve=a("strong"),icr=o("qdqbert"),dcr=o(" \u2014 "),QU=a("a"),ccr=o("QDQBertForQuestionAnswering"),fcr=o(" (QDQBert model)"),mcr=l(),D5=a("li"),hve=a("strong"),gcr=o("reformer"),hcr=o(" \u2014 "),UU=a("a"),pcr=o("ReformerForQuestionAnswering"),_cr=o(" (Reformer model)"),ucr=l(),G5=a("li"),pve=a("strong"),bcr=o("rembert"),vcr=o(" \u2014 "),HU=a("a"),Fcr=o("RemBertForQuestionAnswering"),Tcr=o(" (RemBERT model)"),Mcr=l(),O5=a("li"),_ve=a("strong"),Ecr=o("roberta"),Ccr=o(" \u2014 "),JU=a("a"),wcr=o("RobertaForQuestionAnswering"),Acr=o(" (RoBERTa model)"),Lcr=l(),V5=a("li"),uve=a("strong"),ycr=o("roformer"),xcr=o(" \u2014 "),YU=a("a"),$cr=o("RoFormerForQuestionAnswering"),kcr=o(" (RoFormer model)"),Scr=l(),X5=a("li"),bve=a("strong"),Rcr=o("splinter"),Pcr=o(" \u2014 "),KU=a("a"),Bcr=o("SplinterForQuestionAnswering"),Icr=o(" (Splinter model)"),Ncr=l(),z5=a("li"),vve=a("strong"),qcr=o("squeezebert"),jcr=o(" \u2014 "),ZU=a("a"),Dcr=o("SqueezeBertForQuestionAnswering"),Gcr=o(" (SqueezeBERT model)"),Ocr=l(),W5=a("li"),Fve=a("strong"),Vcr=o("xlm"),Xcr=o(" \u2014 "),eH=a("a"),zcr=o("XLMForQuestionAnsweringSimple"),Wcr=o(" (XLM model)"),Qcr=l(),Q5=a("li"),Tve=a("strong"),Ucr=o("xlm-roberta"),Hcr=o(" \u2014 "),oH=a("a"),Jcr=o("XLMRobertaForQuestionAnswering"),Ycr=o(" (XLM-RoBERTa model)"),Kcr=l(),U5=a("li"),Mve=a("strong"),Zcr=o("xlm-roberta-xl"),efr=o(" \u2014 "),rH=a("a"),ofr=o("XLMRobertaXLForQuestionAnswering"),rfr=o(" (XLM-RoBERTa-XL model)"),tfr=l(),H5=a("li"),Eve=a("strong"),afr=o("xlnet"),nfr=o(" \u2014 "),tH=a("a"),sfr=o("XLNetForQuestionAnsweringSimple"),lfr=o(" (XLNet model)"),ifr=l(),J5=a("li"),Cve=a("strong"),dfr=o("yoso"),cfr=o(" \u2014 "),aH=a("a"),ffr=o("YosoForQuestionAnswering"),mfr=o(" (YOSO model)"),gfr=l(),Y5=a("p"),hfr=o("The model is set in evaluation mode by default using "),wve=a("code"),pfr=o("model.eval()"),_fr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ave=a("code"),ufr=o("model.train()"),bfr=l(),F(K5.$$.fragment),LUe=l(),Sd=a("h2"),Z5=a("a"),Lve=a("span"),F(N9.$$.fragment),vfr=l(),yve=a("span"),Ffr=o("AutoModelForTableQuestionAnswering"),yUe=l(),Vo=a("div"),F(q9.$$.fragment),Tfr=l(),Rd=a("p"),Mfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nH=a("a"),Efr=o("from_pretrained()"),Cfr=o(" class method or the "),sH=a("a"),wfr=o("from_config()"),Afr=o(` class
method.`),Lfr=l(),j9=a("p"),yfr=o("This class cannot be instantiated directly using "),xve=a("code"),xfr=o("__init__()"),$fr=o(" (throws an error)."),kfr=l(),Mt=a("div"),F(D9.$$.fragment),Sfr=l(),$ve=a("p"),Rfr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Pfr=l(),Pd=a("p"),Bfr=o(`Note:
Loading a model from its configuration file does `),kve=a("strong"),Ifr=o("not"),Nfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),qfr=o("from_pretrained()"),jfr=o(" to load the model weights."),Dfr=l(),F(e6.$$.fragment),Gfr=l(),lo=a("div"),F(G9.$$.fragment),Ofr=l(),Sve=a("p"),Vfr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Xfr=l(),Za=a("p"),zfr=o("The model class to instantiate is selected based on the "),Rve=a("code"),Wfr=o("model_type"),Qfr=o(` property of the config object (either
passed as an argument or loaded from `),Pve=a("code"),Ufr=o("pretrained_model_name_or_path"),Hfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=a("code"),Jfr=o("pretrained_model_name_or_path"),Yfr=o(":"),Kfr=l(),Ive=a("ul"),o6=a("li"),Nve=a("strong"),Zfr=o("tapas"),emr=o(" \u2014 "),iH=a("a"),omr=o("TapasForQuestionAnswering"),rmr=o(" (TAPAS model)"),tmr=l(),r6=a("p"),amr=o("The model is set in evaluation mode by default using "),qve=a("code"),nmr=o("model.eval()"),smr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jve=a("code"),lmr=o("model.train()"),imr=l(),F(t6.$$.fragment),xUe=l(),Bd=a("h2"),a6=a("a"),Dve=a("span"),F(O9.$$.fragment),dmr=l(),Gve=a("span"),cmr=o("AutoModelForImageClassification"),$Ue=l(),Xo=a("div"),F(V9.$$.fragment),fmr=l(),Id=a("p"),mmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dH=a("a"),gmr=o("from_pretrained()"),hmr=o(" class method or the "),cH=a("a"),pmr=o("from_config()"),_mr=o(` class
method.`),umr=l(),X9=a("p"),bmr=o("This class cannot be instantiated directly using "),Ove=a("code"),vmr=o("__init__()"),Fmr=o(" (throws an error)."),Tmr=l(),Et=a("div"),F(z9.$$.fragment),Mmr=l(),Vve=a("p"),Emr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Cmr=l(),Nd=a("p"),wmr=o(`Note:
Loading a model from its configuration file does `),Xve=a("strong"),Amr=o("not"),Lmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),ymr=o("from_pretrained()"),xmr=o(" to load the model weights."),$mr=l(),F(n6.$$.fragment),kmr=l(),io=a("div"),F(W9.$$.fragment),Smr=l(),zve=a("p"),Rmr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Pmr=l(),en=a("p"),Bmr=o("The model class to instantiate is selected based on the "),Wve=a("code"),Imr=o("model_type"),Nmr=o(` property of the config object (either
passed as an argument or loaded from `),Qve=a("code"),qmr=o("pretrained_model_name_or_path"),jmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=a("code"),Dmr=o("pretrained_model_name_or_path"),Gmr=o(":"),Omr=l(),be=a("ul"),s6=a("li"),Hve=a("strong"),Vmr=o("beit"),Xmr=o(" \u2014 "),mH=a("a"),zmr=o("BeitForImageClassification"),Wmr=o(" (BEiT model)"),Qmr=l(),l6=a("li"),Jve=a("strong"),Umr=o("convnext"),Hmr=o(" \u2014 "),gH=a("a"),Jmr=o("ConvNextForImageClassification"),Ymr=o(" (ConvNeXT model)"),Kmr=l(),i6=a("li"),Yve=a("strong"),Zmr=o("cvt"),egr=o(" \u2014 "),hH=a("a"),ogr=o("CvtForImageClassification"),rgr=o(" (CvT model)"),tgr=l(),d6=a("li"),Kve=a("strong"),agr=o("data2vec-vision"),ngr=o(" \u2014 "),pH=a("a"),sgr=o("Data2VecVisionForImageClassification"),lgr=o(" (Data2VecVision model)"),igr=l(),sl=a("li"),Zve=a("strong"),dgr=o("deit"),cgr=o(" \u2014 "),_H=a("a"),fgr=o("DeiTForImageClassification"),mgr=o(" or "),uH=a("a"),ggr=o("DeiTForImageClassificationWithTeacher"),hgr=o(" (DeiT model)"),pgr=l(),c6=a("li"),e3e=a("strong"),_gr=o("imagegpt"),ugr=o(" \u2014 "),bH=a("a"),bgr=o("ImageGPTForImageClassification"),vgr=o(" (ImageGPT model)"),Fgr=l(),ll=a("li"),o3e=a("strong"),Tgr=o("levit"),Mgr=o(" \u2014 "),vH=a("a"),Egr=o("LevitForImageClassification"),Cgr=o(" or "),FH=a("a"),wgr=o("LevitForImageClassificationWithTeacher"),Agr=o(" (LeViT model)"),Lgr=l(),f6=a("li"),r3e=a("strong"),ygr=o("mobilevit"),xgr=o(" \u2014 "),TH=a("a"),$gr=o("MobileViTForImageClassification"),kgr=o(" (MobileViT model)"),Sgr=l(),Ct=a("li"),t3e=a("strong"),Rgr=o("perceiver"),Pgr=o(" \u2014 "),MH=a("a"),Bgr=o("PerceiverForImageClassificationLearned"),Igr=o(" or "),EH=a("a"),Ngr=o("PerceiverForImageClassificationFourier"),qgr=o(" or "),CH=a("a"),jgr=o("PerceiverForImageClassificationConvProcessing"),Dgr=o(" (Perceiver model)"),Ggr=l(),m6=a("li"),a3e=a("strong"),Ogr=o("poolformer"),Vgr=o(" \u2014 "),wH=a("a"),Xgr=o("PoolFormerForImageClassification"),zgr=o(" (PoolFormer model)"),Wgr=l(),g6=a("li"),n3e=a("strong"),Qgr=o("regnet"),Ugr=o(" \u2014 "),AH=a("a"),Hgr=o("RegNetForImageClassification"),Jgr=o(" (RegNet model)"),Ygr=l(),h6=a("li"),s3e=a("strong"),Kgr=o("resnet"),Zgr=o(" \u2014 "),LH=a("a"),ehr=o("ResNetForImageClassification"),ohr=o(" (ResNet model)"),rhr=l(),p6=a("li"),l3e=a("strong"),thr=o("segformer"),ahr=o(" \u2014 "),yH=a("a"),nhr=o("SegformerForImageClassification"),shr=o(" (SegFormer model)"),lhr=l(),_6=a("li"),i3e=a("strong"),ihr=o("swin"),dhr=o(" \u2014 "),xH=a("a"),chr=o("SwinForImageClassification"),fhr=o(" (Swin Transformer model)"),mhr=l(),u6=a("li"),d3e=a("strong"),ghr=o("swinv2"),hhr=o(" \u2014 "),$H=a("a"),phr=o("Swinv2ForImageClassification"),_hr=o(" (Swin Transformer V2 model)"),uhr=l(),b6=a("li"),c3e=a("strong"),bhr=o("van"),vhr=o(" \u2014 "),kH=a("a"),Fhr=o("VanForImageClassification"),Thr=o(" (VAN model)"),Mhr=l(),v6=a("li"),f3e=a("strong"),Ehr=o("vit"),Chr=o(" \u2014 "),SH=a("a"),whr=o("ViTForImageClassification"),Ahr=o(" (ViT model)"),Lhr=l(),F6=a("p"),yhr=o("The model is set in evaluation mode by default using "),m3e=a("code"),xhr=o("model.eval()"),$hr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g3e=a("code"),khr=o("model.train()"),Shr=l(),F(T6.$$.fragment),kUe=l(),qd=a("h2"),M6=a("a"),h3e=a("span"),F(Q9.$$.fragment),Rhr=l(),p3e=a("span"),Phr=o("AutoModelForVideoClassification"),SUe=l(),zo=a("div"),F(U9.$$.fragment),Bhr=l(),jd=a("p"),Ihr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),RH=a("a"),Nhr=o("from_pretrained()"),qhr=o(" class method or the "),PH=a("a"),jhr=o("from_config()"),Dhr=o(` class
method.`),Ghr=l(),H9=a("p"),Ohr=o("This class cannot be instantiated directly using "),_3e=a("code"),Vhr=o("__init__()"),Xhr=o(" (throws an error)."),zhr=l(),wt=a("div"),F(J9.$$.fragment),Whr=l(),u3e=a("p"),Qhr=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),Uhr=l(),Dd=a("p"),Hhr=o(`Note:
Loading a model from its configuration file does `),b3e=a("strong"),Jhr=o("not"),Yhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),Khr=o("from_pretrained()"),Zhr=o(" to load the model weights."),epr=l(),F(E6.$$.fragment),opr=l(),co=a("div"),F(Y9.$$.fragment),rpr=l(),v3e=a("p"),tpr=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),apr=l(),on=a("p"),npr=o("The model class to instantiate is selected based on the "),F3e=a("code"),spr=o("model_type"),lpr=o(` property of the config object (either
passed as an argument or loaded from `),T3e=a("code"),ipr=o("pretrained_model_name_or_path"),dpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M3e=a("code"),cpr=o("pretrained_model_name_or_path"),fpr=o(":"),mpr=l(),E3e=a("ul"),C6=a("li"),C3e=a("strong"),gpr=o("videomae"),hpr=o(" \u2014 "),IH=a("a"),ppr=o("VideoMAEForVideoClassification"),_pr=o(" (VideoMAE model)"),upr=l(),w6=a("p"),bpr=o("The model is set in evaluation mode by default using "),w3e=a("code"),vpr=o("model.eval()"),Fpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A3e=a("code"),Tpr=o("model.train()"),Mpr=l(),F(A6.$$.fragment),RUe=l(),Gd=a("h2"),L6=a("a"),L3e=a("span"),F(K9.$$.fragment),Epr=l(),y3e=a("span"),Cpr=o("AutoModelForVision2Seq"),PUe=l(),Wo=a("div"),F(Z9.$$.fragment),wpr=l(),Od=a("p"),Apr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NH=a("a"),Lpr=o("from_pretrained()"),ypr=o(" class method or the "),qH=a("a"),xpr=o("from_config()"),$pr=o(` class
method.`),kpr=l(),ex=a("p"),Spr=o("This class cannot be instantiated directly using "),x3e=a("code"),Rpr=o("__init__()"),Ppr=o(" (throws an error)."),Bpr=l(),At=a("div"),F(ox.$$.fragment),Ipr=l(),$3e=a("p"),Npr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qpr=l(),Vd=a("p"),jpr=o(`Note:
Loading a model from its configuration file does `),k3e=a("strong"),Dpr=o("not"),Gpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=a("a"),Opr=o("from_pretrained()"),Vpr=o(" to load the model weights."),Xpr=l(),F(y6.$$.fragment),zpr=l(),fo=a("div"),F(rx.$$.fragment),Wpr=l(),S3e=a("p"),Qpr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Upr=l(),rn=a("p"),Hpr=o("The model class to instantiate is selected based on the "),R3e=a("code"),Jpr=o("model_type"),Ypr=o(` property of the config object (either
passed as an argument or loaded from `),P3e=a("code"),Kpr=o("pretrained_model_name_or_path"),Zpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=a("code"),e_r=o("pretrained_model_name_or_path"),o_r=o(":"),r_r=l(),I3e=a("ul"),x6=a("li"),N3e=a("strong"),t_r=o("vision-encoder-decoder"),a_r=o(" \u2014 "),DH=a("a"),n_r=o("VisionEncoderDecoderModel"),s_r=o(" (Vision Encoder decoder model)"),l_r=l(),$6=a("p"),i_r=o("The model is set in evaluation mode by default using "),q3e=a("code"),d_r=o("model.eval()"),c_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j3e=a("code"),f_r=o("model.train()"),m_r=l(),F(k6.$$.fragment),BUe=l(),Xd=a("h2"),S6=a("a"),D3e=a("span"),F(tx.$$.fragment),g_r=l(),G3e=a("span"),h_r=o("AutoModelForVisualQuestionAnswering"),IUe=l(),Qo=a("div"),F(ax.$$.fragment),p_r=l(),zd=a("p"),__r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),GH=a("a"),u_r=o("from_pretrained()"),b_r=o(" class method or the "),OH=a("a"),v_r=o("from_config()"),F_r=o(` class
method.`),T_r=l(),nx=a("p"),M_r=o("This class cannot be instantiated directly using "),O3e=a("code"),E_r=o("__init__()"),C_r=o(" (throws an error)."),w_r=l(),Lt=a("div"),F(sx.$$.fragment),A_r=l(),V3e=a("p"),L_r=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),y_r=l(),Wd=a("p"),x_r=o(`Note:
Loading a model from its configuration file does `),X3e=a("strong"),$_r=o("not"),k_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=a("a"),S_r=o("from_pretrained()"),R_r=o(" to load the model weights."),P_r=l(),F(R6.$$.fragment),B_r=l(),mo=a("div"),F(lx.$$.fragment),I_r=l(),z3e=a("p"),N_r=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),q_r=l(),tn=a("p"),j_r=o("The model class to instantiate is selected based on the "),W3e=a("code"),D_r=o("model_type"),G_r=o(` property of the config object (either
passed as an argument or loaded from `),Q3e=a("code"),O_r=o("pretrained_model_name_or_path"),V_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U3e=a("code"),X_r=o("pretrained_model_name_or_path"),z_r=o(":"),W_r=l(),H3e=a("ul"),P6=a("li"),J3e=a("strong"),Q_r=o("vilt"),U_r=o(" \u2014 "),XH=a("a"),H_r=o("ViltForQuestionAnswering"),J_r=o(" (ViLT model)"),Y_r=l(),B6=a("p"),K_r=o("The model is set in evaluation mode by default using "),Y3e=a("code"),Z_r=o("model.eval()"),eur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K3e=a("code"),our=o("model.train()"),rur=l(),F(I6.$$.fragment),NUe=l(),Qd=a("h2"),N6=a("a"),Z3e=a("span"),F(ix.$$.fragment),tur=l(),e5e=a("span"),aur=o("AutoModelForAudioClassification"),qUe=l(),Uo=a("div"),F(dx.$$.fragment),nur=l(),Ud=a("p"),sur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),zH=a("a"),lur=o("from_pretrained()"),iur=o(" class method or the "),WH=a("a"),dur=o("from_config()"),cur=o(` class
method.`),fur=l(),cx=a("p"),mur=o("This class cannot be instantiated directly using "),o5e=a("code"),gur=o("__init__()"),hur=o(" (throws an error)."),pur=l(),yt=a("div"),F(fx.$$.fragment),_ur=l(),r5e=a("p"),uur=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),bur=l(),Hd=a("p"),vur=o(`Note:
Loading a model from its configuration file does `),t5e=a("strong"),Fur=o("not"),Tur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),Mur=o("from_pretrained()"),Eur=o(" to load the model weights."),Cur=l(),F(q6.$$.fragment),wur=l(),go=a("div"),F(mx.$$.fragment),Aur=l(),a5e=a("p"),Lur=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),yur=l(),an=a("p"),xur=o("The model class to instantiate is selected based on the "),n5e=a("code"),$ur=o("model_type"),kur=o(` property of the config object (either
passed as an argument or loaded from `),s5e=a("code"),Sur=o("pretrained_model_name_or_path"),Rur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l5e=a("code"),Pur=o("pretrained_model_name_or_path"),Bur=o(":"),Iur=l(),Pe=a("ul"),j6=a("li"),i5e=a("strong"),Nur=o("data2vec-audio"),qur=o(" \u2014 "),UH=a("a"),jur=o("Data2VecAudioForSequenceClassification"),Dur=o(" (Data2VecAudio model)"),Gur=l(),D6=a("li"),d5e=a("strong"),Our=o("hubert"),Vur=o(" \u2014 "),HH=a("a"),Xur=o("HubertForSequenceClassification"),zur=o(" (Hubert model)"),Wur=l(),G6=a("li"),c5e=a("strong"),Qur=o("sew"),Uur=o(" \u2014 "),JH=a("a"),Hur=o("SEWForSequenceClassification"),Jur=o(" (SEW model)"),Yur=l(),O6=a("li"),f5e=a("strong"),Kur=o("sew-d"),Zur=o(" \u2014 "),YH=a("a"),e1r=o("SEWDForSequenceClassification"),o1r=o(" (SEW-D model)"),r1r=l(),V6=a("li"),m5e=a("strong"),t1r=o("unispeech"),a1r=o(" \u2014 "),KH=a("a"),n1r=o("UniSpeechForSequenceClassification"),s1r=o(" (UniSpeech model)"),l1r=l(),X6=a("li"),g5e=a("strong"),i1r=o("unispeech-sat"),d1r=o(" \u2014 "),ZH=a("a"),c1r=o("UniSpeechSatForSequenceClassification"),f1r=o(" (UniSpeechSat model)"),m1r=l(),z6=a("li"),h5e=a("strong"),g1r=o("wav2vec2"),h1r=o(" \u2014 "),eJ=a("a"),p1r=o("Wav2Vec2ForSequenceClassification"),_1r=o(" (Wav2Vec2 model)"),u1r=l(),W6=a("li"),p5e=a("strong"),b1r=o("wav2vec2-conformer"),v1r=o(" \u2014 "),oJ=a("a"),F1r=o("Wav2Vec2ConformerForSequenceClassification"),T1r=o(" (Wav2Vec2-Conformer model)"),M1r=l(),Q6=a("li"),_5e=a("strong"),E1r=o("wavlm"),C1r=o(" \u2014 "),rJ=a("a"),w1r=o("WavLMForSequenceClassification"),A1r=o(" (WavLM model)"),L1r=l(),U6=a("p"),y1r=o("The model is set in evaluation mode by default using "),u5e=a("code"),x1r=o("model.eval()"),$1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b5e=a("code"),k1r=o("model.train()"),S1r=l(),F(H6.$$.fragment),jUe=l(),Jd=a("h2"),J6=a("a"),v5e=a("span"),F(gx.$$.fragment),R1r=l(),F5e=a("span"),P1r=o("AutoModelForAudioFrameClassification"),DUe=l(),Ho=a("div"),F(hx.$$.fragment),B1r=l(),Yd=a("p"),I1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),tJ=a("a"),N1r=o("from_pretrained()"),q1r=o(" class method or the "),aJ=a("a"),j1r=o("from_config()"),D1r=o(` class
method.`),G1r=l(),px=a("p"),O1r=o("This class cannot be instantiated directly using "),T5e=a("code"),V1r=o("__init__()"),X1r=o(" (throws an error)."),z1r=l(),xt=a("div"),F(_x.$$.fragment),W1r=l(),M5e=a("p"),Q1r=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),U1r=l(),Kd=a("p"),H1r=o(`Note:
Loading a model from its configuration file does `),E5e=a("strong"),J1r=o("not"),Y1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=a("a"),K1r=o("from_pretrained()"),Z1r=o(" to load the model weights."),e4r=l(),F(Y6.$$.fragment),o4r=l(),ho=a("div"),F(ux.$$.fragment),r4r=l(),C5e=a("p"),t4r=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),a4r=l(),nn=a("p"),n4r=o("The model class to instantiate is selected based on the "),w5e=a("code"),s4r=o("model_type"),l4r=o(` property of the config object (either
passed as an argument or loaded from `),A5e=a("code"),i4r=o("pretrained_model_name_or_path"),d4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L5e=a("code"),c4r=o("pretrained_model_name_or_path"),f4r=o(":"),m4r=l(),st=a("ul"),K6=a("li"),y5e=a("strong"),g4r=o("data2vec-audio"),h4r=o(" \u2014 "),sJ=a("a"),p4r=o("Data2VecAudioForAudioFrameClassification"),_4r=o(" (Data2VecAudio model)"),u4r=l(),Z6=a("li"),x5e=a("strong"),b4r=o("unispeech-sat"),v4r=o(" \u2014 "),lJ=a("a"),F4r=o("UniSpeechSatForAudioFrameClassification"),T4r=o(" (UniSpeechSat model)"),M4r=l(),eF=a("li"),$5e=a("strong"),E4r=o("wav2vec2"),C4r=o(" \u2014 "),iJ=a("a"),w4r=o("Wav2Vec2ForAudioFrameClassification"),A4r=o(" (Wav2Vec2 model)"),L4r=l(),oF=a("li"),k5e=a("strong"),y4r=o("wav2vec2-conformer"),x4r=o(" \u2014 "),dJ=a("a"),$4r=o("Wav2Vec2ConformerForAudioFrameClassification"),k4r=o(" (Wav2Vec2-Conformer model)"),S4r=l(),rF=a("li"),S5e=a("strong"),R4r=o("wavlm"),P4r=o(" \u2014 "),cJ=a("a"),B4r=o("WavLMForAudioFrameClassification"),I4r=o(" (WavLM model)"),N4r=l(),tF=a("p"),q4r=o("The model is set in evaluation mode by default using "),R5e=a("code"),j4r=o("model.eval()"),D4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P5e=a("code"),G4r=o("model.train()"),O4r=l(),F(aF.$$.fragment),GUe=l(),Zd=a("h2"),nF=a("a"),B5e=a("span"),F(bx.$$.fragment),V4r=l(),I5e=a("span"),X4r=o("AutoModelForCTC"),OUe=l(),Jo=a("div"),F(vx.$$.fragment),z4r=l(),ec=a("p"),W4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),fJ=a("a"),Q4r=o("from_pretrained()"),U4r=o(" class method or the "),mJ=a("a"),H4r=o("from_config()"),J4r=o(` class
method.`),Y4r=l(),Fx=a("p"),K4r=o("This class cannot be instantiated directly using "),N5e=a("code"),Z4r=o("__init__()"),e2r=o(" (throws an error)."),o2r=l(),$t=a("div"),F(Tx.$$.fragment),r2r=l(),q5e=a("p"),t2r=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),a2r=l(),oc=a("p"),n2r=o(`Note:
Loading a model from its configuration file does `),j5e=a("strong"),s2r=o("not"),l2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=a("a"),i2r=o("from_pretrained()"),d2r=o(" to load the model weights."),c2r=l(),F(sF.$$.fragment),f2r=l(),po=a("div"),F(Mx.$$.fragment),m2r=l(),D5e=a("p"),g2r=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),h2r=l(),sn=a("p"),p2r=o("The model class to instantiate is selected based on the "),G5e=a("code"),_2r=o("model_type"),u2r=o(` property of the config object (either
passed as an argument or loaded from `),O5e=a("code"),b2r=o("pretrained_model_name_or_path"),v2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V5e=a("code"),F2r=o("pretrained_model_name_or_path"),T2r=o(":"),M2r=l(),Le=a("ul"),lF=a("li"),X5e=a("strong"),E2r=o("data2vec-audio"),C2r=o(" \u2014 "),hJ=a("a"),w2r=o("Data2VecAudioForCTC"),A2r=o(" (Data2VecAudio model)"),L2r=l(),iF=a("li"),z5e=a("strong"),y2r=o("hubert"),x2r=o(" \u2014 "),pJ=a("a"),$2r=o("HubertForCTC"),k2r=o(" (Hubert model)"),S2r=l(),dF=a("li"),W5e=a("strong"),R2r=o("mctct"),P2r=o(" \u2014 "),_J=a("a"),B2r=o("MCTCTForCTC"),I2r=o(" (M-CTC-T model)"),N2r=l(),cF=a("li"),Q5e=a("strong"),q2r=o("sew"),j2r=o(" \u2014 "),uJ=a("a"),D2r=o("SEWForCTC"),G2r=o(" (SEW model)"),O2r=l(),fF=a("li"),U5e=a("strong"),V2r=o("sew-d"),X2r=o(" \u2014 "),bJ=a("a"),z2r=o("SEWDForCTC"),W2r=o(" (SEW-D model)"),Q2r=l(),mF=a("li"),H5e=a("strong"),U2r=o("unispeech"),H2r=o(" \u2014 "),vJ=a("a"),J2r=o("UniSpeechForCTC"),Y2r=o(" (UniSpeech model)"),K2r=l(),gF=a("li"),J5e=a("strong"),Z2r=o("unispeech-sat"),ebr=o(" \u2014 "),FJ=a("a"),obr=o("UniSpeechSatForCTC"),rbr=o(" (UniSpeechSat model)"),tbr=l(),hF=a("li"),Y5e=a("strong"),abr=o("wav2vec2"),nbr=o(" \u2014 "),TJ=a("a"),sbr=o("Wav2Vec2ForCTC"),lbr=o(" (Wav2Vec2 model)"),ibr=l(),pF=a("li"),K5e=a("strong"),dbr=o("wav2vec2-conformer"),cbr=o(" \u2014 "),MJ=a("a"),fbr=o("Wav2Vec2ConformerForCTC"),mbr=o(" (Wav2Vec2-Conformer model)"),gbr=l(),_F=a("li"),Z5e=a("strong"),hbr=o("wavlm"),pbr=o(" \u2014 "),EJ=a("a"),_br=o("WavLMForCTC"),ubr=o(" (WavLM model)"),bbr=l(),uF=a("p"),vbr=o("The model is set in evaluation mode by default using "),e6e=a("code"),Fbr=o("model.eval()"),Tbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o6e=a("code"),Mbr=o("model.train()"),Ebr=l(),F(bF.$$.fragment),VUe=l(),rc=a("h2"),vF=a("a"),r6e=a("span"),F(Ex.$$.fragment),Cbr=l(),t6e=a("span"),wbr=o("AutoModelForSpeechSeq2Seq"),XUe=l(),Yo=a("div"),F(Cx.$$.fragment),Abr=l(),tc=a("p"),Lbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),CJ=a("a"),ybr=o("from_pretrained()"),xbr=o(" class method or the "),wJ=a("a"),$br=o("from_config()"),kbr=o(` class
method.`),Sbr=l(),wx=a("p"),Rbr=o("This class cannot be instantiated directly using "),a6e=a("code"),Pbr=o("__init__()"),Bbr=o(" (throws an error)."),Ibr=l(),kt=a("div"),F(Ax.$$.fragment),Nbr=l(),n6e=a("p"),qbr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jbr=l(),ac=a("p"),Dbr=o(`Note:
Loading a model from its configuration file does `),s6e=a("strong"),Gbr=o("not"),Obr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AJ=a("a"),Vbr=o("from_pretrained()"),Xbr=o(" to load the model weights."),zbr=l(),F(FF.$$.fragment),Wbr=l(),_o=a("div"),F(Lx.$$.fragment),Qbr=l(),l6e=a("p"),Ubr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Hbr=l(),ln=a("p"),Jbr=o("The model class to instantiate is selected based on the "),i6e=a("code"),Ybr=o("model_type"),Kbr=o(` property of the config object (either
passed as an argument or loaded from `),d6e=a("code"),Zbr=o("pretrained_model_name_or_path"),evr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c6e=a("code"),ovr=o("pretrained_model_name_or_path"),rvr=o(":"),tvr=l(),yx=a("ul"),TF=a("li"),f6e=a("strong"),avr=o("speech-encoder-decoder"),nvr=o(" \u2014 "),LJ=a("a"),svr=o("SpeechEncoderDecoderModel"),lvr=o(" (Speech Encoder decoder model)"),ivr=l(),MF=a("li"),m6e=a("strong"),dvr=o("speech_to_text"),cvr=o(" \u2014 "),yJ=a("a"),fvr=o("Speech2TextForConditionalGeneration"),mvr=o(" (Speech2Text model)"),gvr=l(),EF=a("p"),hvr=o("The model is set in evaluation mode by default using "),g6e=a("code"),pvr=o("model.eval()"),_vr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h6e=a("code"),uvr=o("model.train()"),bvr=l(),F(CF.$$.fragment),zUe=l(),nc=a("h2"),wF=a("a"),p6e=a("span"),F(xx.$$.fragment),vvr=l(),_6e=a("span"),Fvr=o("AutoModelForAudioXVector"),WUe=l(),Ko=a("div"),F($x.$$.fragment),Tvr=l(),sc=a("p"),Mvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),xJ=a("a"),Evr=o("from_pretrained()"),Cvr=o(" class method or the "),$J=a("a"),wvr=o("from_config()"),Avr=o(` class
method.`),Lvr=l(),kx=a("p"),yvr=o("This class cannot be instantiated directly using "),u6e=a("code"),xvr=o("__init__()"),$vr=o(" (throws an error)."),kvr=l(),St=a("div"),F(Sx.$$.fragment),Svr=l(),b6e=a("p"),Rvr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Pvr=l(),lc=a("p"),Bvr=o(`Note:
Loading a model from its configuration file does `),v6e=a("strong"),Ivr=o("not"),Nvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=a("a"),qvr=o("from_pretrained()"),jvr=o(" to load the model weights."),Dvr=l(),F(AF.$$.fragment),Gvr=l(),uo=a("div"),F(Rx.$$.fragment),Ovr=l(),F6e=a("p"),Vvr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Xvr=l(),dn=a("p"),zvr=o("The model class to instantiate is selected based on the "),T6e=a("code"),Wvr=o("model_type"),Qvr=o(` property of the config object (either
passed as an argument or loaded from `),M6e=a("code"),Uvr=o("pretrained_model_name_or_path"),Hvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E6e=a("code"),Jvr=o("pretrained_model_name_or_path"),Yvr=o(":"),Kvr=l(),lt=a("ul"),LF=a("li"),C6e=a("strong"),Zvr=o("data2vec-audio"),e3r=o(" \u2014 "),SJ=a("a"),o3r=o("Data2VecAudioForXVector"),r3r=o(" (Data2VecAudio model)"),t3r=l(),yF=a("li"),w6e=a("strong"),a3r=o("unispeech-sat"),n3r=o(" \u2014 "),RJ=a("a"),s3r=o("UniSpeechSatForXVector"),l3r=o(" (UniSpeechSat model)"),i3r=l(),xF=a("li"),A6e=a("strong"),d3r=o("wav2vec2"),c3r=o(" \u2014 "),PJ=a("a"),f3r=o("Wav2Vec2ForXVector"),m3r=o(" (Wav2Vec2 model)"),g3r=l(),$F=a("li"),L6e=a("strong"),h3r=o("wav2vec2-conformer"),p3r=o(" \u2014 "),BJ=a("a"),_3r=o("Wav2Vec2ConformerForXVector"),u3r=o(" (Wav2Vec2-Conformer model)"),b3r=l(),kF=a("li"),y6e=a("strong"),v3r=o("wavlm"),F3r=o(" \u2014 "),IJ=a("a"),T3r=o("WavLMForXVector"),M3r=o(" (WavLM model)"),E3r=l(),SF=a("p"),C3r=o("The model is set in evaluation mode by default using "),x6e=a("code"),w3r=o("model.eval()"),A3r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$6e=a("code"),L3r=o("model.train()"),y3r=l(),F(RF.$$.fragment),QUe=l(),ic=a("h2"),PF=a("a"),k6e=a("span"),F(Px.$$.fragment),x3r=l(),S6e=a("span"),$3r=o("AutoModelForMaskedImageModeling"),UUe=l(),Zo=a("div"),F(Bx.$$.fragment),k3r=l(),dc=a("p"),S3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),NJ=a("a"),R3r=o("from_pretrained()"),P3r=o(" class method or the "),qJ=a("a"),B3r=o("from_config()"),I3r=o(` class
method.`),N3r=l(),Ix=a("p"),q3r=o("This class cannot be instantiated directly using "),R6e=a("code"),j3r=o("__init__()"),D3r=o(" (throws an error)."),G3r=l(),Rt=a("div"),F(Nx.$$.fragment),O3r=l(),P6e=a("p"),V3r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),X3r=l(),cc=a("p"),z3r=o(`Note:
Loading a model from its configuration file does `),B6e=a("strong"),W3r=o("not"),Q3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),U3r=o("from_pretrained()"),H3r=o(" to load the model weights."),J3r=l(),F(BF.$$.fragment),Y3r=l(),bo=a("div"),F(qx.$$.fragment),K3r=l(),I6e=a("p"),Z3r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),e5r=l(),cn=a("p"),o5r=o("The model class to instantiate is selected based on the "),N6e=a("code"),r5r=o("model_type"),t5r=o(` property of the config object (either
passed as an argument or loaded from `),q6e=a("code"),a5r=o("pretrained_model_name_or_path"),n5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j6e=a("code"),s5r=o("pretrained_model_name_or_path"),l5r=o(":"),i5r=l(),fn=a("ul"),IF=a("li"),D6e=a("strong"),d5r=o("deit"),c5r=o(" \u2014 "),DJ=a("a"),f5r=o("DeiTForMaskedImageModeling"),m5r=o(" (DeiT model)"),g5r=l(),NF=a("li"),G6e=a("strong"),h5r=o("swin"),p5r=o(" \u2014 "),GJ=a("a"),_5r=o("SwinForMaskedImageModeling"),u5r=o(" (Swin Transformer model)"),b5r=l(),qF=a("li"),O6e=a("strong"),v5r=o("swinv2"),F5r=o(" \u2014 "),OJ=a("a"),T5r=o("Swinv2ForMaskedImageModeling"),M5r=o(" (Swin Transformer V2 model)"),E5r=l(),jF=a("li"),V6e=a("strong"),C5r=o("vit"),w5r=o(" \u2014 "),VJ=a("a"),A5r=o("ViTForMaskedImageModeling"),L5r=o(" (ViT model)"),y5r=l(),DF=a("p"),x5r=o("The model is set in evaluation mode by default using "),X6e=a("code"),$5r=o("model.eval()"),k5r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z6e=a("code"),S5r=o("model.train()"),R5r=l(),F(GF.$$.fragment),HUe=l(),fc=a("h2"),OF=a("a"),W6e=a("span"),F(jx.$$.fragment),P5r=l(),Q6e=a("span"),B5r=o("AutoModelForObjectDetection"),JUe=l(),er=a("div"),F(Dx.$$.fragment),I5r=l(),mc=a("p"),N5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),XJ=a("a"),q5r=o("from_pretrained()"),j5r=o(" class method or the "),zJ=a("a"),D5r=o("from_config()"),G5r=o(` class
method.`),O5r=l(),Gx=a("p"),V5r=o("This class cannot be instantiated directly using "),U6e=a("code"),X5r=o("__init__()"),z5r=o(" (throws an error)."),W5r=l(),Pt=a("div"),F(Ox.$$.fragment),Q5r=l(),H6e=a("p"),U5r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),H5r=l(),gc=a("p"),J5r=o(`Note:
Loading a model from its configuration file does `),J6e=a("strong"),Y5r=o("not"),K5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=a("a"),Z5r=o("from_pretrained()"),e6r=o(" to load the model weights."),o6r=l(),F(VF.$$.fragment),r6r=l(),vo=a("div"),F(Vx.$$.fragment),t6r=l(),Y6e=a("p"),a6r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),n6r=l(),mn=a("p"),s6r=o("The model class to instantiate is selected based on the "),K6e=a("code"),l6r=o("model_type"),i6r=o(` property of the config object (either
passed as an argument or loaded from `),Z6e=a("code"),d6r=o("pretrained_model_name_or_path"),c6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=a("code"),f6r=o("pretrained_model_name_or_path"),m6r=o(":"),g6r=l(),Xx=a("ul"),XF=a("li"),oFe=a("strong"),h6r=o("detr"),p6r=o(" \u2014 "),QJ=a("a"),_6r=o("DetrForObjectDetection"),u6r=o(" (DETR model)"),b6r=l(),zF=a("li"),rFe=a("strong"),v6r=o("yolos"),F6r=o(" \u2014 "),UJ=a("a"),T6r=o("YolosForObjectDetection"),M6r=o(" (YOLOS model)"),E6r=l(),WF=a("p"),C6r=o("The model is set in evaluation mode by default using "),tFe=a("code"),w6r=o("model.eval()"),A6r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aFe=a("code"),L6r=o("model.train()"),y6r=l(),F(QF.$$.fragment),YUe=l(),hc=a("h2"),UF=a("a"),nFe=a("span"),F(zx.$$.fragment),x6r=l(),sFe=a("span"),$6r=o("AutoModelForImageSegmentation"),KUe=l(),or=a("div"),F(Wx.$$.fragment),k6r=l(),pc=a("p"),S6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),HJ=a("a"),R6r=o("from_pretrained()"),P6r=o(" class method or the "),JJ=a("a"),B6r=o("from_config()"),I6r=o(` class
method.`),N6r=l(),Qx=a("p"),q6r=o("This class cannot be instantiated directly using "),lFe=a("code"),j6r=o("__init__()"),D6r=o(" (throws an error)."),G6r=l(),Bt=a("div"),F(Ux.$$.fragment),O6r=l(),iFe=a("p"),V6r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),X6r=l(),_c=a("p"),z6r=o(`Note:
Loading a model from its configuration file does `),dFe=a("strong"),W6r=o("not"),Q6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=a("a"),U6r=o("from_pretrained()"),H6r=o(" to load the model weights."),J6r=l(),F(HF.$$.fragment),Y6r=l(),Fo=a("div"),F(Hx.$$.fragment),K6r=l(),cFe=a("p"),Z6r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),eFr=l(),gn=a("p"),oFr=o("The model class to instantiate is selected based on the "),fFe=a("code"),rFr=o("model_type"),tFr=o(` property of the config object (either
passed as an argument or loaded from `),mFe=a("code"),aFr=o("pretrained_model_name_or_path"),nFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=a("code"),sFr=o("pretrained_model_name_or_path"),lFr=o(":"),iFr=l(),hFe=a("ul"),JF=a("li"),pFe=a("strong"),dFr=o("detr"),cFr=o(" \u2014 "),KJ=a("a"),fFr=o("DetrForSegmentation"),mFr=o(" (DETR model)"),gFr=l(),YF=a("p"),hFr=o("The model is set in evaluation mode by default using "),_Fe=a("code"),pFr=o("model.eval()"),_Fr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uFe=a("code"),uFr=o("model.train()"),bFr=l(),F(KF.$$.fragment),ZUe=l(),uc=a("h2"),ZF=a("a"),bFe=a("span"),F(Jx.$$.fragment),vFr=l(),vFe=a("span"),FFr=o("AutoModelForSemanticSegmentation"),eHe=l(),rr=a("div"),F(Yx.$$.fragment),TFr=l(),bc=a("p"),MFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ZJ=a("a"),EFr=o("from_pretrained()"),CFr=o(" class method or the "),eY=a("a"),wFr=o("from_config()"),AFr=o(` class
method.`),LFr=l(),Kx=a("p"),yFr=o("This class cannot be instantiated directly using "),FFe=a("code"),xFr=o("__init__()"),$Fr=o(" (throws an error)."),kFr=l(),It=a("div"),F(Zx.$$.fragment),SFr=l(),TFe=a("p"),RFr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),PFr=l(),vc=a("p"),BFr=o(`Note:
Loading a model from its configuration file does `),MFe=a("strong"),IFr=o("not"),NFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),qFr=o("from_pretrained()"),jFr=o(" to load the model weights."),DFr=l(),F(eT.$$.fragment),GFr=l(),To=a("div"),F(e$.$$.fragment),OFr=l(),EFe=a("p"),VFr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),XFr=l(),hn=a("p"),zFr=o("The model class to instantiate is selected based on the "),CFe=a("code"),WFr=o("model_type"),QFr=o(` property of the config object (either
passed as an argument or loaded from `),wFe=a("code"),UFr=o("pretrained_model_name_or_path"),HFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=a("code"),JFr=o("pretrained_model_name_or_path"),YFr=o(":"),KFr=l(),it=a("ul"),oT=a("li"),LFe=a("strong"),ZFr=o("beit"),eTr=o(" \u2014 "),rY=a("a"),oTr=o("BeitForSemanticSegmentation"),rTr=o(" (BEiT model)"),tTr=l(),rT=a("li"),yFe=a("strong"),aTr=o("data2vec-vision"),nTr=o(" \u2014 "),tY=a("a"),sTr=o("Data2VecVisionForSemanticSegmentation"),lTr=o(" (Data2VecVision model)"),iTr=l(),tT=a("li"),xFe=a("strong"),dTr=o("dpt"),cTr=o(" \u2014 "),aY=a("a"),fTr=o("DPTForSemanticSegmentation"),mTr=o(" (DPT model)"),gTr=l(),aT=a("li"),$Fe=a("strong"),hTr=o("mobilevit"),pTr=o(" \u2014 "),nY=a("a"),_Tr=o("MobileViTForSemanticSegmentation"),uTr=o(" (MobileViT model)"),bTr=l(),nT=a("li"),kFe=a("strong"),vTr=o("segformer"),FTr=o(" \u2014 "),sY=a("a"),TTr=o("SegformerForSemanticSegmentation"),MTr=o(" (SegFormer model)"),ETr=l(),sT=a("p"),CTr=o("The model is set in evaluation mode by default using "),SFe=a("code"),wTr=o("model.eval()"),ATr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RFe=a("code"),LTr=o("model.train()"),yTr=l(),F(lT.$$.fragment),oHe=l(),Fc=a("h2"),iT=a("a"),PFe=a("span"),F(o$.$$.fragment),xTr=l(),BFe=a("span"),$Tr=o("AutoModelForInstanceSegmentation"),rHe=l(),tr=a("div"),F(r$.$$.fragment),kTr=l(),Tc=a("p"),STr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),lY=a("a"),RTr=o("from_pretrained()"),PTr=o(" class method or the "),iY=a("a"),BTr=o("from_config()"),ITr=o(` class
method.`),NTr=l(),t$=a("p"),qTr=o("This class cannot be instantiated directly using "),IFe=a("code"),jTr=o("__init__()"),DTr=o(" (throws an error)."),GTr=l(),Nt=a("div"),F(a$.$$.fragment),OTr=l(),NFe=a("p"),VTr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),XTr=l(),Mc=a("p"),zTr=o(`Note:
Loading a model from its configuration file does `),qFe=a("strong"),WTr=o("not"),QTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=a("a"),UTr=o("from_pretrained()"),HTr=o(" to load the model weights."),JTr=l(),F(dT.$$.fragment),YTr=l(),Mo=a("div"),F(n$.$$.fragment),KTr=l(),jFe=a("p"),ZTr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),eMr=l(),pn=a("p"),oMr=o("The model class to instantiate is selected based on the "),DFe=a("code"),rMr=o("model_type"),tMr=o(` property of the config object (either
passed as an argument or loaded from `),GFe=a("code"),aMr=o("pretrained_model_name_or_path"),nMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=a("code"),sMr=o("pretrained_model_name_or_path"),lMr=o(":"),iMr=l(),VFe=a("ul"),cT=a("li"),XFe=a("strong"),dMr=o("maskformer"),cMr=o(" \u2014 "),cY=a("a"),fMr=o("MaskFormerForInstanceSegmentation"),mMr=o(" (MaskFormer model)"),gMr=l(),fT=a("p"),hMr=o("The model is set in evaluation mode by default using "),zFe=a("code"),pMr=o("model.eval()"),_Mr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),WFe=a("code"),uMr=o("model.train()"),bMr=l(),F(mT.$$.fragment),tHe=l(),Ec=a("h2"),gT=a("a"),QFe=a("span"),F(s$.$$.fragment),vMr=l(),UFe=a("span"),FMr=o("TFAutoModel"),aHe=l(),ar=a("div"),F(l$.$$.fragment),TMr=l(),Cc=a("p"),MMr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fY=a("a"),EMr=o("from_pretrained()"),CMr=o(" class method or the "),mY=a("a"),wMr=o("from_config()"),AMr=o(` class
method.`),LMr=l(),i$=a("p"),yMr=o("This class cannot be instantiated directly using "),HFe=a("code"),xMr=o("__init__()"),$Mr=o(" (throws an error)."),kMr=l(),qt=a("div"),F(d$.$$.fragment),SMr=l(),JFe=a("p"),RMr=o("Instantiates one of the base model classes of the library from a configuration."),PMr=l(),wc=a("p"),BMr=o(`Note:
Loading a model from its configuration file does `),YFe=a("strong"),IMr=o("not"),NMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=a("a"),qMr=o("from_pretrained()"),jMr=o(" to load the model weights."),DMr=l(),F(hT.$$.fragment),GMr=l(),Rr=a("div"),F(c$.$$.fragment),OMr=l(),KFe=a("p"),VMr=o("Instantiate one of the base model classes of the library from a pretrained model."),XMr=l(),_n=a("p"),zMr=o("The model class to instantiate is selected based on the "),ZFe=a("code"),WMr=o("model_type"),QMr=o(` property of the config object (either
passed as an argument or loaded from `),eTe=a("code"),UMr=o("pretrained_model_name_or_path"),HMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=a("code"),JMr=o("pretrained_model_name_or_path"),YMr=o(":"),KMr=l(),q=a("ul"),pT=a("li"),rTe=a("strong"),ZMr=o("albert"),eEr=o(" \u2014 "),hY=a("a"),oEr=o("TFAlbertModel"),rEr=o(" (ALBERT model)"),tEr=l(),_T=a("li"),tTe=a("strong"),aEr=o("bart"),nEr=o(" \u2014 "),pY=a("a"),sEr=o("TFBartModel"),lEr=o(" (BART model)"),iEr=l(),uT=a("li"),aTe=a("strong"),dEr=o("bert"),cEr=o(" \u2014 "),_Y=a("a"),fEr=o("TFBertModel"),mEr=o(" (BERT model)"),gEr=l(),bT=a("li"),nTe=a("strong"),hEr=o("blenderbot"),pEr=o(" \u2014 "),uY=a("a"),_Er=o("TFBlenderbotModel"),uEr=o(" (Blenderbot model)"),bEr=l(),vT=a("li"),sTe=a("strong"),vEr=o("blenderbot-small"),FEr=o(" \u2014 "),bY=a("a"),TEr=o("TFBlenderbotSmallModel"),MEr=o(" (BlenderbotSmall model)"),EEr=l(),FT=a("li"),lTe=a("strong"),CEr=o("camembert"),wEr=o(" \u2014 "),vY=a("a"),AEr=o("TFCamembertModel"),LEr=o(" (CamemBERT model)"),yEr=l(),TT=a("li"),iTe=a("strong"),xEr=o("clip"),$Er=o(" \u2014 "),FY=a("a"),kEr=o("TFCLIPModel"),SEr=o(" (CLIP model)"),REr=l(),MT=a("li"),dTe=a("strong"),PEr=o("convbert"),BEr=o(" \u2014 "),TY=a("a"),IEr=o("TFConvBertModel"),NEr=o(" (ConvBERT model)"),qEr=l(),ET=a("li"),cTe=a("strong"),jEr=o("convnext"),DEr=o(" \u2014 "),MY=a("a"),GEr=o("TFConvNextModel"),OEr=o(" (ConvNeXT model)"),VEr=l(),CT=a("li"),fTe=a("strong"),XEr=o("ctrl"),zEr=o(" \u2014 "),EY=a("a"),WEr=o("TFCTRLModel"),QEr=o(" (CTRL model)"),UEr=l(),wT=a("li"),mTe=a("strong"),HEr=o("data2vec-vision"),JEr=o(" \u2014 "),CY=a("a"),YEr=o("TFData2VecVisionModel"),KEr=o(" (Data2VecVision model)"),ZEr=l(),AT=a("li"),gTe=a("strong"),eCr=o("deberta"),oCr=o(" \u2014 "),wY=a("a"),rCr=o("TFDebertaModel"),tCr=o(" (DeBERTa model)"),aCr=l(),LT=a("li"),hTe=a("strong"),nCr=o("deberta-v2"),sCr=o(" \u2014 "),AY=a("a"),lCr=o("TFDebertaV2Model"),iCr=o(" (DeBERTa-v2 model)"),dCr=l(),yT=a("li"),pTe=a("strong"),cCr=o("deit"),fCr=o(" \u2014 "),LY=a("a"),mCr=o("TFDeiTModel"),gCr=o(" (DeiT model)"),hCr=l(),xT=a("li"),_Te=a("strong"),pCr=o("distilbert"),_Cr=o(" \u2014 "),yY=a("a"),uCr=o("TFDistilBertModel"),bCr=o(" (DistilBERT model)"),vCr=l(),$T=a("li"),uTe=a("strong"),FCr=o("dpr"),TCr=o(" \u2014 "),xY=a("a"),MCr=o("TFDPRQuestionEncoder"),ECr=o(" (DPR model)"),CCr=l(),kT=a("li"),bTe=a("strong"),wCr=o("electra"),ACr=o(" \u2014 "),$Y=a("a"),LCr=o("TFElectraModel"),yCr=o(" (ELECTRA model)"),xCr=l(),ST=a("li"),vTe=a("strong"),$Cr=o("flaubert"),kCr=o(" \u2014 "),kY=a("a"),SCr=o("TFFlaubertModel"),RCr=o(" (FlauBERT model)"),PCr=l(),il=a("li"),FTe=a("strong"),BCr=o("funnel"),ICr=o(" \u2014 "),SY=a("a"),NCr=o("TFFunnelModel"),qCr=o(" or "),RY=a("a"),jCr=o("TFFunnelBaseModel"),DCr=o(" (Funnel Transformer model)"),GCr=l(),RT=a("li"),TTe=a("strong"),OCr=o("gpt2"),VCr=o(" \u2014 "),PY=a("a"),XCr=o("TFGPT2Model"),zCr=o(" (OpenAI GPT-2 model)"),WCr=l(),PT=a("li"),MTe=a("strong"),QCr=o("gptj"),UCr=o(" \u2014 "),BY=a("a"),HCr=o("TFGPTJModel"),JCr=o(" (GPT-J model)"),YCr=l(),BT=a("li"),ETe=a("strong"),KCr=o("hubert"),ZCr=o(" \u2014 "),IY=a("a"),e0r=o("TFHubertModel"),o0r=o(" (Hubert model)"),r0r=l(),IT=a("li"),CTe=a("strong"),t0r=o("layoutlm"),a0r=o(" \u2014 "),NY=a("a"),n0r=o("TFLayoutLMModel"),s0r=o(" (LayoutLM model)"),l0r=l(),NT=a("li"),wTe=a("strong"),i0r=o("led"),d0r=o(" \u2014 "),qY=a("a"),c0r=o("TFLEDModel"),f0r=o(" (LED model)"),m0r=l(),qT=a("li"),ATe=a("strong"),g0r=o("longformer"),h0r=o(" \u2014 "),jY=a("a"),p0r=o("TFLongformerModel"),_0r=o(" (Longformer model)"),u0r=l(),jT=a("li"),LTe=a("strong"),b0r=o("lxmert"),v0r=o(" \u2014 "),DY=a("a"),F0r=o("TFLxmertModel"),T0r=o(" (LXMERT model)"),M0r=l(),DT=a("li"),yTe=a("strong"),E0r=o("marian"),C0r=o(" \u2014 "),GY=a("a"),w0r=o("TFMarianModel"),A0r=o(" (Marian model)"),L0r=l(),GT=a("li"),xTe=a("strong"),y0r=o("mbart"),x0r=o(" \u2014 "),OY=a("a"),$0r=o("TFMBartModel"),k0r=o(" (mBART model)"),S0r=l(),OT=a("li"),$Te=a("strong"),R0r=o("mobilebert"),P0r=o(" \u2014 "),VY=a("a"),B0r=o("TFMobileBertModel"),I0r=o(" (MobileBERT model)"),N0r=l(),VT=a("li"),kTe=a("strong"),q0r=o("mpnet"),j0r=o(" \u2014 "),XY=a("a"),D0r=o("TFMPNetModel"),G0r=o(" (MPNet model)"),O0r=l(),XT=a("li"),STe=a("strong"),V0r=o("mt5"),X0r=o(" \u2014 "),zY=a("a"),z0r=o("TFMT5Model"),W0r=o(" (MT5 model)"),Q0r=l(),zT=a("li"),RTe=a("strong"),U0r=o("openai-gpt"),H0r=o(" \u2014 "),WY=a("a"),J0r=o("TFOpenAIGPTModel"),Y0r=o(" (OpenAI GPT model)"),K0r=l(),WT=a("li"),PTe=a("strong"),Z0r=o("opt"),ewr=o(" \u2014 "),QY=a("a"),owr=o("TFOPTModel"),rwr=o(" (OPT model)"),twr=l(),QT=a("li"),BTe=a("strong"),awr=o("pegasus"),nwr=o(" \u2014 "),UY=a("a"),swr=o("TFPegasusModel"),lwr=o(" (Pegasus model)"),iwr=l(),UT=a("li"),ITe=a("strong"),dwr=o("regnet"),cwr=o(" \u2014 "),HY=a("a"),fwr=o("TFRegNetModel"),mwr=o(" (RegNet model)"),gwr=l(),HT=a("li"),NTe=a("strong"),hwr=o("rembert"),pwr=o(" \u2014 "),JY=a("a"),_wr=o("TFRemBertModel"),uwr=o(" (RemBERT model)"),bwr=l(),JT=a("li"),qTe=a("strong"),vwr=o("resnet"),Fwr=o(" \u2014 "),YY=a("a"),Twr=o("TFResNetModel"),Mwr=o(" (ResNet model)"),Ewr=l(),YT=a("li"),jTe=a("strong"),Cwr=o("roberta"),wwr=o(" \u2014 "),KY=a("a"),Awr=o("TFRobertaModel"),Lwr=o(" (RoBERTa model)"),ywr=l(),KT=a("li"),DTe=a("strong"),xwr=o("roformer"),$wr=o(" \u2014 "),ZY=a("a"),kwr=o("TFRoFormerModel"),Swr=o(" (RoFormer model)"),Rwr=l(),ZT=a("li"),GTe=a("strong"),Pwr=o("segformer"),Bwr=o(" \u2014 "),eK=a("a"),Iwr=o("TFSegformerModel"),Nwr=o(" (SegFormer model)"),qwr=l(),eM=a("li"),OTe=a("strong"),jwr=o("speech_to_text"),Dwr=o(" \u2014 "),oK=a("a"),Gwr=o("TFSpeech2TextModel"),Owr=o(" (Speech2Text model)"),Vwr=l(),oM=a("li"),VTe=a("strong"),Xwr=o("swin"),zwr=o(" \u2014 "),rK=a("a"),Wwr=o("TFSwinModel"),Qwr=o(" (Swin Transformer model)"),Uwr=l(),rM=a("li"),XTe=a("strong"),Hwr=o("t5"),Jwr=o(" \u2014 "),tK=a("a"),Ywr=o("TFT5Model"),Kwr=o(" (T5 model)"),Zwr=l(),tM=a("li"),zTe=a("strong"),eAr=o("tapas"),oAr=o(" \u2014 "),aK=a("a"),rAr=o("TFTapasModel"),tAr=o(" (TAPAS model)"),aAr=l(),aM=a("li"),WTe=a("strong"),nAr=o("transfo-xl"),sAr=o(" \u2014 "),nK=a("a"),lAr=o("TFTransfoXLModel"),iAr=o(" (Transformer-XL model)"),dAr=l(),nM=a("li"),QTe=a("strong"),cAr=o("vit"),fAr=o(" \u2014 "),sK=a("a"),mAr=o("TFViTModel"),gAr=o(" (ViT model)"),hAr=l(),sM=a("li"),UTe=a("strong"),pAr=o("vit_mae"),_Ar=o(" \u2014 "),lK=a("a"),uAr=o("TFViTMAEModel"),bAr=o(" (ViTMAE model)"),vAr=l(),lM=a("li"),HTe=a("strong"),FAr=o("wav2vec2"),TAr=o(" \u2014 "),iK=a("a"),MAr=o("TFWav2Vec2Model"),EAr=o(" (Wav2Vec2 model)"),CAr=l(),iM=a("li"),JTe=a("strong"),wAr=o("xglm"),AAr=o(" \u2014 "),dK=a("a"),LAr=o("TFXGLMModel"),yAr=o(" (XGLM model)"),xAr=l(),dM=a("li"),YTe=a("strong"),$Ar=o("xlm"),kAr=o(" \u2014 "),cK=a("a"),SAr=o("TFXLMModel"),RAr=o(" (XLM model)"),PAr=l(),cM=a("li"),KTe=a("strong"),BAr=o("xlm-roberta"),IAr=o(" \u2014 "),fK=a("a"),NAr=o("TFXLMRobertaModel"),qAr=o(" (XLM-RoBERTa model)"),jAr=l(),fM=a("li"),ZTe=a("strong"),DAr=o("xlnet"),GAr=o(" \u2014 "),mK=a("a"),OAr=o("TFXLNetModel"),VAr=o(" (XLNet model)"),XAr=l(),F(mM.$$.fragment),nHe=l(),Ac=a("h2"),gM=a("a"),eMe=a("span"),F(f$.$$.fragment),zAr=l(),oMe=a("span"),WAr=o("TFAutoModelForPreTraining"),sHe=l(),nr=a("div"),F(m$.$$.fragment),QAr=l(),Lc=a("p"),UAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gK=a("a"),HAr=o("from_pretrained()"),JAr=o(" class method or the "),hK=a("a"),YAr=o("from_config()"),KAr=o(` class
method.`),ZAr=l(),g$=a("p"),e7r=o("This class cannot be instantiated directly using "),rMe=a("code"),o7r=o("__init__()"),r7r=o(" (throws an error)."),t7r=l(),jt=a("div"),F(h$.$$.fragment),a7r=l(),tMe=a("p"),n7r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),s7r=l(),yc=a("p"),l7r=o(`Note:
Loading a model from its configuration file does `),aMe=a("strong"),i7r=o("not"),d7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=a("a"),c7r=o("from_pretrained()"),f7r=o(" to load the model weights."),m7r=l(),F(hM.$$.fragment),g7r=l(),Pr=a("div"),F(p$.$$.fragment),h7r=l(),nMe=a("p"),p7r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_7r=l(),un=a("p"),u7r=o("The model class to instantiate is selected based on the "),sMe=a("code"),b7r=o("model_type"),v7r=o(` property of the config object (either
passed as an argument or loaded from `),lMe=a("code"),F7r=o("pretrained_model_name_or_path"),T7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iMe=a("code"),M7r=o("pretrained_model_name_or_path"),E7r=o(":"),C7r=l(),se=a("ul"),pM=a("li"),dMe=a("strong"),w7r=o("albert"),A7r=o(" \u2014 "),_K=a("a"),L7r=o("TFAlbertForPreTraining"),y7r=o(" (ALBERT model)"),x7r=l(),_M=a("li"),cMe=a("strong"),$7r=o("bart"),k7r=o(" \u2014 "),uK=a("a"),S7r=o("TFBartForConditionalGeneration"),R7r=o(" (BART model)"),P7r=l(),uM=a("li"),fMe=a("strong"),B7r=o("bert"),I7r=o(" \u2014 "),bK=a("a"),N7r=o("TFBertForPreTraining"),q7r=o(" (BERT model)"),j7r=l(),bM=a("li"),mMe=a("strong"),D7r=o("camembert"),G7r=o(" \u2014 "),vK=a("a"),O7r=o("TFCamembertForMaskedLM"),V7r=o(" (CamemBERT model)"),X7r=l(),vM=a("li"),gMe=a("strong"),z7r=o("ctrl"),W7r=o(" \u2014 "),FK=a("a"),Q7r=o("TFCTRLLMHeadModel"),U7r=o(" (CTRL model)"),H7r=l(),FM=a("li"),hMe=a("strong"),J7r=o("distilbert"),Y7r=o(" \u2014 "),TK=a("a"),K7r=o("TFDistilBertForMaskedLM"),Z7r=o(" (DistilBERT model)"),eLr=l(),TM=a("li"),pMe=a("strong"),oLr=o("electra"),rLr=o(" \u2014 "),MK=a("a"),tLr=o("TFElectraForPreTraining"),aLr=o(" (ELECTRA model)"),nLr=l(),MM=a("li"),_Me=a("strong"),sLr=o("flaubert"),lLr=o(" \u2014 "),EK=a("a"),iLr=o("TFFlaubertWithLMHeadModel"),dLr=o(" (FlauBERT model)"),cLr=l(),EM=a("li"),uMe=a("strong"),fLr=o("funnel"),mLr=o(" \u2014 "),CK=a("a"),gLr=o("TFFunnelForPreTraining"),hLr=o(" (Funnel Transformer model)"),pLr=l(),CM=a("li"),bMe=a("strong"),_Lr=o("gpt2"),uLr=o(" \u2014 "),wK=a("a"),bLr=o("TFGPT2LMHeadModel"),vLr=o(" (OpenAI GPT-2 model)"),FLr=l(),wM=a("li"),vMe=a("strong"),TLr=o("layoutlm"),MLr=o(" \u2014 "),AK=a("a"),ELr=o("TFLayoutLMForMaskedLM"),CLr=o(" (LayoutLM model)"),wLr=l(),AM=a("li"),FMe=a("strong"),ALr=o("lxmert"),LLr=o(" \u2014 "),LK=a("a"),yLr=o("TFLxmertForPreTraining"),xLr=o(" (LXMERT model)"),$Lr=l(),LM=a("li"),TMe=a("strong"),kLr=o("mobilebert"),SLr=o(" \u2014 "),yK=a("a"),RLr=o("TFMobileBertForPreTraining"),PLr=o(" (MobileBERT model)"),BLr=l(),yM=a("li"),MMe=a("strong"),ILr=o("mpnet"),NLr=o(" \u2014 "),xK=a("a"),qLr=o("TFMPNetForMaskedLM"),jLr=o(" (MPNet model)"),DLr=l(),xM=a("li"),EMe=a("strong"),GLr=o("openai-gpt"),OLr=o(" \u2014 "),$K=a("a"),VLr=o("TFOpenAIGPTLMHeadModel"),XLr=o(" (OpenAI GPT model)"),zLr=l(),$M=a("li"),CMe=a("strong"),WLr=o("roberta"),QLr=o(" \u2014 "),kK=a("a"),ULr=o("TFRobertaForMaskedLM"),HLr=o(" (RoBERTa model)"),JLr=l(),kM=a("li"),wMe=a("strong"),YLr=o("t5"),KLr=o(" \u2014 "),SK=a("a"),ZLr=o("TFT5ForConditionalGeneration"),eyr=o(" (T5 model)"),oyr=l(),SM=a("li"),AMe=a("strong"),ryr=o("tapas"),tyr=o(" \u2014 "),RK=a("a"),ayr=o("TFTapasForMaskedLM"),nyr=o(" (TAPAS model)"),syr=l(),RM=a("li"),LMe=a("strong"),lyr=o("transfo-xl"),iyr=o(" \u2014 "),PK=a("a"),dyr=o("TFTransfoXLLMHeadModel"),cyr=o(" (Transformer-XL model)"),fyr=l(),PM=a("li"),yMe=a("strong"),myr=o("vit_mae"),gyr=o(" \u2014 "),BK=a("a"),hyr=o("TFViTMAEForPreTraining"),pyr=o(" (ViTMAE model)"),_yr=l(),BM=a("li"),xMe=a("strong"),uyr=o("xlm"),byr=o(" \u2014 "),IK=a("a"),vyr=o("TFXLMWithLMHeadModel"),Fyr=o(" (XLM model)"),Tyr=l(),IM=a("li"),$Me=a("strong"),Myr=o("xlm-roberta"),Eyr=o(" \u2014 "),NK=a("a"),Cyr=o("TFXLMRobertaForMaskedLM"),wyr=o(" (XLM-RoBERTa model)"),Ayr=l(),NM=a("li"),kMe=a("strong"),Lyr=o("xlnet"),yyr=o(" \u2014 "),qK=a("a"),xyr=o("TFXLNetLMHeadModel"),$yr=o(" (XLNet model)"),kyr=l(),F(qM.$$.fragment),lHe=l(),xc=a("h2"),jM=a("a"),SMe=a("span"),F(_$.$$.fragment),Syr=l(),RMe=a("span"),Ryr=o("TFAutoModelForCausalLM"),iHe=l(),sr=a("div"),F(u$.$$.fragment),Pyr=l(),$c=a("p"),Byr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jK=a("a"),Iyr=o("from_pretrained()"),Nyr=o(" class method or the "),DK=a("a"),qyr=o("from_config()"),jyr=o(` class
method.`),Dyr=l(),b$=a("p"),Gyr=o("This class cannot be instantiated directly using "),PMe=a("code"),Oyr=o("__init__()"),Vyr=o(" (throws an error)."),Xyr=l(),Dt=a("div"),F(v$.$$.fragment),zyr=l(),BMe=a("p"),Wyr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Qyr=l(),kc=a("p"),Uyr=o(`Note:
Loading a model from its configuration file does `),IMe=a("strong"),Hyr=o("not"),Jyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GK=a("a"),Yyr=o("from_pretrained()"),Kyr=o(" to load the model weights."),Zyr=l(),F(DM.$$.fragment),e8r=l(),Br=a("div"),F(F$.$$.fragment),o8r=l(),NMe=a("p"),r8r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),t8r=l(),bn=a("p"),a8r=o("The model class to instantiate is selected based on the "),qMe=a("code"),n8r=o("model_type"),s8r=o(` property of the config object (either
passed as an argument or loaded from `),jMe=a("code"),l8r=o("pretrained_model_name_or_path"),i8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DMe=a("code"),d8r=o("pretrained_model_name_or_path"),c8r=o(":"),f8r=l(),Me=a("ul"),GM=a("li"),GMe=a("strong"),m8r=o("bert"),g8r=o(" \u2014 "),OK=a("a"),h8r=o("TFBertLMHeadModel"),p8r=o(" (BERT model)"),_8r=l(),OM=a("li"),OMe=a("strong"),u8r=o("camembert"),b8r=o(" \u2014 "),VK=a("a"),v8r=o("TFCamembertForCausalLM"),F8r=o(" (CamemBERT model)"),T8r=l(),VM=a("li"),VMe=a("strong"),M8r=o("ctrl"),E8r=o(" \u2014 "),XK=a("a"),C8r=o("TFCTRLLMHeadModel"),w8r=o(" (CTRL model)"),A8r=l(),XM=a("li"),XMe=a("strong"),L8r=o("gpt2"),y8r=o(" \u2014 "),zK=a("a"),x8r=o("TFGPT2LMHeadModel"),$8r=o(" (OpenAI GPT-2 model)"),k8r=l(),zM=a("li"),zMe=a("strong"),S8r=o("gptj"),R8r=o(" \u2014 "),WK=a("a"),P8r=o("TFGPTJForCausalLM"),B8r=o(" (GPT-J model)"),I8r=l(),WM=a("li"),WMe=a("strong"),N8r=o("openai-gpt"),q8r=o(" \u2014 "),QK=a("a"),j8r=o("TFOpenAIGPTLMHeadModel"),D8r=o(" (OpenAI GPT model)"),G8r=l(),QM=a("li"),QMe=a("strong"),O8r=o("opt"),V8r=o(" \u2014 "),UK=a("a"),X8r=o("TFOPTForCausalLM"),z8r=o(" (OPT model)"),W8r=l(),UM=a("li"),UMe=a("strong"),Q8r=o("rembert"),U8r=o(" \u2014 "),HK=a("a"),H8r=o("TFRemBertForCausalLM"),J8r=o(" (RemBERT model)"),Y8r=l(),HM=a("li"),HMe=a("strong"),K8r=o("roberta"),Z8r=o(" \u2014 "),JK=a("a"),e9r=o("TFRobertaForCausalLM"),o9r=o(" (RoBERTa model)"),r9r=l(),JM=a("li"),JMe=a("strong"),t9r=o("roformer"),a9r=o(" \u2014 "),YK=a("a"),n9r=o("TFRoFormerForCausalLM"),s9r=o(" (RoFormer model)"),l9r=l(),YM=a("li"),YMe=a("strong"),i9r=o("transfo-xl"),d9r=o(" \u2014 "),KK=a("a"),c9r=o("TFTransfoXLLMHeadModel"),f9r=o(" (Transformer-XL model)"),m9r=l(),KM=a("li"),KMe=a("strong"),g9r=o("xglm"),h9r=o(" \u2014 "),ZK=a("a"),p9r=o("TFXGLMForCausalLM"),_9r=o(" (XGLM model)"),u9r=l(),ZM=a("li"),ZMe=a("strong"),b9r=o("xlm"),v9r=o(" \u2014 "),eZ=a("a"),F9r=o("TFXLMWithLMHeadModel"),T9r=o(" (XLM model)"),M9r=l(),eE=a("li"),eEe=a("strong"),E9r=o("xlnet"),C9r=o(" \u2014 "),oZ=a("a"),w9r=o("TFXLNetLMHeadModel"),A9r=o(" (XLNet model)"),L9r=l(),F(oE.$$.fragment),dHe=l(),Sc=a("h2"),rE=a("a"),oEe=a("span"),F(T$.$$.fragment),y9r=l(),rEe=a("span"),x9r=o("TFAutoModelForImageClassification"),cHe=l(),lr=a("div"),F(M$.$$.fragment),$9r=l(),Rc=a("p"),k9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rZ=a("a"),S9r=o("from_pretrained()"),R9r=o(" class method or the "),tZ=a("a"),P9r=o("from_config()"),B9r=o(` class
method.`),I9r=l(),E$=a("p"),N9r=o("This class cannot be instantiated directly using "),tEe=a("code"),q9r=o("__init__()"),j9r=o(" (throws an error)."),D9r=l(),Gt=a("div"),F(C$.$$.fragment),G9r=l(),aEe=a("p"),O9r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),V9r=l(),Pc=a("p"),X9r=o(`Note:
Loading a model from its configuration file does `),nEe=a("strong"),z9r=o("not"),W9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=a("a"),Q9r=o("from_pretrained()"),U9r=o(" to load the model weights."),H9r=l(),F(tE.$$.fragment),J9r=l(),Ir=a("div"),F(w$.$$.fragment),Y9r=l(),sEe=a("p"),K9r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Z9r=l(),vn=a("p"),exr=o("The model class to instantiate is selected based on the "),lEe=a("code"),oxr=o("model_type"),rxr=o(` property of the config object (either
passed as an argument or loaded from `),iEe=a("code"),txr=o("pretrained_model_name_or_path"),axr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dEe=a("code"),nxr=o("pretrained_model_name_or_path"),sxr=o(":"),lxr=l(),Ve=a("ul"),aE=a("li"),cEe=a("strong"),ixr=o("convnext"),dxr=o(" \u2014 "),nZ=a("a"),cxr=o("TFConvNextForImageClassification"),fxr=o(" (ConvNeXT model)"),mxr=l(),nE=a("li"),fEe=a("strong"),gxr=o("data2vec-vision"),hxr=o(" \u2014 "),sZ=a("a"),pxr=o("TFData2VecVisionForImageClassification"),_xr=o(" (Data2VecVision model)"),uxr=l(),dl=a("li"),mEe=a("strong"),bxr=o("deit"),vxr=o(" \u2014 "),lZ=a("a"),Fxr=o("TFDeiTForImageClassification"),Txr=o(" or "),iZ=a("a"),Mxr=o("TFDeiTForImageClassificationWithTeacher"),Exr=o(" (DeiT model)"),Cxr=l(),sE=a("li"),gEe=a("strong"),wxr=o("regnet"),Axr=o(" \u2014 "),dZ=a("a"),Lxr=o("TFRegNetForImageClassification"),yxr=o(" (RegNet model)"),xxr=l(),lE=a("li"),hEe=a("strong"),$xr=o("resnet"),kxr=o(" \u2014 "),cZ=a("a"),Sxr=o("TFResNetForImageClassification"),Rxr=o(" (ResNet model)"),Pxr=l(),iE=a("li"),pEe=a("strong"),Bxr=o("segformer"),Ixr=o(" \u2014 "),fZ=a("a"),Nxr=o("TFSegformerForImageClassification"),qxr=o(" (SegFormer model)"),jxr=l(),dE=a("li"),_Ee=a("strong"),Dxr=o("swin"),Gxr=o(" \u2014 "),mZ=a("a"),Oxr=o("TFSwinForImageClassification"),Vxr=o(" (Swin Transformer model)"),Xxr=l(),cE=a("li"),uEe=a("strong"),zxr=o("vit"),Wxr=o(" \u2014 "),gZ=a("a"),Qxr=o("TFViTForImageClassification"),Uxr=o(" (ViT model)"),Hxr=l(),F(fE.$$.fragment),fHe=l(),Bc=a("h2"),mE=a("a"),bEe=a("span"),F(A$.$$.fragment),Jxr=l(),vEe=a("span"),Yxr=o("TFAutoModelForSemanticSegmentation"),mHe=l(),ir=a("div"),F(L$.$$.fragment),Kxr=l(),Ic=a("p"),Zxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),hZ=a("a"),e$r=o("from_pretrained()"),o$r=o(" class method or the "),pZ=a("a"),r$r=o("from_config()"),t$r=o(` class
method.`),a$r=l(),y$=a("p"),n$r=o("This class cannot be instantiated directly using "),FEe=a("code"),s$r=o("__init__()"),l$r=o(" (throws an error)."),i$r=l(),Ot=a("div"),F(x$.$$.fragment),d$r=l(),TEe=a("p"),c$r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),f$r=l(),Nc=a("p"),m$r=o(`Note:
Loading a model from its configuration file does `),MEe=a("strong"),g$r=o("not"),h$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=a("a"),p$r=o("from_pretrained()"),_$r=o(" to load the model weights."),u$r=l(),F(gE.$$.fragment),b$r=l(),Nr=a("div"),F($$.$$.fragment),v$r=l(),EEe=a("p"),F$r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),T$r=l(),Fn=a("p"),M$r=o("The model class to instantiate is selected based on the "),CEe=a("code"),E$r=o("model_type"),C$r=o(` property of the config object (either
passed as an argument or loaded from `),wEe=a("code"),w$r=o("pretrained_model_name_or_path"),A$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AEe=a("code"),L$r=o("pretrained_model_name_or_path"),y$r=o(":"),x$r=l(),k$=a("ul"),hE=a("li"),LEe=a("strong"),$$r=o("data2vec-vision"),k$r=o(" \u2014 "),uZ=a("a"),S$r=o("TFData2VecVisionForSemanticSegmentation"),R$r=o(" (Data2VecVision model)"),P$r=l(),pE=a("li"),yEe=a("strong"),B$r=o("segformer"),I$r=o(" \u2014 "),bZ=a("a"),N$r=o("TFSegformerForSemanticSegmentation"),q$r=o(" (SegFormer model)"),j$r=l(),F(_E.$$.fragment),gHe=l(),qc=a("h2"),uE=a("a"),xEe=a("span"),F(S$.$$.fragment),D$r=l(),$Ee=a("span"),G$r=o("TFAutoModelForMaskedLM"),hHe=l(),dr=a("div"),F(R$.$$.fragment),O$r=l(),jc=a("p"),V$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vZ=a("a"),X$r=o("from_pretrained()"),z$r=o(" class method or the "),FZ=a("a"),W$r=o("from_config()"),Q$r=o(` class
method.`),U$r=l(),P$=a("p"),H$r=o("This class cannot be instantiated directly using "),kEe=a("code"),J$r=o("__init__()"),Y$r=o(" (throws an error)."),K$r=l(),Vt=a("div"),F(B$.$$.fragment),Z$r=l(),SEe=a("p"),ekr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),okr=l(),Dc=a("p"),rkr=o(`Note:
Loading a model from its configuration file does `),REe=a("strong"),tkr=o("not"),akr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=a("a"),nkr=o("from_pretrained()"),skr=o(" to load the model weights."),lkr=l(),F(bE.$$.fragment),ikr=l(),qr=a("div"),F(I$.$$.fragment),dkr=l(),PEe=a("p"),ckr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),fkr=l(),Tn=a("p"),mkr=o("The model class to instantiate is selected based on the "),BEe=a("code"),gkr=o("model_type"),hkr=o(` property of the config object (either
passed as an argument or loaded from `),IEe=a("code"),pkr=o("pretrained_model_name_or_path"),_kr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NEe=a("code"),ukr=o("pretrained_model_name_or_path"),bkr=o(":"),vkr=l(),de=a("ul"),vE=a("li"),qEe=a("strong"),Fkr=o("albert"),Tkr=o(" \u2014 "),MZ=a("a"),Mkr=o("TFAlbertForMaskedLM"),Ekr=o(" (ALBERT model)"),Ckr=l(),FE=a("li"),jEe=a("strong"),wkr=o("bert"),Akr=o(" \u2014 "),EZ=a("a"),Lkr=o("TFBertForMaskedLM"),ykr=o(" (BERT model)"),xkr=l(),TE=a("li"),DEe=a("strong"),$kr=o("camembert"),kkr=o(" \u2014 "),CZ=a("a"),Skr=o("TFCamembertForMaskedLM"),Rkr=o(" (CamemBERT model)"),Pkr=l(),ME=a("li"),GEe=a("strong"),Bkr=o("convbert"),Ikr=o(" \u2014 "),wZ=a("a"),Nkr=o("TFConvBertForMaskedLM"),qkr=o(" (ConvBERT model)"),jkr=l(),EE=a("li"),OEe=a("strong"),Dkr=o("deberta"),Gkr=o(" \u2014 "),AZ=a("a"),Okr=o("TFDebertaForMaskedLM"),Vkr=o(" (DeBERTa model)"),Xkr=l(),CE=a("li"),VEe=a("strong"),zkr=o("deberta-v2"),Wkr=o(" \u2014 "),LZ=a("a"),Qkr=o("TFDebertaV2ForMaskedLM"),Ukr=o(" (DeBERTa-v2 model)"),Hkr=l(),wE=a("li"),XEe=a("strong"),Jkr=o("distilbert"),Ykr=o(" \u2014 "),yZ=a("a"),Kkr=o("TFDistilBertForMaskedLM"),Zkr=o(" (DistilBERT model)"),eSr=l(),AE=a("li"),zEe=a("strong"),oSr=o("electra"),rSr=o(" \u2014 "),xZ=a("a"),tSr=o("TFElectraForMaskedLM"),aSr=o(" (ELECTRA model)"),nSr=l(),LE=a("li"),WEe=a("strong"),sSr=o("flaubert"),lSr=o(" \u2014 "),$Z=a("a"),iSr=o("TFFlaubertWithLMHeadModel"),dSr=o(" (FlauBERT model)"),cSr=l(),yE=a("li"),QEe=a("strong"),fSr=o("funnel"),mSr=o(" \u2014 "),kZ=a("a"),gSr=o("TFFunnelForMaskedLM"),hSr=o(" (Funnel Transformer model)"),pSr=l(),xE=a("li"),UEe=a("strong"),_Sr=o("layoutlm"),uSr=o(" \u2014 "),SZ=a("a"),bSr=o("TFLayoutLMForMaskedLM"),vSr=o(" (LayoutLM model)"),FSr=l(),$E=a("li"),HEe=a("strong"),TSr=o("longformer"),MSr=o(" \u2014 "),RZ=a("a"),ESr=o("TFLongformerForMaskedLM"),CSr=o(" (Longformer model)"),wSr=l(),kE=a("li"),JEe=a("strong"),ASr=o("mobilebert"),LSr=o(" \u2014 "),PZ=a("a"),ySr=o("TFMobileBertForMaskedLM"),xSr=o(" (MobileBERT model)"),$Sr=l(),SE=a("li"),YEe=a("strong"),kSr=o("mpnet"),SSr=o(" \u2014 "),BZ=a("a"),RSr=o("TFMPNetForMaskedLM"),PSr=o(" (MPNet model)"),BSr=l(),RE=a("li"),KEe=a("strong"),ISr=o("rembert"),NSr=o(" \u2014 "),IZ=a("a"),qSr=o("TFRemBertForMaskedLM"),jSr=o(" (RemBERT model)"),DSr=l(),PE=a("li"),ZEe=a("strong"),GSr=o("roberta"),OSr=o(" \u2014 "),NZ=a("a"),VSr=o("TFRobertaForMaskedLM"),XSr=o(" (RoBERTa model)"),zSr=l(),BE=a("li"),eCe=a("strong"),WSr=o("roformer"),QSr=o(" \u2014 "),qZ=a("a"),USr=o("TFRoFormerForMaskedLM"),HSr=o(" (RoFormer model)"),JSr=l(),IE=a("li"),oCe=a("strong"),YSr=o("tapas"),KSr=o(" \u2014 "),jZ=a("a"),ZSr=o("TFTapasForMaskedLM"),eRr=o(" (TAPAS model)"),oRr=l(),NE=a("li"),rCe=a("strong"),rRr=o("xlm"),tRr=o(" \u2014 "),DZ=a("a"),aRr=o("TFXLMWithLMHeadModel"),nRr=o(" (XLM model)"),sRr=l(),qE=a("li"),tCe=a("strong"),lRr=o("xlm-roberta"),iRr=o(" \u2014 "),GZ=a("a"),dRr=o("TFXLMRobertaForMaskedLM"),cRr=o(" (XLM-RoBERTa model)"),fRr=l(),F(jE.$$.fragment),pHe=l(),Gc=a("h2"),DE=a("a"),aCe=a("span"),F(N$.$$.fragment),mRr=l(),nCe=a("span"),gRr=o("TFAutoModelForSeq2SeqLM"),_He=l(),cr=a("div"),F(q$.$$.fragment),hRr=l(),Oc=a("p"),pRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),OZ=a("a"),_Rr=o("from_pretrained()"),uRr=o(" class method or the "),VZ=a("a"),bRr=o("from_config()"),vRr=o(` class
method.`),FRr=l(),j$=a("p"),TRr=o("This class cannot be instantiated directly using "),sCe=a("code"),MRr=o("__init__()"),ERr=o(" (throws an error)."),CRr=l(),Xt=a("div"),F(D$.$$.fragment),wRr=l(),lCe=a("p"),ARr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),LRr=l(),Vc=a("p"),yRr=o(`Note:
Loading a model from its configuration file does `),iCe=a("strong"),xRr=o("not"),$Rr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=a("a"),kRr=o("from_pretrained()"),SRr=o(" to load the model weights."),RRr=l(),F(GE.$$.fragment),PRr=l(),jr=a("div"),F(G$.$$.fragment),BRr=l(),dCe=a("p"),IRr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),NRr=l(),Mn=a("p"),qRr=o("The model class to instantiate is selected based on the "),cCe=a("code"),jRr=o("model_type"),DRr=o(` property of the config object (either
passed as an argument or loaded from `),fCe=a("code"),GRr=o("pretrained_model_name_or_path"),ORr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mCe=a("code"),VRr=o("pretrained_model_name_or_path"),XRr=o(":"),zRr=l(),ye=a("ul"),OE=a("li"),gCe=a("strong"),WRr=o("bart"),QRr=o(" \u2014 "),zZ=a("a"),URr=o("TFBartForConditionalGeneration"),HRr=o(" (BART model)"),JRr=l(),VE=a("li"),hCe=a("strong"),YRr=o("blenderbot"),KRr=o(" \u2014 "),WZ=a("a"),ZRr=o("TFBlenderbotForConditionalGeneration"),ePr=o(" (Blenderbot model)"),oPr=l(),XE=a("li"),pCe=a("strong"),rPr=o("blenderbot-small"),tPr=o(" \u2014 "),QZ=a("a"),aPr=o("TFBlenderbotSmallForConditionalGeneration"),nPr=o(" (BlenderbotSmall model)"),sPr=l(),zE=a("li"),_Ce=a("strong"),lPr=o("encoder-decoder"),iPr=o(" \u2014 "),UZ=a("a"),dPr=o("TFEncoderDecoderModel"),cPr=o(" (Encoder decoder model)"),fPr=l(),WE=a("li"),uCe=a("strong"),mPr=o("led"),gPr=o(" \u2014 "),HZ=a("a"),hPr=o("TFLEDForConditionalGeneration"),pPr=o(" (LED model)"),_Pr=l(),QE=a("li"),bCe=a("strong"),uPr=o("marian"),bPr=o(" \u2014 "),JZ=a("a"),vPr=o("TFMarianMTModel"),FPr=o(" (Marian model)"),TPr=l(),UE=a("li"),vCe=a("strong"),MPr=o("mbart"),EPr=o(" \u2014 "),YZ=a("a"),CPr=o("TFMBartForConditionalGeneration"),wPr=o(" (mBART model)"),APr=l(),HE=a("li"),FCe=a("strong"),LPr=o("mt5"),yPr=o(" \u2014 "),KZ=a("a"),xPr=o("TFMT5ForConditionalGeneration"),$Pr=o(" (MT5 model)"),kPr=l(),JE=a("li"),TCe=a("strong"),SPr=o("pegasus"),RPr=o(" \u2014 "),ZZ=a("a"),PPr=o("TFPegasusForConditionalGeneration"),BPr=o(" (Pegasus model)"),IPr=l(),YE=a("li"),MCe=a("strong"),NPr=o("t5"),qPr=o(" \u2014 "),eee=a("a"),jPr=o("TFT5ForConditionalGeneration"),DPr=o(" (T5 model)"),GPr=l(),F(KE.$$.fragment),uHe=l(),Xc=a("h2"),ZE=a("a"),ECe=a("span"),F(O$.$$.fragment),OPr=l(),CCe=a("span"),VPr=o("TFAutoModelForSequenceClassification"),bHe=l(),fr=a("div"),F(V$.$$.fragment),XPr=l(),zc=a("p"),zPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oee=a("a"),WPr=o("from_pretrained()"),QPr=o(" class method or the "),ree=a("a"),UPr=o("from_config()"),HPr=o(` class
method.`),JPr=l(),X$=a("p"),YPr=o("This class cannot be instantiated directly using "),wCe=a("code"),KPr=o("__init__()"),ZPr=o(" (throws an error)."),eBr=l(),zt=a("div"),F(z$.$$.fragment),oBr=l(),ACe=a("p"),rBr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tBr=l(),Wc=a("p"),aBr=o(`Note:
Loading a model from its configuration file does `),LCe=a("strong"),nBr=o("not"),sBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tee=a("a"),lBr=o("from_pretrained()"),iBr=o(" to load the model weights."),dBr=l(),F(eC.$$.fragment),cBr=l(),Dr=a("div"),F(W$.$$.fragment),fBr=l(),yCe=a("p"),mBr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gBr=l(),En=a("p"),hBr=o("The model class to instantiate is selected based on the "),xCe=a("code"),pBr=o("model_type"),_Br=o(` property of the config object (either
passed as an argument or loaded from `),$Ce=a("code"),uBr=o("pretrained_model_name_or_path"),bBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kCe=a("code"),vBr=o("pretrained_model_name_or_path"),FBr=o(":"),TBr=l(),te=a("ul"),oC=a("li"),SCe=a("strong"),MBr=o("albert"),EBr=o(" \u2014 "),aee=a("a"),CBr=o("TFAlbertForSequenceClassification"),wBr=o(" (ALBERT model)"),ABr=l(),rC=a("li"),RCe=a("strong"),LBr=o("bert"),yBr=o(" \u2014 "),nee=a("a"),xBr=o("TFBertForSequenceClassification"),$Br=o(" (BERT model)"),kBr=l(),tC=a("li"),PCe=a("strong"),SBr=o("camembert"),RBr=o(" \u2014 "),see=a("a"),PBr=o("TFCamembertForSequenceClassification"),BBr=o(" (CamemBERT model)"),IBr=l(),aC=a("li"),BCe=a("strong"),NBr=o("convbert"),qBr=o(" \u2014 "),lee=a("a"),jBr=o("TFConvBertForSequenceClassification"),DBr=o(" (ConvBERT model)"),GBr=l(),nC=a("li"),ICe=a("strong"),OBr=o("ctrl"),VBr=o(" \u2014 "),iee=a("a"),XBr=o("TFCTRLForSequenceClassification"),zBr=o(" (CTRL model)"),WBr=l(),sC=a("li"),NCe=a("strong"),QBr=o("deberta"),UBr=o(" \u2014 "),dee=a("a"),HBr=o("TFDebertaForSequenceClassification"),JBr=o(" (DeBERTa model)"),YBr=l(),lC=a("li"),qCe=a("strong"),KBr=o("deberta-v2"),ZBr=o(" \u2014 "),cee=a("a"),eIr=o("TFDebertaV2ForSequenceClassification"),oIr=o(" (DeBERTa-v2 model)"),rIr=l(),iC=a("li"),jCe=a("strong"),tIr=o("distilbert"),aIr=o(" \u2014 "),fee=a("a"),nIr=o("TFDistilBertForSequenceClassification"),sIr=o(" (DistilBERT model)"),lIr=l(),dC=a("li"),DCe=a("strong"),iIr=o("electra"),dIr=o(" \u2014 "),mee=a("a"),cIr=o("TFElectraForSequenceClassification"),fIr=o(" (ELECTRA model)"),mIr=l(),cC=a("li"),GCe=a("strong"),gIr=o("flaubert"),hIr=o(" \u2014 "),gee=a("a"),pIr=o("TFFlaubertForSequenceClassification"),_Ir=o(" (FlauBERT model)"),uIr=l(),fC=a("li"),OCe=a("strong"),bIr=o("funnel"),vIr=o(" \u2014 "),hee=a("a"),FIr=o("TFFunnelForSequenceClassification"),TIr=o(" (Funnel Transformer model)"),MIr=l(),mC=a("li"),VCe=a("strong"),EIr=o("gpt2"),CIr=o(" \u2014 "),pee=a("a"),wIr=o("TFGPT2ForSequenceClassification"),AIr=o(" (OpenAI GPT-2 model)"),LIr=l(),gC=a("li"),XCe=a("strong"),yIr=o("gptj"),xIr=o(" \u2014 "),_ee=a("a"),$Ir=o("TFGPTJForSequenceClassification"),kIr=o(" (GPT-J model)"),SIr=l(),hC=a("li"),zCe=a("strong"),RIr=o("layoutlm"),PIr=o(" \u2014 "),uee=a("a"),BIr=o("TFLayoutLMForSequenceClassification"),IIr=o(" (LayoutLM model)"),NIr=l(),pC=a("li"),WCe=a("strong"),qIr=o("longformer"),jIr=o(" \u2014 "),bee=a("a"),DIr=o("TFLongformerForSequenceClassification"),GIr=o(" (Longformer model)"),OIr=l(),_C=a("li"),QCe=a("strong"),VIr=o("mobilebert"),XIr=o(" \u2014 "),vee=a("a"),zIr=o("TFMobileBertForSequenceClassification"),WIr=o(" (MobileBERT model)"),QIr=l(),uC=a("li"),UCe=a("strong"),UIr=o("mpnet"),HIr=o(" \u2014 "),Fee=a("a"),JIr=o("TFMPNetForSequenceClassification"),YIr=o(" (MPNet model)"),KIr=l(),bC=a("li"),HCe=a("strong"),ZIr=o("openai-gpt"),eNr=o(" \u2014 "),Tee=a("a"),oNr=o("TFOpenAIGPTForSequenceClassification"),rNr=o(" (OpenAI GPT model)"),tNr=l(),vC=a("li"),JCe=a("strong"),aNr=o("rembert"),nNr=o(" \u2014 "),Mee=a("a"),sNr=o("TFRemBertForSequenceClassification"),lNr=o(" (RemBERT model)"),iNr=l(),FC=a("li"),YCe=a("strong"),dNr=o("roberta"),cNr=o(" \u2014 "),Eee=a("a"),fNr=o("TFRobertaForSequenceClassification"),mNr=o(" (RoBERTa model)"),gNr=l(),TC=a("li"),KCe=a("strong"),hNr=o("roformer"),pNr=o(" \u2014 "),Cee=a("a"),_Nr=o("TFRoFormerForSequenceClassification"),uNr=o(" (RoFormer model)"),bNr=l(),MC=a("li"),ZCe=a("strong"),vNr=o("tapas"),FNr=o(" \u2014 "),wee=a("a"),TNr=o("TFTapasForSequenceClassification"),MNr=o(" (TAPAS model)"),ENr=l(),EC=a("li"),e0e=a("strong"),CNr=o("transfo-xl"),wNr=o(" \u2014 "),Aee=a("a"),ANr=o("TFTransfoXLForSequenceClassification"),LNr=o(" (Transformer-XL model)"),yNr=l(),CC=a("li"),o0e=a("strong"),xNr=o("xlm"),$Nr=o(" \u2014 "),Lee=a("a"),kNr=o("TFXLMForSequenceClassification"),SNr=o(" (XLM model)"),RNr=l(),wC=a("li"),r0e=a("strong"),PNr=o("xlm-roberta"),BNr=o(" \u2014 "),yee=a("a"),INr=o("TFXLMRobertaForSequenceClassification"),NNr=o(" (XLM-RoBERTa model)"),qNr=l(),AC=a("li"),t0e=a("strong"),jNr=o("xlnet"),DNr=o(" \u2014 "),xee=a("a"),GNr=o("TFXLNetForSequenceClassification"),ONr=o(" (XLNet model)"),VNr=l(),F(LC.$$.fragment),vHe=l(),Qc=a("h2"),yC=a("a"),a0e=a("span"),F(Q$.$$.fragment),XNr=l(),n0e=a("span"),zNr=o("TFAutoModelForMultipleChoice"),FHe=l(),mr=a("div"),F(U$.$$.fragment),WNr=l(),Uc=a("p"),QNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$ee=a("a"),UNr=o("from_pretrained()"),HNr=o(" class method or the "),kee=a("a"),JNr=o("from_config()"),YNr=o(` class
method.`),KNr=l(),H$=a("p"),ZNr=o("This class cannot be instantiated directly using "),s0e=a("code"),eqr=o("__init__()"),oqr=o(" (throws an error)."),rqr=l(),Wt=a("div"),F(J$.$$.fragment),tqr=l(),l0e=a("p"),aqr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nqr=l(),Hc=a("p"),sqr=o(`Note:
Loading a model from its configuration file does `),i0e=a("strong"),lqr=o("not"),iqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),See=a("a"),dqr=o("from_pretrained()"),cqr=o(" to load the model weights."),fqr=l(),F(xC.$$.fragment),mqr=l(),Gr=a("div"),F(Y$.$$.fragment),gqr=l(),d0e=a("p"),hqr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pqr=l(),Cn=a("p"),_qr=o("The model class to instantiate is selected based on the "),c0e=a("code"),uqr=o("model_type"),bqr=o(` property of the config object (either
passed as an argument or loaded from `),f0e=a("code"),vqr=o("pretrained_model_name_or_path"),Fqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m0e=a("code"),Tqr=o("pretrained_model_name_or_path"),Mqr=o(":"),Eqr=l(),ve=a("ul"),$C=a("li"),g0e=a("strong"),Cqr=o("albert"),wqr=o(" \u2014 "),Ree=a("a"),Aqr=o("TFAlbertForMultipleChoice"),Lqr=o(" (ALBERT model)"),yqr=l(),kC=a("li"),h0e=a("strong"),xqr=o("bert"),$qr=o(" \u2014 "),Pee=a("a"),kqr=o("TFBertForMultipleChoice"),Sqr=o(" (BERT model)"),Rqr=l(),SC=a("li"),p0e=a("strong"),Pqr=o("camembert"),Bqr=o(" \u2014 "),Bee=a("a"),Iqr=o("TFCamembertForMultipleChoice"),Nqr=o(" (CamemBERT model)"),qqr=l(),RC=a("li"),_0e=a("strong"),jqr=o("convbert"),Dqr=o(" \u2014 "),Iee=a("a"),Gqr=o("TFConvBertForMultipleChoice"),Oqr=o(" (ConvBERT model)"),Vqr=l(),PC=a("li"),u0e=a("strong"),Xqr=o("distilbert"),zqr=o(" \u2014 "),Nee=a("a"),Wqr=o("TFDistilBertForMultipleChoice"),Qqr=o(" (DistilBERT model)"),Uqr=l(),BC=a("li"),b0e=a("strong"),Hqr=o("electra"),Jqr=o(" \u2014 "),qee=a("a"),Yqr=o("TFElectraForMultipleChoice"),Kqr=o(" (ELECTRA model)"),Zqr=l(),IC=a("li"),v0e=a("strong"),ejr=o("flaubert"),ojr=o(" \u2014 "),jee=a("a"),rjr=o("TFFlaubertForMultipleChoice"),tjr=o(" (FlauBERT model)"),ajr=l(),NC=a("li"),F0e=a("strong"),njr=o("funnel"),sjr=o(" \u2014 "),Dee=a("a"),ljr=o("TFFunnelForMultipleChoice"),ijr=o(" (Funnel Transformer model)"),djr=l(),qC=a("li"),T0e=a("strong"),cjr=o("longformer"),fjr=o(" \u2014 "),Gee=a("a"),mjr=o("TFLongformerForMultipleChoice"),gjr=o(" (Longformer model)"),hjr=l(),jC=a("li"),M0e=a("strong"),pjr=o("mobilebert"),_jr=o(" \u2014 "),Oee=a("a"),ujr=o("TFMobileBertForMultipleChoice"),bjr=o(" (MobileBERT model)"),vjr=l(),DC=a("li"),E0e=a("strong"),Fjr=o("mpnet"),Tjr=o(" \u2014 "),Vee=a("a"),Mjr=o("TFMPNetForMultipleChoice"),Ejr=o(" (MPNet model)"),Cjr=l(),GC=a("li"),C0e=a("strong"),wjr=o("rembert"),Ajr=o(" \u2014 "),Xee=a("a"),Ljr=o("TFRemBertForMultipleChoice"),yjr=o(" (RemBERT model)"),xjr=l(),OC=a("li"),w0e=a("strong"),$jr=o("roberta"),kjr=o(" \u2014 "),zee=a("a"),Sjr=o("TFRobertaForMultipleChoice"),Rjr=o(" (RoBERTa model)"),Pjr=l(),VC=a("li"),A0e=a("strong"),Bjr=o("roformer"),Ijr=o(" \u2014 "),Wee=a("a"),Njr=o("TFRoFormerForMultipleChoice"),qjr=o(" (RoFormer model)"),jjr=l(),XC=a("li"),L0e=a("strong"),Djr=o("xlm"),Gjr=o(" \u2014 "),Qee=a("a"),Ojr=o("TFXLMForMultipleChoice"),Vjr=o(" (XLM model)"),Xjr=l(),zC=a("li"),y0e=a("strong"),zjr=o("xlm-roberta"),Wjr=o(" \u2014 "),Uee=a("a"),Qjr=o("TFXLMRobertaForMultipleChoice"),Ujr=o(" (XLM-RoBERTa model)"),Hjr=l(),WC=a("li"),x0e=a("strong"),Jjr=o("xlnet"),Yjr=o(" \u2014 "),Hee=a("a"),Kjr=o("TFXLNetForMultipleChoice"),Zjr=o(" (XLNet model)"),eDr=l(),F(QC.$$.fragment),THe=l(),Jc=a("h2"),UC=a("a"),$0e=a("span"),F(K$.$$.fragment),oDr=l(),k0e=a("span"),rDr=o("TFAutoModelForNextSentencePrediction"),MHe=l(),gr=a("div"),F(Z$.$$.fragment),tDr=l(),Yc=a("p"),aDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Jee=a("a"),nDr=o("from_pretrained()"),sDr=o(" class method or the "),Yee=a("a"),lDr=o("from_config()"),iDr=o(` class
method.`),dDr=l(),ek=a("p"),cDr=o("This class cannot be instantiated directly using "),S0e=a("code"),fDr=o("__init__()"),mDr=o(" (throws an error)."),gDr=l(),Qt=a("div"),F(ok.$$.fragment),hDr=l(),R0e=a("p"),pDr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_Dr=l(),Kc=a("p"),uDr=o(`Note:
Loading a model from its configuration file does `),P0e=a("strong"),bDr=o("not"),vDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kee=a("a"),FDr=o("from_pretrained()"),TDr=o(" to load the model weights."),MDr=l(),F(HC.$$.fragment),EDr=l(),Or=a("div"),F(rk.$$.fragment),CDr=l(),B0e=a("p"),wDr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ADr=l(),wn=a("p"),LDr=o("The model class to instantiate is selected based on the "),I0e=a("code"),yDr=o("model_type"),xDr=o(` property of the config object (either
passed as an argument or loaded from `),N0e=a("code"),$Dr=o("pretrained_model_name_or_path"),kDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q0e=a("code"),SDr=o("pretrained_model_name_or_path"),RDr=o(":"),PDr=l(),tk=a("ul"),JC=a("li"),j0e=a("strong"),BDr=o("bert"),IDr=o(" \u2014 "),Zee=a("a"),NDr=o("TFBertForNextSentencePrediction"),qDr=o(" (BERT model)"),jDr=l(),YC=a("li"),D0e=a("strong"),DDr=o("mobilebert"),GDr=o(" \u2014 "),eoe=a("a"),ODr=o("TFMobileBertForNextSentencePrediction"),VDr=o(" (MobileBERT model)"),XDr=l(),F(KC.$$.fragment),EHe=l(),Zc=a("h2"),ZC=a("a"),G0e=a("span"),F(ak.$$.fragment),zDr=l(),O0e=a("span"),WDr=o("TFAutoModelForTableQuestionAnswering"),CHe=l(),hr=a("div"),F(nk.$$.fragment),QDr=l(),ef=a("p"),UDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ooe=a("a"),HDr=o("from_pretrained()"),JDr=o(" class method or the "),roe=a("a"),YDr=o("from_config()"),KDr=o(` class
method.`),ZDr=l(),sk=a("p"),eGr=o("This class cannot be instantiated directly using "),V0e=a("code"),oGr=o("__init__()"),rGr=o(" (throws an error)."),tGr=l(),Ut=a("div"),F(lk.$$.fragment),aGr=l(),X0e=a("p"),nGr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),sGr=l(),of=a("p"),lGr=o(`Note:
Loading a model from its configuration file does `),z0e=a("strong"),iGr=o("not"),dGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),toe=a("a"),cGr=o("from_pretrained()"),fGr=o(" to load the model weights."),mGr=l(),F(e0.$$.fragment),gGr=l(),Vr=a("div"),F(ik.$$.fragment),hGr=l(),W0e=a("p"),pGr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_Gr=l(),An=a("p"),uGr=o("The model class to instantiate is selected based on the "),Q0e=a("code"),bGr=o("model_type"),vGr=o(` property of the config object (either
passed as an argument or loaded from `),U0e=a("code"),FGr=o("pretrained_model_name_or_path"),TGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=a("code"),MGr=o("pretrained_model_name_or_path"),EGr=o(":"),CGr=l(),J0e=a("ul"),o0=a("li"),Y0e=a("strong"),wGr=o("tapas"),AGr=o(" \u2014 "),aoe=a("a"),LGr=o("TFTapasForQuestionAnswering"),yGr=o(" (TAPAS model)"),xGr=l(),F(r0.$$.fragment),wHe=l(),rf=a("h2"),t0=a("a"),K0e=a("span"),F(dk.$$.fragment),$Gr=l(),Z0e=a("span"),kGr=o("TFAutoModelForTokenClassification"),AHe=l(),pr=a("div"),F(ck.$$.fragment),SGr=l(),tf=a("p"),RGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),noe=a("a"),PGr=o("from_pretrained()"),BGr=o(" class method or the "),soe=a("a"),IGr=o("from_config()"),NGr=o(` class
method.`),qGr=l(),fk=a("p"),jGr=o("This class cannot be instantiated directly using "),ewe=a("code"),DGr=o("__init__()"),GGr=o(" (throws an error)."),OGr=l(),Ht=a("div"),F(mk.$$.fragment),VGr=l(),owe=a("p"),XGr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zGr=l(),af=a("p"),WGr=o(`Note:
Loading a model from its configuration file does `),rwe=a("strong"),QGr=o("not"),UGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),loe=a("a"),HGr=o("from_pretrained()"),JGr=o(" to load the model weights."),YGr=l(),F(a0.$$.fragment),KGr=l(),Xr=a("div"),F(gk.$$.fragment),ZGr=l(),twe=a("p"),eOr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),oOr=l(),Ln=a("p"),rOr=o("The model class to instantiate is selected based on the "),awe=a("code"),tOr=o("model_type"),aOr=o(` property of the config object (either
passed as an argument or loaded from `),nwe=a("code"),nOr=o("pretrained_model_name_or_path"),sOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),swe=a("code"),lOr=o("pretrained_model_name_or_path"),iOr=o(":"),dOr=l(),ce=a("ul"),n0=a("li"),lwe=a("strong"),cOr=o("albert"),fOr=o(" \u2014 "),ioe=a("a"),mOr=o("TFAlbertForTokenClassification"),gOr=o(" (ALBERT model)"),hOr=l(),s0=a("li"),iwe=a("strong"),pOr=o("bert"),_Or=o(" \u2014 "),doe=a("a"),uOr=o("TFBertForTokenClassification"),bOr=o(" (BERT model)"),vOr=l(),l0=a("li"),dwe=a("strong"),FOr=o("camembert"),TOr=o(" \u2014 "),coe=a("a"),MOr=o("TFCamembertForTokenClassification"),EOr=o(" (CamemBERT model)"),COr=l(),i0=a("li"),cwe=a("strong"),wOr=o("convbert"),AOr=o(" \u2014 "),foe=a("a"),LOr=o("TFConvBertForTokenClassification"),yOr=o(" (ConvBERT model)"),xOr=l(),d0=a("li"),fwe=a("strong"),$Or=o("deberta"),kOr=o(" \u2014 "),moe=a("a"),SOr=o("TFDebertaForTokenClassification"),ROr=o(" (DeBERTa model)"),POr=l(),c0=a("li"),mwe=a("strong"),BOr=o("deberta-v2"),IOr=o(" \u2014 "),goe=a("a"),NOr=o("TFDebertaV2ForTokenClassification"),qOr=o(" (DeBERTa-v2 model)"),jOr=l(),f0=a("li"),gwe=a("strong"),DOr=o("distilbert"),GOr=o(" \u2014 "),hoe=a("a"),OOr=o("TFDistilBertForTokenClassification"),VOr=o(" (DistilBERT model)"),XOr=l(),m0=a("li"),hwe=a("strong"),zOr=o("electra"),WOr=o(" \u2014 "),poe=a("a"),QOr=o("TFElectraForTokenClassification"),UOr=o(" (ELECTRA model)"),HOr=l(),g0=a("li"),pwe=a("strong"),JOr=o("flaubert"),YOr=o(" \u2014 "),_oe=a("a"),KOr=o("TFFlaubertForTokenClassification"),ZOr=o(" (FlauBERT model)"),eVr=l(),h0=a("li"),_we=a("strong"),oVr=o("funnel"),rVr=o(" \u2014 "),uoe=a("a"),tVr=o("TFFunnelForTokenClassification"),aVr=o(" (Funnel Transformer model)"),nVr=l(),p0=a("li"),uwe=a("strong"),sVr=o("layoutlm"),lVr=o(" \u2014 "),boe=a("a"),iVr=o("TFLayoutLMForTokenClassification"),dVr=o(" (LayoutLM model)"),cVr=l(),_0=a("li"),bwe=a("strong"),fVr=o("longformer"),mVr=o(" \u2014 "),voe=a("a"),gVr=o("TFLongformerForTokenClassification"),hVr=o(" (Longformer model)"),pVr=l(),u0=a("li"),vwe=a("strong"),_Vr=o("mobilebert"),uVr=o(" \u2014 "),Foe=a("a"),bVr=o("TFMobileBertForTokenClassification"),vVr=o(" (MobileBERT model)"),FVr=l(),b0=a("li"),Fwe=a("strong"),TVr=o("mpnet"),MVr=o(" \u2014 "),Toe=a("a"),EVr=o("TFMPNetForTokenClassification"),CVr=o(" (MPNet model)"),wVr=l(),v0=a("li"),Twe=a("strong"),AVr=o("rembert"),LVr=o(" \u2014 "),Moe=a("a"),yVr=o("TFRemBertForTokenClassification"),xVr=o(" (RemBERT model)"),$Vr=l(),F0=a("li"),Mwe=a("strong"),kVr=o("roberta"),SVr=o(" \u2014 "),Eoe=a("a"),RVr=o("TFRobertaForTokenClassification"),PVr=o(" (RoBERTa model)"),BVr=l(),T0=a("li"),Ewe=a("strong"),IVr=o("roformer"),NVr=o(" \u2014 "),Coe=a("a"),qVr=o("TFRoFormerForTokenClassification"),jVr=o(" (RoFormer model)"),DVr=l(),M0=a("li"),Cwe=a("strong"),GVr=o("xlm"),OVr=o(" \u2014 "),woe=a("a"),VVr=o("TFXLMForTokenClassification"),XVr=o(" (XLM model)"),zVr=l(),E0=a("li"),wwe=a("strong"),WVr=o("xlm-roberta"),QVr=o(" \u2014 "),Aoe=a("a"),UVr=o("TFXLMRobertaForTokenClassification"),HVr=o(" (XLM-RoBERTa model)"),JVr=l(),C0=a("li"),Awe=a("strong"),YVr=o("xlnet"),KVr=o(" \u2014 "),Loe=a("a"),ZVr=o("TFXLNetForTokenClassification"),eXr=o(" (XLNet model)"),oXr=l(),F(w0.$$.fragment),LHe=l(),nf=a("h2"),A0=a("a"),Lwe=a("span"),F(hk.$$.fragment),rXr=l(),ywe=a("span"),tXr=o("TFAutoModelForQuestionAnswering"),yHe=l(),_r=a("div"),F(pk.$$.fragment),aXr=l(),sf=a("p"),nXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yoe=a("a"),sXr=o("from_pretrained()"),lXr=o(" class method or the "),xoe=a("a"),iXr=o("from_config()"),dXr=o(` class
method.`),cXr=l(),_k=a("p"),fXr=o("This class cannot be instantiated directly using "),xwe=a("code"),mXr=o("__init__()"),gXr=o(" (throws an error)."),hXr=l(),Jt=a("div"),F(uk.$$.fragment),pXr=l(),$we=a("p"),_Xr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uXr=l(),lf=a("p"),bXr=o(`Note:
Loading a model from its configuration file does `),kwe=a("strong"),vXr=o("not"),FXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$oe=a("a"),TXr=o("from_pretrained()"),MXr=o(" to load the model weights."),EXr=l(),F(L0.$$.fragment),CXr=l(),zr=a("div"),F(bk.$$.fragment),wXr=l(),Swe=a("p"),AXr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),LXr=l(),yn=a("p"),yXr=o("The model class to instantiate is selected based on the "),Rwe=a("code"),xXr=o("model_type"),$Xr=o(` property of the config object (either
passed as an argument or loaded from `),Pwe=a("code"),kXr=o("pretrained_model_name_or_path"),SXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bwe=a("code"),RXr=o("pretrained_model_name_or_path"),PXr=o(":"),BXr=l(),fe=a("ul"),y0=a("li"),Iwe=a("strong"),IXr=o("albert"),NXr=o(" \u2014 "),koe=a("a"),qXr=o("TFAlbertForQuestionAnswering"),jXr=o(" (ALBERT model)"),DXr=l(),x0=a("li"),Nwe=a("strong"),GXr=o("bert"),OXr=o(" \u2014 "),Soe=a("a"),VXr=o("TFBertForQuestionAnswering"),XXr=o(" (BERT model)"),zXr=l(),$0=a("li"),qwe=a("strong"),WXr=o("camembert"),QXr=o(" \u2014 "),Roe=a("a"),UXr=o("TFCamembertForQuestionAnswering"),HXr=o(" (CamemBERT model)"),JXr=l(),k0=a("li"),jwe=a("strong"),YXr=o("convbert"),KXr=o(" \u2014 "),Poe=a("a"),ZXr=o("TFConvBertForQuestionAnswering"),ezr=o(" (ConvBERT model)"),ozr=l(),S0=a("li"),Dwe=a("strong"),rzr=o("deberta"),tzr=o(" \u2014 "),Boe=a("a"),azr=o("TFDebertaForQuestionAnswering"),nzr=o(" (DeBERTa model)"),szr=l(),R0=a("li"),Gwe=a("strong"),lzr=o("deberta-v2"),izr=o(" \u2014 "),Ioe=a("a"),dzr=o("TFDebertaV2ForQuestionAnswering"),czr=o(" (DeBERTa-v2 model)"),fzr=l(),P0=a("li"),Owe=a("strong"),mzr=o("distilbert"),gzr=o(" \u2014 "),Noe=a("a"),hzr=o("TFDistilBertForQuestionAnswering"),pzr=o(" (DistilBERT model)"),_zr=l(),B0=a("li"),Vwe=a("strong"),uzr=o("electra"),bzr=o(" \u2014 "),qoe=a("a"),vzr=o("TFElectraForQuestionAnswering"),Fzr=o(" (ELECTRA model)"),Tzr=l(),I0=a("li"),Xwe=a("strong"),Mzr=o("flaubert"),Ezr=o(" \u2014 "),joe=a("a"),Czr=o("TFFlaubertForQuestionAnsweringSimple"),wzr=o(" (FlauBERT model)"),Azr=l(),N0=a("li"),zwe=a("strong"),Lzr=o("funnel"),yzr=o(" \u2014 "),Doe=a("a"),xzr=o("TFFunnelForQuestionAnswering"),$zr=o(" (Funnel Transformer model)"),kzr=l(),q0=a("li"),Wwe=a("strong"),Szr=o("gptj"),Rzr=o(" \u2014 "),Goe=a("a"),Pzr=o("TFGPTJForQuestionAnswering"),Bzr=o(" (GPT-J model)"),Izr=l(),j0=a("li"),Qwe=a("strong"),Nzr=o("longformer"),qzr=o(" \u2014 "),Ooe=a("a"),jzr=o("TFLongformerForQuestionAnswering"),Dzr=o(" (Longformer model)"),Gzr=l(),D0=a("li"),Uwe=a("strong"),Ozr=o("mobilebert"),Vzr=o(" \u2014 "),Voe=a("a"),Xzr=o("TFMobileBertForQuestionAnswering"),zzr=o(" (MobileBERT model)"),Wzr=l(),G0=a("li"),Hwe=a("strong"),Qzr=o("mpnet"),Uzr=o(" \u2014 "),Xoe=a("a"),Hzr=o("TFMPNetForQuestionAnswering"),Jzr=o(" (MPNet model)"),Yzr=l(),O0=a("li"),Jwe=a("strong"),Kzr=o("rembert"),Zzr=o(" \u2014 "),zoe=a("a"),eWr=o("TFRemBertForQuestionAnswering"),oWr=o(" (RemBERT model)"),rWr=l(),V0=a("li"),Ywe=a("strong"),tWr=o("roberta"),aWr=o(" \u2014 "),Woe=a("a"),nWr=o("TFRobertaForQuestionAnswering"),sWr=o(" (RoBERTa model)"),lWr=l(),X0=a("li"),Kwe=a("strong"),iWr=o("roformer"),dWr=o(" \u2014 "),Qoe=a("a"),cWr=o("TFRoFormerForQuestionAnswering"),fWr=o(" (RoFormer model)"),mWr=l(),z0=a("li"),Zwe=a("strong"),gWr=o("xlm"),hWr=o(" \u2014 "),Uoe=a("a"),pWr=o("TFXLMForQuestionAnsweringSimple"),_Wr=o(" (XLM model)"),uWr=l(),W0=a("li"),eAe=a("strong"),bWr=o("xlm-roberta"),vWr=o(" \u2014 "),Hoe=a("a"),FWr=o("TFXLMRobertaForQuestionAnswering"),TWr=o(" (XLM-RoBERTa model)"),MWr=l(),Q0=a("li"),oAe=a("strong"),EWr=o("xlnet"),CWr=o(" \u2014 "),Joe=a("a"),wWr=o("TFXLNetForQuestionAnsweringSimple"),AWr=o(" (XLNet model)"),LWr=l(),F(U0.$$.fragment),xHe=l(),df=a("h2"),H0=a("a"),rAe=a("span"),F(vk.$$.fragment),yWr=l(),tAe=a("span"),xWr=o("TFAutoModelForVision2Seq"),$He=l(),ur=a("div"),F(Fk.$$.fragment),$Wr=l(),cf=a("p"),kWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Yoe=a("a"),SWr=o("from_pretrained()"),RWr=o(" class method or the "),Koe=a("a"),PWr=o("from_config()"),BWr=o(` class
method.`),IWr=l(),Tk=a("p"),NWr=o("This class cannot be instantiated directly using "),aAe=a("code"),qWr=o("__init__()"),jWr=o(" (throws an error)."),DWr=l(),Yt=a("div"),F(Mk.$$.fragment),GWr=l(),nAe=a("p"),OWr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),VWr=l(),ff=a("p"),XWr=o(`Note:
Loading a model from its configuration file does `),sAe=a("strong"),zWr=o("not"),WWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=a("a"),QWr=o("from_pretrained()"),UWr=o(" to load the model weights."),HWr=l(),F(J0.$$.fragment),JWr=l(),Wr=a("div"),F(Ek.$$.fragment),YWr=l(),lAe=a("p"),KWr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ZWr=l(),xn=a("p"),eQr=o("The model class to instantiate is selected based on the "),iAe=a("code"),oQr=o("model_type"),rQr=o(` property of the config object (either
passed as an argument or loaded from `),dAe=a("code"),tQr=o("pretrained_model_name_or_path"),aQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cAe=a("code"),nQr=o("pretrained_model_name_or_path"),sQr=o(":"),lQr=l(),fAe=a("ul"),Y0=a("li"),mAe=a("strong"),iQr=o("vision-encoder-decoder"),dQr=o(" \u2014 "),ere=a("a"),cQr=o("TFVisionEncoderDecoderModel"),fQr=o(" (Vision Encoder decoder model)"),mQr=l(),F(K0.$$.fragment),kHe=l(),mf=a("h2"),Z0=a("a"),gAe=a("span"),F(Ck.$$.fragment),gQr=l(),hAe=a("span"),hQr=o("TFAutoModelForSpeechSeq2Seq"),SHe=l(),br=a("div"),F(wk.$$.fragment),pQr=l(),gf=a("p"),_Qr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ore=a("a"),uQr=o("from_pretrained()"),bQr=o(" class method or the "),rre=a("a"),vQr=o("from_config()"),FQr=o(` class
method.`),TQr=l(),Ak=a("p"),MQr=o("This class cannot be instantiated directly using "),pAe=a("code"),EQr=o("__init__()"),CQr=o(" (throws an error)."),wQr=l(),Kt=a("div"),F(Lk.$$.fragment),AQr=l(),_Ae=a("p"),LQr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),yQr=l(),hf=a("p"),xQr=o(`Note:
Loading a model from its configuration file does `),uAe=a("strong"),$Qr=o("not"),kQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tre=a("a"),SQr=o("from_pretrained()"),RQr=o(" to load the model weights."),PQr=l(),F(ew.$$.fragment),BQr=l(),Qr=a("div"),F(yk.$$.fragment),IQr=l(),bAe=a("p"),NQr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),qQr=l(),$n=a("p"),jQr=o("The model class to instantiate is selected based on the "),vAe=a("code"),DQr=o("model_type"),GQr=o(` property of the config object (either
passed as an argument or loaded from `),FAe=a("code"),OQr=o("pretrained_model_name_or_path"),VQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TAe=a("code"),XQr=o("pretrained_model_name_or_path"),zQr=o(":"),WQr=l(),MAe=a("ul"),ow=a("li"),EAe=a("strong"),QQr=o("speech_to_text"),UQr=o(" \u2014 "),are=a("a"),HQr=o("TFSpeech2TextForConditionalGeneration"),JQr=o(" (Speech2Text model)"),YQr=l(),F(rw.$$.fragment),RHe=l(),pf=a("h2"),tw=a("a"),CAe=a("span"),F(xk.$$.fragment),KQr=l(),wAe=a("span"),ZQr=o("FlaxAutoModel"),PHe=l(),vr=a("div"),F($k.$$.fragment),eUr=l(),_f=a("p"),oUr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nre=a("a"),rUr=o("from_pretrained()"),tUr=o(" class method or the "),sre=a("a"),aUr=o("from_config()"),nUr=o(` class
method.`),sUr=l(),kk=a("p"),lUr=o("This class cannot be instantiated directly using "),AAe=a("code"),iUr=o("__init__()"),dUr=o(" (throws an error)."),cUr=l(),Zt=a("div"),F(Sk.$$.fragment),fUr=l(),LAe=a("p"),mUr=o("Instantiates one of the base model classes of the library from a configuration."),gUr=l(),uf=a("p"),hUr=o(`Note:
Loading a model from its configuration file does `),yAe=a("strong"),pUr=o("not"),_Ur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lre=a("a"),uUr=o("from_pretrained()"),bUr=o(" to load the model weights."),vUr=l(),F(aw.$$.fragment),FUr=l(),Ur=a("div"),F(Rk.$$.fragment),TUr=l(),xAe=a("p"),MUr=o("Instantiate one of the base model classes of the library from a pretrained model."),EUr=l(),kn=a("p"),CUr=o("The model class to instantiate is selected based on the "),$Ae=a("code"),wUr=o("model_type"),AUr=o(` property of the config object (either
passed as an argument or loaded from `),kAe=a("code"),LUr=o("pretrained_model_name_or_path"),yUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SAe=a("code"),xUr=o("pretrained_model_name_or_path"),$Ur=o(":"),kUr=l(),re=a("ul"),nw=a("li"),RAe=a("strong"),SUr=o("albert"),RUr=o(" \u2014 "),ire=a("a"),PUr=o("FlaxAlbertModel"),BUr=o(" (ALBERT model)"),IUr=l(),sw=a("li"),PAe=a("strong"),NUr=o("bart"),qUr=o(" \u2014 "),dre=a("a"),jUr=o("FlaxBartModel"),DUr=o(" (BART model)"),GUr=l(),lw=a("li"),BAe=a("strong"),OUr=o("beit"),VUr=o(" \u2014 "),cre=a("a"),XUr=o("FlaxBeitModel"),zUr=o(" (BEiT model)"),WUr=l(),iw=a("li"),IAe=a("strong"),QUr=o("bert"),UUr=o(" \u2014 "),fre=a("a"),HUr=o("FlaxBertModel"),JUr=o(" (BERT model)"),YUr=l(),dw=a("li"),NAe=a("strong"),KUr=o("big_bird"),ZUr=o(" \u2014 "),mre=a("a"),eHr=o("FlaxBigBirdModel"),oHr=o(" (BigBird model)"),rHr=l(),cw=a("li"),qAe=a("strong"),tHr=o("blenderbot"),aHr=o(" \u2014 "),gre=a("a"),nHr=o("FlaxBlenderbotModel"),sHr=o(" (Blenderbot model)"),lHr=l(),fw=a("li"),jAe=a("strong"),iHr=o("blenderbot-small"),dHr=o(" \u2014 "),hre=a("a"),cHr=o("FlaxBlenderbotSmallModel"),fHr=o(" (BlenderbotSmall model)"),mHr=l(),mw=a("li"),DAe=a("strong"),gHr=o("clip"),hHr=o(" \u2014 "),pre=a("a"),pHr=o("FlaxCLIPModel"),_Hr=o(" (CLIP model)"),uHr=l(),gw=a("li"),GAe=a("strong"),bHr=o("distilbert"),vHr=o(" \u2014 "),_re=a("a"),FHr=o("FlaxDistilBertModel"),THr=o(" (DistilBERT model)"),MHr=l(),hw=a("li"),OAe=a("strong"),EHr=o("electra"),CHr=o(" \u2014 "),ure=a("a"),wHr=o("FlaxElectraModel"),AHr=o(" (ELECTRA model)"),LHr=l(),pw=a("li"),VAe=a("strong"),yHr=o("gpt2"),xHr=o(" \u2014 "),bre=a("a"),$Hr=o("FlaxGPT2Model"),kHr=o(" (OpenAI GPT-2 model)"),SHr=l(),_w=a("li"),XAe=a("strong"),RHr=o("gpt_neo"),PHr=o(" \u2014 "),vre=a("a"),BHr=o("FlaxGPTNeoModel"),IHr=o(" (GPT Neo model)"),NHr=l(),uw=a("li"),zAe=a("strong"),qHr=o("gptj"),jHr=o(" \u2014 "),Fre=a("a"),DHr=o("FlaxGPTJModel"),GHr=o(" (GPT-J model)"),OHr=l(),bw=a("li"),WAe=a("strong"),VHr=o("longt5"),XHr=o(" \u2014 "),Tre=a("a"),zHr=o("FlaxLongT5Model"),WHr=o(" (LongT5 model)"),QHr=l(),vw=a("li"),QAe=a("strong"),UHr=o("marian"),HHr=o(" \u2014 "),Mre=a("a"),JHr=o("FlaxMarianModel"),YHr=o(" (Marian model)"),KHr=l(),Fw=a("li"),UAe=a("strong"),ZHr=o("mbart"),eJr=o(" \u2014 "),Ere=a("a"),oJr=o("FlaxMBartModel"),rJr=o(" (mBART model)"),tJr=l(),Tw=a("li"),HAe=a("strong"),aJr=o("mt5"),nJr=o(" \u2014 "),Cre=a("a"),sJr=o("FlaxMT5Model"),lJr=o(" (MT5 model)"),iJr=l(),Mw=a("li"),JAe=a("strong"),dJr=o("opt"),cJr=o(" \u2014 "),wre=a("a"),fJr=o("FlaxOPTModel"),mJr=o(" (OPT model)"),gJr=l(),Ew=a("li"),YAe=a("strong"),hJr=o("pegasus"),pJr=o(" \u2014 "),Are=a("a"),_Jr=o("FlaxPegasusModel"),uJr=o(" (Pegasus model)"),bJr=l(),Cw=a("li"),KAe=a("strong"),vJr=o("roberta"),FJr=o(" \u2014 "),Lre=a("a"),TJr=o("FlaxRobertaModel"),MJr=o(" (RoBERTa model)"),EJr=l(),ww=a("li"),ZAe=a("strong"),CJr=o("roformer"),wJr=o(" \u2014 "),yre=a("a"),AJr=o("FlaxRoFormerModel"),LJr=o(" (RoFormer model)"),yJr=l(),Aw=a("li"),e7e=a("strong"),xJr=o("t5"),$Jr=o(" \u2014 "),xre=a("a"),kJr=o("FlaxT5Model"),SJr=o(" (T5 model)"),RJr=l(),Lw=a("li"),o7e=a("strong"),PJr=o("vision-text-dual-encoder"),BJr=o(" \u2014 "),$re=a("a"),IJr=o("FlaxVisionTextDualEncoderModel"),NJr=o(" (VisionTextDualEncoder model)"),qJr=l(),yw=a("li"),r7e=a("strong"),jJr=o("vit"),DJr=o(" \u2014 "),kre=a("a"),GJr=o("FlaxViTModel"),OJr=o(" (ViT model)"),VJr=l(),xw=a("li"),t7e=a("strong"),XJr=o("wav2vec2"),zJr=o(" \u2014 "),Sre=a("a"),WJr=o("FlaxWav2Vec2Model"),QJr=o(" (Wav2Vec2 model)"),UJr=l(),$w=a("li"),a7e=a("strong"),HJr=o("xglm"),JJr=o(" \u2014 "),Rre=a("a"),YJr=o("FlaxXGLMModel"),KJr=o(" (XGLM model)"),ZJr=l(),kw=a("li"),n7e=a("strong"),eYr=o("xlm-roberta"),oYr=o(" \u2014 "),Pre=a("a"),rYr=o("FlaxXLMRobertaModel"),tYr=o(" (XLM-RoBERTa model)"),aYr=l(),F(Sw.$$.fragment),BHe=l(),bf=a("h2"),Rw=a("a"),s7e=a("span"),F(Pk.$$.fragment),nYr=l(),l7e=a("span"),sYr=o("FlaxAutoModelForCausalLM"),IHe=l(),Fr=a("div"),F(Bk.$$.fragment),lYr=l(),vf=a("p"),iYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Bre=a("a"),dYr=o("from_pretrained()"),cYr=o(" class method or the "),Ire=a("a"),fYr=o("from_config()"),mYr=o(` class
method.`),gYr=l(),Ik=a("p"),hYr=o("This class cannot be instantiated directly using "),i7e=a("code"),pYr=o("__init__()"),_Yr=o(" (throws an error)."),uYr=l(),ea=a("div"),F(Nk.$$.fragment),bYr=l(),d7e=a("p"),vYr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FYr=l(),Ff=a("p"),TYr=o(`Note:
Loading a model from its configuration file does `),c7e=a("strong"),MYr=o("not"),EYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nre=a("a"),CYr=o("from_pretrained()"),wYr=o(" to load the model weights."),AYr=l(),F(Pw.$$.fragment),LYr=l(),Hr=a("div"),F(qk.$$.fragment),yYr=l(),f7e=a("p"),xYr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Yr=l(),Sn=a("p"),kYr=o("The model class to instantiate is selected based on the "),m7e=a("code"),SYr=o("model_type"),RYr=o(` property of the config object (either
passed as an argument or loaded from `),g7e=a("code"),PYr=o("pretrained_model_name_or_path"),BYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h7e=a("code"),IYr=o("pretrained_model_name_or_path"),NYr=o(":"),qYr=l(),xe=a("ul"),Bw=a("li"),p7e=a("strong"),jYr=o("bart"),DYr=o(" \u2014 "),qre=a("a"),GYr=o("FlaxBartForCausalLM"),OYr=o(" (BART model)"),VYr=l(),Iw=a("li"),_7e=a("strong"),XYr=o("bert"),zYr=o(" \u2014 "),jre=a("a"),WYr=o("FlaxBertForCausalLM"),QYr=o(" (BERT model)"),UYr=l(),Nw=a("li"),u7e=a("strong"),HYr=o("big_bird"),JYr=o(" \u2014 "),Dre=a("a"),YYr=o("FlaxBigBirdForCausalLM"),KYr=o(" (BigBird model)"),ZYr=l(),qw=a("li"),b7e=a("strong"),eKr=o("electra"),oKr=o(" \u2014 "),Gre=a("a"),rKr=o("FlaxElectraForCausalLM"),tKr=o(" (ELECTRA model)"),aKr=l(),jw=a("li"),v7e=a("strong"),nKr=o("gpt2"),sKr=o(" \u2014 "),Ore=a("a"),lKr=o("FlaxGPT2LMHeadModel"),iKr=o(" (OpenAI GPT-2 model)"),dKr=l(),Dw=a("li"),F7e=a("strong"),cKr=o("gpt_neo"),fKr=o(" \u2014 "),Vre=a("a"),mKr=o("FlaxGPTNeoForCausalLM"),gKr=o(" (GPT Neo model)"),hKr=l(),Gw=a("li"),T7e=a("strong"),pKr=o("gptj"),_Kr=o(" \u2014 "),Xre=a("a"),uKr=o("FlaxGPTJForCausalLM"),bKr=o(" (GPT-J model)"),vKr=l(),Ow=a("li"),M7e=a("strong"),FKr=o("opt"),TKr=o(" \u2014 "),zre=a("a"),MKr=o("FlaxOPTForCausalLM"),EKr=o(" (OPT model)"),CKr=l(),Vw=a("li"),E7e=a("strong"),wKr=o("roberta"),AKr=o(" \u2014 "),Wre=a("a"),LKr=o("FlaxRobertaForCausalLM"),yKr=o(" (RoBERTa model)"),xKr=l(),Xw=a("li"),C7e=a("strong"),$Kr=o("xglm"),kKr=o(" \u2014 "),Qre=a("a"),SKr=o("FlaxXGLMForCausalLM"),RKr=o(" (XGLM model)"),PKr=l(),F(zw.$$.fragment),NHe=l(),Tf=a("h2"),Ww=a("a"),w7e=a("span"),F(jk.$$.fragment),BKr=l(),A7e=a("span"),IKr=o("FlaxAutoModelForPreTraining"),qHe=l(),Tr=a("div"),F(Dk.$$.fragment),NKr=l(),Mf=a("p"),qKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Ure=a("a"),jKr=o("from_pretrained()"),DKr=o(" class method or the "),Hre=a("a"),GKr=o("from_config()"),OKr=o(` class
method.`),VKr=l(),Gk=a("p"),XKr=o("This class cannot be instantiated directly using "),L7e=a("code"),zKr=o("__init__()"),WKr=o(" (throws an error)."),QKr=l(),oa=a("div"),F(Ok.$$.fragment),UKr=l(),y7e=a("p"),HKr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),JKr=l(),Ef=a("p"),YKr=o(`Note:
Loading a model from its configuration file does `),x7e=a("strong"),KKr=o("not"),ZKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jre=a("a"),eZr=o("from_pretrained()"),oZr=o(" to load the model weights."),rZr=l(),F(Qw.$$.fragment),tZr=l(),Jr=a("div"),F(Vk.$$.fragment),aZr=l(),$7e=a("p"),nZr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sZr=l(),Rn=a("p"),lZr=o("The model class to instantiate is selected based on the "),k7e=a("code"),iZr=o("model_type"),dZr=o(` property of the config object (either
passed as an argument or loaded from `),S7e=a("code"),cZr=o("pretrained_model_name_or_path"),fZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R7e=a("code"),mZr=o("pretrained_model_name_or_path"),gZr=o(":"),hZr=l(),Ee=a("ul"),Uw=a("li"),P7e=a("strong"),pZr=o("albert"),_Zr=o(" \u2014 "),Yre=a("a"),uZr=o("FlaxAlbertForPreTraining"),bZr=o(" (ALBERT model)"),vZr=l(),Hw=a("li"),B7e=a("strong"),FZr=o("bart"),TZr=o(" \u2014 "),Kre=a("a"),MZr=o("FlaxBartForConditionalGeneration"),EZr=o(" (BART model)"),CZr=l(),Jw=a("li"),I7e=a("strong"),wZr=o("bert"),AZr=o(" \u2014 "),Zre=a("a"),LZr=o("FlaxBertForPreTraining"),yZr=o(" (BERT model)"),xZr=l(),Yw=a("li"),N7e=a("strong"),$Zr=o("big_bird"),kZr=o(" \u2014 "),ete=a("a"),SZr=o("FlaxBigBirdForPreTraining"),RZr=o(" (BigBird model)"),PZr=l(),Kw=a("li"),q7e=a("strong"),BZr=o("electra"),IZr=o(" \u2014 "),ote=a("a"),NZr=o("FlaxElectraForPreTraining"),qZr=o(" (ELECTRA model)"),jZr=l(),Zw=a("li"),j7e=a("strong"),DZr=o("longt5"),GZr=o(" \u2014 "),rte=a("a"),OZr=o("FlaxLongT5ForConditionalGeneration"),VZr=o(" (LongT5 model)"),XZr=l(),eA=a("li"),D7e=a("strong"),zZr=o("mbart"),WZr=o(" \u2014 "),tte=a("a"),QZr=o("FlaxMBartForConditionalGeneration"),UZr=o(" (mBART model)"),HZr=l(),oA=a("li"),G7e=a("strong"),JZr=o("mt5"),YZr=o(" \u2014 "),ate=a("a"),KZr=o("FlaxMT5ForConditionalGeneration"),ZZr=o(" (MT5 model)"),eet=l(),rA=a("li"),O7e=a("strong"),oet=o("roberta"),ret=o(" \u2014 "),nte=a("a"),tet=o("FlaxRobertaForMaskedLM"),aet=o(" (RoBERTa model)"),net=l(),tA=a("li"),V7e=a("strong"),set=o("roformer"),iet=o(" \u2014 "),ste=a("a"),det=o("FlaxRoFormerForMaskedLM"),cet=o(" (RoFormer model)"),fet=l(),aA=a("li"),X7e=a("strong"),met=o("t5"),get=o(" \u2014 "),lte=a("a"),het=o("FlaxT5ForConditionalGeneration"),pet=o(" (T5 model)"),_et=l(),nA=a("li"),z7e=a("strong"),uet=o("wav2vec2"),bet=o(" \u2014 "),ite=a("a"),vet=o("FlaxWav2Vec2ForPreTraining"),Fet=o(" (Wav2Vec2 model)"),Tet=l(),sA=a("li"),W7e=a("strong"),Met=o("xlm-roberta"),Eet=o(" \u2014 "),dte=a("a"),Cet=o("FlaxXLMRobertaForMaskedLM"),wet=o(" (XLM-RoBERTa model)"),Aet=l(),F(lA.$$.fragment),jHe=l(),Cf=a("h2"),iA=a("a"),Q7e=a("span"),F(Xk.$$.fragment),Let=l(),U7e=a("span"),yet=o("FlaxAutoModelForMaskedLM"),DHe=l(),Mr=a("div"),F(zk.$$.fragment),xet=l(),wf=a("p"),$et=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cte=a("a"),ket=o("from_pretrained()"),Set=o(" class method or the "),fte=a("a"),Ret=o("from_config()"),Pet=o(` class
method.`),Bet=l(),Wk=a("p"),Iet=o("This class cannot be instantiated directly using "),H7e=a("code"),Net=o("__init__()"),qet=o(" (throws an error)."),jet=l(),ra=a("div"),F(Qk.$$.fragment),Det=l(),J7e=a("p"),Get=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Oet=l(),Af=a("p"),Vet=o(`Note:
Loading a model from its configuration file does `),Y7e=a("strong"),Xet=o("not"),zet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mte=a("a"),Wet=o("from_pretrained()"),Qet=o(" to load the model weights."),Uet=l(),F(dA.$$.fragment),Het=l(),Yr=a("div"),F(Uk.$$.fragment),Jet=l(),K7e=a("p"),Yet=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ket=l(),Pn=a("p"),Zet=o("The model class to instantiate is selected based on the "),Z7e=a("code"),eot=o("model_type"),oot=o(` property of the config object (either
passed as an argument or loaded from `),eLe=a("code"),rot=o("pretrained_model_name_or_path"),tot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oLe=a("code"),aot=o("pretrained_model_name_or_path"),not=o(":"),sot=l(),$e=a("ul"),cA=a("li"),rLe=a("strong"),lot=o("albert"),iot=o(" \u2014 "),gte=a("a"),dot=o("FlaxAlbertForMaskedLM"),cot=o(" (ALBERT model)"),fot=l(),fA=a("li"),tLe=a("strong"),mot=o("bart"),got=o(" \u2014 "),hte=a("a"),hot=o("FlaxBartForConditionalGeneration"),pot=o(" (BART model)"),_ot=l(),mA=a("li"),aLe=a("strong"),uot=o("bert"),bot=o(" \u2014 "),pte=a("a"),vot=o("FlaxBertForMaskedLM"),Fot=o(" (BERT model)"),Tot=l(),gA=a("li"),nLe=a("strong"),Mot=o("big_bird"),Eot=o(" \u2014 "),_te=a("a"),Cot=o("FlaxBigBirdForMaskedLM"),wot=o(" (BigBird model)"),Aot=l(),hA=a("li"),sLe=a("strong"),Lot=o("distilbert"),yot=o(" \u2014 "),ute=a("a"),xot=o("FlaxDistilBertForMaskedLM"),$ot=o(" (DistilBERT model)"),kot=l(),pA=a("li"),lLe=a("strong"),Sot=o("electra"),Rot=o(" \u2014 "),bte=a("a"),Pot=o("FlaxElectraForMaskedLM"),Bot=o(" (ELECTRA model)"),Iot=l(),_A=a("li"),iLe=a("strong"),Not=o("mbart"),qot=o(" \u2014 "),vte=a("a"),jot=o("FlaxMBartForConditionalGeneration"),Dot=o(" (mBART model)"),Got=l(),uA=a("li"),dLe=a("strong"),Oot=o("roberta"),Vot=o(" \u2014 "),Fte=a("a"),Xot=o("FlaxRobertaForMaskedLM"),zot=o(" (RoBERTa model)"),Wot=l(),bA=a("li"),cLe=a("strong"),Qot=o("roformer"),Uot=o(" \u2014 "),Tte=a("a"),Hot=o("FlaxRoFormerForMaskedLM"),Jot=o(" (RoFormer model)"),Yot=l(),vA=a("li"),fLe=a("strong"),Kot=o("xlm-roberta"),Zot=o(" \u2014 "),Mte=a("a"),ert=o("FlaxXLMRobertaForMaskedLM"),ort=o(" (XLM-RoBERTa model)"),rrt=l(),F(FA.$$.fragment),GHe=l(),Lf=a("h2"),TA=a("a"),mLe=a("span"),F(Hk.$$.fragment),trt=l(),gLe=a("span"),art=o("FlaxAutoModelForSeq2SeqLM"),OHe=l(),Er=a("div"),F(Jk.$$.fragment),nrt=l(),yf=a("p"),srt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ete=a("a"),lrt=o("from_pretrained()"),irt=o(" class method or the "),Cte=a("a"),drt=o("from_config()"),crt=o(` class
method.`),frt=l(),Yk=a("p"),mrt=o("This class cannot be instantiated directly using "),hLe=a("code"),grt=o("__init__()"),hrt=o(" (throws an error)."),prt=l(),ta=a("div"),F(Kk.$$.fragment),_rt=l(),pLe=a("p"),urt=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),brt=l(),xf=a("p"),vrt=o(`Note:
Loading a model from its configuration file does `),_Le=a("strong"),Frt=o("not"),Trt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wte=a("a"),Mrt=o("from_pretrained()"),Ert=o(" to load the model weights."),Crt=l(),F(MA.$$.fragment),wrt=l(),Kr=a("div"),F(Zk.$$.fragment),Art=l(),uLe=a("p"),Lrt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yrt=l(),Bn=a("p"),xrt=o("The model class to instantiate is selected based on the "),bLe=a("code"),$rt=o("model_type"),krt=o(` property of the config object (either
passed as an argument or loaded from `),vLe=a("code"),Srt=o("pretrained_model_name_or_path"),Rrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FLe=a("code"),Prt=o("pretrained_model_name_or_path"),Brt=o(":"),Irt=l(),ke=a("ul"),EA=a("li"),TLe=a("strong"),Nrt=o("bart"),qrt=o(" \u2014 "),Ate=a("a"),jrt=o("FlaxBartForConditionalGeneration"),Drt=o(" (BART model)"),Grt=l(),CA=a("li"),MLe=a("strong"),Ort=o("blenderbot"),Vrt=o(" \u2014 "),Lte=a("a"),Xrt=o("FlaxBlenderbotForConditionalGeneration"),zrt=o(" (Blenderbot model)"),Wrt=l(),wA=a("li"),ELe=a("strong"),Qrt=o("blenderbot-small"),Urt=o(" \u2014 "),yte=a("a"),Hrt=o("FlaxBlenderbotSmallForConditionalGeneration"),Jrt=o(" (BlenderbotSmall model)"),Yrt=l(),AA=a("li"),CLe=a("strong"),Krt=o("encoder-decoder"),Zrt=o(" \u2014 "),xte=a("a"),ett=o("FlaxEncoderDecoderModel"),ott=o(" (Encoder decoder model)"),rtt=l(),LA=a("li"),wLe=a("strong"),ttt=o("longt5"),att=o(" \u2014 "),$te=a("a"),ntt=o("FlaxLongT5ForConditionalGeneration"),stt=o(" (LongT5 model)"),ltt=l(),yA=a("li"),ALe=a("strong"),itt=o("marian"),dtt=o(" \u2014 "),kte=a("a"),ctt=o("FlaxMarianMTModel"),ftt=o(" (Marian model)"),mtt=l(),xA=a("li"),LLe=a("strong"),gtt=o("mbart"),htt=o(" \u2014 "),Ste=a("a"),ptt=o("FlaxMBartForConditionalGeneration"),_tt=o(" (mBART model)"),utt=l(),$A=a("li"),yLe=a("strong"),btt=o("mt5"),vtt=o(" \u2014 "),Rte=a("a"),Ftt=o("FlaxMT5ForConditionalGeneration"),Ttt=o(" (MT5 model)"),Mtt=l(),kA=a("li"),xLe=a("strong"),Ett=o("pegasus"),Ctt=o(" \u2014 "),Pte=a("a"),wtt=o("FlaxPegasusForConditionalGeneration"),Att=o(" (Pegasus model)"),Ltt=l(),SA=a("li"),$Le=a("strong"),ytt=o("t5"),xtt=o(" \u2014 "),Bte=a("a"),$tt=o("FlaxT5ForConditionalGeneration"),ktt=o(" (T5 model)"),Stt=l(),F(RA.$$.fragment),VHe=l(),$f=a("h2"),PA=a("a"),kLe=a("span"),F(eS.$$.fragment),Rtt=l(),SLe=a("span"),Ptt=o("FlaxAutoModelForSequenceClassification"),XHe=l(),Cr=a("div"),F(oS.$$.fragment),Btt=l(),kf=a("p"),Itt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ite=a("a"),Ntt=o("from_pretrained()"),qtt=o(" class method or the "),Nte=a("a"),jtt=o("from_config()"),Dtt=o(` class
method.`),Gtt=l(),rS=a("p"),Ott=o("This class cannot be instantiated directly using "),RLe=a("code"),Vtt=o("__init__()"),Xtt=o(" (throws an error)."),ztt=l(),aa=a("div"),F(tS.$$.fragment),Wtt=l(),PLe=a("p"),Qtt=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Utt=l(),Sf=a("p"),Htt=o(`Note:
Loading a model from its configuration file does `),BLe=a("strong"),Jtt=o("not"),Ytt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qte=a("a"),Ktt=o("from_pretrained()"),Ztt=o(" to load the model weights."),eat=l(),F(BA.$$.fragment),oat=l(),Zr=a("div"),F(aS.$$.fragment),rat=l(),ILe=a("p"),tat=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),aat=l(),In=a("p"),nat=o("The model class to instantiate is selected based on the "),NLe=a("code"),sat=o("model_type"),lat=o(` property of the config object (either
passed as an argument or loaded from `),qLe=a("code"),iat=o("pretrained_model_name_or_path"),dat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jLe=a("code"),cat=o("pretrained_model_name_or_path"),fat=o(":"),mat=l(),Se=a("ul"),IA=a("li"),DLe=a("strong"),gat=o("albert"),hat=o(" \u2014 "),jte=a("a"),pat=o("FlaxAlbertForSequenceClassification"),_at=o(" (ALBERT model)"),uat=l(),NA=a("li"),GLe=a("strong"),bat=o("bart"),vat=o(" \u2014 "),Dte=a("a"),Fat=o("FlaxBartForSequenceClassification"),Tat=o(" (BART model)"),Mat=l(),qA=a("li"),OLe=a("strong"),Eat=o("bert"),Cat=o(" \u2014 "),Gte=a("a"),wat=o("FlaxBertForSequenceClassification"),Aat=o(" (BERT model)"),Lat=l(),jA=a("li"),VLe=a("strong"),yat=o("big_bird"),xat=o(" \u2014 "),Ote=a("a"),$at=o("FlaxBigBirdForSequenceClassification"),kat=o(" (BigBird model)"),Sat=l(),DA=a("li"),XLe=a("strong"),Rat=o("distilbert"),Pat=o(" \u2014 "),Vte=a("a"),Bat=o("FlaxDistilBertForSequenceClassification"),Iat=o(" (DistilBERT model)"),Nat=l(),GA=a("li"),zLe=a("strong"),qat=o("electra"),jat=o(" \u2014 "),Xte=a("a"),Dat=o("FlaxElectraForSequenceClassification"),Gat=o(" (ELECTRA model)"),Oat=l(),OA=a("li"),WLe=a("strong"),Vat=o("mbart"),Xat=o(" \u2014 "),zte=a("a"),zat=o("FlaxMBartForSequenceClassification"),Wat=o(" (mBART model)"),Qat=l(),VA=a("li"),QLe=a("strong"),Uat=o("roberta"),Hat=o(" \u2014 "),Wte=a("a"),Jat=o("FlaxRobertaForSequenceClassification"),Yat=o(" (RoBERTa model)"),Kat=l(),XA=a("li"),ULe=a("strong"),Zat=o("roformer"),ent=o(" \u2014 "),Qte=a("a"),ont=o("FlaxRoFormerForSequenceClassification"),rnt=o(" (RoFormer model)"),tnt=l(),zA=a("li"),HLe=a("strong"),ant=o("xlm-roberta"),nnt=o(" \u2014 "),Ute=a("a"),snt=o("FlaxXLMRobertaForSequenceClassification"),lnt=o(" (XLM-RoBERTa model)"),int=l(),F(WA.$$.fragment),zHe=l(),Rf=a("h2"),QA=a("a"),JLe=a("span"),F(nS.$$.fragment),dnt=l(),YLe=a("span"),cnt=o("FlaxAutoModelForQuestionAnswering"),WHe=l(),wr=a("div"),F(sS.$$.fragment),fnt=l(),Pf=a("p"),mnt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Hte=a("a"),gnt=o("from_pretrained()"),hnt=o(" class method or the "),Jte=a("a"),pnt=o("from_config()"),_nt=o(` class
method.`),unt=l(),lS=a("p"),bnt=o("This class cannot be instantiated directly using "),KLe=a("code"),vnt=o("__init__()"),Fnt=o(" (throws an error)."),Tnt=l(),na=a("div"),F(iS.$$.fragment),Mnt=l(),ZLe=a("p"),Ent=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Cnt=l(),Bf=a("p"),wnt=o(`Note:
Loading a model from its configuration file does `),eye=a("strong"),Ant=o("not"),Lnt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yte=a("a"),ynt=o("from_pretrained()"),xnt=o(" to load the model weights."),$nt=l(),F(UA.$$.fragment),knt=l(),et=a("div"),F(dS.$$.fragment),Snt=l(),oye=a("p"),Rnt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Pnt=l(),Nn=a("p"),Bnt=o("The model class to instantiate is selected based on the "),rye=a("code"),Int=o("model_type"),Nnt=o(` property of the config object (either
passed as an argument or loaded from `),tye=a("code"),qnt=o("pretrained_model_name_or_path"),jnt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aye=a("code"),Dnt=o("pretrained_model_name_or_path"),Gnt=o(":"),Ont=l(),Re=a("ul"),HA=a("li"),nye=a("strong"),Vnt=o("albert"),Xnt=o(" \u2014 "),Kte=a("a"),znt=o("FlaxAlbertForQuestionAnswering"),Wnt=o(" (ALBERT model)"),Qnt=l(),JA=a("li"),sye=a("strong"),Unt=o("bart"),Hnt=o(" \u2014 "),Zte=a("a"),Jnt=o("FlaxBartForQuestionAnswering"),Ynt=o(" (BART model)"),Knt=l(),YA=a("li"),lye=a("strong"),Znt=o("bert"),est=o(" \u2014 "),eae=a("a"),ost=o("FlaxBertForQuestionAnswering"),rst=o(" (BERT model)"),tst=l(),KA=a("li"),iye=a("strong"),ast=o("big_bird"),nst=o(" \u2014 "),oae=a("a"),sst=o("FlaxBigBirdForQuestionAnswering"),lst=o(" (BigBird model)"),ist=l(),ZA=a("li"),dye=a("strong"),dst=o("distilbert"),cst=o(" \u2014 "),rae=a("a"),fst=o("FlaxDistilBertForQuestionAnswering"),mst=o(" (DistilBERT model)"),gst=l(),e7=a("li"),cye=a("strong"),hst=o("electra"),pst=o(" \u2014 "),tae=a("a"),_st=o("FlaxElectraForQuestionAnswering"),ust=o(" (ELECTRA model)"),bst=l(),o7=a("li"),fye=a("strong"),vst=o("mbart"),Fst=o(" \u2014 "),aae=a("a"),Tst=o("FlaxMBartForQuestionAnswering"),Mst=o(" (mBART model)"),Est=l(),r7=a("li"),mye=a("strong"),Cst=o("roberta"),wst=o(" \u2014 "),nae=a("a"),Ast=o("FlaxRobertaForQuestionAnswering"),Lst=o(" (RoBERTa model)"),yst=l(),t7=a("li"),gye=a("strong"),xst=o("roformer"),$st=o(" \u2014 "),sae=a("a"),kst=o("FlaxRoFormerForQuestionAnswering"),Sst=o(" (RoFormer model)"),Rst=l(),a7=a("li"),hye=a("strong"),Pst=o("xlm-roberta"),Bst=o(" \u2014 "),lae=a("a"),Ist=o("FlaxXLMRobertaForQuestionAnswering"),Nst=o(" (XLM-RoBERTa model)"),qst=l(),F(n7.$$.fragment),QHe=l(),If=a("h2"),s7=a("a"),pye=a("span"),F(cS.$$.fragment),jst=l(),_ye=a("span"),Dst=o("FlaxAutoModelForTokenClassification"),UHe=l(),Ar=a("div"),F(fS.$$.fragment),Gst=l(),Nf=a("p"),Ost=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),iae=a("a"),Vst=o("from_pretrained()"),Xst=o(" class method or the "),dae=a("a"),zst=o("from_config()"),Wst=o(` class
method.`),Qst=l(),mS=a("p"),Ust=o("This class cannot be instantiated directly using "),uye=a("code"),Hst=o("__init__()"),Jst=o(" (throws an error)."),Yst=l(),sa=a("div"),F(gS.$$.fragment),Kst=l(),bye=a("p"),Zst=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),elt=l(),qf=a("p"),olt=o(`Note:
Loading a model from its configuration file does `),vye=a("strong"),rlt=o("not"),tlt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cae=a("a"),alt=o("from_pretrained()"),nlt=o(" to load the model weights."),slt=l(),F(l7.$$.fragment),llt=l(),ot=a("div"),F(hS.$$.fragment),ilt=l(),Fye=a("p"),dlt=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),clt=l(),qn=a("p"),flt=o("The model class to instantiate is selected based on the "),Tye=a("code"),mlt=o("model_type"),glt=o(` property of the config object (either
passed as an argument or loaded from `),Mye=a("code"),hlt=o("pretrained_model_name_or_path"),plt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eye=a("code"),_lt=o("pretrained_model_name_or_path"),ult=o(":"),blt=l(),Xe=a("ul"),i7=a("li"),Cye=a("strong"),vlt=o("albert"),Flt=o(" \u2014 "),fae=a("a"),Tlt=o("FlaxAlbertForTokenClassification"),Mlt=o(" (ALBERT model)"),Elt=l(),d7=a("li"),wye=a("strong"),Clt=o("bert"),wlt=o(" \u2014 "),mae=a("a"),Alt=o("FlaxBertForTokenClassification"),Llt=o(" (BERT model)"),ylt=l(),c7=a("li"),Aye=a("strong"),xlt=o("big_bird"),$lt=o(" \u2014 "),gae=a("a"),klt=o("FlaxBigBirdForTokenClassification"),Slt=o(" (BigBird model)"),Rlt=l(),f7=a("li"),Lye=a("strong"),Plt=o("distilbert"),Blt=o(" \u2014 "),hae=a("a"),Ilt=o("FlaxDistilBertForTokenClassification"),Nlt=o(" (DistilBERT model)"),qlt=l(),m7=a("li"),yye=a("strong"),jlt=o("electra"),Dlt=o(" \u2014 "),pae=a("a"),Glt=o("FlaxElectraForTokenClassification"),Olt=o(" (ELECTRA model)"),Vlt=l(),g7=a("li"),xye=a("strong"),Xlt=o("roberta"),zlt=o(" \u2014 "),_ae=a("a"),Wlt=o("FlaxRobertaForTokenClassification"),Qlt=o(" (RoBERTa model)"),Ult=l(),h7=a("li"),$ye=a("strong"),Hlt=o("roformer"),Jlt=o(" \u2014 "),uae=a("a"),Ylt=o("FlaxRoFormerForTokenClassification"),Klt=o(" (RoFormer model)"),Zlt=l(),p7=a("li"),kye=a("strong"),eit=o("xlm-roberta"),oit=o(" \u2014 "),bae=a("a"),rit=o("FlaxXLMRobertaForTokenClassification"),tit=o(" (XLM-RoBERTa model)"),ait=l(),F(_7.$$.fragment),HHe=l(),jf=a("h2"),u7=a("a"),Sye=a("span"),F(pS.$$.fragment),nit=l(),Rye=a("span"),sit=o("FlaxAutoModelForMultipleChoice"),JHe=l(),Lr=a("div"),F(_S.$$.fragment),lit=l(),Df=a("p"),iit=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vae=a("a"),dit=o("from_pretrained()"),cit=o(" class method or the "),Fae=a("a"),fit=o("from_config()"),mit=o(` class
method.`),git=l(),uS=a("p"),hit=o("This class cannot be instantiated directly using "),Pye=a("code"),pit=o("__init__()"),_it=o(" (throws an error)."),uit=l(),la=a("div"),F(bS.$$.fragment),bit=l(),Bye=a("p"),vit=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Fit=l(),Gf=a("p"),Tit=o(`Note:
Loading a model from its configuration file does `),Iye=a("strong"),Mit=o("not"),Eit=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tae=a("a"),Cit=o("from_pretrained()"),wit=o(" to load the model weights."),Ait=l(),F(b7.$$.fragment),Lit=l(),rt=a("div"),F(vS.$$.fragment),yit=l(),Nye=a("p"),xit=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$it=l(),jn=a("p"),kit=o("The model class to instantiate is selected based on the "),qye=a("code"),Sit=o("model_type"),Rit=o(` property of the config object (either
passed as an argument or loaded from `),jye=a("code"),Pit=o("pretrained_model_name_or_path"),Bit=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dye=a("code"),Iit=o("pretrained_model_name_or_path"),Nit=o(":"),qit=l(),ze=a("ul"),v7=a("li"),Gye=a("strong"),jit=o("albert"),Dit=o(" \u2014 "),Mae=a("a"),Git=o("FlaxAlbertForMultipleChoice"),Oit=o(" (ALBERT model)"),Vit=l(),F7=a("li"),Oye=a("strong"),Xit=o("bert"),zit=o(" \u2014 "),Eae=a("a"),Wit=o("FlaxBertForMultipleChoice"),Qit=o(" (BERT model)"),Uit=l(),T7=a("li"),Vye=a("strong"),Hit=o("big_bird"),Jit=o(" \u2014 "),Cae=a("a"),Yit=o("FlaxBigBirdForMultipleChoice"),Kit=o(" (BigBird model)"),Zit=l(),M7=a("li"),Xye=a("strong"),edt=o("distilbert"),odt=o(" \u2014 "),wae=a("a"),rdt=o("FlaxDistilBertForMultipleChoice"),tdt=o(" (DistilBERT model)"),adt=l(),E7=a("li"),zye=a("strong"),ndt=o("electra"),sdt=o(" \u2014 "),Aae=a("a"),ldt=o("FlaxElectraForMultipleChoice"),idt=o(" (ELECTRA model)"),ddt=l(),C7=a("li"),Wye=a("strong"),cdt=o("roberta"),fdt=o(" \u2014 "),Lae=a("a"),mdt=o("FlaxRobertaForMultipleChoice"),gdt=o(" (RoBERTa model)"),hdt=l(),w7=a("li"),Qye=a("strong"),pdt=o("roformer"),_dt=o(" \u2014 "),yae=a("a"),udt=o("FlaxRoFormerForMultipleChoice"),bdt=o(" (RoFormer model)"),vdt=l(),A7=a("li"),Uye=a("strong"),Fdt=o("xlm-roberta"),Tdt=o(" \u2014 "),xae=a("a"),Mdt=o("FlaxXLMRobertaForMultipleChoice"),Edt=o(" (XLM-RoBERTa model)"),Cdt=l(),F(L7.$$.fragment),YHe=l(),Of=a("h2"),y7=a("a"),Hye=a("span"),F(FS.$$.fragment),wdt=l(),Jye=a("span"),Adt=o("FlaxAutoModelForNextSentencePrediction"),KHe=l(),yr=a("div"),F(TS.$$.fragment),Ldt=l(),Vf=a("p"),ydt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$ae=a("a"),xdt=o("from_pretrained()"),$dt=o(" class method or the "),kae=a("a"),kdt=o("from_config()"),Sdt=o(` class
method.`),Rdt=l(),MS=a("p"),Pdt=o("This class cannot be instantiated directly using "),Yye=a("code"),Bdt=o("__init__()"),Idt=o(" (throws an error)."),Ndt=l(),ia=a("div"),F(ES.$$.fragment),qdt=l(),Kye=a("p"),jdt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ddt=l(),Xf=a("p"),Gdt=o(`Note:
Loading a model from its configuration file does `),Zye=a("strong"),Odt=o("not"),Vdt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sae=a("a"),Xdt=o("from_pretrained()"),zdt=o(" to load the model weights."),Wdt=l(),F(x7.$$.fragment),Qdt=l(),tt=a("div"),F(CS.$$.fragment),Udt=l(),e8e=a("p"),Hdt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Jdt=l(),Dn=a("p"),Ydt=o("The model class to instantiate is selected based on the "),o8e=a("code"),Kdt=o("model_type"),Zdt=o(` property of the config object (either
passed as an argument or loaded from `),r8e=a("code"),ect=o("pretrained_model_name_or_path"),oct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t8e=a("code"),rct=o("pretrained_model_name_or_path"),tct=o(":"),act=l(),a8e=a("ul"),$7=a("li"),n8e=a("strong"),nct=o("bert"),sct=o(" \u2014 "),Rae=a("a"),lct=o("FlaxBertForNextSentencePrediction"),ict=o(" (BERT model)"),dct=l(),F(k7.$$.fragment),ZHe=l(),zf=a("h2"),S7=a("a"),s8e=a("span"),F(wS.$$.fragment),cct=l(),l8e=a("span"),fct=o("FlaxAutoModelForImageClassification"),eJe=l(),xr=a("div"),F(AS.$$.fragment),mct=l(),Wf=a("p"),gct=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Pae=a("a"),hct=o("from_pretrained()"),pct=o(" class method or the "),Bae=a("a"),_ct=o("from_config()"),uct=o(` class
method.`),bct=l(),LS=a("p"),vct=o("This class cannot be instantiated directly using "),i8e=a("code"),Fct=o("__init__()"),Tct=o(" (throws an error)."),Mct=l(),da=a("div"),F(yS.$$.fragment),Ect=l(),d8e=a("p"),Cct=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wct=l(),Qf=a("p"),Act=o(`Note:
Loading a model from its configuration file does `),c8e=a("strong"),Lct=o("not"),yct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iae=a("a"),xct=o("from_pretrained()"),$ct=o(" to load the model weights."),kct=l(),F(R7.$$.fragment),Sct=l(),at=a("div"),F(xS.$$.fragment),Rct=l(),f8e=a("p"),Pct=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Bct=l(),Gn=a("p"),Ict=o("The model class to instantiate is selected based on the "),m8e=a("code"),Nct=o("model_type"),qct=o(` property of the config object (either
passed as an argument or loaded from `),g8e=a("code"),jct=o("pretrained_model_name_or_path"),Dct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h8e=a("code"),Gct=o("pretrained_model_name_or_path"),Oct=o(":"),Vct=l(),$S=a("ul"),P7=a("li"),p8e=a("strong"),Xct=o("beit"),zct=o(" \u2014 "),Nae=a("a"),Wct=o("FlaxBeitForImageClassification"),Qct=o(" (BEiT model)"),Uct=l(),B7=a("li"),_8e=a("strong"),Hct=o("vit"),Jct=o(" \u2014 "),qae=a("a"),Yct=o("FlaxViTForImageClassification"),Kct=o(" (ViT model)"),Zct=l(),F(I7.$$.fragment),oJe=l(),Uf=a("h2"),N7=a("a"),u8e=a("span"),F(kS.$$.fragment),eft=l(),b8e=a("span"),oft=o("FlaxAutoModelForVision2Seq"),rJe=l(),$r=a("div"),F(SS.$$.fragment),rft=l(),Hf=a("p"),tft=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),jae=a("a"),aft=o("from_pretrained()"),nft=o(" class method or the "),Dae=a("a"),sft=o("from_config()"),lft=o(` class
method.`),ift=l(),RS=a("p"),dft=o("This class cannot be instantiated directly using "),v8e=a("code"),cft=o("__init__()"),fft=o(" (throws an error)."),mft=l(),ca=a("div"),F(PS.$$.fragment),gft=l(),F8e=a("p"),hft=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pft=l(),Jf=a("p"),_ft=o(`Note:
Loading a model from its configuration file does `),T8e=a("strong"),uft=o("not"),bft=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gae=a("a"),vft=o("from_pretrained()"),Fft=o(" to load the model weights."),Tft=l(),F(q7.$$.fragment),Mft=l(),nt=a("div"),F(BS.$$.fragment),Eft=l(),M8e=a("p"),Cft=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wft=l(),On=a("p"),Aft=o("The model class to instantiate is selected based on the "),E8e=a("code"),Lft=o("model_type"),yft=o(` property of the config object (either
passed as an argument or loaded from `),C8e=a("code"),xft=o("pretrained_model_name_or_path"),$ft=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w8e=a("code"),kft=o("pretrained_model_name_or_path"),Sft=o(":"),Rft=l(),A8e=a("ul"),j7=a("li"),L8e=a("strong"),Pft=o("vision-encoder-decoder"),Bft=o(" \u2014 "),Oae=a("a"),Ift=o("FlaxVisionEncoderDecoderModel"),Nft=o(" (Vision Encoder decoder model)"),qft=l(),F(D7.$$.fragment),this.h()},l(f){const u=ata('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var IS=s(p);m=n(IS,"A",{id:!0,class:!0,href:!0});var y8e=s(m);_=n(y8e,"SPAN",{});var x8e=s(_);T(d.$$.fragment,x8e),x8e.forEach(t),y8e.forEach(t),h=i(IS),Ao=n(IS,"SPAN",{});var $8e=s(Ao);Oi=r($8e,"Auto Classes"),$8e.forEach(t),IS.forEach(t),em=i(f),ft=n(f,"P",{});var NS=s(ft);Vi=r(NS,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=n(NS,"CODE",{});var k8e=s(Xi);f8=r(k8e,"from_pretrained()"),k8e.forEach(t),om=r(NS,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),NS.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Vn=s(Qe);zi=r(Vn,"Instantiating one of "),Xn=n(Vn,"A",{href:!0});var S8e=s(Xn);m8=r(S8e,"AutoConfig"),S8e.forEach(t),zn=r(Vn,", "),Wn=n(Vn,"A",{href:!0});var R8e=s(Wn);g8=r(R8e,"AutoModel"),R8e.forEach(t),Wi=r(Vn,`, and
`),Qn=n(Vn,"A",{href:!0});var P8e=s(Qn);h8=r(P8e,"AutoTokenizer"),P8e.forEach(t),Qi=r(Vn," will directly create a class of the relevant architecture. For instance"),Vn.forEach(t),rm=i(f),T(ja.$$.fragment,f),Ue=i(f),Ae=n(f,"P",{});var qS=s(Ae);nP=r(qS,"will create a model that is an instance of "),Ui=n(qS,"A",{href:!0});var B8e=s(Ui);sP=r(B8e,"BertModel"),B8e.forEach(t),lP=r(qS,"."),qS.forEach(t),Lo=i(f),Da=n(f,"P",{});var jS=s(Da);iP=r(jS,"There is one class of "),tm=n(jS,"CODE",{});var I8e=s(tm);dP=r(I8e,"AutoModel"),I8e.forEach(t),bKe=r(jS," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),jS.forEach(t),UQe=i(f),Hi=n(f,"H2",{class:!0});var DS=s(Hi);am=n(DS,"A",{id:!0,class:!0,href:!0});var N8e=s(am);Dse=n(N8e,"SPAN",{});var q8e=s(Dse);T(p8.$$.fragment,q8e),q8e.forEach(t),N8e.forEach(t),vKe=i(DS),Gse=n(DS,"SPAN",{});var j8e=s(Gse);FKe=r(j8e,"Extending the Auto Classes"),j8e.forEach(t),DS.forEach(t),HQe=i(f),Un=n(f,"P",{});var Yf=s(Un);TKe=r(Yf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Ose=n(Yf,"CODE",{});var D8e=s(Ose);MKe=r(D8e,"NewModel"),D8e.forEach(t),EKe=r(Yf,", make sure you have a "),Vse=n(Yf,"CODE",{});var G8e=s(Vse);CKe=r(G8e,"NewModelConfig"),G8e.forEach(t),wKe=r(Yf,` then you can add those to the auto
classes like this:`),Yf.forEach(t),JQe=i(f),T(_8.$$.fragment,f),YQe=i(f),cP=n(f,"P",{});var O8e=s(cP);AKe=r(O8e,"You will then be able to use the auto classes like you would usually do!"),O8e.forEach(t),KQe=i(f),T(nm.$$.fragment,f),ZQe=i(f),Ji=n(f,"H2",{class:!0});var GS=s(Ji);sm=n(GS,"A",{id:!0,class:!0,href:!0});var V8e=s(sm);Xse=n(V8e,"SPAN",{});var X8e=s(Xse);T(u8.$$.fragment,X8e),X8e.forEach(t),V8e.forEach(t),LKe=i(GS),zse=n(GS,"SPAN",{});var z8e=s(zse);yKe=r(z8e,"AutoConfig"),z8e.forEach(t),GS.forEach(t),eUe=i(f),yo=n(f,"DIV",{class:!0});var dt=s(yo);T(b8.$$.fragment,dt),xKe=i(dt),v8=n(dt,"P",{});var OS=s(v8);$Ke=r(OS,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),fP=n(OS,"A",{href:!0});var W8e=s(fP);kKe=r(W8e,"from_pretrained()"),W8e.forEach(t),SKe=r(OS," class method."),OS.forEach(t),RKe=i(dt),F8=n(dt,"P",{});var VS=s(F8);PKe=r(VS,"This class cannot be instantiated directly using "),Wse=n(VS,"CODE",{});var Q8e=s(Wse);BKe=r(Q8e,"__init__()"),Q8e.forEach(t),IKe=r(VS," (throws an error)."),VS.forEach(t),NKe=i(dt),kr=n(dt,"DIV",{class:!0});var ct=s(kr);T(T8.$$.fragment,ct),qKe=i(ct),Qse=n(ct,"P",{});var U8e=s(Qse);jKe=r(U8e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),U8e.forEach(t),DKe=i(ct),Yi=n(ct,"P",{});var Kf=s(Yi);GKe=r(Kf,"The configuration class to instantiate is selected based on the "),Use=n(Kf,"CODE",{});var H8e=s(Use);OKe=r(H8e,"model_type"),H8e.forEach(t),VKe=r(Kf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Hse=n(Kf,"CODE",{});var J8e=s(Hse);XKe=r(J8e,"pretrained_model_name_or_path"),J8e.forEach(t),zKe=r(Kf,":"),Kf.forEach(t),WKe=i(ct),A=n(ct,"UL",{});var L=s(A);lm=n(L,"LI",{});var G7=s(lm);Jse=n(G7,"STRONG",{});var Y8e=s(Jse);QKe=r(Y8e,"albert"),Y8e.forEach(t),UKe=r(G7," \u2014 "),mP=n(G7,"A",{href:!0});var K8e=s(mP);HKe=r(K8e,"AlbertConfig"),K8e.forEach(t),JKe=r(G7," (ALBERT model)"),G7.forEach(t),YKe=i(L),im=n(L,"LI",{});var O7=s(im);Yse=n(O7,"STRONG",{});var Z8e=s(Yse);KKe=r(Z8e,"bart"),Z8e.forEach(t),ZKe=r(O7," \u2014 "),gP=n(O7,"A",{href:!0});var e9e=s(gP);eZe=r(e9e,"BartConfig"),e9e.forEach(t),oZe=r(O7," (BART model)"),O7.forEach(t),rZe=i(L),dm=n(L,"LI",{});var V7=s(dm);Kse=n(V7,"STRONG",{});var o9e=s(Kse);tZe=r(o9e,"beit"),o9e.forEach(t),aZe=r(V7," \u2014 "),hP=n(V7,"A",{href:!0});var r9e=s(hP);nZe=r(r9e,"BeitConfig"),r9e.forEach(t),sZe=r(V7," (BEiT model)"),V7.forEach(t),lZe=i(L),cm=n(L,"LI",{});var X7=s(cm);Zse=n(X7,"STRONG",{});var t9e=s(Zse);iZe=r(t9e,"bert"),t9e.forEach(t),dZe=r(X7," \u2014 "),pP=n(X7,"A",{href:!0});var a9e=s(pP);cZe=r(a9e,"BertConfig"),a9e.forEach(t),fZe=r(X7," (BERT model)"),X7.forEach(t),mZe=i(L),fm=n(L,"LI",{});var z7=s(fm);ele=n(z7,"STRONG",{});var n9e=s(ele);gZe=r(n9e,"bert-generation"),n9e.forEach(t),hZe=r(z7," \u2014 "),_P=n(z7,"A",{href:!0});var s9e=s(_P);pZe=r(s9e,"BertGenerationConfig"),s9e.forEach(t),_Ze=r(z7," (Bert Generation model)"),z7.forEach(t),uZe=i(L),mm=n(L,"LI",{});var W7=s(mm);ole=n(W7,"STRONG",{});var l9e=s(ole);bZe=r(l9e,"big_bird"),l9e.forEach(t),vZe=r(W7," \u2014 "),uP=n(W7,"A",{href:!0});var i9e=s(uP);FZe=r(i9e,"BigBirdConfig"),i9e.forEach(t),TZe=r(W7," (BigBird model)"),W7.forEach(t),MZe=i(L),gm=n(L,"LI",{});var Q7=s(gm);rle=n(Q7,"STRONG",{});var d9e=s(rle);EZe=r(d9e,"bigbird_pegasus"),d9e.forEach(t),CZe=r(Q7," \u2014 "),bP=n(Q7,"A",{href:!0});var c9e=s(bP);wZe=r(c9e,"BigBirdPegasusConfig"),c9e.forEach(t),AZe=r(Q7," (BigBird-Pegasus model)"),Q7.forEach(t),LZe=i(L),hm=n(L,"LI",{});var U7=s(hm);tle=n(U7,"STRONG",{});var f9e=s(tle);yZe=r(f9e,"blenderbot"),f9e.forEach(t),xZe=r(U7," \u2014 "),vP=n(U7,"A",{href:!0});var m9e=s(vP);$Ze=r(m9e,"BlenderbotConfig"),m9e.forEach(t),kZe=r(U7," (Blenderbot model)"),U7.forEach(t),SZe=i(L),pm=n(L,"LI",{});var H7=s(pm);ale=n(H7,"STRONG",{});var g9e=s(ale);RZe=r(g9e,"blenderbot-small"),g9e.forEach(t),PZe=r(H7," \u2014 "),FP=n(H7,"A",{href:!0});var h9e=s(FP);BZe=r(h9e,"BlenderbotSmallConfig"),h9e.forEach(t),IZe=r(H7," (BlenderbotSmall model)"),H7.forEach(t),NZe=i(L),_m=n(L,"LI",{});var J7=s(_m);nle=n(J7,"STRONG",{});var p9e=s(nle);qZe=r(p9e,"bloom"),p9e.forEach(t),jZe=r(J7," \u2014 "),TP=n(J7,"A",{href:!0});var _9e=s(TP);DZe=r(_9e,"BloomConfig"),_9e.forEach(t),GZe=r(J7," (BLOOM model)"),J7.forEach(t),OZe=i(L),um=n(L,"LI",{});var Y7=s(um);sle=n(Y7,"STRONG",{});var u9e=s(sle);VZe=r(u9e,"camembert"),u9e.forEach(t),XZe=r(Y7," \u2014 "),MP=n(Y7,"A",{href:!0});var b9e=s(MP);zZe=r(b9e,"CamembertConfig"),b9e.forEach(t),WZe=r(Y7," (CamemBERT model)"),Y7.forEach(t),QZe=i(L),bm=n(L,"LI",{});var K7=s(bm);lle=n(K7,"STRONG",{});var v9e=s(lle);UZe=r(v9e,"canine"),v9e.forEach(t),HZe=r(K7," \u2014 "),EP=n(K7,"A",{href:!0});var F9e=s(EP);JZe=r(F9e,"CanineConfig"),F9e.forEach(t),YZe=r(K7," (CANINE model)"),K7.forEach(t),KZe=i(L),vm=n(L,"LI",{});var Z7=s(vm);ile=n(Z7,"STRONG",{});var T9e=s(ile);ZZe=r(T9e,"clip"),T9e.forEach(t),eeo=r(Z7," \u2014 "),CP=n(Z7,"A",{href:!0});var M9e=s(CP);oeo=r(M9e,"CLIPConfig"),M9e.forEach(t),reo=r(Z7," (CLIP model)"),Z7.forEach(t),teo=i(L),Fm=n(L,"LI",{});var eL=s(Fm);dle=n(eL,"STRONG",{});var E9e=s(dle);aeo=r(E9e,"codegen"),E9e.forEach(t),neo=r(eL," \u2014 "),wP=n(eL,"A",{href:!0});var C9e=s(wP);seo=r(C9e,"CodeGenConfig"),C9e.forEach(t),leo=r(eL," (CodeGen model)"),eL.forEach(t),ieo=i(L),Tm=n(L,"LI",{});var oL=s(Tm);cle=n(oL,"STRONG",{});var w9e=s(cle);deo=r(w9e,"convbert"),w9e.forEach(t),ceo=r(oL," \u2014 "),AP=n(oL,"A",{href:!0});var A9e=s(AP);feo=r(A9e,"ConvBertConfig"),A9e.forEach(t),meo=r(oL," (ConvBERT model)"),oL.forEach(t),geo=i(L),Mm=n(L,"LI",{});var rL=s(Mm);fle=n(rL,"STRONG",{});var L9e=s(fle);heo=r(L9e,"convnext"),L9e.forEach(t),peo=r(rL," \u2014 "),LP=n(rL,"A",{href:!0});var y9e=s(LP);_eo=r(y9e,"ConvNextConfig"),y9e.forEach(t),ueo=r(rL," (ConvNeXT model)"),rL.forEach(t),beo=i(L),Em=n(L,"LI",{});var tL=s(Em);mle=n(tL,"STRONG",{});var x9e=s(mle);veo=r(x9e,"ctrl"),x9e.forEach(t),Feo=r(tL," \u2014 "),yP=n(tL,"A",{href:!0});var $9e=s(yP);Teo=r($9e,"CTRLConfig"),$9e.forEach(t),Meo=r(tL," (CTRL model)"),tL.forEach(t),Eeo=i(L),Cm=n(L,"LI",{});var aL=s(Cm);gle=n(aL,"STRONG",{});var k9e=s(gle);Ceo=r(k9e,"cvt"),k9e.forEach(t),weo=r(aL," \u2014 "),xP=n(aL,"A",{href:!0});var S9e=s(xP);Aeo=r(S9e,"CvtConfig"),S9e.forEach(t),Leo=r(aL," (CvT model)"),aL.forEach(t),yeo=i(L),wm=n(L,"LI",{});var nL=s(wm);hle=n(nL,"STRONG",{});var R9e=s(hle);xeo=r(R9e,"data2vec-audio"),R9e.forEach(t),$eo=r(nL," \u2014 "),$P=n(nL,"A",{href:!0});var P9e=s($P);keo=r(P9e,"Data2VecAudioConfig"),P9e.forEach(t),Seo=r(nL," (Data2VecAudio model)"),nL.forEach(t),Reo=i(L),Am=n(L,"LI",{});var sL=s(Am);ple=n(sL,"STRONG",{});var B9e=s(ple);Peo=r(B9e,"data2vec-text"),B9e.forEach(t),Beo=r(sL," \u2014 "),kP=n(sL,"A",{href:!0});var I9e=s(kP);Ieo=r(I9e,"Data2VecTextConfig"),I9e.forEach(t),Neo=r(sL," (Data2VecText model)"),sL.forEach(t),qeo=i(L),Lm=n(L,"LI",{});var lL=s(Lm);_le=n(lL,"STRONG",{});var N9e=s(_le);jeo=r(N9e,"data2vec-vision"),N9e.forEach(t),Deo=r(lL," \u2014 "),SP=n(lL,"A",{href:!0});var q9e=s(SP);Geo=r(q9e,"Data2VecVisionConfig"),q9e.forEach(t),Oeo=r(lL," (Data2VecVision model)"),lL.forEach(t),Veo=i(L),ym=n(L,"LI",{});var iL=s(ym);ule=n(iL,"STRONG",{});var j9e=s(ule);Xeo=r(j9e,"deberta"),j9e.forEach(t),zeo=r(iL," \u2014 "),RP=n(iL,"A",{href:!0});var D9e=s(RP);Weo=r(D9e,"DebertaConfig"),D9e.forEach(t),Qeo=r(iL," (DeBERTa model)"),iL.forEach(t),Ueo=i(L),xm=n(L,"LI",{});var dL=s(xm);ble=n(dL,"STRONG",{});var G9e=s(ble);Heo=r(G9e,"deberta-v2"),G9e.forEach(t),Jeo=r(dL," \u2014 "),PP=n(dL,"A",{href:!0});var O9e=s(PP);Yeo=r(O9e,"DebertaV2Config"),O9e.forEach(t),Keo=r(dL," (DeBERTa-v2 model)"),dL.forEach(t),Zeo=i(L),$m=n(L,"LI",{});var cL=s($m);vle=n(cL,"STRONG",{});var V9e=s(vle);eoo=r(V9e,"decision_transformer"),V9e.forEach(t),ooo=r(cL," \u2014 "),BP=n(cL,"A",{href:!0});var X9e=s(BP);roo=r(X9e,"DecisionTransformerConfig"),X9e.forEach(t),too=r(cL," (Decision Transformer model)"),cL.forEach(t),aoo=i(L),km=n(L,"LI",{});var fL=s(km);Fle=n(fL,"STRONG",{});var z9e=s(Fle);noo=r(z9e,"deit"),z9e.forEach(t),soo=r(fL," \u2014 "),IP=n(fL,"A",{href:!0});var Dft=s(IP);loo=r(Dft,"DeiTConfig"),Dft.forEach(t),ioo=r(fL," (DeiT model)"),fL.forEach(t),doo=i(L),Sm=n(L,"LI",{});var W9e=s(Sm);Tle=n(W9e,"STRONG",{});var Gft=s(Tle);coo=r(Gft,"detr"),Gft.forEach(t),foo=r(W9e," \u2014 "),NP=n(W9e,"A",{href:!0});var Oft=s(NP);moo=r(Oft,"DetrConfig"),Oft.forEach(t),goo=r(W9e," (DETR model)"),W9e.forEach(t),hoo=i(L),Rm=n(L,"LI",{});var Q9e=s(Rm);Mle=n(Q9e,"STRONG",{});var Vft=s(Mle);poo=r(Vft,"distilbert"),Vft.forEach(t),_oo=r(Q9e," \u2014 "),qP=n(Q9e,"A",{href:!0});var Xft=s(qP);uoo=r(Xft,"DistilBertConfig"),Xft.forEach(t),boo=r(Q9e," (DistilBERT model)"),Q9e.forEach(t),voo=i(L),Pm=n(L,"LI",{});var U9e=s(Pm);Ele=n(U9e,"STRONG",{});var zft=s(Ele);Foo=r(zft,"donut-swin"),zft.forEach(t),Too=r(U9e," \u2014 "),jP=n(U9e,"A",{href:!0});var Wft=s(jP);Moo=r(Wft,"DonutSwinConfig"),Wft.forEach(t),Eoo=r(U9e," (DonutSwin model)"),U9e.forEach(t),Coo=i(L),Bm=n(L,"LI",{});var H9e=s(Bm);Cle=n(H9e,"STRONG",{});var Qft=s(Cle);woo=r(Qft,"dpr"),Qft.forEach(t),Aoo=r(H9e," \u2014 "),DP=n(H9e,"A",{href:!0});var Uft=s(DP);Loo=r(Uft,"DPRConfig"),Uft.forEach(t),yoo=r(H9e," (DPR model)"),H9e.forEach(t),xoo=i(L),Im=n(L,"LI",{});var J9e=s(Im);wle=n(J9e,"STRONG",{});var Hft=s(wle);$oo=r(Hft,"dpt"),Hft.forEach(t),koo=r(J9e," \u2014 "),GP=n(J9e,"A",{href:!0});var Jft=s(GP);Soo=r(Jft,"DPTConfig"),Jft.forEach(t),Roo=r(J9e," (DPT model)"),J9e.forEach(t),Poo=i(L),Nm=n(L,"LI",{});var Y9e=s(Nm);Ale=n(Y9e,"STRONG",{});var Yft=s(Ale);Boo=r(Yft,"electra"),Yft.forEach(t),Ioo=r(Y9e," \u2014 "),OP=n(Y9e,"A",{href:!0});var Kft=s(OP);Noo=r(Kft,"ElectraConfig"),Kft.forEach(t),qoo=r(Y9e," (ELECTRA model)"),Y9e.forEach(t),joo=i(L),qm=n(L,"LI",{});var K9e=s(qm);Lle=n(K9e,"STRONG",{});var Zft=s(Lle);Doo=r(Zft,"encoder-decoder"),Zft.forEach(t),Goo=r(K9e," \u2014 "),VP=n(K9e,"A",{href:!0});var emt=s(VP);Ooo=r(emt,"EncoderDecoderConfig"),emt.forEach(t),Voo=r(K9e," (Encoder decoder model)"),K9e.forEach(t),Xoo=i(L),jm=n(L,"LI",{});var Z9e=s(jm);yle=n(Z9e,"STRONG",{});var omt=s(yle);zoo=r(omt,"flaubert"),omt.forEach(t),Woo=r(Z9e," \u2014 "),XP=n(Z9e,"A",{href:!0});var rmt=s(XP);Qoo=r(rmt,"FlaubertConfig"),rmt.forEach(t),Uoo=r(Z9e," (FlauBERT model)"),Z9e.forEach(t),Hoo=i(L),Dm=n(L,"LI",{});var exe=s(Dm);xle=n(exe,"STRONG",{});var tmt=s(xle);Joo=r(tmt,"flava"),tmt.forEach(t),Yoo=r(exe," \u2014 "),zP=n(exe,"A",{href:!0});var amt=s(zP);Koo=r(amt,"FlavaConfig"),amt.forEach(t),Zoo=r(exe," (FLAVA model)"),exe.forEach(t),ero=i(L),Gm=n(L,"LI",{});var oxe=s(Gm);$le=n(oxe,"STRONG",{});var nmt=s($le);oro=r(nmt,"fnet"),nmt.forEach(t),rro=r(oxe," \u2014 "),WP=n(oxe,"A",{href:!0});var smt=s(WP);tro=r(smt,"FNetConfig"),smt.forEach(t),aro=r(oxe," (FNet model)"),oxe.forEach(t),nro=i(L),Om=n(L,"LI",{});var rxe=s(Om);kle=n(rxe,"STRONG",{});var lmt=s(kle);sro=r(lmt,"fsmt"),lmt.forEach(t),lro=r(rxe," \u2014 "),QP=n(rxe,"A",{href:!0});var imt=s(QP);iro=r(imt,"FSMTConfig"),imt.forEach(t),dro=r(rxe," (FairSeq Machine-Translation model)"),rxe.forEach(t),cro=i(L),Vm=n(L,"LI",{});var txe=s(Vm);Sle=n(txe,"STRONG",{});var dmt=s(Sle);fro=r(dmt,"funnel"),dmt.forEach(t),mro=r(txe," \u2014 "),UP=n(txe,"A",{href:!0});var cmt=s(UP);gro=r(cmt,"FunnelConfig"),cmt.forEach(t),hro=r(txe," (Funnel Transformer model)"),txe.forEach(t),pro=i(L),Xm=n(L,"LI",{});var axe=s(Xm);Rle=n(axe,"STRONG",{});var fmt=s(Rle);_ro=r(fmt,"glpn"),fmt.forEach(t),uro=r(axe," \u2014 "),HP=n(axe,"A",{href:!0});var mmt=s(HP);bro=r(mmt,"GLPNConfig"),mmt.forEach(t),vro=r(axe," (GLPN model)"),axe.forEach(t),Fro=i(L),zm=n(L,"LI",{});var nxe=s(zm);Ple=n(nxe,"STRONG",{});var gmt=s(Ple);Tro=r(gmt,"gpt2"),gmt.forEach(t),Mro=r(nxe," \u2014 "),JP=n(nxe,"A",{href:!0});var hmt=s(JP);Ero=r(hmt,"GPT2Config"),hmt.forEach(t),Cro=r(nxe," (OpenAI GPT-2 model)"),nxe.forEach(t),wro=i(L),Wm=n(L,"LI",{});var sxe=s(Wm);Ble=n(sxe,"STRONG",{});var pmt=s(Ble);Aro=r(pmt,"gpt_neo"),pmt.forEach(t),Lro=r(sxe," \u2014 "),YP=n(sxe,"A",{href:!0});var _mt=s(YP);yro=r(_mt,"GPTNeoConfig"),_mt.forEach(t),xro=r(sxe," (GPT Neo model)"),sxe.forEach(t),$ro=i(L),Qm=n(L,"LI",{});var lxe=s(Qm);Ile=n(lxe,"STRONG",{});var umt=s(Ile);kro=r(umt,"gpt_neox"),umt.forEach(t),Sro=r(lxe," \u2014 "),KP=n(lxe,"A",{href:!0});var bmt=s(KP);Rro=r(bmt,"GPTNeoXConfig"),bmt.forEach(t),Pro=r(lxe," (GPT NeoX model)"),lxe.forEach(t),Bro=i(L),Um=n(L,"LI",{});var ixe=s(Um);Nle=n(ixe,"STRONG",{});var vmt=s(Nle);Iro=r(vmt,"gptj"),vmt.forEach(t),Nro=r(ixe," \u2014 "),ZP=n(ixe,"A",{href:!0});var Fmt=s(ZP);qro=r(Fmt,"GPTJConfig"),Fmt.forEach(t),jro=r(ixe," (GPT-J model)"),ixe.forEach(t),Dro=i(L),Hm=n(L,"LI",{});var dxe=s(Hm);qle=n(dxe,"STRONG",{});var Tmt=s(qle);Gro=r(Tmt,"groupvit"),Tmt.forEach(t),Oro=r(dxe," \u2014 "),eB=n(dxe,"A",{href:!0});var Mmt=s(eB);Vro=r(Mmt,"GroupViTConfig"),Mmt.forEach(t),Xro=r(dxe," (GroupViT model)"),dxe.forEach(t),zro=i(L),Jm=n(L,"LI",{});var cxe=s(Jm);jle=n(cxe,"STRONG",{});var Emt=s(jle);Wro=r(Emt,"hubert"),Emt.forEach(t),Qro=r(cxe," \u2014 "),oB=n(cxe,"A",{href:!0});var Cmt=s(oB);Uro=r(Cmt,"HubertConfig"),Cmt.forEach(t),Hro=r(cxe," (Hubert model)"),cxe.forEach(t),Jro=i(L),Ym=n(L,"LI",{});var fxe=s(Ym);Dle=n(fxe,"STRONG",{});var wmt=s(Dle);Yro=r(wmt,"ibert"),wmt.forEach(t),Kro=r(fxe," \u2014 "),rB=n(fxe,"A",{href:!0});var Amt=s(rB);Zro=r(Amt,"IBertConfig"),Amt.forEach(t),eto=r(fxe," (I-BERT model)"),fxe.forEach(t),oto=i(L),Km=n(L,"LI",{});var mxe=s(Km);Gle=n(mxe,"STRONG",{});var Lmt=s(Gle);rto=r(Lmt,"imagegpt"),Lmt.forEach(t),tto=r(mxe," \u2014 "),tB=n(mxe,"A",{href:!0});var ymt=s(tB);ato=r(ymt,"ImageGPTConfig"),ymt.forEach(t),nto=r(mxe," (ImageGPT model)"),mxe.forEach(t),sto=i(L),Zm=n(L,"LI",{});var gxe=s(Zm);Ole=n(gxe,"STRONG",{});var xmt=s(Ole);lto=r(xmt,"layoutlm"),xmt.forEach(t),ito=r(gxe," \u2014 "),aB=n(gxe,"A",{href:!0});var $mt=s(aB);dto=r($mt,"LayoutLMConfig"),$mt.forEach(t),cto=r(gxe," (LayoutLM model)"),gxe.forEach(t),fto=i(L),eg=n(L,"LI",{});var hxe=s(eg);Vle=n(hxe,"STRONG",{});var kmt=s(Vle);mto=r(kmt,"layoutlmv2"),kmt.forEach(t),gto=r(hxe," \u2014 "),nB=n(hxe,"A",{href:!0});var Smt=s(nB);hto=r(Smt,"LayoutLMv2Config"),Smt.forEach(t),pto=r(hxe," (LayoutLMv2 model)"),hxe.forEach(t),_to=i(L),og=n(L,"LI",{});var pxe=s(og);Xle=n(pxe,"STRONG",{});var Rmt=s(Xle);uto=r(Rmt,"layoutlmv3"),Rmt.forEach(t),bto=r(pxe," \u2014 "),sB=n(pxe,"A",{href:!0});var Pmt=s(sB);vto=r(Pmt,"LayoutLMv3Config"),Pmt.forEach(t),Fto=r(pxe," (LayoutLMv3 model)"),pxe.forEach(t),Tto=i(L),rg=n(L,"LI",{});var _xe=s(rg);zle=n(_xe,"STRONG",{});var Bmt=s(zle);Mto=r(Bmt,"led"),Bmt.forEach(t),Eto=r(_xe," \u2014 "),lB=n(_xe,"A",{href:!0});var Imt=s(lB);Cto=r(Imt,"LEDConfig"),Imt.forEach(t),wto=r(_xe," (LED model)"),_xe.forEach(t),Ato=i(L),tg=n(L,"LI",{});var uxe=s(tg);Wle=n(uxe,"STRONG",{});var Nmt=s(Wle);Lto=r(Nmt,"levit"),Nmt.forEach(t),yto=r(uxe," \u2014 "),iB=n(uxe,"A",{href:!0});var qmt=s(iB);xto=r(qmt,"LevitConfig"),qmt.forEach(t),$to=r(uxe," (LeViT model)"),uxe.forEach(t),kto=i(L),ag=n(L,"LI",{});var bxe=s(ag);Qle=n(bxe,"STRONG",{});var jmt=s(Qle);Sto=r(jmt,"longformer"),jmt.forEach(t),Rto=r(bxe," \u2014 "),dB=n(bxe,"A",{href:!0});var Dmt=s(dB);Pto=r(Dmt,"LongformerConfig"),Dmt.forEach(t),Bto=r(bxe," (Longformer model)"),bxe.forEach(t),Ito=i(L),ng=n(L,"LI",{});var vxe=s(ng);Ule=n(vxe,"STRONG",{});var Gmt=s(Ule);Nto=r(Gmt,"longt5"),Gmt.forEach(t),qto=r(vxe," \u2014 "),cB=n(vxe,"A",{href:!0});var Omt=s(cB);jto=r(Omt,"LongT5Config"),Omt.forEach(t),Dto=r(vxe," (LongT5 model)"),vxe.forEach(t),Gto=i(L),sg=n(L,"LI",{});var Fxe=s(sg);Hle=n(Fxe,"STRONG",{});var Vmt=s(Hle);Oto=r(Vmt,"luke"),Vmt.forEach(t),Vto=r(Fxe," \u2014 "),fB=n(Fxe,"A",{href:!0});var Xmt=s(fB);Xto=r(Xmt,"LukeConfig"),Xmt.forEach(t),zto=r(Fxe," (LUKE model)"),Fxe.forEach(t),Wto=i(L),lg=n(L,"LI",{});var Txe=s(lg);Jle=n(Txe,"STRONG",{});var zmt=s(Jle);Qto=r(zmt,"lxmert"),zmt.forEach(t),Uto=r(Txe," \u2014 "),mB=n(Txe,"A",{href:!0});var Wmt=s(mB);Hto=r(Wmt,"LxmertConfig"),Wmt.forEach(t),Jto=r(Txe," (LXMERT model)"),Txe.forEach(t),Yto=i(L),ig=n(L,"LI",{});var Mxe=s(ig);Yle=n(Mxe,"STRONG",{});var Qmt=s(Yle);Kto=r(Qmt,"m2m_100"),Qmt.forEach(t),Zto=r(Mxe," \u2014 "),gB=n(Mxe,"A",{href:!0});var Umt=s(gB);eao=r(Umt,"M2M100Config"),Umt.forEach(t),oao=r(Mxe," (M2M100 model)"),Mxe.forEach(t),rao=i(L),dg=n(L,"LI",{});var Exe=s(dg);Kle=n(Exe,"STRONG",{});var Hmt=s(Kle);tao=r(Hmt,"marian"),Hmt.forEach(t),aao=r(Exe," \u2014 "),hB=n(Exe,"A",{href:!0});var Jmt=s(hB);nao=r(Jmt,"MarianConfig"),Jmt.forEach(t),sao=r(Exe," (Marian model)"),Exe.forEach(t),lao=i(L),cg=n(L,"LI",{});var Cxe=s(cg);Zle=n(Cxe,"STRONG",{});var Ymt=s(Zle);iao=r(Ymt,"maskformer"),Ymt.forEach(t),dao=r(Cxe," \u2014 "),pB=n(Cxe,"A",{href:!0});var Kmt=s(pB);cao=r(Kmt,"MaskFormerConfig"),Kmt.forEach(t),fao=r(Cxe," (MaskFormer model)"),Cxe.forEach(t),mao=i(L),fg=n(L,"LI",{});var wxe=s(fg);eie=n(wxe,"STRONG",{});var Zmt=s(eie);gao=r(Zmt,"mbart"),Zmt.forEach(t),hao=r(wxe," \u2014 "),_B=n(wxe,"A",{href:!0});var egt=s(_B);pao=r(egt,"MBartConfig"),egt.forEach(t),_ao=r(wxe," (mBART model)"),wxe.forEach(t),uao=i(L),mg=n(L,"LI",{});var Axe=s(mg);oie=n(Axe,"STRONG",{});var ogt=s(oie);bao=r(ogt,"mctct"),ogt.forEach(t),vao=r(Axe," \u2014 "),uB=n(Axe,"A",{href:!0});var rgt=s(uB);Fao=r(rgt,"MCTCTConfig"),rgt.forEach(t),Tao=r(Axe," (M-CTC-T model)"),Axe.forEach(t),Mao=i(L),gg=n(L,"LI",{});var Lxe=s(gg);rie=n(Lxe,"STRONG",{});var tgt=s(rie);Eao=r(tgt,"megatron-bert"),tgt.forEach(t),Cao=r(Lxe," \u2014 "),bB=n(Lxe,"A",{href:!0});var agt=s(bB);wao=r(agt,"MegatronBertConfig"),agt.forEach(t),Aao=r(Lxe," (Megatron-BERT model)"),Lxe.forEach(t),Lao=i(L),hg=n(L,"LI",{});var yxe=s(hg);tie=n(yxe,"STRONG",{});var ngt=s(tie);yao=r(ngt,"mobilebert"),ngt.forEach(t),xao=r(yxe," \u2014 "),vB=n(yxe,"A",{href:!0});var sgt=s(vB);$ao=r(sgt,"MobileBertConfig"),sgt.forEach(t),kao=r(yxe," (MobileBERT model)"),yxe.forEach(t),Sao=i(L),pg=n(L,"LI",{});var xxe=s(pg);aie=n(xxe,"STRONG",{});var lgt=s(aie);Rao=r(lgt,"mobilevit"),lgt.forEach(t),Pao=r(xxe," \u2014 "),FB=n(xxe,"A",{href:!0});var igt=s(FB);Bao=r(igt,"MobileViTConfig"),igt.forEach(t),Iao=r(xxe," (MobileViT model)"),xxe.forEach(t),Nao=i(L),_g=n(L,"LI",{});var $xe=s(_g);nie=n($xe,"STRONG",{});var dgt=s(nie);qao=r(dgt,"mpnet"),dgt.forEach(t),jao=r($xe," \u2014 "),TB=n($xe,"A",{href:!0});var cgt=s(TB);Dao=r(cgt,"MPNetConfig"),cgt.forEach(t),Gao=r($xe," (MPNet model)"),$xe.forEach(t),Oao=i(L),ug=n(L,"LI",{});var kxe=s(ug);sie=n(kxe,"STRONG",{});var fgt=s(sie);Vao=r(fgt,"mt5"),fgt.forEach(t),Xao=r(kxe," \u2014 "),MB=n(kxe,"A",{href:!0});var mgt=s(MB);zao=r(mgt,"MT5Config"),mgt.forEach(t),Wao=r(kxe," (MT5 model)"),kxe.forEach(t),Qao=i(L),bg=n(L,"LI",{});var Sxe=s(bg);lie=n(Sxe,"STRONG",{});var ggt=s(lie);Uao=r(ggt,"mvp"),ggt.forEach(t),Hao=r(Sxe," \u2014 "),EB=n(Sxe,"A",{href:!0});var hgt=s(EB);Jao=r(hgt,"MvpConfig"),hgt.forEach(t),Yao=r(Sxe," (MVP model)"),Sxe.forEach(t),Kao=i(L),vg=n(L,"LI",{});var Rxe=s(vg);iie=n(Rxe,"STRONG",{});var pgt=s(iie);Zao=r(pgt,"nezha"),pgt.forEach(t),eno=r(Rxe," \u2014 "),CB=n(Rxe,"A",{href:!0});var _gt=s(CB);ono=r(_gt,"NezhaConfig"),_gt.forEach(t),rno=r(Rxe," (Nezha model)"),Rxe.forEach(t),tno=i(L),Fg=n(L,"LI",{});var Pxe=s(Fg);die=n(Pxe,"STRONG",{});var ugt=s(die);ano=r(ugt,"nystromformer"),ugt.forEach(t),nno=r(Pxe," \u2014 "),wB=n(Pxe,"A",{href:!0});var bgt=s(wB);sno=r(bgt,"NystromformerConfig"),bgt.forEach(t),lno=r(Pxe," (Nystr\xF6mformer model)"),Pxe.forEach(t),ino=i(L),Tg=n(L,"LI",{});var Bxe=s(Tg);cie=n(Bxe,"STRONG",{});var vgt=s(cie);dno=r(vgt,"openai-gpt"),vgt.forEach(t),cno=r(Bxe," \u2014 "),AB=n(Bxe,"A",{href:!0});var Fgt=s(AB);fno=r(Fgt,"OpenAIGPTConfig"),Fgt.forEach(t),mno=r(Bxe," (OpenAI GPT model)"),Bxe.forEach(t),gno=i(L),Mg=n(L,"LI",{});var Ixe=s(Mg);fie=n(Ixe,"STRONG",{});var Tgt=s(fie);hno=r(Tgt,"opt"),Tgt.forEach(t),pno=r(Ixe," \u2014 "),LB=n(Ixe,"A",{href:!0});var Mgt=s(LB);_no=r(Mgt,"OPTConfig"),Mgt.forEach(t),uno=r(Ixe," (OPT model)"),Ixe.forEach(t),bno=i(L),Eg=n(L,"LI",{});var Nxe=s(Eg);mie=n(Nxe,"STRONG",{});var Egt=s(mie);vno=r(Egt,"owlvit"),Egt.forEach(t),Fno=r(Nxe," \u2014 "),yB=n(Nxe,"A",{href:!0});var Cgt=s(yB);Tno=r(Cgt,"OwlViTConfig"),Cgt.forEach(t),Mno=r(Nxe," (OWL-ViT model)"),Nxe.forEach(t),Eno=i(L),Cg=n(L,"LI",{});var qxe=s(Cg);gie=n(qxe,"STRONG",{});var wgt=s(gie);Cno=r(wgt,"pegasus"),wgt.forEach(t),wno=r(qxe," \u2014 "),xB=n(qxe,"A",{href:!0});var Agt=s(xB);Ano=r(Agt,"PegasusConfig"),Agt.forEach(t),Lno=r(qxe," (Pegasus model)"),qxe.forEach(t),yno=i(L),wg=n(L,"LI",{});var jxe=s(wg);hie=n(jxe,"STRONG",{});var Lgt=s(hie);xno=r(Lgt,"perceiver"),Lgt.forEach(t),$no=r(jxe," \u2014 "),$B=n(jxe,"A",{href:!0});var ygt=s($B);kno=r(ygt,"PerceiverConfig"),ygt.forEach(t),Sno=r(jxe," (Perceiver model)"),jxe.forEach(t),Rno=i(L),Ag=n(L,"LI",{});var Dxe=s(Ag);pie=n(Dxe,"STRONG",{});var xgt=s(pie);Pno=r(xgt,"plbart"),xgt.forEach(t),Bno=r(Dxe," \u2014 "),kB=n(Dxe,"A",{href:!0});var $gt=s(kB);Ino=r($gt,"PLBartConfig"),$gt.forEach(t),Nno=r(Dxe," (PLBart model)"),Dxe.forEach(t),qno=i(L),Lg=n(L,"LI",{});var Gxe=s(Lg);_ie=n(Gxe,"STRONG",{});var kgt=s(_ie);jno=r(kgt,"poolformer"),kgt.forEach(t),Dno=r(Gxe," \u2014 "),SB=n(Gxe,"A",{href:!0});var Sgt=s(SB);Gno=r(Sgt,"PoolFormerConfig"),Sgt.forEach(t),Ono=r(Gxe," (PoolFormer model)"),Gxe.forEach(t),Vno=i(L),yg=n(L,"LI",{});var Oxe=s(yg);uie=n(Oxe,"STRONG",{});var Rgt=s(uie);Xno=r(Rgt,"prophetnet"),Rgt.forEach(t),zno=r(Oxe," \u2014 "),RB=n(Oxe,"A",{href:!0});var Pgt=s(RB);Wno=r(Pgt,"ProphetNetConfig"),Pgt.forEach(t),Qno=r(Oxe," (ProphetNet model)"),Oxe.forEach(t),Uno=i(L),xg=n(L,"LI",{});var Vxe=s(xg);bie=n(Vxe,"STRONG",{});var Bgt=s(bie);Hno=r(Bgt,"qdqbert"),Bgt.forEach(t),Jno=r(Vxe," \u2014 "),PB=n(Vxe,"A",{href:!0});var Igt=s(PB);Yno=r(Igt,"QDQBertConfig"),Igt.forEach(t),Kno=r(Vxe," (QDQBert model)"),Vxe.forEach(t),Zno=i(L),$g=n(L,"LI",{});var Xxe=s($g);vie=n(Xxe,"STRONG",{});var Ngt=s(vie);eso=r(Ngt,"rag"),Ngt.forEach(t),oso=r(Xxe," \u2014 "),BB=n(Xxe,"A",{href:!0});var qgt=s(BB);rso=r(qgt,"RagConfig"),qgt.forEach(t),tso=r(Xxe," (RAG model)"),Xxe.forEach(t),aso=i(L),kg=n(L,"LI",{});var zxe=s(kg);Fie=n(zxe,"STRONG",{});var jgt=s(Fie);nso=r(jgt,"realm"),jgt.forEach(t),sso=r(zxe," \u2014 "),IB=n(zxe,"A",{href:!0});var Dgt=s(IB);lso=r(Dgt,"RealmConfig"),Dgt.forEach(t),iso=r(zxe," (REALM model)"),zxe.forEach(t),dso=i(L),Sg=n(L,"LI",{});var Wxe=s(Sg);Tie=n(Wxe,"STRONG",{});var Ggt=s(Tie);cso=r(Ggt,"reformer"),Ggt.forEach(t),fso=r(Wxe," \u2014 "),NB=n(Wxe,"A",{href:!0});var Ogt=s(NB);mso=r(Ogt,"ReformerConfig"),Ogt.forEach(t),gso=r(Wxe," (Reformer model)"),Wxe.forEach(t),hso=i(L),Rg=n(L,"LI",{});var Qxe=s(Rg);Mie=n(Qxe,"STRONG",{});var Vgt=s(Mie);pso=r(Vgt,"regnet"),Vgt.forEach(t),_so=r(Qxe," \u2014 "),qB=n(Qxe,"A",{href:!0});var Xgt=s(qB);uso=r(Xgt,"RegNetConfig"),Xgt.forEach(t),bso=r(Qxe," (RegNet model)"),Qxe.forEach(t),vso=i(L),Pg=n(L,"LI",{});var Uxe=s(Pg);Eie=n(Uxe,"STRONG",{});var zgt=s(Eie);Fso=r(zgt,"rembert"),zgt.forEach(t),Tso=r(Uxe," \u2014 "),jB=n(Uxe,"A",{href:!0});var Wgt=s(jB);Mso=r(Wgt,"RemBertConfig"),Wgt.forEach(t),Eso=r(Uxe," (RemBERT model)"),Uxe.forEach(t),Cso=i(L),Bg=n(L,"LI",{});var Hxe=s(Bg);Cie=n(Hxe,"STRONG",{});var Qgt=s(Cie);wso=r(Qgt,"resnet"),Qgt.forEach(t),Aso=r(Hxe," \u2014 "),DB=n(Hxe,"A",{href:!0});var Ugt=s(DB);Lso=r(Ugt,"ResNetConfig"),Ugt.forEach(t),yso=r(Hxe," (ResNet model)"),Hxe.forEach(t),xso=i(L),Ig=n(L,"LI",{});var Jxe=s(Ig);wie=n(Jxe,"STRONG",{});var Hgt=s(wie);$so=r(Hgt,"retribert"),Hgt.forEach(t),kso=r(Jxe," \u2014 "),GB=n(Jxe,"A",{href:!0});var Jgt=s(GB);Sso=r(Jgt,"RetriBertConfig"),Jgt.forEach(t),Rso=r(Jxe," (RetriBERT model)"),Jxe.forEach(t),Pso=i(L),Ng=n(L,"LI",{});var Yxe=s(Ng);Aie=n(Yxe,"STRONG",{});var Ygt=s(Aie);Bso=r(Ygt,"roberta"),Ygt.forEach(t),Iso=r(Yxe," \u2014 "),OB=n(Yxe,"A",{href:!0});var Kgt=s(OB);Nso=r(Kgt,"RobertaConfig"),Kgt.forEach(t),qso=r(Yxe," (RoBERTa model)"),Yxe.forEach(t),jso=i(L),qg=n(L,"LI",{});var Kxe=s(qg);Lie=n(Kxe,"STRONG",{});var Zgt=s(Lie);Dso=r(Zgt,"roformer"),Zgt.forEach(t),Gso=r(Kxe," \u2014 "),VB=n(Kxe,"A",{href:!0});var eht=s(VB);Oso=r(eht,"RoFormerConfig"),eht.forEach(t),Vso=r(Kxe," (RoFormer model)"),Kxe.forEach(t),Xso=i(L),jg=n(L,"LI",{});var Zxe=s(jg);yie=n(Zxe,"STRONG",{});var oht=s(yie);zso=r(oht,"segformer"),oht.forEach(t),Wso=r(Zxe," \u2014 "),XB=n(Zxe,"A",{href:!0});var rht=s(XB);Qso=r(rht,"SegformerConfig"),rht.forEach(t),Uso=r(Zxe," (SegFormer model)"),Zxe.forEach(t),Hso=i(L),Dg=n(L,"LI",{});var e$e=s(Dg);xie=n(e$e,"STRONG",{});var tht=s(xie);Jso=r(tht,"sew"),tht.forEach(t),Yso=r(e$e," \u2014 "),zB=n(e$e,"A",{href:!0});var aht=s(zB);Kso=r(aht,"SEWConfig"),aht.forEach(t),Zso=r(e$e," (SEW model)"),e$e.forEach(t),elo=i(L),Gg=n(L,"LI",{});var o$e=s(Gg);$ie=n(o$e,"STRONG",{});var nht=s($ie);olo=r(nht,"sew-d"),nht.forEach(t),rlo=r(o$e," \u2014 "),WB=n(o$e,"A",{href:!0});var sht=s(WB);tlo=r(sht,"SEWDConfig"),sht.forEach(t),alo=r(o$e," (SEW-D model)"),o$e.forEach(t),nlo=i(L),Og=n(L,"LI",{});var r$e=s(Og);kie=n(r$e,"STRONG",{});var lht=s(kie);slo=r(lht,"speech-encoder-decoder"),lht.forEach(t),llo=r(r$e," \u2014 "),QB=n(r$e,"A",{href:!0});var iht=s(QB);ilo=r(iht,"SpeechEncoderDecoderConfig"),iht.forEach(t),dlo=r(r$e," (Speech Encoder decoder model)"),r$e.forEach(t),clo=i(L),Vg=n(L,"LI",{});var t$e=s(Vg);Sie=n(t$e,"STRONG",{});var dht=s(Sie);flo=r(dht,"speech_to_text"),dht.forEach(t),mlo=r(t$e," \u2014 "),UB=n(t$e,"A",{href:!0});var cht=s(UB);glo=r(cht,"Speech2TextConfig"),cht.forEach(t),hlo=r(t$e," (Speech2Text model)"),t$e.forEach(t),plo=i(L),Xg=n(L,"LI",{});var a$e=s(Xg);Rie=n(a$e,"STRONG",{});var fht=s(Rie);_lo=r(fht,"speech_to_text_2"),fht.forEach(t),ulo=r(a$e," \u2014 "),HB=n(a$e,"A",{href:!0});var mht=s(HB);blo=r(mht,"Speech2Text2Config"),mht.forEach(t),vlo=r(a$e," (Speech2Text2 model)"),a$e.forEach(t),Flo=i(L),zg=n(L,"LI",{});var n$e=s(zg);Pie=n(n$e,"STRONG",{});var ght=s(Pie);Tlo=r(ght,"splinter"),ght.forEach(t),Mlo=r(n$e," \u2014 "),JB=n(n$e,"A",{href:!0});var hht=s(JB);Elo=r(hht,"SplinterConfig"),hht.forEach(t),Clo=r(n$e," (Splinter model)"),n$e.forEach(t),wlo=i(L),Wg=n(L,"LI",{});var s$e=s(Wg);Bie=n(s$e,"STRONG",{});var pht=s(Bie);Alo=r(pht,"squeezebert"),pht.forEach(t),Llo=r(s$e," \u2014 "),YB=n(s$e,"A",{href:!0});var _ht=s(YB);ylo=r(_ht,"SqueezeBertConfig"),_ht.forEach(t),xlo=r(s$e," (SqueezeBERT model)"),s$e.forEach(t),$lo=i(L),Qg=n(L,"LI",{});var l$e=s(Qg);Iie=n(l$e,"STRONG",{});var uht=s(Iie);klo=r(uht,"swin"),uht.forEach(t),Slo=r(l$e," \u2014 "),KB=n(l$e,"A",{href:!0});var bht=s(KB);Rlo=r(bht,"SwinConfig"),bht.forEach(t),Plo=r(l$e," (Swin Transformer model)"),l$e.forEach(t),Blo=i(L),Ug=n(L,"LI",{});var i$e=s(Ug);Nie=n(i$e,"STRONG",{});var vht=s(Nie);Ilo=r(vht,"swinv2"),vht.forEach(t),Nlo=r(i$e," \u2014 "),ZB=n(i$e,"A",{href:!0});var Fht=s(ZB);qlo=r(Fht,"Swinv2Config"),Fht.forEach(t),jlo=r(i$e," (Swin Transformer V2 model)"),i$e.forEach(t),Dlo=i(L),Hg=n(L,"LI",{});var d$e=s(Hg);qie=n(d$e,"STRONG",{});var Tht=s(qie);Glo=r(Tht,"t5"),Tht.forEach(t),Olo=r(d$e," \u2014 "),eI=n(d$e,"A",{href:!0});var Mht=s(eI);Vlo=r(Mht,"T5Config"),Mht.forEach(t),Xlo=r(d$e," (T5 model)"),d$e.forEach(t),zlo=i(L),Jg=n(L,"LI",{});var c$e=s(Jg);jie=n(c$e,"STRONG",{});var Eht=s(jie);Wlo=r(Eht,"tapas"),Eht.forEach(t),Qlo=r(c$e," \u2014 "),oI=n(c$e,"A",{href:!0});var Cht=s(oI);Ulo=r(Cht,"TapasConfig"),Cht.forEach(t),Hlo=r(c$e," (TAPAS model)"),c$e.forEach(t),Jlo=i(L),Yg=n(L,"LI",{});var f$e=s(Yg);Die=n(f$e,"STRONG",{});var wht=s(Die);Ylo=r(wht,"trajectory_transformer"),wht.forEach(t),Klo=r(f$e," \u2014 "),rI=n(f$e,"A",{href:!0});var Aht=s(rI);Zlo=r(Aht,"TrajectoryTransformerConfig"),Aht.forEach(t),eio=r(f$e," (Trajectory Transformer model)"),f$e.forEach(t),oio=i(L),Kg=n(L,"LI",{});var m$e=s(Kg);Gie=n(m$e,"STRONG",{});var Lht=s(Gie);rio=r(Lht,"transfo-xl"),Lht.forEach(t),tio=r(m$e," \u2014 "),tI=n(m$e,"A",{href:!0});var yht=s(tI);aio=r(yht,"TransfoXLConfig"),yht.forEach(t),nio=r(m$e," (Transformer-XL model)"),m$e.forEach(t),sio=i(L),Zg=n(L,"LI",{});var g$e=s(Zg);Oie=n(g$e,"STRONG",{});var xht=s(Oie);lio=r(xht,"trocr"),xht.forEach(t),iio=r(g$e," \u2014 "),aI=n(g$e,"A",{href:!0});var $ht=s(aI);dio=r($ht,"TrOCRConfig"),$ht.forEach(t),cio=r(g$e," (TrOCR model)"),g$e.forEach(t),fio=i(L),eh=n(L,"LI",{});var h$e=s(eh);Vie=n(h$e,"STRONG",{});var kht=s(Vie);mio=r(kht,"unispeech"),kht.forEach(t),gio=r(h$e," \u2014 "),nI=n(h$e,"A",{href:!0});var Sht=s(nI);hio=r(Sht,"UniSpeechConfig"),Sht.forEach(t),pio=r(h$e," (UniSpeech model)"),h$e.forEach(t),_io=i(L),oh=n(L,"LI",{});var p$e=s(oh);Xie=n(p$e,"STRONG",{});var Rht=s(Xie);uio=r(Rht,"unispeech-sat"),Rht.forEach(t),bio=r(p$e," \u2014 "),sI=n(p$e,"A",{href:!0});var Pht=s(sI);vio=r(Pht,"UniSpeechSatConfig"),Pht.forEach(t),Fio=r(p$e," (UniSpeechSat model)"),p$e.forEach(t),Tio=i(L),rh=n(L,"LI",{});var _$e=s(rh);zie=n(_$e,"STRONG",{});var Bht=s(zie);Mio=r(Bht,"van"),Bht.forEach(t),Eio=r(_$e," \u2014 "),lI=n(_$e,"A",{href:!0});var Iht=s(lI);Cio=r(Iht,"VanConfig"),Iht.forEach(t),wio=r(_$e," (VAN model)"),_$e.forEach(t),Aio=i(L),th=n(L,"LI",{});var u$e=s(th);Wie=n(u$e,"STRONG",{});var Nht=s(Wie);Lio=r(Nht,"videomae"),Nht.forEach(t),yio=r(u$e," \u2014 "),iI=n(u$e,"A",{href:!0});var qht=s(iI);xio=r(qht,"VideoMAEConfig"),qht.forEach(t),$io=r(u$e," (VideoMAE model)"),u$e.forEach(t),kio=i(L),ah=n(L,"LI",{});var b$e=s(ah);Qie=n(b$e,"STRONG",{});var jht=s(Qie);Sio=r(jht,"vilt"),jht.forEach(t),Rio=r(b$e," \u2014 "),dI=n(b$e,"A",{href:!0});var Dht=s(dI);Pio=r(Dht,"ViltConfig"),Dht.forEach(t),Bio=r(b$e," (ViLT model)"),b$e.forEach(t),Iio=i(L),nh=n(L,"LI",{});var v$e=s(nh);Uie=n(v$e,"STRONG",{});var Ght=s(Uie);Nio=r(Ght,"vision-encoder-decoder"),Ght.forEach(t),qio=r(v$e," \u2014 "),cI=n(v$e,"A",{href:!0});var Oht=s(cI);jio=r(Oht,"VisionEncoderDecoderConfig"),Oht.forEach(t),Dio=r(v$e," (Vision Encoder decoder model)"),v$e.forEach(t),Gio=i(L),sh=n(L,"LI",{});var F$e=s(sh);Hie=n(F$e,"STRONG",{});var Vht=s(Hie);Oio=r(Vht,"vision-text-dual-encoder"),Vht.forEach(t),Vio=r(F$e," \u2014 "),fI=n(F$e,"A",{href:!0});var Xht=s(fI);Xio=r(Xht,"VisionTextDualEncoderConfig"),Xht.forEach(t),zio=r(F$e," (VisionTextDualEncoder model)"),F$e.forEach(t),Wio=i(L),lh=n(L,"LI",{});var T$e=s(lh);Jie=n(T$e,"STRONG",{});var zht=s(Jie);Qio=r(zht,"visual_bert"),zht.forEach(t),Uio=r(T$e," \u2014 "),mI=n(T$e,"A",{href:!0});var Wht=s(mI);Hio=r(Wht,"VisualBertConfig"),Wht.forEach(t),Jio=r(T$e," (VisualBERT model)"),T$e.forEach(t),Yio=i(L),ih=n(L,"LI",{});var M$e=s(ih);Yie=n(M$e,"STRONG",{});var Qht=s(Yie);Kio=r(Qht,"vit"),Qht.forEach(t),Zio=r(M$e," \u2014 "),gI=n(M$e,"A",{href:!0});var Uht=s(gI);edo=r(Uht,"ViTConfig"),Uht.forEach(t),odo=r(M$e," (ViT model)"),M$e.forEach(t),rdo=i(L),dh=n(L,"LI",{});var E$e=s(dh);Kie=n(E$e,"STRONG",{});var Hht=s(Kie);tdo=r(Hht,"vit_mae"),Hht.forEach(t),ado=r(E$e," \u2014 "),hI=n(E$e,"A",{href:!0});var Jht=s(hI);ndo=r(Jht,"ViTMAEConfig"),Jht.forEach(t),sdo=r(E$e," (ViTMAE model)"),E$e.forEach(t),ldo=i(L),ch=n(L,"LI",{});var C$e=s(ch);Zie=n(C$e,"STRONG",{});var Yht=s(Zie);ido=r(Yht,"wav2vec2"),Yht.forEach(t),ddo=r(C$e," \u2014 "),pI=n(C$e,"A",{href:!0});var Kht=s(pI);cdo=r(Kht,"Wav2Vec2Config"),Kht.forEach(t),fdo=r(C$e," (Wav2Vec2 model)"),C$e.forEach(t),mdo=i(L),fh=n(L,"LI",{});var w$e=s(fh);ede=n(w$e,"STRONG",{});var Zht=s(ede);gdo=r(Zht,"wav2vec2-conformer"),Zht.forEach(t),hdo=r(w$e," \u2014 "),_I=n(w$e,"A",{href:!0});var ept=s(_I);pdo=r(ept,"Wav2Vec2ConformerConfig"),ept.forEach(t),_do=r(w$e," (Wav2Vec2-Conformer model)"),w$e.forEach(t),udo=i(L),mh=n(L,"LI",{});var A$e=s(mh);ode=n(A$e,"STRONG",{});var opt=s(ode);bdo=r(opt,"wavlm"),opt.forEach(t),vdo=r(A$e," \u2014 "),uI=n(A$e,"A",{href:!0});var rpt=s(uI);Fdo=r(rpt,"WavLMConfig"),rpt.forEach(t),Tdo=r(A$e," (WavLM model)"),A$e.forEach(t),Mdo=i(L),gh=n(L,"LI",{});var L$e=s(gh);rde=n(L$e,"STRONG",{});var tpt=s(rde);Edo=r(tpt,"xglm"),tpt.forEach(t),Cdo=r(L$e," \u2014 "),bI=n(L$e,"A",{href:!0});var apt=s(bI);wdo=r(apt,"XGLMConfig"),apt.forEach(t),Ado=r(L$e," (XGLM model)"),L$e.forEach(t),Ldo=i(L),hh=n(L,"LI",{});var y$e=s(hh);tde=n(y$e,"STRONG",{});var npt=s(tde);ydo=r(npt,"xlm"),npt.forEach(t),xdo=r(y$e," \u2014 "),vI=n(y$e,"A",{href:!0});var spt=s(vI);$do=r(spt,"XLMConfig"),spt.forEach(t),kdo=r(y$e," (XLM model)"),y$e.forEach(t),Sdo=i(L),ph=n(L,"LI",{});var x$e=s(ph);ade=n(x$e,"STRONG",{});var lpt=s(ade);Rdo=r(lpt,"xlm-prophetnet"),lpt.forEach(t),Pdo=r(x$e," \u2014 "),FI=n(x$e,"A",{href:!0});var ipt=s(FI);Bdo=r(ipt,"XLMProphetNetConfig"),ipt.forEach(t),Ido=r(x$e," (XLM-ProphetNet model)"),x$e.forEach(t),Ndo=i(L),_h=n(L,"LI",{});var $$e=s(_h);nde=n($$e,"STRONG",{});var dpt=s(nde);qdo=r(dpt,"xlm-roberta"),dpt.forEach(t),jdo=r($$e," \u2014 "),TI=n($$e,"A",{href:!0});var cpt=s(TI);Ddo=r(cpt,"XLMRobertaConfig"),cpt.forEach(t),Gdo=r($$e," (XLM-RoBERTa model)"),$$e.forEach(t),Odo=i(L),uh=n(L,"LI",{});var k$e=s(uh);sde=n(k$e,"STRONG",{});var fpt=s(sde);Vdo=r(fpt,"xlm-roberta-xl"),fpt.forEach(t),Xdo=r(k$e," \u2014 "),MI=n(k$e,"A",{href:!0});var mpt=s(MI);zdo=r(mpt,"XLMRobertaXLConfig"),mpt.forEach(t),Wdo=r(k$e," (XLM-RoBERTa-XL model)"),k$e.forEach(t),Qdo=i(L),bh=n(L,"LI",{});var S$e=s(bh);lde=n(S$e,"STRONG",{});var gpt=s(lde);Udo=r(gpt,"xlnet"),gpt.forEach(t),Hdo=r(S$e," \u2014 "),EI=n(S$e,"A",{href:!0});var hpt=s(EI);Jdo=r(hpt,"XLNetConfig"),hpt.forEach(t),Ydo=r(S$e," (XLNet model)"),S$e.forEach(t),Kdo=i(L),vh=n(L,"LI",{});var R$e=s(vh);ide=n(R$e,"STRONG",{});var ppt=s(ide);Zdo=r(ppt,"yolos"),ppt.forEach(t),eco=r(R$e," \u2014 "),CI=n(R$e,"A",{href:!0});var _pt=s(CI);oco=r(_pt,"YolosConfig"),_pt.forEach(t),rco=r(R$e," (YOLOS model)"),R$e.forEach(t),tco=i(L),Fh=n(L,"LI",{});var P$e=s(Fh);dde=n(P$e,"STRONG",{});var upt=s(dde);aco=r(upt,"yoso"),upt.forEach(t),nco=r(P$e," \u2014 "),wI=n(P$e,"A",{href:!0});var bpt=s(wI);sco=r(bpt,"YosoConfig"),bpt.forEach(t),lco=r(P$e," (YOSO model)"),P$e.forEach(t),L.forEach(t),ico=i(ct),T(Th.$$.fragment,ct),ct.forEach(t),dco=i(dt),Mh=n(dt,"DIV",{class:!0});var aJe=s(Mh);T(M8.$$.fragment,aJe),cco=i(aJe),cde=n(aJe,"P",{});var vpt=s(cde);fco=r(vpt,"Register a new configuration for this class."),vpt.forEach(t),aJe.forEach(t),dt.forEach(t),oUe=i(f),Ki=n(f,"H2",{class:!0});var nJe=s(Ki);Eh=n(nJe,"A",{id:!0,class:!0,href:!0});var Fpt=s(Eh);fde=n(Fpt,"SPAN",{});var Tpt=s(fde);T(E8.$$.fragment,Tpt),Tpt.forEach(t),Fpt.forEach(t),mco=i(nJe),mde=n(nJe,"SPAN",{});var Mpt=s(mde);gco=r(Mpt,"AutoTokenizer"),Mpt.forEach(t),nJe.forEach(t),rUe=i(f),xo=n(f,"DIV",{class:!0});var cl=s(xo);T(C8.$$.fragment,cl),hco=i(cl),w8=n(cl,"P",{});var sJe=s(w8);pco=r(sJe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),AI=n(sJe,"A",{href:!0});var Ept=s(AI);_co=r(Ept,"AutoTokenizer.from_pretrained()"),Ept.forEach(t),uco=r(sJe," class method."),sJe.forEach(t),bco=i(cl),A8=n(cl,"P",{});var lJe=s(A8);vco=r(lJe,"This class cannot be instantiated directly using "),gde=n(lJe,"CODE",{});var Cpt=s(gde);Fco=r(Cpt,"__init__()"),Cpt.forEach(t),Tco=r(lJe," (throws an error)."),lJe.forEach(t),Mco=i(cl),Sr=n(cl,"DIV",{class:!0});var fl=s(Sr);T(L8.$$.fragment,fl),Eco=i(fl),hde=n(fl,"P",{});var wpt=s(hde);Cco=r(wpt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),wpt.forEach(t),wco=i(fl),Ga=n(fl,"P",{});var mL=s(Ga);Aco=r(mL,"The tokenizer class to instantiate is selected based on the "),pde=n(mL,"CODE",{});var Apt=s(pde);Lco=r(Apt,"model_type"),Apt.forEach(t),yco=r(mL,` property of the config object (either
passed as an argument or loaded from `),_de=n(mL,"CODE",{});var Lpt=s(_de);xco=r(Lpt,"pretrained_model_name_or_path"),Lpt.forEach(t),$co=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ude=n(mL,"CODE",{});var ypt=s(ude);kco=r(ypt,"pretrained_model_name_or_path"),ypt.forEach(t),Sco=r(mL,":"),mL.forEach(t),Rco=i(fl),k=n(fl,"UL",{});var S=s(k);Hn=n(S,"LI",{});var XS=s(Hn);bde=n(XS,"STRONG",{});var xpt=s(bde);Pco=r(xpt,"albert"),xpt.forEach(t),Bco=r(XS," \u2014 "),LI=n(XS,"A",{href:!0});var $pt=s(LI);Ico=r($pt,"AlbertTokenizer"),$pt.forEach(t),Nco=r(XS," or "),yI=n(XS,"A",{href:!0});var kpt=s(yI);qco=r(kpt,"AlbertTokenizerFast"),kpt.forEach(t),jco=r(XS," (ALBERT model)"),XS.forEach(t),Dco=i(S),Jn=n(S,"LI",{});var zS=s(Jn);vde=n(zS,"STRONG",{});var Spt=s(vde);Gco=r(Spt,"bart"),Spt.forEach(t),Oco=r(zS," \u2014 "),xI=n(zS,"A",{href:!0});var Rpt=s(xI);Vco=r(Rpt,"BartTokenizer"),Rpt.forEach(t),Xco=r(zS," or "),$I=n(zS,"A",{href:!0});var Ppt=s($I);zco=r(Ppt,"BartTokenizerFast"),Ppt.forEach(t),Wco=r(zS," (BART model)"),zS.forEach(t),Qco=i(S),Yn=n(S,"LI",{});var WS=s(Yn);Fde=n(WS,"STRONG",{});var Bpt=s(Fde);Uco=r(Bpt,"barthez"),Bpt.forEach(t),Hco=r(WS," \u2014 "),kI=n(WS,"A",{href:!0});var Ipt=s(kI);Jco=r(Ipt,"BarthezTokenizer"),Ipt.forEach(t),Yco=r(WS," or "),SI=n(WS,"A",{href:!0});var Npt=s(SI);Kco=r(Npt,"BarthezTokenizerFast"),Npt.forEach(t),Zco=r(WS," (BARThez model)"),WS.forEach(t),efo=i(S),Ch=n(S,"LI",{});var B$e=s(Ch);Tde=n(B$e,"STRONG",{});var qpt=s(Tde);ofo=r(qpt,"bartpho"),qpt.forEach(t),rfo=r(B$e," \u2014 "),RI=n(B$e,"A",{href:!0});var jpt=s(RI);tfo=r(jpt,"BartphoTokenizer"),jpt.forEach(t),afo=r(B$e," (BARTpho model)"),B$e.forEach(t),nfo=i(S),Kn=n(S,"LI",{});var QS=s(Kn);Mde=n(QS,"STRONG",{});var Dpt=s(Mde);sfo=r(Dpt,"bert"),Dpt.forEach(t),lfo=r(QS," \u2014 "),PI=n(QS,"A",{href:!0});var Gpt=s(PI);ifo=r(Gpt,"BertTokenizer"),Gpt.forEach(t),dfo=r(QS," or "),BI=n(QS,"A",{href:!0});var Opt=s(BI);cfo=r(Opt,"BertTokenizerFast"),Opt.forEach(t),ffo=r(QS," (BERT model)"),QS.forEach(t),mfo=i(S),wh=n(S,"LI",{});var I$e=s(wh);Ede=n(I$e,"STRONG",{});var Vpt=s(Ede);gfo=r(Vpt,"bert-generation"),Vpt.forEach(t),hfo=r(I$e," \u2014 "),II=n(I$e,"A",{href:!0});var Xpt=s(II);pfo=r(Xpt,"BertGenerationTokenizer"),Xpt.forEach(t),_fo=r(I$e," (Bert Generation model)"),I$e.forEach(t),ufo=i(S),Ah=n(S,"LI",{});var N$e=s(Ah);Cde=n(N$e,"STRONG",{});var zpt=s(Cde);bfo=r(zpt,"bert-japanese"),zpt.forEach(t),vfo=r(N$e," \u2014 "),NI=n(N$e,"A",{href:!0});var Wpt=s(NI);Ffo=r(Wpt,"BertJapaneseTokenizer"),Wpt.forEach(t),Tfo=r(N$e," (BertJapanese model)"),N$e.forEach(t),Mfo=i(S),Lh=n(S,"LI",{});var q$e=s(Lh);wde=n(q$e,"STRONG",{});var Qpt=s(wde);Efo=r(Qpt,"bertweet"),Qpt.forEach(t),Cfo=r(q$e," \u2014 "),qI=n(q$e,"A",{href:!0});var Upt=s(qI);wfo=r(Upt,"BertweetTokenizer"),Upt.forEach(t),Afo=r(q$e," (BERTweet model)"),q$e.forEach(t),Lfo=i(S),Zn=n(S,"LI",{});var US=s(Zn);Ade=n(US,"STRONG",{});var Hpt=s(Ade);yfo=r(Hpt,"big_bird"),Hpt.forEach(t),xfo=r(US," \u2014 "),jI=n(US,"A",{href:!0});var Jpt=s(jI);$fo=r(Jpt,"BigBirdTokenizer"),Jpt.forEach(t),kfo=r(US," or "),DI=n(US,"A",{href:!0});var Ypt=s(DI);Sfo=r(Ypt,"BigBirdTokenizerFast"),Ypt.forEach(t),Rfo=r(US," (BigBird model)"),US.forEach(t),Pfo=i(S),es=n(S,"LI",{});var HS=s(es);Lde=n(HS,"STRONG",{});var Kpt=s(Lde);Bfo=r(Kpt,"bigbird_pegasus"),Kpt.forEach(t),Ifo=r(HS," \u2014 "),GI=n(HS,"A",{href:!0});var Zpt=s(GI);Nfo=r(Zpt,"PegasusTokenizer"),Zpt.forEach(t),qfo=r(HS," or "),OI=n(HS,"A",{href:!0});var e_t=s(OI);jfo=r(e_t,"PegasusTokenizerFast"),e_t.forEach(t),Dfo=r(HS," (BigBird-Pegasus model)"),HS.forEach(t),Gfo=i(S),os=n(S,"LI",{});var JS=s(os);yde=n(JS,"STRONG",{});var o_t=s(yde);Ofo=r(o_t,"blenderbot"),o_t.forEach(t),Vfo=r(JS," \u2014 "),VI=n(JS,"A",{href:!0});var r_t=s(VI);Xfo=r(r_t,"BlenderbotTokenizer"),r_t.forEach(t),zfo=r(JS," or "),XI=n(JS,"A",{href:!0});var t_t=s(XI);Wfo=r(t_t,"BlenderbotTokenizerFast"),t_t.forEach(t),Qfo=r(JS," (Blenderbot model)"),JS.forEach(t),Ufo=i(S),yh=n(S,"LI",{});var j$e=s(yh);xde=n(j$e,"STRONG",{});var a_t=s(xde);Hfo=r(a_t,"blenderbot-small"),a_t.forEach(t),Jfo=r(j$e," \u2014 "),zI=n(j$e,"A",{href:!0});var n_t=s(zI);Yfo=r(n_t,"BlenderbotSmallTokenizer"),n_t.forEach(t),Kfo=r(j$e," (BlenderbotSmall model)"),j$e.forEach(t),Zfo=i(S),xh=n(S,"LI",{});var D$e=s(xh);$de=n(D$e,"STRONG",{});var s_t=s($de);emo=r(s_t,"bloom"),s_t.forEach(t),omo=r(D$e," \u2014 "),WI=n(D$e,"A",{href:!0});var l_t=s(WI);rmo=r(l_t,"BloomTokenizerFast"),l_t.forEach(t),tmo=r(D$e," (BLOOM model)"),D$e.forEach(t),amo=i(S),$h=n(S,"LI",{});var G$e=s($h);kde=n(G$e,"STRONG",{});var i_t=s(kde);nmo=r(i_t,"byt5"),i_t.forEach(t),smo=r(G$e," \u2014 "),QI=n(G$e,"A",{href:!0});var d_t=s(QI);lmo=r(d_t,"ByT5Tokenizer"),d_t.forEach(t),imo=r(G$e," (ByT5 model)"),G$e.forEach(t),dmo=i(S),rs=n(S,"LI",{});var YS=s(rs);Sde=n(YS,"STRONG",{});var c_t=s(Sde);cmo=r(c_t,"camembert"),c_t.forEach(t),fmo=r(YS," \u2014 "),UI=n(YS,"A",{href:!0});var f_t=s(UI);mmo=r(f_t,"CamembertTokenizer"),f_t.forEach(t),gmo=r(YS," or "),HI=n(YS,"A",{href:!0});var m_t=s(HI);hmo=r(m_t,"CamembertTokenizerFast"),m_t.forEach(t),pmo=r(YS," (CamemBERT model)"),YS.forEach(t),_mo=i(S),kh=n(S,"LI",{});var O$e=s(kh);Rde=n(O$e,"STRONG",{});var g_t=s(Rde);umo=r(g_t,"canine"),g_t.forEach(t),bmo=r(O$e," \u2014 "),JI=n(O$e,"A",{href:!0});var h_t=s(JI);vmo=r(h_t,"CanineTokenizer"),h_t.forEach(t),Fmo=r(O$e," (CANINE model)"),O$e.forEach(t),Tmo=i(S),ts=n(S,"LI",{});var KS=s(ts);Pde=n(KS,"STRONG",{});var p_t=s(Pde);Mmo=r(p_t,"clip"),p_t.forEach(t),Emo=r(KS," \u2014 "),YI=n(KS,"A",{href:!0});var __t=s(YI);Cmo=r(__t,"CLIPTokenizer"),__t.forEach(t),wmo=r(KS," or "),KI=n(KS,"A",{href:!0});var u_t=s(KI);Amo=r(u_t,"CLIPTokenizerFast"),u_t.forEach(t),Lmo=r(KS," (CLIP model)"),KS.forEach(t),ymo=i(S),as=n(S,"LI",{});var ZS=s(as);Bde=n(ZS,"STRONG",{});var b_t=s(Bde);xmo=r(b_t,"codegen"),b_t.forEach(t),$mo=r(ZS," \u2014 "),ZI=n(ZS,"A",{href:!0});var v_t=s(ZI);kmo=r(v_t,"CodeGenTokenizer"),v_t.forEach(t),Smo=r(ZS," or "),eN=n(ZS,"A",{href:!0});var F_t=s(eN);Rmo=r(F_t,"CodeGenTokenizerFast"),F_t.forEach(t),Pmo=r(ZS," (CodeGen model)"),ZS.forEach(t),Bmo=i(S),ns=n(S,"LI",{});var eR=s(ns);Ide=n(eR,"STRONG",{});var T_t=s(Ide);Imo=r(T_t,"convbert"),T_t.forEach(t),Nmo=r(eR," \u2014 "),oN=n(eR,"A",{href:!0});var M_t=s(oN);qmo=r(M_t,"ConvBertTokenizer"),M_t.forEach(t),jmo=r(eR," or "),rN=n(eR,"A",{href:!0});var E_t=s(rN);Dmo=r(E_t,"ConvBertTokenizerFast"),E_t.forEach(t),Gmo=r(eR," (ConvBERT model)"),eR.forEach(t),Omo=i(S),ss=n(S,"LI",{});var oR=s(ss);Nde=n(oR,"STRONG",{});var C_t=s(Nde);Vmo=r(C_t,"cpm"),C_t.forEach(t),Xmo=r(oR," \u2014 "),tN=n(oR,"A",{href:!0});var w_t=s(tN);zmo=r(w_t,"CpmTokenizer"),w_t.forEach(t),Wmo=r(oR," or "),aN=n(oR,"A",{href:!0});var A_t=s(aN);Qmo=r(A_t,"CpmTokenizerFast"),A_t.forEach(t),Umo=r(oR," (CPM model)"),oR.forEach(t),Hmo=i(S),Sh=n(S,"LI",{});var V$e=s(Sh);qde=n(V$e,"STRONG",{});var L_t=s(qde);Jmo=r(L_t,"ctrl"),L_t.forEach(t),Ymo=r(V$e," \u2014 "),nN=n(V$e,"A",{href:!0});var y_t=s(nN);Kmo=r(y_t,"CTRLTokenizer"),y_t.forEach(t),Zmo=r(V$e," (CTRL model)"),V$e.forEach(t),ego=i(S),ls=n(S,"LI",{});var rR=s(ls);jde=n(rR,"STRONG",{});var x_t=s(jde);ogo=r(x_t,"data2vec-text"),x_t.forEach(t),rgo=r(rR," \u2014 "),sN=n(rR,"A",{href:!0});var $_t=s(sN);tgo=r($_t,"RobertaTokenizer"),$_t.forEach(t),ago=r(rR," or "),lN=n(rR,"A",{href:!0});var k_t=s(lN);ngo=r(k_t,"RobertaTokenizerFast"),k_t.forEach(t),sgo=r(rR," (Data2VecText model)"),rR.forEach(t),lgo=i(S),is=n(S,"LI",{});var tR=s(is);Dde=n(tR,"STRONG",{});var S_t=s(Dde);igo=r(S_t,"deberta"),S_t.forEach(t),dgo=r(tR," \u2014 "),iN=n(tR,"A",{href:!0});var R_t=s(iN);cgo=r(R_t,"DebertaTokenizer"),R_t.forEach(t),fgo=r(tR," or "),dN=n(tR,"A",{href:!0});var P_t=s(dN);mgo=r(P_t,"DebertaTokenizerFast"),P_t.forEach(t),ggo=r(tR," (DeBERTa model)"),tR.forEach(t),hgo=i(S),ds=n(S,"LI",{});var aR=s(ds);Gde=n(aR,"STRONG",{});var B_t=s(Gde);pgo=r(B_t,"deberta-v2"),B_t.forEach(t),_go=r(aR," \u2014 "),cN=n(aR,"A",{href:!0});var I_t=s(cN);ugo=r(I_t,"DebertaV2Tokenizer"),I_t.forEach(t),bgo=r(aR," or "),fN=n(aR,"A",{href:!0});var N_t=s(fN);vgo=r(N_t,"DebertaV2TokenizerFast"),N_t.forEach(t),Fgo=r(aR," (DeBERTa-v2 model)"),aR.forEach(t),Tgo=i(S),cs=n(S,"LI",{});var nR=s(cs);Ode=n(nR,"STRONG",{});var q_t=s(Ode);Mgo=r(q_t,"distilbert"),q_t.forEach(t),Ego=r(nR," \u2014 "),mN=n(nR,"A",{href:!0});var j_t=s(mN);Cgo=r(j_t,"DistilBertTokenizer"),j_t.forEach(t),wgo=r(nR," or "),gN=n(nR,"A",{href:!0});var D_t=s(gN);Ago=r(D_t,"DistilBertTokenizerFast"),D_t.forEach(t),Lgo=r(nR," (DistilBERT model)"),nR.forEach(t),ygo=i(S),fs=n(S,"LI",{});var sR=s(fs);Vde=n(sR,"STRONG",{});var G_t=s(Vde);xgo=r(G_t,"dpr"),G_t.forEach(t),$go=r(sR," \u2014 "),hN=n(sR,"A",{href:!0});var O_t=s(hN);kgo=r(O_t,"DPRQuestionEncoderTokenizer"),O_t.forEach(t),Sgo=r(sR," or "),pN=n(sR,"A",{href:!0});var V_t=s(pN);Rgo=r(V_t,"DPRQuestionEncoderTokenizerFast"),V_t.forEach(t),Pgo=r(sR," (DPR model)"),sR.forEach(t),Bgo=i(S),ms=n(S,"LI",{});var lR=s(ms);Xde=n(lR,"STRONG",{});var X_t=s(Xde);Igo=r(X_t,"electra"),X_t.forEach(t),Ngo=r(lR," \u2014 "),_N=n(lR,"A",{href:!0});var z_t=s(_N);qgo=r(z_t,"ElectraTokenizer"),z_t.forEach(t),jgo=r(lR," or "),uN=n(lR,"A",{href:!0});var W_t=s(uN);Dgo=r(W_t,"ElectraTokenizerFast"),W_t.forEach(t),Ggo=r(lR," (ELECTRA model)"),lR.forEach(t),Ogo=i(S),Rh=n(S,"LI",{});var X$e=s(Rh);zde=n(X$e,"STRONG",{});var Q_t=s(zde);Vgo=r(Q_t,"flaubert"),Q_t.forEach(t),Xgo=r(X$e," \u2014 "),bN=n(X$e,"A",{href:!0});var U_t=s(bN);zgo=r(U_t,"FlaubertTokenizer"),U_t.forEach(t),Wgo=r(X$e," (FlauBERT model)"),X$e.forEach(t),Qgo=i(S),gs=n(S,"LI",{});var iR=s(gs);Wde=n(iR,"STRONG",{});var H_t=s(Wde);Ugo=r(H_t,"fnet"),H_t.forEach(t),Hgo=r(iR," \u2014 "),vN=n(iR,"A",{href:!0});var J_t=s(vN);Jgo=r(J_t,"FNetTokenizer"),J_t.forEach(t),Ygo=r(iR," or "),FN=n(iR,"A",{href:!0});var Y_t=s(FN);Kgo=r(Y_t,"FNetTokenizerFast"),Y_t.forEach(t),Zgo=r(iR," (FNet model)"),iR.forEach(t),eho=i(S),Ph=n(S,"LI",{});var z$e=s(Ph);Qde=n(z$e,"STRONG",{});var K_t=s(Qde);oho=r(K_t,"fsmt"),K_t.forEach(t),rho=r(z$e," \u2014 "),TN=n(z$e,"A",{href:!0});var Z_t=s(TN);tho=r(Z_t,"FSMTTokenizer"),Z_t.forEach(t),aho=r(z$e," (FairSeq Machine-Translation model)"),z$e.forEach(t),nho=i(S),hs=n(S,"LI",{});var dR=s(hs);Ude=n(dR,"STRONG",{});var eut=s(Ude);sho=r(eut,"funnel"),eut.forEach(t),lho=r(dR," \u2014 "),MN=n(dR,"A",{href:!0});var out=s(MN);iho=r(out,"FunnelTokenizer"),out.forEach(t),dho=r(dR," or "),EN=n(dR,"A",{href:!0});var rut=s(EN);cho=r(rut,"FunnelTokenizerFast"),rut.forEach(t),fho=r(dR," (Funnel Transformer model)"),dR.forEach(t),mho=i(S),ps=n(S,"LI",{});var cR=s(ps);Hde=n(cR,"STRONG",{});var tut=s(Hde);gho=r(tut,"gpt2"),tut.forEach(t),hho=r(cR," \u2014 "),CN=n(cR,"A",{href:!0});var aut=s(CN);pho=r(aut,"GPT2Tokenizer"),aut.forEach(t),_ho=r(cR," or "),wN=n(cR,"A",{href:!0});var nut=s(wN);uho=r(nut,"GPT2TokenizerFast"),nut.forEach(t),bho=r(cR," (OpenAI GPT-2 model)"),cR.forEach(t),vho=i(S),_s=n(S,"LI",{});var fR=s(_s);Jde=n(fR,"STRONG",{});var sut=s(Jde);Fho=r(sut,"gpt_neo"),sut.forEach(t),Tho=r(fR," \u2014 "),AN=n(fR,"A",{href:!0});var lut=s(AN);Mho=r(lut,"GPT2Tokenizer"),lut.forEach(t),Eho=r(fR," or "),LN=n(fR,"A",{href:!0});var iut=s(LN);Cho=r(iut,"GPT2TokenizerFast"),iut.forEach(t),who=r(fR," (GPT Neo model)"),fR.forEach(t),Aho=i(S),Bh=n(S,"LI",{});var W$e=s(Bh);Yde=n(W$e,"STRONG",{});var dut=s(Yde);Lho=r(dut,"gpt_neox"),dut.forEach(t),yho=r(W$e," \u2014 "),yN=n(W$e,"A",{href:!0});var cut=s(yN);xho=r(cut,"GPTNeoXTokenizerFast"),cut.forEach(t),$ho=r(W$e," (GPT NeoX model)"),W$e.forEach(t),kho=i(S),us=n(S,"LI",{});var mR=s(us);Kde=n(mR,"STRONG",{});var fut=s(Kde);Sho=r(fut,"gptj"),fut.forEach(t),Rho=r(mR," \u2014 "),xN=n(mR,"A",{href:!0});var mut=s(xN);Pho=r(mut,"GPT2Tokenizer"),mut.forEach(t),Bho=r(mR," or "),$N=n(mR,"A",{href:!0});var gut=s($N);Iho=r(gut,"GPT2TokenizerFast"),gut.forEach(t),Nho=r(mR," (GPT-J model)"),mR.forEach(t),qho=i(S),bs=n(S,"LI",{});var gR=s(bs);Zde=n(gR,"STRONG",{});var hut=s(Zde);jho=r(hut,"groupvit"),hut.forEach(t),Dho=r(gR," \u2014 "),kN=n(gR,"A",{href:!0});var put=s(kN);Gho=r(put,"CLIPTokenizer"),put.forEach(t),Oho=r(gR," or "),SN=n(gR,"A",{href:!0});var _ut=s(SN);Vho=r(_ut,"CLIPTokenizerFast"),_ut.forEach(t),Xho=r(gR," (GroupViT model)"),gR.forEach(t),zho=i(S),vs=n(S,"LI",{});var hR=s(vs);ece=n(hR,"STRONG",{});var uut=s(ece);Who=r(uut,"herbert"),uut.forEach(t),Qho=r(hR," \u2014 "),RN=n(hR,"A",{href:!0});var but=s(RN);Uho=r(but,"HerbertTokenizer"),but.forEach(t),Hho=r(hR," or "),PN=n(hR,"A",{href:!0});var vut=s(PN);Jho=r(vut,"HerbertTokenizerFast"),vut.forEach(t),Yho=r(hR," (HerBERT model)"),hR.forEach(t),Kho=i(S),Ih=n(S,"LI",{});var Q$e=s(Ih);oce=n(Q$e,"STRONG",{});var Fut=s(oce);Zho=r(Fut,"hubert"),Fut.forEach(t),epo=r(Q$e," \u2014 "),BN=n(Q$e,"A",{href:!0});var Tut=s(BN);opo=r(Tut,"Wav2Vec2CTCTokenizer"),Tut.forEach(t),rpo=r(Q$e," (Hubert model)"),Q$e.forEach(t),tpo=i(S),Fs=n(S,"LI",{});var pR=s(Fs);rce=n(pR,"STRONG",{});var Mut=s(rce);apo=r(Mut,"ibert"),Mut.forEach(t),npo=r(pR," \u2014 "),IN=n(pR,"A",{href:!0});var Eut=s(IN);spo=r(Eut,"RobertaTokenizer"),Eut.forEach(t),lpo=r(pR," or "),NN=n(pR,"A",{href:!0});var Cut=s(NN);ipo=r(Cut,"RobertaTokenizerFast"),Cut.forEach(t),dpo=r(pR," (I-BERT model)"),pR.forEach(t),cpo=i(S),Ts=n(S,"LI",{});var _R=s(Ts);tce=n(_R,"STRONG",{});var wut=s(tce);fpo=r(wut,"layoutlm"),wut.forEach(t),mpo=r(_R," \u2014 "),qN=n(_R,"A",{href:!0});var Aut=s(qN);gpo=r(Aut,"LayoutLMTokenizer"),Aut.forEach(t),hpo=r(_R," or "),jN=n(_R,"A",{href:!0});var Lut=s(jN);ppo=r(Lut,"LayoutLMTokenizerFast"),Lut.forEach(t),_po=r(_R," (LayoutLM model)"),_R.forEach(t),upo=i(S),Ms=n(S,"LI",{});var uR=s(Ms);ace=n(uR,"STRONG",{});var yut=s(ace);bpo=r(yut,"layoutlmv2"),yut.forEach(t),vpo=r(uR," \u2014 "),DN=n(uR,"A",{href:!0});var xut=s(DN);Fpo=r(xut,"LayoutLMv2Tokenizer"),xut.forEach(t),Tpo=r(uR," or "),GN=n(uR,"A",{href:!0});var $ut=s(GN);Mpo=r($ut,"LayoutLMv2TokenizerFast"),$ut.forEach(t),Epo=r(uR," (LayoutLMv2 model)"),uR.forEach(t),Cpo=i(S),Es=n(S,"LI",{});var bR=s(Es);nce=n(bR,"STRONG",{});var kut=s(nce);wpo=r(kut,"layoutlmv3"),kut.forEach(t),Apo=r(bR," \u2014 "),ON=n(bR,"A",{href:!0});var Sut=s(ON);Lpo=r(Sut,"LayoutLMv3Tokenizer"),Sut.forEach(t),ypo=r(bR," or "),VN=n(bR,"A",{href:!0});var Rut=s(VN);xpo=r(Rut,"LayoutLMv3TokenizerFast"),Rut.forEach(t),$po=r(bR," (LayoutLMv3 model)"),bR.forEach(t),kpo=i(S),Cs=n(S,"LI",{});var vR=s(Cs);sce=n(vR,"STRONG",{});var Put=s(sce);Spo=r(Put,"layoutxlm"),Put.forEach(t),Rpo=r(vR," \u2014 "),XN=n(vR,"A",{href:!0});var But=s(XN);Ppo=r(But,"LayoutXLMTokenizer"),But.forEach(t),Bpo=r(vR," or "),zN=n(vR,"A",{href:!0});var Iut=s(zN);Ipo=r(Iut,"LayoutXLMTokenizerFast"),Iut.forEach(t),Npo=r(vR," (LayoutXLM model)"),vR.forEach(t),qpo=i(S),ws=n(S,"LI",{});var FR=s(ws);lce=n(FR,"STRONG",{});var Nut=s(lce);jpo=r(Nut,"led"),Nut.forEach(t),Dpo=r(FR," \u2014 "),WN=n(FR,"A",{href:!0});var qut=s(WN);Gpo=r(qut,"LEDTokenizer"),qut.forEach(t),Opo=r(FR," or "),QN=n(FR,"A",{href:!0});var jut=s(QN);Vpo=r(jut,"LEDTokenizerFast"),jut.forEach(t),Xpo=r(FR," (LED model)"),FR.forEach(t),zpo=i(S),As=n(S,"LI",{});var TR=s(As);ice=n(TR,"STRONG",{});var Dut=s(ice);Wpo=r(Dut,"longformer"),Dut.forEach(t),Qpo=r(TR," \u2014 "),UN=n(TR,"A",{href:!0});var Gut=s(UN);Upo=r(Gut,"LongformerTokenizer"),Gut.forEach(t),Hpo=r(TR," or "),HN=n(TR,"A",{href:!0});var Out=s(HN);Jpo=r(Out,"LongformerTokenizerFast"),Out.forEach(t),Ypo=r(TR," (Longformer model)"),TR.forEach(t),Kpo=i(S),Ls=n(S,"LI",{});var MR=s(Ls);dce=n(MR,"STRONG",{});var Vut=s(dce);Zpo=r(Vut,"longt5"),Vut.forEach(t),e_o=r(MR," \u2014 "),JN=n(MR,"A",{href:!0});var Xut=s(JN);o_o=r(Xut,"T5Tokenizer"),Xut.forEach(t),r_o=r(MR," or "),YN=n(MR,"A",{href:!0});var zut=s(YN);t_o=r(zut,"T5TokenizerFast"),zut.forEach(t),a_o=r(MR," (LongT5 model)"),MR.forEach(t),n_o=i(S),Nh=n(S,"LI",{});var U$e=s(Nh);cce=n(U$e,"STRONG",{});var Wut=s(cce);s_o=r(Wut,"luke"),Wut.forEach(t),l_o=r(U$e," \u2014 "),KN=n(U$e,"A",{href:!0});var Qut=s(KN);i_o=r(Qut,"LukeTokenizer"),Qut.forEach(t),d_o=r(U$e," (LUKE model)"),U$e.forEach(t),c_o=i(S),ys=n(S,"LI",{});var ER=s(ys);fce=n(ER,"STRONG",{});var Uut=s(fce);f_o=r(Uut,"lxmert"),Uut.forEach(t),m_o=r(ER," \u2014 "),ZN=n(ER,"A",{href:!0});var Hut=s(ZN);g_o=r(Hut,"LxmertTokenizer"),Hut.forEach(t),h_o=r(ER," or "),eq=n(ER,"A",{href:!0});var Jut=s(eq);p_o=r(Jut,"LxmertTokenizerFast"),Jut.forEach(t),__o=r(ER," (LXMERT model)"),ER.forEach(t),u_o=i(S),qh=n(S,"LI",{});var H$e=s(qh);mce=n(H$e,"STRONG",{});var Yut=s(mce);b_o=r(Yut,"m2m_100"),Yut.forEach(t),v_o=r(H$e," \u2014 "),oq=n(H$e,"A",{href:!0});var Kut=s(oq);F_o=r(Kut,"M2M100Tokenizer"),Kut.forEach(t),T_o=r(H$e," (M2M100 model)"),H$e.forEach(t),M_o=i(S),jh=n(S,"LI",{});var J$e=s(jh);gce=n(J$e,"STRONG",{});var Zut=s(gce);E_o=r(Zut,"marian"),Zut.forEach(t),C_o=r(J$e," \u2014 "),rq=n(J$e,"A",{href:!0});var e1t=s(rq);w_o=r(e1t,"MarianTokenizer"),e1t.forEach(t),A_o=r(J$e," (Marian model)"),J$e.forEach(t),L_o=i(S),xs=n(S,"LI",{});var CR=s(xs);hce=n(CR,"STRONG",{});var o1t=s(hce);y_o=r(o1t,"mbart"),o1t.forEach(t),x_o=r(CR," \u2014 "),tq=n(CR,"A",{href:!0});var r1t=s(tq);$_o=r(r1t,"MBartTokenizer"),r1t.forEach(t),k_o=r(CR," or "),aq=n(CR,"A",{href:!0});var t1t=s(aq);S_o=r(t1t,"MBartTokenizerFast"),t1t.forEach(t),R_o=r(CR," (mBART model)"),CR.forEach(t),P_o=i(S),$s=n(S,"LI",{});var wR=s($s);pce=n(wR,"STRONG",{});var a1t=s(pce);B_o=r(a1t,"mbart50"),a1t.forEach(t),I_o=r(wR," \u2014 "),nq=n(wR,"A",{href:!0});var n1t=s(nq);N_o=r(n1t,"MBart50Tokenizer"),n1t.forEach(t),q_o=r(wR," or "),sq=n(wR,"A",{href:!0});var s1t=s(sq);j_o=r(s1t,"MBart50TokenizerFast"),s1t.forEach(t),D_o=r(wR," (mBART-50 model)"),wR.forEach(t),G_o=i(S),ks=n(S,"LI",{});var AR=s(ks);_ce=n(AR,"STRONG",{});var l1t=s(_ce);O_o=r(l1t,"megatron-bert"),l1t.forEach(t),V_o=r(AR," \u2014 "),lq=n(AR,"A",{href:!0});var i1t=s(lq);X_o=r(i1t,"BertTokenizer"),i1t.forEach(t),z_o=r(AR," or "),iq=n(AR,"A",{href:!0});var d1t=s(iq);W_o=r(d1t,"BertTokenizerFast"),d1t.forEach(t),Q_o=r(AR," (Megatron-BERT model)"),AR.forEach(t),U_o=i(S),Dh=n(S,"LI",{});var Y$e=s(Dh);uce=n(Y$e,"STRONG",{});var c1t=s(uce);H_o=r(c1t,"mluke"),c1t.forEach(t),J_o=r(Y$e," \u2014 "),dq=n(Y$e,"A",{href:!0});var f1t=s(dq);Y_o=r(f1t,"MLukeTokenizer"),f1t.forEach(t),K_o=r(Y$e," (mLUKE model)"),Y$e.forEach(t),Z_o=i(S),Ss=n(S,"LI",{});var LR=s(Ss);bce=n(LR,"STRONG",{});var m1t=s(bce);euo=r(m1t,"mobilebert"),m1t.forEach(t),ouo=r(LR," \u2014 "),cq=n(LR,"A",{href:!0});var g1t=s(cq);ruo=r(g1t,"MobileBertTokenizer"),g1t.forEach(t),tuo=r(LR," or "),fq=n(LR,"A",{href:!0});var h1t=s(fq);auo=r(h1t,"MobileBertTokenizerFast"),h1t.forEach(t),nuo=r(LR," (MobileBERT model)"),LR.forEach(t),suo=i(S),Rs=n(S,"LI",{});var yR=s(Rs);vce=n(yR,"STRONG",{});var p1t=s(vce);luo=r(p1t,"mpnet"),p1t.forEach(t),iuo=r(yR," \u2014 "),mq=n(yR,"A",{href:!0});var _1t=s(mq);duo=r(_1t,"MPNetTokenizer"),_1t.forEach(t),cuo=r(yR," or "),gq=n(yR,"A",{href:!0});var u1t=s(gq);fuo=r(u1t,"MPNetTokenizerFast"),u1t.forEach(t),muo=r(yR," (MPNet model)"),yR.forEach(t),guo=i(S),Ps=n(S,"LI",{});var xR=s(Ps);Fce=n(xR,"STRONG",{});var b1t=s(Fce);huo=r(b1t,"mt5"),b1t.forEach(t),puo=r(xR," \u2014 "),hq=n(xR,"A",{href:!0});var v1t=s(hq);_uo=r(v1t,"MT5Tokenizer"),v1t.forEach(t),uuo=r(xR," or "),pq=n(xR,"A",{href:!0});var F1t=s(pq);buo=r(F1t,"MT5TokenizerFast"),F1t.forEach(t),vuo=r(xR," (MT5 model)"),xR.forEach(t),Fuo=i(S),Bs=n(S,"LI",{});var $R=s(Bs);Tce=n($R,"STRONG",{});var T1t=s(Tce);Tuo=r(T1t,"mvp"),T1t.forEach(t),Muo=r($R," \u2014 "),_q=n($R,"A",{href:!0});var M1t=s(_q);Euo=r(M1t,"MvpTokenizer"),M1t.forEach(t),Cuo=r($R," or "),uq=n($R,"A",{href:!0});var E1t=s(uq);wuo=r(E1t,"MvpTokenizerFast"),E1t.forEach(t),Auo=r($R," (MVP model)"),$R.forEach(t),Luo=i(S),Is=n(S,"LI",{});var kR=s(Is);Mce=n(kR,"STRONG",{});var C1t=s(Mce);yuo=r(C1t,"nezha"),C1t.forEach(t),xuo=r(kR," \u2014 "),bq=n(kR,"A",{href:!0});var w1t=s(bq);$uo=r(w1t,"BertTokenizer"),w1t.forEach(t),kuo=r(kR," or "),vq=n(kR,"A",{href:!0});var A1t=s(vq);Suo=r(A1t,"BertTokenizerFast"),A1t.forEach(t),Ruo=r(kR," (Nezha model)"),kR.forEach(t),Puo=i(S),Ns=n(S,"LI",{});var SR=s(Ns);Ece=n(SR,"STRONG",{});var L1t=s(Ece);Buo=r(L1t,"nllb"),L1t.forEach(t),Iuo=r(SR," \u2014 "),Fq=n(SR,"A",{href:!0});var y1t=s(Fq);Nuo=r(y1t,"NllbTokenizer"),y1t.forEach(t),quo=r(SR," or "),Tq=n(SR,"A",{href:!0});var x1t=s(Tq);juo=r(x1t,"NllbTokenizerFast"),x1t.forEach(t),Duo=r(SR," (NLLB model)"),SR.forEach(t),Guo=i(S),qs=n(S,"LI",{});var RR=s(qs);Cce=n(RR,"STRONG",{});var $1t=s(Cce);Ouo=r($1t,"nystromformer"),$1t.forEach(t),Vuo=r(RR," \u2014 "),Mq=n(RR,"A",{href:!0});var k1t=s(Mq);Xuo=r(k1t,"AlbertTokenizer"),k1t.forEach(t),zuo=r(RR," or "),Eq=n(RR,"A",{href:!0});var S1t=s(Eq);Wuo=r(S1t,"AlbertTokenizerFast"),S1t.forEach(t),Quo=r(RR," (Nystr\xF6mformer model)"),RR.forEach(t),Uuo=i(S),js=n(S,"LI",{});var PR=s(js);wce=n(PR,"STRONG",{});var R1t=s(wce);Huo=r(R1t,"openai-gpt"),R1t.forEach(t),Juo=r(PR," \u2014 "),Cq=n(PR,"A",{href:!0});var P1t=s(Cq);Yuo=r(P1t,"OpenAIGPTTokenizer"),P1t.forEach(t),Kuo=r(PR," or "),wq=n(PR,"A",{href:!0});var B1t=s(wq);Zuo=r(B1t,"OpenAIGPTTokenizerFast"),B1t.forEach(t),e1o=r(PR," (OpenAI GPT model)"),PR.forEach(t),o1o=i(S),Gh=n(S,"LI",{});var K$e=s(Gh);Ace=n(K$e,"STRONG",{});var I1t=s(Ace);r1o=r(I1t,"opt"),I1t.forEach(t),t1o=r(K$e," \u2014 "),Aq=n(K$e,"A",{href:!0});var N1t=s(Aq);a1o=r(N1t,"GPT2Tokenizer"),N1t.forEach(t),n1o=r(K$e," (OPT model)"),K$e.forEach(t),s1o=i(S),Ds=n(S,"LI",{});var BR=s(Ds);Lce=n(BR,"STRONG",{});var q1t=s(Lce);l1o=r(q1t,"owlvit"),q1t.forEach(t),i1o=r(BR," \u2014 "),Lq=n(BR,"A",{href:!0});var j1t=s(Lq);d1o=r(j1t,"CLIPTokenizer"),j1t.forEach(t),c1o=r(BR," or "),yq=n(BR,"A",{href:!0});var D1t=s(yq);f1o=r(D1t,"CLIPTokenizerFast"),D1t.forEach(t),m1o=r(BR," (OWL-ViT model)"),BR.forEach(t),g1o=i(S),Gs=n(S,"LI",{});var IR=s(Gs);yce=n(IR,"STRONG",{});var G1t=s(yce);h1o=r(G1t,"pegasus"),G1t.forEach(t),p1o=r(IR," \u2014 "),xq=n(IR,"A",{href:!0});var O1t=s(xq);_1o=r(O1t,"PegasusTokenizer"),O1t.forEach(t),u1o=r(IR," or "),$q=n(IR,"A",{href:!0});var V1t=s($q);b1o=r(V1t,"PegasusTokenizerFast"),V1t.forEach(t),v1o=r(IR," (Pegasus model)"),IR.forEach(t),F1o=i(S),Oh=n(S,"LI",{});var Z$e=s(Oh);xce=n(Z$e,"STRONG",{});var X1t=s(xce);T1o=r(X1t,"perceiver"),X1t.forEach(t),M1o=r(Z$e," \u2014 "),kq=n(Z$e,"A",{href:!0});var z1t=s(kq);E1o=r(z1t,"PerceiverTokenizer"),z1t.forEach(t),C1o=r(Z$e," (Perceiver model)"),Z$e.forEach(t),w1o=i(S),Vh=n(S,"LI",{});var eke=s(Vh);$ce=n(eke,"STRONG",{});var W1t=s($ce);A1o=r(W1t,"phobert"),W1t.forEach(t),L1o=r(eke," \u2014 "),Sq=n(eke,"A",{href:!0});var Q1t=s(Sq);y1o=r(Q1t,"PhobertTokenizer"),Q1t.forEach(t),x1o=r(eke," (PhoBERT model)"),eke.forEach(t),$1o=i(S),Xh=n(S,"LI",{});var oke=s(Xh);kce=n(oke,"STRONG",{});var U1t=s(kce);k1o=r(U1t,"plbart"),U1t.forEach(t),S1o=r(oke," \u2014 "),Rq=n(oke,"A",{href:!0});var H1t=s(Rq);R1o=r(H1t,"PLBartTokenizer"),H1t.forEach(t),P1o=r(oke," (PLBart model)"),oke.forEach(t),B1o=i(S),zh=n(S,"LI",{});var rke=s(zh);Sce=n(rke,"STRONG",{});var J1t=s(Sce);I1o=r(J1t,"prophetnet"),J1t.forEach(t),N1o=r(rke," \u2014 "),Pq=n(rke,"A",{href:!0});var Y1t=s(Pq);q1o=r(Y1t,"ProphetNetTokenizer"),Y1t.forEach(t),j1o=r(rke," (ProphetNet model)"),rke.forEach(t),D1o=i(S),Os=n(S,"LI",{});var NR=s(Os);Rce=n(NR,"STRONG",{});var K1t=s(Rce);G1o=r(K1t,"qdqbert"),K1t.forEach(t),O1o=r(NR," \u2014 "),Bq=n(NR,"A",{href:!0});var Z1t=s(Bq);V1o=r(Z1t,"BertTokenizer"),Z1t.forEach(t),X1o=r(NR," or "),Iq=n(NR,"A",{href:!0});var e4t=s(Iq);z1o=r(e4t,"BertTokenizerFast"),e4t.forEach(t),W1o=r(NR," (QDQBert model)"),NR.forEach(t),Q1o=i(S),Wh=n(S,"LI",{});var tke=s(Wh);Pce=n(tke,"STRONG",{});var o4t=s(Pce);U1o=r(o4t,"rag"),o4t.forEach(t),H1o=r(tke," \u2014 "),Nq=n(tke,"A",{href:!0});var r4t=s(Nq);J1o=r(r4t,"RagTokenizer"),r4t.forEach(t),Y1o=r(tke," (RAG model)"),tke.forEach(t),K1o=i(S),Vs=n(S,"LI",{});var qR=s(Vs);Bce=n(qR,"STRONG",{});var t4t=s(Bce);Z1o=r(t4t,"realm"),t4t.forEach(t),e4o=r(qR," \u2014 "),qq=n(qR,"A",{href:!0});var a4t=s(qq);o4o=r(a4t,"RealmTokenizer"),a4t.forEach(t),r4o=r(qR," or "),jq=n(qR,"A",{href:!0});var n4t=s(jq);t4o=r(n4t,"RealmTokenizerFast"),n4t.forEach(t),a4o=r(qR," (REALM model)"),qR.forEach(t),n4o=i(S),Xs=n(S,"LI",{});var jR=s(Xs);Ice=n(jR,"STRONG",{});var s4t=s(Ice);s4o=r(s4t,"reformer"),s4t.forEach(t),l4o=r(jR," \u2014 "),Dq=n(jR,"A",{href:!0});var l4t=s(Dq);i4o=r(l4t,"ReformerTokenizer"),l4t.forEach(t),d4o=r(jR," or "),Gq=n(jR,"A",{href:!0});var i4t=s(Gq);c4o=r(i4t,"ReformerTokenizerFast"),i4t.forEach(t),f4o=r(jR," (Reformer model)"),jR.forEach(t),m4o=i(S),zs=n(S,"LI",{});var DR=s(zs);Nce=n(DR,"STRONG",{});var d4t=s(Nce);g4o=r(d4t,"rembert"),d4t.forEach(t),h4o=r(DR," \u2014 "),Oq=n(DR,"A",{href:!0});var c4t=s(Oq);p4o=r(c4t,"RemBertTokenizer"),c4t.forEach(t),_4o=r(DR," or "),Vq=n(DR,"A",{href:!0});var f4t=s(Vq);u4o=r(f4t,"RemBertTokenizerFast"),f4t.forEach(t),b4o=r(DR," (RemBERT model)"),DR.forEach(t),v4o=i(S),Ws=n(S,"LI",{});var GR=s(Ws);qce=n(GR,"STRONG",{});var m4t=s(qce);F4o=r(m4t,"retribert"),m4t.forEach(t),T4o=r(GR," \u2014 "),Xq=n(GR,"A",{href:!0});var g4t=s(Xq);M4o=r(g4t,"RetriBertTokenizer"),g4t.forEach(t),E4o=r(GR," or "),zq=n(GR,"A",{href:!0});var h4t=s(zq);C4o=r(h4t,"RetriBertTokenizerFast"),h4t.forEach(t),w4o=r(GR," (RetriBERT model)"),GR.forEach(t),A4o=i(S),Qs=n(S,"LI",{});var OR=s(Qs);jce=n(OR,"STRONG",{});var p4t=s(jce);L4o=r(p4t,"roberta"),p4t.forEach(t),y4o=r(OR," \u2014 "),Wq=n(OR,"A",{href:!0});var _4t=s(Wq);x4o=r(_4t,"RobertaTokenizer"),_4t.forEach(t),$4o=r(OR," or "),Qq=n(OR,"A",{href:!0});var u4t=s(Qq);k4o=r(u4t,"RobertaTokenizerFast"),u4t.forEach(t),S4o=r(OR," (RoBERTa model)"),OR.forEach(t),R4o=i(S),Us=n(S,"LI",{});var VR=s(Us);Dce=n(VR,"STRONG",{});var b4t=s(Dce);P4o=r(b4t,"roformer"),b4t.forEach(t),B4o=r(VR," \u2014 "),Uq=n(VR,"A",{href:!0});var v4t=s(Uq);I4o=r(v4t,"RoFormerTokenizer"),v4t.forEach(t),N4o=r(VR," or "),Hq=n(VR,"A",{href:!0});var F4t=s(Hq);q4o=r(F4t,"RoFormerTokenizerFast"),F4t.forEach(t),j4o=r(VR," (RoFormer model)"),VR.forEach(t),D4o=i(S),Qh=n(S,"LI",{});var ake=s(Qh);Gce=n(ake,"STRONG",{});var T4t=s(Gce);G4o=r(T4t,"speech_to_text"),T4t.forEach(t),O4o=r(ake," \u2014 "),Jq=n(ake,"A",{href:!0});var M4t=s(Jq);V4o=r(M4t,"Speech2TextTokenizer"),M4t.forEach(t),X4o=r(ake," (Speech2Text model)"),ake.forEach(t),z4o=i(S),Uh=n(S,"LI",{});var nke=s(Uh);Oce=n(nke,"STRONG",{});var E4t=s(Oce);W4o=r(E4t,"speech_to_text_2"),E4t.forEach(t),Q4o=r(nke," \u2014 "),Yq=n(nke,"A",{href:!0});var C4t=s(Yq);U4o=r(C4t,"Speech2Text2Tokenizer"),C4t.forEach(t),H4o=r(nke," (Speech2Text2 model)"),nke.forEach(t),J4o=i(S),Hs=n(S,"LI",{});var XR=s(Hs);Vce=n(XR,"STRONG",{});var w4t=s(Vce);Y4o=r(w4t,"splinter"),w4t.forEach(t),K4o=r(XR," \u2014 "),Kq=n(XR,"A",{href:!0});var A4t=s(Kq);Z4o=r(A4t,"SplinterTokenizer"),A4t.forEach(t),e2o=r(XR," or "),Zq=n(XR,"A",{href:!0});var L4t=s(Zq);o2o=r(L4t,"SplinterTokenizerFast"),L4t.forEach(t),r2o=r(XR," (Splinter model)"),XR.forEach(t),t2o=i(S),Js=n(S,"LI",{});var zR=s(Js);Xce=n(zR,"STRONG",{});var y4t=s(Xce);a2o=r(y4t,"squeezebert"),y4t.forEach(t),n2o=r(zR," \u2014 "),ej=n(zR,"A",{href:!0});var x4t=s(ej);s2o=r(x4t,"SqueezeBertTokenizer"),x4t.forEach(t),l2o=r(zR," or "),oj=n(zR,"A",{href:!0});var $4t=s(oj);i2o=r($4t,"SqueezeBertTokenizerFast"),$4t.forEach(t),d2o=r(zR," (SqueezeBERT model)"),zR.forEach(t),c2o=i(S),Ys=n(S,"LI",{});var WR=s(Ys);zce=n(WR,"STRONG",{});var k4t=s(zce);f2o=r(k4t,"t5"),k4t.forEach(t),m2o=r(WR," \u2014 "),rj=n(WR,"A",{href:!0});var S4t=s(rj);g2o=r(S4t,"T5Tokenizer"),S4t.forEach(t),h2o=r(WR," or "),tj=n(WR,"A",{href:!0});var R4t=s(tj);p2o=r(R4t,"T5TokenizerFast"),R4t.forEach(t),_2o=r(WR," (T5 model)"),WR.forEach(t),u2o=i(S),Hh=n(S,"LI",{});var ske=s(Hh);Wce=n(ske,"STRONG",{});var P4t=s(Wce);b2o=r(P4t,"tapas"),P4t.forEach(t),v2o=r(ske," \u2014 "),aj=n(ske,"A",{href:!0});var B4t=s(aj);F2o=r(B4t,"TapasTokenizer"),B4t.forEach(t),T2o=r(ske," (TAPAS model)"),ske.forEach(t),M2o=i(S),Jh=n(S,"LI",{});var lke=s(Jh);Qce=n(lke,"STRONG",{});var I4t=s(Qce);E2o=r(I4t,"tapex"),I4t.forEach(t),C2o=r(lke," \u2014 "),nj=n(lke,"A",{href:!0});var N4t=s(nj);w2o=r(N4t,"TapexTokenizer"),N4t.forEach(t),A2o=r(lke," (TAPEX model)"),lke.forEach(t),L2o=i(S),Yh=n(S,"LI",{});var ike=s(Yh);Uce=n(ike,"STRONG",{});var q4t=s(Uce);y2o=r(q4t,"transfo-xl"),q4t.forEach(t),x2o=r(ike," \u2014 "),sj=n(ike,"A",{href:!0});var j4t=s(sj);$2o=r(j4t,"TransfoXLTokenizer"),j4t.forEach(t),k2o=r(ike," (Transformer-XL model)"),ike.forEach(t),S2o=i(S),Ks=n(S,"LI",{});var QR=s(Ks);Hce=n(QR,"STRONG",{});var D4t=s(Hce);R2o=r(D4t,"vilt"),D4t.forEach(t),P2o=r(QR," \u2014 "),lj=n(QR,"A",{href:!0});var G4t=s(lj);B2o=r(G4t,"BertTokenizer"),G4t.forEach(t),I2o=r(QR," or "),ij=n(QR,"A",{href:!0});var O4t=s(ij);N2o=r(O4t,"BertTokenizerFast"),O4t.forEach(t),q2o=r(QR," (ViLT model)"),QR.forEach(t),j2o=i(S),Zs=n(S,"LI",{});var UR=s(Zs);Jce=n(UR,"STRONG",{});var V4t=s(Jce);D2o=r(V4t,"visual_bert"),V4t.forEach(t),G2o=r(UR," \u2014 "),dj=n(UR,"A",{href:!0});var X4t=s(dj);O2o=r(X4t,"BertTokenizer"),X4t.forEach(t),V2o=r(UR," or "),cj=n(UR,"A",{href:!0});var z4t=s(cj);X2o=r(z4t,"BertTokenizerFast"),z4t.forEach(t),z2o=r(UR," (VisualBERT model)"),UR.forEach(t),W2o=i(S),Kh=n(S,"LI",{});var dke=s(Kh);Yce=n(dke,"STRONG",{});var W4t=s(Yce);Q2o=r(W4t,"wav2vec2"),W4t.forEach(t),U2o=r(dke," \u2014 "),fj=n(dke,"A",{href:!0});var Q4t=s(fj);H2o=r(Q4t,"Wav2Vec2CTCTokenizer"),Q4t.forEach(t),J2o=r(dke," (Wav2Vec2 model)"),dke.forEach(t),Y2o=i(S),Zh=n(S,"LI",{});var cke=s(Zh);Kce=n(cke,"STRONG",{});var U4t=s(Kce);K2o=r(U4t,"wav2vec2-conformer"),U4t.forEach(t),Z2o=r(cke," \u2014 "),mj=n(cke,"A",{href:!0});var H4t=s(mj);ebo=r(H4t,"Wav2Vec2CTCTokenizer"),H4t.forEach(t),obo=r(cke," (Wav2Vec2-Conformer model)"),cke.forEach(t),rbo=i(S),ep=n(S,"LI",{});var fke=s(ep);Zce=n(fke,"STRONG",{});var J4t=s(Zce);tbo=r(J4t,"wav2vec2_phoneme"),J4t.forEach(t),abo=r(fke," \u2014 "),gj=n(fke,"A",{href:!0});var Y4t=s(gj);nbo=r(Y4t,"Wav2Vec2PhonemeCTCTokenizer"),Y4t.forEach(t),sbo=r(fke," (Wav2Vec2Phoneme model)"),fke.forEach(t),lbo=i(S),el=n(S,"LI",{});var HR=s(el);efe=n(HR,"STRONG",{});var K4t=s(efe);ibo=r(K4t,"xglm"),K4t.forEach(t),dbo=r(HR," \u2014 "),hj=n(HR,"A",{href:!0});var Z4t=s(hj);cbo=r(Z4t,"XGLMTokenizer"),Z4t.forEach(t),fbo=r(HR," or "),pj=n(HR,"A",{href:!0});var e2t=s(pj);mbo=r(e2t,"XGLMTokenizerFast"),e2t.forEach(t),gbo=r(HR," (XGLM model)"),HR.forEach(t),hbo=i(S),op=n(S,"LI",{});var mke=s(op);ofe=n(mke,"STRONG",{});var o2t=s(ofe);pbo=r(o2t,"xlm"),o2t.forEach(t),_bo=r(mke," \u2014 "),_j=n(mke,"A",{href:!0});var r2t=s(_j);ubo=r(r2t,"XLMTokenizer"),r2t.forEach(t),bbo=r(mke," (XLM model)"),mke.forEach(t),vbo=i(S),rp=n(S,"LI",{});var gke=s(rp);rfe=n(gke,"STRONG",{});var t2t=s(rfe);Fbo=r(t2t,"xlm-prophetnet"),t2t.forEach(t),Tbo=r(gke," \u2014 "),uj=n(gke,"A",{href:!0});var a2t=s(uj);Mbo=r(a2t,"XLMProphetNetTokenizer"),a2t.forEach(t),Ebo=r(gke," (XLM-ProphetNet model)"),gke.forEach(t),Cbo=i(S),ol=n(S,"LI",{});var JR=s(ol);tfe=n(JR,"STRONG",{});var n2t=s(tfe);wbo=r(n2t,"xlm-roberta"),n2t.forEach(t),Abo=r(JR," \u2014 "),bj=n(JR,"A",{href:!0});var s2t=s(bj);Lbo=r(s2t,"XLMRobertaTokenizer"),s2t.forEach(t),ybo=r(JR," or "),vj=n(JR,"A",{href:!0});var l2t=s(vj);xbo=r(l2t,"XLMRobertaTokenizerFast"),l2t.forEach(t),$bo=r(JR," (XLM-RoBERTa model)"),JR.forEach(t),kbo=i(S),rl=n(S,"LI",{});var YR=s(rl);afe=n(YR,"STRONG",{});var i2t=s(afe);Sbo=r(i2t,"xlm-roberta-xl"),i2t.forEach(t),Rbo=r(YR," \u2014 "),Fj=n(YR,"A",{href:!0});var d2t=s(Fj);Pbo=r(d2t,"RobertaTokenizer"),d2t.forEach(t),Bbo=r(YR," or "),Tj=n(YR,"A",{href:!0});var c2t=s(Tj);Ibo=r(c2t,"RobertaTokenizerFast"),c2t.forEach(t),Nbo=r(YR," (XLM-RoBERTa-XL model)"),YR.forEach(t),qbo=i(S),tl=n(S,"LI",{});var KR=s(tl);nfe=n(KR,"STRONG",{});var f2t=s(nfe);jbo=r(f2t,"xlnet"),f2t.forEach(t),Dbo=r(KR," \u2014 "),Mj=n(KR,"A",{href:!0});var m2t=s(Mj);Gbo=r(m2t,"XLNetTokenizer"),m2t.forEach(t),Obo=r(KR," or "),Ej=n(KR,"A",{href:!0});var g2t=s(Ej);Vbo=r(g2t,"XLNetTokenizerFast"),g2t.forEach(t),Xbo=r(KR," (XLNet model)"),KR.forEach(t),zbo=i(S),al=n(S,"LI",{});var ZR=s(al);sfe=n(ZR,"STRONG",{});var h2t=s(sfe);Wbo=r(h2t,"yoso"),h2t.forEach(t),Qbo=r(ZR," \u2014 "),Cj=n(ZR,"A",{href:!0});var p2t=s(Cj);Ubo=r(p2t,"AlbertTokenizer"),p2t.forEach(t),Hbo=r(ZR," or "),wj=n(ZR,"A",{href:!0});var _2t=s(wj);Jbo=r(_2t,"AlbertTokenizerFast"),_2t.forEach(t),Ybo=r(ZR," (YOSO model)"),ZR.forEach(t),S.forEach(t),Kbo=i(fl),T(tp.$$.fragment,fl),fl.forEach(t),Zbo=i(cl),ap=n(cl,"DIV",{class:!0});var iJe=s(ap);T(y8.$$.fragment,iJe),evo=i(iJe),lfe=n(iJe,"P",{});var u2t=s(lfe);ovo=r(u2t,"Register a new tokenizer in this mapping."),u2t.forEach(t),iJe.forEach(t),cl.forEach(t),tUe=i(f),Zi=n(f,"H2",{class:!0});var dJe=s(Zi);np=n(dJe,"A",{id:!0,class:!0,href:!0});var b2t=s(np);ife=n(b2t,"SPAN",{});var v2t=s(ife);T(x8.$$.fragment,v2t),v2t.forEach(t),b2t.forEach(t),rvo=i(dJe),dfe=n(dJe,"SPAN",{});var F2t=s(dfe);tvo=r(F2t,"AutoFeatureExtractor"),F2t.forEach(t),dJe.forEach(t),aUe=i(f),$o=n(f,"DIV",{class:!0});var ml=s($o);T($8.$$.fragment,ml),avo=i(ml),k8=n(ml,"P",{});var cJe=s(k8);nvo=r(cJe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Aj=n(cJe,"A",{href:!0});var T2t=s(Aj);svo=r(T2t,"AutoFeatureExtractor.from_pretrained()"),T2t.forEach(t),lvo=r(cJe," class method."),cJe.forEach(t),ivo=i(ml),S8=n(ml,"P",{});var fJe=s(S8);dvo=r(fJe,"This class cannot be instantiated directly using "),cfe=n(fJe,"CODE",{});var M2t=s(cfe);cvo=r(M2t,"__init__()"),M2t.forEach(t),fvo=r(fJe," (throws an error)."),fJe.forEach(t),mvo=i(ml),He=n(ml,"DIV",{class:!0});var fa=s(He);T(R8.$$.fragment,fa),gvo=i(fa),ffe=n(fa,"P",{});var E2t=s(ffe);hvo=r(E2t,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),E2t.forEach(t),pvo=i(fa),Oa=n(fa,"P",{});var gL=s(Oa);_vo=r(gL,"The feature extractor class to instantiate is selected based on the "),mfe=n(gL,"CODE",{});var C2t=s(mfe);uvo=r(C2t,"model_type"),C2t.forEach(t),bvo=r(gL,` property of the config object
(either passed as an argument or loaded from `),gfe=n(gL,"CODE",{});var w2t=s(gfe);vvo=r(w2t,"pretrained_model_name_or_path"),w2t.forEach(t),Fvo=r(gL,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),hfe=n(gL,"CODE",{});var A2t=s(hfe);Tvo=r(A2t,"pretrained_model_name_or_path"),A2t.forEach(t),Mvo=r(gL,":"),gL.forEach(t),Evo=i(fa),Q=n(fa,"UL",{});var J=s(Q);sp=n(J,"LI",{});var hke=s(sp);pfe=n(hke,"STRONG",{});var L2t=s(pfe);Cvo=r(L2t,"beit"),L2t.forEach(t),wvo=r(hke," \u2014 "),Lj=n(hke,"A",{href:!0});var y2t=s(Lj);Avo=r(y2t,"BeitFeatureExtractor"),y2t.forEach(t),Lvo=r(hke," (BEiT model)"),hke.forEach(t),yvo=i(J),lp=n(J,"LI",{});var pke=s(lp);_fe=n(pke,"STRONG",{});var x2t=s(_fe);xvo=r(x2t,"clip"),x2t.forEach(t),$vo=r(pke," \u2014 "),yj=n(pke,"A",{href:!0});var $2t=s(yj);kvo=r($2t,"CLIPFeatureExtractor"),$2t.forEach(t),Svo=r(pke," (CLIP model)"),pke.forEach(t),Rvo=i(J),ip=n(J,"LI",{});var _ke=s(ip);ufe=n(_ke,"STRONG",{});var k2t=s(ufe);Pvo=r(k2t,"convnext"),k2t.forEach(t),Bvo=r(_ke," \u2014 "),xj=n(_ke,"A",{href:!0});var S2t=s(xj);Ivo=r(S2t,"ConvNextFeatureExtractor"),S2t.forEach(t),Nvo=r(_ke," (ConvNeXT model)"),_ke.forEach(t),qvo=i(J),dp=n(J,"LI",{});var uke=s(dp);bfe=n(uke,"STRONG",{});var R2t=s(bfe);jvo=r(R2t,"cvt"),R2t.forEach(t),Dvo=r(uke," \u2014 "),$j=n(uke,"A",{href:!0});var P2t=s($j);Gvo=r(P2t,"ConvNextFeatureExtractor"),P2t.forEach(t),Ovo=r(uke," (CvT model)"),uke.forEach(t),Vvo=i(J),cp=n(J,"LI",{});var bke=s(cp);vfe=n(bke,"STRONG",{});var B2t=s(vfe);Xvo=r(B2t,"data2vec-audio"),B2t.forEach(t),zvo=r(bke," \u2014 "),kj=n(bke,"A",{href:!0});var I2t=s(kj);Wvo=r(I2t,"Wav2Vec2FeatureExtractor"),I2t.forEach(t),Qvo=r(bke," (Data2VecAudio model)"),bke.forEach(t),Uvo=i(J),fp=n(J,"LI",{});var vke=s(fp);Ffe=n(vke,"STRONG",{});var N2t=s(Ffe);Hvo=r(N2t,"data2vec-vision"),N2t.forEach(t),Jvo=r(vke," \u2014 "),Sj=n(vke,"A",{href:!0});var q2t=s(Sj);Yvo=r(q2t,"BeitFeatureExtractor"),q2t.forEach(t),Kvo=r(vke," (Data2VecVision model)"),vke.forEach(t),Zvo=i(J),mp=n(J,"LI",{});var Fke=s(mp);Tfe=n(Fke,"STRONG",{});var j2t=s(Tfe);e3o=r(j2t,"deit"),j2t.forEach(t),o3o=r(Fke," \u2014 "),Rj=n(Fke,"A",{href:!0});var D2t=s(Rj);r3o=r(D2t,"DeiTFeatureExtractor"),D2t.forEach(t),t3o=r(Fke," (DeiT model)"),Fke.forEach(t),a3o=i(J),gp=n(J,"LI",{});var Tke=s(gp);Mfe=n(Tke,"STRONG",{});var G2t=s(Mfe);n3o=r(G2t,"detr"),G2t.forEach(t),s3o=r(Tke," \u2014 "),Pj=n(Tke,"A",{href:!0});var O2t=s(Pj);l3o=r(O2t,"DetrFeatureExtractor"),O2t.forEach(t),i3o=r(Tke," (DETR model)"),Tke.forEach(t),d3o=i(J),hp=n(J,"LI",{});var Mke=s(hp);Efe=n(Mke,"STRONG",{});var V2t=s(Efe);c3o=r(V2t,"donut"),V2t.forEach(t),f3o=r(Mke," \u2014 "),Bj=n(Mke,"A",{href:!0});var X2t=s(Bj);m3o=r(X2t,"DonutFeatureExtractor"),X2t.forEach(t),g3o=r(Mke," (Donut model)"),Mke.forEach(t),h3o=i(J),pp=n(J,"LI",{});var Eke=s(pp);Cfe=n(Eke,"STRONG",{});var z2t=s(Cfe);p3o=r(z2t,"dpt"),z2t.forEach(t),_3o=r(Eke," \u2014 "),Ij=n(Eke,"A",{href:!0});var W2t=s(Ij);u3o=r(W2t,"DPTFeatureExtractor"),W2t.forEach(t),b3o=r(Eke," (DPT model)"),Eke.forEach(t),v3o=i(J),_p=n(J,"LI",{});var Cke=s(_p);wfe=n(Cke,"STRONG",{});var Q2t=s(wfe);F3o=r(Q2t,"flava"),Q2t.forEach(t),T3o=r(Cke," \u2014 "),Nj=n(Cke,"A",{href:!0});var U2t=s(Nj);M3o=r(U2t,"FlavaFeatureExtractor"),U2t.forEach(t),E3o=r(Cke," (FLAVA model)"),Cke.forEach(t),C3o=i(J),up=n(J,"LI",{});var wke=s(up);Afe=n(wke,"STRONG",{});var H2t=s(Afe);w3o=r(H2t,"glpn"),H2t.forEach(t),A3o=r(wke," \u2014 "),qj=n(wke,"A",{href:!0});var J2t=s(qj);L3o=r(J2t,"GLPNFeatureExtractor"),J2t.forEach(t),y3o=r(wke," (GLPN model)"),wke.forEach(t),x3o=i(J),bp=n(J,"LI",{});var Ake=s(bp);Lfe=n(Ake,"STRONG",{});var Y2t=s(Lfe);$3o=r(Y2t,"groupvit"),Y2t.forEach(t),k3o=r(Ake," \u2014 "),jj=n(Ake,"A",{href:!0});var K2t=s(jj);S3o=r(K2t,"CLIPFeatureExtractor"),K2t.forEach(t),R3o=r(Ake," (GroupViT model)"),Ake.forEach(t),P3o=i(J),vp=n(J,"LI",{});var Lke=s(vp);yfe=n(Lke,"STRONG",{});var Z2t=s(yfe);B3o=r(Z2t,"hubert"),Z2t.forEach(t),I3o=r(Lke," \u2014 "),Dj=n(Lke,"A",{href:!0});var ebt=s(Dj);N3o=r(ebt,"Wav2Vec2FeatureExtractor"),ebt.forEach(t),q3o=r(Lke," (Hubert model)"),Lke.forEach(t),j3o=i(J),Fp=n(J,"LI",{});var yke=s(Fp);xfe=n(yke,"STRONG",{});var obt=s(xfe);D3o=r(obt,"imagegpt"),obt.forEach(t),G3o=r(yke," \u2014 "),Gj=n(yke,"A",{href:!0});var rbt=s(Gj);O3o=r(rbt,"ImageGPTFeatureExtractor"),rbt.forEach(t),V3o=r(yke," (ImageGPT model)"),yke.forEach(t),X3o=i(J),Tp=n(J,"LI",{});var xke=s(Tp);$fe=n(xke,"STRONG",{});var tbt=s($fe);z3o=r(tbt,"layoutlmv2"),tbt.forEach(t),W3o=r(xke," \u2014 "),Oj=n(xke,"A",{href:!0});var abt=s(Oj);Q3o=r(abt,"LayoutLMv2FeatureExtractor"),abt.forEach(t),U3o=r(xke," (LayoutLMv2 model)"),xke.forEach(t),H3o=i(J),Mp=n(J,"LI",{});var $ke=s(Mp);kfe=n($ke,"STRONG",{});var nbt=s(kfe);J3o=r(nbt,"layoutlmv3"),nbt.forEach(t),Y3o=r($ke," \u2014 "),Vj=n($ke,"A",{href:!0});var sbt=s(Vj);K3o=r(sbt,"LayoutLMv3FeatureExtractor"),sbt.forEach(t),Z3o=r($ke," (LayoutLMv3 model)"),$ke.forEach(t),e5o=i(J),Ep=n(J,"LI",{});var kke=s(Ep);Sfe=n(kke,"STRONG",{});var lbt=s(Sfe);o5o=r(lbt,"levit"),lbt.forEach(t),r5o=r(kke," \u2014 "),Xj=n(kke,"A",{href:!0});var ibt=s(Xj);t5o=r(ibt,"LevitFeatureExtractor"),ibt.forEach(t),a5o=r(kke," (LeViT model)"),kke.forEach(t),n5o=i(J),Cp=n(J,"LI",{});var Ske=s(Cp);Rfe=n(Ske,"STRONG",{});var dbt=s(Rfe);s5o=r(dbt,"maskformer"),dbt.forEach(t),l5o=r(Ske," \u2014 "),zj=n(Ske,"A",{href:!0});var cbt=s(zj);i5o=r(cbt,"MaskFormerFeatureExtractor"),cbt.forEach(t),d5o=r(Ske," (MaskFormer model)"),Ske.forEach(t),c5o=i(J),wp=n(J,"LI",{});var Rke=s(wp);Pfe=n(Rke,"STRONG",{});var fbt=s(Pfe);f5o=r(fbt,"mctct"),fbt.forEach(t),m5o=r(Rke," \u2014 "),Wj=n(Rke,"A",{href:!0});var mbt=s(Wj);g5o=r(mbt,"MCTCTFeatureExtractor"),mbt.forEach(t),h5o=r(Rke," (M-CTC-T model)"),Rke.forEach(t),p5o=i(J),Ap=n(J,"LI",{});var Pke=s(Ap);Bfe=n(Pke,"STRONG",{});var gbt=s(Bfe);_5o=r(gbt,"mobilevit"),gbt.forEach(t),u5o=r(Pke," \u2014 "),Qj=n(Pke,"A",{href:!0});var hbt=s(Qj);b5o=r(hbt,"MobileViTFeatureExtractor"),hbt.forEach(t),v5o=r(Pke," (MobileViT model)"),Pke.forEach(t),F5o=i(J),Lp=n(J,"LI",{});var Bke=s(Lp);Ife=n(Bke,"STRONG",{});var pbt=s(Ife);T5o=r(pbt,"owlvit"),pbt.forEach(t),M5o=r(Bke," \u2014 "),Uj=n(Bke,"A",{href:!0});var _bt=s(Uj);E5o=r(_bt,"OwlViTFeatureExtractor"),_bt.forEach(t),C5o=r(Bke," (OWL-ViT model)"),Bke.forEach(t),w5o=i(J),yp=n(J,"LI",{});var Ike=s(yp);Nfe=n(Ike,"STRONG",{});var ubt=s(Nfe);A5o=r(ubt,"perceiver"),ubt.forEach(t),L5o=r(Ike," \u2014 "),Hj=n(Ike,"A",{href:!0});var bbt=s(Hj);y5o=r(bbt,"PerceiverFeatureExtractor"),bbt.forEach(t),x5o=r(Ike," (Perceiver model)"),Ike.forEach(t),$5o=i(J),xp=n(J,"LI",{});var Nke=s(xp);qfe=n(Nke,"STRONG",{});var vbt=s(qfe);k5o=r(vbt,"poolformer"),vbt.forEach(t),S5o=r(Nke," \u2014 "),Jj=n(Nke,"A",{href:!0});var Fbt=s(Jj);R5o=r(Fbt,"PoolFormerFeatureExtractor"),Fbt.forEach(t),P5o=r(Nke," (PoolFormer model)"),Nke.forEach(t),B5o=i(J),$p=n(J,"LI",{});var qke=s($p);jfe=n(qke,"STRONG",{});var Tbt=s(jfe);I5o=r(Tbt,"regnet"),Tbt.forEach(t),N5o=r(qke," \u2014 "),Yj=n(qke,"A",{href:!0});var Mbt=s(Yj);q5o=r(Mbt,"ConvNextFeatureExtractor"),Mbt.forEach(t),j5o=r(qke," (RegNet model)"),qke.forEach(t),D5o=i(J),kp=n(J,"LI",{});var jke=s(kp);Dfe=n(jke,"STRONG",{});var Ebt=s(Dfe);G5o=r(Ebt,"resnet"),Ebt.forEach(t),O5o=r(jke," \u2014 "),Kj=n(jke,"A",{href:!0});var Cbt=s(Kj);V5o=r(Cbt,"ConvNextFeatureExtractor"),Cbt.forEach(t),X5o=r(jke," (ResNet model)"),jke.forEach(t),z5o=i(J),Sp=n(J,"LI",{});var Dke=s(Sp);Gfe=n(Dke,"STRONG",{});var wbt=s(Gfe);W5o=r(wbt,"segformer"),wbt.forEach(t),Q5o=r(Dke," \u2014 "),Zj=n(Dke,"A",{href:!0});var Abt=s(Zj);U5o=r(Abt,"SegformerFeatureExtractor"),Abt.forEach(t),H5o=r(Dke," (SegFormer model)"),Dke.forEach(t),J5o=i(J),Rp=n(J,"LI",{});var Gke=s(Rp);Ofe=n(Gke,"STRONG",{});var Lbt=s(Ofe);Y5o=r(Lbt,"speech_to_text"),Lbt.forEach(t),K5o=r(Gke," \u2014 "),eD=n(Gke,"A",{href:!0});var ybt=s(eD);Z5o=r(ybt,"Speech2TextFeatureExtractor"),ybt.forEach(t),e6o=r(Gke," (Speech2Text model)"),Gke.forEach(t),o6o=i(J),Pp=n(J,"LI",{});var Oke=s(Pp);Vfe=n(Oke,"STRONG",{});var xbt=s(Vfe);r6o=r(xbt,"swin"),xbt.forEach(t),t6o=r(Oke," \u2014 "),oD=n(Oke,"A",{href:!0});var $bt=s(oD);a6o=r($bt,"ViTFeatureExtractor"),$bt.forEach(t),n6o=r(Oke," (Swin Transformer model)"),Oke.forEach(t),s6o=i(J),Bp=n(J,"LI",{});var Vke=s(Bp);Xfe=n(Vke,"STRONG",{});var kbt=s(Xfe);l6o=r(kbt,"swinv2"),kbt.forEach(t),i6o=r(Vke," \u2014 "),rD=n(Vke,"A",{href:!0});var Sbt=s(rD);d6o=r(Sbt,"ViTFeatureExtractor"),Sbt.forEach(t),c6o=r(Vke," (Swin Transformer V2 model)"),Vke.forEach(t),f6o=i(J),Ip=n(J,"LI",{});var Xke=s(Ip);zfe=n(Xke,"STRONG",{});var Rbt=s(zfe);m6o=r(Rbt,"van"),Rbt.forEach(t),g6o=r(Xke," \u2014 "),tD=n(Xke,"A",{href:!0});var Pbt=s(tD);h6o=r(Pbt,"ConvNextFeatureExtractor"),Pbt.forEach(t),p6o=r(Xke," (VAN model)"),Xke.forEach(t),_6o=i(J),Np=n(J,"LI",{});var zke=s(Np);Wfe=n(zke,"STRONG",{});var Bbt=s(Wfe);u6o=r(Bbt,"videomae"),Bbt.forEach(t),b6o=r(zke," \u2014 "),aD=n(zke,"A",{href:!0});var Ibt=s(aD);v6o=r(Ibt,"ViTFeatureExtractor"),Ibt.forEach(t),F6o=r(zke," (VideoMAE model)"),zke.forEach(t),T6o=i(J),qp=n(J,"LI",{});var Wke=s(qp);Qfe=n(Wke,"STRONG",{});var Nbt=s(Qfe);M6o=r(Nbt,"vilt"),Nbt.forEach(t),E6o=r(Wke," \u2014 "),nD=n(Wke,"A",{href:!0});var qbt=s(nD);C6o=r(qbt,"ViltFeatureExtractor"),qbt.forEach(t),w6o=r(Wke," (ViLT model)"),Wke.forEach(t),A6o=i(J),jp=n(J,"LI",{});var Qke=s(jp);Ufe=n(Qke,"STRONG",{});var jbt=s(Ufe);L6o=r(jbt,"vit"),jbt.forEach(t),y6o=r(Qke," \u2014 "),sD=n(Qke,"A",{href:!0});var Dbt=s(sD);x6o=r(Dbt,"ViTFeatureExtractor"),Dbt.forEach(t),$6o=r(Qke," (ViT model)"),Qke.forEach(t),k6o=i(J),Dp=n(J,"LI",{});var Uke=s(Dp);Hfe=n(Uke,"STRONG",{});var Gbt=s(Hfe);S6o=r(Gbt,"vit_mae"),Gbt.forEach(t),R6o=r(Uke," \u2014 "),lD=n(Uke,"A",{href:!0});var Obt=s(lD);P6o=r(Obt,"ViTFeatureExtractor"),Obt.forEach(t),B6o=r(Uke," (ViTMAE model)"),Uke.forEach(t),I6o=i(J),Gp=n(J,"LI",{});var Hke=s(Gp);Jfe=n(Hke,"STRONG",{});var Vbt=s(Jfe);N6o=r(Vbt,"wav2vec2"),Vbt.forEach(t),q6o=r(Hke," \u2014 "),iD=n(Hke,"A",{href:!0});var Xbt=s(iD);j6o=r(Xbt,"Wav2Vec2FeatureExtractor"),Xbt.forEach(t),D6o=r(Hke," (Wav2Vec2 model)"),Hke.forEach(t),G6o=i(J),Op=n(J,"LI",{});var Jke=s(Op);Yfe=n(Jke,"STRONG",{});var zbt=s(Yfe);O6o=r(zbt,"wav2vec2-conformer"),zbt.forEach(t),V6o=r(Jke," \u2014 "),dD=n(Jke,"A",{href:!0});var Wbt=s(dD);X6o=r(Wbt,"Wav2Vec2FeatureExtractor"),Wbt.forEach(t),z6o=r(Jke," (Wav2Vec2-Conformer model)"),Jke.forEach(t),W6o=i(J),Vp=n(J,"LI",{});var Yke=s(Vp);Kfe=n(Yke,"STRONG",{});var Qbt=s(Kfe);Q6o=r(Qbt,"yolos"),Qbt.forEach(t),U6o=r(Yke," \u2014 "),cD=n(Yke,"A",{href:!0});var Ubt=s(cD);H6o=r(Ubt,"YolosFeatureExtractor"),Ubt.forEach(t),J6o=r(Yke," (YOLOS model)"),Yke.forEach(t),J.forEach(t),Y6o=i(fa),T(Xp.$$.fragment,fa),K6o=i(fa),T(zp.$$.fragment,fa),fa.forEach(t),Z6o=i(ml),Wp=n(ml,"DIV",{class:!0});var mJe=s(Wp);T(P8.$$.fragment,mJe),eFo=i(mJe),Zfe=n(mJe,"P",{});var Hbt=s(Zfe);oFo=r(Hbt,"Register a new feature extractor for this class."),Hbt.forEach(t),mJe.forEach(t),ml.forEach(t),nUe=i(f),ed=n(f,"H2",{class:!0});var gJe=s(ed);Qp=n(gJe,"A",{id:!0,class:!0,href:!0});var Jbt=s(Qp);eme=n(Jbt,"SPAN",{});var Ybt=s(eme);T(B8.$$.fragment,Ybt),Ybt.forEach(t),Jbt.forEach(t),rFo=i(gJe),ome=n(gJe,"SPAN",{});var Kbt=s(ome);tFo=r(Kbt,"AutoProcessor"),Kbt.forEach(t),gJe.forEach(t),sUe=i(f),ko=n(f,"DIV",{class:!0});var gl=s(ko);T(I8.$$.fragment,gl),aFo=i(gl),N8=n(gl,"P",{});var hJe=s(N8);nFo=r(hJe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),fD=n(hJe,"A",{href:!0});var Zbt=s(fD);sFo=r(Zbt,"AutoProcessor.from_pretrained()"),Zbt.forEach(t),lFo=r(hJe," class method."),hJe.forEach(t),iFo=i(gl),q8=n(gl,"P",{});var pJe=s(q8);dFo=r(pJe,"This class cannot be instantiated directly using "),rme=n(pJe,"CODE",{});var evt=s(rme);cFo=r(evt,"__init__()"),evt.forEach(t),fFo=r(pJe," (throws an error)."),pJe.forEach(t),mFo=i(gl),Je=n(gl,"DIV",{class:!0});var ma=s(Je);T(j8.$$.fragment,ma),gFo=i(ma),tme=n(ma,"P",{});var ovt=s(tme);hFo=r(ovt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ovt.forEach(t),pFo=i(ma),od=n(ma,"P",{});var Vae=s(od);_Fo=r(Vae,"The processor class to instantiate is selected based on the "),ame=n(Vae,"CODE",{});var rvt=s(ame);uFo=r(rvt,"model_type"),rvt.forEach(t),bFo=r(Vae,` property of the config object (either
passed as an argument or loaded from `),nme=n(Vae,"CODE",{});var tvt=s(nme);vFo=r(tvt,"pretrained_model_name_or_path"),tvt.forEach(t),FFo=r(Vae," if possible):"),Vae.forEach(t),TFo=i(ma),ie=n(ma,"UL",{});var ge=s(ie);Up=n(ge,"LI",{});var Kke=s(Up);sme=n(Kke,"STRONG",{});var avt=s(sme);MFo=r(avt,"clip"),avt.forEach(t),EFo=r(Kke," \u2014 "),mD=n(Kke,"A",{href:!0});var nvt=s(mD);CFo=r(nvt,"CLIPProcessor"),nvt.forEach(t),wFo=r(Kke," (CLIP model)"),Kke.forEach(t),AFo=i(ge),Hp=n(ge,"LI",{});var Zke=s(Hp);lme=n(Zke,"STRONG",{});var svt=s(lme);LFo=r(svt,"donut"),svt.forEach(t),yFo=r(Zke," \u2014 "),gD=n(Zke,"A",{href:!0});var lvt=s(gD);xFo=r(lvt,"DonutProcessor"),lvt.forEach(t),$Fo=r(Zke," (Donut model)"),Zke.forEach(t),kFo=i(ge),Jp=n(ge,"LI",{});var eSe=s(Jp);ime=n(eSe,"STRONG",{});var ivt=s(ime);SFo=r(ivt,"flava"),ivt.forEach(t),RFo=r(eSe," \u2014 "),hD=n(eSe,"A",{href:!0});var dvt=s(hD);PFo=r(dvt,"FlavaProcessor"),dvt.forEach(t),BFo=r(eSe," (FLAVA model)"),eSe.forEach(t),IFo=i(ge),Yp=n(ge,"LI",{});var oSe=s(Yp);dme=n(oSe,"STRONG",{});var cvt=s(dme);NFo=r(cvt,"groupvit"),cvt.forEach(t),qFo=r(oSe," \u2014 "),pD=n(oSe,"A",{href:!0});var fvt=s(pD);jFo=r(fvt,"CLIPProcessor"),fvt.forEach(t),DFo=r(oSe," (GroupViT model)"),oSe.forEach(t),GFo=i(ge),Kp=n(ge,"LI",{});var rSe=s(Kp);cme=n(rSe,"STRONG",{});var mvt=s(cme);OFo=r(mvt,"layoutlmv2"),mvt.forEach(t),VFo=r(rSe," \u2014 "),_D=n(rSe,"A",{href:!0});var gvt=s(_D);XFo=r(gvt,"LayoutLMv2Processor"),gvt.forEach(t),zFo=r(rSe," (LayoutLMv2 model)"),rSe.forEach(t),WFo=i(ge),Zp=n(ge,"LI",{});var tSe=s(Zp);fme=n(tSe,"STRONG",{});var hvt=s(fme);QFo=r(hvt,"layoutlmv3"),hvt.forEach(t),UFo=r(tSe," \u2014 "),uD=n(tSe,"A",{href:!0});var pvt=s(uD);HFo=r(pvt,"LayoutLMv3Processor"),pvt.forEach(t),JFo=r(tSe," (LayoutLMv3 model)"),tSe.forEach(t),YFo=i(ge),e_=n(ge,"LI",{});var aSe=s(e_);mme=n(aSe,"STRONG",{});var _vt=s(mme);KFo=r(_vt,"layoutxlm"),_vt.forEach(t),ZFo=r(aSe," \u2014 "),bD=n(aSe,"A",{href:!0});var uvt=s(bD);eTo=r(uvt,"LayoutXLMProcessor"),uvt.forEach(t),oTo=r(aSe," (LayoutXLM model)"),aSe.forEach(t),rTo=i(ge),o_=n(ge,"LI",{});var nSe=s(o_);gme=n(nSe,"STRONG",{});var bvt=s(gme);tTo=r(bvt,"owlvit"),bvt.forEach(t),aTo=r(nSe," \u2014 "),vD=n(nSe,"A",{href:!0});var vvt=s(vD);nTo=r(vvt,"OwlViTProcessor"),vvt.forEach(t),sTo=r(nSe," (OWL-ViT model)"),nSe.forEach(t),lTo=i(ge),r_=n(ge,"LI",{});var sSe=s(r_);hme=n(sSe,"STRONG",{});var Fvt=s(hme);iTo=r(Fvt,"sew"),Fvt.forEach(t),dTo=r(sSe," \u2014 "),FD=n(sSe,"A",{href:!0});var Tvt=s(FD);cTo=r(Tvt,"Wav2Vec2Processor"),Tvt.forEach(t),fTo=r(sSe," (SEW model)"),sSe.forEach(t),mTo=i(ge),t_=n(ge,"LI",{});var lSe=s(t_);pme=n(lSe,"STRONG",{});var Mvt=s(pme);gTo=r(Mvt,"sew-d"),Mvt.forEach(t),hTo=r(lSe," \u2014 "),TD=n(lSe,"A",{href:!0});var Evt=s(TD);pTo=r(Evt,"Wav2Vec2Processor"),Evt.forEach(t),_To=r(lSe," (SEW-D model)"),lSe.forEach(t),uTo=i(ge),a_=n(ge,"LI",{});var iSe=s(a_);_me=n(iSe,"STRONG",{});var Cvt=s(_me);bTo=r(Cvt,"speech_to_text"),Cvt.forEach(t),vTo=r(iSe," \u2014 "),MD=n(iSe,"A",{href:!0});var wvt=s(MD);FTo=r(wvt,"Speech2TextProcessor"),wvt.forEach(t),TTo=r(iSe," (Speech2Text model)"),iSe.forEach(t),MTo=i(ge),n_=n(ge,"LI",{});var dSe=s(n_);ume=n(dSe,"STRONG",{});var Avt=s(ume);ETo=r(Avt,"speech_to_text_2"),Avt.forEach(t),CTo=r(dSe," \u2014 "),ED=n(dSe,"A",{href:!0});var Lvt=s(ED);wTo=r(Lvt,"Speech2Text2Processor"),Lvt.forEach(t),ATo=r(dSe," (Speech2Text2 model)"),dSe.forEach(t),LTo=i(ge),s_=n(ge,"LI",{});var cSe=s(s_);bme=n(cSe,"STRONG",{});var yvt=s(bme);yTo=r(yvt,"trocr"),yvt.forEach(t),xTo=r(cSe," \u2014 "),CD=n(cSe,"A",{href:!0});var xvt=s(CD);$To=r(xvt,"TrOCRProcessor"),xvt.forEach(t),kTo=r(cSe," (TrOCR model)"),cSe.forEach(t),STo=i(ge),l_=n(ge,"LI",{});var fSe=s(l_);vme=n(fSe,"STRONG",{});var $vt=s(vme);RTo=r($vt,"unispeech"),$vt.forEach(t),PTo=r(fSe," \u2014 "),wD=n(fSe,"A",{href:!0});var kvt=s(wD);BTo=r(kvt,"Wav2Vec2Processor"),kvt.forEach(t),ITo=r(fSe," (UniSpeech model)"),fSe.forEach(t),NTo=i(ge),i_=n(ge,"LI",{});var mSe=s(i_);Fme=n(mSe,"STRONG",{});var Svt=s(Fme);qTo=r(Svt,"unispeech-sat"),Svt.forEach(t),jTo=r(mSe," \u2014 "),AD=n(mSe,"A",{href:!0});var Rvt=s(AD);DTo=r(Rvt,"Wav2Vec2Processor"),Rvt.forEach(t),GTo=r(mSe," (UniSpeechSat model)"),mSe.forEach(t),OTo=i(ge),d_=n(ge,"LI",{});var gSe=s(d_);Tme=n(gSe,"STRONG",{});var Pvt=s(Tme);VTo=r(Pvt,"vilt"),Pvt.forEach(t),XTo=r(gSe," \u2014 "),LD=n(gSe,"A",{href:!0});var Bvt=s(LD);zTo=r(Bvt,"ViltProcessor"),Bvt.forEach(t),WTo=r(gSe," (ViLT model)"),gSe.forEach(t),QTo=i(ge),c_=n(ge,"LI",{});var hSe=s(c_);Mme=n(hSe,"STRONG",{});var Ivt=s(Mme);UTo=r(Ivt,"vision-text-dual-encoder"),Ivt.forEach(t),HTo=r(hSe," \u2014 "),yD=n(hSe,"A",{href:!0});var Nvt=s(yD);JTo=r(Nvt,"VisionTextDualEncoderProcessor"),Nvt.forEach(t),YTo=r(hSe," (VisionTextDualEncoder model)"),hSe.forEach(t),KTo=i(ge),f_=n(ge,"LI",{});var pSe=s(f_);Eme=n(pSe,"STRONG",{});var qvt=s(Eme);ZTo=r(qvt,"wav2vec2"),qvt.forEach(t),eMo=r(pSe," \u2014 "),xD=n(pSe,"A",{href:!0});var jvt=s(xD);oMo=r(jvt,"Wav2Vec2Processor"),jvt.forEach(t),rMo=r(pSe," (Wav2Vec2 model)"),pSe.forEach(t),tMo=i(ge),m_=n(ge,"LI",{});var _Se=s(m_);Cme=n(_Se,"STRONG",{});var Dvt=s(Cme);aMo=r(Dvt,"wav2vec2-conformer"),Dvt.forEach(t),nMo=r(_Se," \u2014 "),$D=n(_Se,"A",{href:!0});var Gvt=s($D);sMo=r(Gvt,"Wav2Vec2Processor"),Gvt.forEach(t),lMo=r(_Se," (Wav2Vec2-Conformer model)"),_Se.forEach(t),iMo=i(ge),g_=n(ge,"LI",{});var uSe=s(g_);wme=n(uSe,"STRONG",{});var Ovt=s(wme);dMo=r(Ovt,"wavlm"),Ovt.forEach(t),cMo=r(uSe," \u2014 "),kD=n(uSe,"A",{href:!0});var Vvt=s(kD);fMo=r(Vvt,"Wav2Vec2Processor"),Vvt.forEach(t),mMo=r(uSe," (WavLM model)"),uSe.forEach(t),ge.forEach(t),gMo=i(ma),T(h_.$$.fragment,ma),hMo=i(ma),T(p_.$$.fragment,ma),ma.forEach(t),pMo=i(gl),__=n(gl,"DIV",{class:!0});var _Je=s(__);T(D8.$$.fragment,_Je),_Mo=i(_Je),Ame=n(_Je,"P",{});var Xvt=s(Ame);uMo=r(Xvt,"Register a new processor for this class."),Xvt.forEach(t),_Je.forEach(t),gl.forEach(t),lUe=i(f),rd=n(f,"H2",{class:!0});var uJe=s(rd);u_=n(uJe,"A",{id:!0,class:!0,href:!0});var zvt=s(u_);Lme=n(zvt,"SPAN",{});var Wvt=s(Lme);T(G8.$$.fragment,Wvt),Wvt.forEach(t),zvt.forEach(t),bMo=i(uJe),yme=n(uJe,"SPAN",{});var Qvt=s(yme);vMo=r(Qvt,"AutoModel"),Qvt.forEach(t),uJe.forEach(t),iUe=i(f),So=n(f,"DIV",{class:!0});var hl=s(So);T(O8.$$.fragment,hl),FMo=i(hl),td=n(hl,"P",{});var Xae=s(td);TMo=r(Xae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SD=n(Xae,"A",{href:!0});var Uvt=s(SD);MMo=r(Uvt,"from_pretrained()"),Uvt.forEach(t),EMo=r(Xae," class method or the "),RD=n(Xae,"A",{href:!0});var Hvt=s(RD);CMo=r(Hvt,"from_config()"),Hvt.forEach(t),wMo=r(Xae,` class
method.`),Xae.forEach(t),AMo=i(hl),V8=n(hl,"P",{});var bJe=s(V8);LMo=r(bJe,"This class cannot be instantiated directly using "),xme=n(bJe,"CODE",{});var Jvt=s(xme);yMo=r(Jvt,"__init__()"),Jvt.forEach(t),xMo=r(bJe," (throws an error)."),bJe.forEach(t),$Mo=i(hl),mt=n(hl,"DIV",{class:!0});var hL=s(mt);T(X8.$$.fragment,hL),kMo=i(hL),$me=n(hL,"P",{});var Yvt=s($me);SMo=r(Yvt,"Instantiates one of the base model classes of the library from a configuration."),Yvt.forEach(t),RMo=i(hL),ad=n(hL,"P",{});var zae=s(ad);PMo=r(zae,`Note:
Loading a model from its configuration file does `),kme=n(zae,"STRONG",{});var Kvt=s(kme);BMo=r(Kvt,"not"),Kvt.forEach(t),IMo=r(zae,` load the model weights. It only affects the
model\u2019s configuration. Use `),PD=n(zae,"A",{href:!0});var Zvt=s(PD);NMo=r(Zvt,"from_pretrained()"),Zvt.forEach(t),qMo=r(zae," to load the model weights."),zae.forEach(t),jMo=i(hL),T(b_.$$.fragment,hL),hL.forEach(t),DMo=i(hl),Ye=n(hl,"DIV",{class:!0});var ga=s(Ye);T(z8.$$.fragment,ga),GMo=i(ga),Sme=n(ga,"P",{});var e3t=s(Sme);OMo=r(e3t,"Instantiate one of the base model classes of the library from a pretrained model."),e3t.forEach(t),VMo=i(ga),Va=n(ga,"P",{});var pL=s(Va);XMo=r(pL,"The model class to instantiate is selected based on the "),Rme=n(pL,"CODE",{});var o3t=s(Rme);zMo=r(o3t,"model_type"),o3t.forEach(t),WMo=r(pL,` property of the config object (either
passed as an argument or loaded from `),Pme=n(pL,"CODE",{});var r3t=s(Pme);QMo=r(r3t,"pretrained_model_name_or_path"),r3t.forEach(t),UMo=r(pL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bme=n(pL,"CODE",{});var t3t=s(Bme);HMo=r(t3t,"pretrained_model_name_or_path"),t3t.forEach(t),JMo=r(pL,":"),pL.forEach(t),YMo=i(ga),y=n(ga,"UL",{});var x=s(y);v_=n(x,"LI",{});var bSe=s(v_);Ime=n(bSe,"STRONG",{});var a3t=s(Ime);KMo=r(a3t,"albert"),a3t.forEach(t),ZMo=r(bSe," \u2014 "),BD=n(bSe,"A",{href:!0});var n3t=s(BD);eEo=r(n3t,"AlbertModel"),n3t.forEach(t),oEo=r(bSe," (ALBERT model)"),bSe.forEach(t),rEo=i(x),F_=n(x,"LI",{});var vSe=s(F_);Nme=n(vSe,"STRONG",{});var s3t=s(Nme);tEo=r(s3t,"bart"),s3t.forEach(t),aEo=r(vSe," \u2014 "),ID=n(vSe,"A",{href:!0});var l3t=s(ID);nEo=r(l3t,"BartModel"),l3t.forEach(t),sEo=r(vSe," (BART model)"),vSe.forEach(t),lEo=i(x),T_=n(x,"LI",{});var FSe=s(T_);qme=n(FSe,"STRONG",{});var i3t=s(qme);iEo=r(i3t,"beit"),i3t.forEach(t),dEo=r(FSe," \u2014 "),ND=n(FSe,"A",{href:!0});var d3t=s(ND);cEo=r(d3t,"BeitModel"),d3t.forEach(t),fEo=r(FSe," (BEiT model)"),FSe.forEach(t),mEo=i(x),M_=n(x,"LI",{});var TSe=s(M_);jme=n(TSe,"STRONG",{});var c3t=s(jme);gEo=r(c3t,"bert"),c3t.forEach(t),hEo=r(TSe," \u2014 "),qD=n(TSe,"A",{href:!0});var f3t=s(qD);pEo=r(f3t,"BertModel"),f3t.forEach(t),_Eo=r(TSe," (BERT model)"),TSe.forEach(t),uEo=i(x),E_=n(x,"LI",{});var MSe=s(E_);Dme=n(MSe,"STRONG",{});var m3t=s(Dme);bEo=r(m3t,"bert-generation"),m3t.forEach(t),vEo=r(MSe," \u2014 "),jD=n(MSe,"A",{href:!0});var g3t=s(jD);FEo=r(g3t,"BertGenerationEncoder"),g3t.forEach(t),TEo=r(MSe," (Bert Generation model)"),MSe.forEach(t),MEo=i(x),C_=n(x,"LI",{});var ESe=s(C_);Gme=n(ESe,"STRONG",{});var h3t=s(Gme);EEo=r(h3t,"big_bird"),h3t.forEach(t),CEo=r(ESe," \u2014 "),DD=n(ESe,"A",{href:!0});var p3t=s(DD);wEo=r(p3t,"BigBirdModel"),p3t.forEach(t),AEo=r(ESe," (BigBird model)"),ESe.forEach(t),LEo=i(x),w_=n(x,"LI",{});var CSe=s(w_);Ome=n(CSe,"STRONG",{});var _3t=s(Ome);yEo=r(_3t,"bigbird_pegasus"),_3t.forEach(t),xEo=r(CSe," \u2014 "),GD=n(CSe,"A",{href:!0});var u3t=s(GD);$Eo=r(u3t,"BigBirdPegasusModel"),u3t.forEach(t),kEo=r(CSe," (BigBird-Pegasus model)"),CSe.forEach(t),SEo=i(x),A_=n(x,"LI",{});var wSe=s(A_);Vme=n(wSe,"STRONG",{});var b3t=s(Vme);REo=r(b3t,"blenderbot"),b3t.forEach(t),PEo=r(wSe," \u2014 "),OD=n(wSe,"A",{href:!0});var v3t=s(OD);BEo=r(v3t,"BlenderbotModel"),v3t.forEach(t),IEo=r(wSe," (Blenderbot model)"),wSe.forEach(t),NEo=i(x),L_=n(x,"LI",{});var ASe=s(L_);Xme=n(ASe,"STRONG",{});var F3t=s(Xme);qEo=r(F3t,"blenderbot-small"),F3t.forEach(t),jEo=r(ASe," \u2014 "),VD=n(ASe,"A",{href:!0});var T3t=s(VD);DEo=r(T3t,"BlenderbotSmallModel"),T3t.forEach(t),GEo=r(ASe," (BlenderbotSmall model)"),ASe.forEach(t),OEo=i(x),y_=n(x,"LI",{});var LSe=s(y_);zme=n(LSe,"STRONG",{});var M3t=s(zme);VEo=r(M3t,"bloom"),M3t.forEach(t),XEo=r(LSe," \u2014 "),XD=n(LSe,"A",{href:!0});var E3t=s(XD);zEo=r(E3t,"BloomModel"),E3t.forEach(t),WEo=r(LSe," (BLOOM model)"),LSe.forEach(t),QEo=i(x),x_=n(x,"LI",{});var ySe=s(x_);Wme=n(ySe,"STRONG",{});var C3t=s(Wme);UEo=r(C3t,"camembert"),C3t.forEach(t),HEo=r(ySe," \u2014 "),zD=n(ySe,"A",{href:!0});var w3t=s(zD);JEo=r(w3t,"CamembertModel"),w3t.forEach(t),YEo=r(ySe," (CamemBERT model)"),ySe.forEach(t),KEo=i(x),$_=n(x,"LI",{});var xSe=s($_);Qme=n(xSe,"STRONG",{});var A3t=s(Qme);ZEo=r(A3t,"canine"),A3t.forEach(t),eCo=r(xSe," \u2014 "),WD=n(xSe,"A",{href:!0});var L3t=s(WD);oCo=r(L3t,"CanineModel"),L3t.forEach(t),rCo=r(xSe," (CANINE model)"),xSe.forEach(t),tCo=i(x),k_=n(x,"LI",{});var $Se=s(k_);Ume=n($Se,"STRONG",{});var y3t=s(Ume);aCo=r(y3t,"clip"),y3t.forEach(t),nCo=r($Se," \u2014 "),QD=n($Se,"A",{href:!0});var x3t=s(QD);sCo=r(x3t,"CLIPModel"),x3t.forEach(t),lCo=r($Se," (CLIP model)"),$Se.forEach(t),iCo=i(x),S_=n(x,"LI",{});var kSe=s(S_);Hme=n(kSe,"STRONG",{});var $3t=s(Hme);dCo=r($3t,"codegen"),$3t.forEach(t),cCo=r(kSe," \u2014 "),UD=n(kSe,"A",{href:!0});var k3t=s(UD);fCo=r(k3t,"CodeGenModel"),k3t.forEach(t),mCo=r(kSe," (CodeGen model)"),kSe.forEach(t),gCo=i(x),R_=n(x,"LI",{});var SSe=s(R_);Jme=n(SSe,"STRONG",{});var S3t=s(Jme);hCo=r(S3t,"convbert"),S3t.forEach(t),pCo=r(SSe," \u2014 "),HD=n(SSe,"A",{href:!0});var R3t=s(HD);_Co=r(R3t,"ConvBertModel"),R3t.forEach(t),uCo=r(SSe," (ConvBERT model)"),SSe.forEach(t),bCo=i(x),P_=n(x,"LI",{});var RSe=s(P_);Yme=n(RSe,"STRONG",{});var P3t=s(Yme);vCo=r(P3t,"convnext"),P3t.forEach(t),FCo=r(RSe," \u2014 "),JD=n(RSe,"A",{href:!0});var B3t=s(JD);TCo=r(B3t,"ConvNextModel"),B3t.forEach(t),MCo=r(RSe," (ConvNeXT model)"),RSe.forEach(t),ECo=i(x),B_=n(x,"LI",{});var PSe=s(B_);Kme=n(PSe,"STRONG",{});var I3t=s(Kme);CCo=r(I3t,"ctrl"),I3t.forEach(t),wCo=r(PSe," \u2014 "),YD=n(PSe,"A",{href:!0});var N3t=s(YD);ACo=r(N3t,"CTRLModel"),N3t.forEach(t),LCo=r(PSe," (CTRL model)"),PSe.forEach(t),yCo=i(x),I_=n(x,"LI",{});var BSe=s(I_);Zme=n(BSe,"STRONG",{});var q3t=s(Zme);xCo=r(q3t,"cvt"),q3t.forEach(t),$Co=r(BSe," \u2014 "),KD=n(BSe,"A",{href:!0});var j3t=s(KD);kCo=r(j3t,"CvtModel"),j3t.forEach(t),SCo=r(BSe," (CvT model)"),BSe.forEach(t),RCo=i(x),N_=n(x,"LI",{});var ISe=s(N_);ege=n(ISe,"STRONG",{});var D3t=s(ege);PCo=r(D3t,"data2vec-audio"),D3t.forEach(t),BCo=r(ISe," \u2014 "),ZD=n(ISe,"A",{href:!0});var G3t=s(ZD);ICo=r(G3t,"Data2VecAudioModel"),G3t.forEach(t),NCo=r(ISe," (Data2VecAudio model)"),ISe.forEach(t),qCo=i(x),q_=n(x,"LI",{});var NSe=s(q_);oge=n(NSe,"STRONG",{});var O3t=s(oge);jCo=r(O3t,"data2vec-text"),O3t.forEach(t),DCo=r(NSe," \u2014 "),eG=n(NSe,"A",{href:!0});var V3t=s(eG);GCo=r(V3t,"Data2VecTextModel"),V3t.forEach(t),OCo=r(NSe," (Data2VecText model)"),NSe.forEach(t),VCo=i(x),j_=n(x,"LI",{});var qSe=s(j_);rge=n(qSe,"STRONG",{});var X3t=s(rge);XCo=r(X3t,"data2vec-vision"),X3t.forEach(t),zCo=r(qSe," \u2014 "),oG=n(qSe,"A",{href:!0});var z3t=s(oG);WCo=r(z3t,"Data2VecVisionModel"),z3t.forEach(t),QCo=r(qSe," (Data2VecVision model)"),qSe.forEach(t),UCo=i(x),D_=n(x,"LI",{});var jSe=s(D_);tge=n(jSe,"STRONG",{});var W3t=s(tge);HCo=r(W3t,"deberta"),W3t.forEach(t),JCo=r(jSe," \u2014 "),rG=n(jSe,"A",{href:!0});var Q3t=s(rG);YCo=r(Q3t,"DebertaModel"),Q3t.forEach(t),KCo=r(jSe," (DeBERTa model)"),jSe.forEach(t),ZCo=i(x),G_=n(x,"LI",{});var DSe=s(G_);age=n(DSe,"STRONG",{});var U3t=s(age);e0o=r(U3t,"deberta-v2"),U3t.forEach(t),o0o=r(DSe," \u2014 "),tG=n(DSe,"A",{href:!0});var H3t=s(tG);r0o=r(H3t,"DebertaV2Model"),H3t.forEach(t),t0o=r(DSe," (DeBERTa-v2 model)"),DSe.forEach(t),a0o=i(x),O_=n(x,"LI",{});var GSe=s(O_);nge=n(GSe,"STRONG",{});var J3t=s(nge);n0o=r(J3t,"decision_transformer"),J3t.forEach(t),s0o=r(GSe," \u2014 "),aG=n(GSe,"A",{href:!0});var Y3t=s(aG);l0o=r(Y3t,"DecisionTransformerModel"),Y3t.forEach(t),i0o=r(GSe," (Decision Transformer model)"),GSe.forEach(t),d0o=i(x),V_=n(x,"LI",{});var OSe=s(V_);sge=n(OSe,"STRONG",{});var K3t=s(sge);c0o=r(K3t,"deit"),K3t.forEach(t),f0o=r(OSe," \u2014 "),nG=n(OSe,"A",{href:!0});var Z3t=s(nG);m0o=r(Z3t,"DeiTModel"),Z3t.forEach(t),g0o=r(OSe," (DeiT model)"),OSe.forEach(t),h0o=i(x),X_=n(x,"LI",{});var VSe=s(X_);lge=n(VSe,"STRONG",{});var e5t=s(lge);p0o=r(e5t,"detr"),e5t.forEach(t),_0o=r(VSe," \u2014 "),sG=n(VSe,"A",{href:!0});var o5t=s(sG);u0o=r(o5t,"DetrModel"),o5t.forEach(t),b0o=r(VSe," (DETR model)"),VSe.forEach(t),v0o=i(x),z_=n(x,"LI",{});var XSe=s(z_);ige=n(XSe,"STRONG",{});var r5t=s(ige);F0o=r(r5t,"distilbert"),r5t.forEach(t),T0o=r(XSe," \u2014 "),lG=n(XSe,"A",{href:!0});var t5t=s(lG);M0o=r(t5t,"DistilBertModel"),t5t.forEach(t),E0o=r(XSe," (DistilBERT model)"),XSe.forEach(t),C0o=i(x),W_=n(x,"LI",{});var zSe=s(W_);dge=n(zSe,"STRONG",{});var a5t=s(dge);w0o=r(a5t,"donut-swin"),a5t.forEach(t),A0o=r(zSe," \u2014 "),iG=n(zSe,"A",{href:!0});var n5t=s(iG);L0o=r(n5t,"DonutSwinModel"),n5t.forEach(t),y0o=r(zSe," (DonutSwin model)"),zSe.forEach(t),x0o=i(x),Q_=n(x,"LI",{});var WSe=s(Q_);cge=n(WSe,"STRONG",{});var s5t=s(cge);$0o=r(s5t,"dpr"),s5t.forEach(t),k0o=r(WSe," \u2014 "),dG=n(WSe,"A",{href:!0});var l5t=s(dG);S0o=r(l5t,"DPRQuestionEncoder"),l5t.forEach(t),R0o=r(WSe," (DPR model)"),WSe.forEach(t),P0o=i(x),U_=n(x,"LI",{});var QSe=s(U_);fge=n(QSe,"STRONG",{});var i5t=s(fge);B0o=r(i5t,"dpt"),i5t.forEach(t),I0o=r(QSe," \u2014 "),cG=n(QSe,"A",{href:!0});var d5t=s(cG);N0o=r(d5t,"DPTModel"),d5t.forEach(t),q0o=r(QSe," (DPT model)"),QSe.forEach(t),j0o=i(x),H_=n(x,"LI",{});var USe=s(H_);mge=n(USe,"STRONG",{});var c5t=s(mge);D0o=r(c5t,"electra"),c5t.forEach(t),G0o=r(USe," \u2014 "),fG=n(USe,"A",{href:!0});var f5t=s(fG);O0o=r(f5t,"ElectraModel"),f5t.forEach(t),V0o=r(USe," (ELECTRA model)"),USe.forEach(t),X0o=i(x),J_=n(x,"LI",{});var HSe=s(J_);gge=n(HSe,"STRONG",{});var m5t=s(gge);z0o=r(m5t,"flaubert"),m5t.forEach(t),W0o=r(HSe," \u2014 "),mG=n(HSe,"A",{href:!0});var g5t=s(mG);Q0o=r(g5t,"FlaubertModel"),g5t.forEach(t),U0o=r(HSe," (FlauBERT model)"),HSe.forEach(t),H0o=i(x),Y_=n(x,"LI",{});var JSe=s(Y_);hge=n(JSe,"STRONG",{});var h5t=s(hge);J0o=r(h5t,"flava"),h5t.forEach(t),Y0o=r(JSe," \u2014 "),gG=n(JSe,"A",{href:!0});var p5t=s(gG);K0o=r(p5t,"FlavaModel"),p5t.forEach(t),Z0o=r(JSe," (FLAVA model)"),JSe.forEach(t),ewo=i(x),K_=n(x,"LI",{});var YSe=s(K_);pge=n(YSe,"STRONG",{});var _5t=s(pge);owo=r(_5t,"fnet"),_5t.forEach(t),rwo=r(YSe," \u2014 "),hG=n(YSe,"A",{href:!0});var u5t=s(hG);two=r(u5t,"FNetModel"),u5t.forEach(t),awo=r(YSe," (FNet model)"),YSe.forEach(t),nwo=i(x),Z_=n(x,"LI",{});var KSe=s(Z_);_ge=n(KSe,"STRONG",{});var b5t=s(_ge);swo=r(b5t,"fsmt"),b5t.forEach(t),lwo=r(KSe," \u2014 "),pG=n(KSe,"A",{href:!0});var v5t=s(pG);iwo=r(v5t,"FSMTModel"),v5t.forEach(t),dwo=r(KSe," (FairSeq Machine-Translation model)"),KSe.forEach(t),cwo=i(x),nl=n(x,"LI",{});var eP=s(nl);uge=n(eP,"STRONG",{});var F5t=s(uge);fwo=r(F5t,"funnel"),F5t.forEach(t),mwo=r(eP," \u2014 "),_G=n(eP,"A",{href:!0});var T5t=s(_G);gwo=r(T5t,"FunnelModel"),T5t.forEach(t),hwo=r(eP," or "),uG=n(eP,"A",{href:!0});var M5t=s(uG);pwo=r(M5t,"FunnelBaseModel"),M5t.forEach(t),_wo=r(eP," (Funnel Transformer model)"),eP.forEach(t),uwo=i(x),eu=n(x,"LI",{});var ZSe=s(eu);bge=n(ZSe,"STRONG",{});var E5t=s(bge);bwo=r(E5t,"glpn"),E5t.forEach(t),vwo=r(ZSe," \u2014 "),bG=n(ZSe,"A",{href:!0});var C5t=s(bG);Fwo=r(C5t,"GLPNModel"),C5t.forEach(t),Two=r(ZSe," (GLPN model)"),ZSe.forEach(t),Mwo=i(x),ou=n(x,"LI",{});var eRe=s(ou);vge=n(eRe,"STRONG",{});var w5t=s(vge);Ewo=r(w5t,"gpt2"),w5t.forEach(t),Cwo=r(eRe," \u2014 "),vG=n(eRe,"A",{href:!0});var A5t=s(vG);wwo=r(A5t,"GPT2Model"),A5t.forEach(t),Awo=r(eRe," (OpenAI GPT-2 model)"),eRe.forEach(t),Lwo=i(x),ru=n(x,"LI",{});var oRe=s(ru);Fge=n(oRe,"STRONG",{});var L5t=s(Fge);ywo=r(L5t,"gpt_neo"),L5t.forEach(t),xwo=r(oRe," \u2014 "),FG=n(oRe,"A",{href:!0});var y5t=s(FG);$wo=r(y5t,"GPTNeoModel"),y5t.forEach(t),kwo=r(oRe," (GPT Neo model)"),oRe.forEach(t),Swo=i(x),tu=n(x,"LI",{});var rRe=s(tu);Tge=n(rRe,"STRONG",{});var x5t=s(Tge);Rwo=r(x5t,"gpt_neox"),x5t.forEach(t),Pwo=r(rRe," \u2014 "),TG=n(rRe,"A",{href:!0});var $5t=s(TG);Bwo=r($5t,"GPTNeoXModel"),$5t.forEach(t),Iwo=r(rRe," (GPT NeoX model)"),rRe.forEach(t),Nwo=i(x),au=n(x,"LI",{});var tRe=s(au);Mge=n(tRe,"STRONG",{});var k5t=s(Mge);qwo=r(k5t,"gptj"),k5t.forEach(t),jwo=r(tRe," \u2014 "),MG=n(tRe,"A",{href:!0});var S5t=s(MG);Dwo=r(S5t,"GPTJModel"),S5t.forEach(t),Gwo=r(tRe," (GPT-J model)"),tRe.forEach(t),Owo=i(x),nu=n(x,"LI",{});var aRe=s(nu);Ege=n(aRe,"STRONG",{});var R5t=s(Ege);Vwo=r(R5t,"groupvit"),R5t.forEach(t),Xwo=r(aRe," \u2014 "),EG=n(aRe,"A",{href:!0});var P5t=s(EG);zwo=r(P5t,"GroupViTModel"),P5t.forEach(t),Wwo=r(aRe," (GroupViT model)"),aRe.forEach(t),Qwo=i(x),su=n(x,"LI",{});var nRe=s(su);Cge=n(nRe,"STRONG",{});var B5t=s(Cge);Uwo=r(B5t,"hubert"),B5t.forEach(t),Hwo=r(nRe," \u2014 "),CG=n(nRe,"A",{href:!0});var I5t=s(CG);Jwo=r(I5t,"HubertModel"),I5t.forEach(t),Ywo=r(nRe," (Hubert model)"),nRe.forEach(t),Kwo=i(x),lu=n(x,"LI",{});var sRe=s(lu);wge=n(sRe,"STRONG",{});var N5t=s(wge);Zwo=r(N5t,"ibert"),N5t.forEach(t),eAo=r(sRe," \u2014 "),wG=n(sRe,"A",{href:!0});var q5t=s(wG);oAo=r(q5t,"IBertModel"),q5t.forEach(t),rAo=r(sRe," (I-BERT model)"),sRe.forEach(t),tAo=i(x),iu=n(x,"LI",{});var lRe=s(iu);Age=n(lRe,"STRONG",{});var j5t=s(Age);aAo=r(j5t,"imagegpt"),j5t.forEach(t),nAo=r(lRe," \u2014 "),AG=n(lRe,"A",{href:!0});var D5t=s(AG);sAo=r(D5t,"ImageGPTModel"),D5t.forEach(t),lAo=r(lRe," (ImageGPT model)"),lRe.forEach(t),iAo=i(x),du=n(x,"LI",{});var iRe=s(du);Lge=n(iRe,"STRONG",{});var G5t=s(Lge);dAo=r(G5t,"layoutlm"),G5t.forEach(t),cAo=r(iRe," \u2014 "),LG=n(iRe,"A",{href:!0});var O5t=s(LG);fAo=r(O5t,"LayoutLMModel"),O5t.forEach(t),mAo=r(iRe," (LayoutLM model)"),iRe.forEach(t),gAo=i(x),cu=n(x,"LI",{});var dRe=s(cu);yge=n(dRe,"STRONG",{});var V5t=s(yge);hAo=r(V5t,"layoutlmv2"),V5t.forEach(t),pAo=r(dRe," \u2014 "),yG=n(dRe,"A",{href:!0});var X5t=s(yG);_Ao=r(X5t,"LayoutLMv2Model"),X5t.forEach(t),uAo=r(dRe," (LayoutLMv2 model)"),dRe.forEach(t),bAo=i(x),fu=n(x,"LI",{});var cRe=s(fu);xge=n(cRe,"STRONG",{});var z5t=s(xge);vAo=r(z5t,"layoutlmv3"),z5t.forEach(t),FAo=r(cRe," \u2014 "),xG=n(cRe,"A",{href:!0});var W5t=s(xG);TAo=r(W5t,"LayoutLMv3Model"),W5t.forEach(t),MAo=r(cRe," (LayoutLMv3 model)"),cRe.forEach(t),EAo=i(x),mu=n(x,"LI",{});var fRe=s(mu);$ge=n(fRe,"STRONG",{});var Q5t=s($ge);CAo=r(Q5t,"led"),Q5t.forEach(t),wAo=r(fRe," \u2014 "),$G=n(fRe,"A",{href:!0});var U5t=s($G);AAo=r(U5t,"LEDModel"),U5t.forEach(t),LAo=r(fRe," (LED model)"),fRe.forEach(t),yAo=i(x),gu=n(x,"LI",{});var mRe=s(gu);kge=n(mRe,"STRONG",{});var H5t=s(kge);xAo=r(H5t,"levit"),H5t.forEach(t),$Ao=r(mRe," \u2014 "),kG=n(mRe,"A",{href:!0});var J5t=s(kG);kAo=r(J5t,"LevitModel"),J5t.forEach(t),SAo=r(mRe," (LeViT model)"),mRe.forEach(t),RAo=i(x),hu=n(x,"LI",{});var gRe=s(hu);Sge=n(gRe,"STRONG",{});var Y5t=s(Sge);PAo=r(Y5t,"longformer"),Y5t.forEach(t),BAo=r(gRe," \u2014 "),SG=n(gRe,"A",{href:!0});var K5t=s(SG);IAo=r(K5t,"LongformerModel"),K5t.forEach(t),NAo=r(gRe," (Longformer model)"),gRe.forEach(t),qAo=i(x),pu=n(x,"LI",{});var hRe=s(pu);Rge=n(hRe,"STRONG",{});var Z5t=s(Rge);jAo=r(Z5t,"longt5"),Z5t.forEach(t),DAo=r(hRe," \u2014 "),RG=n(hRe,"A",{href:!0});var e6t=s(RG);GAo=r(e6t,"LongT5Model"),e6t.forEach(t),OAo=r(hRe," (LongT5 model)"),hRe.forEach(t),VAo=i(x),_u=n(x,"LI",{});var pRe=s(_u);Pge=n(pRe,"STRONG",{});var o6t=s(Pge);XAo=r(o6t,"luke"),o6t.forEach(t),zAo=r(pRe," \u2014 "),PG=n(pRe,"A",{href:!0});var r6t=s(PG);WAo=r(r6t,"LukeModel"),r6t.forEach(t),QAo=r(pRe," (LUKE model)"),pRe.forEach(t),UAo=i(x),uu=n(x,"LI",{});var _Re=s(uu);Bge=n(_Re,"STRONG",{});var t6t=s(Bge);HAo=r(t6t,"lxmert"),t6t.forEach(t),JAo=r(_Re," \u2014 "),BG=n(_Re,"A",{href:!0});var a6t=s(BG);YAo=r(a6t,"LxmertModel"),a6t.forEach(t),KAo=r(_Re," (LXMERT model)"),_Re.forEach(t),ZAo=i(x),bu=n(x,"LI",{});var uRe=s(bu);Ige=n(uRe,"STRONG",{});var n6t=s(Ige);e7o=r(n6t,"m2m_100"),n6t.forEach(t),o7o=r(uRe," \u2014 "),IG=n(uRe,"A",{href:!0});var s6t=s(IG);r7o=r(s6t,"M2M100Model"),s6t.forEach(t),t7o=r(uRe," (M2M100 model)"),uRe.forEach(t),a7o=i(x),vu=n(x,"LI",{});var bRe=s(vu);Nge=n(bRe,"STRONG",{});var l6t=s(Nge);n7o=r(l6t,"marian"),l6t.forEach(t),s7o=r(bRe," \u2014 "),NG=n(bRe,"A",{href:!0});var i6t=s(NG);l7o=r(i6t,"MarianModel"),i6t.forEach(t),i7o=r(bRe," (Marian model)"),bRe.forEach(t),d7o=i(x),Fu=n(x,"LI",{});var vRe=s(Fu);qge=n(vRe,"STRONG",{});var d6t=s(qge);c7o=r(d6t,"maskformer"),d6t.forEach(t),f7o=r(vRe," \u2014 "),qG=n(vRe,"A",{href:!0});var c6t=s(qG);m7o=r(c6t,"MaskFormerModel"),c6t.forEach(t),g7o=r(vRe," (MaskFormer model)"),vRe.forEach(t),h7o=i(x),Tu=n(x,"LI",{});var FRe=s(Tu);jge=n(FRe,"STRONG",{});var f6t=s(jge);p7o=r(f6t,"mbart"),f6t.forEach(t),_7o=r(FRe," \u2014 "),jG=n(FRe,"A",{href:!0});var m6t=s(jG);u7o=r(m6t,"MBartModel"),m6t.forEach(t),b7o=r(FRe," (mBART model)"),FRe.forEach(t),v7o=i(x),Mu=n(x,"LI",{});var TRe=s(Mu);Dge=n(TRe,"STRONG",{});var g6t=s(Dge);F7o=r(g6t,"mctct"),g6t.forEach(t),T7o=r(TRe," \u2014 "),DG=n(TRe,"A",{href:!0});var h6t=s(DG);M7o=r(h6t,"MCTCTModel"),h6t.forEach(t),E7o=r(TRe," (M-CTC-T model)"),TRe.forEach(t),C7o=i(x),Eu=n(x,"LI",{});var MRe=s(Eu);Gge=n(MRe,"STRONG",{});var p6t=s(Gge);w7o=r(p6t,"megatron-bert"),p6t.forEach(t),A7o=r(MRe," \u2014 "),GG=n(MRe,"A",{href:!0});var _6t=s(GG);L7o=r(_6t,"MegatronBertModel"),_6t.forEach(t),y7o=r(MRe," (Megatron-BERT model)"),MRe.forEach(t),x7o=i(x),Cu=n(x,"LI",{});var ERe=s(Cu);Oge=n(ERe,"STRONG",{});var u6t=s(Oge);$7o=r(u6t,"mobilebert"),u6t.forEach(t),k7o=r(ERe," \u2014 "),OG=n(ERe,"A",{href:!0});var b6t=s(OG);S7o=r(b6t,"MobileBertModel"),b6t.forEach(t),R7o=r(ERe," (MobileBERT model)"),ERe.forEach(t),P7o=i(x),wu=n(x,"LI",{});var CRe=s(wu);Vge=n(CRe,"STRONG",{});var v6t=s(Vge);B7o=r(v6t,"mobilevit"),v6t.forEach(t),I7o=r(CRe," \u2014 "),VG=n(CRe,"A",{href:!0});var F6t=s(VG);N7o=r(F6t,"MobileViTModel"),F6t.forEach(t),q7o=r(CRe," (MobileViT model)"),CRe.forEach(t),j7o=i(x),Au=n(x,"LI",{});var wRe=s(Au);Xge=n(wRe,"STRONG",{});var T6t=s(Xge);D7o=r(T6t,"mpnet"),T6t.forEach(t),G7o=r(wRe," \u2014 "),XG=n(wRe,"A",{href:!0});var M6t=s(XG);O7o=r(M6t,"MPNetModel"),M6t.forEach(t),V7o=r(wRe," (MPNet model)"),wRe.forEach(t),X7o=i(x),Lu=n(x,"LI",{});var ARe=s(Lu);zge=n(ARe,"STRONG",{});var E6t=s(zge);z7o=r(E6t,"mt5"),E6t.forEach(t),W7o=r(ARe," \u2014 "),zG=n(ARe,"A",{href:!0});var C6t=s(zG);Q7o=r(C6t,"MT5Model"),C6t.forEach(t),U7o=r(ARe," (MT5 model)"),ARe.forEach(t),H7o=i(x),yu=n(x,"LI",{});var LRe=s(yu);Wge=n(LRe,"STRONG",{});var w6t=s(Wge);J7o=r(w6t,"mvp"),w6t.forEach(t),Y7o=r(LRe," \u2014 "),WG=n(LRe,"A",{href:!0});var A6t=s(WG);K7o=r(A6t,"MvpModel"),A6t.forEach(t),Z7o=r(LRe," (MVP model)"),LRe.forEach(t),eLo=i(x),xu=n(x,"LI",{});var yRe=s(xu);Qge=n(yRe,"STRONG",{});var L6t=s(Qge);oLo=r(L6t,"nezha"),L6t.forEach(t),rLo=r(yRe," \u2014 "),QG=n(yRe,"A",{href:!0});var y6t=s(QG);tLo=r(y6t,"NezhaModel"),y6t.forEach(t),aLo=r(yRe," (Nezha model)"),yRe.forEach(t),nLo=i(x),$u=n(x,"LI",{});var xRe=s($u);Uge=n(xRe,"STRONG",{});var x6t=s(Uge);sLo=r(x6t,"nllb"),x6t.forEach(t),lLo=r(xRe," \u2014 "),UG=n(xRe,"A",{href:!0});var $6t=s(UG);iLo=r($6t,"M2M100Model"),$6t.forEach(t),dLo=r(xRe," (NLLB model)"),xRe.forEach(t),cLo=i(x),ku=n(x,"LI",{});var $Re=s(ku);Hge=n($Re,"STRONG",{});var k6t=s(Hge);fLo=r(k6t,"nystromformer"),k6t.forEach(t),mLo=r($Re," \u2014 "),HG=n($Re,"A",{href:!0});var S6t=s(HG);gLo=r(S6t,"NystromformerModel"),S6t.forEach(t),hLo=r($Re," (Nystr\xF6mformer model)"),$Re.forEach(t),pLo=i(x),Su=n(x,"LI",{});var kRe=s(Su);Jge=n(kRe,"STRONG",{});var R6t=s(Jge);_Lo=r(R6t,"openai-gpt"),R6t.forEach(t),uLo=r(kRe," \u2014 "),JG=n(kRe,"A",{href:!0});var P6t=s(JG);bLo=r(P6t,"OpenAIGPTModel"),P6t.forEach(t),vLo=r(kRe," (OpenAI GPT model)"),kRe.forEach(t),FLo=i(x),Ru=n(x,"LI",{});var SRe=s(Ru);Yge=n(SRe,"STRONG",{});var B6t=s(Yge);TLo=r(B6t,"opt"),B6t.forEach(t),MLo=r(SRe," \u2014 "),YG=n(SRe,"A",{href:!0});var I6t=s(YG);ELo=r(I6t,"OPTModel"),I6t.forEach(t),CLo=r(SRe," (OPT model)"),SRe.forEach(t),wLo=i(x),Pu=n(x,"LI",{});var RRe=s(Pu);Kge=n(RRe,"STRONG",{});var N6t=s(Kge);ALo=r(N6t,"owlvit"),N6t.forEach(t),LLo=r(RRe," \u2014 "),KG=n(RRe,"A",{href:!0});var q6t=s(KG);yLo=r(q6t,"OwlViTModel"),q6t.forEach(t),xLo=r(RRe," (OWL-ViT model)"),RRe.forEach(t),$Lo=i(x),Bu=n(x,"LI",{});var PRe=s(Bu);Zge=n(PRe,"STRONG",{});var j6t=s(Zge);kLo=r(j6t,"pegasus"),j6t.forEach(t),SLo=r(PRe," \u2014 "),ZG=n(PRe,"A",{href:!0});var D6t=s(ZG);RLo=r(D6t,"PegasusModel"),D6t.forEach(t),PLo=r(PRe," (Pegasus model)"),PRe.forEach(t),BLo=i(x),Iu=n(x,"LI",{});var BRe=s(Iu);ehe=n(BRe,"STRONG",{});var G6t=s(ehe);ILo=r(G6t,"perceiver"),G6t.forEach(t),NLo=r(BRe," \u2014 "),eO=n(BRe,"A",{href:!0});var O6t=s(eO);qLo=r(O6t,"PerceiverModel"),O6t.forEach(t),jLo=r(BRe," (Perceiver model)"),BRe.forEach(t),DLo=i(x),Nu=n(x,"LI",{});var IRe=s(Nu);ohe=n(IRe,"STRONG",{});var V6t=s(ohe);GLo=r(V6t,"plbart"),V6t.forEach(t),OLo=r(IRe," \u2014 "),oO=n(IRe,"A",{href:!0});var X6t=s(oO);VLo=r(X6t,"PLBartModel"),X6t.forEach(t),XLo=r(IRe," (PLBart model)"),IRe.forEach(t),zLo=i(x),qu=n(x,"LI",{});var NRe=s(qu);rhe=n(NRe,"STRONG",{});var z6t=s(rhe);WLo=r(z6t,"poolformer"),z6t.forEach(t),QLo=r(NRe," \u2014 "),rO=n(NRe,"A",{href:!0});var W6t=s(rO);ULo=r(W6t,"PoolFormerModel"),W6t.forEach(t),HLo=r(NRe," (PoolFormer model)"),NRe.forEach(t),JLo=i(x),ju=n(x,"LI",{});var qRe=s(ju);the=n(qRe,"STRONG",{});var Q6t=s(the);YLo=r(Q6t,"prophetnet"),Q6t.forEach(t),KLo=r(qRe," \u2014 "),tO=n(qRe,"A",{href:!0});var U6t=s(tO);ZLo=r(U6t,"ProphetNetModel"),U6t.forEach(t),eyo=r(qRe," (ProphetNet model)"),qRe.forEach(t),oyo=i(x),Du=n(x,"LI",{});var jRe=s(Du);ahe=n(jRe,"STRONG",{});var H6t=s(ahe);ryo=r(H6t,"qdqbert"),H6t.forEach(t),tyo=r(jRe," \u2014 "),aO=n(jRe,"A",{href:!0});var J6t=s(aO);ayo=r(J6t,"QDQBertModel"),J6t.forEach(t),nyo=r(jRe," (QDQBert model)"),jRe.forEach(t),syo=i(x),Gu=n(x,"LI",{});var DRe=s(Gu);nhe=n(DRe,"STRONG",{});var Y6t=s(nhe);lyo=r(Y6t,"reformer"),Y6t.forEach(t),iyo=r(DRe," \u2014 "),nO=n(DRe,"A",{href:!0});var K6t=s(nO);dyo=r(K6t,"ReformerModel"),K6t.forEach(t),cyo=r(DRe," (Reformer model)"),DRe.forEach(t),fyo=i(x),Ou=n(x,"LI",{});var GRe=s(Ou);she=n(GRe,"STRONG",{});var Z6t=s(she);myo=r(Z6t,"regnet"),Z6t.forEach(t),gyo=r(GRe," \u2014 "),sO=n(GRe,"A",{href:!0});var eFt=s(sO);hyo=r(eFt,"RegNetModel"),eFt.forEach(t),pyo=r(GRe," (RegNet model)"),GRe.forEach(t),_yo=i(x),Vu=n(x,"LI",{});var ORe=s(Vu);lhe=n(ORe,"STRONG",{});var oFt=s(lhe);uyo=r(oFt,"rembert"),oFt.forEach(t),byo=r(ORe," \u2014 "),lO=n(ORe,"A",{href:!0});var rFt=s(lO);vyo=r(rFt,"RemBertModel"),rFt.forEach(t),Fyo=r(ORe," (RemBERT model)"),ORe.forEach(t),Tyo=i(x),Xu=n(x,"LI",{});var VRe=s(Xu);ihe=n(VRe,"STRONG",{});var tFt=s(ihe);Myo=r(tFt,"resnet"),tFt.forEach(t),Eyo=r(VRe," \u2014 "),iO=n(VRe,"A",{href:!0});var aFt=s(iO);Cyo=r(aFt,"ResNetModel"),aFt.forEach(t),wyo=r(VRe," (ResNet model)"),VRe.forEach(t),Ayo=i(x),zu=n(x,"LI",{});var XRe=s(zu);dhe=n(XRe,"STRONG",{});var nFt=s(dhe);Lyo=r(nFt,"retribert"),nFt.forEach(t),yyo=r(XRe," \u2014 "),dO=n(XRe,"A",{href:!0});var sFt=s(dO);xyo=r(sFt,"RetriBertModel"),sFt.forEach(t),$yo=r(XRe," (RetriBERT model)"),XRe.forEach(t),kyo=i(x),Wu=n(x,"LI",{});var zRe=s(Wu);che=n(zRe,"STRONG",{});var lFt=s(che);Syo=r(lFt,"roberta"),lFt.forEach(t),Ryo=r(zRe," \u2014 "),cO=n(zRe,"A",{href:!0});var iFt=s(cO);Pyo=r(iFt,"RobertaModel"),iFt.forEach(t),Byo=r(zRe," (RoBERTa model)"),zRe.forEach(t),Iyo=i(x),Qu=n(x,"LI",{});var WRe=s(Qu);fhe=n(WRe,"STRONG",{});var dFt=s(fhe);Nyo=r(dFt,"roformer"),dFt.forEach(t),qyo=r(WRe," \u2014 "),fO=n(WRe,"A",{href:!0});var cFt=s(fO);jyo=r(cFt,"RoFormerModel"),cFt.forEach(t),Dyo=r(WRe," (RoFormer model)"),WRe.forEach(t),Gyo=i(x),Uu=n(x,"LI",{});var QRe=s(Uu);mhe=n(QRe,"STRONG",{});var fFt=s(mhe);Oyo=r(fFt,"segformer"),fFt.forEach(t),Vyo=r(QRe," \u2014 "),mO=n(QRe,"A",{href:!0});var mFt=s(mO);Xyo=r(mFt,"SegformerModel"),mFt.forEach(t),zyo=r(QRe," (SegFormer model)"),QRe.forEach(t),Wyo=i(x),Hu=n(x,"LI",{});var URe=s(Hu);ghe=n(URe,"STRONG",{});var gFt=s(ghe);Qyo=r(gFt,"sew"),gFt.forEach(t),Uyo=r(URe," \u2014 "),gO=n(URe,"A",{href:!0});var hFt=s(gO);Hyo=r(hFt,"SEWModel"),hFt.forEach(t),Jyo=r(URe," (SEW model)"),URe.forEach(t),Yyo=i(x),Ju=n(x,"LI",{});var HRe=s(Ju);hhe=n(HRe,"STRONG",{});var pFt=s(hhe);Kyo=r(pFt,"sew-d"),pFt.forEach(t),Zyo=r(HRe," \u2014 "),hO=n(HRe,"A",{href:!0});var _Ft=s(hO);e8o=r(_Ft,"SEWDModel"),_Ft.forEach(t),o8o=r(HRe," (SEW-D model)"),HRe.forEach(t),r8o=i(x),Yu=n(x,"LI",{});var JRe=s(Yu);phe=n(JRe,"STRONG",{});var uFt=s(phe);t8o=r(uFt,"speech_to_text"),uFt.forEach(t),a8o=r(JRe," \u2014 "),pO=n(JRe,"A",{href:!0});var bFt=s(pO);n8o=r(bFt,"Speech2TextModel"),bFt.forEach(t),s8o=r(JRe," (Speech2Text model)"),JRe.forEach(t),l8o=i(x),Ku=n(x,"LI",{});var YRe=s(Ku);_he=n(YRe,"STRONG",{});var vFt=s(_he);i8o=r(vFt,"splinter"),vFt.forEach(t),d8o=r(YRe," \u2014 "),_O=n(YRe,"A",{href:!0});var FFt=s(_O);c8o=r(FFt,"SplinterModel"),FFt.forEach(t),f8o=r(YRe," (Splinter model)"),YRe.forEach(t),m8o=i(x),Zu=n(x,"LI",{});var KRe=s(Zu);uhe=n(KRe,"STRONG",{});var TFt=s(uhe);g8o=r(TFt,"squeezebert"),TFt.forEach(t),h8o=r(KRe," \u2014 "),uO=n(KRe,"A",{href:!0});var MFt=s(uO);p8o=r(MFt,"SqueezeBertModel"),MFt.forEach(t),_8o=r(KRe," (SqueezeBERT model)"),KRe.forEach(t),u8o=i(x),e1=n(x,"LI",{});var ZRe=s(e1);bhe=n(ZRe,"STRONG",{});var EFt=s(bhe);b8o=r(EFt,"swin"),EFt.forEach(t),v8o=r(ZRe," \u2014 "),bO=n(ZRe,"A",{href:!0});var CFt=s(bO);F8o=r(CFt,"SwinModel"),CFt.forEach(t),T8o=r(ZRe," (Swin Transformer model)"),ZRe.forEach(t),M8o=i(x),o1=n(x,"LI",{});var ePe=s(o1);vhe=n(ePe,"STRONG",{});var wFt=s(vhe);E8o=r(wFt,"swinv2"),wFt.forEach(t),C8o=r(ePe," \u2014 "),vO=n(ePe,"A",{href:!0});var AFt=s(vO);w8o=r(AFt,"Swinv2Model"),AFt.forEach(t),A8o=r(ePe," (Swin Transformer V2 model)"),ePe.forEach(t),L8o=i(x),r1=n(x,"LI",{});var oPe=s(r1);Fhe=n(oPe,"STRONG",{});var LFt=s(Fhe);y8o=r(LFt,"t5"),LFt.forEach(t),x8o=r(oPe," \u2014 "),FO=n(oPe,"A",{href:!0});var yFt=s(FO);$8o=r(yFt,"T5Model"),yFt.forEach(t),k8o=r(oPe," (T5 model)"),oPe.forEach(t),S8o=i(x),t1=n(x,"LI",{});var rPe=s(t1);The=n(rPe,"STRONG",{});var xFt=s(The);R8o=r(xFt,"tapas"),xFt.forEach(t),P8o=r(rPe," \u2014 "),TO=n(rPe,"A",{href:!0});var $Ft=s(TO);B8o=r($Ft,"TapasModel"),$Ft.forEach(t),I8o=r(rPe," (TAPAS model)"),rPe.forEach(t),N8o=i(x),a1=n(x,"LI",{});var tPe=s(a1);Mhe=n(tPe,"STRONG",{});var kFt=s(Mhe);q8o=r(kFt,"trajectory_transformer"),kFt.forEach(t),j8o=r(tPe," \u2014 "),MO=n(tPe,"A",{href:!0});var SFt=s(MO);D8o=r(SFt,"TrajectoryTransformerModel"),SFt.forEach(t),G8o=r(tPe," (Trajectory Transformer model)"),tPe.forEach(t),O8o=i(x),n1=n(x,"LI",{});var aPe=s(n1);Ehe=n(aPe,"STRONG",{});var RFt=s(Ehe);V8o=r(RFt,"transfo-xl"),RFt.forEach(t),X8o=r(aPe," \u2014 "),EO=n(aPe,"A",{href:!0});var PFt=s(EO);z8o=r(PFt,"TransfoXLModel"),PFt.forEach(t),W8o=r(aPe," (Transformer-XL model)"),aPe.forEach(t),Q8o=i(x),s1=n(x,"LI",{});var nPe=s(s1);Che=n(nPe,"STRONG",{});var BFt=s(Che);U8o=r(BFt,"unispeech"),BFt.forEach(t),H8o=r(nPe," \u2014 "),CO=n(nPe,"A",{href:!0});var IFt=s(CO);J8o=r(IFt,"UniSpeechModel"),IFt.forEach(t),Y8o=r(nPe," (UniSpeech model)"),nPe.forEach(t),K8o=i(x),l1=n(x,"LI",{});var sPe=s(l1);whe=n(sPe,"STRONG",{});var NFt=s(whe);Z8o=r(NFt,"unispeech-sat"),NFt.forEach(t),e9o=r(sPe," \u2014 "),wO=n(sPe,"A",{href:!0});var qFt=s(wO);o9o=r(qFt,"UniSpeechSatModel"),qFt.forEach(t),r9o=r(sPe," (UniSpeechSat model)"),sPe.forEach(t),t9o=i(x),i1=n(x,"LI",{});var lPe=s(i1);Ahe=n(lPe,"STRONG",{});var jFt=s(Ahe);a9o=r(jFt,"van"),jFt.forEach(t),n9o=r(lPe," \u2014 "),AO=n(lPe,"A",{href:!0});var DFt=s(AO);s9o=r(DFt,"VanModel"),DFt.forEach(t),l9o=r(lPe," (VAN model)"),lPe.forEach(t),i9o=i(x),d1=n(x,"LI",{});var iPe=s(d1);Lhe=n(iPe,"STRONG",{});var GFt=s(Lhe);d9o=r(GFt,"videomae"),GFt.forEach(t),c9o=r(iPe," \u2014 "),LO=n(iPe,"A",{href:!0});var OFt=s(LO);f9o=r(OFt,"VideoMAEModel"),OFt.forEach(t),m9o=r(iPe," (VideoMAE model)"),iPe.forEach(t),g9o=i(x),c1=n(x,"LI",{});var dPe=s(c1);yhe=n(dPe,"STRONG",{});var VFt=s(yhe);h9o=r(VFt,"vilt"),VFt.forEach(t),p9o=r(dPe," \u2014 "),yO=n(dPe,"A",{href:!0});var XFt=s(yO);_9o=r(XFt,"ViltModel"),XFt.forEach(t),u9o=r(dPe," (ViLT model)"),dPe.forEach(t),b9o=i(x),f1=n(x,"LI",{});var cPe=s(f1);xhe=n(cPe,"STRONG",{});var zFt=s(xhe);v9o=r(zFt,"vision-text-dual-encoder"),zFt.forEach(t),F9o=r(cPe," \u2014 "),xO=n(cPe,"A",{href:!0});var WFt=s(xO);T9o=r(WFt,"VisionTextDualEncoderModel"),WFt.forEach(t),M9o=r(cPe," (VisionTextDualEncoder model)"),cPe.forEach(t),E9o=i(x),m1=n(x,"LI",{});var fPe=s(m1);$he=n(fPe,"STRONG",{});var QFt=s($he);C9o=r(QFt,"visual_bert"),QFt.forEach(t),w9o=r(fPe," \u2014 "),$O=n(fPe,"A",{href:!0});var UFt=s($O);A9o=r(UFt,"VisualBertModel"),UFt.forEach(t),L9o=r(fPe," (VisualBERT model)"),fPe.forEach(t),y9o=i(x),g1=n(x,"LI",{});var mPe=s(g1);khe=n(mPe,"STRONG",{});var HFt=s(khe);x9o=r(HFt,"vit"),HFt.forEach(t),$9o=r(mPe," \u2014 "),kO=n(mPe,"A",{href:!0});var JFt=s(kO);k9o=r(JFt,"ViTModel"),JFt.forEach(t),S9o=r(mPe," (ViT model)"),mPe.forEach(t),R9o=i(x),h1=n(x,"LI",{});var gPe=s(h1);She=n(gPe,"STRONG",{});var YFt=s(She);P9o=r(YFt,"vit_mae"),YFt.forEach(t),B9o=r(gPe," \u2014 "),SO=n(gPe,"A",{href:!0});var KFt=s(SO);I9o=r(KFt,"ViTMAEModel"),KFt.forEach(t),N9o=r(gPe," (ViTMAE model)"),gPe.forEach(t),q9o=i(x),p1=n(x,"LI",{});var hPe=s(p1);Rhe=n(hPe,"STRONG",{});var ZFt=s(Rhe);j9o=r(ZFt,"wav2vec2"),ZFt.forEach(t),D9o=r(hPe," \u2014 "),RO=n(hPe,"A",{href:!0});var eTt=s(RO);G9o=r(eTt,"Wav2Vec2Model"),eTt.forEach(t),O9o=r(hPe," (Wav2Vec2 model)"),hPe.forEach(t),V9o=i(x),_1=n(x,"LI",{});var pPe=s(_1);Phe=n(pPe,"STRONG",{});var oTt=s(Phe);X9o=r(oTt,"wav2vec2-conformer"),oTt.forEach(t),z9o=r(pPe," \u2014 "),PO=n(pPe,"A",{href:!0});var rTt=s(PO);W9o=r(rTt,"Wav2Vec2ConformerModel"),rTt.forEach(t),Q9o=r(pPe," (Wav2Vec2-Conformer model)"),pPe.forEach(t),U9o=i(x),u1=n(x,"LI",{});var _Pe=s(u1);Bhe=n(_Pe,"STRONG",{});var tTt=s(Bhe);H9o=r(tTt,"wavlm"),tTt.forEach(t),J9o=r(_Pe," \u2014 "),BO=n(_Pe,"A",{href:!0});var aTt=s(BO);Y9o=r(aTt,"WavLMModel"),aTt.forEach(t),K9o=r(_Pe," (WavLM model)"),_Pe.forEach(t),Z9o=i(x),b1=n(x,"LI",{});var uPe=s(b1);Ihe=n(uPe,"STRONG",{});var nTt=s(Ihe);exo=r(nTt,"xglm"),nTt.forEach(t),oxo=r(uPe," \u2014 "),IO=n(uPe,"A",{href:!0});var sTt=s(IO);rxo=r(sTt,"XGLMModel"),sTt.forEach(t),txo=r(uPe," (XGLM model)"),uPe.forEach(t),axo=i(x),v1=n(x,"LI",{});var bPe=s(v1);Nhe=n(bPe,"STRONG",{});var lTt=s(Nhe);nxo=r(lTt,"xlm"),lTt.forEach(t),sxo=r(bPe," \u2014 "),NO=n(bPe,"A",{href:!0});var iTt=s(NO);lxo=r(iTt,"XLMModel"),iTt.forEach(t),ixo=r(bPe," (XLM model)"),bPe.forEach(t),dxo=i(x),F1=n(x,"LI",{});var vPe=s(F1);qhe=n(vPe,"STRONG",{});var dTt=s(qhe);cxo=r(dTt,"xlm-prophetnet"),dTt.forEach(t),fxo=r(vPe," \u2014 "),qO=n(vPe,"A",{href:!0});var cTt=s(qO);mxo=r(cTt,"XLMProphetNetModel"),cTt.forEach(t),gxo=r(vPe," (XLM-ProphetNet model)"),vPe.forEach(t),hxo=i(x),T1=n(x,"LI",{});var FPe=s(T1);jhe=n(FPe,"STRONG",{});var fTt=s(jhe);pxo=r(fTt,"xlm-roberta"),fTt.forEach(t),_xo=r(FPe," \u2014 "),jO=n(FPe,"A",{href:!0});var mTt=s(jO);uxo=r(mTt,"XLMRobertaModel"),mTt.forEach(t),bxo=r(FPe," (XLM-RoBERTa model)"),FPe.forEach(t),vxo=i(x),M1=n(x,"LI",{});var TPe=s(M1);Dhe=n(TPe,"STRONG",{});var gTt=s(Dhe);Fxo=r(gTt,"xlm-roberta-xl"),gTt.forEach(t),Txo=r(TPe," \u2014 "),DO=n(TPe,"A",{href:!0});var hTt=s(DO);Mxo=r(hTt,"XLMRobertaXLModel"),hTt.forEach(t),Exo=r(TPe," (XLM-RoBERTa-XL model)"),TPe.forEach(t),Cxo=i(x),E1=n(x,"LI",{});var MPe=s(E1);Ghe=n(MPe,"STRONG",{});var pTt=s(Ghe);wxo=r(pTt,"xlnet"),pTt.forEach(t),Axo=r(MPe," \u2014 "),GO=n(MPe,"A",{href:!0});var _Tt=s(GO);Lxo=r(_Tt,"XLNetModel"),_Tt.forEach(t),yxo=r(MPe," (XLNet model)"),MPe.forEach(t),xxo=i(x),C1=n(x,"LI",{});var EPe=s(C1);Ohe=n(EPe,"STRONG",{});var uTt=s(Ohe);$xo=r(uTt,"yolos"),uTt.forEach(t),kxo=r(EPe," \u2014 "),OO=n(EPe,"A",{href:!0});var bTt=s(OO);Sxo=r(bTt,"YolosModel"),bTt.forEach(t),Rxo=r(EPe," (YOLOS model)"),EPe.forEach(t),Pxo=i(x),w1=n(x,"LI",{});var CPe=s(w1);Vhe=n(CPe,"STRONG",{});var vTt=s(Vhe);Bxo=r(vTt,"yoso"),vTt.forEach(t),Ixo=r(CPe," \u2014 "),VO=n(CPe,"A",{href:!0});var FTt=s(VO);Nxo=r(FTt,"YosoModel"),FTt.forEach(t),qxo=r(CPe," (YOSO model)"),CPe.forEach(t),x.forEach(t),jxo=i(ga),A1=n(ga,"P",{});var wPe=s(A1);Dxo=r(wPe,"The model is set in evaluation mode by default using "),Xhe=n(wPe,"CODE",{});var TTt=s(Xhe);Gxo=r(TTt,"model.eval()"),TTt.forEach(t),Oxo=r(wPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zhe=n(wPe,"CODE",{});var MTt=s(zhe);Vxo=r(MTt,"model.train()"),MTt.forEach(t),wPe.forEach(t),Xxo=i(ga),T(L1.$$.fragment,ga),ga.forEach(t),hl.forEach(t),dUe=i(f),nd=n(f,"H2",{class:!0});var vJe=s(nd);y1=n(vJe,"A",{id:!0,class:!0,href:!0});var ETt=s(y1);Whe=n(ETt,"SPAN",{});var CTt=s(Whe);T(W8.$$.fragment,CTt),CTt.forEach(t),ETt.forEach(t),zxo=i(vJe),Qhe=n(vJe,"SPAN",{});var wTt=s(Qhe);Wxo=r(wTt,"AutoModelForPreTraining"),wTt.forEach(t),vJe.forEach(t),cUe=i(f),Ro=n(f,"DIV",{class:!0});var pl=s(Ro);T(Q8.$$.fragment,pl),Qxo=i(pl),sd=n(pl,"P",{});var Wae=s(sd);Uxo=r(Wae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),XO=n(Wae,"A",{href:!0});var ATt=s(XO);Hxo=r(ATt,"from_pretrained()"),ATt.forEach(t),Jxo=r(Wae," class method or the "),zO=n(Wae,"A",{href:!0});var LTt=s(zO);Yxo=r(LTt,"from_config()"),LTt.forEach(t),Kxo=r(Wae,` class
method.`),Wae.forEach(t),Zxo=i(pl),U8=n(pl,"P",{});var FJe=s(U8);e$o=r(FJe,"This class cannot be instantiated directly using "),Uhe=n(FJe,"CODE",{});var yTt=s(Uhe);o$o=r(yTt,"__init__()"),yTt.forEach(t),r$o=r(FJe," (throws an error)."),FJe.forEach(t),t$o=i(pl),gt=n(pl,"DIV",{class:!0});var _L=s(gt);T(H8.$$.fragment,_L),a$o=i(_L),Hhe=n(_L,"P",{});var xTt=s(Hhe);n$o=r(xTt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xTt.forEach(t),s$o=i(_L),ld=n(_L,"P",{});var Qae=s(ld);l$o=r(Qae,`Note:
Loading a model from its configuration file does `),Jhe=n(Qae,"STRONG",{});var $Tt=s(Jhe);i$o=r($Tt,"not"),$Tt.forEach(t),d$o=r(Qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=n(Qae,"A",{href:!0});var kTt=s(WO);c$o=r(kTt,"from_pretrained()"),kTt.forEach(t),f$o=r(Qae," to load the model weights."),Qae.forEach(t),m$o=i(_L),T(x1.$$.fragment,_L),_L.forEach(t),g$o=i(pl),Ke=n(pl,"DIV",{class:!0});var ha=s(Ke);T(J8.$$.fragment,ha),h$o=i(ha),Yhe=n(ha,"P",{});var STt=s(Yhe);p$o=r(STt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),STt.forEach(t),_$o=i(ha),Xa=n(ha,"P",{});var uL=s(Xa);u$o=r(uL,"The model class to instantiate is selected based on the "),Khe=n(uL,"CODE",{});var RTt=s(Khe);b$o=r(RTt,"model_type"),RTt.forEach(t),v$o=r(uL,` property of the config object (either
passed as an argument or loaded from `),Zhe=n(uL,"CODE",{});var PTt=s(Zhe);F$o=r(PTt,"pretrained_model_name_or_path"),PTt.forEach(t),T$o=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),epe=n(uL,"CODE",{});var BTt=s(epe);M$o=r(BTt,"pretrained_model_name_or_path"),BTt.forEach(t),E$o=r(uL,":"),uL.forEach(t),C$o=i(ha),G=n(ha,"UL",{});var O=s(G);$1=n(O,"LI",{});var APe=s($1);ope=n(APe,"STRONG",{});var ITt=s(ope);w$o=r(ITt,"albert"),ITt.forEach(t),A$o=r(APe," \u2014 "),QO=n(APe,"A",{href:!0});var NTt=s(QO);L$o=r(NTt,"AlbertForPreTraining"),NTt.forEach(t),y$o=r(APe," (ALBERT model)"),APe.forEach(t),x$o=i(O),k1=n(O,"LI",{});var LPe=s(k1);rpe=n(LPe,"STRONG",{});var qTt=s(rpe);$$o=r(qTt,"bart"),qTt.forEach(t),k$o=r(LPe," \u2014 "),UO=n(LPe,"A",{href:!0});var jTt=s(UO);S$o=r(jTt,"BartForConditionalGeneration"),jTt.forEach(t),R$o=r(LPe," (BART model)"),LPe.forEach(t),P$o=i(O),S1=n(O,"LI",{});var yPe=s(S1);tpe=n(yPe,"STRONG",{});var DTt=s(tpe);B$o=r(DTt,"bert"),DTt.forEach(t),I$o=r(yPe," \u2014 "),HO=n(yPe,"A",{href:!0});var GTt=s(HO);N$o=r(GTt,"BertForPreTraining"),GTt.forEach(t),q$o=r(yPe," (BERT model)"),yPe.forEach(t),j$o=i(O),R1=n(O,"LI",{});var xPe=s(R1);ape=n(xPe,"STRONG",{});var OTt=s(ape);D$o=r(OTt,"big_bird"),OTt.forEach(t),G$o=r(xPe," \u2014 "),JO=n(xPe,"A",{href:!0});var VTt=s(JO);O$o=r(VTt,"BigBirdForPreTraining"),VTt.forEach(t),V$o=r(xPe," (BigBird model)"),xPe.forEach(t),X$o=i(O),P1=n(O,"LI",{});var $Pe=s(P1);npe=n($Pe,"STRONG",{});var XTt=s(npe);z$o=r(XTt,"bloom"),XTt.forEach(t),W$o=r($Pe," \u2014 "),YO=n($Pe,"A",{href:!0});var zTt=s(YO);Q$o=r(zTt,"BloomForCausalLM"),zTt.forEach(t),U$o=r($Pe," (BLOOM model)"),$Pe.forEach(t),H$o=i(O),B1=n(O,"LI",{});var kPe=s(B1);spe=n(kPe,"STRONG",{});var WTt=s(spe);J$o=r(WTt,"camembert"),WTt.forEach(t),Y$o=r(kPe," \u2014 "),KO=n(kPe,"A",{href:!0});var QTt=s(KO);K$o=r(QTt,"CamembertForMaskedLM"),QTt.forEach(t),Z$o=r(kPe," (CamemBERT model)"),kPe.forEach(t),eko=i(O),I1=n(O,"LI",{});var SPe=s(I1);lpe=n(SPe,"STRONG",{});var UTt=s(lpe);oko=r(UTt,"ctrl"),UTt.forEach(t),rko=r(SPe," \u2014 "),ZO=n(SPe,"A",{href:!0});var HTt=s(ZO);tko=r(HTt,"CTRLLMHeadModel"),HTt.forEach(t),ako=r(SPe," (CTRL model)"),SPe.forEach(t),nko=i(O),N1=n(O,"LI",{});var RPe=s(N1);ipe=n(RPe,"STRONG",{});var JTt=s(ipe);sko=r(JTt,"data2vec-text"),JTt.forEach(t),lko=r(RPe," \u2014 "),eV=n(RPe,"A",{href:!0});var YTt=s(eV);iko=r(YTt,"Data2VecTextForMaskedLM"),YTt.forEach(t),dko=r(RPe," (Data2VecText model)"),RPe.forEach(t),cko=i(O),q1=n(O,"LI",{});var PPe=s(q1);dpe=n(PPe,"STRONG",{});var KTt=s(dpe);fko=r(KTt,"deberta"),KTt.forEach(t),mko=r(PPe," \u2014 "),oV=n(PPe,"A",{href:!0});var ZTt=s(oV);gko=r(ZTt,"DebertaForMaskedLM"),ZTt.forEach(t),hko=r(PPe," (DeBERTa model)"),PPe.forEach(t),pko=i(O),j1=n(O,"LI",{});var BPe=s(j1);cpe=n(BPe,"STRONG",{});var eMt=s(cpe);_ko=r(eMt,"deberta-v2"),eMt.forEach(t),uko=r(BPe," \u2014 "),rV=n(BPe,"A",{href:!0});var oMt=s(rV);bko=r(oMt,"DebertaV2ForMaskedLM"),oMt.forEach(t),vko=r(BPe," (DeBERTa-v2 model)"),BPe.forEach(t),Fko=i(O),D1=n(O,"LI",{});var IPe=s(D1);fpe=n(IPe,"STRONG",{});var rMt=s(fpe);Tko=r(rMt,"distilbert"),rMt.forEach(t),Mko=r(IPe," \u2014 "),tV=n(IPe,"A",{href:!0});var tMt=s(tV);Eko=r(tMt,"DistilBertForMaskedLM"),tMt.forEach(t),Cko=r(IPe," (DistilBERT model)"),IPe.forEach(t),wko=i(O),G1=n(O,"LI",{});var NPe=s(G1);mpe=n(NPe,"STRONG",{});var aMt=s(mpe);Ako=r(aMt,"electra"),aMt.forEach(t),Lko=r(NPe," \u2014 "),aV=n(NPe,"A",{href:!0});var nMt=s(aV);yko=r(nMt,"ElectraForPreTraining"),nMt.forEach(t),xko=r(NPe," (ELECTRA model)"),NPe.forEach(t),$ko=i(O),O1=n(O,"LI",{});var qPe=s(O1);gpe=n(qPe,"STRONG",{});var sMt=s(gpe);kko=r(sMt,"flaubert"),sMt.forEach(t),Sko=r(qPe," \u2014 "),nV=n(qPe,"A",{href:!0});var lMt=s(nV);Rko=r(lMt,"FlaubertWithLMHeadModel"),lMt.forEach(t),Pko=r(qPe," (FlauBERT model)"),qPe.forEach(t),Bko=i(O),V1=n(O,"LI",{});var jPe=s(V1);hpe=n(jPe,"STRONG",{});var iMt=s(hpe);Iko=r(iMt,"flava"),iMt.forEach(t),Nko=r(jPe," \u2014 "),sV=n(jPe,"A",{href:!0});var dMt=s(sV);qko=r(dMt,"FlavaForPreTraining"),dMt.forEach(t),jko=r(jPe," (FLAVA model)"),jPe.forEach(t),Dko=i(O),X1=n(O,"LI",{});var DPe=s(X1);ppe=n(DPe,"STRONG",{});var cMt=s(ppe);Gko=r(cMt,"fnet"),cMt.forEach(t),Oko=r(DPe," \u2014 "),lV=n(DPe,"A",{href:!0});var fMt=s(lV);Vko=r(fMt,"FNetForPreTraining"),fMt.forEach(t),Xko=r(DPe," (FNet model)"),DPe.forEach(t),zko=i(O),z1=n(O,"LI",{});var GPe=s(z1);_pe=n(GPe,"STRONG",{});var mMt=s(_pe);Wko=r(mMt,"fsmt"),mMt.forEach(t),Qko=r(GPe," \u2014 "),iV=n(GPe,"A",{href:!0});var gMt=s(iV);Uko=r(gMt,"FSMTForConditionalGeneration"),gMt.forEach(t),Hko=r(GPe," (FairSeq Machine-Translation model)"),GPe.forEach(t),Jko=i(O),W1=n(O,"LI",{});var OPe=s(W1);upe=n(OPe,"STRONG",{});var hMt=s(upe);Yko=r(hMt,"funnel"),hMt.forEach(t),Kko=r(OPe," \u2014 "),dV=n(OPe,"A",{href:!0});var pMt=s(dV);Zko=r(pMt,"FunnelForPreTraining"),pMt.forEach(t),eSo=r(OPe," (Funnel Transformer model)"),OPe.forEach(t),oSo=i(O),Q1=n(O,"LI",{});var VPe=s(Q1);bpe=n(VPe,"STRONG",{});var _Mt=s(bpe);rSo=r(_Mt,"gpt2"),_Mt.forEach(t),tSo=r(VPe," \u2014 "),cV=n(VPe,"A",{href:!0});var uMt=s(cV);aSo=r(uMt,"GPT2LMHeadModel"),uMt.forEach(t),nSo=r(VPe," (OpenAI GPT-2 model)"),VPe.forEach(t),sSo=i(O),U1=n(O,"LI",{});var XPe=s(U1);vpe=n(XPe,"STRONG",{});var bMt=s(vpe);lSo=r(bMt,"ibert"),bMt.forEach(t),iSo=r(XPe," \u2014 "),fV=n(XPe,"A",{href:!0});var vMt=s(fV);dSo=r(vMt,"IBertForMaskedLM"),vMt.forEach(t),cSo=r(XPe," (I-BERT model)"),XPe.forEach(t),fSo=i(O),H1=n(O,"LI",{});var zPe=s(H1);Fpe=n(zPe,"STRONG",{});var FMt=s(Fpe);mSo=r(FMt,"layoutlm"),FMt.forEach(t),gSo=r(zPe," \u2014 "),mV=n(zPe,"A",{href:!0});var TMt=s(mV);hSo=r(TMt,"LayoutLMForMaskedLM"),TMt.forEach(t),pSo=r(zPe," (LayoutLM model)"),zPe.forEach(t),_So=i(O),J1=n(O,"LI",{});var WPe=s(J1);Tpe=n(WPe,"STRONG",{});var MMt=s(Tpe);uSo=r(MMt,"longformer"),MMt.forEach(t),bSo=r(WPe," \u2014 "),gV=n(WPe,"A",{href:!0});var EMt=s(gV);vSo=r(EMt,"LongformerForMaskedLM"),EMt.forEach(t),FSo=r(WPe," (Longformer model)"),WPe.forEach(t),TSo=i(O),Y1=n(O,"LI",{});var QPe=s(Y1);Mpe=n(QPe,"STRONG",{});var CMt=s(Mpe);MSo=r(CMt,"luke"),CMt.forEach(t),ESo=r(QPe," \u2014 "),hV=n(QPe,"A",{href:!0});var wMt=s(hV);CSo=r(wMt,"LukeForMaskedLM"),wMt.forEach(t),wSo=r(QPe," (LUKE model)"),QPe.forEach(t),ASo=i(O),K1=n(O,"LI",{});var UPe=s(K1);Epe=n(UPe,"STRONG",{});var AMt=s(Epe);LSo=r(AMt,"lxmert"),AMt.forEach(t),ySo=r(UPe," \u2014 "),pV=n(UPe,"A",{href:!0});var LMt=s(pV);xSo=r(LMt,"LxmertForPreTraining"),LMt.forEach(t),$So=r(UPe," (LXMERT model)"),UPe.forEach(t),kSo=i(O),Z1=n(O,"LI",{});var HPe=s(Z1);Cpe=n(HPe,"STRONG",{});var yMt=s(Cpe);SSo=r(yMt,"megatron-bert"),yMt.forEach(t),RSo=r(HPe," \u2014 "),_V=n(HPe,"A",{href:!0});var xMt=s(_V);PSo=r(xMt,"MegatronBertForPreTraining"),xMt.forEach(t),BSo=r(HPe," (Megatron-BERT model)"),HPe.forEach(t),ISo=i(O),e4=n(O,"LI",{});var JPe=s(e4);wpe=n(JPe,"STRONG",{});var $Mt=s(wpe);NSo=r($Mt,"mobilebert"),$Mt.forEach(t),qSo=r(JPe," \u2014 "),uV=n(JPe,"A",{href:!0});var kMt=s(uV);jSo=r(kMt,"MobileBertForPreTraining"),kMt.forEach(t),DSo=r(JPe," (MobileBERT model)"),JPe.forEach(t),GSo=i(O),o4=n(O,"LI",{});var YPe=s(o4);Ape=n(YPe,"STRONG",{});var SMt=s(Ape);OSo=r(SMt,"mpnet"),SMt.forEach(t),VSo=r(YPe," \u2014 "),bV=n(YPe,"A",{href:!0});var RMt=s(bV);XSo=r(RMt,"MPNetForMaskedLM"),RMt.forEach(t),zSo=r(YPe," (MPNet model)"),YPe.forEach(t),WSo=i(O),r4=n(O,"LI",{});var KPe=s(r4);Lpe=n(KPe,"STRONG",{});var PMt=s(Lpe);QSo=r(PMt,"mvp"),PMt.forEach(t),USo=r(KPe," \u2014 "),vV=n(KPe,"A",{href:!0});var BMt=s(vV);HSo=r(BMt,"MvpForConditionalGeneration"),BMt.forEach(t),JSo=r(KPe," (MVP model)"),KPe.forEach(t),YSo=i(O),t4=n(O,"LI",{});var ZPe=s(t4);ype=n(ZPe,"STRONG",{});var IMt=s(ype);KSo=r(IMt,"nezha"),IMt.forEach(t),ZSo=r(ZPe," \u2014 "),FV=n(ZPe,"A",{href:!0});var NMt=s(FV);eRo=r(NMt,"NezhaForPreTraining"),NMt.forEach(t),oRo=r(ZPe," (Nezha model)"),ZPe.forEach(t),rRo=i(O),a4=n(O,"LI",{});var eBe=s(a4);xpe=n(eBe,"STRONG",{});var qMt=s(xpe);tRo=r(qMt,"openai-gpt"),qMt.forEach(t),aRo=r(eBe," \u2014 "),TV=n(eBe,"A",{href:!0});var jMt=s(TV);nRo=r(jMt,"OpenAIGPTLMHeadModel"),jMt.forEach(t),sRo=r(eBe," (OpenAI GPT model)"),eBe.forEach(t),lRo=i(O),n4=n(O,"LI",{});var oBe=s(n4);$pe=n(oBe,"STRONG",{});var DMt=s($pe);iRo=r(DMt,"retribert"),DMt.forEach(t),dRo=r(oBe," \u2014 "),MV=n(oBe,"A",{href:!0});var GMt=s(MV);cRo=r(GMt,"RetriBertModel"),GMt.forEach(t),fRo=r(oBe," (RetriBERT model)"),oBe.forEach(t),mRo=i(O),s4=n(O,"LI",{});var rBe=s(s4);kpe=n(rBe,"STRONG",{});var OMt=s(kpe);gRo=r(OMt,"roberta"),OMt.forEach(t),hRo=r(rBe," \u2014 "),EV=n(rBe,"A",{href:!0});var VMt=s(EV);pRo=r(VMt,"RobertaForMaskedLM"),VMt.forEach(t),_Ro=r(rBe," (RoBERTa model)"),rBe.forEach(t),uRo=i(O),l4=n(O,"LI",{});var tBe=s(l4);Spe=n(tBe,"STRONG",{});var XMt=s(Spe);bRo=r(XMt,"splinter"),XMt.forEach(t),vRo=r(tBe," \u2014 "),CV=n(tBe,"A",{href:!0});var zMt=s(CV);FRo=r(zMt,"SplinterForPreTraining"),zMt.forEach(t),TRo=r(tBe," (Splinter model)"),tBe.forEach(t),MRo=i(O),i4=n(O,"LI",{});var aBe=s(i4);Rpe=n(aBe,"STRONG",{});var WMt=s(Rpe);ERo=r(WMt,"squeezebert"),WMt.forEach(t),CRo=r(aBe," \u2014 "),wV=n(aBe,"A",{href:!0});var QMt=s(wV);wRo=r(QMt,"SqueezeBertForMaskedLM"),QMt.forEach(t),ARo=r(aBe," (SqueezeBERT model)"),aBe.forEach(t),LRo=i(O),d4=n(O,"LI",{});var nBe=s(d4);Ppe=n(nBe,"STRONG",{});var UMt=s(Ppe);yRo=r(UMt,"t5"),UMt.forEach(t),xRo=r(nBe," \u2014 "),AV=n(nBe,"A",{href:!0});var HMt=s(AV);$Ro=r(HMt,"T5ForConditionalGeneration"),HMt.forEach(t),kRo=r(nBe," (T5 model)"),nBe.forEach(t),SRo=i(O),c4=n(O,"LI",{});var sBe=s(c4);Bpe=n(sBe,"STRONG",{});var JMt=s(Bpe);RRo=r(JMt,"tapas"),JMt.forEach(t),PRo=r(sBe," \u2014 "),LV=n(sBe,"A",{href:!0});var YMt=s(LV);BRo=r(YMt,"TapasForMaskedLM"),YMt.forEach(t),IRo=r(sBe," (TAPAS model)"),sBe.forEach(t),NRo=i(O),f4=n(O,"LI",{});var lBe=s(f4);Ipe=n(lBe,"STRONG",{});var KMt=s(Ipe);qRo=r(KMt,"transfo-xl"),KMt.forEach(t),jRo=r(lBe," \u2014 "),yV=n(lBe,"A",{href:!0});var ZMt=s(yV);DRo=r(ZMt,"TransfoXLLMHeadModel"),ZMt.forEach(t),GRo=r(lBe," (Transformer-XL model)"),lBe.forEach(t),ORo=i(O),m4=n(O,"LI",{});var iBe=s(m4);Npe=n(iBe,"STRONG",{});var eEt=s(Npe);VRo=r(eEt,"unispeech"),eEt.forEach(t),XRo=r(iBe," \u2014 "),xV=n(iBe,"A",{href:!0});var oEt=s(xV);zRo=r(oEt,"UniSpeechForPreTraining"),oEt.forEach(t),WRo=r(iBe," (UniSpeech model)"),iBe.forEach(t),QRo=i(O),g4=n(O,"LI",{});var dBe=s(g4);qpe=n(dBe,"STRONG",{});var rEt=s(qpe);URo=r(rEt,"unispeech-sat"),rEt.forEach(t),HRo=r(dBe," \u2014 "),$V=n(dBe,"A",{href:!0});var tEt=s($V);JRo=r(tEt,"UniSpeechSatForPreTraining"),tEt.forEach(t),YRo=r(dBe," (UniSpeechSat model)"),dBe.forEach(t),KRo=i(O),h4=n(O,"LI",{});var cBe=s(h4);jpe=n(cBe,"STRONG",{});var aEt=s(jpe);ZRo=r(aEt,"videomae"),aEt.forEach(t),ePo=r(cBe," \u2014 "),kV=n(cBe,"A",{href:!0});var nEt=s(kV);oPo=r(nEt,"VideoMAEForPreTraining"),nEt.forEach(t),rPo=r(cBe," (VideoMAE model)"),cBe.forEach(t),tPo=i(O),p4=n(O,"LI",{});var fBe=s(p4);Dpe=n(fBe,"STRONG",{});var sEt=s(Dpe);aPo=r(sEt,"visual_bert"),sEt.forEach(t),nPo=r(fBe," \u2014 "),SV=n(fBe,"A",{href:!0});var lEt=s(SV);sPo=r(lEt,"VisualBertForPreTraining"),lEt.forEach(t),lPo=r(fBe," (VisualBERT model)"),fBe.forEach(t),iPo=i(O),_4=n(O,"LI",{});var mBe=s(_4);Gpe=n(mBe,"STRONG",{});var iEt=s(Gpe);dPo=r(iEt,"vit_mae"),iEt.forEach(t),cPo=r(mBe," \u2014 "),RV=n(mBe,"A",{href:!0});var dEt=s(RV);fPo=r(dEt,"ViTMAEForPreTraining"),dEt.forEach(t),mPo=r(mBe," (ViTMAE model)"),mBe.forEach(t),gPo=i(O),u4=n(O,"LI",{});var gBe=s(u4);Ope=n(gBe,"STRONG",{});var cEt=s(Ope);hPo=r(cEt,"wav2vec2"),cEt.forEach(t),pPo=r(gBe," \u2014 "),PV=n(gBe,"A",{href:!0});var fEt=s(PV);_Po=r(fEt,"Wav2Vec2ForPreTraining"),fEt.forEach(t),uPo=r(gBe," (Wav2Vec2 model)"),gBe.forEach(t),bPo=i(O),b4=n(O,"LI",{});var hBe=s(b4);Vpe=n(hBe,"STRONG",{});var mEt=s(Vpe);vPo=r(mEt,"wav2vec2-conformer"),mEt.forEach(t),FPo=r(hBe," \u2014 "),BV=n(hBe,"A",{href:!0});var gEt=s(BV);TPo=r(gEt,"Wav2Vec2ConformerForPreTraining"),gEt.forEach(t),MPo=r(hBe," (Wav2Vec2-Conformer model)"),hBe.forEach(t),EPo=i(O),v4=n(O,"LI",{});var pBe=s(v4);Xpe=n(pBe,"STRONG",{});var hEt=s(Xpe);CPo=r(hEt,"xlm"),hEt.forEach(t),wPo=r(pBe," \u2014 "),IV=n(pBe,"A",{href:!0});var pEt=s(IV);APo=r(pEt,"XLMWithLMHeadModel"),pEt.forEach(t),LPo=r(pBe," (XLM model)"),pBe.forEach(t),yPo=i(O),F4=n(O,"LI",{});var _Be=s(F4);zpe=n(_Be,"STRONG",{});var _Et=s(zpe);xPo=r(_Et,"xlm-roberta"),_Et.forEach(t),$Po=r(_Be," \u2014 "),NV=n(_Be,"A",{href:!0});var uEt=s(NV);kPo=r(uEt,"XLMRobertaForMaskedLM"),uEt.forEach(t),SPo=r(_Be," (XLM-RoBERTa model)"),_Be.forEach(t),RPo=i(O),T4=n(O,"LI",{});var uBe=s(T4);Wpe=n(uBe,"STRONG",{});var bEt=s(Wpe);PPo=r(bEt,"xlm-roberta-xl"),bEt.forEach(t),BPo=r(uBe," \u2014 "),qV=n(uBe,"A",{href:!0});var vEt=s(qV);IPo=r(vEt,"XLMRobertaXLForMaskedLM"),vEt.forEach(t),NPo=r(uBe," (XLM-RoBERTa-XL model)"),uBe.forEach(t),qPo=i(O),M4=n(O,"LI",{});var bBe=s(M4);Qpe=n(bBe,"STRONG",{});var FEt=s(Qpe);jPo=r(FEt,"xlnet"),FEt.forEach(t),DPo=r(bBe," \u2014 "),jV=n(bBe,"A",{href:!0});var TEt=s(jV);GPo=r(TEt,"XLNetLMHeadModel"),TEt.forEach(t),OPo=r(bBe," (XLNet model)"),bBe.forEach(t),O.forEach(t),VPo=i(ha),E4=n(ha,"P",{});var vBe=s(E4);XPo=r(vBe,"The model is set in evaluation mode by default using "),Upe=n(vBe,"CODE",{});var MEt=s(Upe);zPo=r(MEt,"model.eval()"),MEt.forEach(t),WPo=r(vBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=n(vBe,"CODE",{});var EEt=s(Hpe);QPo=r(EEt,"model.train()"),EEt.forEach(t),vBe.forEach(t),UPo=i(ha),T(C4.$$.fragment,ha),ha.forEach(t),pl.forEach(t),fUe=i(f),id=n(f,"H2",{class:!0});var TJe=s(id);w4=n(TJe,"A",{id:!0,class:!0,href:!0});var CEt=s(w4);Jpe=n(CEt,"SPAN",{});var wEt=s(Jpe);T(Y8.$$.fragment,wEt),wEt.forEach(t),CEt.forEach(t),HPo=i(TJe),Ype=n(TJe,"SPAN",{});var AEt=s(Ype);JPo=r(AEt,"AutoModelForCausalLM"),AEt.forEach(t),TJe.forEach(t),mUe=i(f),Po=n(f,"DIV",{class:!0});var _l=s(Po);T(K8.$$.fragment,_l),YPo=i(_l),dd=n(_l,"P",{});var Uae=s(dd);KPo=r(Uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DV=n(Uae,"A",{href:!0});var LEt=s(DV);ZPo=r(LEt,"from_pretrained()"),LEt.forEach(t),eBo=r(Uae," class method or the "),GV=n(Uae,"A",{href:!0});var yEt=s(GV);oBo=r(yEt,"from_config()"),yEt.forEach(t),rBo=r(Uae,` class
method.`),Uae.forEach(t),tBo=i(_l),Z8=n(_l,"P",{});var MJe=s(Z8);aBo=r(MJe,"This class cannot be instantiated directly using "),Kpe=n(MJe,"CODE",{});var xEt=s(Kpe);nBo=r(xEt,"__init__()"),xEt.forEach(t),sBo=r(MJe," (throws an error)."),MJe.forEach(t),lBo=i(_l),ht=n(_l,"DIV",{class:!0});var bL=s(ht);T(e9.$$.fragment,bL),iBo=i(bL),Zpe=n(bL,"P",{});var $Et=s(Zpe);dBo=r($Et,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$Et.forEach(t),cBo=i(bL),cd=n(bL,"P",{});var Hae=s(cd);fBo=r(Hae,`Note:
Loading a model from its configuration file does `),e_e=n(Hae,"STRONG",{});var kEt=s(e_e);mBo=r(kEt,"not"),kEt.forEach(t),gBo=r(Hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=n(Hae,"A",{href:!0});var SEt=s(OV);hBo=r(SEt,"from_pretrained()"),SEt.forEach(t),pBo=r(Hae," to load the model weights."),Hae.forEach(t),_Bo=i(bL),T(A4.$$.fragment,bL),bL.forEach(t),uBo=i(_l),Ze=n(_l,"DIV",{class:!0});var pa=s(Ze);T(o9.$$.fragment,pa),bBo=i(pa),o_e=n(pa,"P",{});var REt=s(o_e);vBo=r(REt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),REt.forEach(t),FBo=i(pa),za=n(pa,"P",{});var vL=s(za);TBo=r(vL,"The model class to instantiate is selected based on the "),r_e=n(vL,"CODE",{});var PEt=s(r_e);MBo=r(PEt,"model_type"),PEt.forEach(t),EBo=r(vL,` property of the config object (either
passed as an argument or loaded from `),t_e=n(vL,"CODE",{});var BEt=s(t_e);CBo=r(BEt,"pretrained_model_name_or_path"),BEt.forEach(t),wBo=r(vL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=n(vL,"CODE",{});var IEt=s(a_e);ABo=r(IEt,"pretrained_model_name_or_path"),IEt.forEach(t),LBo=r(vL,":"),vL.forEach(t),yBo=i(pa),z=n(pa,"UL",{});var W=s(z);L4=n(W,"LI",{});var FBe=s(L4);n_e=n(FBe,"STRONG",{});var NEt=s(n_e);xBo=r(NEt,"bart"),NEt.forEach(t),$Bo=r(FBe," \u2014 "),VV=n(FBe,"A",{href:!0});var qEt=s(VV);kBo=r(qEt,"BartForCausalLM"),qEt.forEach(t),SBo=r(FBe," (BART model)"),FBe.forEach(t),RBo=i(W),y4=n(W,"LI",{});var TBe=s(y4);s_e=n(TBe,"STRONG",{});var jEt=s(s_e);PBo=r(jEt,"bert"),jEt.forEach(t),BBo=r(TBe," \u2014 "),XV=n(TBe,"A",{href:!0});var DEt=s(XV);IBo=r(DEt,"BertLMHeadModel"),DEt.forEach(t),NBo=r(TBe," (BERT model)"),TBe.forEach(t),qBo=i(W),x4=n(W,"LI",{});var MBe=s(x4);l_e=n(MBe,"STRONG",{});var GEt=s(l_e);jBo=r(GEt,"bert-generation"),GEt.forEach(t),DBo=r(MBe," \u2014 "),zV=n(MBe,"A",{href:!0});var OEt=s(zV);GBo=r(OEt,"BertGenerationDecoder"),OEt.forEach(t),OBo=r(MBe," (Bert Generation model)"),MBe.forEach(t),VBo=i(W),$4=n(W,"LI",{});var EBe=s($4);i_e=n(EBe,"STRONG",{});var VEt=s(i_e);XBo=r(VEt,"big_bird"),VEt.forEach(t),zBo=r(EBe," \u2014 "),WV=n(EBe,"A",{href:!0});var XEt=s(WV);WBo=r(XEt,"BigBirdForCausalLM"),XEt.forEach(t),QBo=r(EBe," (BigBird model)"),EBe.forEach(t),UBo=i(W),k4=n(W,"LI",{});var CBe=s(k4);d_e=n(CBe,"STRONG",{});var zEt=s(d_e);HBo=r(zEt,"bigbird_pegasus"),zEt.forEach(t),JBo=r(CBe," \u2014 "),QV=n(CBe,"A",{href:!0});var WEt=s(QV);YBo=r(WEt,"BigBirdPegasusForCausalLM"),WEt.forEach(t),KBo=r(CBe," (BigBird-Pegasus model)"),CBe.forEach(t),ZBo=i(W),S4=n(W,"LI",{});var wBe=s(S4);c_e=n(wBe,"STRONG",{});var QEt=s(c_e);eIo=r(QEt,"blenderbot"),QEt.forEach(t),oIo=r(wBe," \u2014 "),UV=n(wBe,"A",{href:!0});var UEt=s(UV);rIo=r(UEt,"BlenderbotForCausalLM"),UEt.forEach(t),tIo=r(wBe," (Blenderbot model)"),wBe.forEach(t),aIo=i(W),R4=n(W,"LI",{});var ABe=s(R4);f_e=n(ABe,"STRONG",{});var HEt=s(f_e);nIo=r(HEt,"blenderbot-small"),HEt.forEach(t),sIo=r(ABe," \u2014 "),HV=n(ABe,"A",{href:!0});var JEt=s(HV);lIo=r(JEt,"BlenderbotSmallForCausalLM"),JEt.forEach(t),iIo=r(ABe," (BlenderbotSmall model)"),ABe.forEach(t),dIo=i(W),P4=n(W,"LI",{});var LBe=s(P4);m_e=n(LBe,"STRONG",{});var YEt=s(m_e);cIo=r(YEt,"bloom"),YEt.forEach(t),fIo=r(LBe," \u2014 "),JV=n(LBe,"A",{href:!0});var KEt=s(JV);mIo=r(KEt,"BloomForCausalLM"),KEt.forEach(t),gIo=r(LBe," (BLOOM model)"),LBe.forEach(t),hIo=i(W),B4=n(W,"LI",{});var yBe=s(B4);g_e=n(yBe,"STRONG",{});var ZEt=s(g_e);pIo=r(ZEt,"camembert"),ZEt.forEach(t),_Io=r(yBe," \u2014 "),YV=n(yBe,"A",{href:!0});var eCt=s(YV);uIo=r(eCt,"CamembertForCausalLM"),eCt.forEach(t),bIo=r(yBe," (CamemBERT model)"),yBe.forEach(t),vIo=i(W),I4=n(W,"LI",{});var xBe=s(I4);h_e=n(xBe,"STRONG",{});var oCt=s(h_e);FIo=r(oCt,"codegen"),oCt.forEach(t),TIo=r(xBe," \u2014 "),KV=n(xBe,"A",{href:!0});var rCt=s(KV);MIo=r(rCt,"CodeGenForCausalLM"),rCt.forEach(t),EIo=r(xBe," (CodeGen model)"),xBe.forEach(t),CIo=i(W),N4=n(W,"LI",{});var $Be=s(N4);p_e=n($Be,"STRONG",{});var tCt=s(p_e);wIo=r(tCt,"ctrl"),tCt.forEach(t),AIo=r($Be," \u2014 "),ZV=n($Be,"A",{href:!0});var aCt=s(ZV);LIo=r(aCt,"CTRLLMHeadModel"),aCt.forEach(t),yIo=r($Be," (CTRL model)"),$Be.forEach(t),xIo=i(W),q4=n(W,"LI",{});var kBe=s(q4);__e=n(kBe,"STRONG",{});var nCt=s(__e);$Io=r(nCt,"data2vec-text"),nCt.forEach(t),kIo=r(kBe," \u2014 "),eX=n(kBe,"A",{href:!0});var sCt=s(eX);SIo=r(sCt,"Data2VecTextForCausalLM"),sCt.forEach(t),RIo=r(kBe," (Data2VecText model)"),kBe.forEach(t),PIo=i(W),j4=n(W,"LI",{});var SBe=s(j4);u_e=n(SBe,"STRONG",{});var lCt=s(u_e);BIo=r(lCt,"electra"),lCt.forEach(t),IIo=r(SBe," \u2014 "),oX=n(SBe,"A",{href:!0});var iCt=s(oX);NIo=r(iCt,"ElectraForCausalLM"),iCt.forEach(t),qIo=r(SBe," (ELECTRA model)"),SBe.forEach(t),jIo=i(W),D4=n(W,"LI",{});var RBe=s(D4);b_e=n(RBe,"STRONG",{});var dCt=s(b_e);DIo=r(dCt,"gpt2"),dCt.forEach(t),GIo=r(RBe," \u2014 "),rX=n(RBe,"A",{href:!0});var cCt=s(rX);OIo=r(cCt,"GPT2LMHeadModel"),cCt.forEach(t),VIo=r(RBe," (OpenAI GPT-2 model)"),RBe.forEach(t),XIo=i(W),G4=n(W,"LI",{});var PBe=s(G4);v_e=n(PBe,"STRONG",{});var fCt=s(v_e);zIo=r(fCt,"gpt_neo"),fCt.forEach(t),WIo=r(PBe," \u2014 "),tX=n(PBe,"A",{href:!0});var mCt=s(tX);QIo=r(mCt,"GPTNeoForCausalLM"),mCt.forEach(t),UIo=r(PBe," (GPT Neo model)"),PBe.forEach(t),HIo=i(W),O4=n(W,"LI",{});var BBe=s(O4);F_e=n(BBe,"STRONG",{});var gCt=s(F_e);JIo=r(gCt,"gpt_neox"),gCt.forEach(t),YIo=r(BBe," \u2014 "),aX=n(BBe,"A",{href:!0});var hCt=s(aX);KIo=r(hCt,"GPTNeoXForCausalLM"),hCt.forEach(t),ZIo=r(BBe," (GPT NeoX model)"),BBe.forEach(t),eNo=i(W),V4=n(W,"LI",{});var IBe=s(V4);T_e=n(IBe,"STRONG",{});var pCt=s(T_e);oNo=r(pCt,"gptj"),pCt.forEach(t),rNo=r(IBe," \u2014 "),nX=n(IBe,"A",{href:!0});var _Ct=s(nX);tNo=r(_Ct,"GPTJForCausalLM"),_Ct.forEach(t),aNo=r(IBe," (GPT-J model)"),IBe.forEach(t),nNo=i(W),X4=n(W,"LI",{});var NBe=s(X4);M_e=n(NBe,"STRONG",{});var uCt=s(M_e);sNo=r(uCt,"marian"),uCt.forEach(t),lNo=r(NBe," \u2014 "),sX=n(NBe,"A",{href:!0});var bCt=s(sX);iNo=r(bCt,"MarianForCausalLM"),bCt.forEach(t),dNo=r(NBe," (Marian model)"),NBe.forEach(t),cNo=i(W),z4=n(W,"LI",{});var qBe=s(z4);E_e=n(qBe,"STRONG",{});var vCt=s(E_e);fNo=r(vCt,"mbart"),vCt.forEach(t),mNo=r(qBe," \u2014 "),lX=n(qBe,"A",{href:!0});var FCt=s(lX);gNo=r(FCt,"MBartForCausalLM"),FCt.forEach(t),hNo=r(qBe," (mBART model)"),qBe.forEach(t),pNo=i(W),W4=n(W,"LI",{});var jBe=s(W4);C_e=n(jBe,"STRONG",{});var TCt=s(C_e);_No=r(TCt,"megatron-bert"),TCt.forEach(t),uNo=r(jBe," \u2014 "),iX=n(jBe,"A",{href:!0});var MCt=s(iX);bNo=r(MCt,"MegatronBertForCausalLM"),MCt.forEach(t),vNo=r(jBe," (Megatron-BERT model)"),jBe.forEach(t),FNo=i(W),Q4=n(W,"LI",{});var DBe=s(Q4);w_e=n(DBe,"STRONG",{});var ECt=s(w_e);TNo=r(ECt,"mvp"),ECt.forEach(t),MNo=r(DBe," \u2014 "),dX=n(DBe,"A",{href:!0});var CCt=s(dX);ENo=r(CCt,"MvpForCausalLM"),CCt.forEach(t),CNo=r(DBe," (MVP model)"),DBe.forEach(t),wNo=i(W),U4=n(W,"LI",{});var GBe=s(U4);A_e=n(GBe,"STRONG",{});var wCt=s(A_e);ANo=r(wCt,"openai-gpt"),wCt.forEach(t),LNo=r(GBe," \u2014 "),cX=n(GBe,"A",{href:!0});var ACt=s(cX);yNo=r(ACt,"OpenAIGPTLMHeadModel"),ACt.forEach(t),xNo=r(GBe," (OpenAI GPT model)"),GBe.forEach(t),$No=i(W),H4=n(W,"LI",{});var OBe=s(H4);L_e=n(OBe,"STRONG",{});var LCt=s(L_e);kNo=r(LCt,"opt"),LCt.forEach(t),SNo=r(OBe," \u2014 "),fX=n(OBe,"A",{href:!0});var yCt=s(fX);RNo=r(yCt,"OPTForCausalLM"),yCt.forEach(t),PNo=r(OBe," (OPT model)"),OBe.forEach(t),BNo=i(W),J4=n(W,"LI",{});var VBe=s(J4);y_e=n(VBe,"STRONG",{});var xCt=s(y_e);INo=r(xCt,"pegasus"),xCt.forEach(t),NNo=r(VBe," \u2014 "),mX=n(VBe,"A",{href:!0});var $Ct=s(mX);qNo=r($Ct,"PegasusForCausalLM"),$Ct.forEach(t),jNo=r(VBe," (Pegasus model)"),VBe.forEach(t),DNo=i(W),Y4=n(W,"LI",{});var XBe=s(Y4);x_e=n(XBe,"STRONG",{});var kCt=s(x_e);GNo=r(kCt,"plbart"),kCt.forEach(t),ONo=r(XBe," \u2014 "),gX=n(XBe,"A",{href:!0});var SCt=s(gX);VNo=r(SCt,"PLBartForCausalLM"),SCt.forEach(t),XNo=r(XBe," (PLBart model)"),XBe.forEach(t),zNo=i(W),K4=n(W,"LI",{});var zBe=s(K4);$_e=n(zBe,"STRONG",{});var RCt=s($_e);WNo=r(RCt,"prophetnet"),RCt.forEach(t),QNo=r(zBe," \u2014 "),hX=n(zBe,"A",{href:!0});var PCt=s(hX);UNo=r(PCt,"ProphetNetForCausalLM"),PCt.forEach(t),HNo=r(zBe," (ProphetNet model)"),zBe.forEach(t),JNo=i(W),Z4=n(W,"LI",{});var WBe=s(Z4);k_e=n(WBe,"STRONG",{});var BCt=s(k_e);YNo=r(BCt,"qdqbert"),BCt.forEach(t),KNo=r(WBe," \u2014 "),pX=n(WBe,"A",{href:!0});var ICt=s(pX);ZNo=r(ICt,"QDQBertLMHeadModel"),ICt.forEach(t),eqo=r(WBe," (QDQBert model)"),WBe.forEach(t),oqo=i(W),e2=n(W,"LI",{});var QBe=s(e2);S_e=n(QBe,"STRONG",{});var NCt=s(S_e);rqo=r(NCt,"reformer"),NCt.forEach(t),tqo=r(QBe," \u2014 "),_X=n(QBe,"A",{href:!0});var qCt=s(_X);aqo=r(qCt,"ReformerModelWithLMHead"),qCt.forEach(t),nqo=r(QBe," (Reformer model)"),QBe.forEach(t),sqo=i(W),o2=n(W,"LI",{});var UBe=s(o2);R_e=n(UBe,"STRONG",{});var jCt=s(R_e);lqo=r(jCt,"rembert"),jCt.forEach(t),iqo=r(UBe," \u2014 "),uX=n(UBe,"A",{href:!0});var DCt=s(uX);dqo=r(DCt,"RemBertForCausalLM"),DCt.forEach(t),cqo=r(UBe," (RemBERT model)"),UBe.forEach(t),fqo=i(W),r2=n(W,"LI",{});var HBe=s(r2);P_e=n(HBe,"STRONG",{});var GCt=s(P_e);mqo=r(GCt,"roberta"),GCt.forEach(t),gqo=r(HBe," \u2014 "),bX=n(HBe,"A",{href:!0});var OCt=s(bX);hqo=r(OCt,"RobertaForCausalLM"),OCt.forEach(t),pqo=r(HBe," (RoBERTa model)"),HBe.forEach(t),_qo=i(W),t2=n(W,"LI",{});var JBe=s(t2);B_e=n(JBe,"STRONG",{});var VCt=s(B_e);uqo=r(VCt,"roformer"),VCt.forEach(t),bqo=r(JBe," \u2014 "),vX=n(JBe,"A",{href:!0});var XCt=s(vX);vqo=r(XCt,"RoFormerForCausalLM"),XCt.forEach(t),Fqo=r(JBe," (RoFormer model)"),JBe.forEach(t),Tqo=i(W),a2=n(W,"LI",{});var YBe=s(a2);I_e=n(YBe,"STRONG",{});var zCt=s(I_e);Mqo=r(zCt,"speech_to_text_2"),zCt.forEach(t),Eqo=r(YBe," \u2014 "),FX=n(YBe,"A",{href:!0});var WCt=s(FX);Cqo=r(WCt,"Speech2Text2ForCausalLM"),WCt.forEach(t),wqo=r(YBe," (Speech2Text2 model)"),YBe.forEach(t),Aqo=i(W),n2=n(W,"LI",{});var KBe=s(n2);N_e=n(KBe,"STRONG",{});var QCt=s(N_e);Lqo=r(QCt,"transfo-xl"),QCt.forEach(t),yqo=r(KBe," \u2014 "),TX=n(KBe,"A",{href:!0});var UCt=s(TX);xqo=r(UCt,"TransfoXLLMHeadModel"),UCt.forEach(t),$qo=r(KBe," (Transformer-XL model)"),KBe.forEach(t),kqo=i(W),s2=n(W,"LI",{});var ZBe=s(s2);q_e=n(ZBe,"STRONG",{});var HCt=s(q_e);Sqo=r(HCt,"trocr"),HCt.forEach(t),Rqo=r(ZBe," \u2014 "),MX=n(ZBe,"A",{href:!0});var JCt=s(MX);Pqo=r(JCt,"TrOCRForCausalLM"),JCt.forEach(t),Bqo=r(ZBe," (TrOCR model)"),ZBe.forEach(t),Iqo=i(W),l2=n(W,"LI",{});var eIe=s(l2);j_e=n(eIe,"STRONG",{});var YCt=s(j_e);Nqo=r(YCt,"xglm"),YCt.forEach(t),qqo=r(eIe," \u2014 "),EX=n(eIe,"A",{href:!0});var KCt=s(EX);jqo=r(KCt,"XGLMForCausalLM"),KCt.forEach(t),Dqo=r(eIe," (XGLM model)"),eIe.forEach(t),Gqo=i(W),i2=n(W,"LI",{});var oIe=s(i2);D_e=n(oIe,"STRONG",{});var ZCt=s(D_e);Oqo=r(ZCt,"xlm"),ZCt.forEach(t),Vqo=r(oIe," \u2014 "),CX=n(oIe,"A",{href:!0});var e0t=s(CX);Xqo=r(e0t,"XLMWithLMHeadModel"),e0t.forEach(t),zqo=r(oIe," (XLM model)"),oIe.forEach(t),Wqo=i(W),d2=n(W,"LI",{});var rIe=s(d2);G_e=n(rIe,"STRONG",{});var o0t=s(G_e);Qqo=r(o0t,"xlm-prophetnet"),o0t.forEach(t),Uqo=r(rIe," \u2014 "),wX=n(rIe,"A",{href:!0});var r0t=s(wX);Hqo=r(r0t,"XLMProphetNetForCausalLM"),r0t.forEach(t),Jqo=r(rIe," (XLM-ProphetNet model)"),rIe.forEach(t),Yqo=i(W),c2=n(W,"LI",{});var tIe=s(c2);O_e=n(tIe,"STRONG",{});var t0t=s(O_e);Kqo=r(t0t,"xlm-roberta"),t0t.forEach(t),Zqo=r(tIe," \u2014 "),AX=n(tIe,"A",{href:!0});var a0t=s(AX);ejo=r(a0t,"XLMRobertaForCausalLM"),a0t.forEach(t),ojo=r(tIe," (XLM-RoBERTa model)"),tIe.forEach(t),rjo=i(W),f2=n(W,"LI",{});var aIe=s(f2);V_e=n(aIe,"STRONG",{});var n0t=s(V_e);tjo=r(n0t,"xlm-roberta-xl"),n0t.forEach(t),ajo=r(aIe," \u2014 "),LX=n(aIe,"A",{href:!0});var s0t=s(LX);njo=r(s0t,"XLMRobertaXLForCausalLM"),s0t.forEach(t),sjo=r(aIe," (XLM-RoBERTa-XL model)"),aIe.forEach(t),ljo=i(W),m2=n(W,"LI",{});var nIe=s(m2);X_e=n(nIe,"STRONG",{});var l0t=s(X_e);ijo=r(l0t,"xlnet"),l0t.forEach(t),djo=r(nIe," \u2014 "),yX=n(nIe,"A",{href:!0});var i0t=s(yX);cjo=r(i0t,"XLNetLMHeadModel"),i0t.forEach(t),fjo=r(nIe," (XLNet model)"),nIe.forEach(t),W.forEach(t),mjo=i(pa),g2=n(pa,"P",{});var sIe=s(g2);gjo=r(sIe,"The model is set in evaluation mode by default using "),z_e=n(sIe,"CODE",{});var d0t=s(z_e);hjo=r(d0t,"model.eval()"),d0t.forEach(t),pjo=r(sIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=n(sIe,"CODE",{});var c0t=s(W_e);_jo=r(c0t,"model.train()"),c0t.forEach(t),sIe.forEach(t),ujo=i(pa),T(h2.$$.fragment,pa),pa.forEach(t),_l.forEach(t),gUe=i(f),fd=n(f,"H2",{class:!0});var EJe=s(fd);p2=n(EJe,"A",{id:!0,class:!0,href:!0});var f0t=s(p2);Q_e=n(f0t,"SPAN",{});var m0t=s(Q_e);T(r9.$$.fragment,m0t),m0t.forEach(t),f0t.forEach(t),bjo=i(EJe),U_e=n(EJe,"SPAN",{});var g0t=s(U_e);vjo=r(g0t,"AutoModelForMaskedLM"),g0t.forEach(t),EJe.forEach(t),hUe=i(f),Bo=n(f,"DIV",{class:!0});var ul=s(Bo);T(t9.$$.fragment,ul),Fjo=i(ul),md=n(ul,"P",{});var Jae=s(md);Tjo=r(Jae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xX=n(Jae,"A",{href:!0});var h0t=s(xX);Mjo=r(h0t,"from_pretrained()"),h0t.forEach(t),Ejo=r(Jae," class method or the "),$X=n(Jae,"A",{href:!0});var p0t=s($X);Cjo=r(p0t,"from_config()"),p0t.forEach(t),wjo=r(Jae,` class
method.`),Jae.forEach(t),Ajo=i(ul),a9=n(ul,"P",{});var CJe=s(a9);Ljo=r(CJe,"This class cannot be instantiated directly using "),H_e=n(CJe,"CODE",{});var _0t=s(H_e);yjo=r(_0t,"__init__()"),_0t.forEach(t),xjo=r(CJe," (throws an error)."),CJe.forEach(t),$jo=i(ul),pt=n(ul,"DIV",{class:!0});var FL=s(pt);T(n9.$$.fragment,FL),kjo=i(FL),J_e=n(FL,"P",{});var u0t=s(J_e);Sjo=r(u0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),u0t.forEach(t),Rjo=i(FL),gd=n(FL,"P",{});var Yae=s(gd);Pjo=r(Yae,`Note:
Loading a model from its configuration file does `),Y_e=n(Yae,"STRONG",{});var b0t=s(Y_e);Bjo=r(b0t,"not"),b0t.forEach(t),Ijo=r(Yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),kX=n(Yae,"A",{href:!0});var v0t=s(kX);Njo=r(v0t,"from_pretrained()"),v0t.forEach(t),qjo=r(Yae," to load the model weights."),Yae.forEach(t),jjo=i(FL),T(_2.$$.fragment,FL),FL.forEach(t),Djo=i(ul),eo=n(ul,"DIV",{class:!0});var _a=s(eo);T(s9.$$.fragment,_a),Gjo=i(_a),K_e=n(_a,"P",{});var F0t=s(K_e);Ojo=r(F0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),F0t.forEach(t),Vjo=i(_a),Wa=n(_a,"P",{});var TL=s(Wa);Xjo=r(TL,"The model class to instantiate is selected based on the "),Z_e=n(TL,"CODE",{});var T0t=s(Z_e);zjo=r(T0t,"model_type"),T0t.forEach(t),Wjo=r(TL,` property of the config object (either
passed as an argument or loaded from `),eue=n(TL,"CODE",{});var M0t=s(eue);Qjo=r(M0t,"pretrained_model_name_or_path"),M0t.forEach(t),Ujo=r(TL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=n(TL,"CODE",{});var E0t=s(oue);Hjo=r(E0t,"pretrained_model_name_or_path"),E0t.forEach(t),Jjo=r(TL,":"),TL.forEach(t),Yjo=i(_a),U=n(_a,"UL",{});var Y=s(U);u2=n(Y,"LI",{});var lIe=s(u2);rue=n(lIe,"STRONG",{});var C0t=s(rue);Kjo=r(C0t,"albert"),C0t.forEach(t),Zjo=r(lIe," \u2014 "),SX=n(lIe,"A",{href:!0});var w0t=s(SX);eDo=r(w0t,"AlbertForMaskedLM"),w0t.forEach(t),oDo=r(lIe," (ALBERT model)"),lIe.forEach(t),rDo=i(Y),b2=n(Y,"LI",{});var iIe=s(b2);tue=n(iIe,"STRONG",{});var A0t=s(tue);tDo=r(A0t,"bart"),A0t.forEach(t),aDo=r(iIe," \u2014 "),RX=n(iIe,"A",{href:!0});var L0t=s(RX);nDo=r(L0t,"BartForConditionalGeneration"),L0t.forEach(t),sDo=r(iIe," (BART model)"),iIe.forEach(t),lDo=i(Y),v2=n(Y,"LI",{});var dIe=s(v2);aue=n(dIe,"STRONG",{});var y0t=s(aue);iDo=r(y0t,"bert"),y0t.forEach(t),dDo=r(dIe," \u2014 "),PX=n(dIe,"A",{href:!0});var x0t=s(PX);cDo=r(x0t,"BertForMaskedLM"),x0t.forEach(t),fDo=r(dIe," (BERT model)"),dIe.forEach(t),mDo=i(Y),F2=n(Y,"LI",{});var cIe=s(F2);nue=n(cIe,"STRONG",{});var $0t=s(nue);gDo=r($0t,"big_bird"),$0t.forEach(t),hDo=r(cIe," \u2014 "),BX=n(cIe,"A",{href:!0});var k0t=s(BX);pDo=r(k0t,"BigBirdForMaskedLM"),k0t.forEach(t),_Do=r(cIe," (BigBird model)"),cIe.forEach(t),uDo=i(Y),T2=n(Y,"LI",{});var fIe=s(T2);sue=n(fIe,"STRONG",{});var S0t=s(sue);bDo=r(S0t,"camembert"),S0t.forEach(t),vDo=r(fIe," \u2014 "),IX=n(fIe,"A",{href:!0});var R0t=s(IX);FDo=r(R0t,"CamembertForMaskedLM"),R0t.forEach(t),TDo=r(fIe," (CamemBERT model)"),fIe.forEach(t),MDo=i(Y),M2=n(Y,"LI",{});var mIe=s(M2);lue=n(mIe,"STRONG",{});var P0t=s(lue);EDo=r(P0t,"convbert"),P0t.forEach(t),CDo=r(mIe," \u2014 "),NX=n(mIe,"A",{href:!0});var B0t=s(NX);wDo=r(B0t,"ConvBertForMaskedLM"),B0t.forEach(t),ADo=r(mIe," (ConvBERT model)"),mIe.forEach(t),LDo=i(Y),E2=n(Y,"LI",{});var gIe=s(E2);iue=n(gIe,"STRONG",{});var I0t=s(iue);yDo=r(I0t,"data2vec-text"),I0t.forEach(t),xDo=r(gIe," \u2014 "),qX=n(gIe,"A",{href:!0});var N0t=s(qX);$Do=r(N0t,"Data2VecTextForMaskedLM"),N0t.forEach(t),kDo=r(gIe," (Data2VecText model)"),gIe.forEach(t),SDo=i(Y),C2=n(Y,"LI",{});var hIe=s(C2);due=n(hIe,"STRONG",{});var q0t=s(due);RDo=r(q0t,"deberta"),q0t.forEach(t),PDo=r(hIe," \u2014 "),jX=n(hIe,"A",{href:!0});var j0t=s(jX);BDo=r(j0t,"DebertaForMaskedLM"),j0t.forEach(t),IDo=r(hIe," (DeBERTa model)"),hIe.forEach(t),NDo=i(Y),w2=n(Y,"LI",{});var pIe=s(w2);cue=n(pIe,"STRONG",{});var D0t=s(cue);qDo=r(D0t,"deberta-v2"),D0t.forEach(t),jDo=r(pIe," \u2014 "),DX=n(pIe,"A",{href:!0});var G0t=s(DX);DDo=r(G0t,"DebertaV2ForMaskedLM"),G0t.forEach(t),GDo=r(pIe," (DeBERTa-v2 model)"),pIe.forEach(t),ODo=i(Y),A2=n(Y,"LI",{});var _Ie=s(A2);fue=n(_Ie,"STRONG",{});var O0t=s(fue);VDo=r(O0t,"distilbert"),O0t.forEach(t),XDo=r(_Ie," \u2014 "),GX=n(_Ie,"A",{href:!0});var V0t=s(GX);zDo=r(V0t,"DistilBertForMaskedLM"),V0t.forEach(t),WDo=r(_Ie," (DistilBERT model)"),_Ie.forEach(t),QDo=i(Y),L2=n(Y,"LI",{});var uIe=s(L2);mue=n(uIe,"STRONG",{});var X0t=s(mue);UDo=r(X0t,"electra"),X0t.forEach(t),HDo=r(uIe," \u2014 "),OX=n(uIe,"A",{href:!0});var z0t=s(OX);JDo=r(z0t,"ElectraForMaskedLM"),z0t.forEach(t),YDo=r(uIe," (ELECTRA model)"),uIe.forEach(t),KDo=i(Y),y2=n(Y,"LI",{});var bIe=s(y2);gue=n(bIe,"STRONG",{});var W0t=s(gue);ZDo=r(W0t,"flaubert"),W0t.forEach(t),eGo=r(bIe," \u2014 "),VX=n(bIe,"A",{href:!0});var Q0t=s(VX);oGo=r(Q0t,"FlaubertWithLMHeadModel"),Q0t.forEach(t),rGo=r(bIe," (FlauBERT model)"),bIe.forEach(t),tGo=i(Y),x2=n(Y,"LI",{});var vIe=s(x2);hue=n(vIe,"STRONG",{});var U0t=s(hue);aGo=r(U0t,"fnet"),U0t.forEach(t),nGo=r(vIe," \u2014 "),XX=n(vIe,"A",{href:!0});var H0t=s(XX);sGo=r(H0t,"FNetForMaskedLM"),H0t.forEach(t),lGo=r(vIe," (FNet model)"),vIe.forEach(t),iGo=i(Y),$2=n(Y,"LI",{});var FIe=s($2);pue=n(FIe,"STRONG",{});var J0t=s(pue);dGo=r(J0t,"funnel"),J0t.forEach(t),cGo=r(FIe," \u2014 "),zX=n(FIe,"A",{href:!0});var Y0t=s(zX);fGo=r(Y0t,"FunnelForMaskedLM"),Y0t.forEach(t),mGo=r(FIe," (Funnel Transformer model)"),FIe.forEach(t),gGo=i(Y),k2=n(Y,"LI",{});var TIe=s(k2);_ue=n(TIe,"STRONG",{});var K0t=s(_ue);hGo=r(K0t,"ibert"),K0t.forEach(t),pGo=r(TIe," \u2014 "),WX=n(TIe,"A",{href:!0});var Z0t=s(WX);_Go=r(Z0t,"IBertForMaskedLM"),Z0t.forEach(t),uGo=r(TIe," (I-BERT model)"),TIe.forEach(t),bGo=i(Y),S2=n(Y,"LI",{});var MIe=s(S2);uue=n(MIe,"STRONG",{});var ewt=s(uue);vGo=r(ewt,"layoutlm"),ewt.forEach(t),FGo=r(MIe," \u2014 "),QX=n(MIe,"A",{href:!0});var owt=s(QX);TGo=r(owt,"LayoutLMForMaskedLM"),owt.forEach(t),MGo=r(MIe," (LayoutLM model)"),MIe.forEach(t),EGo=i(Y),R2=n(Y,"LI",{});var EIe=s(R2);bue=n(EIe,"STRONG",{});var rwt=s(bue);CGo=r(rwt,"longformer"),rwt.forEach(t),wGo=r(EIe," \u2014 "),UX=n(EIe,"A",{href:!0});var twt=s(UX);AGo=r(twt,"LongformerForMaskedLM"),twt.forEach(t),LGo=r(EIe," (Longformer model)"),EIe.forEach(t),yGo=i(Y),P2=n(Y,"LI",{});var CIe=s(P2);vue=n(CIe,"STRONG",{});var awt=s(vue);xGo=r(awt,"luke"),awt.forEach(t),$Go=r(CIe," \u2014 "),HX=n(CIe,"A",{href:!0});var nwt=s(HX);kGo=r(nwt,"LukeForMaskedLM"),nwt.forEach(t),SGo=r(CIe," (LUKE model)"),CIe.forEach(t),RGo=i(Y),B2=n(Y,"LI",{});var wIe=s(B2);Fue=n(wIe,"STRONG",{});var swt=s(Fue);PGo=r(swt,"mbart"),swt.forEach(t),BGo=r(wIe," \u2014 "),JX=n(wIe,"A",{href:!0});var lwt=s(JX);IGo=r(lwt,"MBartForConditionalGeneration"),lwt.forEach(t),NGo=r(wIe," (mBART model)"),wIe.forEach(t),qGo=i(Y),I2=n(Y,"LI",{});var AIe=s(I2);Tue=n(AIe,"STRONG",{});var iwt=s(Tue);jGo=r(iwt,"megatron-bert"),iwt.forEach(t),DGo=r(AIe," \u2014 "),YX=n(AIe,"A",{href:!0});var dwt=s(YX);GGo=r(dwt,"MegatronBertForMaskedLM"),dwt.forEach(t),OGo=r(AIe," (Megatron-BERT model)"),AIe.forEach(t),VGo=i(Y),N2=n(Y,"LI",{});var LIe=s(N2);Mue=n(LIe,"STRONG",{});var cwt=s(Mue);XGo=r(cwt,"mobilebert"),cwt.forEach(t),zGo=r(LIe," \u2014 "),KX=n(LIe,"A",{href:!0});var fwt=s(KX);WGo=r(fwt,"MobileBertForMaskedLM"),fwt.forEach(t),QGo=r(LIe," (MobileBERT model)"),LIe.forEach(t),UGo=i(Y),q2=n(Y,"LI",{});var yIe=s(q2);Eue=n(yIe,"STRONG",{});var mwt=s(Eue);HGo=r(mwt,"mpnet"),mwt.forEach(t),JGo=r(yIe," \u2014 "),ZX=n(yIe,"A",{href:!0});var gwt=s(ZX);YGo=r(gwt,"MPNetForMaskedLM"),gwt.forEach(t),KGo=r(yIe," (MPNet model)"),yIe.forEach(t),ZGo=i(Y),j2=n(Y,"LI",{});var xIe=s(j2);Cue=n(xIe,"STRONG",{});var hwt=s(Cue);eOo=r(hwt,"mvp"),hwt.forEach(t),oOo=r(xIe," \u2014 "),ez=n(xIe,"A",{href:!0});var pwt=s(ez);rOo=r(pwt,"MvpForConditionalGeneration"),pwt.forEach(t),tOo=r(xIe," (MVP model)"),xIe.forEach(t),aOo=i(Y),D2=n(Y,"LI",{});var $Ie=s(D2);wue=n($Ie,"STRONG",{});var _wt=s(wue);nOo=r(_wt,"nezha"),_wt.forEach(t),sOo=r($Ie," \u2014 "),oz=n($Ie,"A",{href:!0});var uwt=s(oz);lOo=r(uwt,"NezhaForMaskedLM"),uwt.forEach(t),iOo=r($Ie," (Nezha model)"),$Ie.forEach(t),dOo=i(Y),G2=n(Y,"LI",{});var kIe=s(G2);Aue=n(kIe,"STRONG",{});var bwt=s(Aue);cOo=r(bwt,"nystromformer"),bwt.forEach(t),fOo=r(kIe," \u2014 "),rz=n(kIe,"A",{href:!0});var vwt=s(rz);mOo=r(vwt,"NystromformerForMaskedLM"),vwt.forEach(t),gOo=r(kIe," (Nystr\xF6mformer model)"),kIe.forEach(t),hOo=i(Y),O2=n(Y,"LI",{});var SIe=s(O2);Lue=n(SIe,"STRONG",{});var Fwt=s(Lue);pOo=r(Fwt,"perceiver"),Fwt.forEach(t),_Oo=r(SIe," \u2014 "),tz=n(SIe,"A",{href:!0});var Twt=s(tz);uOo=r(Twt,"PerceiverForMaskedLM"),Twt.forEach(t),bOo=r(SIe," (Perceiver model)"),SIe.forEach(t),vOo=i(Y),V2=n(Y,"LI",{});var RIe=s(V2);yue=n(RIe,"STRONG",{});var Mwt=s(yue);FOo=r(Mwt,"qdqbert"),Mwt.forEach(t),TOo=r(RIe," \u2014 "),az=n(RIe,"A",{href:!0});var Ewt=s(az);MOo=r(Ewt,"QDQBertForMaskedLM"),Ewt.forEach(t),EOo=r(RIe," (QDQBert model)"),RIe.forEach(t),COo=i(Y),X2=n(Y,"LI",{});var PIe=s(X2);xue=n(PIe,"STRONG",{});var Cwt=s(xue);wOo=r(Cwt,"reformer"),Cwt.forEach(t),AOo=r(PIe," \u2014 "),nz=n(PIe,"A",{href:!0});var wwt=s(nz);LOo=r(wwt,"ReformerForMaskedLM"),wwt.forEach(t),yOo=r(PIe," (Reformer model)"),PIe.forEach(t),xOo=i(Y),z2=n(Y,"LI",{});var BIe=s(z2);$ue=n(BIe,"STRONG",{});var Awt=s($ue);$Oo=r(Awt,"rembert"),Awt.forEach(t),kOo=r(BIe," \u2014 "),sz=n(BIe,"A",{href:!0});var Lwt=s(sz);SOo=r(Lwt,"RemBertForMaskedLM"),Lwt.forEach(t),ROo=r(BIe," (RemBERT model)"),BIe.forEach(t),POo=i(Y),W2=n(Y,"LI",{});var IIe=s(W2);kue=n(IIe,"STRONG",{});var ywt=s(kue);BOo=r(ywt,"roberta"),ywt.forEach(t),IOo=r(IIe," \u2014 "),lz=n(IIe,"A",{href:!0});var xwt=s(lz);NOo=r(xwt,"RobertaForMaskedLM"),xwt.forEach(t),qOo=r(IIe," (RoBERTa model)"),IIe.forEach(t),jOo=i(Y),Q2=n(Y,"LI",{});var NIe=s(Q2);Sue=n(NIe,"STRONG",{});var $wt=s(Sue);DOo=r($wt,"roformer"),$wt.forEach(t),GOo=r(NIe," \u2014 "),iz=n(NIe,"A",{href:!0});var kwt=s(iz);OOo=r(kwt,"RoFormerForMaskedLM"),kwt.forEach(t),VOo=r(NIe," (RoFormer model)"),NIe.forEach(t),XOo=i(Y),U2=n(Y,"LI",{});var qIe=s(U2);Rue=n(qIe,"STRONG",{});var Swt=s(Rue);zOo=r(Swt,"squeezebert"),Swt.forEach(t),WOo=r(qIe," \u2014 "),dz=n(qIe,"A",{href:!0});var Rwt=s(dz);QOo=r(Rwt,"SqueezeBertForMaskedLM"),Rwt.forEach(t),UOo=r(qIe," (SqueezeBERT model)"),qIe.forEach(t),HOo=i(Y),H2=n(Y,"LI",{});var jIe=s(H2);Pue=n(jIe,"STRONG",{});var Pwt=s(Pue);JOo=r(Pwt,"tapas"),Pwt.forEach(t),YOo=r(jIe," \u2014 "),cz=n(jIe,"A",{href:!0});var Bwt=s(cz);KOo=r(Bwt,"TapasForMaskedLM"),Bwt.forEach(t),ZOo=r(jIe," (TAPAS model)"),jIe.forEach(t),eVo=i(Y),J2=n(Y,"LI",{});var DIe=s(J2);Bue=n(DIe,"STRONG",{});var Iwt=s(Bue);oVo=r(Iwt,"wav2vec2"),Iwt.forEach(t),rVo=r(DIe," \u2014 "),Iue=n(DIe,"CODE",{});var Nwt=s(Iue);tVo=r(Nwt,"Wav2Vec2ForMaskedLM"),Nwt.forEach(t),aVo=r(DIe," (Wav2Vec2 model)"),DIe.forEach(t),nVo=i(Y),Y2=n(Y,"LI",{});var GIe=s(Y2);Nue=n(GIe,"STRONG",{});var qwt=s(Nue);sVo=r(qwt,"xlm"),qwt.forEach(t),lVo=r(GIe," \u2014 "),fz=n(GIe,"A",{href:!0});var jwt=s(fz);iVo=r(jwt,"XLMWithLMHeadModel"),jwt.forEach(t),dVo=r(GIe," (XLM model)"),GIe.forEach(t),cVo=i(Y),K2=n(Y,"LI",{});var OIe=s(K2);que=n(OIe,"STRONG",{});var Dwt=s(que);fVo=r(Dwt,"xlm-roberta"),Dwt.forEach(t),mVo=r(OIe," \u2014 "),mz=n(OIe,"A",{href:!0});var Gwt=s(mz);gVo=r(Gwt,"XLMRobertaForMaskedLM"),Gwt.forEach(t),hVo=r(OIe," (XLM-RoBERTa model)"),OIe.forEach(t),pVo=i(Y),Z2=n(Y,"LI",{});var VIe=s(Z2);jue=n(VIe,"STRONG",{});var Owt=s(jue);_Vo=r(Owt,"xlm-roberta-xl"),Owt.forEach(t),uVo=r(VIe," \u2014 "),gz=n(VIe,"A",{href:!0});var Vwt=s(gz);bVo=r(Vwt,"XLMRobertaXLForMaskedLM"),Vwt.forEach(t),vVo=r(VIe," (XLM-RoBERTa-XL model)"),VIe.forEach(t),FVo=i(Y),eb=n(Y,"LI",{});var XIe=s(eb);Due=n(XIe,"STRONG",{});var Xwt=s(Due);TVo=r(Xwt,"yoso"),Xwt.forEach(t),MVo=r(XIe," \u2014 "),hz=n(XIe,"A",{href:!0});var zwt=s(hz);EVo=r(zwt,"YosoForMaskedLM"),zwt.forEach(t),CVo=r(XIe," (YOSO model)"),XIe.forEach(t),Y.forEach(t),wVo=i(_a),ob=n(_a,"P",{});var zIe=s(ob);AVo=r(zIe,"The model is set in evaluation mode by default using "),Gue=n(zIe,"CODE",{});var Wwt=s(Gue);LVo=r(Wwt,"model.eval()"),Wwt.forEach(t),yVo=r(zIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=n(zIe,"CODE",{});var Qwt=s(Oue);xVo=r(Qwt,"model.train()"),Qwt.forEach(t),zIe.forEach(t),$Vo=i(_a),T(rb.$$.fragment,_a),_a.forEach(t),ul.forEach(t),pUe=i(f),hd=n(f,"H2",{class:!0});var wJe=s(hd);tb=n(wJe,"A",{id:!0,class:!0,href:!0});var Uwt=s(tb);Vue=n(Uwt,"SPAN",{});var Hwt=s(Vue);T(l9.$$.fragment,Hwt),Hwt.forEach(t),Uwt.forEach(t),kVo=i(wJe),Xue=n(wJe,"SPAN",{});var Jwt=s(Xue);SVo=r(Jwt,"AutoModelForSeq2SeqLM"),Jwt.forEach(t),wJe.forEach(t),_Ue=i(f),Io=n(f,"DIV",{class:!0});var bl=s(Io);T(i9.$$.fragment,bl),RVo=i(bl),pd=n(bl,"P",{});var Kae=s(pd);PVo=r(Kae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pz=n(Kae,"A",{href:!0});var Ywt=s(pz);BVo=r(Ywt,"from_pretrained()"),Ywt.forEach(t),IVo=r(Kae," class method or the "),_z=n(Kae,"A",{href:!0});var Kwt=s(_z);NVo=r(Kwt,"from_config()"),Kwt.forEach(t),qVo=r(Kae,` class
method.`),Kae.forEach(t),jVo=i(bl),d9=n(bl,"P",{});var AJe=s(d9);DVo=r(AJe,"This class cannot be instantiated directly using "),zue=n(AJe,"CODE",{});var Zwt=s(zue);GVo=r(Zwt,"__init__()"),Zwt.forEach(t),OVo=r(AJe," (throws an error)."),AJe.forEach(t),VVo=i(bl),_t=n(bl,"DIV",{class:!0});var ML=s(_t);T(c9.$$.fragment,ML),XVo=i(ML),Wue=n(ML,"P",{});var eAt=s(Wue);zVo=r(eAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),eAt.forEach(t),WVo=i(ML),_d=n(ML,"P",{});var Zae=s(_d);QVo=r(Zae,`Note:
Loading a model from its configuration file does `),Que=n(Zae,"STRONG",{});var oAt=s(Que);UVo=r(oAt,"not"),oAt.forEach(t),HVo=r(Zae,` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=n(Zae,"A",{href:!0});var rAt=s(uz);JVo=r(rAt,"from_pretrained()"),rAt.forEach(t),YVo=r(Zae," to load the model weights."),Zae.forEach(t),KVo=i(ML),T(ab.$$.fragment,ML),ML.forEach(t),ZVo=i(bl),oo=n(bl,"DIV",{class:!0});var ua=s(oo);T(f9.$$.fragment,ua),eXo=i(ua),Uue=n(ua,"P",{});var tAt=s(Uue);oXo=r(tAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tAt.forEach(t),rXo=i(ua),Qa=n(ua,"P",{});var EL=s(Qa);tXo=r(EL,"The model class to instantiate is selected based on the "),Hue=n(EL,"CODE",{});var aAt=s(Hue);aXo=r(aAt,"model_type"),aAt.forEach(t),nXo=r(EL,` property of the config object (either
passed as an argument or loaded from `),Jue=n(EL,"CODE",{});var nAt=s(Jue);sXo=r(nAt,"pretrained_model_name_or_path"),nAt.forEach(t),lXo=r(EL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=n(EL,"CODE",{});var sAt=s(Yue);iXo=r(sAt,"pretrained_model_name_or_path"),sAt.forEach(t),dXo=r(EL,":"),EL.forEach(t),cXo=i(ua),me=n(ua,"UL",{});var ue=s(me);nb=n(ue,"LI",{});var WIe=s(nb);Kue=n(WIe,"STRONG",{});var lAt=s(Kue);fXo=r(lAt,"bart"),lAt.forEach(t),mXo=r(WIe," \u2014 "),bz=n(WIe,"A",{href:!0});var iAt=s(bz);gXo=r(iAt,"BartForConditionalGeneration"),iAt.forEach(t),hXo=r(WIe," (BART model)"),WIe.forEach(t),pXo=i(ue),sb=n(ue,"LI",{});var QIe=s(sb);Zue=n(QIe,"STRONG",{});var dAt=s(Zue);_Xo=r(dAt,"bigbird_pegasus"),dAt.forEach(t),uXo=r(QIe," \u2014 "),vz=n(QIe,"A",{href:!0});var cAt=s(vz);bXo=r(cAt,"BigBirdPegasusForConditionalGeneration"),cAt.forEach(t),vXo=r(QIe," (BigBird-Pegasus model)"),QIe.forEach(t),FXo=i(ue),lb=n(ue,"LI",{});var UIe=s(lb);e1e=n(UIe,"STRONG",{});var fAt=s(e1e);TXo=r(fAt,"blenderbot"),fAt.forEach(t),MXo=r(UIe," \u2014 "),Fz=n(UIe,"A",{href:!0});var mAt=s(Fz);EXo=r(mAt,"BlenderbotForConditionalGeneration"),mAt.forEach(t),CXo=r(UIe," (Blenderbot model)"),UIe.forEach(t),wXo=i(ue),ib=n(ue,"LI",{});var HIe=s(ib);o1e=n(HIe,"STRONG",{});var gAt=s(o1e);AXo=r(gAt,"blenderbot-small"),gAt.forEach(t),LXo=r(HIe," \u2014 "),Tz=n(HIe,"A",{href:!0});var hAt=s(Tz);yXo=r(hAt,"BlenderbotSmallForConditionalGeneration"),hAt.forEach(t),xXo=r(HIe," (BlenderbotSmall model)"),HIe.forEach(t),$Xo=i(ue),db=n(ue,"LI",{});var JIe=s(db);r1e=n(JIe,"STRONG",{});var pAt=s(r1e);kXo=r(pAt,"encoder-decoder"),pAt.forEach(t),SXo=r(JIe," \u2014 "),Mz=n(JIe,"A",{href:!0});var _At=s(Mz);RXo=r(_At,"EncoderDecoderModel"),_At.forEach(t),PXo=r(JIe," (Encoder decoder model)"),JIe.forEach(t),BXo=i(ue),cb=n(ue,"LI",{});var YIe=s(cb);t1e=n(YIe,"STRONG",{});var uAt=s(t1e);IXo=r(uAt,"fsmt"),uAt.forEach(t),NXo=r(YIe," \u2014 "),Ez=n(YIe,"A",{href:!0});var bAt=s(Ez);qXo=r(bAt,"FSMTForConditionalGeneration"),bAt.forEach(t),jXo=r(YIe," (FairSeq Machine-Translation model)"),YIe.forEach(t),DXo=i(ue),fb=n(ue,"LI",{});var KIe=s(fb);a1e=n(KIe,"STRONG",{});var vAt=s(a1e);GXo=r(vAt,"led"),vAt.forEach(t),OXo=r(KIe," \u2014 "),Cz=n(KIe,"A",{href:!0});var FAt=s(Cz);VXo=r(FAt,"LEDForConditionalGeneration"),FAt.forEach(t),XXo=r(KIe," (LED model)"),KIe.forEach(t),zXo=i(ue),mb=n(ue,"LI",{});var ZIe=s(mb);n1e=n(ZIe,"STRONG",{});var TAt=s(n1e);WXo=r(TAt,"longt5"),TAt.forEach(t),QXo=r(ZIe," \u2014 "),wz=n(ZIe,"A",{href:!0});var MAt=s(wz);UXo=r(MAt,"LongT5ForConditionalGeneration"),MAt.forEach(t),HXo=r(ZIe," (LongT5 model)"),ZIe.forEach(t),JXo=i(ue),gb=n(ue,"LI",{});var eNe=s(gb);s1e=n(eNe,"STRONG",{});var EAt=s(s1e);YXo=r(EAt,"m2m_100"),EAt.forEach(t),KXo=r(eNe," \u2014 "),Az=n(eNe,"A",{href:!0});var CAt=s(Az);ZXo=r(CAt,"M2M100ForConditionalGeneration"),CAt.forEach(t),ezo=r(eNe," (M2M100 model)"),eNe.forEach(t),ozo=i(ue),hb=n(ue,"LI",{});var oNe=s(hb);l1e=n(oNe,"STRONG",{});var wAt=s(l1e);rzo=r(wAt,"marian"),wAt.forEach(t),tzo=r(oNe," \u2014 "),Lz=n(oNe,"A",{href:!0});var AAt=s(Lz);azo=r(AAt,"MarianMTModel"),AAt.forEach(t),nzo=r(oNe," (Marian model)"),oNe.forEach(t),szo=i(ue),pb=n(ue,"LI",{});var rNe=s(pb);i1e=n(rNe,"STRONG",{});var LAt=s(i1e);lzo=r(LAt,"mbart"),LAt.forEach(t),izo=r(rNe," \u2014 "),yz=n(rNe,"A",{href:!0});var yAt=s(yz);dzo=r(yAt,"MBartForConditionalGeneration"),yAt.forEach(t),czo=r(rNe," (mBART model)"),rNe.forEach(t),fzo=i(ue),_b=n(ue,"LI",{});var tNe=s(_b);d1e=n(tNe,"STRONG",{});var xAt=s(d1e);mzo=r(xAt,"mt5"),xAt.forEach(t),gzo=r(tNe," \u2014 "),xz=n(tNe,"A",{href:!0});var $At=s(xz);hzo=r($At,"MT5ForConditionalGeneration"),$At.forEach(t),pzo=r(tNe," (MT5 model)"),tNe.forEach(t),_zo=i(ue),ub=n(ue,"LI",{});var aNe=s(ub);c1e=n(aNe,"STRONG",{});var kAt=s(c1e);uzo=r(kAt,"mvp"),kAt.forEach(t),bzo=r(aNe," \u2014 "),$z=n(aNe,"A",{href:!0});var SAt=s($z);vzo=r(SAt,"MvpForConditionalGeneration"),SAt.forEach(t),Fzo=r(aNe," (MVP model)"),aNe.forEach(t),Tzo=i(ue),bb=n(ue,"LI",{});var nNe=s(bb);f1e=n(nNe,"STRONG",{});var RAt=s(f1e);Mzo=r(RAt,"nllb"),RAt.forEach(t),Ezo=r(nNe," \u2014 "),kz=n(nNe,"A",{href:!0});var PAt=s(kz);Czo=r(PAt,"M2M100ForConditionalGeneration"),PAt.forEach(t),wzo=r(nNe," (NLLB model)"),nNe.forEach(t),Azo=i(ue),vb=n(ue,"LI",{});var sNe=s(vb);m1e=n(sNe,"STRONG",{});var BAt=s(m1e);Lzo=r(BAt,"pegasus"),BAt.forEach(t),yzo=r(sNe," \u2014 "),Sz=n(sNe,"A",{href:!0});var IAt=s(Sz);xzo=r(IAt,"PegasusForConditionalGeneration"),IAt.forEach(t),$zo=r(sNe," (Pegasus model)"),sNe.forEach(t),kzo=i(ue),Fb=n(ue,"LI",{});var lNe=s(Fb);g1e=n(lNe,"STRONG",{});var NAt=s(g1e);Szo=r(NAt,"plbart"),NAt.forEach(t),Rzo=r(lNe," \u2014 "),Rz=n(lNe,"A",{href:!0});var qAt=s(Rz);Pzo=r(qAt,"PLBartForConditionalGeneration"),qAt.forEach(t),Bzo=r(lNe," (PLBart model)"),lNe.forEach(t),Izo=i(ue),Tb=n(ue,"LI",{});var iNe=s(Tb);h1e=n(iNe,"STRONG",{});var jAt=s(h1e);Nzo=r(jAt,"prophetnet"),jAt.forEach(t),qzo=r(iNe," \u2014 "),Pz=n(iNe,"A",{href:!0});var DAt=s(Pz);jzo=r(DAt,"ProphetNetForConditionalGeneration"),DAt.forEach(t),Dzo=r(iNe," (ProphetNet model)"),iNe.forEach(t),Gzo=i(ue),Mb=n(ue,"LI",{});var dNe=s(Mb);p1e=n(dNe,"STRONG",{});var GAt=s(p1e);Ozo=r(GAt,"t5"),GAt.forEach(t),Vzo=r(dNe," \u2014 "),Bz=n(dNe,"A",{href:!0});var OAt=s(Bz);Xzo=r(OAt,"T5ForConditionalGeneration"),OAt.forEach(t),zzo=r(dNe," (T5 model)"),dNe.forEach(t),Wzo=i(ue),Eb=n(ue,"LI",{});var cNe=s(Eb);_1e=n(cNe,"STRONG",{});var VAt=s(_1e);Qzo=r(VAt,"xlm-prophetnet"),VAt.forEach(t),Uzo=r(cNe," \u2014 "),Iz=n(cNe,"A",{href:!0});var XAt=s(Iz);Hzo=r(XAt,"XLMProphetNetForConditionalGeneration"),XAt.forEach(t),Jzo=r(cNe," (XLM-ProphetNet model)"),cNe.forEach(t),ue.forEach(t),Yzo=i(ua),Cb=n(ua,"P",{});var fNe=s(Cb);Kzo=r(fNe,"The model is set in evaluation mode by default using "),u1e=n(fNe,"CODE",{});var zAt=s(u1e);Zzo=r(zAt,"model.eval()"),zAt.forEach(t),eWo=r(fNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b1e=n(fNe,"CODE",{});var WAt=s(b1e);oWo=r(WAt,"model.train()"),WAt.forEach(t),fNe.forEach(t),rWo=i(ua),T(wb.$$.fragment,ua),ua.forEach(t),bl.forEach(t),uUe=i(f),ud=n(f,"H2",{class:!0});var LJe=s(ud);Ab=n(LJe,"A",{id:!0,class:!0,href:!0});var QAt=s(Ab);v1e=n(QAt,"SPAN",{});var UAt=s(v1e);T(m9.$$.fragment,UAt),UAt.forEach(t),QAt.forEach(t),tWo=i(LJe),F1e=n(LJe,"SPAN",{});var HAt=s(F1e);aWo=r(HAt,"AutoModelForSequenceClassification"),HAt.forEach(t),LJe.forEach(t),bUe=i(f),No=n(f,"DIV",{class:!0});var vl=s(No);T(g9.$$.fragment,vl),nWo=i(vl),bd=n(vl,"P",{});var ene=s(bd);sWo=r(ene,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Nz=n(ene,"A",{href:!0});var JAt=s(Nz);lWo=r(JAt,"from_pretrained()"),JAt.forEach(t),iWo=r(ene," class method or the "),qz=n(ene,"A",{href:!0});var YAt=s(qz);dWo=r(YAt,"from_config()"),YAt.forEach(t),cWo=r(ene,` class
method.`),ene.forEach(t),fWo=i(vl),h9=n(vl,"P",{});var yJe=s(h9);mWo=r(yJe,"This class cannot be instantiated directly using "),T1e=n(yJe,"CODE",{});var KAt=s(T1e);gWo=r(KAt,"__init__()"),KAt.forEach(t),hWo=r(yJe," (throws an error)."),yJe.forEach(t),pWo=i(vl),ut=n(vl,"DIV",{class:!0});var CL=s(ut);T(p9.$$.fragment,CL),_Wo=i(CL),M1e=n(CL,"P",{});var ZAt=s(M1e);uWo=r(ZAt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ZAt.forEach(t),bWo=i(CL),vd=n(CL,"P",{});var one=s(vd);vWo=r(one,`Note:
Loading a model from its configuration file does `),E1e=n(one,"STRONG",{});var e7t=s(E1e);FWo=r(e7t,"not"),e7t.forEach(t),TWo=r(one,` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=n(one,"A",{href:!0});var o7t=s(jz);MWo=r(o7t,"from_pretrained()"),o7t.forEach(t),EWo=r(one," to load the model weights."),one.forEach(t),CWo=i(CL),T(Lb.$$.fragment,CL),CL.forEach(t),wWo=i(vl),ro=n(vl,"DIV",{class:!0});var ba=s(ro);T(_9.$$.fragment,ba),AWo=i(ba),C1e=n(ba,"P",{});var r7t=s(C1e);LWo=r(r7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),r7t.forEach(t),yWo=i(ba),Ua=n(ba,"P",{});var wL=s(Ua);xWo=r(wL,"The model class to instantiate is selected based on the "),w1e=n(wL,"CODE",{});var t7t=s(w1e);$Wo=r(t7t,"model_type"),t7t.forEach(t),kWo=r(wL,` property of the config object (either
passed as an argument or loaded from `),A1e=n(wL,"CODE",{});var a7t=s(A1e);SWo=r(a7t,"pretrained_model_name_or_path"),a7t.forEach(t),RWo=r(wL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=n(wL,"CODE",{});var n7t=s(L1e);PWo=r(n7t,"pretrained_model_name_or_path"),n7t.forEach(t),BWo=r(wL,":"),wL.forEach(t),IWo=i(ba),N=n(ba,"UL",{});var j=s(N);yb=n(j,"LI",{});var mNe=s(yb);y1e=n(mNe,"STRONG",{});var s7t=s(y1e);NWo=r(s7t,"albert"),s7t.forEach(t),qWo=r(mNe," \u2014 "),Dz=n(mNe,"A",{href:!0});var l7t=s(Dz);jWo=r(l7t,"AlbertForSequenceClassification"),l7t.forEach(t),DWo=r(mNe," (ALBERT model)"),mNe.forEach(t),GWo=i(j),xb=n(j,"LI",{});var gNe=s(xb);x1e=n(gNe,"STRONG",{});var i7t=s(x1e);OWo=r(i7t,"bart"),i7t.forEach(t),VWo=r(gNe," \u2014 "),Gz=n(gNe,"A",{href:!0});var d7t=s(Gz);XWo=r(d7t,"BartForSequenceClassification"),d7t.forEach(t),zWo=r(gNe," (BART model)"),gNe.forEach(t),WWo=i(j),$b=n(j,"LI",{});var hNe=s($b);$1e=n(hNe,"STRONG",{});var c7t=s($1e);QWo=r(c7t,"bert"),c7t.forEach(t),UWo=r(hNe," \u2014 "),Oz=n(hNe,"A",{href:!0});var f7t=s(Oz);HWo=r(f7t,"BertForSequenceClassification"),f7t.forEach(t),JWo=r(hNe," (BERT model)"),hNe.forEach(t),YWo=i(j),kb=n(j,"LI",{});var pNe=s(kb);k1e=n(pNe,"STRONG",{});var m7t=s(k1e);KWo=r(m7t,"big_bird"),m7t.forEach(t),ZWo=r(pNe," \u2014 "),Vz=n(pNe,"A",{href:!0});var g7t=s(Vz);eQo=r(g7t,"BigBirdForSequenceClassification"),g7t.forEach(t),oQo=r(pNe," (BigBird model)"),pNe.forEach(t),rQo=i(j),Sb=n(j,"LI",{});var _Ne=s(Sb);S1e=n(_Ne,"STRONG",{});var h7t=s(S1e);tQo=r(h7t,"bigbird_pegasus"),h7t.forEach(t),aQo=r(_Ne," \u2014 "),Xz=n(_Ne,"A",{href:!0});var p7t=s(Xz);nQo=r(p7t,"BigBirdPegasusForSequenceClassification"),p7t.forEach(t),sQo=r(_Ne," (BigBird-Pegasus model)"),_Ne.forEach(t),lQo=i(j),Rb=n(j,"LI",{});var uNe=s(Rb);R1e=n(uNe,"STRONG",{});var _7t=s(R1e);iQo=r(_7t,"bloom"),_7t.forEach(t),dQo=r(uNe," \u2014 "),zz=n(uNe,"A",{href:!0});var u7t=s(zz);cQo=r(u7t,"BloomForSequenceClassification"),u7t.forEach(t),fQo=r(uNe," (BLOOM model)"),uNe.forEach(t),mQo=i(j),Pb=n(j,"LI",{});var bNe=s(Pb);P1e=n(bNe,"STRONG",{});var b7t=s(P1e);gQo=r(b7t,"camembert"),b7t.forEach(t),hQo=r(bNe," \u2014 "),Wz=n(bNe,"A",{href:!0});var v7t=s(Wz);pQo=r(v7t,"CamembertForSequenceClassification"),v7t.forEach(t),_Qo=r(bNe," (CamemBERT model)"),bNe.forEach(t),uQo=i(j),Bb=n(j,"LI",{});var vNe=s(Bb);B1e=n(vNe,"STRONG",{});var F7t=s(B1e);bQo=r(F7t,"canine"),F7t.forEach(t),vQo=r(vNe," \u2014 "),Qz=n(vNe,"A",{href:!0});var T7t=s(Qz);FQo=r(T7t,"CanineForSequenceClassification"),T7t.forEach(t),TQo=r(vNe," (CANINE model)"),vNe.forEach(t),MQo=i(j),Ib=n(j,"LI",{});var FNe=s(Ib);I1e=n(FNe,"STRONG",{});var M7t=s(I1e);EQo=r(M7t,"convbert"),M7t.forEach(t),CQo=r(FNe," \u2014 "),Uz=n(FNe,"A",{href:!0});var E7t=s(Uz);wQo=r(E7t,"ConvBertForSequenceClassification"),E7t.forEach(t),AQo=r(FNe," (ConvBERT model)"),FNe.forEach(t),LQo=i(j),Nb=n(j,"LI",{});var TNe=s(Nb);N1e=n(TNe,"STRONG",{});var C7t=s(N1e);yQo=r(C7t,"ctrl"),C7t.forEach(t),xQo=r(TNe," \u2014 "),Hz=n(TNe,"A",{href:!0});var w7t=s(Hz);$Qo=r(w7t,"CTRLForSequenceClassification"),w7t.forEach(t),kQo=r(TNe," (CTRL model)"),TNe.forEach(t),SQo=i(j),qb=n(j,"LI",{});var MNe=s(qb);q1e=n(MNe,"STRONG",{});var A7t=s(q1e);RQo=r(A7t,"data2vec-text"),A7t.forEach(t),PQo=r(MNe," \u2014 "),Jz=n(MNe,"A",{href:!0});var L7t=s(Jz);BQo=r(L7t,"Data2VecTextForSequenceClassification"),L7t.forEach(t),IQo=r(MNe," (Data2VecText model)"),MNe.forEach(t),NQo=i(j),jb=n(j,"LI",{});var ENe=s(jb);j1e=n(ENe,"STRONG",{});var y7t=s(j1e);qQo=r(y7t,"deberta"),y7t.forEach(t),jQo=r(ENe," \u2014 "),Yz=n(ENe,"A",{href:!0});var x7t=s(Yz);DQo=r(x7t,"DebertaForSequenceClassification"),x7t.forEach(t),GQo=r(ENe," (DeBERTa model)"),ENe.forEach(t),OQo=i(j),Db=n(j,"LI",{});var CNe=s(Db);D1e=n(CNe,"STRONG",{});var $7t=s(D1e);VQo=r($7t,"deberta-v2"),$7t.forEach(t),XQo=r(CNe," \u2014 "),Kz=n(CNe,"A",{href:!0});var k7t=s(Kz);zQo=r(k7t,"DebertaV2ForSequenceClassification"),k7t.forEach(t),WQo=r(CNe," (DeBERTa-v2 model)"),CNe.forEach(t),QQo=i(j),Gb=n(j,"LI",{});var wNe=s(Gb);G1e=n(wNe,"STRONG",{});var S7t=s(G1e);UQo=r(S7t,"distilbert"),S7t.forEach(t),HQo=r(wNe," \u2014 "),Zz=n(wNe,"A",{href:!0});var R7t=s(Zz);JQo=r(R7t,"DistilBertForSequenceClassification"),R7t.forEach(t),YQo=r(wNe," (DistilBERT model)"),wNe.forEach(t),KQo=i(j),Ob=n(j,"LI",{});var ANe=s(Ob);O1e=n(ANe,"STRONG",{});var P7t=s(O1e);ZQo=r(P7t,"electra"),P7t.forEach(t),eUo=r(ANe," \u2014 "),eW=n(ANe,"A",{href:!0});var B7t=s(eW);oUo=r(B7t,"ElectraForSequenceClassification"),B7t.forEach(t),rUo=r(ANe," (ELECTRA model)"),ANe.forEach(t),tUo=i(j),Vb=n(j,"LI",{});var LNe=s(Vb);V1e=n(LNe,"STRONG",{});var I7t=s(V1e);aUo=r(I7t,"flaubert"),I7t.forEach(t),nUo=r(LNe," \u2014 "),oW=n(LNe,"A",{href:!0});var N7t=s(oW);sUo=r(N7t,"FlaubertForSequenceClassification"),N7t.forEach(t),lUo=r(LNe," (FlauBERT model)"),LNe.forEach(t),iUo=i(j),Xb=n(j,"LI",{});var yNe=s(Xb);X1e=n(yNe,"STRONG",{});var q7t=s(X1e);dUo=r(q7t,"fnet"),q7t.forEach(t),cUo=r(yNe," \u2014 "),rW=n(yNe,"A",{href:!0});var j7t=s(rW);fUo=r(j7t,"FNetForSequenceClassification"),j7t.forEach(t),mUo=r(yNe," (FNet model)"),yNe.forEach(t),gUo=i(j),zb=n(j,"LI",{});var xNe=s(zb);z1e=n(xNe,"STRONG",{});var D7t=s(z1e);hUo=r(D7t,"funnel"),D7t.forEach(t),pUo=r(xNe," \u2014 "),tW=n(xNe,"A",{href:!0});var G7t=s(tW);_Uo=r(G7t,"FunnelForSequenceClassification"),G7t.forEach(t),uUo=r(xNe," (Funnel Transformer model)"),xNe.forEach(t),bUo=i(j),Wb=n(j,"LI",{});var $Ne=s(Wb);W1e=n($Ne,"STRONG",{});var O7t=s(W1e);vUo=r(O7t,"gpt2"),O7t.forEach(t),FUo=r($Ne," \u2014 "),aW=n($Ne,"A",{href:!0});var V7t=s(aW);TUo=r(V7t,"GPT2ForSequenceClassification"),V7t.forEach(t),MUo=r($Ne," (OpenAI GPT-2 model)"),$Ne.forEach(t),EUo=i(j),Qb=n(j,"LI",{});var kNe=s(Qb);Q1e=n(kNe,"STRONG",{});var X7t=s(Q1e);CUo=r(X7t,"gpt_neo"),X7t.forEach(t),wUo=r(kNe," \u2014 "),nW=n(kNe,"A",{href:!0});var z7t=s(nW);AUo=r(z7t,"GPTNeoForSequenceClassification"),z7t.forEach(t),LUo=r(kNe," (GPT Neo model)"),kNe.forEach(t),yUo=i(j),Ub=n(j,"LI",{});var SNe=s(Ub);U1e=n(SNe,"STRONG",{});var W7t=s(U1e);xUo=r(W7t,"gptj"),W7t.forEach(t),$Uo=r(SNe," \u2014 "),sW=n(SNe,"A",{href:!0});var Q7t=s(sW);kUo=r(Q7t,"GPTJForSequenceClassification"),Q7t.forEach(t),SUo=r(SNe," (GPT-J model)"),SNe.forEach(t),RUo=i(j),Hb=n(j,"LI",{});var RNe=s(Hb);H1e=n(RNe,"STRONG",{});var U7t=s(H1e);PUo=r(U7t,"ibert"),U7t.forEach(t),BUo=r(RNe," \u2014 "),lW=n(RNe,"A",{href:!0});var H7t=s(lW);IUo=r(H7t,"IBertForSequenceClassification"),H7t.forEach(t),NUo=r(RNe," (I-BERT model)"),RNe.forEach(t),qUo=i(j),Jb=n(j,"LI",{});var PNe=s(Jb);J1e=n(PNe,"STRONG",{});var J7t=s(J1e);jUo=r(J7t,"layoutlm"),J7t.forEach(t),DUo=r(PNe," \u2014 "),iW=n(PNe,"A",{href:!0});var Y7t=s(iW);GUo=r(Y7t,"LayoutLMForSequenceClassification"),Y7t.forEach(t),OUo=r(PNe," (LayoutLM model)"),PNe.forEach(t),VUo=i(j),Yb=n(j,"LI",{});var BNe=s(Yb);Y1e=n(BNe,"STRONG",{});var K7t=s(Y1e);XUo=r(K7t,"layoutlmv2"),K7t.forEach(t),zUo=r(BNe," \u2014 "),dW=n(BNe,"A",{href:!0});var Z7t=s(dW);WUo=r(Z7t,"LayoutLMv2ForSequenceClassification"),Z7t.forEach(t),QUo=r(BNe," (LayoutLMv2 model)"),BNe.forEach(t),UUo=i(j),Kb=n(j,"LI",{});var INe=s(Kb);K1e=n(INe,"STRONG",{});var eLt=s(K1e);HUo=r(eLt,"layoutlmv3"),eLt.forEach(t),JUo=r(INe," \u2014 "),cW=n(INe,"A",{href:!0});var oLt=s(cW);YUo=r(oLt,"LayoutLMv3ForSequenceClassification"),oLt.forEach(t),KUo=r(INe," (LayoutLMv3 model)"),INe.forEach(t),ZUo=i(j),Zb=n(j,"LI",{});var NNe=s(Zb);Z1e=n(NNe,"STRONG",{});var rLt=s(Z1e);eHo=r(rLt,"led"),rLt.forEach(t),oHo=r(NNe," \u2014 "),fW=n(NNe,"A",{href:!0});var tLt=s(fW);rHo=r(tLt,"LEDForSequenceClassification"),tLt.forEach(t),tHo=r(NNe," (LED model)"),NNe.forEach(t),aHo=i(j),ev=n(j,"LI",{});var qNe=s(ev);e4e=n(qNe,"STRONG",{});var aLt=s(e4e);nHo=r(aLt,"longformer"),aLt.forEach(t),sHo=r(qNe," \u2014 "),mW=n(qNe,"A",{href:!0});var nLt=s(mW);lHo=r(nLt,"LongformerForSequenceClassification"),nLt.forEach(t),iHo=r(qNe," (Longformer model)"),qNe.forEach(t),dHo=i(j),ov=n(j,"LI",{});var jNe=s(ov);o4e=n(jNe,"STRONG",{});var sLt=s(o4e);cHo=r(sLt,"luke"),sLt.forEach(t),fHo=r(jNe," \u2014 "),gW=n(jNe,"A",{href:!0});var lLt=s(gW);mHo=r(lLt,"LukeForSequenceClassification"),lLt.forEach(t),gHo=r(jNe," (LUKE model)"),jNe.forEach(t),hHo=i(j),rv=n(j,"LI",{});var DNe=s(rv);r4e=n(DNe,"STRONG",{});var iLt=s(r4e);pHo=r(iLt,"mbart"),iLt.forEach(t),_Ho=r(DNe," \u2014 "),hW=n(DNe,"A",{href:!0});var dLt=s(hW);uHo=r(dLt,"MBartForSequenceClassification"),dLt.forEach(t),bHo=r(DNe," (mBART model)"),DNe.forEach(t),vHo=i(j),tv=n(j,"LI",{});var GNe=s(tv);t4e=n(GNe,"STRONG",{});var cLt=s(t4e);FHo=r(cLt,"megatron-bert"),cLt.forEach(t),THo=r(GNe," \u2014 "),pW=n(GNe,"A",{href:!0});var fLt=s(pW);MHo=r(fLt,"MegatronBertForSequenceClassification"),fLt.forEach(t),EHo=r(GNe," (Megatron-BERT model)"),GNe.forEach(t),CHo=i(j),av=n(j,"LI",{});var ONe=s(av);a4e=n(ONe,"STRONG",{});var mLt=s(a4e);wHo=r(mLt,"mobilebert"),mLt.forEach(t),AHo=r(ONe," \u2014 "),_W=n(ONe,"A",{href:!0});var gLt=s(_W);LHo=r(gLt,"MobileBertForSequenceClassification"),gLt.forEach(t),yHo=r(ONe," (MobileBERT model)"),ONe.forEach(t),xHo=i(j),nv=n(j,"LI",{});var VNe=s(nv);n4e=n(VNe,"STRONG",{});var hLt=s(n4e);$Ho=r(hLt,"mpnet"),hLt.forEach(t),kHo=r(VNe," \u2014 "),uW=n(VNe,"A",{href:!0});var pLt=s(uW);SHo=r(pLt,"MPNetForSequenceClassification"),pLt.forEach(t),RHo=r(VNe," (MPNet model)"),VNe.forEach(t),PHo=i(j),sv=n(j,"LI",{});var XNe=s(sv);s4e=n(XNe,"STRONG",{});var _Lt=s(s4e);BHo=r(_Lt,"mvp"),_Lt.forEach(t),IHo=r(XNe," \u2014 "),bW=n(XNe,"A",{href:!0});var uLt=s(bW);NHo=r(uLt,"MvpForSequenceClassification"),uLt.forEach(t),qHo=r(XNe," (MVP model)"),XNe.forEach(t),jHo=i(j),lv=n(j,"LI",{});var zNe=s(lv);l4e=n(zNe,"STRONG",{});var bLt=s(l4e);DHo=r(bLt,"nezha"),bLt.forEach(t),GHo=r(zNe," \u2014 "),vW=n(zNe,"A",{href:!0});var vLt=s(vW);OHo=r(vLt,"NezhaForSequenceClassification"),vLt.forEach(t),VHo=r(zNe," (Nezha model)"),zNe.forEach(t),XHo=i(j),iv=n(j,"LI",{});var WNe=s(iv);i4e=n(WNe,"STRONG",{});var FLt=s(i4e);zHo=r(FLt,"nystromformer"),FLt.forEach(t),WHo=r(WNe," \u2014 "),FW=n(WNe,"A",{href:!0});var TLt=s(FW);QHo=r(TLt,"NystromformerForSequenceClassification"),TLt.forEach(t),UHo=r(WNe," (Nystr\xF6mformer model)"),WNe.forEach(t),HHo=i(j),dv=n(j,"LI",{});var QNe=s(dv);d4e=n(QNe,"STRONG",{});var MLt=s(d4e);JHo=r(MLt,"openai-gpt"),MLt.forEach(t),YHo=r(QNe," \u2014 "),TW=n(QNe,"A",{href:!0});var ELt=s(TW);KHo=r(ELt,"OpenAIGPTForSequenceClassification"),ELt.forEach(t),ZHo=r(QNe," (OpenAI GPT model)"),QNe.forEach(t),eJo=i(j),cv=n(j,"LI",{});var UNe=s(cv);c4e=n(UNe,"STRONG",{});var CLt=s(c4e);oJo=r(CLt,"opt"),CLt.forEach(t),rJo=r(UNe," \u2014 "),MW=n(UNe,"A",{href:!0});var wLt=s(MW);tJo=r(wLt,"OPTForSequenceClassification"),wLt.forEach(t),aJo=r(UNe," (OPT model)"),UNe.forEach(t),nJo=i(j),fv=n(j,"LI",{});var HNe=s(fv);f4e=n(HNe,"STRONG",{});var ALt=s(f4e);sJo=r(ALt,"perceiver"),ALt.forEach(t),lJo=r(HNe," \u2014 "),EW=n(HNe,"A",{href:!0});var LLt=s(EW);iJo=r(LLt,"PerceiverForSequenceClassification"),LLt.forEach(t),dJo=r(HNe," (Perceiver model)"),HNe.forEach(t),cJo=i(j),mv=n(j,"LI",{});var JNe=s(mv);m4e=n(JNe,"STRONG",{});var yLt=s(m4e);fJo=r(yLt,"plbart"),yLt.forEach(t),mJo=r(JNe," \u2014 "),CW=n(JNe,"A",{href:!0});var xLt=s(CW);gJo=r(xLt,"PLBartForSequenceClassification"),xLt.forEach(t),hJo=r(JNe," (PLBart model)"),JNe.forEach(t),pJo=i(j),gv=n(j,"LI",{});var YNe=s(gv);g4e=n(YNe,"STRONG",{});var $Lt=s(g4e);_Jo=r($Lt,"qdqbert"),$Lt.forEach(t),uJo=r(YNe," \u2014 "),wW=n(YNe,"A",{href:!0});var kLt=s(wW);bJo=r(kLt,"QDQBertForSequenceClassification"),kLt.forEach(t),vJo=r(YNe," (QDQBert model)"),YNe.forEach(t),FJo=i(j),hv=n(j,"LI",{});var KNe=s(hv);h4e=n(KNe,"STRONG",{});var SLt=s(h4e);TJo=r(SLt,"reformer"),SLt.forEach(t),MJo=r(KNe," \u2014 "),AW=n(KNe,"A",{href:!0});var RLt=s(AW);EJo=r(RLt,"ReformerForSequenceClassification"),RLt.forEach(t),CJo=r(KNe," (Reformer model)"),KNe.forEach(t),wJo=i(j),pv=n(j,"LI",{});var ZNe=s(pv);p4e=n(ZNe,"STRONG",{});var PLt=s(p4e);AJo=r(PLt,"rembert"),PLt.forEach(t),LJo=r(ZNe," \u2014 "),LW=n(ZNe,"A",{href:!0});var BLt=s(LW);yJo=r(BLt,"RemBertForSequenceClassification"),BLt.forEach(t),xJo=r(ZNe," (RemBERT model)"),ZNe.forEach(t),$Jo=i(j),_v=n(j,"LI",{});var eqe=s(_v);_4e=n(eqe,"STRONG",{});var ILt=s(_4e);kJo=r(ILt,"roberta"),ILt.forEach(t),SJo=r(eqe," \u2014 "),yW=n(eqe,"A",{href:!0});var NLt=s(yW);RJo=r(NLt,"RobertaForSequenceClassification"),NLt.forEach(t),PJo=r(eqe," (RoBERTa model)"),eqe.forEach(t),BJo=i(j),uv=n(j,"LI",{});var oqe=s(uv);u4e=n(oqe,"STRONG",{});var qLt=s(u4e);IJo=r(qLt,"roformer"),qLt.forEach(t),NJo=r(oqe," \u2014 "),xW=n(oqe,"A",{href:!0});var jLt=s(xW);qJo=r(jLt,"RoFormerForSequenceClassification"),jLt.forEach(t),jJo=r(oqe," (RoFormer model)"),oqe.forEach(t),DJo=i(j),bv=n(j,"LI",{});var rqe=s(bv);b4e=n(rqe,"STRONG",{});var DLt=s(b4e);GJo=r(DLt,"squeezebert"),DLt.forEach(t),OJo=r(rqe," \u2014 "),$W=n(rqe,"A",{href:!0});var GLt=s($W);VJo=r(GLt,"SqueezeBertForSequenceClassification"),GLt.forEach(t),XJo=r(rqe," (SqueezeBERT model)"),rqe.forEach(t),zJo=i(j),vv=n(j,"LI",{});var tqe=s(vv);v4e=n(tqe,"STRONG",{});var OLt=s(v4e);WJo=r(OLt,"tapas"),OLt.forEach(t),QJo=r(tqe," \u2014 "),kW=n(tqe,"A",{href:!0});var VLt=s(kW);UJo=r(VLt,"TapasForSequenceClassification"),VLt.forEach(t),HJo=r(tqe," (TAPAS model)"),tqe.forEach(t),JJo=i(j),Fv=n(j,"LI",{});var aqe=s(Fv);F4e=n(aqe,"STRONG",{});var XLt=s(F4e);YJo=r(XLt,"transfo-xl"),XLt.forEach(t),KJo=r(aqe," \u2014 "),SW=n(aqe,"A",{href:!0});var zLt=s(SW);ZJo=r(zLt,"TransfoXLForSequenceClassification"),zLt.forEach(t),eYo=r(aqe," (Transformer-XL model)"),aqe.forEach(t),oYo=i(j),Tv=n(j,"LI",{});var nqe=s(Tv);T4e=n(nqe,"STRONG",{});var WLt=s(T4e);rYo=r(WLt,"xlm"),WLt.forEach(t),tYo=r(nqe," \u2014 "),RW=n(nqe,"A",{href:!0});var QLt=s(RW);aYo=r(QLt,"XLMForSequenceClassification"),QLt.forEach(t),nYo=r(nqe," (XLM model)"),nqe.forEach(t),sYo=i(j),Mv=n(j,"LI",{});var sqe=s(Mv);M4e=n(sqe,"STRONG",{});var ULt=s(M4e);lYo=r(ULt,"xlm-roberta"),ULt.forEach(t),iYo=r(sqe," \u2014 "),PW=n(sqe,"A",{href:!0});var HLt=s(PW);dYo=r(HLt,"XLMRobertaForSequenceClassification"),HLt.forEach(t),cYo=r(sqe," (XLM-RoBERTa model)"),sqe.forEach(t),fYo=i(j),Ev=n(j,"LI",{});var lqe=s(Ev);E4e=n(lqe,"STRONG",{});var JLt=s(E4e);mYo=r(JLt,"xlm-roberta-xl"),JLt.forEach(t),gYo=r(lqe," \u2014 "),BW=n(lqe,"A",{href:!0});var YLt=s(BW);hYo=r(YLt,"XLMRobertaXLForSequenceClassification"),YLt.forEach(t),pYo=r(lqe," (XLM-RoBERTa-XL model)"),lqe.forEach(t),_Yo=i(j),Cv=n(j,"LI",{});var iqe=s(Cv);C4e=n(iqe,"STRONG",{});var KLt=s(C4e);uYo=r(KLt,"xlnet"),KLt.forEach(t),bYo=r(iqe," \u2014 "),IW=n(iqe,"A",{href:!0});var ZLt=s(IW);vYo=r(ZLt,"XLNetForSequenceClassification"),ZLt.forEach(t),FYo=r(iqe," (XLNet model)"),iqe.forEach(t),TYo=i(j),wv=n(j,"LI",{});var dqe=s(wv);w4e=n(dqe,"STRONG",{});var eyt=s(w4e);MYo=r(eyt,"yoso"),eyt.forEach(t),EYo=r(dqe," \u2014 "),NW=n(dqe,"A",{href:!0});var oyt=s(NW);CYo=r(oyt,"YosoForSequenceClassification"),oyt.forEach(t),wYo=r(dqe," (YOSO model)"),dqe.forEach(t),j.forEach(t),AYo=i(ba),Av=n(ba,"P",{});var cqe=s(Av);LYo=r(cqe,"The model is set in evaluation mode by default using "),A4e=n(cqe,"CODE",{});var ryt=s(A4e);yYo=r(ryt,"model.eval()"),ryt.forEach(t),xYo=r(cqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L4e=n(cqe,"CODE",{});var tyt=s(L4e);$Yo=r(tyt,"model.train()"),tyt.forEach(t),cqe.forEach(t),kYo=i(ba),T(Lv.$$.fragment,ba),ba.forEach(t),vl.forEach(t),vUe=i(f),Fd=n(f,"H2",{class:!0});var xJe=s(Fd);yv=n(xJe,"A",{id:!0,class:!0,href:!0});var ayt=s(yv);y4e=n(ayt,"SPAN",{});var nyt=s(y4e);T(u9.$$.fragment,nyt),nyt.forEach(t),ayt.forEach(t),SYo=i(xJe),x4e=n(xJe,"SPAN",{});var syt=s(x4e);RYo=r(syt,"AutoModelForMultipleChoice"),syt.forEach(t),xJe.forEach(t),FUe=i(f),qo=n(f,"DIV",{class:!0});var Fl=s(qo);T(b9.$$.fragment,Fl),PYo=i(Fl),Td=n(Fl,"P",{});var rne=s(Td);BYo=r(rne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),qW=n(rne,"A",{href:!0});var lyt=s(qW);IYo=r(lyt,"from_pretrained()"),lyt.forEach(t),NYo=r(rne," class method or the "),jW=n(rne,"A",{href:!0});var iyt=s(jW);qYo=r(iyt,"from_config()"),iyt.forEach(t),jYo=r(rne,` class
method.`),rne.forEach(t),DYo=i(Fl),v9=n(Fl,"P",{});var $Je=s(v9);GYo=r($Je,"This class cannot be instantiated directly using "),$4e=n($Je,"CODE",{});var dyt=s($4e);OYo=r(dyt,"__init__()"),dyt.forEach(t),VYo=r($Je," (throws an error)."),$Je.forEach(t),XYo=i(Fl),bt=n(Fl,"DIV",{class:!0});var AL=s(bt);T(F9.$$.fragment,AL),zYo=i(AL),k4e=n(AL,"P",{});var cyt=s(k4e);WYo=r(cyt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cyt.forEach(t),QYo=i(AL),Md=n(AL,"P",{});var tne=s(Md);UYo=r(tne,`Note:
Loading a model from its configuration file does `),S4e=n(tne,"STRONG",{});var fyt=s(S4e);HYo=r(fyt,"not"),fyt.forEach(t),JYo=r(tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=n(tne,"A",{href:!0});var myt=s(DW);YYo=r(myt,"from_pretrained()"),myt.forEach(t),KYo=r(tne," to load the model weights."),tne.forEach(t),ZYo=i(AL),T(xv.$$.fragment,AL),AL.forEach(t),eKo=i(Fl),to=n(Fl,"DIV",{class:!0});var va=s(to);T(T9.$$.fragment,va),oKo=i(va),R4e=n(va,"P",{});var gyt=s(R4e);rKo=r(gyt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gyt.forEach(t),tKo=i(va),Ha=n(va,"P",{});var LL=s(Ha);aKo=r(LL,"The model class to instantiate is selected based on the "),P4e=n(LL,"CODE",{});var hyt=s(P4e);nKo=r(hyt,"model_type"),hyt.forEach(t),sKo=r(LL,` property of the config object (either
passed as an argument or loaded from `),B4e=n(LL,"CODE",{});var pyt=s(B4e);lKo=r(pyt,"pretrained_model_name_or_path"),pyt.forEach(t),iKo=r(LL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I4e=n(LL,"CODE",{});var _yt=s(I4e);dKo=r(_yt,"pretrained_model_name_or_path"),_yt.forEach(t),cKo=r(LL,":"),LL.forEach(t),fKo=i(va),Z=n(va,"UL",{});var ee=s(Z);$v=n(ee,"LI",{});var fqe=s($v);N4e=n(fqe,"STRONG",{});var uyt=s(N4e);mKo=r(uyt,"albert"),uyt.forEach(t),gKo=r(fqe," \u2014 "),GW=n(fqe,"A",{href:!0});var byt=s(GW);hKo=r(byt,"AlbertForMultipleChoice"),byt.forEach(t),pKo=r(fqe," (ALBERT model)"),fqe.forEach(t),_Ko=i(ee),kv=n(ee,"LI",{});var mqe=s(kv);q4e=n(mqe,"STRONG",{});var vyt=s(q4e);uKo=r(vyt,"bert"),vyt.forEach(t),bKo=r(mqe," \u2014 "),OW=n(mqe,"A",{href:!0});var Fyt=s(OW);vKo=r(Fyt,"BertForMultipleChoice"),Fyt.forEach(t),FKo=r(mqe," (BERT model)"),mqe.forEach(t),TKo=i(ee),Sv=n(ee,"LI",{});var gqe=s(Sv);j4e=n(gqe,"STRONG",{});var Tyt=s(j4e);MKo=r(Tyt,"big_bird"),Tyt.forEach(t),EKo=r(gqe," \u2014 "),VW=n(gqe,"A",{href:!0});var Myt=s(VW);CKo=r(Myt,"BigBirdForMultipleChoice"),Myt.forEach(t),wKo=r(gqe," (BigBird model)"),gqe.forEach(t),AKo=i(ee),Rv=n(ee,"LI",{});var hqe=s(Rv);D4e=n(hqe,"STRONG",{});var Eyt=s(D4e);LKo=r(Eyt,"camembert"),Eyt.forEach(t),yKo=r(hqe," \u2014 "),XW=n(hqe,"A",{href:!0});var Cyt=s(XW);xKo=r(Cyt,"CamembertForMultipleChoice"),Cyt.forEach(t),$Ko=r(hqe," (CamemBERT model)"),hqe.forEach(t),kKo=i(ee),Pv=n(ee,"LI",{});var pqe=s(Pv);G4e=n(pqe,"STRONG",{});var wyt=s(G4e);SKo=r(wyt,"canine"),wyt.forEach(t),RKo=r(pqe," \u2014 "),zW=n(pqe,"A",{href:!0});var Ayt=s(zW);PKo=r(Ayt,"CanineForMultipleChoice"),Ayt.forEach(t),BKo=r(pqe," (CANINE model)"),pqe.forEach(t),IKo=i(ee),Bv=n(ee,"LI",{});var _qe=s(Bv);O4e=n(_qe,"STRONG",{});var Lyt=s(O4e);NKo=r(Lyt,"convbert"),Lyt.forEach(t),qKo=r(_qe," \u2014 "),WW=n(_qe,"A",{href:!0});var yyt=s(WW);jKo=r(yyt,"ConvBertForMultipleChoice"),yyt.forEach(t),DKo=r(_qe," (ConvBERT model)"),_qe.forEach(t),GKo=i(ee),Iv=n(ee,"LI",{});var uqe=s(Iv);V4e=n(uqe,"STRONG",{});var xyt=s(V4e);OKo=r(xyt,"data2vec-text"),xyt.forEach(t),VKo=r(uqe," \u2014 "),QW=n(uqe,"A",{href:!0});var $yt=s(QW);XKo=r($yt,"Data2VecTextForMultipleChoice"),$yt.forEach(t),zKo=r(uqe," (Data2VecText model)"),uqe.forEach(t),WKo=i(ee),Nv=n(ee,"LI",{});var bqe=s(Nv);X4e=n(bqe,"STRONG",{});var kyt=s(X4e);QKo=r(kyt,"deberta-v2"),kyt.forEach(t),UKo=r(bqe," \u2014 "),UW=n(bqe,"A",{href:!0});var Syt=s(UW);HKo=r(Syt,"DebertaV2ForMultipleChoice"),Syt.forEach(t),JKo=r(bqe," (DeBERTa-v2 model)"),bqe.forEach(t),YKo=i(ee),qv=n(ee,"LI",{});var vqe=s(qv);z4e=n(vqe,"STRONG",{});var Ryt=s(z4e);KKo=r(Ryt,"distilbert"),Ryt.forEach(t),ZKo=r(vqe," \u2014 "),HW=n(vqe,"A",{href:!0});var Pyt=s(HW);eZo=r(Pyt,"DistilBertForMultipleChoice"),Pyt.forEach(t),oZo=r(vqe," (DistilBERT model)"),vqe.forEach(t),rZo=i(ee),jv=n(ee,"LI",{});var Fqe=s(jv);W4e=n(Fqe,"STRONG",{});var Byt=s(W4e);tZo=r(Byt,"electra"),Byt.forEach(t),aZo=r(Fqe," \u2014 "),JW=n(Fqe,"A",{href:!0});var Iyt=s(JW);nZo=r(Iyt,"ElectraForMultipleChoice"),Iyt.forEach(t),sZo=r(Fqe," (ELECTRA model)"),Fqe.forEach(t),lZo=i(ee),Dv=n(ee,"LI",{});var Tqe=s(Dv);Q4e=n(Tqe,"STRONG",{});var Nyt=s(Q4e);iZo=r(Nyt,"flaubert"),Nyt.forEach(t),dZo=r(Tqe," \u2014 "),YW=n(Tqe,"A",{href:!0});var qyt=s(YW);cZo=r(qyt,"FlaubertForMultipleChoice"),qyt.forEach(t),fZo=r(Tqe," (FlauBERT model)"),Tqe.forEach(t),mZo=i(ee),Gv=n(ee,"LI",{});var Mqe=s(Gv);U4e=n(Mqe,"STRONG",{});var jyt=s(U4e);gZo=r(jyt,"fnet"),jyt.forEach(t),hZo=r(Mqe," \u2014 "),KW=n(Mqe,"A",{href:!0});var Dyt=s(KW);pZo=r(Dyt,"FNetForMultipleChoice"),Dyt.forEach(t),_Zo=r(Mqe," (FNet model)"),Mqe.forEach(t),uZo=i(ee),Ov=n(ee,"LI",{});var Eqe=s(Ov);H4e=n(Eqe,"STRONG",{});var Gyt=s(H4e);bZo=r(Gyt,"funnel"),Gyt.forEach(t),vZo=r(Eqe," \u2014 "),ZW=n(Eqe,"A",{href:!0});var Oyt=s(ZW);FZo=r(Oyt,"FunnelForMultipleChoice"),Oyt.forEach(t),TZo=r(Eqe," (Funnel Transformer model)"),Eqe.forEach(t),MZo=i(ee),Vv=n(ee,"LI",{});var Cqe=s(Vv);J4e=n(Cqe,"STRONG",{});var Vyt=s(J4e);EZo=r(Vyt,"ibert"),Vyt.forEach(t),CZo=r(Cqe," \u2014 "),eQ=n(Cqe,"A",{href:!0});var Xyt=s(eQ);wZo=r(Xyt,"IBertForMultipleChoice"),Xyt.forEach(t),AZo=r(Cqe," (I-BERT model)"),Cqe.forEach(t),LZo=i(ee),Xv=n(ee,"LI",{});var wqe=s(Xv);Y4e=n(wqe,"STRONG",{});var zyt=s(Y4e);yZo=r(zyt,"longformer"),zyt.forEach(t),xZo=r(wqe," \u2014 "),oQ=n(wqe,"A",{href:!0});var Wyt=s(oQ);$Zo=r(Wyt,"LongformerForMultipleChoice"),Wyt.forEach(t),kZo=r(wqe," (Longformer model)"),wqe.forEach(t),SZo=i(ee),zv=n(ee,"LI",{});var Aqe=s(zv);K4e=n(Aqe,"STRONG",{});var Qyt=s(K4e);RZo=r(Qyt,"luke"),Qyt.forEach(t),PZo=r(Aqe," \u2014 "),rQ=n(Aqe,"A",{href:!0});var Uyt=s(rQ);BZo=r(Uyt,"LukeForMultipleChoice"),Uyt.forEach(t),IZo=r(Aqe," (LUKE model)"),Aqe.forEach(t),NZo=i(ee),Wv=n(ee,"LI",{});var Lqe=s(Wv);Z4e=n(Lqe,"STRONG",{});var Hyt=s(Z4e);qZo=r(Hyt,"megatron-bert"),Hyt.forEach(t),jZo=r(Lqe," \u2014 "),tQ=n(Lqe,"A",{href:!0});var Jyt=s(tQ);DZo=r(Jyt,"MegatronBertForMultipleChoice"),Jyt.forEach(t),GZo=r(Lqe," (Megatron-BERT model)"),Lqe.forEach(t),OZo=i(ee),Qv=n(ee,"LI",{});var yqe=s(Qv);e2e=n(yqe,"STRONG",{});var Yyt=s(e2e);VZo=r(Yyt,"mobilebert"),Yyt.forEach(t),XZo=r(yqe," \u2014 "),aQ=n(yqe,"A",{href:!0});var Kyt=s(aQ);zZo=r(Kyt,"MobileBertForMultipleChoice"),Kyt.forEach(t),WZo=r(yqe," (MobileBERT model)"),yqe.forEach(t),QZo=i(ee),Uv=n(ee,"LI",{});var xqe=s(Uv);o2e=n(xqe,"STRONG",{});var Zyt=s(o2e);UZo=r(Zyt,"mpnet"),Zyt.forEach(t),HZo=r(xqe," \u2014 "),nQ=n(xqe,"A",{href:!0});var e8t=s(nQ);JZo=r(e8t,"MPNetForMultipleChoice"),e8t.forEach(t),YZo=r(xqe," (MPNet model)"),xqe.forEach(t),KZo=i(ee),Hv=n(ee,"LI",{});var $qe=s(Hv);r2e=n($qe,"STRONG",{});var o8t=s(r2e);ZZo=r(o8t,"nezha"),o8t.forEach(t),eer=r($qe," \u2014 "),sQ=n($qe,"A",{href:!0});var r8t=s(sQ);oer=r(r8t,"NezhaForMultipleChoice"),r8t.forEach(t),rer=r($qe," (Nezha model)"),$qe.forEach(t),ter=i(ee),Jv=n(ee,"LI",{});var kqe=s(Jv);t2e=n(kqe,"STRONG",{});var t8t=s(t2e);aer=r(t8t,"nystromformer"),t8t.forEach(t),ner=r(kqe," \u2014 "),lQ=n(kqe,"A",{href:!0});var a8t=s(lQ);ser=r(a8t,"NystromformerForMultipleChoice"),a8t.forEach(t),ler=r(kqe," (Nystr\xF6mformer model)"),kqe.forEach(t),ier=i(ee),Yv=n(ee,"LI",{});var Sqe=s(Yv);a2e=n(Sqe,"STRONG",{});var n8t=s(a2e);der=r(n8t,"qdqbert"),n8t.forEach(t),cer=r(Sqe," \u2014 "),iQ=n(Sqe,"A",{href:!0});var s8t=s(iQ);fer=r(s8t,"QDQBertForMultipleChoice"),s8t.forEach(t),mer=r(Sqe," (QDQBert model)"),Sqe.forEach(t),ger=i(ee),Kv=n(ee,"LI",{});var Rqe=s(Kv);n2e=n(Rqe,"STRONG",{});var l8t=s(n2e);her=r(l8t,"rembert"),l8t.forEach(t),per=r(Rqe," \u2014 "),dQ=n(Rqe,"A",{href:!0});var i8t=s(dQ);_er=r(i8t,"RemBertForMultipleChoice"),i8t.forEach(t),uer=r(Rqe," (RemBERT model)"),Rqe.forEach(t),ber=i(ee),Zv=n(ee,"LI",{});var Pqe=s(Zv);s2e=n(Pqe,"STRONG",{});var d8t=s(s2e);ver=r(d8t,"roberta"),d8t.forEach(t),Fer=r(Pqe," \u2014 "),cQ=n(Pqe,"A",{href:!0});var c8t=s(cQ);Ter=r(c8t,"RobertaForMultipleChoice"),c8t.forEach(t),Mer=r(Pqe," (RoBERTa model)"),Pqe.forEach(t),Eer=i(ee),e3=n(ee,"LI",{});var Bqe=s(e3);l2e=n(Bqe,"STRONG",{});var f8t=s(l2e);Cer=r(f8t,"roformer"),f8t.forEach(t),wer=r(Bqe," \u2014 "),fQ=n(Bqe,"A",{href:!0});var m8t=s(fQ);Aer=r(m8t,"RoFormerForMultipleChoice"),m8t.forEach(t),Ler=r(Bqe," (RoFormer model)"),Bqe.forEach(t),yer=i(ee),o3=n(ee,"LI",{});var Iqe=s(o3);i2e=n(Iqe,"STRONG",{});var g8t=s(i2e);xer=r(g8t,"squeezebert"),g8t.forEach(t),$er=r(Iqe," \u2014 "),mQ=n(Iqe,"A",{href:!0});var h8t=s(mQ);ker=r(h8t,"SqueezeBertForMultipleChoice"),h8t.forEach(t),Ser=r(Iqe," (SqueezeBERT model)"),Iqe.forEach(t),Rer=i(ee),r3=n(ee,"LI",{});var Nqe=s(r3);d2e=n(Nqe,"STRONG",{});var p8t=s(d2e);Per=r(p8t,"xlm"),p8t.forEach(t),Ber=r(Nqe," \u2014 "),gQ=n(Nqe,"A",{href:!0});var _8t=s(gQ);Ier=r(_8t,"XLMForMultipleChoice"),_8t.forEach(t),Ner=r(Nqe," (XLM model)"),Nqe.forEach(t),qer=i(ee),t3=n(ee,"LI",{});var qqe=s(t3);c2e=n(qqe,"STRONG",{});var u8t=s(c2e);jer=r(u8t,"xlm-roberta"),u8t.forEach(t),Der=r(qqe," \u2014 "),hQ=n(qqe,"A",{href:!0});var b8t=s(hQ);Ger=r(b8t,"XLMRobertaForMultipleChoice"),b8t.forEach(t),Oer=r(qqe," (XLM-RoBERTa model)"),qqe.forEach(t),Ver=i(ee),a3=n(ee,"LI",{});var jqe=s(a3);f2e=n(jqe,"STRONG",{});var v8t=s(f2e);Xer=r(v8t,"xlm-roberta-xl"),v8t.forEach(t),zer=r(jqe," \u2014 "),pQ=n(jqe,"A",{href:!0});var F8t=s(pQ);Wer=r(F8t,"XLMRobertaXLForMultipleChoice"),F8t.forEach(t),Qer=r(jqe," (XLM-RoBERTa-XL model)"),jqe.forEach(t),Uer=i(ee),n3=n(ee,"LI",{});var Dqe=s(n3);m2e=n(Dqe,"STRONG",{});var T8t=s(m2e);Her=r(T8t,"xlnet"),T8t.forEach(t),Jer=r(Dqe," \u2014 "),_Q=n(Dqe,"A",{href:!0});var M8t=s(_Q);Yer=r(M8t,"XLNetForMultipleChoice"),M8t.forEach(t),Ker=r(Dqe," (XLNet model)"),Dqe.forEach(t),Zer=i(ee),s3=n(ee,"LI",{});var Gqe=s(s3);g2e=n(Gqe,"STRONG",{});var E8t=s(g2e);eor=r(E8t,"yoso"),E8t.forEach(t),oor=r(Gqe," \u2014 "),uQ=n(Gqe,"A",{href:!0});var C8t=s(uQ);ror=r(C8t,"YosoForMultipleChoice"),C8t.forEach(t),tor=r(Gqe," (YOSO model)"),Gqe.forEach(t),ee.forEach(t),aor=i(va),l3=n(va,"P",{});var Oqe=s(l3);nor=r(Oqe,"The model is set in evaluation mode by default using "),h2e=n(Oqe,"CODE",{});var w8t=s(h2e);sor=r(w8t,"model.eval()"),w8t.forEach(t),lor=r(Oqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p2e=n(Oqe,"CODE",{});var A8t=s(p2e);ior=r(A8t,"model.train()"),A8t.forEach(t),Oqe.forEach(t),dor=i(va),T(i3.$$.fragment,va),va.forEach(t),Fl.forEach(t),TUe=i(f),Ed=n(f,"H2",{class:!0});var kJe=s(Ed);d3=n(kJe,"A",{id:!0,class:!0,href:!0});var L8t=s(d3);_2e=n(L8t,"SPAN",{});var y8t=s(_2e);T(M9.$$.fragment,y8t),y8t.forEach(t),L8t.forEach(t),cor=i(kJe),u2e=n(kJe,"SPAN",{});var x8t=s(u2e);mor=r(x8t,"AutoModelForNextSentencePrediction"),x8t.forEach(t),kJe.forEach(t),MUe=i(f),jo=n(f,"DIV",{class:!0});var Tl=s(jo);T(E9.$$.fragment,Tl),gor=i(Tl),Cd=n(Tl,"P",{});var ane=s(Cd);hor=r(ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bQ=n(ane,"A",{href:!0});var $8t=s(bQ);por=r($8t,"from_pretrained()"),$8t.forEach(t),_or=r(ane," class method or the "),vQ=n(ane,"A",{href:!0});var k8t=s(vQ);uor=r(k8t,"from_config()"),k8t.forEach(t),bor=r(ane,` class
method.`),ane.forEach(t),vor=i(Tl),C9=n(Tl,"P",{});var SJe=s(C9);For=r(SJe,"This class cannot be instantiated directly using "),b2e=n(SJe,"CODE",{});var S8t=s(b2e);Tor=r(S8t,"__init__()"),S8t.forEach(t),Mor=r(SJe," (throws an error)."),SJe.forEach(t),Eor=i(Tl),vt=n(Tl,"DIV",{class:!0});var yL=s(vt);T(w9.$$.fragment,yL),Cor=i(yL),v2e=n(yL,"P",{});var R8t=s(v2e);wor=r(R8t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),R8t.forEach(t),Aor=i(yL),wd=n(yL,"P",{});var nne=s(wd);Lor=r(nne,`Note:
Loading a model from its configuration file does `),F2e=n(nne,"STRONG",{});var P8t=s(F2e);yor=r(P8t,"not"),P8t.forEach(t),xor=r(nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(nne,"A",{href:!0});var B8t=s(FQ);$or=r(B8t,"from_pretrained()"),B8t.forEach(t),kor=r(nne," to load the model weights."),nne.forEach(t),Sor=i(yL),T(c3.$$.fragment,yL),yL.forEach(t),Ror=i(Tl),ao=n(Tl,"DIV",{class:!0});var Fa=s(ao);T(A9.$$.fragment,Fa),Por=i(Fa),T2e=n(Fa,"P",{});var I8t=s(T2e);Bor=r(I8t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),I8t.forEach(t),Ior=i(Fa),Ja=n(Fa,"P",{});var xL=s(Ja);Nor=r(xL,"The model class to instantiate is selected based on the "),M2e=n(xL,"CODE",{});var N8t=s(M2e);qor=r(N8t,"model_type"),N8t.forEach(t),jor=r(xL,` property of the config object (either
passed as an argument or loaded from `),E2e=n(xL,"CODE",{});var q8t=s(E2e);Dor=r(q8t,"pretrained_model_name_or_path"),q8t.forEach(t),Gor=r(xL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=n(xL,"CODE",{});var j8t=s(C2e);Oor=r(j8t,"pretrained_model_name_or_path"),j8t.forEach(t),Vor=r(xL,":"),xL.forEach(t),Xor=i(Fa),Do=n(Fa,"UL",{});var Ta=s(Do);f3=n(Ta,"LI",{});var Vqe=s(f3);w2e=n(Vqe,"STRONG",{});var D8t=s(w2e);zor=r(D8t,"bert"),D8t.forEach(t),Wor=r(Vqe," \u2014 "),TQ=n(Vqe,"A",{href:!0});var G8t=s(TQ);Qor=r(G8t,"BertForNextSentencePrediction"),G8t.forEach(t),Uor=r(Vqe," (BERT model)"),Vqe.forEach(t),Hor=i(Ta),m3=n(Ta,"LI",{});var Xqe=s(m3);A2e=n(Xqe,"STRONG",{});var O8t=s(A2e);Jor=r(O8t,"fnet"),O8t.forEach(t),Yor=r(Xqe," \u2014 "),MQ=n(Xqe,"A",{href:!0});var V8t=s(MQ);Kor=r(V8t,"FNetForNextSentencePrediction"),V8t.forEach(t),Zor=r(Xqe," (FNet model)"),Xqe.forEach(t),err=i(Ta),g3=n(Ta,"LI",{});var zqe=s(g3);L2e=n(zqe,"STRONG",{});var X8t=s(L2e);orr=r(X8t,"megatron-bert"),X8t.forEach(t),rrr=r(zqe," \u2014 "),EQ=n(zqe,"A",{href:!0});var z8t=s(EQ);trr=r(z8t,"MegatronBertForNextSentencePrediction"),z8t.forEach(t),arr=r(zqe," (Megatron-BERT model)"),zqe.forEach(t),nrr=i(Ta),h3=n(Ta,"LI",{});var Wqe=s(h3);y2e=n(Wqe,"STRONG",{});var W8t=s(y2e);srr=r(W8t,"mobilebert"),W8t.forEach(t),lrr=r(Wqe," \u2014 "),CQ=n(Wqe,"A",{href:!0});var Q8t=s(CQ);irr=r(Q8t,"MobileBertForNextSentencePrediction"),Q8t.forEach(t),drr=r(Wqe," (MobileBERT model)"),Wqe.forEach(t),crr=i(Ta),p3=n(Ta,"LI",{});var Qqe=s(p3);x2e=n(Qqe,"STRONG",{});var U8t=s(x2e);frr=r(U8t,"nezha"),U8t.forEach(t),mrr=r(Qqe," \u2014 "),wQ=n(Qqe,"A",{href:!0});var H8t=s(wQ);grr=r(H8t,"NezhaForNextSentencePrediction"),H8t.forEach(t),hrr=r(Qqe," (Nezha model)"),Qqe.forEach(t),prr=i(Ta),_3=n(Ta,"LI",{});var Uqe=s(_3);$2e=n(Uqe,"STRONG",{});var J8t=s($2e);_rr=r(J8t,"qdqbert"),J8t.forEach(t),urr=r(Uqe," \u2014 "),AQ=n(Uqe,"A",{href:!0});var Y8t=s(AQ);brr=r(Y8t,"QDQBertForNextSentencePrediction"),Y8t.forEach(t),vrr=r(Uqe," (QDQBert model)"),Uqe.forEach(t),Ta.forEach(t),Frr=i(Fa),u3=n(Fa,"P",{});var Hqe=s(u3);Trr=r(Hqe,"The model is set in evaluation mode by default using "),k2e=n(Hqe,"CODE",{});var K8t=s(k2e);Mrr=r(K8t,"model.eval()"),K8t.forEach(t),Err=r(Hqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S2e=n(Hqe,"CODE",{});var Z8t=s(S2e);Crr=r(Z8t,"model.train()"),Z8t.forEach(t),Hqe.forEach(t),wrr=i(Fa),T(b3.$$.fragment,Fa),Fa.forEach(t),Tl.forEach(t),EUe=i(f),Ad=n(f,"H2",{class:!0});var RJe=s(Ad);v3=n(RJe,"A",{id:!0,class:!0,href:!0});var e9t=s(v3);R2e=n(e9t,"SPAN",{});var o9t=s(R2e);T(L9.$$.fragment,o9t),o9t.forEach(t),e9t.forEach(t),Arr=i(RJe),P2e=n(RJe,"SPAN",{});var r9t=s(P2e);Lrr=r(r9t,"AutoModelForTokenClassification"),r9t.forEach(t),RJe.forEach(t),CUe=i(f),Go=n(f,"DIV",{class:!0});var Ml=s(Go);T(y9.$$.fragment,Ml),yrr=i(Ml),Ld=n(Ml,"P",{});var sne=s(Ld);xrr=r(sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),LQ=n(sne,"A",{href:!0});var t9t=s(LQ);$rr=r(t9t,"from_pretrained()"),t9t.forEach(t),krr=r(sne," class method or the "),yQ=n(sne,"A",{href:!0});var a9t=s(yQ);Srr=r(a9t,"from_config()"),a9t.forEach(t),Rrr=r(sne,` class
method.`),sne.forEach(t),Prr=i(Ml),x9=n(Ml,"P",{});var PJe=s(x9);Brr=r(PJe,"This class cannot be instantiated directly using "),B2e=n(PJe,"CODE",{});var n9t=s(B2e);Irr=r(n9t,"__init__()"),n9t.forEach(t),Nrr=r(PJe," (throws an error)."),PJe.forEach(t),qrr=i(Ml),Ft=n(Ml,"DIV",{class:!0});var $L=s(Ft);T($9.$$.fragment,$L),jrr=i($L),I2e=n($L,"P",{});var s9t=s(I2e);Drr=r(s9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),s9t.forEach(t),Grr=i($L),yd=n($L,"P",{});var lne=s(yd);Orr=r(lne,`Note:
Loading a model from its configuration file does `),N2e=n(lne,"STRONG",{});var l9t=s(N2e);Vrr=r(l9t,"not"),l9t.forEach(t),Xrr=r(lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=n(lne,"A",{href:!0});var i9t=s(xQ);zrr=r(i9t,"from_pretrained()"),i9t.forEach(t),Wrr=r(lne," to load the model weights."),lne.forEach(t),Qrr=i($L),T(F3.$$.fragment,$L),$L.forEach(t),Urr=i(Ml),no=n(Ml,"DIV",{class:!0});var Ma=s(no);T(k9.$$.fragment,Ma),Hrr=i(Ma),q2e=n(Ma,"P",{});var d9t=s(q2e);Jrr=r(d9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),d9t.forEach(t),Yrr=i(Ma),Ya=n(Ma,"P",{});var kL=s(Ya);Krr=r(kL,"The model class to instantiate is selected based on the "),j2e=n(kL,"CODE",{});var c9t=s(j2e);Zrr=r(c9t,"model_type"),c9t.forEach(t),etr=r(kL,` property of the config object (either
passed as an argument or loaded from `),D2e=n(kL,"CODE",{});var f9t=s(D2e);otr=r(f9t,"pretrained_model_name_or_path"),f9t.forEach(t),rtr=r(kL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G2e=n(kL,"CODE",{});var m9t=s(G2e);ttr=r(m9t,"pretrained_model_name_or_path"),m9t.forEach(t),atr=r(kL,":"),kL.forEach(t),ntr=i(Ma),H=n(Ma,"UL",{});var K=s(H);T3=n(K,"LI",{});var Jqe=s(T3);O2e=n(Jqe,"STRONG",{});var g9t=s(O2e);str=r(g9t,"albert"),g9t.forEach(t),ltr=r(Jqe," \u2014 "),$Q=n(Jqe,"A",{href:!0});var h9t=s($Q);itr=r(h9t,"AlbertForTokenClassification"),h9t.forEach(t),dtr=r(Jqe," (ALBERT model)"),Jqe.forEach(t),ctr=i(K),M3=n(K,"LI",{});var Yqe=s(M3);V2e=n(Yqe,"STRONG",{});var p9t=s(V2e);ftr=r(p9t,"bert"),p9t.forEach(t),mtr=r(Yqe," \u2014 "),kQ=n(Yqe,"A",{href:!0});var _9t=s(kQ);gtr=r(_9t,"BertForTokenClassification"),_9t.forEach(t),htr=r(Yqe," (BERT model)"),Yqe.forEach(t),ptr=i(K),E3=n(K,"LI",{});var Kqe=s(E3);X2e=n(Kqe,"STRONG",{});var u9t=s(X2e);_tr=r(u9t,"big_bird"),u9t.forEach(t),utr=r(Kqe," \u2014 "),SQ=n(Kqe,"A",{href:!0});var b9t=s(SQ);btr=r(b9t,"BigBirdForTokenClassification"),b9t.forEach(t),vtr=r(Kqe," (BigBird model)"),Kqe.forEach(t),Ftr=i(K),C3=n(K,"LI",{});var Zqe=s(C3);z2e=n(Zqe,"STRONG",{});var v9t=s(z2e);Ttr=r(v9t,"bloom"),v9t.forEach(t),Mtr=r(Zqe," \u2014 "),RQ=n(Zqe,"A",{href:!0});var F9t=s(RQ);Etr=r(F9t,"BloomForTokenClassification"),F9t.forEach(t),Ctr=r(Zqe," (BLOOM model)"),Zqe.forEach(t),wtr=i(K),w3=n(K,"LI",{});var eje=s(w3);W2e=n(eje,"STRONG",{});var T9t=s(W2e);Atr=r(T9t,"camembert"),T9t.forEach(t),Ltr=r(eje," \u2014 "),PQ=n(eje,"A",{href:!0});var M9t=s(PQ);ytr=r(M9t,"CamembertForTokenClassification"),M9t.forEach(t),xtr=r(eje," (CamemBERT model)"),eje.forEach(t),$tr=i(K),A3=n(K,"LI",{});var oje=s(A3);Q2e=n(oje,"STRONG",{});var E9t=s(Q2e);ktr=r(E9t,"canine"),E9t.forEach(t),Str=r(oje," \u2014 "),BQ=n(oje,"A",{href:!0});var C9t=s(BQ);Rtr=r(C9t,"CanineForTokenClassification"),C9t.forEach(t),Ptr=r(oje," (CANINE model)"),oje.forEach(t),Btr=i(K),L3=n(K,"LI",{});var rje=s(L3);U2e=n(rje,"STRONG",{});var w9t=s(U2e);Itr=r(w9t,"convbert"),w9t.forEach(t),Ntr=r(rje," \u2014 "),IQ=n(rje,"A",{href:!0});var A9t=s(IQ);qtr=r(A9t,"ConvBertForTokenClassification"),A9t.forEach(t),jtr=r(rje," (ConvBERT model)"),rje.forEach(t),Dtr=i(K),y3=n(K,"LI",{});var tje=s(y3);H2e=n(tje,"STRONG",{});var L9t=s(H2e);Gtr=r(L9t,"data2vec-text"),L9t.forEach(t),Otr=r(tje," \u2014 "),NQ=n(tje,"A",{href:!0});var y9t=s(NQ);Vtr=r(y9t,"Data2VecTextForTokenClassification"),y9t.forEach(t),Xtr=r(tje," (Data2VecText model)"),tje.forEach(t),ztr=i(K),x3=n(K,"LI",{});var aje=s(x3);J2e=n(aje,"STRONG",{});var x9t=s(J2e);Wtr=r(x9t,"deberta"),x9t.forEach(t),Qtr=r(aje," \u2014 "),qQ=n(aje,"A",{href:!0});var $9t=s(qQ);Utr=r($9t,"DebertaForTokenClassification"),$9t.forEach(t),Htr=r(aje," (DeBERTa model)"),aje.forEach(t),Jtr=i(K),$3=n(K,"LI",{});var nje=s($3);Y2e=n(nje,"STRONG",{});var k9t=s(Y2e);Ytr=r(k9t,"deberta-v2"),k9t.forEach(t),Ktr=r(nje," \u2014 "),jQ=n(nje,"A",{href:!0});var S9t=s(jQ);Ztr=r(S9t,"DebertaV2ForTokenClassification"),S9t.forEach(t),ear=r(nje," (DeBERTa-v2 model)"),nje.forEach(t),oar=i(K),k3=n(K,"LI",{});var sje=s(k3);K2e=n(sje,"STRONG",{});var R9t=s(K2e);rar=r(R9t,"distilbert"),R9t.forEach(t),tar=r(sje," \u2014 "),DQ=n(sje,"A",{href:!0});var P9t=s(DQ);aar=r(P9t,"DistilBertForTokenClassification"),P9t.forEach(t),nar=r(sje," (DistilBERT model)"),sje.forEach(t),sar=i(K),S3=n(K,"LI",{});var lje=s(S3);Z2e=n(lje,"STRONG",{});var B9t=s(Z2e);lar=r(B9t,"electra"),B9t.forEach(t),iar=r(lje," \u2014 "),GQ=n(lje,"A",{href:!0});var I9t=s(GQ);dar=r(I9t,"ElectraForTokenClassification"),I9t.forEach(t),car=r(lje," (ELECTRA model)"),lje.forEach(t),far=i(K),R3=n(K,"LI",{});var ije=s(R3);ebe=n(ije,"STRONG",{});var N9t=s(ebe);mar=r(N9t,"flaubert"),N9t.forEach(t),gar=r(ije," \u2014 "),OQ=n(ije,"A",{href:!0});var q9t=s(OQ);har=r(q9t,"FlaubertForTokenClassification"),q9t.forEach(t),par=r(ije," (FlauBERT model)"),ije.forEach(t),_ar=i(K),P3=n(K,"LI",{});var dje=s(P3);obe=n(dje,"STRONG",{});var j9t=s(obe);uar=r(j9t,"fnet"),j9t.forEach(t),bar=r(dje," \u2014 "),VQ=n(dje,"A",{href:!0});var D9t=s(VQ);Far=r(D9t,"FNetForTokenClassification"),D9t.forEach(t),Tar=r(dje," (FNet model)"),dje.forEach(t),Mar=i(K),B3=n(K,"LI",{});var cje=s(B3);rbe=n(cje,"STRONG",{});var G9t=s(rbe);Ear=r(G9t,"funnel"),G9t.forEach(t),Car=r(cje," \u2014 "),XQ=n(cje,"A",{href:!0});var O9t=s(XQ);war=r(O9t,"FunnelForTokenClassification"),O9t.forEach(t),Aar=r(cje," (Funnel Transformer model)"),cje.forEach(t),Lar=i(K),I3=n(K,"LI",{});var fje=s(I3);tbe=n(fje,"STRONG",{});var V9t=s(tbe);yar=r(V9t,"gpt2"),V9t.forEach(t),xar=r(fje," \u2014 "),zQ=n(fje,"A",{href:!0});var X9t=s(zQ);$ar=r(X9t,"GPT2ForTokenClassification"),X9t.forEach(t),kar=r(fje," (OpenAI GPT-2 model)"),fje.forEach(t),Sar=i(K),N3=n(K,"LI",{});var mje=s(N3);abe=n(mje,"STRONG",{});var z9t=s(abe);Rar=r(z9t,"ibert"),z9t.forEach(t),Par=r(mje," \u2014 "),WQ=n(mje,"A",{href:!0});var W9t=s(WQ);Bar=r(W9t,"IBertForTokenClassification"),W9t.forEach(t),Iar=r(mje," (I-BERT model)"),mje.forEach(t),Nar=i(K),q3=n(K,"LI",{});var gje=s(q3);nbe=n(gje,"STRONG",{});var Q9t=s(nbe);qar=r(Q9t,"layoutlm"),Q9t.forEach(t),jar=r(gje," \u2014 "),QQ=n(gje,"A",{href:!0});var U9t=s(QQ);Dar=r(U9t,"LayoutLMForTokenClassification"),U9t.forEach(t),Gar=r(gje," (LayoutLM model)"),gje.forEach(t),Oar=i(K),j3=n(K,"LI",{});var hje=s(j3);sbe=n(hje,"STRONG",{});var H9t=s(sbe);Var=r(H9t,"layoutlmv2"),H9t.forEach(t),Xar=r(hje," \u2014 "),UQ=n(hje,"A",{href:!0});var J9t=s(UQ);zar=r(J9t,"LayoutLMv2ForTokenClassification"),J9t.forEach(t),War=r(hje," (LayoutLMv2 model)"),hje.forEach(t),Qar=i(K),D3=n(K,"LI",{});var pje=s(D3);lbe=n(pje,"STRONG",{});var Y9t=s(lbe);Uar=r(Y9t,"layoutlmv3"),Y9t.forEach(t),Har=r(pje," \u2014 "),HQ=n(pje,"A",{href:!0});var K9t=s(HQ);Jar=r(K9t,"LayoutLMv3ForTokenClassification"),K9t.forEach(t),Yar=r(pje," (LayoutLMv3 model)"),pje.forEach(t),Kar=i(K),G3=n(K,"LI",{});var _je=s(G3);ibe=n(_je,"STRONG",{});var Z9t=s(ibe);Zar=r(Z9t,"longformer"),Z9t.forEach(t),enr=r(_je," \u2014 "),JQ=n(_je,"A",{href:!0});var ext=s(JQ);onr=r(ext,"LongformerForTokenClassification"),ext.forEach(t),rnr=r(_je," (Longformer model)"),_je.forEach(t),tnr=i(K),O3=n(K,"LI",{});var uje=s(O3);dbe=n(uje,"STRONG",{});var oxt=s(dbe);anr=r(oxt,"luke"),oxt.forEach(t),nnr=r(uje," \u2014 "),YQ=n(uje,"A",{href:!0});var rxt=s(YQ);snr=r(rxt,"LukeForTokenClassification"),rxt.forEach(t),lnr=r(uje," (LUKE model)"),uje.forEach(t),inr=i(K),V3=n(K,"LI",{});var bje=s(V3);cbe=n(bje,"STRONG",{});var txt=s(cbe);dnr=r(txt,"megatron-bert"),txt.forEach(t),cnr=r(bje," \u2014 "),KQ=n(bje,"A",{href:!0});var axt=s(KQ);fnr=r(axt,"MegatronBertForTokenClassification"),axt.forEach(t),mnr=r(bje," (Megatron-BERT model)"),bje.forEach(t),gnr=i(K),X3=n(K,"LI",{});var vje=s(X3);fbe=n(vje,"STRONG",{});var nxt=s(fbe);hnr=r(nxt,"mobilebert"),nxt.forEach(t),pnr=r(vje," \u2014 "),ZQ=n(vje,"A",{href:!0});var sxt=s(ZQ);_nr=r(sxt,"MobileBertForTokenClassification"),sxt.forEach(t),unr=r(vje," (MobileBERT model)"),vje.forEach(t),bnr=i(K),z3=n(K,"LI",{});var Fje=s(z3);mbe=n(Fje,"STRONG",{});var lxt=s(mbe);vnr=r(lxt,"mpnet"),lxt.forEach(t),Fnr=r(Fje," \u2014 "),eU=n(Fje,"A",{href:!0});var ixt=s(eU);Tnr=r(ixt,"MPNetForTokenClassification"),ixt.forEach(t),Mnr=r(Fje," (MPNet model)"),Fje.forEach(t),Enr=i(K),W3=n(K,"LI",{});var Tje=s(W3);gbe=n(Tje,"STRONG",{});var dxt=s(gbe);Cnr=r(dxt,"nezha"),dxt.forEach(t),wnr=r(Tje," \u2014 "),oU=n(Tje,"A",{href:!0});var cxt=s(oU);Anr=r(cxt,"NezhaForTokenClassification"),cxt.forEach(t),Lnr=r(Tje," (Nezha model)"),Tje.forEach(t),ynr=i(K),Q3=n(K,"LI",{});var Mje=s(Q3);hbe=n(Mje,"STRONG",{});var fxt=s(hbe);xnr=r(fxt,"nystromformer"),fxt.forEach(t),$nr=r(Mje," \u2014 "),rU=n(Mje,"A",{href:!0});var mxt=s(rU);knr=r(mxt,"NystromformerForTokenClassification"),mxt.forEach(t),Snr=r(Mje," (Nystr\xF6mformer model)"),Mje.forEach(t),Rnr=i(K),U3=n(K,"LI",{});var Eje=s(U3);pbe=n(Eje,"STRONG",{});var gxt=s(pbe);Pnr=r(gxt,"qdqbert"),gxt.forEach(t),Bnr=r(Eje," \u2014 "),tU=n(Eje,"A",{href:!0});var hxt=s(tU);Inr=r(hxt,"QDQBertForTokenClassification"),hxt.forEach(t),Nnr=r(Eje," (QDQBert model)"),Eje.forEach(t),qnr=i(K),H3=n(K,"LI",{});var Cje=s(H3);_be=n(Cje,"STRONG",{});var pxt=s(_be);jnr=r(pxt,"rembert"),pxt.forEach(t),Dnr=r(Cje," \u2014 "),aU=n(Cje,"A",{href:!0});var _xt=s(aU);Gnr=r(_xt,"RemBertForTokenClassification"),_xt.forEach(t),Onr=r(Cje," (RemBERT model)"),Cje.forEach(t),Vnr=i(K),J3=n(K,"LI",{});var wje=s(J3);ube=n(wje,"STRONG",{});var uxt=s(ube);Xnr=r(uxt,"roberta"),uxt.forEach(t),znr=r(wje," \u2014 "),nU=n(wje,"A",{href:!0});var bxt=s(nU);Wnr=r(bxt,"RobertaForTokenClassification"),bxt.forEach(t),Qnr=r(wje," (RoBERTa model)"),wje.forEach(t),Unr=i(K),Y3=n(K,"LI",{});var Aje=s(Y3);bbe=n(Aje,"STRONG",{});var vxt=s(bbe);Hnr=r(vxt,"roformer"),vxt.forEach(t),Jnr=r(Aje," \u2014 "),sU=n(Aje,"A",{href:!0});var Fxt=s(sU);Ynr=r(Fxt,"RoFormerForTokenClassification"),Fxt.forEach(t),Knr=r(Aje," (RoFormer model)"),Aje.forEach(t),Znr=i(K),K3=n(K,"LI",{});var Lje=s(K3);vbe=n(Lje,"STRONG",{});var Txt=s(vbe);esr=r(Txt,"squeezebert"),Txt.forEach(t),osr=r(Lje," \u2014 "),lU=n(Lje,"A",{href:!0});var Mxt=s(lU);rsr=r(Mxt,"SqueezeBertForTokenClassification"),Mxt.forEach(t),tsr=r(Lje," (SqueezeBERT model)"),Lje.forEach(t),asr=i(K),Z3=n(K,"LI",{});var yje=s(Z3);Fbe=n(yje,"STRONG",{});var Ext=s(Fbe);nsr=r(Ext,"xlm"),Ext.forEach(t),ssr=r(yje," \u2014 "),iU=n(yje,"A",{href:!0});var Cxt=s(iU);lsr=r(Cxt,"XLMForTokenClassification"),Cxt.forEach(t),isr=r(yje," (XLM model)"),yje.forEach(t),dsr=i(K),e5=n(K,"LI",{});var xje=s(e5);Tbe=n(xje,"STRONG",{});var wxt=s(Tbe);csr=r(wxt,"xlm-roberta"),wxt.forEach(t),fsr=r(xje," \u2014 "),dU=n(xje,"A",{href:!0});var Axt=s(dU);msr=r(Axt,"XLMRobertaForTokenClassification"),Axt.forEach(t),gsr=r(xje," (XLM-RoBERTa model)"),xje.forEach(t),hsr=i(K),o5=n(K,"LI",{});var $je=s(o5);Mbe=n($je,"STRONG",{});var Lxt=s(Mbe);psr=r(Lxt,"xlm-roberta-xl"),Lxt.forEach(t),_sr=r($je," \u2014 "),cU=n($je,"A",{href:!0});var yxt=s(cU);usr=r(yxt,"XLMRobertaXLForTokenClassification"),yxt.forEach(t),bsr=r($je," (XLM-RoBERTa-XL model)"),$je.forEach(t),vsr=i(K),r5=n(K,"LI",{});var kje=s(r5);Ebe=n(kje,"STRONG",{});var xxt=s(Ebe);Fsr=r(xxt,"xlnet"),xxt.forEach(t),Tsr=r(kje," \u2014 "),fU=n(kje,"A",{href:!0});var $xt=s(fU);Msr=r($xt,"XLNetForTokenClassification"),$xt.forEach(t),Esr=r(kje," (XLNet model)"),kje.forEach(t),Csr=i(K),t5=n(K,"LI",{});var Sje=s(t5);Cbe=n(Sje,"STRONG",{});var kxt=s(Cbe);wsr=r(kxt,"yoso"),kxt.forEach(t),Asr=r(Sje," \u2014 "),mU=n(Sje,"A",{href:!0});var Sxt=s(mU);Lsr=r(Sxt,"YosoForTokenClassification"),Sxt.forEach(t),ysr=r(Sje," (YOSO model)"),Sje.forEach(t),K.forEach(t),xsr=i(Ma),a5=n(Ma,"P",{});var Rje=s(a5);$sr=r(Rje,"The model is set in evaluation mode by default using "),wbe=n(Rje,"CODE",{});var Rxt=s(wbe);ksr=r(Rxt,"model.eval()"),Rxt.forEach(t),Ssr=r(Rje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Abe=n(Rje,"CODE",{});var Pxt=s(Abe);Rsr=r(Pxt,"model.train()"),Pxt.forEach(t),Rje.forEach(t),Psr=i(Ma),T(n5.$$.fragment,Ma),Ma.forEach(t),Ml.forEach(t),wUe=i(f),xd=n(f,"H2",{class:!0});var BJe=s(xd);s5=n(BJe,"A",{id:!0,class:!0,href:!0});var Bxt=s(s5);Lbe=n(Bxt,"SPAN",{});var Ixt=s(Lbe);T(S9.$$.fragment,Ixt),Ixt.forEach(t),Bxt.forEach(t),Bsr=i(BJe),ybe=n(BJe,"SPAN",{});var Nxt=s(ybe);Isr=r(Nxt,"AutoModelForQuestionAnswering"),Nxt.forEach(t),BJe.forEach(t),AUe=i(f),Oo=n(f,"DIV",{class:!0});var El=s(Oo);T(R9.$$.fragment,El),Nsr=i(El),$d=n(El,"P",{});var ine=s($d);qsr=r(ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gU=n(ine,"A",{href:!0});var qxt=s(gU);jsr=r(qxt,"from_pretrained()"),qxt.forEach(t),Dsr=r(ine," class method or the "),hU=n(ine,"A",{href:!0});var jxt=s(hU);Gsr=r(jxt,"from_config()"),jxt.forEach(t),Osr=r(ine,` class
method.`),ine.forEach(t),Vsr=i(El),P9=n(El,"P",{});var IJe=s(P9);Xsr=r(IJe,"This class cannot be instantiated directly using "),xbe=n(IJe,"CODE",{});var Dxt=s(xbe);zsr=r(Dxt,"__init__()"),Dxt.forEach(t),Wsr=r(IJe," (throws an error)."),IJe.forEach(t),Qsr=i(El),Tt=n(El,"DIV",{class:!0});var SL=s(Tt);T(B9.$$.fragment,SL),Usr=i(SL),$be=n(SL,"P",{});var Gxt=s($be);Hsr=r(Gxt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Gxt.forEach(t),Jsr=i(SL),kd=n(SL,"P",{});var dne=s(kd);Ysr=r(dne,`Note:
Loading a model from its configuration file does `),kbe=n(dne,"STRONG",{});var Oxt=s(kbe);Ksr=r(Oxt,"not"),Oxt.forEach(t),Zsr=r(dne,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(dne,"A",{href:!0});var Vxt=s(pU);elr=r(Vxt,"from_pretrained()"),Vxt.forEach(t),olr=r(dne," to load the model weights."),dne.forEach(t),rlr=i(SL),T(l5.$$.fragment,SL),SL.forEach(t),tlr=i(El),so=n(El,"DIV",{class:!0});var Ea=s(so);T(I9.$$.fragment,Ea),alr=i(Ea),Sbe=n(Ea,"P",{});var Xxt=s(Sbe);nlr=r(Xxt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Xxt.forEach(t),slr=i(Ea),Ka=n(Ea,"P",{});var RL=s(Ka);llr=r(RL,"The model class to instantiate is selected based on the "),Rbe=n(RL,"CODE",{});var zxt=s(Rbe);ilr=r(zxt,"model_type"),zxt.forEach(t),dlr=r(RL,` property of the config object (either
passed as an argument or loaded from `),Pbe=n(RL,"CODE",{});var Wxt=s(Pbe);clr=r(Wxt,"pretrained_model_name_or_path"),Wxt.forEach(t),flr=r(RL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=n(RL,"CODE",{});var Qxt=s(Bbe);mlr=r(Qxt,"pretrained_model_name_or_path"),Qxt.forEach(t),glr=r(RL,":"),RL.forEach(t),hlr=i(Ea),V=n(Ea,"UL",{});var X=s(V);i5=n(X,"LI",{});var Pje=s(i5);Ibe=n(Pje,"STRONG",{});var Uxt=s(Ibe);plr=r(Uxt,"albert"),Uxt.forEach(t),_lr=r(Pje," \u2014 "),_U=n(Pje,"A",{href:!0});var Hxt=s(_U);ulr=r(Hxt,"AlbertForQuestionAnswering"),Hxt.forEach(t),blr=r(Pje," (ALBERT model)"),Pje.forEach(t),vlr=i(X),d5=n(X,"LI",{});var Bje=s(d5);Nbe=n(Bje,"STRONG",{});var Jxt=s(Nbe);Flr=r(Jxt,"bart"),Jxt.forEach(t),Tlr=r(Bje," \u2014 "),uU=n(Bje,"A",{href:!0});var Yxt=s(uU);Mlr=r(Yxt,"BartForQuestionAnswering"),Yxt.forEach(t),Elr=r(Bje," (BART model)"),Bje.forEach(t),Clr=i(X),c5=n(X,"LI",{});var Ije=s(c5);qbe=n(Ije,"STRONG",{});var Kxt=s(qbe);wlr=r(Kxt,"bert"),Kxt.forEach(t),Alr=r(Ije," \u2014 "),bU=n(Ije,"A",{href:!0});var Zxt=s(bU);Llr=r(Zxt,"BertForQuestionAnswering"),Zxt.forEach(t),ylr=r(Ije," (BERT model)"),Ije.forEach(t),xlr=i(X),f5=n(X,"LI",{});var Nje=s(f5);jbe=n(Nje,"STRONG",{});var e$t=s(jbe);$lr=r(e$t,"big_bird"),e$t.forEach(t),klr=r(Nje," \u2014 "),vU=n(Nje,"A",{href:!0});var o$t=s(vU);Slr=r(o$t,"BigBirdForQuestionAnswering"),o$t.forEach(t),Rlr=r(Nje," (BigBird model)"),Nje.forEach(t),Plr=i(X),m5=n(X,"LI",{});var qje=s(m5);Dbe=n(qje,"STRONG",{});var r$t=s(Dbe);Blr=r(r$t,"bigbird_pegasus"),r$t.forEach(t),Ilr=r(qje," \u2014 "),FU=n(qje,"A",{href:!0});var t$t=s(FU);Nlr=r(t$t,"BigBirdPegasusForQuestionAnswering"),t$t.forEach(t),qlr=r(qje," (BigBird-Pegasus model)"),qje.forEach(t),jlr=i(X),g5=n(X,"LI",{});var jje=s(g5);Gbe=n(jje,"STRONG",{});var a$t=s(Gbe);Dlr=r(a$t,"camembert"),a$t.forEach(t),Glr=r(jje," \u2014 "),TU=n(jje,"A",{href:!0});var n$t=s(TU);Olr=r(n$t,"CamembertForQuestionAnswering"),n$t.forEach(t),Vlr=r(jje," (CamemBERT model)"),jje.forEach(t),Xlr=i(X),h5=n(X,"LI",{});var Dje=s(h5);Obe=n(Dje,"STRONG",{});var s$t=s(Obe);zlr=r(s$t,"canine"),s$t.forEach(t),Wlr=r(Dje," \u2014 "),MU=n(Dje,"A",{href:!0});var l$t=s(MU);Qlr=r(l$t,"CanineForQuestionAnswering"),l$t.forEach(t),Ulr=r(Dje," (CANINE model)"),Dje.forEach(t),Hlr=i(X),p5=n(X,"LI",{});var Gje=s(p5);Vbe=n(Gje,"STRONG",{});var i$t=s(Vbe);Jlr=r(i$t,"convbert"),i$t.forEach(t),Ylr=r(Gje," \u2014 "),EU=n(Gje,"A",{href:!0});var d$t=s(EU);Klr=r(d$t,"ConvBertForQuestionAnswering"),d$t.forEach(t),Zlr=r(Gje," (ConvBERT model)"),Gje.forEach(t),eir=i(X),_5=n(X,"LI",{});var Oje=s(_5);Xbe=n(Oje,"STRONG",{});var c$t=s(Xbe);oir=r(c$t,"data2vec-text"),c$t.forEach(t),rir=r(Oje," \u2014 "),CU=n(Oje,"A",{href:!0});var f$t=s(CU);tir=r(f$t,"Data2VecTextForQuestionAnswering"),f$t.forEach(t),air=r(Oje," (Data2VecText model)"),Oje.forEach(t),nir=i(X),u5=n(X,"LI",{});var Vje=s(u5);zbe=n(Vje,"STRONG",{});var m$t=s(zbe);sir=r(m$t,"deberta"),m$t.forEach(t),lir=r(Vje," \u2014 "),wU=n(Vje,"A",{href:!0});var g$t=s(wU);iir=r(g$t,"DebertaForQuestionAnswering"),g$t.forEach(t),dir=r(Vje," (DeBERTa model)"),Vje.forEach(t),cir=i(X),b5=n(X,"LI",{});var Xje=s(b5);Wbe=n(Xje,"STRONG",{});var h$t=s(Wbe);fir=r(h$t,"deberta-v2"),h$t.forEach(t),mir=r(Xje," \u2014 "),AU=n(Xje,"A",{href:!0});var p$t=s(AU);gir=r(p$t,"DebertaV2ForQuestionAnswering"),p$t.forEach(t),hir=r(Xje," (DeBERTa-v2 model)"),Xje.forEach(t),pir=i(X),v5=n(X,"LI",{});var zje=s(v5);Qbe=n(zje,"STRONG",{});var _$t=s(Qbe);_ir=r(_$t,"distilbert"),_$t.forEach(t),uir=r(zje," \u2014 "),LU=n(zje,"A",{href:!0});var u$t=s(LU);bir=r(u$t,"DistilBertForQuestionAnswering"),u$t.forEach(t),vir=r(zje," (DistilBERT model)"),zje.forEach(t),Fir=i(X),F5=n(X,"LI",{});var Wje=s(F5);Ube=n(Wje,"STRONG",{});var b$t=s(Ube);Tir=r(b$t,"electra"),b$t.forEach(t),Mir=r(Wje," \u2014 "),yU=n(Wje,"A",{href:!0});var v$t=s(yU);Eir=r(v$t,"ElectraForQuestionAnswering"),v$t.forEach(t),Cir=r(Wje," (ELECTRA model)"),Wje.forEach(t),wir=i(X),T5=n(X,"LI",{});var Qje=s(T5);Hbe=n(Qje,"STRONG",{});var F$t=s(Hbe);Air=r(F$t,"flaubert"),F$t.forEach(t),Lir=r(Qje," \u2014 "),xU=n(Qje,"A",{href:!0});var T$t=s(xU);yir=r(T$t,"FlaubertForQuestionAnsweringSimple"),T$t.forEach(t),xir=r(Qje," (FlauBERT model)"),Qje.forEach(t),$ir=i(X),M5=n(X,"LI",{});var Uje=s(M5);Jbe=n(Uje,"STRONG",{});var M$t=s(Jbe);kir=r(M$t,"fnet"),M$t.forEach(t),Sir=r(Uje," \u2014 "),$U=n(Uje,"A",{href:!0});var E$t=s($U);Rir=r(E$t,"FNetForQuestionAnswering"),E$t.forEach(t),Pir=r(Uje," (FNet model)"),Uje.forEach(t),Bir=i(X),E5=n(X,"LI",{});var Hje=s(E5);Ybe=n(Hje,"STRONG",{});var C$t=s(Ybe);Iir=r(C$t,"funnel"),C$t.forEach(t),Nir=r(Hje," \u2014 "),kU=n(Hje,"A",{href:!0});var w$t=s(kU);qir=r(w$t,"FunnelForQuestionAnswering"),w$t.forEach(t),jir=r(Hje," (Funnel Transformer model)"),Hje.forEach(t),Dir=i(X),C5=n(X,"LI",{});var Jje=s(C5);Kbe=n(Jje,"STRONG",{});var A$t=s(Kbe);Gir=r(A$t,"gptj"),A$t.forEach(t),Oir=r(Jje," \u2014 "),SU=n(Jje,"A",{href:!0});var L$t=s(SU);Vir=r(L$t,"GPTJForQuestionAnswering"),L$t.forEach(t),Xir=r(Jje," (GPT-J model)"),Jje.forEach(t),zir=i(X),w5=n(X,"LI",{});var Yje=s(w5);Zbe=n(Yje,"STRONG",{});var y$t=s(Zbe);Wir=r(y$t,"ibert"),y$t.forEach(t),Qir=r(Yje," \u2014 "),RU=n(Yje,"A",{href:!0});var x$t=s(RU);Uir=r(x$t,"IBertForQuestionAnswering"),x$t.forEach(t),Hir=r(Yje," (I-BERT model)"),Yje.forEach(t),Jir=i(X),A5=n(X,"LI",{});var Kje=s(A5);eve=n(Kje,"STRONG",{});var $$t=s(eve);Yir=r($$t,"layoutlmv2"),$$t.forEach(t),Kir=r(Kje," \u2014 "),PU=n(Kje,"A",{href:!0});var k$t=s(PU);Zir=r(k$t,"LayoutLMv2ForQuestionAnswering"),k$t.forEach(t),edr=r(Kje," (LayoutLMv2 model)"),Kje.forEach(t),odr=i(X),L5=n(X,"LI",{});var Zje=s(L5);ove=n(Zje,"STRONG",{});var S$t=s(ove);rdr=r(S$t,"layoutlmv3"),S$t.forEach(t),tdr=r(Zje," \u2014 "),BU=n(Zje,"A",{href:!0});var R$t=s(BU);adr=r(R$t,"LayoutLMv3ForQuestionAnswering"),R$t.forEach(t),ndr=r(Zje," (LayoutLMv3 model)"),Zje.forEach(t),sdr=i(X),y5=n(X,"LI",{});var eDe=s(y5);rve=n(eDe,"STRONG",{});var P$t=s(rve);ldr=r(P$t,"led"),P$t.forEach(t),idr=r(eDe," \u2014 "),IU=n(eDe,"A",{href:!0});var B$t=s(IU);ddr=r(B$t,"LEDForQuestionAnswering"),B$t.forEach(t),cdr=r(eDe," (LED model)"),eDe.forEach(t),fdr=i(X),x5=n(X,"LI",{});var oDe=s(x5);tve=n(oDe,"STRONG",{});var I$t=s(tve);mdr=r(I$t,"longformer"),I$t.forEach(t),gdr=r(oDe," \u2014 "),NU=n(oDe,"A",{href:!0});var N$t=s(NU);hdr=r(N$t,"LongformerForQuestionAnswering"),N$t.forEach(t),pdr=r(oDe," (Longformer model)"),oDe.forEach(t),_dr=i(X),$5=n(X,"LI",{});var rDe=s($5);ave=n(rDe,"STRONG",{});var q$t=s(ave);udr=r(q$t,"luke"),q$t.forEach(t),bdr=r(rDe," \u2014 "),qU=n(rDe,"A",{href:!0});var j$t=s(qU);vdr=r(j$t,"LukeForQuestionAnswering"),j$t.forEach(t),Fdr=r(rDe," (LUKE model)"),rDe.forEach(t),Tdr=i(X),k5=n(X,"LI",{});var tDe=s(k5);nve=n(tDe,"STRONG",{});var D$t=s(nve);Mdr=r(D$t,"lxmert"),D$t.forEach(t),Edr=r(tDe," \u2014 "),jU=n(tDe,"A",{href:!0});var G$t=s(jU);Cdr=r(G$t,"LxmertForQuestionAnswering"),G$t.forEach(t),wdr=r(tDe," (LXMERT model)"),tDe.forEach(t),Adr=i(X),S5=n(X,"LI",{});var aDe=s(S5);sve=n(aDe,"STRONG",{});var O$t=s(sve);Ldr=r(O$t,"mbart"),O$t.forEach(t),ydr=r(aDe," \u2014 "),DU=n(aDe,"A",{href:!0});var V$t=s(DU);xdr=r(V$t,"MBartForQuestionAnswering"),V$t.forEach(t),$dr=r(aDe," (mBART model)"),aDe.forEach(t),kdr=i(X),R5=n(X,"LI",{});var nDe=s(R5);lve=n(nDe,"STRONG",{});var X$t=s(lve);Sdr=r(X$t,"megatron-bert"),X$t.forEach(t),Rdr=r(nDe," \u2014 "),GU=n(nDe,"A",{href:!0});var z$t=s(GU);Pdr=r(z$t,"MegatronBertForQuestionAnswering"),z$t.forEach(t),Bdr=r(nDe," (Megatron-BERT model)"),nDe.forEach(t),Idr=i(X),P5=n(X,"LI",{});var sDe=s(P5);ive=n(sDe,"STRONG",{});var W$t=s(ive);Ndr=r(W$t,"mobilebert"),W$t.forEach(t),qdr=r(sDe," \u2014 "),OU=n(sDe,"A",{href:!0});var Q$t=s(OU);jdr=r(Q$t,"MobileBertForQuestionAnswering"),Q$t.forEach(t),Ddr=r(sDe," (MobileBERT model)"),sDe.forEach(t),Gdr=i(X),B5=n(X,"LI",{});var lDe=s(B5);dve=n(lDe,"STRONG",{});var U$t=s(dve);Odr=r(U$t,"mpnet"),U$t.forEach(t),Vdr=r(lDe," \u2014 "),VU=n(lDe,"A",{href:!0});var H$t=s(VU);Xdr=r(H$t,"MPNetForQuestionAnswering"),H$t.forEach(t),zdr=r(lDe," (MPNet model)"),lDe.forEach(t),Wdr=i(X),I5=n(X,"LI",{});var iDe=s(I5);cve=n(iDe,"STRONG",{});var J$t=s(cve);Qdr=r(J$t,"mvp"),J$t.forEach(t),Udr=r(iDe," \u2014 "),XU=n(iDe,"A",{href:!0});var Y$t=s(XU);Hdr=r(Y$t,"MvpForQuestionAnswering"),Y$t.forEach(t),Jdr=r(iDe," (MVP model)"),iDe.forEach(t),Ydr=i(X),N5=n(X,"LI",{});var dDe=s(N5);fve=n(dDe,"STRONG",{});var K$t=s(fve);Kdr=r(K$t,"nezha"),K$t.forEach(t),Zdr=r(dDe," \u2014 "),zU=n(dDe,"A",{href:!0});var Z$t=s(zU);ecr=r(Z$t,"NezhaForQuestionAnswering"),Z$t.forEach(t),ocr=r(dDe," (Nezha model)"),dDe.forEach(t),rcr=i(X),q5=n(X,"LI",{});var cDe=s(q5);mve=n(cDe,"STRONG",{});var ekt=s(mve);tcr=r(ekt,"nystromformer"),ekt.forEach(t),acr=r(cDe," \u2014 "),WU=n(cDe,"A",{href:!0});var okt=s(WU);ncr=r(okt,"NystromformerForQuestionAnswering"),okt.forEach(t),scr=r(cDe," (Nystr\xF6mformer model)"),cDe.forEach(t),lcr=i(X),j5=n(X,"LI",{});var fDe=s(j5);gve=n(fDe,"STRONG",{});var rkt=s(gve);icr=r(rkt,"qdqbert"),rkt.forEach(t),dcr=r(fDe," \u2014 "),QU=n(fDe,"A",{href:!0});var tkt=s(QU);ccr=r(tkt,"QDQBertForQuestionAnswering"),tkt.forEach(t),fcr=r(fDe," (QDQBert model)"),fDe.forEach(t),mcr=i(X),D5=n(X,"LI",{});var mDe=s(D5);hve=n(mDe,"STRONG",{});var akt=s(hve);gcr=r(akt,"reformer"),akt.forEach(t),hcr=r(mDe," \u2014 "),UU=n(mDe,"A",{href:!0});var nkt=s(UU);pcr=r(nkt,"ReformerForQuestionAnswering"),nkt.forEach(t),_cr=r(mDe," (Reformer model)"),mDe.forEach(t),ucr=i(X),G5=n(X,"LI",{});var gDe=s(G5);pve=n(gDe,"STRONG",{});var skt=s(pve);bcr=r(skt,"rembert"),skt.forEach(t),vcr=r(gDe," \u2014 "),HU=n(gDe,"A",{href:!0});var lkt=s(HU);Fcr=r(lkt,"RemBertForQuestionAnswering"),lkt.forEach(t),Tcr=r(gDe," (RemBERT model)"),gDe.forEach(t),Mcr=i(X),O5=n(X,"LI",{});var hDe=s(O5);_ve=n(hDe,"STRONG",{});var ikt=s(_ve);Ecr=r(ikt,"roberta"),ikt.forEach(t),Ccr=r(hDe," \u2014 "),JU=n(hDe,"A",{href:!0});var dkt=s(JU);wcr=r(dkt,"RobertaForQuestionAnswering"),dkt.forEach(t),Acr=r(hDe," (RoBERTa model)"),hDe.forEach(t),Lcr=i(X),V5=n(X,"LI",{});var pDe=s(V5);uve=n(pDe,"STRONG",{});var ckt=s(uve);ycr=r(ckt,"roformer"),ckt.forEach(t),xcr=r(pDe," \u2014 "),YU=n(pDe,"A",{href:!0});var fkt=s(YU);$cr=r(fkt,"RoFormerForQuestionAnswering"),fkt.forEach(t),kcr=r(pDe," (RoFormer model)"),pDe.forEach(t),Scr=i(X),X5=n(X,"LI",{});var _De=s(X5);bve=n(_De,"STRONG",{});var mkt=s(bve);Rcr=r(mkt,"splinter"),mkt.forEach(t),Pcr=r(_De," \u2014 "),KU=n(_De,"A",{href:!0});var gkt=s(KU);Bcr=r(gkt,"SplinterForQuestionAnswering"),gkt.forEach(t),Icr=r(_De," (Splinter model)"),_De.forEach(t),Ncr=i(X),z5=n(X,"LI",{});var uDe=s(z5);vve=n(uDe,"STRONG",{});var hkt=s(vve);qcr=r(hkt,"squeezebert"),hkt.forEach(t),jcr=r(uDe," \u2014 "),ZU=n(uDe,"A",{href:!0});var pkt=s(ZU);Dcr=r(pkt,"SqueezeBertForQuestionAnswering"),pkt.forEach(t),Gcr=r(uDe," (SqueezeBERT model)"),uDe.forEach(t),Ocr=i(X),W5=n(X,"LI",{});var bDe=s(W5);Fve=n(bDe,"STRONG",{});var _kt=s(Fve);Vcr=r(_kt,"xlm"),_kt.forEach(t),Xcr=r(bDe," \u2014 "),eH=n(bDe,"A",{href:!0});var ukt=s(eH);zcr=r(ukt,"XLMForQuestionAnsweringSimple"),ukt.forEach(t),Wcr=r(bDe," (XLM model)"),bDe.forEach(t),Qcr=i(X),Q5=n(X,"LI",{});var vDe=s(Q5);Tve=n(vDe,"STRONG",{});var bkt=s(Tve);Ucr=r(bkt,"xlm-roberta"),bkt.forEach(t),Hcr=r(vDe," \u2014 "),oH=n(vDe,"A",{href:!0});var vkt=s(oH);Jcr=r(vkt,"XLMRobertaForQuestionAnswering"),vkt.forEach(t),Ycr=r(vDe," (XLM-RoBERTa model)"),vDe.forEach(t),Kcr=i(X),U5=n(X,"LI",{});var FDe=s(U5);Mve=n(FDe,"STRONG",{});var Fkt=s(Mve);Zcr=r(Fkt,"xlm-roberta-xl"),Fkt.forEach(t),efr=r(FDe," \u2014 "),rH=n(FDe,"A",{href:!0});var Tkt=s(rH);ofr=r(Tkt,"XLMRobertaXLForQuestionAnswering"),Tkt.forEach(t),rfr=r(FDe," (XLM-RoBERTa-XL model)"),FDe.forEach(t),tfr=i(X),H5=n(X,"LI",{});var TDe=s(H5);Eve=n(TDe,"STRONG",{});var Mkt=s(Eve);afr=r(Mkt,"xlnet"),Mkt.forEach(t),nfr=r(TDe," \u2014 "),tH=n(TDe,"A",{href:!0});var Ekt=s(tH);sfr=r(Ekt,"XLNetForQuestionAnsweringSimple"),Ekt.forEach(t),lfr=r(TDe," (XLNet model)"),TDe.forEach(t),ifr=i(X),J5=n(X,"LI",{});var MDe=s(J5);Cve=n(MDe,"STRONG",{});var Ckt=s(Cve);dfr=r(Ckt,"yoso"),Ckt.forEach(t),cfr=r(MDe," \u2014 "),aH=n(MDe,"A",{href:!0});var wkt=s(aH);ffr=r(wkt,"YosoForQuestionAnswering"),wkt.forEach(t),mfr=r(MDe," (YOSO model)"),MDe.forEach(t),X.forEach(t),gfr=i(Ea),Y5=n(Ea,"P",{});var EDe=s(Y5);hfr=r(EDe,"The model is set in evaluation mode by default using "),wve=n(EDe,"CODE",{});var Akt=s(wve);pfr=r(Akt,"model.eval()"),Akt.forEach(t),_fr=r(EDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ave=n(EDe,"CODE",{});var Lkt=s(Ave);ufr=r(Lkt,"model.train()"),Lkt.forEach(t),EDe.forEach(t),bfr=i(Ea),T(K5.$$.fragment,Ea),Ea.forEach(t),El.forEach(t),LUe=i(f),Sd=n(f,"H2",{class:!0});var NJe=s(Sd);Z5=n(NJe,"A",{id:!0,class:!0,href:!0});var ykt=s(Z5);Lve=n(ykt,"SPAN",{});var xkt=s(Lve);T(N9.$$.fragment,xkt),xkt.forEach(t),ykt.forEach(t),vfr=i(NJe),yve=n(NJe,"SPAN",{});var $kt=s(yve);Ffr=r($kt,"AutoModelForTableQuestionAnswering"),$kt.forEach(t),NJe.forEach(t),yUe=i(f),Vo=n(f,"DIV",{class:!0});var Cl=s(Vo);T(q9.$$.fragment,Cl),Tfr=i(Cl),Rd=n(Cl,"P",{});var cne=s(Rd);Mfr=r(cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nH=n(cne,"A",{href:!0});var kkt=s(nH);Efr=r(kkt,"from_pretrained()"),kkt.forEach(t),Cfr=r(cne," class method or the "),sH=n(cne,"A",{href:!0});var Skt=s(sH);wfr=r(Skt,"from_config()"),Skt.forEach(t),Afr=r(cne,` class
method.`),cne.forEach(t),Lfr=i(Cl),j9=n(Cl,"P",{});var qJe=s(j9);yfr=r(qJe,"This class cannot be instantiated directly using "),xve=n(qJe,"CODE",{});var Rkt=s(xve);xfr=r(Rkt,"__init__()"),Rkt.forEach(t),$fr=r(qJe," (throws an error)."),qJe.forEach(t),kfr=i(Cl),Mt=n(Cl,"DIV",{class:!0});var PL=s(Mt);T(D9.$$.fragment,PL),Sfr=i(PL),$ve=n(PL,"P",{});var Pkt=s($ve);Rfr=r(Pkt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Pkt.forEach(t),Pfr=i(PL),Pd=n(PL,"P",{});var fne=s(Pd);Bfr=r(fne,`Note:
Loading a model from its configuration file does `),kve=n(fne,"STRONG",{});var Bkt=s(kve);Ifr=r(Bkt,"not"),Bkt.forEach(t),Nfr=r(fne,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(fne,"A",{href:!0});var Ikt=s(lH);qfr=r(Ikt,"from_pretrained()"),Ikt.forEach(t),jfr=r(fne," to load the model weights."),fne.forEach(t),Dfr=i(PL),T(e6.$$.fragment,PL),PL.forEach(t),Gfr=i(Cl),lo=n(Cl,"DIV",{class:!0});var Ca=s(lo);T(G9.$$.fragment,Ca),Ofr=i(Ca),Sve=n(Ca,"P",{});var Nkt=s(Sve);Vfr=r(Nkt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Nkt.forEach(t),Xfr=i(Ca),Za=n(Ca,"P",{});var BL=s(Za);zfr=r(BL,"The model class to instantiate is selected based on the "),Rve=n(BL,"CODE",{});var qkt=s(Rve);Wfr=r(qkt,"model_type"),qkt.forEach(t),Qfr=r(BL,` property of the config object (either
passed as an argument or loaded from `),Pve=n(BL,"CODE",{});var jkt=s(Pve);Ufr=r(jkt,"pretrained_model_name_or_path"),jkt.forEach(t),Hfr=r(BL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=n(BL,"CODE",{});var Dkt=s(Bve);Jfr=r(Dkt,"pretrained_model_name_or_path"),Dkt.forEach(t),Yfr=r(BL,":"),BL.forEach(t),Kfr=i(Ca),Ive=n(Ca,"UL",{});var Gkt=s(Ive);o6=n(Gkt,"LI",{});var CDe=s(o6);Nve=n(CDe,"STRONG",{});var Okt=s(Nve);Zfr=r(Okt,"tapas"),Okt.forEach(t),emr=r(CDe," \u2014 "),iH=n(CDe,"A",{href:!0});var Vkt=s(iH);omr=r(Vkt,"TapasForQuestionAnswering"),Vkt.forEach(t),rmr=r(CDe," (TAPAS model)"),CDe.forEach(t),Gkt.forEach(t),tmr=i(Ca),r6=n(Ca,"P",{});var wDe=s(r6);amr=r(wDe,"The model is set in evaluation mode by default using "),qve=n(wDe,"CODE",{});var Xkt=s(qve);nmr=r(Xkt,"model.eval()"),Xkt.forEach(t),smr=r(wDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jve=n(wDe,"CODE",{});var zkt=s(jve);lmr=r(zkt,"model.train()"),zkt.forEach(t),wDe.forEach(t),imr=i(Ca),T(t6.$$.fragment,Ca),Ca.forEach(t),Cl.forEach(t),xUe=i(f),Bd=n(f,"H2",{class:!0});var jJe=s(Bd);a6=n(jJe,"A",{id:!0,class:!0,href:!0});var Wkt=s(a6);Dve=n(Wkt,"SPAN",{});var Qkt=s(Dve);T(O9.$$.fragment,Qkt),Qkt.forEach(t),Wkt.forEach(t),dmr=i(jJe),Gve=n(jJe,"SPAN",{});var Ukt=s(Gve);cmr=r(Ukt,"AutoModelForImageClassification"),Ukt.forEach(t),jJe.forEach(t),$Ue=i(f),Xo=n(f,"DIV",{class:!0});var wl=s(Xo);T(V9.$$.fragment,wl),fmr=i(wl),Id=n(wl,"P",{});var mne=s(Id);mmr=r(mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dH=n(mne,"A",{href:!0});var Hkt=s(dH);gmr=r(Hkt,"from_pretrained()"),Hkt.forEach(t),hmr=r(mne," class method or the "),cH=n(mne,"A",{href:!0});var Jkt=s(cH);pmr=r(Jkt,"from_config()"),Jkt.forEach(t),_mr=r(mne,` class
method.`),mne.forEach(t),umr=i(wl),X9=n(wl,"P",{});var DJe=s(X9);bmr=r(DJe,"This class cannot be instantiated directly using "),Ove=n(DJe,"CODE",{});var Ykt=s(Ove);vmr=r(Ykt,"__init__()"),Ykt.forEach(t),Fmr=r(DJe," (throws an error)."),DJe.forEach(t),Tmr=i(wl),Et=n(wl,"DIV",{class:!0});var IL=s(Et);T(z9.$$.fragment,IL),Mmr=i(IL),Vve=n(IL,"P",{});var Kkt=s(Vve);Emr=r(Kkt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Kkt.forEach(t),Cmr=i(IL),Nd=n(IL,"P",{});var gne=s(Nd);wmr=r(gne,`Note:
Loading a model from its configuration file does `),Xve=n(gne,"STRONG",{});var Zkt=s(Xve);Amr=r(Zkt,"not"),Zkt.forEach(t),Lmr=r(gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(gne,"A",{href:!0});var eSt=s(fH);ymr=r(eSt,"from_pretrained()"),eSt.forEach(t),xmr=r(gne," to load the model weights."),gne.forEach(t),$mr=i(IL),T(n6.$$.fragment,IL),IL.forEach(t),kmr=i(wl),io=n(wl,"DIV",{class:!0});var wa=s(io);T(W9.$$.fragment,wa),Smr=i(wa),zve=n(wa,"P",{});var oSt=s(zve);Rmr=r(oSt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),oSt.forEach(t),Pmr=i(wa),en=n(wa,"P",{});var NL=s(en);Bmr=r(NL,"The model class to instantiate is selected based on the "),Wve=n(NL,"CODE",{});var rSt=s(Wve);Imr=r(rSt,"model_type"),rSt.forEach(t),Nmr=r(NL,` property of the config object (either
passed as an argument or loaded from `),Qve=n(NL,"CODE",{});var tSt=s(Qve);qmr=r(tSt,"pretrained_model_name_or_path"),tSt.forEach(t),jmr=r(NL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=n(NL,"CODE",{});var aSt=s(Uve);Dmr=r(aSt,"pretrained_model_name_or_path"),aSt.forEach(t),Gmr=r(NL,":"),NL.forEach(t),Omr=i(wa),be=n(wa,"UL",{});var Fe=s(be);s6=n(Fe,"LI",{});var ADe=s(s6);Hve=n(ADe,"STRONG",{});var nSt=s(Hve);Vmr=r(nSt,"beit"),nSt.forEach(t),Xmr=r(ADe," \u2014 "),mH=n(ADe,"A",{href:!0});var sSt=s(mH);zmr=r(sSt,"BeitForImageClassification"),sSt.forEach(t),Wmr=r(ADe," (BEiT model)"),ADe.forEach(t),Qmr=i(Fe),l6=n(Fe,"LI",{});var LDe=s(l6);Jve=n(LDe,"STRONG",{});var lSt=s(Jve);Umr=r(lSt,"convnext"),lSt.forEach(t),Hmr=r(LDe," \u2014 "),gH=n(LDe,"A",{href:!0});var iSt=s(gH);Jmr=r(iSt,"ConvNextForImageClassification"),iSt.forEach(t),Ymr=r(LDe," (ConvNeXT model)"),LDe.forEach(t),Kmr=i(Fe),i6=n(Fe,"LI",{});var yDe=s(i6);Yve=n(yDe,"STRONG",{});var dSt=s(Yve);Zmr=r(dSt,"cvt"),dSt.forEach(t),egr=r(yDe," \u2014 "),hH=n(yDe,"A",{href:!0});var cSt=s(hH);ogr=r(cSt,"CvtForImageClassification"),cSt.forEach(t),rgr=r(yDe," (CvT model)"),yDe.forEach(t),tgr=i(Fe),d6=n(Fe,"LI",{});var xDe=s(d6);Kve=n(xDe,"STRONG",{});var fSt=s(Kve);agr=r(fSt,"data2vec-vision"),fSt.forEach(t),ngr=r(xDe," \u2014 "),pH=n(xDe,"A",{href:!0});var mSt=s(pH);sgr=r(mSt,"Data2VecVisionForImageClassification"),mSt.forEach(t),lgr=r(xDe," (Data2VecVision model)"),xDe.forEach(t),igr=i(Fe),sl=n(Fe,"LI",{});var oP=s(sl);Zve=n(oP,"STRONG",{});var gSt=s(Zve);dgr=r(gSt,"deit"),gSt.forEach(t),cgr=r(oP," \u2014 "),_H=n(oP,"A",{href:!0});var hSt=s(_H);fgr=r(hSt,"DeiTForImageClassification"),hSt.forEach(t),mgr=r(oP," or "),uH=n(oP,"A",{href:!0});var pSt=s(uH);ggr=r(pSt,"DeiTForImageClassificationWithTeacher"),pSt.forEach(t),hgr=r(oP," (DeiT model)"),oP.forEach(t),pgr=i(Fe),c6=n(Fe,"LI",{});var $De=s(c6);e3e=n($De,"STRONG",{});var _St=s(e3e);_gr=r(_St,"imagegpt"),_St.forEach(t),ugr=r($De," \u2014 "),bH=n($De,"A",{href:!0});var uSt=s(bH);bgr=r(uSt,"ImageGPTForImageClassification"),uSt.forEach(t),vgr=r($De," (ImageGPT model)"),$De.forEach(t),Fgr=i(Fe),ll=n(Fe,"LI",{});var rP=s(ll);o3e=n(rP,"STRONG",{});var bSt=s(o3e);Tgr=r(bSt,"levit"),bSt.forEach(t),Mgr=r(rP," \u2014 "),vH=n(rP,"A",{href:!0});var vSt=s(vH);Egr=r(vSt,"LevitForImageClassification"),vSt.forEach(t),Cgr=r(rP," or "),FH=n(rP,"A",{href:!0});var FSt=s(FH);wgr=r(FSt,"LevitForImageClassificationWithTeacher"),FSt.forEach(t),Agr=r(rP," (LeViT model)"),rP.forEach(t),Lgr=i(Fe),f6=n(Fe,"LI",{});var kDe=s(f6);r3e=n(kDe,"STRONG",{});var TSt=s(r3e);ygr=r(TSt,"mobilevit"),TSt.forEach(t),xgr=r(kDe," \u2014 "),TH=n(kDe,"A",{href:!0});var MSt=s(TH);$gr=r(MSt,"MobileViTForImageClassification"),MSt.forEach(t),kgr=r(kDe," (MobileViT model)"),kDe.forEach(t),Sgr=i(Fe),Ct=n(Fe,"LI",{});var Zf=s(Ct);t3e=n(Zf,"STRONG",{});var ESt=s(t3e);Rgr=r(ESt,"perceiver"),ESt.forEach(t),Pgr=r(Zf," \u2014 "),MH=n(Zf,"A",{href:!0});var CSt=s(MH);Bgr=r(CSt,"PerceiverForImageClassificationLearned"),CSt.forEach(t),Igr=r(Zf," or "),EH=n(Zf,"A",{href:!0});var wSt=s(EH);Ngr=r(wSt,"PerceiverForImageClassificationFourier"),wSt.forEach(t),qgr=r(Zf," or "),CH=n(Zf,"A",{href:!0});var ASt=s(CH);jgr=r(ASt,"PerceiverForImageClassificationConvProcessing"),ASt.forEach(t),Dgr=r(Zf," (Perceiver model)"),Zf.forEach(t),Ggr=i(Fe),m6=n(Fe,"LI",{});var SDe=s(m6);a3e=n(SDe,"STRONG",{});var LSt=s(a3e);Ogr=r(LSt,"poolformer"),LSt.forEach(t),Vgr=r(SDe," \u2014 "),wH=n(SDe,"A",{href:!0});var ySt=s(wH);Xgr=r(ySt,"PoolFormerForImageClassification"),ySt.forEach(t),zgr=r(SDe," (PoolFormer model)"),SDe.forEach(t),Wgr=i(Fe),g6=n(Fe,"LI",{});var RDe=s(g6);n3e=n(RDe,"STRONG",{});var xSt=s(n3e);Qgr=r(xSt,"regnet"),xSt.forEach(t),Ugr=r(RDe," \u2014 "),AH=n(RDe,"A",{href:!0});var $St=s(AH);Hgr=r($St,"RegNetForImageClassification"),$St.forEach(t),Jgr=r(RDe," (RegNet model)"),RDe.forEach(t),Ygr=i(Fe),h6=n(Fe,"LI",{});var PDe=s(h6);s3e=n(PDe,"STRONG",{});var kSt=s(s3e);Kgr=r(kSt,"resnet"),kSt.forEach(t),Zgr=r(PDe," \u2014 "),LH=n(PDe,"A",{href:!0});var SSt=s(LH);ehr=r(SSt,"ResNetForImageClassification"),SSt.forEach(t),ohr=r(PDe," (ResNet model)"),PDe.forEach(t),rhr=i(Fe),p6=n(Fe,"LI",{});var BDe=s(p6);l3e=n(BDe,"STRONG",{});var RSt=s(l3e);thr=r(RSt,"segformer"),RSt.forEach(t),ahr=r(BDe," \u2014 "),yH=n(BDe,"A",{href:!0});var PSt=s(yH);nhr=r(PSt,"SegformerForImageClassification"),PSt.forEach(t),shr=r(BDe," (SegFormer model)"),BDe.forEach(t),lhr=i(Fe),_6=n(Fe,"LI",{});var IDe=s(_6);i3e=n(IDe,"STRONG",{});var BSt=s(i3e);ihr=r(BSt,"swin"),BSt.forEach(t),dhr=r(IDe," \u2014 "),xH=n(IDe,"A",{href:!0});var ISt=s(xH);chr=r(ISt,"SwinForImageClassification"),ISt.forEach(t),fhr=r(IDe," (Swin Transformer model)"),IDe.forEach(t),mhr=i(Fe),u6=n(Fe,"LI",{});var NDe=s(u6);d3e=n(NDe,"STRONG",{});var NSt=s(d3e);ghr=r(NSt,"swinv2"),NSt.forEach(t),hhr=r(NDe," \u2014 "),$H=n(NDe,"A",{href:!0});var qSt=s($H);phr=r(qSt,"Swinv2ForImageClassification"),qSt.forEach(t),_hr=r(NDe," (Swin Transformer V2 model)"),NDe.forEach(t),uhr=i(Fe),b6=n(Fe,"LI",{});var qDe=s(b6);c3e=n(qDe,"STRONG",{});var jSt=s(c3e);bhr=r(jSt,"van"),jSt.forEach(t),vhr=r(qDe," \u2014 "),kH=n(qDe,"A",{href:!0});var DSt=s(kH);Fhr=r(DSt,"VanForImageClassification"),DSt.forEach(t),Thr=r(qDe," (VAN model)"),qDe.forEach(t),Mhr=i(Fe),v6=n(Fe,"LI",{});var jDe=s(v6);f3e=n(jDe,"STRONG",{});var GSt=s(f3e);Ehr=r(GSt,"vit"),GSt.forEach(t),Chr=r(jDe," \u2014 "),SH=n(jDe,"A",{href:!0});var OSt=s(SH);whr=r(OSt,"ViTForImageClassification"),OSt.forEach(t),Ahr=r(jDe," (ViT model)"),jDe.forEach(t),Fe.forEach(t),Lhr=i(wa),F6=n(wa,"P",{});var DDe=s(F6);yhr=r(DDe,"The model is set in evaluation mode by default using "),m3e=n(DDe,"CODE",{});var VSt=s(m3e);xhr=r(VSt,"model.eval()"),VSt.forEach(t),$hr=r(DDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g3e=n(DDe,"CODE",{});var XSt=s(g3e);khr=r(XSt,"model.train()"),XSt.forEach(t),DDe.forEach(t),Shr=i(wa),T(T6.$$.fragment,wa),wa.forEach(t),wl.forEach(t),kUe=i(f),qd=n(f,"H2",{class:!0});var GJe=s(qd);M6=n(GJe,"A",{id:!0,class:!0,href:!0});var zSt=s(M6);h3e=n(zSt,"SPAN",{});var WSt=s(h3e);T(Q9.$$.fragment,WSt),WSt.forEach(t),zSt.forEach(t),Rhr=i(GJe),p3e=n(GJe,"SPAN",{});var QSt=s(p3e);Phr=r(QSt,"AutoModelForVideoClassification"),QSt.forEach(t),GJe.forEach(t),SUe=i(f),zo=n(f,"DIV",{class:!0});var Al=s(zo);T(U9.$$.fragment,Al),Bhr=i(Al),jd=n(Al,"P",{});var hne=s(jd);Ihr=r(hne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),RH=n(hne,"A",{href:!0});var USt=s(RH);Nhr=r(USt,"from_pretrained()"),USt.forEach(t),qhr=r(hne," class method or the "),PH=n(hne,"A",{href:!0});var HSt=s(PH);jhr=r(HSt,"from_config()"),HSt.forEach(t),Dhr=r(hne,` class
method.`),hne.forEach(t),Ghr=i(Al),H9=n(Al,"P",{});var OJe=s(H9);Ohr=r(OJe,"This class cannot be instantiated directly using "),_3e=n(OJe,"CODE",{});var JSt=s(_3e);Vhr=r(JSt,"__init__()"),JSt.forEach(t),Xhr=r(OJe," (throws an error)."),OJe.forEach(t),zhr=i(Al),wt=n(Al,"DIV",{class:!0});var qL=s(wt);T(J9.$$.fragment,qL),Whr=i(qL),u3e=n(qL,"P",{});var YSt=s(u3e);Qhr=r(YSt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),YSt.forEach(t),Uhr=i(qL),Dd=n(qL,"P",{});var pne=s(Dd);Hhr=r(pne,`Note:
Loading a model from its configuration file does `),b3e=n(pne,"STRONG",{});var KSt=s(b3e);Jhr=r(KSt,"not"),KSt.forEach(t),Yhr=r(pne,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(pne,"A",{href:!0});var ZSt=s(BH);Khr=r(ZSt,"from_pretrained()"),ZSt.forEach(t),Zhr=r(pne," to load the model weights."),pne.forEach(t),epr=i(qL),T(E6.$$.fragment,qL),qL.forEach(t),opr=i(Al),co=n(Al,"DIV",{class:!0});var Aa=s(co);T(Y9.$$.fragment,Aa),rpr=i(Aa),v3e=n(Aa,"P",{});var eRt=s(v3e);tpr=r(eRt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),eRt.forEach(t),apr=i(Aa),on=n(Aa,"P",{});var jL=s(on);npr=r(jL,"The model class to instantiate is selected based on the "),F3e=n(jL,"CODE",{});var oRt=s(F3e);spr=r(oRt,"model_type"),oRt.forEach(t),lpr=r(jL,` property of the config object (either
passed as an argument or loaded from `),T3e=n(jL,"CODE",{});var rRt=s(T3e);ipr=r(rRt,"pretrained_model_name_or_path"),rRt.forEach(t),dpr=r(jL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M3e=n(jL,"CODE",{});var tRt=s(M3e);cpr=r(tRt,"pretrained_model_name_or_path"),tRt.forEach(t),fpr=r(jL,":"),jL.forEach(t),mpr=i(Aa),E3e=n(Aa,"UL",{});var aRt=s(E3e);C6=n(aRt,"LI",{});var GDe=s(C6);C3e=n(GDe,"STRONG",{});var nRt=s(C3e);gpr=r(nRt,"videomae"),nRt.forEach(t),hpr=r(GDe," \u2014 "),IH=n(GDe,"A",{href:!0});var sRt=s(IH);ppr=r(sRt,"VideoMAEForVideoClassification"),sRt.forEach(t),_pr=r(GDe," (VideoMAE model)"),GDe.forEach(t),aRt.forEach(t),upr=i(Aa),w6=n(Aa,"P",{});var ODe=s(w6);bpr=r(ODe,"The model is set in evaluation mode by default using "),w3e=n(ODe,"CODE",{});var lRt=s(w3e);vpr=r(lRt,"model.eval()"),lRt.forEach(t),Fpr=r(ODe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A3e=n(ODe,"CODE",{});var iRt=s(A3e);Tpr=r(iRt,"model.train()"),iRt.forEach(t),ODe.forEach(t),Mpr=i(Aa),T(A6.$$.fragment,Aa),Aa.forEach(t),Al.forEach(t),RUe=i(f),Gd=n(f,"H2",{class:!0});var VJe=s(Gd);L6=n(VJe,"A",{id:!0,class:!0,href:!0});var dRt=s(L6);L3e=n(dRt,"SPAN",{});var cRt=s(L3e);T(K9.$$.fragment,cRt),cRt.forEach(t),dRt.forEach(t),Epr=i(VJe),y3e=n(VJe,"SPAN",{});var fRt=s(y3e);Cpr=r(fRt,"AutoModelForVision2Seq"),fRt.forEach(t),VJe.forEach(t),PUe=i(f),Wo=n(f,"DIV",{class:!0});var Ll=s(Wo);T(Z9.$$.fragment,Ll),wpr=i(Ll),Od=n(Ll,"P",{});var _ne=s(Od);Apr=r(_ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NH=n(_ne,"A",{href:!0});var mRt=s(NH);Lpr=r(mRt,"from_pretrained()"),mRt.forEach(t),ypr=r(_ne," class method or the "),qH=n(_ne,"A",{href:!0});var gRt=s(qH);xpr=r(gRt,"from_config()"),gRt.forEach(t),$pr=r(_ne,` class
method.`),_ne.forEach(t),kpr=i(Ll),ex=n(Ll,"P",{});var XJe=s(ex);Spr=r(XJe,"This class cannot be instantiated directly using "),x3e=n(XJe,"CODE",{});var hRt=s(x3e);Rpr=r(hRt,"__init__()"),hRt.forEach(t),Ppr=r(XJe," (throws an error)."),XJe.forEach(t),Bpr=i(Ll),At=n(Ll,"DIV",{class:!0});var DL=s(At);T(ox.$$.fragment,DL),Ipr=i(DL),$3e=n(DL,"P",{});var pRt=s($3e);Npr=r(pRt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pRt.forEach(t),qpr=i(DL),Vd=n(DL,"P",{});var une=s(Vd);jpr=r(une,`Note:
Loading a model from its configuration file does `),k3e=n(une,"STRONG",{});var _Rt=s(k3e);Dpr=r(_Rt,"not"),_Rt.forEach(t),Gpr=r(une,` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=n(une,"A",{href:!0});var uRt=s(jH);Opr=r(uRt,"from_pretrained()"),uRt.forEach(t),Vpr=r(une," to load the model weights."),une.forEach(t),Xpr=i(DL),T(y6.$$.fragment,DL),DL.forEach(t),zpr=i(Ll),fo=n(Ll,"DIV",{class:!0});var La=s(fo);T(rx.$$.fragment,La),Wpr=i(La),S3e=n(La,"P",{});var bRt=s(S3e);Qpr=r(bRt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),bRt.forEach(t),Upr=i(La),rn=n(La,"P",{});var GL=s(rn);Hpr=r(GL,"The model class to instantiate is selected based on the "),R3e=n(GL,"CODE",{});var vRt=s(R3e);Jpr=r(vRt,"model_type"),vRt.forEach(t),Ypr=r(GL,` property of the config object (either
passed as an argument or loaded from `),P3e=n(GL,"CODE",{});var FRt=s(P3e);Kpr=r(FRt,"pretrained_model_name_or_path"),FRt.forEach(t),Zpr=r(GL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=n(GL,"CODE",{});var TRt=s(B3e);e_r=r(TRt,"pretrained_model_name_or_path"),TRt.forEach(t),o_r=r(GL,":"),GL.forEach(t),r_r=i(La),I3e=n(La,"UL",{});var MRt=s(I3e);x6=n(MRt,"LI",{});var VDe=s(x6);N3e=n(VDe,"STRONG",{});var ERt=s(N3e);t_r=r(ERt,"vision-encoder-decoder"),ERt.forEach(t),a_r=r(VDe," \u2014 "),DH=n(VDe,"A",{href:!0});var CRt=s(DH);n_r=r(CRt,"VisionEncoderDecoderModel"),CRt.forEach(t),s_r=r(VDe," (Vision Encoder decoder model)"),VDe.forEach(t),MRt.forEach(t),l_r=i(La),$6=n(La,"P",{});var XDe=s($6);i_r=r(XDe,"The model is set in evaluation mode by default using "),q3e=n(XDe,"CODE",{});var wRt=s(q3e);d_r=r(wRt,"model.eval()"),wRt.forEach(t),c_r=r(XDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j3e=n(XDe,"CODE",{});var ARt=s(j3e);f_r=r(ARt,"model.train()"),ARt.forEach(t),XDe.forEach(t),m_r=i(La),T(k6.$$.fragment,La),La.forEach(t),Ll.forEach(t),BUe=i(f),Xd=n(f,"H2",{class:!0});var zJe=s(Xd);S6=n(zJe,"A",{id:!0,class:!0,href:!0});var LRt=s(S6);D3e=n(LRt,"SPAN",{});var yRt=s(D3e);T(tx.$$.fragment,yRt),yRt.forEach(t),LRt.forEach(t),g_r=i(zJe),G3e=n(zJe,"SPAN",{});var xRt=s(G3e);h_r=r(xRt,"AutoModelForVisualQuestionAnswering"),xRt.forEach(t),zJe.forEach(t),IUe=i(f),Qo=n(f,"DIV",{class:!0});var yl=s(Qo);T(ax.$$.fragment,yl),p_r=i(yl),zd=n(yl,"P",{});var bne=s(zd);__r=r(bne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),GH=n(bne,"A",{href:!0});var $Rt=s(GH);u_r=r($Rt,"from_pretrained()"),$Rt.forEach(t),b_r=r(bne," class method or the "),OH=n(bne,"A",{href:!0});var kRt=s(OH);v_r=r(kRt,"from_config()"),kRt.forEach(t),F_r=r(bne,` class
method.`),bne.forEach(t),T_r=i(yl),nx=n(yl,"P",{});var WJe=s(nx);M_r=r(WJe,"This class cannot be instantiated directly using "),O3e=n(WJe,"CODE",{});var SRt=s(O3e);E_r=r(SRt,"__init__()"),SRt.forEach(t),C_r=r(WJe," (throws an error)."),WJe.forEach(t),w_r=i(yl),Lt=n(yl,"DIV",{class:!0});var OL=s(Lt);T(sx.$$.fragment,OL),A_r=i(OL),V3e=n(OL,"P",{});var RRt=s(V3e);L_r=r(RRt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),RRt.forEach(t),y_r=i(OL),Wd=n(OL,"P",{});var vne=s(Wd);x_r=r(vne,`Note:
Loading a model from its configuration file does `),X3e=n(vne,"STRONG",{});var PRt=s(X3e);$_r=r(PRt,"not"),PRt.forEach(t),k_r=r(vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=n(vne,"A",{href:!0});var BRt=s(VH);S_r=r(BRt,"from_pretrained()"),BRt.forEach(t),R_r=r(vne," to load the model weights."),vne.forEach(t),P_r=i(OL),T(R6.$$.fragment,OL),OL.forEach(t),B_r=i(yl),mo=n(yl,"DIV",{class:!0});var ya=s(mo);T(lx.$$.fragment,ya),I_r=i(ya),z3e=n(ya,"P",{});var IRt=s(z3e);N_r=r(IRt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),IRt.forEach(t),q_r=i(ya),tn=n(ya,"P",{});var VL=s(tn);j_r=r(VL,"The model class to instantiate is selected based on the "),W3e=n(VL,"CODE",{});var NRt=s(W3e);D_r=r(NRt,"model_type"),NRt.forEach(t),G_r=r(VL,` property of the config object (either
passed as an argument or loaded from `),Q3e=n(VL,"CODE",{});var qRt=s(Q3e);O_r=r(qRt,"pretrained_model_name_or_path"),qRt.forEach(t),V_r=r(VL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U3e=n(VL,"CODE",{});var jRt=s(U3e);X_r=r(jRt,"pretrained_model_name_or_path"),jRt.forEach(t),z_r=r(VL,":"),VL.forEach(t),W_r=i(ya),H3e=n(ya,"UL",{});var DRt=s(H3e);P6=n(DRt,"LI",{});var zDe=s(P6);J3e=n(zDe,"STRONG",{});var GRt=s(J3e);Q_r=r(GRt,"vilt"),GRt.forEach(t),U_r=r(zDe," \u2014 "),XH=n(zDe,"A",{href:!0});var ORt=s(XH);H_r=r(ORt,"ViltForQuestionAnswering"),ORt.forEach(t),J_r=r(zDe," (ViLT model)"),zDe.forEach(t),DRt.forEach(t),Y_r=i(ya),B6=n(ya,"P",{});var WDe=s(B6);K_r=r(WDe,"The model is set in evaluation mode by default using "),Y3e=n(WDe,"CODE",{});var VRt=s(Y3e);Z_r=r(VRt,"model.eval()"),VRt.forEach(t),eur=r(WDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K3e=n(WDe,"CODE",{});var XRt=s(K3e);our=r(XRt,"model.train()"),XRt.forEach(t),WDe.forEach(t),rur=i(ya),T(I6.$$.fragment,ya),ya.forEach(t),yl.forEach(t),NUe=i(f),Qd=n(f,"H2",{class:!0});var QJe=s(Qd);N6=n(QJe,"A",{id:!0,class:!0,href:!0});var zRt=s(N6);Z3e=n(zRt,"SPAN",{});var WRt=s(Z3e);T(ix.$$.fragment,WRt),WRt.forEach(t),zRt.forEach(t),tur=i(QJe),e5e=n(QJe,"SPAN",{});var QRt=s(e5e);aur=r(QRt,"AutoModelForAudioClassification"),QRt.forEach(t),QJe.forEach(t),qUe=i(f),Uo=n(f,"DIV",{class:!0});var xl=s(Uo);T(dx.$$.fragment,xl),nur=i(xl),Ud=n(xl,"P",{});var Fne=s(Ud);sur=r(Fne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),zH=n(Fne,"A",{href:!0});var URt=s(zH);lur=r(URt,"from_pretrained()"),URt.forEach(t),iur=r(Fne," class method or the "),WH=n(Fne,"A",{href:!0});var HRt=s(WH);dur=r(HRt,"from_config()"),HRt.forEach(t),cur=r(Fne,` class
method.`),Fne.forEach(t),fur=i(xl),cx=n(xl,"P",{});var UJe=s(cx);mur=r(UJe,"This class cannot be instantiated directly using "),o5e=n(UJe,"CODE",{});var JRt=s(o5e);gur=r(JRt,"__init__()"),JRt.forEach(t),hur=r(UJe," (throws an error)."),UJe.forEach(t),pur=i(xl),yt=n(xl,"DIV",{class:!0});var XL=s(yt);T(fx.$$.fragment,XL),_ur=i(XL),r5e=n(XL,"P",{});var YRt=s(r5e);uur=r(YRt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),YRt.forEach(t),bur=i(XL),Hd=n(XL,"P",{});var Tne=s(Hd);vur=r(Tne,`Note:
Loading a model from its configuration file does `),t5e=n(Tne,"STRONG",{});var KRt=s(t5e);Fur=r(KRt,"not"),KRt.forEach(t),Tur=r(Tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(Tne,"A",{href:!0});var ZRt=s(QH);Mur=r(ZRt,"from_pretrained()"),ZRt.forEach(t),Eur=r(Tne," to load the model weights."),Tne.forEach(t),Cur=i(XL),T(q6.$$.fragment,XL),XL.forEach(t),wur=i(xl),go=n(xl,"DIV",{class:!0});var xa=s(go);T(mx.$$.fragment,xa),Aur=i(xa),a5e=n(xa,"P",{});var ePt=s(a5e);Lur=r(ePt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ePt.forEach(t),yur=i(xa),an=n(xa,"P",{});var zL=s(an);xur=r(zL,"The model class to instantiate is selected based on the "),n5e=n(zL,"CODE",{});var oPt=s(n5e);$ur=r(oPt,"model_type"),oPt.forEach(t),kur=r(zL,` property of the config object (either
passed as an argument or loaded from `),s5e=n(zL,"CODE",{});var rPt=s(s5e);Sur=r(rPt,"pretrained_model_name_or_path"),rPt.forEach(t),Rur=r(zL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l5e=n(zL,"CODE",{});var tPt=s(l5e);Pur=r(tPt,"pretrained_model_name_or_path"),tPt.forEach(t),Bur=r(zL,":"),zL.forEach(t),Iur=i(xa),Pe=n(xa,"UL",{});var We=s(Pe);j6=n(We,"LI",{});var QDe=s(j6);i5e=n(QDe,"STRONG",{});var aPt=s(i5e);Nur=r(aPt,"data2vec-audio"),aPt.forEach(t),qur=r(QDe," \u2014 "),UH=n(QDe,"A",{href:!0});var nPt=s(UH);jur=r(nPt,"Data2VecAudioForSequenceClassification"),nPt.forEach(t),Dur=r(QDe," (Data2VecAudio model)"),QDe.forEach(t),Gur=i(We),D6=n(We,"LI",{});var UDe=s(D6);d5e=n(UDe,"STRONG",{});var sPt=s(d5e);Our=r(sPt,"hubert"),sPt.forEach(t),Vur=r(UDe," \u2014 "),HH=n(UDe,"A",{href:!0});var lPt=s(HH);Xur=r(lPt,"HubertForSequenceClassification"),lPt.forEach(t),zur=r(UDe," (Hubert model)"),UDe.forEach(t),Wur=i(We),G6=n(We,"LI",{});var HDe=s(G6);c5e=n(HDe,"STRONG",{});var iPt=s(c5e);Qur=r(iPt,"sew"),iPt.forEach(t),Uur=r(HDe," \u2014 "),JH=n(HDe,"A",{href:!0});var dPt=s(JH);Hur=r(dPt,"SEWForSequenceClassification"),dPt.forEach(t),Jur=r(HDe," (SEW model)"),HDe.forEach(t),Yur=i(We),O6=n(We,"LI",{});var JDe=s(O6);f5e=n(JDe,"STRONG",{});var cPt=s(f5e);Kur=r(cPt,"sew-d"),cPt.forEach(t),Zur=r(JDe," \u2014 "),YH=n(JDe,"A",{href:!0});var fPt=s(YH);e1r=r(fPt,"SEWDForSequenceClassification"),fPt.forEach(t),o1r=r(JDe," (SEW-D model)"),JDe.forEach(t),r1r=i(We),V6=n(We,"LI",{});var YDe=s(V6);m5e=n(YDe,"STRONG",{});var mPt=s(m5e);t1r=r(mPt,"unispeech"),mPt.forEach(t),a1r=r(YDe," \u2014 "),KH=n(YDe,"A",{href:!0});var gPt=s(KH);n1r=r(gPt,"UniSpeechForSequenceClassification"),gPt.forEach(t),s1r=r(YDe," (UniSpeech model)"),YDe.forEach(t),l1r=i(We),X6=n(We,"LI",{});var KDe=s(X6);g5e=n(KDe,"STRONG",{});var hPt=s(g5e);i1r=r(hPt,"unispeech-sat"),hPt.forEach(t),d1r=r(KDe," \u2014 "),ZH=n(KDe,"A",{href:!0});var pPt=s(ZH);c1r=r(pPt,"UniSpeechSatForSequenceClassification"),pPt.forEach(t),f1r=r(KDe," (UniSpeechSat model)"),KDe.forEach(t),m1r=i(We),z6=n(We,"LI",{});var ZDe=s(z6);h5e=n(ZDe,"STRONG",{});var _Pt=s(h5e);g1r=r(_Pt,"wav2vec2"),_Pt.forEach(t),h1r=r(ZDe," \u2014 "),eJ=n(ZDe,"A",{href:!0});var uPt=s(eJ);p1r=r(uPt,"Wav2Vec2ForSequenceClassification"),uPt.forEach(t),_1r=r(ZDe," (Wav2Vec2 model)"),ZDe.forEach(t),u1r=i(We),W6=n(We,"LI",{});var eGe=s(W6);p5e=n(eGe,"STRONG",{});var bPt=s(p5e);b1r=r(bPt,"wav2vec2-conformer"),bPt.forEach(t),v1r=r(eGe," \u2014 "),oJ=n(eGe,"A",{href:!0});var vPt=s(oJ);F1r=r(vPt,"Wav2Vec2ConformerForSequenceClassification"),vPt.forEach(t),T1r=r(eGe," (Wav2Vec2-Conformer model)"),eGe.forEach(t),M1r=i(We),Q6=n(We,"LI",{});var oGe=s(Q6);_5e=n(oGe,"STRONG",{});var FPt=s(_5e);E1r=r(FPt,"wavlm"),FPt.forEach(t),C1r=r(oGe," \u2014 "),rJ=n(oGe,"A",{href:!0});var TPt=s(rJ);w1r=r(TPt,"WavLMForSequenceClassification"),TPt.forEach(t),A1r=r(oGe," (WavLM model)"),oGe.forEach(t),We.forEach(t),L1r=i(xa),U6=n(xa,"P",{});var rGe=s(U6);y1r=r(rGe,"The model is set in evaluation mode by default using "),u5e=n(rGe,"CODE",{});var MPt=s(u5e);x1r=r(MPt,"model.eval()"),MPt.forEach(t),$1r=r(rGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b5e=n(rGe,"CODE",{});var EPt=s(b5e);k1r=r(EPt,"model.train()"),EPt.forEach(t),rGe.forEach(t),S1r=i(xa),T(H6.$$.fragment,xa),xa.forEach(t),xl.forEach(t),jUe=i(f),Jd=n(f,"H2",{class:!0});var HJe=s(Jd);J6=n(HJe,"A",{id:!0,class:!0,href:!0});var CPt=s(J6);v5e=n(CPt,"SPAN",{});var wPt=s(v5e);T(gx.$$.fragment,wPt),wPt.forEach(t),CPt.forEach(t),R1r=i(HJe),F5e=n(HJe,"SPAN",{});var APt=s(F5e);P1r=r(APt,"AutoModelForAudioFrameClassification"),APt.forEach(t),HJe.forEach(t),DUe=i(f),Ho=n(f,"DIV",{class:!0});var $l=s(Ho);T(hx.$$.fragment,$l),B1r=i($l),Yd=n($l,"P",{});var Mne=s(Yd);I1r=r(Mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),tJ=n(Mne,"A",{href:!0});var LPt=s(tJ);N1r=r(LPt,"from_pretrained()"),LPt.forEach(t),q1r=r(Mne," class method or the "),aJ=n(Mne,"A",{href:!0});var yPt=s(aJ);j1r=r(yPt,"from_config()"),yPt.forEach(t),D1r=r(Mne,` class
method.`),Mne.forEach(t),G1r=i($l),px=n($l,"P",{});var JJe=s(px);O1r=r(JJe,"This class cannot be instantiated directly using "),T5e=n(JJe,"CODE",{});var xPt=s(T5e);V1r=r(xPt,"__init__()"),xPt.forEach(t),X1r=r(JJe," (throws an error)."),JJe.forEach(t),z1r=i($l),xt=n($l,"DIV",{class:!0});var WL=s(xt);T(_x.$$.fragment,WL),W1r=i(WL),M5e=n(WL,"P",{});var $Pt=s(M5e);Q1r=r($Pt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),$Pt.forEach(t),U1r=i(WL),Kd=n(WL,"P",{});var Ene=s(Kd);H1r=r(Ene,`Note:
Loading a model from its configuration file does `),E5e=n(Ene,"STRONG",{});var kPt=s(E5e);J1r=r(kPt,"not"),kPt.forEach(t),Y1r=r(Ene,` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=n(Ene,"A",{href:!0});var SPt=s(nJ);K1r=r(SPt,"from_pretrained()"),SPt.forEach(t),Z1r=r(Ene," to load the model weights."),Ene.forEach(t),e4r=i(WL),T(Y6.$$.fragment,WL),WL.forEach(t),o4r=i($l),ho=n($l,"DIV",{class:!0});var $a=s(ho);T(ux.$$.fragment,$a),r4r=i($a),C5e=n($a,"P",{});var RPt=s(C5e);t4r=r(RPt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),RPt.forEach(t),a4r=i($a),nn=n($a,"P",{});var QL=s(nn);n4r=r(QL,"The model class to instantiate is selected based on the "),w5e=n(QL,"CODE",{});var PPt=s(w5e);s4r=r(PPt,"model_type"),PPt.forEach(t),l4r=r(QL,` property of the config object (either
passed as an argument or loaded from `),A5e=n(QL,"CODE",{});var BPt=s(A5e);i4r=r(BPt,"pretrained_model_name_or_path"),BPt.forEach(t),d4r=r(QL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L5e=n(QL,"CODE",{});var IPt=s(L5e);c4r=r(IPt,"pretrained_model_name_or_path"),IPt.forEach(t),f4r=r(QL,":"),QL.forEach(t),m4r=i($a),st=n($a,"UL",{});var kl=s(st);K6=n(kl,"LI",{});var tGe=s(K6);y5e=n(tGe,"STRONG",{});var NPt=s(y5e);g4r=r(NPt,"data2vec-audio"),NPt.forEach(t),h4r=r(tGe," \u2014 "),sJ=n(tGe,"A",{href:!0});var qPt=s(sJ);p4r=r(qPt,"Data2VecAudioForAudioFrameClassification"),qPt.forEach(t),_4r=r(tGe," (Data2VecAudio model)"),tGe.forEach(t),u4r=i(kl),Z6=n(kl,"LI",{});var aGe=s(Z6);x5e=n(aGe,"STRONG",{});var jPt=s(x5e);b4r=r(jPt,"unispeech-sat"),jPt.forEach(t),v4r=r(aGe," \u2014 "),lJ=n(aGe,"A",{href:!0});var DPt=s(lJ);F4r=r(DPt,"UniSpeechSatForAudioFrameClassification"),DPt.forEach(t),T4r=r(aGe," (UniSpeechSat model)"),aGe.forEach(t),M4r=i(kl),eF=n(kl,"LI",{});var nGe=s(eF);$5e=n(nGe,"STRONG",{});var GPt=s($5e);E4r=r(GPt,"wav2vec2"),GPt.forEach(t),C4r=r(nGe," \u2014 "),iJ=n(nGe,"A",{href:!0});var OPt=s(iJ);w4r=r(OPt,"Wav2Vec2ForAudioFrameClassification"),OPt.forEach(t),A4r=r(nGe," (Wav2Vec2 model)"),nGe.forEach(t),L4r=i(kl),oF=n(kl,"LI",{});var sGe=s(oF);k5e=n(sGe,"STRONG",{});var VPt=s(k5e);y4r=r(VPt,"wav2vec2-conformer"),VPt.forEach(t),x4r=r(sGe," \u2014 "),dJ=n(sGe,"A",{href:!0});var XPt=s(dJ);$4r=r(XPt,"Wav2Vec2ConformerForAudioFrameClassification"),XPt.forEach(t),k4r=r(sGe," (Wav2Vec2-Conformer model)"),sGe.forEach(t),S4r=i(kl),rF=n(kl,"LI",{});var lGe=s(rF);S5e=n(lGe,"STRONG",{});var zPt=s(S5e);R4r=r(zPt,"wavlm"),zPt.forEach(t),P4r=r(lGe," \u2014 "),cJ=n(lGe,"A",{href:!0});var WPt=s(cJ);B4r=r(WPt,"WavLMForAudioFrameClassification"),WPt.forEach(t),I4r=r(lGe," (WavLM model)"),lGe.forEach(t),kl.forEach(t),N4r=i($a),tF=n($a,"P",{});var iGe=s(tF);q4r=r(iGe,"The model is set in evaluation mode by default using "),R5e=n(iGe,"CODE",{});var QPt=s(R5e);j4r=r(QPt,"model.eval()"),QPt.forEach(t),D4r=r(iGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P5e=n(iGe,"CODE",{});var UPt=s(P5e);G4r=r(UPt,"model.train()"),UPt.forEach(t),iGe.forEach(t),O4r=i($a),T(aF.$$.fragment,$a),$a.forEach(t),$l.forEach(t),GUe=i(f),Zd=n(f,"H2",{class:!0});var YJe=s(Zd);nF=n(YJe,"A",{id:!0,class:!0,href:!0});var HPt=s(nF);B5e=n(HPt,"SPAN",{});var JPt=s(B5e);T(bx.$$.fragment,JPt),JPt.forEach(t),HPt.forEach(t),V4r=i(YJe),I5e=n(YJe,"SPAN",{});var YPt=s(I5e);X4r=r(YPt,"AutoModelForCTC"),YPt.forEach(t),YJe.forEach(t),OUe=i(f),Jo=n(f,"DIV",{class:!0});var Sl=s(Jo);T(vx.$$.fragment,Sl),z4r=i(Sl),ec=n(Sl,"P",{});var Cne=s(ec);W4r=r(Cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),fJ=n(Cne,"A",{href:!0});var KPt=s(fJ);Q4r=r(KPt,"from_pretrained()"),KPt.forEach(t),U4r=r(Cne," class method or the "),mJ=n(Cne,"A",{href:!0});var ZPt=s(mJ);H4r=r(ZPt,"from_config()"),ZPt.forEach(t),J4r=r(Cne,` class
method.`),Cne.forEach(t),Y4r=i(Sl),Fx=n(Sl,"P",{});var KJe=s(Fx);K4r=r(KJe,"This class cannot be instantiated directly using "),N5e=n(KJe,"CODE",{});var eBt=s(N5e);Z4r=r(eBt,"__init__()"),eBt.forEach(t),e2r=r(KJe," (throws an error)."),KJe.forEach(t),o2r=i(Sl),$t=n(Sl,"DIV",{class:!0});var UL=s($t);T(Tx.$$.fragment,UL),r2r=i(UL),q5e=n(UL,"P",{});var oBt=s(q5e);t2r=r(oBt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),oBt.forEach(t),a2r=i(UL),oc=n(UL,"P",{});var wne=s(oc);n2r=r(wne,`Note:
Loading a model from its configuration file does `),j5e=n(wne,"STRONG",{});var rBt=s(j5e);s2r=r(rBt,"not"),rBt.forEach(t),l2r=r(wne,` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=n(wne,"A",{href:!0});var tBt=s(gJ);i2r=r(tBt,"from_pretrained()"),tBt.forEach(t),d2r=r(wne," to load the model weights."),wne.forEach(t),c2r=i(UL),T(sF.$$.fragment,UL),UL.forEach(t),f2r=i(Sl),po=n(Sl,"DIV",{class:!0});var ka=s(po);T(Mx.$$.fragment,ka),m2r=i(ka),D5e=n(ka,"P",{});var aBt=s(D5e);g2r=r(aBt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),aBt.forEach(t),h2r=i(ka),sn=n(ka,"P",{});var HL=s(sn);p2r=r(HL,"The model class to instantiate is selected based on the "),G5e=n(HL,"CODE",{});var nBt=s(G5e);_2r=r(nBt,"model_type"),nBt.forEach(t),u2r=r(HL,` property of the config object (either
passed as an argument or loaded from `),O5e=n(HL,"CODE",{});var sBt=s(O5e);b2r=r(sBt,"pretrained_model_name_or_path"),sBt.forEach(t),v2r=r(HL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V5e=n(HL,"CODE",{});var lBt=s(V5e);F2r=r(lBt,"pretrained_model_name_or_path"),lBt.forEach(t),T2r=r(HL,":"),HL.forEach(t),M2r=i(ka),Le=n(ka,"UL",{});var Be=s(Le);lF=n(Be,"LI",{});var dGe=s(lF);X5e=n(dGe,"STRONG",{});var iBt=s(X5e);E2r=r(iBt,"data2vec-audio"),iBt.forEach(t),C2r=r(dGe," \u2014 "),hJ=n(dGe,"A",{href:!0});var dBt=s(hJ);w2r=r(dBt,"Data2VecAudioForCTC"),dBt.forEach(t),A2r=r(dGe," (Data2VecAudio model)"),dGe.forEach(t),L2r=i(Be),iF=n(Be,"LI",{});var cGe=s(iF);z5e=n(cGe,"STRONG",{});var cBt=s(z5e);y2r=r(cBt,"hubert"),cBt.forEach(t),x2r=r(cGe," \u2014 "),pJ=n(cGe,"A",{href:!0});var fBt=s(pJ);$2r=r(fBt,"HubertForCTC"),fBt.forEach(t),k2r=r(cGe," (Hubert model)"),cGe.forEach(t),S2r=i(Be),dF=n(Be,"LI",{});var fGe=s(dF);W5e=n(fGe,"STRONG",{});var mBt=s(W5e);R2r=r(mBt,"mctct"),mBt.forEach(t),P2r=r(fGe," \u2014 "),_J=n(fGe,"A",{href:!0});var gBt=s(_J);B2r=r(gBt,"MCTCTForCTC"),gBt.forEach(t),I2r=r(fGe," (M-CTC-T model)"),fGe.forEach(t),N2r=i(Be),cF=n(Be,"LI",{});var mGe=s(cF);Q5e=n(mGe,"STRONG",{});var hBt=s(Q5e);q2r=r(hBt,"sew"),hBt.forEach(t),j2r=r(mGe," \u2014 "),uJ=n(mGe,"A",{href:!0});var pBt=s(uJ);D2r=r(pBt,"SEWForCTC"),pBt.forEach(t),G2r=r(mGe," (SEW model)"),mGe.forEach(t),O2r=i(Be),fF=n(Be,"LI",{});var gGe=s(fF);U5e=n(gGe,"STRONG",{});var _Bt=s(U5e);V2r=r(_Bt,"sew-d"),_Bt.forEach(t),X2r=r(gGe," \u2014 "),bJ=n(gGe,"A",{href:!0});var uBt=s(bJ);z2r=r(uBt,"SEWDForCTC"),uBt.forEach(t),W2r=r(gGe," (SEW-D model)"),gGe.forEach(t),Q2r=i(Be),mF=n(Be,"LI",{});var hGe=s(mF);H5e=n(hGe,"STRONG",{});var bBt=s(H5e);U2r=r(bBt,"unispeech"),bBt.forEach(t),H2r=r(hGe," \u2014 "),vJ=n(hGe,"A",{href:!0});var vBt=s(vJ);J2r=r(vBt,"UniSpeechForCTC"),vBt.forEach(t),Y2r=r(hGe," (UniSpeech model)"),hGe.forEach(t),K2r=i(Be),gF=n(Be,"LI",{});var pGe=s(gF);J5e=n(pGe,"STRONG",{});var FBt=s(J5e);Z2r=r(FBt,"unispeech-sat"),FBt.forEach(t),ebr=r(pGe," \u2014 "),FJ=n(pGe,"A",{href:!0});var TBt=s(FJ);obr=r(TBt,"UniSpeechSatForCTC"),TBt.forEach(t),rbr=r(pGe," (UniSpeechSat model)"),pGe.forEach(t),tbr=i(Be),hF=n(Be,"LI",{});var _Ge=s(hF);Y5e=n(_Ge,"STRONG",{});var MBt=s(Y5e);abr=r(MBt,"wav2vec2"),MBt.forEach(t),nbr=r(_Ge," \u2014 "),TJ=n(_Ge,"A",{href:!0});var EBt=s(TJ);sbr=r(EBt,"Wav2Vec2ForCTC"),EBt.forEach(t),lbr=r(_Ge," (Wav2Vec2 model)"),_Ge.forEach(t),ibr=i(Be),pF=n(Be,"LI",{});var uGe=s(pF);K5e=n(uGe,"STRONG",{});var CBt=s(K5e);dbr=r(CBt,"wav2vec2-conformer"),CBt.forEach(t),cbr=r(uGe," \u2014 "),MJ=n(uGe,"A",{href:!0});var wBt=s(MJ);fbr=r(wBt,"Wav2Vec2ConformerForCTC"),wBt.forEach(t),mbr=r(uGe," (Wav2Vec2-Conformer model)"),uGe.forEach(t),gbr=i(Be),_F=n(Be,"LI",{});var bGe=s(_F);Z5e=n(bGe,"STRONG",{});var ABt=s(Z5e);hbr=r(ABt,"wavlm"),ABt.forEach(t),pbr=r(bGe," \u2014 "),EJ=n(bGe,"A",{href:!0});var LBt=s(EJ);_br=r(LBt,"WavLMForCTC"),LBt.forEach(t),ubr=r(bGe," (WavLM model)"),bGe.forEach(t),Be.forEach(t),bbr=i(ka),uF=n(ka,"P",{});var vGe=s(uF);vbr=r(vGe,"The model is set in evaluation mode by default using "),e6e=n(vGe,"CODE",{});var yBt=s(e6e);Fbr=r(yBt,"model.eval()"),yBt.forEach(t),Tbr=r(vGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o6e=n(vGe,"CODE",{});var xBt=s(o6e);Mbr=r(xBt,"model.train()"),xBt.forEach(t),vGe.forEach(t),Ebr=i(ka),T(bF.$$.fragment,ka),ka.forEach(t),Sl.forEach(t),VUe=i(f),rc=n(f,"H2",{class:!0});var ZJe=s(rc);vF=n(ZJe,"A",{id:!0,class:!0,href:!0});var $Bt=s(vF);r6e=n($Bt,"SPAN",{});var kBt=s(r6e);T(Ex.$$.fragment,kBt),kBt.forEach(t),$Bt.forEach(t),Cbr=i(ZJe),t6e=n(ZJe,"SPAN",{});var SBt=s(t6e);wbr=r(SBt,"AutoModelForSpeechSeq2Seq"),SBt.forEach(t),ZJe.forEach(t),XUe=i(f),Yo=n(f,"DIV",{class:!0});var Rl=s(Yo);T(Cx.$$.fragment,Rl),Abr=i(Rl),tc=n(Rl,"P",{});var Ane=s(tc);Lbr=r(Ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),CJ=n(Ane,"A",{href:!0});var RBt=s(CJ);ybr=r(RBt,"from_pretrained()"),RBt.forEach(t),xbr=r(Ane," class method or the "),wJ=n(Ane,"A",{href:!0});var PBt=s(wJ);$br=r(PBt,"from_config()"),PBt.forEach(t),kbr=r(Ane,` class
method.`),Ane.forEach(t),Sbr=i(Rl),wx=n(Rl,"P",{});var eYe=s(wx);Rbr=r(eYe,"This class cannot be instantiated directly using "),a6e=n(eYe,"CODE",{});var BBt=s(a6e);Pbr=r(BBt,"__init__()"),BBt.forEach(t),Bbr=r(eYe," (throws an error)."),eYe.forEach(t),Ibr=i(Rl),kt=n(Rl,"DIV",{class:!0});var JL=s(kt);T(Ax.$$.fragment,JL),Nbr=i(JL),n6e=n(JL,"P",{});var IBt=s(n6e);qbr=r(IBt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),IBt.forEach(t),jbr=i(JL),ac=n(JL,"P",{});var Lne=s(ac);Dbr=r(Lne,`Note:
Loading a model from its configuration file does `),s6e=n(Lne,"STRONG",{});var NBt=s(s6e);Gbr=r(NBt,"not"),NBt.forEach(t),Obr=r(Lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),AJ=n(Lne,"A",{href:!0});var qBt=s(AJ);Vbr=r(qBt,"from_pretrained()"),qBt.forEach(t),Xbr=r(Lne," to load the model weights."),Lne.forEach(t),zbr=i(JL),T(FF.$$.fragment,JL),JL.forEach(t),Wbr=i(Rl),_o=n(Rl,"DIV",{class:!0});var Sa=s(_o);T(Lx.$$.fragment,Sa),Qbr=i(Sa),l6e=n(Sa,"P",{});var jBt=s(l6e);Ubr=r(jBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jBt.forEach(t),Hbr=i(Sa),ln=n(Sa,"P",{});var YL=s(ln);Jbr=r(YL,"The model class to instantiate is selected based on the "),i6e=n(YL,"CODE",{});var DBt=s(i6e);Ybr=r(DBt,"model_type"),DBt.forEach(t),Kbr=r(YL,` property of the config object (either
passed as an argument or loaded from `),d6e=n(YL,"CODE",{});var GBt=s(d6e);Zbr=r(GBt,"pretrained_model_name_or_path"),GBt.forEach(t),evr=r(YL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c6e=n(YL,"CODE",{});var OBt=s(c6e);ovr=r(OBt,"pretrained_model_name_or_path"),OBt.forEach(t),rvr=r(YL,":"),YL.forEach(t),tvr=i(Sa),yx=n(Sa,"UL",{});var oYe=s(yx);TF=n(oYe,"LI",{});var FGe=s(TF);f6e=n(FGe,"STRONG",{});var VBt=s(f6e);avr=r(VBt,"speech-encoder-decoder"),VBt.forEach(t),nvr=r(FGe," \u2014 "),LJ=n(FGe,"A",{href:!0});var XBt=s(LJ);svr=r(XBt,"SpeechEncoderDecoderModel"),XBt.forEach(t),lvr=r(FGe," (Speech Encoder decoder model)"),FGe.forEach(t),ivr=i(oYe),MF=n(oYe,"LI",{});var TGe=s(MF);m6e=n(TGe,"STRONG",{});var zBt=s(m6e);dvr=r(zBt,"speech_to_text"),zBt.forEach(t),cvr=r(TGe," \u2014 "),yJ=n(TGe,"A",{href:!0});var WBt=s(yJ);fvr=r(WBt,"Speech2TextForConditionalGeneration"),WBt.forEach(t),mvr=r(TGe," (Speech2Text model)"),TGe.forEach(t),oYe.forEach(t),gvr=i(Sa),EF=n(Sa,"P",{});var MGe=s(EF);hvr=r(MGe,"The model is set in evaluation mode by default using "),g6e=n(MGe,"CODE",{});var QBt=s(g6e);pvr=r(QBt,"model.eval()"),QBt.forEach(t),_vr=r(MGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h6e=n(MGe,"CODE",{});var UBt=s(h6e);uvr=r(UBt,"model.train()"),UBt.forEach(t),MGe.forEach(t),bvr=i(Sa),T(CF.$$.fragment,Sa),Sa.forEach(t),Rl.forEach(t),zUe=i(f),nc=n(f,"H2",{class:!0});var rYe=s(nc);wF=n(rYe,"A",{id:!0,class:!0,href:!0});var HBt=s(wF);p6e=n(HBt,"SPAN",{});var JBt=s(p6e);T(xx.$$.fragment,JBt),JBt.forEach(t),HBt.forEach(t),vvr=i(rYe),_6e=n(rYe,"SPAN",{});var YBt=s(_6e);Fvr=r(YBt,"AutoModelForAudioXVector"),YBt.forEach(t),rYe.forEach(t),WUe=i(f),Ko=n(f,"DIV",{class:!0});var Pl=s(Ko);T($x.$$.fragment,Pl),Tvr=i(Pl),sc=n(Pl,"P",{});var yne=s(sc);Mvr=r(yne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),xJ=n(yne,"A",{href:!0});var KBt=s(xJ);Evr=r(KBt,"from_pretrained()"),KBt.forEach(t),Cvr=r(yne," class method or the "),$J=n(yne,"A",{href:!0});var ZBt=s($J);wvr=r(ZBt,"from_config()"),ZBt.forEach(t),Avr=r(yne,` class
method.`),yne.forEach(t),Lvr=i(Pl),kx=n(Pl,"P",{});var tYe=s(kx);yvr=r(tYe,"This class cannot be instantiated directly using "),u6e=n(tYe,"CODE",{});var eIt=s(u6e);xvr=r(eIt,"__init__()"),eIt.forEach(t),$vr=r(tYe," (throws an error)."),tYe.forEach(t),kvr=i(Pl),St=n(Pl,"DIV",{class:!0});var KL=s(St);T(Sx.$$.fragment,KL),Svr=i(KL),b6e=n(KL,"P",{});var oIt=s(b6e);Rvr=r(oIt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),oIt.forEach(t),Pvr=i(KL),lc=n(KL,"P",{});var xne=s(lc);Bvr=r(xne,`Note:
Loading a model from its configuration file does `),v6e=n(xne,"STRONG",{});var rIt=s(v6e);Ivr=r(rIt,"not"),rIt.forEach(t),Nvr=r(xne,` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=n(xne,"A",{href:!0});var tIt=s(kJ);qvr=r(tIt,"from_pretrained()"),tIt.forEach(t),jvr=r(xne," to load the model weights."),xne.forEach(t),Dvr=i(KL),T(AF.$$.fragment,KL),KL.forEach(t),Gvr=i(Pl),uo=n(Pl,"DIV",{class:!0});var Ra=s(uo);T(Rx.$$.fragment,Ra),Ovr=i(Ra),F6e=n(Ra,"P",{});var aIt=s(F6e);Vvr=r(aIt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),aIt.forEach(t),Xvr=i(Ra),dn=n(Ra,"P",{});var ZL=s(dn);zvr=r(ZL,"The model class to instantiate is selected based on the "),T6e=n(ZL,"CODE",{});var nIt=s(T6e);Wvr=r(nIt,"model_type"),nIt.forEach(t),Qvr=r(ZL,` property of the config object (either
passed as an argument or loaded from `),M6e=n(ZL,"CODE",{});var sIt=s(M6e);Uvr=r(sIt,"pretrained_model_name_or_path"),sIt.forEach(t),Hvr=r(ZL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E6e=n(ZL,"CODE",{});var lIt=s(E6e);Jvr=r(lIt,"pretrained_model_name_or_path"),lIt.forEach(t),Yvr=r(ZL,":"),ZL.forEach(t),Kvr=i(Ra),lt=n(Ra,"UL",{});var Bl=s(lt);LF=n(Bl,"LI",{});var EGe=s(LF);C6e=n(EGe,"STRONG",{});var iIt=s(C6e);Zvr=r(iIt,"data2vec-audio"),iIt.forEach(t),e3r=r(EGe," \u2014 "),SJ=n(EGe,"A",{href:!0});var dIt=s(SJ);o3r=r(dIt,"Data2VecAudioForXVector"),dIt.forEach(t),r3r=r(EGe," (Data2VecAudio model)"),EGe.forEach(t),t3r=i(Bl),yF=n(Bl,"LI",{});var CGe=s(yF);w6e=n(CGe,"STRONG",{});var cIt=s(w6e);a3r=r(cIt,"unispeech-sat"),cIt.forEach(t),n3r=r(CGe," \u2014 "),RJ=n(CGe,"A",{href:!0});var fIt=s(RJ);s3r=r(fIt,"UniSpeechSatForXVector"),fIt.forEach(t),l3r=r(CGe," (UniSpeechSat model)"),CGe.forEach(t),i3r=i(Bl),xF=n(Bl,"LI",{});var wGe=s(xF);A6e=n(wGe,"STRONG",{});var mIt=s(A6e);d3r=r(mIt,"wav2vec2"),mIt.forEach(t),c3r=r(wGe," \u2014 "),PJ=n(wGe,"A",{href:!0});var gIt=s(PJ);f3r=r(gIt,"Wav2Vec2ForXVector"),gIt.forEach(t),m3r=r(wGe," (Wav2Vec2 model)"),wGe.forEach(t),g3r=i(Bl),$F=n(Bl,"LI",{});var AGe=s($F);L6e=n(AGe,"STRONG",{});var hIt=s(L6e);h3r=r(hIt,"wav2vec2-conformer"),hIt.forEach(t),p3r=r(AGe," \u2014 "),BJ=n(AGe,"A",{href:!0});var pIt=s(BJ);_3r=r(pIt,"Wav2Vec2ConformerForXVector"),pIt.forEach(t),u3r=r(AGe," (Wav2Vec2-Conformer model)"),AGe.forEach(t),b3r=i(Bl),kF=n(Bl,"LI",{});var LGe=s(kF);y6e=n(LGe,"STRONG",{});var _It=s(y6e);v3r=r(_It,"wavlm"),_It.forEach(t),F3r=r(LGe," \u2014 "),IJ=n(LGe,"A",{href:!0});var uIt=s(IJ);T3r=r(uIt,"WavLMForXVector"),uIt.forEach(t),M3r=r(LGe," (WavLM model)"),LGe.forEach(t),Bl.forEach(t),E3r=i(Ra),SF=n(Ra,"P",{});var yGe=s(SF);C3r=r(yGe,"The model is set in evaluation mode by default using "),x6e=n(yGe,"CODE",{});var bIt=s(x6e);w3r=r(bIt,"model.eval()"),bIt.forEach(t),A3r=r(yGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$6e=n(yGe,"CODE",{});var vIt=s($6e);L3r=r(vIt,"model.train()"),vIt.forEach(t),yGe.forEach(t),y3r=i(Ra),T(RF.$$.fragment,Ra),Ra.forEach(t),Pl.forEach(t),QUe=i(f),ic=n(f,"H2",{class:!0});var aYe=s(ic);PF=n(aYe,"A",{id:!0,class:!0,href:!0});var FIt=s(PF);k6e=n(FIt,"SPAN",{});var TIt=s(k6e);T(Px.$$.fragment,TIt),TIt.forEach(t),FIt.forEach(t),x3r=i(aYe),S6e=n(aYe,"SPAN",{});var MIt=s(S6e);$3r=r(MIt,"AutoModelForMaskedImageModeling"),MIt.forEach(t),aYe.forEach(t),UUe=i(f),Zo=n(f,"DIV",{class:!0});var Il=s(Zo);T(Bx.$$.fragment,Il),k3r=i(Il),dc=n(Il,"P",{});var $ne=s(dc);S3r=r($ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),NJ=n($ne,"A",{href:!0});var EIt=s(NJ);R3r=r(EIt,"from_pretrained()"),EIt.forEach(t),P3r=r($ne," class method or the "),qJ=n($ne,"A",{href:!0});var CIt=s(qJ);B3r=r(CIt,"from_config()"),CIt.forEach(t),I3r=r($ne,` class
method.`),$ne.forEach(t),N3r=i(Il),Ix=n(Il,"P",{});var nYe=s(Ix);q3r=r(nYe,"This class cannot be instantiated directly using "),R6e=n(nYe,"CODE",{});var wIt=s(R6e);j3r=r(wIt,"__init__()"),wIt.forEach(t),D3r=r(nYe," (throws an error)."),nYe.forEach(t),G3r=i(Il),Rt=n(Il,"DIV",{class:!0});var ey=s(Rt);T(Nx.$$.fragment,ey),O3r=i(ey),P6e=n(ey,"P",{});var AIt=s(P6e);V3r=r(AIt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),AIt.forEach(t),X3r=i(ey),cc=n(ey,"P",{});var kne=s(cc);z3r=r(kne,`Note:
Loading a model from its configuration file does `),B6e=n(kne,"STRONG",{});var LIt=s(B6e);W3r=r(LIt,"not"),LIt.forEach(t),Q3r=r(kne,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(kne,"A",{href:!0});var yIt=s(jJ);U3r=r(yIt,"from_pretrained()"),yIt.forEach(t),H3r=r(kne," to load the model weights."),kne.forEach(t),J3r=i(ey),T(BF.$$.fragment,ey),ey.forEach(t),Y3r=i(Il),bo=n(Il,"DIV",{class:!0});var Pa=s(bo);T(qx.$$.fragment,Pa),K3r=i(Pa),I6e=n(Pa,"P",{});var xIt=s(I6e);Z3r=r(xIt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),xIt.forEach(t),e5r=i(Pa),cn=n(Pa,"P",{});var oy=s(cn);o5r=r(oy,"The model class to instantiate is selected based on the "),N6e=n(oy,"CODE",{});var $It=s(N6e);r5r=r($It,"model_type"),$It.forEach(t),t5r=r(oy,` property of the config object (either
passed as an argument or loaded from `),q6e=n(oy,"CODE",{});var kIt=s(q6e);a5r=r(kIt,"pretrained_model_name_or_path"),kIt.forEach(t),n5r=r(oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j6e=n(oy,"CODE",{});var SIt=s(j6e);s5r=r(SIt,"pretrained_model_name_or_path"),SIt.forEach(t),l5r=r(oy,":"),oy.forEach(t),i5r=i(Pa),fn=n(Pa,"UL",{});var ry=s(fn);IF=n(ry,"LI",{});var xGe=s(IF);D6e=n(xGe,"STRONG",{});var RIt=s(D6e);d5r=r(RIt,"deit"),RIt.forEach(t),c5r=r(xGe," \u2014 "),DJ=n(xGe,"A",{href:!0});var PIt=s(DJ);f5r=r(PIt,"DeiTForMaskedImageModeling"),PIt.forEach(t),m5r=r(xGe," (DeiT model)"),xGe.forEach(t),g5r=i(ry),NF=n(ry,"LI",{});var $Ge=s(NF);G6e=n($Ge,"STRONG",{});var BIt=s(G6e);h5r=r(BIt,"swin"),BIt.forEach(t),p5r=r($Ge," \u2014 "),GJ=n($Ge,"A",{href:!0});var IIt=s(GJ);_5r=r(IIt,"SwinForMaskedImageModeling"),IIt.forEach(t),u5r=r($Ge," (Swin Transformer model)"),$Ge.forEach(t),b5r=i(ry),qF=n(ry,"LI",{});var kGe=s(qF);O6e=n(kGe,"STRONG",{});var NIt=s(O6e);v5r=r(NIt,"swinv2"),NIt.forEach(t),F5r=r(kGe," \u2014 "),OJ=n(kGe,"A",{href:!0});var qIt=s(OJ);T5r=r(qIt,"Swinv2ForMaskedImageModeling"),qIt.forEach(t),M5r=r(kGe," (Swin Transformer V2 model)"),kGe.forEach(t),E5r=i(ry),jF=n(ry,"LI",{});var SGe=s(jF);V6e=n(SGe,"STRONG",{});var jIt=s(V6e);C5r=r(jIt,"vit"),jIt.forEach(t),w5r=r(SGe," \u2014 "),VJ=n(SGe,"A",{href:!0});var DIt=s(VJ);A5r=r(DIt,"ViTForMaskedImageModeling"),DIt.forEach(t),L5r=r(SGe," (ViT model)"),SGe.forEach(t),ry.forEach(t),y5r=i(Pa),DF=n(Pa,"P",{});var RGe=s(DF);x5r=r(RGe,"The model is set in evaluation mode by default using "),X6e=n(RGe,"CODE",{});var GIt=s(X6e);$5r=r(GIt,"model.eval()"),GIt.forEach(t),k5r=r(RGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z6e=n(RGe,"CODE",{});var OIt=s(z6e);S5r=r(OIt,"model.train()"),OIt.forEach(t),RGe.forEach(t),R5r=i(Pa),T(GF.$$.fragment,Pa),Pa.forEach(t),Il.forEach(t),HUe=i(f),fc=n(f,"H2",{class:!0});var sYe=s(fc);OF=n(sYe,"A",{id:!0,class:!0,href:!0});var VIt=s(OF);W6e=n(VIt,"SPAN",{});var XIt=s(W6e);T(jx.$$.fragment,XIt),XIt.forEach(t),VIt.forEach(t),P5r=i(sYe),Q6e=n(sYe,"SPAN",{});var zIt=s(Q6e);B5r=r(zIt,"AutoModelForObjectDetection"),zIt.forEach(t),sYe.forEach(t),JUe=i(f),er=n(f,"DIV",{class:!0});var Nl=s(er);T(Dx.$$.fragment,Nl),I5r=i(Nl),mc=n(Nl,"P",{});var Sne=s(mc);N5r=r(Sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),XJ=n(Sne,"A",{href:!0});var WIt=s(XJ);q5r=r(WIt,"from_pretrained()"),WIt.forEach(t),j5r=r(Sne," class method or the "),zJ=n(Sne,"A",{href:!0});var QIt=s(zJ);D5r=r(QIt,"from_config()"),QIt.forEach(t),G5r=r(Sne,` class
method.`),Sne.forEach(t),O5r=i(Nl),Gx=n(Nl,"P",{});var lYe=s(Gx);V5r=r(lYe,"This class cannot be instantiated directly using "),U6e=n(lYe,"CODE",{});var UIt=s(U6e);X5r=r(UIt,"__init__()"),UIt.forEach(t),z5r=r(lYe," (throws an error)."),lYe.forEach(t),W5r=i(Nl),Pt=n(Nl,"DIV",{class:!0});var ty=s(Pt);T(Ox.$$.fragment,ty),Q5r=i(ty),H6e=n(ty,"P",{});var HIt=s(H6e);U5r=r(HIt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),HIt.forEach(t),H5r=i(ty),gc=n(ty,"P",{});var Rne=s(gc);J5r=r(Rne,`Note:
Loading a model from its configuration file does `),J6e=n(Rne,"STRONG",{});var JIt=s(J6e);Y5r=r(JIt,"not"),JIt.forEach(t),K5r=r(Rne,` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=n(Rne,"A",{href:!0});var YIt=s(WJ);Z5r=r(YIt,"from_pretrained()"),YIt.forEach(t),e6r=r(Rne," to load the model weights."),Rne.forEach(t),o6r=i(ty),T(VF.$$.fragment,ty),ty.forEach(t),r6r=i(Nl),vo=n(Nl,"DIV",{class:!0});var Ba=s(vo);T(Vx.$$.fragment,Ba),t6r=i(Ba),Y6e=n(Ba,"P",{});var KIt=s(Y6e);a6r=r(KIt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),KIt.forEach(t),n6r=i(Ba),mn=n(Ba,"P",{});var ay=s(mn);s6r=r(ay,"The model class to instantiate is selected based on the "),K6e=n(ay,"CODE",{});var ZIt=s(K6e);l6r=r(ZIt,"model_type"),ZIt.forEach(t),i6r=r(ay,` property of the config object (either
passed as an argument or loaded from `),Z6e=n(ay,"CODE",{});var eNt=s(Z6e);d6r=r(eNt,"pretrained_model_name_or_path"),eNt.forEach(t),c6r=r(ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=n(ay,"CODE",{});var oNt=s(eFe);f6r=r(oNt,"pretrained_model_name_or_path"),oNt.forEach(t),m6r=r(ay,":"),ay.forEach(t),g6r=i(Ba),Xx=n(Ba,"UL",{});var iYe=s(Xx);XF=n(iYe,"LI",{});var PGe=s(XF);oFe=n(PGe,"STRONG",{});var rNt=s(oFe);h6r=r(rNt,"detr"),rNt.forEach(t),p6r=r(PGe," \u2014 "),QJ=n(PGe,"A",{href:!0});var tNt=s(QJ);_6r=r(tNt,"DetrForObjectDetection"),tNt.forEach(t),u6r=r(PGe," (DETR model)"),PGe.forEach(t),b6r=i(iYe),zF=n(iYe,"LI",{});var BGe=s(zF);rFe=n(BGe,"STRONG",{});var aNt=s(rFe);v6r=r(aNt,"yolos"),aNt.forEach(t),F6r=r(BGe," \u2014 "),UJ=n(BGe,"A",{href:!0});var nNt=s(UJ);T6r=r(nNt,"YolosForObjectDetection"),nNt.forEach(t),M6r=r(BGe," (YOLOS model)"),BGe.forEach(t),iYe.forEach(t),E6r=i(Ba),WF=n(Ba,"P",{});var IGe=s(WF);C6r=r(IGe,"The model is set in evaluation mode by default using "),tFe=n(IGe,"CODE",{});var sNt=s(tFe);w6r=r(sNt,"model.eval()"),sNt.forEach(t),A6r=r(IGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aFe=n(IGe,"CODE",{});var lNt=s(aFe);L6r=r(lNt,"model.train()"),lNt.forEach(t),IGe.forEach(t),y6r=i(Ba),T(QF.$$.fragment,Ba),Ba.forEach(t),Nl.forEach(t),YUe=i(f),hc=n(f,"H2",{class:!0});var dYe=s(hc);UF=n(dYe,"A",{id:!0,class:!0,href:!0});var iNt=s(UF);nFe=n(iNt,"SPAN",{});var dNt=s(nFe);T(zx.$$.fragment,dNt),dNt.forEach(t),iNt.forEach(t),x6r=i(dYe),sFe=n(dYe,"SPAN",{});var cNt=s(sFe);$6r=r(cNt,"AutoModelForImageSegmentation"),cNt.forEach(t),dYe.forEach(t),KUe=i(f),or=n(f,"DIV",{class:!0});var ql=s(or);T(Wx.$$.fragment,ql),k6r=i(ql),pc=n(ql,"P",{});var Pne=s(pc);S6r=r(Pne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),HJ=n(Pne,"A",{href:!0});var fNt=s(HJ);R6r=r(fNt,"from_pretrained()"),fNt.forEach(t),P6r=r(Pne," class method or the "),JJ=n(Pne,"A",{href:!0});var mNt=s(JJ);B6r=r(mNt,"from_config()"),mNt.forEach(t),I6r=r(Pne,` class
method.`),Pne.forEach(t),N6r=i(ql),Qx=n(ql,"P",{});var cYe=s(Qx);q6r=r(cYe,"This class cannot be instantiated directly using "),lFe=n(cYe,"CODE",{});var gNt=s(lFe);j6r=r(gNt,"__init__()"),gNt.forEach(t),D6r=r(cYe," (throws an error)."),cYe.forEach(t),G6r=i(ql),Bt=n(ql,"DIV",{class:!0});var ny=s(Bt);T(Ux.$$.fragment,ny),O6r=i(ny),iFe=n(ny,"P",{});var hNt=s(iFe);V6r=r(hNt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),hNt.forEach(t),X6r=i(ny),_c=n(ny,"P",{});var Bne=s(_c);z6r=r(Bne,`Note:
Loading a model from its configuration file does `),dFe=n(Bne,"STRONG",{});var pNt=s(dFe);W6r=r(pNt,"not"),pNt.forEach(t),Q6r=r(Bne,` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=n(Bne,"A",{href:!0});var _Nt=s(YJ);U6r=r(_Nt,"from_pretrained()"),_Nt.forEach(t),H6r=r(Bne," to load the model weights."),Bne.forEach(t),J6r=i(ny),T(HF.$$.fragment,ny),ny.forEach(t),Y6r=i(ql),Fo=n(ql,"DIV",{class:!0});var Ia=s(Fo);T(Hx.$$.fragment,Ia),K6r=i(Ia),cFe=n(Ia,"P",{});var uNt=s(cFe);Z6r=r(uNt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),uNt.forEach(t),eFr=i(Ia),gn=n(Ia,"P",{});var sy=s(gn);oFr=r(sy,"The model class to instantiate is selected based on the "),fFe=n(sy,"CODE",{});var bNt=s(fFe);rFr=r(bNt,"model_type"),bNt.forEach(t),tFr=r(sy,` property of the config object (either
passed as an argument or loaded from `),mFe=n(sy,"CODE",{});var vNt=s(mFe);aFr=r(vNt,"pretrained_model_name_or_path"),vNt.forEach(t),nFr=r(sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=n(sy,"CODE",{});var FNt=s(gFe);sFr=r(FNt,"pretrained_model_name_or_path"),FNt.forEach(t),lFr=r(sy,":"),sy.forEach(t),iFr=i(Ia),hFe=n(Ia,"UL",{});var TNt=s(hFe);JF=n(TNt,"LI",{});var NGe=s(JF);pFe=n(NGe,"STRONG",{});var MNt=s(pFe);dFr=r(MNt,"detr"),MNt.forEach(t),cFr=r(NGe," \u2014 "),KJ=n(NGe,"A",{href:!0});var ENt=s(KJ);fFr=r(ENt,"DetrForSegmentation"),ENt.forEach(t),mFr=r(NGe," (DETR model)"),NGe.forEach(t),TNt.forEach(t),gFr=i(Ia),YF=n(Ia,"P",{});var qGe=s(YF);hFr=r(qGe,"The model is set in evaluation mode by default using "),_Fe=n(qGe,"CODE",{});var CNt=s(_Fe);pFr=r(CNt,"model.eval()"),CNt.forEach(t),_Fr=r(qGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uFe=n(qGe,"CODE",{});var wNt=s(uFe);uFr=r(wNt,"model.train()"),wNt.forEach(t),qGe.forEach(t),bFr=i(Ia),T(KF.$$.fragment,Ia),Ia.forEach(t),ql.forEach(t),ZUe=i(f),uc=n(f,"H2",{class:!0});var fYe=s(uc);ZF=n(fYe,"A",{id:!0,class:!0,href:!0});var ANt=s(ZF);bFe=n(ANt,"SPAN",{});var LNt=s(bFe);T(Jx.$$.fragment,LNt),LNt.forEach(t),ANt.forEach(t),vFr=i(fYe),vFe=n(fYe,"SPAN",{});var yNt=s(vFe);FFr=r(yNt,"AutoModelForSemanticSegmentation"),yNt.forEach(t),fYe.forEach(t),eHe=i(f),rr=n(f,"DIV",{class:!0});var jl=s(rr);T(Yx.$$.fragment,jl),TFr=i(jl),bc=n(jl,"P",{});var Ine=s(bc);MFr=r(Ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ZJ=n(Ine,"A",{href:!0});var xNt=s(ZJ);EFr=r(xNt,"from_pretrained()"),xNt.forEach(t),CFr=r(Ine," class method or the "),eY=n(Ine,"A",{href:!0});var $Nt=s(eY);wFr=r($Nt,"from_config()"),$Nt.forEach(t),AFr=r(Ine,` class
method.`),Ine.forEach(t),LFr=i(jl),Kx=n(jl,"P",{});var mYe=s(Kx);yFr=r(mYe,"This class cannot be instantiated directly using "),FFe=n(mYe,"CODE",{});var kNt=s(FFe);xFr=r(kNt,"__init__()"),kNt.forEach(t),$Fr=r(mYe," (throws an error)."),mYe.forEach(t),kFr=i(jl),It=n(jl,"DIV",{class:!0});var ly=s(It);T(Zx.$$.fragment,ly),SFr=i(ly),TFe=n(ly,"P",{});var SNt=s(TFe);RFr=r(SNt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),SNt.forEach(t),PFr=i(ly),vc=n(ly,"P",{});var Nne=s(vc);BFr=r(Nne,`Note:
Loading a model from its configuration file does `),MFe=n(Nne,"STRONG",{});var RNt=s(MFe);IFr=r(RNt,"not"),RNt.forEach(t),NFr=r(Nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(Nne,"A",{href:!0});var PNt=s(oY);qFr=r(PNt,"from_pretrained()"),PNt.forEach(t),jFr=r(Nne," to load the model weights."),Nne.forEach(t),DFr=i(ly),T(eT.$$.fragment,ly),ly.forEach(t),GFr=i(jl),To=n(jl,"DIV",{class:!0});var Na=s(To);T(e$.$$.fragment,Na),OFr=i(Na),EFe=n(Na,"P",{});var BNt=s(EFe);VFr=r(BNt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),BNt.forEach(t),XFr=i(Na),hn=n(Na,"P",{});var iy=s(hn);zFr=r(iy,"The model class to instantiate is selected based on the "),CFe=n(iy,"CODE",{});var INt=s(CFe);WFr=r(INt,"model_type"),INt.forEach(t),QFr=r(iy,` property of the config object (either
passed as an argument or loaded from `),wFe=n(iy,"CODE",{});var NNt=s(wFe);UFr=r(NNt,"pretrained_model_name_or_path"),NNt.forEach(t),HFr=r(iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=n(iy,"CODE",{});var qNt=s(AFe);JFr=r(qNt,"pretrained_model_name_or_path"),qNt.forEach(t),YFr=r(iy,":"),iy.forEach(t),KFr=i(Na),it=n(Na,"UL",{});var Dl=s(it);oT=n(Dl,"LI",{});var jGe=s(oT);LFe=n(jGe,"STRONG",{});var jNt=s(LFe);ZFr=r(jNt,"beit"),jNt.forEach(t),eTr=r(jGe," \u2014 "),rY=n(jGe,"A",{href:!0});var DNt=s(rY);oTr=r(DNt,"BeitForSemanticSegmentation"),DNt.forEach(t),rTr=r(jGe," (BEiT model)"),jGe.forEach(t),tTr=i(Dl),rT=n(Dl,"LI",{});var DGe=s(rT);yFe=n(DGe,"STRONG",{});var GNt=s(yFe);aTr=r(GNt,"data2vec-vision"),GNt.forEach(t),nTr=r(DGe," \u2014 "),tY=n(DGe,"A",{href:!0});var ONt=s(tY);sTr=r(ONt,"Data2VecVisionForSemanticSegmentation"),ONt.forEach(t),lTr=r(DGe," (Data2VecVision model)"),DGe.forEach(t),iTr=i(Dl),tT=n(Dl,"LI",{});var GGe=s(tT);xFe=n(GGe,"STRONG",{});var VNt=s(xFe);dTr=r(VNt,"dpt"),VNt.forEach(t),cTr=r(GGe," \u2014 "),aY=n(GGe,"A",{href:!0});var XNt=s(aY);fTr=r(XNt,"DPTForSemanticSegmentation"),XNt.forEach(t),mTr=r(GGe," (DPT model)"),GGe.forEach(t),gTr=i(Dl),aT=n(Dl,"LI",{});var OGe=s(aT);$Fe=n(OGe,"STRONG",{});var zNt=s($Fe);hTr=r(zNt,"mobilevit"),zNt.forEach(t),pTr=r(OGe," \u2014 "),nY=n(OGe,"A",{href:!0});var WNt=s(nY);_Tr=r(WNt,"MobileViTForSemanticSegmentation"),WNt.forEach(t),uTr=r(OGe," (MobileViT model)"),OGe.forEach(t),bTr=i(Dl),nT=n(Dl,"LI",{});var VGe=s(nT);kFe=n(VGe,"STRONG",{});var QNt=s(kFe);vTr=r(QNt,"segformer"),QNt.forEach(t),FTr=r(VGe," \u2014 "),sY=n(VGe,"A",{href:!0});var UNt=s(sY);TTr=r(UNt,"SegformerForSemanticSegmentation"),UNt.forEach(t),MTr=r(VGe," (SegFormer model)"),VGe.forEach(t),Dl.forEach(t),ETr=i(Na),sT=n(Na,"P",{});var XGe=s(sT);CTr=r(XGe,"The model is set in evaluation mode by default using "),SFe=n(XGe,"CODE",{});var HNt=s(SFe);wTr=r(HNt,"model.eval()"),HNt.forEach(t),ATr=r(XGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RFe=n(XGe,"CODE",{});var JNt=s(RFe);LTr=r(JNt,"model.train()"),JNt.forEach(t),XGe.forEach(t),yTr=i(Na),T(lT.$$.fragment,Na),Na.forEach(t),jl.forEach(t),oHe=i(f),Fc=n(f,"H2",{class:!0});var gYe=s(Fc);iT=n(gYe,"A",{id:!0,class:!0,href:!0});var YNt=s(iT);PFe=n(YNt,"SPAN",{});var KNt=s(PFe);T(o$.$$.fragment,KNt),KNt.forEach(t),YNt.forEach(t),xTr=i(gYe),BFe=n(gYe,"SPAN",{});var ZNt=s(BFe);$Tr=r(ZNt,"AutoModelForInstanceSegmentation"),ZNt.forEach(t),gYe.forEach(t),rHe=i(f),tr=n(f,"DIV",{class:!0});var Gl=s(tr);T(r$.$$.fragment,Gl),kTr=i(Gl),Tc=n(Gl,"P",{});var qne=s(Tc);STr=r(qne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),lY=n(qne,"A",{href:!0});var eqt=s(lY);RTr=r(eqt,"from_pretrained()"),eqt.forEach(t),PTr=r(qne," class method or the "),iY=n(qne,"A",{href:!0});var oqt=s(iY);BTr=r(oqt,"from_config()"),oqt.forEach(t),ITr=r(qne,` class
method.`),qne.forEach(t),NTr=i(Gl),t$=n(Gl,"P",{});var hYe=s(t$);qTr=r(hYe,"This class cannot be instantiated directly using "),IFe=n(hYe,"CODE",{});var rqt=s(IFe);jTr=r(rqt,"__init__()"),rqt.forEach(t),DTr=r(hYe," (throws an error)."),hYe.forEach(t),GTr=i(Gl),Nt=n(Gl,"DIV",{class:!0});var dy=s(Nt);T(a$.$$.fragment,dy),OTr=i(dy),NFe=n(dy,"P",{});var tqt=s(NFe);VTr=r(tqt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),tqt.forEach(t),XTr=i(dy),Mc=n(dy,"P",{});var jne=s(Mc);zTr=r(jne,`Note:
Loading a model from its configuration file does `),qFe=n(jne,"STRONG",{});var aqt=s(qFe);WTr=r(aqt,"not"),aqt.forEach(t),QTr=r(jne,` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=n(jne,"A",{href:!0});var nqt=s(dY);UTr=r(nqt,"from_pretrained()"),nqt.forEach(t),HTr=r(jne," to load the model weights."),jne.forEach(t),JTr=i(dy),T(dT.$$.fragment,dy),dy.forEach(t),YTr=i(Gl),Mo=n(Gl,"DIV",{class:!0});var qa=s(Mo);T(n$.$$.fragment,qa),KTr=i(qa),jFe=n(qa,"P",{});var sqt=s(jFe);ZTr=r(sqt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),sqt.forEach(t),eMr=i(qa),pn=n(qa,"P",{});var cy=s(pn);oMr=r(cy,"The model class to instantiate is selected based on the "),DFe=n(cy,"CODE",{});var lqt=s(DFe);rMr=r(lqt,"model_type"),lqt.forEach(t),tMr=r(cy,` property of the config object (either
passed as an argument or loaded from `),GFe=n(cy,"CODE",{});var iqt=s(GFe);aMr=r(iqt,"pretrained_model_name_or_path"),iqt.forEach(t),nMr=r(cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=n(cy,"CODE",{});var dqt=s(OFe);sMr=r(dqt,"pretrained_model_name_or_path"),dqt.forEach(t),lMr=r(cy,":"),cy.forEach(t),iMr=i(qa),VFe=n(qa,"UL",{});var cqt=s(VFe);cT=n(cqt,"LI",{});var zGe=s(cT);XFe=n(zGe,"STRONG",{});var fqt=s(XFe);dMr=r(fqt,"maskformer"),fqt.forEach(t),cMr=r(zGe," \u2014 "),cY=n(zGe,"A",{href:!0});var mqt=s(cY);fMr=r(mqt,"MaskFormerForInstanceSegmentation"),mqt.forEach(t),mMr=r(zGe," (MaskFormer model)"),zGe.forEach(t),cqt.forEach(t),gMr=i(qa),fT=n(qa,"P",{});var WGe=s(fT);hMr=r(WGe,"The model is set in evaluation mode by default using "),zFe=n(WGe,"CODE",{});var gqt=s(zFe);pMr=r(gqt,"model.eval()"),gqt.forEach(t),_Mr=r(WGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),WFe=n(WGe,"CODE",{});var hqt=s(WFe);uMr=r(hqt,"model.train()"),hqt.forEach(t),WGe.forEach(t),bMr=i(qa),T(mT.$$.fragment,qa),qa.forEach(t),Gl.forEach(t),tHe=i(f),Ec=n(f,"H2",{class:!0});var pYe=s(Ec);gT=n(pYe,"A",{id:!0,class:!0,href:!0});var pqt=s(gT);QFe=n(pqt,"SPAN",{});var _qt=s(QFe);T(s$.$$.fragment,_qt),_qt.forEach(t),pqt.forEach(t),vMr=i(pYe),UFe=n(pYe,"SPAN",{});var uqt=s(UFe);FMr=r(uqt,"TFAutoModel"),uqt.forEach(t),pYe.forEach(t),aHe=i(f),ar=n(f,"DIV",{class:!0});var Ol=s(ar);T(l$.$$.fragment,Ol),TMr=i(Ol),Cc=n(Ol,"P",{});var Dne=s(Cc);MMr=r(Dne,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fY=n(Dne,"A",{href:!0});var bqt=s(fY);EMr=r(bqt,"from_pretrained()"),bqt.forEach(t),CMr=r(Dne," class method or the "),mY=n(Dne,"A",{href:!0});var vqt=s(mY);wMr=r(vqt,"from_config()"),vqt.forEach(t),AMr=r(Dne,` class
method.`),Dne.forEach(t),LMr=i(Ol),i$=n(Ol,"P",{});var _Ye=s(i$);yMr=r(_Ye,"This class cannot be instantiated directly using "),HFe=n(_Ye,"CODE",{});var Fqt=s(HFe);xMr=r(Fqt,"__init__()"),Fqt.forEach(t),$Mr=r(_Ye," (throws an error)."),_Ye.forEach(t),kMr=i(Ol),qt=n(Ol,"DIV",{class:!0});var fy=s(qt);T(d$.$$.fragment,fy),SMr=i(fy),JFe=n(fy,"P",{});var Tqt=s(JFe);RMr=r(Tqt,"Instantiates one of the base model classes of the library from a configuration."),Tqt.forEach(t),PMr=i(fy),wc=n(fy,"P",{});var Gne=s(wc);BMr=r(Gne,`Note:
Loading a model from its configuration file does `),YFe=n(Gne,"STRONG",{});var Mqt=s(YFe);IMr=r(Mqt,"not"),Mqt.forEach(t),NMr=r(Gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=n(Gne,"A",{href:!0});var Eqt=s(gY);qMr=r(Eqt,"from_pretrained()"),Eqt.forEach(t),jMr=r(Gne," to load the model weights."),Gne.forEach(t),DMr=i(fy),T(hT.$$.fragment,fy),fy.forEach(t),GMr=i(Ol),Rr=n(Ol,"DIV",{class:!0});var Vl=s(Rr);T(c$.$$.fragment,Vl),OMr=i(Vl),KFe=n(Vl,"P",{});var Cqt=s(KFe);VMr=r(Cqt,"Instantiate one of the base model classes of the library from a pretrained model."),Cqt.forEach(t),XMr=i(Vl),_n=n(Vl,"P",{});var my=s(_n);zMr=r(my,"The model class to instantiate is selected based on the "),ZFe=n(my,"CODE",{});var wqt=s(ZFe);WMr=r(wqt,"model_type"),wqt.forEach(t),QMr=r(my,` property of the config object (either
passed as an argument or loaded from `),eTe=n(my,"CODE",{});var Aqt=s(eTe);UMr=r(Aqt,"pretrained_model_name_or_path"),Aqt.forEach(t),HMr=r(my,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=n(my,"CODE",{});var Lqt=s(oTe);JMr=r(Lqt,"pretrained_model_name_or_path"),Lqt.forEach(t),YMr=r(my,":"),my.forEach(t),KMr=i(Vl),q=n(Vl,"UL",{});var D=s(q);pT=n(D,"LI",{});var QGe=s(pT);rTe=n(QGe,"STRONG",{});var yqt=s(rTe);ZMr=r(yqt,"albert"),yqt.forEach(t),eEr=r(QGe," \u2014 "),hY=n(QGe,"A",{href:!0});var xqt=s(hY);oEr=r(xqt,"TFAlbertModel"),xqt.forEach(t),rEr=r(QGe," (ALBERT model)"),QGe.forEach(t),tEr=i(D),_T=n(D,"LI",{});var UGe=s(_T);tTe=n(UGe,"STRONG",{});var $qt=s(tTe);aEr=r($qt,"bart"),$qt.forEach(t),nEr=r(UGe," \u2014 "),pY=n(UGe,"A",{href:!0});var kqt=s(pY);sEr=r(kqt,"TFBartModel"),kqt.forEach(t),lEr=r(UGe," (BART model)"),UGe.forEach(t),iEr=i(D),uT=n(D,"LI",{});var HGe=s(uT);aTe=n(HGe,"STRONG",{});var Sqt=s(aTe);dEr=r(Sqt,"bert"),Sqt.forEach(t),cEr=r(HGe," \u2014 "),_Y=n(HGe,"A",{href:!0});var Rqt=s(_Y);fEr=r(Rqt,"TFBertModel"),Rqt.forEach(t),mEr=r(HGe," (BERT model)"),HGe.forEach(t),gEr=i(D),bT=n(D,"LI",{});var JGe=s(bT);nTe=n(JGe,"STRONG",{});var Pqt=s(nTe);hEr=r(Pqt,"blenderbot"),Pqt.forEach(t),pEr=r(JGe," \u2014 "),uY=n(JGe,"A",{href:!0});var Bqt=s(uY);_Er=r(Bqt,"TFBlenderbotModel"),Bqt.forEach(t),uEr=r(JGe," (Blenderbot model)"),JGe.forEach(t),bEr=i(D),vT=n(D,"LI",{});var YGe=s(vT);sTe=n(YGe,"STRONG",{});var Iqt=s(sTe);vEr=r(Iqt,"blenderbot-small"),Iqt.forEach(t),FEr=r(YGe," \u2014 "),bY=n(YGe,"A",{href:!0});var Nqt=s(bY);TEr=r(Nqt,"TFBlenderbotSmallModel"),Nqt.forEach(t),MEr=r(YGe," (BlenderbotSmall model)"),YGe.forEach(t),EEr=i(D),FT=n(D,"LI",{});var KGe=s(FT);lTe=n(KGe,"STRONG",{});var qqt=s(lTe);CEr=r(qqt,"camembert"),qqt.forEach(t),wEr=r(KGe," \u2014 "),vY=n(KGe,"A",{href:!0});var jqt=s(vY);AEr=r(jqt,"TFCamembertModel"),jqt.forEach(t),LEr=r(KGe," (CamemBERT model)"),KGe.forEach(t),yEr=i(D),TT=n(D,"LI",{});var ZGe=s(TT);iTe=n(ZGe,"STRONG",{});var Dqt=s(iTe);xEr=r(Dqt,"clip"),Dqt.forEach(t),$Er=r(ZGe," \u2014 "),FY=n(ZGe,"A",{href:!0});var Gqt=s(FY);kEr=r(Gqt,"TFCLIPModel"),Gqt.forEach(t),SEr=r(ZGe," (CLIP model)"),ZGe.forEach(t),REr=i(D),MT=n(D,"LI",{});var eOe=s(MT);dTe=n(eOe,"STRONG",{});var Oqt=s(dTe);PEr=r(Oqt,"convbert"),Oqt.forEach(t),BEr=r(eOe," \u2014 "),TY=n(eOe,"A",{href:!0});var Vqt=s(TY);IEr=r(Vqt,"TFConvBertModel"),Vqt.forEach(t),NEr=r(eOe," (ConvBERT model)"),eOe.forEach(t),qEr=i(D),ET=n(D,"LI",{});var oOe=s(ET);cTe=n(oOe,"STRONG",{});var Xqt=s(cTe);jEr=r(Xqt,"convnext"),Xqt.forEach(t),DEr=r(oOe," \u2014 "),MY=n(oOe,"A",{href:!0});var zqt=s(MY);GEr=r(zqt,"TFConvNextModel"),zqt.forEach(t),OEr=r(oOe," (ConvNeXT model)"),oOe.forEach(t),VEr=i(D),CT=n(D,"LI",{});var rOe=s(CT);fTe=n(rOe,"STRONG",{});var Wqt=s(fTe);XEr=r(Wqt,"ctrl"),Wqt.forEach(t),zEr=r(rOe," \u2014 "),EY=n(rOe,"A",{href:!0});var Qqt=s(EY);WEr=r(Qqt,"TFCTRLModel"),Qqt.forEach(t),QEr=r(rOe," (CTRL model)"),rOe.forEach(t),UEr=i(D),wT=n(D,"LI",{});var tOe=s(wT);mTe=n(tOe,"STRONG",{});var Uqt=s(mTe);HEr=r(Uqt,"data2vec-vision"),Uqt.forEach(t),JEr=r(tOe," \u2014 "),CY=n(tOe,"A",{href:!0});var Hqt=s(CY);YEr=r(Hqt,"TFData2VecVisionModel"),Hqt.forEach(t),KEr=r(tOe," (Data2VecVision model)"),tOe.forEach(t),ZEr=i(D),AT=n(D,"LI",{});var aOe=s(AT);gTe=n(aOe,"STRONG",{});var Jqt=s(gTe);eCr=r(Jqt,"deberta"),Jqt.forEach(t),oCr=r(aOe," \u2014 "),wY=n(aOe,"A",{href:!0});var Yqt=s(wY);rCr=r(Yqt,"TFDebertaModel"),Yqt.forEach(t),tCr=r(aOe," (DeBERTa model)"),aOe.forEach(t),aCr=i(D),LT=n(D,"LI",{});var nOe=s(LT);hTe=n(nOe,"STRONG",{});var Kqt=s(hTe);nCr=r(Kqt,"deberta-v2"),Kqt.forEach(t),sCr=r(nOe," \u2014 "),AY=n(nOe,"A",{href:!0});var Zqt=s(AY);lCr=r(Zqt,"TFDebertaV2Model"),Zqt.forEach(t),iCr=r(nOe," (DeBERTa-v2 model)"),nOe.forEach(t),dCr=i(D),yT=n(D,"LI",{});var sOe=s(yT);pTe=n(sOe,"STRONG",{});var ejt=s(pTe);cCr=r(ejt,"deit"),ejt.forEach(t),fCr=r(sOe," \u2014 "),LY=n(sOe,"A",{href:!0});var ojt=s(LY);mCr=r(ojt,"TFDeiTModel"),ojt.forEach(t),gCr=r(sOe," (DeiT model)"),sOe.forEach(t),hCr=i(D),xT=n(D,"LI",{});var lOe=s(xT);_Te=n(lOe,"STRONG",{});var rjt=s(_Te);pCr=r(rjt,"distilbert"),rjt.forEach(t),_Cr=r(lOe," \u2014 "),yY=n(lOe,"A",{href:!0});var tjt=s(yY);uCr=r(tjt,"TFDistilBertModel"),tjt.forEach(t),bCr=r(lOe," (DistilBERT model)"),lOe.forEach(t),vCr=i(D),$T=n(D,"LI",{});var iOe=s($T);uTe=n(iOe,"STRONG",{});var ajt=s(uTe);FCr=r(ajt,"dpr"),ajt.forEach(t),TCr=r(iOe," \u2014 "),xY=n(iOe,"A",{href:!0});var njt=s(xY);MCr=r(njt,"TFDPRQuestionEncoder"),njt.forEach(t),ECr=r(iOe," (DPR model)"),iOe.forEach(t),CCr=i(D),kT=n(D,"LI",{});var dOe=s(kT);bTe=n(dOe,"STRONG",{});var sjt=s(bTe);wCr=r(sjt,"electra"),sjt.forEach(t),ACr=r(dOe," \u2014 "),$Y=n(dOe,"A",{href:!0});var ljt=s($Y);LCr=r(ljt,"TFElectraModel"),ljt.forEach(t),yCr=r(dOe," (ELECTRA model)"),dOe.forEach(t),xCr=i(D),ST=n(D,"LI",{});var cOe=s(ST);vTe=n(cOe,"STRONG",{});var ijt=s(vTe);$Cr=r(ijt,"flaubert"),ijt.forEach(t),kCr=r(cOe," \u2014 "),kY=n(cOe,"A",{href:!0});var djt=s(kY);SCr=r(djt,"TFFlaubertModel"),djt.forEach(t),RCr=r(cOe," (FlauBERT model)"),cOe.forEach(t),PCr=i(D),il=n(D,"LI",{});var tP=s(il);FTe=n(tP,"STRONG",{});var cjt=s(FTe);BCr=r(cjt,"funnel"),cjt.forEach(t),ICr=r(tP," \u2014 "),SY=n(tP,"A",{href:!0});var fjt=s(SY);NCr=r(fjt,"TFFunnelModel"),fjt.forEach(t),qCr=r(tP," or "),RY=n(tP,"A",{href:!0});var mjt=s(RY);jCr=r(mjt,"TFFunnelBaseModel"),mjt.forEach(t),DCr=r(tP," (Funnel Transformer model)"),tP.forEach(t),GCr=i(D),RT=n(D,"LI",{});var fOe=s(RT);TTe=n(fOe,"STRONG",{});var gjt=s(TTe);OCr=r(gjt,"gpt2"),gjt.forEach(t),VCr=r(fOe," \u2014 "),PY=n(fOe,"A",{href:!0});var hjt=s(PY);XCr=r(hjt,"TFGPT2Model"),hjt.forEach(t),zCr=r(fOe," (OpenAI GPT-2 model)"),fOe.forEach(t),WCr=i(D),PT=n(D,"LI",{});var mOe=s(PT);MTe=n(mOe,"STRONG",{});var pjt=s(MTe);QCr=r(pjt,"gptj"),pjt.forEach(t),UCr=r(mOe," \u2014 "),BY=n(mOe,"A",{href:!0});var _jt=s(BY);HCr=r(_jt,"TFGPTJModel"),_jt.forEach(t),JCr=r(mOe," (GPT-J model)"),mOe.forEach(t),YCr=i(D),BT=n(D,"LI",{});var gOe=s(BT);ETe=n(gOe,"STRONG",{});var ujt=s(ETe);KCr=r(ujt,"hubert"),ujt.forEach(t),ZCr=r(gOe," \u2014 "),IY=n(gOe,"A",{href:!0});var bjt=s(IY);e0r=r(bjt,"TFHubertModel"),bjt.forEach(t),o0r=r(gOe," (Hubert model)"),gOe.forEach(t),r0r=i(D),IT=n(D,"LI",{});var hOe=s(IT);CTe=n(hOe,"STRONG",{});var vjt=s(CTe);t0r=r(vjt,"layoutlm"),vjt.forEach(t),a0r=r(hOe," \u2014 "),NY=n(hOe,"A",{href:!0});var Fjt=s(NY);n0r=r(Fjt,"TFLayoutLMModel"),Fjt.forEach(t),s0r=r(hOe," (LayoutLM model)"),hOe.forEach(t),l0r=i(D),NT=n(D,"LI",{});var pOe=s(NT);wTe=n(pOe,"STRONG",{});var Tjt=s(wTe);i0r=r(Tjt,"led"),Tjt.forEach(t),d0r=r(pOe," \u2014 "),qY=n(pOe,"A",{href:!0});var Mjt=s(qY);c0r=r(Mjt,"TFLEDModel"),Mjt.forEach(t),f0r=r(pOe," (LED model)"),pOe.forEach(t),m0r=i(D),qT=n(D,"LI",{});var _Oe=s(qT);ATe=n(_Oe,"STRONG",{});var Ejt=s(ATe);g0r=r(Ejt,"longformer"),Ejt.forEach(t),h0r=r(_Oe," \u2014 "),jY=n(_Oe,"A",{href:!0});var Cjt=s(jY);p0r=r(Cjt,"TFLongformerModel"),Cjt.forEach(t),_0r=r(_Oe," (Longformer model)"),_Oe.forEach(t),u0r=i(D),jT=n(D,"LI",{});var uOe=s(jT);LTe=n(uOe,"STRONG",{});var wjt=s(LTe);b0r=r(wjt,"lxmert"),wjt.forEach(t),v0r=r(uOe," \u2014 "),DY=n(uOe,"A",{href:!0});var Ajt=s(DY);F0r=r(Ajt,"TFLxmertModel"),Ajt.forEach(t),T0r=r(uOe," (LXMERT model)"),uOe.forEach(t),M0r=i(D),DT=n(D,"LI",{});var bOe=s(DT);yTe=n(bOe,"STRONG",{});var Ljt=s(yTe);E0r=r(Ljt,"marian"),Ljt.forEach(t),C0r=r(bOe," \u2014 "),GY=n(bOe,"A",{href:!0});var yjt=s(GY);w0r=r(yjt,"TFMarianModel"),yjt.forEach(t),A0r=r(bOe," (Marian model)"),bOe.forEach(t),L0r=i(D),GT=n(D,"LI",{});var vOe=s(GT);xTe=n(vOe,"STRONG",{});var xjt=s(xTe);y0r=r(xjt,"mbart"),xjt.forEach(t),x0r=r(vOe," \u2014 "),OY=n(vOe,"A",{href:!0});var $jt=s(OY);$0r=r($jt,"TFMBartModel"),$jt.forEach(t),k0r=r(vOe," (mBART model)"),vOe.forEach(t),S0r=i(D),OT=n(D,"LI",{});var FOe=s(OT);$Te=n(FOe,"STRONG",{});var kjt=s($Te);R0r=r(kjt,"mobilebert"),kjt.forEach(t),P0r=r(FOe," \u2014 "),VY=n(FOe,"A",{href:!0});var Sjt=s(VY);B0r=r(Sjt,"TFMobileBertModel"),Sjt.forEach(t),I0r=r(FOe," (MobileBERT model)"),FOe.forEach(t),N0r=i(D),VT=n(D,"LI",{});var TOe=s(VT);kTe=n(TOe,"STRONG",{});var Rjt=s(kTe);q0r=r(Rjt,"mpnet"),Rjt.forEach(t),j0r=r(TOe," \u2014 "),XY=n(TOe,"A",{href:!0});var Pjt=s(XY);D0r=r(Pjt,"TFMPNetModel"),Pjt.forEach(t),G0r=r(TOe," (MPNet model)"),TOe.forEach(t),O0r=i(D),XT=n(D,"LI",{});var MOe=s(XT);STe=n(MOe,"STRONG",{});var Bjt=s(STe);V0r=r(Bjt,"mt5"),Bjt.forEach(t),X0r=r(MOe," \u2014 "),zY=n(MOe,"A",{href:!0});var Ijt=s(zY);z0r=r(Ijt,"TFMT5Model"),Ijt.forEach(t),W0r=r(MOe," (MT5 model)"),MOe.forEach(t),Q0r=i(D),zT=n(D,"LI",{});var EOe=s(zT);RTe=n(EOe,"STRONG",{});var Njt=s(RTe);U0r=r(Njt,"openai-gpt"),Njt.forEach(t),H0r=r(EOe," \u2014 "),WY=n(EOe,"A",{href:!0});var qjt=s(WY);J0r=r(qjt,"TFOpenAIGPTModel"),qjt.forEach(t),Y0r=r(EOe," (OpenAI GPT model)"),EOe.forEach(t),K0r=i(D),WT=n(D,"LI",{});var COe=s(WT);PTe=n(COe,"STRONG",{});var jjt=s(PTe);Z0r=r(jjt,"opt"),jjt.forEach(t),ewr=r(COe," \u2014 "),QY=n(COe,"A",{href:!0});var Djt=s(QY);owr=r(Djt,"TFOPTModel"),Djt.forEach(t),rwr=r(COe," (OPT model)"),COe.forEach(t),twr=i(D),QT=n(D,"LI",{});var wOe=s(QT);BTe=n(wOe,"STRONG",{});var Gjt=s(BTe);awr=r(Gjt,"pegasus"),Gjt.forEach(t),nwr=r(wOe," \u2014 "),UY=n(wOe,"A",{href:!0});var Ojt=s(UY);swr=r(Ojt,"TFPegasusModel"),Ojt.forEach(t),lwr=r(wOe," (Pegasus model)"),wOe.forEach(t),iwr=i(D),UT=n(D,"LI",{});var AOe=s(UT);ITe=n(AOe,"STRONG",{});var Vjt=s(ITe);dwr=r(Vjt,"regnet"),Vjt.forEach(t),cwr=r(AOe," \u2014 "),HY=n(AOe,"A",{href:!0});var Xjt=s(HY);fwr=r(Xjt,"TFRegNetModel"),Xjt.forEach(t),mwr=r(AOe," (RegNet model)"),AOe.forEach(t),gwr=i(D),HT=n(D,"LI",{});var LOe=s(HT);NTe=n(LOe,"STRONG",{});var zjt=s(NTe);hwr=r(zjt,"rembert"),zjt.forEach(t),pwr=r(LOe," \u2014 "),JY=n(LOe,"A",{href:!0});var Wjt=s(JY);_wr=r(Wjt,"TFRemBertModel"),Wjt.forEach(t),uwr=r(LOe," (RemBERT model)"),LOe.forEach(t),bwr=i(D),JT=n(D,"LI",{});var yOe=s(JT);qTe=n(yOe,"STRONG",{});var Qjt=s(qTe);vwr=r(Qjt,"resnet"),Qjt.forEach(t),Fwr=r(yOe," \u2014 "),YY=n(yOe,"A",{href:!0});var Ujt=s(YY);Twr=r(Ujt,"TFResNetModel"),Ujt.forEach(t),Mwr=r(yOe," (ResNet model)"),yOe.forEach(t),Ewr=i(D),YT=n(D,"LI",{});var xOe=s(YT);jTe=n(xOe,"STRONG",{});var Hjt=s(jTe);Cwr=r(Hjt,"roberta"),Hjt.forEach(t),wwr=r(xOe," \u2014 "),KY=n(xOe,"A",{href:!0});var Jjt=s(KY);Awr=r(Jjt,"TFRobertaModel"),Jjt.forEach(t),Lwr=r(xOe," (RoBERTa model)"),xOe.forEach(t),ywr=i(D),KT=n(D,"LI",{});var $Oe=s(KT);DTe=n($Oe,"STRONG",{});var Yjt=s(DTe);xwr=r(Yjt,"roformer"),Yjt.forEach(t),$wr=r($Oe," \u2014 "),ZY=n($Oe,"A",{href:!0});var Kjt=s(ZY);kwr=r(Kjt,"TFRoFormerModel"),Kjt.forEach(t),Swr=r($Oe," (RoFormer model)"),$Oe.forEach(t),Rwr=i(D),ZT=n(D,"LI",{});var kOe=s(ZT);GTe=n(kOe,"STRONG",{});var Zjt=s(GTe);Pwr=r(Zjt,"segformer"),Zjt.forEach(t),Bwr=r(kOe," \u2014 "),eK=n(kOe,"A",{href:!0});var eDt=s(eK);Iwr=r(eDt,"TFSegformerModel"),eDt.forEach(t),Nwr=r(kOe," (SegFormer model)"),kOe.forEach(t),qwr=i(D),eM=n(D,"LI",{});var SOe=s(eM);OTe=n(SOe,"STRONG",{});var oDt=s(OTe);jwr=r(oDt,"speech_to_text"),oDt.forEach(t),Dwr=r(SOe," \u2014 "),oK=n(SOe,"A",{href:!0});var rDt=s(oK);Gwr=r(rDt,"TFSpeech2TextModel"),rDt.forEach(t),Owr=r(SOe," (Speech2Text model)"),SOe.forEach(t),Vwr=i(D),oM=n(D,"LI",{});var ROe=s(oM);VTe=n(ROe,"STRONG",{});var tDt=s(VTe);Xwr=r(tDt,"swin"),tDt.forEach(t),zwr=r(ROe," \u2014 "),rK=n(ROe,"A",{href:!0});var aDt=s(rK);Wwr=r(aDt,"TFSwinModel"),aDt.forEach(t),Qwr=r(ROe," (Swin Transformer model)"),ROe.forEach(t),Uwr=i(D),rM=n(D,"LI",{});var POe=s(rM);XTe=n(POe,"STRONG",{});var nDt=s(XTe);Hwr=r(nDt,"t5"),nDt.forEach(t),Jwr=r(POe," \u2014 "),tK=n(POe,"A",{href:!0});var sDt=s(tK);Ywr=r(sDt,"TFT5Model"),sDt.forEach(t),Kwr=r(POe," (T5 model)"),POe.forEach(t),Zwr=i(D),tM=n(D,"LI",{});var BOe=s(tM);zTe=n(BOe,"STRONG",{});var lDt=s(zTe);eAr=r(lDt,"tapas"),lDt.forEach(t),oAr=r(BOe," \u2014 "),aK=n(BOe,"A",{href:!0});var iDt=s(aK);rAr=r(iDt,"TFTapasModel"),iDt.forEach(t),tAr=r(BOe," (TAPAS model)"),BOe.forEach(t),aAr=i(D),aM=n(D,"LI",{});var IOe=s(aM);WTe=n(IOe,"STRONG",{});var dDt=s(WTe);nAr=r(dDt,"transfo-xl"),dDt.forEach(t),sAr=r(IOe," \u2014 "),nK=n(IOe,"A",{href:!0});var cDt=s(nK);lAr=r(cDt,"TFTransfoXLModel"),cDt.forEach(t),iAr=r(IOe," (Transformer-XL model)"),IOe.forEach(t),dAr=i(D),nM=n(D,"LI",{});var NOe=s(nM);QTe=n(NOe,"STRONG",{});var fDt=s(QTe);cAr=r(fDt,"vit"),fDt.forEach(t),fAr=r(NOe," \u2014 "),sK=n(NOe,"A",{href:!0});var mDt=s(sK);mAr=r(mDt,"TFViTModel"),mDt.forEach(t),gAr=r(NOe," (ViT model)"),NOe.forEach(t),hAr=i(D),sM=n(D,"LI",{});var qOe=s(sM);UTe=n(qOe,"STRONG",{});var gDt=s(UTe);pAr=r(gDt,"vit_mae"),gDt.forEach(t),_Ar=r(qOe," \u2014 "),lK=n(qOe,"A",{href:!0});var hDt=s(lK);uAr=r(hDt,"TFViTMAEModel"),hDt.forEach(t),bAr=r(qOe," (ViTMAE model)"),qOe.forEach(t),vAr=i(D),lM=n(D,"LI",{});var jOe=s(lM);HTe=n(jOe,"STRONG",{});var pDt=s(HTe);FAr=r(pDt,"wav2vec2"),pDt.forEach(t),TAr=r(jOe," \u2014 "),iK=n(jOe,"A",{href:!0});var _Dt=s(iK);MAr=r(_Dt,"TFWav2Vec2Model"),_Dt.forEach(t),EAr=r(jOe," (Wav2Vec2 model)"),jOe.forEach(t),CAr=i(D),iM=n(D,"LI",{});var DOe=s(iM);JTe=n(DOe,"STRONG",{});var uDt=s(JTe);wAr=r(uDt,"xglm"),uDt.forEach(t),AAr=r(DOe," \u2014 "),dK=n(DOe,"A",{href:!0});var bDt=s(dK);LAr=r(bDt,"TFXGLMModel"),bDt.forEach(t),yAr=r(DOe," (XGLM model)"),DOe.forEach(t),xAr=i(D),dM=n(D,"LI",{});var GOe=s(dM);YTe=n(GOe,"STRONG",{});var vDt=s(YTe);$Ar=r(vDt,"xlm"),vDt.forEach(t),kAr=r(GOe," \u2014 "),cK=n(GOe,"A",{href:!0});var FDt=s(cK);SAr=r(FDt,"TFXLMModel"),FDt.forEach(t),RAr=r(GOe," (XLM model)"),GOe.forEach(t),PAr=i(D),cM=n(D,"LI",{});var OOe=s(cM);KTe=n(OOe,"STRONG",{});var TDt=s(KTe);BAr=r(TDt,"xlm-roberta"),TDt.forEach(t),IAr=r(OOe," \u2014 "),fK=n(OOe,"A",{href:!0});var MDt=s(fK);NAr=r(MDt,"TFXLMRobertaModel"),MDt.forEach(t),qAr=r(OOe," (XLM-RoBERTa model)"),OOe.forEach(t),jAr=i(D),fM=n(D,"LI",{});var VOe=s(fM);ZTe=n(VOe,"STRONG",{});var EDt=s(ZTe);DAr=r(EDt,"xlnet"),EDt.forEach(t),GAr=r(VOe," \u2014 "),mK=n(VOe,"A",{href:!0});var CDt=s(mK);OAr=r(CDt,"TFXLNetModel"),CDt.forEach(t),VAr=r(VOe," (XLNet model)"),VOe.forEach(t),D.forEach(t),XAr=i(Vl),T(mM.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),nHe=i(f),Ac=n(f,"H2",{class:!0});var uYe=s(Ac);gM=n(uYe,"A",{id:!0,class:!0,href:!0});var wDt=s(gM);eMe=n(wDt,"SPAN",{});var ADt=s(eMe);T(f$.$$.fragment,ADt),ADt.forEach(t),wDt.forEach(t),zAr=i(uYe),oMe=n(uYe,"SPAN",{});var LDt=s(oMe);WAr=r(LDt,"TFAutoModelForPreTraining"),LDt.forEach(t),uYe.forEach(t),sHe=i(f),nr=n(f,"DIV",{class:!0});var Xl=s(nr);T(m$.$$.fragment,Xl),QAr=i(Xl),Lc=n(Xl,"P",{});var One=s(Lc);UAr=r(One,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gK=n(One,"A",{href:!0});var yDt=s(gK);HAr=r(yDt,"from_pretrained()"),yDt.forEach(t),JAr=r(One," class method or the "),hK=n(One,"A",{href:!0});var xDt=s(hK);YAr=r(xDt,"from_config()"),xDt.forEach(t),KAr=r(One,` class
method.`),One.forEach(t),ZAr=i(Xl),g$=n(Xl,"P",{});var bYe=s(g$);e7r=r(bYe,"This class cannot be instantiated directly using "),rMe=n(bYe,"CODE",{});var $Dt=s(rMe);o7r=r($Dt,"__init__()"),$Dt.forEach(t),r7r=r(bYe," (throws an error)."),bYe.forEach(t),t7r=i(Xl),jt=n(Xl,"DIV",{class:!0});var gy=s(jt);T(h$.$$.fragment,gy),a7r=i(gy),tMe=n(gy,"P",{});var kDt=s(tMe);n7r=r(kDt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kDt.forEach(t),s7r=i(gy),yc=n(gy,"P",{});var Vne=s(yc);l7r=r(Vne,`Note:
Loading a model from its configuration file does `),aMe=n(Vne,"STRONG",{});var SDt=s(aMe);i7r=r(SDt,"not"),SDt.forEach(t),d7r=r(Vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=n(Vne,"A",{href:!0});var RDt=s(pK);c7r=r(RDt,"from_pretrained()"),RDt.forEach(t),f7r=r(Vne," to load the model weights."),Vne.forEach(t),m7r=i(gy),T(hM.$$.fragment,gy),gy.forEach(t),g7r=i(Xl),Pr=n(Xl,"DIV",{class:!0});var zl=s(Pr);T(p$.$$.fragment,zl),h7r=i(zl),nMe=n(zl,"P",{});var PDt=s(nMe);p7r=r(PDt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),PDt.forEach(t),_7r=i(zl),un=n(zl,"P",{});var hy=s(un);u7r=r(hy,"The model class to instantiate is selected based on the "),sMe=n(hy,"CODE",{});var BDt=s(sMe);b7r=r(BDt,"model_type"),BDt.forEach(t),v7r=r(hy,` property of the config object (either
passed as an argument or loaded from `),lMe=n(hy,"CODE",{});var IDt=s(lMe);F7r=r(IDt,"pretrained_model_name_or_path"),IDt.forEach(t),T7r=r(hy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iMe=n(hy,"CODE",{});var NDt=s(iMe);M7r=r(NDt,"pretrained_model_name_or_path"),NDt.forEach(t),E7r=r(hy,":"),hy.forEach(t),C7r=i(zl),se=n(zl,"UL",{});var le=s(se);pM=n(le,"LI",{});var XOe=s(pM);dMe=n(XOe,"STRONG",{});var qDt=s(dMe);w7r=r(qDt,"albert"),qDt.forEach(t),A7r=r(XOe," \u2014 "),_K=n(XOe,"A",{href:!0});var jDt=s(_K);L7r=r(jDt,"TFAlbertForPreTraining"),jDt.forEach(t),y7r=r(XOe," (ALBERT model)"),XOe.forEach(t),x7r=i(le),_M=n(le,"LI",{});var zOe=s(_M);cMe=n(zOe,"STRONG",{});var DDt=s(cMe);$7r=r(DDt,"bart"),DDt.forEach(t),k7r=r(zOe," \u2014 "),uK=n(zOe,"A",{href:!0});var GDt=s(uK);S7r=r(GDt,"TFBartForConditionalGeneration"),GDt.forEach(t),R7r=r(zOe," (BART model)"),zOe.forEach(t),P7r=i(le),uM=n(le,"LI",{});var WOe=s(uM);fMe=n(WOe,"STRONG",{});var ODt=s(fMe);B7r=r(ODt,"bert"),ODt.forEach(t),I7r=r(WOe," \u2014 "),bK=n(WOe,"A",{href:!0});var VDt=s(bK);N7r=r(VDt,"TFBertForPreTraining"),VDt.forEach(t),q7r=r(WOe," (BERT model)"),WOe.forEach(t),j7r=i(le),bM=n(le,"LI",{});var QOe=s(bM);mMe=n(QOe,"STRONG",{});var XDt=s(mMe);D7r=r(XDt,"camembert"),XDt.forEach(t),G7r=r(QOe," \u2014 "),vK=n(QOe,"A",{href:!0});var zDt=s(vK);O7r=r(zDt,"TFCamembertForMaskedLM"),zDt.forEach(t),V7r=r(QOe," (CamemBERT model)"),QOe.forEach(t),X7r=i(le),vM=n(le,"LI",{});var UOe=s(vM);gMe=n(UOe,"STRONG",{});var WDt=s(gMe);z7r=r(WDt,"ctrl"),WDt.forEach(t),W7r=r(UOe," \u2014 "),FK=n(UOe,"A",{href:!0});var QDt=s(FK);Q7r=r(QDt,"TFCTRLLMHeadModel"),QDt.forEach(t),U7r=r(UOe," (CTRL model)"),UOe.forEach(t),H7r=i(le),FM=n(le,"LI",{});var HOe=s(FM);hMe=n(HOe,"STRONG",{});var UDt=s(hMe);J7r=r(UDt,"distilbert"),UDt.forEach(t),Y7r=r(HOe," \u2014 "),TK=n(HOe,"A",{href:!0});var HDt=s(TK);K7r=r(HDt,"TFDistilBertForMaskedLM"),HDt.forEach(t),Z7r=r(HOe," (DistilBERT model)"),HOe.forEach(t),eLr=i(le),TM=n(le,"LI",{});var JOe=s(TM);pMe=n(JOe,"STRONG",{});var JDt=s(pMe);oLr=r(JDt,"electra"),JDt.forEach(t),rLr=r(JOe," \u2014 "),MK=n(JOe,"A",{href:!0});var YDt=s(MK);tLr=r(YDt,"TFElectraForPreTraining"),YDt.forEach(t),aLr=r(JOe," (ELECTRA model)"),JOe.forEach(t),nLr=i(le),MM=n(le,"LI",{});var YOe=s(MM);_Me=n(YOe,"STRONG",{});var KDt=s(_Me);sLr=r(KDt,"flaubert"),KDt.forEach(t),lLr=r(YOe," \u2014 "),EK=n(YOe,"A",{href:!0});var ZDt=s(EK);iLr=r(ZDt,"TFFlaubertWithLMHeadModel"),ZDt.forEach(t),dLr=r(YOe," (FlauBERT model)"),YOe.forEach(t),cLr=i(le),EM=n(le,"LI",{});var KOe=s(EM);uMe=n(KOe,"STRONG",{});var eGt=s(uMe);fLr=r(eGt,"funnel"),eGt.forEach(t),mLr=r(KOe," \u2014 "),CK=n(KOe,"A",{href:!0});var oGt=s(CK);gLr=r(oGt,"TFFunnelForPreTraining"),oGt.forEach(t),hLr=r(KOe," (Funnel Transformer model)"),KOe.forEach(t),pLr=i(le),CM=n(le,"LI",{});var ZOe=s(CM);bMe=n(ZOe,"STRONG",{});var rGt=s(bMe);_Lr=r(rGt,"gpt2"),rGt.forEach(t),uLr=r(ZOe," \u2014 "),wK=n(ZOe,"A",{href:!0});var tGt=s(wK);bLr=r(tGt,"TFGPT2LMHeadModel"),tGt.forEach(t),vLr=r(ZOe," (OpenAI GPT-2 model)"),ZOe.forEach(t),FLr=i(le),wM=n(le,"LI",{});var eVe=s(wM);vMe=n(eVe,"STRONG",{});var aGt=s(vMe);TLr=r(aGt,"layoutlm"),aGt.forEach(t),MLr=r(eVe," \u2014 "),AK=n(eVe,"A",{href:!0});var nGt=s(AK);ELr=r(nGt,"TFLayoutLMForMaskedLM"),nGt.forEach(t),CLr=r(eVe," (LayoutLM model)"),eVe.forEach(t),wLr=i(le),AM=n(le,"LI",{});var oVe=s(AM);FMe=n(oVe,"STRONG",{});var sGt=s(FMe);ALr=r(sGt,"lxmert"),sGt.forEach(t),LLr=r(oVe," \u2014 "),LK=n(oVe,"A",{href:!0});var lGt=s(LK);yLr=r(lGt,"TFLxmertForPreTraining"),lGt.forEach(t),xLr=r(oVe," (LXMERT model)"),oVe.forEach(t),$Lr=i(le),LM=n(le,"LI",{});var rVe=s(LM);TMe=n(rVe,"STRONG",{});var iGt=s(TMe);kLr=r(iGt,"mobilebert"),iGt.forEach(t),SLr=r(rVe," \u2014 "),yK=n(rVe,"A",{href:!0});var dGt=s(yK);RLr=r(dGt,"TFMobileBertForPreTraining"),dGt.forEach(t),PLr=r(rVe," (MobileBERT model)"),rVe.forEach(t),BLr=i(le),yM=n(le,"LI",{});var tVe=s(yM);MMe=n(tVe,"STRONG",{});var cGt=s(MMe);ILr=r(cGt,"mpnet"),cGt.forEach(t),NLr=r(tVe," \u2014 "),xK=n(tVe,"A",{href:!0});var fGt=s(xK);qLr=r(fGt,"TFMPNetForMaskedLM"),fGt.forEach(t),jLr=r(tVe," (MPNet model)"),tVe.forEach(t),DLr=i(le),xM=n(le,"LI",{});var aVe=s(xM);EMe=n(aVe,"STRONG",{});var mGt=s(EMe);GLr=r(mGt,"openai-gpt"),mGt.forEach(t),OLr=r(aVe," \u2014 "),$K=n(aVe,"A",{href:!0});var gGt=s($K);VLr=r(gGt,"TFOpenAIGPTLMHeadModel"),gGt.forEach(t),XLr=r(aVe," (OpenAI GPT model)"),aVe.forEach(t),zLr=i(le),$M=n(le,"LI",{});var nVe=s($M);CMe=n(nVe,"STRONG",{});var hGt=s(CMe);WLr=r(hGt,"roberta"),hGt.forEach(t),QLr=r(nVe," \u2014 "),kK=n(nVe,"A",{href:!0});var pGt=s(kK);ULr=r(pGt,"TFRobertaForMaskedLM"),pGt.forEach(t),HLr=r(nVe," (RoBERTa model)"),nVe.forEach(t),JLr=i(le),kM=n(le,"LI",{});var sVe=s(kM);wMe=n(sVe,"STRONG",{});var _Gt=s(wMe);YLr=r(_Gt,"t5"),_Gt.forEach(t),KLr=r(sVe," \u2014 "),SK=n(sVe,"A",{href:!0});var uGt=s(SK);ZLr=r(uGt,"TFT5ForConditionalGeneration"),uGt.forEach(t),eyr=r(sVe," (T5 model)"),sVe.forEach(t),oyr=i(le),SM=n(le,"LI",{});var lVe=s(SM);AMe=n(lVe,"STRONG",{});var bGt=s(AMe);ryr=r(bGt,"tapas"),bGt.forEach(t),tyr=r(lVe," \u2014 "),RK=n(lVe,"A",{href:!0});var vGt=s(RK);ayr=r(vGt,"TFTapasForMaskedLM"),vGt.forEach(t),nyr=r(lVe," (TAPAS model)"),lVe.forEach(t),syr=i(le),RM=n(le,"LI",{});var iVe=s(RM);LMe=n(iVe,"STRONG",{});var FGt=s(LMe);lyr=r(FGt,"transfo-xl"),FGt.forEach(t),iyr=r(iVe," \u2014 "),PK=n(iVe,"A",{href:!0});var TGt=s(PK);dyr=r(TGt,"TFTransfoXLLMHeadModel"),TGt.forEach(t),cyr=r(iVe," (Transformer-XL model)"),iVe.forEach(t),fyr=i(le),PM=n(le,"LI",{});var dVe=s(PM);yMe=n(dVe,"STRONG",{});var MGt=s(yMe);myr=r(MGt,"vit_mae"),MGt.forEach(t),gyr=r(dVe," \u2014 "),BK=n(dVe,"A",{href:!0});var EGt=s(BK);hyr=r(EGt,"TFViTMAEForPreTraining"),EGt.forEach(t),pyr=r(dVe," (ViTMAE model)"),dVe.forEach(t),_yr=i(le),BM=n(le,"LI",{});var cVe=s(BM);xMe=n(cVe,"STRONG",{});var CGt=s(xMe);uyr=r(CGt,"xlm"),CGt.forEach(t),byr=r(cVe," \u2014 "),IK=n(cVe,"A",{href:!0});var wGt=s(IK);vyr=r(wGt,"TFXLMWithLMHeadModel"),wGt.forEach(t),Fyr=r(cVe," (XLM model)"),cVe.forEach(t),Tyr=i(le),IM=n(le,"LI",{});var fVe=s(IM);$Me=n(fVe,"STRONG",{});var AGt=s($Me);Myr=r(AGt,"xlm-roberta"),AGt.forEach(t),Eyr=r(fVe," \u2014 "),NK=n(fVe,"A",{href:!0});var LGt=s(NK);Cyr=r(LGt,"TFXLMRobertaForMaskedLM"),LGt.forEach(t),wyr=r(fVe," (XLM-RoBERTa model)"),fVe.forEach(t),Ayr=i(le),NM=n(le,"LI",{});var mVe=s(NM);kMe=n(mVe,"STRONG",{});var yGt=s(kMe);Lyr=r(yGt,"xlnet"),yGt.forEach(t),yyr=r(mVe," \u2014 "),qK=n(mVe,"A",{href:!0});var xGt=s(qK);xyr=r(xGt,"TFXLNetLMHeadModel"),xGt.forEach(t),$yr=r(mVe," (XLNet model)"),mVe.forEach(t),le.forEach(t),kyr=i(zl),T(qM.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),lHe=i(f),xc=n(f,"H2",{class:!0});var vYe=s(xc);jM=n(vYe,"A",{id:!0,class:!0,href:!0});var $Gt=s(jM);SMe=n($Gt,"SPAN",{});var kGt=s(SMe);T(_$.$$.fragment,kGt),kGt.forEach(t),$Gt.forEach(t),Syr=i(vYe),RMe=n(vYe,"SPAN",{});var SGt=s(RMe);Ryr=r(SGt,"TFAutoModelForCausalLM"),SGt.forEach(t),vYe.forEach(t),iHe=i(f),sr=n(f,"DIV",{class:!0});var Wl=s(sr);T(u$.$$.fragment,Wl),Pyr=i(Wl),$c=n(Wl,"P",{});var Xne=s($c);Byr=r(Xne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jK=n(Xne,"A",{href:!0});var RGt=s(jK);Iyr=r(RGt,"from_pretrained()"),RGt.forEach(t),Nyr=r(Xne," class method or the "),DK=n(Xne,"A",{href:!0});var PGt=s(DK);qyr=r(PGt,"from_config()"),PGt.forEach(t),jyr=r(Xne,` class
method.`),Xne.forEach(t),Dyr=i(Wl),b$=n(Wl,"P",{});var FYe=s(b$);Gyr=r(FYe,"This class cannot be instantiated directly using "),PMe=n(FYe,"CODE",{});var BGt=s(PMe);Oyr=r(BGt,"__init__()"),BGt.forEach(t),Vyr=r(FYe," (throws an error)."),FYe.forEach(t),Xyr=i(Wl),Dt=n(Wl,"DIV",{class:!0});var py=s(Dt);T(v$.$$.fragment,py),zyr=i(py),BMe=n(py,"P",{});var IGt=s(BMe);Wyr=r(IGt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),IGt.forEach(t),Qyr=i(py),kc=n(py,"P",{});var zne=s(kc);Uyr=r(zne,`Note:
Loading a model from its configuration file does `),IMe=n(zne,"STRONG",{});var NGt=s(IMe);Hyr=r(NGt,"not"),NGt.forEach(t),Jyr=r(zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),GK=n(zne,"A",{href:!0});var qGt=s(GK);Yyr=r(qGt,"from_pretrained()"),qGt.forEach(t),Kyr=r(zne," to load the model weights."),zne.forEach(t),Zyr=i(py),T(DM.$$.fragment,py),py.forEach(t),e8r=i(Wl),Br=n(Wl,"DIV",{class:!0});var Ql=s(Br);T(F$.$$.fragment,Ql),o8r=i(Ql),NMe=n(Ql,"P",{});var jGt=s(NMe);r8r=r(jGt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jGt.forEach(t),t8r=i(Ql),bn=n(Ql,"P",{});var _y=s(bn);a8r=r(_y,"The model class to instantiate is selected based on the "),qMe=n(_y,"CODE",{});var DGt=s(qMe);n8r=r(DGt,"model_type"),DGt.forEach(t),s8r=r(_y,` property of the config object (either
passed as an argument or loaded from `),jMe=n(_y,"CODE",{});var GGt=s(jMe);l8r=r(GGt,"pretrained_model_name_or_path"),GGt.forEach(t),i8r=r(_y,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DMe=n(_y,"CODE",{});var OGt=s(DMe);d8r=r(OGt,"pretrained_model_name_or_path"),OGt.forEach(t),c8r=r(_y,":"),_y.forEach(t),f8r=i(Ql),Me=n(Ql,"UL",{});var Ce=s(Me);GM=n(Ce,"LI",{});var gVe=s(GM);GMe=n(gVe,"STRONG",{});var VGt=s(GMe);m8r=r(VGt,"bert"),VGt.forEach(t),g8r=r(gVe," \u2014 "),OK=n(gVe,"A",{href:!0});var XGt=s(OK);h8r=r(XGt,"TFBertLMHeadModel"),XGt.forEach(t),p8r=r(gVe," (BERT model)"),gVe.forEach(t),_8r=i(Ce),OM=n(Ce,"LI",{});var hVe=s(OM);OMe=n(hVe,"STRONG",{});var zGt=s(OMe);u8r=r(zGt,"camembert"),zGt.forEach(t),b8r=r(hVe," \u2014 "),VK=n(hVe,"A",{href:!0});var WGt=s(VK);v8r=r(WGt,"TFCamembertForCausalLM"),WGt.forEach(t),F8r=r(hVe," (CamemBERT model)"),hVe.forEach(t),T8r=i(Ce),VM=n(Ce,"LI",{});var pVe=s(VM);VMe=n(pVe,"STRONG",{});var QGt=s(VMe);M8r=r(QGt,"ctrl"),QGt.forEach(t),E8r=r(pVe," \u2014 "),XK=n(pVe,"A",{href:!0});var UGt=s(XK);C8r=r(UGt,"TFCTRLLMHeadModel"),UGt.forEach(t),w8r=r(pVe," (CTRL model)"),pVe.forEach(t),A8r=i(Ce),XM=n(Ce,"LI",{});var _Ve=s(XM);XMe=n(_Ve,"STRONG",{});var HGt=s(XMe);L8r=r(HGt,"gpt2"),HGt.forEach(t),y8r=r(_Ve," \u2014 "),zK=n(_Ve,"A",{href:!0});var JGt=s(zK);x8r=r(JGt,"TFGPT2LMHeadModel"),JGt.forEach(t),$8r=r(_Ve," (OpenAI GPT-2 model)"),_Ve.forEach(t),k8r=i(Ce),zM=n(Ce,"LI",{});var uVe=s(zM);zMe=n(uVe,"STRONG",{});var YGt=s(zMe);S8r=r(YGt,"gptj"),YGt.forEach(t),R8r=r(uVe," \u2014 "),WK=n(uVe,"A",{href:!0});var KGt=s(WK);P8r=r(KGt,"TFGPTJForCausalLM"),KGt.forEach(t),B8r=r(uVe," (GPT-J model)"),uVe.forEach(t),I8r=i(Ce),WM=n(Ce,"LI",{});var bVe=s(WM);WMe=n(bVe,"STRONG",{});var ZGt=s(WMe);N8r=r(ZGt,"openai-gpt"),ZGt.forEach(t),q8r=r(bVe," \u2014 "),QK=n(bVe,"A",{href:!0});var eOt=s(QK);j8r=r(eOt,"TFOpenAIGPTLMHeadModel"),eOt.forEach(t),D8r=r(bVe," (OpenAI GPT model)"),bVe.forEach(t),G8r=i(Ce),QM=n(Ce,"LI",{});var vVe=s(QM);QMe=n(vVe,"STRONG",{});var oOt=s(QMe);O8r=r(oOt,"opt"),oOt.forEach(t),V8r=r(vVe," \u2014 "),UK=n(vVe,"A",{href:!0});var rOt=s(UK);X8r=r(rOt,"TFOPTForCausalLM"),rOt.forEach(t),z8r=r(vVe," (OPT model)"),vVe.forEach(t),W8r=i(Ce),UM=n(Ce,"LI",{});var FVe=s(UM);UMe=n(FVe,"STRONG",{});var tOt=s(UMe);Q8r=r(tOt,"rembert"),tOt.forEach(t),U8r=r(FVe," \u2014 "),HK=n(FVe,"A",{href:!0});var aOt=s(HK);H8r=r(aOt,"TFRemBertForCausalLM"),aOt.forEach(t),J8r=r(FVe," (RemBERT model)"),FVe.forEach(t),Y8r=i(Ce),HM=n(Ce,"LI",{});var TVe=s(HM);HMe=n(TVe,"STRONG",{});var nOt=s(HMe);K8r=r(nOt,"roberta"),nOt.forEach(t),Z8r=r(TVe," \u2014 "),JK=n(TVe,"A",{href:!0});var sOt=s(JK);e9r=r(sOt,"TFRobertaForCausalLM"),sOt.forEach(t),o9r=r(TVe," (RoBERTa model)"),TVe.forEach(t),r9r=i(Ce),JM=n(Ce,"LI",{});var MVe=s(JM);JMe=n(MVe,"STRONG",{});var lOt=s(JMe);t9r=r(lOt,"roformer"),lOt.forEach(t),a9r=r(MVe," \u2014 "),YK=n(MVe,"A",{href:!0});var iOt=s(YK);n9r=r(iOt,"TFRoFormerForCausalLM"),iOt.forEach(t),s9r=r(MVe," (RoFormer model)"),MVe.forEach(t),l9r=i(Ce),YM=n(Ce,"LI",{});var EVe=s(YM);YMe=n(EVe,"STRONG",{});var dOt=s(YMe);i9r=r(dOt,"transfo-xl"),dOt.forEach(t),d9r=r(EVe," \u2014 "),KK=n(EVe,"A",{href:!0});var cOt=s(KK);c9r=r(cOt,"TFTransfoXLLMHeadModel"),cOt.forEach(t),f9r=r(EVe," (Transformer-XL model)"),EVe.forEach(t),m9r=i(Ce),KM=n(Ce,"LI",{});var CVe=s(KM);KMe=n(CVe,"STRONG",{});var fOt=s(KMe);g9r=r(fOt,"xglm"),fOt.forEach(t),h9r=r(CVe," \u2014 "),ZK=n(CVe,"A",{href:!0});var mOt=s(ZK);p9r=r(mOt,"TFXGLMForCausalLM"),mOt.forEach(t),_9r=r(CVe," (XGLM model)"),CVe.forEach(t),u9r=i(Ce),ZM=n(Ce,"LI",{});var wVe=s(ZM);ZMe=n(wVe,"STRONG",{});var gOt=s(ZMe);b9r=r(gOt,"xlm"),gOt.forEach(t),v9r=r(wVe," \u2014 "),eZ=n(wVe,"A",{href:!0});var hOt=s(eZ);F9r=r(hOt,"TFXLMWithLMHeadModel"),hOt.forEach(t),T9r=r(wVe," (XLM model)"),wVe.forEach(t),M9r=i(Ce),eE=n(Ce,"LI",{});var AVe=s(eE);eEe=n(AVe,"STRONG",{});var pOt=s(eEe);E9r=r(pOt,"xlnet"),pOt.forEach(t),C9r=r(AVe," \u2014 "),oZ=n(AVe,"A",{href:!0});var _Ot=s(oZ);w9r=r(_Ot,"TFXLNetLMHeadModel"),_Ot.forEach(t),A9r=r(AVe," (XLNet model)"),AVe.forEach(t),Ce.forEach(t),L9r=i(Ql),T(oE.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),dHe=i(f),Sc=n(f,"H2",{class:!0});var TYe=s(Sc);rE=n(TYe,"A",{id:!0,class:!0,href:!0});var uOt=s(rE);oEe=n(uOt,"SPAN",{});var bOt=s(oEe);T(T$.$$.fragment,bOt),bOt.forEach(t),uOt.forEach(t),y9r=i(TYe),rEe=n(TYe,"SPAN",{});var vOt=s(rEe);x9r=r(vOt,"TFAutoModelForImageClassification"),vOt.forEach(t),TYe.forEach(t),cHe=i(f),lr=n(f,"DIV",{class:!0});var Ul=s(lr);T(M$.$$.fragment,Ul),$9r=i(Ul),Rc=n(Ul,"P",{});var Wne=s(Rc);k9r=r(Wne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rZ=n(Wne,"A",{href:!0});var FOt=s(rZ);S9r=r(FOt,"from_pretrained()"),FOt.forEach(t),R9r=r(Wne," class method or the "),tZ=n(Wne,"A",{href:!0});var TOt=s(tZ);P9r=r(TOt,"from_config()"),TOt.forEach(t),B9r=r(Wne,` class
method.`),Wne.forEach(t),I9r=i(Ul),E$=n(Ul,"P",{});var MYe=s(E$);N9r=r(MYe,"This class cannot be instantiated directly using "),tEe=n(MYe,"CODE",{});var MOt=s(tEe);q9r=r(MOt,"__init__()"),MOt.forEach(t),j9r=r(MYe," (throws an error)."),MYe.forEach(t),D9r=i(Ul),Gt=n(Ul,"DIV",{class:!0});var uy=s(Gt);T(C$.$$.fragment,uy),G9r=i(uy),aEe=n(uy,"P",{});var EOt=s(aEe);O9r=r(EOt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),EOt.forEach(t),V9r=i(uy),Pc=n(uy,"P",{});var Qne=s(Pc);X9r=r(Qne,`Note:
Loading a model from its configuration file does `),nEe=n(Qne,"STRONG",{});var COt=s(nEe);z9r=r(COt,"not"),COt.forEach(t),W9r=r(Qne,` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=n(Qne,"A",{href:!0});var wOt=s(aZ);Q9r=r(wOt,"from_pretrained()"),wOt.forEach(t),U9r=r(Qne," to load the model weights."),Qne.forEach(t),H9r=i(uy),T(tE.$$.fragment,uy),uy.forEach(t),J9r=i(Ul),Ir=n(Ul,"DIV",{class:!0});var Hl=s(Ir);T(w$.$$.fragment,Hl),Y9r=i(Hl),sEe=n(Hl,"P",{});var AOt=s(sEe);K9r=r(AOt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),AOt.forEach(t),Z9r=i(Hl),vn=n(Hl,"P",{});var by=s(vn);exr=r(by,"The model class to instantiate is selected based on the "),lEe=n(by,"CODE",{});var LOt=s(lEe);oxr=r(LOt,"model_type"),LOt.forEach(t),rxr=r(by,` property of the config object (either
passed as an argument or loaded from `),iEe=n(by,"CODE",{});var yOt=s(iEe);txr=r(yOt,"pretrained_model_name_or_path"),yOt.forEach(t),axr=r(by,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dEe=n(by,"CODE",{});var xOt=s(dEe);nxr=r(xOt,"pretrained_model_name_or_path"),xOt.forEach(t),sxr=r(by,":"),by.forEach(t),lxr=i(Hl),Ve=n(Hl,"UL",{});var Eo=s(Ve);aE=n(Eo,"LI",{});var LVe=s(aE);cEe=n(LVe,"STRONG",{});var $Ot=s(cEe);ixr=r($Ot,"convnext"),$Ot.forEach(t),dxr=r(LVe," \u2014 "),nZ=n(LVe,"A",{href:!0});var kOt=s(nZ);cxr=r(kOt,"TFConvNextForImageClassification"),kOt.forEach(t),fxr=r(LVe," (ConvNeXT model)"),LVe.forEach(t),mxr=i(Eo),nE=n(Eo,"LI",{});var yVe=s(nE);fEe=n(yVe,"STRONG",{});var SOt=s(fEe);gxr=r(SOt,"data2vec-vision"),SOt.forEach(t),hxr=r(yVe," \u2014 "),sZ=n(yVe,"A",{href:!0});var ROt=s(sZ);pxr=r(ROt,"TFData2VecVisionForImageClassification"),ROt.forEach(t),_xr=r(yVe," (Data2VecVision model)"),yVe.forEach(t),uxr=i(Eo),dl=n(Eo,"LI",{});var aP=s(dl);mEe=n(aP,"STRONG",{});var POt=s(mEe);bxr=r(POt,"deit"),POt.forEach(t),vxr=r(aP," \u2014 "),lZ=n(aP,"A",{href:!0});var BOt=s(lZ);Fxr=r(BOt,"TFDeiTForImageClassification"),BOt.forEach(t),Txr=r(aP," or "),iZ=n(aP,"A",{href:!0});var IOt=s(iZ);Mxr=r(IOt,"TFDeiTForImageClassificationWithTeacher"),IOt.forEach(t),Exr=r(aP," (DeiT model)"),aP.forEach(t),Cxr=i(Eo),sE=n(Eo,"LI",{});var xVe=s(sE);gEe=n(xVe,"STRONG",{});var NOt=s(gEe);wxr=r(NOt,"regnet"),NOt.forEach(t),Axr=r(xVe," \u2014 "),dZ=n(xVe,"A",{href:!0});var qOt=s(dZ);Lxr=r(qOt,"TFRegNetForImageClassification"),qOt.forEach(t),yxr=r(xVe," (RegNet model)"),xVe.forEach(t),xxr=i(Eo),lE=n(Eo,"LI",{});var $Ve=s(lE);hEe=n($Ve,"STRONG",{});var jOt=s(hEe);$xr=r(jOt,"resnet"),jOt.forEach(t),kxr=r($Ve," \u2014 "),cZ=n($Ve,"A",{href:!0});var DOt=s(cZ);Sxr=r(DOt,"TFResNetForImageClassification"),DOt.forEach(t),Rxr=r($Ve," (ResNet model)"),$Ve.forEach(t),Pxr=i(Eo),iE=n(Eo,"LI",{});var kVe=s(iE);pEe=n(kVe,"STRONG",{});var GOt=s(pEe);Bxr=r(GOt,"segformer"),GOt.forEach(t),Ixr=r(kVe," \u2014 "),fZ=n(kVe,"A",{href:!0});var OOt=s(fZ);Nxr=r(OOt,"TFSegformerForImageClassification"),OOt.forEach(t),qxr=r(kVe," (SegFormer model)"),kVe.forEach(t),jxr=i(Eo),dE=n(Eo,"LI",{});var SVe=s(dE);_Ee=n(SVe,"STRONG",{});var VOt=s(_Ee);Dxr=r(VOt,"swin"),VOt.forEach(t),Gxr=r(SVe," \u2014 "),mZ=n(SVe,"A",{href:!0});var XOt=s(mZ);Oxr=r(XOt,"TFSwinForImageClassification"),XOt.forEach(t),Vxr=r(SVe," (Swin Transformer model)"),SVe.forEach(t),Xxr=i(Eo),cE=n(Eo,"LI",{});var RVe=s(cE);uEe=n(RVe,"STRONG",{});var zOt=s(uEe);zxr=r(zOt,"vit"),zOt.forEach(t),Wxr=r(RVe," \u2014 "),gZ=n(RVe,"A",{href:!0});var WOt=s(gZ);Qxr=r(WOt,"TFViTForImageClassification"),WOt.forEach(t),Uxr=r(RVe," (ViT model)"),RVe.forEach(t),Eo.forEach(t),Hxr=i(Hl),T(fE.$$.fragment,Hl),Hl.forEach(t),Ul.forEach(t),fHe=i(f),Bc=n(f,"H2",{class:!0});var EYe=s(Bc);mE=n(EYe,"A",{id:!0,class:!0,href:!0});var QOt=s(mE);bEe=n(QOt,"SPAN",{});var UOt=s(bEe);T(A$.$$.fragment,UOt),UOt.forEach(t),QOt.forEach(t),Jxr=i(EYe),vEe=n(EYe,"SPAN",{});var HOt=s(vEe);Yxr=r(HOt,"TFAutoModelForSemanticSegmentation"),HOt.forEach(t),EYe.forEach(t),mHe=i(f),ir=n(f,"DIV",{class:!0});var Jl=s(ir);T(L$.$$.fragment,Jl),Kxr=i(Jl),Ic=n(Jl,"P",{});var Une=s(Ic);Zxr=r(Une,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),hZ=n(Une,"A",{href:!0});var JOt=s(hZ);e$r=r(JOt,"from_pretrained()"),JOt.forEach(t),o$r=r(Une," class method or the "),pZ=n(Une,"A",{href:!0});var YOt=s(pZ);r$r=r(YOt,"from_config()"),YOt.forEach(t),t$r=r(Une,` class
method.`),Une.forEach(t),a$r=i(Jl),y$=n(Jl,"P",{});var CYe=s(y$);n$r=r(CYe,"This class cannot be instantiated directly using "),FEe=n(CYe,"CODE",{});var KOt=s(FEe);s$r=r(KOt,"__init__()"),KOt.forEach(t),l$r=r(CYe," (throws an error)."),CYe.forEach(t),i$r=i(Jl),Ot=n(Jl,"DIV",{class:!0});var vy=s(Ot);T(x$.$$.fragment,vy),d$r=i(vy),TEe=n(vy,"P",{});var ZOt=s(TEe);c$r=r(ZOt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),ZOt.forEach(t),f$r=i(vy),Nc=n(vy,"P",{});var Hne=s(Nc);m$r=r(Hne,`Note:
Loading a model from its configuration file does `),MEe=n(Hne,"STRONG",{});var eVt=s(MEe);g$r=r(eVt,"not"),eVt.forEach(t),h$r=r(Hne,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=n(Hne,"A",{href:!0});var oVt=s(_Z);p$r=r(oVt,"from_pretrained()"),oVt.forEach(t),_$r=r(Hne," to load the model weights."),Hne.forEach(t),u$r=i(vy),T(gE.$$.fragment,vy),vy.forEach(t),b$r=i(Jl),Nr=n(Jl,"DIV",{class:!0});var Yl=s(Nr);T($$.$$.fragment,Yl),v$r=i(Yl),EEe=n(Yl,"P",{});var rVt=s(EEe);F$r=r(rVt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),rVt.forEach(t),T$r=i(Yl),Fn=n(Yl,"P",{});var Fy=s(Fn);M$r=r(Fy,"The model class to instantiate is selected based on the "),CEe=n(Fy,"CODE",{});var tVt=s(CEe);E$r=r(tVt,"model_type"),tVt.forEach(t),C$r=r(Fy,` property of the config object (either
passed as an argument or loaded from `),wEe=n(Fy,"CODE",{});var aVt=s(wEe);w$r=r(aVt,"pretrained_model_name_or_path"),aVt.forEach(t),A$r=r(Fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AEe=n(Fy,"CODE",{});var nVt=s(AEe);L$r=r(nVt,"pretrained_model_name_or_path"),nVt.forEach(t),y$r=r(Fy,":"),Fy.forEach(t),x$r=i(Yl),k$=n(Yl,"UL",{});var wYe=s(k$);hE=n(wYe,"LI",{});var PVe=s(hE);LEe=n(PVe,"STRONG",{});var sVt=s(LEe);$$r=r(sVt,"data2vec-vision"),sVt.forEach(t),k$r=r(PVe," \u2014 "),uZ=n(PVe,"A",{href:!0});var lVt=s(uZ);S$r=r(lVt,"TFData2VecVisionForSemanticSegmentation"),lVt.forEach(t),R$r=r(PVe," (Data2VecVision model)"),PVe.forEach(t),P$r=i(wYe),pE=n(wYe,"LI",{});var BVe=s(pE);yEe=n(BVe,"STRONG",{});var iVt=s(yEe);B$r=r(iVt,"segformer"),iVt.forEach(t),I$r=r(BVe," \u2014 "),bZ=n(BVe,"A",{href:!0});var dVt=s(bZ);N$r=r(dVt,"TFSegformerForSemanticSegmentation"),dVt.forEach(t),q$r=r(BVe," (SegFormer model)"),BVe.forEach(t),wYe.forEach(t),j$r=i(Yl),T(_E.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),gHe=i(f),qc=n(f,"H2",{class:!0});var AYe=s(qc);uE=n(AYe,"A",{id:!0,class:!0,href:!0});var cVt=s(uE);xEe=n(cVt,"SPAN",{});var fVt=s(xEe);T(S$.$$.fragment,fVt),fVt.forEach(t),cVt.forEach(t),D$r=i(AYe),$Ee=n(AYe,"SPAN",{});var mVt=s($Ee);G$r=r(mVt,"TFAutoModelForMaskedLM"),mVt.forEach(t),AYe.forEach(t),hHe=i(f),dr=n(f,"DIV",{class:!0});var Kl=s(dr);T(R$.$$.fragment,Kl),O$r=i(Kl),jc=n(Kl,"P",{});var Jne=s(jc);V$r=r(Jne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vZ=n(Jne,"A",{href:!0});var gVt=s(vZ);X$r=r(gVt,"from_pretrained()"),gVt.forEach(t),z$r=r(Jne," class method or the "),FZ=n(Jne,"A",{href:!0});var hVt=s(FZ);W$r=r(hVt,"from_config()"),hVt.forEach(t),Q$r=r(Jne,` class
method.`),Jne.forEach(t),U$r=i(Kl),P$=n(Kl,"P",{});var LYe=s(P$);H$r=r(LYe,"This class cannot be instantiated directly using "),kEe=n(LYe,"CODE",{});var pVt=s(kEe);J$r=r(pVt,"__init__()"),pVt.forEach(t),Y$r=r(LYe," (throws an error)."),LYe.forEach(t),K$r=i(Kl),Vt=n(Kl,"DIV",{class:!0});var Ty=s(Vt);T(B$.$$.fragment,Ty),Z$r=i(Ty),SEe=n(Ty,"P",{});var _Vt=s(SEe);ekr=r(_Vt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Vt.forEach(t),okr=i(Ty),Dc=n(Ty,"P",{});var Yne=s(Dc);rkr=r(Yne,`Note:
Loading a model from its configuration file does `),REe=n(Yne,"STRONG",{});var uVt=s(REe);tkr=r(uVt,"not"),uVt.forEach(t),akr=r(Yne,` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=n(Yne,"A",{href:!0});var bVt=s(TZ);nkr=r(bVt,"from_pretrained()"),bVt.forEach(t),skr=r(Yne," to load the model weights."),Yne.forEach(t),lkr=i(Ty),T(bE.$$.fragment,Ty),Ty.forEach(t),ikr=i(Kl),qr=n(Kl,"DIV",{class:!0});var Zl=s(qr);T(I$.$$.fragment,Zl),dkr=i(Zl),PEe=n(Zl,"P",{});var vVt=s(PEe);ckr=r(vVt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vVt.forEach(t),fkr=i(Zl),Tn=n(Zl,"P",{});var My=s(Tn);mkr=r(My,"The model class to instantiate is selected based on the "),BEe=n(My,"CODE",{});var FVt=s(BEe);gkr=r(FVt,"model_type"),FVt.forEach(t),hkr=r(My,` property of the config object (either
passed as an argument or loaded from `),IEe=n(My,"CODE",{});var TVt=s(IEe);pkr=r(TVt,"pretrained_model_name_or_path"),TVt.forEach(t),_kr=r(My,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NEe=n(My,"CODE",{});var MVt=s(NEe);ukr=r(MVt,"pretrained_model_name_or_path"),MVt.forEach(t),bkr=r(My,":"),My.forEach(t),vkr=i(Zl),de=n(Zl,"UL",{});var he=s(de);vE=n(he,"LI",{});var IVe=s(vE);qEe=n(IVe,"STRONG",{});var EVt=s(qEe);Fkr=r(EVt,"albert"),EVt.forEach(t),Tkr=r(IVe," \u2014 "),MZ=n(IVe,"A",{href:!0});var CVt=s(MZ);Mkr=r(CVt,"TFAlbertForMaskedLM"),CVt.forEach(t),Ekr=r(IVe," (ALBERT model)"),IVe.forEach(t),Ckr=i(he),FE=n(he,"LI",{});var NVe=s(FE);jEe=n(NVe,"STRONG",{});var wVt=s(jEe);wkr=r(wVt,"bert"),wVt.forEach(t),Akr=r(NVe," \u2014 "),EZ=n(NVe,"A",{href:!0});var AVt=s(EZ);Lkr=r(AVt,"TFBertForMaskedLM"),AVt.forEach(t),ykr=r(NVe," (BERT model)"),NVe.forEach(t),xkr=i(he),TE=n(he,"LI",{});var qVe=s(TE);DEe=n(qVe,"STRONG",{});var LVt=s(DEe);$kr=r(LVt,"camembert"),LVt.forEach(t),kkr=r(qVe," \u2014 "),CZ=n(qVe,"A",{href:!0});var yVt=s(CZ);Skr=r(yVt,"TFCamembertForMaskedLM"),yVt.forEach(t),Rkr=r(qVe," (CamemBERT model)"),qVe.forEach(t),Pkr=i(he),ME=n(he,"LI",{});var jVe=s(ME);GEe=n(jVe,"STRONG",{});var xVt=s(GEe);Bkr=r(xVt,"convbert"),xVt.forEach(t),Ikr=r(jVe," \u2014 "),wZ=n(jVe,"A",{href:!0});var $Vt=s(wZ);Nkr=r($Vt,"TFConvBertForMaskedLM"),$Vt.forEach(t),qkr=r(jVe," (ConvBERT model)"),jVe.forEach(t),jkr=i(he),EE=n(he,"LI",{});var DVe=s(EE);OEe=n(DVe,"STRONG",{});var kVt=s(OEe);Dkr=r(kVt,"deberta"),kVt.forEach(t),Gkr=r(DVe," \u2014 "),AZ=n(DVe,"A",{href:!0});var SVt=s(AZ);Okr=r(SVt,"TFDebertaForMaskedLM"),SVt.forEach(t),Vkr=r(DVe," (DeBERTa model)"),DVe.forEach(t),Xkr=i(he),CE=n(he,"LI",{});var GVe=s(CE);VEe=n(GVe,"STRONG",{});var RVt=s(VEe);zkr=r(RVt,"deberta-v2"),RVt.forEach(t),Wkr=r(GVe," \u2014 "),LZ=n(GVe,"A",{href:!0});var PVt=s(LZ);Qkr=r(PVt,"TFDebertaV2ForMaskedLM"),PVt.forEach(t),Ukr=r(GVe," (DeBERTa-v2 model)"),GVe.forEach(t),Hkr=i(he),wE=n(he,"LI",{});var OVe=s(wE);XEe=n(OVe,"STRONG",{});var BVt=s(XEe);Jkr=r(BVt,"distilbert"),BVt.forEach(t),Ykr=r(OVe," \u2014 "),yZ=n(OVe,"A",{href:!0});var IVt=s(yZ);Kkr=r(IVt,"TFDistilBertForMaskedLM"),IVt.forEach(t),Zkr=r(OVe," (DistilBERT model)"),OVe.forEach(t),eSr=i(he),AE=n(he,"LI",{});var VVe=s(AE);zEe=n(VVe,"STRONG",{});var NVt=s(zEe);oSr=r(NVt,"electra"),NVt.forEach(t),rSr=r(VVe," \u2014 "),xZ=n(VVe,"A",{href:!0});var qVt=s(xZ);tSr=r(qVt,"TFElectraForMaskedLM"),qVt.forEach(t),aSr=r(VVe," (ELECTRA model)"),VVe.forEach(t),nSr=i(he),LE=n(he,"LI",{});var XVe=s(LE);WEe=n(XVe,"STRONG",{});var jVt=s(WEe);sSr=r(jVt,"flaubert"),jVt.forEach(t),lSr=r(XVe," \u2014 "),$Z=n(XVe,"A",{href:!0});var DVt=s($Z);iSr=r(DVt,"TFFlaubertWithLMHeadModel"),DVt.forEach(t),dSr=r(XVe," (FlauBERT model)"),XVe.forEach(t),cSr=i(he),yE=n(he,"LI",{});var zVe=s(yE);QEe=n(zVe,"STRONG",{});var GVt=s(QEe);fSr=r(GVt,"funnel"),GVt.forEach(t),mSr=r(zVe," \u2014 "),kZ=n(zVe,"A",{href:!0});var OVt=s(kZ);gSr=r(OVt,"TFFunnelForMaskedLM"),OVt.forEach(t),hSr=r(zVe," (Funnel Transformer model)"),zVe.forEach(t),pSr=i(he),xE=n(he,"LI",{});var WVe=s(xE);UEe=n(WVe,"STRONG",{});var VVt=s(UEe);_Sr=r(VVt,"layoutlm"),VVt.forEach(t),uSr=r(WVe," \u2014 "),SZ=n(WVe,"A",{href:!0});var XVt=s(SZ);bSr=r(XVt,"TFLayoutLMForMaskedLM"),XVt.forEach(t),vSr=r(WVe," (LayoutLM model)"),WVe.forEach(t),FSr=i(he),$E=n(he,"LI",{});var QVe=s($E);HEe=n(QVe,"STRONG",{});var zVt=s(HEe);TSr=r(zVt,"longformer"),zVt.forEach(t),MSr=r(QVe," \u2014 "),RZ=n(QVe,"A",{href:!0});var WVt=s(RZ);ESr=r(WVt,"TFLongformerForMaskedLM"),WVt.forEach(t),CSr=r(QVe," (Longformer model)"),QVe.forEach(t),wSr=i(he),kE=n(he,"LI",{});var UVe=s(kE);JEe=n(UVe,"STRONG",{});var QVt=s(JEe);ASr=r(QVt,"mobilebert"),QVt.forEach(t),LSr=r(UVe," \u2014 "),PZ=n(UVe,"A",{href:!0});var UVt=s(PZ);ySr=r(UVt,"TFMobileBertForMaskedLM"),UVt.forEach(t),xSr=r(UVe," (MobileBERT model)"),UVe.forEach(t),$Sr=i(he),SE=n(he,"LI",{});var HVe=s(SE);YEe=n(HVe,"STRONG",{});var HVt=s(YEe);kSr=r(HVt,"mpnet"),HVt.forEach(t),SSr=r(HVe," \u2014 "),BZ=n(HVe,"A",{href:!0});var JVt=s(BZ);RSr=r(JVt,"TFMPNetForMaskedLM"),JVt.forEach(t),PSr=r(HVe," (MPNet model)"),HVe.forEach(t),BSr=i(he),RE=n(he,"LI",{});var JVe=s(RE);KEe=n(JVe,"STRONG",{});var YVt=s(KEe);ISr=r(YVt,"rembert"),YVt.forEach(t),NSr=r(JVe," \u2014 "),IZ=n(JVe,"A",{href:!0});var KVt=s(IZ);qSr=r(KVt,"TFRemBertForMaskedLM"),KVt.forEach(t),jSr=r(JVe," (RemBERT model)"),JVe.forEach(t),DSr=i(he),PE=n(he,"LI",{});var YVe=s(PE);ZEe=n(YVe,"STRONG",{});var ZVt=s(ZEe);GSr=r(ZVt,"roberta"),ZVt.forEach(t),OSr=r(YVe," \u2014 "),NZ=n(YVe,"A",{href:!0});var eXt=s(NZ);VSr=r(eXt,"TFRobertaForMaskedLM"),eXt.forEach(t),XSr=r(YVe," (RoBERTa model)"),YVe.forEach(t),zSr=i(he),BE=n(he,"LI",{});var KVe=s(BE);eCe=n(KVe,"STRONG",{});var oXt=s(eCe);WSr=r(oXt,"roformer"),oXt.forEach(t),QSr=r(KVe," \u2014 "),qZ=n(KVe,"A",{href:!0});var rXt=s(qZ);USr=r(rXt,"TFRoFormerForMaskedLM"),rXt.forEach(t),HSr=r(KVe," (RoFormer model)"),KVe.forEach(t),JSr=i(he),IE=n(he,"LI",{});var ZVe=s(IE);oCe=n(ZVe,"STRONG",{});var tXt=s(oCe);YSr=r(tXt,"tapas"),tXt.forEach(t),KSr=r(ZVe," \u2014 "),jZ=n(ZVe,"A",{href:!0});var aXt=s(jZ);ZSr=r(aXt,"TFTapasForMaskedLM"),aXt.forEach(t),eRr=r(ZVe," (TAPAS model)"),ZVe.forEach(t),oRr=i(he),NE=n(he,"LI",{});var eXe=s(NE);rCe=n(eXe,"STRONG",{});var nXt=s(rCe);rRr=r(nXt,"xlm"),nXt.forEach(t),tRr=r(eXe," \u2014 "),DZ=n(eXe,"A",{href:!0});var sXt=s(DZ);aRr=r(sXt,"TFXLMWithLMHeadModel"),sXt.forEach(t),nRr=r(eXe," (XLM model)"),eXe.forEach(t),sRr=i(he),qE=n(he,"LI",{});var oXe=s(qE);tCe=n(oXe,"STRONG",{});var lXt=s(tCe);lRr=r(lXt,"xlm-roberta"),lXt.forEach(t),iRr=r(oXe," \u2014 "),GZ=n(oXe,"A",{href:!0});var iXt=s(GZ);dRr=r(iXt,"TFXLMRobertaForMaskedLM"),iXt.forEach(t),cRr=r(oXe," (XLM-RoBERTa model)"),oXe.forEach(t),he.forEach(t),fRr=i(Zl),T(jE.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),pHe=i(f),Gc=n(f,"H2",{class:!0});var yYe=s(Gc);DE=n(yYe,"A",{id:!0,class:!0,href:!0});var dXt=s(DE);aCe=n(dXt,"SPAN",{});var cXt=s(aCe);T(N$.$$.fragment,cXt),cXt.forEach(t),dXt.forEach(t),mRr=i(yYe),nCe=n(yYe,"SPAN",{});var fXt=s(nCe);gRr=r(fXt,"TFAutoModelForSeq2SeqLM"),fXt.forEach(t),yYe.forEach(t),_He=i(f),cr=n(f,"DIV",{class:!0});var ei=s(cr);T(q$.$$.fragment,ei),hRr=i(ei),Oc=n(ei,"P",{});var Kne=s(Oc);pRr=r(Kne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),OZ=n(Kne,"A",{href:!0});var mXt=s(OZ);_Rr=r(mXt,"from_pretrained()"),mXt.forEach(t),uRr=r(Kne," class method or the "),VZ=n(Kne,"A",{href:!0});var gXt=s(VZ);bRr=r(gXt,"from_config()"),gXt.forEach(t),vRr=r(Kne,` class
method.`),Kne.forEach(t),FRr=i(ei),j$=n(ei,"P",{});var xYe=s(j$);TRr=r(xYe,"This class cannot be instantiated directly using "),sCe=n(xYe,"CODE",{});var hXt=s(sCe);MRr=r(hXt,"__init__()"),hXt.forEach(t),ERr=r(xYe," (throws an error)."),xYe.forEach(t),CRr=i(ei),Xt=n(ei,"DIV",{class:!0});var Ey=s(Xt);T(D$.$$.fragment,Ey),wRr=i(Ey),lCe=n(Ey,"P",{});var pXt=s(lCe);ARr=r(pXt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),pXt.forEach(t),LRr=i(Ey),Vc=n(Ey,"P",{});var Zne=s(Vc);yRr=r(Zne,`Note:
Loading a model from its configuration file does `),iCe=n(Zne,"STRONG",{});var _Xt=s(iCe);xRr=r(_Xt,"not"),_Xt.forEach(t),$Rr=r(Zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=n(Zne,"A",{href:!0});var uXt=s(XZ);kRr=r(uXt,"from_pretrained()"),uXt.forEach(t),SRr=r(Zne," to load the model weights."),Zne.forEach(t),RRr=i(Ey),T(GE.$$.fragment,Ey),Ey.forEach(t),PRr=i(ei),jr=n(ei,"DIV",{class:!0});var oi=s(jr);T(G$.$$.fragment,oi),BRr=i(oi),dCe=n(oi,"P",{});var bXt=s(dCe);IRr=r(bXt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bXt.forEach(t),NRr=i(oi),Mn=n(oi,"P",{});var Cy=s(Mn);qRr=r(Cy,"The model class to instantiate is selected based on the "),cCe=n(Cy,"CODE",{});var vXt=s(cCe);jRr=r(vXt,"model_type"),vXt.forEach(t),DRr=r(Cy,` property of the config object (either
passed as an argument or loaded from `),fCe=n(Cy,"CODE",{});var FXt=s(fCe);GRr=r(FXt,"pretrained_model_name_or_path"),FXt.forEach(t),ORr=r(Cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mCe=n(Cy,"CODE",{});var TXt=s(mCe);VRr=r(TXt,"pretrained_model_name_or_path"),TXt.forEach(t),XRr=r(Cy,":"),Cy.forEach(t),zRr=i(oi),ye=n(oi,"UL",{});var Ie=s(ye);OE=n(Ie,"LI",{});var rXe=s(OE);gCe=n(rXe,"STRONG",{});var MXt=s(gCe);WRr=r(MXt,"bart"),MXt.forEach(t),QRr=r(rXe," \u2014 "),zZ=n(rXe,"A",{href:!0});var EXt=s(zZ);URr=r(EXt,"TFBartForConditionalGeneration"),EXt.forEach(t),HRr=r(rXe," (BART model)"),rXe.forEach(t),JRr=i(Ie),VE=n(Ie,"LI",{});var tXe=s(VE);hCe=n(tXe,"STRONG",{});var CXt=s(hCe);YRr=r(CXt,"blenderbot"),CXt.forEach(t),KRr=r(tXe," \u2014 "),WZ=n(tXe,"A",{href:!0});var wXt=s(WZ);ZRr=r(wXt,"TFBlenderbotForConditionalGeneration"),wXt.forEach(t),ePr=r(tXe," (Blenderbot model)"),tXe.forEach(t),oPr=i(Ie),XE=n(Ie,"LI",{});var aXe=s(XE);pCe=n(aXe,"STRONG",{});var AXt=s(pCe);rPr=r(AXt,"blenderbot-small"),AXt.forEach(t),tPr=r(aXe," \u2014 "),QZ=n(aXe,"A",{href:!0});var LXt=s(QZ);aPr=r(LXt,"TFBlenderbotSmallForConditionalGeneration"),LXt.forEach(t),nPr=r(aXe," (BlenderbotSmall model)"),aXe.forEach(t),sPr=i(Ie),zE=n(Ie,"LI",{});var nXe=s(zE);_Ce=n(nXe,"STRONG",{});var yXt=s(_Ce);lPr=r(yXt,"encoder-decoder"),yXt.forEach(t),iPr=r(nXe," \u2014 "),UZ=n(nXe,"A",{href:!0});var xXt=s(UZ);dPr=r(xXt,"TFEncoderDecoderModel"),xXt.forEach(t),cPr=r(nXe," (Encoder decoder model)"),nXe.forEach(t),fPr=i(Ie),WE=n(Ie,"LI",{});var sXe=s(WE);uCe=n(sXe,"STRONG",{});var $Xt=s(uCe);mPr=r($Xt,"led"),$Xt.forEach(t),gPr=r(sXe," \u2014 "),HZ=n(sXe,"A",{href:!0});var kXt=s(HZ);hPr=r(kXt,"TFLEDForConditionalGeneration"),kXt.forEach(t),pPr=r(sXe," (LED model)"),sXe.forEach(t),_Pr=i(Ie),QE=n(Ie,"LI",{});var lXe=s(QE);bCe=n(lXe,"STRONG",{});var SXt=s(bCe);uPr=r(SXt,"marian"),SXt.forEach(t),bPr=r(lXe," \u2014 "),JZ=n(lXe,"A",{href:!0});var RXt=s(JZ);vPr=r(RXt,"TFMarianMTModel"),RXt.forEach(t),FPr=r(lXe," (Marian model)"),lXe.forEach(t),TPr=i(Ie),UE=n(Ie,"LI",{});var iXe=s(UE);vCe=n(iXe,"STRONG",{});var PXt=s(vCe);MPr=r(PXt,"mbart"),PXt.forEach(t),EPr=r(iXe," \u2014 "),YZ=n(iXe,"A",{href:!0});var BXt=s(YZ);CPr=r(BXt,"TFMBartForConditionalGeneration"),BXt.forEach(t),wPr=r(iXe," (mBART model)"),iXe.forEach(t),APr=i(Ie),HE=n(Ie,"LI",{});var dXe=s(HE);FCe=n(dXe,"STRONG",{});var IXt=s(FCe);LPr=r(IXt,"mt5"),IXt.forEach(t),yPr=r(dXe," \u2014 "),KZ=n(dXe,"A",{href:!0});var NXt=s(KZ);xPr=r(NXt,"TFMT5ForConditionalGeneration"),NXt.forEach(t),$Pr=r(dXe," (MT5 model)"),dXe.forEach(t),kPr=i(Ie),JE=n(Ie,"LI",{});var cXe=s(JE);TCe=n(cXe,"STRONG",{});var qXt=s(TCe);SPr=r(qXt,"pegasus"),qXt.forEach(t),RPr=r(cXe," \u2014 "),ZZ=n(cXe,"A",{href:!0});var jXt=s(ZZ);PPr=r(jXt,"TFPegasusForConditionalGeneration"),jXt.forEach(t),BPr=r(cXe," (Pegasus model)"),cXe.forEach(t),IPr=i(Ie),YE=n(Ie,"LI",{});var fXe=s(YE);MCe=n(fXe,"STRONG",{});var DXt=s(MCe);NPr=r(DXt,"t5"),DXt.forEach(t),qPr=r(fXe," \u2014 "),eee=n(fXe,"A",{href:!0});var GXt=s(eee);jPr=r(GXt,"TFT5ForConditionalGeneration"),GXt.forEach(t),DPr=r(fXe," (T5 model)"),fXe.forEach(t),Ie.forEach(t),GPr=i(oi),T(KE.$$.fragment,oi),oi.forEach(t),ei.forEach(t),uHe=i(f),Xc=n(f,"H2",{class:!0});var $Ye=s(Xc);ZE=n($Ye,"A",{id:!0,class:!0,href:!0});var OXt=s(ZE);ECe=n(OXt,"SPAN",{});var VXt=s(ECe);T(O$.$$.fragment,VXt),VXt.forEach(t),OXt.forEach(t),OPr=i($Ye),CCe=n($Ye,"SPAN",{});var XXt=s(CCe);VPr=r(XXt,"TFAutoModelForSequenceClassification"),XXt.forEach(t),$Ye.forEach(t),bHe=i(f),fr=n(f,"DIV",{class:!0});var ri=s(fr);T(V$.$$.fragment,ri),XPr=i(ri),zc=n(ri,"P",{});var ese=s(zc);zPr=r(ese,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oee=n(ese,"A",{href:!0});var zXt=s(oee);WPr=r(zXt,"from_pretrained()"),zXt.forEach(t),QPr=r(ese," class method or the "),ree=n(ese,"A",{href:!0});var WXt=s(ree);UPr=r(WXt,"from_config()"),WXt.forEach(t),HPr=r(ese,` class
method.`),ese.forEach(t),JPr=i(ri),X$=n(ri,"P",{});var kYe=s(X$);YPr=r(kYe,"This class cannot be instantiated directly using "),wCe=n(kYe,"CODE",{});var QXt=s(wCe);KPr=r(QXt,"__init__()"),QXt.forEach(t),ZPr=r(kYe," (throws an error)."),kYe.forEach(t),eBr=i(ri),zt=n(ri,"DIV",{class:!0});var wy=s(zt);T(z$.$$.fragment,wy),oBr=i(wy),ACe=n(wy,"P",{});var UXt=s(ACe);rBr=r(UXt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),UXt.forEach(t),tBr=i(wy),Wc=n(wy,"P",{});var ose=s(Wc);aBr=r(ose,`Note:
Loading a model from its configuration file does `),LCe=n(ose,"STRONG",{});var HXt=s(LCe);nBr=r(HXt,"not"),HXt.forEach(t),sBr=r(ose,` load the model weights. It only affects the
model\u2019s configuration. Use `),tee=n(ose,"A",{href:!0});var JXt=s(tee);lBr=r(JXt,"from_pretrained()"),JXt.forEach(t),iBr=r(ose," to load the model weights."),ose.forEach(t),dBr=i(wy),T(eC.$$.fragment,wy),wy.forEach(t),cBr=i(ri),Dr=n(ri,"DIV",{class:!0});var ti=s(Dr);T(W$.$$.fragment,ti),fBr=i(ti),yCe=n(ti,"P",{});var YXt=s(yCe);mBr=r(YXt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),YXt.forEach(t),gBr=i(ti),En=n(ti,"P",{});var Ay=s(En);hBr=r(Ay,"The model class to instantiate is selected based on the "),xCe=n(Ay,"CODE",{});var KXt=s(xCe);pBr=r(KXt,"model_type"),KXt.forEach(t),_Br=r(Ay,` property of the config object (either
passed as an argument or loaded from `),$Ce=n(Ay,"CODE",{});var ZXt=s($Ce);uBr=r(ZXt,"pretrained_model_name_or_path"),ZXt.forEach(t),bBr=r(Ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kCe=n(Ay,"CODE",{});var ezt=s(kCe);vBr=r(ezt,"pretrained_model_name_or_path"),ezt.forEach(t),FBr=r(Ay,":"),Ay.forEach(t),TBr=i(ti),te=n(ti,"UL",{});var ne=s(te);oC=n(ne,"LI",{});var mXe=s(oC);SCe=n(mXe,"STRONG",{});var ozt=s(SCe);MBr=r(ozt,"albert"),ozt.forEach(t),EBr=r(mXe," \u2014 "),aee=n(mXe,"A",{href:!0});var rzt=s(aee);CBr=r(rzt,"TFAlbertForSequenceClassification"),rzt.forEach(t),wBr=r(mXe," (ALBERT model)"),mXe.forEach(t),ABr=i(ne),rC=n(ne,"LI",{});var gXe=s(rC);RCe=n(gXe,"STRONG",{});var tzt=s(RCe);LBr=r(tzt,"bert"),tzt.forEach(t),yBr=r(gXe," \u2014 "),nee=n(gXe,"A",{href:!0});var azt=s(nee);xBr=r(azt,"TFBertForSequenceClassification"),azt.forEach(t),$Br=r(gXe," (BERT model)"),gXe.forEach(t),kBr=i(ne),tC=n(ne,"LI",{});var hXe=s(tC);PCe=n(hXe,"STRONG",{});var nzt=s(PCe);SBr=r(nzt,"camembert"),nzt.forEach(t),RBr=r(hXe," \u2014 "),see=n(hXe,"A",{href:!0});var szt=s(see);PBr=r(szt,"TFCamembertForSequenceClassification"),szt.forEach(t),BBr=r(hXe," (CamemBERT model)"),hXe.forEach(t),IBr=i(ne),aC=n(ne,"LI",{});var pXe=s(aC);BCe=n(pXe,"STRONG",{});var lzt=s(BCe);NBr=r(lzt,"convbert"),lzt.forEach(t),qBr=r(pXe," \u2014 "),lee=n(pXe,"A",{href:!0});var izt=s(lee);jBr=r(izt,"TFConvBertForSequenceClassification"),izt.forEach(t),DBr=r(pXe," (ConvBERT model)"),pXe.forEach(t),GBr=i(ne),nC=n(ne,"LI",{});var _Xe=s(nC);ICe=n(_Xe,"STRONG",{});var dzt=s(ICe);OBr=r(dzt,"ctrl"),dzt.forEach(t),VBr=r(_Xe," \u2014 "),iee=n(_Xe,"A",{href:!0});var czt=s(iee);XBr=r(czt,"TFCTRLForSequenceClassification"),czt.forEach(t),zBr=r(_Xe," (CTRL model)"),_Xe.forEach(t),WBr=i(ne),sC=n(ne,"LI",{});var uXe=s(sC);NCe=n(uXe,"STRONG",{});var fzt=s(NCe);QBr=r(fzt,"deberta"),fzt.forEach(t),UBr=r(uXe," \u2014 "),dee=n(uXe,"A",{href:!0});var mzt=s(dee);HBr=r(mzt,"TFDebertaForSequenceClassification"),mzt.forEach(t),JBr=r(uXe," (DeBERTa model)"),uXe.forEach(t),YBr=i(ne),lC=n(ne,"LI",{});var bXe=s(lC);qCe=n(bXe,"STRONG",{});var gzt=s(qCe);KBr=r(gzt,"deberta-v2"),gzt.forEach(t),ZBr=r(bXe," \u2014 "),cee=n(bXe,"A",{href:!0});var hzt=s(cee);eIr=r(hzt,"TFDebertaV2ForSequenceClassification"),hzt.forEach(t),oIr=r(bXe," (DeBERTa-v2 model)"),bXe.forEach(t),rIr=i(ne),iC=n(ne,"LI",{});var vXe=s(iC);jCe=n(vXe,"STRONG",{});var pzt=s(jCe);tIr=r(pzt,"distilbert"),pzt.forEach(t),aIr=r(vXe," \u2014 "),fee=n(vXe,"A",{href:!0});var _zt=s(fee);nIr=r(_zt,"TFDistilBertForSequenceClassification"),_zt.forEach(t),sIr=r(vXe," (DistilBERT model)"),vXe.forEach(t),lIr=i(ne),dC=n(ne,"LI",{});var FXe=s(dC);DCe=n(FXe,"STRONG",{});var uzt=s(DCe);iIr=r(uzt,"electra"),uzt.forEach(t),dIr=r(FXe," \u2014 "),mee=n(FXe,"A",{href:!0});var bzt=s(mee);cIr=r(bzt,"TFElectraForSequenceClassification"),bzt.forEach(t),fIr=r(FXe," (ELECTRA model)"),FXe.forEach(t),mIr=i(ne),cC=n(ne,"LI",{});var TXe=s(cC);GCe=n(TXe,"STRONG",{});var vzt=s(GCe);gIr=r(vzt,"flaubert"),vzt.forEach(t),hIr=r(TXe," \u2014 "),gee=n(TXe,"A",{href:!0});var Fzt=s(gee);pIr=r(Fzt,"TFFlaubertForSequenceClassification"),Fzt.forEach(t),_Ir=r(TXe," (FlauBERT model)"),TXe.forEach(t),uIr=i(ne),fC=n(ne,"LI",{});var MXe=s(fC);OCe=n(MXe,"STRONG",{});var Tzt=s(OCe);bIr=r(Tzt,"funnel"),Tzt.forEach(t),vIr=r(MXe," \u2014 "),hee=n(MXe,"A",{href:!0});var Mzt=s(hee);FIr=r(Mzt,"TFFunnelForSequenceClassification"),Mzt.forEach(t),TIr=r(MXe," (Funnel Transformer model)"),MXe.forEach(t),MIr=i(ne),mC=n(ne,"LI",{});var EXe=s(mC);VCe=n(EXe,"STRONG",{});var Ezt=s(VCe);EIr=r(Ezt,"gpt2"),Ezt.forEach(t),CIr=r(EXe," \u2014 "),pee=n(EXe,"A",{href:!0});var Czt=s(pee);wIr=r(Czt,"TFGPT2ForSequenceClassification"),Czt.forEach(t),AIr=r(EXe," (OpenAI GPT-2 model)"),EXe.forEach(t),LIr=i(ne),gC=n(ne,"LI",{});var CXe=s(gC);XCe=n(CXe,"STRONG",{});var wzt=s(XCe);yIr=r(wzt,"gptj"),wzt.forEach(t),xIr=r(CXe," \u2014 "),_ee=n(CXe,"A",{href:!0});var Azt=s(_ee);$Ir=r(Azt,"TFGPTJForSequenceClassification"),Azt.forEach(t),kIr=r(CXe," (GPT-J model)"),CXe.forEach(t),SIr=i(ne),hC=n(ne,"LI",{});var wXe=s(hC);zCe=n(wXe,"STRONG",{});var Lzt=s(zCe);RIr=r(Lzt,"layoutlm"),Lzt.forEach(t),PIr=r(wXe," \u2014 "),uee=n(wXe,"A",{href:!0});var yzt=s(uee);BIr=r(yzt,"TFLayoutLMForSequenceClassification"),yzt.forEach(t),IIr=r(wXe," (LayoutLM model)"),wXe.forEach(t),NIr=i(ne),pC=n(ne,"LI",{});var AXe=s(pC);WCe=n(AXe,"STRONG",{});var xzt=s(WCe);qIr=r(xzt,"longformer"),xzt.forEach(t),jIr=r(AXe," \u2014 "),bee=n(AXe,"A",{href:!0});var $zt=s(bee);DIr=r($zt,"TFLongformerForSequenceClassification"),$zt.forEach(t),GIr=r(AXe," (Longformer model)"),AXe.forEach(t),OIr=i(ne),_C=n(ne,"LI",{});var LXe=s(_C);QCe=n(LXe,"STRONG",{});var kzt=s(QCe);VIr=r(kzt,"mobilebert"),kzt.forEach(t),XIr=r(LXe," \u2014 "),vee=n(LXe,"A",{href:!0});var Szt=s(vee);zIr=r(Szt,"TFMobileBertForSequenceClassification"),Szt.forEach(t),WIr=r(LXe," (MobileBERT model)"),LXe.forEach(t),QIr=i(ne),uC=n(ne,"LI",{});var yXe=s(uC);UCe=n(yXe,"STRONG",{});var Rzt=s(UCe);UIr=r(Rzt,"mpnet"),Rzt.forEach(t),HIr=r(yXe," \u2014 "),Fee=n(yXe,"A",{href:!0});var Pzt=s(Fee);JIr=r(Pzt,"TFMPNetForSequenceClassification"),Pzt.forEach(t),YIr=r(yXe," (MPNet model)"),yXe.forEach(t),KIr=i(ne),bC=n(ne,"LI",{});var xXe=s(bC);HCe=n(xXe,"STRONG",{});var Bzt=s(HCe);ZIr=r(Bzt,"openai-gpt"),Bzt.forEach(t),eNr=r(xXe," \u2014 "),Tee=n(xXe,"A",{href:!0});var Izt=s(Tee);oNr=r(Izt,"TFOpenAIGPTForSequenceClassification"),Izt.forEach(t),rNr=r(xXe," (OpenAI GPT model)"),xXe.forEach(t),tNr=i(ne),vC=n(ne,"LI",{});var $Xe=s(vC);JCe=n($Xe,"STRONG",{});var Nzt=s(JCe);aNr=r(Nzt,"rembert"),Nzt.forEach(t),nNr=r($Xe," \u2014 "),Mee=n($Xe,"A",{href:!0});var qzt=s(Mee);sNr=r(qzt,"TFRemBertForSequenceClassification"),qzt.forEach(t),lNr=r($Xe," (RemBERT model)"),$Xe.forEach(t),iNr=i(ne),FC=n(ne,"LI",{});var kXe=s(FC);YCe=n(kXe,"STRONG",{});var jzt=s(YCe);dNr=r(jzt,"roberta"),jzt.forEach(t),cNr=r(kXe," \u2014 "),Eee=n(kXe,"A",{href:!0});var Dzt=s(Eee);fNr=r(Dzt,"TFRobertaForSequenceClassification"),Dzt.forEach(t),mNr=r(kXe," (RoBERTa model)"),kXe.forEach(t),gNr=i(ne),TC=n(ne,"LI",{});var SXe=s(TC);KCe=n(SXe,"STRONG",{});var Gzt=s(KCe);hNr=r(Gzt,"roformer"),Gzt.forEach(t),pNr=r(SXe," \u2014 "),Cee=n(SXe,"A",{href:!0});var Ozt=s(Cee);_Nr=r(Ozt,"TFRoFormerForSequenceClassification"),Ozt.forEach(t),uNr=r(SXe," (RoFormer model)"),SXe.forEach(t),bNr=i(ne),MC=n(ne,"LI",{});var RXe=s(MC);ZCe=n(RXe,"STRONG",{});var Vzt=s(ZCe);vNr=r(Vzt,"tapas"),Vzt.forEach(t),FNr=r(RXe," \u2014 "),wee=n(RXe,"A",{href:!0});var Xzt=s(wee);TNr=r(Xzt,"TFTapasForSequenceClassification"),Xzt.forEach(t),MNr=r(RXe," (TAPAS model)"),RXe.forEach(t),ENr=i(ne),EC=n(ne,"LI",{});var PXe=s(EC);e0e=n(PXe,"STRONG",{});var zzt=s(e0e);CNr=r(zzt,"transfo-xl"),zzt.forEach(t),wNr=r(PXe," \u2014 "),Aee=n(PXe,"A",{href:!0});var Wzt=s(Aee);ANr=r(Wzt,"TFTransfoXLForSequenceClassification"),Wzt.forEach(t),LNr=r(PXe," (Transformer-XL model)"),PXe.forEach(t),yNr=i(ne),CC=n(ne,"LI",{});var BXe=s(CC);o0e=n(BXe,"STRONG",{});var Qzt=s(o0e);xNr=r(Qzt,"xlm"),Qzt.forEach(t),$Nr=r(BXe," \u2014 "),Lee=n(BXe,"A",{href:!0});var Uzt=s(Lee);kNr=r(Uzt,"TFXLMForSequenceClassification"),Uzt.forEach(t),SNr=r(BXe," (XLM model)"),BXe.forEach(t),RNr=i(ne),wC=n(ne,"LI",{});var IXe=s(wC);r0e=n(IXe,"STRONG",{});var Hzt=s(r0e);PNr=r(Hzt,"xlm-roberta"),Hzt.forEach(t),BNr=r(IXe," \u2014 "),yee=n(IXe,"A",{href:!0});var Jzt=s(yee);INr=r(Jzt,"TFXLMRobertaForSequenceClassification"),Jzt.forEach(t),NNr=r(IXe," (XLM-RoBERTa model)"),IXe.forEach(t),qNr=i(ne),AC=n(ne,"LI",{});var NXe=s(AC);t0e=n(NXe,"STRONG",{});var Yzt=s(t0e);jNr=r(Yzt,"xlnet"),Yzt.forEach(t),DNr=r(NXe," \u2014 "),xee=n(NXe,"A",{href:!0});var Kzt=s(xee);GNr=r(Kzt,"TFXLNetForSequenceClassification"),Kzt.forEach(t),ONr=r(NXe," (XLNet model)"),NXe.forEach(t),ne.forEach(t),VNr=i(ti),T(LC.$$.fragment,ti),ti.forEach(t),ri.forEach(t),vHe=i(f),Qc=n(f,"H2",{class:!0});var SYe=s(Qc);yC=n(SYe,"A",{id:!0,class:!0,href:!0});var Zzt=s(yC);a0e=n(Zzt,"SPAN",{});var eWt=s(a0e);T(Q$.$$.fragment,eWt),eWt.forEach(t),Zzt.forEach(t),XNr=i(SYe),n0e=n(SYe,"SPAN",{});var oWt=s(n0e);zNr=r(oWt,"TFAutoModelForMultipleChoice"),oWt.forEach(t),SYe.forEach(t),FHe=i(f),mr=n(f,"DIV",{class:!0});var ai=s(mr);T(U$.$$.fragment,ai),WNr=i(ai),Uc=n(ai,"P",{});var rse=s(Uc);QNr=r(rse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$ee=n(rse,"A",{href:!0});var rWt=s($ee);UNr=r(rWt,"from_pretrained()"),rWt.forEach(t),HNr=r(rse," class method or the "),kee=n(rse,"A",{href:!0});var tWt=s(kee);JNr=r(tWt,"from_config()"),tWt.forEach(t),YNr=r(rse,` class
method.`),rse.forEach(t),KNr=i(ai),H$=n(ai,"P",{});var RYe=s(H$);ZNr=r(RYe,"This class cannot be instantiated directly using "),s0e=n(RYe,"CODE",{});var aWt=s(s0e);eqr=r(aWt,"__init__()"),aWt.forEach(t),oqr=r(RYe," (throws an error)."),RYe.forEach(t),rqr=i(ai),Wt=n(ai,"DIV",{class:!0});var Ly=s(Wt);T(J$.$$.fragment,Ly),tqr=i(Ly),l0e=n(Ly,"P",{});var nWt=s(l0e);aqr=r(nWt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nWt.forEach(t),nqr=i(Ly),Hc=n(Ly,"P",{});var tse=s(Hc);sqr=r(tse,`Note:
Loading a model from its configuration file does `),i0e=n(tse,"STRONG",{});var sWt=s(i0e);lqr=r(sWt,"not"),sWt.forEach(t),iqr=r(tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),See=n(tse,"A",{href:!0});var lWt=s(See);dqr=r(lWt,"from_pretrained()"),lWt.forEach(t),cqr=r(tse," to load the model weights."),tse.forEach(t),fqr=i(Ly),T(xC.$$.fragment,Ly),Ly.forEach(t),mqr=i(ai),Gr=n(ai,"DIV",{class:!0});var ni=s(Gr);T(Y$.$$.fragment,ni),gqr=i(ni),d0e=n(ni,"P",{});var iWt=s(d0e);hqr=r(iWt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),iWt.forEach(t),pqr=i(ni),Cn=n(ni,"P",{});var yy=s(Cn);_qr=r(yy,"The model class to instantiate is selected based on the "),c0e=n(yy,"CODE",{});var dWt=s(c0e);uqr=r(dWt,"model_type"),dWt.forEach(t),bqr=r(yy,` property of the config object (either
passed as an argument or loaded from `),f0e=n(yy,"CODE",{});var cWt=s(f0e);vqr=r(cWt,"pretrained_model_name_or_path"),cWt.forEach(t),Fqr=r(yy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m0e=n(yy,"CODE",{});var fWt=s(m0e);Tqr=r(fWt,"pretrained_model_name_or_path"),fWt.forEach(t),Mqr=r(yy,":"),yy.forEach(t),Eqr=i(ni),ve=n(ni,"UL",{});var Te=s(ve);$C=n(Te,"LI",{});var qXe=s($C);g0e=n(qXe,"STRONG",{});var mWt=s(g0e);Cqr=r(mWt,"albert"),mWt.forEach(t),wqr=r(qXe," \u2014 "),Ree=n(qXe,"A",{href:!0});var gWt=s(Ree);Aqr=r(gWt,"TFAlbertForMultipleChoice"),gWt.forEach(t),Lqr=r(qXe," (ALBERT model)"),qXe.forEach(t),yqr=i(Te),kC=n(Te,"LI",{});var jXe=s(kC);h0e=n(jXe,"STRONG",{});var hWt=s(h0e);xqr=r(hWt,"bert"),hWt.forEach(t),$qr=r(jXe," \u2014 "),Pee=n(jXe,"A",{href:!0});var pWt=s(Pee);kqr=r(pWt,"TFBertForMultipleChoice"),pWt.forEach(t),Sqr=r(jXe," (BERT model)"),jXe.forEach(t),Rqr=i(Te),SC=n(Te,"LI",{});var DXe=s(SC);p0e=n(DXe,"STRONG",{});var _Wt=s(p0e);Pqr=r(_Wt,"camembert"),_Wt.forEach(t),Bqr=r(DXe," \u2014 "),Bee=n(DXe,"A",{href:!0});var uWt=s(Bee);Iqr=r(uWt,"TFCamembertForMultipleChoice"),uWt.forEach(t),Nqr=r(DXe," (CamemBERT model)"),DXe.forEach(t),qqr=i(Te),RC=n(Te,"LI",{});var GXe=s(RC);_0e=n(GXe,"STRONG",{});var bWt=s(_0e);jqr=r(bWt,"convbert"),bWt.forEach(t),Dqr=r(GXe," \u2014 "),Iee=n(GXe,"A",{href:!0});var vWt=s(Iee);Gqr=r(vWt,"TFConvBertForMultipleChoice"),vWt.forEach(t),Oqr=r(GXe," (ConvBERT model)"),GXe.forEach(t),Vqr=i(Te),PC=n(Te,"LI",{});var OXe=s(PC);u0e=n(OXe,"STRONG",{});var FWt=s(u0e);Xqr=r(FWt,"distilbert"),FWt.forEach(t),zqr=r(OXe," \u2014 "),Nee=n(OXe,"A",{href:!0});var TWt=s(Nee);Wqr=r(TWt,"TFDistilBertForMultipleChoice"),TWt.forEach(t),Qqr=r(OXe," (DistilBERT model)"),OXe.forEach(t),Uqr=i(Te),BC=n(Te,"LI",{});var VXe=s(BC);b0e=n(VXe,"STRONG",{});var MWt=s(b0e);Hqr=r(MWt,"electra"),MWt.forEach(t),Jqr=r(VXe," \u2014 "),qee=n(VXe,"A",{href:!0});var EWt=s(qee);Yqr=r(EWt,"TFElectraForMultipleChoice"),EWt.forEach(t),Kqr=r(VXe," (ELECTRA model)"),VXe.forEach(t),Zqr=i(Te),IC=n(Te,"LI",{});var XXe=s(IC);v0e=n(XXe,"STRONG",{});var CWt=s(v0e);ejr=r(CWt,"flaubert"),CWt.forEach(t),ojr=r(XXe," \u2014 "),jee=n(XXe,"A",{href:!0});var wWt=s(jee);rjr=r(wWt,"TFFlaubertForMultipleChoice"),wWt.forEach(t),tjr=r(XXe," (FlauBERT model)"),XXe.forEach(t),ajr=i(Te),NC=n(Te,"LI",{});var zXe=s(NC);F0e=n(zXe,"STRONG",{});var AWt=s(F0e);njr=r(AWt,"funnel"),AWt.forEach(t),sjr=r(zXe," \u2014 "),Dee=n(zXe,"A",{href:!0});var LWt=s(Dee);ljr=r(LWt,"TFFunnelForMultipleChoice"),LWt.forEach(t),ijr=r(zXe," (Funnel Transformer model)"),zXe.forEach(t),djr=i(Te),qC=n(Te,"LI",{});var WXe=s(qC);T0e=n(WXe,"STRONG",{});var yWt=s(T0e);cjr=r(yWt,"longformer"),yWt.forEach(t),fjr=r(WXe," \u2014 "),Gee=n(WXe,"A",{href:!0});var xWt=s(Gee);mjr=r(xWt,"TFLongformerForMultipleChoice"),xWt.forEach(t),gjr=r(WXe," (Longformer model)"),WXe.forEach(t),hjr=i(Te),jC=n(Te,"LI",{});var QXe=s(jC);M0e=n(QXe,"STRONG",{});var $Wt=s(M0e);pjr=r($Wt,"mobilebert"),$Wt.forEach(t),_jr=r(QXe," \u2014 "),Oee=n(QXe,"A",{href:!0});var kWt=s(Oee);ujr=r(kWt,"TFMobileBertForMultipleChoice"),kWt.forEach(t),bjr=r(QXe," (MobileBERT model)"),QXe.forEach(t),vjr=i(Te),DC=n(Te,"LI",{});var UXe=s(DC);E0e=n(UXe,"STRONG",{});var SWt=s(E0e);Fjr=r(SWt,"mpnet"),SWt.forEach(t),Tjr=r(UXe," \u2014 "),Vee=n(UXe,"A",{href:!0});var RWt=s(Vee);Mjr=r(RWt,"TFMPNetForMultipleChoice"),RWt.forEach(t),Ejr=r(UXe," (MPNet model)"),UXe.forEach(t),Cjr=i(Te),GC=n(Te,"LI",{});var HXe=s(GC);C0e=n(HXe,"STRONG",{});var PWt=s(C0e);wjr=r(PWt,"rembert"),PWt.forEach(t),Ajr=r(HXe," \u2014 "),Xee=n(HXe,"A",{href:!0});var BWt=s(Xee);Ljr=r(BWt,"TFRemBertForMultipleChoice"),BWt.forEach(t),yjr=r(HXe," (RemBERT model)"),HXe.forEach(t),xjr=i(Te),OC=n(Te,"LI",{});var JXe=s(OC);w0e=n(JXe,"STRONG",{});var IWt=s(w0e);$jr=r(IWt,"roberta"),IWt.forEach(t),kjr=r(JXe," \u2014 "),zee=n(JXe,"A",{href:!0});var NWt=s(zee);Sjr=r(NWt,"TFRobertaForMultipleChoice"),NWt.forEach(t),Rjr=r(JXe," (RoBERTa model)"),JXe.forEach(t),Pjr=i(Te),VC=n(Te,"LI",{});var YXe=s(VC);A0e=n(YXe,"STRONG",{});var qWt=s(A0e);Bjr=r(qWt,"roformer"),qWt.forEach(t),Ijr=r(YXe," \u2014 "),Wee=n(YXe,"A",{href:!0});var jWt=s(Wee);Njr=r(jWt,"TFRoFormerForMultipleChoice"),jWt.forEach(t),qjr=r(YXe," (RoFormer model)"),YXe.forEach(t),jjr=i(Te),XC=n(Te,"LI",{});var KXe=s(XC);L0e=n(KXe,"STRONG",{});var DWt=s(L0e);Djr=r(DWt,"xlm"),DWt.forEach(t),Gjr=r(KXe," \u2014 "),Qee=n(KXe,"A",{href:!0});var GWt=s(Qee);Ojr=r(GWt,"TFXLMForMultipleChoice"),GWt.forEach(t),Vjr=r(KXe," (XLM model)"),KXe.forEach(t),Xjr=i(Te),zC=n(Te,"LI",{});var ZXe=s(zC);y0e=n(ZXe,"STRONG",{});var OWt=s(y0e);zjr=r(OWt,"xlm-roberta"),OWt.forEach(t),Wjr=r(ZXe," \u2014 "),Uee=n(ZXe,"A",{href:!0});var VWt=s(Uee);Qjr=r(VWt,"TFXLMRobertaForMultipleChoice"),VWt.forEach(t),Ujr=r(ZXe," (XLM-RoBERTa model)"),ZXe.forEach(t),Hjr=i(Te),WC=n(Te,"LI",{});var eze=s(WC);x0e=n(eze,"STRONG",{});var XWt=s(x0e);Jjr=r(XWt,"xlnet"),XWt.forEach(t),Yjr=r(eze," \u2014 "),Hee=n(eze,"A",{href:!0});var zWt=s(Hee);Kjr=r(zWt,"TFXLNetForMultipleChoice"),zWt.forEach(t),Zjr=r(eze," (XLNet model)"),eze.forEach(t),Te.forEach(t),eDr=i(ni),T(QC.$$.fragment,ni),ni.forEach(t),ai.forEach(t),THe=i(f),Jc=n(f,"H2",{class:!0});var PYe=s(Jc);UC=n(PYe,"A",{id:!0,class:!0,href:!0});var WWt=s(UC);$0e=n(WWt,"SPAN",{});var QWt=s($0e);T(K$.$$.fragment,QWt),QWt.forEach(t),WWt.forEach(t),oDr=i(PYe),k0e=n(PYe,"SPAN",{});var UWt=s(k0e);rDr=r(UWt,"TFAutoModelForNextSentencePrediction"),UWt.forEach(t),PYe.forEach(t),MHe=i(f),gr=n(f,"DIV",{class:!0});var si=s(gr);T(Z$.$$.fragment,si),tDr=i(si),Yc=n(si,"P",{});var ase=s(Yc);aDr=r(ase,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Jee=n(ase,"A",{href:!0});var HWt=s(Jee);nDr=r(HWt,"from_pretrained()"),HWt.forEach(t),sDr=r(ase," class method or the "),Yee=n(ase,"A",{href:!0});var JWt=s(Yee);lDr=r(JWt,"from_config()"),JWt.forEach(t),iDr=r(ase,` class
method.`),ase.forEach(t),dDr=i(si),ek=n(si,"P",{});var BYe=s(ek);cDr=r(BYe,"This class cannot be instantiated directly using "),S0e=n(BYe,"CODE",{});var YWt=s(S0e);fDr=r(YWt,"__init__()"),YWt.forEach(t),mDr=r(BYe," (throws an error)."),BYe.forEach(t),gDr=i(si),Qt=n(si,"DIV",{class:!0});var xy=s(Qt);T(ok.$$.fragment,xy),hDr=i(xy),R0e=n(xy,"P",{});var KWt=s(R0e);pDr=r(KWt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),KWt.forEach(t),_Dr=i(xy),Kc=n(xy,"P",{});var nse=s(Kc);uDr=r(nse,`Note:
Loading a model from its configuration file does `),P0e=n(nse,"STRONG",{});var ZWt=s(P0e);bDr=r(ZWt,"not"),ZWt.forEach(t),vDr=r(nse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kee=n(nse,"A",{href:!0});var eQt=s(Kee);FDr=r(eQt,"from_pretrained()"),eQt.forEach(t),TDr=r(nse," to load the model weights."),nse.forEach(t),MDr=i(xy),T(HC.$$.fragment,xy),xy.forEach(t),EDr=i(si),Or=n(si,"DIV",{class:!0});var li=s(Or);T(rk.$$.fragment,li),CDr=i(li),B0e=n(li,"P",{});var oQt=s(B0e);wDr=r(oQt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oQt.forEach(t),ADr=i(li),wn=n(li,"P",{});var $y=s(wn);LDr=r($y,"The model class to instantiate is selected based on the "),I0e=n($y,"CODE",{});var rQt=s(I0e);yDr=r(rQt,"model_type"),rQt.forEach(t),xDr=r($y,` property of the config object (either
passed as an argument or loaded from `),N0e=n($y,"CODE",{});var tQt=s(N0e);$Dr=r(tQt,"pretrained_model_name_or_path"),tQt.forEach(t),kDr=r($y,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q0e=n($y,"CODE",{});var aQt=s(q0e);SDr=r(aQt,"pretrained_model_name_or_path"),aQt.forEach(t),RDr=r($y,":"),$y.forEach(t),PDr=i(li),tk=n(li,"UL",{});var IYe=s(tk);JC=n(IYe,"LI",{});var oze=s(JC);j0e=n(oze,"STRONG",{});var nQt=s(j0e);BDr=r(nQt,"bert"),nQt.forEach(t),IDr=r(oze," \u2014 "),Zee=n(oze,"A",{href:!0});var sQt=s(Zee);NDr=r(sQt,"TFBertForNextSentencePrediction"),sQt.forEach(t),qDr=r(oze," (BERT model)"),oze.forEach(t),jDr=i(IYe),YC=n(IYe,"LI",{});var rze=s(YC);D0e=n(rze,"STRONG",{});var lQt=s(D0e);DDr=r(lQt,"mobilebert"),lQt.forEach(t),GDr=r(rze," \u2014 "),eoe=n(rze,"A",{href:!0});var iQt=s(eoe);ODr=r(iQt,"TFMobileBertForNextSentencePrediction"),iQt.forEach(t),VDr=r(rze," (MobileBERT model)"),rze.forEach(t),IYe.forEach(t),XDr=i(li),T(KC.$$.fragment,li),li.forEach(t),si.forEach(t),EHe=i(f),Zc=n(f,"H2",{class:!0});var NYe=s(Zc);ZC=n(NYe,"A",{id:!0,class:!0,href:!0});var dQt=s(ZC);G0e=n(dQt,"SPAN",{});var cQt=s(G0e);T(ak.$$.fragment,cQt),cQt.forEach(t),dQt.forEach(t),zDr=i(NYe),O0e=n(NYe,"SPAN",{});var fQt=s(O0e);WDr=r(fQt,"TFAutoModelForTableQuestionAnswering"),fQt.forEach(t),NYe.forEach(t),CHe=i(f),hr=n(f,"DIV",{class:!0});var ii=s(hr);T(nk.$$.fragment,ii),QDr=i(ii),ef=n(ii,"P",{});var sse=s(ef);UDr=r(sse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ooe=n(sse,"A",{href:!0});var mQt=s(ooe);HDr=r(mQt,"from_pretrained()"),mQt.forEach(t),JDr=r(sse," class method or the "),roe=n(sse,"A",{href:!0});var gQt=s(roe);YDr=r(gQt,"from_config()"),gQt.forEach(t),KDr=r(sse,` class
method.`),sse.forEach(t),ZDr=i(ii),sk=n(ii,"P",{});var qYe=s(sk);eGr=r(qYe,"This class cannot be instantiated directly using "),V0e=n(qYe,"CODE",{});var hQt=s(V0e);oGr=r(hQt,"__init__()"),hQt.forEach(t),rGr=r(qYe," (throws an error)."),qYe.forEach(t),tGr=i(ii),Ut=n(ii,"DIV",{class:!0});var ky=s(Ut);T(lk.$$.fragment,ky),aGr=i(ky),X0e=n(ky,"P",{});var pQt=s(X0e);nGr=r(pQt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),pQt.forEach(t),sGr=i(ky),of=n(ky,"P",{});var lse=s(of);lGr=r(lse,`Note:
Loading a model from its configuration file does `),z0e=n(lse,"STRONG",{});var _Qt=s(z0e);iGr=r(_Qt,"not"),_Qt.forEach(t),dGr=r(lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),toe=n(lse,"A",{href:!0});var uQt=s(toe);cGr=r(uQt,"from_pretrained()"),uQt.forEach(t),fGr=r(lse," to load the model weights."),lse.forEach(t),mGr=i(ky),T(e0.$$.fragment,ky),ky.forEach(t),gGr=i(ii),Vr=n(ii,"DIV",{class:!0});var di=s(Vr);T(ik.$$.fragment,di),hGr=i(di),W0e=n(di,"P",{});var bQt=s(W0e);pGr=r(bQt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bQt.forEach(t),_Gr=i(di),An=n(di,"P",{});var Sy=s(An);uGr=r(Sy,"The model class to instantiate is selected based on the "),Q0e=n(Sy,"CODE",{});var vQt=s(Q0e);bGr=r(vQt,"model_type"),vQt.forEach(t),vGr=r(Sy,` property of the config object (either
passed as an argument or loaded from `),U0e=n(Sy,"CODE",{});var FQt=s(U0e);FGr=r(FQt,"pretrained_model_name_or_path"),FQt.forEach(t),TGr=r(Sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=n(Sy,"CODE",{});var TQt=s(H0e);MGr=r(TQt,"pretrained_model_name_or_path"),TQt.forEach(t),EGr=r(Sy,":"),Sy.forEach(t),CGr=i(di),J0e=n(di,"UL",{});var MQt=s(J0e);o0=n(MQt,"LI",{});var tze=s(o0);Y0e=n(tze,"STRONG",{});var EQt=s(Y0e);wGr=r(EQt,"tapas"),EQt.forEach(t),AGr=r(tze," \u2014 "),aoe=n(tze,"A",{href:!0});var CQt=s(aoe);LGr=r(CQt,"TFTapasForQuestionAnswering"),CQt.forEach(t),yGr=r(tze," (TAPAS model)"),tze.forEach(t),MQt.forEach(t),xGr=i(di),T(r0.$$.fragment,di),di.forEach(t),ii.forEach(t),wHe=i(f),rf=n(f,"H2",{class:!0});var jYe=s(rf);t0=n(jYe,"A",{id:!0,class:!0,href:!0});var wQt=s(t0);K0e=n(wQt,"SPAN",{});var AQt=s(K0e);T(dk.$$.fragment,AQt),AQt.forEach(t),wQt.forEach(t),$Gr=i(jYe),Z0e=n(jYe,"SPAN",{});var LQt=s(Z0e);kGr=r(LQt,"TFAutoModelForTokenClassification"),LQt.forEach(t),jYe.forEach(t),AHe=i(f),pr=n(f,"DIV",{class:!0});var ci=s(pr);T(ck.$$.fragment,ci),SGr=i(ci),tf=n(ci,"P",{});var ise=s(tf);RGr=r(ise,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),noe=n(ise,"A",{href:!0});var yQt=s(noe);PGr=r(yQt,"from_pretrained()"),yQt.forEach(t),BGr=r(ise," class method or the "),soe=n(ise,"A",{href:!0});var xQt=s(soe);IGr=r(xQt,"from_config()"),xQt.forEach(t),NGr=r(ise,` class
method.`),ise.forEach(t),qGr=i(ci),fk=n(ci,"P",{});var DYe=s(fk);jGr=r(DYe,"This class cannot be instantiated directly using "),ewe=n(DYe,"CODE",{});var $Qt=s(ewe);DGr=r($Qt,"__init__()"),$Qt.forEach(t),GGr=r(DYe," (throws an error)."),DYe.forEach(t),OGr=i(ci),Ht=n(ci,"DIV",{class:!0});var Ry=s(Ht);T(mk.$$.fragment,Ry),VGr=i(Ry),owe=n(Ry,"P",{});var kQt=s(owe);XGr=r(kQt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kQt.forEach(t),zGr=i(Ry),af=n(Ry,"P",{});var dse=s(af);WGr=r(dse,`Note:
Loading a model from its configuration file does `),rwe=n(dse,"STRONG",{});var SQt=s(rwe);QGr=r(SQt,"not"),SQt.forEach(t),UGr=r(dse,` load the model weights. It only affects the
model\u2019s configuration. Use `),loe=n(dse,"A",{href:!0});var RQt=s(loe);HGr=r(RQt,"from_pretrained()"),RQt.forEach(t),JGr=r(dse," to load the model weights."),dse.forEach(t),YGr=i(Ry),T(a0.$$.fragment,Ry),Ry.forEach(t),KGr=i(ci),Xr=n(ci,"DIV",{class:!0});var fi=s(Xr);T(gk.$$.fragment,fi),ZGr=i(fi),twe=n(fi,"P",{});var PQt=s(twe);eOr=r(PQt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),PQt.forEach(t),oOr=i(fi),Ln=n(fi,"P",{});var Py=s(Ln);rOr=r(Py,"The model class to instantiate is selected based on the "),awe=n(Py,"CODE",{});var BQt=s(awe);tOr=r(BQt,"model_type"),BQt.forEach(t),aOr=r(Py,` property of the config object (either
passed as an argument or loaded from `),nwe=n(Py,"CODE",{});var IQt=s(nwe);nOr=r(IQt,"pretrained_model_name_or_path"),IQt.forEach(t),sOr=r(Py,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),swe=n(Py,"CODE",{});var NQt=s(swe);lOr=r(NQt,"pretrained_model_name_or_path"),NQt.forEach(t),iOr=r(Py,":"),Py.forEach(t),dOr=i(fi),ce=n(fi,"UL",{});var pe=s(ce);n0=n(pe,"LI",{});var aze=s(n0);lwe=n(aze,"STRONG",{});var qQt=s(lwe);cOr=r(qQt,"albert"),qQt.forEach(t),fOr=r(aze," \u2014 "),ioe=n(aze,"A",{href:!0});var jQt=s(ioe);mOr=r(jQt,"TFAlbertForTokenClassification"),jQt.forEach(t),gOr=r(aze," (ALBERT model)"),aze.forEach(t),hOr=i(pe),s0=n(pe,"LI",{});var nze=s(s0);iwe=n(nze,"STRONG",{});var DQt=s(iwe);pOr=r(DQt,"bert"),DQt.forEach(t),_Or=r(nze," \u2014 "),doe=n(nze,"A",{href:!0});var GQt=s(doe);uOr=r(GQt,"TFBertForTokenClassification"),GQt.forEach(t),bOr=r(nze," (BERT model)"),nze.forEach(t),vOr=i(pe),l0=n(pe,"LI",{});var sze=s(l0);dwe=n(sze,"STRONG",{});var OQt=s(dwe);FOr=r(OQt,"camembert"),OQt.forEach(t),TOr=r(sze," \u2014 "),coe=n(sze,"A",{href:!0});var VQt=s(coe);MOr=r(VQt,"TFCamembertForTokenClassification"),VQt.forEach(t),EOr=r(sze," (CamemBERT model)"),sze.forEach(t),COr=i(pe),i0=n(pe,"LI",{});var lze=s(i0);cwe=n(lze,"STRONG",{});var XQt=s(cwe);wOr=r(XQt,"convbert"),XQt.forEach(t),AOr=r(lze," \u2014 "),foe=n(lze,"A",{href:!0});var zQt=s(foe);LOr=r(zQt,"TFConvBertForTokenClassification"),zQt.forEach(t),yOr=r(lze," (ConvBERT model)"),lze.forEach(t),xOr=i(pe),d0=n(pe,"LI",{});var ize=s(d0);fwe=n(ize,"STRONG",{});var WQt=s(fwe);$Or=r(WQt,"deberta"),WQt.forEach(t),kOr=r(ize," \u2014 "),moe=n(ize,"A",{href:!0});var QQt=s(moe);SOr=r(QQt,"TFDebertaForTokenClassification"),QQt.forEach(t),ROr=r(ize," (DeBERTa model)"),ize.forEach(t),POr=i(pe),c0=n(pe,"LI",{});var dze=s(c0);mwe=n(dze,"STRONG",{});var UQt=s(mwe);BOr=r(UQt,"deberta-v2"),UQt.forEach(t),IOr=r(dze," \u2014 "),goe=n(dze,"A",{href:!0});var HQt=s(goe);NOr=r(HQt,"TFDebertaV2ForTokenClassification"),HQt.forEach(t),qOr=r(dze," (DeBERTa-v2 model)"),dze.forEach(t),jOr=i(pe),f0=n(pe,"LI",{});var cze=s(f0);gwe=n(cze,"STRONG",{});var JQt=s(gwe);DOr=r(JQt,"distilbert"),JQt.forEach(t),GOr=r(cze," \u2014 "),hoe=n(cze,"A",{href:!0});var YQt=s(hoe);OOr=r(YQt,"TFDistilBertForTokenClassification"),YQt.forEach(t),VOr=r(cze," (DistilBERT model)"),cze.forEach(t),XOr=i(pe),m0=n(pe,"LI",{});var fze=s(m0);hwe=n(fze,"STRONG",{});var KQt=s(hwe);zOr=r(KQt,"electra"),KQt.forEach(t),WOr=r(fze," \u2014 "),poe=n(fze,"A",{href:!0});var ZQt=s(poe);QOr=r(ZQt,"TFElectraForTokenClassification"),ZQt.forEach(t),UOr=r(fze," (ELECTRA model)"),fze.forEach(t),HOr=i(pe),g0=n(pe,"LI",{});var mze=s(g0);pwe=n(mze,"STRONG",{});var eUt=s(pwe);JOr=r(eUt,"flaubert"),eUt.forEach(t),YOr=r(mze," \u2014 "),_oe=n(mze,"A",{href:!0});var oUt=s(_oe);KOr=r(oUt,"TFFlaubertForTokenClassification"),oUt.forEach(t),ZOr=r(mze," (FlauBERT model)"),mze.forEach(t),eVr=i(pe),h0=n(pe,"LI",{});var gze=s(h0);_we=n(gze,"STRONG",{});var rUt=s(_we);oVr=r(rUt,"funnel"),rUt.forEach(t),rVr=r(gze," \u2014 "),uoe=n(gze,"A",{href:!0});var tUt=s(uoe);tVr=r(tUt,"TFFunnelForTokenClassification"),tUt.forEach(t),aVr=r(gze," (Funnel Transformer model)"),gze.forEach(t),nVr=i(pe),p0=n(pe,"LI",{});var hze=s(p0);uwe=n(hze,"STRONG",{});var aUt=s(uwe);sVr=r(aUt,"layoutlm"),aUt.forEach(t),lVr=r(hze," \u2014 "),boe=n(hze,"A",{href:!0});var nUt=s(boe);iVr=r(nUt,"TFLayoutLMForTokenClassification"),nUt.forEach(t),dVr=r(hze," (LayoutLM model)"),hze.forEach(t),cVr=i(pe),_0=n(pe,"LI",{});var pze=s(_0);bwe=n(pze,"STRONG",{});var sUt=s(bwe);fVr=r(sUt,"longformer"),sUt.forEach(t),mVr=r(pze," \u2014 "),voe=n(pze,"A",{href:!0});var lUt=s(voe);gVr=r(lUt,"TFLongformerForTokenClassification"),lUt.forEach(t),hVr=r(pze," (Longformer model)"),pze.forEach(t),pVr=i(pe),u0=n(pe,"LI",{});var _ze=s(u0);vwe=n(_ze,"STRONG",{});var iUt=s(vwe);_Vr=r(iUt,"mobilebert"),iUt.forEach(t),uVr=r(_ze," \u2014 "),Foe=n(_ze,"A",{href:!0});var dUt=s(Foe);bVr=r(dUt,"TFMobileBertForTokenClassification"),dUt.forEach(t),vVr=r(_ze," (MobileBERT model)"),_ze.forEach(t),FVr=i(pe),b0=n(pe,"LI",{});var uze=s(b0);Fwe=n(uze,"STRONG",{});var cUt=s(Fwe);TVr=r(cUt,"mpnet"),cUt.forEach(t),MVr=r(uze," \u2014 "),Toe=n(uze,"A",{href:!0});var fUt=s(Toe);EVr=r(fUt,"TFMPNetForTokenClassification"),fUt.forEach(t),CVr=r(uze," (MPNet model)"),uze.forEach(t),wVr=i(pe),v0=n(pe,"LI",{});var bze=s(v0);Twe=n(bze,"STRONG",{});var mUt=s(Twe);AVr=r(mUt,"rembert"),mUt.forEach(t),LVr=r(bze," \u2014 "),Moe=n(bze,"A",{href:!0});var gUt=s(Moe);yVr=r(gUt,"TFRemBertForTokenClassification"),gUt.forEach(t),xVr=r(bze," (RemBERT model)"),bze.forEach(t),$Vr=i(pe),F0=n(pe,"LI",{});var vze=s(F0);Mwe=n(vze,"STRONG",{});var hUt=s(Mwe);kVr=r(hUt,"roberta"),hUt.forEach(t),SVr=r(vze," \u2014 "),Eoe=n(vze,"A",{href:!0});var pUt=s(Eoe);RVr=r(pUt,"TFRobertaForTokenClassification"),pUt.forEach(t),PVr=r(vze," (RoBERTa model)"),vze.forEach(t),BVr=i(pe),T0=n(pe,"LI",{});var Fze=s(T0);Ewe=n(Fze,"STRONG",{});var _Ut=s(Ewe);IVr=r(_Ut,"roformer"),_Ut.forEach(t),NVr=r(Fze," \u2014 "),Coe=n(Fze,"A",{href:!0});var uUt=s(Coe);qVr=r(uUt,"TFRoFormerForTokenClassification"),uUt.forEach(t),jVr=r(Fze," (RoFormer model)"),Fze.forEach(t),DVr=i(pe),M0=n(pe,"LI",{});var Tze=s(M0);Cwe=n(Tze,"STRONG",{});var bUt=s(Cwe);GVr=r(bUt,"xlm"),bUt.forEach(t),OVr=r(Tze," \u2014 "),woe=n(Tze,"A",{href:!0});var vUt=s(woe);VVr=r(vUt,"TFXLMForTokenClassification"),vUt.forEach(t),XVr=r(Tze," (XLM model)"),Tze.forEach(t),zVr=i(pe),E0=n(pe,"LI",{});var Mze=s(E0);wwe=n(Mze,"STRONG",{});var FUt=s(wwe);WVr=r(FUt,"xlm-roberta"),FUt.forEach(t),QVr=r(Mze," \u2014 "),Aoe=n(Mze,"A",{href:!0});var TUt=s(Aoe);UVr=r(TUt,"TFXLMRobertaForTokenClassification"),TUt.forEach(t),HVr=r(Mze," (XLM-RoBERTa model)"),Mze.forEach(t),JVr=i(pe),C0=n(pe,"LI",{});var Eze=s(C0);Awe=n(Eze,"STRONG",{});var MUt=s(Awe);YVr=r(MUt,"xlnet"),MUt.forEach(t),KVr=r(Eze," \u2014 "),Loe=n(Eze,"A",{href:!0});var EUt=s(Loe);ZVr=r(EUt,"TFXLNetForTokenClassification"),EUt.forEach(t),eXr=r(Eze," (XLNet model)"),Eze.forEach(t),pe.forEach(t),oXr=i(fi),T(w0.$$.fragment,fi),fi.forEach(t),ci.forEach(t),LHe=i(f),nf=n(f,"H2",{class:!0});var GYe=s(nf);A0=n(GYe,"A",{id:!0,class:!0,href:!0});var CUt=s(A0);Lwe=n(CUt,"SPAN",{});var wUt=s(Lwe);T(hk.$$.fragment,wUt),wUt.forEach(t),CUt.forEach(t),rXr=i(GYe),ywe=n(GYe,"SPAN",{});var AUt=s(ywe);tXr=r(AUt,"TFAutoModelForQuestionAnswering"),AUt.forEach(t),GYe.forEach(t),yHe=i(f),_r=n(f,"DIV",{class:!0});var mi=s(_r);T(pk.$$.fragment,mi),aXr=i(mi),sf=n(mi,"P",{});var cse=s(sf);nXr=r(cse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yoe=n(cse,"A",{href:!0});var LUt=s(yoe);sXr=r(LUt,"from_pretrained()"),LUt.forEach(t),lXr=r(cse," class method or the "),xoe=n(cse,"A",{href:!0});var yUt=s(xoe);iXr=r(yUt,"from_config()"),yUt.forEach(t),dXr=r(cse,` class
method.`),cse.forEach(t),cXr=i(mi),_k=n(mi,"P",{});var OYe=s(_k);fXr=r(OYe,"This class cannot be instantiated directly using "),xwe=n(OYe,"CODE",{});var xUt=s(xwe);mXr=r(xUt,"__init__()"),xUt.forEach(t),gXr=r(OYe," (throws an error)."),OYe.forEach(t),hXr=i(mi),Jt=n(mi,"DIV",{class:!0});var By=s(Jt);T(uk.$$.fragment,By),pXr=i(By),$we=n(By,"P",{});var $Ut=s($we);_Xr=r($Ut,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$Ut.forEach(t),uXr=i(By),lf=n(By,"P",{});var fse=s(lf);bXr=r(fse,`Note:
Loading a model from its configuration file does `),kwe=n(fse,"STRONG",{});var kUt=s(kwe);vXr=r(kUt,"not"),kUt.forEach(t),FXr=r(fse,` load the model weights. It only affects the
model\u2019s configuration. Use `),$oe=n(fse,"A",{href:!0});var SUt=s($oe);TXr=r(SUt,"from_pretrained()"),SUt.forEach(t),MXr=r(fse," to load the model weights."),fse.forEach(t),EXr=i(By),T(L0.$$.fragment,By),By.forEach(t),CXr=i(mi),zr=n(mi,"DIV",{class:!0});var gi=s(zr);T(bk.$$.fragment,gi),wXr=i(gi),Swe=n(gi,"P",{});var RUt=s(Swe);AXr=r(RUt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),RUt.forEach(t),LXr=i(gi),yn=n(gi,"P",{});var Iy=s(yn);yXr=r(Iy,"The model class to instantiate is selected based on the "),Rwe=n(Iy,"CODE",{});var PUt=s(Rwe);xXr=r(PUt,"model_type"),PUt.forEach(t),$Xr=r(Iy,` property of the config object (either
passed as an argument or loaded from `),Pwe=n(Iy,"CODE",{});var BUt=s(Pwe);kXr=r(BUt,"pretrained_model_name_or_path"),BUt.forEach(t),SXr=r(Iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bwe=n(Iy,"CODE",{});var IUt=s(Bwe);RXr=r(IUt,"pretrained_model_name_or_path"),IUt.forEach(t),PXr=r(Iy,":"),Iy.forEach(t),BXr=i(gi),fe=n(gi,"UL",{});var _e=s(fe);y0=n(_e,"LI",{});var Cze=s(y0);Iwe=n(Cze,"STRONG",{});var NUt=s(Iwe);IXr=r(NUt,"albert"),NUt.forEach(t),NXr=r(Cze," \u2014 "),koe=n(Cze,"A",{href:!0});var qUt=s(koe);qXr=r(qUt,"TFAlbertForQuestionAnswering"),qUt.forEach(t),jXr=r(Cze," (ALBERT model)"),Cze.forEach(t),DXr=i(_e),x0=n(_e,"LI",{});var wze=s(x0);Nwe=n(wze,"STRONG",{});var jUt=s(Nwe);GXr=r(jUt,"bert"),jUt.forEach(t),OXr=r(wze," \u2014 "),Soe=n(wze,"A",{href:!0});var DUt=s(Soe);VXr=r(DUt,"TFBertForQuestionAnswering"),DUt.forEach(t),XXr=r(wze," (BERT model)"),wze.forEach(t),zXr=i(_e),$0=n(_e,"LI",{});var Aze=s($0);qwe=n(Aze,"STRONG",{});var GUt=s(qwe);WXr=r(GUt,"camembert"),GUt.forEach(t),QXr=r(Aze," \u2014 "),Roe=n(Aze,"A",{href:!0});var OUt=s(Roe);UXr=r(OUt,"TFCamembertForQuestionAnswering"),OUt.forEach(t),HXr=r(Aze," (CamemBERT model)"),Aze.forEach(t),JXr=i(_e),k0=n(_e,"LI",{});var Lze=s(k0);jwe=n(Lze,"STRONG",{});var VUt=s(jwe);YXr=r(VUt,"convbert"),VUt.forEach(t),KXr=r(Lze," \u2014 "),Poe=n(Lze,"A",{href:!0});var XUt=s(Poe);ZXr=r(XUt,"TFConvBertForQuestionAnswering"),XUt.forEach(t),ezr=r(Lze," (ConvBERT model)"),Lze.forEach(t),ozr=i(_e),S0=n(_e,"LI",{});var yze=s(S0);Dwe=n(yze,"STRONG",{});var zUt=s(Dwe);rzr=r(zUt,"deberta"),zUt.forEach(t),tzr=r(yze," \u2014 "),Boe=n(yze,"A",{href:!0});var WUt=s(Boe);azr=r(WUt,"TFDebertaForQuestionAnswering"),WUt.forEach(t),nzr=r(yze," (DeBERTa model)"),yze.forEach(t),szr=i(_e),R0=n(_e,"LI",{});var xze=s(R0);Gwe=n(xze,"STRONG",{});var QUt=s(Gwe);lzr=r(QUt,"deberta-v2"),QUt.forEach(t),izr=r(xze," \u2014 "),Ioe=n(xze,"A",{href:!0});var UUt=s(Ioe);dzr=r(UUt,"TFDebertaV2ForQuestionAnswering"),UUt.forEach(t),czr=r(xze," (DeBERTa-v2 model)"),xze.forEach(t),fzr=i(_e),P0=n(_e,"LI",{});var $ze=s(P0);Owe=n($ze,"STRONG",{});var HUt=s(Owe);mzr=r(HUt,"distilbert"),HUt.forEach(t),gzr=r($ze," \u2014 "),Noe=n($ze,"A",{href:!0});var JUt=s(Noe);hzr=r(JUt,"TFDistilBertForQuestionAnswering"),JUt.forEach(t),pzr=r($ze," (DistilBERT model)"),$ze.forEach(t),_zr=i(_e),B0=n(_e,"LI",{});var kze=s(B0);Vwe=n(kze,"STRONG",{});var YUt=s(Vwe);uzr=r(YUt,"electra"),YUt.forEach(t),bzr=r(kze," \u2014 "),qoe=n(kze,"A",{href:!0});var KUt=s(qoe);vzr=r(KUt,"TFElectraForQuestionAnswering"),KUt.forEach(t),Fzr=r(kze," (ELECTRA model)"),kze.forEach(t),Tzr=i(_e),I0=n(_e,"LI",{});var Sze=s(I0);Xwe=n(Sze,"STRONG",{});var ZUt=s(Xwe);Mzr=r(ZUt,"flaubert"),ZUt.forEach(t),Ezr=r(Sze," \u2014 "),joe=n(Sze,"A",{href:!0});var eHt=s(joe);Czr=r(eHt,"TFFlaubertForQuestionAnsweringSimple"),eHt.forEach(t),wzr=r(Sze," (FlauBERT model)"),Sze.forEach(t),Azr=i(_e),N0=n(_e,"LI",{});var Rze=s(N0);zwe=n(Rze,"STRONG",{});var oHt=s(zwe);Lzr=r(oHt,"funnel"),oHt.forEach(t),yzr=r(Rze," \u2014 "),Doe=n(Rze,"A",{href:!0});var rHt=s(Doe);xzr=r(rHt,"TFFunnelForQuestionAnswering"),rHt.forEach(t),$zr=r(Rze," (Funnel Transformer model)"),Rze.forEach(t),kzr=i(_e),q0=n(_e,"LI",{});var Pze=s(q0);Wwe=n(Pze,"STRONG",{});var tHt=s(Wwe);Szr=r(tHt,"gptj"),tHt.forEach(t),Rzr=r(Pze," \u2014 "),Goe=n(Pze,"A",{href:!0});var aHt=s(Goe);Pzr=r(aHt,"TFGPTJForQuestionAnswering"),aHt.forEach(t),Bzr=r(Pze," (GPT-J model)"),Pze.forEach(t),Izr=i(_e),j0=n(_e,"LI",{});var Bze=s(j0);Qwe=n(Bze,"STRONG",{});var nHt=s(Qwe);Nzr=r(nHt,"longformer"),nHt.forEach(t),qzr=r(Bze," \u2014 "),Ooe=n(Bze,"A",{href:!0});var sHt=s(Ooe);jzr=r(sHt,"TFLongformerForQuestionAnswering"),sHt.forEach(t),Dzr=r(Bze," (Longformer model)"),Bze.forEach(t),Gzr=i(_e),D0=n(_e,"LI",{});var Ize=s(D0);Uwe=n(Ize,"STRONG",{});var lHt=s(Uwe);Ozr=r(lHt,"mobilebert"),lHt.forEach(t),Vzr=r(Ize," \u2014 "),Voe=n(Ize,"A",{href:!0});var iHt=s(Voe);Xzr=r(iHt,"TFMobileBertForQuestionAnswering"),iHt.forEach(t),zzr=r(Ize," (MobileBERT model)"),Ize.forEach(t),Wzr=i(_e),G0=n(_e,"LI",{});var Nze=s(G0);Hwe=n(Nze,"STRONG",{});var dHt=s(Hwe);Qzr=r(dHt,"mpnet"),dHt.forEach(t),Uzr=r(Nze," \u2014 "),Xoe=n(Nze,"A",{href:!0});var cHt=s(Xoe);Hzr=r(cHt,"TFMPNetForQuestionAnswering"),cHt.forEach(t),Jzr=r(Nze," (MPNet model)"),Nze.forEach(t),Yzr=i(_e),O0=n(_e,"LI",{});var qze=s(O0);Jwe=n(qze,"STRONG",{});var fHt=s(Jwe);Kzr=r(fHt,"rembert"),fHt.forEach(t),Zzr=r(qze," \u2014 "),zoe=n(qze,"A",{href:!0});var mHt=s(zoe);eWr=r(mHt,"TFRemBertForQuestionAnswering"),mHt.forEach(t),oWr=r(qze," (RemBERT model)"),qze.forEach(t),rWr=i(_e),V0=n(_e,"LI",{});var jze=s(V0);Ywe=n(jze,"STRONG",{});var gHt=s(Ywe);tWr=r(gHt,"roberta"),gHt.forEach(t),aWr=r(jze," \u2014 "),Woe=n(jze,"A",{href:!0});var hHt=s(Woe);nWr=r(hHt,"TFRobertaForQuestionAnswering"),hHt.forEach(t),sWr=r(jze," (RoBERTa model)"),jze.forEach(t),lWr=i(_e),X0=n(_e,"LI",{});var Dze=s(X0);Kwe=n(Dze,"STRONG",{});var pHt=s(Kwe);iWr=r(pHt,"roformer"),pHt.forEach(t),dWr=r(Dze," \u2014 "),Qoe=n(Dze,"A",{href:!0});var _Ht=s(Qoe);cWr=r(_Ht,"TFRoFormerForQuestionAnswering"),_Ht.forEach(t),fWr=r(Dze," (RoFormer model)"),Dze.forEach(t),mWr=i(_e),z0=n(_e,"LI",{});var Gze=s(z0);Zwe=n(Gze,"STRONG",{});var uHt=s(Zwe);gWr=r(uHt,"xlm"),uHt.forEach(t),hWr=r(Gze," \u2014 "),Uoe=n(Gze,"A",{href:!0});var bHt=s(Uoe);pWr=r(bHt,"TFXLMForQuestionAnsweringSimple"),bHt.forEach(t),_Wr=r(Gze," (XLM model)"),Gze.forEach(t),uWr=i(_e),W0=n(_e,"LI",{});var Oze=s(W0);eAe=n(Oze,"STRONG",{});var vHt=s(eAe);bWr=r(vHt,"xlm-roberta"),vHt.forEach(t),vWr=r(Oze," \u2014 "),Hoe=n(Oze,"A",{href:!0});var FHt=s(Hoe);FWr=r(FHt,"TFXLMRobertaForQuestionAnswering"),FHt.forEach(t),TWr=r(Oze," (XLM-RoBERTa model)"),Oze.forEach(t),MWr=i(_e),Q0=n(_e,"LI",{});var Vze=s(Q0);oAe=n(Vze,"STRONG",{});var THt=s(oAe);EWr=r(THt,"xlnet"),THt.forEach(t),CWr=r(Vze," \u2014 "),Joe=n(Vze,"A",{href:!0});var MHt=s(Joe);wWr=r(MHt,"TFXLNetForQuestionAnsweringSimple"),MHt.forEach(t),AWr=r(Vze," (XLNet model)"),Vze.forEach(t),_e.forEach(t),LWr=i(gi),T(U0.$$.fragment,gi),gi.forEach(t),mi.forEach(t),xHe=i(f),df=n(f,"H2",{class:!0});var VYe=s(df);H0=n(VYe,"A",{id:!0,class:!0,href:!0});var EHt=s(H0);rAe=n(EHt,"SPAN",{});var CHt=s(rAe);T(vk.$$.fragment,CHt),CHt.forEach(t),EHt.forEach(t),yWr=i(VYe),tAe=n(VYe,"SPAN",{});var wHt=s(tAe);xWr=r(wHt,"TFAutoModelForVision2Seq"),wHt.forEach(t),VYe.forEach(t),$He=i(f),ur=n(f,"DIV",{class:!0});var hi=s(ur);T(Fk.$$.fragment,hi),$Wr=i(hi),cf=n(hi,"P",{});var mse=s(cf);kWr=r(mse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Yoe=n(mse,"A",{href:!0});var AHt=s(Yoe);SWr=r(AHt,"from_pretrained()"),AHt.forEach(t),RWr=r(mse," class method or the "),Koe=n(mse,"A",{href:!0});var LHt=s(Koe);PWr=r(LHt,"from_config()"),LHt.forEach(t),BWr=r(mse,` class
method.`),mse.forEach(t),IWr=i(hi),Tk=n(hi,"P",{});var XYe=s(Tk);NWr=r(XYe,"This class cannot be instantiated directly using "),aAe=n(XYe,"CODE",{});var yHt=s(aAe);qWr=r(yHt,"__init__()"),yHt.forEach(t),jWr=r(XYe," (throws an error)."),XYe.forEach(t),DWr=i(hi),Yt=n(hi,"DIV",{class:!0});var Ny=s(Yt);T(Mk.$$.fragment,Ny),GWr=i(Ny),nAe=n(Ny,"P",{});var xHt=s(nAe);OWr=r(xHt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xHt.forEach(t),VWr=i(Ny),ff=n(Ny,"P",{});var gse=s(ff);XWr=r(gse,`Note:
Loading a model from its configuration file does `),sAe=n(gse,"STRONG",{});var $Ht=s(sAe);zWr=r($Ht,"not"),$Ht.forEach(t),WWr=r(gse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=n(gse,"A",{href:!0});var kHt=s(Zoe);QWr=r(kHt,"from_pretrained()"),kHt.forEach(t),UWr=r(gse," to load the model weights."),gse.forEach(t),HWr=i(Ny),T(J0.$$.fragment,Ny),Ny.forEach(t),JWr=i(hi),Wr=n(hi,"DIV",{class:!0});var pi=s(Wr);T(Ek.$$.fragment,pi),YWr=i(pi),lAe=n(pi,"P",{});var SHt=s(lAe);KWr=r(SHt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),SHt.forEach(t),ZWr=i(pi),xn=n(pi,"P",{});var qy=s(xn);eQr=r(qy,"The model class to instantiate is selected based on the "),iAe=n(qy,"CODE",{});var RHt=s(iAe);oQr=r(RHt,"model_type"),RHt.forEach(t),rQr=r(qy,` property of the config object (either
passed as an argument or loaded from `),dAe=n(qy,"CODE",{});var PHt=s(dAe);tQr=r(PHt,"pretrained_model_name_or_path"),PHt.forEach(t),aQr=r(qy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cAe=n(qy,"CODE",{});var BHt=s(cAe);nQr=r(BHt,"pretrained_model_name_or_path"),BHt.forEach(t),sQr=r(qy,":"),qy.forEach(t),lQr=i(pi),fAe=n(pi,"UL",{});var IHt=s(fAe);Y0=n(IHt,"LI",{});var Xze=s(Y0);mAe=n(Xze,"STRONG",{});var NHt=s(mAe);iQr=r(NHt,"vision-encoder-decoder"),NHt.forEach(t),dQr=r(Xze," \u2014 "),ere=n(Xze,"A",{href:!0});var qHt=s(ere);cQr=r(qHt,"TFVisionEncoderDecoderModel"),qHt.forEach(t),fQr=r(Xze," (Vision Encoder decoder model)"),Xze.forEach(t),IHt.forEach(t),mQr=i(pi),T(K0.$$.fragment,pi),pi.forEach(t),hi.forEach(t),kHe=i(f),mf=n(f,"H2",{class:!0});var zYe=s(mf);Z0=n(zYe,"A",{id:!0,class:!0,href:!0});var jHt=s(Z0);gAe=n(jHt,"SPAN",{});var DHt=s(gAe);T(Ck.$$.fragment,DHt),DHt.forEach(t),jHt.forEach(t),gQr=i(zYe),hAe=n(zYe,"SPAN",{});var GHt=s(hAe);hQr=r(GHt,"TFAutoModelForSpeechSeq2Seq"),GHt.forEach(t),zYe.forEach(t),SHe=i(f),br=n(f,"DIV",{class:!0});var _i=s(br);T(wk.$$.fragment,_i),pQr=i(_i),gf=n(_i,"P",{});var hse=s(gf);_Qr=r(hse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ore=n(hse,"A",{href:!0});var OHt=s(ore);uQr=r(OHt,"from_pretrained()"),OHt.forEach(t),bQr=r(hse," class method or the "),rre=n(hse,"A",{href:!0});var VHt=s(rre);vQr=r(VHt,"from_config()"),VHt.forEach(t),FQr=r(hse,` class
method.`),hse.forEach(t),TQr=i(_i),Ak=n(_i,"P",{});var WYe=s(Ak);MQr=r(WYe,"This class cannot be instantiated directly using "),pAe=n(WYe,"CODE",{});var XHt=s(pAe);EQr=r(XHt,"__init__()"),XHt.forEach(t),CQr=r(WYe," (throws an error)."),WYe.forEach(t),wQr=i(_i),Kt=n(_i,"DIV",{class:!0});var jy=s(Kt);T(Lk.$$.fragment,jy),AQr=i(jy),_Ae=n(jy,"P",{});var zHt=s(_Ae);LQr=r(zHt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zHt.forEach(t),yQr=i(jy),hf=n(jy,"P",{});var pse=s(hf);xQr=r(pse,`Note:
Loading a model from its configuration file does `),uAe=n(pse,"STRONG",{});var WHt=s(uAe);$Qr=r(WHt,"not"),WHt.forEach(t),kQr=r(pse,` load the model weights. It only affects the
model\u2019s configuration. Use `),tre=n(pse,"A",{href:!0});var QHt=s(tre);SQr=r(QHt,"from_pretrained()"),QHt.forEach(t),RQr=r(pse," to load the model weights."),pse.forEach(t),PQr=i(jy),T(ew.$$.fragment,jy),jy.forEach(t),BQr=i(_i),Qr=n(_i,"DIV",{class:!0});var ui=s(Qr);T(yk.$$.fragment,ui),IQr=i(ui),bAe=n(ui,"P",{});var UHt=s(bAe);NQr=r(UHt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),UHt.forEach(t),qQr=i(ui),$n=n(ui,"P",{});var Dy=s($n);jQr=r(Dy,"The model class to instantiate is selected based on the "),vAe=n(Dy,"CODE",{});var HHt=s(vAe);DQr=r(HHt,"model_type"),HHt.forEach(t),GQr=r(Dy,` property of the config object (either
passed as an argument or loaded from `),FAe=n(Dy,"CODE",{});var JHt=s(FAe);OQr=r(JHt,"pretrained_model_name_or_path"),JHt.forEach(t),VQr=r(Dy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TAe=n(Dy,"CODE",{});var YHt=s(TAe);XQr=r(YHt,"pretrained_model_name_or_path"),YHt.forEach(t),zQr=r(Dy,":"),Dy.forEach(t),WQr=i(ui),MAe=n(ui,"UL",{});var KHt=s(MAe);ow=n(KHt,"LI",{});var zze=s(ow);EAe=n(zze,"STRONG",{});var ZHt=s(EAe);QQr=r(ZHt,"speech_to_text"),ZHt.forEach(t),UQr=r(zze," \u2014 "),are=n(zze,"A",{href:!0});var eJt=s(are);HQr=r(eJt,"TFSpeech2TextForConditionalGeneration"),eJt.forEach(t),JQr=r(zze," (Speech2Text model)"),zze.forEach(t),KHt.forEach(t),YQr=i(ui),T(rw.$$.fragment,ui),ui.forEach(t),_i.forEach(t),RHe=i(f),pf=n(f,"H2",{class:!0});var QYe=s(pf);tw=n(QYe,"A",{id:!0,class:!0,href:!0});var oJt=s(tw);CAe=n(oJt,"SPAN",{});var rJt=s(CAe);T(xk.$$.fragment,rJt),rJt.forEach(t),oJt.forEach(t),KQr=i(QYe),wAe=n(QYe,"SPAN",{});var tJt=s(wAe);ZQr=r(tJt,"FlaxAutoModel"),tJt.forEach(t),QYe.forEach(t),PHe=i(f),vr=n(f,"DIV",{class:!0});var bi=s(vr);T($k.$$.fragment,bi),eUr=i(bi),_f=n(bi,"P",{});var _se=s(_f);oUr=r(_se,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nre=n(_se,"A",{href:!0});var aJt=s(nre);rUr=r(aJt,"from_pretrained()"),aJt.forEach(t),tUr=r(_se," class method or the "),sre=n(_se,"A",{href:!0});var nJt=s(sre);aUr=r(nJt,"from_config()"),nJt.forEach(t),nUr=r(_se,` class
method.`),_se.forEach(t),sUr=i(bi),kk=n(bi,"P",{});var UYe=s(kk);lUr=r(UYe,"This class cannot be instantiated directly using "),AAe=n(UYe,"CODE",{});var sJt=s(AAe);iUr=r(sJt,"__init__()"),sJt.forEach(t),dUr=r(UYe," (throws an error)."),UYe.forEach(t),cUr=i(bi),Zt=n(bi,"DIV",{class:!0});var Gy=s(Zt);T(Sk.$$.fragment,Gy),fUr=i(Gy),LAe=n(Gy,"P",{});var lJt=s(LAe);mUr=r(lJt,"Instantiates one of the base model classes of the library from a configuration."),lJt.forEach(t),gUr=i(Gy),uf=n(Gy,"P",{});var use=s(uf);hUr=r(use,`Note:
Loading a model from its configuration file does `),yAe=n(use,"STRONG",{});var iJt=s(yAe);pUr=r(iJt,"not"),iJt.forEach(t),_Ur=r(use,` load the model weights. It only affects the
model\u2019s configuration. Use `),lre=n(use,"A",{href:!0});var dJt=s(lre);uUr=r(dJt,"from_pretrained()"),dJt.forEach(t),bUr=r(use," to load the model weights."),use.forEach(t),vUr=i(Gy),T(aw.$$.fragment,Gy),Gy.forEach(t),FUr=i(bi),Ur=n(bi,"DIV",{class:!0});var vi=s(Ur);T(Rk.$$.fragment,vi),TUr=i(vi),xAe=n(vi,"P",{});var cJt=s(xAe);MUr=r(cJt,"Instantiate one of the base model classes of the library from a pretrained model."),cJt.forEach(t),EUr=i(vi),kn=n(vi,"P",{});var Oy=s(kn);CUr=r(Oy,"The model class to instantiate is selected based on the "),$Ae=n(Oy,"CODE",{});var fJt=s($Ae);wUr=r(fJt,"model_type"),fJt.forEach(t),AUr=r(Oy,` property of the config object (either
passed as an argument or loaded from `),kAe=n(Oy,"CODE",{});var mJt=s(kAe);LUr=r(mJt,"pretrained_model_name_or_path"),mJt.forEach(t),yUr=r(Oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SAe=n(Oy,"CODE",{});var gJt=s(SAe);xUr=r(gJt,"pretrained_model_name_or_path"),gJt.forEach(t),$Ur=r(Oy,":"),Oy.forEach(t),kUr=i(vi),re=n(vi,"UL",{});var ae=s(re);nw=n(ae,"LI",{});var Wze=s(nw);RAe=n(Wze,"STRONG",{});var hJt=s(RAe);SUr=r(hJt,"albert"),hJt.forEach(t),RUr=r(Wze," \u2014 "),ire=n(Wze,"A",{href:!0});var pJt=s(ire);PUr=r(pJt,"FlaxAlbertModel"),pJt.forEach(t),BUr=r(Wze," (ALBERT model)"),Wze.forEach(t),IUr=i(ae),sw=n(ae,"LI",{});var Qze=s(sw);PAe=n(Qze,"STRONG",{});var _Jt=s(PAe);NUr=r(_Jt,"bart"),_Jt.forEach(t),qUr=r(Qze," \u2014 "),dre=n(Qze,"A",{href:!0});var uJt=s(dre);jUr=r(uJt,"FlaxBartModel"),uJt.forEach(t),DUr=r(Qze," (BART model)"),Qze.forEach(t),GUr=i(ae),lw=n(ae,"LI",{});var Uze=s(lw);BAe=n(Uze,"STRONG",{});var bJt=s(BAe);OUr=r(bJt,"beit"),bJt.forEach(t),VUr=r(Uze," \u2014 "),cre=n(Uze,"A",{href:!0});var vJt=s(cre);XUr=r(vJt,"FlaxBeitModel"),vJt.forEach(t),zUr=r(Uze," (BEiT model)"),Uze.forEach(t),WUr=i(ae),iw=n(ae,"LI",{});var Hze=s(iw);IAe=n(Hze,"STRONG",{});var FJt=s(IAe);QUr=r(FJt,"bert"),FJt.forEach(t),UUr=r(Hze," \u2014 "),fre=n(Hze,"A",{href:!0});var TJt=s(fre);HUr=r(TJt,"FlaxBertModel"),TJt.forEach(t),JUr=r(Hze," (BERT model)"),Hze.forEach(t),YUr=i(ae),dw=n(ae,"LI",{});var Jze=s(dw);NAe=n(Jze,"STRONG",{});var MJt=s(NAe);KUr=r(MJt,"big_bird"),MJt.forEach(t),ZUr=r(Jze," \u2014 "),mre=n(Jze,"A",{href:!0});var EJt=s(mre);eHr=r(EJt,"FlaxBigBirdModel"),EJt.forEach(t),oHr=r(Jze," (BigBird model)"),Jze.forEach(t),rHr=i(ae),cw=n(ae,"LI",{});var Yze=s(cw);qAe=n(Yze,"STRONG",{});var CJt=s(qAe);tHr=r(CJt,"blenderbot"),CJt.forEach(t),aHr=r(Yze," \u2014 "),gre=n(Yze,"A",{href:!0});var wJt=s(gre);nHr=r(wJt,"FlaxBlenderbotModel"),wJt.forEach(t),sHr=r(Yze," (Blenderbot model)"),Yze.forEach(t),lHr=i(ae),fw=n(ae,"LI",{});var Kze=s(fw);jAe=n(Kze,"STRONG",{});var AJt=s(jAe);iHr=r(AJt,"blenderbot-small"),AJt.forEach(t),dHr=r(Kze," \u2014 "),hre=n(Kze,"A",{href:!0});var LJt=s(hre);cHr=r(LJt,"FlaxBlenderbotSmallModel"),LJt.forEach(t),fHr=r(Kze," (BlenderbotSmall model)"),Kze.forEach(t),mHr=i(ae),mw=n(ae,"LI",{});var Zze=s(mw);DAe=n(Zze,"STRONG",{});var yJt=s(DAe);gHr=r(yJt,"clip"),yJt.forEach(t),hHr=r(Zze," \u2014 "),pre=n(Zze,"A",{href:!0});var xJt=s(pre);pHr=r(xJt,"FlaxCLIPModel"),xJt.forEach(t),_Hr=r(Zze," (CLIP model)"),Zze.forEach(t),uHr=i(ae),gw=n(ae,"LI",{});var eWe=s(gw);GAe=n(eWe,"STRONG",{});var $Jt=s(GAe);bHr=r($Jt,"distilbert"),$Jt.forEach(t),vHr=r(eWe," \u2014 "),_re=n(eWe,"A",{href:!0});var kJt=s(_re);FHr=r(kJt,"FlaxDistilBertModel"),kJt.forEach(t),THr=r(eWe," (DistilBERT model)"),eWe.forEach(t),MHr=i(ae),hw=n(ae,"LI",{});var oWe=s(hw);OAe=n(oWe,"STRONG",{});var SJt=s(OAe);EHr=r(SJt,"electra"),SJt.forEach(t),CHr=r(oWe," \u2014 "),ure=n(oWe,"A",{href:!0});var RJt=s(ure);wHr=r(RJt,"FlaxElectraModel"),RJt.forEach(t),AHr=r(oWe," (ELECTRA model)"),oWe.forEach(t),LHr=i(ae),pw=n(ae,"LI",{});var rWe=s(pw);VAe=n(rWe,"STRONG",{});var PJt=s(VAe);yHr=r(PJt,"gpt2"),PJt.forEach(t),xHr=r(rWe," \u2014 "),bre=n(rWe,"A",{href:!0});var BJt=s(bre);$Hr=r(BJt,"FlaxGPT2Model"),BJt.forEach(t),kHr=r(rWe," (OpenAI GPT-2 model)"),rWe.forEach(t),SHr=i(ae),_w=n(ae,"LI",{});var tWe=s(_w);XAe=n(tWe,"STRONG",{});var IJt=s(XAe);RHr=r(IJt,"gpt_neo"),IJt.forEach(t),PHr=r(tWe," \u2014 "),vre=n(tWe,"A",{href:!0});var NJt=s(vre);BHr=r(NJt,"FlaxGPTNeoModel"),NJt.forEach(t),IHr=r(tWe," (GPT Neo model)"),tWe.forEach(t),NHr=i(ae),uw=n(ae,"LI",{});var aWe=s(uw);zAe=n(aWe,"STRONG",{});var qJt=s(zAe);qHr=r(qJt,"gptj"),qJt.forEach(t),jHr=r(aWe," \u2014 "),Fre=n(aWe,"A",{href:!0});var jJt=s(Fre);DHr=r(jJt,"FlaxGPTJModel"),jJt.forEach(t),GHr=r(aWe," (GPT-J model)"),aWe.forEach(t),OHr=i(ae),bw=n(ae,"LI",{});var nWe=s(bw);WAe=n(nWe,"STRONG",{});var DJt=s(WAe);VHr=r(DJt,"longt5"),DJt.forEach(t),XHr=r(nWe," \u2014 "),Tre=n(nWe,"A",{href:!0});var GJt=s(Tre);zHr=r(GJt,"FlaxLongT5Model"),GJt.forEach(t),WHr=r(nWe," (LongT5 model)"),nWe.forEach(t),QHr=i(ae),vw=n(ae,"LI",{});var sWe=s(vw);QAe=n(sWe,"STRONG",{});var OJt=s(QAe);UHr=r(OJt,"marian"),OJt.forEach(t),HHr=r(sWe," \u2014 "),Mre=n(sWe,"A",{href:!0});var VJt=s(Mre);JHr=r(VJt,"FlaxMarianModel"),VJt.forEach(t),YHr=r(sWe," (Marian model)"),sWe.forEach(t),KHr=i(ae),Fw=n(ae,"LI",{});var lWe=s(Fw);UAe=n(lWe,"STRONG",{});var XJt=s(UAe);ZHr=r(XJt,"mbart"),XJt.forEach(t),eJr=r(lWe," \u2014 "),Ere=n(lWe,"A",{href:!0});var zJt=s(Ere);oJr=r(zJt,"FlaxMBartModel"),zJt.forEach(t),rJr=r(lWe," (mBART model)"),lWe.forEach(t),tJr=i(ae),Tw=n(ae,"LI",{});var iWe=s(Tw);HAe=n(iWe,"STRONG",{});var WJt=s(HAe);aJr=r(WJt,"mt5"),WJt.forEach(t),nJr=r(iWe," \u2014 "),Cre=n(iWe,"A",{href:!0});var QJt=s(Cre);sJr=r(QJt,"FlaxMT5Model"),QJt.forEach(t),lJr=r(iWe," (MT5 model)"),iWe.forEach(t),iJr=i(ae),Mw=n(ae,"LI",{});var dWe=s(Mw);JAe=n(dWe,"STRONG",{});var UJt=s(JAe);dJr=r(UJt,"opt"),UJt.forEach(t),cJr=r(dWe," \u2014 "),wre=n(dWe,"A",{href:!0});var HJt=s(wre);fJr=r(HJt,"FlaxOPTModel"),HJt.forEach(t),mJr=r(dWe," (OPT model)"),dWe.forEach(t),gJr=i(ae),Ew=n(ae,"LI",{});var cWe=s(Ew);YAe=n(cWe,"STRONG",{});var JJt=s(YAe);hJr=r(JJt,"pegasus"),JJt.forEach(t),pJr=r(cWe," \u2014 "),Are=n(cWe,"A",{href:!0});var YJt=s(Are);_Jr=r(YJt,"FlaxPegasusModel"),YJt.forEach(t),uJr=r(cWe," (Pegasus model)"),cWe.forEach(t),bJr=i(ae),Cw=n(ae,"LI",{});var fWe=s(Cw);KAe=n(fWe,"STRONG",{});var KJt=s(KAe);vJr=r(KJt,"roberta"),KJt.forEach(t),FJr=r(fWe," \u2014 "),Lre=n(fWe,"A",{href:!0});var ZJt=s(Lre);TJr=r(ZJt,"FlaxRobertaModel"),ZJt.forEach(t),MJr=r(fWe," (RoBERTa model)"),fWe.forEach(t),EJr=i(ae),ww=n(ae,"LI",{});var mWe=s(ww);ZAe=n(mWe,"STRONG",{});var eYt=s(ZAe);CJr=r(eYt,"roformer"),eYt.forEach(t),wJr=r(mWe," \u2014 "),yre=n(mWe,"A",{href:!0});var oYt=s(yre);AJr=r(oYt,"FlaxRoFormerModel"),oYt.forEach(t),LJr=r(mWe," (RoFormer model)"),mWe.forEach(t),yJr=i(ae),Aw=n(ae,"LI",{});var gWe=s(Aw);e7e=n(gWe,"STRONG",{});var rYt=s(e7e);xJr=r(rYt,"t5"),rYt.forEach(t),$Jr=r(gWe," \u2014 "),xre=n(gWe,"A",{href:!0});var tYt=s(xre);kJr=r(tYt,"FlaxT5Model"),tYt.forEach(t),SJr=r(gWe," (T5 model)"),gWe.forEach(t),RJr=i(ae),Lw=n(ae,"LI",{});var hWe=s(Lw);o7e=n(hWe,"STRONG",{});var aYt=s(o7e);PJr=r(aYt,"vision-text-dual-encoder"),aYt.forEach(t),BJr=r(hWe," \u2014 "),$re=n(hWe,"A",{href:!0});var nYt=s($re);IJr=r(nYt,"FlaxVisionTextDualEncoderModel"),nYt.forEach(t),NJr=r(hWe," (VisionTextDualEncoder model)"),hWe.forEach(t),qJr=i(ae),yw=n(ae,"LI",{});var pWe=s(yw);r7e=n(pWe,"STRONG",{});var sYt=s(r7e);jJr=r(sYt,"vit"),sYt.forEach(t),DJr=r(pWe," \u2014 "),kre=n(pWe,"A",{href:!0});var lYt=s(kre);GJr=r(lYt,"FlaxViTModel"),lYt.forEach(t),OJr=r(pWe," (ViT model)"),pWe.forEach(t),VJr=i(ae),xw=n(ae,"LI",{});var _We=s(xw);t7e=n(_We,"STRONG",{});var iYt=s(t7e);XJr=r(iYt,"wav2vec2"),iYt.forEach(t),zJr=r(_We," \u2014 "),Sre=n(_We,"A",{href:!0});var dYt=s(Sre);WJr=r(dYt,"FlaxWav2Vec2Model"),dYt.forEach(t),QJr=r(_We," (Wav2Vec2 model)"),_We.forEach(t),UJr=i(ae),$w=n(ae,"LI",{});var uWe=s($w);a7e=n(uWe,"STRONG",{});var cYt=s(a7e);HJr=r(cYt,"xglm"),cYt.forEach(t),JJr=r(uWe," \u2014 "),Rre=n(uWe,"A",{href:!0});var fYt=s(Rre);YJr=r(fYt,"FlaxXGLMModel"),fYt.forEach(t),KJr=r(uWe," (XGLM model)"),uWe.forEach(t),ZJr=i(ae),kw=n(ae,"LI",{});var bWe=s(kw);n7e=n(bWe,"STRONG",{});var mYt=s(n7e);eYr=r(mYt,"xlm-roberta"),mYt.forEach(t),oYr=r(bWe," \u2014 "),Pre=n(bWe,"A",{href:!0});var gYt=s(Pre);rYr=r(gYt,"FlaxXLMRobertaModel"),gYt.forEach(t),tYr=r(bWe," (XLM-RoBERTa model)"),bWe.forEach(t),ae.forEach(t),aYr=i(vi),T(Sw.$$.fragment,vi),vi.forEach(t),bi.forEach(t),BHe=i(f),bf=n(f,"H2",{class:!0});var HYe=s(bf);Rw=n(HYe,"A",{id:!0,class:!0,href:!0});var hYt=s(Rw);s7e=n(hYt,"SPAN",{});var pYt=s(s7e);T(Pk.$$.fragment,pYt),pYt.forEach(t),hYt.forEach(t),nYr=i(HYe),l7e=n(HYe,"SPAN",{});var _Yt=s(l7e);sYr=r(_Yt,"FlaxAutoModelForCausalLM"),_Yt.forEach(t),HYe.forEach(t),IHe=i(f),Fr=n(f,"DIV",{class:!0});var Fi=s(Fr);T(Bk.$$.fragment,Fi),lYr=i(Fi),vf=n(Fi,"P",{});var bse=s(vf);iYr=r(bse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Bre=n(bse,"A",{href:!0});var uYt=s(Bre);dYr=r(uYt,"from_pretrained()"),uYt.forEach(t),cYr=r(bse," class method or the "),Ire=n(bse,"A",{href:!0});var bYt=s(Ire);fYr=r(bYt,"from_config()"),bYt.forEach(t),mYr=r(bse,` class
method.`),bse.forEach(t),gYr=i(Fi),Ik=n(Fi,"P",{});var JYe=s(Ik);hYr=r(JYe,"This class cannot be instantiated directly using "),i7e=n(JYe,"CODE",{});var vYt=s(i7e);pYr=r(vYt,"__init__()"),vYt.forEach(t),_Yr=r(JYe," (throws an error)."),JYe.forEach(t),uYr=i(Fi),ea=n(Fi,"DIV",{class:!0});var Vy=s(ea);T(Nk.$$.fragment,Vy),bYr=i(Vy),d7e=n(Vy,"P",{});var FYt=s(d7e);vYr=r(FYt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FYt.forEach(t),FYr=i(Vy),Ff=n(Vy,"P",{});var vse=s(Ff);TYr=r(vse,`Note:
Loading a model from its configuration file does `),c7e=n(vse,"STRONG",{});var TYt=s(c7e);MYr=r(TYt,"not"),TYt.forEach(t),EYr=r(vse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nre=n(vse,"A",{href:!0});var MYt=s(Nre);CYr=r(MYt,"from_pretrained()"),MYt.forEach(t),wYr=r(vse," to load the model weights."),vse.forEach(t),AYr=i(Vy),T(Pw.$$.fragment,Vy),Vy.forEach(t),LYr=i(Fi),Hr=n(Fi,"DIV",{class:!0});var Ti=s(Hr);T(qk.$$.fragment,Ti),yYr=i(Ti),f7e=n(Ti,"P",{});var EYt=s(f7e);xYr=r(EYt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),EYt.forEach(t),$Yr=i(Ti),Sn=n(Ti,"P",{});var Xy=s(Sn);kYr=r(Xy,"The model class to instantiate is selected based on the "),m7e=n(Xy,"CODE",{});var CYt=s(m7e);SYr=r(CYt,"model_type"),CYt.forEach(t),RYr=r(Xy,` property of the config object (either
passed as an argument or loaded from `),g7e=n(Xy,"CODE",{});var wYt=s(g7e);PYr=r(wYt,"pretrained_model_name_or_path"),wYt.forEach(t),BYr=r(Xy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h7e=n(Xy,"CODE",{});var AYt=s(h7e);IYr=r(AYt,"pretrained_model_name_or_path"),AYt.forEach(t),NYr=r(Xy,":"),Xy.forEach(t),qYr=i(Ti),xe=n(Ti,"UL",{});var Ne=s(xe);Bw=n(Ne,"LI",{});var vWe=s(Bw);p7e=n(vWe,"STRONG",{});var LYt=s(p7e);jYr=r(LYt,"bart"),LYt.forEach(t),DYr=r(vWe," \u2014 "),qre=n(vWe,"A",{href:!0});var yYt=s(qre);GYr=r(yYt,"FlaxBartForCausalLM"),yYt.forEach(t),OYr=r(vWe," (BART model)"),vWe.forEach(t),VYr=i(Ne),Iw=n(Ne,"LI",{});var FWe=s(Iw);_7e=n(FWe,"STRONG",{});var xYt=s(_7e);XYr=r(xYt,"bert"),xYt.forEach(t),zYr=r(FWe," \u2014 "),jre=n(FWe,"A",{href:!0});var $Yt=s(jre);WYr=r($Yt,"FlaxBertForCausalLM"),$Yt.forEach(t),QYr=r(FWe," (BERT model)"),FWe.forEach(t),UYr=i(Ne),Nw=n(Ne,"LI",{});var TWe=s(Nw);u7e=n(TWe,"STRONG",{});var kYt=s(u7e);HYr=r(kYt,"big_bird"),kYt.forEach(t),JYr=r(TWe," \u2014 "),Dre=n(TWe,"A",{href:!0});var SYt=s(Dre);YYr=r(SYt,"FlaxBigBirdForCausalLM"),SYt.forEach(t),KYr=r(TWe," (BigBird model)"),TWe.forEach(t),ZYr=i(Ne),qw=n(Ne,"LI",{});var MWe=s(qw);b7e=n(MWe,"STRONG",{});var RYt=s(b7e);eKr=r(RYt,"electra"),RYt.forEach(t),oKr=r(MWe," \u2014 "),Gre=n(MWe,"A",{href:!0});var PYt=s(Gre);rKr=r(PYt,"FlaxElectraForCausalLM"),PYt.forEach(t),tKr=r(MWe," (ELECTRA model)"),MWe.forEach(t),aKr=i(Ne),jw=n(Ne,"LI",{});var EWe=s(jw);v7e=n(EWe,"STRONG",{});var BYt=s(v7e);nKr=r(BYt,"gpt2"),BYt.forEach(t),sKr=r(EWe," \u2014 "),Ore=n(EWe,"A",{href:!0});var IYt=s(Ore);lKr=r(IYt,"FlaxGPT2LMHeadModel"),IYt.forEach(t),iKr=r(EWe," (OpenAI GPT-2 model)"),EWe.forEach(t),dKr=i(Ne),Dw=n(Ne,"LI",{});var CWe=s(Dw);F7e=n(CWe,"STRONG",{});var NYt=s(F7e);cKr=r(NYt,"gpt_neo"),NYt.forEach(t),fKr=r(CWe," \u2014 "),Vre=n(CWe,"A",{href:!0});var qYt=s(Vre);mKr=r(qYt,"FlaxGPTNeoForCausalLM"),qYt.forEach(t),gKr=r(CWe," (GPT Neo model)"),CWe.forEach(t),hKr=i(Ne),Gw=n(Ne,"LI",{});var wWe=s(Gw);T7e=n(wWe,"STRONG",{});var jYt=s(T7e);pKr=r(jYt,"gptj"),jYt.forEach(t),_Kr=r(wWe," \u2014 "),Xre=n(wWe,"A",{href:!0});var DYt=s(Xre);uKr=r(DYt,"FlaxGPTJForCausalLM"),DYt.forEach(t),bKr=r(wWe," (GPT-J model)"),wWe.forEach(t),vKr=i(Ne),Ow=n(Ne,"LI",{});var AWe=s(Ow);M7e=n(AWe,"STRONG",{});var GYt=s(M7e);FKr=r(GYt,"opt"),GYt.forEach(t),TKr=r(AWe," \u2014 "),zre=n(AWe,"A",{href:!0});var OYt=s(zre);MKr=r(OYt,"FlaxOPTForCausalLM"),OYt.forEach(t),EKr=r(AWe," (OPT model)"),AWe.forEach(t),CKr=i(Ne),Vw=n(Ne,"LI",{});var LWe=s(Vw);E7e=n(LWe,"STRONG",{});var VYt=s(E7e);wKr=r(VYt,"roberta"),VYt.forEach(t),AKr=r(LWe," \u2014 "),Wre=n(LWe,"A",{href:!0});var XYt=s(Wre);LKr=r(XYt,"FlaxRobertaForCausalLM"),XYt.forEach(t),yKr=r(LWe," (RoBERTa model)"),LWe.forEach(t),xKr=i(Ne),Xw=n(Ne,"LI",{});var yWe=s(Xw);C7e=n(yWe,"STRONG",{});var zYt=s(C7e);$Kr=r(zYt,"xglm"),zYt.forEach(t),kKr=r(yWe," \u2014 "),Qre=n(yWe,"A",{href:!0});var WYt=s(Qre);SKr=r(WYt,"FlaxXGLMForCausalLM"),WYt.forEach(t),RKr=r(yWe," (XGLM model)"),yWe.forEach(t),Ne.forEach(t),PKr=i(Ti),T(zw.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),NHe=i(f),Tf=n(f,"H2",{class:!0});var YYe=s(Tf);Ww=n(YYe,"A",{id:!0,class:!0,href:!0});var QYt=s(Ww);w7e=n(QYt,"SPAN",{});var UYt=s(w7e);T(jk.$$.fragment,UYt),UYt.forEach(t),QYt.forEach(t),BKr=i(YYe),A7e=n(YYe,"SPAN",{});var HYt=s(A7e);IKr=r(HYt,"FlaxAutoModelForPreTraining"),HYt.forEach(t),YYe.forEach(t),qHe=i(f),Tr=n(f,"DIV",{class:!0});var Mi=s(Tr);T(Dk.$$.fragment,Mi),NKr=i(Mi),Mf=n(Mi,"P",{});var Fse=s(Mf);qKr=r(Fse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Ure=n(Fse,"A",{href:!0});var JYt=s(Ure);jKr=r(JYt,"from_pretrained()"),JYt.forEach(t),DKr=r(Fse," class method or the "),Hre=n(Fse,"A",{href:!0});var YYt=s(Hre);GKr=r(YYt,"from_config()"),YYt.forEach(t),OKr=r(Fse,` class
method.`),Fse.forEach(t),VKr=i(Mi),Gk=n(Mi,"P",{});var KYe=s(Gk);XKr=r(KYe,"This class cannot be instantiated directly using "),L7e=n(KYe,"CODE",{});var KYt=s(L7e);zKr=r(KYt,"__init__()"),KYt.forEach(t),WKr=r(KYe," (throws an error)."),KYe.forEach(t),QKr=i(Mi),oa=n(Mi,"DIV",{class:!0});var zy=s(oa);T(Ok.$$.fragment,zy),UKr=i(zy),y7e=n(zy,"P",{});var ZYt=s(y7e);HKr=r(ZYt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ZYt.forEach(t),JKr=i(zy),Ef=n(zy,"P",{});var Tse=s(Ef);YKr=r(Tse,`Note:
Loading a model from its configuration file does `),x7e=n(Tse,"STRONG",{});var eKt=s(x7e);KKr=r(eKt,"not"),eKt.forEach(t),ZKr=r(Tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jre=n(Tse,"A",{href:!0});var oKt=s(Jre);eZr=r(oKt,"from_pretrained()"),oKt.forEach(t),oZr=r(Tse," to load the model weights."),Tse.forEach(t),rZr=i(zy),T(Qw.$$.fragment,zy),zy.forEach(t),tZr=i(Mi),Jr=n(Mi,"DIV",{class:!0});var Ei=s(Jr);T(Vk.$$.fragment,Ei),aZr=i(Ei),$7e=n(Ei,"P",{});var rKt=s($7e);nZr=r(rKt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rKt.forEach(t),sZr=i(Ei),Rn=n(Ei,"P",{});var Wy=s(Rn);lZr=r(Wy,"The model class to instantiate is selected based on the "),k7e=n(Wy,"CODE",{});var tKt=s(k7e);iZr=r(tKt,"model_type"),tKt.forEach(t),dZr=r(Wy,` property of the config object (either
passed as an argument or loaded from `),S7e=n(Wy,"CODE",{});var aKt=s(S7e);cZr=r(aKt,"pretrained_model_name_or_path"),aKt.forEach(t),fZr=r(Wy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R7e=n(Wy,"CODE",{});var nKt=s(R7e);mZr=r(nKt,"pretrained_model_name_or_path"),nKt.forEach(t),gZr=r(Wy,":"),Wy.forEach(t),hZr=i(Ei),Ee=n(Ei,"UL",{});var we=s(Ee);Uw=n(we,"LI",{});var xWe=s(Uw);P7e=n(xWe,"STRONG",{});var sKt=s(P7e);pZr=r(sKt,"albert"),sKt.forEach(t),_Zr=r(xWe," \u2014 "),Yre=n(xWe,"A",{href:!0});var lKt=s(Yre);uZr=r(lKt,"FlaxAlbertForPreTraining"),lKt.forEach(t),bZr=r(xWe," (ALBERT model)"),xWe.forEach(t),vZr=i(we),Hw=n(we,"LI",{});var $We=s(Hw);B7e=n($We,"STRONG",{});var iKt=s(B7e);FZr=r(iKt,"bart"),iKt.forEach(t),TZr=r($We," \u2014 "),Kre=n($We,"A",{href:!0});var dKt=s(Kre);MZr=r(dKt,"FlaxBartForConditionalGeneration"),dKt.forEach(t),EZr=r($We," (BART model)"),$We.forEach(t),CZr=i(we),Jw=n(we,"LI",{});var kWe=s(Jw);I7e=n(kWe,"STRONG",{});var cKt=s(I7e);wZr=r(cKt,"bert"),cKt.forEach(t),AZr=r(kWe," \u2014 "),Zre=n(kWe,"A",{href:!0});var fKt=s(Zre);LZr=r(fKt,"FlaxBertForPreTraining"),fKt.forEach(t),yZr=r(kWe," (BERT model)"),kWe.forEach(t),xZr=i(we),Yw=n(we,"LI",{});var SWe=s(Yw);N7e=n(SWe,"STRONG",{});var mKt=s(N7e);$Zr=r(mKt,"big_bird"),mKt.forEach(t),kZr=r(SWe," \u2014 "),ete=n(SWe,"A",{href:!0});var gKt=s(ete);SZr=r(gKt,"FlaxBigBirdForPreTraining"),gKt.forEach(t),RZr=r(SWe," (BigBird model)"),SWe.forEach(t),PZr=i(we),Kw=n(we,"LI",{});var RWe=s(Kw);q7e=n(RWe,"STRONG",{});var hKt=s(q7e);BZr=r(hKt,"electra"),hKt.forEach(t),IZr=r(RWe," \u2014 "),ote=n(RWe,"A",{href:!0});var pKt=s(ote);NZr=r(pKt,"FlaxElectraForPreTraining"),pKt.forEach(t),qZr=r(RWe," (ELECTRA model)"),RWe.forEach(t),jZr=i(we),Zw=n(we,"LI",{});var PWe=s(Zw);j7e=n(PWe,"STRONG",{});var _Kt=s(j7e);DZr=r(_Kt,"longt5"),_Kt.forEach(t),GZr=r(PWe," \u2014 "),rte=n(PWe,"A",{href:!0});var uKt=s(rte);OZr=r(uKt,"FlaxLongT5ForConditionalGeneration"),uKt.forEach(t),VZr=r(PWe," (LongT5 model)"),PWe.forEach(t),XZr=i(we),eA=n(we,"LI",{});var BWe=s(eA);D7e=n(BWe,"STRONG",{});var bKt=s(D7e);zZr=r(bKt,"mbart"),bKt.forEach(t),WZr=r(BWe," \u2014 "),tte=n(BWe,"A",{href:!0});var vKt=s(tte);QZr=r(vKt,"FlaxMBartForConditionalGeneration"),vKt.forEach(t),UZr=r(BWe," (mBART model)"),BWe.forEach(t),HZr=i(we),oA=n(we,"LI",{});var IWe=s(oA);G7e=n(IWe,"STRONG",{});var FKt=s(G7e);JZr=r(FKt,"mt5"),FKt.forEach(t),YZr=r(IWe," \u2014 "),ate=n(IWe,"A",{href:!0});var TKt=s(ate);KZr=r(TKt,"FlaxMT5ForConditionalGeneration"),TKt.forEach(t),ZZr=r(IWe," (MT5 model)"),IWe.forEach(t),eet=i(we),rA=n(we,"LI",{});var NWe=s(rA);O7e=n(NWe,"STRONG",{});var MKt=s(O7e);oet=r(MKt,"roberta"),MKt.forEach(t),ret=r(NWe," \u2014 "),nte=n(NWe,"A",{href:!0});var EKt=s(nte);tet=r(EKt,"FlaxRobertaForMaskedLM"),EKt.forEach(t),aet=r(NWe," (RoBERTa model)"),NWe.forEach(t),net=i(we),tA=n(we,"LI",{});var qWe=s(tA);V7e=n(qWe,"STRONG",{});var CKt=s(V7e);set=r(CKt,"roformer"),CKt.forEach(t),iet=r(qWe," \u2014 "),ste=n(qWe,"A",{href:!0});var wKt=s(ste);det=r(wKt,"FlaxRoFormerForMaskedLM"),wKt.forEach(t),cet=r(qWe," (RoFormer model)"),qWe.forEach(t),fet=i(we),aA=n(we,"LI",{});var jWe=s(aA);X7e=n(jWe,"STRONG",{});var AKt=s(X7e);met=r(AKt,"t5"),AKt.forEach(t),get=r(jWe," \u2014 "),lte=n(jWe,"A",{href:!0});var LKt=s(lte);het=r(LKt,"FlaxT5ForConditionalGeneration"),LKt.forEach(t),pet=r(jWe," (T5 model)"),jWe.forEach(t),_et=i(we),nA=n(we,"LI",{});var DWe=s(nA);z7e=n(DWe,"STRONG",{});var yKt=s(z7e);uet=r(yKt,"wav2vec2"),yKt.forEach(t),bet=r(DWe," \u2014 "),ite=n(DWe,"A",{href:!0});var xKt=s(ite);vet=r(xKt,"FlaxWav2Vec2ForPreTraining"),xKt.forEach(t),Fet=r(DWe," (Wav2Vec2 model)"),DWe.forEach(t),Tet=i(we),sA=n(we,"LI",{});var GWe=s(sA);W7e=n(GWe,"STRONG",{});var $Kt=s(W7e);Met=r($Kt,"xlm-roberta"),$Kt.forEach(t),Eet=r(GWe," \u2014 "),dte=n(GWe,"A",{href:!0});var kKt=s(dte);Cet=r(kKt,"FlaxXLMRobertaForMaskedLM"),kKt.forEach(t),wet=r(GWe," (XLM-RoBERTa model)"),GWe.forEach(t),we.forEach(t),Aet=i(Ei),T(lA.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),jHe=i(f),Cf=n(f,"H2",{class:!0});var ZYe=s(Cf);iA=n(ZYe,"A",{id:!0,class:!0,href:!0});var SKt=s(iA);Q7e=n(SKt,"SPAN",{});var RKt=s(Q7e);T(Xk.$$.fragment,RKt),RKt.forEach(t),SKt.forEach(t),Let=i(ZYe),U7e=n(ZYe,"SPAN",{});var PKt=s(U7e);yet=r(PKt,"FlaxAutoModelForMaskedLM"),PKt.forEach(t),ZYe.forEach(t),DHe=i(f),Mr=n(f,"DIV",{class:!0});var Ci=s(Mr);T(zk.$$.fragment,Ci),xet=i(Ci),wf=n(Ci,"P",{});var Mse=s(wf);$et=r(Mse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cte=n(Mse,"A",{href:!0});var BKt=s(cte);ket=r(BKt,"from_pretrained()"),BKt.forEach(t),Set=r(Mse," class method or the "),fte=n(Mse,"A",{href:!0});var IKt=s(fte);Ret=r(IKt,"from_config()"),IKt.forEach(t),Pet=r(Mse,` class
method.`),Mse.forEach(t),Bet=i(Ci),Wk=n(Ci,"P",{});var eKe=s(Wk);Iet=r(eKe,"This class cannot be instantiated directly using "),H7e=n(eKe,"CODE",{});var NKt=s(H7e);Net=r(NKt,"__init__()"),NKt.forEach(t),qet=r(eKe," (throws an error)."),eKe.forEach(t),jet=i(Ci),ra=n(Ci,"DIV",{class:!0});var Qy=s(ra);T(Qk.$$.fragment,Qy),Det=i(Qy),J7e=n(Qy,"P",{});var qKt=s(J7e);Get=r(qKt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qKt.forEach(t),Oet=i(Qy),Af=n(Qy,"P",{});var Ese=s(Af);Vet=r(Ese,`Note:
Loading a model from its configuration file does `),Y7e=n(Ese,"STRONG",{});var jKt=s(Y7e);Xet=r(jKt,"not"),jKt.forEach(t),zet=r(Ese,` load the model weights. It only affects the
model\u2019s configuration. Use `),mte=n(Ese,"A",{href:!0});var DKt=s(mte);Wet=r(DKt,"from_pretrained()"),DKt.forEach(t),Qet=r(Ese," to load the model weights."),Ese.forEach(t),Uet=i(Qy),T(dA.$$.fragment,Qy),Qy.forEach(t),Het=i(Ci),Yr=n(Ci,"DIV",{class:!0});var wi=s(Yr);T(Uk.$$.fragment,wi),Jet=i(wi),K7e=n(wi,"P",{});var GKt=s(K7e);Yet=r(GKt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),GKt.forEach(t),Ket=i(wi),Pn=n(wi,"P",{});var Uy=s(Pn);Zet=r(Uy,"The model class to instantiate is selected based on the "),Z7e=n(Uy,"CODE",{});var OKt=s(Z7e);eot=r(OKt,"model_type"),OKt.forEach(t),oot=r(Uy,` property of the config object (either
passed as an argument or loaded from `),eLe=n(Uy,"CODE",{});var VKt=s(eLe);rot=r(VKt,"pretrained_model_name_or_path"),VKt.forEach(t),tot=r(Uy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oLe=n(Uy,"CODE",{});var XKt=s(oLe);aot=r(XKt,"pretrained_model_name_or_path"),XKt.forEach(t),not=r(Uy,":"),Uy.forEach(t),sot=i(wi),$e=n(wi,"UL",{});var qe=s($e);cA=n(qe,"LI",{});var OWe=s(cA);rLe=n(OWe,"STRONG",{});var zKt=s(rLe);lot=r(zKt,"albert"),zKt.forEach(t),iot=r(OWe," \u2014 "),gte=n(OWe,"A",{href:!0});var WKt=s(gte);dot=r(WKt,"FlaxAlbertForMaskedLM"),WKt.forEach(t),cot=r(OWe," (ALBERT model)"),OWe.forEach(t),fot=i(qe),fA=n(qe,"LI",{});var VWe=s(fA);tLe=n(VWe,"STRONG",{});var QKt=s(tLe);mot=r(QKt,"bart"),QKt.forEach(t),got=r(VWe," \u2014 "),hte=n(VWe,"A",{href:!0});var UKt=s(hte);hot=r(UKt,"FlaxBartForConditionalGeneration"),UKt.forEach(t),pot=r(VWe," (BART model)"),VWe.forEach(t),_ot=i(qe),mA=n(qe,"LI",{});var XWe=s(mA);aLe=n(XWe,"STRONG",{});var HKt=s(aLe);uot=r(HKt,"bert"),HKt.forEach(t),bot=r(XWe," \u2014 "),pte=n(XWe,"A",{href:!0});var JKt=s(pte);vot=r(JKt,"FlaxBertForMaskedLM"),JKt.forEach(t),Fot=r(XWe," (BERT model)"),XWe.forEach(t),Tot=i(qe),gA=n(qe,"LI",{});var zWe=s(gA);nLe=n(zWe,"STRONG",{});var YKt=s(nLe);Mot=r(YKt,"big_bird"),YKt.forEach(t),Eot=r(zWe," \u2014 "),_te=n(zWe,"A",{href:!0});var KKt=s(_te);Cot=r(KKt,"FlaxBigBirdForMaskedLM"),KKt.forEach(t),wot=r(zWe," (BigBird model)"),zWe.forEach(t),Aot=i(qe),hA=n(qe,"LI",{});var WWe=s(hA);sLe=n(WWe,"STRONG",{});var ZKt=s(sLe);Lot=r(ZKt,"distilbert"),ZKt.forEach(t),yot=r(WWe," \u2014 "),ute=n(WWe,"A",{href:!0});var eZt=s(ute);xot=r(eZt,"FlaxDistilBertForMaskedLM"),eZt.forEach(t),$ot=r(WWe," (DistilBERT model)"),WWe.forEach(t),kot=i(qe),pA=n(qe,"LI",{});var QWe=s(pA);lLe=n(QWe,"STRONG",{});var oZt=s(lLe);Sot=r(oZt,"electra"),oZt.forEach(t),Rot=r(QWe," \u2014 "),bte=n(QWe,"A",{href:!0});var rZt=s(bte);Pot=r(rZt,"FlaxElectraForMaskedLM"),rZt.forEach(t),Bot=r(QWe," (ELECTRA model)"),QWe.forEach(t),Iot=i(qe),_A=n(qe,"LI",{});var UWe=s(_A);iLe=n(UWe,"STRONG",{});var tZt=s(iLe);Not=r(tZt,"mbart"),tZt.forEach(t),qot=r(UWe," \u2014 "),vte=n(UWe,"A",{href:!0});var aZt=s(vte);jot=r(aZt,"FlaxMBartForConditionalGeneration"),aZt.forEach(t),Dot=r(UWe," (mBART model)"),UWe.forEach(t),Got=i(qe),uA=n(qe,"LI",{});var HWe=s(uA);dLe=n(HWe,"STRONG",{});var nZt=s(dLe);Oot=r(nZt,"roberta"),nZt.forEach(t),Vot=r(HWe," \u2014 "),Fte=n(HWe,"A",{href:!0});var sZt=s(Fte);Xot=r(sZt,"FlaxRobertaForMaskedLM"),sZt.forEach(t),zot=r(HWe," (RoBERTa model)"),HWe.forEach(t),Wot=i(qe),bA=n(qe,"LI",{});var JWe=s(bA);cLe=n(JWe,"STRONG",{});var lZt=s(cLe);Qot=r(lZt,"roformer"),lZt.forEach(t),Uot=r(JWe," \u2014 "),Tte=n(JWe,"A",{href:!0});var iZt=s(Tte);Hot=r(iZt,"FlaxRoFormerForMaskedLM"),iZt.forEach(t),Jot=r(JWe," (RoFormer model)"),JWe.forEach(t),Yot=i(qe),vA=n(qe,"LI",{});var YWe=s(vA);fLe=n(YWe,"STRONG",{});var dZt=s(fLe);Kot=r(dZt,"xlm-roberta"),dZt.forEach(t),Zot=r(YWe," \u2014 "),Mte=n(YWe,"A",{href:!0});var cZt=s(Mte);ert=r(cZt,"FlaxXLMRobertaForMaskedLM"),cZt.forEach(t),ort=r(YWe," (XLM-RoBERTa model)"),YWe.forEach(t),qe.forEach(t),rrt=i(wi),T(FA.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),GHe=i(f),Lf=n(f,"H2",{class:!0});var oKe=s(Lf);TA=n(oKe,"A",{id:!0,class:!0,href:!0});var fZt=s(TA);mLe=n(fZt,"SPAN",{});var mZt=s(mLe);T(Hk.$$.fragment,mZt),mZt.forEach(t),fZt.forEach(t),trt=i(oKe),gLe=n(oKe,"SPAN",{});var gZt=s(gLe);art=r(gZt,"FlaxAutoModelForSeq2SeqLM"),gZt.forEach(t),oKe.forEach(t),OHe=i(f),Er=n(f,"DIV",{class:!0});var Ai=s(Er);T(Jk.$$.fragment,Ai),nrt=i(Ai),yf=n(Ai,"P",{});var Cse=s(yf);srt=r(Cse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ete=n(Cse,"A",{href:!0});var hZt=s(Ete);lrt=r(hZt,"from_pretrained()"),hZt.forEach(t),irt=r(Cse," class method or the "),Cte=n(Cse,"A",{href:!0});var pZt=s(Cte);drt=r(pZt,"from_config()"),pZt.forEach(t),crt=r(Cse,` class
method.`),Cse.forEach(t),frt=i(Ai),Yk=n(Ai,"P",{});var rKe=s(Yk);mrt=r(rKe,"This class cannot be instantiated directly using "),hLe=n(rKe,"CODE",{});var _Zt=s(hLe);grt=r(_Zt,"__init__()"),_Zt.forEach(t),hrt=r(rKe," (throws an error)."),rKe.forEach(t),prt=i(Ai),ta=n(Ai,"DIV",{class:!0});var Hy=s(ta);T(Kk.$$.fragment,Hy),_rt=i(Hy),pLe=n(Hy,"P",{});var uZt=s(pLe);urt=r(uZt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),uZt.forEach(t),brt=i(Hy),xf=n(Hy,"P",{});var wse=s(xf);vrt=r(wse,`Note:
Loading a model from its configuration file does `),_Le=n(wse,"STRONG",{});var bZt=s(_Le);Frt=r(bZt,"not"),bZt.forEach(t),Trt=r(wse,` load the model weights. It only affects the
model\u2019s configuration. Use `),wte=n(wse,"A",{href:!0});var vZt=s(wte);Mrt=r(vZt,"from_pretrained()"),vZt.forEach(t),Ert=r(wse," to load the model weights."),wse.forEach(t),Crt=i(Hy),T(MA.$$.fragment,Hy),Hy.forEach(t),wrt=i(Ai),Kr=n(Ai,"DIV",{class:!0});var Li=s(Kr);T(Zk.$$.fragment,Li),Art=i(Li),uLe=n(Li,"P",{});var FZt=s(uLe);Lrt=r(FZt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),FZt.forEach(t),yrt=i(Li),Bn=n(Li,"P",{});var Jy=s(Bn);xrt=r(Jy,"The model class to instantiate is selected based on the "),bLe=n(Jy,"CODE",{});var TZt=s(bLe);$rt=r(TZt,"model_type"),TZt.forEach(t),krt=r(Jy,` property of the config object (either
passed as an argument or loaded from `),vLe=n(Jy,"CODE",{});var MZt=s(vLe);Srt=r(MZt,"pretrained_model_name_or_path"),MZt.forEach(t),Rrt=r(Jy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FLe=n(Jy,"CODE",{});var EZt=s(FLe);Prt=r(EZt,"pretrained_model_name_or_path"),EZt.forEach(t),Brt=r(Jy,":"),Jy.forEach(t),Irt=i(Li),ke=n(Li,"UL",{});var je=s(ke);EA=n(je,"LI",{});var KWe=s(EA);TLe=n(KWe,"STRONG",{});var CZt=s(TLe);Nrt=r(CZt,"bart"),CZt.forEach(t),qrt=r(KWe," \u2014 "),Ate=n(KWe,"A",{href:!0});var wZt=s(Ate);jrt=r(wZt,"FlaxBartForConditionalGeneration"),wZt.forEach(t),Drt=r(KWe," (BART model)"),KWe.forEach(t),Grt=i(je),CA=n(je,"LI",{});var ZWe=s(CA);MLe=n(ZWe,"STRONG",{});var AZt=s(MLe);Ort=r(AZt,"blenderbot"),AZt.forEach(t),Vrt=r(ZWe," \u2014 "),Lte=n(ZWe,"A",{href:!0});var LZt=s(Lte);Xrt=r(LZt,"FlaxBlenderbotForConditionalGeneration"),LZt.forEach(t),zrt=r(ZWe," (Blenderbot model)"),ZWe.forEach(t),Wrt=i(je),wA=n(je,"LI",{});var eQe=s(wA);ELe=n(eQe,"STRONG",{});var yZt=s(ELe);Qrt=r(yZt,"blenderbot-small"),yZt.forEach(t),Urt=r(eQe," \u2014 "),yte=n(eQe,"A",{href:!0});var xZt=s(yte);Hrt=r(xZt,"FlaxBlenderbotSmallForConditionalGeneration"),xZt.forEach(t),Jrt=r(eQe," (BlenderbotSmall model)"),eQe.forEach(t),Yrt=i(je),AA=n(je,"LI",{});var oQe=s(AA);CLe=n(oQe,"STRONG",{});var $Zt=s(CLe);Krt=r($Zt,"encoder-decoder"),$Zt.forEach(t),Zrt=r(oQe," \u2014 "),xte=n(oQe,"A",{href:!0});var kZt=s(xte);ett=r(kZt,"FlaxEncoderDecoderModel"),kZt.forEach(t),ott=r(oQe," (Encoder decoder model)"),oQe.forEach(t),rtt=i(je),LA=n(je,"LI",{});var rQe=s(LA);wLe=n(rQe,"STRONG",{});var SZt=s(wLe);ttt=r(SZt,"longt5"),SZt.forEach(t),att=r(rQe," \u2014 "),$te=n(rQe,"A",{href:!0});var RZt=s($te);ntt=r(RZt,"FlaxLongT5ForConditionalGeneration"),RZt.forEach(t),stt=r(rQe," (LongT5 model)"),rQe.forEach(t),ltt=i(je),yA=n(je,"LI",{});var tQe=s(yA);ALe=n(tQe,"STRONG",{});var PZt=s(ALe);itt=r(PZt,"marian"),PZt.forEach(t),dtt=r(tQe," \u2014 "),kte=n(tQe,"A",{href:!0});var BZt=s(kte);ctt=r(BZt,"FlaxMarianMTModel"),BZt.forEach(t),ftt=r(tQe," (Marian model)"),tQe.forEach(t),mtt=i(je),xA=n(je,"LI",{});var aQe=s(xA);LLe=n(aQe,"STRONG",{});var IZt=s(LLe);gtt=r(IZt,"mbart"),IZt.forEach(t),htt=r(aQe," \u2014 "),Ste=n(aQe,"A",{href:!0});var NZt=s(Ste);ptt=r(NZt,"FlaxMBartForConditionalGeneration"),NZt.forEach(t),_tt=r(aQe," (mBART model)"),aQe.forEach(t),utt=i(je),$A=n(je,"LI",{});var nQe=s($A);yLe=n(nQe,"STRONG",{});var qZt=s(yLe);btt=r(qZt,"mt5"),qZt.forEach(t),vtt=r(nQe," \u2014 "),Rte=n(nQe,"A",{href:!0});var jZt=s(Rte);Ftt=r(jZt,"FlaxMT5ForConditionalGeneration"),jZt.forEach(t),Ttt=r(nQe," (MT5 model)"),nQe.forEach(t),Mtt=i(je),kA=n(je,"LI",{});var sQe=s(kA);xLe=n(sQe,"STRONG",{});var DZt=s(xLe);Ett=r(DZt,"pegasus"),DZt.forEach(t),Ctt=r(sQe," \u2014 "),Pte=n(sQe,"A",{href:!0});var GZt=s(Pte);wtt=r(GZt,"FlaxPegasusForConditionalGeneration"),GZt.forEach(t),Att=r(sQe," (Pegasus model)"),sQe.forEach(t),Ltt=i(je),SA=n(je,"LI",{});var lQe=s(SA);$Le=n(lQe,"STRONG",{});var OZt=s($Le);ytt=r(OZt,"t5"),OZt.forEach(t),xtt=r(lQe," \u2014 "),Bte=n(lQe,"A",{href:!0});var VZt=s(Bte);$tt=r(VZt,"FlaxT5ForConditionalGeneration"),VZt.forEach(t),ktt=r(lQe," (T5 model)"),lQe.forEach(t),je.forEach(t),Stt=i(Li),T(RA.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),VHe=i(f),$f=n(f,"H2",{class:!0});var tKe=s($f);PA=n(tKe,"A",{id:!0,class:!0,href:!0});var XZt=s(PA);kLe=n(XZt,"SPAN",{});var zZt=s(kLe);T(eS.$$.fragment,zZt),zZt.forEach(t),XZt.forEach(t),Rtt=i(tKe),SLe=n(tKe,"SPAN",{});var WZt=s(SLe);Ptt=r(WZt,"FlaxAutoModelForSequenceClassification"),WZt.forEach(t),tKe.forEach(t),XHe=i(f),Cr=n(f,"DIV",{class:!0});var yi=s(Cr);T(oS.$$.fragment,yi),Btt=i(yi),kf=n(yi,"P",{});var Ase=s(kf);Itt=r(Ase,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ite=n(Ase,"A",{href:!0});var QZt=s(Ite);Ntt=r(QZt,"from_pretrained()"),QZt.forEach(t),qtt=r(Ase," class method or the "),Nte=n(Ase,"A",{href:!0});var UZt=s(Nte);jtt=r(UZt,"from_config()"),UZt.forEach(t),Dtt=r(Ase,` class
method.`),Ase.forEach(t),Gtt=i(yi),rS=n(yi,"P",{});var aKe=s(rS);Ott=r(aKe,"This class cannot be instantiated directly using "),RLe=n(aKe,"CODE",{});var HZt=s(RLe);Vtt=r(HZt,"__init__()"),HZt.forEach(t),Xtt=r(aKe," (throws an error)."),aKe.forEach(t),ztt=i(yi),aa=n(yi,"DIV",{class:!0});var Yy=s(aa);T(tS.$$.fragment,Yy),Wtt=i(Yy),PLe=n(Yy,"P",{});var JZt=s(PLe);Qtt=r(JZt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),JZt.forEach(t),Utt=i(Yy),Sf=n(Yy,"P",{});var Lse=s(Sf);Htt=r(Lse,`Note:
Loading a model from its configuration file does `),BLe=n(Lse,"STRONG",{});var YZt=s(BLe);Jtt=r(YZt,"not"),YZt.forEach(t),Ytt=r(Lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),qte=n(Lse,"A",{href:!0});var KZt=s(qte);Ktt=r(KZt,"from_pretrained()"),KZt.forEach(t),Ztt=r(Lse," to load the model weights."),Lse.forEach(t),eat=i(Yy),T(BA.$$.fragment,Yy),Yy.forEach(t),oat=i(yi),Zr=n(yi,"DIV",{class:!0});var xi=s(Zr);T(aS.$$.fragment,xi),rat=i(xi),ILe=n(xi,"P",{});var ZZt=s(ILe);tat=r(ZZt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ZZt.forEach(t),aat=i(xi),In=n(xi,"P",{});var Ky=s(In);nat=r(Ky,"The model class to instantiate is selected based on the "),NLe=n(Ky,"CODE",{});var eea=s(NLe);sat=r(eea,"model_type"),eea.forEach(t),lat=r(Ky,` property of the config object (either
passed as an argument or loaded from `),qLe=n(Ky,"CODE",{});var oea=s(qLe);iat=r(oea,"pretrained_model_name_or_path"),oea.forEach(t),dat=r(Ky,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jLe=n(Ky,"CODE",{});var rea=s(jLe);cat=r(rea,"pretrained_model_name_or_path"),rea.forEach(t),fat=r(Ky,":"),Ky.forEach(t),mat=i(xi),Se=n(xi,"UL",{});var De=s(Se);IA=n(De,"LI",{});var iQe=s(IA);DLe=n(iQe,"STRONG",{});var tea=s(DLe);gat=r(tea,"albert"),tea.forEach(t),hat=r(iQe," \u2014 "),jte=n(iQe,"A",{href:!0});var aea=s(jte);pat=r(aea,"FlaxAlbertForSequenceClassification"),aea.forEach(t),_at=r(iQe," (ALBERT model)"),iQe.forEach(t),uat=i(De),NA=n(De,"LI",{});var dQe=s(NA);GLe=n(dQe,"STRONG",{});var nea=s(GLe);bat=r(nea,"bart"),nea.forEach(t),vat=r(dQe," \u2014 "),Dte=n(dQe,"A",{href:!0});var sea=s(Dte);Fat=r(sea,"FlaxBartForSequenceClassification"),sea.forEach(t),Tat=r(dQe," (BART model)"),dQe.forEach(t),Mat=i(De),qA=n(De,"LI",{});var cQe=s(qA);OLe=n(cQe,"STRONG",{});var lea=s(OLe);Eat=r(lea,"bert"),lea.forEach(t),Cat=r(cQe," \u2014 "),Gte=n(cQe,"A",{href:!0});var iea=s(Gte);wat=r(iea,"FlaxBertForSequenceClassification"),iea.forEach(t),Aat=r(cQe," (BERT model)"),cQe.forEach(t),Lat=i(De),jA=n(De,"LI",{});var fQe=s(jA);VLe=n(fQe,"STRONG",{});var dea=s(VLe);yat=r(dea,"big_bird"),dea.forEach(t),xat=r(fQe," \u2014 "),Ote=n(fQe,"A",{href:!0});var cea=s(Ote);$at=r(cea,"FlaxBigBirdForSequenceClassification"),cea.forEach(t),kat=r(fQe," (BigBird model)"),fQe.forEach(t),Sat=i(De),DA=n(De,"LI",{});var mQe=s(DA);XLe=n(mQe,"STRONG",{});var fea=s(XLe);Rat=r(fea,"distilbert"),fea.forEach(t),Pat=r(mQe," \u2014 "),Vte=n(mQe,"A",{href:!0});var mea=s(Vte);Bat=r(mea,"FlaxDistilBertForSequenceClassification"),mea.forEach(t),Iat=r(mQe," (DistilBERT model)"),mQe.forEach(t),Nat=i(De),GA=n(De,"LI",{});var gQe=s(GA);zLe=n(gQe,"STRONG",{});var gea=s(zLe);qat=r(gea,"electra"),gea.forEach(t),jat=r(gQe," \u2014 "),Xte=n(gQe,"A",{href:!0});var hea=s(Xte);Dat=r(hea,"FlaxElectraForSequenceClassification"),hea.forEach(t),Gat=r(gQe," (ELECTRA model)"),gQe.forEach(t),Oat=i(De),OA=n(De,"LI",{});var hQe=s(OA);WLe=n(hQe,"STRONG",{});var pea=s(WLe);Vat=r(pea,"mbart"),pea.forEach(t),Xat=r(hQe," \u2014 "),zte=n(hQe,"A",{href:!0});var _ea=s(zte);zat=r(_ea,"FlaxMBartForSequenceClassification"),_ea.forEach(t),Wat=r(hQe," (mBART model)"),hQe.forEach(t),Qat=i(De),VA=n(De,"LI",{});var pQe=s(VA);QLe=n(pQe,"STRONG",{});var uea=s(QLe);Uat=r(uea,"roberta"),uea.forEach(t),Hat=r(pQe," \u2014 "),Wte=n(pQe,"A",{href:!0});var bea=s(Wte);Jat=r(bea,"FlaxRobertaForSequenceClassification"),bea.forEach(t),Yat=r(pQe," (RoBERTa model)"),pQe.forEach(t),Kat=i(De),XA=n(De,"LI",{});var _Qe=s(XA);ULe=n(_Qe,"STRONG",{});var vea=s(ULe);Zat=r(vea,"roformer"),vea.forEach(t),ent=r(_Qe," \u2014 "),Qte=n(_Qe,"A",{href:!0});var Fea=s(Qte);ont=r(Fea,"FlaxRoFormerForSequenceClassification"),Fea.forEach(t),rnt=r(_Qe," (RoFormer model)"),_Qe.forEach(t),tnt=i(De),zA=n(De,"LI",{});var uQe=s(zA);HLe=n(uQe,"STRONG",{});var Tea=s(HLe);ant=r(Tea,"xlm-roberta"),Tea.forEach(t),nnt=r(uQe," \u2014 "),Ute=n(uQe,"A",{href:!0});var Mea=s(Ute);snt=r(Mea,"FlaxXLMRobertaForSequenceClassification"),Mea.forEach(t),lnt=r(uQe," (XLM-RoBERTa model)"),uQe.forEach(t),De.forEach(t),int=i(xi),T(WA.$$.fragment,xi),xi.forEach(t),yi.forEach(t),zHe=i(f),Rf=n(f,"H2",{class:!0});var nKe=s(Rf);QA=n(nKe,"A",{id:!0,class:!0,href:!0});var Eea=s(QA);JLe=n(Eea,"SPAN",{});var Cea=s(JLe);T(nS.$$.fragment,Cea),Cea.forEach(t),Eea.forEach(t),dnt=i(nKe),YLe=n(nKe,"SPAN",{});var wea=s(YLe);cnt=r(wea,"FlaxAutoModelForQuestionAnswering"),wea.forEach(t),nKe.forEach(t),WHe=i(f),wr=n(f,"DIV",{class:!0});var $i=s(wr);T(sS.$$.fragment,$i),fnt=i($i),Pf=n($i,"P",{});var yse=s(Pf);mnt=r(yse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Hte=n(yse,"A",{href:!0});var Aea=s(Hte);gnt=r(Aea,"from_pretrained()"),Aea.forEach(t),hnt=r(yse," class method or the "),Jte=n(yse,"A",{href:!0});var Lea=s(Jte);pnt=r(Lea,"from_config()"),Lea.forEach(t),_nt=r(yse,` class
method.`),yse.forEach(t),unt=i($i),lS=n($i,"P",{});var sKe=s(lS);bnt=r(sKe,"This class cannot be instantiated directly using "),KLe=n(sKe,"CODE",{});var yea=s(KLe);vnt=r(yea,"__init__()"),yea.forEach(t),Fnt=r(sKe," (throws an error)."),sKe.forEach(t),Tnt=i($i),na=n($i,"DIV",{class:!0});var Zy=s(na);T(iS.$$.fragment,Zy),Mnt=i(Zy),ZLe=n(Zy,"P",{});var xea=s(ZLe);Ent=r(xea,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),xea.forEach(t),Cnt=i(Zy),Bf=n(Zy,"P",{});var xse=s(Bf);wnt=r(xse,`Note:
Loading a model from its configuration file does `),eye=n(xse,"STRONG",{});var $ea=s(eye);Ant=r($ea,"not"),$ea.forEach(t),Lnt=r(xse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yte=n(xse,"A",{href:!0});var kea=s(Yte);ynt=r(kea,"from_pretrained()"),kea.forEach(t),xnt=r(xse," to load the model weights."),xse.forEach(t),$nt=i(Zy),T(UA.$$.fragment,Zy),Zy.forEach(t),knt=i($i),et=n($i,"DIV",{class:!0});var ki=s(et);T(dS.$$.fragment,ki),Snt=i(ki),oye=n(ki,"P",{});var Sea=s(oye);Rnt=r(Sea,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Sea.forEach(t),Pnt=i(ki),Nn=n(ki,"P",{});var e8=s(Nn);Bnt=r(e8,"The model class to instantiate is selected based on the "),rye=n(e8,"CODE",{});var Rea=s(rye);Int=r(Rea,"model_type"),Rea.forEach(t),Nnt=r(e8,` property of the config object (either
passed as an argument or loaded from `),tye=n(e8,"CODE",{});var Pea=s(tye);qnt=r(Pea,"pretrained_model_name_or_path"),Pea.forEach(t),jnt=r(e8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aye=n(e8,"CODE",{});var Bea=s(aye);Dnt=r(Bea,"pretrained_model_name_or_path"),Bea.forEach(t),Gnt=r(e8,":"),e8.forEach(t),Ont=i(ki),Re=n(ki,"UL",{});var Ge=s(Re);HA=n(Ge,"LI",{});var bQe=s(HA);nye=n(bQe,"STRONG",{});var Iea=s(nye);Vnt=r(Iea,"albert"),Iea.forEach(t),Xnt=r(bQe," \u2014 "),Kte=n(bQe,"A",{href:!0});var Nea=s(Kte);znt=r(Nea,"FlaxAlbertForQuestionAnswering"),Nea.forEach(t),Wnt=r(bQe," (ALBERT model)"),bQe.forEach(t),Qnt=i(Ge),JA=n(Ge,"LI",{});var vQe=s(JA);sye=n(vQe,"STRONG",{});var qea=s(sye);Unt=r(qea,"bart"),qea.forEach(t),Hnt=r(vQe," \u2014 "),Zte=n(vQe,"A",{href:!0});var jea=s(Zte);Jnt=r(jea,"FlaxBartForQuestionAnswering"),jea.forEach(t),Ynt=r(vQe," (BART model)"),vQe.forEach(t),Knt=i(Ge),YA=n(Ge,"LI",{});var FQe=s(YA);lye=n(FQe,"STRONG",{});var Dea=s(lye);Znt=r(Dea,"bert"),Dea.forEach(t),est=r(FQe," \u2014 "),eae=n(FQe,"A",{href:!0});var Gea=s(eae);ost=r(Gea,"FlaxBertForQuestionAnswering"),Gea.forEach(t),rst=r(FQe," (BERT model)"),FQe.forEach(t),tst=i(Ge),KA=n(Ge,"LI",{});var TQe=s(KA);iye=n(TQe,"STRONG",{});var Oea=s(iye);ast=r(Oea,"big_bird"),Oea.forEach(t),nst=r(TQe," \u2014 "),oae=n(TQe,"A",{href:!0});var Vea=s(oae);sst=r(Vea,"FlaxBigBirdForQuestionAnswering"),Vea.forEach(t),lst=r(TQe," (BigBird model)"),TQe.forEach(t),ist=i(Ge),ZA=n(Ge,"LI",{});var MQe=s(ZA);dye=n(MQe,"STRONG",{});var Xea=s(dye);dst=r(Xea,"distilbert"),Xea.forEach(t),cst=r(MQe," \u2014 "),rae=n(MQe,"A",{href:!0});var zea=s(rae);fst=r(zea,"FlaxDistilBertForQuestionAnswering"),zea.forEach(t),mst=r(MQe," (DistilBERT model)"),MQe.forEach(t),gst=i(Ge),e7=n(Ge,"LI",{});var EQe=s(e7);cye=n(EQe,"STRONG",{});var Wea=s(cye);hst=r(Wea,"electra"),Wea.forEach(t),pst=r(EQe," \u2014 "),tae=n(EQe,"A",{href:!0});var Qea=s(tae);_st=r(Qea,"FlaxElectraForQuestionAnswering"),Qea.forEach(t),ust=r(EQe," (ELECTRA model)"),EQe.forEach(t),bst=i(Ge),o7=n(Ge,"LI",{});var CQe=s(o7);fye=n(CQe,"STRONG",{});var Uea=s(fye);vst=r(Uea,"mbart"),Uea.forEach(t),Fst=r(CQe," \u2014 "),aae=n(CQe,"A",{href:!0});var Hea=s(aae);Tst=r(Hea,"FlaxMBartForQuestionAnswering"),Hea.forEach(t),Mst=r(CQe," (mBART model)"),CQe.forEach(t),Est=i(Ge),r7=n(Ge,"LI",{});var wQe=s(r7);mye=n(wQe,"STRONG",{});var Jea=s(mye);Cst=r(Jea,"roberta"),Jea.forEach(t),wst=r(wQe," \u2014 "),nae=n(wQe,"A",{href:!0});var Yea=s(nae);Ast=r(Yea,"FlaxRobertaForQuestionAnswering"),Yea.forEach(t),Lst=r(wQe," (RoBERTa model)"),wQe.forEach(t),yst=i(Ge),t7=n(Ge,"LI",{});var AQe=s(t7);gye=n(AQe,"STRONG",{});var Kea=s(gye);xst=r(Kea,"roformer"),Kea.forEach(t),$st=r(AQe," \u2014 "),sae=n(AQe,"A",{href:!0});var Zea=s(sae);kst=r(Zea,"FlaxRoFormerForQuestionAnswering"),Zea.forEach(t),Sst=r(AQe," (RoFormer model)"),AQe.forEach(t),Rst=i(Ge),a7=n(Ge,"LI",{});var LQe=s(a7);hye=n(LQe,"STRONG",{});var eoa=s(hye);Pst=r(eoa,"xlm-roberta"),eoa.forEach(t),Bst=r(LQe," \u2014 "),lae=n(LQe,"A",{href:!0});var ooa=s(lae);Ist=r(ooa,"FlaxXLMRobertaForQuestionAnswering"),ooa.forEach(t),Nst=r(LQe," (XLM-RoBERTa model)"),LQe.forEach(t),Ge.forEach(t),qst=i(ki),T(n7.$$.fragment,ki),ki.forEach(t),$i.forEach(t),QHe=i(f),If=n(f,"H2",{class:!0});var lKe=s(If);s7=n(lKe,"A",{id:!0,class:!0,href:!0});var roa=s(s7);pye=n(roa,"SPAN",{});var toa=s(pye);T(cS.$$.fragment,toa),toa.forEach(t),roa.forEach(t),jst=i(lKe),_ye=n(lKe,"SPAN",{});var aoa=s(_ye);Dst=r(aoa,"FlaxAutoModelForTokenClassification"),aoa.forEach(t),lKe.forEach(t),UHe=i(f),Ar=n(f,"DIV",{class:!0});var Si=s(Ar);T(fS.$$.fragment,Si),Gst=i(Si),Nf=n(Si,"P",{});var $se=s(Nf);Ost=r($se,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),iae=n($se,"A",{href:!0});var noa=s(iae);Vst=r(noa,"from_pretrained()"),noa.forEach(t),Xst=r($se," class method or the "),dae=n($se,"A",{href:!0});var soa=s(dae);zst=r(soa,"from_config()"),soa.forEach(t),Wst=r($se,` class
method.`),$se.forEach(t),Qst=i(Si),mS=n(Si,"P",{});var iKe=s(mS);Ust=r(iKe,"This class cannot be instantiated directly using "),uye=n(iKe,"CODE",{});var loa=s(uye);Hst=r(loa,"__init__()"),loa.forEach(t),Jst=r(iKe," (throws an error)."),iKe.forEach(t),Yst=i(Si),sa=n(Si,"DIV",{class:!0});var o8=s(sa);T(gS.$$.fragment,o8),Kst=i(o8),bye=n(o8,"P",{});var ioa=s(bye);Zst=r(ioa,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ioa.forEach(t),elt=i(o8),qf=n(o8,"P",{});var kse=s(qf);olt=r(kse,`Note:
Loading a model from its configuration file does `),vye=n(kse,"STRONG",{});var doa=s(vye);rlt=r(doa,"not"),doa.forEach(t),tlt=r(kse,` load the model weights. It only affects the
model\u2019s configuration. Use `),cae=n(kse,"A",{href:!0});var coa=s(cae);alt=r(coa,"from_pretrained()"),coa.forEach(t),nlt=r(kse," to load the model weights."),kse.forEach(t),slt=i(o8),T(l7.$$.fragment,o8),o8.forEach(t),llt=i(Si),ot=n(Si,"DIV",{class:!0});var Ri=s(ot);T(hS.$$.fragment,Ri),ilt=i(Ri),Fye=n(Ri,"P",{});var foa=s(Fye);dlt=r(foa,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),foa.forEach(t),clt=i(Ri),qn=n(Ri,"P",{});var r8=s(qn);flt=r(r8,"The model class to instantiate is selected based on the "),Tye=n(r8,"CODE",{});var moa=s(Tye);mlt=r(moa,"model_type"),moa.forEach(t),glt=r(r8,` property of the config object (either
passed as an argument or loaded from `),Mye=n(r8,"CODE",{});var goa=s(Mye);hlt=r(goa,"pretrained_model_name_or_path"),goa.forEach(t),plt=r(r8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eye=n(r8,"CODE",{});var hoa=s(Eye);_lt=r(hoa,"pretrained_model_name_or_path"),hoa.forEach(t),ult=r(r8,":"),r8.forEach(t),blt=i(Ri),Xe=n(Ri,"UL",{});var Co=s(Xe);i7=n(Co,"LI",{});var yQe=s(i7);Cye=n(yQe,"STRONG",{});var poa=s(Cye);vlt=r(poa,"albert"),poa.forEach(t),Flt=r(yQe," \u2014 "),fae=n(yQe,"A",{href:!0});var _oa=s(fae);Tlt=r(_oa,"FlaxAlbertForTokenClassification"),_oa.forEach(t),Mlt=r(yQe," (ALBERT model)"),yQe.forEach(t),Elt=i(Co),d7=n(Co,"LI",{});var xQe=s(d7);wye=n(xQe,"STRONG",{});var uoa=s(wye);Clt=r(uoa,"bert"),uoa.forEach(t),wlt=r(xQe," \u2014 "),mae=n(xQe,"A",{href:!0});var boa=s(mae);Alt=r(boa,"FlaxBertForTokenClassification"),boa.forEach(t),Llt=r(xQe," (BERT model)"),xQe.forEach(t),ylt=i(Co),c7=n(Co,"LI",{});var $Qe=s(c7);Aye=n($Qe,"STRONG",{});var voa=s(Aye);xlt=r(voa,"big_bird"),voa.forEach(t),$lt=r($Qe," \u2014 "),gae=n($Qe,"A",{href:!0});var Foa=s(gae);klt=r(Foa,"FlaxBigBirdForTokenClassification"),Foa.forEach(t),Slt=r($Qe," (BigBird model)"),$Qe.forEach(t),Rlt=i(Co),f7=n(Co,"LI",{});var kQe=s(f7);Lye=n(kQe,"STRONG",{});var Toa=s(Lye);Plt=r(Toa,"distilbert"),Toa.forEach(t),Blt=r(kQe," \u2014 "),hae=n(kQe,"A",{href:!0});var Moa=s(hae);Ilt=r(Moa,"FlaxDistilBertForTokenClassification"),Moa.forEach(t),Nlt=r(kQe," (DistilBERT model)"),kQe.forEach(t),qlt=i(Co),m7=n(Co,"LI",{});var SQe=s(m7);yye=n(SQe,"STRONG",{});var Eoa=s(yye);jlt=r(Eoa,"electra"),Eoa.forEach(t),Dlt=r(SQe," \u2014 "),pae=n(SQe,"A",{href:!0});var Coa=s(pae);Glt=r(Coa,"FlaxElectraForTokenClassification"),Coa.forEach(t),Olt=r(SQe," (ELECTRA model)"),SQe.forEach(t),Vlt=i(Co),g7=n(Co,"LI",{});var RQe=s(g7);xye=n(RQe,"STRONG",{});var woa=s(xye);Xlt=r(woa,"roberta"),woa.forEach(t),zlt=r(RQe," \u2014 "),_ae=n(RQe,"A",{href:!0});var Aoa=s(_ae);Wlt=r(Aoa,"FlaxRobertaForTokenClassification"),Aoa.forEach(t),Qlt=r(RQe," (RoBERTa model)"),RQe.forEach(t),Ult=i(Co),h7=n(Co,"LI",{});var PQe=s(h7);$ye=n(PQe,"STRONG",{});var Loa=s($ye);Hlt=r(Loa,"roformer"),Loa.forEach(t),Jlt=r(PQe," \u2014 "),uae=n(PQe,"A",{href:!0});var yoa=s(uae);Ylt=r(yoa,"FlaxRoFormerForTokenClassification"),yoa.forEach(t),Klt=r(PQe," (RoFormer model)"),PQe.forEach(t),Zlt=i(Co),p7=n(Co,"LI",{});var BQe=s(p7);kye=n(BQe,"STRONG",{});var xoa=s(kye);eit=r(xoa,"xlm-roberta"),xoa.forEach(t),oit=r(BQe," \u2014 "),bae=n(BQe,"A",{href:!0});var $oa=s(bae);rit=r($oa,"FlaxXLMRobertaForTokenClassification"),$oa.forEach(t),tit=r(BQe," (XLM-RoBERTa model)"),BQe.forEach(t),Co.forEach(t),ait=i(Ri),T(_7.$$.fragment,Ri),Ri.forEach(t),Si.forEach(t),HHe=i(f),jf=n(f,"H2",{class:!0});var dKe=s(jf);u7=n(dKe,"A",{id:!0,class:!0,href:!0});var koa=s(u7);Sye=n(koa,"SPAN",{});var Soa=s(Sye);T(pS.$$.fragment,Soa),Soa.forEach(t),koa.forEach(t),nit=i(dKe),Rye=n(dKe,"SPAN",{});var Roa=s(Rye);sit=r(Roa,"FlaxAutoModelForMultipleChoice"),Roa.forEach(t),dKe.forEach(t),JHe=i(f),Lr=n(f,"DIV",{class:!0});var Pi=s(Lr);T(_S.$$.fragment,Pi),lit=i(Pi),Df=n(Pi,"P",{});var Sse=s(Df);iit=r(Sse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vae=n(Sse,"A",{href:!0});var Poa=s(vae);dit=r(Poa,"from_pretrained()"),Poa.forEach(t),cit=r(Sse," class method or the "),Fae=n(Sse,"A",{href:!0});var Boa=s(Fae);fit=r(Boa,"from_config()"),Boa.forEach(t),mit=r(Sse,` class
method.`),Sse.forEach(t),git=i(Pi),uS=n(Pi,"P",{});var cKe=s(uS);hit=r(cKe,"This class cannot be instantiated directly using "),Pye=n(cKe,"CODE",{});var Ioa=s(Pye);pit=r(Ioa,"__init__()"),Ioa.forEach(t),_it=r(cKe," (throws an error)."),cKe.forEach(t),uit=i(Pi),la=n(Pi,"DIV",{class:!0});var t8=s(la);T(bS.$$.fragment,t8),bit=i(t8),Bye=n(t8,"P",{});var Noa=s(Bye);vit=r(Noa,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Noa.forEach(t),Fit=i(t8),Gf=n(t8,"P",{});var Rse=s(Gf);Tit=r(Rse,`Note:
Loading a model from its configuration file does `),Iye=n(Rse,"STRONG",{});var qoa=s(Iye);Mit=r(qoa,"not"),qoa.forEach(t),Eit=r(Rse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tae=n(Rse,"A",{href:!0});var joa=s(Tae);Cit=r(joa,"from_pretrained()"),joa.forEach(t),wit=r(Rse," to load the model weights."),Rse.forEach(t),Ait=i(t8),T(b7.$$.fragment,t8),t8.forEach(t),Lit=i(Pi),rt=n(Pi,"DIV",{class:!0});var Bi=s(rt);T(vS.$$.fragment,Bi),yit=i(Bi),Nye=n(Bi,"P",{});var Doa=s(Nye);xit=r(Doa,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Doa.forEach(t),$it=i(Bi),jn=n(Bi,"P",{});var a8=s(jn);kit=r(a8,"The model class to instantiate is selected based on the "),qye=n(a8,"CODE",{});var Goa=s(qye);Sit=r(Goa,"model_type"),Goa.forEach(t),Rit=r(a8,` property of the config object (either
passed as an argument or loaded from `),jye=n(a8,"CODE",{});var Ooa=s(jye);Pit=r(Ooa,"pretrained_model_name_or_path"),Ooa.forEach(t),Bit=r(a8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dye=n(a8,"CODE",{});var Voa=s(Dye);Iit=r(Voa,"pretrained_model_name_or_path"),Voa.forEach(t),Nit=r(a8,":"),a8.forEach(t),qit=i(Bi),ze=n(Bi,"UL",{});var wo=s(ze);v7=n(wo,"LI",{});var IQe=s(v7);Gye=n(IQe,"STRONG",{});var Xoa=s(Gye);jit=r(Xoa,"albert"),Xoa.forEach(t),Dit=r(IQe," \u2014 "),Mae=n(IQe,"A",{href:!0});var zoa=s(Mae);Git=r(zoa,"FlaxAlbertForMultipleChoice"),zoa.forEach(t),Oit=r(IQe," (ALBERT model)"),IQe.forEach(t),Vit=i(wo),F7=n(wo,"LI",{});var NQe=s(F7);Oye=n(NQe,"STRONG",{});var Woa=s(Oye);Xit=r(Woa,"bert"),Woa.forEach(t),zit=r(NQe," \u2014 "),Eae=n(NQe,"A",{href:!0});var Qoa=s(Eae);Wit=r(Qoa,"FlaxBertForMultipleChoice"),Qoa.forEach(t),Qit=r(NQe," (BERT model)"),NQe.forEach(t),Uit=i(wo),T7=n(wo,"LI",{});var qQe=s(T7);Vye=n(qQe,"STRONG",{});var Uoa=s(Vye);Hit=r(Uoa,"big_bird"),Uoa.forEach(t),Jit=r(qQe," \u2014 "),Cae=n(qQe,"A",{href:!0});var Hoa=s(Cae);Yit=r(Hoa,"FlaxBigBirdForMultipleChoice"),Hoa.forEach(t),Kit=r(qQe," (BigBird model)"),qQe.forEach(t),Zit=i(wo),M7=n(wo,"LI",{});var jQe=s(M7);Xye=n(jQe,"STRONG",{});var Joa=s(Xye);edt=r(Joa,"distilbert"),Joa.forEach(t),odt=r(jQe," \u2014 "),wae=n(jQe,"A",{href:!0});var Yoa=s(wae);rdt=r(Yoa,"FlaxDistilBertForMultipleChoice"),Yoa.forEach(t),tdt=r(jQe," (DistilBERT model)"),jQe.forEach(t),adt=i(wo),E7=n(wo,"LI",{});var DQe=s(E7);zye=n(DQe,"STRONG",{});var Koa=s(zye);ndt=r(Koa,"electra"),Koa.forEach(t),sdt=r(DQe," \u2014 "),Aae=n(DQe,"A",{href:!0});var Zoa=s(Aae);ldt=r(Zoa,"FlaxElectraForMultipleChoice"),Zoa.forEach(t),idt=r(DQe," (ELECTRA model)"),DQe.forEach(t),ddt=i(wo),C7=n(wo,"LI",{});var GQe=s(C7);Wye=n(GQe,"STRONG",{});var era=s(Wye);cdt=r(era,"roberta"),era.forEach(t),fdt=r(GQe," \u2014 "),Lae=n(GQe,"A",{href:!0});var ora=s(Lae);mdt=r(ora,"FlaxRobertaForMultipleChoice"),ora.forEach(t),gdt=r(GQe," (RoBERTa model)"),GQe.forEach(t),hdt=i(wo),w7=n(wo,"LI",{});var OQe=s(w7);Qye=n(OQe,"STRONG",{});var rra=s(Qye);pdt=r(rra,"roformer"),rra.forEach(t),_dt=r(OQe," \u2014 "),yae=n(OQe,"A",{href:!0});var tra=s(yae);udt=r(tra,"FlaxRoFormerForMultipleChoice"),tra.forEach(t),bdt=r(OQe," (RoFormer model)"),OQe.forEach(t),vdt=i(wo),A7=n(wo,"LI",{});var VQe=s(A7);Uye=n(VQe,"STRONG",{});var ara=s(Uye);Fdt=r(ara,"xlm-roberta"),ara.forEach(t),Tdt=r(VQe," \u2014 "),xae=n(VQe,"A",{href:!0});var nra=s(xae);Mdt=r(nra,"FlaxXLMRobertaForMultipleChoice"),nra.forEach(t),Edt=r(VQe," (XLM-RoBERTa model)"),VQe.forEach(t),wo.forEach(t),Cdt=i(Bi),T(L7.$$.fragment,Bi),Bi.forEach(t),Pi.forEach(t),YHe=i(f),Of=n(f,"H2",{class:!0});var fKe=s(Of);y7=n(fKe,"A",{id:!0,class:!0,href:!0});var sra=s(y7);Hye=n(sra,"SPAN",{});var lra=s(Hye);T(FS.$$.fragment,lra),lra.forEach(t),sra.forEach(t),wdt=i(fKe),Jye=n(fKe,"SPAN",{});var ira=s(Jye);Adt=r(ira,"FlaxAutoModelForNextSentencePrediction"),ira.forEach(t),fKe.forEach(t),KHe=i(f),yr=n(f,"DIV",{class:!0});var Ii=s(yr);T(TS.$$.fragment,Ii),Ldt=i(Ii),Vf=n(Ii,"P",{});var Pse=s(Vf);ydt=r(Pse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$ae=n(Pse,"A",{href:!0});var dra=s($ae);xdt=r(dra,"from_pretrained()"),dra.forEach(t),$dt=r(Pse," class method or the "),kae=n(Pse,"A",{href:!0});var cra=s(kae);kdt=r(cra,"from_config()"),cra.forEach(t),Sdt=r(Pse,` class
method.`),Pse.forEach(t),Rdt=i(Ii),MS=n(Ii,"P",{});var mKe=s(MS);Pdt=r(mKe,"This class cannot be instantiated directly using "),Yye=n(mKe,"CODE",{});var fra=s(Yye);Bdt=r(fra,"__init__()"),fra.forEach(t),Idt=r(mKe," (throws an error)."),mKe.forEach(t),Ndt=i(Ii),ia=n(Ii,"DIV",{class:!0});var n8=s(ia);T(ES.$$.fragment,n8),qdt=i(n8),Kye=n(n8,"P",{});var mra=s(Kye);jdt=r(mra,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mra.forEach(t),Ddt=i(n8),Xf=n(n8,"P",{});var Bse=s(Xf);Gdt=r(Bse,`Note:
Loading a model from its configuration file does `),Zye=n(Bse,"STRONG",{});var gra=s(Zye);Odt=r(gra,"not"),gra.forEach(t),Vdt=r(Bse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sae=n(Bse,"A",{href:!0});var hra=s(Sae);Xdt=r(hra,"from_pretrained()"),hra.forEach(t),zdt=r(Bse," to load the model weights."),Bse.forEach(t),Wdt=i(n8),T(x7.$$.fragment,n8),n8.forEach(t),Qdt=i(Ii),tt=n(Ii,"DIV",{class:!0});var Ni=s(tt);T(CS.$$.fragment,Ni),Udt=i(Ni),e8e=n(Ni,"P",{});var pra=s(e8e);Hdt=r(pra,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pra.forEach(t),Jdt=i(Ni),Dn=n(Ni,"P",{});var s8=s(Dn);Ydt=r(s8,"The model class to instantiate is selected based on the "),o8e=n(s8,"CODE",{});var _ra=s(o8e);Kdt=r(_ra,"model_type"),_ra.forEach(t),Zdt=r(s8,` property of the config object (either
passed as an argument or loaded from `),r8e=n(s8,"CODE",{});var ura=s(r8e);ect=r(ura,"pretrained_model_name_or_path"),ura.forEach(t),oct=r(s8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t8e=n(s8,"CODE",{});var bra=s(t8e);rct=r(bra,"pretrained_model_name_or_path"),bra.forEach(t),tct=r(s8,":"),s8.forEach(t),act=i(Ni),a8e=n(Ni,"UL",{});var vra=s(a8e);$7=n(vra,"LI",{});var XQe=s($7);n8e=n(XQe,"STRONG",{});var Fra=s(n8e);nct=r(Fra,"bert"),Fra.forEach(t),sct=r(XQe," \u2014 "),Rae=n(XQe,"A",{href:!0});var Tra=s(Rae);lct=r(Tra,"FlaxBertForNextSentencePrediction"),Tra.forEach(t),ict=r(XQe," (BERT model)"),XQe.forEach(t),vra.forEach(t),dct=i(Ni),T(k7.$$.fragment,Ni),Ni.forEach(t),Ii.forEach(t),ZHe=i(f),zf=n(f,"H2",{class:!0});var gKe=s(zf);S7=n(gKe,"A",{id:!0,class:!0,href:!0});var Mra=s(S7);s8e=n(Mra,"SPAN",{});var Era=s(s8e);T(wS.$$.fragment,Era),Era.forEach(t),Mra.forEach(t),cct=i(gKe),l8e=n(gKe,"SPAN",{});var Cra=s(l8e);fct=r(Cra,"FlaxAutoModelForImageClassification"),Cra.forEach(t),gKe.forEach(t),eJe=i(f),xr=n(f,"DIV",{class:!0});var qi=s(xr);T(AS.$$.fragment,qi),mct=i(qi),Wf=n(qi,"P",{});var Ise=s(Wf);gct=r(Ise,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Pae=n(Ise,"A",{href:!0});var wra=s(Pae);hct=r(wra,"from_pretrained()"),wra.forEach(t),pct=r(Ise," class method or the "),Bae=n(Ise,"A",{href:!0});var Ara=s(Bae);_ct=r(Ara,"from_config()"),Ara.forEach(t),uct=r(Ise,` class
method.`),Ise.forEach(t),bct=i(qi),LS=n(qi,"P",{});var hKe=s(LS);vct=r(hKe,"This class cannot be instantiated directly using "),i8e=n(hKe,"CODE",{});var Lra=s(i8e);Fct=r(Lra,"__init__()"),Lra.forEach(t),Tct=r(hKe," (throws an error)."),hKe.forEach(t),Mct=i(qi),da=n(qi,"DIV",{class:!0});var l8=s(da);T(yS.$$.fragment,l8),Ect=i(l8),d8e=n(l8,"P",{});var yra=s(d8e);Cct=r(yra,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yra.forEach(t),wct=i(l8),Qf=n(l8,"P",{});var Nse=s(Qf);Act=r(Nse,`Note:
Loading a model from its configuration file does `),c8e=n(Nse,"STRONG",{});var xra=s(c8e);Lct=r(xra,"not"),xra.forEach(t),yct=r(Nse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iae=n(Nse,"A",{href:!0});var $ra=s(Iae);xct=r($ra,"from_pretrained()"),$ra.forEach(t),$ct=r(Nse," to load the model weights."),Nse.forEach(t),kct=i(l8),T(R7.$$.fragment,l8),l8.forEach(t),Sct=i(qi),at=n(qi,"DIV",{class:!0});var ji=s(at);T(xS.$$.fragment,ji),Rct=i(ji),f8e=n(ji,"P",{});var kra=s(f8e);Pct=r(kra,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kra.forEach(t),Bct=i(ji),Gn=n(ji,"P",{});var i8=s(Gn);Ict=r(i8,"The model class to instantiate is selected based on the "),m8e=n(i8,"CODE",{});var Sra=s(m8e);Nct=r(Sra,"model_type"),Sra.forEach(t),qct=r(i8,` property of the config object (either
passed as an argument or loaded from `),g8e=n(i8,"CODE",{});var Rra=s(g8e);jct=r(Rra,"pretrained_model_name_or_path"),Rra.forEach(t),Dct=r(i8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h8e=n(i8,"CODE",{});var Pra=s(h8e);Gct=r(Pra,"pretrained_model_name_or_path"),Pra.forEach(t),Oct=r(i8,":"),i8.forEach(t),Vct=i(ji),$S=n(ji,"UL",{});var pKe=s($S);P7=n(pKe,"LI",{});var zQe=s(P7);p8e=n(zQe,"STRONG",{});var Bra=s(p8e);Xct=r(Bra,"beit"),Bra.forEach(t),zct=r(zQe," \u2014 "),Nae=n(zQe,"A",{href:!0});var Ira=s(Nae);Wct=r(Ira,"FlaxBeitForImageClassification"),Ira.forEach(t),Qct=r(zQe," (BEiT model)"),zQe.forEach(t),Uct=i(pKe),B7=n(pKe,"LI",{});var WQe=s(B7);_8e=n(WQe,"STRONG",{});var Nra=s(_8e);Hct=r(Nra,"vit"),Nra.forEach(t),Jct=r(WQe," \u2014 "),qae=n(WQe,"A",{href:!0});var qra=s(qae);Yct=r(qra,"FlaxViTForImageClassification"),qra.forEach(t),Kct=r(WQe," (ViT model)"),WQe.forEach(t),pKe.forEach(t),Zct=i(ji),T(I7.$$.fragment,ji),ji.forEach(t),qi.forEach(t),oJe=i(f),Uf=n(f,"H2",{class:!0});var _Ke=s(Uf);N7=n(_Ke,"A",{id:!0,class:!0,href:!0});var jra=s(N7);u8e=n(jra,"SPAN",{});var Dra=s(u8e);T(kS.$$.fragment,Dra),Dra.forEach(t),jra.forEach(t),eft=i(_Ke),b8e=n(_Ke,"SPAN",{});var Gra=s(b8e);oft=r(Gra,"FlaxAutoModelForVision2Seq"),Gra.forEach(t),_Ke.forEach(t),rJe=i(f),$r=n(f,"DIV",{class:!0});var Di=s($r);T(SS.$$.fragment,Di),rft=i(Di),Hf=n(Di,"P",{});var qse=s(Hf);tft=r(qse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),jae=n(qse,"A",{href:!0});var Ora=s(jae);aft=r(Ora,"from_pretrained()"),Ora.forEach(t),nft=r(qse," class method or the "),Dae=n(qse,"A",{href:!0});var Vra=s(Dae);sft=r(Vra,"from_config()"),Vra.forEach(t),lft=r(qse,` class
method.`),qse.forEach(t),ift=i(Di),RS=n(Di,"P",{});var uKe=s(RS);dft=r(uKe,"This class cannot be instantiated directly using "),v8e=n(uKe,"CODE",{});var Xra=s(v8e);cft=r(Xra,"__init__()"),Xra.forEach(t),fft=r(uKe," (throws an error)."),uKe.forEach(t),mft=i(Di),ca=n(Di,"DIV",{class:!0});var d8=s(ca);T(PS.$$.fragment,d8),gft=i(d8),F8e=n(d8,"P",{});var zra=s(F8e);hft=r(zra,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),zra.forEach(t),pft=i(d8),Jf=n(d8,"P",{});var jse=s(Jf);_ft=r(jse,`Note:
Loading a model from its configuration file does `),T8e=n(jse,"STRONG",{});var Wra=s(T8e);uft=r(Wra,"not"),Wra.forEach(t),bft=r(jse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gae=n(jse,"A",{href:!0});var Qra=s(Gae);vft=r(Qra,"from_pretrained()"),Qra.forEach(t),Fft=r(jse," to load the model weights."),jse.forEach(t),Tft=i(d8),T(q7.$$.fragment,d8),d8.forEach(t),Mft=i(Di),nt=n(Di,"DIV",{class:!0});var Gi=s(nt);T(BS.$$.fragment,Gi),Eft=i(Gi),M8e=n(Gi,"P",{});var Ura=s(M8e);Cft=r(Ura,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ura.forEach(t),wft=i(Gi),On=n(Gi,"P",{});var c8=s(On);Aft=r(c8,"The model class to instantiate is selected based on the "),E8e=n(c8,"CODE",{});var Hra=s(E8e);Lft=r(Hra,"model_type"),Hra.forEach(t),yft=r(c8,` property of the config object (either
passed as an argument or loaded from `),C8e=n(c8,"CODE",{});var Jra=s(C8e);xft=r(Jra,"pretrained_model_name_or_path"),Jra.forEach(t),$ft=r(c8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w8e=n(c8,"CODE",{});var Yra=s(w8e);kft=r(Yra,"pretrained_model_name_or_path"),Yra.forEach(t),Sft=r(c8,":"),c8.forEach(t),Rft=i(Gi),A8e=n(Gi,"UL",{});var Kra=s(A8e);j7=n(Kra,"LI",{});var QQe=s(j7);L8e=n(QQe,"STRONG",{});var Zra=s(L8e);Pft=r(Zra,"vision-encoder-decoder"),Zra.forEach(t),Bft=r(QQe," \u2014 "),Oae=n(QQe,"A",{href:!0});var eta=s(Oae);Ift=r(eta,"FlaxVisionEncoderDecoderModel"),eta.forEach(t),Nft=r(QQe," (Vision Encoder decoder model)"),QQe.forEach(t),Kra.forEach(t),qft=i(Gi),T(D7.$$.fragment,Gi),Gi.forEach(t),Di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(cna)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Xn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoConfig"),c(Wn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoModel"),c(Qn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoTokenizer"),c(Ui,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel"),c(am,"id","extending-the-auto-classes"),c(am,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(am,"href","#extending-the-auto-classes"),c(Hi,"class","relative group"),c(sm,"id","transformers.AutoConfig"),c(sm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sm,"href","#transformers.AutoConfig"),c(Ji,"class","relative group"),c(fP,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(mP,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig"),c(gP,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig"),c(hP,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig"),c(pP,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig"),c(_P,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(uP,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig"),c(bP,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(vP,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(FP,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(TP,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomConfig"),c(MP,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig"),c(EP,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig"),c(CP,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig"),c(wP,"href","/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenConfig"),c(AP,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig"),c(LP,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig"),c(yP,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig"),c(xP,"href","/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtConfig"),c($P,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(kP,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(SP,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(RP,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig"),c(PP,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(BP,"href","/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(IP,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig"),c(NP,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig"),c(qP,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig"),c(jP,"href","/docs/transformers/pr_16543/en/model_doc/donut#transformers.DonutSwinConfig"),c(DP,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig"),c(GP,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig"),c(OP,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig"),c(VP,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(XP,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig"),c(zP,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaConfig"),c(WP,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig"),c(QP,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig"),c(UP,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig"),c(HP,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNConfig"),c(JP,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config"),c(YP,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(KP,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(ZP,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig"),c(eB,"href","/docs/transformers/pr_16543/en/model_doc/groupvit#transformers.GroupViTConfig"),c(oB,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig"),c(rB,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig"),c(tB,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(aB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(nB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(sB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(lB,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig"),c(iB,"href","/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitConfig"),c(dB,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig"),c(cB,"href","/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Config"),c(fB,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig"),c(mB,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig"),c(gB,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config"),c(hB,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig"),c(pB,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(_B,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig"),c(uB,"href","/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTConfig"),c(bB,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(vB,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(FB,"href","/docs/transformers/pr_16543/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(TB,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig"),c(MB,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config"),c(EB,"href","/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpConfig"),c(CB,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig"),c(wB,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(AB,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(LB,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig"),c(yB,"href","/docs/transformers/pr_16543/en/model_doc/owlvit#transformers.OwlViTConfig"),c(xB,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig"),c($B,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig"),c(kB,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig"),c(SB,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(RB,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(PB,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(BB,"href","/docs/transformers/pr_16543/en/model_doc/rag#transformers.RagConfig"),c(IB,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmConfig"),c(NB,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig"),c(qB,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig"),c(jB,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig"),c(DB,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig"),c(GB,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig"),c(OB,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig"),c(VB,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig"),c(XB,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig"),c(zB,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig"),c(WB,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig"),c(QB,"href","/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(UB,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(HB,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(JB,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig"),c(YB,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(KB,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig"),c(ZB,"href","/docs/transformers/pr_16543/en/model_doc/swinv2#transformers.Swinv2Config"),c(eI,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config"),c(oI,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig"),c(rI,"href","/docs/transformers/pr_16543/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(tI,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(aI,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRConfig"),c(nI,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(sI,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(lI,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig"),c(iI,"href","/docs/transformers/pr_16543/en/model_doc/videomae#transformers.VideoMAEConfig"),c(dI,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig"),c(cI,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(fI,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(mI,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(gI,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig"),c(hI,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(pI,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(_I,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(uI,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig"),c(bI,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig"),c(vI,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig"),c(FI,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(TI,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(MI,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(EI,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig"),c(CI,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosConfig"),c(wI,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"id","transformers.AutoTokenizer"),c(Eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eh,"href","#transformers.AutoTokenizer"),c(Ki,"class","relative group"),c(AI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(LI,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),c(yI,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(xI,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartTokenizer"),c($I,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartTokenizerFast"),c(kI,"href","/docs/transformers/pr_16543/en/model_doc/barthez#transformers.BarthezTokenizer"),c(SI,"href","/docs/transformers/pr_16543/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(RI,"href","/docs/transformers/pr_16543/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(PI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(BI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(II,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(NI,"href","/docs/transformers/pr_16543/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(qI,"href","/docs/transformers/pr_16543/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(jI,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(DI,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(GI,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(OI,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(VI,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(XI,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(zI,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(WI,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(QI,"href","/docs/transformers/pr_16543/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(UI,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertTokenizer"),c(HI,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(JI,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineTokenizer"),c(YI,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizer"),c(KI,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(ZI,"href","/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(eN,"href","/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(oN,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(rN,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(tN,"href","/docs/transformers/pr_16543/en/model_doc/cpm#transformers.CpmTokenizer"),c(aN,"href","/docs/transformers/pr_16543/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(nN,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(sN,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(lN,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(iN,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaTokenizer"),c(dN,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(cN,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(fN,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(mN,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(gN,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(hN,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(pN,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(_N,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraTokenizer"),c(uN,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(bN,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(vN,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetTokenizer"),c(FN,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(TN,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(MN,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelTokenizer"),c(EN,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(CN,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wN,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(AN,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(LN,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(yN,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(xN,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c($N,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(kN,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizer"),c(SN,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(RN,"href","/docs/transformers/pr_16543/en/model_doc/herbert#transformers.HerbertTokenizer"),c(PN,"href","/docs/transformers/pr_16543/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(BN,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(IN,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(NN,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(qN,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(jN,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(DN,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(GN,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(ON,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(VN,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(XN,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(zN,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(WN,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDTokenizer"),c(QN,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDTokenizerFast"),c(UN,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerTokenizer"),c(HN,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(JN,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Tokenizer"),c(YN,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5TokenizerFast"),c(KN,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeTokenizer"),c(ZN,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(eq,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(oq,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(rq,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianTokenizer"),c(tq,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartTokenizer"),c(aq,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(nq,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(sq,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(lq,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(iq,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(dq,"href","/docs/transformers/pr_16543/en/model_doc/mluke#transformers.MLukeTokenizer"),c(cq,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(fq,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(mq,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(gq,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(hq,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Tokenizer"),c(pq,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5TokenizerFast"),c(_q,"href","/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpTokenizer"),c(uq,"href","/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(bq,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(vq,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(Fq,"href","/docs/transformers/pr_16543/en/model_doc/nllb#transformers.NllbTokenizer"),c(Tq,"href","/docs/transformers/pr_16543/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(Mq,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),c(Eq,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cq,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(wq,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(Aq,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Lq,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizer"),c(yq,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(xq,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizer"),c($q,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(kq,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(Sq,"href","/docs/transformers/pr_16543/en/model_doc/phobert#transformers.PhobertTokenizer"),c(Rq,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartTokenizer"),c(Pq,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(Bq,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(Iq,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(Nq,"href","/docs/transformers/pr_16543/en/model_doc/rag#transformers.RagTokenizer"),c(qq,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmTokenizer"),c(jq,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmTokenizerFast"),c(Dq,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerTokenizer"),c(Gq,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(Oq,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertTokenizer"),c(Vq,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(Xq,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(zq,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(Wq,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Qq,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Uq,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(Hq,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(Jq,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Yq,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(Kq,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterTokenizer"),c(Zq,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(ej,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(oj,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(rj,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Tokenizer"),c(tj,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5TokenizerFast"),c(aj,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasTokenizer"),c(nj,"href","/docs/transformers/pr_16543/en/model_doc/tapex#transformers.TapexTokenizer"),c(sj,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(lj,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(ij,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(dj,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(cj,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(fj,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(mj,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(gj,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(hj,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMTokenizer"),c(pj,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(_j,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMTokenizer"),c(uj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(bj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(vj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(Fj,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Tj,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Mj,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(Ej,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(Cj,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),c(wj,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ap,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"id","transformers.AutoFeatureExtractor"),c(np,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(np,"href","#transformers.AutoFeatureExtractor"),c(Zi,"class","relative group"),c(Aj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(Lj,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(yj,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(xj,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($j,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(kj,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Sj,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Rj,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Pj,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(Bj,"href","/docs/transformers/pr_16543/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(Ij,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(Nj,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(qj,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(jj,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Dj,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Gj,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(Oj,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(Vj,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(Xj,"href","/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(zj,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(Wj,"href","/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(Qj,"href","/docs/transformers/pr_16543/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(Uj,"href","/docs/transformers/pr_16543/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(Hj,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Jj,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Yj,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Kj,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Zj,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(eD,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(oD,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(rD,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(tD,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(aD,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(nD,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(sD,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(lD,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(iD,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(dD,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(cD,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qp,"id","transformers.AutoProcessor"),c(Qp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qp,"href","#transformers.AutoProcessor"),c(ed,"class","relative group"),c(fD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(mD,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPProcessor"),c(gD,"href","/docs/transformers/pr_16543/en/model_doc/donut#transformers.DonutProcessor"),c(hD,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaProcessor"),c(pD,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPProcessor"),c(_D,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(uD,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(bD,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(vD,"href","/docs/transformers/pr_16543/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(FD,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(TD,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(MD,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(ED,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(CD,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRProcessor"),c(wD,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(AD,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(LD,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltProcessor"),c(yD,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(xD,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($D,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kD,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(__,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u_,"id","transformers.AutoModel"),c(u_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u_,"href","#transformers.AutoModel"),c(rd,"class","relative group"),c(SD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BD,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertModel"),c(ID,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartModel"),c(ND,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitModel"),c(qD,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel"),c(jD,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(DD,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdModel"),c(GD,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(OD,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(VD,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(XD,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomModel"),c(zD,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertModel"),c(WD,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineModel"),c(QD,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPModel"),c(UD,"href","/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenModel"),c(HD,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertModel"),c(JD,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextModel"),c(YD,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLModel"),c(KD,"href","/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtModel"),c(ZD,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(eG,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(oG,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(rG,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaModel"),c(tG,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(aG,"href","/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(nG,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTModel"),c(sG,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrModel"),c(lG,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertModel"),c(iG,"href","/docs/transformers/pr_16543/en/model_doc/donut#transformers.DonutSwinModel"),c(dG,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(cG,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTModel"),c(fG,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraModel"),c(mG,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertModel"),c(gG,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaModel"),c(hG,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetModel"),c(pG,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTModel"),c(_G,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelModel"),c(uG,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelBaseModel"),c(bG,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNModel"),c(vG,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Model"),c(FG,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(TG,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(MG,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJModel"),c(EG,"href","/docs/transformers/pr_16543/en/model_doc/groupvit#transformers.GroupViTModel"),c(CG,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertModel"),c(wG,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertModel"),c(AG,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(LG,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(yG,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(xG,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c($G,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDModel"),c(kG,"href","/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitModel"),c(SG,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerModel"),c(RG,"href","/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Model"),c(PG,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeModel"),c(BG,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertModel"),c(IG,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Model"),c(NG,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianModel"),c(qG,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerModel"),c(jG,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartModel"),c(DG,"href","/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTModel"),c(GG,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(OG,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertModel"),c(VG,"href","/docs/transformers/pr_16543/en/model_doc/mobilevit#transformers.MobileViTModel"),c(XG,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetModel"),c(zG,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Model"),c(WG,"href","/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpModel"),c(QG,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaModel"),c(UG,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Model"),c(HG,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerModel"),c(JG,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(YG,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTModel"),c(KG,"href","/docs/transformers/pr_16543/en/model_doc/owlvit#transformers.OwlViTModel"),c(ZG,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusModel"),c(eO,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverModel"),c(oO,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartModel"),c(rO,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerModel"),c(tO,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(aO,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertModel"),c(nO,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModel"),c(sO,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetModel"),c(lO,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertModel"),c(iO,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetModel"),c(dO,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel"),c(cO,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaModel"),c(fO,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerModel"),c(mO,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerModel"),c(gO,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWModel"),c(hO,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDModel"),c(pO,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(_O,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterModel"),c(uO,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(bO,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinModel"),c(vO,"href","/docs/transformers/pr_16543/en/model_doc/swinv2#transformers.Swinv2Model"),c(FO,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Model"),c(TO,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasModel"),c(MO,"href","/docs/transformers/pr_16543/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(EO,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(CO,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechModel"),c(wO,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(AO,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanModel"),c(LO,"href","/docs/transformers/pr_16543/en/model_doc/videomae#transformers.VideoMAEModel"),c(yO,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltModel"),c(xO,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c($O,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertModel"),c(kO,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTModel"),c(SO,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(RO,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(PO,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(BO,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMModel"),c(IO,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMModel"),c(NO,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMModel"),c(qO,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(jO,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(DO,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(GO,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetModel"),c(OO,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosModel"),c(VO,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y1,"id","transformers.AutoModelForPreTraining"),c(y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y1,"href","#transformers.AutoModelForPreTraining"),c(nd,"class","relative group"),c(XO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QO,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForPreTraining"),c(UO,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(HO,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForPreTraining"),c(JO,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(YO,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForCausalLM"),c(KO,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(ZO,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(eV,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(oV,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(rV,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(tV,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(aV,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForPreTraining"),c(nV,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(sV,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaForPreTraining"),c(lV,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForPreTraining"),c(iV,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(dV,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(cV,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(fV,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(mV,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(gV,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(hV,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeForMaskedLM"),c(pV,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(_V,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(uV,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(bV,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(vV,"href","/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(FV,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(TV,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(MV,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel"),c(EV,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(CV,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(wV,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(AV,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(LV,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(yV,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(xV,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c($V,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(kV,"href","/docs/transformers/pr_16543/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(SV,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(RV,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(PV,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(BV,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(IV,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(NV,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(qV,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(jV,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w4,"id","transformers.AutoModelForCausalLM"),c(w4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w4,"href","#transformers.AutoModelForCausalLM"),c(id,"class","relative group"),c(DV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VV,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForCausalLM"),c(XV,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertLMHeadModel"),c(zV,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(WV,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(QV,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(UV,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(HV,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(JV,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForCausalLM"),c(YV,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(KV,"href","/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(ZV,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(eX,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(oX,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForCausalLM"),c(rX,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(tX,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(aX,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(nX,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(sX,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianForCausalLM"),c(lX,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForCausalLM"),c(iX,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(dX,"href","/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpForCausalLM"),c(cX,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(fX,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTForCausalLM"),c(mX,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(gX,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(hX,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(pX,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(_X,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(uX,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(bX,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(vX,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(FX,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(TX,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(MX,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(EX,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(CX,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(wX,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(AX,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(LX,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(yX,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p2,"id","transformers.AutoModelForMaskedLM"),c(p2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p2,"href","#transformers.AutoModelForMaskedLM"),c(fd,"class","relative group"),c(xX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($X,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SX,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(RX,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(PX,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMaskedLM"),c(BX,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(IX,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(NX,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(qX,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(jX,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(DX,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(GX,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(OX,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(VX,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(XX,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(zX,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(WX,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(QX,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(UX,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(HX,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeForMaskedLM"),c(JX,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(YX,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(KX,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(ZX,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(ez,"href","/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(oz,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(rz,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(tz,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(az,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(nz,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(sz,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(lz,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(iz,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(dz,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(cz,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(fz,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(mz,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(gz,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(hz,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tb,"id","transformers.AutoModelForSeq2SeqLM"),c(tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tb,"href","#transformers.AutoModelForSeq2SeqLM"),c(hd,"class","relative group"),c(pz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_z,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bz,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(vz,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Fz,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Tz,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Mz,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Ez,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Cz,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(wz,"href","/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(Az,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Lz,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianMTModel"),c(yz,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(xz,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c($z,"href","/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(kz,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Sz,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Rz,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Pz,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Bz,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Iz,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ab,"id","transformers.AutoModelForSequenceClassification"),c(Ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ab,"href","#transformers.AutoModelForSequenceClassification"),c(ud,"class","relative group"),c(Nz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dz,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Gz,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Oz,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Vz,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Xz,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(zz,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(Wz,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Qz,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Uz,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Hz,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Jz,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Yz,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Kz,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Zz,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(eW,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(oW,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(rW,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(tW,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(aW,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(nW,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(sW,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(lW,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(iW,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(dW,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(cW,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(fW,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForSequenceClassification"),c(mW,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(gW,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(hW,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(pW,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(_W,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(uW,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(bW,"href","/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(vW,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(FW,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(TW,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(MW,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(EW,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(CW,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(wW,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(AW,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(LW,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(yW,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(xW,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c($W,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(kW,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(SW,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(RW,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(PW,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(BW,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(IW,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(NW,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yv,"id","transformers.AutoModelForMultipleChoice"),c(yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yv,"href","#transformers.AutoModelForMultipleChoice"),c(Fd,"class","relative group"),c(qW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GW,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(OW,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMultipleChoice"),c(VW,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(XW,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(zW,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(WW,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(QW,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(UW,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(HW,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(JW,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(YW,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(KW,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(ZW,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(eQ,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(oQ,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(rQ,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(tQ,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(aQ,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(nQ,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(sQ,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(lQ,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(iQ,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(dQ,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(cQ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(fQ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(mQ,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(gQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(hQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(pQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(_Q,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(uQ,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d3,"id","transformers.AutoModelForNextSentencePrediction"),c(d3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d3,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ed,"class","relative group"),c(bQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TQ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(MQ,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(EQ,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(CQ,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(wQ,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(AQ,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v3,"id","transformers.AutoModelForTokenClassification"),c(v3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v3,"href","#transformers.AutoModelForTokenClassification"),c(Ad,"class","relative group"),c(LQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Q,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(kQ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForTokenClassification"),c(SQ,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(RQ,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(PQ,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(BQ,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForTokenClassification"),c(IQ,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(NQ,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(qQ,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(jQ,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(DQ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(GQ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(OQ,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(VQ,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(XQ,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(zQ,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(WQ,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(QQ,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(UQ,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(HQ,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(JQ,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(YQ,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeForTokenClassification"),c(KQ,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(ZQ,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(eU,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(oU,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(rU,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(tU,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(aU,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(nU,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(sU,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(lU,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(iU,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(dU,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(cU,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(fU,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(mU,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s5,"id","transformers.AutoModelForQuestionAnswering"),c(s5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s5,"href","#transformers.AutoModelForQuestionAnswering"),c(xd,"class","relative group"),c(gU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_U,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(uU,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(bU,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(vU,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(FU,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(TU,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(MU,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(EU,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(CU,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(wU,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(AU,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(LU,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(yU,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(xU,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c($U,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(kU,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(SU,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(RU,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(PU,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(BU,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(IU,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(qU,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(jU,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(KU,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(ZU,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(eH,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(oH,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(rH,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(tH,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(aH,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z5,"id","transformers.AutoModelForTableQuestionAnswering"),c(Z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Sd,"class","relative group"),c(nH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iH,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a6,"id","transformers.AutoModelForImageClassification"),c(a6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a6,"href","#transformers.AutoModelForImageClassification"),c(Bd,"class","relative group"),c(dH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForImageClassification"),c(gH,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(hH,"href","/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtForImageClassification"),c(pH,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(_H,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassification"),c(uH,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(bH,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(vH,"href","/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitForImageClassification"),c(FH,"href","/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(TH,"href","/docs/transformers/pr_16543/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(MH,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(EH,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(CH,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(wH,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(AH,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(LH,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(yH,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(xH,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForImageClassification"),c($H,"href","/docs/transformers/pr_16543/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(kH,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanForImageClassification"),c(SH,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M6,"id","transformers.AutoModelForVideoClassification"),c(M6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M6,"href","#transformers.AutoModelForVideoClassification"),c(qd,"class","relative group"),c(RH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IH,"href","/docs/transformers/pr_16543/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L6,"id","transformers.AutoModelForVision2Seq"),c(L6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L6,"href","#transformers.AutoModelForVision2Seq"),c(Gd,"class","relative group"),c(NH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DH,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S6,"id","transformers.AutoModelForVisualQuestionAnswering"),c(S6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S6,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Xd,"class","relative group"),c(GH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XH,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N6,"id","transformers.AutoModelForAudioClassification"),c(N6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N6,"href","#transformers.AutoModelForAudioClassification"),c(Qd,"class","relative group"),c(zH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UH,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(HH,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(JH,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(YH,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(KH,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(eJ,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(oJ,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(rJ,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J6,"id","transformers.AutoModelForAudioFrameClassification"),c(J6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J6,"href","#transformers.AutoModelForAudioFrameClassification"),c(Jd,"class","relative group"),c(tJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sJ,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(lJ,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(iJ,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(dJ,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(cJ,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nF,"id","transformers.AutoModelForCTC"),c(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nF,"href","#transformers.AutoModelForCTC"),c(Zd,"class","relative group"),c(fJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hJ,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(pJ,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForCTC"),c(_J,"href","/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTForCTC"),c(uJ,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForCTC"),c(bJ,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForCTC"),c(vJ,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(FJ,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(TJ,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(MJ,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(EJ,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForCTC"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(rc,"class","relative group"),c(CJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LJ,"href","/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(yJ,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wF,"id","transformers.AutoModelForAudioXVector"),c(wF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wF,"href","#transformers.AutoModelForAudioXVector"),c(nc,"class","relative group"),c(xJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($J,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SJ,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(RJ,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(PJ,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(BJ,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(IJ,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForXVector"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PF,"id","transformers.AutoModelForMaskedImageModeling"),c(PF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PF,"href","#transformers.AutoModelForMaskedImageModeling"),c(ic,"class","relative group"),c(NJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(GJ,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(OJ,"href","/docs/transformers/pr_16543/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(VJ,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OF,"id","transformers.AutoModelForObjectDetection"),c(OF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OF,"href","#transformers.AutoModelForObjectDetection"),c(fc,"class","relative group"),c(XJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QJ,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForObjectDetection"),c(UJ,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UF,"id","transformers.AutoModelForImageSegmentation"),c(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UF,"href","#transformers.AutoModelForImageSegmentation"),c(hc,"class","relative group"),c(HJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KJ,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.AutoModelForSemanticSegmentation"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.AutoModelForSemanticSegmentation"),c(uc,"class","relative group"),c(ZJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(tY,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(aY,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(nY,"href","/docs/transformers/pr_16543/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(sY,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iT,"id","transformers.AutoModelForInstanceSegmentation"),c(iT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Fc,"class","relative group"),c(lY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cY,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gT,"id","transformers.TFAutoModel"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.TFAutoModel"),c(Ec,"class","relative group"),c(fY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hY,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertModel"),c(pY,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartModel"),c(_Y,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertModel"),c(uY,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(bY,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(vY,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertModel"),c(FY,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.TFCLIPModel"),c(TY,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertModel"),c(MY,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextModel"),c(EY,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLModel"),c(CY,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(wY,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaModel"),c(AY,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(LY,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.TFDeiTModel"),c(yY,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(xY,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c($Y,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraModel"),c(kY,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(SY,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelModel"),c(RY,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(PY,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2Model"),c(BY,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJModel"),c(IY,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.TFHubertModel"),c(NY,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(qY,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDModel"),c(jY,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerModel"),c(DY,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertModel"),c(GY,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianModel"),c(OY,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartModel"),c(VY,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(XY,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetModel"),c(zY,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5Model"),c(WY,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(QY,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.TFOPTModel"),c(UY,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusModel"),c(HY,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.TFRegNetModel"),c(JY,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertModel"),c(YY,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.TFResNetModel"),c(KY,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaModel"),c(ZY,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerModel"),c(eK,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.TFSegformerModel"),c(oK,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(rK,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinModel"),c(tK,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5Model"),c(aK,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasModel"),c(nK,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(sK,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTModel"),c(lK,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(iK,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(dK,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMModel"),c(cK,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMModel"),c(fK,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(mK,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gM,"id","transformers.TFAutoModelForPreTraining"),c(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gM,"href","#transformers.TFAutoModelForPreTraining"),c(Ac,"class","relative group"),c(gK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_K,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(uK,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(bK,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForPreTraining"),c(vK,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(FK,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(TK,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(MK,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(EK,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(CK,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(wK,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(AK,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(LK,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(yK,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(xK,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c($K,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(kK,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(SK,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(RK,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(PK,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(BK,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(IK,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(NK,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(qK,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jM,"id","transformers.TFAutoModelForCausalLM"),c(jM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jM,"href","#transformers.TFAutoModelForCausalLM"),c(xc,"class","relative group"),c(jK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OK,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(VK,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(XK,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(zK,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(WK,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(QK,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(UK,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(HK,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(JK,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(YK,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(KK,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(ZK,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),c(eZ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(oZ,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rE,"id","transformers.TFAutoModelForImageClassification"),c(rE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rE,"href","#transformers.TFAutoModelForImageClassification"),c(Sc,"class","relative group"),c(rZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nZ,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(sZ,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(lZ,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(iZ,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(dZ,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(cZ,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(fZ,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(mZ,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(gZ,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mE,"id","transformers.TFAutoModelForSemanticSegmentation"),c(mE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mE,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(Bc,"class","relative group"),c(hZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Z,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uZ,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(bZ,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uE,"id","transformers.TFAutoModelForMaskedLM"),c(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uE,"href","#transformers.TFAutoModelForMaskedLM"),c(qc,"class","relative group"),c(vZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MZ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(EZ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(CZ,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(wZ,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(AZ,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(LZ,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(yZ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(xZ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c($Z,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(kZ,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(SZ,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(RZ,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(PZ,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(BZ,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(IZ,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(NZ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(qZ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(jZ,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(DZ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(GZ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(DE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(OZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zZ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(WZ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(QZ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(UZ,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(HZ,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(JZ,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianMTModel"),c(YZ,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(KZ,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(ZZ,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(eee,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZE,"id","transformers.TFAutoModelForSequenceClassification"),c(ZE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZE,"href","#transformers.TFAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(oee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ree,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aee,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(nee,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(see,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(lee,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(iee,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(dee,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(cee,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(fee,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(mee,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(gee,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(hee,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(pee,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(_ee,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(uee,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(bee,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(vee,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(Fee,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(Tee,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(Mee,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(Eee,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Cee,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(wee,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(Aee,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(Lee,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(yee,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(xee,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yC,"id","transformers.TFAutoModelForMultipleChoice"),c(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yC,"href","#transformers.TFAutoModelForMultipleChoice"),c(Qc,"class","relative group"),c($ee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(See,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ree,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(Pee,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(Bee,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(Iee,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(Nee,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(qee,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(jee,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(Dee,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(Gee,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(Oee,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(Vee,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(Xee,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(zee,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(Wee,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(Qee,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(Uee,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(Hee,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(UC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Jc,"class","relative group"),c(Jee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zee,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(eoe,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Zc,"class","relative group"),c(ooe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(roe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(toe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aoe,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t0,"id","transformers.TFAutoModelForTokenClassification"),c(t0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t0,"href","#transformers.TFAutoModelForTokenClassification"),c(rf,"class","relative group"),c(noe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(soe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(loe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ioe,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(doe,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(coe,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(foe,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(moe,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(goe,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(hoe,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(poe,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(_oe,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(uoe,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(boe,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(voe,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(Foe,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(Toe,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(Moe,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(Eoe,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Coe,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(woe,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(Aoe,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(Loe,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A0,"id","transformers.TFAutoModelForQuestionAnswering"),c(A0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A0,"href","#transformers.TFAutoModelForQuestionAnswering"),c(nf,"class","relative group"),c(yoe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xoe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($oe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(koe,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(Soe,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(Roe,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(Poe,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(Boe,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(Ioe,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(Noe,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(qoe,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(joe,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(Doe,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(Goe,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(Ooe,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(Voe,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(Xoe,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(zoe,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(Woe,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(Qoe,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(Uoe,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(Hoe,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(Joe,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H0,"id","transformers.TFAutoModelForVision2Seq"),c(H0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H0,"href","#transformers.TFAutoModelForVision2Seq"),c(df,"class","relative group"),c(Yoe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Koe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zoe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ere,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z0,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(Z0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z0,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(mf,"class","relative group"),c(ore,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rre,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tre,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(are,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tw,"id","transformers.FlaxAutoModel"),c(tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tw,"href","#transformers.FlaxAutoModel"),c(pf,"class","relative group"),c(nre,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sre,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lre,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ire,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertModel"),c(dre,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartModel"),c(cre,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitModel"),c(fre,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertModel"),c(mre,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(gre,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(hre,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(pre,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.FlaxCLIPModel"),c(_re,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(ure,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraModel"),c(bre,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(vre,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(Fre,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(Tre,"href","/docs/transformers/pr_16543/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Mre,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianModel"),c(Ere,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Cre,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5Model"),c(wre,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.FlaxOPTModel"),c(Are,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Lre,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(yre,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(xre,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5Model"),c($re,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(kre,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTModel"),c(Sre,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Rre,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Pre,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rw,"id","transformers.FlaxAutoModelForCausalLM"),c(Rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rw,"href","#transformers.FlaxAutoModelForCausalLM"),c(bf,"class","relative group"),c(Bre,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ire,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nre,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qre,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(jre,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Dre,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Gre,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Ore,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Vre,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Xre,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(zre,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Wre,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Qre,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ww,"id","transformers.FlaxAutoModelForPreTraining"),c(Ww,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ww,"href","#transformers.FlaxAutoModelForPreTraining"),c(Tf,"class","relative group"),c(Ure,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hre,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jre,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yre,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Kre,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Zre,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(ete,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(ote,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(rte,"href","/docs/transformers/pr_16543/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(tte,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(ate,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(nte,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(ste,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(lte,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(ite,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(dte,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iA,"id","transformers.FlaxAutoModelForMaskedLM"),c(iA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iA,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Cf,"class","relative group"),c(cte,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fte,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mte,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gte,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(hte,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(pte,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(_te,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(ute,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(bte,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(vte,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Fte,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Tte,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Mte,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TA,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(TA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TA,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Lf,"class","relative group"),c(Ete,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cte,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wte,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ate,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Lte,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(yte,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(xte,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c($te,"href","/docs/transformers/pr_16543/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(kte,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Ste,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Rte,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Pte,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Bte,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PA,"id","transformers.FlaxAutoModelForSequenceClassification"),c(PA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PA,"href","#transformers.FlaxAutoModelForSequenceClassification"),c($f,"class","relative group"),c(Ite,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nte,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qte,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jte,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Dte,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Gte,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Ote,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Vte,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Xte,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(zte,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Wte,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Qte,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Ute,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QA,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(QA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QA,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Rf,"class","relative group"),c(Hte,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jte,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yte,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kte,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Zte,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(eae,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(oae,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(rae,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(tae,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(aae,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(nae,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(sae,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(lae,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s7,"id","transformers.FlaxAutoModelForTokenClassification"),c(s7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s7,"href","#transformers.FlaxAutoModelForTokenClassification"),c(If,"class","relative group"),c(iae,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dae,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cae,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fae,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(mae,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(gae,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(hae,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(pae,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(_ae,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(uae,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(bae,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u7,"id","transformers.FlaxAutoModelForMultipleChoice"),c(u7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u7,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(jf,"class","relative group"),c(vae,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fae,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tae,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mae,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Eae,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Cae,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(wae,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Aae,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Lae,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(yae,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(xae,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y7,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(y7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y7,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Of,"class","relative group"),c($ae,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kae,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sae,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rae,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S7,"id","transformers.FlaxAutoModelForImageClassification"),c(S7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S7,"href","#transformers.FlaxAutoModelForImageClassification"),c(zf,"class","relative group"),c(Pae,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bae,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iae,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nae,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(qae,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N7,"id","transformers.FlaxAutoModelForVision2Seq"),c(N7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N7,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Uf,"class","relative group"),c(jae,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dae,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gae,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oae,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Ao),e(Ao,Oi),b(f,em,u),b(f,ft,u),e(ft,Vi),e(ft,Xi),e(Xi,f8),e(ft,om),b(f,Oe,u),b(f,Qe,u),e(Qe,zi),e(Qe,Xn),e(Xn,m8),e(Qe,zn),e(Qe,Wn),e(Wn,g8),e(Qe,Wi),e(Qe,Qn),e(Qn,h8),e(Qe,Qi),b(f,rm,u),M(ja,f,u),b(f,Ue,u),b(f,Ae,u),e(Ae,nP),e(Ae,Ui),e(Ui,sP),e(Ae,lP),b(f,Lo,u),b(f,Da,u),e(Da,iP),e(Da,tm),e(tm,dP),e(Da,bKe),b(f,UQe,u),b(f,Hi,u),e(Hi,am),e(am,Dse),M(p8,Dse,null),e(Hi,vKe),e(Hi,Gse),e(Gse,FKe),b(f,HQe,u),b(f,Un,u),e(Un,TKe),e(Un,Ose),e(Ose,MKe),e(Un,EKe),e(Un,Vse),e(Vse,CKe),e(Un,wKe),b(f,JQe,u),M(_8,f,u),b(f,YQe,u),b(f,cP,u),e(cP,AKe),b(f,KQe,u),M(nm,f,u),b(f,ZQe,u),b(f,Ji,u),e(Ji,sm),e(sm,Xse),M(u8,Xse,null),e(Ji,LKe),e(Ji,zse),e(zse,yKe),b(f,eUe,u),b(f,yo,u),M(b8,yo,null),e(yo,xKe),e(yo,v8),e(v8,$Ke),e(v8,fP),e(fP,kKe),e(v8,SKe),e(yo,RKe),e(yo,F8),e(F8,PKe),e(F8,Wse),e(Wse,BKe),e(F8,IKe),e(yo,NKe),e(yo,kr),M(T8,kr,null),e(kr,qKe),e(kr,Qse),e(Qse,jKe),e(kr,DKe),e(kr,Yi),e(Yi,GKe),e(Yi,Use),e(Use,OKe),e(Yi,VKe),e(Yi,Hse),e(Hse,XKe),e(Yi,zKe),e(kr,WKe),e(kr,A),e(A,lm),e(lm,Jse),e(Jse,QKe),e(lm,UKe),e(lm,mP),e(mP,HKe),e(lm,JKe),e(A,YKe),e(A,im),e(im,Yse),e(Yse,KKe),e(im,ZKe),e(im,gP),e(gP,eZe),e(im,oZe),e(A,rZe),e(A,dm),e(dm,Kse),e(Kse,tZe),e(dm,aZe),e(dm,hP),e(hP,nZe),e(dm,sZe),e(A,lZe),e(A,cm),e(cm,Zse),e(Zse,iZe),e(cm,dZe),e(cm,pP),e(pP,cZe),e(cm,fZe),e(A,mZe),e(A,fm),e(fm,ele),e(ele,gZe),e(fm,hZe),e(fm,_P),e(_P,pZe),e(fm,_Ze),e(A,uZe),e(A,mm),e(mm,ole),e(ole,bZe),e(mm,vZe),e(mm,uP),e(uP,FZe),e(mm,TZe),e(A,MZe),e(A,gm),e(gm,rle),e(rle,EZe),e(gm,CZe),e(gm,bP),e(bP,wZe),e(gm,AZe),e(A,LZe),e(A,hm),e(hm,tle),e(tle,yZe),e(hm,xZe),e(hm,vP),e(vP,$Ze),e(hm,kZe),e(A,SZe),e(A,pm),e(pm,ale),e(ale,RZe),e(pm,PZe),e(pm,FP),e(FP,BZe),e(pm,IZe),e(A,NZe),e(A,_m),e(_m,nle),e(nle,qZe),e(_m,jZe),e(_m,TP),e(TP,DZe),e(_m,GZe),e(A,OZe),e(A,um),e(um,sle),e(sle,VZe),e(um,XZe),e(um,MP),e(MP,zZe),e(um,WZe),e(A,QZe),e(A,bm),e(bm,lle),e(lle,UZe),e(bm,HZe),e(bm,EP),e(EP,JZe),e(bm,YZe),e(A,KZe),e(A,vm),e(vm,ile),e(ile,ZZe),e(vm,eeo),e(vm,CP),e(CP,oeo),e(vm,reo),e(A,teo),e(A,Fm),e(Fm,dle),e(dle,aeo),e(Fm,neo),e(Fm,wP),e(wP,seo),e(Fm,leo),e(A,ieo),e(A,Tm),e(Tm,cle),e(cle,deo),e(Tm,ceo),e(Tm,AP),e(AP,feo),e(Tm,meo),e(A,geo),e(A,Mm),e(Mm,fle),e(fle,heo),e(Mm,peo),e(Mm,LP),e(LP,_eo),e(Mm,ueo),e(A,beo),e(A,Em),e(Em,mle),e(mle,veo),e(Em,Feo),e(Em,yP),e(yP,Teo),e(Em,Meo),e(A,Eeo),e(A,Cm),e(Cm,gle),e(gle,Ceo),e(Cm,weo),e(Cm,xP),e(xP,Aeo),e(Cm,Leo),e(A,yeo),e(A,wm),e(wm,hle),e(hle,xeo),e(wm,$eo),e(wm,$P),e($P,keo),e(wm,Seo),e(A,Reo),e(A,Am),e(Am,ple),e(ple,Peo),e(Am,Beo),e(Am,kP),e(kP,Ieo),e(Am,Neo),e(A,qeo),e(A,Lm),e(Lm,_le),e(_le,jeo),e(Lm,Deo),e(Lm,SP),e(SP,Geo),e(Lm,Oeo),e(A,Veo),e(A,ym),e(ym,ule),e(ule,Xeo),e(ym,zeo),e(ym,RP),e(RP,Weo),e(ym,Qeo),e(A,Ueo),e(A,xm),e(xm,ble),e(ble,Heo),e(xm,Jeo),e(xm,PP),e(PP,Yeo),e(xm,Keo),e(A,Zeo),e(A,$m),e($m,vle),e(vle,eoo),e($m,ooo),e($m,BP),e(BP,roo),e($m,too),e(A,aoo),e(A,km),e(km,Fle),e(Fle,noo),e(km,soo),e(km,IP),e(IP,loo),e(km,ioo),e(A,doo),e(A,Sm),e(Sm,Tle),e(Tle,coo),e(Sm,foo),e(Sm,NP),e(NP,moo),e(Sm,goo),e(A,hoo),e(A,Rm),e(Rm,Mle),e(Mle,poo),e(Rm,_oo),e(Rm,qP),e(qP,uoo),e(Rm,boo),e(A,voo),e(A,Pm),e(Pm,Ele),e(Ele,Foo),e(Pm,Too),e(Pm,jP),e(jP,Moo),e(Pm,Eoo),e(A,Coo),e(A,Bm),e(Bm,Cle),e(Cle,woo),e(Bm,Aoo),e(Bm,DP),e(DP,Loo),e(Bm,yoo),e(A,xoo),e(A,Im),e(Im,wle),e(wle,$oo),e(Im,koo),e(Im,GP),e(GP,Soo),e(Im,Roo),e(A,Poo),e(A,Nm),e(Nm,Ale),e(Ale,Boo),e(Nm,Ioo),e(Nm,OP),e(OP,Noo),e(Nm,qoo),e(A,joo),e(A,qm),e(qm,Lle),e(Lle,Doo),e(qm,Goo),e(qm,VP),e(VP,Ooo),e(qm,Voo),e(A,Xoo),e(A,jm),e(jm,yle),e(yle,zoo),e(jm,Woo),e(jm,XP),e(XP,Qoo),e(jm,Uoo),e(A,Hoo),e(A,Dm),e(Dm,xle),e(xle,Joo),e(Dm,Yoo),e(Dm,zP),e(zP,Koo),e(Dm,Zoo),e(A,ero),e(A,Gm),e(Gm,$le),e($le,oro),e(Gm,rro),e(Gm,WP),e(WP,tro),e(Gm,aro),e(A,nro),e(A,Om),e(Om,kle),e(kle,sro),e(Om,lro),e(Om,QP),e(QP,iro),e(Om,dro),e(A,cro),e(A,Vm),e(Vm,Sle),e(Sle,fro),e(Vm,mro),e(Vm,UP),e(UP,gro),e(Vm,hro),e(A,pro),e(A,Xm),e(Xm,Rle),e(Rle,_ro),e(Xm,uro),e(Xm,HP),e(HP,bro),e(Xm,vro),e(A,Fro),e(A,zm),e(zm,Ple),e(Ple,Tro),e(zm,Mro),e(zm,JP),e(JP,Ero),e(zm,Cro),e(A,wro),e(A,Wm),e(Wm,Ble),e(Ble,Aro),e(Wm,Lro),e(Wm,YP),e(YP,yro),e(Wm,xro),e(A,$ro),e(A,Qm),e(Qm,Ile),e(Ile,kro),e(Qm,Sro),e(Qm,KP),e(KP,Rro),e(Qm,Pro),e(A,Bro),e(A,Um),e(Um,Nle),e(Nle,Iro),e(Um,Nro),e(Um,ZP),e(ZP,qro),e(Um,jro),e(A,Dro),e(A,Hm),e(Hm,qle),e(qle,Gro),e(Hm,Oro),e(Hm,eB),e(eB,Vro),e(Hm,Xro),e(A,zro),e(A,Jm),e(Jm,jle),e(jle,Wro),e(Jm,Qro),e(Jm,oB),e(oB,Uro),e(Jm,Hro),e(A,Jro),e(A,Ym),e(Ym,Dle),e(Dle,Yro),e(Ym,Kro),e(Ym,rB),e(rB,Zro),e(Ym,eto),e(A,oto),e(A,Km),e(Km,Gle),e(Gle,rto),e(Km,tto),e(Km,tB),e(tB,ato),e(Km,nto),e(A,sto),e(A,Zm),e(Zm,Ole),e(Ole,lto),e(Zm,ito),e(Zm,aB),e(aB,dto),e(Zm,cto),e(A,fto),e(A,eg),e(eg,Vle),e(Vle,mto),e(eg,gto),e(eg,nB),e(nB,hto),e(eg,pto),e(A,_to),e(A,og),e(og,Xle),e(Xle,uto),e(og,bto),e(og,sB),e(sB,vto),e(og,Fto),e(A,Tto),e(A,rg),e(rg,zle),e(zle,Mto),e(rg,Eto),e(rg,lB),e(lB,Cto),e(rg,wto),e(A,Ato),e(A,tg),e(tg,Wle),e(Wle,Lto),e(tg,yto),e(tg,iB),e(iB,xto),e(tg,$to),e(A,kto),e(A,ag),e(ag,Qle),e(Qle,Sto),e(ag,Rto),e(ag,dB),e(dB,Pto),e(ag,Bto),e(A,Ito),e(A,ng),e(ng,Ule),e(Ule,Nto),e(ng,qto),e(ng,cB),e(cB,jto),e(ng,Dto),e(A,Gto),e(A,sg),e(sg,Hle),e(Hle,Oto),e(sg,Vto),e(sg,fB),e(fB,Xto),e(sg,zto),e(A,Wto),e(A,lg),e(lg,Jle),e(Jle,Qto),e(lg,Uto),e(lg,mB),e(mB,Hto),e(lg,Jto),e(A,Yto),e(A,ig),e(ig,Yle),e(Yle,Kto),e(ig,Zto),e(ig,gB),e(gB,eao),e(ig,oao),e(A,rao),e(A,dg),e(dg,Kle),e(Kle,tao),e(dg,aao),e(dg,hB),e(hB,nao),e(dg,sao),e(A,lao),e(A,cg),e(cg,Zle),e(Zle,iao),e(cg,dao),e(cg,pB),e(pB,cao),e(cg,fao),e(A,mao),e(A,fg),e(fg,eie),e(eie,gao),e(fg,hao),e(fg,_B),e(_B,pao),e(fg,_ao),e(A,uao),e(A,mg),e(mg,oie),e(oie,bao),e(mg,vao),e(mg,uB),e(uB,Fao),e(mg,Tao),e(A,Mao),e(A,gg),e(gg,rie),e(rie,Eao),e(gg,Cao),e(gg,bB),e(bB,wao),e(gg,Aao),e(A,Lao),e(A,hg),e(hg,tie),e(tie,yao),e(hg,xao),e(hg,vB),e(vB,$ao),e(hg,kao),e(A,Sao),e(A,pg),e(pg,aie),e(aie,Rao),e(pg,Pao),e(pg,FB),e(FB,Bao),e(pg,Iao),e(A,Nao),e(A,_g),e(_g,nie),e(nie,qao),e(_g,jao),e(_g,TB),e(TB,Dao),e(_g,Gao),e(A,Oao),e(A,ug),e(ug,sie),e(sie,Vao),e(ug,Xao),e(ug,MB),e(MB,zao),e(ug,Wao),e(A,Qao),e(A,bg),e(bg,lie),e(lie,Uao),e(bg,Hao),e(bg,EB),e(EB,Jao),e(bg,Yao),e(A,Kao),e(A,vg),e(vg,iie),e(iie,Zao),e(vg,eno),e(vg,CB),e(CB,ono),e(vg,rno),e(A,tno),e(A,Fg),e(Fg,die),e(die,ano),e(Fg,nno),e(Fg,wB),e(wB,sno),e(Fg,lno),e(A,ino),e(A,Tg),e(Tg,cie),e(cie,dno),e(Tg,cno),e(Tg,AB),e(AB,fno),e(Tg,mno),e(A,gno),e(A,Mg),e(Mg,fie),e(fie,hno),e(Mg,pno),e(Mg,LB),e(LB,_no),e(Mg,uno),e(A,bno),e(A,Eg),e(Eg,mie),e(mie,vno),e(Eg,Fno),e(Eg,yB),e(yB,Tno),e(Eg,Mno),e(A,Eno),e(A,Cg),e(Cg,gie),e(gie,Cno),e(Cg,wno),e(Cg,xB),e(xB,Ano),e(Cg,Lno),e(A,yno),e(A,wg),e(wg,hie),e(hie,xno),e(wg,$no),e(wg,$B),e($B,kno),e(wg,Sno),e(A,Rno),e(A,Ag),e(Ag,pie),e(pie,Pno),e(Ag,Bno),e(Ag,kB),e(kB,Ino),e(Ag,Nno),e(A,qno),e(A,Lg),e(Lg,_ie),e(_ie,jno),e(Lg,Dno),e(Lg,SB),e(SB,Gno),e(Lg,Ono),e(A,Vno),e(A,yg),e(yg,uie),e(uie,Xno),e(yg,zno),e(yg,RB),e(RB,Wno),e(yg,Qno),e(A,Uno),e(A,xg),e(xg,bie),e(bie,Hno),e(xg,Jno),e(xg,PB),e(PB,Yno),e(xg,Kno),e(A,Zno),e(A,$g),e($g,vie),e(vie,eso),e($g,oso),e($g,BB),e(BB,rso),e($g,tso),e(A,aso),e(A,kg),e(kg,Fie),e(Fie,nso),e(kg,sso),e(kg,IB),e(IB,lso),e(kg,iso),e(A,dso),e(A,Sg),e(Sg,Tie),e(Tie,cso),e(Sg,fso),e(Sg,NB),e(NB,mso),e(Sg,gso),e(A,hso),e(A,Rg),e(Rg,Mie),e(Mie,pso),e(Rg,_so),e(Rg,qB),e(qB,uso),e(Rg,bso),e(A,vso),e(A,Pg),e(Pg,Eie),e(Eie,Fso),e(Pg,Tso),e(Pg,jB),e(jB,Mso),e(Pg,Eso),e(A,Cso),e(A,Bg),e(Bg,Cie),e(Cie,wso),e(Bg,Aso),e(Bg,DB),e(DB,Lso),e(Bg,yso),e(A,xso),e(A,Ig),e(Ig,wie),e(wie,$so),e(Ig,kso),e(Ig,GB),e(GB,Sso),e(Ig,Rso),e(A,Pso),e(A,Ng),e(Ng,Aie),e(Aie,Bso),e(Ng,Iso),e(Ng,OB),e(OB,Nso),e(Ng,qso),e(A,jso),e(A,qg),e(qg,Lie),e(Lie,Dso),e(qg,Gso),e(qg,VB),e(VB,Oso),e(qg,Vso),e(A,Xso),e(A,jg),e(jg,yie),e(yie,zso),e(jg,Wso),e(jg,XB),e(XB,Qso),e(jg,Uso),e(A,Hso),e(A,Dg),e(Dg,xie),e(xie,Jso),e(Dg,Yso),e(Dg,zB),e(zB,Kso),e(Dg,Zso),e(A,elo),e(A,Gg),e(Gg,$ie),e($ie,olo),e(Gg,rlo),e(Gg,WB),e(WB,tlo),e(Gg,alo),e(A,nlo),e(A,Og),e(Og,kie),e(kie,slo),e(Og,llo),e(Og,QB),e(QB,ilo),e(Og,dlo),e(A,clo),e(A,Vg),e(Vg,Sie),e(Sie,flo),e(Vg,mlo),e(Vg,UB),e(UB,glo),e(Vg,hlo),e(A,plo),e(A,Xg),e(Xg,Rie),e(Rie,_lo),e(Xg,ulo),e(Xg,HB),e(HB,blo),e(Xg,vlo),e(A,Flo),e(A,zg),e(zg,Pie),e(Pie,Tlo),e(zg,Mlo),e(zg,JB),e(JB,Elo),e(zg,Clo),e(A,wlo),e(A,Wg),e(Wg,Bie),e(Bie,Alo),e(Wg,Llo),e(Wg,YB),e(YB,ylo),e(Wg,xlo),e(A,$lo),e(A,Qg),e(Qg,Iie),e(Iie,klo),e(Qg,Slo),e(Qg,KB),e(KB,Rlo),e(Qg,Plo),e(A,Blo),e(A,Ug),e(Ug,Nie),e(Nie,Ilo),e(Ug,Nlo),e(Ug,ZB),e(ZB,qlo),e(Ug,jlo),e(A,Dlo),e(A,Hg),e(Hg,qie),e(qie,Glo),e(Hg,Olo),e(Hg,eI),e(eI,Vlo),e(Hg,Xlo),e(A,zlo),e(A,Jg),e(Jg,jie),e(jie,Wlo),e(Jg,Qlo),e(Jg,oI),e(oI,Ulo),e(Jg,Hlo),e(A,Jlo),e(A,Yg),e(Yg,Die),e(Die,Ylo),e(Yg,Klo),e(Yg,rI),e(rI,Zlo),e(Yg,eio),e(A,oio),e(A,Kg),e(Kg,Gie),e(Gie,rio),e(Kg,tio),e(Kg,tI),e(tI,aio),e(Kg,nio),e(A,sio),e(A,Zg),e(Zg,Oie),e(Oie,lio),e(Zg,iio),e(Zg,aI),e(aI,dio),e(Zg,cio),e(A,fio),e(A,eh),e(eh,Vie),e(Vie,mio),e(eh,gio),e(eh,nI),e(nI,hio),e(eh,pio),e(A,_io),e(A,oh),e(oh,Xie),e(Xie,uio),e(oh,bio),e(oh,sI),e(sI,vio),e(oh,Fio),e(A,Tio),e(A,rh),e(rh,zie),e(zie,Mio),e(rh,Eio),e(rh,lI),e(lI,Cio),e(rh,wio),e(A,Aio),e(A,th),e(th,Wie),e(Wie,Lio),e(th,yio),e(th,iI),e(iI,xio),e(th,$io),e(A,kio),e(A,ah),e(ah,Qie),e(Qie,Sio),e(ah,Rio),e(ah,dI),e(dI,Pio),e(ah,Bio),e(A,Iio),e(A,nh),e(nh,Uie),e(Uie,Nio),e(nh,qio),e(nh,cI),e(cI,jio),e(nh,Dio),e(A,Gio),e(A,sh),e(sh,Hie),e(Hie,Oio),e(sh,Vio),e(sh,fI),e(fI,Xio),e(sh,zio),e(A,Wio),e(A,lh),e(lh,Jie),e(Jie,Qio),e(lh,Uio),e(lh,mI),e(mI,Hio),e(lh,Jio),e(A,Yio),e(A,ih),e(ih,Yie),e(Yie,Kio),e(ih,Zio),e(ih,gI),e(gI,edo),e(ih,odo),e(A,rdo),e(A,dh),e(dh,Kie),e(Kie,tdo),e(dh,ado),e(dh,hI),e(hI,ndo),e(dh,sdo),e(A,ldo),e(A,ch),e(ch,Zie),e(Zie,ido),e(ch,ddo),e(ch,pI),e(pI,cdo),e(ch,fdo),e(A,mdo),e(A,fh),e(fh,ede),e(ede,gdo),e(fh,hdo),e(fh,_I),e(_I,pdo),e(fh,_do),e(A,udo),e(A,mh),e(mh,ode),e(ode,bdo),e(mh,vdo),e(mh,uI),e(uI,Fdo),e(mh,Tdo),e(A,Mdo),e(A,gh),e(gh,rde),e(rde,Edo),e(gh,Cdo),e(gh,bI),e(bI,wdo),e(gh,Ado),e(A,Ldo),e(A,hh),e(hh,tde),e(tde,ydo),e(hh,xdo),e(hh,vI),e(vI,$do),e(hh,kdo),e(A,Sdo),e(A,ph),e(ph,ade),e(ade,Rdo),e(ph,Pdo),e(ph,FI),e(FI,Bdo),e(ph,Ido),e(A,Ndo),e(A,_h),e(_h,nde),e(nde,qdo),e(_h,jdo),e(_h,TI),e(TI,Ddo),e(_h,Gdo),e(A,Odo),e(A,uh),e(uh,sde),e(sde,Vdo),e(uh,Xdo),e(uh,MI),e(MI,zdo),e(uh,Wdo),e(A,Qdo),e(A,bh),e(bh,lde),e(lde,Udo),e(bh,Hdo),e(bh,EI),e(EI,Jdo),e(bh,Ydo),e(A,Kdo),e(A,vh),e(vh,ide),e(ide,Zdo),e(vh,eco),e(vh,CI),e(CI,oco),e(vh,rco),e(A,tco),e(A,Fh),e(Fh,dde),e(dde,aco),e(Fh,nco),e(Fh,wI),e(wI,sco),e(Fh,lco),e(kr,ico),M(Th,kr,null),e(yo,dco),e(yo,Mh),M(M8,Mh,null),e(Mh,cco),e(Mh,cde),e(cde,fco),b(f,oUe,u),b(f,Ki,u),e(Ki,Eh),e(Eh,fde),M(E8,fde,null),e(Ki,mco),e(Ki,mde),e(mde,gco),b(f,rUe,u),b(f,xo,u),M(C8,xo,null),e(xo,hco),e(xo,w8),e(w8,pco),e(w8,AI),e(AI,_co),e(w8,uco),e(xo,bco),e(xo,A8),e(A8,vco),e(A8,gde),e(gde,Fco),e(A8,Tco),e(xo,Mco),e(xo,Sr),M(L8,Sr,null),e(Sr,Eco),e(Sr,hde),e(hde,Cco),e(Sr,wco),e(Sr,Ga),e(Ga,Aco),e(Ga,pde),e(pde,Lco),e(Ga,yco),e(Ga,_de),e(_de,xco),e(Ga,$co),e(Ga,ude),e(ude,kco),e(Ga,Sco),e(Sr,Rco),e(Sr,k),e(k,Hn),e(Hn,bde),e(bde,Pco),e(Hn,Bco),e(Hn,LI),e(LI,Ico),e(Hn,Nco),e(Hn,yI),e(yI,qco),e(Hn,jco),e(k,Dco),e(k,Jn),e(Jn,vde),e(vde,Gco),e(Jn,Oco),e(Jn,xI),e(xI,Vco),e(Jn,Xco),e(Jn,$I),e($I,zco),e(Jn,Wco),e(k,Qco),e(k,Yn),e(Yn,Fde),e(Fde,Uco),e(Yn,Hco),e(Yn,kI),e(kI,Jco),e(Yn,Yco),e(Yn,SI),e(SI,Kco),e(Yn,Zco),e(k,efo),e(k,Ch),e(Ch,Tde),e(Tde,ofo),e(Ch,rfo),e(Ch,RI),e(RI,tfo),e(Ch,afo),e(k,nfo),e(k,Kn),e(Kn,Mde),e(Mde,sfo),e(Kn,lfo),e(Kn,PI),e(PI,ifo),e(Kn,dfo),e(Kn,BI),e(BI,cfo),e(Kn,ffo),e(k,mfo),e(k,wh),e(wh,Ede),e(Ede,gfo),e(wh,hfo),e(wh,II),e(II,pfo),e(wh,_fo),e(k,ufo),e(k,Ah),e(Ah,Cde),e(Cde,bfo),e(Ah,vfo),e(Ah,NI),e(NI,Ffo),e(Ah,Tfo),e(k,Mfo),e(k,Lh),e(Lh,wde),e(wde,Efo),e(Lh,Cfo),e(Lh,qI),e(qI,wfo),e(Lh,Afo),e(k,Lfo),e(k,Zn),e(Zn,Ade),e(Ade,yfo),e(Zn,xfo),e(Zn,jI),e(jI,$fo),e(Zn,kfo),e(Zn,DI),e(DI,Sfo),e(Zn,Rfo),e(k,Pfo),e(k,es),e(es,Lde),e(Lde,Bfo),e(es,Ifo),e(es,GI),e(GI,Nfo),e(es,qfo),e(es,OI),e(OI,jfo),e(es,Dfo),e(k,Gfo),e(k,os),e(os,yde),e(yde,Ofo),e(os,Vfo),e(os,VI),e(VI,Xfo),e(os,zfo),e(os,XI),e(XI,Wfo),e(os,Qfo),e(k,Ufo),e(k,yh),e(yh,xde),e(xde,Hfo),e(yh,Jfo),e(yh,zI),e(zI,Yfo),e(yh,Kfo),e(k,Zfo),e(k,xh),e(xh,$de),e($de,emo),e(xh,omo),e(xh,WI),e(WI,rmo),e(xh,tmo),e(k,amo),e(k,$h),e($h,kde),e(kde,nmo),e($h,smo),e($h,QI),e(QI,lmo),e($h,imo),e(k,dmo),e(k,rs),e(rs,Sde),e(Sde,cmo),e(rs,fmo),e(rs,UI),e(UI,mmo),e(rs,gmo),e(rs,HI),e(HI,hmo),e(rs,pmo),e(k,_mo),e(k,kh),e(kh,Rde),e(Rde,umo),e(kh,bmo),e(kh,JI),e(JI,vmo),e(kh,Fmo),e(k,Tmo),e(k,ts),e(ts,Pde),e(Pde,Mmo),e(ts,Emo),e(ts,YI),e(YI,Cmo),e(ts,wmo),e(ts,KI),e(KI,Amo),e(ts,Lmo),e(k,ymo),e(k,as),e(as,Bde),e(Bde,xmo),e(as,$mo),e(as,ZI),e(ZI,kmo),e(as,Smo),e(as,eN),e(eN,Rmo),e(as,Pmo),e(k,Bmo),e(k,ns),e(ns,Ide),e(Ide,Imo),e(ns,Nmo),e(ns,oN),e(oN,qmo),e(ns,jmo),e(ns,rN),e(rN,Dmo),e(ns,Gmo),e(k,Omo),e(k,ss),e(ss,Nde),e(Nde,Vmo),e(ss,Xmo),e(ss,tN),e(tN,zmo),e(ss,Wmo),e(ss,aN),e(aN,Qmo),e(ss,Umo),e(k,Hmo),e(k,Sh),e(Sh,qde),e(qde,Jmo),e(Sh,Ymo),e(Sh,nN),e(nN,Kmo),e(Sh,Zmo),e(k,ego),e(k,ls),e(ls,jde),e(jde,ogo),e(ls,rgo),e(ls,sN),e(sN,tgo),e(ls,ago),e(ls,lN),e(lN,ngo),e(ls,sgo),e(k,lgo),e(k,is),e(is,Dde),e(Dde,igo),e(is,dgo),e(is,iN),e(iN,cgo),e(is,fgo),e(is,dN),e(dN,mgo),e(is,ggo),e(k,hgo),e(k,ds),e(ds,Gde),e(Gde,pgo),e(ds,_go),e(ds,cN),e(cN,ugo),e(ds,bgo),e(ds,fN),e(fN,vgo),e(ds,Fgo),e(k,Tgo),e(k,cs),e(cs,Ode),e(Ode,Mgo),e(cs,Ego),e(cs,mN),e(mN,Cgo),e(cs,wgo),e(cs,gN),e(gN,Ago),e(cs,Lgo),e(k,ygo),e(k,fs),e(fs,Vde),e(Vde,xgo),e(fs,$go),e(fs,hN),e(hN,kgo),e(fs,Sgo),e(fs,pN),e(pN,Rgo),e(fs,Pgo),e(k,Bgo),e(k,ms),e(ms,Xde),e(Xde,Igo),e(ms,Ngo),e(ms,_N),e(_N,qgo),e(ms,jgo),e(ms,uN),e(uN,Dgo),e(ms,Ggo),e(k,Ogo),e(k,Rh),e(Rh,zde),e(zde,Vgo),e(Rh,Xgo),e(Rh,bN),e(bN,zgo),e(Rh,Wgo),e(k,Qgo),e(k,gs),e(gs,Wde),e(Wde,Ugo),e(gs,Hgo),e(gs,vN),e(vN,Jgo),e(gs,Ygo),e(gs,FN),e(FN,Kgo),e(gs,Zgo),e(k,eho),e(k,Ph),e(Ph,Qde),e(Qde,oho),e(Ph,rho),e(Ph,TN),e(TN,tho),e(Ph,aho),e(k,nho),e(k,hs),e(hs,Ude),e(Ude,sho),e(hs,lho),e(hs,MN),e(MN,iho),e(hs,dho),e(hs,EN),e(EN,cho),e(hs,fho),e(k,mho),e(k,ps),e(ps,Hde),e(Hde,gho),e(ps,hho),e(ps,CN),e(CN,pho),e(ps,_ho),e(ps,wN),e(wN,uho),e(ps,bho),e(k,vho),e(k,_s),e(_s,Jde),e(Jde,Fho),e(_s,Tho),e(_s,AN),e(AN,Mho),e(_s,Eho),e(_s,LN),e(LN,Cho),e(_s,who),e(k,Aho),e(k,Bh),e(Bh,Yde),e(Yde,Lho),e(Bh,yho),e(Bh,yN),e(yN,xho),e(Bh,$ho),e(k,kho),e(k,us),e(us,Kde),e(Kde,Sho),e(us,Rho),e(us,xN),e(xN,Pho),e(us,Bho),e(us,$N),e($N,Iho),e(us,Nho),e(k,qho),e(k,bs),e(bs,Zde),e(Zde,jho),e(bs,Dho),e(bs,kN),e(kN,Gho),e(bs,Oho),e(bs,SN),e(SN,Vho),e(bs,Xho),e(k,zho),e(k,vs),e(vs,ece),e(ece,Who),e(vs,Qho),e(vs,RN),e(RN,Uho),e(vs,Hho),e(vs,PN),e(PN,Jho),e(vs,Yho),e(k,Kho),e(k,Ih),e(Ih,oce),e(oce,Zho),e(Ih,epo),e(Ih,BN),e(BN,opo),e(Ih,rpo),e(k,tpo),e(k,Fs),e(Fs,rce),e(rce,apo),e(Fs,npo),e(Fs,IN),e(IN,spo),e(Fs,lpo),e(Fs,NN),e(NN,ipo),e(Fs,dpo),e(k,cpo),e(k,Ts),e(Ts,tce),e(tce,fpo),e(Ts,mpo),e(Ts,qN),e(qN,gpo),e(Ts,hpo),e(Ts,jN),e(jN,ppo),e(Ts,_po),e(k,upo),e(k,Ms),e(Ms,ace),e(ace,bpo),e(Ms,vpo),e(Ms,DN),e(DN,Fpo),e(Ms,Tpo),e(Ms,GN),e(GN,Mpo),e(Ms,Epo),e(k,Cpo),e(k,Es),e(Es,nce),e(nce,wpo),e(Es,Apo),e(Es,ON),e(ON,Lpo),e(Es,ypo),e(Es,VN),e(VN,xpo),e(Es,$po),e(k,kpo),e(k,Cs),e(Cs,sce),e(sce,Spo),e(Cs,Rpo),e(Cs,XN),e(XN,Ppo),e(Cs,Bpo),e(Cs,zN),e(zN,Ipo),e(Cs,Npo),e(k,qpo),e(k,ws),e(ws,lce),e(lce,jpo),e(ws,Dpo),e(ws,WN),e(WN,Gpo),e(ws,Opo),e(ws,QN),e(QN,Vpo),e(ws,Xpo),e(k,zpo),e(k,As),e(As,ice),e(ice,Wpo),e(As,Qpo),e(As,UN),e(UN,Upo),e(As,Hpo),e(As,HN),e(HN,Jpo),e(As,Ypo),e(k,Kpo),e(k,Ls),e(Ls,dce),e(dce,Zpo),e(Ls,e_o),e(Ls,JN),e(JN,o_o),e(Ls,r_o),e(Ls,YN),e(YN,t_o),e(Ls,a_o),e(k,n_o),e(k,Nh),e(Nh,cce),e(cce,s_o),e(Nh,l_o),e(Nh,KN),e(KN,i_o),e(Nh,d_o),e(k,c_o),e(k,ys),e(ys,fce),e(fce,f_o),e(ys,m_o),e(ys,ZN),e(ZN,g_o),e(ys,h_o),e(ys,eq),e(eq,p_o),e(ys,__o),e(k,u_o),e(k,qh),e(qh,mce),e(mce,b_o),e(qh,v_o),e(qh,oq),e(oq,F_o),e(qh,T_o),e(k,M_o),e(k,jh),e(jh,gce),e(gce,E_o),e(jh,C_o),e(jh,rq),e(rq,w_o),e(jh,A_o),e(k,L_o),e(k,xs),e(xs,hce),e(hce,y_o),e(xs,x_o),e(xs,tq),e(tq,$_o),e(xs,k_o),e(xs,aq),e(aq,S_o),e(xs,R_o),e(k,P_o),e(k,$s),e($s,pce),e(pce,B_o),e($s,I_o),e($s,nq),e(nq,N_o),e($s,q_o),e($s,sq),e(sq,j_o),e($s,D_o),e(k,G_o),e(k,ks),e(ks,_ce),e(_ce,O_o),e(ks,V_o),e(ks,lq),e(lq,X_o),e(ks,z_o),e(ks,iq),e(iq,W_o),e(ks,Q_o),e(k,U_o),e(k,Dh),e(Dh,uce),e(uce,H_o),e(Dh,J_o),e(Dh,dq),e(dq,Y_o),e(Dh,K_o),e(k,Z_o),e(k,Ss),e(Ss,bce),e(bce,euo),e(Ss,ouo),e(Ss,cq),e(cq,ruo),e(Ss,tuo),e(Ss,fq),e(fq,auo),e(Ss,nuo),e(k,suo),e(k,Rs),e(Rs,vce),e(vce,luo),e(Rs,iuo),e(Rs,mq),e(mq,duo),e(Rs,cuo),e(Rs,gq),e(gq,fuo),e(Rs,muo),e(k,guo),e(k,Ps),e(Ps,Fce),e(Fce,huo),e(Ps,puo),e(Ps,hq),e(hq,_uo),e(Ps,uuo),e(Ps,pq),e(pq,buo),e(Ps,vuo),e(k,Fuo),e(k,Bs),e(Bs,Tce),e(Tce,Tuo),e(Bs,Muo),e(Bs,_q),e(_q,Euo),e(Bs,Cuo),e(Bs,uq),e(uq,wuo),e(Bs,Auo),e(k,Luo),e(k,Is),e(Is,Mce),e(Mce,yuo),e(Is,xuo),e(Is,bq),e(bq,$uo),e(Is,kuo),e(Is,vq),e(vq,Suo),e(Is,Ruo),e(k,Puo),e(k,Ns),e(Ns,Ece),e(Ece,Buo),e(Ns,Iuo),e(Ns,Fq),e(Fq,Nuo),e(Ns,quo),e(Ns,Tq),e(Tq,juo),e(Ns,Duo),e(k,Guo),e(k,qs),e(qs,Cce),e(Cce,Ouo),e(qs,Vuo),e(qs,Mq),e(Mq,Xuo),e(qs,zuo),e(qs,Eq),e(Eq,Wuo),e(qs,Quo),e(k,Uuo),e(k,js),e(js,wce),e(wce,Huo),e(js,Juo),e(js,Cq),e(Cq,Yuo),e(js,Kuo),e(js,wq),e(wq,Zuo),e(js,e1o),e(k,o1o),e(k,Gh),e(Gh,Ace),e(Ace,r1o),e(Gh,t1o),e(Gh,Aq),e(Aq,a1o),e(Gh,n1o),e(k,s1o),e(k,Ds),e(Ds,Lce),e(Lce,l1o),e(Ds,i1o),e(Ds,Lq),e(Lq,d1o),e(Ds,c1o),e(Ds,yq),e(yq,f1o),e(Ds,m1o),e(k,g1o),e(k,Gs),e(Gs,yce),e(yce,h1o),e(Gs,p1o),e(Gs,xq),e(xq,_1o),e(Gs,u1o),e(Gs,$q),e($q,b1o),e(Gs,v1o),e(k,F1o),e(k,Oh),e(Oh,xce),e(xce,T1o),e(Oh,M1o),e(Oh,kq),e(kq,E1o),e(Oh,C1o),e(k,w1o),e(k,Vh),e(Vh,$ce),e($ce,A1o),e(Vh,L1o),e(Vh,Sq),e(Sq,y1o),e(Vh,x1o),e(k,$1o),e(k,Xh),e(Xh,kce),e(kce,k1o),e(Xh,S1o),e(Xh,Rq),e(Rq,R1o),e(Xh,P1o),e(k,B1o),e(k,zh),e(zh,Sce),e(Sce,I1o),e(zh,N1o),e(zh,Pq),e(Pq,q1o),e(zh,j1o),e(k,D1o),e(k,Os),e(Os,Rce),e(Rce,G1o),e(Os,O1o),e(Os,Bq),e(Bq,V1o),e(Os,X1o),e(Os,Iq),e(Iq,z1o),e(Os,W1o),e(k,Q1o),e(k,Wh),e(Wh,Pce),e(Pce,U1o),e(Wh,H1o),e(Wh,Nq),e(Nq,J1o),e(Wh,Y1o),e(k,K1o),e(k,Vs),e(Vs,Bce),e(Bce,Z1o),e(Vs,e4o),e(Vs,qq),e(qq,o4o),e(Vs,r4o),e(Vs,jq),e(jq,t4o),e(Vs,a4o),e(k,n4o),e(k,Xs),e(Xs,Ice),e(Ice,s4o),e(Xs,l4o),e(Xs,Dq),e(Dq,i4o),e(Xs,d4o),e(Xs,Gq),e(Gq,c4o),e(Xs,f4o),e(k,m4o),e(k,zs),e(zs,Nce),e(Nce,g4o),e(zs,h4o),e(zs,Oq),e(Oq,p4o),e(zs,_4o),e(zs,Vq),e(Vq,u4o),e(zs,b4o),e(k,v4o),e(k,Ws),e(Ws,qce),e(qce,F4o),e(Ws,T4o),e(Ws,Xq),e(Xq,M4o),e(Ws,E4o),e(Ws,zq),e(zq,C4o),e(Ws,w4o),e(k,A4o),e(k,Qs),e(Qs,jce),e(jce,L4o),e(Qs,y4o),e(Qs,Wq),e(Wq,x4o),e(Qs,$4o),e(Qs,Qq),e(Qq,k4o),e(Qs,S4o),e(k,R4o),e(k,Us),e(Us,Dce),e(Dce,P4o),e(Us,B4o),e(Us,Uq),e(Uq,I4o),e(Us,N4o),e(Us,Hq),e(Hq,q4o),e(Us,j4o),e(k,D4o),e(k,Qh),e(Qh,Gce),e(Gce,G4o),e(Qh,O4o),e(Qh,Jq),e(Jq,V4o),e(Qh,X4o),e(k,z4o),e(k,Uh),e(Uh,Oce),e(Oce,W4o),e(Uh,Q4o),e(Uh,Yq),e(Yq,U4o),e(Uh,H4o),e(k,J4o),e(k,Hs),e(Hs,Vce),e(Vce,Y4o),e(Hs,K4o),e(Hs,Kq),e(Kq,Z4o),e(Hs,e2o),e(Hs,Zq),e(Zq,o2o),e(Hs,r2o),e(k,t2o),e(k,Js),e(Js,Xce),e(Xce,a2o),e(Js,n2o),e(Js,ej),e(ej,s2o),e(Js,l2o),e(Js,oj),e(oj,i2o),e(Js,d2o),e(k,c2o),e(k,Ys),e(Ys,zce),e(zce,f2o),e(Ys,m2o),e(Ys,rj),e(rj,g2o),e(Ys,h2o),e(Ys,tj),e(tj,p2o),e(Ys,_2o),e(k,u2o),e(k,Hh),e(Hh,Wce),e(Wce,b2o),e(Hh,v2o),e(Hh,aj),e(aj,F2o),e(Hh,T2o),e(k,M2o),e(k,Jh),e(Jh,Qce),e(Qce,E2o),e(Jh,C2o),e(Jh,nj),e(nj,w2o),e(Jh,A2o),e(k,L2o),e(k,Yh),e(Yh,Uce),e(Uce,y2o),e(Yh,x2o),e(Yh,sj),e(sj,$2o),e(Yh,k2o),e(k,S2o),e(k,Ks),e(Ks,Hce),e(Hce,R2o),e(Ks,P2o),e(Ks,lj),e(lj,B2o),e(Ks,I2o),e(Ks,ij),e(ij,N2o),e(Ks,q2o),e(k,j2o),e(k,Zs),e(Zs,Jce),e(Jce,D2o),e(Zs,G2o),e(Zs,dj),e(dj,O2o),e(Zs,V2o),e(Zs,cj),e(cj,X2o),e(Zs,z2o),e(k,W2o),e(k,Kh),e(Kh,Yce),e(Yce,Q2o),e(Kh,U2o),e(Kh,fj),e(fj,H2o),e(Kh,J2o),e(k,Y2o),e(k,Zh),e(Zh,Kce),e(Kce,K2o),e(Zh,Z2o),e(Zh,mj),e(mj,ebo),e(Zh,obo),e(k,rbo),e(k,ep),e(ep,Zce),e(Zce,tbo),e(ep,abo),e(ep,gj),e(gj,nbo),e(ep,sbo),e(k,lbo),e(k,el),e(el,efe),e(efe,ibo),e(el,dbo),e(el,hj),e(hj,cbo),e(el,fbo),e(el,pj),e(pj,mbo),e(el,gbo),e(k,hbo),e(k,op),e(op,ofe),e(ofe,pbo),e(op,_bo),e(op,_j),e(_j,ubo),e(op,bbo),e(k,vbo),e(k,rp),e(rp,rfe),e(rfe,Fbo),e(rp,Tbo),e(rp,uj),e(uj,Mbo),e(rp,Ebo),e(k,Cbo),e(k,ol),e(ol,tfe),e(tfe,wbo),e(ol,Abo),e(ol,bj),e(bj,Lbo),e(ol,ybo),e(ol,vj),e(vj,xbo),e(ol,$bo),e(k,kbo),e(k,rl),e(rl,afe),e(afe,Sbo),e(rl,Rbo),e(rl,Fj),e(Fj,Pbo),e(rl,Bbo),e(rl,Tj),e(Tj,Ibo),e(rl,Nbo),e(k,qbo),e(k,tl),e(tl,nfe),e(nfe,jbo),e(tl,Dbo),e(tl,Mj),e(Mj,Gbo),e(tl,Obo),e(tl,Ej),e(Ej,Vbo),e(tl,Xbo),e(k,zbo),e(k,al),e(al,sfe),e(sfe,Wbo),e(al,Qbo),e(al,Cj),e(Cj,Ubo),e(al,Hbo),e(al,wj),e(wj,Jbo),e(al,Ybo),e(Sr,Kbo),M(tp,Sr,null),e(xo,Zbo),e(xo,ap),M(y8,ap,null),e(ap,evo),e(ap,lfe),e(lfe,ovo),b(f,tUe,u),b(f,Zi,u),e(Zi,np),e(np,ife),M(x8,ife,null),e(Zi,rvo),e(Zi,dfe),e(dfe,tvo),b(f,aUe,u),b(f,$o,u),M($8,$o,null),e($o,avo),e($o,k8),e(k8,nvo),e(k8,Aj),e(Aj,svo),e(k8,lvo),e($o,ivo),e($o,S8),e(S8,dvo),e(S8,cfe),e(cfe,cvo),e(S8,fvo),e($o,mvo),e($o,He),M(R8,He,null),e(He,gvo),e(He,ffe),e(ffe,hvo),e(He,pvo),e(He,Oa),e(Oa,_vo),e(Oa,mfe),e(mfe,uvo),e(Oa,bvo),e(Oa,gfe),e(gfe,vvo),e(Oa,Fvo),e(Oa,hfe),e(hfe,Tvo),e(Oa,Mvo),e(He,Evo),e(He,Q),e(Q,sp),e(sp,pfe),e(pfe,Cvo),e(sp,wvo),e(sp,Lj),e(Lj,Avo),e(sp,Lvo),e(Q,yvo),e(Q,lp),e(lp,_fe),e(_fe,xvo),e(lp,$vo),e(lp,yj),e(yj,kvo),e(lp,Svo),e(Q,Rvo),e(Q,ip),e(ip,ufe),e(ufe,Pvo),e(ip,Bvo),e(ip,xj),e(xj,Ivo),e(ip,Nvo),e(Q,qvo),e(Q,dp),e(dp,bfe),e(bfe,jvo),e(dp,Dvo),e(dp,$j),e($j,Gvo),e(dp,Ovo),e(Q,Vvo),e(Q,cp),e(cp,vfe),e(vfe,Xvo),e(cp,zvo),e(cp,kj),e(kj,Wvo),e(cp,Qvo),e(Q,Uvo),e(Q,fp),e(fp,Ffe),e(Ffe,Hvo),e(fp,Jvo),e(fp,Sj),e(Sj,Yvo),e(fp,Kvo),e(Q,Zvo),e(Q,mp),e(mp,Tfe),e(Tfe,e3o),e(mp,o3o),e(mp,Rj),e(Rj,r3o),e(mp,t3o),e(Q,a3o),e(Q,gp),e(gp,Mfe),e(Mfe,n3o),e(gp,s3o),e(gp,Pj),e(Pj,l3o),e(gp,i3o),e(Q,d3o),e(Q,hp),e(hp,Efe),e(Efe,c3o),e(hp,f3o),e(hp,Bj),e(Bj,m3o),e(hp,g3o),e(Q,h3o),e(Q,pp),e(pp,Cfe),e(Cfe,p3o),e(pp,_3o),e(pp,Ij),e(Ij,u3o),e(pp,b3o),e(Q,v3o),e(Q,_p),e(_p,wfe),e(wfe,F3o),e(_p,T3o),e(_p,Nj),e(Nj,M3o),e(_p,E3o),e(Q,C3o),e(Q,up),e(up,Afe),e(Afe,w3o),e(up,A3o),e(up,qj),e(qj,L3o),e(up,y3o),e(Q,x3o),e(Q,bp),e(bp,Lfe),e(Lfe,$3o),e(bp,k3o),e(bp,jj),e(jj,S3o),e(bp,R3o),e(Q,P3o),e(Q,vp),e(vp,yfe),e(yfe,B3o),e(vp,I3o),e(vp,Dj),e(Dj,N3o),e(vp,q3o),e(Q,j3o),e(Q,Fp),e(Fp,xfe),e(xfe,D3o),e(Fp,G3o),e(Fp,Gj),e(Gj,O3o),e(Fp,V3o),e(Q,X3o),e(Q,Tp),e(Tp,$fe),e($fe,z3o),e(Tp,W3o),e(Tp,Oj),e(Oj,Q3o),e(Tp,U3o),e(Q,H3o),e(Q,Mp),e(Mp,kfe),e(kfe,J3o),e(Mp,Y3o),e(Mp,Vj),e(Vj,K3o),e(Mp,Z3o),e(Q,e5o),e(Q,Ep),e(Ep,Sfe),e(Sfe,o5o),e(Ep,r5o),e(Ep,Xj),e(Xj,t5o),e(Ep,a5o),e(Q,n5o),e(Q,Cp),e(Cp,Rfe),e(Rfe,s5o),e(Cp,l5o),e(Cp,zj),e(zj,i5o),e(Cp,d5o),e(Q,c5o),e(Q,wp),e(wp,Pfe),e(Pfe,f5o),e(wp,m5o),e(wp,Wj),e(Wj,g5o),e(wp,h5o),e(Q,p5o),e(Q,Ap),e(Ap,Bfe),e(Bfe,_5o),e(Ap,u5o),e(Ap,Qj),e(Qj,b5o),e(Ap,v5o),e(Q,F5o),e(Q,Lp),e(Lp,Ife),e(Ife,T5o),e(Lp,M5o),e(Lp,Uj),e(Uj,E5o),e(Lp,C5o),e(Q,w5o),e(Q,yp),e(yp,Nfe),e(Nfe,A5o),e(yp,L5o),e(yp,Hj),e(Hj,y5o),e(yp,x5o),e(Q,$5o),e(Q,xp),e(xp,qfe),e(qfe,k5o),e(xp,S5o),e(xp,Jj),e(Jj,R5o),e(xp,P5o),e(Q,B5o),e(Q,$p),e($p,jfe),e(jfe,I5o),e($p,N5o),e($p,Yj),e(Yj,q5o),e($p,j5o),e(Q,D5o),e(Q,kp),e(kp,Dfe),e(Dfe,G5o),e(kp,O5o),e(kp,Kj),e(Kj,V5o),e(kp,X5o),e(Q,z5o),e(Q,Sp),e(Sp,Gfe),e(Gfe,W5o),e(Sp,Q5o),e(Sp,Zj),e(Zj,U5o),e(Sp,H5o),e(Q,J5o),e(Q,Rp),e(Rp,Ofe),e(Ofe,Y5o),e(Rp,K5o),e(Rp,eD),e(eD,Z5o),e(Rp,e6o),e(Q,o6o),e(Q,Pp),e(Pp,Vfe),e(Vfe,r6o),e(Pp,t6o),e(Pp,oD),e(oD,a6o),e(Pp,n6o),e(Q,s6o),e(Q,Bp),e(Bp,Xfe),e(Xfe,l6o),e(Bp,i6o),e(Bp,rD),e(rD,d6o),e(Bp,c6o),e(Q,f6o),e(Q,Ip),e(Ip,zfe),e(zfe,m6o),e(Ip,g6o),e(Ip,tD),e(tD,h6o),e(Ip,p6o),e(Q,_6o),e(Q,Np),e(Np,Wfe),e(Wfe,u6o),e(Np,b6o),e(Np,aD),e(aD,v6o),e(Np,F6o),e(Q,T6o),e(Q,qp),e(qp,Qfe),e(Qfe,M6o),e(qp,E6o),e(qp,nD),e(nD,C6o),e(qp,w6o),e(Q,A6o),e(Q,jp),e(jp,Ufe),e(Ufe,L6o),e(jp,y6o),e(jp,sD),e(sD,x6o),e(jp,$6o),e(Q,k6o),e(Q,Dp),e(Dp,Hfe),e(Hfe,S6o),e(Dp,R6o),e(Dp,lD),e(lD,P6o),e(Dp,B6o),e(Q,I6o),e(Q,Gp),e(Gp,Jfe),e(Jfe,N6o),e(Gp,q6o),e(Gp,iD),e(iD,j6o),e(Gp,D6o),e(Q,G6o),e(Q,Op),e(Op,Yfe),e(Yfe,O6o),e(Op,V6o),e(Op,dD),e(dD,X6o),e(Op,z6o),e(Q,W6o),e(Q,Vp),e(Vp,Kfe),e(Kfe,Q6o),e(Vp,U6o),e(Vp,cD),e(cD,H6o),e(Vp,J6o),e(He,Y6o),M(Xp,He,null),e(He,K6o),M(zp,He,null),e($o,Z6o),e($o,Wp),M(P8,Wp,null),e(Wp,eFo),e(Wp,Zfe),e(Zfe,oFo),b(f,nUe,u),b(f,ed,u),e(ed,Qp),e(Qp,eme),M(B8,eme,null),e(ed,rFo),e(ed,ome),e(ome,tFo),b(f,sUe,u),b(f,ko,u),M(I8,ko,null),e(ko,aFo),e(ko,N8),e(N8,nFo),e(N8,fD),e(fD,sFo),e(N8,lFo),e(ko,iFo),e(ko,q8),e(q8,dFo),e(q8,rme),e(rme,cFo),e(q8,fFo),e(ko,mFo),e(ko,Je),M(j8,Je,null),e(Je,gFo),e(Je,tme),e(tme,hFo),e(Je,pFo),e(Je,od),e(od,_Fo),e(od,ame),e(ame,uFo),e(od,bFo),e(od,nme),e(nme,vFo),e(od,FFo),e(Je,TFo),e(Je,ie),e(ie,Up),e(Up,sme),e(sme,MFo),e(Up,EFo),e(Up,mD),e(mD,CFo),e(Up,wFo),e(ie,AFo),e(ie,Hp),e(Hp,lme),e(lme,LFo),e(Hp,yFo),e(Hp,gD),e(gD,xFo),e(Hp,$Fo),e(ie,kFo),e(ie,Jp),e(Jp,ime),e(ime,SFo),e(Jp,RFo),e(Jp,hD),e(hD,PFo),e(Jp,BFo),e(ie,IFo),e(ie,Yp),e(Yp,dme),e(dme,NFo),e(Yp,qFo),e(Yp,pD),e(pD,jFo),e(Yp,DFo),e(ie,GFo),e(ie,Kp),e(Kp,cme),e(cme,OFo),e(Kp,VFo),e(Kp,_D),e(_D,XFo),e(Kp,zFo),e(ie,WFo),e(ie,Zp),e(Zp,fme),e(fme,QFo),e(Zp,UFo),e(Zp,uD),e(uD,HFo),e(Zp,JFo),e(ie,YFo),e(ie,e_),e(e_,mme),e(mme,KFo),e(e_,ZFo),e(e_,bD),e(bD,eTo),e(e_,oTo),e(ie,rTo),e(ie,o_),e(o_,gme),e(gme,tTo),e(o_,aTo),e(o_,vD),e(vD,nTo),e(o_,sTo),e(ie,lTo),e(ie,r_),e(r_,hme),e(hme,iTo),e(r_,dTo),e(r_,FD),e(FD,cTo),e(r_,fTo),e(ie,mTo),e(ie,t_),e(t_,pme),e(pme,gTo),e(t_,hTo),e(t_,TD),e(TD,pTo),e(t_,_To),e(ie,uTo),e(ie,a_),e(a_,_me),e(_me,bTo),e(a_,vTo),e(a_,MD),e(MD,FTo),e(a_,TTo),e(ie,MTo),e(ie,n_),e(n_,ume),e(ume,ETo),e(n_,CTo),e(n_,ED),e(ED,wTo),e(n_,ATo),e(ie,LTo),e(ie,s_),e(s_,bme),e(bme,yTo),e(s_,xTo),e(s_,CD),e(CD,$To),e(s_,kTo),e(ie,STo),e(ie,l_),e(l_,vme),e(vme,RTo),e(l_,PTo),e(l_,wD),e(wD,BTo),e(l_,ITo),e(ie,NTo),e(ie,i_),e(i_,Fme),e(Fme,qTo),e(i_,jTo),e(i_,AD),e(AD,DTo),e(i_,GTo),e(ie,OTo),e(ie,d_),e(d_,Tme),e(Tme,VTo),e(d_,XTo),e(d_,LD),e(LD,zTo),e(d_,WTo),e(ie,QTo),e(ie,c_),e(c_,Mme),e(Mme,UTo),e(c_,HTo),e(c_,yD),e(yD,JTo),e(c_,YTo),e(ie,KTo),e(ie,f_),e(f_,Eme),e(Eme,ZTo),e(f_,eMo),e(f_,xD),e(xD,oMo),e(f_,rMo),e(ie,tMo),e(ie,m_),e(m_,Cme),e(Cme,aMo),e(m_,nMo),e(m_,$D),e($D,sMo),e(m_,lMo),e(ie,iMo),e(ie,g_),e(g_,wme),e(wme,dMo),e(g_,cMo),e(g_,kD),e(kD,fMo),e(g_,mMo),e(Je,gMo),M(h_,Je,null),e(Je,hMo),M(p_,Je,null),e(ko,pMo),e(ko,__),M(D8,__,null),e(__,_Mo),e(__,Ame),e(Ame,uMo),b(f,lUe,u),b(f,rd,u),e(rd,u_),e(u_,Lme),M(G8,Lme,null),e(rd,bMo),e(rd,yme),e(yme,vMo),b(f,iUe,u),b(f,So,u),M(O8,So,null),e(So,FMo),e(So,td),e(td,TMo),e(td,SD),e(SD,MMo),e(td,EMo),e(td,RD),e(RD,CMo),e(td,wMo),e(So,AMo),e(So,V8),e(V8,LMo),e(V8,xme),e(xme,yMo),e(V8,xMo),e(So,$Mo),e(So,mt),M(X8,mt,null),e(mt,kMo),e(mt,$me),e($me,SMo),e(mt,RMo),e(mt,ad),e(ad,PMo),e(ad,kme),e(kme,BMo),e(ad,IMo),e(ad,PD),e(PD,NMo),e(ad,qMo),e(mt,jMo),M(b_,mt,null),e(So,DMo),e(So,Ye),M(z8,Ye,null),e(Ye,GMo),e(Ye,Sme),e(Sme,OMo),e(Ye,VMo),e(Ye,Va),e(Va,XMo),e(Va,Rme),e(Rme,zMo),e(Va,WMo),e(Va,Pme),e(Pme,QMo),e(Va,UMo),e(Va,Bme),e(Bme,HMo),e(Va,JMo),e(Ye,YMo),e(Ye,y),e(y,v_),e(v_,Ime),e(Ime,KMo),e(v_,ZMo),e(v_,BD),e(BD,eEo),e(v_,oEo),e(y,rEo),e(y,F_),e(F_,Nme),e(Nme,tEo),e(F_,aEo),e(F_,ID),e(ID,nEo),e(F_,sEo),e(y,lEo),e(y,T_),e(T_,qme),e(qme,iEo),e(T_,dEo),e(T_,ND),e(ND,cEo),e(T_,fEo),e(y,mEo),e(y,M_),e(M_,jme),e(jme,gEo),e(M_,hEo),e(M_,qD),e(qD,pEo),e(M_,_Eo),e(y,uEo),e(y,E_),e(E_,Dme),e(Dme,bEo),e(E_,vEo),e(E_,jD),e(jD,FEo),e(E_,TEo),e(y,MEo),e(y,C_),e(C_,Gme),e(Gme,EEo),e(C_,CEo),e(C_,DD),e(DD,wEo),e(C_,AEo),e(y,LEo),e(y,w_),e(w_,Ome),e(Ome,yEo),e(w_,xEo),e(w_,GD),e(GD,$Eo),e(w_,kEo),e(y,SEo),e(y,A_),e(A_,Vme),e(Vme,REo),e(A_,PEo),e(A_,OD),e(OD,BEo),e(A_,IEo),e(y,NEo),e(y,L_),e(L_,Xme),e(Xme,qEo),e(L_,jEo),e(L_,VD),e(VD,DEo),e(L_,GEo),e(y,OEo),e(y,y_),e(y_,zme),e(zme,VEo),e(y_,XEo),e(y_,XD),e(XD,zEo),e(y_,WEo),e(y,QEo),e(y,x_),e(x_,Wme),e(Wme,UEo),e(x_,HEo),e(x_,zD),e(zD,JEo),e(x_,YEo),e(y,KEo),e(y,$_),e($_,Qme),e(Qme,ZEo),e($_,eCo),e($_,WD),e(WD,oCo),e($_,rCo),e(y,tCo),e(y,k_),e(k_,Ume),e(Ume,aCo),e(k_,nCo),e(k_,QD),e(QD,sCo),e(k_,lCo),e(y,iCo),e(y,S_),e(S_,Hme),e(Hme,dCo),e(S_,cCo),e(S_,UD),e(UD,fCo),e(S_,mCo),e(y,gCo),e(y,R_),e(R_,Jme),e(Jme,hCo),e(R_,pCo),e(R_,HD),e(HD,_Co),e(R_,uCo),e(y,bCo),e(y,P_),e(P_,Yme),e(Yme,vCo),e(P_,FCo),e(P_,JD),e(JD,TCo),e(P_,MCo),e(y,ECo),e(y,B_),e(B_,Kme),e(Kme,CCo),e(B_,wCo),e(B_,YD),e(YD,ACo),e(B_,LCo),e(y,yCo),e(y,I_),e(I_,Zme),e(Zme,xCo),e(I_,$Co),e(I_,KD),e(KD,kCo),e(I_,SCo),e(y,RCo),e(y,N_),e(N_,ege),e(ege,PCo),e(N_,BCo),e(N_,ZD),e(ZD,ICo),e(N_,NCo),e(y,qCo),e(y,q_),e(q_,oge),e(oge,jCo),e(q_,DCo),e(q_,eG),e(eG,GCo),e(q_,OCo),e(y,VCo),e(y,j_),e(j_,rge),e(rge,XCo),e(j_,zCo),e(j_,oG),e(oG,WCo),e(j_,QCo),e(y,UCo),e(y,D_),e(D_,tge),e(tge,HCo),e(D_,JCo),e(D_,rG),e(rG,YCo),e(D_,KCo),e(y,ZCo),e(y,G_),e(G_,age),e(age,e0o),e(G_,o0o),e(G_,tG),e(tG,r0o),e(G_,t0o),e(y,a0o),e(y,O_),e(O_,nge),e(nge,n0o),e(O_,s0o),e(O_,aG),e(aG,l0o),e(O_,i0o),e(y,d0o),e(y,V_),e(V_,sge),e(sge,c0o),e(V_,f0o),e(V_,nG),e(nG,m0o),e(V_,g0o),e(y,h0o),e(y,X_),e(X_,lge),e(lge,p0o),e(X_,_0o),e(X_,sG),e(sG,u0o),e(X_,b0o),e(y,v0o),e(y,z_),e(z_,ige),e(ige,F0o),e(z_,T0o),e(z_,lG),e(lG,M0o),e(z_,E0o),e(y,C0o),e(y,W_),e(W_,dge),e(dge,w0o),e(W_,A0o),e(W_,iG),e(iG,L0o),e(W_,y0o),e(y,x0o),e(y,Q_),e(Q_,cge),e(cge,$0o),e(Q_,k0o),e(Q_,dG),e(dG,S0o),e(Q_,R0o),e(y,P0o),e(y,U_),e(U_,fge),e(fge,B0o),e(U_,I0o),e(U_,cG),e(cG,N0o),e(U_,q0o),e(y,j0o),e(y,H_),e(H_,mge),e(mge,D0o),e(H_,G0o),e(H_,fG),e(fG,O0o),e(H_,V0o),e(y,X0o),e(y,J_),e(J_,gge),e(gge,z0o),e(J_,W0o),e(J_,mG),e(mG,Q0o),e(J_,U0o),e(y,H0o),e(y,Y_),e(Y_,hge),e(hge,J0o),e(Y_,Y0o),e(Y_,gG),e(gG,K0o),e(Y_,Z0o),e(y,ewo),e(y,K_),e(K_,pge),e(pge,owo),e(K_,rwo),e(K_,hG),e(hG,two),e(K_,awo),e(y,nwo),e(y,Z_),e(Z_,_ge),e(_ge,swo),e(Z_,lwo),e(Z_,pG),e(pG,iwo),e(Z_,dwo),e(y,cwo),e(y,nl),e(nl,uge),e(uge,fwo),e(nl,mwo),e(nl,_G),e(_G,gwo),e(nl,hwo),e(nl,uG),e(uG,pwo),e(nl,_wo),e(y,uwo),e(y,eu),e(eu,bge),e(bge,bwo),e(eu,vwo),e(eu,bG),e(bG,Fwo),e(eu,Two),e(y,Mwo),e(y,ou),e(ou,vge),e(vge,Ewo),e(ou,Cwo),e(ou,vG),e(vG,wwo),e(ou,Awo),e(y,Lwo),e(y,ru),e(ru,Fge),e(Fge,ywo),e(ru,xwo),e(ru,FG),e(FG,$wo),e(ru,kwo),e(y,Swo),e(y,tu),e(tu,Tge),e(Tge,Rwo),e(tu,Pwo),e(tu,TG),e(TG,Bwo),e(tu,Iwo),e(y,Nwo),e(y,au),e(au,Mge),e(Mge,qwo),e(au,jwo),e(au,MG),e(MG,Dwo),e(au,Gwo),e(y,Owo),e(y,nu),e(nu,Ege),e(Ege,Vwo),e(nu,Xwo),e(nu,EG),e(EG,zwo),e(nu,Wwo),e(y,Qwo),e(y,su),e(su,Cge),e(Cge,Uwo),e(su,Hwo),e(su,CG),e(CG,Jwo),e(su,Ywo),e(y,Kwo),e(y,lu),e(lu,wge),e(wge,Zwo),e(lu,eAo),e(lu,wG),e(wG,oAo),e(lu,rAo),e(y,tAo),e(y,iu),e(iu,Age),e(Age,aAo),e(iu,nAo),e(iu,AG),e(AG,sAo),e(iu,lAo),e(y,iAo),e(y,du),e(du,Lge),e(Lge,dAo),e(du,cAo),e(du,LG),e(LG,fAo),e(du,mAo),e(y,gAo),e(y,cu),e(cu,yge),e(yge,hAo),e(cu,pAo),e(cu,yG),e(yG,_Ao),e(cu,uAo),e(y,bAo),e(y,fu),e(fu,xge),e(xge,vAo),e(fu,FAo),e(fu,xG),e(xG,TAo),e(fu,MAo),e(y,EAo),e(y,mu),e(mu,$ge),e($ge,CAo),e(mu,wAo),e(mu,$G),e($G,AAo),e(mu,LAo),e(y,yAo),e(y,gu),e(gu,kge),e(kge,xAo),e(gu,$Ao),e(gu,kG),e(kG,kAo),e(gu,SAo),e(y,RAo),e(y,hu),e(hu,Sge),e(Sge,PAo),e(hu,BAo),e(hu,SG),e(SG,IAo),e(hu,NAo),e(y,qAo),e(y,pu),e(pu,Rge),e(Rge,jAo),e(pu,DAo),e(pu,RG),e(RG,GAo),e(pu,OAo),e(y,VAo),e(y,_u),e(_u,Pge),e(Pge,XAo),e(_u,zAo),e(_u,PG),e(PG,WAo),e(_u,QAo),e(y,UAo),e(y,uu),e(uu,Bge),e(Bge,HAo),e(uu,JAo),e(uu,BG),e(BG,YAo),e(uu,KAo),e(y,ZAo),e(y,bu),e(bu,Ige),e(Ige,e7o),e(bu,o7o),e(bu,IG),e(IG,r7o),e(bu,t7o),e(y,a7o),e(y,vu),e(vu,Nge),e(Nge,n7o),e(vu,s7o),e(vu,NG),e(NG,l7o),e(vu,i7o),e(y,d7o),e(y,Fu),e(Fu,qge),e(qge,c7o),e(Fu,f7o),e(Fu,qG),e(qG,m7o),e(Fu,g7o),e(y,h7o),e(y,Tu),e(Tu,jge),e(jge,p7o),e(Tu,_7o),e(Tu,jG),e(jG,u7o),e(Tu,b7o),e(y,v7o),e(y,Mu),e(Mu,Dge),e(Dge,F7o),e(Mu,T7o),e(Mu,DG),e(DG,M7o),e(Mu,E7o),e(y,C7o),e(y,Eu),e(Eu,Gge),e(Gge,w7o),e(Eu,A7o),e(Eu,GG),e(GG,L7o),e(Eu,y7o),e(y,x7o),e(y,Cu),e(Cu,Oge),e(Oge,$7o),e(Cu,k7o),e(Cu,OG),e(OG,S7o),e(Cu,R7o),e(y,P7o),e(y,wu),e(wu,Vge),e(Vge,B7o),e(wu,I7o),e(wu,VG),e(VG,N7o),e(wu,q7o),e(y,j7o),e(y,Au),e(Au,Xge),e(Xge,D7o),e(Au,G7o),e(Au,XG),e(XG,O7o),e(Au,V7o),e(y,X7o),e(y,Lu),e(Lu,zge),e(zge,z7o),e(Lu,W7o),e(Lu,zG),e(zG,Q7o),e(Lu,U7o),e(y,H7o),e(y,yu),e(yu,Wge),e(Wge,J7o),e(yu,Y7o),e(yu,WG),e(WG,K7o),e(yu,Z7o),e(y,eLo),e(y,xu),e(xu,Qge),e(Qge,oLo),e(xu,rLo),e(xu,QG),e(QG,tLo),e(xu,aLo),e(y,nLo),e(y,$u),e($u,Uge),e(Uge,sLo),e($u,lLo),e($u,UG),e(UG,iLo),e($u,dLo),e(y,cLo),e(y,ku),e(ku,Hge),e(Hge,fLo),e(ku,mLo),e(ku,HG),e(HG,gLo),e(ku,hLo),e(y,pLo),e(y,Su),e(Su,Jge),e(Jge,_Lo),e(Su,uLo),e(Su,JG),e(JG,bLo),e(Su,vLo),e(y,FLo),e(y,Ru),e(Ru,Yge),e(Yge,TLo),e(Ru,MLo),e(Ru,YG),e(YG,ELo),e(Ru,CLo),e(y,wLo),e(y,Pu),e(Pu,Kge),e(Kge,ALo),e(Pu,LLo),e(Pu,KG),e(KG,yLo),e(Pu,xLo),e(y,$Lo),e(y,Bu),e(Bu,Zge),e(Zge,kLo),e(Bu,SLo),e(Bu,ZG),e(ZG,RLo),e(Bu,PLo),e(y,BLo),e(y,Iu),e(Iu,ehe),e(ehe,ILo),e(Iu,NLo),e(Iu,eO),e(eO,qLo),e(Iu,jLo),e(y,DLo),e(y,Nu),e(Nu,ohe),e(ohe,GLo),e(Nu,OLo),e(Nu,oO),e(oO,VLo),e(Nu,XLo),e(y,zLo),e(y,qu),e(qu,rhe),e(rhe,WLo),e(qu,QLo),e(qu,rO),e(rO,ULo),e(qu,HLo),e(y,JLo),e(y,ju),e(ju,the),e(the,YLo),e(ju,KLo),e(ju,tO),e(tO,ZLo),e(ju,eyo),e(y,oyo),e(y,Du),e(Du,ahe),e(ahe,ryo),e(Du,tyo),e(Du,aO),e(aO,ayo),e(Du,nyo),e(y,syo),e(y,Gu),e(Gu,nhe),e(nhe,lyo),e(Gu,iyo),e(Gu,nO),e(nO,dyo),e(Gu,cyo),e(y,fyo),e(y,Ou),e(Ou,she),e(she,myo),e(Ou,gyo),e(Ou,sO),e(sO,hyo),e(Ou,pyo),e(y,_yo),e(y,Vu),e(Vu,lhe),e(lhe,uyo),e(Vu,byo),e(Vu,lO),e(lO,vyo),e(Vu,Fyo),e(y,Tyo),e(y,Xu),e(Xu,ihe),e(ihe,Myo),e(Xu,Eyo),e(Xu,iO),e(iO,Cyo),e(Xu,wyo),e(y,Ayo),e(y,zu),e(zu,dhe),e(dhe,Lyo),e(zu,yyo),e(zu,dO),e(dO,xyo),e(zu,$yo),e(y,kyo),e(y,Wu),e(Wu,che),e(che,Syo),e(Wu,Ryo),e(Wu,cO),e(cO,Pyo),e(Wu,Byo),e(y,Iyo),e(y,Qu),e(Qu,fhe),e(fhe,Nyo),e(Qu,qyo),e(Qu,fO),e(fO,jyo),e(Qu,Dyo),e(y,Gyo),e(y,Uu),e(Uu,mhe),e(mhe,Oyo),e(Uu,Vyo),e(Uu,mO),e(mO,Xyo),e(Uu,zyo),e(y,Wyo),e(y,Hu),e(Hu,ghe),e(ghe,Qyo),e(Hu,Uyo),e(Hu,gO),e(gO,Hyo),e(Hu,Jyo),e(y,Yyo),e(y,Ju),e(Ju,hhe),e(hhe,Kyo),e(Ju,Zyo),e(Ju,hO),e(hO,e8o),e(Ju,o8o),e(y,r8o),e(y,Yu),e(Yu,phe),e(phe,t8o),e(Yu,a8o),e(Yu,pO),e(pO,n8o),e(Yu,s8o),e(y,l8o),e(y,Ku),e(Ku,_he),e(_he,i8o),e(Ku,d8o),e(Ku,_O),e(_O,c8o),e(Ku,f8o),e(y,m8o),e(y,Zu),e(Zu,uhe),e(uhe,g8o),e(Zu,h8o),e(Zu,uO),e(uO,p8o),e(Zu,_8o),e(y,u8o),e(y,e1),e(e1,bhe),e(bhe,b8o),e(e1,v8o),e(e1,bO),e(bO,F8o),e(e1,T8o),e(y,M8o),e(y,o1),e(o1,vhe),e(vhe,E8o),e(o1,C8o),e(o1,vO),e(vO,w8o),e(o1,A8o),e(y,L8o),e(y,r1),e(r1,Fhe),e(Fhe,y8o),e(r1,x8o),e(r1,FO),e(FO,$8o),e(r1,k8o),e(y,S8o),e(y,t1),e(t1,The),e(The,R8o),e(t1,P8o),e(t1,TO),e(TO,B8o),e(t1,I8o),e(y,N8o),e(y,a1),e(a1,Mhe),e(Mhe,q8o),e(a1,j8o),e(a1,MO),e(MO,D8o),e(a1,G8o),e(y,O8o),e(y,n1),e(n1,Ehe),e(Ehe,V8o),e(n1,X8o),e(n1,EO),e(EO,z8o),e(n1,W8o),e(y,Q8o),e(y,s1),e(s1,Che),e(Che,U8o),e(s1,H8o),e(s1,CO),e(CO,J8o),e(s1,Y8o),e(y,K8o),e(y,l1),e(l1,whe),e(whe,Z8o),e(l1,e9o),e(l1,wO),e(wO,o9o),e(l1,r9o),e(y,t9o),e(y,i1),e(i1,Ahe),e(Ahe,a9o),e(i1,n9o),e(i1,AO),e(AO,s9o),e(i1,l9o),e(y,i9o),e(y,d1),e(d1,Lhe),e(Lhe,d9o),e(d1,c9o),e(d1,LO),e(LO,f9o),e(d1,m9o),e(y,g9o),e(y,c1),e(c1,yhe),e(yhe,h9o),e(c1,p9o),e(c1,yO),e(yO,_9o),e(c1,u9o),e(y,b9o),e(y,f1),e(f1,xhe),e(xhe,v9o),e(f1,F9o),e(f1,xO),e(xO,T9o),e(f1,M9o),e(y,E9o),e(y,m1),e(m1,$he),e($he,C9o),e(m1,w9o),e(m1,$O),e($O,A9o),e(m1,L9o),e(y,y9o),e(y,g1),e(g1,khe),e(khe,x9o),e(g1,$9o),e(g1,kO),e(kO,k9o),e(g1,S9o),e(y,R9o),e(y,h1),e(h1,She),e(She,P9o),e(h1,B9o),e(h1,SO),e(SO,I9o),e(h1,N9o),e(y,q9o),e(y,p1),e(p1,Rhe),e(Rhe,j9o),e(p1,D9o),e(p1,RO),e(RO,G9o),e(p1,O9o),e(y,V9o),e(y,_1),e(_1,Phe),e(Phe,X9o),e(_1,z9o),e(_1,PO),e(PO,W9o),e(_1,Q9o),e(y,U9o),e(y,u1),e(u1,Bhe),e(Bhe,H9o),e(u1,J9o),e(u1,BO),e(BO,Y9o),e(u1,K9o),e(y,Z9o),e(y,b1),e(b1,Ihe),e(Ihe,exo),e(b1,oxo),e(b1,IO),e(IO,rxo),e(b1,txo),e(y,axo),e(y,v1),e(v1,Nhe),e(Nhe,nxo),e(v1,sxo),e(v1,NO),e(NO,lxo),e(v1,ixo),e(y,dxo),e(y,F1),e(F1,qhe),e(qhe,cxo),e(F1,fxo),e(F1,qO),e(qO,mxo),e(F1,gxo),e(y,hxo),e(y,T1),e(T1,jhe),e(jhe,pxo),e(T1,_xo),e(T1,jO),e(jO,uxo),e(T1,bxo),e(y,vxo),e(y,M1),e(M1,Dhe),e(Dhe,Fxo),e(M1,Txo),e(M1,DO),e(DO,Mxo),e(M1,Exo),e(y,Cxo),e(y,E1),e(E1,Ghe),e(Ghe,wxo),e(E1,Axo),e(E1,GO),e(GO,Lxo),e(E1,yxo),e(y,xxo),e(y,C1),e(C1,Ohe),e(Ohe,$xo),e(C1,kxo),e(C1,OO),e(OO,Sxo),e(C1,Rxo),e(y,Pxo),e(y,w1),e(w1,Vhe),e(Vhe,Bxo),e(w1,Ixo),e(w1,VO),e(VO,Nxo),e(w1,qxo),e(Ye,jxo),e(Ye,A1),e(A1,Dxo),e(A1,Xhe),e(Xhe,Gxo),e(A1,Oxo),e(A1,zhe),e(zhe,Vxo),e(Ye,Xxo),M(L1,Ye,null),b(f,dUe,u),b(f,nd,u),e(nd,y1),e(y1,Whe),M(W8,Whe,null),e(nd,zxo),e(nd,Qhe),e(Qhe,Wxo),b(f,cUe,u),b(f,Ro,u),M(Q8,Ro,null),e(Ro,Qxo),e(Ro,sd),e(sd,Uxo),e(sd,XO),e(XO,Hxo),e(sd,Jxo),e(sd,zO),e(zO,Yxo),e(sd,Kxo),e(Ro,Zxo),e(Ro,U8),e(U8,e$o),e(U8,Uhe),e(Uhe,o$o),e(U8,r$o),e(Ro,t$o),e(Ro,gt),M(H8,gt,null),e(gt,a$o),e(gt,Hhe),e(Hhe,n$o),e(gt,s$o),e(gt,ld),e(ld,l$o),e(ld,Jhe),e(Jhe,i$o),e(ld,d$o),e(ld,WO),e(WO,c$o),e(ld,f$o),e(gt,m$o),M(x1,gt,null),e(Ro,g$o),e(Ro,Ke),M(J8,Ke,null),e(Ke,h$o),e(Ke,Yhe),e(Yhe,p$o),e(Ke,_$o),e(Ke,Xa),e(Xa,u$o),e(Xa,Khe),e(Khe,b$o),e(Xa,v$o),e(Xa,Zhe),e(Zhe,F$o),e(Xa,T$o),e(Xa,epe),e(epe,M$o),e(Xa,E$o),e(Ke,C$o),e(Ke,G),e(G,$1),e($1,ope),e(ope,w$o),e($1,A$o),e($1,QO),e(QO,L$o),e($1,y$o),e(G,x$o),e(G,k1),e(k1,rpe),e(rpe,$$o),e(k1,k$o),e(k1,UO),e(UO,S$o),e(k1,R$o),e(G,P$o),e(G,S1),e(S1,tpe),e(tpe,B$o),e(S1,I$o),e(S1,HO),e(HO,N$o),e(S1,q$o),e(G,j$o),e(G,R1),e(R1,ape),e(ape,D$o),e(R1,G$o),e(R1,JO),e(JO,O$o),e(R1,V$o),e(G,X$o),e(G,P1),e(P1,npe),e(npe,z$o),e(P1,W$o),e(P1,YO),e(YO,Q$o),e(P1,U$o),e(G,H$o),e(G,B1),e(B1,spe),e(spe,J$o),e(B1,Y$o),e(B1,KO),e(KO,K$o),e(B1,Z$o),e(G,eko),e(G,I1),e(I1,lpe),e(lpe,oko),e(I1,rko),e(I1,ZO),e(ZO,tko),e(I1,ako),e(G,nko),e(G,N1),e(N1,ipe),e(ipe,sko),e(N1,lko),e(N1,eV),e(eV,iko),e(N1,dko),e(G,cko),e(G,q1),e(q1,dpe),e(dpe,fko),e(q1,mko),e(q1,oV),e(oV,gko),e(q1,hko),e(G,pko),e(G,j1),e(j1,cpe),e(cpe,_ko),e(j1,uko),e(j1,rV),e(rV,bko),e(j1,vko),e(G,Fko),e(G,D1),e(D1,fpe),e(fpe,Tko),e(D1,Mko),e(D1,tV),e(tV,Eko),e(D1,Cko),e(G,wko),e(G,G1),e(G1,mpe),e(mpe,Ako),e(G1,Lko),e(G1,aV),e(aV,yko),e(G1,xko),e(G,$ko),e(G,O1),e(O1,gpe),e(gpe,kko),e(O1,Sko),e(O1,nV),e(nV,Rko),e(O1,Pko),e(G,Bko),e(G,V1),e(V1,hpe),e(hpe,Iko),e(V1,Nko),e(V1,sV),e(sV,qko),e(V1,jko),e(G,Dko),e(G,X1),e(X1,ppe),e(ppe,Gko),e(X1,Oko),e(X1,lV),e(lV,Vko),e(X1,Xko),e(G,zko),e(G,z1),e(z1,_pe),e(_pe,Wko),e(z1,Qko),e(z1,iV),e(iV,Uko),e(z1,Hko),e(G,Jko),e(G,W1),e(W1,upe),e(upe,Yko),e(W1,Kko),e(W1,dV),e(dV,Zko),e(W1,eSo),e(G,oSo),e(G,Q1),e(Q1,bpe),e(bpe,rSo),e(Q1,tSo),e(Q1,cV),e(cV,aSo),e(Q1,nSo),e(G,sSo),e(G,U1),e(U1,vpe),e(vpe,lSo),e(U1,iSo),e(U1,fV),e(fV,dSo),e(U1,cSo),e(G,fSo),e(G,H1),e(H1,Fpe),e(Fpe,mSo),e(H1,gSo),e(H1,mV),e(mV,hSo),e(H1,pSo),e(G,_So),e(G,J1),e(J1,Tpe),e(Tpe,uSo),e(J1,bSo),e(J1,gV),e(gV,vSo),e(J1,FSo),e(G,TSo),e(G,Y1),e(Y1,Mpe),e(Mpe,MSo),e(Y1,ESo),e(Y1,hV),e(hV,CSo),e(Y1,wSo),e(G,ASo),e(G,K1),e(K1,Epe),e(Epe,LSo),e(K1,ySo),e(K1,pV),e(pV,xSo),e(K1,$So),e(G,kSo),e(G,Z1),e(Z1,Cpe),e(Cpe,SSo),e(Z1,RSo),e(Z1,_V),e(_V,PSo),e(Z1,BSo),e(G,ISo),e(G,e4),e(e4,wpe),e(wpe,NSo),e(e4,qSo),e(e4,uV),e(uV,jSo),e(e4,DSo),e(G,GSo),e(G,o4),e(o4,Ape),e(Ape,OSo),e(o4,VSo),e(o4,bV),e(bV,XSo),e(o4,zSo),e(G,WSo),e(G,r4),e(r4,Lpe),e(Lpe,QSo),e(r4,USo),e(r4,vV),e(vV,HSo),e(r4,JSo),e(G,YSo),e(G,t4),e(t4,ype),e(ype,KSo),e(t4,ZSo),e(t4,FV),e(FV,eRo),e(t4,oRo),e(G,rRo),e(G,a4),e(a4,xpe),e(xpe,tRo),e(a4,aRo),e(a4,TV),e(TV,nRo),e(a4,sRo),e(G,lRo),e(G,n4),e(n4,$pe),e($pe,iRo),e(n4,dRo),e(n4,MV),e(MV,cRo),e(n4,fRo),e(G,mRo),e(G,s4),e(s4,kpe),e(kpe,gRo),e(s4,hRo),e(s4,EV),e(EV,pRo),e(s4,_Ro),e(G,uRo),e(G,l4),e(l4,Spe),e(Spe,bRo),e(l4,vRo),e(l4,CV),e(CV,FRo),e(l4,TRo),e(G,MRo),e(G,i4),e(i4,Rpe),e(Rpe,ERo),e(i4,CRo),e(i4,wV),e(wV,wRo),e(i4,ARo),e(G,LRo),e(G,d4),e(d4,Ppe),e(Ppe,yRo),e(d4,xRo),e(d4,AV),e(AV,$Ro),e(d4,kRo),e(G,SRo),e(G,c4),e(c4,Bpe),e(Bpe,RRo),e(c4,PRo),e(c4,LV),e(LV,BRo),e(c4,IRo),e(G,NRo),e(G,f4),e(f4,Ipe),e(Ipe,qRo),e(f4,jRo),e(f4,yV),e(yV,DRo),e(f4,GRo),e(G,ORo),e(G,m4),e(m4,Npe),e(Npe,VRo),e(m4,XRo),e(m4,xV),e(xV,zRo),e(m4,WRo),e(G,QRo),e(G,g4),e(g4,qpe),e(qpe,URo),e(g4,HRo),e(g4,$V),e($V,JRo),e(g4,YRo),e(G,KRo),e(G,h4),e(h4,jpe),e(jpe,ZRo),e(h4,ePo),e(h4,kV),e(kV,oPo),e(h4,rPo),e(G,tPo),e(G,p4),e(p4,Dpe),e(Dpe,aPo),e(p4,nPo),e(p4,SV),e(SV,sPo),e(p4,lPo),e(G,iPo),e(G,_4),e(_4,Gpe),e(Gpe,dPo),e(_4,cPo),e(_4,RV),e(RV,fPo),e(_4,mPo),e(G,gPo),e(G,u4),e(u4,Ope),e(Ope,hPo),e(u4,pPo),e(u4,PV),e(PV,_Po),e(u4,uPo),e(G,bPo),e(G,b4),e(b4,Vpe),e(Vpe,vPo),e(b4,FPo),e(b4,BV),e(BV,TPo),e(b4,MPo),e(G,EPo),e(G,v4),e(v4,Xpe),e(Xpe,CPo),e(v4,wPo),e(v4,IV),e(IV,APo),e(v4,LPo),e(G,yPo),e(G,F4),e(F4,zpe),e(zpe,xPo),e(F4,$Po),e(F4,NV),e(NV,kPo),e(F4,SPo),e(G,RPo),e(G,T4),e(T4,Wpe),e(Wpe,PPo),e(T4,BPo),e(T4,qV),e(qV,IPo),e(T4,NPo),e(G,qPo),e(G,M4),e(M4,Qpe),e(Qpe,jPo),e(M4,DPo),e(M4,jV),e(jV,GPo),e(M4,OPo),e(Ke,VPo),e(Ke,E4),e(E4,XPo),e(E4,Upe),e(Upe,zPo),e(E4,WPo),e(E4,Hpe),e(Hpe,QPo),e(Ke,UPo),M(C4,Ke,null),b(f,fUe,u),b(f,id,u),e(id,w4),e(w4,Jpe),M(Y8,Jpe,null),e(id,HPo),e(id,Ype),e(Ype,JPo),b(f,mUe,u),b(f,Po,u),M(K8,Po,null),e(Po,YPo),e(Po,dd),e(dd,KPo),e(dd,DV),e(DV,ZPo),e(dd,eBo),e(dd,GV),e(GV,oBo),e(dd,rBo),e(Po,tBo),e(Po,Z8),e(Z8,aBo),e(Z8,Kpe),e(Kpe,nBo),e(Z8,sBo),e(Po,lBo),e(Po,ht),M(e9,ht,null),e(ht,iBo),e(ht,Zpe),e(Zpe,dBo),e(ht,cBo),e(ht,cd),e(cd,fBo),e(cd,e_e),e(e_e,mBo),e(cd,gBo),e(cd,OV),e(OV,hBo),e(cd,pBo),e(ht,_Bo),M(A4,ht,null),e(Po,uBo),e(Po,Ze),M(o9,Ze,null),e(Ze,bBo),e(Ze,o_e),e(o_e,vBo),e(Ze,FBo),e(Ze,za),e(za,TBo),e(za,r_e),e(r_e,MBo),e(za,EBo),e(za,t_e),e(t_e,CBo),e(za,wBo),e(za,a_e),e(a_e,ABo),e(za,LBo),e(Ze,yBo),e(Ze,z),e(z,L4),e(L4,n_e),e(n_e,xBo),e(L4,$Bo),e(L4,VV),e(VV,kBo),e(L4,SBo),e(z,RBo),e(z,y4),e(y4,s_e),e(s_e,PBo),e(y4,BBo),e(y4,XV),e(XV,IBo),e(y4,NBo),e(z,qBo),e(z,x4),e(x4,l_e),e(l_e,jBo),e(x4,DBo),e(x4,zV),e(zV,GBo),e(x4,OBo),e(z,VBo),e(z,$4),e($4,i_e),e(i_e,XBo),e($4,zBo),e($4,WV),e(WV,WBo),e($4,QBo),e(z,UBo),e(z,k4),e(k4,d_e),e(d_e,HBo),e(k4,JBo),e(k4,QV),e(QV,YBo),e(k4,KBo),e(z,ZBo),e(z,S4),e(S4,c_e),e(c_e,eIo),e(S4,oIo),e(S4,UV),e(UV,rIo),e(S4,tIo),e(z,aIo),e(z,R4),e(R4,f_e),e(f_e,nIo),e(R4,sIo),e(R4,HV),e(HV,lIo),e(R4,iIo),e(z,dIo),e(z,P4),e(P4,m_e),e(m_e,cIo),e(P4,fIo),e(P4,JV),e(JV,mIo),e(P4,gIo),e(z,hIo),e(z,B4),e(B4,g_e),e(g_e,pIo),e(B4,_Io),e(B4,YV),e(YV,uIo),e(B4,bIo),e(z,vIo),e(z,I4),e(I4,h_e),e(h_e,FIo),e(I4,TIo),e(I4,KV),e(KV,MIo),e(I4,EIo),e(z,CIo),e(z,N4),e(N4,p_e),e(p_e,wIo),e(N4,AIo),e(N4,ZV),e(ZV,LIo),e(N4,yIo),e(z,xIo),e(z,q4),e(q4,__e),e(__e,$Io),e(q4,kIo),e(q4,eX),e(eX,SIo),e(q4,RIo),e(z,PIo),e(z,j4),e(j4,u_e),e(u_e,BIo),e(j4,IIo),e(j4,oX),e(oX,NIo),e(j4,qIo),e(z,jIo),e(z,D4),e(D4,b_e),e(b_e,DIo),e(D4,GIo),e(D4,rX),e(rX,OIo),e(D4,VIo),e(z,XIo),e(z,G4),e(G4,v_e),e(v_e,zIo),e(G4,WIo),e(G4,tX),e(tX,QIo),e(G4,UIo),e(z,HIo),e(z,O4),e(O4,F_e),e(F_e,JIo),e(O4,YIo),e(O4,aX),e(aX,KIo),e(O4,ZIo),e(z,eNo),e(z,V4),e(V4,T_e),e(T_e,oNo),e(V4,rNo),e(V4,nX),e(nX,tNo),e(V4,aNo),e(z,nNo),e(z,X4),e(X4,M_e),e(M_e,sNo),e(X4,lNo),e(X4,sX),e(sX,iNo),e(X4,dNo),e(z,cNo),e(z,z4),e(z4,E_e),e(E_e,fNo),e(z4,mNo),e(z4,lX),e(lX,gNo),e(z4,hNo),e(z,pNo),e(z,W4),e(W4,C_e),e(C_e,_No),e(W4,uNo),e(W4,iX),e(iX,bNo),e(W4,vNo),e(z,FNo),e(z,Q4),e(Q4,w_e),e(w_e,TNo),e(Q4,MNo),e(Q4,dX),e(dX,ENo),e(Q4,CNo),e(z,wNo),e(z,U4),e(U4,A_e),e(A_e,ANo),e(U4,LNo),e(U4,cX),e(cX,yNo),e(U4,xNo),e(z,$No),e(z,H4),e(H4,L_e),e(L_e,kNo),e(H4,SNo),e(H4,fX),e(fX,RNo),e(H4,PNo),e(z,BNo),e(z,J4),e(J4,y_e),e(y_e,INo),e(J4,NNo),e(J4,mX),e(mX,qNo),e(J4,jNo),e(z,DNo),e(z,Y4),e(Y4,x_e),e(x_e,GNo),e(Y4,ONo),e(Y4,gX),e(gX,VNo),e(Y4,XNo),e(z,zNo),e(z,K4),e(K4,$_e),e($_e,WNo),e(K4,QNo),e(K4,hX),e(hX,UNo),e(K4,HNo),e(z,JNo),e(z,Z4),e(Z4,k_e),e(k_e,YNo),e(Z4,KNo),e(Z4,pX),e(pX,ZNo),e(Z4,eqo),e(z,oqo),e(z,e2),e(e2,S_e),e(S_e,rqo),e(e2,tqo),e(e2,_X),e(_X,aqo),e(e2,nqo),e(z,sqo),e(z,o2),e(o2,R_e),e(R_e,lqo),e(o2,iqo),e(o2,uX),e(uX,dqo),e(o2,cqo),e(z,fqo),e(z,r2),e(r2,P_e),e(P_e,mqo),e(r2,gqo),e(r2,bX),e(bX,hqo),e(r2,pqo),e(z,_qo),e(z,t2),e(t2,B_e),e(B_e,uqo),e(t2,bqo),e(t2,vX),e(vX,vqo),e(t2,Fqo),e(z,Tqo),e(z,a2),e(a2,I_e),e(I_e,Mqo),e(a2,Eqo),e(a2,FX),e(FX,Cqo),e(a2,wqo),e(z,Aqo),e(z,n2),e(n2,N_e),e(N_e,Lqo),e(n2,yqo),e(n2,TX),e(TX,xqo),e(n2,$qo),e(z,kqo),e(z,s2),e(s2,q_e),e(q_e,Sqo),e(s2,Rqo),e(s2,MX),e(MX,Pqo),e(s2,Bqo),e(z,Iqo),e(z,l2),e(l2,j_e),e(j_e,Nqo),e(l2,qqo),e(l2,EX),e(EX,jqo),e(l2,Dqo),e(z,Gqo),e(z,i2),e(i2,D_e),e(D_e,Oqo),e(i2,Vqo),e(i2,CX),e(CX,Xqo),e(i2,zqo),e(z,Wqo),e(z,d2),e(d2,G_e),e(G_e,Qqo),e(d2,Uqo),e(d2,wX),e(wX,Hqo),e(d2,Jqo),e(z,Yqo),e(z,c2),e(c2,O_e),e(O_e,Kqo),e(c2,Zqo),e(c2,AX),e(AX,ejo),e(c2,ojo),e(z,rjo),e(z,f2),e(f2,V_e),e(V_e,tjo),e(f2,ajo),e(f2,LX),e(LX,njo),e(f2,sjo),e(z,ljo),e(z,m2),e(m2,X_e),e(X_e,ijo),e(m2,djo),e(m2,yX),e(yX,cjo),e(m2,fjo),e(Ze,mjo),e(Ze,g2),e(g2,gjo),e(g2,z_e),e(z_e,hjo),e(g2,pjo),e(g2,W_e),e(W_e,_jo),e(Ze,ujo),M(h2,Ze,null),b(f,gUe,u),b(f,fd,u),e(fd,p2),e(p2,Q_e),M(r9,Q_e,null),e(fd,bjo),e(fd,U_e),e(U_e,vjo),b(f,hUe,u),b(f,Bo,u),M(t9,Bo,null),e(Bo,Fjo),e(Bo,md),e(md,Tjo),e(md,xX),e(xX,Mjo),e(md,Ejo),e(md,$X),e($X,Cjo),e(md,wjo),e(Bo,Ajo),e(Bo,a9),e(a9,Ljo),e(a9,H_e),e(H_e,yjo),e(a9,xjo),e(Bo,$jo),e(Bo,pt),M(n9,pt,null),e(pt,kjo),e(pt,J_e),e(J_e,Sjo),e(pt,Rjo),e(pt,gd),e(gd,Pjo),e(gd,Y_e),e(Y_e,Bjo),e(gd,Ijo),e(gd,kX),e(kX,Njo),e(gd,qjo),e(pt,jjo),M(_2,pt,null),e(Bo,Djo),e(Bo,eo),M(s9,eo,null),e(eo,Gjo),e(eo,K_e),e(K_e,Ojo),e(eo,Vjo),e(eo,Wa),e(Wa,Xjo),e(Wa,Z_e),e(Z_e,zjo),e(Wa,Wjo),e(Wa,eue),e(eue,Qjo),e(Wa,Ujo),e(Wa,oue),e(oue,Hjo),e(Wa,Jjo),e(eo,Yjo),e(eo,U),e(U,u2),e(u2,rue),e(rue,Kjo),e(u2,Zjo),e(u2,SX),e(SX,eDo),e(u2,oDo),e(U,rDo),e(U,b2),e(b2,tue),e(tue,tDo),e(b2,aDo),e(b2,RX),e(RX,nDo),e(b2,sDo),e(U,lDo),e(U,v2),e(v2,aue),e(aue,iDo),e(v2,dDo),e(v2,PX),e(PX,cDo),e(v2,fDo),e(U,mDo),e(U,F2),e(F2,nue),e(nue,gDo),e(F2,hDo),e(F2,BX),e(BX,pDo),e(F2,_Do),e(U,uDo),e(U,T2),e(T2,sue),e(sue,bDo),e(T2,vDo),e(T2,IX),e(IX,FDo),e(T2,TDo),e(U,MDo),e(U,M2),e(M2,lue),e(lue,EDo),e(M2,CDo),e(M2,NX),e(NX,wDo),e(M2,ADo),e(U,LDo),e(U,E2),e(E2,iue),e(iue,yDo),e(E2,xDo),e(E2,qX),e(qX,$Do),e(E2,kDo),e(U,SDo),e(U,C2),e(C2,due),e(due,RDo),e(C2,PDo),e(C2,jX),e(jX,BDo),e(C2,IDo),e(U,NDo),e(U,w2),e(w2,cue),e(cue,qDo),e(w2,jDo),e(w2,DX),e(DX,DDo),e(w2,GDo),e(U,ODo),e(U,A2),e(A2,fue),e(fue,VDo),e(A2,XDo),e(A2,GX),e(GX,zDo),e(A2,WDo),e(U,QDo),e(U,L2),e(L2,mue),e(mue,UDo),e(L2,HDo),e(L2,OX),e(OX,JDo),e(L2,YDo),e(U,KDo),e(U,y2),e(y2,gue),e(gue,ZDo),e(y2,eGo),e(y2,VX),e(VX,oGo),e(y2,rGo),e(U,tGo),e(U,x2),e(x2,hue),e(hue,aGo),e(x2,nGo),e(x2,XX),e(XX,sGo),e(x2,lGo),e(U,iGo),e(U,$2),e($2,pue),e(pue,dGo),e($2,cGo),e($2,zX),e(zX,fGo),e($2,mGo),e(U,gGo),e(U,k2),e(k2,_ue),e(_ue,hGo),e(k2,pGo),e(k2,WX),e(WX,_Go),e(k2,uGo),e(U,bGo),e(U,S2),e(S2,uue),e(uue,vGo),e(S2,FGo),e(S2,QX),e(QX,TGo),e(S2,MGo),e(U,EGo),e(U,R2),e(R2,bue),e(bue,CGo),e(R2,wGo),e(R2,UX),e(UX,AGo),e(R2,LGo),e(U,yGo),e(U,P2),e(P2,vue),e(vue,xGo),e(P2,$Go),e(P2,HX),e(HX,kGo),e(P2,SGo),e(U,RGo),e(U,B2),e(B2,Fue),e(Fue,PGo),e(B2,BGo),e(B2,JX),e(JX,IGo),e(B2,NGo),e(U,qGo),e(U,I2),e(I2,Tue),e(Tue,jGo),e(I2,DGo),e(I2,YX),e(YX,GGo),e(I2,OGo),e(U,VGo),e(U,N2),e(N2,Mue),e(Mue,XGo),e(N2,zGo),e(N2,KX),e(KX,WGo),e(N2,QGo),e(U,UGo),e(U,q2),e(q2,Eue),e(Eue,HGo),e(q2,JGo),e(q2,ZX),e(ZX,YGo),e(q2,KGo),e(U,ZGo),e(U,j2),e(j2,Cue),e(Cue,eOo),e(j2,oOo),e(j2,ez),e(ez,rOo),e(j2,tOo),e(U,aOo),e(U,D2),e(D2,wue),e(wue,nOo),e(D2,sOo),e(D2,oz),e(oz,lOo),e(D2,iOo),e(U,dOo),e(U,G2),e(G2,Aue),e(Aue,cOo),e(G2,fOo),e(G2,rz),e(rz,mOo),e(G2,gOo),e(U,hOo),e(U,O2),e(O2,Lue),e(Lue,pOo),e(O2,_Oo),e(O2,tz),e(tz,uOo),e(O2,bOo),e(U,vOo),e(U,V2),e(V2,yue),e(yue,FOo),e(V2,TOo),e(V2,az),e(az,MOo),e(V2,EOo),e(U,COo),e(U,X2),e(X2,xue),e(xue,wOo),e(X2,AOo),e(X2,nz),e(nz,LOo),e(X2,yOo),e(U,xOo),e(U,z2),e(z2,$ue),e($ue,$Oo),e(z2,kOo),e(z2,sz),e(sz,SOo),e(z2,ROo),e(U,POo),e(U,W2),e(W2,kue),e(kue,BOo),e(W2,IOo),e(W2,lz),e(lz,NOo),e(W2,qOo),e(U,jOo),e(U,Q2),e(Q2,Sue),e(Sue,DOo),e(Q2,GOo),e(Q2,iz),e(iz,OOo),e(Q2,VOo),e(U,XOo),e(U,U2),e(U2,Rue),e(Rue,zOo),e(U2,WOo),e(U2,dz),e(dz,QOo),e(U2,UOo),e(U,HOo),e(U,H2),e(H2,Pue),e(Pue,JOo),e(H2,YOo),e(H2,cz),e(cz,KOo),e(H2,ZOo),e(U,eVo),e(U,J2),e(J2,Bue),e(Bue,oVo),e(J2,rVo),e(J2,Iue),e(Iue,tVo),e(J2,aVo),e(U,nVo),e(U,Y2),e(Y2,Nue),e(Nue,sVo),e(Y2,lVo),e(Y2,fz),e(fz,iVo),e(Y2,dVo),e(U,cVo),e(U,K2),e(K2,que),e(que,fVo),e(K2,mVo),e(K2,mz),e(mz,gVo),e(K2,hVo),e(U,pVo),e(U,Z2),e(Z2,jue),e(jue,_Vo),e(Z2,uVo),e(Z2,gz),e(gz,bVo),e(Z2,vVo),e(U,FVo),e(U,eb),e(eb,Due),e(Due,TVo),e(eb,MVo),e(eb,hz),e(hz,EVo),e(eb,CVo),e(eo,wVo),e(eo,ob),e(ob,AVo),e(ob,Gue),e(Gue,LVo),e(ob,yVo),e(ob,Oue),e(Oue,xVo),e(eo,$Vo),M(rb,eo,null),b(f,pUe,u),b(f,hd,u),e(hd,tb),e(tb,Vue),M(l9,Vue,null),e(hd,kVo),e(hd,Xue),e(Xue,SVo),b(f,_Ue,u),b(f,Io,u),M(i9,Io,null),e(Io,RVo),e(Io,pd),e(pd,PVo),e(pd,pz),e(pz,BVo),e(pd,IVo),e(pd,_z),e(_z,NVo),e(pd,qVo),e(Io,jVo),e(Io,d9),e(d9,DVo),e(d9,zue),e(zue,GVo),e(d9,OVo),e(Io,VVo),e(Io,_t),M(c9,_t,null),e(_t,XVo),e(_t,Wue),e(Wue,zVo),e(_t,WVo),e(_t,_d),e(_d,QVo),e(_d,Que),e(Que,UVo),e(_d,HVo),e(_d,uz),e(uz,JVo),e(_d,YVo),e(_t,KVo),M(ab,_t,null),e(Io,ZVo),e(Io,oo),M(f9,oo,null),e(oo,eXo),e(oo,Uue),e(Uue,oXo),e(oo,rXo),e(oo,Qa),e(Qa,tXo),e(Qa,Hue),e(Hue,aXo),e(Qa,nXo),e(Qa,Jue),e(Jue,sXo),e(Qa,lXo),e(Qa,Yue),e(Yue,iXo),e(Qa,dXo),e(oo,cXo),e(oo,me),e(me,nb),e(nb,Kue),e(Kue,fXo),e(nb,mXo),e(nb,bz),e(bz,gXo),e(nb,hXo),e(me,pXo),e(me,sb),e(sb,Zue),e(Zue,_Xo),e(sb,uXo),e(sb,vz),e(vz,bXo),e(sb,vXo),e(me,FXo),e(me,lb),e(lb,e1e),e(e1e,TXo),e(lb,MXo),e(lb,Fz),e(Fz,EXo),e(lb,CXo),e(me,wXo),e(me,ib),e(ib,o1e),e(o1e,AXo),e(ib,LXo),e(ib,Tz),e(Tz,yXo),e(ib,xXo),e(me,$Xo),e(me,db),e(db,r1e),e(r1e,kXo),e(db,SXo),e(db,Mz),e(Mz,RXo),e(db,PXo),e(me,BXo),e(me,cb),e(cb,t1e),e(t1e,IXo),e(cb,NXo),e(cb,Ez),e(Ez,qXo),e(cb,jXo),e(me,DXo),e(me,fb),e(fb,a1e),e(a1e,GXo),e(fb,OXo),e(fb,Cz),e(Cz,VXo),e(fb,XXo),e(me,zXo),e(me,mb),e(mb,n1e),e(n1e,WXo),e(mb,QXo),e(mb,wz),e(wz,UXo),e(mb,HXo),e(me,JXo),e(me,gb),e(gb,s1e),e(s1e,YXo),e(gb,KXo),e(gb,Az),e(Az,ZXo),e(gb,ezo),e(me,ozo),e(me,hb),e(hb,l1e),e(l1e,rzo),e(hb,tzo),e(hb,Lz),e(Lz,azo),e(hb,nzo),e(me,szo),e(me,pb),e(pb,i1e),e(i1e,lzo),e(pb,izo),e(pb,yz),e(yz,dzo),e(pb,czo),e(me,fzo),e(me,_b),e(_b,d1e),e(d1e,mzo),e(_b,gzo),e(_b,xz),e(xz,hzo),e(_b,pzo),e(me,_zo),e(me,ub),e(ub,c1e),e(c1e,uzo),e(ub,bzo),e(ub,$z),e($z,vzo),e(ub,Fzo),e(me,Tzo),e(me,bb),e(bb,f1e),e(f1e,Mzo),e(bb,Ezo),e(bb,kz),e(kz,Czo),e(bb,wzo),e(me,Azo),e(me,vb),e(vb,m1e),e(m1e,Lzo),e(vb,yzo),e(vb,Sz),e(Sz,xzo),e(vb,$zo),e(me,kzo),e(me,Fb),e(Fb,g1e),e(g1e,Szo),e(Fb,Rzo),e(Fb,Rz),e(Rz,Pzo),e(Fb,Bzo),e(me,Izo),e(me,Tb),e(Tb,h1e),e(h1e,Nzo),e(Tb,qzo),e(Tb,Pz),e(Pz,jzo),e(Tb,Dzo),e(me,Gzo),e(me,Mb),e(Mb,p1e),e(p1e,Ozo),e(Mb,Vzo),e(Mb,Bz),e(Bz,Xzo),e(Mb,zzo),e(me,Wzo),e(me,Eb),e(Eb,_1e),e(_1e,Qzo),e(Eb,Uzo),e(Eb,Iz),e(Iz,Hzo),e(Eb,Jzo),e(oo,Yzo),e(oo,Cb),e(Cb,Kzo),e(Cb,u1e),e(u1e,Zzo),e(Cb,eWo),e(Cb,b1e),e(b1e,oWo),e(oo,rWo),M(wb,oo,null),b(f,uUe,u),b(f,ud,u),e(ud,Ab),e(Ab,v1e),M(m9,v1e,null),e(ud,tWo),e(ud,F1e),e(F1e,aWo),b(f,bUe,u),b(f,No,u),M(g9,No,null),e(No,nWo),e(No,bd),e(bd,sWo),e(bd,Nz),e(Nz,lWo),e(bd,iWo),e(bd,qz),e(qz,dWo),e(bd,cWo),e(No,fWo),e(No,h9),e(h9,mWo),e(h9,T1e),e(T1e,gWo),e(h9,hWo),e(No,pWo),e(No,ut),M(p9,ut,null),e(ut,_Wo),e(ut,M1e),e(M1e,uWo),e(ut,bWo),e(ut,vd),e(vd,vWo),e(vd,E1e),e(E1e,FWo),e(vd,TWo),e(vd,jz),e(jz,MWo),e(vd,EWo),e(ut,CWo),M(Lb,ut,null),e(No,wWo),e(No,ro),M(_9,ro,null),e(ro,AWo),e(ro,C1e),e(C1e,LWo),e(ro,yWo),e(ro,Ua),e(Ua,xWo),e(Ua,w1e),e(w1e,$Wo),e(Ua,kWo),e(Ua,A1e),e(A1e,SWo),e(Ua,RWo),e(Ua,L1e),e(L1e,PWo),e(Ua,BWo),e(ro,IWo),e(ro,N),e(N,yb),e(yb,y1e),e(y1e,NWo),e(yb,qWo),e(yb,Dz),e(Dz,jWo),e(yb,DWo),e(N,GWo),e(N,xb),e(xb,x1e),e(x1e,OWo),e(xb,VWo),e(xb,Gz),e(Gz,XWo),e(xb,zWo),e(N,WWo),e(N,$b),e($b,$1e),e($1e,QWo),e($b,UWo),e($b,Oz),e(Oz,HWo),e($b,JWo),e(N,YWo),e(N,kb),e(kb,k1e),e(k1e,KWo),e(kb,ZWo),e(kb,Vz),e(Vz,eQo),e(kb,oQo),e(N,rQo),e(N,Sb),e(Sb,S1e),e(S1e,tQo),e(Sb,aQo),e(Sb,Xz),e(Xz,nQo),e(Sb,sQo),e(N,lQo),e(N,Rb),e(Rb,R1e),e(R1e,iQo),e(Rb,dQo),e(Rb,zz),e(zz,cQo),e(Rb,fQo),e(N,mQo),e(N,Pb),e(Pb,P1e),e(P1e,gQo),e(Pb,hQo),e(Pb,Wz),e(Wz,pQo),e(Pb,_Qo),e(N,uQo),e(N,Bb),e(Bb,B1e),e(B1e,bQo),e(Bb,vQo),e(Bb,Qz),e(Qz,FQo),e(Bb,TQo),e(N,MQo),e(N,Ib),e(Ib,I1e),e(I1e,EQo),e(Ib,CQo),e(Ib,Uz),e(Uz,wQo),e(Ib,AQo),e(N,LQo),e(N,Nb),e(Nb,N1e),e(N1e,yQo),e(Nb,xQo),e(Nb,Hz),e(Hz,$Qo),e(Nb,kQo),e(N,SQo),e(N,qb),e(qb,q1e),e(q1e,RQo),e(qb,PQo),e(qb,Jz),e(Jz,BQo),e(qb,IQo),e(N,NQo),e(N,jb),e(jb,j1e),e(j1e,qQo),e(jb,jQo),e(jb,Yz),e(Yz,DQo),e(jb,GQo),e(N,OQo),e(N,Db),e(Db,D1e),e(D1e,VQo),e(Db,XQo),e(Db,Kz),e(Kz,zQo),e(Db,WQo),e(N,QQo),e(N,Gb),e(Gb,G1e),e(G1e,UQo),e(Gb,HQo),e(Gb,Zz),e(Zz,JQo),e(Gb,YQo),e(N,KQo),e(N,Ob),e(Ob,O1e),e(O1e,ZQo),e(Ob,eUo),e(Ob,eW),e(eW,oUo),e(Ob,rUo),e(N,tUo),e(N,Vb),e(Vb,V1e),e(V1e,aUo),e(Vb,nUo),e(Vb,oW),e(oW,sUo),e(Vb,lUo),e(N,iUo),e(N,Xb),e(Xb,X1e),e(X1e,dUo),e(Xb,cUo),e(Xb,rW),e(rW,fUo),e(Xb,mUo),e(N,gUo),e(N,zb),e(zb,z1e),e(z1e,hUo),e(zb,pUo),e(zb,tW),e(tW,_Uo),e(zb,uUo),e(N,bUo),e(N,Wb),e(Wb,W1e),e(W1e,vUo),e(Wb,FUo),e(Wb,aW),e(aW,TUo),e(Wb,MUo),e(N,EUo),e(N,Qb),e(Qb,Q1e),e(Q1e,CUo),e(Qb,wUo),e(Qb,nW),e(nW,AUo),e(Qb,LUo),e(N,yUo),e(N,Ub),e(Ub,U1e),e(U1e,xUo),e(Ub,$Uo),e(Ub,sW),e(sW,kUo),e(Ub,SUo),e(N,RUo),e(N,Hb),e(Hb,H1e),e(H1e,PUo),e(Hb,BUo),e(Hb,lW),e(lW,IUo),e(Hb,NUo),e(N,qUo),e(N,Jb),e(Jb,J1e),e(J1e,jUo),e(Jb,DUo),e(Jb,iW),e(iW,GUo),e(Jb,OUo),e(N,VUo),e(N,Yb),e(Yb,Y1e),e(Y1e,XUo),e(Yb,zUo),e(Yb,dW),e(dW,WUo),e(Yb,QUo),e(N,UUo),e(N,Kb),e(Kb,K1e),e(K1e,HUo),e(Kb,JUo),e(Kb,cW),e(cW,YUo),e(Kb,KUo),e(N,ZUo),e(N,Zb),e(Zb,Z1e),e(Z1e,eHo),e(Zb,oHo),e(Zb,fW),e(fW,rHo),e(Zb,tHo),e(N,aHo),e(N,ev),e(ev,e4e),e(e4e,nHo),e(ev,sHo),e(ev,mW),e(mW,lHo),e(ev,iHo),e(N,dHo),e(N,ov),e(ov,o4e),e(o4e,cHo),e(ov,fHo),e(ov,gW),e(gW,mHo),e(ov,gHo),e(N,hHo),e(N,rv),e(rv,r4e),e(r4e,pHo),e(rv,_Ho),e(rv,hW),e(hW,uHo),e(rv,bHo),e(N,vHo),e(N,tv),e(tv,t4e),e(t4e,FHo),e(tv,THo),e(tv,pW),e(pW,MHo),e(tv,EHo),e(N,CHo),e(N,av),e(av,a4e),e(a4e,wHo),e(av,AHo),e(av,_W),e(_W,LHo),e(av,yHo),e(N,xHo),e(N,nv),e(nv,n4e),e(n4e,$Ho),e(nv,kHo),e(nv,uW),e(uW,SHo),e(nv,RHo),e(N,PHo),e(N,sv),e(sv,s4e),e(s4e,BHo),e(sv,IHo),e(sv,bW),e(bW,NHo),e(sv,qHo),e(N,jHo),e(N,lv),e(lv,l4e),e(l4e,DHo),e(lv,GHo),e(lv,vW),e(vW,OHo),e(lv,VHo),e(N,XHo),e(N,iv),e(iv,i4e),e(i4e,zHo),e(iv,WHo),e(iv,FW),e(FW,QHo),e(iv,UHo),e(N,HHo),e(N,dv),e(dv,d4e),e(d4e,JHo),e(dv,YHo),e(dv,TW),e(TW,KHo),e(dv,ZHo),e(N,eJo),e(N,cv),e(cv,c4e),e(c4e,oJo),e(cv,rJo),e(cv,MW),e(MW,tJo),e(cv,aJo),e(N,nJo),e(N,fv),e(fv,f4e),e(f4e,sJo),e(fv,lJo),e(fv,EW),e(EW,iJo),e(fv,dJo),e(N,cJo),e(N,mv),e(mv,m4e),e(m4e,fJo),e(mv,mJo),e(mv,CW),e(CW,gJo),e(mv,hJo),e(N,pJo),e(N,gv),e(gv,g4e),e(g4e,_Jo),e(gv,uJo),e(gv,wW),e(wW,bJo),e(gv,vJo),e(N,FJo),e(N,hv),e(hv,h4e),e(h4e,TJo),e(hv,MJo),e(hv,AW),e(AW,EJo),e(hv,CJo),e(N,wJo),e(N,pv),e(pv,p4e),e(p4e,AJo),e(pv,LJo),e(pv,LW),e(LW,yJo),e(pv,xJo),e(N,$Jo),e(N,_v),e(_v,_4e),e(_4e,kJo),e(_v,SJo),e(_v,yW),e(yW,RJo),e(_v,PJo),e(N,BJo),e(N,uv),e(uv,u4e),e(u4e,IJo),e(uv,NJo),e(uv,xW),e(xW,qJo),e(uv,jJo),e(N,DJo),e(N,bv),e(bv,b4e),e(b4e,GJo),e(bv,OJo),e(bv,$W),e($W,VJo),e(bv,XJo),e(N,zJo),e(N,vv),e(vv,v4e),e(v4e,WJo),e(vv,QJo),e(vv,kW),e(kW,UJo),e(vv,HJo),e(N,JJo),e(N,Fv),e(Fv,F4e),e(F4e,YJo),e(Fv,KJo),e(Fv,SW),e(SW,ZJo),e(Fv,eYo),e(N,oYo),e(N,Tv),e(Tv,T4e),e(T4e,rYo),e(Tv,tYo),e(Tv,RW),e(RW,aYo),e(Tv,nYo),e(N,sYo),e(N,Mv),e(Mv,M4e),e(M4e,lYo),e(Mv,iYo),e(Mv,PW),e(PW,dYo),e(Mv,cYo),e(N,fYo),e(N,Ev),e(Ev,E4e),e(E4e,mYo),e(Ev,gYo),e(Ev,BW),e(BW,hYo),e(Ev,pYo),e(N,_Yo),e(N,Cv),e(Cv,C4e),e(C4e,uYo),e(Cv,bYo),e(Cv,IW),e(IW,vYo),e(Cv,FYo),e(N,TYo),e(N,wv),e(wv,w4e),e(w4e,MYo),e(wv,EYo),e(wv,NW),e(NW,CYo),e(wv,wYo),e(ro,AYo),e(ro,Av),e(Av,LYo),e(Av,A4e),e(A4e,yYo),e(Av,xYo),e(Av,L4e),e(L4e,$Yo),e(ro,kYo),M(Lv,ro,null),b(f,vUe,u),b(f,Fd,u),e(Fd,yv),e(yv,y4e),M(u9,y4e,null),e(Fd,SYo),e(Fd,x4e),e(x4e,RYo),b(f,FUe,u),b(f,qo,u),M(b9,qo,null),e(qo,PYo),e(qo,Td),e(Td,BYo),e(Td,qW),e(qW,IYo),e(Td,NYo),e(Td,jW),e(jW,qYo),e(Td,jYo),e(qo,DYo),e(qo,v9),e(v9,GYo),e(v9,$4e),e($4e,OYo),e(v9,VYo),e(qo,XYo),e(qo,bt),M(F9,bt,null),e(bt,zYo),e(bt,k4e),e(k4e,WYo),e(bt,QYo),e(bt,Md),e(Md,UYo),e(Md,S4e),e(S4e,HYo),e(Md,JYo),e(Md,DW),e(DW,YYo),e(Md,KYo),e(bt,ZYo),M(xv,bt,null),e(qo,eKo),e(qo,to),M(T9,to,null),e(to,oKo),e(to,R4e),e(R4e,rKo),e(to,tKo),e(to,Ha),e(Ha,aKo),e(Ha,P4e),e(P4e,nKo),e(Ha,sKo),e(Ha,B4e),e(B4e,lKo),e(Ha,iKo),e(Ha,I4e),e(I4e,dKo),e(Ha,cKo),e(to,fKo),e(to,Z),e(Z,$v),e($v,N4e),e(N4e,mKo),e($v,gKo),e($v,GW),e(GW,hKo),e($v,pKo),e(Z,_Ko),e(Z,kv),e(kv,q4e),e(q4e,uKo),e(kv,bKo),e(kv,OW),e(OW,vKo),e(kv,FKo),e(Z,TKo),e(Z,Sv),e(Sv,j4e),e(j4e,MKo),e(Sv,EKo),e(Sv,VW),e(VW,CKo),e(Sv,wKo),e(Z,AKo),e(Z,Rv),e(Rv,D4e),e(D4e,LKo),e(Rv,yKo),e(Rv,XW),e(XW,xKo),e(Rv,$Ko),e(Z,kKo),e(Z,Pv),e(Pv,G4e),e(G4e,SKo),e(Pv,RKo),e(Pv,zW),e(zW,PKo),e(Pv,BKo),e(Z,IKo),e(Z,Bv),e(Bv,O4e),e(O4e,NKo),e(Bv,qKo),e(Bv,WW),e(WW,jKo),e(Bv,DKo),e(Z,GKo),e(Z,Iv),e(Iv,V4e),e(V4e,OKo),e(Iv,VKo),e(Iv,QW),e(QW,XKo),e(Iv,zKo),e(Z,WKo),e(Z,Nv),e(Nv,X4e),e(X4e,QKo),e(Nv,UKo),e(Nv,UW),e(UW,HKo),e(Nv,JKo),e(Z,YKo),e(Z,qv),e(qv,z4e),e(z4e,KKo),e(qv,ZKo),e(qv,HW),e(HW,eZo),e(qv,oZo),e(Z,rZo),e(Z,jv),e(jv,W4e),e(W4e,tZo),e(jv,aZo),e(jv,JW),e(JW,nZo),e(jv,sZo),e(Z,lZo),e(Z,Dv),e(Dv,Q4e),e(Q4e,iZo),e(Dv,dZo),e(Dv,YW),e(YW,cZo),e(Dv,fZo),e(Z,mZo),e(Z,Gv),e(Gv,U4e),e(U4e,gZo),e(Gv,hZo),e(Gv,KW),e(KW,pZo),e(Gv,_Zo),e(Z,uZo),e(Z,Ov),e(Ov,H4e),e(H4e,bZo),e(Ov,vZo),e(Ov,ZW),e(ZW,FZo),e(Ov,TZo),e(Z,MZo),e(Z,Vv),e(Vv,J4e),e(J4e,EZo),e(Vv,CZo),e(Vv,eQ),e(eQ,wZo),e(Vv,AZo),e(Z,LZo),e(Z,Xv),e(Xv,Y4e),e(Y4e,yZo),e(Xv,xZo),e(Xv,oQ),e(oQ,$Zo),e(Xv,kZo),e(Z,SZo),e(Z,zv),e(zv,K4e),e(K4e,RZo),e(zv,PZo),e(zv,rQ),e(rQ,BZo),e(zv,IZo),e(Z,NZo),e(Z,Wv),e(Wv,Z4e),e(Z4e,qZo),e(Wv,jZo),e(Wv,tQ),e(tQ,DZo),e(Wv,GZo),e(Z,OZo),e(Z,Qv),e(Qv,e2e),e(e2e,VZo),e(Qv,XZo),e(Qv,aQ),e(aQ,zZo),e(Qv,WZo),e(Z,QZo),e(Z,Uv),e(Uv,o2e),e(o2e,UZo),e(Uv,HZo),e(Uv,nQ),e(nQ,JZo),e(Uv,YZo),e(Z,KZo),e(Z,Hv),e(Hv,r2e),e(r2e,ZZo),e(Hv,eer),e(Hv,sQ),e(sQ,oer),e(Hv,rer),e(Z,ter),e(Z,Jv),e(Jv,t2e),e(t2e,aer),e(Jv,ner),e(Jv,lQ),e(lQ,ser),e(Jv,ler),e(Z,ier),e(Z,Yv),e(Yv,a2e),e(a2e,der),e(Yv,cer),e(Yv,iQ),e(iQ,fer),e(Yv,mer),e(Z,ger),e(Z,Kv),e(Kv,n2e),e(n2e,her),e(Kv,per),e(Kv,dQ),e(dQ,_er),e(Kv,uer),e(Z,ber),e(Z,Zv),e(Zv,s2e),e(s2e,ver),e(Zv,Fer),e(Zv,cQ),e(cQ,Ter),e(Zv,Mer),e(Z,Eer),e(Z,e3),e(e3,l2e),e(l2e,Cer),e(e3,wer),e(e3,fQ),e(fQ,Aer),e(e3,Ler),e(Z,yer),e(Z,o3),e(o3,i2e),e(i2e,xer),e(o3,$er),e(o3,mQ),e(mQ,ker),e(o3,Ser),e(Z,Rer),e(Z,r3),e(r3,d2e),e(d2e,Per),e(r3,Ber),e(r3,gQ),e(gQ,Ier),e(r3,Ner),e(Z,qer),e(Z,t3),e(t3,c2e),e(c2e,jer),e(t3,Der),e(t3,hQ),e(hQ,Ger),e(t3,Oer),e(Z,Ver),e(Z,a3),e(a3,f2e),e(f2e,Xer),e(a3,zer),e(a3,pQ),e(pQ,Wer),e(a3,Qer),e(Z,Uer),e(Z,n3),e(n3,m2e),e(m2e,Her),e(n3,Jer),e(n3,_Q),e(_Q,Yer),e(n3,Ker),e(Z,Zer),e(Z,s3),e(s3,g2e),e(g2e,eor),e(s3,oor),e(s3,uQ),e(uQ,ror),e(s3,tor),e(to,aor),e(to,l3),e(l3,nor),e(l3,h2e),e(h2e,sor),e(l3,lor),e(l3,p2e),e(p2e,ior),e(to,dor),M(i3,to,null),b(f,TUe,u),b(f,Ed,u),e(Ed,d3),e(d3,_2e),M(M9,_2e,null),e(Ed,cor),e(Ed,u2e),e(u2e,mor),b(f,MUe,u),b(f,jo,u),M(E9,jo,null),e(jo,gor),e(jo,Cd),e(Cd,hor),e(Cd,bQ),e(bQ,por),e(Cd,_or),e(Cd,vQ),e(vQ,uor),e(Cd,bor),e(jo,vor),e(jo,C9),e(C9,For),e(C9,b2e),e(b2e,Tor),e(C9,Mor),e(jo,Eor),e(jo,vt),M(w9,vt,null),e(vt,Cor),e(vt,v2e),e(v2e,wor),e(vt,Aor),e(vt,wd),e(wd,Lor),e(wd,F2e),e(F2e,yor),e(wd,xor),e(wd,FQ),e(FQ,$or),e(wd,kor),e(vt,Sor),M(c3,vt,null),e(jo,Ror),e(jo,ao),M(A9,ao,null),e(ao,Por),e(ao,T2e),e(T2e,Bor),e(ao,Ior),e(ao,Ja),e(Ja,Nor),e(Ja,M2e),e(M2e,qor),e(Ja,jor),e(Ja,E2e),e(E2e,Dor),e(Ja,Gor),e(Ja,C2e),e(C2e,Oor),e(Ja,Vor),e(ao,Xor),e(ao,Do),e(Do,f3),e(f3,w2e),e(w2e,zor),e(f3,Wor),e(f3,TQ),e(TQ,Qor),e(f3,Uor),e(Do,Hor),e(Do,m3),e(m3,A2e),e(A2e,Jor),e(m3,Yor),e(m3,MQ),e(MQ,Kor),e(m3,Zor),e(Do,err),e(Do,g3),e(g3,L2e),e(L2e,orr),e(g3,rrr),e(g3,EQ),e(EQ,trr),e(g3,arr),e(Do,nrr),e(Do,h3),e(h3,y2e),e(y2e,srr),e(h3,lrr),e(h3,CQ),e(CQ,irr),e(h3,drr),e(Do,crr),e(Do,p3),e(p3,x2e),e(x2e,frr),e(p3,mrr),e(p3,wQ),e(wQ,grr),e(p3,hrr),e(Do,prr),e(Do,_3),e(_3,$2e),e($2e,_rr),e(_3,urr),e(_3,AQ),e(AQ,brr),e(_3,vrr),e(ao,Frr),e(ao,u3),e(u3,Trr),e(u3,k2e),e(k2e,Mrr),e(u3,Err),e(u3,S2e),e(S2e,Crr),e(ao,wrr),M(b3,ao,null),b(f,EUe,u),b(f,Ad,u),e(Ad,v3),e(v3,R2e),M(L9,R2e,null),e(Ad,Arr),e(Ad,P2e),e(P2e,Lrr),b(f,CUe,u),b(f,Go,u),M(y9,Go,null),e(Go,yrr),e(Go,Ld),e(Ld,xrr),e(Ld,LQ),e(LQ,$rr),e(Ld,krr),e(Ld,yQ),e(yQ,Srr),e(Ld,Rrr),e(Go,Prr),e(Go,x9),e(x9,Brr),e(x9,B2e),e(B2e,Irr),e(x9,Nrr),e(Go,qrr),e(Go,Ft),M($9,Ft,null),e(Ft,jrr),e(Ft,I2e),e(I2e,Drr),e(Ft,Grr),e(Ft,yd),e(yd,Orr),e(yd,N2e),e(N2e,Vrr),e(yd,Xrr),e(yd,xQ),e(xQ,zrr),e(yd,Wrr),e(Ft,Qrr),M(F3,Ft,null),e(Go,Urr),e(Go,no),M(k9,no,null),e(no,Hrr),e(no,q2e),e(q2e,Jrr),e(no,Yrr),e(no,Ya),e(Ya,Krr),e(Ya,j2e),e(j2e,Zrr),e(Ya,etr),e(Ya,D2e),e(D2e,otr),e(Ya,rtr),e(Ya,G2e),e(G2e,ttr),e(Ya,atr),e(no,ntr),e(no,H),e(H,T3),e(T3,O2e),e(O2e,str),e(T3,ltr),e(T3,$Q),e($Q,itr),e(T3,dtr),e(H,ctr),e(H,M3),e(M3,V2e),e(V2e,ftr),e(M3,mtr),e(M3,kQ),e(kQ,gtr),e(M3,htr),e(H,ptr),e(H,E3),e(E3,X2e),e(X2e,_tr),e(E3,utr),e(E3,SQ),e(SQ,btr),e(E3,vtr),e(H,Ftr),e(H,C3),e(C3,z2e),e(z2e,Ttr),e(C3,Mtr),e(C3,RQ),e(RQ,Etr),e(C3,Ctr),e(H,wtr),e(H,w3),e(w3,W2e),e(W2e,Atr),e(w3,Ltr),e(w3,PQ),e(PQ,ytr),e(w3,xtr),e(H,$tr),e(H,A3),e(A3,Q2e),e(Q2e,ktr),e(A3,Str),e(A3,BQ),e(BQ,Rtr),e(A3,Ptr),e(H,Btr),e(H,L3),e(L3,U2e),e(U2e,Itr),e(L3,Ntr),e(L3,IQ),e(IQ,qtr),e(L3,jtr),e(H,Dtr),e(H,y3),e(y3,H2e),e(H2e,Gtr),e(y3,Otr),e(y3,NQ),e(NQ,Vtr),e(y3,Xtr),e(H,ztr),e(H,x3),e(x3,J2e),e(J2e,Wtr),e(x3,Qtr),e(x3,qQ),e(qQ,Utr),e(x3,Htr),e(H,Jtr),e(H,$3),e($3,Y2e),e(Y2e,Ytr),e($3,Ktr),e($3,jQ),e(jQ,Ztr),e($3,ear),e(H,oar),e(H,k3),e(k3,K2e),e(K2e,rar),e(k3,tar),e(k3,DQ),e(DQ,aar),e(k3,nar),e(H,sar),e(H,S3),e(S3,Z2e),e(Z2e,lar),e(S3,iar),e(S3,GQ),e(GQ,dar),e(S3,car),e(H,far),e(H,R3),e(R3,ebe),e(ebe,mar),e(R3,gar),e(R3,OQ),e(OQ,har),e(R3,par),e(H,_ar),e(H,P3),e(P3,obe),e(obe,uar),e(P3,bar),e(P3,VQ),e(VQ,Far),e(P3,Tar),e(H,Mar),e(H,B3),e(B3,rbe),e(rbe,Ear),e(B3,Car),e(B3,XQ),e(XQ,war),e(B3,Aar),e(H,Lar),e(H,I3),e(I3,tbe),e(tbe,yar),e(I3,xar),e(I3,zQ),e(zQ,$ar),e(I3,kar),e(H,Sar),e(H,N3),e(N3,abe),e(abe,Rar),e(N3,Par),e(N3,WQ),e(WQ,Bar),e(N3,Iar),e(H,Nar),e(H,q3),e(q3,nbe),e(nbe,qar),e(q3,jar),e(q3,QQ),e(QQ,Dar),e(q3,Gar),e(H,Oar),e(H,j3),e(j3,sbe),e(sbe,Var),e(j3,Xar),e(j3,UQ),e(UQ,zar),e(j3,War),e(H,Qar),e(H,D3),e(D3,lbe),e(lbe,Uar),e(D3,Har),e(D3,HQ),e(HQ,Jar),e(D3,Yar),e(H,Kar),e(H,G3),e(G3,ibe),e(ibe,Zar),e(G3,enr),e(G3,JQ),e(JQ,onr),e(G3,rnr),e(H,tnr),e(H,O3),e(O3,dbe),e(dbe,anr),e(O3,nnr),e(O3,YQ),e(YQ,snr),e(O3,lnr),e(H,inr),e(H,V3),e(V3,cbe),e(cbe,dnr),e(V3,cnr),e(V3,KQ),e(KQ,fnr),e(V3,mnr),e(H,gnr),e(H,X3),e(X3,fbe),e(fbe,hnr),e(X3,pnr),e(X3,ZQ),e(ZQ,_nr),e(X3,unr),e(H,bnr),e(H,z3),e(z3,mbe),e(mbe,vnr),e(z3,Fnr),e(z3,eU),e(eU,Tnr),e(z3,Mnr),e(H,Enr),e(H,W3),e(W3,gbe),e(gbe,Cnr),e(W3,wnr),e(W3,oU),e(oU,Anr),e(W3,Lnr),e(H,ynr),e(H,Q3),e(Q3,hbe),e(hbe,xnr),e(Q3,$nr),e(Q3,rU),e(rU,knr),e(Q3,Snr),e(H,Rnr),e(H,U3),e(U3,pbe),e(pbe,Pnr),e(U3,Bnr),e(U3,tU),e(tU,Inr),e(U3,Nnr),e(H,qnr),e(H,H3),e(H3,_be),e(_be,jnr),e(H3,Dnr),e(H3,aU),e(aU,Gnr),e(H3,Onr),e(H,Vnr),e(H,J3),e(J3,ube),e(ube,Xnr),e(J3,znr),e(J3,nU),e(nU,Wnr),e(J3,Qnr),e(H,Unr),e(H,Y3),e(Y3,bbe),e(bbe,Hnr),e(Y3,Jnr),e(Y3,sU),e(sU,Ynr),e(Y3,Knr),e(H,Znr),e(H,K3),e(K3,vbe),e(vbe,esr),e(K3,osr),e(K3,lU),e(lU,rsr),e(K3,tsr),e(H,asr),e(H,Z3),e(Z3,Fbe),e(Fbe,nsr),e(Z3,ssr),e(Z3,iU),e(iU,lsr),e(Z3,isr),e(H,dsr),e(H,e5),e(e5,Tbe),e(Tbe,csr),e(e5,fsr),e(e5,dU),e(dU,msr),e(e5,gsr),e(H,hsr),e(H,o5),e(o5,Mbe),e(Mbe,psr),e(o5,_sr),e(o5,cU),e(cU,usr),e(o5,bsr),e(H,vsr),e(H,r5),e(r5,Ebe),e(Ebe,Fsr),e(r5,Tsr),e(r5,fU),e(fU,Msr),e(r5,Esr),e(H,Csr),e(H,t5),e(t5,Cbe),e(Cbe,wsr),e(t5,Asr),e(t5,mU),e(mU,Lsr),e(t5,ysr),e(no,xsr),e(no,a5),e(a5,$sr),e(a5,wbe),e(wbe,ksr),e(a5,Ssr),e(a5,Abe),e(Abe,Rsr),e(no,Psr),M(n5,no,null),b(f,wUe,u),b(f,xd,u),e(xd,s5),e(s5,Lbe),M(S9,Lbe,null),e(xd,Bsr),e(xd,ybe),e(ybe,Isr),b(f,AUe,u),b(f,Oo,u),M(R9,Oo,null),e(Oo,Nsr),e(Oo,$d),e($d,qsr),e($d,gU),e(gU,jsr),e($d,Dsr),e($d,hU),e(hU,Gsr),e($d,Osr),e(Oo,Vsr),e(Oo,P9),e(P9,Xsr),e(P9,xbe),e(xbe,zsr),e(P9,Wsr),e(Oo,Qsr),e(Oo,Tt),M(B9,Tt,null),e(Tt,Usr),e(Tt,$be),e($be,Hsr),e(Tt,Jsr),e(Tt,kd),e(kd,Ysr),e(kd,kbe),e(kbe,Ksr),e(kd,Zsr),e(kd,pU),e(pU,elr),e(kd,olr),e(Tt,rlr),M(l5,Tt,null),e(Oo,tlr),e(Oo,so),M(I9,so,null),e(so,alr),e(so,Sbe),e(Sbe,nlr),e(so,slr),e(so,Ka),e(Ka,llr),e(Ka,Rbe),e(Rbe,ilr),e(Ka,dlr),e(Ka,Pbe),e(Pbe,clr),e(Ka,flr),e(Ka,Bbe),e(Bbe,mlr),e(Ka,glr),e(so,hlr),e(so,V),e(V,i5),e(i5,Ibe),e(Ibe,plr),e(i5,_lr),e(i5,_U),e(_U,ulr),e(i5,blr),e(V,vlr),e(V,d5),e(d5,Nbe),e(Nbe,Flr),e(d5,Tlr),e(d5,uU),e(uU,Mlr),e(d5,Elr),e(V,Clr),e(V,c5),e(c5,qbe),e(qbe,wlr),e(c5,Alr),e(c5,bU),e(bU,Llr),e(c5,ylr),e(V,xlr),e(V,f5),e(f5,jbe),e(jbe,$lr),e(f5,klr),e(f5,vU),e(vU,Slr),e(f5,Rlr),e(V,Plr),e(V,m5),e(m5,Dbe),e(Dbe,Blr),e(m5,Ilr),e(m5,FU),e(FU,Nlr),e(m5,qlr),e(V,jlr),e(V,g5),e(g5,Gbe),e(Gbe,Dlr),e(g5,Glr),e(g5,TU),e(TU,Olr),e(g5,Vlr),e(V,Xlr),e(V,h5),e(h5,Obe),e(Obe,zlr),e(h5,Wlr),e(h5,MU),e(MU,Qlr),e(h5,Ulr),e(V,Hlr),e(V,p5),e(p5,Vbe),e(Vbe,Jlr),e(p5,Ylr),e(p5,EU),e(EU,Klr),e(p5,Zlr),e(V,eir),e(V,_5),e(_5,Xbe),e(Xbe,oir),e(_5,rir),e(_5,CU),e(CU,tir),e(_5,air),e(V,nir),e(V,u5),e(u5,zbe),e(zbe,sir),e(u5,lir),e(u5,wU),e(wU,iir),e(u5,dir),e(V,cir),e(V,b5),e(b5,Wbe),e(Wbe,fir),e(b5,mir),e(b5,AU),e(AU,gir),e(b5,hir),e(V,pir),e(V,v5),e(v5,Qbe),e(Qbe,_ir),e(v5,uir),e(v5,LU),e(LU,bir),e(v5,vir),e(V,Fir),e(V,F5),e(F5,Ube),e(Ube,Tir),e(F5,Mir),e(F5,yU),e(yU,Eir),e(F5,Cir),e(V,wir),e(V,T5),e(T5,Hbe),e(Hbe,Air),e(T5,Lir),e(T5,xU),e(xU,yir),e(T5,xir),e(V,$ir),e(V,M5),e(M5,Jbe),e(Jbe,kir),e(M5,Sir),e(M5,$U),e($U,Rir),e(M5,Pir),e(V,Bir),e(V,E5),e(E5,Ybe),e(Ybe,Iir),e(E5,Nir),e(E5,kU),e(kU,qir),e(E5,jir),e(V,Dir),e(V,C5),e(C5,Kbe),e(Kbe,Gir),e(C5,Oir),e(C5,SU),e(SU,Vir),e(C5,Xir),e(V,zir),e(V,w5),e(w5,Zbe),e(Zbe,Wir),e(w5,Qir),e(w5,RU),e(RU,Uir),e(w5,Hir),e(V,Jir),e(V,A5),e(A5,eve),e(eve,Yir),e(A5,Kir),e(A5,PU),e(PU,Zir),e(A5,edr),e(V,odr),e(V,L5),e(L5,ove),e(ove,rdr),e(L5,tdr),e(L5,BU),e(BU,adr),e(L5,ndr),e(V,sdr),e(V,y5),e(y5,rve),e(rve,ldr),e(y5,idr),e(y5,IU),e(IU,ddr),e(y5,cdr),e(V,fdr),e(V,x5),e(x5,tve),e(tve,mdr),e(x5,gdr),e(x5,NU),e(NU,hdr),e(x5,pdr),e(V,_dr),e(V,$5),e($5,ave),e(ave,udr),e($5,bdr),e($5,qU),e(qU,vdr),e($5,Fdr),e(V,Tdr),e(V,k5),e(k5,nve),e(nve,Mdr),e(k5,Edr),e(k5,jU),e(jU,Cdr),e(k5,wdr),e(V,Adr),e(V,S5),e(S5,sve),e(sve,Ldr),e(S5,ydr),e(S5,DU),e(DU,xdr),e(S5,$dr),e(V,kdr),e(V,R5),e(R5,lve),e(lve,Sdr),e(R5,Rdr),e(R5,GU),e(GU,Pdr),e(R5,Bdr),e(V,Idr),e(V,P5),e(P5,ive),e(ive,Ndr),e(P5,qdr),e(P5,OU),e(OU,jdr),e(P5,Ddr),e(V,Gdr),e(V,B5),e(B5,dve),e(dve,Odr),e(B5,Vdr),e(B5,VU),e(VU,Xdr),e(B5,zdr),e(V,Wdr),e(V,I5),e(I5,cve),e(cve,Qdr),e(I5,Udr),e(I5,XU),e(XU,Hdr),e(I5,Jdr),e(V,Ydr),e(V,N5),e(N5,fve),e(fve,Kdr),e(N5,Zdr),e(N5,zU),e(zU,ecr),e(N5,ocr),e(V,rcr),e(V,q5),e(q5,mve),e(mve,tcr),e(q5,acr),e(q5,WU),e(WU,ncr),e(q5,scr),e(V,lcr),e(V,j5),e(j5,gve),e(gve,icr),e(j5,dcr),e(j5,QU),e(QU,ccr),e(j5,fcr),e(V,mcr),e(V,D5),e(D5,hve),e(hve,gcr),e(D5,hcr),e(D5,UU),e(UU,pcr),e(D5,_cr),e(V,ucr),e(V,G5),e(G5,pve),e(pve,bcr),e(G5,vcr),e(G5,HU),e(HU,Fcr),e(G5,Tcr),e(V,Mcr),e(V,O5),e(O5,_ve),e(_ve,Ecr),e(O5,Ccr),e(O5,JU),e(JU,wcr),e(O5,Acr),e(V,Lcr),e(V,V5),e(V5,uve),e(uve,ycr),e(V5,xcr),e(V5,YU),e(YU,$cr),e(V5,kcr),e(V,Scr),e(V,X5),e(X5,bve),e(bve,Rcr),e(X5,Pcr),e(X5,KU),e(KU,Bcr),e(X5,Icr),e(V,Ncr),e(V,z5),e(z5,vve),e(vve,qcr),e(z5,jcr),e(z5,ZU),e(ZU,Dcr),e(z5,Gcr),e(V,Ocr),e(V,W5),e(W5,Fve),e(Fve,Vcr),e(W5,Xcr),e(W5,eH),e(eH,zcr),e(W5,Wcr),e(V,Qcr),e(V,Q5),e(Q5,Tve),e(Tve,Ucr),e(Q5,Hcr),e(Q5,oH),e(oH,Jcr),e(Q5,Ycr),e(V,Kcr),e(V,U5),e(U5,Mve),e(Mve,Zcr),e(U5,efr),e(U5,rH),e(rH,ofr),e(U5,rfr),e(V,tfr),e(V,H5),e(H5,Eve),e(Eve,afr),e(H5,nfr),e(H5,tH),e(tH,sfr),e(H5,lfr),e(V,ifr),e(V,J5),e(J5,Cve),e(Cve,dfr),e(J5,cfr),e(J5,aH),e(aH,ffr),e(J5,mfr),e(so,gfr),e(so,Y5),e(Y5,hfr),e(Y5,wve),e(wve,pfr),e(Y5,_fr),e(Y5,Ave),e(Ave,ufr),e(so,bfr),M(K5,so,null),b(f,LUe,u),b(f,Sd,u),e(Sd,Z5),e(Z5,Lve),M(N9,Lve,null),e(Sd,vfr),e(Sd,yve),e(yve,Ffr),b(f,yUe,u),b(f,Vo,u),M(q9,Vo,null),e(Vo,Tfr),e(Vo,Rd),e(Rd,Mfr),e(Rd,nH),e(nH,Efr),e(Rd,Cfr),e(Rd,sH),e(sH,wfr),e(Rd,Afr),e(Vo,Lfr),e(Vo,j9),e(j9,yfr),e(j9,xve),e(xve,xfr),e(j9,$fr),e(Vo,kfr),e(Vo,Mt),M(D9,Mt,null),e(Mt,Sfr),e(Mt,$ve),e($ve,Rfr),e(Mt,Pfr),e(Mt,Pd),e(Pd,Bfr),e(Pd,kve),e(kve,Ifr),e(Pd,Nfr),e(Pd,lH),e(lH,qfr),e(Pd,jfr),e(Mt,Dfr),M(e6,Mt,null),e(Vo,Gfr),e(Vo,lo),M(G9,lo,null),e(lo,Ofr),e(lo,Sve),e(Sve,Vfr),e(lo,Xfr),e(lo,Za),e(Za,zfr),e(Za,Rve),e(Rve,Wfr),e(Za,Qfr),e(Za,Pve),e(Pve,Ufr),e(Za,Hfr),e(Za,Bve),e(Bve,Jfr),e(Za,Yfr),e(lo,Kfr),e(lo,Ive),e(Ive,o6),e(o6,Nve),e(Nve,Zfr),e(o6,emr),e(o6,iH),e(iH,omr),e(o6,rmr),e(lo,tmr),e(lo,r6),e(r6,amr),e(r6,qve),e(qve,nmr),e(r6,smr),e(r6,jve),e(jve,lmr),e(lo,imr),M(t6,lo,null),b(f,xUe,u),b(f,Bd,u),e(Bd,a6),e(a6,Dve),M(O9,Dve,null),e(Bd,dmr),e(Bd,Gve),e(Gve,cmr),b(f,$Ue,u),b(f,Xo,u),M(V9,Xo,null),e(Xo,fmr),e(Xo,Id),e(Id,mmr),e(Id,dH),e(dH,gmr),e(Id,hmr),e(Id,cH),e(cH,pmr),e(Id,_mr),e(Xo,umr),e(Xo,X9),e(X9,bmr),e(X9,Ove),e(Ove,vmr),e(X9,Fmr),e(Xo,Tmr),e(Xo,Et),M(z9,Et,null),e(Et,Mmr),e(Et,Vve),e(Vve,Emr),e(Et,Cmr),e(Et,Nd),e(Nd,wmr),e(Nd,Xve),e(Xve,Amr),e(Nd,Lmr),e(Nd,fH),e(fH,ymr),e(Nd,xmr),e(Et,$mr),M(n6,Et,null),e(Xo,kmr),e(Xo,io),M(W9,io,null),e(io,Smr),e(io,zve),e(zve,Rmr),e(io,Pmr),e(io,en),e(en,Bmr),e(en,Wve),e(Wve,Imr),e(en,Nmr),e(en,Qve),e(Qve,qmr),e(en,jmr),e(en,Uve),e(Uve,Dmr),e(en,Gmr),e(io,Omr),e(io,be),e(be,s6),e(s6,Hve),e(Hve,Vmr),e(s6,Xmr),e(s6,mH),e(mH,zmr),e(s6,Wmr),e(be,Qmr),e(be,l6),e(l6,Jve),e(Jve,Umr),e(l6,Hmr),e(l6,gH),e(gH,Jmr),e(l6,Ymr),e(be,Kmr),e(be,i6),e(i6,Yve),e(Yve,Zmr),e(i6,egr),e(i6,hH),e(hH,ogr),e(i6,rgr),e(be,tgr),e(be,d6),e(d6,Kve),e(Kve,agr),e(d6,ngr),e(d6,pH),e(pH,sgr),e(d6,lgr),e(be,igr),e(be,sl),e(sl,Zve),e(Zve,dgr),e(sl,cgr),e(sl,_H),e(_H,fgr),e(sl,mgr),e(sl,uH),e(uH,ggr),e(sl,hgr),e(be,pgr),e(be,c6),e(c6,e3e),e(e3e,_gr),e(c6,ugr),e(c6,bH),e(bH,bgr),e(c6,vgr),e(be,Fgr),e(be,ll),e(ll,o3e),e(o3e,Tgr),e(ll,Mgr),e(ll,vH),e(vH,Egr),e(ll,Cgr),e(ll,FH),e(FH,wgr),e(ll,Agr),e(be,Lgr),e(be,f6),e(f6,r3e),e(r3e,ygr),e(f6,xgr),e(f6,TH),e(TH,$gr),e(f6,kgr),e(be,Sgr),e(be,Ct),e(Ct,t3e),e(t3e,Rgr),e(Ct,Pgr),e(Ct,MH),e(MH,Bgr),e(Ct,Igr),e(Ct,EH),e(EH,Ngr),e(Ct,qgr),e(Ct,CH),e(CH,jgr),e(Ct,Dgr),e(be,Ggr),e(be,m6),e(m6,a3e),e(a3e,Ogr),e(m6,Vgr),e(m6,wH),e(wH,Xgr),e(m6,zgr),e(be,Wgr),e(be,g6),e(g6,n3e),e(n3e,Qgr),e(g6,Ugr),e(g6,AH),e(AH,Hgr),e(g6,Jgr),e(be,Ygr),e(be,h6),e(h6,s3e),e(s3e,Kgr),e(h6,Zgr),e(h6,LH),e(LH,ehr),e(h6,ohr),e(be,rhr),e(be,p6),e(p6,l3e),e(l3e,thr),e(p6,ahr),e(p6,yH),e(yH,nhr),e(p6,shr),e(be,lhr),e(be,_6),e(_6,i3e),e(i3e,ihr),e(_6,dhr),e(_6,xH),e(xH,chr),e(_6,fhr),e(be,mhr),e(be,u6),e(u6,d3e),e(d3e,ghr),e(u6,hhr),e(u6,$H),e($H,phr),e(u6,_hr),e(be,uhr),e(be,b6),e(b6,c3e),e(c3e,bhr),e(b6,vhr),e(b6,kH),e(kH,Fhr),e(b6,Thr),e(be,Mhr),e(be,v6),e(v6,f3e),e(f3e,Ehr),e(v6,Chr),e(v6,SH),e(SH,whr),e(v6,Ahr),e(io,Lhr),e(io,F6),e(F6,yhr),e(F6,m3e),e(m3e,xhr),e(F6,$hr),e(F6,g3e),e(g3e,khr),e(io,Shr),M(T6,io,null),b(f,kUe,u),b(f,qd,u),e(qd,M6),e(M6,h3e),M(Q9,h3e,null),e(qd,Rhr),e(qd,p3e),e(p3e,Phr),b(f,SUe,u),b(f,zo,u),M(U9,zo,null),e(zo,Bhr),e(zo,jd),e(jd,Ihr),e(jd,RH),e(RH,Nhr),e(jd,qhr),e(jd,PH),e(PH,jhr),e(jd,Dhr),e(zo,Ghr),e(zo,H9),e(H9,Ohr),e(H9,_3e),e(_3e,Vhr),e(H9,Xhr),e(zo,zhr),e(zo,wt),M(J9,wt,null),e(wt,Whr),e(wt,u3e),e(u3e,Qhr),e(wt,Uhr),e(wt,Dd),e(Dd,Hhr),e(Dd,b3e),e(b3e,Jhr),e(Dd,Yhr),e(Dd,BH),e(BH,Khr),e(Dd,Zhr),e(wt,epr),M(E6,wt,null),e(zo,opr),e(zo,co),M(Y9,co,null),e(co,rpr),e(co,v3e),e(v3e,tpr),e(co,apr),e(co,on),e(on,npr),e(on,F3e),e(F3e,spr),e(on,lpr),e(on,T3e),e(T3e,ipr),e(on,dpr),e(on,M3e),e(M3e,cpr),e(on,fpr),e(co,mpr),e(co,E3e),e(E3e,C6),e(C6,C3e),e(C3e,gpr),e(C6,hpr),e(C6,IH),e(IH,ppr),e(C6,_pr),e(co,upr),e(co,w6),e(w6,bpr),e(w6,w3e),e(w3e,vpr),e(w6,Fpr),e(w6,A3e),e(A3e,Tpr),e(co,Mpr),M(A6,co,null),b(f,RUe,u),b(f,Gd,u),e(Gd,L6),e(L6,L3e),M(K9,L3e,null),e(Gd,Epr),e(Gd,y3e),e(y3e,Cpr),b(f,PUe,u),b(f,Wo,u),M(Z9,Wo,null),e(Wo,wpr),e(Wo,Od),e(Od,Apr),e(Od,NH),e(NH,Lpr),e(Od,ypr),e(Od,qH),e(qH,xpr),e(Od,$pr),e(Wo,kpr),e(Wo,ex),e(ex,Spr),e(ex,x3e),e(x3e,Rpr),e(ex,Ppr),e(Wo,Bpr),e(Wo,At),M(ox,At,null),e(At,Ipr),e(At,$3e),e($3e,Npr),e(At,qpr),e(At,Vd),e(Vd,jpr),e(Vd,k3e),e(k3e,Dpr),e(Vd,Gpr),e(Vd,jH),e(jH,Opr),e(Vd,Vpr),e(At,Xpr),M(y6,At,null),e(Wo,zpr),e(Wo,fo),M(rx,fo,null),e(fo,Wpr),e(fo,S3e),e(S3e,Qpr),e(fo,Upr),e(fo,rn),e(rn,Hpr),e(rn,R3e),e(R3e,Jpr),e(rn,Ypr),e(rn,P3e),e(P3e,Kpr),e(rn,Zpr),e(rn,B3e),e(B3e,e_r),e(rn,o_r),e(fo,r_r),e(fo,I3e),e(I3e,x6),e(x6,N3e),e(N3e,t_r),e(x6,a_r),e(x6,DH),e(DH,n_r),e(x6,s_r),e(fo,l_r),e(fo,$6),e($6,i_r),e($6,q3e),e(q3e,d_r),e($6,c_r),e($6,j3e),e(j3e,f_r),e(fo,m_r),M(k6,fo,null),b(f,BUe,u),b(f,Xd,u),e(Xd,S6),e(S6,D3e),M(tx,D3e,null),e(Xd,g_r),e(Xd,G3e),e(G3e,h_r),b(f,IUe,u),b(f,Qo,u),M(ax,Qo,null),e(Qo,p_r),e(Qo,zd),e(zd,__r),e(zd,GH),e(GH,u_r),e(zd,b_r),e(zd,OH),e(OH,v_r),e(zd,F_r),e(Qo,T_r),e(Qo,nx),e(nx,M_r),e(nx,O3e),e(O3e,E_r),e(nx,C_r),e(Qo,w_r),e(Qo,Lt),M(sx,Lt,null),e(Lt,A_r),e(Lt,V3e),e(V3e,L_r),e(Lt,y_r),e(Lt,Wd),e(Wd,x_r),e(Wd,X3e),e(X3e,$_r),e(Wd,k_r),e(Wd,VH),e(VH,S_r),e(Wd,R_r),e(Lt,P_r),M(R6,Lt,null),e(Qo,B_r),e(Qo,mo),M(lx,mo,null),e(mo,I_r),e(mo,z3e),e(z3e,N_r),e(mo,q_r),e(mo,tn),e(tn,j_r),e(tn,W3e),e(W3e,D_r),e(tn,G_r),e(tn,Q3e),e(Q3e,O_r),e(tn,V_r),e(tn,U3e),e(U3e,X_r),e(tn,z_r),e(mo,W_r),e(mo,H3e),e(H3e,P6),e(P6,J3e),e(J3e,Q_r),e(P6,U_r),e(P6,XH),e(XH,H_r),e(P6,J_r),e(mo,Y_r),e(mo,B6),e(B6,K_r),e(B6,Y3e),e(Y3e,Z_r),e(B6,eur),e(B6,K3e),e(K3e,our),e(mo,rur),M(I6,mo,null),b(f,NUe,u),b(f,Qd,u),e(Qd,N6),e(N6,Z3e),M(ix,Z3e,null),e(Qd,tur),e(Qd,e5e),e(e5e,aur),b(f,qUe,u),b(f,Uo,u),M(dx,Uo,null),e(Uo,nur),e(Uo,Ud),e(Ud,sur),e(Ud,zH),e(zH,lur),e(Ud,iur),e(Ud,WH),e(WH,dur),e(Ud,cur),e(Uo,fur),e(Uo,cx),e(cx,mur),e(cx,o5e),e(o5e,gur),e(cx,hur),e(Uo,pur),e(Uo,yt),M(fx,yt,null),e(yt,_ur),e(yt,r5e),e(r5e,uur),e(yt,bur),e(yt,Hd),e(Hd,vur),e(Hd,t5e),e(t5e,Fur),e(Hd,Tur),e(Hd,QH),e(QH,Mur),e(Hd,Eur),e(yt,Cur),M(q6,yt,null),e(Uo,wur),e(Uo,go),M(mx,go,null),e(go,Aur),e(go,a5e),e(a5e,Lur),e(go,yur),e(go,an),e(an,xur),e(an,n5e),e(n5e,$ur),e(an,kur),e(an,s5e),e(s5e,Sur),e(an,Rur),e(an,l5e),e(l5e,Pur),e(an,Bur),e(go,Iur),e(go,Pe),e(Pe,j6),e(j6,i5e),e(i5e,Nur),e(j6,qur),e(j6,UH),e(UH,jur),e(j6,Dur),e(Pe,Gur),e(Pe,D6),e(D6,d5e),e(d5e,Our),e(D6,Vur),e(D6,HH),e(HH,Xur),e(D6,zur),e(Pe,Wur),e(Pe,G6),e(G6,c5e),e(c5e,Qur),e(G6,Uur),e(G6,JH),e(JH,Hur),e(G6,Jur),e(Pe,Yur),e(Pe,O6),e(O6,f5e),e(f5e,Kur),e(O6,Zur),e(O6,YH),e(YH,e1r),e(O6,o1r),e(Pe,r1r),e(Pe,V6),e(V6,m5e),e(m5e,t1r),e(V6,a1r),e(V6,KH),e(KH,n1r),e(V6,s1r),e(Pe,l1r),e(Pe,X6),e(X6,g5e),e(g5e,i1r),e(X6,d1r),e(X6,ZH),e(ZH,c1r),e(X6,f1r),e(Pe,m1r),e(Pe,z6),e(z6,h5e),e(h5e,g1r),e(z6,h1r),e(z6,eJ),e(eJ,p1r),e(z6,_1r),e(Pe,u1r),e(Pe,W6),e(W6,p5e),e(p5e,b1r),e(W6,v1r),e(W6,oJ),e(oJ,F1r),e(W6,T1r),e(Pe,M1r),e(Pe,Q6),e(Q6,_5e),e(_5e,E1r),e(Q6,C1r),e(Q6,rJ),e(rJ,w1r),e(Q6,A1r),e(go,L1r),e(go,U6),e(U6,y1r),e(U6,u5e),e(u5e,x1r),e(U6,$1r),e(U6,b5e),e(b5e,k1r),e(go,S1r),M(H6,go,null),b(f,jUe,u),b(f,Jd,u),e(Jd,J6),e(J6,v5e),M(gx,v5e,null),e(Jd,R1r),e(Jd,F5e),e(F5e,P1r),b(f,DUe,u),b(f,Ho,u),M(hx,Ho,null),e(Ho,B1r),e(Ho,Yd),e(Yd,I1r),e(Yd,tJ),e(tJ,N1r),e(Yd,q1r),e(Yd,aJ),e(aJ,j1r),e(Yd,D1r),e(Ho,G1r),e(Ho,px),e(px,O1r),e(px,T5e),e(T5e,V1r),e(px,X1r),e(Ho,z1r),e(Ho,xt),M(_x,xt,null),e(xt,W1r),e(xt,M5e),e(M5e,Q1r),e(xt,U1r),e(xt,Kd),e(Kd,H1r),e(Kd,E5e),e(E5e,J1r),e(Kd,Y1r),e(Kd,nJ),e(nJ,K1r),e(Kd,Z1r),e(xt,e4r),M(Y6,xt,null),e(Ho,o4r),e(Ho,ho),M(ux,ho,null),e(ho,r4r),e(ho,C5e),e(C5e,t4r),e(ho,a4r),e(ho,nn),e(nn,n4r),e(nn,w5e),e(w5e,s4r),e(nn,l4r),e(nn,A5e),e(A5e,i4r),e(nn,d4r),e(nn,L5e),e(L5e,c4r),e(nn,f4r),e(ho,m4r),e(ho,st),e(st,K6),e(K6,y5e),e(y5e,g4r),e(K6,h4r),e(K6,sJ),e(sJ,p4r),e(K6,_4r),e(st,u4r),e(st,Z6),e(Z6,x5e),e(x5e,b4r),e(Z6,v4r),e(Z6,lJ),e(lJ,F4r),e(Z6,T4r),e(st,M4r),e(st,eF),e(eF,$5e),e($5e,E4r),e(eF,C4r),e(eF,iJ),e(iJ,w4r),e(eF,A4r),e(st,L4r),e(st,oF),e(oF,k5e),e(k5e,y4r),e(oF,x4r),e(oF,dJ),e(dJ,$4r),e(oF,k4r),e(st,S4r),e(st,rF),e(rF,S5e),e(S5e,R4r),e(rF,P4r),e(rF,cJ),e(cJ,B4r),e(rF,I4r),e(ho,N4r),e(ho,tF),e(tF,q4r),e(tF,R5e),e(R5e,j4r),e(tF,D4r),e(tF,P5e),e(P5e,G4r),e(ho,O4r),M(aF,ho,null),b(f,GUe,u),b(f,Zd,u),e(Zd,nF),e(nF,B5e),M(bx,B5e,null),e(Zd,V4r),e(Zd,I5e),e(I5e,X4r),b(f,OUe,u),b(f,Jo,u),M(vx,Jo,null),e(Jo,z4r),e(Jo,ec),e(ec,W4r),e(ec,fJ),e(fJ,Q4r),e(ec,U4r),e(ec,mJ),e(mJ,H4r),e(ec,J4r),e(Jo,Y4r),e(Jo,Fx),e(Fx,K4r),e(Fx,N5e),e(N5e,Z4r),e(Fx,e2r),e(Jo,o2r),e(Jo,$t),M(Tx,$t,null),e($t,r2r),e($t,q5e),e(q5e,t2r),e($t,a2r),e($t,oc),e(oc,n2r),e(oc,j5e),e(j5e,s2r),e(oc,l2r),e(oc,gJ),e(gJ,i2r),e(oc,d2r),e($t,c2r),M(sF,$t,null),e(Jo,f2r),e(Jo,po),M(Mx,po,null),e(po,m2r),e(po,D5e),e(D5e,g2r),e(po,h2r),e(po,sn),e(sn,p2r),e(sn,G5e),e(G5e,_2r),e(sn,u2r),e(sn,O5e),e(O5e,b2r),e(sn,v2r),e(sn,V5e),e(V5e,F2r),e(sn,T2r),e(po,M2r),e(po,Le),e(Le,lF),e(lF,X5e),e(X5e,E2r),e(lF,C2r),e(lF,hJ),e(hJ,w2r),e(lF,A2r),e(Le,L2r),e(Le,iF),e(iF,z5e),e(z5e,y2r),e(iF,x2r),e(iF,pJ),e(pJ,$2r),e(iF,k2r),e(Le,S2r),e(Le,dF),e(dF,W5e),e(W5e,R2r),e(dF,P2r),e(dF,_J),e(_J,B2r),e(dF,I2r),e(Le,N2r),e(Le,cF),e(cF,Q5e),e(Q5e,q2r),e(cF,j2r),e(cF,uJ),e(uJ,D2r),e(cF,G2r),e(Le,O2r),e(Le,fF),e(fF,U5e),e(U5e,V2r),e(fF,X2r),e(fF,bJ),e(bJ,z2r),e(fF,W2r),e(Le,Q2r),e(Le,mF),e(mF,H5e),e(H5e,U2r),e(mF,H2r),e(mF,vJ),e(vJ,J2r),e(mF,Y2r),e(Le,K2r),e(Le,gF),e(gF,J5e),e(J5e,Z2r),e(gF,ebr),e(gF,FJ),e(FJ,obr),e(gF,rbr),e(Le,tbr),e(Le,hF),e(hF,Y5e),e(Y5e,abr),e(hF,nbr),e(hF,TJ),e(TJ,sbr),e(hF,lbr),e(Le,ibr),e(Le,pF),e(pF,K5e),e(K5e,dbr),e(pF,cbr),e(pF,MJ),e(MJ,fbr),e(pF,mbr),e(Le,gbr),e(Le,_F),e(_F,Z5e),e(Z5e,hbr),e(_F,pbr),e(_F,EJ),e(EJ,_br),e(_F,ubr),e(po,bbr),e(po,uF),e(uF,vbr),e(uF,e6e),e(e6e,Fbr),e(uF,Tbr),e(uF,o6e),e(o6e,Mbr),e(po,Ebr),M(bF,po,null),b(f,VUe,u),b(f,rc,u),e(rc,vF),e(vF,r6e),M(Ex,r6e,null),e(rc,Cbr),e(rc,t6e),e(t6e,wbr),b(f,XUe,u),b(f,Yo,u),M(Cx,Yo,null),e(Yo,Abr),e(Yo,tc),e(tc,Lbr),e(tc,CJ),e(CJ,ybr),e(tc,xbr),e(tc,wJ),e(wJ,$br),e(tc,kbr),e(Yo,Sbr),e(Yo,wx),e(wx,Rbr),e(wx,a6e),e(a6e,Pbr),e(wx,Bbr),e(Yo,Ibr),e(Yo,kt),M(Ax,kt,null),e(kt,Nbr),e(kt,n6e),e(n6e,qbr),e(kt,jbr),e(kt,ac),e(ac,Dbr),e(ac,s6e),e(s6e,Gbr),e(ac,Obr),e(ac,AJ),e(AJ,Vbr),e(ac,Xbr),e(kt,zbr),M(FF,kt,null),e(Yo,Wbr),e(Yo,_o),M(Lx,_o,null),e(_o,Qbr),e(_o,l6e),e(l6e,Ubr),e(_o,Hbr),e(_o,ln),e(ln,Jbr),e(ln,i6e),e(i6e,Ybr),e(ln,Kbr),e(ln,d6e),e(d6e,Zbr),e(ln,evr),e(ln,c6e),e(c6e,ovr),e(ln,rvr),e(_o,tvr),e(_o,yx),e(yx,TF),e(TF,f6e),e(f6e,avr),e(TF,nvr),e(TF,LJ),e(LJ,svr),e(TF,lvr),e(yx,ivr),e(yx,MF),e(MF,m6e),e(m6e,dvr),e(MF,cvr),e(MF,yJ),e(yJ,fvr),e(MF,mvr),e(_o,gvr),e(_o,EF),e(EF,hvr),e(EF,g6e),e(g6e,pvr),e(EF,_vr),e(EF,h6e),e(h6e,uvr),e(_o,bvr),M(CF,_o,null),b(f,zUe,u),b(f,nc,u),e(nc,wF),e(wF,p6e),M(xx,p6e,null),e(nc,vvr),e(nc,_6e),e(_6e,Fvr),b(f,WUe,u),b(f,Ko,u),M($x,Ko,null),e(Ko,Tvr),e(Ko,sc),e(sc,Mvr),e(sc,xJ),e(xJ,Evr),e(sc,Cvr),e(sc,$J),e($J,wvr),e(sc,Avr),e(Ko,Lvr),e(Ko,kx),e(kx,yvr),e(kx,u6e),e(u6e,xvr),e(kx,$vr),e(Ko,kvr),e(Ko,St),M(Sx,St,null),e(St,Svr),e(St,b6e),e(b6e,Rvr),e(St,Pvr),e(St,lc),e(lc,Bvr),e(lc,v6e),e(v6e,Ivr),e(lc,Nvr),e(lc,kJ),e(kJ,qvr),e(lc,jvr),e(St,Dvr),M(AF,St,null),e(Ko,Gvr),e(Ko,uo),M(Rx,uo,null),e(uo,Ovr),e(uo,F6e),e(F6e,Vvr),e(uo,Xvr),e(uo,dn),e(dn,zvr),e(dn,T6e),e(T6e,Wvr),e(dn,Qvr),e(dn,M6e),e(M6e,Uvr),e(dn,Hvr),e(dn,E6e),e(E6e,Jvr),e(dn,Yvr),e(uo,Kvr),e(uo,lt),e(lt,LF),e(LF,C6e),e(C6e,Zvr),e(LF,e3r),e(LF,SJ),e(SJ,o3r),e(LF,r3r),e(lt,t3r),e(lt,yF),e(yF,w6e),e(w6e,a3r),e(yF,n3r),e(yF,RJ),e(RJ,s3r),e(yF,l3r),e(lt,i3r),e(lt,xF),e(xF,A6e),e(A6e,d3r),e(xF,c3r),e(xF,PJ),e(PJ,f3r),e(xF,m3r),e(lt,g3r),e(lt,$F),e($F,L6e),e(L6e,h3r),e($F,p3r),e($F,BJ),e(BJ,_3r),e($F,u3r),e(lt,b3r),e(lt,kF),e(kF,y6e),e(y6e,v3r),e(kF,F3r),e(kF,IJ),e(IJ,T3r),e(kF,M3r),e(uo,E3r),e(uo,SF),e(SF,C3r),e(SF,x6e),e(x6e,w3r),e(SF,A3r),e(SF,$6e),e($6e,L3r),e(uo,y3r),M(RF,uo,null),b(f,QUe,u),b(f,ic,u),e(ic,PF),e(PF,k6e),M(Px,k6e,null),e(ic,x3r),e(ic,S6e),e(S6e,$3r),b(f,UUe,u),b(f,Zo,u),M(Bx,Zo,null),e(Zo,k3r),e(Zo,dc),e(dc,S3r),e(dc,NJ),e(NJ,R3r),e(dc,P3r),e(dc,qJ),e(qJ,B3r),e(dc,I3r),e(Zo,N3r),e(Zo,Ix),e(Ix,q3r),e(Ix,R6e),e(R6e,j3r),e(Ix,D3r),e(Zo,G3r),e(Zo,Rt),M(Nx,Rt,null),e(Rt,O3r),e(Rt,P6e),e(P6e,V3r),e(Rt,X3r),e(Rt,cc),e(cc,z3r),e(cc,B6e),e(B6e,W3r),e(cc,Q3r),e(cc,jJ),e(jJ,U3r),e(cc,H3r),e(Rt,J3r),M(BF,Rt,null),e(Zo,Y3r),e(Zo,bo),M(qx,bo,null),e(bo,K3r),e(bo,I6e),e(I6e,Z3r),e(bo,e5r),e(bo,cn),e(cn,o5r),e(cn,N6e),e(N6e,r5r),e(cn,t5r),e(cn,q6e),e(q6e,a5r),e(cn,n5r),e(cn,j6e),e(j6e,s5r),e(cn,l5r),e(bo,i5r),e(bo,fn),e(fn,IF),e(IF,D6e),e(D6e,d5r),e(IF,c5r),e(IF,DJ),e(DJ,f5r),e(IF,m5r),e(fn,g5r),e(fn,NF),e(NF,G6e),e(G6e,h5r),e(NF,p5r),e(NF,GJ),e(GJ,_5r),e(NF,u5r),e(fn,b5r),e(fn,qF),e(qF,O6e),e(O6e,v5r),e(qF,F5r),e(qF,OJ),e(OJ,T5r),e(qF,M5r),e(fn,E5r),e(fn,jF),e(jF,V6e),e(V6e,C5r),e(jF,w5r),e(jF,VJ),e(VJ,A5r),e(jF,L5r),e(bo,y5r),e(bo,DF),e(DF,x5r),e(DF,X6e),e(X6e,$5r),e(DF,k5r),e(DF,z6e),e(z6e,S5r),e(bo,R5r),M(GF,bo,null),b(f,HUe,u),b(f,fc,u),e(fc,OF),e(OF,W6e),M(jx,W6e,null),e(fc,P5r),e(fc,Q6e),e(Q6e,B5r),b(f,JUe,u),b(f,er,u),M(Dx,er,null),e(er,I5r),e(er,mc),e(mc,N5r),e(mc,XJ),e(XJ,q5r),e(mc,j5r),e(mc,zJ),e(zJ,D5r),e(mc,G5r),e(er,O5r),e(er,Gx),e(Gx,V5r),e(Gx,U6e),e(U6e,X5r),e(Gx,z5r),e(er,W5r),e(er,Pt),M(Ox,Pt,null),e(Pt,Q5r),e(Pt,H6e),e(H6e,U5r),e(Pt,H5r),e(Pt,gc),e(gc,J5r),e(gc,J6e),e(J6e,Y5r),e(gc,K5r),e(gc,WJ),e(WJ,Z5r),e(gc,e6r),e(Pt,o6r),M(VF,Pt,null),e(er,r6r),e(er,vo),M(Vx,vo,null),e(vo,t6r),e(vo,Y6e),e(Y6e,a6r),e(vo,n6r),e(vo,mn),e(mn,s6r),e(mn,K6e),e(K6e,l6r),e(mn,i6r),e(mn,Z6e),e(Z6e,d6r),e(mn,c6r),e(mn,eFe),e(eFe,f6r),e(mn,m6r),e(vo,g6r),e(vo,Xx),e(Xx,XF),e(XF,oFe),e(oFe,h6r),e(XF,p6r),e(XF,QJ),e(QJ,_6r),e(XF,u6r),e(Xx,b6r),e(Xx,zF),e(zF,rFe),e(rFe,v6r),e(zF,F6r),e(zF,UJ),e(UJ,T6r),e(zF,M6r),e(vo,E6r),e(vo,WF),e(WF,C6r),e(WF,tFe),e(tFe,w6r),e(WF,A6r),e(WF,aFe),e(aFe,L6r),e(vo,y6r),M(QF,vo,null),b(f,YUe,u),b(f,hc,u),e(hc,UF),e(UF,nFe),M(zx,nFe,null),e(hc,x6r),e(hc,sFe),e(sFe,$6r),b(f,KUe,u),b(f,or,u),M(Wx,or,null),e(or,k6r),e(or,pc),e(pc,S6r),e(pc,HJ),e(HJ,R6r),e(pc,P6r),e(pc,JJ),e(JJ,B6r),e(pc,I6r),e(or,N6r),e(or,Qx),e(Qx,q6r),e(Qx,lFe),e(lFe,j6r),e(Qx,D6r),e(or,G6r),e(or,Bt),M(Ux,Bt,null),e(Bt,O6r),e(Bt,iFe),e(iFe,V6r),e(Bt,X6r),e(Bt,_c),e(_c,z6r),e(_c,dFe),e(dFe,W6r),e(_c,Q6r),e(_c,YJ),e(YJ,U6r),e(_c,H6r),e(Bt,J6r),M(HF,Bt,null),e(or,Y6r),e(or,Fo),M(Hx,Fo,null),e(Fo,K6r),e(Fo,cFe),e(cFe,Z6r),e(Fo,eFr),e(Fo,gn),e(gn,oFr),e(gn,fFe),e(fFe,rFr),e(gn,tFr),e(gn,mFe),e(mFe,aFr),e(gn,nFr),e(gn,gFe),e(gFe,sFr),e(gn,lFr),e(Fo,iFr),e(Fo,hFe),e(hFe,JF),e(JF,pFe),e(pFe,dFr),e(JF,cFr),e(JF,KJ),e(KJ,fFr),e(JF,mFr),e(Fo,gFr),e(Fo,YF),e(YF,hFr),e(YF,_Fe),e(_Fe,pFr),e(YF,_Fr),e(YF,uFe),e(uFe,uFr),e(Fo,bFr),M(KF,Fo,null),b(f,ZUe,u),b(f,uc,u),e(uc,ZF),e(ZF,bFe),M(Jx,bFe,null),e(uc,vFr),e(uc,vFe),e(vFe,FFr),b(f,eHe,u),b(f,rr,u),M(Yx,rr,null),e(rr,TFr),e(rr,bc),e(bc,MFr),e(bc,ZJ),e(ZJ,EFr),e(bc,CFr),e(bc,eY),e(eY,wFr),e(bc,AFr),e(rr,LFr),e(rr,Kx),e(Kx,yFr),e(Kx,FFe),e(FFe,xFr),e(Kx,$Fr),e(rr,kFr),e(rr,It),M(Zx,It,null),e(It,SFr),e(It,TFe),e(TFe,RFr),e(It,PFr),e(It,vc),e(vc,BFr),e(vc,MFe),e(MFe,IFr),e(vc,NFr),e(vc,oY),e(oY,qFr),e(vc,jFr),e(It,DFr),M(eT,It,null),e(rr,GFr),e(rr,To),M(e$,To,null),e(To,OFr),e(To,EFe),e(EFe,VFr),e(To,XFr),e(To,hn),e(hn,zFr),e(hn,CFe),e(CFe,WFr),e(hn,QFr),e(hn,wFe),e(wFe,UFr),e(hn,HFr),e(hn,AFe),e(AFe,JFr),e(hn,YFr),e(To,KFr),e(To,it),e(it,oT),e(oT,LFe),e(LFe,ZFr),e(oT,eTr),e(oT,rY),e(rY,oTr),e(oT,rTr),e(it,tTr),e(it,rT),e(rT,yFe),e(yFe,aTr),e(rT,nTr),e(rT,tY),e(tY,sTr),e(rT,lTr),e(it,iTr),e(it,tT),e(tT,xFe),e(xFe,dTr),e(tT,cTr),e(tT,aY),e(aY,fTr),e(tT,mTr),e(it,gTr),e(it,aT),e(aT,$Fe),e($Fe,hTr),e(aT,pTr),e(aT,nY),e(nY,_Tr),e(aT,uTr),e(it,bTr),e(it,nT),e(nT,kFe),e(kFe,vTr),e(nT,FTr),e(nT,sY),e(sY,TTr),e(nT,MTr),e(To,ETr),e(To,sT),e(sT,CTr),e(sT,SFe),e(SFe,wTr),e(sT,ATr),e(sT,RFe),e(RFe,LTr),e(To,yTr),M(lT,To,null),b(f,oHe,u),b(f,Fc,u),e(Fc,iT),e(iT,PFe),M(o$,PFe,null),e(Fc,xTr),e(Fc,BFe),e(BFe,$Tr),b(f,rHe,u),b(f,tr,u),M(r$,tr,null),e(tr,kTr),e(tr,Tc),e(Tc,STr),e(Tc,lY),e(lY,RTr),e(Tc,PTr),e(Tc,iY),e(iY,BTr),e(Tc,ITr),e(tr,NTr),e(tr,t$),e(t$,qTr),e(t$,IFe),e(IFe,jTr),e(t$,DTr),e(tr,GTr),e(tr,Nt),M(a$,Nt,null),e(Nt,OTr),e(Nt,NFe),e(NFe,VTr),e(Nt,XTr),e(Nt,Mc),e(Mc,zTr),e(Mc,qFe),e(qFe,WTr),e(Mc,QTr),e(Mc,dY),e(dY,UTr),e(Mc,HTr),e(Nt,JTr),M(dT,Nt,null),e(tr,YTr),e(tr,Mo),M(n$,Mo,null),e(Mo,KTr),e(Mo,jFe),e(jFe,ZTr),e(Mo,eMr),e(Mo,pn),e(pn,oMr),e(pn,DFe),e(DFe,rMr),e(pn,tMr),e(pn,GFe),e(GFe,aMr),e(pn,nMr),e(pn,OFe),e(OFe,sMr),e(pn,lMr),e(Mo,iMr),e(Mo,VFe),e(VFe,cT),e(cT,XFe),e(XFe,dMr),e(cT,cMr),e(cT,cY),e(cY,fMr),e(cT,mMr),e(Mo,gMr),e(Mo,fT),e(fT,hMr),e(fT,zFe),e(zFe,pMr),e(fT,_Mr),e(fT,WFe),e(WFe,uMr),e(Mo,bMr),M(mT,Mo,null),b(f,tHe,u),b(f,Ec,u),e(Ec,gT),e(gT,QFe),M(s$,QFe,null),e(Ec,vMr),e(Ec,UFe),e(UFe,FMr),b(f,aHe,u),b(f,ar,u),M(l$,ar,null),e(ar,TMr),e(ar,Cc),e(Cc,MMr),e(Cc,fY),e(fY,EMr),e(Cc,CMr),e(Cc,mY),e(mY,wMr),e(Cc,AMr),e(ar,LMr),e(ar,i$),e(i$,yMr),e(i$,HFe),e(HFe,xMr),e(i$,$Mr),e(ar,kMr),e(ar,qt),M(d$,qt,null),e(qt,SMr),e(qt,JFe),e(JFe,RMr),e(qt,PMr),e(qt,wc),e(wc,BMr),e(wc,YFe),e(YFe,IMr),e(wc,NMr),e(wc,gY),e(gY,qMr),e(wc,jMr),e(qt,DMr),M(hT,qt,null),e(ar,GMr),e(ar,Rr),M(c$,Rr,null),e(Rr,OMr),e(Rr,KFe),e(KFe,VMr),e(Rr,XMr),e(Rr,_n),e(_n,zMr),e(_n,ZFe),e(ZFe,WMr),e(_n,QMr),e(_n,eTe),e(eTe,UMr),e(_n,HMr),e(_n,oTe),e(oTe,JMr),e(_n,YMr),e(Rr,KMr),e(Rr,q),e(q,pT),e(pT,rTe),e(rTe,ZMr),e(pT,eEr),e(pT,hY),e(hY,oEr),e(pT,rEr),e(q,tEr),e(q,_T),e(_T,tTe),e(tTe,aEr),e(_T,nEr),e(_T,pY),e(pY,sEr),e(_T,lEr),e(q,iEr),e(q,uT),e(uT,aTe),e(aTe,dEr),e(uT,cEr),e(uT,_Y),e(_Y,fEr),e(uT,mEr),e(q,gEr),e(q,bT),e(bT,nTe),e(nTe,hEr),e(bT,pEr),e(bT,uY),e(uY,_Er),e(bT,uEr),e(q,bEr),e(q,vT),e(vT,sTe),e(sTe,vEr),e(vT,FEr),e(vT,bY),e(bY,TEr),e(vT,MEr),e(q,EEr),e(q,FT),e(FT,lTe),e(lTe,CEr),e(FT,wEr),e(FT,vY),e(vY,AEr),e(FT,LEr),e(q,yEr),e(q,TT),e(TT,iTe),e(iTe,xEr),e(TT,$Er),e(TT,FY),e(FY,kEr),e(TT,SEr),e(q,REr),e(q,MT),e(MT,dTe),e(dTe,PEr),e(MT,BEr),e(MT,TY),e(TY,IEr),e(MT,NEr),e(q,qEr),e(q,ET),e(ET,cTe),e(cTe,jEr),e(ET,DEr),e(ET,MY),e(MY,GEr),e(ET,OEr),e(q,VEr),e(q,CT),e(CT,fTe),e(fTe,XEr),e(CT,zEr),e(CT,EY),e(EY,WEr),e(CT,QEr),e(q,UEr),e(q,wT),e(wT,mTe),e(mTe,HEr),e(wT,JEr),e(wT,CY),e(CY,YEr),e(wT,KEr),e(q,ZEr),e(q,AT),e(AT,gTe),e(gTe,eCr),e(AT,oCr),e(AT,wY),e(wY,rCr),e(AT,tCr),e(q,aCr),e(q,LT),e(LT,hTe),e(hTe,nCr),e(LT,sCr),e(LT,AY),e(AY,lCr),e(LT,iCr),e(q,dCr),e(q,yT),e(yT,pTe),e(pTe,cCr),e(yT,fCr),e(yT,LY),e(LY,mCr),e(yT,gCr),e(q,hCr),e(q,xT),e(xT,_Te),e(_Te,pCr),e(xT,_Cr),e(xT,yY),e(yY,uCr),e(xT,bCr),e(q,vCr),e(q,$T),e($T,uTe),e(uTe,FCr),e($T,TCr),e($T,xY),e(xY,MCr),e($T,ECr),e(q,CCr),e(q,kT),e(kT,bTe),e(bTe,wCr),e(kT,ACr),e(kT,$Y),e($Y,LCr),e(kT,yCr),e(q,xCr),e(q,ST),e(ST,vTe),e(vTe,$Cr),e(ST,kCr),e(ST,kY),e(kY,SCr),e(ST,RCr),e(q,PCr),e(q,il),e(il,FTe),e(FTe,BCr),e(il,ICr),e(il,SY),e(SY,NCr),e(il,qCr),e(il,RY),e(RY,jCr),e(il,DCr),e(q,GCr),e(q,RT),e(RT,TTe),e(TTe,OCr),e(RT,VCr),e(RT,PY),e(PY,XCr),e(RT,zCr),e(q,WCr),e(q,PT),e(PT,MTe),e(MTe,QCr),e(PT,UCr),e(PT,BY),e(BY,HCr),e(PT,JCr),e(q,YCr),e(q,BT),e(BT,ETe),e(ETe,KCr),e(BT,ZCr),e(BT,IY),e(IY,e0r),e(BT,o0r),e(q,r0r),e(q,IT),e(IT,CTe),e(CTe,t0r),e(IT,a0r),e(IT,NY),e(NY,n0r),e(IT,s0r),e(q,l0r),e(q,NT),e(NT,wTe),e(wTe,i0r),e(NT,d0r),e(NT,qY),e(qY,c0r),e(NT,f0r),e(q,m0r),e(q,qT),e(qT,ATe),e(ATe,g0r),e(qT,h0r),e(qT,jY),e(jY,p0r),e(qT,_0r),e(q,u0r),e(q,jT),e(jT,LTe),e(LTe,b0r),e(jT,v0r),e(jT,DY),e(DY,F0r),e(jT,T0r),e(q,M0r),e(q,DT),e(DT,yTe),e(yTe,E0r),e(DT,C0r),e(DT,GY),e(GY,w0r),e(DT,A0r),e(q,L0r),e(q,GT),e(GT,xTe),e(xTe,y0r),e(GT,x0r),e(GT,OY),e(OY,$0r),e(GT,k0r),e(q,S0r),e(q,OT),e(OT,$Te),e($Te,R0r),e(OT,P0r),e(OT,VY),e(VY,B0r),e(OT,I0r),e(q,N0r),e(q,VT),e(VT,kTe),e(kTe,q0r),e(VT,j0r),e(VT,XY),e(XY,D0r),e(VT,G0r),e(q,O0r),e(q,XT),e(XT,STe),e(STe,V0r),e(XT,X0r),e(XT,zY),e(zY,z0r),e(XT,W0r),e(q,Q0r),e(q,zT),e(zT,RTe),e(RTe,U0r),e(zT,H0r),e(zT,WY),e(WY,J0r),e(zT,Y0r),e(q,K0r),e(q,WT),e(WT,PTe),e(PTe,Z0r),e(WT,ewr),e(WT,QY),e(QY,owr),e(WT,rwr),e(q,twr),e(q,QT),e(QT,BTe),e(BTe,awr),e(QT,nwr),e(QT,UY),e(UY,swr),e(QT,lwr),e(q,iwr),e(q,UT),e(UT,ITe),e(ITe,dwr),e(UT,cwr),e(UT,HY),e(HY,fwr),e(UT,mwr),e(q,gwr),e(q,HT),e(HT,NTe),e(NTe,hwr),e(HT,pwr),e(HT,JY),e(JY,_wr),e(HT,uwr),e(q,bwr),e(q,JT),e(JT,qTe),e(qTe,vwr),e(JT,Fwr),e(JT,YY),e(YY,Twr),e(JT,Mwr),e(q,Ewr),e(q,YT),e(YT,jTe),e(jTe,Cwr),e(YT,wwr),e(YT,KY),e(KY,Awr),e(YT,Lwr),e(q,ywr),e(q,KT),e(KT,DTe),e(DTe,xwr),e(KT,$wr),e(KT,ZY),e(ZY,kwr),e(KT,Swr),e(q,Rwr),e(q,ZT),e(ZT,GTe),e(GTe,Pwr),e(ZT,Bwr),e(ZT,eK),e(eK,Iwr),e(ZT,Nwr),e(q,qwr),e(q,eM),e(eM,OTe),e(OTe,jwr),e(eM,Dwr),e(eM,oK),e(oK,Gwr),e(eM,Owr),e(q,Vwr),e(q,oM),e(oM,VTe),e(VTe,Xwr),e(oM,zwr),e(oM,rK),e(rK,Wwr),e(oM,Qwr),e(q,Uwr),e(q,rM),e(rM,XTe),e(XTe,Hwr),e(rM,Jwr),e(rM,tK),e(tK,Ywr),e(rM,Kwr),e(q,Zwr),e(q,tM),e(tM,zTe),e(zTe,eAr),e(tM,oAr),e(tM,aK),e(aK,rAr),e(tM,tAr),e(q,aAr),e(q,aM),e(aM,WTe),e(WTe,nAr),e(aM,sAr),e(aM,nK),e(nK,lAr),e(aM,iAr),e(q,dAr),e(q,nM),e(nM,QTe),e(QTe,cAr),e(nM,fAr),e(nM,sK),e(sK,mAr),e(nM,gAr),e(q,hAr),e(q,sM),e(sM,UTe),e(UTe,pAr),e(sM,_Ar),e(sM,lK),e(lK,uAr),e(sM,bAr),e(q,vAr),e(q,lM),e(lM,HTe),e(HTe,FAr),e(lM,TAr),e(lM,iK),e(iK,MAr),e(lM,EAr),e(q,CAr),e(q,iM),e(iM,JTe),e(JTe,wAr),e(iM,AAr),e(iM,dK),e(dK,LAr),e(iM,yAr),e(q,xAr),e(q,dM),e(dM,YTe),e(YTe,$Ar),e(dM,kAr),e(dM,cK),e(cK,SAr),e(dM,RAr),e(q,PAr),e(q,cM),e(cM,KTe),e(KTe,BAr),e(cM,IAr),e(cM,fK),e(fK,NAr),e(cM,qAr),e(q,jAr),e(q,fM),e(fM,ZTe),e(ZTe,DAr),e(fM,GAr),e(fM,mK),e(mK,OAr),e(fM,VAr),e(Rr,XAr),M(mM,Rr,null),b(f,nHe,u),b(f,Ac,u),e(Ac,gM),e(gM,eMe),M(f$,eMe,null),e(Ac,zAr),e(Ac,oMe),e(oMe,WAr),b(f,sHe,u),b(f,nr,u),M(m$,nr,null),e(nr,QAr),e(nr,Lc),e(Lc,UAr),e(Lc,gK),e(gK,HAr),e(Lc,JAr),e(Lc,hK),e(hK,YAr),e(Lc,KAr),e(nr,ZAr),e(nr,g$),e(g$,e7r),e(g$,rMe),e(rMe,o7r),e(g$,r7r),e(nr,t7r),e(nr,jt),M(h$,jt,null),e(jt,a7r),e(jt,tMe),e(tMe,n7r),e(jt,s7r),e(jt,yc),e(yc,l7r),e(yc,aMe),e(aMe,i7r),e(yc,d7r),e(yc,pK),e(pK,c7r),e(yc,f7r),e(jt,m7r),M(hM,jt,null),e(nr,g7r),e(nr,Pr),M(p$,Pr,null),e(Pr,h7r),e(Pr,nMe),e(nMe,p7r),e(Pr,_7r),e(Pr,un),e(un,u7r),e(un,sMe),e(sMe,b7r),e(un,v7r),e(un,lMe),e(lMe,F7r),e(un,T7r),e(un,iMe),e(iMe,M7r),e(un,E7r),e(Pr,C7r),e(Pr,se),e(se,pM),e(pM,dMe),e(dMe,w7r),e(pM,A7r),e(pM,_K),e(_K,L7r),e(pM,y7r),e(se,x7r),e(se,_M),e(_M,cMe),e(cMe,$7r),e(_M,k7r),e(_M,uK),e(uK,S7r),e(_M,R7r),e(se,P7r),e(se,uM),e(uM,fMe),e(fMe,B7r),e(uM,I7r),e(uM,bK),e(bK,N7r),e(uM,q7r),e(se,j7r),e(se,bM),e(bM,mMe),e(mMe,D7r),e(bM,G7r),e(bM,vK),e(vK,O7r),e(bM,V7r),e(se,X7r),e(se,vM),e(vM,gMe),e(gMe,z7r),e(vM,W7r),e(vM,FK),e(FK,Q7r),e(vM,U7r),e(se,H7r),e(se,FM),e(FM,hMe),e(hMe,J7r),e(FM,Y7r),e(FM,TK),e(TK,K7r),e(FM,Z7r),e(se,eLr),e(se,TM),e(TM,pMe),e(pMe,oLr),e(TM,rLr),e(TM,MK),e(MK,tLr),e(TM,aLr),e(se,nLr),e(se,MM),e(MM,_Me),e(_Me,sLr),e(MM,lLr),e(MM,EK),e(EK,iLr),e(MM,dLr),e(se,cLr),e(se,EM),e(EM,uMe),e(uMe,fLr),e(EM,mLr),e(EM,CK),e(CK,gLr),e(EM,hLr),e(se,pLr),e(se,CM),e(CM,bMe),e(bMe,_Lr),e(CM,uLr),e(CM,wK),e(wK,bLr),e(CM,vLr),e(se,FLr),e(se,wM),e(wM,vMe),e(vMe,TLr),e(wM,MLr),e(wM,AK),e(AK,ELr),e(wM,CLr),e(se,wLr),e(se,AM),e(AM,FMe),e(FMe,ALr),e(AM,LLr),e(AM,LK),e(LK,yLr),e(AM,xLr),e(se,$Lr),e(se,LM),e(LM,TMe),e(TMe,kLr),e(LM,SLr),e(LM,yK),e(yK,RLr),e(LM,PLr),e(se,BLr),e(se,yM),e(yM,MMe),e(MMe,ILr),e(yM,NLr),e(yM,xK),e(xK,qLr),e(yM,jLr),e(se,DLr),e(se,xM),e(xM,EMe),e(EMe,GLr),e(xM,OLr),e(xM,$K),e($K,VLr),e(xM,XLr),e(se,zLr),e(se,$M),e($M,CMe),e(CMe,WLr),e($M,QLr),e($M,kK),e(kK,ULr),e($M,HLr),e(se,JLr),e(se,kM),e(kM,wMe),e(wMe,YLr),e(kM,KLr),e(kM,SK),e(SK,ZLr),e(kM,eyr),e(se,oyr),e(se,SM),e(SM,AMe),e(AMe,ryr),e(SM,tyr),e(SM,RK),e(RK,ayr),e(SM,nyr),e(se,syr),e(se,RM),e(RM,LMe),e(LMe,lyr),e(RM,iyr),e(RM,PK),e(PK,dyr),e(RM,cyr),e(se,fyr),e(se,PM),e(PM,yMe),e(yMe,myr),e(PM,gyr),e(PM,BK),e(BK,hyr),e(PM,pyr),e(se,_yr),e(se,BM),e(BM,xMe),e(xMe,uyr),e(BM,byr),e(BM,IK),e(IK,vyr),e(BM,Fyr),e(se,Tyr),e(se,IM),e(IM,$Me),e($Me,Myr),e(IM,Eyr),e(IM,NK),e(NK,Cyr),e(IM,wyr),e(se,Ayr),e(se,NM),e(NM,kMe),e(kMe,Lyr),e(NM,yyr),e(NM,qK),e(qK,xyr),e(NM,$yr),e(Pr,kyr),M(qM,Pr,null),b(f,lHe,u),b(f,xc,u),e(xc,jM),e(jM,SMe),M(_$,SMe,null),e(xc,Syr),e(xc,RMe),e(RMe,Ryr),b(f,iHe,u),b(f,sr,u),M(u$,sr,null),e(sr,Pyr),e(sr,$c),e($c,Byr),e($c,jK),e(jK,Iyr),e($c,Nyr),e($c,DK),e(DK,qyr),e($c,jyr),e(sr,Dyr),e(sr,b$),e(b$,Gyr),e(b$,PMe),e(PMe,Oyr),e(b$,Vyr),e(sr,Xyr),e(sr,Dt),M(v$,Dt,null),e(Dt,zyr),e(Dt,BMe),e(BMe,Wyr),e(Dt,Qyr),e(Dt,kc),e(kc,Uyr),e(kc,IMe),e(IMe,Hyr),e(kc,Jyr),e(kc,GK),e(GK,Yyr),e(kc,Kyr),e(Dt,Zyr),M(DM,Dt,null),e(sr,e8r),e(sr,Br),M(F$,Br,null),e(Br,o8r),e(Br,NMe),e(NMe,r8r),e(Br,t8r),e(Br,bn),e(bn,a8r),e(bn,qMe),e(qMe,n8r),e(bn,s8r),e(bn,jMe),e(jMe,l8r),e(bn,i8r),e(bn,DMe),e(DMe,d8r),e(bn,c8r),e(Br,f8r),e(Br,Me),e(Me,GM),e(GM,GMe),e(GMe,m8r),e(GM,g8r),e(GM,OK),e(OK,h8r),e(GM,p8r),e(Me,_8r),e(Me,OM),e(OM,OMe),e(OMe,u8r),e(OM,b8r),e(OM,VK),e(VK,v8r),e(OM,F8r),e(Me,T8r),e(Me,VM),e(VM,VMe),e(VMe,M8r),e(VM,E8r),e(VM,XK),e(XK,C8r),e(VM,w8r),e(Me,A8r),e(Me,XM),e(XM,XMe),e(XMe,L8r),e(XM,y8r),e(XM,zK),e(zK,x8r),e(XM,$8r),e(Me,k8r),e(Me,zM),e(zM,zMe),e(zMe,S8r),e(zM,R8r),e(zM,WK),e(WK,P8r),e(zM,B8r),e(Me,I8r),e(Me,WM),e(WM,WMe),e(WMe,N8r),e(WM,q8r),e(WM,QK),e(QK,j8r),e(WM,D8r),e(Me,G8r),e(Me,QM),e(QM,QMe),e(QMe,O8r),e(QM,V8r),e(QM,UK),e(UK,X8r),e(QM,z8r),e(Me,W8r),e(Me,UM),e(UM,UMe),e(UMe,Q8r),e(UM,U8r),e(UM,HK),e(HK,H8r),e(UM,J8r),e(Me,Y8r),e(Me,HM),e(HM,HMe),e(HMe,K8r),e(HM,Z8r),e(HM,JK),e(JK,e9r),e(HM,o9r),e(Me,r9r),e(Me,JM),e(JM,JMe),e(JMe,t9r),e(JM,a9r),e(JM,YK),e(YK,n9r),e(JM,s9r),e(Me,l9r),e(Me,YM),e(YM,YMe),e(YMe,i9r),e(YM,d9r),e(YM,KK),e(KK,c9r),e(YM,f9r),e(Me,m9r),e(Me,KM),e(KM,KMe),e(KMe,g9r),e(KM,h9r),e(KM,ZK),e(ZK,p9r),e(KM,_9r),e(Me,u9r),e(Me,ZM),e(ZM,ZMe),e(ZMe,b9r),e(ZM,v9r),e(ZM,eZ),e(eZ,F9r),e(ZM,T9r),e(Me,M9r),e(Me,eE),e(eE,eEe),e(eEe,E9r),e(eE,C9r),e(eE,oZ),e(oZ,w9r),e(eE,A9r),e(Br,L9r),M(oE,Br,null),b(f,dHe,u),b(f,Sc,u),e(Sc,rE),e(rE,oEe),M(T$,oEe,null),e(Sc,y9r),e(Sc,rEe),e(rEe,x9r),b(f,cHe,u),b(f,lr,u),M(M$,lr,null),e(lr,$9r),e(lr,Rc),e(Rc,k9r),e(Rc,rZ),e(rZ,S9r),e(Rc,R9r),e(Rc,tZ),e(tZ,P9r),e(Rc,B9r),e(lr,I9r),e(lr,E$),e(E$,N9r),e(E$,tEe),e(tEe,q9r),e(E$,j9r),e(lr,D9r),e(lr,Gt),M(C$,Gt,null),e(Gt,G9r),e(Gt,aEe),e(aEe,O9r),e(Gt,V9r),e(Gt,Pc),e(Pc,X9r),e(Pc,nEe),e(nEe,z9r),e(Pc,W9r),e(Pc,aZ),e(aZ,Q9r),e(Pc,U9r),e(Gt,H9r),M(tE,Gt,null),e(lr,J9r),e(lr,Ir),M(w$,Ir,null),e(Ir,Y9r),e(Ir,sEe),e(sEe,K9r),e(Ir,Z9r),e(Ir,vn),e(vn,exr),e(vn,lEe),e(lEe,oxr),e(vn,rxr),e(vn,iEe),e(iEe,txr),e(vn,axr),e(vn,dEe),e(dEe,nxr),e(vn,sxr),e(Ir,lxr),e(Ir,Ve),e(Ve,aE),e(aE,cEe),e(cEe,ixr),e(aE,dxr),e(aE,nZ),e(nZ,cxr),e(aE,fxr),e(Ve,mxr),e(Ve,nE),e(nE,fEe),e(fEe,gxr),e(nE,hxr),e(nE,sZ),e(sZ,pxr),e(nE,_xr),e(Ve,uxr),e(Ve,dl),e(dl,mEe),e(mEe,bxr),e(dl,vxr),e(dl,lZ),e(lZ,Fxr),e(dl,Txr),e(dl,iZ),e(iZ,Mxr),e(dl,Exr),e(Ve,Cxr),e(Ve,sE),e(sE,gEe),e(gEe,wxr),e(sE,Axr),e(sE,dZ),e(dZ,Lxr),e(sE,yxr),e(Ve,xxr),e(Ve,lE),e(lE,hEe),e(hEe,$xr),e(lE,kxr),e(lE,cZ),e(cZ,Sxr),e(lE,Rxr),e(Ve,Pxr),e(Ve,iE),e(iE,pEe),e(pEe,Bxr),e(iE,Ixr),e(iE,fZ),e(fZ,Nxr),e(iE,qxr),e(Ve,jxr),e(Ve,dE),e(dE,_Ee),e(_Ee,Dxr),e(dE,Gxr),e(dE,mZ),e(mZ,Oxr),e(dE,Vxr),e(Ve,Xxr),e(Ve,cE),e(cE,uEe),e(uEe,zxr),e(cE,Wxr),e(cE,gZ),e(gZ,Qxr),e(cE,Uxr),e(Ir,Hxr),M(fE,Ir,null),b(f,fHe,u),b(f,Bc,u),e(Bc,mE),e(mE,bEe),M(A$,bEe,null),e(Bc,Jxr),e(Bc,vEe),e(vEe,Yxr),b(f,mHe,u),b(f,ir,u),M(L$,ir,null),e(ir,Kxr),e(ir,Ic),e(Ic,Zxr),e(Ic,hZ),e(hZ,e$r),e(Ic,o$r),e(Ic,pZ),e(pZ,r$r),e(Ic,t$r),e(ir,a$r),e(ir,y$),e(y$,n$r),e(y$,FEe),e(FEe,s$r),e(y$,l$r),e(ir,i$r),e(ir,Ot),M(x$,Ot,null),e(Ot,d$r),e(Ot,TEe),e(TEe,c$r),e(Ot,f$r),e(Ot,Nc),e(Nc,m$r),e(Nc,MEe),e(MEe,g$r),e(Nc,h$r),e(Nc,_Z),e(_Z,p$r),e(Nc,_$r),e(Ot,u$r),M(gE,Ot,null),e(ir,b$r),e(ir,Nr),M($$,Nr,null),e(Nr,v$r),e(Nr,EEe),e(EEe,F$r),e(Nr,T$r),e(Nr,Fn),e(Fn,M$r),e(Fn,CEe),e(CEe,E$r),e(Fn,C$r),e(Fn,wEe),e(wEe,w$r),e(Fn,A$r),e(Fn,AEe),e(AEe,L$r),e(Fn,y$r),e(Nr,x$r),e(Nr,k$),e(k$,hE),e(hE,LEe),e(LEe,$$r),e(hE,k$r),e(hE,uZ),e(uZ,S$r),e(hE,R$r),e(k$,P$r),e(k$,pE),e(pE,yEe),e(yEe,B$r),e(pE,I$r),e(pE,bZ),e(bZ,N$r),e(pE,q$r),e(Nr,j$r),M(_E,Nr,null),b(f,gHe,u),b(f,qc,u),e(qc,uE),e(uE,xEe),M(S$,xEe,null),e(qc,D$r),e(qc,$Ee),e($Ee,G$r),b(f,hHe,u),b(f,dr,u),M(R$,dr,null),e(dr,O$r),e(dr,jc),e(jc,V$r),e(jc,vZ),e(vZ,X$r),e(jc,z$r),e(jc,FZ),e(FZ,W$r),e(jc,Q$r),e(dr,U$r),e(dr,P$),e(P$,H$r),e(P$,kEe),e(kEe,J$r),e(P$,Y$r),e(dr,K$r),e(dr,Vt),M(B$,Vt,null),e(Vt,Z$r),e(Vt,SEe),e(SEe,ekr),e(Vt,okr),e(Vt,Dc),e(Dc,rkr),e(Dc,REe),e(REe,tkr),e(Dc,akr),e(Dc,TZ),e(TZ,nkr),e(Dc,skr),e(Vt,lkr),M(bE,Vt,null),e(dr,ikr),e(dr,qr),M(I$,qr,null),e(qr,dkr),e(qr,PEe),e(PEe,ckr),e(qr,fkr),e(qr,Tn),e(Tn,mkr),e(Tn,BEe),e(BEe,gkr),e(Tn,hkr),e(Tn,IEe),e(IEe,pkr),e(Tn,_kr),e(Tn,NEe),e(NEe,ukr),e(Tn,bkr),e(qr,vkr),e(qr,de),e(de,vE),e(vE,qEe),e(qEe,Fkr),e(vE,Tkr),e(vE,MZ),e(MZ,Mkr),e(vE,Ekr),e(de,Ckr),e(de,FE),e(FE,jEe),e(jEe,wkr),e(FE,Akr),e(FE,EZ),e(EZ,Lkr),e(FE,ykr),e(de,xkr),e(de,TE),e(TE,DEe),e(DEe,$kr),e(TE,kkr),e(TE,CZ),e(CZ,Skr),e(TE,Rkr),e(de,Pkr),e(de,ME),e(ME,GEe),e(GEe,Bkr),e(ME,Ikr),e(ME,wZ),e(wZ,Nkr),e(ME,qkr),e(de,jkr),e(de,EE),e(EE,OEe),e(OEe,Dkr),e(EE,Gkr),e(EE,AZ),e(AZ,Okr),e(EE,Vkr),e(de,Xkr),e(de,CE),e(CE,VEe),e(VEe,zkr),e(CE,Wkr),e(CE,LZ),e(LZ,Qkr),e(CE,Ukr),e(de,Hkr),e(de,wE),e(wE,XEe),e(XEe,Jkr),e(wE,Ykr),e(wE,yZ),e(yZ,Kkr),e(wE,Zkr),e(de,eSr),e(de,AE),e(AE,zEe),e(zEe,oSr),e(AE,rSr),e(AE,xZ),e(xZ,tSr),e(AE,aSr),e(de,nSr),e(de,LE),e(LE,WEe),e(WEe,sSr),e(LE,lSr),e(LE,$Z),e($Z,iSr),e(LE,dSr),e(de,cSr),e(de,yE),e(yE,QEe),e(QEe,fSr),e(yE,mSr),e(yE,kZ),e(kZ,gSr),e(yE,hSr),e(de,pSr),e(de,xE),e(xE,UEe),e(UEe,_Sr),e(xE,uSr),e(xE,SZ),e(SZ,bSr),e(xE,vSr),e(de,FSr),e(de,$E),e($E,HEe),e(HEe,TSr),e($E,MSr),e($E,RZ),e(RZ,ESr),e($E,CSr),e(de,wSr),e(de,kE),e(kE,JEe),e(JEe,ASr),e(kE,LSr),e(kE,PZ),e(PZ,ySr),e(kE,xSr),e(de,$Sr),e(de,SE),e(SE,YEe),e(YEe,kSr),e(SE,SSr),e(SE,BZ),e(BZ,RSr),e(SE,PSr),e(de,BSr),e(de,RE),e(RE,KEe),e(KEe,ISr),e(RE,NSr),e(RE,IZ),e(IZ,qSr),e(RE,jSr),e(de,DSr),e(de,PE),e(PE,ZEe),e(ZEe,GSr),e(PE,OSr),e(PE,NZ),e(NZ,VSr),e(PE,XSr),e(de,zSr),e(de,BE),e(BE,eCe),e(eCe,WSr),e(BE,QSr),e(BE,qZ),e(qZ,USr),e(BE,HSr),e(de,JSr),e(de,IE),e(IE,oCe),e(oCe,YSr),e(IE,KSr),e(IE,jZ),e(jZ,ZSr),e(IE,eRr),e(de,oRr),e(de,NE),e(NE,rCe),e(rCe,rRr),e(NE,tRr),e(NE,DZ),e(DZ,aRr),e(NE,nRr),e(de,sRr),e(de,qE),e(qE,tCe),e(tCe,lRr),e(qE,iRr),e(qE,GZ),e(GZ,dRr),e(qE,cRr),e(qr,fRr),M(jE,qr,null),b(f,pHe,u),b(f,Gc,u),e(Gc,DE),e(DE,aCe),M(N$,aCe,null),e(Gc,mRr),e(Gc,nCe),e(nCe,gRr),b(f,_He,u),b(f,cr,u),M(q$,cr,null),e(cr,hRr),e(cr,Oc),e(Oc,pRr),e(Oc,OZ),e(OZ,_Rr),e(Oc,uRr),e(Oc,VZ),e(VZ,bRr),e(Oc,vRr),e(cr,FRr),e(cr,j$),e(j$,TRr),e(j$,sCe),e(sCe,MRr),e(j$,ERr),e(cr,CRr),e(cr,Xt),M(D$,Xt,null),e(Xt,wRr),e(Xt,lCe),e(lCe,ARr),e(Xt,LRr),e(Xt,Vc),e(Vc,yRr),e(Vc,iCe),e(iCe,xRr),e(Vc,$Rr),e(Vc,XZ),e(XZ,kRr),e(Vc,SRr),e(Xt,RRr),M(GE,Xt,null),e(cr,PRr),e(cr,jr),M(G$,jr,null),e(jr,BRr),e(jr,dCe),e(dCe,IRr),e(jr,NRr),e(jr,Mn),e(Mn,qRr),e(Mn,cCe),e(cCe,jRr),e(Mn,DRr),e(Mn,fCe),e(fCe,GRr),e(Mn,ORr),e(Mn,mCe),e(mCe,VRr),e(Mn,XRr),e(jr,zRr),e(jr,ye),e(ye,OE),e(OE,gCe),e(gCe,WRr),e(OE,QRr),e(OE,zZ),e(zZ,URr),e(OE,HRr),e(ye,JRr),e(ye,VE),e(VE,hCe),e(hCe,YRr),e(VE,KRr),e(VE,WZ),e(WZ,ZRr),e(VE,ePr),e(ye,oPr),e(ye,XE),e(XE,pCe),e(pCe,rPr),e(XE,tPr),e(XE,QZ),e(QZ,aPr),e(XE,nPr),e(ye,sPr),e(ye,zE),e(zE,_Ce),e(_Ce,lPr),e(zE,iPr),e(zE,UZ),e(UZ,dPr),e(zE,cPr),e(ye,fPr),e(ye,WE),e(WE,uCe),e(uCe,mPr),e(WE,gPr),e(WE,HZ),e(HZ,hPr),e(WE,pPr),e(ye,_Pr),e(ye,QE),e(QE,bCe),e(bCe,uPr),e(QE,bPr),e(QE,JZ),e(JZ,vPr),e(QE,FPr),e(ye,TPr),e(ye,UE),e(UE,vCe),e(vCe,MPr),e(UE,EPr),e(UE,YZ),e(YZ,CPr),e(UE,wPr),e(ye,APr),e(ye,HE),e(HE,FCe),e(FCe,LPr),e(HE,yPr),e(HE,KZ),e(KZ,xPr),e(HE,$Pr),e(ye,kPr),e(ye,JE),e(JE,TCe),e(TCe,SPr),e(JE,RPr),e(JE,ZZ),e(ZZ,PPr),e(JE,BPr),e(ye,IPr),e(ye,YE),e(YE,MCe),e(MCe,NPr),e(YE,qPr),e(YE,eee),e(eee,jPr),e(YE,DPr),e(jr,GPr),M(KE,jr,null),b(f,uHe,u),b(f,Xc,u),e(Xc,ZE),e(ZE,ECe),M(O$,ECe,null),e(Xc,OPr),e(Xc,CCe),e(CCe,VPr),b(f,bHe,u),b(f,fr,u),M(V$,fr,null),e(fr,XPr),e(fr,zc),e(zc,zPr),e(zc,oee),e(oee,WPr),e(zc,QPr),e(zc,ree),e(ree,UPr),e(zc,HPr),e(fr,JPr),e(fr,X$),e(X$,YPr),e(X$,wCe),e(wCe,KPr),e(X$,ZPr),e(fr,eBr),e(fr,zt),M(z$,zt,null),e(zt,oBr),e(zt,ACe),e(ACe,rBr),e(zt,tBr),e(zt,Wc),e(Wc,aBr),e(Wc,LCe),e(LCe,nBr),e(Wc,sBr),e(Wc,tee),e(tee,lBr),e(Wc,iBr),e(zt,dBr),M(eC,zt,null),e(fr,cBr),e(fr,Dr),M(W$,Dr,null),e(Dr,fBr),e(Dr,yCe),e(yCe,mBr),e(Dr,gBr),e(Dr,En),e(En,hBr),e(En,xCe),e(xCe,pBr),e(En,_Br),e(En,$Ce),e($Ce,uBr),e(En,bBr),e(En,kCe),e(kCe,vBr),e(En,FBr),e(Dr,TBr),e(Dr,te),e(te,oC),e(oC,SCe),e(SCe,MBr),e(oC,EBr),e(oC,aee),e(aee,CBr),e(oC,wBr),e(te,ABr),e(te,rC),e(rC,RCe),e(RCe,LBr),e(rC,yBr),e(rC,nee),e(nee,xBr),e(rC,$Br),e(te,kBr),e(te,tC),e(tC,PCe),e(PCe,SBr),e(tC,RBr),e(tC,see),e(see,PBr),e(tC,BBr),e(te,IBr),e(te,aC),e(aC,BCe),e(BCe,NBr),e(aC,qBr),e(aC,lee),e(lee,jBr),e(aC,DBr),e(te,GBr),e(te,nC),e(nC,ICe),e(ICe,OBr),e(nC,VBr),e(nC,iee),e(iee,XBr),e(nC,zBr),e(te,WBr),e(te,sC),e(sC,NCe),e(NCe,QBr),e(sC,UBr),e(sC,dee),e(dee,HBr),e(sC,JBr),e(te,YBr),e(te,lC),e(lC,qCe),e(qCe,KBr),e(lC,ZBr),e(lC,cee),e(cee,eIr),e(lC,oIr),e(te,rIr),e(te,iC),e(iC,jCe),e(jCe,tIr),e(iC,aIr),e(iC,fee),e(fee,nIr),e(iC,sIr),e(te,lIr),e(te,dC),e(dC,DCe),e(DCe,iIr),e(dC,dIr),e(dC,mee),e(mee,cIr),e(dC,fIr),e(te,mIr),e(te,cC),e(cC,GCe),e(GCe,gIr),e(cC,hIr),e(cC,gee),e(gee,pIr),e(cC,_Ir),e(te,uIr),e(te,fC),e(fC,OCe),e(OCe,bIr),e(fC,vIr),e(fC,hee),e(hee,FIr),e(fC,TIr),e(te,MIr),e(te,mC),e(mC,VCe),e(VCe,EIr),e(mC,CIr),e(mC,pee),e(pee,wIr),e(mC,AIr),e(te,LIr),e(te,gC),e(gC,XCe),e(XCe,yIr),e(gC,xIr),e(gC,_ee),e(_ee,$Ir),e(gC,kIr),e(te,SIr),e(te,hC),e(hC,zCe),e(zCe,RIr),e(hC,PIr),e(hC,uee),e(uee,BIr),e(hC,IIr),e(te,NIr),e(te,pC),e(pC,WCe),e(WCe,qIr),e(pC,jIr),e(pC,bee),e(bee,DIr),e(pC,GIr),e(te,OIr),e(te,_C),e(_C,QCe),e(QCe,VIr),e(_C,XIr),e(_C,vee),e(vee,zIr),e(_C,WIr),e(te,QIr),e(te,uC),e(uC,UCe),e(UCe,UIr),e(uC,HIr),e(uC,Fee),e(Fee,JIr),e(uC,YIr),e(te,KIr),e(te,bC),e(bC,HCe),e(HCe,ZIr),e(bC,eNr),e(bC,Tee),e(Tee,oNr),e(bC,rNr),e(te,tNr),e(te,vC),e(vC,JCe),e(JCe,aNr),e(vC,nNr),e(vC,Mee),e(Mee,sNr),e(vC,lNr),e(te,iNr),e(te,FC),e(FC,YCe),e(YCe,dNr),e(FC,cNr),e(FC,Eee),e(Eee,fNr),e(FC,mNr),e(te,gNr),e(te,TC),e(TC,KCe),e(KCe,hNr),e(TC,pNr),e(TC,Cee),e(Cee,_Nr),e(TC,uNr),e(te,bNr),e(te,MC),e(MC,ZCe),e(ZCe,vNr),e(MC,FNr),e(MC,wee),e(wee,TNr),e(MC,MNr),e(te,ENr),e(te,EC),e(EC,e0e),e(e0e,CNr),e(EC,wNr),e(EC,Aee),e(Aee,ANr),e(EC,LNr),e(te,yNr),e(te,CC),e(CC,o0e),e(o0e,xNr),e(CC,$Nr),e(CC,Lee),e(Lee,kNr),e(CC,SNr),e(te,RNr),e(te,wC),e(wC,r0e),e(r0e,PNr),e(wC,BNr),e(wC,yee),e(yee,INr),e(wC,NNr),e(te,qNr),e(te,AC),e(AC,t0e),e(t0e,jNr),e(AC,DNr),e(AC,xee),e(xee,GNr),e(AC,ONr),e(Dr,VNr),M(LC,Dr,null),b(f,vHe,u),b(f,Qc,u),e(Qc,yC),e(yC,a0e),M(Q$,a0e,null),e(Qc,XNr),e(Qc,n0e),e(n0e,zNr),b(f,FHe,u),b(f,mr,u),M(U$,mr,null),e(mr,WNr),e(mr,Uc),e(Uc,QNr),e(Uc,$ee),e($ee,UNr),e(Uc,HNr),e(Uc,kee),e(kee,JNr),e(Uc,YNr),e(mr,KNr),e(mr,H$),e(H$,ZNr),e(H$,s0e),e(s0e,eqr),e(H$,oqr),e(mr,rqr),e(mr,Wt),M(J$,Wt,null),e(Wt,tqr),e(Wt,l0e),e(l0e,aqr),e(Wt,nqr),e(Wt,Hc),e(Hc,sqr),e(Hc,i0e),e(i0e,lqr),e(Hc,iqr),e(Hc,See),e(See,dqr),e(Hc,cqr),e(Wt,fqr),M(xC,Wt,null),e(mr,mqr),e(mr,Gr),M(Y$,Gr,null),e(Gr,gqr),e(Gr,d0e),e(d0e,hqr),e(Gr,pqr),e(Gr,Cn),e(Cn,_qr),e(Cn,c0e),e(c0e,uqr),e(Cn,bqr),e(Cn,f0e),e(f0e,vqr),e(Cn,Fqr),e(Cn,m0e),e(m0e,Tqr),e(Cn,Mqr),e(Gr,Eqr),e(Gr,ve),e(ve,$C),e($C,g0e),e(g0e,Cqr),e($C,wqr),e($C,Ree),e(Ree,Aqr),e($C,Lqr),e(ve,yqr),e(ve,kC),e(kC,h0e),e(h0e,xqr),e(kC,$qr),e(kC,Pee),e(Pee,kqr),e(kC,Sqr),e(ve,Rqr),e(ve,SC),e(SC,p0e),e(p0e,Pqr),e(SC,Bqr),e(SC,Bee),e(Bee,Iqr),e(SC,Nqr),e(ve,qqr),e(ve,RC),e(RC,_0e),e(_0e,jqr),e(RC,Dqr),e(RC,Iee),e(Iee,Gqr),e(RC,Oqr),e(ve,Vqr),e(ve,PC),e(PC,u0e),e(u0e,Xqr),e(PC,zqr),e(PC,Nee),e(Nee,Wqr),e(PC,Qqr),e(ve,Uqr),e(ve,BC),e(BC,b0e),e(b0e,Hqr),e(BC,Jqr),e(BC,qee),e(qee,Yqr),e(BC,Kqr),e(ve,Zqr),e(ve,IC),e(IC,v0e),e(v0e,ejr),e(IC,ojr),e(IC,jee),e(jee,rjr),e(IC,tjr),e(ve,ajr),e(ve,NC),e(NC,F0e),e(F0e,njr),e(NC,sjr),e(NC,Dee),e(Dee,ljr),e(NC,ijr),e(ve,djr),e(ve,qC),e(qC,T0e),e(T0e,cjr),e(qC,fjr),e(qC,Gee),e(Gee,mjr),e(qC,gjr),e(ve,hjr),e(ve,jC),e(jC,M0e),e(M0e,pjr),e(jC,_jr),e(jC,Oee),e(Oee,ujr),e(jC,bjr),e(ve,vjr),e(ve,DC),e(DC,E0e),e(E0e,Fjr),e(DC,Tjr),e(DC,Vee),e(Vee,Mjr),e(DC,Ejr),e(ve,Cjr),e(ve,GC),e(GC,C0e),e(C0e,wjr),e(GC,Ajr),e(GC,Xee),e(Xee,Ljr),e(GC,yjr),e(ve,xjr),e(ve,OC),e(OC,w0e),e(w0e,$jr),e(OC,kjr),e(OC,zee),e(zee,Sjr),e(OC,Rjr),e(ve,Pjr),e(ve,VC),e(VC,A0e),e(A0e,Bjr),e(VC,Ijr),e(VC,Wee),e(Wee,Njr),e(VC,qjr),e(ve,jjr),e(ve,XC),e(XC,L0e),e(L0e,Djr),e(XC,Gjr),e(XC,Qee),e(Qee,Ojr),e(XC,Vjr),e(ve,Xjr),e(ve,zC),e(zC,y0e),e(y0e,zjr),e(zC,Wjr),e(zC,Uee),e(Uee,Qjr),e(zC,Ujr),e(ve,Hjr),e(ve,WC),e(WC,x0e),e(x0e,Jjr),e(WC,Yjr),e(WC,Hee),e(Hee,Kjr),e(WC,Zjr),e(Gr,eDr),M(QC,Gr,null),b(f,THe,u),b(f,Jc,u),e(Jc,UC),e(UC,$0e),M(K$,$0e,null),e(Jc,oDr),e(Jc,k0e),e(k0e,rDr),b(f,MHe,u),b(f,gr,u),M(Z$,gr,null),e(gr,tDr),e(gr,Yc),e(Yc,aDr),e(Yc,Jee),e(Jee,nDr),e(Yc,sDr),e(Yc,Yee),e(Yee,lDr),e(Yc,iDr),e(gr,dDr),e(gr,ek),e(ek,cDr),e(ek,S0e),e(S0e,fDr),e(ek,mDr),e(gr,gDr),e(gr,Qt),M(ok,Qt,null),e(Qt,hDr),e(Qt,R0e),e(R0e,pDr),e(Qt,_Dr),e(Qt,Kc),e(Kc,uDr),e(Kc,P0e),e(P0e,bDr),e(Kc,vDr),e(Kc,Kee),e(Kee,FDr),e(Kc,TDr),e(Qt,MDr),M(HC,Qt,null),e(gr,EDr),e(gr,Or),M(rk,Or,null),e(Or,CDr),e(Or,B0e),e(B0e,wDr),e(Or,ADr),e(Or,wn),e(wn,LDr),e(wn,I0e),e(I0e,yDr),e(wn,xDr),e(wn,N0e),e(N0e,$Dr),e(wn,kDr),e(wn,q0e),e(q0e,SDr),e(wn,RDr),e(Or,PDr),e(Or,tk),e(tk,JC),e(JC,j0e),e(j0e,BDr),e(JC,IDr),e(JC,Zee),e(Zee,NDr),e(JC,qDr),e(tk,jDr),e(tk,YC),e(YC,D0e),e(D0e,DDr),e(YC,GDr),e(YC,eoe),e(eoe,ODr),e(YC,VDr),e(Or,XDr),M(KC,Or,null),b(f,EHe,u),b(f,Zc,u),e(Zc,ZC),e(ZC,G0e),M(ak,G0e,null),e(Zc,zDr),e(Zc,O0e),e(O0e,WDr),b(f,CHe,u),b(f,hr,u),M(nk,hr,null),e(hr,QDr),e(hr,ef),e(ef,UDr),e(ef,ooe),e(ooe,HDr),e(ef,JDr),e(ef,roe),e(roe,YDr),e(ef,KDr),e(hr,ZDr),e(hr,sk),e(sk,eGr),e(sk,V0e),e(V0e,oGr),e(sk,rGr),e(hr,tGr),e(hr,Ut),M(lk,Ut,null),e(Ut,aGr),e(Ut,X0e),e(X0e,nGr),e(Ut,sGr),e(Ut,of),e(of,lGr),e(of,z0e),e(z0e,iGr),e(of,dGr),e(of,toe),e(toe,cGr),e(of,fGr),e(Ut,mGr),M(e0,Ut,null),e(hr,gGr),e(hr,Vr),M(ik,Vr,null),e(Vr,hGr),e(Vr,W0e),e(W0e,pGr),e(Vr,_Gr),e(Vr,An),e(An,uGr),e(An,Q0e),e(Q0e,bGr),e(An,vGr),e(An,U0e),e(U0e,FGr),e(An,TGr),e(An,H0e),e(H0e,MGr),e(An,EGr),e(Vr,CGr),e(Vr,J0e),e(J0e,o0),e(o0,Y0e),e(Y0e,wGr),e(o0,AGr),e(o0,aoe),e(aoe,LGr),e(o0,yGr),e(Vr,xGr),M(r0,Vr,null),b(f,wHe,u),b(f,rf,u),e(rf,t0),e(t0,K0e),M(dk,K0e,null),e(rf,$Gr),e(rf,Z0e),e(Z0e,kGr),b(f,AHe,u),b(f,pr,u),M(ck,pr,null),e(pr,SGr),e(pr,tf),e(tf,RGr),e(tf,noe),e(noe,PGr),e(tf,BGr),e(tf,soe),e(soe,IGr),e(tf,NGr),e(pr,qGr),e(pr,fk),e(fk,jGr),e(fk,ewe),e(ewe,DGr),e(fk,GGr),e(pr,OGr),e(pr,Ht),M(mk,Ht,null),e(Ht,VGr),e(Ht,owe),e(owe,XGr),e(Ht,zGr),e(Ht,af),e(af,WGr),e(af,rwe),e(rwe,QGr),e(af,UGr),e(af,loe),e(loe,HGr),e(af,JGr),e(Ht,YGr),M(a0,Ht,null),e(pr,KGr),e(pr,Xr),M(gk,Xr,null),e(Xr,ZGr),e(Xr,twe),e(twe,eOr),e(Xr,oOr),e(Xr,Ln),e(Ln,rOr),e(Ln,awe),e(awe,tOr),e(Ln,aOr),e(Ln,nwe),e(nwe,nOr),e(Ln,sOr),e(Ln,swe),e(swe,lOr),e(Ln,iOr),e(Xr,dOr),e(Xr,ce),e(ce,n0),e(n0,lwe),e(lwe,cOr),e(n0,fOr),e(n0,ioe),e(ioe,mOr),e(n0,gOr),e(ce,hOr),e(ce,s0),e(s0,iwe),e(iwe,pOr),e(s0,_Or),e(s0,doe),e(doe,uOr),e(s0,bOr),e(ce,vOr),e(ce,l0),e(l0,dwe),e(dwe,FOr),e(l0,TOr),e(l0,coe),e(coe,MOr),e(l0,EOr),e(ce,COr),e(ce,i0),e(i0,cwe),e(cwe,wOr),e(i0,AOr),e(i0,foe),e(foe,LOr),e(i0,yOr),e(ce,xOr),e(ce,d0),e(d0,fwe),e(fwe,$Or),e(d0,kOr),e(d0,moe),e(moe,SOr),e(d0,ROr),e(ce,POr),e(ce,c0),e(c0,mwe),e(mwe,BOr),e(c0,IOr),e(c0,goe),e(goe,NOr),e(c0,qOr),e(ce,jOr),e(ce,f0),e(f0,gwe),e(gwe,DOr),e(f0,GOr),e(f0,hoe),e(hoe,OOr),e(f0,VOr),e(ce,XOr),e(ce,m0),e(m0,hwe),e(hwe,zOr),e(m0,WOr),e(m0,poe),e(poe,QOr),e(m0,UOr),e(ce,HOr),e(ce,g0),e(g0,pwe),e(pwe,JOr),e(g0,YOr),e(g0,_oe),e(_oe,KOr),e(g0,ZOr),e(ce,eVr),e(ce,h0),e(h0,_we),e(_we,oVr),e(h0,rVr),e(h0,uoe),e(uoe,tVr),e(h0,aVr),e(ce,nVr),e(ce,p0),e(p0,uwe),e(uwe,sVr),e(p0,lVr),e(p0,boe),e(boe,iVr),e(p0,dVr),e(ce,cVr),e(ce,_0),e(_0,bwe),e(bwe,fVr),e(_0,mVr),e(_0,voe),e(voe,gVr),e(_0,hVr),e(ce,pVr),e(ce,u0),e(u0,vwe),e(vwe,_Vr),e(u0,uVr),e(u0,Foe),e(Foe,bVr),e(u0,vVr),e(ce,FVr),e(ce,b0),e(b0,Fwe),e(Fwe,TVr),e(b0,MVr),e(b0,Toe),e(Toe,EVr),e(b0,CVr),e(ce,wVr),e(ce,v0),e(v0,Twe),e(Twe,AVr),e(v0,LVr),e(v0,Moe),e(Moe,yVr),e(v0,xVr),e(ce,$Vr),e(ce,F0),e(F0,Mwe),e(Mwe,kVr),e(F0,SVr),e(F0,Eoe),e(Eoe,RVr),e(F0,PVr),e(ce,BVr),e(ce,T0),e(T0,Ewe),e(Ewe,IVr),e(T0,NVr),e(T0,Coe),e(Coe,qVr),e(T0,jVr),e(ce,DVr),e(ce,M0),e(M0,Cwe),e(Cwe,GVr),e(M0,OVr),e(M0,woe),e(woe,VVr),e(M0,XVr),e(ce,zVr),e(ce,E0),e(E0,wwe),e(wwe,WVr),e(E0,QVr),e(E0,Aoe),e(Aoe,UVr),e(E0,HVr),e(ce,JVr),e(ce,C0),e(C0,Awe),e(Awe,YVr),e(C0,KVr),e(C0,Loe),e(Loe,ZVr),e(C0,eXr),e(Xr,oXr),M(w0,Xr,null),b(f,LHe,u),b(f,nf,u),e(nf,A0),e(A0,Lwe),M(hk,Lwe,null),e(nf,rXr),e(nf,ywe),e(ywe,tXr),b(f,yHe,u),b(f,_r,u),M(pk,_r,null),e(_r,aXr),e(_r,sf),e(sf,nXr),e(sf,yoe),e(yoe,sXr),e(sf,lXr),e(sf,xoe),e(xoe,iXr),e(sf,dXr),e(_r,cXr),e(_r,_k),e(_k,fXr),e(_k,xwe),e(xwe,mXr),e(_k,gXr),e(_r,hXr),e(_r,Jt),M(uk,Jt,null),e(Jt,pXr),e(Jt,$we),e($we,_Xr),e(Jt,uXr),e(Jt,lf),e(lf,bXr),e(lf,kwe),e(kwe,vXr),e(lf,FXr),e(lf,$oe),e($oe,TXr),e(lf,MXr),e(Jt,EXr),M(L0,Jt,null),e(_r,CXr),e(_r,zr),M(bk,zr,null),e(zr,wXr),e(zr,Swe),e(Swe,AXr),e(zr,LXr),e(zr,yn),e(yn,yXr),e(yn,Rwe),e(Rwe,xXr),e(yn,$Xr),e(yn,Pwe),e(Pwe,kXr),e(yn,SXr),e(yn,Bwe),e(Bwe,RXr),e(yn,PXr),e(zr,BXr),e(zr,fe),e(fe,y0),e(y0,Iwe),e(Iwe,IXr),e(y0,NXr),e(y0,koe),e(koe,qXr),e(y0,jXr),e(fe,DXr),e(fe,x0),e(x0,Nwe),e(Nwe,GXr),e(x0,OXr),e(x0,Soe),e(Soe,VXr),e(x0,XXr),e(fe,zXr),e(fe,$0),e($0,qwe),e(qwe,WXr),e($0,QXr),e($0,Roe),e(Roe,UXr),e($0,HXr),e(fe,JXr),e(fe,k0),e(k0,jwe),e(jwe,YXr),e(k0,KXr),e(k0,Poe),e(Poe,ZXr),e(k0,ezr),e(fe,ozr),e(fe,S0),e(S0,Dwe),e(Dwe,rzr),e(S0,tzr),e(S0,Boe),e(Boe,azr),e(S0,nzr),e(fe,szr),e(fe,R0),e(R0,Gwe),e(Gwe,lzr),e(R0,izr),e(R0,Ioe),e(Ioe,dzr),e(R0,czr),e(fe,fzr),e(fe,P0),e(P0,Owe),e(Owe,mzr),e(P0,gzr),e(P0,Noe),e(Noe,hzr),e(P0,pzr),e(fe,_zr),e(fe,B0),e(B0,Vwe),e(Vwe,uzr),e(B0,bzr),e(B0,qoe),e(qoe,vzr),e(B0,Fzr),e(fe,Tzr),e(fe,I0),e(I0,Xwe),e(Xwe,Mzr),e(I0,Ezr),e(I0,joe),e(joe,Czr),e(I0,wzr),e(fe,Azr),e(fe,N0),e(N0,zwe),e(zwe,Lzr),e(N0,yzr),e(N0,Doe),e(Doe,xzr),e(N0,$zr),e(fe,kzr),e(fe,q0),e(q0,Wwe),e(Wwe,Szr),e(q0,Rzr),e(q0,Goe),e(Goe,Pzr),e(q0,Bzr),e(fe,Izr),e(fe,j0),e(j0,Qwe),e(Qwe,Nzr),e(j0,qzr),e(j0,Ooe),e(Ooe,jzr),e(j0,Dzr),e(fe,Gzr),e(fe,D0),e(D0,Uwe),e(Uwe,Ozr),e(D0,Vzr),e(D0,Voe),e(Voe,Xzr),e(D0,zzr),e(fe,Wzr),e(fe,G0),e(G0,Hwe),e(Hwe,Qzr),e(G0,Uzr),e(G0,Xoe),e(Xoe,Hzr),e(G0,Jzr),e(fe,Yzr),e(fe,O0),e(O0,Jwe),e(Jwe,Kzr),e(O0,Zzr),e(O0,zoe),e(zoe,eWr),e(O0,oWr),e(fe,rWr),e(fe,V0),e(V0,Ywe),e(Ywe,tWr),e(V0,aWr),e(V0,Woe),e(Woe,nWr),e(V0,sWr),e(fe,lWr),e(fe,X0),e(X0,Kwe),e(Kwe,iWr),e(X0,dWr),e(X0,Qoe),e(Qoe,cWr),e(X0,fWr),e(fe,mWr),e(fe,z0),e(z0,Zwe),e(Zwe,gWr),e(z0,hWr),e(z0,Uoe),e(Uoe,pWr),e(z0,_Wr),e(fe,uWr),e(fe,W0),e(W0,eAe),e(eAe,bWr),e(W0,vWr),e(W0,Hoe),e(Hoe,FWr),e(W0,TWr),e(fe,MWr),e(fe,Q0),e(Q0,oAe),e(oAe,EWr),e(Q0,CWr),e(Q0,Joe),e(Joe,wWr),e(Q0,AWr),e(zr,LWr),M(U0,zr,null),b(f,xHe,u),b(f,df,u),e(df,H0),e(H0,rAe),M(vk,rAe,null),e(df,yWr),e(df,tAe),e(tAe,xWr),b(f,$He,u),b(f,ur,u),M(Fk,ur,null),e(ur,$Wr),e(ur,cf),e(cf,kWr),e(cf,Yoe),e(Yoe,SWr),e(cf,RWr),e(cf,Koe),e(Koe,PWr),e(cf,BWr),e(ur,IWr),e(ur,Tk),e(Tk,NWr),e(Tk,aAe),e(aAe,qWr),e(Tk,jWr),e(ur,DWr),e(ur,Yt),M(Mk,Yt,null),e(Yt,GWr),e(Yt,nAe),e(nAe,OWr),e(Yt,VWr),e(Yt,ff),e(ff,XWr),e(ff,sAe),e(sAe,zWr),e(ff,WWr),e(ff,Zoe),e(Zoe,QWr),e(ff,UWr),e(Yt,HWr),M(J0,Yt,null),e(ur,JWr),e(ur,Wr),M(Ek,Wr,null),e(Wr,YWr),e(Wr,lAe),e(lAe,KWr),e(Wr,ZWr),e(Wr,xn),e(xn,eQr),e(xn,iAe),e(iAe,oQr),e(xn,rQr),e(xn,dAe),e(dAe,tQr),e(xn,aQr),e(xn,cAe),e(cAe,nQr),e(xn,sQr),e(Wr,lQr),e(Wr,fAe),e(fAe,Y0),e(Y0,mAe),e(mAe,iQr),e(Y0,dQr),e(Y0,ere),e(ere,cQr),e(Y0,fQr),e(Wr,mQr),M(K0,Wr,null),b(f,kHe,u),b(f,mf,u),e(mf,Z0),e(Z0,gAe),M(Ck,gAe,null),e(mf,gQr),e(mf,hAe),e(hAe,hQr),b(f,SHe,u),b(f,br,u),M(wk,br,null),e(br,pQr),e(br,gf),e(gf,_Qr),e(gf,ore),e(ore,uQr),e(gf,bQr),e(gf,rre),e(rre,vQr),e(gf,FQr),e(br,TQr),e(br,Ak),e(Ak,MQr),e(Ak,pAe),e(pAe,EQr),e(Ak,CQr),e(br,wQr),e(br,Kt),M(Lk,Kt,null),e(Kt,AQr),e(Kt,_Ae),e(_Ae,LQr),e(Kt,yQr),e(Kt,hf),e(hf,xQr),e(hf,uAe),e(uAe,$Qr),e(hf,kQr),e(hf,tre),e(tre,SQr),e(hf,RQr),e(Kt,PQr),M(ew,Kt,null),e(br,BQr),e(br,Qr),M(yk,Qr,null),e(Qr,IQr),e(Qr,bAe),e(bAe,NQr),e(Qr,qQr),e(Qr,$n),e($n,jQr),e($n,vAe),e(vAe,DQr),e($n,GQr),e($n,FAe),e(FAe,OQr),e($n,VQr),e($n,TAe),e(TAe,XQr),e($n,zQr),e(Qr,WQr),e(Qr,MAe),e(MAe,ow),e(ow,EAe),e(EAe,QQr),e(ow,UQr),e(ow,are),e(are,HQr),e(ow,JQr),e(Qr,YQr),M(rw,Qr,null),b(f,RHe,u),b(f,pf,u),e(pf,tw),e(tw,CAe),M(xk,CAe,null),e(pf,KQr),e(pf,wAe),e(wAe,ZQr),b(f,PHe,u),b(f,vr,u),M($k,vr,null),e(vr,eUr),e(vr,_f),e(_f,oUr),e(_f,nre),e(nre,rUr),e(_f,tUr),e(_f,sre),e(sre,aUr),e(_f,nUr),e(vr,sUr),e(vr,kk),e(kk,lUr),e(kk,AAe),e(AAe,iUr),e(kk,dUr),e(vr,cUr),e(vr,Zt),M(Sk,Zt,null),e(Zt,fUr),e(Zt,LAe),e(LAe,mUr),e(Zt,gUr),e(Zt,uf),e(uf,hUr),e(uf,yAe),e(yAe,pUr),e(uf,_Ur),e(uf,lre),e(lre,uUr),e(uf,bUr),e(Zt,vUr),M(aw,Zt,null),e(vr,FUr),e(vr,Ur),M(Rk,Ur,null),e(Ur,TUr),e(Ur,xAe),e(xAe,MUr),e(Ur,EUr),e(Ur,kn),e(kn,CUr),e(kn,$Ae),e($Ae,wUr),e(kn,AUr),e(kn,kAe),e(kAe,LUr),e(kn,yUr),e(kn,SAe),e(SAe,xUr),e(kn,$Ur),e(Ur,kUr),e(Ur,re),e(re,nw),e(nw,RAe),e(RAe,SUr),e(nw,RUr),e(nw,ire),e(ire,PUr),e(nw,BUr),e(re,IUr),e(re,sw),e(sw,PAe),e(PAe,NUr),e(sw,qUr),e(sw,dre),e(dre,jUr),e(sw,DUr),e(re,GUr),e(re,lw),e(lw,BAe),e(BAe,OUr),e(lw,VUr),e(lw,cre),e(cre,XUr),e(lw,zUr),e(re,WUr),e(re,iw),e(iw,IAe),e(IAe,QUr),e(iw,UUr),e(iw,fre),e(fre,HUr),e(iw,JUr),e(re,YUr),e(re,dw),e(dw,NAe),e(NAe,KUr),e(dw,ZUr),e(dw,mre),e(mre,eHr),e(dw,oHr),e(re,rHr),e(re,cw),e(cw,qAe),e(qAe,tHr),e(cw,aHr),e(cw,gre),e(gre,nHr),e(cw,sHr),e(re,lHr),e(re,fw),e(fw,jAe),e(jAe,iHr),e(fw,dHr),e(fw,hre),e(hre,cHr),e(fw,fHr),e(re,mHr),e(re,mw),e(mw,DAe),e(DAe,gHr),e(mw,hHr),e(mw,pre),e(pre,pHr),e(mw,_Hr),e(re,uHr),e(re,gw),e(gw,GAe),e(GAe,bHr),e(gw,vHr),e(gw,_re),e(_re,FHr),e(gw,THr),e(re,MHr),e(re,hw),e(hw,OAe),e(OAe,EHr),e(hw,CHr),e(hw,ure),e(ure,wHr),e(hw,AHr),e(re,LHr),e(re,pw),e(pw,VAe),e(VAe,yHr),e(pw,xHr),e(pw,bre),e(bre,$Hr),e(pw,kHr),e(re,SHr),e(re,_w),e(_w,XAe),e(XAe,RHr),e(_w,PHr),e(_w,vre),e(vre,BHr),e(_w,IHr),e(re,NHr),e(re,uw),e(uw,zAe),e(zAe,qHr),e(uw,jHr),e(uw,Fre),e(Fre,DHr),e(uw,GHr),e(re,OHr),e(re,bw),e(bw,WAe),e(WAe,VHr),e(bw,XHr),e(bw,Tre),e(Tre,zHr),e(bw,WHr),e(re,QHr),e(re,vw),e(vw,QAe),e(QAe,UHr),e(vw,HHr),e(vw,Mre),e(Mre,JHr),e(vw,YHr),e(re,KHr),e(re,Fw),e(Fw,UAe),e(UAe,ZHr),e(Fw,eJr),e(Fw,Ere),e(Ere,oJr),e(Fw,rJr),e(re,tJr),e(re,Tw),e(Tw,HAe),e(HAe,aJr),e(Tw,nJr),e(Tw,Cre),e(Cre,sJr),e(Tw,lJr),e(re,iJr),e(re,Mw),e(Mw,JAe),e(JAe,dJr),e(Mw,cJr),e(Mw,wre),e(wre,fJr),e(Mw,mJr),e(re,gJr),e(re,Ew),e(Ew,YAe),e(YAe,hJr),e(Ew,pJr),e(Ew,Are),e(Are,_Jr),e(Ew,uJr),e(re,bJr),e(re,Cw),e(Cw,KAe),e(KAe,vJr),e(Cw,FJr),e(Cw,Lre),e(Lre,TJr),e(Cw,MJr),e(re,EJr),e(re,ww),e(ww,ZAe),e(ZAe,CJr),e(ww,wJr),e(ww,yre),e(yre,AJr),e(ww,LJr),e(re,yJr),e(re,Aw),e(Aw,e7e),e(e7e,xJr),e(Aw,$Jr),e(Aw,xre),e(xre,kJr),e(Aw,SJr),e(re,RJr),e(re,Lw),e(Lw,o7e),e(o7e,PJr),e(Lw,BJr),e(Lw,$re),e($re,IJr),e(Lw,NJr),e(re,qJr),e(re,yw),e(yw,r7e),e(r7e,jJr),e(yw,DJr),e(yw,kre),e(kre,GJr),e(yw,OJr),e(re,VJr),e(re,xw),e(xw,t7e),e(t7e,XJr),e(xw,zJr),e(xw,Sre),e(Sre,WJr),e(xw,QJr),e(re,UJr),e(re,$w),e($w,a7e),e(a7e,HJr),e($w,JJr),e($w,Rre),e(Rre,YJr),e($w,KJr),e(re,ZJr),e(re,kw),e(kw,n7e),e(n7e,eYr),e(kw,oYr),e(kw,Pre),e(Pre,rYr),e(kw,tYr),e(Ur,aYr),M(Sw,Ur,null),b(f,BHe,u),b(f,bf,u),e(bf,Rw),e(Rw,s7e),M(Pk,s7e,null),e(bf,nYr),e(bf,l7e),e(l7e,sYr),b(f,IHe,u),b(f,Fr,u),M(Bk,Fr,null),e(Fr,lYr),e(Fr,vf),e(vf,iYr),e(vf,Bre),e(Bre,dYr),e(vf,cYr),e(vf,Ire),e(Ire,fYr),e(vf,mYr),e(Fr,gYr),e(Fr,Ik),e(Ik,hYr),e(Ik,i7e),e(i7e,pYr),e(Ik,_Yr),e(Fr,uYr),e(Fr,ea),M(Nk,ea,null),e(ea,bYr),e(ea,d7e),e(d7e,vYr),e(ea,FYr),e(ea,Ff),e(Ff,TYr),e(Ff,c7e),e(c7e,MYr),e(Ff,EYr),e(Ff,Nre),e(Nre,CYr),e(Ff,wYr),e(ea,AYr),M(Pw,ea,null),e(Fr,LYr),e(Fr,Hr),M(qk,Hr,null),e(Hr,yYr),e(Hr,f7e),e(f7e,xYr),e(Hr,$Yr),e(Hr,Sn),e(Sn,kYr),e(Sn,m7e),e(m7e,SYr),e(Sn,RYr),e(Sn,g7e),e(g7e,PYr),e(Sn,BYr),e(Sn,h7e),e(h7e,IYr),e(Sn,NYr),e(Hr,qYr),e(Hr,xe),e(xe,Bw),e(Bw,p7e),e(p7e,jYr),e(Bw,DYr),e(Bw,qre),e(qre,GYr),e(Bw,OYr),e(xe,VYr),e(xe,Iw),e(Iw,_7e),e(_7e,XYr),e(Iw,zYr),e(Iw,jre),e(jre,WYr),e(Iw,QYr),e(xe,UYr),e(xe,Nw),e(Nw,u7e),e(u7e,HYr),e(Nw,JYr),e(Nw,Dre),e(Dre,YYr),e(Nw,KYr),e(xe,ZYr),e(xe,qw),e(qw,b7e),e(b7e,eKr),e(qw,oKr),e(qw,Gre),e(Gre,rKr),e(qw,tKr),e(xe,aKr),e(xe,jw),e(jw,v7e),e(v7e,nKr),e(jw,sKr),e(jw,Ore),e(Ore,lKr),e(jw,iKr),e(xe,dKr),e(xe,Dw),e(Dw,F7e),e(F7e,cKr),e(Dw,fKr),e(Dw,Vre),e(Vre,mKr),e(Dw,gKr),e(xe,hKr),e(xe,Gw),e(Gw,T7e),e(T7e,pKr),e(Gw,_Kr),e(Gw,Xre),e(Xre,uKr),e(Gw,bKr),e(xe,vKr),e(xe,Ow),e(Ow,M7e),e(M7e,FKr),e(Ow,TKr),e(Ow,zre),e(zre,MKr),e(Ow,EKr),e(xe,CKr),e(xe,Vw),e(Vw,E7e),e(E7e,wKr),e(Vw,AKr),e(Vw,Wre),e(Wre,LKr),e(Vw,yKr),e(xe,xKr),e(xe,Xw),e(Xw,C7e),e(C7e,$Kr),e(Xw,kKr),e(Xw,Qre),e(Qre,SKr),e(Xw,RKr),e(Hr,PKr),M(zw,Hr,null),b(f,NHe,u),b(f,Tf,u),e(Tf,Ww),e(Ww,w7e),M(jk,w7e,null),e(Tf,BKr),e(Tf,A7e),e(A7e,IKr),b(f,qHe,u),b(f,Tr,u),M(Dk,Tr,null),e(Tr,NKr),e(Tr,Mf),e(Mf,qKr),e(Mf,Ure),e(Ure,jKr),e(Mf,DKr),e(Mf,Hre),e(Hre,GKr),e(Mf,OKr),e(Tr,VKr),e(Tr,Gk),e(Gk,XKr),e(Gk,L7e),e(L7e,zKr),e(Gk,WKr),e(Tr,QKr),e(Tr,oa),M(Ok,oa,null),e(oa,UKr),e(oa,y7e),e(y7e,HKr),e(oa,JKr),e(oa,Ef),e(Ef,YKr),e(Ef,x7e),e(x7e,KKr),e(Ef,ZKr),e(Ef,Jre),e(Jre,eZr),e(Ef,oZr),e(oa,rZr),M(Qw,oa,null),e(Tr,tZr),e(Tr,Jr),M(Vk,Jr,null),e(Jr,aZr),e(Jr,$7e),e($7e,nZr),e(Jr,sZr),e(Jr,Rn),e(Rn,lZr),e(Rn,k7e),e(k7e,iZr),e(Rn,dZr),e(Rn,S7e),e(S7e,cZr),e(Rn,fZr),e(Rn,R7e),e(R7e,mZr),e(Rn,gZr),e(Jr,hZr),e(Jr,Ee),e(Ee,Uw),e(Uw,P7e),e(P7e,pZr),e(Uw,_Zr),e(Uw,Yre),e(Yre,uZr),e(Uw,bZr),e(Ee,vZr),e(Ee,Hw),e(Hw,B7e),e(B7e,FZr),e(Hw,TZr),e(Hw,Kre),e(Kre,MZr),e(Hw,EZr),e(Ee,CZr),e(Ee,Jw),e(Jw,I7e),e(I7e,wZr),e(Jw,AZr),e(Jw,Zre),e(Zre,LZr),e(Jw,yZr),e(Ee,xZr),e(Ee,Yw),e(Yw,N7e),e(N7e,$Zr),e(Yw,kZr),e(Yw,ete),e(ete,SZr),e(Yw,RZr),e(Ee,PZr),e(Ee,Kw),e(Kw,q7e),e(q7e,BZr),e(Kw,IZr),e(Kw,ote),e(ote,NZr),e(Kw,qZr),e(Ee,jZr),e(Ee,Zw),e(Zw,j7e),e(j7e,DZr),e(Zw,GZr),e(Zw,rte),e(rte,OZr),e(Zw,VZr),e(Ee,XZr),e(Ee,eA),e(eA,D7e),e(D7e,zZr),e(eA,WZr),e(eA,tte),e(tte,QZr),e(eA,UZr),e(Ee,HZr),e(Ee,oA),e(oA,G7e),e(G7e,JZr),e(oA,YZr),e(oA,ate),e(ate,KZr),e(oA,ZZr),e(Ee,eet),e(Ee,rA),e(rA,O7e),e(O7e,oet),e(rA,ret),e(rA,nte),e(nte,tet),e(rA,aet),e(Ee,net),e(Ee,tA),e(tA,V7e),e(V7e,set),e(tA,iet),e(tA,ste),e(ste,det),e(tA,cet),e(Ee,fet),e(Ee,aA),e(aA,X7e),e(X7e,met),e(aA,get),e(aA,lte),e(lte,het),e(aA,pet),e(Ee,_et),e(Ee,nA),e(nA,z7e),e(z7e,uet),e(nA,bet),e(nA,ite),e(ite,vet),e(nA,Fet),e(Ee,Tet),e(Ee,sA),e(sA,W7e),e(W7e,Met),e(sA,Eet),e(sA,dte),e(dte,Cet),e(sA,wet),e(Jr,Aet),M(lA,Jr,null),b(f,jHe,u),b(f,Cf,u),e(Cf,iA),e(iA,Q7e),M(Xk,Q7e,null),e(Cf,Let),e(Cf,U7e),e(U7e,yet),b(f,DHe,u),b(f,Mr,u),M(zk,Mr,null),e(Mr,xet),e(Mr,wf),e(wf,$et),e(wf,cte),e(cte,ket),e(wf,Set),e(wf,fte),e(fte,Ret),e(wf,Pet),e(Mr,Bet),e(Mr,Wk),e(Wk,Iet),e(Wk,H7e),e(H7e,Net),e(Wk,qet),e(Mr,jet),e(Mr,ra),M(Qk,ra,null),e(ra,Det),e(ra,J7e),e(J7e,Get),e(ra,Oet),e(ra,Af),e(Af,Vet),e(Af,Y7e),e(Y7e,Xet),e(Af,zet),e(Af,mte),e(mte,Wet),e(Af,Qet),e(ra,Uet),M(dA,ra,null),e(Mr,Het),e(Mr,Yr),M(Uk,Yr,null),e(Yr,Jet),e(Yr,K7e),e(K7e,Yet),e(Yr,Ket),e(Yr,Pn),e(Pn,Zet),e(Pn,Z7e),e(Z7e,eot),e(Pn,oot),e(Pn,eLe),e(eLe,rot),e(Pn,tot),e(Pn,oLe),e(oLe,aot),e(Pn,not),e(Yr,sot),e(Yr,$e),e($e,cA),e(cA,rLe),e(rLe,lot),e(cA,iot),e(cA,gte),e(gte,dot),e(cA,cot),e($e,fot),e($e,fA),e(fA,tLe),e(tLe,mot),e(fA,got),e(fA,hte),e(hte,hot),e(fA,pot),e($e,_ot),e($e,mA),e(mA,aLe),e(aLe,uot),e(mA,bot),e(mA,pte),e(pte,vot),e(mA,Fot),e($e,Tot),e($e,gA),e(gA,nLe),e(nLe,Mot),e(gA,Eot),e(gA,_te),e(_te,Cot),e(gA,wot),e($e,Aot),e($e,hA),e(hA,sLe),e(sLe,Lot),e(hA,yot),e(hA,ute),e(ute,xot),e(hA,$ot),e($e,kot),e($e,pA),e(pA,lLe),e(lLe,Sot),e(pA,Rot),e(pA,bte),e(bte,Pot),e(pA,Bot),e($e,Iot),e($e,_A),e(_A,iLe),e(iLe,Not),e(_A,qot),e(_A,vte),e(vte,jot),e(_A,Dot),e($e,Got),e($e,uA),e(uA,dLe),e(dLe,Oot),e(uA,Vot),e(uA,Fte),e(Fte,Xot),e(uA,zot),e($e,Wot),e($e,bA),e(bA,cLe),e(cLe,Qot),e(bA,Uot),e(bA,Tte),e(Tte,Hot),e(bA,Jot),e($e,Yot),e($e,vA),e(vA,fLe),e(fLe,Kot),e(vA,Zot),e(vA,Mte),e(Mte,ert),e(vA,ort),e(Yr,rrt),M(FA,Yr,null),b(f,GHe,u),b(f,Lf,u),e(Lf,TA),e(TA,mLe),M(Hk,mLe,null),e(Lf,trt),e(Lf,gLe),e(gLe,art),b(f,OHe,u),b(f,Er,u),M(Jk,Er,null),e(Er,nrt),e(Er,yf),e(yf,srt),e(yf,Ete),e(Ete,lrt),e(yf,irt),e(yf,Cte),e(Cte,drt),e(yf,crt),e(Er,frt),e(Er,Yk),e(Yk,mrt),e(Yk,hLe),e(hLe,grt),e(Yk,hrt),e(Er,prt),e(Er,ta),M(Kk,ta,null),e(ta,_rt),e(ta,pLe),e(pLe,urt),e(ta,brt),e(ta,xf),e(xf,vrt),e(xf,_Le),e(_Le,Frt),e(xf,Trt),e(xf,wte),e(wte,Mrt),e(xf,Ert),e(ta,Crt),M(MA,ta,null),e(Er,wrt),e(Er,Kr),M(Zk,Kr,null),e(Kr,Art),e(Kr,uLe),e(uLe,Lrt),e(Kr,yrt),e(Kr,Bn),e(Bn,xrt),e(Bn,bLe),e(bLe,$rt),e(Bn,krt),e(Bn,vLe),e(vLe,Srt),e(Bn,Rrt),e(Bn,FLe),e(FLe,Prt),e(Bn,Brt),e(Kr,Irt),e(Kr,ke),e(ke,EA),e(EA,TLe),e(TLe,Nrt),e(EA,qrt),e(EA,Ate),e(Ate,jrt),e(EA,Drt),e(ke,Grt),e(ke,CA),e(CA,MLe),e(MLe,Ort),e(CA,Vrt),e(CA,Lte),e(Lte,Xrt),e(CA,zrt),e(ke,Wrt),e(ke,wA),e(wA,ELe),e(ELe,Qrt),e(wA,Urt),e(wA,yte),e(yte,Hrt),e(wA,Jrt),e(ke,Yrt),e(ke,AA),e(AA,CLe),e(CLe,Krt),e(AA,Zrt),e(AA,xte),e(xte,ett),e(AA,ott),e(ke,rtt),e(ke,LA),e(LA,wLe),e(wLe,ttt),e(LA,att),e(LA,$te),e($te,ntt),e(LA,stt),e(ke,ltt),e(ke,yA),e(yA,ALe),e(ALe,itt),e(yA,dtt),e(yA,kte),e(kte,ctt),e(yA,ftt),e(ke,mtt),e(ke,xA),e(xA,LLe),e(LLe,gtt),e(xA,htt),e(xA,Ste),e(Ste,ptt),e(xA,_tt),e(ke,utt),e(ke,$A),e($A,yLe),e(yLe,btt),e($A,vtt),e($A,Rte),e(Rte,Ftt),e($A,Ttt),e(ke,Mtt),e(ke,kA),e(kA,xLe),e(xLe,Ett),e(kA,Ctt),e(kA,Pte),e(Pte,wtt),e(kA,Att),e(ke,Ltt),e(ke,SA),e(SA,$Le),e($Le,ytt),e(SA,xtt),e(SA,Bte),e(Bte,$tt),e(SA,ktt),e(Kr,Stt),M(RA,Kr,null),b(f,VHe,u),b(f,$f,u),e($f,PA),e(PA,kLe),M(eS,kLe,null),e($f,Rtt),e($f,SLe),e(SLe,Ptt),b(f,XHe,u),b(f,Cr,u),M(oS,Cr,null),e(Cr,Btt),e(Cr,kf),e(kf,Itt),e(kf,Ite),e(Ite,Ntt),e(kf,qtt),e(kf,Nte),e(Nte,jtt),e(kf,Dtt),e(Cr,Gtt),e(Cr,rS),e(rS,Ott),e(rS,RLe),e(RLe,Vtt),e(rS,Xtt),e(Cr,ztt),e(Cr,aa),M(tS,aa,null),e(aa,Wtt),e(aa,PLe),e(PLe,Qtt),e(aa,Utt),e(aa,Sf),e(Sf,Htt),e(Sf,BLe),e(BLe,Jtt),e(Sf,Ytt),e(Sf,qte),e(qte,Ktt),e(Sf,Ztt),e(aa,eat),M(BA,aa,null),e(Cr,oat),e(Cr,Zr),M(aS,Zr,null),e(Zr,rat),e(Zr,ILe),e(ILe,tat),e(Zr,aat),e(Zr,In),e(In,nat),e(In,NLe),e(NLe,sat),e(In,lat),e(In,qLe),e(qLe,iat),e(In,dat),e(In,jLe),e(jLe,cat),e(In,fat),e(Zr,mat),e(Zr,Se),e(Se,IA),e(IA,DLe),e(DLe,gat),e(IA,hat),e(IA,jte),e(jte,pat),e(IA,_at),e(Se,uat),e(Se,NA),e(NA,GLe),e(GLe,bat),e(NA,vat),e(NA,Dte),e(Dte,Fat),e(NA,Tat),e(Se,Mat),e(Se,qA),e(qA,OLe),e(OLe,Eat),e(qA,Cat),e(qA,Gte),e(Gte,wat),e(qA,Aat),e(Se,Lat),e(Se,jA),e(jA,VLe),e(VLe,yat),e(jA,xat),e(jA,Ote),e(Ote,$at),e(jA,kat),e(Se,Sat),e(Se,DA),e(DA,XLe),e(XLe,Rat),e(DA,Pat),e(DA,Vte),e(Vte,Bat),e(DA,Iat),e(Se,Nat),e(Se,GA),e(GA,zLe),e(zLe,qat),e(GA,jat),e(GA,Xte),e(Xte,Dat),e(GA,Gat),e(Se,Oat),e(Se,OA),e(OA,WLe),e(WLe,Vat),e(OA,Xat),e(OA,zte),e(zte,zat),e(OA,Wat),e(Se,Qat),e(Se,VA),e(VA,QLe),e(QLe,Uat),e(VA,Hat),e(VA,Wte),e(Wte,Jat),e(VA,Yat),e(Se,Kat),e(Se,XA),e(XA,ULe),e(ULe,Zat),e(XA,ent),e(XA,Qte),e(Qte,ont),e(XA,rnt),e(Se,tnt),e(Se,zA),e(zA,HLe),e(HLe,ant),e(zA,nnt),e(zA,Ute),e(Ute,snt),e(zA,lnt),e(Zr,int),M(WA,Zr,null),b(f,zHe,u),b(f,Rf,u),e(Rf,QA),e(QA,JLe),M(nS,JLe,null),e(Rf,dnt),e(Rf,YLe),e(YLe,cnt),b(f,WHe,u),b(f,wr,u),M(sS,wr,null),e(wr,fnt),e(wr,Pf),e(Pf,mnt),e(Pf,Hte),e(Hte,gnt),e(Pf,hnt),e(Pf,Jte),e(Jte,pnt),e(Pf,_nt),e(wr,unt),e(wr,lS),e(lS,bnt),e(lS,KLe),e(KLe,vnt),e(lS,Fnt),e(wr,Tnt),e(wr,na),M(iS,na,null),e(na,Mnt),e(na,ZLe),e(ZLe,Ent),e(na,Cnt),e(na,Bf),e(Bf,wnt),e(Bf,eye),e(eye,Ant),e(Bf,Lnt),e(Bf,Yte),e(Yte,ynt),e(Bf,xnt),e(na,$nt),M(UA,na,null),e(wr,knt),e(wr,et),M(dS,et,null),e(et,Snt),e(et,oye),e(oye,Rnt),e(et,Pnt),e(et,Nn),e(Nn,Bnt),e(Nn,rye),e(rye,Int),e(Nn,Nnt),e(Nn,tye),e(tye,qnt),e(Nn,jnt),e(Nn,aye),e(aye,Dnt),e(Nn,Gnt),e(et,Ont),e(et,Re),e(Re,HA),e(HA,nye),e(nye,Vnt),e(HA,Xnt),e(HA,Kte),e(Kte,znt),e(HA,Wnt),e(Re,Qnt),e(Re,JA),e(JA,sye),e(sye,Unt),e(JA,Hnt),e(JA,Zte),e(Zte,Jnt),e(JA,Ynt),e(Re,Knt),e(Re,YA),e(YA,lye),e(lye,Znt),e(YA,est),e(YA,eae),e(eae,ost),e(YA,rst),e(Re,tst),e(Re,KA),e(KA,iye),e(iye,ast),e(KA,nst),e(KA,oae),e(oae,sst),e(KA,lst),e(Re,ist),e(Re,ZA),e(ZA,dye),e(dye,dst),e(ZA,cst),e(ZA,rae),e(rae,fst),e(ZA,mst),e(Re,gst),e(Re,e7),e(e7,cye),e(cye,hst),e(e7,pst),e(e7,tae),e(tae,_st),e(e7,ust),e(Re,bst),e(Re,o7),e(o7,fye),e(fye,vst),e(o7,Fst),e(o7,aae),e(aae,Tst),e(o7,Mst),e(Re,Est),e(Re,r7),e(r7,mye),e(mye,Cst),e(r7,wst),e(r7,nae),e(nae,Ast),e(r7,Lst),e(Re,yst),e(Re,t7),e(t7,gye),e(gye,xst),e(t7,$st),e(t7,sae),e(sae,kst),e(t7,Sst),e(Re,Rst),e(Re,a7),e(a7,hye),e(hye,Pst),e(a7,Bst),e(a7,lae),e(lae,Ist),e(a7,Nst),e(et,qst),M(n7,et,null),b(f,QHe,u),b(f,If,u),e(If,s7),e(s7,pye),M(cS,pye,null),e(If,jst),e(If,_ye),e(_ye,Dst),b(f,UHe,u),b(f,Ar,u),M(fS,Ar,null),e(Ar,Gst),e(Ar,Nf),e(Nf,Ost),e(Nf,iae),e(iae,Vst),e(Nf,Xst),e(Nf,dae),e(dae,zst),e(Nf,Wst),e(Ar,Qst),e(Ar,mS),e(mS,Ust),e(mS,uye),e(uye,Hst),e(mS,Jst),e(Ar,Yst),e(Ar,sa),M(gS,sa,null),e(sa,Kst),e(sa,bye),e(bye,Zst),e(sa,elt),e(sa,qf),e(qf,olt),e(qf,vye),e(vye,rlt),e(qf,tlt),e(qf,cae),e(cae,alt),e(qf,nlt),e(sa,slt),M(l7,sa,null),e(Ar,llt),e(Ar,ot),M(hS,ot,null),e(ot,ilt),e(ot,Fye),e(Fye,dlt),e(ot,clt),e(ot,qn),e(qn,flt),e(qn,Tye),e(Tye,mlt),e(qn,glt),e(qn,Mye),e(Mye,hlt),e(qn,plt),e(qn,Eye),e(Eye,_lt),e(qn,ult),e(ot,blt),e(ot,Xe),e(Xe,i7),e(i7,Cye),e(Cye,vlt),e(i7,Flt),e(i7,fae),e(fae,Tlt),e(i7,Mlt),e(Xe,Elt),e(Xe,d7),e(d7,wye),e(wye,Clt),e(d7,wlt),e(d7,mae),e(mae,Alt),e(d7,Llt),e(Xe,ylt),e(Xe,c7),e(c7,Aye),e(Aye,xlt),e(c7,$lt),e(c7,gae),e(gae,klt),e(c7,Slt),e(Xe,Rlt),e(Xe,f7),e(f7,Lye),e(Lye,Plt),e(f7,Blt),e(f7,hae),e(hae,Ilt),e(f7,Nlt),e(Xe,qlt),e(Xe,m7),e(m7,yye),e(yye,jlt),e(m7,Dlt),e(m7,pae),e(pae,Glt),e(m7,Olt),e(Xe,Vlt),e(Xe,g7),e(g7,xye),e(xye,Xlt),e(g7,zlt),e(g7,_ae),e(_ae,Wlt),e(g7,Qlt),e(Xe,Ult),e(Xe,h7),e(h7,$ye),e($ye,Hlt),e(h7,Jlt),e(h7,uae),e(uae,Ylt),e(h7,Klt),e(Xe,Zlt),e(Xe,p7),e(p7,kye),e(kye,eit),e(p7,oit),e(p7,bae),e(bae,rit),e(p7,tit),e(ot,ait),M(_7,ot,null),b(f,HHe,u),b(f,jf,u),e(jf,u7),e(u7,Sye),M(pS,Sye,null),e(jf,nit),e(jf,Rye),e(Rye,sit),b(f,JHe,u),b(f,Lr,u),M(_S,Lr,null),e(Lr,lit),e(Lr,Df),e(Df,iit),e(Df,vae),e(vae,dit),e(Df,cit),e(Df,Fae),e(Fae,fit),e(Df,mit),e(Lr,git),e(Lr,uS),e(uS,hit),e(uS,Pye),e(Pye,pit),e(uS,_it),e(Lr,uit),e(Lr,la),M(bS,la,null),e(la,bit),e(la,Bye),e(Bye,vit),e(la,Fit),e(la,Gf),e(Gf,Tit),e(Gf,Iye),e(Iye,Mit),e(Gf,Eit),e(Gf,Tae),e(Tae,Cit),e(Gf,wit),e(la,Ait),M(b7,la,null),e(Lr,Lit),e(Lr,rt),M(vS,rt,null),e(rt,yit),e(rt,Nye),e(Nye,xit),e(rt,$it),e(rt,jn),e(jn,kit),e(jn,qye),e(qye,Sit),e(jn,Rit),e(jn,jye),e(jye,Pit),e(jn,Bit),e(jn,Dye),e(Dye,Iit),e(jn,Nit),e(rt,qit),e(rt,ze),e(ze,v7),e(v7,Gye),e(Gye,jit),e(v7,Dit),e(v7,Mae),e(Mae,Git),e(v7,Oit),e(ze,Vit),e(ze,F7),e(F7,Oye),e(Oye,Xit),e(F7,zit),e(F7,Eae),e(Eae,Wit),e(F7,Qit),e(ze,Uit),e(ze,T7),e(T7,Vye),e(Vye,Hit),e(T7,Jit),e(T7,Cae),e(Cae,Yit),e(T7,Kit),e(ze,Zit),e(ze,M7),e(M7,Xye),e(Xye,edt),e(M7,odt),e(M7,wae),e(wae,rdt),e(M7,tdt),e(ze,adt),e(ze,E7),e(E7,zye),e(zye,ndt),e(E7,sdt),e(E7,Aae),e(Aae,ldt),e(E7,idt),e(ze,ddt),e(ze,C7),e(C7,Wye),e(Wye,cdt),e(C7,fdt),e(C7,Lae),e(Lae,mdt),e(C7,gdt),e(ze,hdt),e(ze,w7),e(w7,Qye),e(Qye,pdt),e(w7,_dt),e(w7,yae),e(yae,udt),e(w7,bdt),e(ze,vdt),e(ze,A7),e(A7,Uye),e(Uye,Fdt),e(A7,Tdt),e(A7,xae),e(xae,Mdt),e(A7,Edt),e(rt,Cdt),M(L7,rt,null),b(f,YHe,u),b(f,Of,u),e(Of,y7),e(y7,Hye),M(FS,Hye,null),e(Of,wdt),e(Of,Jye),e(Jye,Adt),b(f,KHe,u),b(f,yr,u),M(TS,yr,null),e(yr,Ldt),e(yr,Vf),e(Vf,ydt),e(Vf,$ae),e($ae,xdt),e(Vf,$dt),e(Vf,kae),e(kae,kdt),e(Vf,Sdt),e(yr,Rdt),e(yr,MS),e(MS,Pdt),e(MS,Yye),e(Yye,Bdt),e(MS,Idt),e(yr,Ndt),e(yr,ia),M(ES,ia,null),e(ia,qdt),e(ia,Kye),e(Kye,jdt),e(ia,Ddt),e(ia,Xf),e(Xf,Gdt),e(Xf,Zye),e(Zye,Odt),e(Xf,Vdt),e(Xf,Sae),e(Sae,Xdt),e(Xf,zdt),e(ia,Wdt),M(x7,ia,null),e(yr,Qdt),e(yr,tt),M(CS,tt,null),e(tt,Udt),e(tt,e8e),e(e8e,Hdt),e(tt,Jdt),e(tt,Dn),e(Dn,Ydt),e(Dn,o8e),e(o8e,Kdt),e(Dn,Zdt),e(Dn,r8e),e(r8e,ect),e(Dn,oct),e(Dn,t8e),e(t8e,rct),e(Dn,tct),e(tt,act),e(tt,a8e),e(a8e,$7),e($7,n8e),e(n8e,nct),e($7,sct),e($7,Rae),e(Rae,lct),e($7,ict),e(tt,dct),M(k7,tt,null),b(f,ZHe,u),b(f,zf,u),e(zf,S7),e(S7,s8e),M(wS,s8e,null),e(zf,cct),e(zf,l8e),e(l8e,fct),b(f,eJe,u),b(f,xr,u),M(AS,xr,null),e(xr,mct),e(xr,Wf),e(Wf,gct),e(Wf,Pae),e(Pae,hct),e(Wf,pct),e(Wf,Bae),e(Bae,_ct),e(Wf,uct),e(xr,bct),e(xr,LS),e(LS,vct),e(LS,i8e),e(i8e,Fct),e(LS,Tct),e(xr,Mct),e(xr,da),M(yS,da,null),e(da,Ect),e(da,d8e),e(d8e,Cct),e(da,wct),e(da,Qf),e(Qf,Act),e(Qf,c8e),e(c8e,Lct),e(Qf,yct),e(Qf,Iae),e(Iae,xct),e(Qf,$ct),e(da,kct),M(R7,da,null),e(xr,Sct),e(xr,at),M(xS,at,null),e(at,Rct),e(at,f8e),e(f8e,Pct),e(at,Bct),e(at,Gn),e(Gn,Ict),e(Gn,m8e),e(m8e,Nct),e(Gn,qct),e(Gn,g8e),e(g8e,jct),e(Gn,Dct),e(Gn,h8e),e(h8e,Gct),e(Gn,Oct),e(at,Vct),e(at,$S),e($S,P7),e(P7,p8e),e(p8e,Xct),e(P7,zct),e(P7,Nae),e(Nae,Wct),e(P7,Qct),e($S,Uct),e($S,B7),e(B7,_8e),e(_8e,Hct),e(B7,Jct),e(B7,qae),e(qae,Yct),e(B7,Kct),e(at,Zct),M(I7,at,null),b(f,oJe,u),b(f,Uf,u),e(Uf,N7),e(N7,u8e),M(kS,u8e,null),e(Uf,eft),e(Uf,b8e),e(b8e,oft),b(f,rJe,u),b(f,$r,u),M(SS,$r,null),e($r,rft),e($r,Hf),e(Hf,tft),e(Hf,jae),e(jae,aft),e(Hf,nft),e(Hf,Dae),e(Dae,sft),e(Hf,lft),e($r,ift),e($r,RS),e(RS,dft),e(RS,v8e),e(v8e,cft),e(RS,fft),e($r,mft),e($r,ca),M(PS,ca,null),e(ca,gft),e(ca,F8e),e(F8e,hft),e(ca,pft),e(ca,Jf),e(Jf,_ft),e(Jf,T8e),e(T8e,uft),e(Jf,bft),e(Jf,Gae),e(Gae,vft),e(Jf,Fft),e(ca,Tft),M(q7,ca,null),e($r,Mft),e($r,nt),M(BS,nt,null),e(nt,Eft),e(nt,M8e),e(M8e,Cft),e(nt,wft),e(nt,On),e(On,Aft),e(On,E8e),e(E8e,Lft),e(On,yft),e(On,C8e),e(C8e,xft),e(On,$ft),e(On,w8e),e(w8e,kft),e(On,Sft),e(nt,Rft),e(nt,A8e),e(A8e,j7),e(j7,L8e),e(L8e,Pft),e(j7,Bft),e(j7,Oae),e(Oae,Ift),e(j7,Nft),e(nt,qft),M(D7,nt,null),tJe=!0},p(f,[u]){const IS={};u&2&&(IS.$$scope={dirty:u,ctx:f}),nm.$set(IS);const y8e={};u&2&&(y8e.$$scope={dirty:u,ctx:f}),Th.$set(y8e);const x8e={};u&2&&(x8e.$$scope={dirty:u,ctx:f}),tp.$set(x8e);const $8e={};u&2&&($8e.$$scope={dirty:u,ctx:f}),Xp.$set($8e);const NS={};u&2&&(NS.$$scope={dirty:u,ctx:f}),zp.$set(NS);const k8e={};u&2&&(k8e.$$scope={dirty:u,ctx:f}),h_.$set(k8e);const Vn={};u&2&&(Vn.$$scope={dirty:u,ctx:f}),p_.$set(Vn);const S8e={};u&2&&(S8e.$$scope={dirty:u,ctx:f}),b_.$set(S8e);const R8e={};u&2&&(R8e.$$scope={dirty:u,ctx:f}),L1.$set(R8e);const P8e={};u&2&&(P8e.$$scope={dirty:u,ctx:f}),x1.$set(P8e);const qS={};u&2&&(qS.$$scope={dirty:u,ctx:f}),C4.$set(qS);const B8e={};u&2&&(B8e.$$scope={dirty:u,ctx:f}),A4.$set(B8e);const jS={};u&2&&(jS.$$scope={dirty:u,ctx:f}),h2.$set(jS);const I8e={};u&2&&(I8e.$$scope={dirty:u,ctx:f}),_2.$set(I8e);const DS={};u&2&&(DS.$$scope={dirty:u,ctx:f}),rb.$set(DS);const N8e={};u&2&&(N8e.$$scope={dirty:u,ctx:f}),ab.$set(N8e);const q8e={};u&2&&(q8e.$$scope={dirty:u,ctx:f}),wb.$set(q8e);const j8e={};u&2&&(j8e.$$scope={dirty:u,ctx:f}),Lb.$set(j8e);const Yf={};u&2&&(Yf.$$scope={dirty:u,ctx:f}),Lv.$set(Yf);const D8e={};u&2&&(D8e.$$scope={dirty:u,ctx:f}),xv.$set(D8e);const G8e={};u&2&&(G8e.$$scope={dirty:u,ctx:f}),i3.$set(G8e);const O8e={};u&2&&(O8e.$$scope={dirty:u,ctx:f}),c3.$set(O8e);const GS={};u&2&&(GS.$$scope={dirty:u,ctx:f}),b3.$set(GS);const V8e={};u&2&&(V8e.$$scope={dirty:u,ctx:f}),F3.$set(V8e);const X8e={};u&2&&(X8e.$$scope={dirty:u,ctx:f}),n5.$set(X8e);const z8e={};u&2&&(z8e.$$scope={dirty:u,ctx:f}),l5.$set(z8e);const dt={};u&2&&(dt.$$scope={dirty:u,ctx:f}),K5.$set(dt);const OS={};u&2&&(OS.$$scope={dirty:u,ctx:f}),e6.$set(OS);const W8e={};u&2&&(W8e.$$scope={dirty:u,ctx:f}),t6.$set(W8e);const VS={};u&2&&(VS.$$scope={dirty:u,ctx:f}),n6.$set(VS);const Q8e={};u&2&&(Q8e.$$scope={dirty:u,ctx:f}),T6.$set(Q8e);const ct={};u&2&&(ct.$$scope={dirty:u,ctx:f}),E6.$set(ct);const U8e={};u&2&&(U8e.$$scope={dirty:u,ctx:f}),A6.$set(U8e);const Kf={};u&2&&(Kf.$$scope={dirty:u,ctx:f}),y6.$set(Kf);const H8e={};u&2&&(H8e.$$scope={dirty:u,ctx:f}),k6.$set(H8e);const J8e={};u&2&&(J8e.$$scope={dirty:u,ctx:f}),R6.$set(J8e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),I6.$set(L);const G7={};u&2&&(G7.$$scope={dirty:u,ctx:f}),q6.$set(G7);const Y8e={};u&2&&(Y8e.$$scope={dirty:u,ctx:f}),H6.$set(Y8e);const K8e={};u&2&&(K8e.$$scope={dirty:u,ctx:f}),Y6.$set(K8e);const O7={};u&2&&(O7.$$scope={dirty:u,ctx:f}),aF.$set(O7);const Z8e={};u&2&&(Z8e.$$scope={dirty:u,ctx:f}),sF.$set(Z8e);const e9e={};u&2&&(e9e.$$scope={dirty:u,ctx:f}),bF.$set(e9e);const V7={};u&2&&(V7.$$scope={dirty:u,ctx:f}),FF.$set(V7);const o9e={};u&2&&(o9e.$$scope={dirty:u,ctx:f}),CF.$set(o9e);const r9e={};u&2&&(r9e.$$scope={dirty:u,ctx:f}),AF.$set(r9e);const X7={};u&2&&(X7.$$scope={dirty:u,ctx:f}),RF.$set(X7);const t9e={};u&2&&(t9e.$$scope={dirty:u,ctx:f}),BF.$set(t9e);const a9e={};u&2&&(a9e.$$scope={dirty:u,ctx:f}),GF.$set(a9e);const z7={};u&2&&(z7.$$scope={dirty:u,ctx:f}),VF.$set(z7);const n9e={};u&2&&(n9e.$$scope={dirty:u,ctx:f}),QF.$set(n9e);const s9e={};u&2&&(s9e.$$scope={dirty:u,ctx:f}),HF.$set(s9e);const W7={};u&2&&(W7.$$scope={dirty:u,ctx:f}),KF.$set(W7);const l9e={};u&2&&(l9e.$$scope={dirty:u,ctx:f}),eT.$set(l9e);const i9e={};u&2&&(i9e.$$scope={dirty:u,ctx:f}),lT.$set(i9e);const Q7={};u&2&&(Q7.$$scope={dirty:u,ctx:f}),dT.$set(Q7);const d9e={};u&2&&(d9e.$$scope={dirty:u,ctx:f}),mT.$set(d9e);const c9e={};u&2&&(c9e.$$scope={dirty:u,ctx:f}),hT.$set(c9e);const U7={};u&2&&(U7.$$scope={dirty:u,ctx:f}),mM.$set(U7);const f9e={};u&2&&(f9e.$$scope={dirty:u,ctx:f}),hM.$set(f9e);const m9e={};u&2&&(m9e.$$scope={dirty:u,ctx:f}),qM.$set(m9e);const H7={};u&2&&(H7.$$scope={dirty:u,ctx:f}),DM.$set(H7);const g9e={};u&2&&(g9e.$$scope={dirty:u,ctx:f}),oE.$set(g9e);const h9e={};u&2&&(h9e.$$scope={dirty:u,ctx:f}),tE.$set(h9e);const J7={};u&2&&(J7.$$scope={dirty:u,ctx:f}),fE.$set(J7);const p9e={};u&2&&(p9e.$$scope={dirty:u,ctx:f}),gE.$set(p9e);const _9e={};u&2&&(_9e.$$scope={dirty:u,ctx:f}),_E.$set(_9e);const Y7={};u&2&&(Y7.$$scope={dirty:u,ctx:f}),bE.$set(Y7);const u9e={};u&2&&(u9e.$$scope={dirty:u,ctx:f}),jE.$set(u9e);const b9e={};u&2&&(b9e.$$scope={dirty:u,ctx:f}),GE.$set(b9e);const K7={};u&2&&(K7.$$scope={dirty:u,ctx:f}),KE.$set(K7);const v9e={};u&2&&(v9e.$$scope={dirty:u,ctx:f}),eC.$set(v9e);const F9e={};u&2&&(F9e.$$scope={dirty:u,ctx:f}),LC.$set(F9e);const Z7={};u&2&&(Z7.$$scope={dirty:u,ctx:f}),xC.$set(Z7);const T9e={};u&2&&(T9e.$$scope={dirty:u,ctx:f}),QC.$set(T9e);const M9e={};u&2&&(M9e.$$scope={dirty:u,ctx:f}),HC.$set(M9e);const eL={};u&2&&(eL.$$scope={dirty:u,ctx:f}),KC.$set(eL);const E9e={};u&2&&(E9e.$$scope={dirty:u,ctx:f}),e0.$set(E9e);const C9e={};u&2&&(C9e.$$scope={dirty:u,ctx:f}),r0.$set(C9e);const oL={};u&2&&(oL.$$scope={dirty:u,ctx:f}),a0.$set(oL);const w9e={};u&2&&(w9e.$$scope={dirty:u,ctx:f}),w0.$set(w9e);const A9e={};u&2&&(A9e.$$scope={dirty:u,ctx:f}),L0.$set(A9e);const rL={};u&2&&(rL.$$scope={dirty:u,ctx:f}),U0.$set(rL);const L9e={};u&2&&(L9e.$$scope={dirty:u,ctx:f}),J0.$set(L9e);const y9e={};u&2&&(y9e.$$scope={dirty:u,ctx:f}),K0.$set(y9e);const tL={};u&2&&(tL.$$scope={dirty:u,ctx:f}),ew.$set(tL);const x9e={};u&2&&(x9e.$$scope={dirty:u,ctx:f}),rw.$set(x9e);const $9e={};u&2&&($9e.$$scope={dirty:u,ctx:f}),aw.$set($9e);const aL={};u&2&&(aL.$$scope={dirty:u,ctx:f}),Sw.$set(aL);const k9e={};u&2&&(k9e.$$scope={dirty:u,ctx:f}),Pw.$set(k9e);const S9e={};u&2&&(S9e.$$scope={dirty:u,ctx:f}),zw.$set(S9e);const nL={};u&2&&(nL.$$scope={dirty:u,ctx:f}),Qw.$set(nL);const R9e={};u&2&&(R9e.$$scope={dirty:u,ctx:f}),lA.$set(R9e);const P9e={};u&2&&(P9e.$$scope={dirty:u,ctx:f}),dA.$set(P9e);const sL={};u&2&&(sL.$$scope={dirty:u,ctx:f}),FA.$set(sL);const B9e={};u&2&&(B9e.$$scope={dirty:u,ctx:f}),MA.$set(B9e);const I9e={};u&2&&(I9e.$$scope={dirty:u,ctx:f}),RA.$set(I9e);const lL={};u&2&&(lL.$$scope={dirty:u,ctx:f}),BA.$set(lL);const N9e={};u&2&&(N9e.$$scope={dirty:u,ctx:f}),WA.$set(N9e);const q9e={};u&2&&(q9e.$$scope={dirty:u,ctx:f}),UA.$set(q9e);const iL={};u&2&&(iL.$$scope={dirty:u,ctx:f}),n7.$set(iL);const j9e={};u&2&&(j9e.$$scope={dirty:u,ctx:f}),l7.$set(j9e);const D9e={};u&2&&(D9e.$$scope={dirty:u,ctx:f}),_7.$set(D9e);const dL={};u&2&&(dL.$$scope={dirty:u,ctx:f}),b7.$set(dL);const G9e={};u&2&&(G9e.$$scope={dirty:u,ctx:f}),L7.$set(G9e);const O9e={};u&2&&(O9e.$$scope={dirty:u,ctx:f}),x7.$set(O9e);const cL={};u&2&&(cL.$$scope={dirty:u,ctx:f}),k7.$set(cL);const V9e={};u&2&&(V9e.$$scope={dirty:u,ctx:f}),R7.$set(V9e);const X9e={};u&2&&(X9e.$$scope={dirty:u,ctx:f}),I7.$set(X9e);const fL={};u&2&&(fL.$$scope={dirty:u,ctx:f}),q7.$set(fL);const z9e={};u&2&&(z9e.$$scope={dirty:u,ctx:f}),D7.$set(z9e)},i(f){tJe||(E(d.$$.fragment,f),E(ja.$$.fragment,f),E(p8.$$.fragment,f),E(_8.$$.fragment,f),E(nm.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(T8.$$.fragment,f),E(Th.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(L8.$$.fragment,f),E(tp.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(R8.$$.fragment,f),E(Xp.$$.fragment,f),E(zp.$$.fragment,f),E(P8.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(j8.$$.fragment,f),E(h_.$$.fragment,f),E(p_.$$.fragment,f),E(D8.$$.fragment,f),E(G8.$$.fragment,f),E(O8.$$.fragment,f),E(X8.$$.fragment,f),E(b_.$$.fragment,f),E(z8.$$.fragment,f),E(L1.$$.fragment,f),E(W8.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(x1.$$.fragment,f),E(J8.$$.fragment,f),E(C4.$$.fragment,f),E(Y8.$$.fragment,f),E(K8.$$.fragment,f),E(e9.$$.fragment,f),E(A4.$$.fragment,f),E(o9.$$.fragment,f),E(h2.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(_2.$$.fragment,f),E(s9.$$.fragment,f),E(rb.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E(ab.$$.fragment,f),E(f9.$$.fragment,f),E(wb.$$.fragment,f),E(m9.$$.fragment,f),E(g9.$$.fragment,f),E(p9.$$.fragment,f),E(Lb.$$.fragment,f),E(_9.$$.fragment,f),E(Lv.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(F9.$$.fragment,f),E(xv.$$.fragment,f),E(T9.$$.fragment,f),E(i3.$$.fragment,f),E(M9.$$.fragment,f),E(E9.$$.fragment,f),E(w9.$$.fragment,f),E(c3.$$.fragment,f),E(A9.$$.fragment,f),E(b3.$$.fragment,f),E(L9.$$.fragment,f),E(y9.$$.fragment,f),E($9.$$.fragment,f),E(F3.$$.fragment,f),E(k9.$$.fragment,f),E(n5.$$.fragment,f),E(S9.$$.fragment,f),E(R9.$$.fragment,f),E(B9.$$.fragment,f),E(l5.$$.fragment,f),E(I9.$$.fragment,f),E(K5.$$.fragment,f),E(N9.$$.fragment,f),E(q9.$$.fragment,f),E(D9.$$.fragment,f),E(e6.$$.fragment,f),E(G9.$$.fragment,f),E(t6.$$.fragment,f),E(O9.$$.fragment,f),E(V9.$$.fragment,f),E(z9.$$.fragment,f),E(n6.$$.fragment,f),E(W9.$$.fragment,f),E(T6.$$.fragment,f),E(Q9.$$.fragment,f),E(U9.$$.fragment,f),E(J9.$$.fragment,f),E(E6.$$.fragment,f),E(Y9.$$.fragment,f),E(A6.$$.fragment,f),E(K9.$$.fragment,f),E(Z9.$$.fragment,f),E(ox.$$.fragment,f),E(y6.$$.fragment,f),E(rx.$$.fragment,f),E(k6.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(R6.$$.fragment,f),E(lx.$$.fragment,f),E(I6.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(q6.$$.fragment,f),E(mx.$$.fragment,f),E(H6.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(_x.$$.fragment,f),E(Y6.$$.fragment,f),E(ux.$$.fragment,f),E(aF.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(sF.$$.fragment,f),E(Mx.$$.fragment,f),E(bF.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(FF.$$.fragment,f),E(Lx.$$.fragment,f),E(CF.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(AF.$$.fragment,f),E(Rx.$$.fragment,f),E(RF.$$.fragment,f),E(Px.$$.fragment,f),E(Bx.$$.fragment,f),E(Nx.$$.fragment,f),E(BF.$$.fragment,f),E(qx.$$.fragment,f),E(GF.$$.fragment,f),E(jx.$$.fragment,f),E(Dx.$$.fragment,f),E(Ox.$$.fragment,f),E(VF.$$.fragment,f),E(Vx.$$.fragment,f),E(QF.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(Ux.$$.fragment,f),E(HF.$$.fragment,f),E(Hx.$$.fragment,f),E(KF.$$.fragment,f),E(Jx.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(eT.$$.fragment,f),E(e$.$$.fragment,f),E(lT.$$.fragment,f),E(o$.$$.fragment,f),E(r$.$$.fragment,f),E(a$.$$.fragment,f),E(dT.$$.fragment,f),E(n$.$$.fragment,f),E(mT.$$.fragment,f),E(s$.$$.fragment,f),E(l$.$$.fragment,f),E(d$.$$.fragment,f),E(hT.$$.fragment,f),E(c$.$$.fragment,f),E(mM.$$.fragment,f),E(f$.$$.fragment,f),E(m$.$$.fragment,f),E(h$.$$.fragment,f),E(hM.$$.fragment,f),E(p$.$$.fragment,f),E(qM.$$.fragment,f),E(_$.$$.fragment,f),E(u$.$$.fragment,f),E(v$.$$.fragment,f),E(DM.$$.fragment,f),E(F$.$$.fragment,f),E(oE.$$.fragment,f),E(T$.$$.fragment,f),E(M$.$$.fragment,f),E(C$.$$.fragment,f),E(tE.$$.fragment,f),E(w$.$$.fragment,f),E(fE.$$.fragment,f),E(A$.$$.fragment,f),E(L$.$$.fragment,f),E(x$.$$.fragment,f),E(gE.$$.fragment,f),E($$.$$.fragment,f),E(_E.$$.fragment,f),E(S$.$$.fragment,f),E(R$.$$.fragment,f),E(B$.$$.fragment,f),E(bE.$$.fragment,f),E(I$.$$.fragment,f),E(jE.$$.fragment,f),E(N$.$$.fragment,f),E(q$.$$.fragment,f),E(D$.$$.fragment,f),E(GE.$$.fragment,f),E(G$.$$.fragment,f),E(KE.$$.fragment,f),E(O$.$$.fragment,f),E(V$.$$.fragment,f),E(z$.$$.fragment,f),E(eC.$$.fragment,f),E(W$.$$.fragment,f),E(LC.$$.fragment,f),E(Q$.$$.fragment,f),E(U$.$$.fragment,f),E(J$.$$.fragment,f),E(xC.$$.fragment,f),E(Y$.$$.fragment,f),E(QC.$$.fragment,f),E(K$.$$.fragment,f),E(Z$.$$.fragment,f),E(ok.$$.fragment,f),E(HC.$$.fragment,f),E(rk.$$.fragment,f),E(KC.$$.fragment,f),E(ak.$$.fragment,f),E(nk.$$.fragment,f),E(lk.$$.fragment,f),E(e0.$$.fragment,f),E(ik.$$.fragment,f),E(r0.$$.fragment,f),E(dk.$$.fragment,f),E(ck.$$.fragment,f),E(mk.$$.fragment,f),E(a0.$$.fragment,f),E(gk.$$.fragment,f),E(w0.$$.fragment,f),E(hk.$$.fragment,f),E(pk.$$.fragment,f),E(uk.$$.fragment,f),E(L0.$$.fragment,f),E(bk.$$.fragment,f),E(U0.$$.fragment,f),E(vk.$$.fragment,f),E(Fk.$$.fragment,f),E(Mk.$$.fragment,f),E(J0.$$.fragment,f),E(Ek.$$.fragment,f),E(K0.$$.fragment,f),E(Ck.$$.fragment,f),E(wk.$$.fragment,f),E(Lk.$$.fragment,f),E(ew.$$.fragment,f),E(yk.$$.fragment,f),E(rw.$$.fragment,f),E(xk.$$.fragment,f),E($k.$$.fragment,f),E(Sk.$$.fragment,f),E(aw.$$.fragment,f),E(Rk.$$.fragment,f),E(Sw.$$.fragment,f),E(Pk.$$.fragment,f),E(Bk.$$.fragment,f),E(Nk.$$.fragment,f),E(Pw.$$.fragment,f),E(qk.$$.fragment,f),E(zw.$$.fragment,f),E(jk.$$.fragment,f),E(Dk.$$.fragment,f),E(Ok.$$.fragment,f),E(Qw.$$.fragment,f),E(Vk.$$.fragment,f),E(lA.$$.fragment,f),E(Xk.$$.fragment,f),E(zk.$$.fragment,f),E(Qk.$$.fragment,f),E(dA.$$.fragment,f),E(Uk.$$.fragment,f),E(FA.$$.fragment,f),E(Hk.$$.fragment,f),E(Jk.$$.fragment,f),E(Kk.$$.fragment,f),E(MA.$$.fragment,f),E(Zk.$$.fragment,f),E(RA.$$.fragment,f),E(eS.$$.fragment,f),E(oS.$$.fragment,f),E(tS.$$.fragment,f),E(BA.$$.fragment,f),E(aS.$$.fragment,f),E(WA.$$.fragment,f),E(nS.$$.fragment,f),E(sS.$$.fragment,f),E(iS.$$.fragment,f),E(UA.$$.fragment,f),E(dS.$$.fragment,f),E(n7.$$.fragment,f),E(cS.$$.fragment,f),E(fS.$$.fragment,f),E(gS.$$.fragment,f),E(l7.$$.fragment,f),E(hS.$$.fragment,f),E(_7.$$.fragment,f),E(pS.$$.fragment,f),E(_S.$$.fragment,f),E(bS.$$.fragment,f),E(b7.$$.fragment,f),E(vS.$$.fragment,f),E(L7.$$.fragment,f),E(FS.$$.fragment,f),E(TS.$$.fragment,f),E(ES.$$.fragment,f),E(x7.$$.fragment,f),E(CS.$$.fragment,f),E(k7.$$.fragment,f),E(wS.$$.fragment,f),E(AS.$$.fragment,f),E(yS.$$.fragment,f),E(R7.$$.fragment,f),E(xS.$$.fragment,f),E(I7.$$.fragment,f),E(kS.$$.fragment,f),E(SS.$$.fragment,f),E(PS.$$.fragment,f),E(q7.$$.fragment,f),E(BS.$$.fragment,f),E(D7.$$.fragment,f),tJe=!0)},o(f){C(d.$$.fragment,f),C(ja.$$.fragment,f),C(p8.$$.fragment,f),C(_8.$$.fragment,f),C(nm.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(T8.$$.fragment,f),C(Th.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(L8.$$.fragment,f),C(tp.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(R8.$$.fragment,f),C(Xp.$$.fragment,f),C(zp.$$.fragment,f),C(P8.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(j8.$$.fragment,f),C(h_.$$.fragment,f),C(p_.$$.fragment,f),C(D8.$$.fragment,f),C(G8.$$.fragment,f),C(O8.$$.fragment,f),C(X8.$$.fragment,f),C(b_.$$.fragment,f),C(z8.$$.fragment,f),C(L1.$$.fragment,f),C(W8.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(x1.$$.fragment,f),C(J8.$$.fragment,f),C(C4.$$.fragment,f),C(Y8.$$.fragment,f),C(K8.$$.fragment,f),C(e9.$$.fragment,f),C(A4.$$.fragment,f),C(o9.$$.fragment,f),C(h2.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(_2.$$.fragment,f),C(s9.$$.fragment,f),C(rb.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C(ab.$$.fragment,f),C(f9.$$.fragment,f),C(wb.$$.fragment,f),C(m9.$$.fragment,f),C(g9.$$.fragment,f),C(p9.$$.fragment,f),C(Lb.$$.fragment,f),C(_9.$$.fragment,f),C(Lv.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(F9.$$.fragment,f),C(xv.$$.fragment,f),C(T9.$$.fragment,f),C(i3.$$.fragment,f),C(M9.$$.fragment,f),C(E9.$$.fragment,f),C(w9.$$.fragment,f),C(c3.$$.fragment,f),C(A9.$$.fragment,f),C(b3.$$.fragment,f),C(L9.$$.fragment,f),C(y9.$$.fragment,f),C($9.$$.fragment,f),C(F3.$$.fragment,f),C(k9.$$.fragment,f),C(n5.$$.fragment,f),C(S9.$$.fragment,f),C(R9.$$.fragment,f),C(B9.$$.fragment,f),C(l5.$$.fragment,f),C(I9.$$.fragment,f),C(K5.$$.fragment,f),C(N9.$$.fragment,f),C(q9.$$.fragment,f),C(D9.$$.fragment,f),C(e6.$$.fragment,f),C(G9.$$.fragment,f),C(t6.$$.fragment,f),C(O9.$$.fragment,f),C(V9.$$.fragment,f),C(z9.$$.fragment,f),C(n6.$$.fragment,f),C(W9.$$.fragment,f),C(T6.$$.fragment,f),C(Q9.$$.fragment,f),C(U9.$$.fragment,f),C(J9.$$.fragment,f),C(E6.$$.fragment,f),C(Y9.$$.fragment,f),C(A6.$$.fragment,f),C(K9.$$.fragment,f),C(Z9.$$.fragment,f),C(ox.$$.fragment,f),C(y6.$$.fragment,f),C(rx.$$.fragment,f),C(k6.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(R6.$$.fragment,f),C(lx.$$.fragment,f),C(I6.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(q6.$$.fragment,f),C(mx.$$.fragment,f),C(H6.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(_x.$$.fragment,f),C(Y6.$$.fragment,f),C(ux.$$.fragment,f),C(aF.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(sF.$$.fragment,f),C(Mx.$$.fragment,f),C(bF.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(FF.$$.fragment,f),C(Lx.$$.fragment,f),C(CF.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(AF.$$.fragment,f),C(Rx.$$.fragment,f),C(RF.$$.fragment,f),C(Px.$$.fragment,f),C(Bx.$$.fragment,f),C(Nx.$$.fragment,f),C(BF.$$.fragment,f),C(qx.$$.fragment,f),C(GF.$$.fragment,f),C(jx.$$.fragment,f),C(Dx.$$.fragment,f),C(Ox.$$.fragment,f),C(VF.$$.fragment,f),C(Vx.$$.fragment,f),C(QF.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(Ux.$$.fragment,f),C(HF.$$.fragment,f),C(Hx.$$.fragment,f),C(KF.$$.fragment,f),C(Jx.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(eT.$$.fragment,f),C(e$.$$.fragment,f),C(lT.$$.fragment,f),C(o$.$$.fragment,f),C(r$.$$.fragment,f),C(a$.$$.fragment,f),C(dT.$$.fragment,f),C(n$.$$.fragment,f),C(mT.$$.fragment,f),C(s$.$$.fragment,f),C(l$.$$.fragment,f),C(d$.$$.fragment,f),C(hT.$$.fragment,f),C(c$.$$.fragment,f),C(mM.$$.fragment,f),C(f$.$$.fragment,f),C(m$.$$.fragment,f),C(h$.$$.fragment,f),C(hM.$$.fragment,f),C(p$.$$.fragment,f),C(qM.$$.fragment,f),C(_$.$$.fragment,f),C(u$.$$.fragment,f),C(v$.$$.fragment,f),C(DM.$$.fragment,f),C(F$.$$.fragment,f),C(oE.$$.fragment,f),C(T$.$$.fragment,f),C(M$.$$.fragment,f),C(C$.$$.fragment,f),C(tE.$$.fragment,f),C(w$.$$.fragment,f),C(fE.$$.fragment,f),C(A$.$$.fragment,f),C(L$.$$.fragment,f),C(x$.$$.fragment,f),C(gE.$$.fragment,f),C($$.$$.fragment,f),C(_E.$$.fragment,f),C(S$.$$.fragment,f),C(R$.$$.fragment,f),C(B$.$$.fragment,f),C(bE.$$.fragment,f),C(I$.$$.fragment,f),C(jE.$$.fragment,f),C(N$.$$.fragment,f),C(q$.$$.fragment,f),C(D$.$$.fragment,f),C(GE.$$.fragment,f),C(G$.$$.fragment,f),C(KE.$$.fragment,f),C(O$.$$.fragment,f),C(V$.$$.fragment,f),C(z$.$$.fragment,f),C(eC.$$.fragment,f),C(W$.$$.fragment,f),C(LC.$$.fragment,f),C(Q$.$$.fragment,f),C(U$.$$.fragment,f),C(J$.$$.fragment,f),C(xC.$$.fragment,f),C(Y$.$$.fragment,f),C(QC.$$.fragment,f),C(K$.$$.fragment,f),C(Z$.$$.fragment,f),C(ok.$$.fragment,f),C(HC.$$.fragment,f),C(rk.$$.fragment,f),C(KC.$$.fragment,f),C(ak.$$.fragment,f),C(nk.$$.fragment,f),C(lk.$$.fragment,f),C(e0.$$.fragment,f),C(ik.$$.fragment,f),C(r0.$$.fragment,f),C(dk.$$.fragment,f),C(ck.$$.fragment,f),C(mk.$$.fragment,f),C(a0.$$.fragment,f),C(gk.$$.fragment,f),C(w0.$$.fragment,f),C(hk.$$.fragment,f),C(pk.$$.fragment,f),C(uk.$$.fragment,f),C(L0.$$.fragment,f),C(bk.$$.fragment,f),C(U0.$$.fragment,f),C(vk.$$.fragment,f),C(Fk.$$.fragment,f),C(Mk.$$.fragment,f),C(J0.$$.fragment,f),C(Ek.$$.fragment,f),C(K0.$$.fragment,f),C(Ck.$$.fragment,f),C(wk.$$.fragment,f),C(Lk.$$.fragment,f),C(ew.$$.fragment,f),C(yk.$$.fragment,f),C(rw.$$.fragment,f),C(xk.$$.fragment,f),C($k.$$.fragment,f),C(Sk.$$.fragment,f),C(aw.$$.fragment,f),C(Rk.$$.fragment,f),C(Sw.$$.fragment,f),C(Pk.$$.fragment,f),C(Bk.$$.fragment,f),C(Nk.$$.fragment,f),C(Pw.$$.fragment,f),C(qk.$$.fragment,f),C(zw.$$.fragment,f),C(jk.$$.fragment,f),C(Dk.$$.fragment,f),C(Ok.$$.fragment,f),C(Qw.$$.fragment,f),C(Vk.$$.fragment,f),C(lA.$$.fragment,f),C(Xk.$$.fragment,f),C(zk.$$.fragment,f),C(Qk.$$.fragment,f),C(dA.$$.fragment,f),C(Uk.$$.fragment,f),C(FA.$$.fragment,f),C(Hk.$$.fragment,f),C(Jk.$$.fragment,f),C(Kk.$$.fragment,f),C(MA.$$.fragment,f),C(Zk.$$.fragment,f),C(RA.$$.fragment,f),C(eS.$$.fragment,f),C(oS.$$.fragment,f),C(tS.$$.fragment,f),C(BA.$$.fragment,f),C(aS.$$.fragment,f),C(WA.$$.fragment,f),C(nS.$$.fragment,f),C(sS.$$.fragment,f),C(iS.$$.fragment,f),C(UA.$$.fragment,f),C(dS.$$.fragment,f),C(n7.$$.fragment,f),C(cS.$$.fragment,f),C(fS.$$.fragment,f),C(gS.$$.fragment,f),C(l7.$$.fragment,f),C(hS.$$.fragment,f),C(_7.$$.fragment,f),C(pS.$$.fragment,f),C(_S.$$.fragment,f),C(bS.$$.fragment,f),C(b7.$$.fragment,f),C(vS.$$.fragment,f),C(L7.$$.fragment,f),C(FS.$$.fragment,f),C(TS.$$.fragment,f),C(ES.$$.fragment,f),C(x7.$$.fragment,f),C(CS.$$.fragment,f),C(k7.$$.fragment,f),C(wS.$$.fragment,f),C(AS.$$.fragment,f),C(yS.$$.fragment,f),C(R7.$$.fragment,f),C(xS.$$.fragment,f),C(I7.$$.fragment,f),C(kS.$$.fragment,f),C(SS.$$.fragment,f),C(PS.$$.fragment,f),C(q7.$$.fragment,f),C(BS.$$.fragment,f),C(D7.$$.fragment,f),tJe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(em),f&&t(ft),f&&t(Oe),f&&t(Qe),f&&t(rm),w(ja,f),f&&t(Ue),f&&t(Ae),f&&t(Lo),f&&t(Da),f&&t(UQe),f&&t(Hi),w(p8),f&&t(HQe),f&&t(Un),f&&t(JQe),w(_8,f),f&&t(YQe),f&&t(cP),f&&t(KQe),w(nm,f),f&&t(ZQe),f&&t(Ji),w(u8),f&&t(eUe),f&&t(yo),w(b8),w(T8),w(Th),w(M8),f&&t(oUe),f&&t(Ki),w(E8),f&&t(rUe),f&&t(xo),w(C8),w(L8),w(tp),w(y8),f&&t(tUe),f&&t(Zi),w(x8),f&&t(aUe),f&&t($o),w($8),w(R8),w(Xp),w(zp),w(P8),f&&t(nUe),f&&t(ed),w(B8),f&&t(sUe),f&&t(ko),w(I8),w(j8),w(h_),w(p_),w(D8),f&&t(lUe),f&&t(rd),w(G8),f&&t(iUe),f&&t(So),w(O8),w(X8),w(b_),w(z8),w(L1),f&&t(dUe),f&&t(nd),w(W8),f&&t(cUe),f&&t(Ro),w(Q8),w(H8),w(x1),w(J8),w(C4),f&&t(fUe),f&&t(id),w(Y8),f&&t(mUe),f&&t(Po),w(K8),w(e9),w(A4),w(o9),w(h2),f&&t(gUe),f&&t(fd),w(r9),f&&t(hUe),f&&t(Bo),w(t9),w(n9),w(_2),w(s9),w(rb),f&&t(pUe),f&&t(hd),w(l9),f&&t(_Ue),f&&t(Io),w(i9),w(c9),w(ab),w(f9),w(wb),f&&t(uUe),f&&t(ud),w(m9),f&&t(bUe),f&&t(No),w(g9),w(p9),w(Lb),w(_9),w(Lv),f&&t(vUe),f&&t(Fd),w(u9),f&&t(FUe),f&&t(qo),w(b9),w(F9),w(xv),w(T9),w(i3),f&&t(TUe),f&&t(Ed),w(M9),f&&t(MUe),f&&t(jo),w(E9),w(w9),w(c3),w(A9),w(b3),f&&t(EUe),f&&t(Ad),w(L9),f&&t(CUe),f&&t(Go),w(y9),w($9),w(F3),w(k9),w(n5),f&&t(wUe),f&&t(xd),w(S9),f&&t(AUe),f&&t(Oo),w(R9),w(B9),w(l5),w(I9),w(K5),f&&t(LUe),f&&t(Sd),w(N9),f&&t(yUe),f&&t(Vo),w(q9),w(D9),w(e6),w(G9),w(t6),f&&t(xUe),f&&t(Bd),w(O9),f&&t($Ue),f&&t(Xo),w(V9),w(z9),w(n6),w(W9),w(T6),f&&t(kUe),f&&t(qd),w(Q9),f&&t(SUe),f&&t(zo),w(U9),w(J9),w(E6),w(Y9),w(A6),f&&t(RUe),f&&t(Gd),w(K9),f&&t(PUe),f&&t(Wo),w(Z9),w(ox),w(y6),w(rx),w(k6),f&&t(BUe),f&&t(Xd),w(tx),f&&t(IUe),f&&t(Qo),w(ax),w(sx),w(R6),w(lx),w(I6),f&&t(NUe),f&&t(Qd),w(ix),f&&t(qUe),f&&t(Uo),w(dx),w(fx),w(q6),w(mx),w(H6),f&&t(jUe),f&&t(Jd),w(gx),f&&t(DUe),f&&t(Ho),w(hx),w(_x),w(Y6),w(ux),w(aF),f&&t(GUe),f&&t(Zd),w(bx),f&&t(OUe),f&&t(Jo),w(vx),w(Tx),w(sF),w(Mx),w(bF),f&&t(VUe),f&&t(rc),w(Ex),f&&t(XUe),f&&t(Yo),w(Cx),w(Ax),w(FF),w(Lx),w(CF),f&&t(zUe),f&&t(nc),w(xx),f&&t(WUe),f&&t(Ko),w($x),w(Sx),w(AF),w(Rx),w(RF),f&&t(QUe),f&&t(ic),w(Px),f&&t(UUe),f&&t(Zo),w(Bx),w(Nx),w(BF),w(qx),w(GF),f&&t(HUe),f&&t(fc),w(jx),f&&t(JUe),f&&t(er),w(Dx),w(Ox),w(VF),w(Vx),w(QF),f&&t(YUe),f&&t(hc),w(zx),f&&t(KUe),f&&t(or),w(Wx),w(Ux),w(HF),w(Hx),w(KF),f&&t(ZUe),f&&t(uc),w(Jx),f&&t(eHe),f&&t(rr),w(Yx),w(Zx),w(eT),w(e$),w(lT),f&&t(oHe),f&&t(Fc),w(o$),f&&t(rHe),f&&t(tr),w(r$),w(a$),w(dT),w(n$),w(mT),f&&t(tHe),f&&t(Ec),w(s$),f&&t(aHe),f&&t(ar),w(l$),w(d$),w(hT),w(c$),w(mM),f&&t(nHe),f&&t(Ac),w(f$),f&&t(sHe),f&&t(nr),w(m$),w(h$),w(hM),w(p$),w(qM),f&&t(lHe),f&&t(xc),w(_$),f&&t(iHe),f&&t(sr),w(u$),w(v$),w(DM),w(F$),w(oE),f&&t(dHe),f&&t(Sc),w(T$),f&&t(cHe),f&&t(lr),w(M$),w(C$),w(tE),w(w$),w(fE),f&&t(fHe),f&&t(Bc),w(A$),f&&t(mHe),f&&t(ir),w(L$),w(x$),w(gE),w($$),w(_E),f&&t(gHe),f&&t(qc),w(S$),f&&t(hHe),f&&t(dr),w(R$),w(B$),w(bE),w(I$),w(jE),f&&t(pHe),f&&t(Gc),w(N$),f&&t(_He),f&&t(cr),w(q$),w(D$),w(GE),w(G$),w(KE),f&&t(uHe),f&&t(Xc),w(O$),f&&t(bHe),f&&t(fr),w(V$),w(z$),w(eC),w(W$),w(LC),f&&t(vHe),f&&t(Qc),w(Q$),f&&t(FHe),f&&t(mr),w(U$),w(J$),w(xC),w(Y$),w(QC),f&&t(THe),f&&t(Jc),w(K$),f&&t(MHe),f&&t(gr),w(Z$),w(ok),w(HC),w(rk),w(KC),f&&t(EHe),f&&t(Zc),w(ak),f&&t(CHe),f&&t(hr),w(nk),w(lk),w(e0),w(ik),w(r0),f&&t(wHe),f&&t(rf),w(dk),f&&t(AHe),f&&t(pr),w(ck),w(mk),w(a0),w(gk),w(w0),f&&t(LHe),f&&t(nf),w(hk),f&&t(yHe),f&&t(_r),w(pk),w(uk),w(L0),w(bk),w(U0),f&&t(xHe),f&&t(df),w(vk),f&&t($He),f&&t(ur),w(Fk),w(Mk),w(J0),w(Ek),w(K0),f&&t(kHe),f&&t(mf),w(Ck),f&&t(SHe),f&&t(br),w(wk),w(Lk),w(ew),w(yk),w(rw),f&&t(RHe),f&&t(pf),w(xk),f&&t(PHe),f&&t(vr),w($k),w(Sk),w(aw),w(Rk),w(Sw),f&&t(BHe),f&&t(bf),w(Pk),f&&t(IHe),f&&t(Fr),w(Bk),w(Nk),w(Pw),w(qk),w(zw),f&&t(NHe),f&&t(Tf),w(jk),f&&t(qHe),f&&t(Tr),w(Dk),w(Ok),w(Qw),w(Vk),w(lA),f&&t(jHe),f&&t(Cf),w(Xk),f&&t(DHe),f&&t(Mr),w(zk),w(Qk),w(dA),w(Uk),w(FA),f&&t(GHe),f&&t(Lf),w(Hk),f&&t(OHe),f&&t(Er),w(Jk),w(Kk),w(MA),w(Zk),w(RA),f&&t(VHe),f&&t($f),w(eS),f&&t(XHe),f&&t(Cr),w(oS),w(tS),w(BA),w(aS),w(WA),f&&t(zHe),f&&t(Rf),w(nS),f&&t(WHe),f&&t(wr),w(sS),w(iS),w(UA),w(dS),w(n7),f&&t(QHe),f&&t(If),w(cS),f&&t(UHe),f&&t(Ar),w(fS),w(gS),w(l7),w(hS),w(_7),f&&t(HHe),f&&t(jf),w(pS),f&&t(JHe),f&&t(Lr),w(_S),w(bS),w(b7),w(vS),w(L7),f&&t(YHe),f&&t(Of),w(FS),f&&t(KHe),f&&t(yr),w(TS),w(ES),w(x7),w(CS),w(k7),f&&t(ZHe),f&&t(zf),w(wS),f&&t(eJe),f&&t(xr),w(AS),w(yS),w(R7),w(xS),w(I7),f&&t(oJe),f&&t(Uf),w(kS),f&&t(rJe),f&&t($r),w(SS),w(PS),w(q7),w(BS),w(D7)}}}const cna={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function fna($){return nta(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class bna extends ota{constructor(g){super();rta(this,g,fna,dna,tta,{})}}export{bna as default,cna as metadata};
