import{S as HR,i as WR,s as YR,e as n,k as i,w as h,t as o,M as ZR,c as s,d as r,m as d,a as l,x as f,h as a,b as m,G as e,g as p,y as u,q as _,o as g,B as v,v as JR,L as KR}from"../../chunks/vendor-hf-doc-builder.js";import{T as fg}from"../../chunks/Tip-hf-doc-builder.js";import{D as T}from"../../chunks/Docstring-hf-doc-builder.js";import{C}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as X}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as QR}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function XR(ae){let $,S,D,k,q,A,I,M,ue,ee,G,ne,se,te,le,V,We,_e,F,N,ot,re,at,nt,ge,ba,ya,Ye,Pe,wa,ve,Ea,$a;return{c(){$=n("p"),S=o("The "),D=n("a"),k=o("Trainer"),q=o(` class is optimized for \u{1F917} Transformers models and can have surprising behaviors
when you use it on other models. When using it on your own model, make sure:`),A=i(),I=n("ul"),M=n("li"),ue=o("your model always return tuples or subclasses of "),ee=n("a"),G=o("ModelOutput"),ne=o("."),se=i(),te=n("li"),le=o("your model can compute the loss if a "),V=n("code"),We=o("labels"),_e=o(` argument is provided and that loss is returned as the first
element of the tuple (if your model returns tuples)`),F=i(),N=n("li"),ot=o("your model can accept multiple label arguments (use the "),re=n("code"),at=o("label_names"),nt=o(" in your "),ge=n("a"),ba=o("TrainingArguments"),ya=o(" to indicate their name to the "),Ye=n("a"),Pe=o("Trainer"),wa=o(") but none of them should be named "),ve=n("code"),Ea=o('"label"'),$a=o("."),this.h()},l(W){$=s(W,"P",{});var B=l($);S=a(B,"The "),D=s(B,"A",{href:!0});var kl=l(D);k=a(kl,"Trainer"),kl.forEach(r),q=a(B,` class is optimized for \u{1F917} Transformers models and can have surprising behaviors
when you use it on other models. When using it on your own model, make sure:`),B.forEach(r),A=d(W),I=s(W,"UL",{});var be=l(I);M=s(be,"LI",{});var Gr=l(M);ue=a(Gr,"your model always return tuples or subclasses of "),ee=s(Gr,"A",{href:!0});var Pl=l(ee);G=a(Pl,"ModelOutput"),Pl.forEach(r),ne=a(Gr,"."),Gr.forEach(r),se=d(be),te=s(be,"LI",{});var Kt=l(te);le=a(Kt,"your model can compute the loss if a "),V=s(Kt,"CODE",{});var x=l(V);We=a(x,"labels"),x.forEach(r),_e=a(Kt,` argument is provided and that loss is returned as the first
element of the tuple (if your model returns tuples)`),Kt.forEach(r),F=d(be),N=s(be,"LI",{});var H=l(N);ot=a(H,"your model can accept multiple label arguments (use the "),re=s(H,"CODE",{});var jr=l(re);at=a(jr,"label_names"),jr.forEach(r),nt=a(H," in your "),ge=s(H,"A",{href:!0});var Al=l(ge);ba=a(Al,"TrainingArguments"),Al.forEach(r),ya=a(H," to indicate their name to the "),Ye=s(H,"A",{href:!0});var Ol=l(Ye);Pe=a(Ol,"Trainer"),Ol.forEach(r),wa=a(H,") but none of them should be named "),ve=s(H,"CODE",{});var xl=l(ve);Ea=a(xl,'"label"'),xl.forEach(r),$a=a(H,"."),H.forEach(r),be.forEach(r),this.h()},h(){m(D,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer"),m(ee,"href","/docs/transformers/pr_18595/en/main_classes/output#transformers.utils.ModelOutput"),m(ge,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.TrainingArguments"),m(Ye,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer")},m(W,B){p(W,$,B),e($,S),e($,D),e(D,k),e($,q),p(W,A,B),p(W,I,B),e(I,M),e(M,ue),e(M,ee),e(ee,G),e(M,ne),e(I,se),e(I,te),e(te,le),e(te,V),e(V,We),e(te,_e),e(I,F),e(I,N),e(N,ot),e(N,re),e(re,at),e(N,nt),e(N,ge),e(ge,ba),e(N,ya),e(N,Ye),e(Ye,Pe),e(N,wa),e(N,ve),e(ve,Ea),e(N,$a)},d(W){W&&r($),W&&r(A),W&&r(I)}}}function eq(ae){let $,S,D,k,q,A,I,M,ue,ee,G,ne,se,te,le,V,We;return{c(){$=n("p"),S=o("To use this method, you need to have provided a "),D=n("code"),k=o("model_init"),q=o(" when initializing your "),A=n("a"),I=o("Trainer"),M=o(`: we need to
reinitialize the model at each new run. This is incompatible with the `),ue=n("code"),ee=o("optimizers"),G=o(` argument, so you need to
subclass `),ne=n("a"),se=o("Trainer"),te=o(" and override the method "),le=n("a"),V=o("create_optimizer_and_scheduler()"),We=o(` for custom
optimizer/scheduler.`),this.h()},l(_e){$=s(_e,"P",{});var F=l($);S=a(F,"To use this method, you need to have provided a "),D=s(F,"CODE",{});var N=l(D);k=a(N,"model_init"),N.forEach(r),q=a(F," when initializing your "),A=s(F,"A",{href:!0});var ot=l(A);I=a(ot,"Trainer"),ot.forEach(r),M=a(F,`: we need to
reinitialize the model at each new run. This is incompatible with the `),ue=s(F,"CODE",{});var re=l(ue);ee=a(re,"optimizers"),re.forEach(r),G=a(F,` argument, so you need to
subclass `),ne=s(F,"A",{href:!0});var at=l(ne);se=a(at,"Trainer"),at.forEach(r),te=a(F," and override the method "),le=s(F,"A",{href:!0});var nt=l(le);V=a(nt,"create_optimizer_and_scheduler()"),nt.forEach(r),We=a(F,` for custom
optimizer/scheduler.`),F.forEach(r),this.h()},h(){m(A,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer"),m(ne,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer"),m(le,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer.create_optimizer_and_scheduler")},m(_e,F){p(_e,$,F),e($,S),e($,D),e(D,k),e($,q),e($,A),e(A,I),e($,M),e($,ue),e(ue,ee),e($,G),e($,ne),e(ne,se),e($,te),e($,le),e(le,V),e($,We)},d(_e){_e&&r($)}}}function tq(ae){let $,S,D,k,q;return k=new C({props:{code:`init_mem_cpu_alloc_delta   =     1301MB
init_mem_cpu_peaked_delta  =      154MB
init_mem_gpu_alloc_delta   =      230MB
init_mem_gpu_peaked_delta  =        0MB
train_mem_cpu_alloc_delta  =     1345MB
train_mem_cpu_peaked_delta =        0MB
train_mem_gpu_alloc_delta  =      693MB
train_mem_gpu_peaked_delta =        7MB`,highlighted:`<span class="hljs-attr">init_mem_cpu_alloc_delta</span>   =     <span class="hljs-number">1301</span>MB
<span class="hljs-attr">init_mem_cpu_peaked_delta</span>  =      <span class="hljs-number">154</span>MB
<span class="hljs-attr">init_mem_gpu_alloc_delta</span>   =      <span class="hljs-number">230</span>MB
<span class="hljs-attr">init_mem_gpu_peaked_delta</span>  =        <span class="hljs-number">0</span>MB
<span class="hljs-attr">train_mem_cpu_alloc_delta</span>  =     <span class="hljs-number">1345</span>MB
<span class="hljs-attr">train_mem_cpu_peaked_delta</span> =        <span class="hljs-number">0</span>MB
<span class="hljs-attr">train_mem_gpu_alloc_delta</span>  =      <span class="hljs-number">693</span>MB
<span class="hljs-attr">train_mem_gpu_peaked_delta</span> =        <span class="hljs-number">7</span>MB`}}),{c(){$=n("p"),S=o("Now when this method is run, you will see a report that will include: :"),D=i(),h(k.$$.fragment)},l(A){$=s(A,"P",{});var I=l($);S=a(I,"Now when this method is run, you will see a report that will include: :"),I.forEach(r),D=d(A),f(k.$$.fragment,A)},m(A,I){p(A,$,I),e($,S),p(A,D,I),u(k,A,I),q=!0},p:KR,i(A){q||(_(k.$$.fragment,A),q=!0)},o(A){g(k.$$.fragment,A),q=!1},d(A){A&&r($),A&&r(D),v(k,A)}}}function rq(ae){let $,S;return{c(){$=n("p"),S=o(`If your predictions or labels have different sequence length (for instance because you\u2019re doing dynamic padding
in a token classification task) the predictions will be padded (on the right) to allow for concatenation into
one array. The padding index is -100.`)},l(D){$=s(D,"P",{});var k=l($);S=a(k,`If your predictions or labels have different sequence length (for instance because you\u2019re doing dynamic padding
in a token classification task) the predictions will be padded (on the right) to allow for concatenation into
one array. The padding index is -100.`),k.forEach(r)},m(D,k){p(D,$,k),e($,S)},d(D){D&&r($)}}}function oq(ae){let $,S;return{c(){$=n("p"),S=o(`If your predictions or labels have different sequence lengths (for instance because you\u2019re doing dynamic
padding in a token classification task) the predictions will be padded (on the right) to allow for
concatenation into one array. The padding index is -100.`)},l(D){$=s(D,"P",{});var k=l($);S=a(k,`If your predictions or labels have different sequence lengths (for instance because you\u2019re doing dynamic
padding in a token classification task) the predictions will be padded (on the right) to allow for
concatenation into one array. The padding index is -100.`),k.forEach(r)},m(D,k){p(D,$,k),e($,S)},d(D){D&&r($)}}}function aq(ae){let $,S;return{c(){$=n("p"),S=o("This integration is not supported anymore, we recommend you either use DeepSpeed or PyTorch FSDP.")},l(D){$=s(D,"P",{});var k=l($);S=a(k,"This integration is not supported anymore, we recommend you either use DeepSpeed or PyTorch FSDP."),k.forEach(r)},m(D,k){p(D,$,k),e($,S)},d(D){D&&r($)}}}function nq(ae){let $,S,D,k,q,A,I,M,ue,ee,G,ne,se,te,le,V,We,_e,F,N,ot,re,at,nt,ge,ba,ya,Ye,Pe,wa,ve,Ea,$a,W,B,kl,be,Gr,Pl,Kt,x,H,jr,Al,Ol,xl,Cl,Nc,n2,s2,l2,Sl,Ic,i2,d2,c2,Nl,Uc,p2,m2,h2,st,Lc,f2,u2,Fc,_2,g2,zc,v2,b2,y2,Il,Rc,w2,E2,$2,Ul,qc,T2,D2,k2,Ll,Gc,P2,A2,O2,Fl,jc,x2,C2,S2,zl,Mc,N2,I2,U2,Rl,Vc,L2,F2,z2,ql,Bc,R2,q2,ug,Mr,_g,Vr,G2,Gl,j2,M2,gg,Ta,vg,lt,V2,jl,B2,H2,Ml,W2,Y2,bg,Qt,Br,Hc,Da,Z2,Wc,J2,yg,b,ka,K2,Yc,Q2,X2,Zc,ew,tw,ye,Hr,Jc,rw,ow,Vl,aw,nw,sw,Y,Kc,lw,iw,Qc,dw,cw,Xc,pw,mw,ep,hw,fw,tp,uw,_w,rp,gw,vw,bw,Bl,op,yw,ww,Ew,Ae,ap,$w,Tw,np,Dw,kw,sp,Pw,Aw,lp,Ow,xw,Cw,Oe,ip,Sw,Nw,dp,Iw,Uw,cp,Lw,Fw,pp,zw,Rw,qw,Wr,Pa,Gw,Aa,jw,mp,Mw,Vw,Bw,Yr,Oa,Hw,xa,Ww,hp,Yw,Zw,Jw,it,Ca,Kw,fp,Qw,Xw,up,eE,tE,Zr,Sa,rE,_p,oE,aE,dt,Na,nE,gp,sE,lE,Ia,iE,vp,dE,cE,pE,ct,Ua,mE,bp,hE,fE,Ze,uE,yp,_E,gE,wp,vE,bE,Ep,yE,wE,EE,Jr,La,$E,$p,TE,DE,xe,Fa,kE,Tp,PE,AE,za,OE,Dp,xE,CE,SE,kp,NE,IE,pt,Ra,UE,Xt,LE,Pp,FE,zE,Ap,RE,qE,GE,Op,jE,ME,Kr,qa,VE,Ga,BE,Hl,HE,WE,YE,mt,ja,ZE,Ma,JE,xp,KE,QE,XE,Cp,e0,t0,Qr,Va,r0,Sp,o0,a0,ht,Ba,n0,Ha,s0,Np,l0,i0,d0,Ip,c0,p0,Ce,Wa,m0,Ya,h0,Up,f0,u0,_0,er,g0,Lp,v0,b0,Fp,y0,w0,E0,zp,$0,T0,ft,Za,D0,we,k0,Rp,P0,A0,qp,O0,x0,Gp,C0,S0,jp,N0,I0,U0,Xr,L0,eo,Ja,F0,Ka,z0,Mp,R0,q0,G0,to,Qa,j0,Vp,M0,V0,ro,Xa,B0,en,H0,Bp,W0,Y0,Z0,ut,tn,J0,rn,K0,Hp,Q0,X0,e5,Wp,t5,r5,P,on,o5,Yp,a5,n5,Zp,s5,l5,Jp,i5,d5,tr,c5,Kp,p5,m5,Qp,h5,f5,u5,oo,_5,Xp,em,g5,v5,Je,Ee,b5,tm,y5,w5,rm,E5,$5,om,T5,D5,am,k5,P5,A5,rr,O5,nm,x5,C5,sm,S5,N5,I5,Wl,lm,U5,L5,F5,_t,im,z5,R5,dm,q5,G5,cm,j5,M5,V5,pm,B5,H5,mm,W5,Y5,an,Z5,hm,J5,K5,Q5,Ke,X5,fm,e$,t$,um,r$,o$,_m,a$,n$,s$,oe,l$,Yl,i$,d$,gm,c$,p$,vm,m$,h$,bm,f$,u$,ym,_$,g$,v$,U,b$,wm,y$,w$,Em,E$,$$,$m,T$,D$,Tm,k$,P$,nn,A$,O$,Dm,x$,C$,km,S$,N$,Pm,I$,U$,Am,L$,F$,Om,z$,R$,q$,$e,G$,Zl,j$,M$,xm,V$,B$,Jl,H$,W$,Cm,Y$,Z$,J$,Sm,K$,Q$,ao,sn,X$,Nm,e4,t4,no,ln,r4,dn,o4,Im,a4,n4,s4,gt,cn,l4,pn,i4,Um,d4,c4,p4,mn,m4,Lm,h4,f4,u4,Z,hn,_4,Fm,g4,v4,fn,b4,zm,y4,w4,E4,so,$4,un,T4,Rm,D4,k4,P4,or,ar,A4,qm,O4,x4,Gm,C4,S4,N4,nr,I4,jm,U4,L4,Mm,F4,z4,R4,sr,q4,Vm,G4,j4,Bm,M4,V4,B4,vt,_n,H4,lr,W4,Hm,Y4,Z4,Wm,J4,K4,Q4,Ym,X4,e3,bt,gn,t3,ir,r3,Zm,o3,a3,Jm,n3,s3,l3,Km,i3,d3,lo,vn,c3,Qe,p3,Qm,m3,h3,Xm,f3,u3,eh,_3,g3,v3,io,bn,b3,yn,y3,th,w3,E3,$3,Se,wn,T3,En,D3,rh,k3,P3,A3,oh,O3,x3,$n,C3,Kl,S3,N3,I3,yt,Tn,U3,Dn,L3,ah,F3,z3,R3,nh,q3,G3,wt,kn,j3,sh,M3,V3,lh,B3,H3,co,Pn,W3,An,Y3,ih,Z3,J3,K3,po,On,Q3,dh,X3,eT,Et,xn,tT,ch,rT,oT,ph,aT,wg,dr,mo,mh,Cn,nT,hh,sT,Eg,Xe,Sn,lT,Ne,Nn,iT,fh,dT,cT,In,pT,uh,mT,hT,fT,_h,uT,_T,J,Un,gT,gh,vT,bT,Ln,yT,vh,wT,ET,$T,ho,TT,Fn,DT,bh,kT,PT,AT,cr,pr,OT,yh,xT,CT,wh,ST,NT,IT,mr,UT,Eh,LT,FT,$h,zT,RT,qT,hr,GT,Th,jT,MT,Dh,VT,BT,$g,fr,fo,kh,zn,HT,Ph,WT,Tg,R,Rn,YT,ie,qn,ZT,Ah,JT,KT,ur,QT,Oh,XT,e8,xh,t8,r8,o8,_r,a8,Ch,n8,s8,Sh,l8,i8,d8,Gn,c8,Nh,p8,m8,h8,uo,jn,f8,Ih,u8,_8,$t,Mn,g8,Uh,v8,b8,gr,y8,Lh,w8,E8,Fh,$8,T8,D8,_o,Vn,k8,Bn,P8,zh,A8,O8,x8,go,Hn,C8,Rh,S8,N8,vo,Wn,I8,qh,U8,Dg,vr,bo,Gh,Yn,L8,jh,F8,kg,br,Zn,z8,Mh,R8,Pg,yr,yo,Vh,Jn,q8,Bh,G8,Ag,de,j8,Ql,M8,V8,Hh,B8,H8,Xl,W8,Y8,Wh,Z8,J8,Og,wo,K8,ei,Q8,X8,xg,Eo,ti,Yh,e6,t6,r6,ri,Zh,o6,a6,Cg,Ie,n6,Jh,s6,l6,Kh,i6,d6,oi,c6,p6,Sg,$o,To,Qh,m6,h6,Xh,f6,u6,_6,ai,ef,g6,v6,Ng,wr,Do,tf,Kn,b6,rf,y6,Ig,Ue,w6,ni,E6,$6,of,T6,D6,af,k6,P6,Ug,Tt,A6,nf,O6,x6,si,C6,S6,Lg,ko,li,sf,N6,I6,U6,ii,lf,L6,F6,Fg,Le,z6,di,R6,q6,df,G6,j6,cf,M6,V6,zg,K,B6,ci,H6,W6,pf,Y6,Z6,mf,J6,K6,hf,Q6,X6,pi,e9,t9,Rg,mi,r9,qg,Qn,Gg,hi,o9,jg,Xn,Mg,fi,a9,Vg,es,Bg,ui,n9,Hg,_i,s9,Wg,ts,Yg,Po,l9,ff,i9,d9,Zg,Er,Ao,uf,rs,c9,_f,p9,Jg,ce,m9,gi,h9,f9,gf,u9,_9,vf,g9,v9,bf,b9,y9,Kg,Dt,w9,os,E9,$9,yf,T9,D9,Qg,$r,Oo,wf,as,k9,Ef,P9,Xg,vi,A9,ev,xo,O9,ns,$f,x9,C9,tv,ss,rv,kt,S9,ls,Tf,N9,I9,is,Df,U9,L9,ov,ds,av,cs,nv,Co,F9,bi,z9,R9,sv,yi,q9,lv,wi,G9,iv,Ei,kf,Pf,j9,dv,So,M9,Af,V9,B9,cv,$i,H9,pv,ps,mv,Pt,W9,Of,Y9,Z9,xf,J9,K9,hv,Ti,Q9,fv,ms,uv,At,X9,Cf,e7,t7,Sf,r7,o7,_v,Ot,a7,Nf,n7,s7,hs,If,l7,i7,gv,fs,vv,Di,d7,bv,us,yv,ki,c7,wv,_s,Ev,Pi,p7,$v,Ai,Uf,Lf,m7,Tv,No,h7,Ff,f7,u7,Dv,Oi,gs,_7,zf,g7,v7,kv,vs,Pv,bs,Rf,b7,Av,ys,Ov,xt,y7,qf,w7,E7,Gf,$7,T7,xv,xi,D7,Cv,ws,Sv,Ci,k7,Nv,Io,P7,jf,A7,O7,Iv,Tr,Uo,Mf,Es,x7,Vf,C7,Uv,Lo,S7,Si,N7,I7,Lv,pe,U7,$s,L7,F7,Ts,z7,R7,Ds,q7,G7,ks,j7,M7,Fv,Fo,V7,Ni,B7,H7,zv,Ii,Rv,Dr,zo,Bf,Ps,W7,Hf,Y7,qv,Ui,Z7,Gv,Ct,J7,As,K7,Q7,Os,X7,eD,jv,Li,tD,Mv,xs,Vv,Fi,rD,Bv,St,oD,Wf,aD,nD,Yf,sD,lD,Hv,kr,Ro,Zf,Cs,iD,Jf,dD,Wv,zi,cD,Yv,Fe,pD,Kf,mD,hD,Qf,fD,uD,Xf,_D,gD,Zv,Nt,vD,eu,bD,yD,tu,wD,ED,Jv,Ss,Kv,qo,$D,Ns,TD,DD,Qv,Pr,Go,ru,Is,kD,ou,PD,Xv,Ri,AD,e1,Us,t1,It,OD,au,xD,CD,nu,SD,ND,r1,qi,ID,o1,Ls,a1,Gi,UD,n1,jo,LD,su,FD,zD,s1,et,lu,RD,qD,iu,GD,jD,du,MD,VD,l1,ji,BD,i1,Fs,d1,Mi,HD,c1,ze,WD,cu,YD,ZD,pu,JD,KD,mu,QD,XD,p1,Ar,Mo,hu,zs,ek,fu,tk,m1,Ut,rk,uu,ok,ak,_u,nk,sk,h1,Vi,lk,f1,Bi,ik,u1,Vo,dk,gu,ck,pk,_1,Rs,g1,j,mk,vu,hk,fk,bu,uk,_k,yu,gk,vk,wu,bk,yk,Eu,wk,Ek,$u,$k,Tk,v1,Hi,Dk,b1,Or,Bo,Tu,qs,kk,Du,Pk,y1,Ho,w1,Re,Ak,Gs,Ok,xk,Wi,Ck,Sk,js,Nk,Ik,E1,qe,ku,Uk,Lk,Pu,Fk,zk,Au,Rk,qk,Ou,Gk,$1,Yi,jk,T1,Ms,xu,Mk,Vk,D1,Zi,Bk,k1,Vs,P1,Lt,Hk,Cu,Wk,Yk,Su,Zk,Jk,A1,Bs,O1,Ft,Kk,Nu,Qk,Xk,Hs,eP,tP,x1,Wo,rP,Ji,oP,aP,C1,Ki,nP,S1,Ws,Iu,sP,lP,N1,Ys,I1,Qi,iP,U1,Zs,L1,Js,Uu,dP,cP,F1,Ks,z1,Xi,pP,R1,Qs,q1,ed,mP,G1,Yo,hP,Xs,fP,uP,j1,el,Lu,_P,gP,M1,zt,vP,Fu,bP,yP,zu,wP,EP,V1,Zo,$P,Ru,TP,DP,B1,tl,H1,td,kP,W1,Ge,qu,PP,AP,Gu,OP,xP,rl,CP,ju,SP,NP,IP,ol,UP,Mu,LP,FP,Y1,al,tt,zP,Vu,RP,qP,Bu,GP,jP,Hu,MP,VP,Z1,Jo,BP,Wu,HP,WP,J1,nl,K1,xr,Yu,YP,ZP,Zu,JP,KP,Q1,Rt,QP,Ju,XP,eA,Ku,tA,rA,X1,rd,oA,eb,me,Qu,aA,nA,Xu,sA,lA,sl,iA,e_,dA,cA,pA,Cr,mA,t_,hA,fA,r_,uA,_A,gA,o_,vA,tb,od,bA,rb,Ko,Sr,yA,a_,wA,EA,n_,$A,TA,DA,Te,kA,s_,PA,AA,l_,OA,xA,i_,CA,SA,d_,NA,IA,ob,Nr,Qo,c_,ll,UA,p_,LA,ab,Xo,FA,il,zA,RA,nb,dl,m_,qA,GA,sb,cl,h_,jA,MA,lb,Q,f_,pl,VA,u_,BA,HA,WA,ml,ad,__,YA,ZA,JA,Ir,hl,KA,g_,QA,XA,eO,fl,tO,v_,rO,oO,aO,ul,nO,b_,sO,lO,iO,y_,Ur,dO,w_,cO,pO,E_,mO,hO,fO,$_,rt,uO,T_,_O,gO,D_,vO,bO,k_,yO,wO,EO,P_,Lr,$O,A_,TO,DO,O_,kO,PO,AO,_l,x_,OO,xO,gl,De,CO,C_,SO,NO,S_,IO,UO,N_,LO,FO,I_,zO,RO,qO,vl,GO,U_,jO,MO,ib,nd,L_,VO,db,ea,bl,BO,yl,HO,WO,YO,Fr,ZO,wl,JO,KO,F_,QO,XO,cb,sd,ex,pb,w,tx,ld,rx,z_,ox,id,ax,R_,nx,dd,sx,q_,lx,cd,ix,G_,dx,pd,cx,j_,px,md,mx,M_,hx,hd,fx,V_,ux,fd,_x,B_,gx,ud,vx,H_,bx,_d,yx,W_,wx,gd,Ex,Y_,$x,vd,Tx,Z_,Dx,bd,kx,J_,Px,yd,Ax,K_,Ox,wd,xx,Q_,Cx,Ed,Sx,X_,Nx,$d,Ix,eg,Ux,Td,Lx,tg,Fx,Dd,zx,rg,Rx,kd,qx,og,Gx,Pd,jx,ag,Mx,Ad,Vx,ng,Bx,Od,Hx,sg,Wx,mb;return A=new X({}),Mr=new fg({props:{warning:!0,$$slots:{default:[XR]},$$scope:{ctx:ae}}}),Ta=new C({props:{code:`from torch import nn
from transformers import Trainer


class CustomTrainer(Trainer):
    def compute_loss(self, model, inputs, return_outputs=False):
        labels = inputs.get("labels")
        # forward pass
        outputs = model(**inputs)
        logits = outputs.get("logits")
        # compute custom loss (suppose one has 3 labels with different weights)
        loss_fct = nn.CrossEntropyLoss(weight=torch.tensor([1.0, 2.0, 3.0]))
        loss = loss_fct(logits.view(-1, self.model.config.num_labels), labels.view(-1))
        return (loss, outputs) if return_outputs else loss`,highlighted:`<span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Trainer


<span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomTrainer</span>(<span class="hljs-title class_ inherited__">Trainer</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_loss</span>(<span class="hljs-params">self, model, inputs, return_outputs=<span class="hljs-literal">False</span></span>):
        labels = inputs.get(<span class="hljs-string">&quot;labels&quot;</span>)
        <span class="hljs-comment"># forward pass</span>
        outputs = model(**inputs)
        logits = outputs.get(<span class="hljs-string">&quot;logits&quot;</span>)
        <span class="hljs-comment"># compute custom loss (suppose one has 3 labels with different weights)</span>
        loss_fct = nn.CrossEntropyLoss(weight=torch.tensor([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>]))
        loss = loss_fct(logits.view(-<span class="hljs-number">1</span>, self.model.config.num_labels), labels.view(-<span class="hljs-number">1</span>))
        <span class="hljs-keyword">return</span> (loss, outputs) <span class="hljs-keyword">if</span> return_outputs <span class="hljs-keyword">else</span> loss`}}),Da=new X({}),ka=new T({props:{name:"class transformers.Trainer",anchor:"transformers.Trainer",parameters:[{name:"model",val:": typing.Union[transformers.modeling_utils.PreTrainedModel, torch.nn.modules.module.Module] = None"},{name:"args",val:": TrainingArguments = None"},{name:"data_collator",val:": typing.Optional[DataCollator] = None"},{name:"train_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"tokenizer",val:": typing.Optional[transformers.tokenization_utils_base.PreTrainedTokenizerBase] = None"},{name:"model_init",val:": typing.Callable[[], transformers.modeling_utils.PreTrainedModel] = None"},{name:"compute_metrics",val:": typing.Union[typing.Callable[[transformers.trainer_utils.EvalPrediction], typing.Dict], NoneType] = None"},{name:"callbacks",val:": typing.Optional[typing.List[transformers.trainer_callback.TrainerCallback]] = None"},{name:"optimizers",val:": typing.Tuple[torch.optim.optimizer.Optimizer, torch.optim.lr_scheduler.LambdaLR] = (None, None)"},{name:"preprocess_logits_for_metrics",val:": typing.Callable[[torch.Tensor, torch.Tensor], torch.Tensor] = None"}],parametersDescription:[{anchor:"transformers.Trainer.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_18595/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <code>torch.nn.Module</code>, <em>optional</em>) &#x2014;
The model to train, evaluate or use for predictions. If not provided, a <code>model_init</code> must be passed.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p><a href="/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer">Trainer</a> is optimized to work with the <a href="/docs/transformers/pr_18595/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> provided by the library. You can still use
your own models defined as <code>torch.nn.Module</code> as long as they work the same way as the &#x1F917; Transformers
models.</p>

					</div>`,name:"model"},{anchor:"transformers.Trainer.args",description:`<strong>args</strong> (<a href="/docs/transformers/pr_18595/en/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a>, <em>optional</em>) &#x2014;
The arguments to tweak for training. Will default to a basic instance of <a href="/docs/transformers/pr_18595/en/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a> with the
<code>output_dir</code> set to a directory named <em>tmp_trainer</em> in the current directory if not provided.`,name:"args"},{anchor:"transformers.Trainer.data_collator",description:`<strong>data_collator</strong> (<code>DataCollator</code>, <em>optional</em>) &#x2014;
The function to use to form a batch from a list of elements of <code>train_dataset</code> or <code>eval_dataset</code>. Will
default to <a href="/docs/transformers/pr_18595/en/main_classes/data_collator#transformers.default_data_collator">default_data_collator()</a> if no <code>tokenizer</code> is provided, an instance of
<a href="/docs/transformers/pr_18595/en/main_classes/data_collator#transformers.DataCollatorWithPadding">DataCollatorWithPadding</a> otherwise.`,name:"data_collator"},{anchor:"transformers.Trainer.train_dataset",description:`<strong>train_dataset</strong> (<code>torch.utils.data.Dataset</code> or <code>torch.utils.data.IterableDataset</code>, <em>optional</em>) &#x2014;
The dataset to use for training. If it is a <a href="https://huggingface.co/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset" rel="nofollow">Dataset</a>, columns not accepted by the
<code>model.forward()</code> method are automatically removed.</p>
<p>Note that if it&#x2019;s a <code>torch.utils.data.IterableDataset</code> with some randomization and you are training in a
distributed fashion, your iterable dataset should either use a internal attribute <code>generator</code> that is a
<code>torch.Generator</code> for the randomization that must be identical on all processes (and the Trainer will
manually set the seed of this <code>generator</code> at each epoch) or have a <code>set_epoch()</code> method that internally
sets the seed of the RNGs used.`,name:"train_dataset"},{anchor:"transformers.Trainer.eval_dataset",description:`<strong>eval_dataset</strong> (<code>torch.utils.data.Dataset</code>, <em>optional</em>) &#x2014;
The dataset to use for evaluation. If it is a <a href="https://huggingface.co/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset" rel="nofollow">Dataset</a>, columns not accepted by the
<code>model.forward()</code> method are automatically removed.`,name:"eval_dataset"},{anchor:"transformers.Trainer.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_18595/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase">PreTrainedTokenizerBase</a>, <em>optional</em>) &#x2014;
The tokenizer used to preprocess the data. If provided, will be used to automatically pad the inputs the
maximum length when batching inputs, and it will be saved along the model to make it easier to rerun an
interrupted training or reuse the fine-tuned model.`,name:"tokenizer"},{anchor:"transformers.Trainer.model_init",description:`<strong>model_init</strong> (<code>Callable[[], PreTrainedModel]</code>, <em>optional</em>) &#x2014;
A function that instantiates the model to be used. If provided, each call to <a href="/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer.train">train()</a> will start
from a new instance of the model as given by this function.</p>
<p>The function may have zero argument, or a single one containing the optuna/Ray Tune/SigOpt trial object, to
be able to choose different architectures according to hyper parameters (such as layer count, sizes of
inner layers, dropout probabilities etc).`,name:"model_init"},{anchor:"transformers.Trainer.compute_metrics",description:`<strong>compute_metrics</strong> (<code>Callable[[EvalPrediction], Dict]</code>, <em>optional</em>) &#x2014;
The function that will be used to compute metrics at evaluation. Must take a <a href="/docs/transformers/pr_18595/en/internal/trainer_utils#transformers.EvalPrediction">EvalPrediction</a> and return
a dictionary string to metric values.`,name:"compute_metrics"},{anchor:"transformers.Trainer.callbacks",description:`<strong>callbacks</strong> (List of <a href="/docs/transformers/pr_18595/en/main_classes/callback#transformers.TrainerCallback">TrainerCallback</a>, <em>optional</em>) &#x2014;
A list of callbacks to customize the training loop. Will add those to the list of default callbacks
detailed in <a href="callback">here</a>.</p>
<p>If you want to remove one of the default callbacks used, use the <a href="/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer.remove_callback">Trainer.remove_callback()</a> method.`,name:"callbacks"},{anchor:"transformers.Trainer.optimizers",description:`<strong>optimizers</strong> (<code>Tuple[torch.optim.Optimizer, torch.optim.lr_scheduler.LambdaLR]</code>, <em>optional</em>) &#x2014; A tuple
containing the optimizer and the scheduler to use. Will default to an instance of <a href="/docs/transformers/pr_18595/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> on your model
and a scheduler given by <a href="/docs/transformers/pr_18595/en/main_classes/optimizer_schedules#transformers.get_linear_schedule_with_warmup">get_linear_schedule_with_warmup()</a> controlled by <code>args</code>.`,name:"optimizers"},{anchor:"transformers.Trainer.preprocess_logits_for_metrics",description:`<strong>preprocess_logits_for_metrics</strong> (<code>Callable[[torch.Tensor, torch.Tensor], torch.Tensor]</code>, <em>optional</em>) &#x2014;
A function that preprocess the logits right before caching them at each evaluation step. Must take two
tensors, the logits and the labels, and return the logits once processed as desired. The modifications made
by this function will be reflected in the predictions received by <code>compute_metrics</code>.</p>
<p>Note that the labels (second parameter) will be <code>None</code> if the dataset does not have them.`,name:"preprocess_logits_for_metrics"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L223"}}),Pa=new T({props:{name:"add_callback",anchor:"transformers.Trainer.add_callback",parameters:[{name:"callback",val:""}],parametersDescription:[{anchor:"transformers.Trainer.add_callback.callback",description:`<strong>callback</strong> (<code>type</code> or <code>TrainerCallback</code>) &#x2014;
A <code>TrainerCallback</code> class or an instance of a <code>TrainerCallback</code>. In the
first case, will instantiate a member of that class.`,name:"callback"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L668"}}),Oa=new T({props:{name:"autocast_smart_context_manager",anchor:"transformers.Trainer.autocast_smart_context_manager",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L2436"}}),Ca=new T({props:{name:"compute_loss",anchor:"transformers.Trainer.compute_loss",parameters:[{name:"model",val:""},{name:"inputs",val:""},{name:"return_outputs",val:" = False"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L2503"}}),Sa=new T({props:{name:"compute_loss_context_manager",anchor:"transformers.Trainer.compute_loss_context_manager",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L2419"}}),Na=new T({props:{name:"create_optimizer",anchor:"transformers.Trainer.create_optimizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L1030"}}),Ua=new T({props:{name:"create_optimizer_and_scheduler",anchor:"transformers.Trainer.create_optimizer_and_scheduler",parameters:[{name:"num_training_steps",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L1014"}}),La=new T({props:{name:"create_scheduler",anchor:"transformers.Trainer.create_scheduler",parameters:[{name:"num_training_steps",val:": int"},{name:"optimizer",val:": Optimizer = None"}],parametersDescription:[{anchor:"transformers.Trainer.create_scheduler.num_training_steps",description:"<strong>num_training_steps</strong> (int) &#x2014; The number of training steps to do.",name:"num_training_steps"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L1138"}}),Fa=new T({props:{name:"evaluate",anchor:"transformers.Trainer.evaluate",parameters:[{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"}],parametersDescription:[{anchor:"transformers.Trainer.evaluate.eval_dataset",description:`<strong>eval_dataset</strong> (<code>Dataset</code>, <em>optional</em>) &#x2014;
Pass a dataset if you wish to override <code>self.eval_dataset</code>. If it is a <a href="https://huggingface.co/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset" rel="nofollow">Dataset</a>, columns
not accepted by the <code>model.forward()</code> method are automatically removed. It must implement the <code>__len__</code>
method.`,name:"eval_dataset"},{anchor:"transformers.Trainer.evaluate.ignore_keys",description:`<strong>ignore_keys</strong> (<code>Lst[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Trainer.evaluate.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;eval&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;eval_bleu&#x201D; if the prefix is &#x201C;eval&#x201D; (default)`,name:"metric_key_prefix"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L2732",returnDescription:`
<p>A dictionary containing the evaluation loss and the potential metrics computed from the predictions. The
dictionary also contains the epoch number which comes from the training state.</p>
`}}),Ra=new T({props:{name:"evaluation_loop",anchor:"transformers.Trainer.evaluation_loop",parameters:[{name:"dataloader",val:": DataLoader"},{name:"description",val:": str"},{name:"prediction_loss_only",val:": typing.Optional[bool] = None"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L2861"}}),qa=new T({props:{name:"floating_point_ops",anchor:"transformers.Trainer.floating_point_ops",parameters:[{name:"inputs",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"}],parametersDescription:[{anchor:"transformers.Trainer.floating_point_ops.inputs",description:`<strong>inputs</strong> (<code>Dict[str, Union[torch.Tensor, Any]]</code>) &#x2014;
The inputs and targets of the model.`,name:"inputs"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L3216",returnDescription:`
<p>The number of floating-point operations.</p>
`,returnType:`
<p><code>int</code></p>
`}}),ja=new T({props:{name:"get_eval_dataloader",anchor:"transformers.Trainer.get_eval_dataloader",parameters:[{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"}],parametersDescription:[{anchor:"transformers.Trainer.get_eval_dataloader.eval_dataset",description:`<strong>eval_dataset</strong> (<code>torch.utils.data.Dataset</code>, <em>optional</em>) &#x2014;
If provided, will override <code>self.eval_dataset</code>. If it is a <a href="https://huggingface.co/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset" rel="nofollow">Dataset</a>, columns not accepted
by the <code>model.forward()</code> method are automatically removed. It must implement <code>__len__</code>.`,name:"eval_dataset"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L916"}}),Va=new T({props:{name:"get_optimizer_cls_and_kwargs",anchor:"transformers.Trainer.get_optimizer_cls_and_kwargs",parameters:[{name:"args",val:": TrainingArguments"}],parametersDescription:[{anchor:"transformers.Trainer.get_optimizer_cls_and_kwargs.args",description:`<strong>args</strong> (<code>transformers.training_args.TrainingArguments</code>) &#x2014;
The training arguments for the training session.`,name:"args"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L1078"}}),Ba=new T({props:{name:"get_test_dataloader",anchor:"transformers.Trainer.get_test_dataloader",parameters:[{name:"test_dataset",val:": Dataset"}],parametersDescription:[{anchor:"transformers.Trainer.get_test_dataloader.test_dataset",description:`<strong>test_dataset</strong> (<code>torch.utils.data.Dataset</code>, <em>optional</em>) &#x2014;
The test dataset to use. If it is a <a href="https://huggingface.co/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset" rel="nofollow">Dataset</a>, columns not accepted by the
<code>model.forward()</code> method are automatically removed. It must implement <code>__len__</code>.`,name:"test_dataset"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L966"}}),Wa=new T({props:{name:"get_train_dataloader",anchor:"transformers.Trainer.get_train_dataloader",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L837"}}),Za=new T({props:{name:"hyperparameter_search",anchor:"transformers.Trainer.hyperparameter_search",parameters:[{name:"hp_space",val:": typing.Union[typing.Callable[[ForwardRef('optuna.Trial')], typing.Dict[str, float]], NoneType] = None"},{name:"compute_objective",val:": typing.Union[typing.Callable[[typing.Dict[str, float]], float], NoneType] = None"},{name:"n_trials",val:": int = 20"},{name:"direction",val:": str = 'minimize'"},{name:"backend",val:": typing.Union[ForwardRef('str'), transformers.trainer_utils.HPSearchBackend, NoneType] = None"},{name:"hp_name",val:": typing.Union[typing.Callable[[ForwardRef('optuna.Trial')], str], NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.Trainer.hyperparameter_search.hp_space",description:`<strong>hp_space</strong> (<code>Callable[[&quot;optuna.Trial&quot;], Dict[str, float]]</code>, <em>optional</em>) &#x2014;
A function that defines the hyperparameter search space. Will default to
<code>default_hp_space_optuna()</code> or <code>default_hp_space_ray()</code> or
<code>default_hp_space_sigopt()</code> depending on your backend.`,name:"hp_space"},{anchor:"transformers.Trainer.hyperparameter_search.compute_objective",description:`<strong>compute_objective</strong> (<code>Callable[[Dict[str, float]], float]</code>, <em>optional</em>) &#x2014;
A function computing the objective to minimize or maximize from the metrics returned by the <code>evaluate</code>
method. Will default to <code>default_compute_objective()</code>.`,name:"compute_objective"},{anchor:"transformers.Trainer.hyperparameter_search.n_trials",description:`<strong>n_trials</strong> (<code>int</code>, <em>optional</em>, defaults to 100) &#x2014;
The number of trial runs to test.`,name:"n_trials"},{anchor:"transformers.Trainer.hyperparameter_search.direction(str,",description:`<strong>direction(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;minimize&quot;</code>) &#x2014;
Whether to optimize greater or lower objects. Can be <code>&quot;minimize&quot;</code> or <code>&quot;maximize&quot;</code>, you should pick
<code>&quot;minimize&quot;</code> when optimizing the validation loss, <code>&quot;maximize&quot;</code> when optimizing one or several metrics.`,name:"direction(str,"},{anchor:"transformers.Trainer.hyperparameter_search.backend(str",description:`<strong>backend(<code>str</code></strong> or <code>HPSearchBackend</code>, <em>optional</em>) &#x2014;
The backend to use for hyperparameter search. Will default to optuna or Ray Tune or SigOpt, depending
on which one is installed. If all are installed, will default to optuna.
kwargs &#x2014;
Additional keyword arguments passed along to <code>optuna.create_study</code> or <code>ray.tune.run</code>. For more
information see:</p>
<ul>
<li>the documentation of
<a href="https://optuna.readthedocs.io/en/stable/reference/generated/optuna.study.create_study.html" rel="nofollow">optuna.create_study</a></li>
<li>the documentation of <a href="https://docs.ray.io/en/latest/tune/api_docs/execution.html#tune-run" rel="nofollow">tune.run</a></li>
<li>the documentation of <a href="https://app.sigopt.com/docs/endpoints/experiments/create" rel="nofollow">sigopt</a></li>
</ul>`,name:"backend(str"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L2275",returnDescription:`
<p>All the information about the best run.</p>
`,returnType:`
<p><code>trainer_utils.BestRun</code></p>
`}}),Xr=new fg({props:{warning:!0,$$slots:{default:[eq]},$$scope:{ctx:ae}}}),Ja=new T({props:{name:"init_git_repo",anchor:"transformers.Trainer.init_git_repo",parameters:[{name:"at_init",val:": bool = False"}],parametersDescription:[{anchor:"transformers.Trainer.init_git_repo.at_init",description:`<strong>at_init</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether this function is called before any training or not. If <code>self.args.overwrite_output_dir</code> is
<code>True</code> and <code>at_init</code> is <code>True</code>, the path to the repo (which is <code>self.args.output_dir</code>) might be wiped
out.`,name:"at_init"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L3234"}}),Qa=new T({props:{name:"is_local_process_zero",anchor:"transformers.Trainer.is_local_process_zero",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L2535"}}),Xa=new T({props:{name:"is_world_process_zero",anchor:"transformers.Trainer.is_world_process_zero",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L2542"}}),tn=new T({props:{name:"log",anchor:"transformers.Trainer.log",parameters:[{name:"logs",val:": typing.Dict[str, float]"}],parametersDescription:[{anchor:"transformers.Trainer.log.logs",description:`<strong>logs</strong> (<code>Dict[str, float]</code>) &#x2014;
The values to log.`,name:"logs"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L2368"}}),on=new T({props:{name:"log_metrics",anchor:"transformers.Trainer.log_metrics",parameters:[{name:"split",val:""},{name:"metrics",val:""}],parametersDescription:[{anchor:"transformers.Trainer.log_metrics.split",description:`<strong>split</strong> (<code>str</code>) &#x2014;
Mode/split name: one of <code>train</code>, <code>eval</code>, <code>test</code>`,name:"split"},{anchor:"transformers.Trainer.log_metrics.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics returned from train/evaluate/predictmetrics: metrics dict`,name:"metrics"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer_pt_utils.py#L878"}}),oo=new QR({props:{anchor:"transformers.Trainer.log_metrics.example",$$slots:{default:[tq]},$$scope:{ctx:ae}}}),sn=new T({props:{name:"metrics_format",anchor:"transformers.Trainer.metrics_format",parameters:[{name:"metrics",val:": typing.Dict[str, float]"}],parametersDescription:[{anchor:"transformers.Trainer.metrics_format.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics returned from train/evaluate/predict`,name:"metrics"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer_pt_utils.py#L852",returnDescription:`
<p>The reformatted metrics</p>
`,returnType:`
<p>metrics (<code>Dict[str, float]</code>)</p>
`}}),ln=new T({props:{name:"num_examples",anchor:"transformers.Trainer.num_examples",parameters:[{name:"dataloader",val:": DataLoader"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L1155"}}),cn=new T({props:{name:"pop_callback",anchor:"transformers.Trainer.pop_callback",parameters:[{name:"callback",val:""}],parametersDescription:[{anchor:"transformers.Trainer.pop_callback.callback",description:`<strong>callback</strong> (<code>type</code> or <code>TrainerCallback</code>) &#x2014;
A <code>TrainerCallback</code> class or an instance of a <code>TrainerCallback</code>. In the
first case, will pop the first member of that class found in the list of callbacks.`,name:"callback"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L679",returnDescription:`
<p>The callback removed, if found.</p>
`,returnType:`
<p><code>TrainerCallback</code></p>
`}}),hn=new T({props:{name:"predict",anchor:"transformers.Trainer.predict",parameters:[{name:"test_dataset",val:": Dataset"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'test'"}],parametersDescription:[{anchor:"transformers.Trainer.predict.test_dataset",description:`<strong>test_dataset</strong> (<code>Dataset</code>) &#x2014;
Dataset to run the predictions on. If it is an <code>datasets.Dataset</code>, columns not accepted by the
<code>model.forward()</code> method are automatically removed. Has to implement the method <code>__len__</code>`,name:"test_dataset"},{anchor:"transformers.Trainer.predict.ignore_keys",description:`<strong>ignore_keys</strong> (<code>Lst[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Trainer.predict.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;test&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;test_bleu&#x201D; if the prefix is &#x201C;test&#x201D; (default)`,name:"metric_key_prefix"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L2801"}}),so=new fg({props:{$$slots:{default:[rq]},$$scope:{ctx:ae}}}),_n=new T({props:{name:"prediction_loop",anchor:"transformers.Trainer.prediction_loop",parameters:[{name:"dataloader",val:": DataLoader"},{name:"description",val:": str"},{name:"prediction_loss_only",val:": typing.Optional[bool] = None"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L3417"}}),gn=new T({props:{name:"prediction_step",anchor:"transformers.Trainer.prediction_step",parameters:[{name:"model",val:": Module"},{name:"inputs",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"},{name:"prediction_loss_only",val:": bool"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"}],parametersDescription:[{anchor:"transformers.Trainer.prediction_step.model",description:`<strong>model</strong> (<code>nn.Module</code>) &#x2014;
The model to evaluate.`,name:"model"},{anchor:"transformers.Trainer.prediction_step.inputs",description:`<strong>inputs</strong> (<code>Dict[str, Union[torch.Tensor, Any]]</code>) &#x2014;
The inputs and targets of the model.</p>
<p>The dictionary will be unpacked before being fed to the model. Most models expect the targets under the
argument <code>labels</code>. Check your model&#x2019;s documentation for all accepted arguments.`,name:"inputs"},{anchor:"transformers.Trainer.prediction_step.prediction_loss_only",description:`<strong>prediction_loss_only</strong> (<code>bool</code>) &#x2014;
Whether or not to return the loss only.`,name:"prediction_loss_only"},{anchor:"transformers.Trainer.prediction_step.ignore_keys",description:`<strong>ignore_keys</strong> (<code>Lst[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L3119",returnDescription:`
<p>A tuple with the loss,
logits and labels (each being optional).</p>
`,returnType:`
<p>Tuple[Optional[torch.Tensor], Optional[torch.Tensor], Optional[torch.Tensor]]</p>
`}}),vn=new T({props:{name:"push_to_hub",anchor:"transformers.Trainer.push_to_hub",parameters:[{name:"commit_message",val:": typing.Optional[str] = 'End of training'"},{name:"blocking",val:": bool = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.Trainer.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;End of training&quot;</code>) &#x2014;
Message to commit while pushing.`,name:"commit_message"},{anchor:"transformers.Trainer.push_to_hub.blocking",description:`<strong>blocking</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether the function should return only when the <code>git push</code> has finished.
kwargs &#x2014;
Additional keyword arguments passed along to <code>create_model_card()</code>.`,name:"blocking"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L3358",returnDescription:`
<p>The url of the commit of your model in the given repository if <code>blocking=False</code>, a tuple with the url of
the commit and an object to track the progress of the commit if <code>blocking=True</code></p>
`}}),bn=new T({props:{name:"remove_callback",anchor:"transformers.Trainer.remove_callback",parameters:[{name:"callback",val:""}],parametersDescription:[{anchor:"transformers.Trainer.remove_callback.callback",description:`<strong>callback</strong> (<code>type</code> or <code>TrainerCallback</code>) &#x2014;
A <code>TrainerCallback</code> class or an instance of a <code>TrainerCallback</code>. In the
first case, will remove the first member of that class found in the list of callbacks.`,name:"callback"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L695"}}),wn=new T({props:{name:"save_metrics",anchor:"transformers.Trainer.save_metrics",parameters:[{name:"split",val:""},{name:"metrics",val:""},{name:"combined",val:" = True"}],parametersDescription:[{anchor:"transformers.Trainer.save_metrics.split",description:`<strong>split</strong> (<code>str</code>) &#x2014;
Mode/split name: one of <code>train</code>, <code>eval</code>, <code>test</code>, <code>all</code>`,name:"split"},{anchor:"transformers.Trainer.save_metrics.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics returned from train/evaluate/predict`,name:"metrics"},{anchor:"transformers.Trainer.save_metrics.combined",description:`<strong>combined</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Creates combined metrics by updating <code>all_results.json</code> with metrics of this call`,name:"combined"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer_pt_utils.py#L968"}}),Tn=new T({props:{name:"save_model",anchor:"transformers.Trainer.save_model",parameters:[{name:"output_dir",val:": typing.Optional[str] = None"},{name:"_internal_call",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L2554"}}),kn=new T({props:{name:"save_state",anchor:"transformers.Trainer.save_state",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer_pt_utils.py#L1006"}}),Pn=new T({props:{name:"torchdynamo_smart_context_manager",anchor:"transformers.Trainer.torchdynamo_smart_context_manager",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L2430"}}),On=new T({props:{name:"train",anchor:"transformers.Trainer.train",parameters:[{name:"resume_from_checkpoint",val:": typing.Union[str, bool, NoneType] = None"},{name:"trial",val:": typing.Union[ForwardRef('optuna.Trial'), typing.Dict[str, typing.Any]] = None"},{name:"ignore_keys_for_eval",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.Trainer.train.resume_from_checkpoint",description:`<strong>resume_from_checkpoint</strong> (<code>str</code> or <code>bool</code>, <em>optional</em>) &#x2014;
If a <code>str</code>, local path to a saved checkpoint as saved by a previous instance of <a href="/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer">Trainer</a>. If a
<code>bool</code> and equals <code>True</code>, load the last checkpoint in <em>args.output_dir</em> as saved by a previous instance
of <a href="/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer">Trainer</a>. If present, training will resume from the model/optimizer/scheduler states loaded here.`,name:"resume_from_checkpoint"},{anchor:"transformers.Trainer.train.trial",description:`<strong>trial</strong> (<code>optuna.Trial</code> or <code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The trial run or the hyperparameter dictionary for hyperparameter search.`,name:"trial"},{anchor:"transformers.Trainer.train.ignore_keys_for_eval",description:`<strong>ignore_keys_for_eval</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions for evaluation during the training.
kwargs &#x2014;
Additional keyword arguments used to hide deprecated arguments`,name:"ignore_keys_for_eval"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L1427"}}),xn=new T({props:{name:"training_step",anchor:"transformers.Trainer.training_step",parameters:[{name:"model",val:": Module"},{name:"inputs",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"}],parametersDescription:[{anchor:"transformers.Trainer.training_step.model",description:`<strong>model</strong> (<code>nn.Module</code>) &#x2014;
The model to train.`,name:"model"},{anchor:"transformers.Trainer.training_step.inputs",description:`<strong>inputs</strong> (<code>Dict[str, Union[torch.Tensor, Any]]</code>) &#x2014;
The inputs and targets of the model.</p>
<p>The dictionary will be unpacked before being fed to the model. Most models expect the targets under the
argument <code>labels</code>. Check your model&#x2019;s documentation for all accepted arguments.`,name:"inputs"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer.py#L2455",returnDescription:`
<p>The tensor with training loss on this batch.</p>
`,returnType:`
<p><code>torch.Tensor</code></p>
`}}),Cn=new X({}),Sn=new T({props:{name:"class transformers.Seq2SeqTrainer",anchor:"transformers.Seq2SeqTrainer",parameters:[{name:"model",val:": typing.Union[transformers.modeling_utils.PreTrainedModel, torch.nn.modules.module.Module] = None"},{name:"args",val:": TrainingArguments = None"},{name:"data_collator",val:": typing.Optional[DataCollator] = None"},{name:"train_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"tokenizer",val:": typing.Optional[transformers.tokenization_utils_base.PreTrainedTokenizerBase] = None"},{name:"model_init",val:": typing.Callable[[], transformers.modeling_utils.PreTrainedModel] = None"},{name:"compute_metrics",val:": typing.Union[typing.Callable[[transformers.trainer_utils.EvalPrediction], typing.Dict], NoneType] = None"},{name:"callbacks",val:": typing.Optional[typing.List[transformers.trainer_callback.TrainerCallback]] = None"},{name:"optimizers",val:": typing.Tuple[torch.optim.optimizer.Optimizer, torch.optim.lr_scheduler.LambdaLR] = (None, None)"},{name:"preprocess_logits_for_metrics",val:": typing.Callable[[torch.Tensor, torch.Tensor], torch.Tensor] = None"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer_seq2seq.py#L30"}}),Nn=new T({props:{name:"evaluate",anchor:"transformers.Seq2SeqTrainer.evaluate",parameters:[{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"},{name:"**gen_kwargs",val:""}],parametersDescription:[{anchor:"transformers.Seq2SeqTrainer.evaluate.eval_dataset",description:`<strong>eval_dataset</strong> (<code>Dataset</code>, <em>optional</em>) &#x2014;
Pass a dataset if you wish to override <code>self.eval_dataset</code>. If it is an <a href="https://huggingface.co/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset" rel="nofollow">Dataset</a>, columns
not accepted by the <code>model.forward()</code> method are automatically removed. It must implement the <code>__len__</code>
method.`,name:"eval_dataset"},{anchor:"transformers.Seq2SeqTrainer.evaluate.ignore_keys",description:`<strong>ignore_keys</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Seq2SeqTrainer.evaluate.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;eval&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;eval_bleu&#x201D; if the prefix is <code>&quot;eval&quot;</code> (default)`,name:"metric_key_prefix"},{anchor:"transformers.Seq2SeqTrainer.evaluate.max_length",description:`<strong>max_length</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The maximum target length to use when predicting with the generate method.`,name:"max_length"},{anchor:"transformers.Seq2SeqTrainer.evaluate.num_beams",description:`<strong>num_beams</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of beams for beam search that will be used when predicting with the generate method. 1 means no
beam search.
gen_kwargs &#x2014;
Additional <code>generate</code> specific kwargs.`,name:"num_beams"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer_seq2seq.py#L31",returnDescription:`
<p>A dictionary containing the evaluation loss and the potential metrics computed from the predictions. The
dictionary also contains the epoch number which comes from the training state.</p>
`}}),Un=new T({props:{name:"predict",anchor:"transformers.Seq2SeqTrainer.predict",parameters:[{name:"test_dataset",val:": Dataset"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'test'"},{name:"**gen_kwargs",val:""}],parametersDescription:[{anchor:"transformers.Seq2SeqTrainer.predict.test_dataset",description:`<strong>test_dataset</strong> (<code>Dataset</code>) &#x2014;
Dataset to run the predictions on. If it is a <a href="https://huggingface.co/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset" rel="nofollow">Dataset</a>, columns not accepted by the
<code>model.forward()</code> method are automatically removed. Has to implement the method <code>__len__</code>`,name:"test_dataset"},{anchor:"transformers.Seq2SeqTrainer.predict.ignore_keys",description:`<strong>ignore_keys</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Seq2SeqTrainer.predict.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;eval&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;eval_bleu&#x201D; if the prefix is <code>&quot;eval&quot;</code> (default)`,name:"metric_key_prefix"},{anchor:"transformers.Seq2SeqTrainer.predict.max_length",description:`<strong>max_length</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The maximum target length to use when predicting with the generate method.`,name:"max_length"},{anchor:"transformers.Seq2SeqTrainer.predict.num_beams",description:`<strong>num_beams</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of beams for beam search that will be used when predicting with the generate method. 1 means no
beam search.
gen_kwargs &#x2014;
Additional <code>generate</code> specific kwargs.`,name:"num_beams"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/trainer_seq2seq.py#L81"}}),ho=new fg({props:{$$slots:{default:[oq]},$$scope:{ctx:ae}}}),zn=new X({}),Rn=new T({props:{name:"class transformers.TrainingArguments",anchor:"transformers.TrainingArguments",parameters:[{name:"output_dir",val:": str"},{name:"overwrite_output_dir",val:": bool = False"},{name:"do_train",val:": bool = False"},{name:"do_eval",val:": bool = False"},{name:"do_predict",val:": bool = False"},{name:"evaluation_strategy",val:": typing.Union[transformers.trainer_utils.IntervalStrategy, str] = 'no'"},{name:"prediction_loss_only",val:": bool = False"},{name:"per_device_train_batch_size",val:": int = 8"},{name:"per_device_eval_batch_size",val:": int = 8"},{name:"per_gpu_train_batch_size",val:": typing.Optional[int] = None"},{name:"per_gpu_eval_batch_size",val:": typing.Optional[int] = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"eval_accumulation_steps",val:": typing.Optional[int] = None"},{name:"eval_delay",val:": typing.Optional[float] = 0"},{name:"learning_rate",val:": float = 5e-05"},{name:"weight_decay",val:": float = 0.0"},{name:"adam_beta1",val:": float = 0.9"},{name:"adam_beta2",val:": float = 0.999"},{name:"adam_epsilon",val:": float = 1e-08"},{name:"max_grad_norm",val:": float = 1.0"},{name:"num_train_epochs",val:": float = 3.0"},{name:"max_steps",val:": int = -1"},{name:"lr_scheduler_type",val:": typing.Union[transformers.trainer_utils.SchedulerType, str] = 'linear'"},{name:"warmup_ratio",val:": float = 0.0"},{name:"warmup_steps",val:": int = 0"},{name:"log_level",val:": typing.Optional[str] = 'passive'"},{name:"log_level_replica",val:": typing.Optional[str] = 'passive'"},{name:"log_on_each_node",val:": bool = True"},{name:"logging_dir",val:": typing.Optional[str] = None"},{name:"logging_strategy",val:": typing.Union[transformers.trainer_utils.IntervalStrategy, str] = 'steps'"},{name:"logging_first_step",val:": bool = False"},{name:"logging_steps",val:": int = 500"},{name:"logging_nan_inf_filter",val:": bool = True"},{name:"save_strategy",val:": typing.Union[transformers.trainer_utils.IntervalStrategy, str] = 'steps'"},{name:"save_steps",val:": int = 500"},{name:"save_total_limit",val:": typing.Optional[int] = None"},{name:"save_on_each_node",val:": bool = False"},{name:"no_cuda",val:": bool = False"},{name:"seed",val:": int = 42"},{name:"data_seed",val:": typing.Optional[int] = None"},{name:"jit_mode_eval",val:": bool = False"},{name:"use_ipex",val:": bool = False"},{name:"bf16",val:": bool = False"},{name:"fp16",val:": bool = False"},{name:"fp16_opt_level",val:": str = 'O1'"},{name:"half_precision_backend",val:": str = 'auto'"},{name:"bf16_full_eval",val:": bool = False"},{name:"fp16_full_eval",val:": bool = False"},{name:"tf32",val:": typing.Optional[bool] = None"},{name:"local_rank",val:": int = -1"},{name:"xpu_backend",val:": typing.Optional[str] = None"},{name:"tpu_num_cores",val:": typing.Optional[int] = None"},{name:"tpu_metrics_debug",val:": bool = False"},{name:"debug",val:": str = ''"},{name:"dataloader_drop_last",val:": bool = False"},{name:"eval_steps",val:": typing.Optional[int] = None"},{name:"dataloader_num_workers",val:": int = 0"},{name:"past_index",val:": int = -1"},{name:"run_name",val:": typing.Optional[str] = None"},{name:"disable_tqdm",val:": typing.Optional[bool] = None"},{name:"remove_unused_columns",val:": typing.Optional[bool] = True"},{name:"label_names",val:": typing.Optional[typing.List[str]] = None"},{name:"load_best_model_at_end",val:": typing.Optional[bool] = False"},{name:"metric_for_best_model",val:": typing.Optional[str] = None"},{name:"greater_is_better",val:": typing.Optional[bool] = None"},{name:"ignore_data_skip",val:": bool = False"},{name:"sharded_ddp",val:": str = ''"},{name:"fsdp",val:": str = ''"},{name:"fsdp_min_num_params",val:": int = 0"},{name:"fsdp_transformer_layer_cls_to_wrap",val:": typing.Optional[str] = None"},{name:"deepspeed",val:": typing.Optional[str] = None"},{name:"label_smoothing_factor",val:": float = 0.0"},{name:"optim",val:": typing.Union[transformers.training_args.OptimizerNames, str] = 'adamw_hf'"},{name:"adafactor",val:": bool = False"},{name:"group_by_length",val:": bool = False"},{name:"length_column_name",val:": typing.Optional[str] = 'length'"},{name:"report_to",val:": typing.Optional[typing.List[str]] = None"},{name:"ddp_find_unused_parameters",val:": typing.Optional[bool] = None"},{name:"ddp_bucket_cap_mb",val:": typing.Optional[int] = None"},{name:"dataloader_pin_memory",val:": bool = True"},{name:"skip_memory_metrics",val:": bool = True"},{name:"use_legacy_prediction_loop",val:": bool = False"},{name:"push_to_hub",val:": bool = False"},{name:"resume_from_checkpoint",val:": typing.Optional[str] = None"},{name:"hub_model_id",val:": typing.Optional[str] = None"},{name:"hub_strategy",val:": typing.Union[transformers.trainer_utils.HubStrategy, str] = 'every_save'"},{name:"hub_token",val:": typing.Optional[str] = None"},{name:"hub_private_repo",val:": bool = False"},{name:"gradient_checkpointing",val:": bool = False"},{name:"include_inputs_for_metrics",val:": bool = False"},{name:"fp16_backend",val:": str = 'auto'"},{name:"push_to_hub_model_id",val:": typing.Optional[str] = None"},{name:"push_to_hub_organization",val:": typing.Optional[str] = None"},{name:"push_to_hub_token",val:": typing.Optional[str] = None"},{name:"mp_parameters",val:": str = ''"},{name:"auto_find_batch_size",val:": bool = False"},{name:"full_determinism",val:": bool = False"},{name:"torchdynamo",val:": typing.Optional[str] = None"},{name:"ray_scope",val:": typing.Optional[str] = 'last'"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/training_args.py#L109"}}),qn=new T({props:{name:"get_process_log_level",anchor:"transformers.TrainingArguments.get_process_log_level",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/training_args.py#L1531"}}),jn=new T({props:{name:"get_warmup_steps",anchor:"transformers.TrainingArguments.get_warmup_steps",parameters:[{name:"num_training_steps",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/training_args.py#L1617"}}),Mn=new T({props:{name:"main_process_first",anchor:"transformers.TrainingArguments.main_process_first",parameters:[{name:"local",val:" = True"},{name:"desc",val:" = 'work'"}],parametersDescription:[{anchor:"transformers.TrainingArguments.main_process_first.local",description:`<strong>local</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
if <code>True</code> first means process of rank 0 of each node if <code>False</code> first means process of rank 0 of node
rank 0 In multi-node environment with a shared filesystem you most likely will want to use
<code>local=False</code> so that only the main process of the first node will do the processing. If however, the
filesystem is not shared, then the main process of each node will need to do the processing, which is
the default behavior.`,name:"local"},{anchor:"transformers.TrainingArguments.main_process_first.desc",description:`<strong>desc</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;work&quot;</code>) &#x2014;
a work description to be used in debug logs`,name:"desc"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/training_args.py#L1562"}}),Vn=new T({props:{name:"to_dict",anchor:"transformers.TrainingArguments.to_dict",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/training_args.py#L1626"}}),Hn=new T({props:{name:"to_json_string",anchor:"transformers.TrainingArguments.to_json_string",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/training_args.py#L1641"}}),Wn=new T({props:{name:"to_sanitized_dict",anchor:"transformers.TrainingArguments.to_sanitized_dict",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/training_args.py#L1647"}}),Yn=new X({}),Zn=new T({props:{name:"class transformers.Seq2SeqTrainingArguments",anchor:"transformers.Seq2SeqTrainingArguments",parameters:[{name:"output_dir",val:": str"},{name:"overwrite_output_dir",val:": bool = False"},{name:"do_train",val:": bool = False"},{name:"do_eval",val:": bool = False"},{name:"do_predict",val:": bool = False"},{name:"evaluation_strategy",val:": typing.Union[transformers.trainer_utils.IntervalStrategy, str] = 'no'"},{name:"prediction_loss_only",val:": bool = False"},{name:"per_device_train_batch_size",val:": int = 8"},{name:"per_device_eval_batch_size",val:": int = 8"},{name:"per_gpu_train_batch_size",val:": typing.Optional[int] = None"},{name:"per_gpu_eval_batch_size",val:": typing.Optional[int] = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"eval_accumulation_steps",val:": typing.Optional[int] = None"},{name:"eval_delay",val:": typing.Optional[float] = 0"},{name:"learning_rate",val:": float = 5e-05"},{name:"weight_decay",val:": float = 0.0"},{name:"adam_beta1",val:": float = 0.9"},{name:"adam_beta2",val:": float = 0.999"},{name:"adam_epsilon",val:": float = 1e-08"},{name:"max_grad_norm",val:": float = 1.0"},{name:"num_train_epochs",val:": float = 3.0"},{name:"max_steps",val:": int = -1"},{name:"lr_scheduler_type",val:": typing.Union[transformers.trainer_utils.SchedulerType, str] = 'linear'"},{name:"warmup_ratio",val:": float = 0.0"},{name:"warmup_steps",val:": int = 0"},{name:"log_level",val:": typing.Optional[str] = 'passive'"},{name:"log_level_replica",val:": typing.Optional[str] = 'passive'"},{name:"log_on_each_node",val:": bool = True"},{name:"logging_dir",val:": typing.Optional[str] = None"},{name:"logging_strategy",val:": typing.Union[transformers.trainer_utils.IntervalStrategy, str] = 'steps'"},{name:"logging_first_step",val:": bool = False"},{name:"logging_steps",val:": int = 500"},{name:"logging_nan_inf_filter",val:": bool = True"},{name:"save_strategy",val:": typing.Union[transformers.trainer_utils.IntervalStrategy, str] = 'steps'"},{name:"save_steps",val:": int = 500"},{name:"save_total_limit",val:": typing.Optional[int] = None"},{name:"save_on_each_node",val:": bool = False"},{name:"no_cuda",val:": bool = False"},{name:"seed",val:": int = 42"},{name:"data_seed",val:": typing.Optional[int] = None"},{name:"jit_mode_eval",val:": bool = False"},{name:"use_ipex",val:": bool = False"},{name:"bf16",val:": bool = False"},{name:"fp16",val:": bool = False"},{name:"fp16_opt_level",val:": str = 'O1'"},{name:"half_precision_backend",val:": str = 'auto'"},{name:"bf16_full_eval",val:": bool = False"},{name:"fp16_full_eval",val:": bool = False"},{name:"tf32",val:": typing.Optional[bool] = None"},{name:"local_rank",val:": int = -1"},{name:"xpu_backend",val:": typing.Optional[str] = None"},{name:"tpu_num_cores",val:": typing.Optional[int] = None"},{name:"tpu_metrics_debug",val:": bool = False"},{name:"debug",val:": str = ''"},{name:"dataloader_drop_last",val:": bool = False"},{name:"eval_steps",val:": typing.Optional[int] = None"},{name:"dataloader_num_workers",val:": int = 0"},{name:"past_index",val:": int = -1"},{name:"run_name",val:": typing.Optional[str] = None"},{name:"disable_tqdm",val:": typing.Optional[bool] = None"},{name:"remove_unused_columns",val:": typing.Optional[bool] = True"},{name:"label_names",val:": typing.Optional[typing.List[str]] = None"},{name:"load_best_model_at_end",val:": typing.Optional[bool] = False"},{name:"metric_for_best_model",val:": typing.Optional[str] = None"},{name:"greater_is_better",val:": typing.Optional[bool] = None"},{name:"ignore_data_skip",val:": bool = False"},{name:"sharded_ddp",val:": str = ''"},{name:"fsdp",val:": str = ''"},{name:"fsdp_min_num_params",val:": int = 0"},{name:"fsdp_transformer_layer_cls_to_wrap",val:": typing.Optional[str] = None"},{name:"deepspeed",val:": typing.Optional[str] = None"},{name:"label_smoothing_factor",val:": float = 0.0"},{name:"optim",val:": typing.Union[transformers.training_args.OptimizerNames, str] = 'adamw_hf'"},{name:"adafactor",val:": bool = False"},{name:"group_by_length",val:": bool = False"},{name:"length_column_name",val:": typing.Optional[str] = 'length'"},{name:"report_to",val:": typing.Optional[typing.List[str]] = None"},{name:"ddp_find_unused_parameters",val:": typing.Optional[bool] = None"},{name:"ddp_bucket_cap_mb",val:": typing.Optional[int] = None"},{name:"dataloader_pin_memory",val:": bool = True"},{name:"skip_memory_metrics",val:": bool = True"},{name:"use_legacy_prediction_loop",val:": bool = False"},{name:"push_to_hub",val:": bool = False"},{name:"resume_from_checkpoint",val:": typing.Optional[str] = None"},{name:"hub_model_id",val:": typing.Optional[str] = None"},{name:"hub_strategy",val:": typing.Union[transformers.trainer_utils.HubStrategy, str] = 'every_save'"},{name:"hub_token",val:": typing.Optional[str] = None"},{name:"hub_private_repo",val:": bool = False"},{name:"gradient_checkpointing",val:": bool = False"},{name:"include_inputs_for_metrics",val:": bool = False"},{name:"fp16_backend",val:": str = 'auto'"},{name:"push_to_hub_model_id",val:": typing.Optional[str] = None"},{name:"push_to_hub_organization",val:": typing.Optional[str] = None"},{name:"push_to_hub_token",val:": typing.Optional[str] = None"},{name:"mp_parameters",val:": str = ''"},{name:"auto_find_batch_size",val:": bool = False"},{name:"full_determinism",val:": bool = False"},{name:"torchdynamo",val:": typing.Optional[str] = None"},{name:"ray_scope",val:": typing.Optional[str] = 'last'"},{name:"sortish_sampler",val:": bool = False"},{name:"predict_with_generate",val:": bool = False"},{name:"generation_max_length",val:": typing.Optional[int] = None"},{name:"generation_num_beams",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"transformers.Seq2SeqTrainingArguments.sortish_sampler",description:`<strong>sortish_sampler</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use a <em>sortish sampler</em> or not. Only possible if the underlying datasets are <em>Seq2SeqDataset</em>
for now but will become generally available in the near future.</p>
<p>It sorts the inputs according to lengths in order to minimize the padding size, with a bit of randomness
for the training set.`,name:"sortish_sampler"},{anchor:"transformers.Seq2SeqTrainingArguments.predict_with_generate",description:`<strong>predict_with_generate</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use generate to calculate generative metrics (ROUGE, BLEU).`,name:"predict_with_generate"},{anchor:"transformers.Seq2SeqTrainingArguments.generation_max_length",description:`<strong>generation_max_length</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The <code>max_length</code> to use on each evaluation loop when <code>predict_with_generate=True</code>. Will default to the
<code>max_length</code> value of the model configuration.`,name:"generation_max_length"},{anchor:"transformers.Seq2SeqTrainingArguments.generation_num_beams",description:`<strong>generation_num_beams</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The <code>num_beams</code> to use on each evaluation loop when <code>predict_with_generate=True</code>. Will default to the
<code>num_beams</code> value of the model configuration.`,name:"generation_num_beams"}],source:"https://github.com/huggingface/transformers/blob/vr_18595/src/transformers/training_args_seq2seq.py#L28"}}),Jn=new X({}),Kn=new X({}),Qn=new C({props:{code:`[...]
logger = logging.getLogger(__name__)

# Setup logging
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    datefmt="%m/%d/%Y %H:%M:%S",
    handlers=[logging.StreamHandler(sys.stdout)],
)

# set the main code and the modules it uses to the same log-level according to the node
log_level = training_args.get_process_log_level()
logger.setLevel(log_level)
datasets.utils.logging.set_verbosity(log_level)
transformers.utils.logging.set_verbosity(log_level)

trainer = Trainer(...)`,highlighted:`[...]
logger = logging.getLogger(__name__)

<span class="hljs-comment"># Setup logging</span>
logging.basicConfig(
    <span class="hljs-built_in">format</span>=<span class="hljs-string">&quot;%(asctime)s - %(levelname)s - %(name)s - %(message)s&quot;</span>,
    datefmt=<span class="hljs-string">&quot;%m/%d/%Y %H:%M:%S&quot;</span>,
    handlers=[logging.StreamHandler(sys.stdout)],
)

<span class="hljs-comment"># set the main code and the modules it uses to the same log-level according to the node</span>
log_level = training_args.get_process_log_level()
logger.setLevel(log_level)
datasets.utils.logging.set_verbosity(log_level)
transformers.utils.logging.set_verbosity(log_level)

trainer = Trainer(...)`}}),Xn=new C({props:{code:"my_app.py ... --log_level warning --log_level_replica error",highlighted:"my_app.py ... --log_level warning --log_level_replica error"}}),es=new C({props:{code:"my_app.py ... --log_level warning --log_level_replica error --log_on_each_node 0",highlighted:"my_app.py ... --log_level warning --log_level_replica error --log_on_each_node 0"}}),ts=new C({props:{code:"my_app.py ... --log_level error --log_level_replica error --log_on_each_node 0",highlighted:"my_app.py ... --log_level error --log_level_replica error --log_on_each_node 0"}}),rs=new X({}),as=new X({}),ss=new C({props:{code:"python -m torch.distributed.launch --nproc_per_node=2  trainer-program.py ...",highlighted:"python -m torch.distributed.launch --nproc_per_node=2  trainer-program.py ..."}}),ds=new C({props:{code:"accelerate launch --num_processes 2 trainer-program.py ...",highlighted:"accelerate launch --num_processes 2 trainer-program.py ..."}}),cs=new C({props:{code:"deepspeed --num_gpus 2 trainer-program.py ...",highlighted:"deepspeed --num_gpus 2 trainer-program.py ..."}}),ps=new C({props:{code:"CUDA_VISIBLE_DEVICES=0,2 python -m torch.distributed.launch trainer-program.py ...",highlighted:"CUDA_VISIBLE_DEVICES=0,2 python -m torch.distributed.launch trainer-program.py ..."}}),ms=new C({props:{code:"CUDA_VISIBLE_DEVICES=2,0 python -m torch.distributed.launch trainer-program.py ...",highlighted:"CUDA_VISIBLE_DEVICES=2,0 python -m torch.distributed.launch trainer-program.py ..."}}),fs=new C({props:{code:"CUDA_VISIBLE_DEVICES=2,0 python trainer-program.py ...",highlighted:"CUDA_VISIBLE_DEVICES=2,0 python trainer-program.py ..."}}),us=new C({props:{code:"CUDA_VISIBLE_DEVICES= python trainer-program.py ...",highlighted:"CUDA_VISIBLE_DEVICES= python trainer-program.py ..."}}),_s=new C({props:{code:`export CUDA_VISIBLE_DEVICES=0,2
python -m torch.distributed.launch trainer-program.py ...`,highlighted:`<span class="hljs-built_in">export</span> CUDA_VISIBLE_DEVICES=0,2
python -m torch.distributed.launch trainer-program.py ...`}}),vs=new C({props:{code:"export CUDA_DEVICE_ORDER=PCI_BUS_ID",highlighted:'<span class="hljs-built_in">export</span> CUDA_DEVICE_ORDER=PCI_BUS_ID'}}),ys=new C({props:{code:"export CUDA_DEVICE_ORDER=FASTEST_FIRST",highlighted:'<span class="hljs-built_in">export</span> CUDA_DEVICE_ORDER=FASTEST_FIRST'}}),ws=new C({props:{code:"export CUDA_VISIBLE_DEVICES=1,0",highlighted:'<span class="hljs-built_in">export</span> CUDA_VISIBLE_DEVICES=1,0'}}),Es=new X({}),Ps=new X({}),xs=new C({props:{code:`pip install fairscale
pip install deepspeed`,highlighted:`pip install fairscale
pip install deepspeed`}}),Cs=new X({}),Ss=new C({props:{code:"which nvcc",highlighted:'<span class="hljs-built_in">which</span> nvcc'}}),Is=new X({}),Us=new C({props:{code:`/usr/local/cuda-10.2
/usr/local/cuda-11.0`,highlighted:`/usr/local/cuda-10.2
/usr/local/cuda-11.0`}}),Ls=new C({props:{code:`echo $PATH
echo $LD_LIBRARY_PATH`,highlighted:`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span>
<span class="hljs-built_in">echo</span> <span class="hljs-variable">$LD_LIBRARY_PATH</span>`}}),Fs=new C({props:{code:`export PATH=/usr/local/cuda-10.2/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64:$LD_LIBRARY_PATH`,highlighted:`<span class="hljs-built_in">export</span> PATH=/usr/local/cuda-10.2/bin:<span class="hljs-variable">$PATH</span>
<span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64:<span class="hljs-variable">$LD_LIBRARY_PATH</span>`}}),zs=new X({}),Rs=new C({props:{code:`sudo ln -s /usr/bin/gcc-7  /usr/local/cuda-10.2/bin/gcc
sudo ln -s /usr/bin/g++-7  /usr/local/cuda-10.2/bin/g++`,highlighted:`sudo <span class="hljs-built_in">ln</span> -s /usr/bin/gcc-7  /usr/local/cuda-10.2/bin/gcc
sudo <span class="hljs-built_in">ln</span> -s /usr/bin/g++-7  /usr/local/cuda-10.2/bin/g++`}}),qs=new X({}),Ho=new fg({props:{warning:!0,$$slots:{default:[aq]},$$scope:{ctx:ae}}}),Vs=new C({props:{code:"pip install fairscale",highlighted:"pip install fairscale"}}),Bs=new C({props:{code:"pip install transformers[fairscale]",highlighted:"pip install transformers[fairscale]"}}),Ys=new C({props:{code:"pip install fairscale --no-build-isolation .",highlighted:"pip install fairscale --no-build-isolation ."}}),Zs=new C({props:{code:`git clone https://github.com/facebookresearch/fairscale/
cd fairscale
rm -r dist build
python setup.py bdist_wheel
pip uninstall -y fairscale
pip install dist/fairscale-*.whl`,highlighted:`git <span class="hljs-built_in">clone</span> https://github.com/facebookresearch/fairscale/
<span class="hljs-built_in">cd</span> fairscale
<span class="hljs-built_in">rm</span> -r dist build
python setup.py bdist_wheel
pip uninstall -y fairscale
pip install dist/fairscale-*.whl`}}),Ks=new C({props:{code:`pip uninstall -y fairscale; pip install fairscale --pre \\
-f https://download.pytorch.org/whl/nightly/cu110/torch_nightly \\
--no-cache --no-build-isolation`,highlighted:`pip uninstall -y fairscale; pip install fairscale --pre \\
-f https://download.pytorch.org/whl/nightly/cu110/torch_nightly \\
--no-cache --no-build-isolation`}}),Qs=new C({props:{code:`pip install -v --disable-pip-version-check . \\
-f https://download.pytorch.org/whl/nightly/cu110/torch_nightly --pre`,highlighted:`pip install -v --disable-pip-version-check . \\
-f https://download.pytorch.org/whl/nightly/cu110/torch_nightly --pre`}}),tl=new C({props:{code:`python -m torch.distributed.launch --nproc_per_node=2 examples/pytorch/translation/run_translation.py \\
--model_name_or_path t5-small --per_device_train_batch_size 1   \\
--output_dir output_dir --overwrite_output_dir \\
--do_train --max_train_samples 500 --num_train_epochs 1 \\
--dataset_name wmt16 --dataset_config "ro-en" \\
--source_lang en --target_lang ro \\
--fp16 --sharded_ddp simple`,highlighted:`python -m torch.distributed.launch --nproc_per_node=2 examples/pytorch/translation/run_translation.py \\
--model_name_or_path t5-small --per_device_train_batch_size 1   \\
--output_dir output_dir --overwrite_output_dir \\
--do_train --max_train_samples 500 --num_train_epochs 1 \\
--dataset_name wmt16 --dataset_config <span class="hljs-string">&quot;ro-en&quot;</span> \\
--source_lang en --target_lang ro \\
--fp16 --sharded_ddp simple`}}),nl=new C({props:{code:`python -m torch.distributed.launch --nproc_per_node=2 examples/pytorch/translation/run_translation.py \\
--model_name_or_path t5-small --per_device_train_batch_size 1   \\
--output_dir output_dir --overwrite_output_dir \\
--do_train --max_train_samples 500 --num_train_epochs 1 \\
--dataset_name wmt16 --dataset_config "ro-en" \\
--source_lang en --target_lang ro \\
--fp16 --sharded_ddp zero_dp_2`,highlighted:`python -m torch.distributed.launch --nproc_per_node=2 examples/pytorch/translation/run_translation.py \\
--model_name_or_path t5-small --per_device_train_batch_size 1   \\
--output_dir output_dir --overwrite_output_dir \\
--do_train --max_train_samples 500 --num_train_epochs 1 \\
--dataset_name wmt16 --dataset_config <span class="hljs-string">&quot;ro-en&quot;</span> \\
--source_lang en --target_lang ro \\
--fp16 --sharded_ddp zero_dp_2`}}),ll=new X({}),{c(){$=n("meta"),S=i(),D=n("h1"),k=n("a"),q=n("span"),h(A.$$.fragment),I=i(),M=n("span"),ue=o("Trainer"),ee=i(),G=n("p"),ne=o("The "),se=n("a"),te=o("Trainer"),le=o(" class provides an API for feature-complete training in PyTorch for most standard use cases. It\u2019s used in most of the "),V=n("a"),We=o("example scripts"),_e=o("."),F=i(),N=n("p"),ot=o("Before instantiating your "),re=n("a"),at=o("Trainer"),nt=o(", create a "),ge=n("a"),ba=o("TrainingArguments"),ya=o(" to access all the points of customization during training."),Ye=i(),Pe=n("p"),wa=o("The API supports distributed training on multiple GPUs/TPUs, mixed precision through "),ve=n("a"),Ea=o("NVIDIA Apex"),$a=o(" and Native AMP for PyTorch."),W=i(),B=n("p"),kl=o("The "),be=n("a"),Gr=o("Trainer"),Pl=o(" contains the basic training loop which supports the above features. To inject custom behavior you can subclass them and override the following methods:"),Kt=i(),x=n("ul"),H=n("li"),jr=n("strong"),Al=o("get_train_dataloader"),Ol=o(" \u2014 Creates the training DataLoader."),xl=i(),Cl=n("li"),Nc=n("strong"),n2=o("get_eval_dataloader"),s2=o(" \u2014 Creates the evaluation DataLoader."),l2=i(),Sl=n("li"),Ic=n("strong"),i2=o("get_test_dataloader"),d2=o(" \u2014 Creates the test DataLoader."),c2=i(),Nl=n("li"),Uc=n("strong"),p2=o("log"),m2=o(" \u2014 Logs information on the various objects watching training."),h2=i(),st=n("li"),Lc=n("strong"),f2=o("create_optimizer_and_scheduler"),u2=o(` \u2014 Sets up the optimizer and learning rate scheduler if they were not passed at
init. Note, that you can also subclass or override the `),Fc=n("code"),_2=o("create_optimizer"),g2=o(" and "),zc=n("code"),v2=o("create_scheduler"),b2=o(` methods
separately.`),y2=i(),Il=n("li"),Rc=n("strong"),w2=o("create_optimizer"),E2=o(" \u2014 Sets up the optimizer if it wasn\u2019t passed at init."),$2=i(),Ul=n("li"),qc=n("strong"),T2=o("create_scheduler"),D2=o(" \u2014 Sets up the learning rate scheduler if it wasn\u2019t passed at init."),k2=i(),Ll=n("li"),Gc=n("strong"),P2=o("compute_loss"),A2=o(" - Computes the loss on a batch of training inputs."),O2=i(),Fl=n("li"),jc=n("strong"),x2=o("training_step"),C2=o(" \u2014 Performs a training step."),S2=i(),zl=n("li"),Mc=n("strong"),N2=o("prediction_step"),I2=o(" \u2014 Performs an evaluation/test step."),U2=i(),Rl=n("li"),Vc=n("strong"),L2=o("evaluate"),F2=o(" \u2014 Runs an evaluation loop and returns metrics."),z2=i(),ql=n("li"),Bc=n("strong"),R2=o("predict"),q2=o(" \u2014 Returns predictions (with metrics if labels are available) on a test set."),ug=i(),h(Mr.$$.fragment),_g=i(),Vr=n("p"),G2=o("Here is an example of how to customize "),Gl=n("a"),j2=o("Trainer"),M2=o(" to use a weighted loss (useful when you have an unbalanced training set):"),gg=i(),h(Ta.$$.fragment),vg=i(),lt=n("p"),V2=o("Another way to customize the training loop behavior for the PyTorch "),jl=n("a"),B2=o("Trainer"),H2=o(" is to use "),Ml=n("a"),W2=o("callbacks"),Y2=o(" that can inspect the training loop state (for progress reporting, logging on TensorBoard or other ML platforms\u2026) and take decisions (like early stopping)."),bg=i(),Qt=n("h2"),Br=n("a"),Hc=n("span"),h(Da.$$.fragment),Z2=i(),Wc=n("span"),J2=o("Trainer"),yg=i(),b=n("div"),h(ka.$$.fragment),K2=i(),Yc=n("p"),Q2=o("Trainer is a simple but feature-complete training and eval loop for PyTorch, optimized for \u{1F917} Transformers."),X2=i(),Zc=n("p"),ew=o("Important attributes:"),tw=i(),ye=n("ul"),Hr=n("li"),Jc=n("strong"),rw=o("model"),ow=o(" \u2014 Always points to the core model. If using a transformers model, it will be a "),Vl=n("a"),aw=o("PreTrainedModel"),nw=o(`
subclass.`),sw=i(),Y=n("li"),Kc=n("strong"),lw=o("model_wrapped"),iw=o(` \u2014 Always points to the most external model in case one or more other modules wrap the
original model. This is the model that should be used for the forward pass. For example, under `),Qc=n("code"),dw=o("DeepSpeed"),cw=o(`,
the inner model is wrapped in `),Xc=n("code"),pw=o("DeepSpeed"),mw=o(" and then again in "),ep=n("code"),hw=o("torch.nn.DistributedDataParallel"),fw=o(`. If the inner
model hasn\u2019t been wrapped, then `),tp=n("code"),uw=o("self.model_wrapped"),_w=o(" is the same as "),rp=n("code"),gw=o("self.model"),vw=o("."),bw=i(),Bl=n("li"),op=n("strong"),yw=o("is_model_parallel"),ww=o(` \u2014 Whether or not a model has been switched to a model parallel mode (different from
data parallelism, this means some of the model layers are split on different GPUs).`),Ew=i(),Ae=n("li"),ap=n("strong"),$w=o("place_model_on_device"),Tw=o(` \u2014 Whether or not to automatically place the model on the device - it will be set
to `),np=n("code"),Dw=o("False"),kw=o(` if model parallel or deepspeed is used, or if the default
`),sp=n("code"),Pw=o("TrainingArguments.place_model_on_device"),Aw=o(" is overridden to return "),lp=n("code"),Ow=o("False"),xw=o(" ."),Cw=i(),Oe=n("li"),ip=n("strong"),Sw=o("is_in_train"),Nw=o(" \u2014 Whether or not a model is currently running "),dp=n("code"),Iw=o("train"),Uw=o(" (e.g. when "),cp=n("code"),Lw=o("evaluate"),Fw=o(` is called while
in `),pp=n("code"),zw=o("train"),Rw=o(")"),qw=i(),Wr=n("div"),h(Pa.$$.fragment),Gw=i(),Aa=n("p"),jw=o("Add a callback to the current list of "),mp=n("code"),Mw=o("TrainerCallback"),Vw=o("."),Bw=i(),Yr=n("div"),h(Oa.$$.fragment),Hw=i(),xa=n("p"),Ww=o("A helper wrapper that creates an appropriate context manager for "),hp=n("code"),Yw=o("autocast"),Zw=o(` while feeding it the desired
arguments, depending on the situation.`),Jw=i(),it=n("div"),h(Ca.$$.fragment),Kw=i(),fp=n("p"),Qw=o("How the loss is computed by Trainer. By default, all models return the loss in the first element."),Xw=i(),up=n("p"),eE=o("Subclass and override for custom behavior."),tE=i(),Zr=n("div"),h(Sa.$$.fragment),rE=i(),_p=n("p"),oE=o("A helper wrapper to group together context managers."),aE=i(),dt=n("div"),h(Na.$$.fragment),nE=i(),gp=n("p"),sE=o("Setup the optimizer."),lE=i(),Ia=n("p"),iE=o(`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer\u2019s init through `),vp=n("code"),dE=o("optimizers"),cE=o(", or subclass and override this method in a subclass."),pE=i(),ct=n("div"),h(Ua.$$.fragment),mE=i(),bp=n("p"),hE=o("Setup the optimizer and the learning rate scheduler."),fE=i(),Ze=n("p"),uE=o(`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer\u2019s init through `),yp=n("code"),_E=o("optimizers"),gE=o(", or subclass and override this method (or "),wp=n("code"),vE=o("create_optimizer"),bE=o(` and/or
`),Ep=n("code"),yE=o("create_scheduler"),wE=o(") in a subclass."),EE=i(),Jr=n("div"),h(La.$$.fragment),$E=i(),$p=n("p"),TE=o(`Setup the scheduler. The optimizer of the trainer must have been set up either before this method is called or
passed as an argument.`),DE=i(),xe=n("div"),h(Fa.$$.fragment),kE=i(),Tp=n("p"),PE=o("Run evaluation and returns metrics."),AE=i(),za=n("p"),OE=o(`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init `),Dp=n("code"),xE=o("compute_metrics"),CE=o(" argument)."),SE=i(),kp=n("p"),NE=o("You can also subclass and override this method to inject custom behavior."),IE=i(),pt=n("div"),h(Ra.$$.fragment),UE=i(),Xt=n("p"),LE=o("Prediction/evaluation loop, shared by "),Pp=n("code"),FE=o("Trainer.evaluate()"),zE=o(" and "),Ap=n("code"),RE=o("Trainer.predict()"),qE=o("."),GE=i(),Op=n("p"),jE=o("Works both with or without labels."),ME=i(),Kr=n("div"),h(qa.$$.fragment),VE=i(),Ga=n("p"),BE=o("For models that inherit from "),Hl=n("a"),HE=o("PreTrainedModel"),WE=o(`, uses that method to compute the number of floating point
operations for every backward + forward pass. If using another model, either implement such a method in the
model or subclass and override this method.`),YE=i(),mt=n("div"),h(ja.$$.fragment),ZE=i(),Ma=n("p"),JE=o("Returns the evaluation "),xp=n("code"),KE=o("DataLoader"),QE=o("."),XE=i(),Cp=n("p"),e0=o("Subclass and override this method if you want to inject some custom behavior."),t0=i(),Qr=n("div"),h(Va.$$.fragment),r0=i(),Sp=n("p"),o0=o("Returns the optimizer class and optimizer parameters based on the training arguments."),a0=i(),ht=n("div"),h(Ba.$$.fragment),n0=i(),Ha=n("p"),s0=o("Returns the test "),Np=n("code"),l0=o("DataLoader"),i0=o("."),d0=i(),Ip=n("p"),c0=o("Subclass and override this method if you want to inject some custom behavior."),p0=i(),Ce=n("div"),h(Wa.$$.fragment),m0=i(),Ya=n("p"),h0=o("Returns the training "),Up=n("code"),f0=o("DataLoader"),u0=o("."),_0=i(),er=n("p"),g0=o("Will use no sampler if "),Lp=n("code"),v0=o("train_dataset"),b0=o(" does not implement "),Fp=n("code"),y0=o("__len__"),w0=o(`, a random sampler (adapted to distributed
training if necessary) otherwise.`),E0=i(),zp=n("p"),$0=o("Subclass and override this method if you want to inject some custom behavior."),T0=i(),ft=n("div"),h(Za.$$.fragment),D0=i(),we=n("p"),k0=o("Launch an hyperparameter search using "),Rp=n("code"),P0=o("optuna"),A0=o(" or "),qp=n("code"),O0=o("Ray Tune"),x0=o(" or "),Gp=n("code"),C0=o("SigOpt"),S0=o(`. The optimized quantity is determined
by `),jp=n("code"),N0=o("compute_objective"),I0=o(`, which defaults to a function returning the evaluation loss when no metric is provided,
the sum of all metrics otherwise.`),U0=i(),h(Xr.$$.fragment),L0=i(),eo=n("div"),h(Ja.$$.fragment),F0=i(),Ka=n("p"),z0=o("Initializes a git repo in "),Mp=n("code"),R0=o("self.args.hub_model_id"),q0=o("."),G0=i(),to=n("div"),h(Qa.$$.fragment),j0=i(),Vp=n("p"),M0=o(`Whether or not this process is the local (e.g., on one machine if training in a distributed fashion on several
machines) main process.`),V0=i(),ro=n("div"),h(Xa.$$.fragment),B0=i(),en=n("p"),H0=o(`Whether or not this process is the global main process (when training in a distributed fashion on several
machines, this is only going to be `),Bp=n("code"),W0=o("True"),Y0=o(" for one process)."),Z0=i(),ut=n("div"),h(tn.$$.fragment),J0=i(),rn=n("p"),K0=o("Log "),Hp=n("code"),Q0=o("logs"),X0=o(" on the various objects watching training."),e5=i(),Wp=n("p"),t5=o("Subclass and override this method to inject custom behavior."),r5=i(),P=n("div"),h(on.$$.fragment),o5=i(),Yp=n("p"),a5=o("Log metrics in a specially formatted way"),n5=i(),Zp=n("p"),s5=o("Under distributed environment this is done only for a process with rank 0."),l5=i(),Jp=n("p"),i5=o("Notes on memory reports:"),d5=i(),tr=n("p"),c5=o("In order to get memory usage report you need to install "),Kp=n("code"),p5=o("psutil"),m5=o(". You can do that with "),Qp=n("code"),h5=o("pip install psutil"),f5=o("."),u5=i(),h(oo.$$.fragment),_5=i(),Xp=n("p"),em=n("strong"),g5=o("Understanding the reports:"),v5=i(),Je=n("ul"),Ee=n("li"),b5=o("the first segment, e.g., "),tm=n("code"),y5=o("train__"),w5=o(", tells you which stage the metrics are for. Reports starting with "),rm=n("code"),E5=o("init_"),$5=o(`
will be added to the first stage that gets run. So that if only evaluation is run, the memory usage for the
`),om=n("code"),T5=o("__init__"),D5=o(" will be reported along with the "),am=n("code"),k5=o("eval_"),P5=o(" metrics."),A5=i(),rr=n("li"),O5=o("the third segment, is either "),nm=n("code"),x5=o("cpu"),C5=o(" or "),sm=n("code"),S5=o("gpu"),N5=o(`, tells you whether it\u2019s the general RAM or the gpu0 memory
metric.`),I5=i(),Wl=n("li"),lm=n("code"),U5=o("*_alloc_delta"),L5=o(` - is the difference in the used/allocated memory counter between the end and the start of the
stage - it can be negative if a function released more memory than it allocated.`),F5=i(),_t=n("li"),im=n("code"),z5=o("*_peaked_delta"),R5=o(` - is any extra memory that was consumed and then freed - relative to the current allocated
memory counter - it is never negative. When you look at the metrics of any stage you add up `),dm=n("code"),q5=o("alloc_delta"),G5=o(` +
`),cm=n("code"),j5=o("peaked_delta"),M5=o(" and you know how much memory was needed to complete that stage."),V5=i(),pm=n("p"),B5=o(`The reporting happens only for process of rank 0 and gpu 0 (if there is a gpu). Typically this is enough since the
main process does the bulk of work, but it could be not quite so if model parallel is used and then other GPUs may
use a different amount of gpu memory. This is also not the same under DataParallel where gpu0 may require much more
memory than the rest since it stores the gradient and optimizer states for all participating GPUS. Perhaps in the
future these reports will evolve to measure those too.`),H5=i(),mm=n("p"),W5=o(`The CPU RAM metric measures RSS (Resident Set Size) includes both the memory which is unique to the process and the
memory shared with other processes. It is important to note that it does not include swapped out memory, so the
reports could be imprecise.`),Y5=i(),an=n("p"),Z5=o(`The CPU peak memory is measured using a sampling thread. Due to python\u2019s GIL it may miss some of the peak memory if
that thread didn\u2019t get a chance to run when the highest memory was used. Therefore this report can be less than
reality. Using `),hm=n("code"),J5=o("tracemalloc"),K5=o(` would have reported the exact peak memory, but it doesn\u2019t report memory allocations
outside of python. So if some C++ CUDA extension allocated its own memory it won\u2019t be reported. And therefore it
was dropped in favor of the memory sampling approach, which reads the current process memory usage.`),Q5=i(),Ke=n("p"),X5=o("The GPU allocated and peak memory reporting is done with "),fm=n("code"),e$=o("torch.cuda.memory_allocated()"),t$=o(` and
`),um=n("code"),r$=o("torch.cuda.max_memory_allocated()"),o$=o(`. This metric reports only \u201Cdeltas\u201D for pytorch-specific allocations, as
`),_m=n("code"),a$=o("torch.cuda"),n$=o(` memory management system doesn\u2019t track any memory allocated outside of pytorch. For example, the very
first cuda call typically loads CUDA kernels, which may take from 0.5 to 2GB of GPU memory.`),s$=i(),oe=n("p"),l$=o("Note that this tracker doesn\u2019t account for memory allocations outside of "),Yl=n("a"),i$=o("Trainer"),d$=o("\u2019s "),gm=n("code"),c$=o("__init__"),p$=o(", "),vm=n("code"),m$=o("train"),h$=o(`,
`),bm=n("code"),f$=o("evaluate"),u$=o(" and "),ym=n("code"),_$=o("predict"),g$=o(" calls."),v$=i(),U=n("p"),b$=o("Because "),wm=n("code"),y$=o("evaluation"),w$=o(" calls may happen during "),Em=n("code"),E$=o("train"),$$=o(`, we can\u2019t handle nested invocations because
`),$m=n("code"),T$=o("torch.cuda.max_memory_allocated"),D$=o(" is a single counter, so if it gets reset by a nested eval call, "),Tm=n("code"),k$=o("train"),P$=o(`\u2019s tracker
will report incorrect info. If this `),nn=n("a"),A$=o("pytorch issue"),O$=o(` gets resolved
it will be possible to change this class to be re-entrant. Until then we will only track the outer level of
`),Dm=n("code"),x$=o("train"),C$=o(", "),km=n("code"),S$=o("evaluate"),N$=o(" and "),Pm=n("code"),I$=o("predict"),U$=o(" methods. Which means that if "),Am=n("code"),L$=o("eval"),F$=o(" is called during "),Om=n("code"),z$=o("train"),R$=o(`, it\u2019s the latter
that will account for its memory usage and that of the former.`),q$=i(),$e=n("p"),G$=o("This also means that if any other tool that is used along the "),Zl=n("a"),j$=o("Trainer"),M$=o(` calls
`),xm=n("code"),V$=o("torch.cuda.reset_peak_memory_stats"),B$=o(", the gpu peak memory stats could be invalid. And the "),Jl=n("a"),H$=o("Trainer"),W$=o(` will disrupt
the normal behavior of any such tools that rely on calling `),Cm=n("code"),Y$=o("torch.cuda.reset_peak_memory_stats"),Z$=o(" themselves."),J$=i(),Sm=n("p"),K$=o("For best performance you may want to consider turning the memory profiling off for production runs."),Q$=i(),ao=n("div"),h(sn.$$.fragment),X$=i(),Nm=n("p"),e4=o("Reformat Trainer metrics values to a human-readable format"),t4=i(),no=n("div"),h(ln.$$.fragment),r4=i(),dn=n("p"),o4=o("Helper to get number of samples in a "),Im=n("code"),a4=o("DataLoader"),n4=o(` by accessing its dataset. When
dataloader.dataset does not exist or has no length, estimates as best it can`),s4=i(),gt=n("div"),h(cn.$$.fragment),l4=i(),pn=n("p"),i4=o("Remove a callback from the current list of "),Um=n("code"),d4=o("TrainerCallback"),c4=o(" and returns it."),p4=i(),mn=n("p"),m4=o("If the callback is not found, returns "),Lm=n("code"),h4=o("None"),f4=o(" (and no error is raised)."),u4=i(),Z=n("div"),h(hn.$$.fragment),_4=i(),Fm=n("p"),g4=o("Run prediction and returns predictions and potential metrics."),v4=i(),fn=n("p"),b4=o(`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in `),zm=n("code"),y4=o("evaluate()"),w4=o("."),E4=i(),h(so.$$.fragment),$4=i(),un=n("p"),T4=o("Returns: "),Rm=n("em"),D4=o("NamedTuple"),k4=o(" A namedtuple with the following keys:"),P4=i(),or=n("ul"),ar=n("li"),A4=o("predictions ("),qm=n("code"),O4=o("np.ndarray"),x4=o("): The predictions on "),Gm=n("code"),C4=o("test_dataset"),S4=o("."),N4=i(),nr=n("li"),I4=o("label_ids ("),jm=n("code"),U4=o("np.ndarray"),L4=o(", "),Mm=n("em"),F4=o("optional"),z4=o("): The labels (if the dataset contained some)."),R4=i(),sr=n("li"),q4=o("metrics ("),Vm=n("code"),G4=o("Dict[str, float]"),j4=o(", "),Bm=n("em"),M4=o("optional"),V4=o(`): The potential dictionary of metrics (if the dataset contained
labels).`),B4=i(),vt=n("div"),h(_n.$$.fragment),H4=i(),lr=n("p"),W4=o("Prediction/evaluation loop, shared by "),Hm=n("code"),Y4=o("Trainer.evaluate()"),Z4=o(" and "),Wm=n("code"),J4=o("Trainer.predict()"),K4=o("."),Q4=i(),Ym=n("p"),X4=o("Works both with or without labels."),e3=i(),bt=n("div"),h(gn.$$.fragment),t3=i(),ir=n("p"),r3=o("Perform an evaluation step on "),Zm=n("code"),o3=o("model"),a3=o(" using "),Jm=n("code"),n3=o("inputs"),s3=o("."),l3=i(),Km=n("p"),i3=o("Subclass and override to inject custom behavior."),d3=i(),lo=n("div"),h(vn.$$.fragment),c3=i(),Qe=n("p"),p3=o("Upload "),Qm=n("em"),m3=o("self.model"),h3=o(" and "),Xm=n("em"),f3=o("self.tokenizer"),u3=o(" to the \u{1F917} model hub on the repo "),eh=n("em"),_3=o("self.args.hub_model_id"),g3=o("."),v3=i(),io=n("div"),h(bn.$$.fragment),b3=i(),yn=n("p"),y3=o("Remove a callback from the current list of "),th=n("code"),w3=o("TrainerCallback"),E3=o("."),$3=i(),Se=n("div"),h(wn.$$.fragment),T3=i(),En=n("p"),D3=o("Save metrics into a json file for that split, e.g. "),rh=n("code"),k3=o("train_results.json"),P3=o("."),A3=i(),oh=n("p"),O3=o("Under distributed environment this is done only for a process with rank 0."),x3=i(),$n=n("p"),C3=o("To understand the metrics please read the docstring of "),Kl=n("a"),S3=o("log_metrics()"),N3=o(`. The only difference is that raw
unformatted numbers are saved in the current method.`),I3=i(),yt=n("div"),h(Tn.$$.fragment),U3=i(),Dn=n("p"),L3=o("Will save the model, so you can reload it using "),ah=n("code"),F3=o("from_pretrained()"),z3=o("."),R3=i(),nh=n("p"),q3=o("Will only save from the main process."),G3=i(),wt=n("div"),h(kn.$$.fragment),j3=i(),sh=n("p"),M3=o("Saves the Trainer state, since Trainer.save_model saves only the tokenizer with the model"),V3=i(),lh=n("p"),B3=o("Under distributed environment this is done only for a process with rank 0."),H3=i(),co=n("div"),h(Pn.$$.fragment),W3=i(),An=n("p"),Y3=o("A helper wrapper that creates an appropriate context manager for "),ih=n("code"),Z3=o("torchdynamo"),J3=o("."),K3=i(),po=n("div"),h(On.$$.fragment),Q3=i(),dh=n("p"),X3=o("Main training entry point."),eT=i(),Et=n("div"),h(xn.$$.fragment),tT=i(),ch=n("p"),rT=o("Perform a training step on a batch of inputs."),oT=i(),ph=n("p"),aT=o("Subclass and override to inject custom behavior."),wg=i(),dr=n("h2"),mo=n("a"),mh=n("span"),h(Cn.$$.fragment),nT=i(),hh=n("span"),sT=o("Seq2SeqTrainer"),Eg=i(),Xe=n("div"),h(Sn.$$.fragment),lT=i(),Ne=n("div"),h(Nn.$$.fragment),iT=i(),fh=n("p"),dT=o("Run evaluation and returns metrics."),cT=i(),In=n("p"),pT=o(`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init `),uh=n("code"),mT=o("compute_metrics"),hT=o(" argument)."),fT=i(),_h=n("p"),uT=o("You can also subclass and override this method to inject custom behavior."),_T=i(),J=n("div"),h(Un.$$.fragment),gT=i(),gh=n("p"),vT=o("Run prediction and returns predictions and potential metrics."),bT=i(),Ln=n("p"),yT=o(`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in `),vh=n("code"),wT=o("evaluate()"),ET=o("."),$T=i(),h(ho.$$.fragment),TT=i(),Fn=n("p"),DT=o("Returns: "),bh=n("em"),kT=o("NamedTuple"),PT=o(" A namedtuple with the following keys:"),AT=i(),cr=n("ul"),pr=n("li"),OT=o("predictions ("),yh=n("code"),xT=o("np.ndarray"),CT=o("): The predictions on "),wh=n("code"),ST=o("test_dataset"),NT=o("."),IT=i(),mr=n("li"),UT=o("label_ids ("),Eh=n("code"),LT=o("np.ndarray"),FT=o(", "),$h=n("em"),zT=o("optional"),RT=o("): The labels (if the dataset contained some)."),qT=i(),hr=n("li"),GT=o("metrics ("),Th=n("code"),jT=o("Dict[str, float]"),MT=o(", "),Dh=n("em"),VT=o("optional"),BT=o(`): The potential dictionary of metrics (if the dataset contained
labels).`),$g=i(),fr=n("h2"),fo=n("a"),kh=n("span"),h(zn.$$.fragment),HT=i(),Ph=n("span"),WT=o("TrainingArguments"),Tg=i(),R=n("div"),h(Rn.$$.fragment),YT=i(),ie=n("div"),h(qn.$$.fragment),ZT=i(),Ah=n("p"),JT=o(`Returns the log level to be used depending on whether this process is the main process of node 0, main process
of node non-0, or a non-main process.`),KT=i(),ur=n("p"),QT=o("For the main process the log level defaults to "),Oh=n("code"),XT=o("logging.INFO"),e8=o(" unless overridden by "),xh=n("code"),t8=o("log_level"),r8=o(" argument."),o8=i(),_r=n("p"),a8=o("For the replica processes the log level defaults to "),Ch=n("code"),n8=o("logging.WARNING"),s8=o(" unless overridden by "),Sh=n("code"),l8=o("log_level_replica"),i8=o(`
argument.`),d8=i(),Gn=n("p"),c8=o("The choice between the main and replica process settings is made according to the return value of "),Nh=n("code"),p8=o("should_log"),m8=o("."),h8=i(),uo=n("div"),h(jn.$$.fragment),f8=i(),Ih=n("p"),u8=o("Get number of steps used for a linear warmup."),_8=i(),$t=n("div"),h(Mn.$$.fragment),g8=i(),Uh=n("p"),v8=o(`A context manager for torch distributed environment where on needs to do something on the main process, while
blocking replicas, and when it\u2019s finished releasing the replicas.`),b8=i(),gr=n("p"),y8=o("One such use is for "),Lh=n("code"),w8=o("datasets"),E8=o("\u2019s "),Fh=n("code"),$8=o("map"),T8=o(` feature which to be efficient should be run once on the main process,
which upon completion saves a cached version of results and which then automatically gets loaded by the
replicas.`),D8=i(),_o=n("div"),h(Vn.$$.fragment),k8=i(),Bn=n("p"),P8=o("Serializes this instance while replace "),zh=n("code"),A8=o("Enum"),O8=o(` by their values (for JSON serialization support). It obfuscates
the token values by removing their value.`),x8=i(),go=n("div"),h(Hn.$$.fragment),C8=i(),Rh=n("p"),S8=o("Serializes this instance to a JSON string."),N8=i(),vo=n("div"),h(Wn.$$.fragment),I8=i(),qh=n("p"),U8=o("Sanitized serialization to use with TensorBoard\u2019s hparams"),Dg=i(),vr=n("h2"),bo=n("a"),Gh=n("span"),h(Yn.$$.fragment),L8=i(),jh=n("span"),F8=o("Seq2SeqTrainingArguments"),kg=i(),br=n("div"),h(Zn.$$.fragment),z8=i(),Mh=n("p"),R8=o("TrainingArguments(output_dir: str, overwrite_output_dir: bool = False, do_train: bool = False, do_eval: bool = False, do_predict: bool = False, evaluation_strategy: Union[transformers.trainer_utils.IntervalStrategy, str] = \u2018no\u2019, prediction_loss_only: bool = False, per_device_train_batch_size: int = 8, per_device_eval_batch_size: int = 8, per_gpu_train_batch_size: Union[int, NoneType] = None, per_gpu_eval_batch_size: Union[int, NoneType] = None, gradient_accumulation_steps: int = 1, eval_accumulation_steps: Union[int, NoneType] = None, eval_delay: Union[float, NoneType] = 0, learning_rate: float = 5e-05, weight_decay: float = 0.0, adam_beta1: float = 0.9, adam_beta2: float = 0.999, adam_epsilon: float = 1e-08, max_grad_norm: float = 1.0, num_train_epochs: float = 3.0, max_steps: int = -1, lr_scheduler_type: Union[transformers.trainer_utils.SchedulerType, str] = \u2018linear\u2019, warmup_ratio: float = 0.0, warmup_steps: int = 0, log_level: Union[str, NoneType] = \u2018passive\u2019, log_level_replica: Union[str, NoneType] = \u2018passive\u2019, log_on_each_node: bool = True, logging_dir: Union[str, NoneType] = None, logging_strategy: Union[transformers.trainer_utils.IntervalStrategy, str] = \u2018steps\u2019, logging_first_step: bool = False, logging_steps: int = 500, logging_nan_inf_filter: bool = True, save_strategy: Union[transformers.trainer_utils.IntervalStrategy, str] = \u2018steps\u2019, save_steps: int = 500, save_total_limit: Union[int, NoneType] = None, save_on_each_node: bool = False, no_cuda: bool = False, seed: int = 42, data_seed: Union[int, NoneType] = None, jit_mode_eval: bool = False, use_ipex: bool = False, bf16: bool = False, fp16: bool = False, fp16_opt_level: str = \u2018O1\u2019, half_precision_backend: str = \u2018auto\u2019, bf16_full_eval: bool = False, fp16_full_eval: bool = False, tf32: Union[bool, NoneType] = None, local_rank: int = -1, xpu_backend: Union[str, NoneType] = None, tpu_num_cores: Union[int, NoneType] = None, tpu_metrics_debug: bool = False, debug: str = \u201D, dataloader_drop_last: bool = False, eval_steps: Union[int, NoneType] = None, dataloader_num_workers: int = 0, past_index: int = -1, run_name: Union[str, NoneType] = None, disable_tqdm: Union[bool, NoneType] = None, remove_unused_columns: Union[bool, NoneType] = True, label_names: Union[List[str], NoneType] = None, load_best_model_at_end: Union[bool, NoneType] = False, metric_for_best_model: Union[str, NoneType] = None, greater_is_better: Union[bool, NoneType] = None, ignore_data_skip: bool = False, sharded_ddp: str = \u201D, fsdp: str = \u201D, fsdp_min_num_params: int = 0, fsdp_transformer_layer_cls_to_wrap: Union[str, NoneType] = None, deepspeed: Union[str, NoneType] = None, label_smoothing_factor: float = 0.0, optim: Union[transformers.training_args.OptimizerNames, str] = \u2018adamw_hf\u2019, adafactor: bool = False, group_by_length: bool = False, length_column_name: Union[str, NoneType] = \u2018length\u2019, report_to: Union[List[str], NoneType] = None, ddp_find_unused_parameters: Union[bool, NoneType] = None, ddp_bucket_cap_mb: Union[int, NoneType] = None, dataloader_pin_memory: bool = True, skip_memory_metrics: bool = True, use_legacy_prediction_loop: bool = False, push_to_hub: bool = False, resume_from_checkpoint: Union[str, NoneType] = None, hub_model_id: Union[str, NoneType] = None, hub_strategy: Union[transformers.trainer_utils.HubStrategy, str] = \u2018every_save\u2019, hub_token: Union[str, NoneType] = None, hub_private_repo: bool = False, gradient_checkpointing: bool = False, include_inputs_for_metrics: bool = False, fp16_backend: str = \u2018auto\u2019, push_to_hub_model_id: Union[str, NoneType] = None, push_to_hub_organization: Union[str, NoneType] = None, push_to_hub_token: Union[str, NoneType] = None, mp_parameters: str = \u201D, auto_find_batch_size: bool = False, full_determinism: bool = False, torchdynamo: Union[str, NoneType] = None, ray_scope: Union[str, NoneType] = \u2018last\u2019)"),Pg=i(),yr=n("h2"),yo=n("a"),Vh=n("span"),h(Jn.$$.fragment),q8=i(),Bh=n("span"),G8=o("Checkpoints"),Ag=i(),de=n("p"),j8=o("By default, "),Ql=n("a"),M8=o("Trainer"),V8=o(" will save all checkpoints in the "),Hh=n("code"),B8=o("output_dir"),H8=o(` you set in the
`),Xl=n("a"),W8=o("TrainingArguments"),Y8=o(" you are using. Those will go in subfolder named "),Wh=n("code"),Z8=o("checkpoint-xxx"),J8=o(` with xxx
being the step at which the training was at.`),Og=i(),wo=n("p"),K8=o("Resuming training from a checkpoint can be done when calling "),ei=n("a"),Q8=o("Trainer.train()"),X8=o(" with either:"),xg=i(),Eo=n("ul"),ti=n("li"),Yh=n("code"),e6=o("resume_from_checkpoint=True"),t6=o(" which will resume training from the latest checkpoint"),r6=i(),ri=n("li"),Zh=n("code"),o6=o("resume_from_checkpoint=checkpoint_dir"),a6=o(` which will resume training from the specific checkpoint in the directory
passed.`),Cg=i(),Ie=n("p"),n6=o("In addition, you can easily save your checkpoints on the Model Hub when using "),Jh=n("code"),s6=o("push_to_hub=True"),l6=o(`. By default, all
the models saved in intermediate checkpoints are saved in different commits, but not the optimizer state. You can adapt
the `),Kh=n("code"),i6=o("hub-strategy"),d6=o(" value of your "),oi=n("a"),c6=o("TrainingArguments"),p6=o(" to either:"),Sg=i(),$o=n("ul"),To=n("li"),Qh=n("code"),m6=o('"checkpoint"'),h6=o(`: the latest checkpoint is also pushed in a subfolder named last-checkpoint, allowing you to
resume training easily with `),Xh=n("code"),f6=o('trainer.train(resume_from_checkpoint="output_dir/last-checkpoint")'),u6=o("."),_6=i(),ai=n("li"),ef=n("code"),g6=o('"all_checkpoints"'),v6=o(`: all checkpoints are pushed like they appear in the output folder (so you will get one
checkpoint folder per folder in your final repository)`),Ng=i(),wr=n("h2"),Do=n("a"),tf=n("span"),h(Kn.$$.fragment),b6=i(),rf=n("span"),y6=o("Logging"),Ig=i(),Ue=n("p"),w6=o("By default "),ni=n("a"),E6=o("Trainer"),$6=o(" will use "),of=n("code"),T6=o("logging.INFO"),D6=o(" for the main process and "),af=n("code"),k6=o("logging.WARNING"),P6=o(" for the replicas if any."),Ug=i(),Tt=n("p"),A6=o("These defaults can be overridden to use any of the 5 "),nf=n("code"),O6=o("logging"),x6=o(" levels with "),si=n("a"),C6=o("TrainingArguments"),S6=o(`\u2019s
arguments:`),Lg=i(),ko=n("ul"),li=n("li"),sf=n("code"),N6=o("log_level"),I6=o(" - for the main process"),U6=i(),ii=n("li"),lf=n("code"),L6=o("log_level_replica"),F6=o(" - for the replicas"),Fg=i(),Le=n("p"),z6=o("Further, if "),di=n("a"),R6=o("TrainingArguments"),q6=o("\u2019s "),df=n("code"),G6=o("log_on_each_node"),j6=o(" is set to "),cf=n("code"),M6=o("False"),V6=o(` only the main node will
use the log level settings for its main process, all other nodes will use the log level settings for replicas.`),zg=i(),K=n("p"),B6=o("Note that "),ci=n("a"),H6=o("Trainer"),W6=o(" is going to set "),pf=n("code"),Y6=o("transformers"),Z6=o(`\u2019s log level separately for each node in its
`),mf=n("code"),J6=o("Trainer.__init__()"),K6=o(`. So you may want to set this sooner (see the next example) if you tap into other
`),hf=n("code"),Q6=o("transformers"),X6=o(" functionality before creating the "),pi=n("a"),e9=o("Trainer"),t9=o(" object."),Rg=i(),mi=n("p"),r9=o("Here is an example of how this can be used in an application:"),qg=i(),h(Qn.$$.fragment),Gg=i(),hi=n("p"),o9=o(`And then if you only want to see warnings on the main node and all other nodes to not print any most likely duplicated
warnings you could run it as:`),jg=i(),h(Xn.$$.fragment),Mg=i(),fi=n("p"),a9=o(`In the multi-node environment if you also don\u2019t want the logs to repeat for each node\u2019s main process, you will want to
change the above to:`),Vg=i(),h(es.$$.fragment),Bg=i(),ui=n("p"),n9=o(`and then only the main process of the first node will log at the \u201Cwarning\u201D level, and all other processes on the main
node and all processes on other nodes will log at the \u201Cerror\u201D level.`),Hg=i(),_i=n("p"),s9=o("If you need your application to be as quiet as possible you could do:"),Wg=i(),h(ts.$$.fragment),Yg=i(),Po=n("p"),l9=o("(add "),ff=n("code"),i9=o("--log_on_each_node 0"),d9=o(" if on multi-node environment)"),Zg=i(),Er=n("h2"),Ao=n("a"),uf=n("span"),h(rs.$$.fragment),c9=i(),_f=n("span"),p9=o("Randomness"),Jg=i(),ce=n("p"),m9=o("When resuming from a checkpoint generated by "),gi=n("a"),h9=o("Trainer"),f9=o(` all efforts are made to restore the
`),gf=n("em"),u9=o("python"),_9=o(", "),vf=n("em"),g9=o("numpy"),v9=o(" and "),bf=n("em"),b9=o("pytorch"),y9=o(` RNG states to the same states as they were at the moment of saving that checkpoint,
which should make the \u201Cstop and resume\u201D style of training as close as possible to non-stop training.`),Kg=i(),Dt=n("p"),w9=o(`However, due to various default non-deterministic pytorch settings this might not fully work. If you want full
determinism please refer to `),os=n("a"),E9=o("Controlling sources of randomness"),$9=o(`. As explained in the document, that some of those settings
that make things deterministic (.e.g., `),yf=n("code"),T9=o("torch.backends.cudnn.deterministic"),D9=o(`) may slow things down, therefore this
can\u2019t be done by default, but you can enable those yourself if needed.`),Qg=i(),$r=n("h2"),Oo=n("a"),wf=n("span"),h(as.$$.fragment),k9=i(),Ef=n("span"),P9=o("Specific GPUs Selection"),Xg=i(),vi=n("p"),A9=o("Let\u2019s discuss how you can tell your program which GPUs are to be used and in what order."),ev=i(),xo=n("p"),O9=o("When using "),ns=n("a"),$f=n("code"),x9=o("DistributedDataParallel"),C9=o(" to use only a subset of your GPUs, you simply specify the number of GPUs to use. For example, if you have 4 GPUs, but you wish to use the first 2 you can do:"),tv=i(),h(ss.$$.fragment),rv=i(),kt=n("p"),S9=o("if you have either "),ls=n("a"),Tf=n("code"),N9=o("accelerate"),I9=o(" or "),is=n("a"),Df=n("code"),U9=o("deepspeed"),L9=o(" installed you can also accomplish the same by using one of:"),ov=i(),h(ds.$$.fragment),av=i(),h(cs.$$.fragment),nv=i(),Co=n("p"),F9=o("You don\u2019t need to use the Accelerate or "),bi=n("a"),z9=o("the Deepspeed integration"),R9=o(" features to use these launchers."),sv=i(),yi=n("p"),q9=o("Until now you were able to tell the program how many GPUs to use. Now let\u2019s discuss how to select specific GPUs and control their order."),lv=i(),wi=n("p"),G9=o("The following environment variables help you control which GPUs to use and their order."),iv=i(),Ei=n("p"),kf=n("strong"),Pf=n("code"),j9=o("CUDA_VISIBLE_DEVICES"),dv=i(),So=n("p"),M9=o("If you have multiple GPUs and you\u2019d like to use only 1 or a few of those GPUs, set the environment variable "),Af=n("code"),V9=o("CUDA_VISIBLE_DEVICES"),B9=o(" to a list of the GPUs to be used."),cv=i(),$i=n("p"),H9=o("For example, let\u2019s say you have 4 GPUs: 0, 1, 2 and 3. To run only on the physical GPUs 0 and 2, you can do:"),pv=i(),h(ps.$$.fragment),mv=i(),Pt=n("p"),W9=o("So now pytorch will see only 2 GPUs, where your physical GPUs 0 and 2 are mapped to "),Of=n("code"),Y9=o("cuda:0"),Z9=o(" and "),xf=n("code"),J9=o("cuda:1"),K9=o(" correspondingly."),hv=i(),Ti=n("p"),Q9=o("You can even change their order:"),fv=i(),h(ms.$$.fragment),uv=i(),At=n("p"),X9=o("Here your physical GPUs 0 and 2 are mapped to "),Cf=n("code"),e7=o("cuda:1"),t7=o(" and "),Sf=n("code"),r7=o("cuda:0"),o7=o(" correspondingly."),_v=i(),Ot=n("p"),a7=o("The above examples were all for "),Nf=n("code"),n7=o("DistributedDataParallel"),s7=o(" use pattern, but the same method works for "),hs=n("a"),If=n("code"),l7=o("DataParallel"),i7=o(" as well:"),gv=i(),h(fs.$$.fragment),vv=i(),Di=n("p"),d7=o("To emulate an environment without GPUs simply set this environment variable to an empty value like so:"),bv=i(),h(us.$$.fragment),yv=i(),ki=n("p"),c7=o("As with any environment variable you can, of course, export those instead of adding these to the command line, as in:"),wv=i(),h(_s.$$.fragment),Ev=i(),Pi=n("p"),p7=o("but this approach can be confusing since you may forget you set up the environment variable earlier and not understand why the wrong GPUs are used. Therefore, it\u2019s a common practice to set the environment variable just for a specific run on the same command line as it\u2019s shown in most examples of this section."),$v=i(),Ai=n("p"),Uf=n("strong"),Lf=n("code"),m7=o("CUDA_DEVICE_ORDER"),Tv=i(),No=n("p"),h7=o("There is an additional environment variable "),Ff=n("code"),f7=o("CUDA_DEVICE_ORDER"),u7=o(" that controls how the physical devices are ordered. The two choices are:"),Dv=i(),Oi=n("ol"),gs=n("li"),_7=o("ordered by PCIe bus IDs (matches "),zf=n("code"),g7=o("nvidia-smi"),v7=o("\u2019s order) - this is the default."),kv=i(),h(vs.$$.fragment),Pv=i(),bs=n("ol"),Rf=n("li"),b7=o("ordered by GPU compute capabilities"),Av=i(),h(ys.$$.fragment),Ov=i(),xt=n("p"),y7=o("Most of the time you don\u2019t need to care about this environment variable, but it\u2019s very helpful if you have a lopsided setup where you have an old and a new GPUs physically inserted in such a way so that the slow older card appears to be first. One way to fix that is to swap the cards. But if you can\u2019t swap the cards (e.g., if the cooling of the devices gets impacted) then setting "),qf=n("code"),w7=o("CUDA_DEVICE_ORDER=FASTEST_FIRST"),E7=o(" will always put the newer faster card first. It\u2019ll be somewhat confusing though since "),Gf=n("code"),$7=o("nvidia-smi"),T7=o(" will still report them in the PCIe order."),xv=i(),xi=n("p"),D7=o("The other solution to swapping the order is to use:"),Cv=i(),h(ws.$$.fragment),Sv=i(),Ci=n("p"),k7=o("In this example we are working with just 2 GPUs, but of course the same would apply to as many GPUs as your computer has."),Nv=i(),Io=n("p"),P7=o("Also if you do set this environment variable it\u2019s the best to set it in your "),jf=n("code"),A7=o("~/.bashrc"),O7=o(" file or some other startup config file and forget about it."),Iv=i(),Tr=n("h2"),Uo=n("a"),Mf=n("span"),h(Es.$$.fragment),x7=i(),Vf=n("span"),C7=o("Trainer Integrations"),Uv=i(),Lo=n("p"),S7=o("The "),Si=n("a"),N7=o("Trainer"),I7=o(` has been extended to support libraries that may dramatically improve your training
time and fit much bigger models.`),Lv=i(),pe=n("p"),U7=o("Currently it supports third party solutions, "),$s=n("a"),L7=o("DeepSpeed"),F7=o(", "),Ts=n("a"),z7=o("PyTorch FSDP"),R7=o(" and "),Ds=n("a"),q7=o("FairScale"),G7=o(", which implement parts of the paper "),ks=n("a"),j7=o(`ZeRO: Memory Optimizations
Toward Training Trillion Parameter Models, by Samyam Rajbhandari, Jeff Rasley, Olatunji Ruwase, Yuxiong He`),M7=o("."),Fv=i(),Fo=n("p"),V7=o("This provided support is new and experimental as of this writing. While the support for DeepSpeed and PyTorch FSDP is active and we welcome issues around it, we don\u2019t support the FairScale integration anymore since it has been integrated in PyTorch main (see the "),Ni=n("a"),B7=o("PyTorch FSDP integration"),H7=o(")"),zv=i(),Ii=n("a"),Rv=i(),Dr=n("h3"),zo=n("a"),Bf=n("span"),h(Ps.$$.fragment),W7=i(),Hf=n("span"),Y7=o("CUDA Extension Installation Notes"),qv=i(),Ui=n("p"),Z7=o("As of this writing, both FairScale and Deepspeed require compilation of CUDA C++ code, before they can be used."),Gv=i(),Ct=n("p"),J7=o("While all installation issues should be dealt with through the corresponding GitHub Issues of "),As=n("a"),K7=o("FairScale"),Q7=o(" and "),Os=n("a"),X7=o("Deepspeed"),eD=o(`, there are a few common issues that one may encounter while building
any PyTorch extension that needs to build CUDA extensions.`),jv=i(),Li=n("p"),tD=o("Therefore, if you encounter a CUDA-related build issue while doing one of the following or both:"),Mv=i(),h(xs.$$.fragment),Vv=i(),Fi=n("p"),rD=o("please, read the following notes first."),Bv=i(),St=n("p"),oD=o("In these notes we give examples for what to do when "),Wf=n("code"),aD=o("pytorch"),nD=o(" has been built with CUDA "),Yf=n("code"),sD=o("10.2"),lD=o(`. If your situation is
different remember to adjust the version number to the one you are after.`),Hv=i(),kr=n("h4"),Ro=n("a"),Zf=n("span"),h(Cs.$$.fragment),iD=i(),Jf=n("span"),dD=o("Possible problem #1"),Wv=i(),zi=n("p"),cD=o(`While, Pytorch comes with its own CUDA toolkit, to build these two projects you must have an identical version of CUDA
installed system-wide.`),Yv=i(),Fe=n("p"),pD=o("For example, if you installed "),Kf=n("code"),mD=o("pytorch"),hD=o(" with "),Qf=n("code"),fD=o("cudatoolkit==10.2"),uD=o(` in the Python environment, you also need to have
CUDA `),Xf=n("code"),_D=o("10.2"),gD=o(" installed system-wide."),Zv=i(),Nt=n("p"),vD=o("The exact location may vary from system to system, but "),eu=n("code"),bD=o("/usr/local/cuda-10.2"),yD=o(` is the most common location on many
Unix systems. When CUDA is correctly set up and added to the `),tu=n("code"),wD=o("PATH"),ED=o(` environment variable, one can find the
installation location by doing:`),Jv=i(),h(Ss.$$.fragment),Kv=i(),qo=n("p"),$D=o(`If you don\u2019t have CUDA installed system-wide, install it first. You will find the instructions by using your favorite
search engine. For example, if you\u2019re on Ubuntu you may want to search for: `),Ns=n("a"),TD=o("ubuntu cuda 10.2 install"),DD=o("."),Qv=i(),Pr=n("h4"),Go=n("a"),ru=n("span"),h(Is.$$.fragment),kD=i(),ou=n("span"),PD=o("Possible problem #2"),Xv=i(),Ri=n("p"),AD=o(`Another possible common problem is that you may have more than one CUDA toolkit installed system-wide. For example you
may have:`),e1=i(),h(Us.$$.fragment),t1=i(),It=n("p"),OD=o("Now, in this situation you need to make sure that your "),au=n("code"),xD=o("PATH"),CD=o(" and "),nu=n("code"),SD=o("LD_LIBRARY_PATH"),ND=o(` environment variables contain
the correct paths to the desired CUDA version. Typically, package installers will set these to contain whatever the
last version was installed. If you encounter the problem, where the package build fails because it can\u2019t find the right
CUDA version despite you having it installed system-wide, it means that you need to adjust the 2 aforementioned
environment variables.`),r1=i(),qi=n("p"),ID=o("First, you may look at their contents:"),o1=i(),h(Ls.$$.fragment),a1=i(),Gi=n("p"),UD=o("so you get an idea of what is inside."),n1=i(),jo=n("p"),LD=o("It\u2019s possible that "),su=n("code"),FD=o("LD_LIBRARY_PATH"),zD=o(" is empty."),s1=i(),et=n("p"),lu=n("code"),RD=o("PATH"),qD=o(" lists the locations of where executables can be found and "),iu=n("code"),GD=o("LD_LIBRARY_PATH"),jD=o(` is for where shared libraries
are to looked for. In both cases, earlier entries have priority over the later ones. `),du=n("code"),MD=o(":"),VD=o(` is used to separate multiple
entries.`),l1=i(),ji=n("p"),BD=o(`Now, to tell the build program where to find the specific CUDA toolkit, insert the desired paths to be listed first by
doing:`),i1=i(),h(Fs.$$.fragment),d1=i(),Mi=n("p"),HD=o("Note that we aren\u2019t overwriting the existing values, but prepending instead."),c1=i(),ze=n("p"),WD=o(`Of course, adjust the version number, the full path if need be. Check that the directories you assign actually do
exist. `),cu=n("code"),YD=o("lib64"),ZD=o(" sub-directory is where the various CUDA "),pu=n("code"),JD=o(".so"),KD=o(" objects, like "),mu=n("code"),QD=o("libcudart.so"),XD=o(` reside, it\u2019s unlikely
that your system will have it named differently, but if it is adjust it to reflect your reality.`),p1=i(),Ar=n("h4"),Mo=n("a"),hu=n("span"),h(zs.$$.fragment),ek=i(),fu=n("span"),tk=o("Possible problem #3"),m1=i(),Ut=n("p"),rk=o("Some older CUDA versions may refuse to build with newer compilers. For example, you my have "),uu=n("code"),ok=o("gcc-9"),ak=o(` but it wants
`),_u=n("code"),nk=o("gcc-7"),sk=o("."),h1=i(),Vi=n("p"),lk=o("There are various ways to go about it."),f1=i(),Bi=n("p"),ik=o("If you can install the latest CUDA toolkit it typically should support the newer compiler."),u1=i(),Vo=n("p"),dk=o(`Alternatively, you could install the lower version of the compiler in addition to the one you already have, or you may
already have it but it\u2019s not the default one, so the build system can\u2019t see it. If you have `),gu=n("code"),ck=o("gcc-7"),pk=o(` installed but the
build system complains it can\u2019t find it, the following might do the trick:`),_1=i(),h(Rs.$$.fragment),g1=i(),j=n("p"),mk=o("Here, we are making a symlink to "),vu=n("code"),hk=o("gcc-7"),fk=o(" from "),bu=n("code"),uk=o("/usr/local/cuda-10.2/bin/gcc"),_k=o(` and since
`),yu=n("code"),gk=o("/usr/local/cuda-10.2/bin/"),vk=o(" should be in the "),wu=n("code"),bk=o("PATH"),yk=o(` environment variable (see the previous problem\u2019s solution), it
should find `),Eu=n("code"),wk=o("gcc-7"),Ek=o(" (and "),$u=n("code"),$k=o("g++7"),Tk=o(") and then the build will succeed."),v1=i(),Hi=n("p"),Dk=o("As always make sure to edit the paths in the example to match your situation."),b1=i(),Or=n("h3"),Bo=n("a"),Tu=n("span"),h(qs.$$.fragment),kk=i(),Du=n("span"),Pk=o("FairScale"),y1=i(),h(Ho.$$.fragment),w1=i(),Re=n("p"),Ak=o("By integrating "),Gs=n("a"),Ok=o("FairScale"),xk=o(" the "),Wi=n("a"),Ck=o("Trainer"),Sk=o(`
provides support for the following features from `),js=n("a"),Nk=o("the ZeRO paper"),Ik=o(":"),E1=i(),qe=n("ol"),ku=n("li"),Uk=o("Optimizer State Sharding"),Lk=i(),Pu=n("li"),Fk=o("Gradient Sharding"),zk=i(),Au=n("li"),Rk=o("Model Parameters Sharding (new and very experimental)"),qk=i(),Ou=n("li"),Gk=o("CPU offload (new and very experimental)"),$1=i(),Yi=n("p"),jk=o("You will need at least two GPUs to use this feature."),T1=i(),Ms=n("p"),xu=n("strong"),Mk=o("Installation"),Vk=o(":"),D1=i(),Zi=n("p"),Bk=o("Install the library via pypi:"),k1=i(),h(Vs.$$.fragment),P1=i(),Lt=n("p"),Hk=o("or via "),Cu=n("code"),Wk=o("transformers"),Yk=o("\u2019 "),Su=n("code"),Zk=o("extras"),Jk=o(":"),A1=i(),h(Bs.$$.fragment),O1=i(),Ft=n("p"),Kk=o("(available starting from "),Nu=n("code"),Qk=o("transformers==4.6.0"),Xk=o(") or find more details on "),Hs=n("a"),eP=o("the FairScale\u2019s GitHub page"),tP=o("."),x1=i(),Wo=n("p"),rP=o("If you\u2019re still struggling with the build, first make sure to read "),Ji=n("a"),oP=o("CUDA Extension Installation Notes"),aP=o("."),C1=i(),Ki=n("p"),nP=o("If it\u2019s still not resolved the build issue, here are a few more ideas."),S1=i(),Ws=n("p"),Iu=n("code"),sP=o("fairscale"),lP=o(` seems to have an issue with the recently introduced by pip build isolation feature. If you have a problem
with it, you may want to try one of:`),N1=i(),h(Ys.$$.fragment),I1=i(),Qi=n("p"),iP=o("or:"),U1=i(),h(Zs.$$.fragment),L1=i(),Js=n("p"),Uu=n("code"),dP=o("fairscale"),cP=o(" also has issues with building against pytorch-nightly, so if you use it you may have to try one of:"),F1=i(),h(Ks.$$.fragment),z1=i(),Xi=n("p"),pP=o("or:"),R1=i(),h(Qs.$$.fragment),q1=i(),ed=n("p"),mP=o("Of course, adjust the urls to match the cuda version you use."),G1=i(),Yo=n("p"),hP=o(`If after trying everything suggested you still encounter build issues, please, proceed with the GitHub Issue of
`),Xs=n("a"),fP=o("FairScale"),uP=o("."),j1=i(),el=n("p"),Lu=n("strong"),_P=o("Usage"),gP=o(":"),M1=i(),zt=n("p"),vP=o("To use the first version of Sharded data-parallelism, add "),Fu=n("code"),bP=o("--sharded_ddp simple"),yP=o(` to the command line arguments, and
make sure you have added the distributed launcher `),zu=n("code"),wP=o("-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),EP=o(" if you haven\u2019t been using it already."),V1=i(),Zo=n("p"),$P=o("For example here is how you could use it for "),Ru=n("code"),TP=o("run_translation.py"),DP=o(" with 2 GPUs:"),B1=i(),h(tl.$$.fragment),H1=i(),td=n("p"),kP=o("Notes:"),W1=i(),Ge=n("ul"),qu=n("li"),PP=o("This feature requires distributed training (so multiple GPUs)."),AP=i(),Gu=n("li"),OP=o("It is not implemented for TPUs."),xP=i(),rl=n("li"),CP=o("It works with "),ju=n("code"),SP=o("--fp16"),NP=o(" too, to make things even faster."),IP=i(),ol=n("li"),UP=o("One of the main benefits of enabling "),Mu=n("code"),LP=o("--sharded_ddp simple"),FP=o(` is that it uses a lot less GPU memory, so you should be
able to use significantly larger batch sizes using the same hardware (e.g. 3x and even bigger) which should lead to
significantly shorter training time.`),Y1=i(),al=n("ol"),tt=n("li"),zP=o("To use the second version of Sharded data-parallelism, add "),Vu=n("code"),RP=o("--sharded_ddp zero_dp_2"),qP=o(" or "),Bu=n("code"),GP=o("--sharded_ddp zero_dp_3"),jP=o(" to the command line arguments, and make sure you have added the distributed launcher "),Hu=n("code"),MP=o("-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),VP=o(" if you haven\u2019t been using it already."),Z1=i(),Jo=n("p"),BP=o("For example here is how you could use it for "),Wu=n("code"),HP=o("run_translation.py"),WP=o(" with 2 GPUs:"),J1=i(),h(nl.$$.fragment),K1=i(),xr=n("p"),Yu=n("code"),YP=o("zero_dp_2"),ZP=o(" is an optimized version of the simple wrapper, while "),Zu=n("code"),JP=o("zero_dp_3"),KP=o(` fully shards model weights,
gradients and optimizer states.`),Q1=i(),Rt=n("p"),QP=o("Both are compatible with adding "),Ju=n("code"),XP=o("cpu_offload"),eA=o(" to enable ZeRO-offload (activate it like this: "),Ku=n("code"),tA=o('--sharded_ddp "zero_dp_2 cpu_offload"'),rA=o(")."),X1=i(),rd=n("p"),oA=o("Notes:"),eb=i(),me=n("ul"),Qu=n("li"),aA=o("This feature requires distributed training (so multiple GPUs)."),nA=i(),Xu=n("li"),sA=o("It is not implemented for TPUs."),lA=i(),sl=n("li"),iA=o("It works with "),e_=n("code"),dA=o("--fp16"),cA=o(" too, to make things even faster."),pA=i(),Cr=n("li"),mA=o("The "),t_=n("code"),hA=o("cpu_offload"),fA=o(" additional option requires "),r_=n("code"),uA=o("--fp16"),_A=o("."),gA=i(),o_=n("li"),vA=o(`This is an area of active development, so make sure you have a source install of fairscale to use this feature as
some bugs you encounter may have been fixed there already.`),tb=i(),od=n("p"),bA=o("Known caveats:"),rb=i(),Ko=n("ul"),Sr=n("li"),yA=o("This feature is incompatible with "),a_=n("code"),wA=o("--predict_with_generate"),EA=o(" in the "),n_=n("em"),$A=o("run_translation.py"),TA=o(" script."),DA=i(),Te=n("li"),kA=o("Using "),s_=n("code"),PA=o("--sharded_ddp zero_dp_3"),AA=o(` requires wrapping each layer of the model in the special container
`),l_=n("code"),OA=o("FullyShardedDataParallelism"),xA=o(" of fairscale. It should be used with the option "),i_=n("code"),CA=o("auto_wrap"),SA=o(` if you are not
doing this yourself: `),d_=n("code"),NA=o('--sharded_ddp "zero_dp_3 auto_wrap"'),IA=o("."),ob=i(),Nr=n("h3"),Qo=n("a"),c_=n("span"),h(ll.$$.fragment),UA=i(),p_=n("span"),LA=o("PyTorch Fully Sharded Data parallel"),ab=i(),Xo=n("p"),FA=o(`To accelerate training huge models on larger batch sizes, we can use a fully sharded data parallel model.
This type of data parallel paradigm enables fitting more data and larger models by sharding the optimizer states, gradients and parameters.
To read more about it and the benefits, check out the `),il=n("a"),zA=o("Fully Sharded Data Parallel blog"),RA=o(`.
We have integrated the latest PyTorch\u2019s Fully Sharded Data Parallel (FSDP) training feature.
All you need to do is enable it through the config.`),nb=i(),dl=n("p"),m_=n("strong"),qA=o("Required PyTorch version for FSDP support"),GA=o(`: PyTorch Nightly (or 1.12.0 if you read this after it has been released)
as the model saving with FSDP activated is only available with recent fixes.`),sb=i(),cl=n("p"),h_=n("strong"),jA=o("Usage"),MA=o(":"),lb=i(),Q=n("ul"),f_=n("li"),pl=n("p"),VA=o(`Make sure you have added the distributed launcher
`),u_=n("code"),BA=o("-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),HA=o(" if you haven\u2019t been using it already."),WA=i(),ml=n("li"),ad=n("p"),__=n("strong"),YA=o("Sharding Strategy"),ZA=o(":"),JA=i(),Ir=n("ul"),hl=n("li"),KA=o(`FULL_SHARD : Shards optimizer states + gradients + model parameters across data parallel workers/GPUs.
For this, add `),g_=n("code"),QA=o("--fsdp full_shard"),XA=o(" to the command line arguments."),eO=i(),fl=n("li"),tO=o(`SHARD_GRAD_OP : Shards optimizer states + gradients across data parallel workers/GPUs.
For this, add `),v_=n("code"),rO=o("--fsdp shard_grad_op"),oO=o(" to the command line arguments."),aO=i(),ul=n("li"),nO=o("NO_SHARD : No sharding. For this, add "),b_=n("code"),sO=o("--fsdp no_shard"),lO=o(" to the command line arguments."),iO=i(),y_=n("li"),Ur=n("p"),dO=o(`To offload the parameters and gradients to the CPU,
add `),w_=n("code"),cO=o('--fsdp "full_shard offload"'),pO=o(" or "),E_=n("code"),mO=o('--fsdp "shard_grad_op offload"'),hO=o(" to the command line arguments."),fO=i(),$_=n("li"),rt=n("p"),uO=o("To automatically recursively wrap layers with FSDP using "),T_=n("code"),_O=o("default_auto_wrap_policy"),gO=o(`,
add `),D_=n("code"),vO=o('--fsdp "full_shard auto_wrap"'),bO=o(" or "),k_=n("code"),yO=o('--fsdp "shard_grad_op auto_wrap"'),wO=o(" to the command line arguments."),EO=i(),P_=n("li"),Lr=n("p"),$O=o(`To enable both CPU offloading and auto wrapping,
add `),A_=n("code"),TO=o('--fsdp "full_shard offload auto_wrap"'),DO=o(" or "),O_=n("code"),kO=o('--fsdp "shard_grad_op offload auto_wrap"'),PO=o(" to the command line arguments."),AO=i(),_l=n("li"),x_=n("p"),OO=o("If auto wrapping is enabled, you can either use transformer based auto wrap policy or size based auto wrap policy."),xO=i(),gl=n("ul"),De=n("li"),CO=o("For transformer based auto wrap policy, please add "),C_=n("code"),SO=o("--fsdp_transformer_layer_cls_to_wrap <value>"),NO=o(` to command line arguments.
This specifies the transformer layer class name (case-sensitive) to wrap ,e.g, `),S_=n("code"),IO=o("BertLayer"),UO=o(", "),N_=n("code"),LO=o("GPTJBlock"),FO=o(", "),I_=n("code"),zO=o("T5Block"),RO=o(` \u2026
This is important because submodules that share weights (e.g., embedding layer) should not end up in different FSDP wrapped units.
Using this policy, wrapping happens for each block containing Multi-Head Attention followed by couple of MLP layers.
Remaining layers including the shared embeddings are conviniently wrapped in same outermost FSDP unit.
Therefore, use this for transformer based models.`),qO=i(),vl=n("li"),GO=o("For size based auto wrap policy, please add "),U_=n("code"),jO=o("--fsdp_min_num_params <number>"),MO=o(` to command line arguments.
It specifies FSDP\u2019s minimum number of parameters for auto wrapping.`),ib=i(),nd=n("p"),L_=n("strong"),VO=o("Few caveats to be aware of"),db=i(),ea=n("ul"),bl=n("li"),BO=o(`Mixed precision is currently not supported with FSDP as we wait for PyTorch to fix support for it.
More details in this `),yl=n("a"),HO=o("issues"),WO=o("."),YO=i(),Fr=n("li"),ZO=o(`FSDP currently doesn\u2019t support multiple parameter groups.
More details mentioned in this `),wl=n("a"),JO=o("issue"),KO=o(`
(`),F_=n("code"),QO=o("The original model parameters' .grads are not set, meaning that they cannot be optimized separately (which is why we cannot support multiple parameter groups)"),XO=o(")."),cb=i(),sd=n("p"),ex=o("Sections that were moved:"),pb=i(),w=n("p"),tx=o("[ "),ld=n("a"),rx=o("DeepSpeed"),z_=n("a"),ox=o(`
| `),id=n("a"),ax=o("Installation"),R_=n("a"),nx=o(`
| `),dd=n("a"),sx=o("Deployment with multiple GPUs"),q_=n("a"),lx=o(`
| `),cd=n("a"),ix=o("Deployment with one GPU"),G_=n("a"),dx=o(`
| `),pd=n("a"),cx=o("Deployment in Notebooks"),j_=n("a"),px=o(`
| `),md=n("a"),mx=o("Configuration"),M_=n("a"),hx=o(`
| `),hd=n("a"),fx=o("Passing Configuration"),V_=n("a"),ux=o(`
| `),fd=n("a"),_x=o("Shared Configuration"),B_=n("a"),gx=o(`
| `),ud=n("a"),vx=o("ZeRO"),H_=n("a"),bx=o(`
| `),_d=n("a"),yx=o("ZeRO-2 Config"),W_=n("a"),wx=o(`
| `),gd=n("a"),Ex=o("ZeRO-3 Config"),Y_=n("a"),$x=o(`
| `),vd=n("a"),Tx=o("NVMe Support"),Z_=n("a"),Dx=o(`
| `),bd=n("a"),kx=o("ZeRO-2 vs ZeRO-3 Performance"),J_=n("a"),Px=o(`
| `),yd=n("a"),Ax=o("ZeRO-2 Example"),K_=n("a"),Ox=o(`
| `),wd=n("a"),xx=o("ZeRO-3 Example"),Q_=n("a"),Cx=o(`
| `),Ed=n("a"),Sx=o("Optimizer"),X_=n("a"),Nx=o(`
| `),$d=n("a"),Ix=o("Scheduler"),eg=n("a"),Ux=o(`
| `),Td=n("a"),Lx=o("fp32 Precision"),tg=n("a"),Fx=o(`
| `),Dd=n("a"),zx=o("Automatic Mixed Precision"),rg=n("a"),Rx=o(`
| `),kd=n("a"),qx=o("Batch Size"),og=n("a"),Gx=o(`
| `),Pd=n("a"),jx=o("Gradient Accumulation"),ag=n("a"),Mx=o(`
| `),Ad=n("a"),Vx=o("Gradient Clipping"),ng=n("a"),Bx=o(`
| `),Od=n("a"),Hx=o("Getting The Model Weights Out"),sg=n("a"),Wx=o(`
]`),this.h()},l(t){const c=ZR('[data-svelte="svelte-1phssyn"]',document.head);$=s(c,"META",{name:!0,content:!0}),c.forEach(r),S=d(t),D=s(t,"H1",{class:!0});var El=l(D);k=s(El,"A",{id:!0,class:!0,href:!0});var lg=l(k);q=s(lg,"SPAN",{});var ig=l(q);f(A.$$.fragment,ig),ig.forEach(r),lg.forEach(r),I=d(El),M=s(El,"SPAN",{});var dg=l(M);ue=a(dg,"Trainer"),dg.forEach(r),El.forEach(r),ee=d(t),G=s(t,"P",{});var zr=l(G);ne=a(zr,"The "),se=s(zr,"A",{href:!0});var cg=l(se);te=a(cg,"Trainer"),cg.forEach(r),le=a(zr," class provides an API for feature-complete training in PyTorch for most standard use cases. It\u2019s used in most of the "),V=s(zr,"A",{href:!0,rel:!0});var bC=l(V);We=a(bC,"example scripts"),bC.forEach(r),_e=a(zr,"."),zr.forEach(r),F=d(t),N=s(t,"P",{});var xd=l(N);ot=a(xd,"Before instantiating your "),re=s(xd,"A",{href:!0});var yC=l(re);at=a(yC,"Trainer"),yC.forEach(r),nt=a(xd,", create a "),ge=s(xd,"A",{href:!0});var wC=l(ge);ba=a(wC,"TrainingArguments"),wC.forEach(r),ya=a(xd," to access all the points of customization during training."),xd.forEach(r),Ye=d(t),Pe=s(t,"P",{});var hb=l(Pe);wa=a(hb,"The API supports distributed training on multiple GPUs/TPUs, mixed precision through "),ve=s(hb,"A",{href:!0,rel:!0});var EC=l(ve);Ea=a(EC,"NVIDIA Apex"),EC.forEach(r),$a=a(hb," and Native AMP for PyTorch."),hb.forEach(r),W=d(t),B=s(t,"P",{});var fb=l(B);kl=a(fb,"The "),be=s(fb,"A",{href:!0});var $C=l(be);Gr=a($C,"Trainer"),$C.forEach(r),Pl=a(fb," contains the basic training loop which supports the above features. To inject custom behavior you can subclass them and override the following methods:"),fb.forEach(r),Kt=d(t),x=s(t,"UL",{});var L=l(x);H=s(L,"LI",{});var Yx=l(H);jr=s(Yx,"STRONG",{});var TC=l(jr);Al=a(TC,"get_train_dataloader"),TC.forEach(r),Ol=a(Yx," \u2014 Creates the training DataLoader."),Yx.forEach(r),xl=d(L),Cl=s(L,"LI",{});var Zx=l(Cl);Nc=s(Zx,"STRONG",{});var DC=l(Nc);n2=a(DC,"get_eval_dataloader"),DC.forEach(r),s2=a(Zx," \u2014 Creates the evaluation DataLoader."),Zx.forEach(r),l2=d(L),Sl=s(L,"LI",{});var Jx=l(Sl);Ic=s(Jx,"STRONG",{});var kC=l(Ic);i2=a(kC,"get_test_dataloader"),kC.forEach(r),d2=a(Jx," \u2014 Creates the test DataLoader."),Jx.forEach(r),c2=d(L),Nl=s(L,"LI",{});var Kx=l(Nl);Uc=s(Kx,"STRONG",{});var PC=l(Uc);p2=a(PC,"log"),PC.forEach(r),m2=a(Kx," \u2014 Logs information on the various objects watching training."),Kx.forEach(r),h2=d(L),st=s(L,"LI",{});var $l=l(st);Lc=s($l,"STRONG",{});var AC=l(Lc);f2=a(AC,"create_optimizer_and_scheduler"),AC.forEach(r),u2=a($l,` \u2014 Sets up the optimizer and learning rate scheduler if they were not passed at
init. Note, that you can also subclass or override the `),Fc=s($l,"CODE",{});var OC=l(Fc);_2=a(OC,"create_optimizer"),OC.forEach(r),g2=a($l," and "),zc=s($l,"CODE",{});var xC=l(zc);v2=a(xC,"create_scheduler"),xC.forEach(r),b2=a($l,` methods
separately.`),$l.forEach(r),y2=d(L),Il=s(L,"LI",{});var Qx=l(Il);Rc=s(Qx,"STRONG",{});var CC=l(Rc);w2=a(CC,"create_optimizer"),CC.forEach(r),E2=a(Qx," \u2014 Sets up the optimizer if it wasn\u2019t passed at init."),Qx.forEach(r),$2=d(L),Ul=s(L,"LI",{});var Xx=l(Ul);qc=s(Xx,"STRONG",{});var SC=l(qc);T2=a(SC,"create_scheduler"),SC.forEach(r),D2=a(Xx," \u2014 Sets up the learning rate scheduler if it wasn\u2019t passed at init."),Xx.forEach(r),k2=d(L),Ll=s(L,"LI",{});var eC=l(Ll);Gc=s(eC,"STRONG",{});var NC=l(Gc);P2=a(NC,"compute_loss"),NC.forEach(r),A2=a(eC," - Computes the loss on a batch of training inputs."),eC.forEach(r),O2=d(L),Fl=s(L,"LI",{});var tC=l(Fl);jc=s(tC,"STRONG",{});var IC=l(jc);x2=a(IC,"training_step"),IC.forEach(r),C2=a(tC," \u2014 Performs a training step."),tC.forEach(r),S2=d(L),zl=s(L,"LI",{});var rC=l(zl);Mc=s(rC,"STRONG",{});var UC=l(Mc);N2=a(UC,"prediction_step"),UC.forEach(r),I2=a(rC," \u2014 Performs an evaluation/test step."),rC.forEach(r),U2=d(L),Rl=s(L,"LI",{});var oC=l(Rl);Vc=s(oC,"STRONG",{});var LC=l(Vc);L2=a(LC,"evaluate"),LC.forEach(r),F2=a(oC," \u2014 Runs an evaluation loop and returns metrics."),oC.forEach(r),z2=d(L),ql=s(L,"LI",{});var aC=l(ql);Bc=s(aC,"STRONG",{});var FC=l(Bc);R2=a(FC,"predict"),FC.forEach(r),q2=a(aC," \u2014 Returns predictions (with metrics if labels are available) on a test set."),aC.forEach(r),L.forEach(r),ug=d(t),f(Mr.$$.fragment,t),_g=d(t),Vr=s(t,"P",{});var ub=l(Vr);G2=a(ub,"Here is an example of how to customize "),Gl=s(ub,"A",{href:!0});var zC=l(Gl);j2=a(zC,"Trainer"),zC.forEach(r),M2=a(ub," to use a weighted loss (useful when you have an unbalanced training set):"),ub.forEach(r),gg=d(t),f(Ta.$$.fragment,t),vg=d(t),lt=s(t,"P",{});var Cd=l(lt);V2=a(Cd,"Another way to customize the training loop behavior for the PyTorch "),jl=s(Cd,"A",{href:!0});var RC=l(jl);B2=a(RC,"Trainer"),RC.forEach(r),H2=a(Cd," is to use "),Ml=s(Cd,"A",{href:!0});var qC=l(Ml);W2=a(qC,"callbacks"),qC.forEach(r),Y2=a(Cd," that can inspect the training loop state (for progress reporting, logging on TensorBoard or other ML platforms\u2026) and take decisions (like early stopping)."),Cd.forEach(r),bg=d(t),Qt=s(t,"H2",{class:!0});var _b=l(Qt);Br=s(_b,"A",{id:!0,class:!0,href:!0});var GC=l(Br);Hc=s(GC,"SPAN",{});var jC=l(Hc);f(Da.$$.fragment,jC),jC.forEach(r),GC.forEach(r),Z2=d(_b),Wc=s(_b,"SPAN",{});var MC=l(Wc);J2=a(MC,"Trainer"),MC.forEach(r),_b.forEach(r),yg=d(t),b=s(t,"DIV",{class:!0});var y=l(b);f(ka.$$.fragment,y),K2=d(y),Yc=s(y,"P",{});var VC=l(Yc);Q2=a(VC,"Trainer is a simple but feature-complete training and eval loop for PyTorch, optimized for \u{1F917} Transformers."),VC.forEach(r),X2=d(y),Zc=s(y,"P",{});var BC=l(Zc);ew=a(BC,"Important attributes:"),BC.forEach(r),tw=d(y),ye=s(y,"UL",{});var qt=l(ye);Hr=s(qt,"LI",{});var pg=l(Hr);Jc=s(pg,"STRONG",{});var HC=l(Jc);rw=a(HC,"model"),HC.forEach(r),ow=a(pg," \u2014 Always points to the core model. If using a transformers model, it will be a "),Vl=s(pg,"A",{href:!0});var WC=l(Vl);aw=a(WC,"PreTrainedModel"),WC.forEach(r),nw=a(pg,`
subclass.`),pg.forEach(r),sw=d(qt),Y=s(qt,"LI",{});var ke=l(Y);Kc=s(ke,"STRONG",{});var YC=l(Kc);lw=a(YC,"model_wrapped"),YC.forEach(r),iw=a(ke,` \u2014 Always points to the most external model in case one or more other modules wrap the
original model. This is the model that should be used for the forward pass. For example, under `),Qc=s(ke,"CODE",{});var ZC=l(Qc);dw=a(ZC,"DeepSpeed"),ZC.forEach(r),cw=a(ke,`,
the inner model is wrapped in `),Xc=s(ke,"CODE",{});var JC=l(Xc);pw=a(JC,"DeepSpeed"),JC.forEach(r),mw=a(ke," and then again in "),ep=s(ke,"CODE",{});var KC=l(ep);hw=a(KC,"torch.nn.DistributedDataParallel"),KC.forEach(r),fw=a(ke,`. If the inner
model hasn\u2019t been wrapped, then `),tp=s(ke,"CODE",{});var QC=l(tp);uw=a(QC,"self.model_wrapped"),QC.forEach(r),_w=a(ke," is the same as "),rp=s(ke,"CODE",{});var XC=l(rp);gw=a(XC,"self.model"),XC.forEach(r),vw=a(ke,"."),ke.forEach(r),bw=d(qt),Bl=s(qt,"LI",{});var nC=l(Bl);op=s(nC,"STRONG",{});var eS=l(op);yw=a(eS,"is_model_parallel"),eS.forEach(r),ww=a(nC,` \u2014 Whether or not a model has been switched to a model parallel mode (different from
data parallelism, this means some of the model layers are split on different GPUs).`),nC.forEach(r),Ew=d(qt),Ae=s(qt,"LI",{});var Rr=l(Ae);ap=s(Rr,"STRONG",{});var tS=l(ap);$w=a(tS,"place_model_on_device"),tS.forEach(r),Tw=a(Rr,` \u2014 Whether or not to automatically place the model on the device - it will be set
to `),np=s(Rr,"CODE",{});var rS=l(np);Dw=a(rS,"False"),rS.forEach(r),kw=a(Rr,` if model parallel or deepspeed is used, or if the default
`),sp=s(Rr,"CODE",{});var oS=l(sp);Pw=a(oS,"TrainingArguments.place_model_on_device"),oS.forEach(r),Aw=a(Rr," is overridden to return "),lp=s(Rr,"CODE",{});var aS=l(lp);Ow=a(aS,"False"),aS.forEach(r),xw=a(Rr," ."),Rr.forEach(r),Cw=d(qt),Oe=s(qt,"LI",{});var qr=l(Oe);ip=s(qr,"STRONG",{});var nS=l(ip);Sw=a(nS,"is_in_train"),nS.forEach(r),Nw=a(qr," \u2014 Whether or not a model is currently running "),dp=s(qr,"CODE",{});var sS=l(dp);Iw=a(sS,"train"),sS.forEach(r),Uw=a(qr," (e.g. when "),cp=s(qr,"CODE",{});var lS=l(cp);Lw=a(lS,"evaluate"),lS.forEach(r),Fw=a(qr,` is called while
in `),pp=s(qr,"CODE",{});var iS=l(pp);zw=a(iS,"train"),iS.forEach(r),Rw=a(qr,")"),qr.forEach(r),qt.forEach(r),qw=d(y),Wr=s(y,"DIV",{class:!0});var gb=l(Wr);f(Pa.$$.fragment,gb),Gw=d(gb),Aa=s(gb,"P",{});var vb=l(Aa);jw=a(vb,"Add a callback to the current list of "),mp=s(vb,"CODE",{});var dS=l(mp);Mw=a(dS,"TrainerCallback"),dS.forEach(r),Vw=a(vb,"."),vb.forEach(r),gb.forEach(r),Bw=d(y),Yr=s(y,"DIV",{class:!0});var bb=l(Yr);f(Oa.$$.fragment,bb),Hw=d(bb),xa=s(bb,"P",{});var yb=l(xa);Ww=a(yb,"A helper wrapper that creates an appropriate context manager for "),hp=s(yb,"CODE",{});var cS=l(hp);Yw=a(cS,"autocast"),cS.forEach(r),Zw=a(yb,` while feeding it the desired
arguments, depending on the situation.`),yb.forEach(r),bb.forEach(r),Jw=d(y),it=s(y,"DIV",{class:!0});var Sd=l(it);f(Ca.$$.fragment,Sd),Kw=d(Sd),fp=s(Sd,"P",{});var pS=l(fp);Qw=a(pS,"How the loss is computed by Trainer. By default, all models return the loss in the first element."),pS.forEach(r),Xw=d(Sd),up=s(Sd,"P",{});var mS=l(up);eE=a(mS,"Subclass and override for custom behavior."),mS.forEach(r),Sd.forEach(r),tE=d(y),Zr=s(y,"DIV",{class:!0});var wb=l(Zr);f(Sa.$$.fragment,wb),rE=d(wb),_p=s(wb,"P",{});var hS=l(_p);oE=a(hS,"A helper wrapper to group together context managers."),hS.forEach(r),wb.forEach(r),aE=d(y),dt=s(y,"DIV",{class:!0});var Nd=l(dt);f(Na.$$.fragment,Nd),nE=d(Nd),gp=s(Nd,"P",{});var fS=l(gp);sE=a(fS,"Setup the optimizer."),fS.forEach(r),lE=d(Nd),Ia=s(Nd,"P",{});var Eb=l(Ia);iE=a(Eb,`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer\u2019s init through `),vp=s(Eb,"CODE",{});var uS=l(vp);dE=a(uS,"optimizers"),uS.forEach(r),cE=a(Eb,", or subclass and override this method in a subclass."),Eb.forEach(r),Nd.forEach(r),pE=d(y),ct=s(y,"DIV",{class:!0});var Id=l(ct);f(Ua.$$.fragment,Id),mE=d(Id),bp=s(Id,"P",{});var _S=l(bp);hE=a(_S,"Setup the optimizer and the learning rate scheduler."),_S.forEach(r),fE=d(Id),Ze=s(Id,"P",{});var ta=l(Ze);uE=a(ta,`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer\u2019s init through `),yp=s(ta,"CODE",{});var gS=l(yp);_E=a(gS,"optimizers"),gS.forEach(r),gE=a(ta,", or subclass and override this method (or "),wp=s(ta,"CODE",{});var vS=l(wp);vE=a(vS,"create_optimizer"),vS.forEach(r),bE=a(ta,` and/or
`),Ep=s(ta,"CODE",{});var bS=l(Ep);yE=a(bS,"create_scheduler"),bS.forEach(r),wE=a(ta,") in a subclass."),ta.forEach(r),Id.forEach(r),EE=d(y),Jr=s(y,"DIV",{class:!0});var $b=l(Jr);f(La.$$.fragment,$b),$E=d($b),$p=s($b,"P",{});var yS=l($p);TE=a(yS,`Setup the scheduler. The optimizer of the trainer must have been set up either before this method is called or
passed as an argument.`),yS.forEach(r),$b.forEach(r),DE=d(y),xe=s(y,"DIV",{class:!0});var ra=l(xe);f(Fa.$$.fragment,ra),kE=d(ra),Tp=s(ra,"P",{});var wS=l(Tp);PE=a(wS,"Run evaluation and returns metrics."),wS.forEach(r),AE=d(ra),za=s(ra,"P",{});var Tb=l(za);OE=a(Tb,`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init `),Dp=s(Tb,"CODE",{});var ES=l(Dp);xE=a(ES,"compute_metrics"),ES.forEach(r),CE=a(Tb," argument)."),Tb.forEach(r),SE=d(ra),kp=s(ra,"P",{});var $S=l(kp);NE=a($S,"You can also subclass and override this method to inject custom behavior."),$S.forEach(r),ra.forEach(r),IE=d(y),pt=s(y,"DIV",{class:!0});var Ud=l(pt);f(Ra.$$.fragment,Ud),UE=d(Ud),Xt=s(Ud,"P",{});var Ld=l(Xt);LE=a(Ld,"Prediction/evaluation loop, shared by "),Pp=s(Ld,"CODE",{});var TS=l(Pp);FE=a(TS,"Trainer.evaluate()"),TS.forEach(r),zE=a(Ld," and "),Ap=s(Ld,"CODE",{});var DS=l(Ap);RE=a(DS,"Trainer.predict()"),DS.forEach(r),qE=a(Ld,"."),Ld.forEach(r),GE=d(Ud),Op=s(Ud,"P",{});var kS=l(Op);jE=a(kS,"Works both with or without labels."),kS.forEach(r),Ud.forEach(r),ME=d(y),Kr=s(y,"DIV",{class:!0});var Db=l(Kr);f(qa.$$.fragment,Db),VE=d(Db),Ga=s(Db,"P",{});var kb=l(Ga);BE=a(kb,"For models that inherit from "),Hl=s(kb,"A",{href:!0});var PS=l(Hl);HE=a(PS,"PreTrainedModel"),PS.forEach(r),WE=a(kb,`, uses that method to compute the number of floating point
operations for every backward + forward pass. If using another model, either implement such a method in the
model or subclass and override this method.`),kb.forEach(r),Db.forEach(r),YE=d(y),mt=s(y,"DIV",{class:!0});var Fd=l(mt);f(ja.$$.fragment,Fd),ZE=d(Fd),Ma=s(Fd,"P",{});var Pb=l(Ma);JE=a(Pb,"Returns the evaluation "),xp=s(Pb,"CODE",{});var AS=l(xp);KE=a(AS,"DataLoader"),AS.forEach(r),QE=a(Pb,"."),Pb.forEach(r),XE=d(Fd),Cp=s(Fd,"P",{});var OS=l(Cp);e0=a(OS,"Subclass and override this method if you want to inject some custom behavior."),OS.forEach(r),Fd.forEach(r),t0=d(y),Qr=s(y,"DIV",{class:!0});var Ab=l(Qr);f(Va.$$.fragment,Ab),r0=d(Ab),Sp=s(Ab,"P",{});var xS=l(Sp);o0=a(xS,"Returns the optimizer class and optimizer parameters based on the training arguments."),xS.forEach(r),Ab.forEach(r),a0=d(y),ht=s(y,"DIV",{class:!0});var zd=l(ht);f(Ba.$$.fragment,zd),n0=d(zd),Ha=s(zd,"P",{});var Ob=l(Ha);s0=a(Ob,"Returns the test "),Np=s(Ob,"CODE",{});var CS=l(Np);l0=a(CS,"DataLoader"),CS.forEach(r),i0=a(Ob,"."),Ob.forEach(r),d0=d(zd),Ip=s(zd,"P",{});var SS=l(Ip);c0=a(SS,"Subclass and override this method if you want to inject some custom behavior."),SS.forEach(r),zd.forEach(r),p0=d(y),Ce=s(y,"DIV",{class:!0});var oa=l(Ce);f(Wa.$$.fragment,oa),m0=d(oa),Ya=s(oa,"P",{});var xb=l(Ya);h0=a(xb,"Returns the training "),Up=s(xb,"CODE",{});var NS=l(Up);f0=a(NS,"DataLoader"),NS.forEach(r),u0=a(xb,"."),xb.forEach(r),_0=d(oa),er=s(oa,"P",{});var Rd=l(er);g0=a(Rd,"Will use no sampler if "),Lp=s(Rd,"CODE",{});var IS=l(Lp);v0=a(IS,"train_dataset"),IS.forEach(r),b0=a(Rd," does not implement "),Fp=s(Rd,"CODE",{});var US=l(Fp);y0=a(US,"__len__"),US.forEach(r),w0=a(Rd,`, a random sampler (adapted to distributed
training if necessary) otherwise.`),Rd.forEach(r),E0=d(oa),zp=s(oa,"P",{});var LS=l(zp);$0=a(LS,"Subclass and override this method if you want to inject some custom behavior."),LS.forEach(r),oa.forEach(r),T0=d(y),ft=s(y,"DIV",{class:!0});var qd=l(ft);f(Za.$$.fragment,qd),D0=d(qd),we=s(qd,"P",{});var Gt=l(we);k0=a(Gt,"Launch an hyperparameter search using "),Rp=s(Gt,"CODE",{});var FS=l(Rp);P0=a(FS,"optuna"),FS.forEach(r),A0=a(Gt," or "),qp=s(Gt,"CODE",{});var zS=l(qp);O0=a(zS,"Ray Tune"),zS.forEach(r),x0=a(Gt," or "),Gp=s(Gt,"CODE",{});var RS=l(Gp);C0=a(RS,"SigOpt"),RS.forEach(r),S0=a(Gt,`. The optimized quantity is determined
by `),jp=s(Gt,"CODE",{});var qS=l(jp);N0=a(qS,"compute_objective"),qS.forEach(r),I0=a(Gt,`, which defaults to a function returning the evaluation loss when no metric is provided,
the sum of all metrics otherwise.`),Gt.forEach(r),U0=d(qd),f(Xr.$$.fragment,qd),qd.forEach(r),L0=d(y),eo=s(y,"DIV",{class:!0});var Cb=l(eo);f(Ja.$$.fragment,Cb),F0=d(Cb),Ka=s(Cb,"P",{});var Sb=l(Ka);z0=a(Sb,"Initializes a git repo in "),Mp=s(Sb,"CODE",{});var GS=l(Mp);R0=a(GS,"self.args.hub_model_id"),GS.forEach(r),q0=a(Sb,"."),Sb.forEach(r),Cb.forEach(r),G0=d(y),to=s(y,"DIV",{class:!0});var Nb=l(to);f(Qa.$$.fragment,Nb),j0=d(Nb),Vp=s(Nb,"P",{});var jS=l(Vp);M0=a(jS,`Whether or not this process is the local (e.g., on one machine if training in a distributed fashion on several
machines) main process.`),jS.forEach(r),Nb.forEach(r),V0=d(y),ro=s(y,"DIV",{class:!0});var Ib=l(ro);f(Xa.$$.fragment,Ib),B0=d(Ib),en=s(Ib,"P",{});var Ub=l(en);H0=a(Ub,`Whether or not this process is the global main process (when training in a distributed fashion on several
machines, this is only going to be `),Bp=s(Ub,"CODE",{});var MS=l(Bp);W0=a(MS,"True"),MS.forEach(r),Y0=a(Ub," for one process)."),Ub.forEach(r),Ib.forEach(r),Z0=d(y),ut=s(y,"DIV",{class:!0});var Gd=l(ut);f(tn.$$.fragment,Gd),J0=d(Gd),rn=s(Gd,"P",{});var Lb=l(rn);K0=a(Lb,"Log "),Hp=s(Lb,"CODE",{});var VS=l(Hp);Q0=a(VS,"logs"),VS.forEach(r),X0=a(Lb," on the various objects watching training."),Lb.forEach(r),e5=d(Gd),Wp=s(Gd,"P",{});var BS=l(Wp);t5=a(BS,"Subclass and override this method to inject custom behavior."),BS.forEach(r),Gd.forEach(r),r5=d(y),P=s(y,"DIV",{class:!0});var O=l(P);f(on.$$.fragment,O),o5=d(O),Yp=s(O,"P",{});var HS=l(Yp);a5=a(HS,"Log metrics in a specially formatted way"),HS.forEach(r),n5=d(O),Zp=s(O,"P",{});var WS=l(Zp);s5=a(WS,"Under distributed environment this is done only for a process with rank 0."),WS.forEach(r),l5=d(O),Jp=s(O,"P",{});var YS=l(Jp);i5=a(YS,"Notes on memory reports:"),YS.forEach(r),d5=d(O),tr=s(O,"P",{});var jd=l(tr);c5=a(jd,"In order to get memory usage report you need to install "),Kp=s(jd,"CODE",{});var ZS=l(Kp);p5=a(ZS,"psutil"),ZS.forEach(r),m5=a(jd,". You can do that with "),Qp=s(jd,"CODE",{});var JS=l(Qp);h5=a(JS,"pip install psutil"),JS.forEach(r),f5=a(jd,"."),jd.forEach(r),u5=d(O),f(oo.$$.fragment,O),_5=d(O),Xp=s(O,"P",{});var KS=l(Xp);em=s(KS,"STRONG",{});var QS=l(em);g5=a(QS,"Understanding the reports:"),QS.forEach(r),KS.forEach(r),v5=d(O),Je=s(O,"UL",{});var aa=l(Je);Ee=s(aa,"LI",{});var jt=l(Ee);b5=a(jt,"the first segment, e.g., "),tm=s(jt,"CODE",{});var XS=l(tm);y5=a(XS,"train__"),XS.forEach(r),w5=a(jt,", tells you which stage the metrics are for. Reports starting with "),rm=s(jt,"CODE",{});var eN=l(rm);E5=a(eN,"init_"),eN.forEach(r),$5=a(jt,`
will be added to the first stage that gets run. So that if only evaluation is run, the memory usage for the
`),om=s(jt,"CODE",{});var tN=l(om);T5=a(tN,"__init__"),tN.forEach(r),D5=a(jt," will be reported along with the "),am=s(jt,"CODE",{});var rN=l(am);k5=a(rN,"eval_"),rN.forEach(r),P5=a(jt," metrics."),jt.forEach(r),A5=d(aa),rr=s(aa,"LI",{});var Md=l(rr);O5=a(Md,"the third segment, is either "),nm=s(Md,"CODE",{});var oN=l(nm);x5=a(oN,"cpu"),oN.forEach(r),C5=a(Md," or "),sm=s(Md,"CODE",{});var aN=l(sm);S5=a(aN,"gpu"),aN.forEach(r),N5=a(Md,`, tells you whether it\u2019s the general RAM or the gpu0 memory
metric.`),Md.forEach(r),I5=d(aa),Wl=s(aa,"LI",{});var sC=l(Wl);lm=s(sC,"CODE",{});var nN=l(lm);U5=a(nN,"*_alloc_delta"),nN.forEach(r),L5=a(sC,` - is the difference in the used/allocated memory counter between the end and the start of the
stage - it can be negative if a function released more memory than it allocated.`),sC.forEach(r),F5=d(aa),_t=s(aa,"LI",{});var Tl=l(_t);im=s(Tl,"CODE",{});var sN=l(im);z5=a(sN,"*_peaked_delta"),sN.forEach(r),R5=a(Tl,` - is any extra memory that was consumed and then freed - relative to the current allocated
memory counter - it is never negative. When you look at the metrics of any stage you add up `),dm=s(Tl,"CODE",{});var lN=l(dm);q5=a(lN,"alloc_delta"),lN.forEach(r),G5=a(Tl,` +
`),cm=s(Tl,"CODE",{});var iN=l(cm);j5=a(iN,"peaked_delta"),iN.forEach(r),M5=a(Tl," and you know how much memory was needed to complete that stage."),Tl.forEach(r),aa.forEach(r),V5=d(O),pm=s(O,"P",{});var dN=l(pm);B5=a(dN,`The reporting happens only for process of rank 0 and gpu 0 (if there is a gpu). Typically this is enough since the
main process does the bulk of work, but it could be not quite so if model parallel is used and then other GPUs may
use a different amount of gpu memory. This is also not the same under DataParallel where gpu0 may require much more
memory than the rest since it stores the gradient and optimizer states for all participating GPUS. Perhaps in the
future these reports will evolve to measure those too.`),dN.forEach(r),H5=d(O),mm=s(O,"P",{});var cN=l(mm);W5=a(cN,`The CPU RAM metric measures RSS (Resident Set Size) includes both the memory which is unique to the process and the
memory shared with other processes. It is important to note that it does not include swapped out memory, so the
reports could be imprecise.`),cN.forEach(r),Y5=d(O),an=s(O,"P",{});var Fb=l(an);Z5=a(Fb,`The CPU peak memory is measured using a sampling thread. Due to python\u2019s GIL it may miss some of the peak memory if
that thread didn\u2019t get a chance to run when the highest memory was used. Therefore this report can be less than
reality. Using `),hm=s(Fb,"CODE",{});var pN=l(hm);J5=a(pN,"tracemalloc"),pN.forEach(r),K5=a(Fb,` would have reported the exact peak memory, but it doesn\u2019t report memory allocations
outside of python. So if some C++ CUDA extension allocated its own memory it won\u2019t be reported. And therefore it
was dropped in favor of the memory sampling approach, which reads the current process memory usage.`),Fb.forEach(r),Q5=d(O),Ke=s(O,"P",{});var na=l(Ke);X5=a(na,"The GPU allocated and peak memory reporting is done with "),fm=s(na,"CODE",{});var mN=l(fm);e$=a(mN,"torch.cuda.memory_allocated()"),mN.forEach(r),t$=a(na,` and
`),um=s(na,"CODE",{});var hN=l(um);r$=a(hN,"torch.cuda.max_memory_allocated()"),hN.forEach(r),o$=a(na,`. This metric reports only \u201Cdeltas\u201D for pytorch-specific allocations, as
`),_m=s(na,"CODE",{});var fN=l(_m);a$=a(fN,"torch.cuda"),fN.forEach(r),n$=a(na,` memory management system doesn\u2019t track any memory allocated outside of pytorch. For example, the very
first cuda call typically loads CUDA kernels, which may take from 0.5 to 2GB of GPU memory.`),na.forEach(r),s$=d(O),oe=s(O,"P",{});var je=l(oe);l$=a(je,"Note that this tracker doesn\u2019t account for memory allocations outside of "),Yl=s(je,"A",{href:!0});var uN=l(Yl);i$=a(uN,"Trainer"),uN.forEach(r),d$=a(je,"\u2019s "),gm=s(je,"CODE",{});var _N=l(gm);c$=a(_N,"__init__"),_N.forEach(r),p$=a(je,", "),vm=s(je,"CODE",{});var gN=l(vm);m$=a(gN,"train"),gN.forEach(r),h$=a(je,`,
`),bm=s(je,"CODE",{});var vN=l(bm);f$=a(vN,"evaluate"),vN.forEach(r),u$=a(je," and "),ym=s(je,"CODE",{});var bN=l(ym);_$=a(bN,"predict"),bN.forEach(r),g$=a(je," calls."),je.forEach(r),v$=d(O),U=s(O,"P",{});var z=l(U);b$=a(z,"Because "),wm=s(z,"CODE",{});var yN=l(wm);y$=a(yN,"evaluation"),yN.forEach(r),w$=a(z," calls may happen during "),Em=s(z,"CODE",{});var wN=l(Em);E$=a(wN,"train"),wN.forEach(r),$$=a(z,`, we can\u2019t handle nested invocations because
`),$m=s(z,"CODE",{});var EN=l($m);T$=a(EN,"torch.cuda.max_memory_allocated"),EN.forEach(r),D$=a(z," is a single counter, so if it gets reset by a nested eval call, "),Tm=s(z,"CODE",{});var $N=l(Tm);k$=a($N,"train"),$N.forEach(r),P$=a(z,`\u2019s tracker
will report incorrect info. If this `),nn=s(z,"A",{href:!0,rel:!0});var TN=l(nn);A$=a(TN,"pytorch issue"),TN.forEach(r),O$=a(z,` gets resolved
it will be possible to change this class to be re-entrant. Until then we will only track the outer level of
`),Dm=s(z,"CODE",{});var DN=l(Dm);x$=a(DN,"train"),DN.forEach(r),C$=a(z,", "),km=s(z,"CODE",{});var kN=l(km);S$=a(kN,"evaluate"),kN.forEach(r),N$=a(z," and "),Pm=s(z,"CODE",{});var PN=l(Pm);I$=a(PN,"predict"),PN.forEach(r),U$=a(z," methods. Which means that if "),Am=s(z,"CODE",{});var AN=l(Am);L$=a(AN,"eval"),AN.forEach(r),F$=a(z," is called during "),Om=s(z,"CODE",{});var ON=l(Om);z$=a(ON,"train"),ON.forEach(r),R$=a(z,`, it\u2019s the latter
that will account for its memory usage and that of the former.`),z.forEach(r),q$=d(O),$e=s(O,"P",{});var Mt=l($e);G$=a(Mt,"This also means that if any other tool that is used along the "),Zl=s(Mt,"A",{href:!0});var xN=l(Zl);j$=a(xN,"Trainer"),xN.forEach(r),M$=a(Mt,` calls
`),xm=s(Mt,"CODE",{});var CN=l(xm);V$=a(CN,"torch.cuda.reset_peak_memory_stats"),CN.forEach(r),B$=a(Mt,", the gpu peak memory stats could be invalid. And the "),Jl=s(Mt,"A",{href:!0});var SN=l(Jl);H$=a(SN,"Trainer"),SN.forEach(r),W$=a(Mt,` will disrupt
the normal behavior of any such tools that rely on calling `),Cm=s(Mt,"CODE",{});var NN=l(Cm);Y$=a(NN,"torch.cuda.reset_peak_memory_stats"),NN.forEach(r),Z$=a(Mt," themselves."),Mt.forEach(r),J$=d(O),Sm=s(O,"P",{});var IN=l(Sm);K$=a(IN,"For best performance you may want to consider turning the memory profiling off for production runs."),IN.forEach(r),O.forEach(r),Q$=d(y),ao=s(y,"DIV",{class:!0});var zb=l(ao);f(sn.$$.fragment,zb),X$=d(zb),Nm=s(zb,"P",{});var UN=l(Nm);e4=a(UN,"Reformat Trainer metrics values to a human-readable format"),UN.forEach(r),zb.forEach(r),t4=d(y),no=s(y,"DIV",{class:!0});var Rb=l(no);f(ln.$$.fragment,Rb),r4=d(Rb),dn=s(Rb,"P",{});var qb=l(dn);o4=a(qb,"Helper to get number of samples in a "),Im=s(qb,"CODE",{});var LN=l(Im);a4=a(LN,"DataLoader"),LN.forEach(r),n4=a(qb,` by accessing its dataset. When
dataloader.dataset does not exist or has no length, estimates as best it can`),qb.forEach(r),Rb.forEach(r),s4=d(y),gt=s(y,"DIV",{class:!0});var Vd=l(gt);f(cn.$$.fragment,Vd),l4=d(Vd),pn=s(Vd,"P",{});var Gb=l(pn);i4=a(Gb,"Remove a callback from the current list of "),Um=s(Gb,"CODE",{});var FN=l(Um);d4=a(FN,"TrainerCallback"),FN.forEach(r),c4=a(Gb," and returns it."),Gb.forEach(r),p4=d(Vd),mn=s(Vd,"P",{});var jb=l(mn);m4=a(jb,"If the callback is not found, returns "),Lm=s(jb,"CODE",{});var zN=l(Lm);h4=a(zN,"None"),zN.forEach(r),f4=a(jb," (and no error is raised)."),jb.forEach(r),Vd.forEach(r),u4=d(y),Z=s(y,"DIV",{class:!0});var Me=l(Z);f(hn.$$.fragment,Me),_4=d(Me),Fm=s(Me,"P",{});var RN=l(Fm);g4=a(RN,"Run prediction and returns predictions and potential metrics."),RN.forEach(r),v4=d(Me),fn=s(Me,"P",{});var Mb=l(fn);b4=a(Mb,`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in `),zm=s(Mb,"CODE",{});var qN=l(zm);y4=a(qN,"evaluate()"),qN.forEach(r),w4=a(Mb,"."),Mb.forEach(r),E4=d(Me),f(so.$$.fragment,Me),$4=d(Me),un=s(Me,"P",{});var Vb=l(un);T4=a(Vb,"Returns: "),Rm=s(Vb,"EM",{});var GN=l(Rm);D4=a(GN,"NamedTuple"),GN.forEach(r),k4=a(Vb," A namedtuple with the following keys:"),Vb.forEach(r),P4=d(Me),or=s(Me,"UL",{});var Bd=l(or);ar=s(Bd,"LI",{});var Hd=l(ar);A4=a(Hd,"predictions ("),qm=s(Hd,"CODE",{});var jN=l(qm);O4=a(jN,"np.ndarray"),jN.forEach(r),x4=a(Hd,"): The predictions on "),Gm=s(Hd,"CODE",{});var MN=l(Gm);C4=a(MN,"test_dataset"),MN.forEach(r),S4=a(Hd,"."),Hd.forEach(r),N4=d(Bd),nr=s(Bd,"LI",{});var Wd=l(nr);I4=a(Wd,"label_ids ("),jm=s(Wd,"CODE",{});var VN=l(jm);U4=a(VN,"np.ndarray"),VN.forEach(r),L4=a(Wd,", "),Mm=s(Wd,"EM",{});var BN=l(Mm);F4=a(BN,"optional"),BN.forEach(r),z4=a(Wd,"): The labels (if the dataset contained some)."),Wd.forEach(r),R4=d(Bd),sr=s(Bd,"LI",{});var Yd=l(sr);q4=a(Yd,"metrics ("),Vm=s(Yd,"CODE",{});var HN=l(Vm);G4=a(HN,"Dict[str, float]"),HN.forEach(r),j4=a(Yd,", "),Bm=s(Yd,"EM",{});var WN=l(Bm);M4=a(WN,"optional"),WN.forEach(r),V4=a(Yd,`): The potential dictionary of metrics (if the dataset contained
labels).`),Yd.forEach(r),Bd.forEach(r),Me.forEach(r),B4=d(y),vt=s(y,"DIV",{class:!0});var Zd=l(vt);f(_n.$$.fragment,Zd),H4=d(Zd),lr=s(Zd,"P",{});var Jd=l(lr);W4=a(Jd,"Prediction/evaluation loop, shared by "),Hm=s(Jd,"CODE",{});var YN=l(Hm);Y4=a(YN,"Trainer.evaluate()"),YN.forEach(r),Z4=a(Jd," and "),Wm=s(Jd,"CODE",{});var ZN=l(Wm);J4=a(ZN,"Trainer.predict()"),ZN.forEach(r),K4=a(Jd,"."),Jd.forEach(r),Q4=d(Zd),Ym=s(Zd,"P",{});var JN=l(Ym);X4=a(JN,"Works both with or without labels."),JN.forEach(r),Zd.forEach(r),e3=d(y),bt=s(y,"DIV",{class:!0});var Kd=l(bt);f(gn.$$.fragment,Kd),t3=d(Kd),ir=s(Kd,"P",{});var Qd=l(ir);r3=a(Qd,"Perform an evaluation step on "),Zm=s(Qd,"CODE",{});var KN=l(Zm);o3=a(KN,"model"),KN.forEach(r),a3=a(Qd," using "),Jm=s(Qd,"CODE",{});var QN=l(Jm);n3=a(QN,"inputs"),QN.forEach(r),s3=a(Qd,"."),Qd.forEach(r),l3=d(Kd),Km=s(Kd,"P",{});var XN=l(Km);i3=a(XN,"Subclass and override to inject custom behavior."),XN.forEach(r),Kd.forEach(r),d3=d(y),lo=s(y,"DIV",{class:!0});var Bb=l(lo);f(vn.$$.fragment,Bb),c3=d(Bb),Qe=s(Bb,"P",{});var sa=l(Qe);p3=a(sa,"Upload "),Qm=s(sa,"EM",{});var eI=l(Qm);m3=a(eI,"self.model"),eI.forEach(r),h3=a(sa," and "),Xm=s(sa,"EM",{});var tI=l(Xm);f3=a(tI,"self.tokenizer"),tI.forEach(r),u3=a(sa," to the \u{1F917} model hub on the repo "),eh=s(sa,"EM",{});var rI=l(eh);_3=a(rI,"self.args.hub_model_id"),rI.forEach(r),g3=a(sa,"."),sa.forEach(r),Bb.forEach(r),v3=d(y),io=s(y,"DIV",{class:!0});var Hb=l(io);f(bn.$$.fragment,Hb),b3=d(Hb),yn=s(Hb,"P",{});var Wb=l(yn);y3=a(Wb,"Remove a callback from the current list of "),th=s(Wb,"CODE",{});var oI=l(th);w3=a(oI,"TrainerCallback"),oI.forEach(r),E3=a(Wb,"."),Wb.forEach(r),Hb.forEach(r),$3=d(y),Se=s(y,"DIV",{class:!0});var la=l(Se);f(wn.$$.fragment,la),T3=d(la),En=s(la,"P",{});var Yb=l(En);D3=a(Yb,"Save metrics into a json file for that split, e.g. "),rh=s(Yb,"CODE",{});var aI=l(rh);k3=a(aI,"train_results.json"),aI.forEach(r),P3=a(Yb,"."),Yb.forEach(r),A3=d(la),oh=s(la,"P",{});var nI=l(oh);O3=a(nI,"Under distributed environment this is done only for a process with rank 0."),nI.forEach(r),x3=d(la),$n=s(la,"P",{});var Zb=l($n);C3=a(Zb,"To understand the metrics please read the docstring of "),Kl=s(Zb,"A",{href:!0});var sI=l(Kl);S3=a(sI,"log_metrics()"),sI.forEach(r),N3=a(Zb,`. The only difference is that raw
unformatted numbers are saved in the current method.`),Zb.forEach(r),la.forEach(r),I3=d(y),yt=s(y,"DIV",{class:!0});var Xd=l(yt);f(Tn.$$.fragment,Xd),U3=d(Xd),Dn=s(Xd,"P",{});var Jb=l(Dn);L3=a(Jb,"Will save the model, so you can reload it using "),ah=s(Jb,"CODE",{});var lI=l(ah);F3=a(lI,"from_pretrained()"),lI.forEach(r),z3=a(Jb,"."),Jb.forEach(r),R3=d(Xd),nh=s(Xd,"P",{});var iI=l(nh);q3=a(iI,"Will only save from the main process."),iI.forEach(r),Xd.forEach(r),G3=d(y),wt=s(y,"DIV",{class:!0});var ec=l(wt);f(kn.$$.fragment,ec),j3=d(ec),sh=s(ec,"P",{});var dI=l(sh);M3=a(dI,"Saves the Trainer state, since Trainer.save_model saves only the tokenizer with the model"),dI.forEach(r),V3=d(ec),lh=s(ec,"P",{});var cI=l(lh);B3=a(cI,"Under distributed environment this is done only for a process with rank 0."),cI.forEach(r),ec.forEach(r),H3=d(y),co=s(y,"DIV",{class:!0});var Kb=l(co);f(Pn.$$.fragment,Kb),W3=d(Kb),An=s(Kb,"P",{});var Qb=l(An);Y3=a(Qb,"A helper wrapper that creates an appropriate context manager for "),ih=s(Qb,"CODE",{});var pI=l(ih);Z3=a(pI,"torchdynamo"),pI.forEach(r),J3=a(Qb,"."),Qb.forEach(r),Kb.forEach(r),K3=d(y),po=s(y,"DIV",{class:!0});var Xb=l(po);f(On.$$.fragment,Xb),Q3=d(Xb),dh=s(Xb,"P",{});var mI=l(dh);X3=a(mI,"Main training entry point."),mI.forEach(r),Xb.forEach(r),eT=d(y),Et=s(y,"DIV",{class:!0});var tc=l(Et);f(xn.$$.fragment,tc),tT=d(tc),ch=s(tc,"P",{});var hI=l(ch);rT=a(hI,"Perform a training step on a batch of inputs."),hI.forEach(r),oT=d(tc),ph=s(tc,"P",{});var fI=l(ph);aT=a(fI,"Subclass and override to inject custom behavior."),fI.forEach(r),tc.forEach(r),y.forEach(r),wg=d(t),dr=s(t,"H2",{class:!0});var ey=l(dr);mo=s(ey,"A",{id:!0,class:!0,href:!0});var uI=l(mo);mh=s(uI,"SPAN",{});var _I=l(mh);f(Cn.$$.fragment,_I),_I.forEach(r),uI.forEach(r),nT=d(ey),hh=s(ey,"SPAN",{});var gI=l(hh);sT=a(gI,"Seq2SeqTrainer"),gI.forEach(r),ey.forEach(r),Eg=d(t),Xe=s(t,"DIV",{class:!0});var rc=l(Xe);f(Sn.$$.fragment,rc),lT=d(rc),Ne=s(rc,"DIV",{class:!0});var ia=l(Ne);f(Nn.$$.fragment,ia),iT=d(ia),fh=s(ia,"P",{});var vI=l(fh);dT=a(vI,"Run evaluation and returns metrics."),vI.forEach(r),cT=d(ia),In=s(ia,"P",{});var ty=l(In);pT=a(ty,`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init `),uh=s(ty,"CODE",{});var bI=l(uh);mT=a(bI,"compute_metrics"),bI.forEach(r),hT=a(ty," argument)."),ty.forEach(r),fT=d(ia),_h=s(ia,"P",{});var yI=l(_h);uT=a(yI,"You can also subclass and override this method to inject custom behavior."),yI.forEach(r),ia.forEach(r),_T=d(rc),J=s(rc,"DIV",{class:!0});var Ve=l(J);f(Un.$$.fragment,Ve),gT=d(Ve),gh=s(Ve,"P",{});var wI=l(gh);vT=a(wI,"Run prediction and returns predictions and potential metrics."),wI.forEach(r),bT=d(Ve),Ln=s(Ve,"P",{});var ry=l(Ln);yT=a(ry,`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in `),vh=s(ry,"CODE",{});var EI=l(vh);wT=a(EI,"evaluate()"),EI.forEach(r),ET=a(ry,"."),ry.forEach(r),$T=d(Ve),f(ho.$$.fragment,Ve),TT=d(Ve),Fn=s(Ve,"P",{});var oy=l(Fn);DT=a(oy,"Returns: "),bh=s(oy,"EM",{});var $I=l(bh);kT=a($I,"NamedTuple"),$I.forEach(r),PT=a(oy," A namedtuple with the following keys:"),oy.forEach(r),AT=d(Ve),cr=s(Ve,"UL",{});var oc=l(cr);pr=s(oc,"LI",{});var ac=l(pr);OT=a(ac,"predictions ("),yh=s(ac,"CODE",{});var TI=l(yh);xT=a(TI,"np.ndarray"),TI.forEach(r),CT=a(ac,"): The predictions on "),wh=s(ac,"CODE",{});var DI=l(wh);ST=a(DI,"test_dataset"),DI.forEach(r),NT=a(ac,"."),ac.forEach(r),IT=d(oc),mr=s(oc,"LI",{});var nc=l(mr);UT=a(nc,"label_ids ("),Eh=s(nc,"CODE",{});var kI=l(Eh);LT=a(kI,"np.ndarray"),kI.forEach(r),FT=a(nc,", "),$h=s(nc,"EM",{});var PI=l($h);zT=a(PI,"optional"),PI.forEach(r),RT=a(nc,"): The labels (if the dataset contained some)."),nc.forEach(r),qT=d(oc),hr=s(oc,"LI",{});var sc=l(hr);GT=a(sc,"metrics ("),Th=s(sc,"CODE",{});var AI=l(Th);jT=a(AI,"Dict[str, float]"),AI.forEach(r),MT=a(sc,", "),Dh=s(sc,"EM",{});var OI=l(Dh);VT=a(OI,"optional"),OI.forEach(r),BT=a(sc,`): The potential dictionary of metrics (if the dataset contained
labels).`),sc.forEach(r),oc.forEach(r),Ve.forEach(r),rc.forEach(r),$g=d(t),fr=s(t,"H2",{class:!0});var ay=l(fr);fo=s(ay,"A",{id:!0,class:!0,href:!0});var xI=l(fo);kh=s(xI,"SPAN",{});var CI=l(kh);f(zn.$$.fragment,CI),CI.forEach(r),xI.forEach(r),HT=d(ay),Ph=s(ay,"SPAN",{});var SI=l(Ph);WT=a(SI,"TrainingArguments"),SI.forEach(r),ay.forEach(r),Tg=d(t),R=s(t,"DIV",{class:!0});var he=l(R);f(Rn.$$.fragment,he),YT=d(he),ie=s(he,"DIV",{class:!0});var Vt=l(ie);f(qn.$$.fragment,Vt),ZT=d(Vt),Ah=s(Vt,"P",{});var NI=l(Ah);JT=a(NI,`Returns the log level to be used depending on whether this process is the main process of node 0, main process
of node non-0, or a non-main process.`),NI.forEach(r),KT=d(Vt),ur=s(Vt,"P",{});var lc=l(ur);QT=a(lc,"For the main process the log level defaults to "),Oh=s(lc,"CODE",{});var II=l(Oh);XT=a(II,"logging.INFO"),II.forEach(r),e8=a(lc," unless overridden by "),xh=s(lc,"CODE",{});var UI=l(xh);t8=a(UI,"log_level"),UI.forEach(r),r8=a(lc," argument."),lc.forEach(r),o8=d(Vt),_r=s(Vt,"P",{});var ic=l(_r);a8=a(ic,"For the replica processes the log level defaults to "),Ch=s(ic,"CODE",{});var LI=l(Ch);n8=a(LI,"logging.WARNING"),LI.forEach(r),s8=a(ic," unless overridden by "),Sh=s(ic,"CODE",{});var FI=l(Sh);l8=a(FI,"log_level_replica"),FI.forEach(r),i8=a(ic,`
argument.`),ic.forEach(r),d8=d(Vt),Gn=s(Vt,"P",{});var ny=l(Gn);c8=a(ny,"The choice between the main and replica process settings is made according to the return value of "),Nh=s(ny,"CODE",{});var zI=l(Nh);p8=a(zI,"should_log"),zI.forEach(r),m8=a(ny,"."),ny.forEach(r),Vt.forEach(r),h8=d(he),uo=s(he,"DIV",{class:!0});var sy=l(uo);f(jn.$$.fragment,sy),f8=d(sy),Ih=s(sy,"P",{});var RI=l(Ih);u8=a(RI,"Get number of steps used for a linear warmup."),RI.forEach(r),sy.forEach(r),_8=d(he),$t=s(he,"DIV",{class:!0});var dc=l($t);f(Mn.$$.fragment,dc),g8=d(dc),Uh=s(dc,"P",{});var qI=l(Uh);v8=a(qI,`A context manager for torch distributed environment where on needs to do something on the main process, while
blocking replicas, and when it\u2019s finished releasing the replicas.`),qI.forEach(r),b8=d(dc),gr=s(dc,"P",{});var cc=l(gr);y8=a(cc,"One such use is for "),Lh=s(cc,"CODE",{});var GI=l(Lh);w8=a(GI,"datasets"),GI.forEach(r),E8=a(cc,"\u2019s "),Fh=s(cc,"CODE",{});var jI=l(Fh);$8=a(jI,"map"),jI.forEach(r),T8=a(cc,` feature which to be efficient should be run once on the main process,
which upon completion saves a cached version of results and which then automatically gets loaded by the
replicas.`),cc.forEach(r),dc.forEach(r),D8=d(he),_o=s(he,"DIV",{class:!0});var ly=l(_o);f(Vn.$$.fragment,ly),k8=d(ly),Bn=s(ly,"P",{});var iy=l(Bn);P8=a(iy,"Serializes this instance while replace "),zh=s(iy,"CODE",{});var MI=l(zh);A8=a(MI,"Enum"),MI.forEach(r),O8=a(iy,` by their values (for JSON serialization support). It obfuscates
the token values by removing their value.`),iy.forEach(r),ly.forEach(r),x8=d(he),go=s(he,"DIV",{class:!0});var dy=l(go);f(Hn.$$.fragment,dy),C8=d(dy),Rh=s(dy,"P",{});var VI=l(Rh);S8=a(VI,"Serializes this instance to a JSON string."),VI.forEach(r),dy.forEach(r),N8=d(he),vo=s(he,"DIV",{class:!0});var cy=l(vo);f(Wn.$$.fragment,cy),I8=d(cy),qh=s(cy,"P",{});var BI=l(qh);U8=a(BI,"Sanitized serialization to use with TensorBoard\u2019s hparams"),BI.forEach(r),cy.forEach(r),he.forEach(r),Dg=d(t),vr=s(t,"H2",{class:!0});var py=l(vr);bo=s(py,"A",{id:!0,class:!0,href:!0});var HI=l(bo);Gh=s(HI,"SPAN",{});var WI=l(Gh);f(Yn.$$.fragment,WI),WI.forEach(r),HI.forEach(r),L8=d(py),jh=s(py,"SPAN",{});var YI=l(jh);F8=a(YI,"Seq2SeqTrainingArguments"),YI.forEach(r),py.forEach(r),kg=d(t),br=s(t,"DIV",{class:!0});var my=l(br);f(Zn.$$.fragment,my),z8=d(my),Mh=s(my,"P",{});var ZI=l(Mh);R8=a(ZI,"TrainingArguments(output_dir: str, overwrite_output_dir: bool = False, do_train: bool = False, do_eval: bool = False, do_predict: bool = False, evaluation_strategy: Union[transformers.trainer_utils.IntervalStrategy, str] = \u2018no\u2019, prediction_loss_only: bool = False, per_device_train_batch_size: int = 8, per_device_eval_batch_size: int = 8, per_gpu_train_batch_size: Union[int, NoneType] = None, per_gpu_eval_batch_size: Union[int, NoneType] = None, gradient_accumulation_steps: int = 1, eval_accumulation_steps: Union[int, NoneType] = None, eval_delay: Union[float, NoneType] = 0, learning_rate: float = 5e-05, weight_decay: float = 0.0, adam_beta1: float = 0.9, adam_beta2: float = 0.999, adam_epsilon: float = 1e-08, max_grad_norm: float = 1.0, num_train_epochs: float = 3.0, max_steps: int = -1, lr_scheduler_type: Union[transformers.trainer_utils.SchedulerType, str] = \u2018linear\u2019, warmup_ratio: float = 0.0, warmup_steps: int = 0, log_level: Union[str, NoneType] = \u2018passive\u2019, log_level_replica: Union[str, NoneType] = \u2018passive\u2019, log_on_each_node: bool = True, logging_dir: Union[str, NoneType] = None, logging_strategy: Union[transformers.trainer_utils.IntervalStrategy, str] = \u2018steps\u2019, logging_first_step: bool = False, logging_steps: int = 500, logging_nan_inf_filter: bool = True, save_strategy: Union[transformers.trainer_utils.IntervalStrategy, str] = \u2018steps\u2019, save_steps: int = 500, save_total_limit: Union[int, NoneType] = None, save_on_each_node: bool = False, no_cuda: bool = False, seed: int = 42, data_seed: Union[int, NoneType] = None, jit_mode_eval: bool = False, use_ipex: bool = False, bf16: bool = False, fp16: bool = False, fp16_opt_level: str = \u2018O1\u2019, half_precision_backend: str = \u2018auto\u2019, bf16_full_eval: bool = False, fp16_full_eval: bool = False, tf32: Union[bool, NoneType] = None, local_rank: int = -1, xpu_backend: Union[str, NoneType] = None, tpu_num_cores: Union[int, NoneType] = None, tpu_metrics_debug: bool = False, debug: str = \u201D, dataloader_drop_last: bool = False, eval_steps: Union[int, NoneType] = None, dataloader_num_workers: int = 0, past_index: int = -1, run_name: Union[str, NoneType] = None, disable_tqdm: Union[bool, NoneType] = None, remove_unused_columns: Union[bool, NoneType] = True, label_names: Union[List[str], NoneType] = None, load_best_model_at_end: Union[bool, NoneType] = False, metric_for_best_model: Union[str, NoneType] = None, greater_is_better: Union[bool, NoneType] = None, ignore_data_skip: bool = False, sharded_ddp: str = \u201D, fsdp: str = \u201D, fsdp_min_num_params: int = 0, fsdp_transformer_layer_cls_to_wrap: Union[str, NoneType] = None, deepspeed: Union[str, NoneType] = None, label_smoothing_factor: float = 0.0, optim: Union[transformers.training_args.OptimizerNames, str] = \u2018adamw_hf\u2019, adafactor: bool = False, group_by_length: bool = False, length_column_name: Union[str, NoneType] = \u2018length\u2019, report_to: Union[List[str], NoneType] = None, ddp_find_unused_parameters: Union[bool, NoneType] = None, ddp_bucket_cap_mb: Union[int, NoneType] = None, dataloader_pin_memory: bool = True, skip_memory_metrics: bool = True, use_legacy_prediction_loop: bool = False, push_to_hub: bool = False, resume_from_checkpoint: Union[str, NoneType] = None, hub_model_id: Union[str, NoneType] = None, hub_strategy: Union[transformers.trainer_utils.HubStrategy, str] = \u2018every_save\u2019, hub_token: Union[str, NoneType] = None, hub_private_repo: bool = False, gradient_checkpointing: bool = False, include_inputs_for_metrics: bool = False, fp16_backend: str = \u2018auto\u2019, push_to_hub_model_id: Union[str, NoneType] = None, push_to_hub_organization: Union[str, NoneType] = None, push_to_hub_token: Union[str, NoneType] = None, mp_parameters: str = \u201D, auto_find_batch_size: bool = False, full_determinism: bool = False, torchdynamo: Union[str, NoneType] = None, ray_scope: Union[str, NoneType] = \u2018last\u2019)"),ZI.forEach(r),my.forEach(r),Pg=d(t),yr=s(t,"H2",{class:!0});var hy=l(yr);yo=s(hy,"A",{id:!0,class:!0,href:!0});var JI=l(yo);Vh=s(JI,"SPAN",{});var KI=l(Vh);f(Jn.$$.fragment,KI),KI.forEach(r),JI.forEach(r),q8=d(hy),Bh=s(hy,"SPAN",{});var QI=l(Bh);G8=a(QI,"Checkpoints"),QI.forEach(r),hy.forEach(r),Ag=d(t),de=s(t,"P",{});var Bt=l(de);j8=a(Bt,"By default, "),Ql=s(Bt,"A",{href:!0});var XI=l(Ql);M8=a(XI,"Trainer"),XI.forEach(r),V8=a(Bt," will save all checkpoints in the "),Hh=s(Bt,"CODE",{});var eU=l(Hh);B8=a(eU,"output_dir"),eU.forEach(r),H8=a(Bt,` you set in the
`),Xl=s(Bt,"A",{href:!0});var tU=l(Xl);W8=a(tU,"TrainingArguments"),tU.forEach(r),Y8=a(Bt," you are using. Those will go in subfolder named "),Wh=s(Bt,"CODE",{});var rU=l(Wh);Z8=a(rU,"checkpoint-xxx"),rU.forEach(r),J8=a(Bt,` with xxx
being the step at which the training was at.`),Bt.forEach(r),Og=d(t),wo=s(t,"P",{});var fy=l(wo);K8=a(fy,"Resuming training from a checkpoint can be done when calling "),ei=s(fy,"A",{href:!0});var oU=l(ei);Q8=a(oU,"Trainer.train()"),oU.forEach(r),X8=a(fy," with either:"),fy.forEach(r),xg=d(t),Eo=s(t,"UL",{});var uy=l(Eo);ti=s(uy,"LI",{});var lC=l(ti);Yh=s(lC,"CODE",{});var aU=l(Yh);e6=a(aU,"resume_from_checkpoint=True"),aU.forEach(r),t6=a(lC," which will resume training from the latest checkpoint"),lC.forEach(r),r6=d(uy),ri=s(uy,"LI",{});var iC=l(ri);Zh=s(iC,"CODE",{});var nU=l(Zh);o6=a(nU,"resume_from_checkpoint=checkpoint_dir"),nU.forEach(r),a6=a(iC,` which will resume training from the specific checkpoint in the directory
passed.`),iC.forEach(r),uy.forEach(r),Cg=d(t),Ie=s(t,"P",{});var da=l(Ie);n6=a(da,"In addition, you can easily save your checkpoints on the Model Hub when using "),Jh=s(da,"CODE",{});var sU=l(Jh);s6=a(sU,"push_to_hub=True"),sU.forEach(r),l6=a(da,`. By default, all
the models saved in intermediate checkpoints are saved in different commits, but not the optimizer state. You can adapt
the `),Kh=s(da,"CODE",{});var lU=l(Kh);i6=a(lU,"hub-strategy"),lU.forEach(r),d6=a(da," value of your "),oi=s(da,"A",{href:!0});var iU=l(oi);c6=a(iU,"TrainingArguments"),iU.forEach(r),p6=a(da," to either:"),da.forEach(r),Sg=d(t),$o=s(t,"UL",{});var _y=l($o);To=s(_y,"LI",{});var mg=l(To);Qh=s(mg,"CODE",{});var dU=l(Qh);m6=a(dU,'"checkpoint"'),dU.forEach(r),h6=a(mg,`: the latest checkpoint is also pushed in a subfolder named last-checkpoint, allowing you to
resume training easily with `),Xh=s(mg,"CODE",{});var cU=l(Xh);f6=a(cU,'trainer.train(resume_from_checkpoint="output_dir/last-checkpoint")'),cU.forEach(r),u6=a(mg,"."),mg.forEach(r),_6=d(_y),ai=s(_y,"LI",{});var dC=l(ai);ef=s(dC,"CODE",{});var pU=l(ef);g6=a(pU,'"all_checkpoints"'),pU.forEach(r),v6=a(dC,`: all checkpoints are pushed like they appear in the output folder (so you will get one
checkpoint folder per folder in your final repository)`),dC.forEach(r),_y.forEach(r),Ng=d(t),wr=s(t,"H2",{class:!0});var gy=l(wr);Do=s(gy,"A",{id:!0,class:!0,href:!0});var mU=l(Do);tf=s(mU,"SPAN",{});var hU=l(tf);f(Kn.$$.fragment,hU),hU.forEach(r),mU.forEach(r),b6=d(gy),rf=s(gy,"SPAN",{});var fU=l(rf);y6=a(fU,"Logging"),fU.forEach(r),gy.forEach(r),Ig=d(t),Ue=s(t,"P",{});var ca=l(Ue);w6=a(ca,"By default "),ni=s(ca,"A",{href:!0});var uU=l(ni);E6=a(uU,"Trainer"),uU.forEach(r),$6=a(ca," will use "),of=s(ca,"CODE",{});var _U=l(of);T6=a(_U,"logging.INFO"),_U.forEach(r),D6=a(ca," for the main process and "),af=s(ca,"CODE",{});var gU=l(af);k6=a(gU,"logging.WARNING"),gU.forEach(r),P6=a(ca," for the replicas if any."),ca.forEach(r),Ug=d(t),Tt=s(t,"P",{});var pc=l(Tt);A6=a(pc,"These defaults can be overridden to use any of the 5 "),nf=s(pc,"CODE",{});var vU=l(nf);O6=a(vU,"logging"),vU.forEach(r),x6=a(pc," levels with "),si=s(pc,"A",{href:!0});var bU=l(si);C6=a(bU,"TrainingArguments"),bU.forEach(r),S6=a(pc,`\u2019s
arguments:`),pc.forEach(r),Lg=d(t),ko=s(t,"UL",{});var vy=l(ko);li=s(vy,"LI",{});var cC=l(li);sf=s(cC,"CODE",{});var yU=l(sf);N6=a(yU,"log_level"),yU.forEach(r),I6=a(cC," - for the main process"),cC.forEach(r),U6=d(vy),ii=s(vy,"LI",{});var pC=l(ii);lf=s(pC,"CODE",{});var wU=l(lf);L6=a(wU,"log_level_replica"),wU.forEach(r),F6=a(pC," - for the replicas"),pC.forEach(r),vy.forEach(r),Fg=d(t),Le=s(t,"P",{});var pa=l(Le);z6=a(pa,"Further, if "),di=s(pa,"A",{href:!0});var EU=l(di);R6=a(EU,"TrainingArguments"),EU.forEach(r),q6=a(pa,"\u2019s "),df=s(pa,"CODE",{});var $U=l(df);G6=a($U,"log_on_each_node"),$U.forEach(r),j6=a(pa," is set to "),cf=s(pa,"CODE",{});var TU=l(cf);M6=a(TU,"False"),TU.forEach(r),V6=a(pa,` only the main node will
use the log level settings for its main process, all other nodes will use the log level settings for replicas.`),pa.forEach(r),zg=d(t),K=s(t,"P",{});var Be=l(K);B6=a(Be,"Note that "),ci=s(Be,"A",{href:!0});var DU=l(ci);H6=a(DU,"Trainer"),DU.forEach(r),W6=a(Be," is going to set "),pf=s(Be,"CODE",{});var kU=l(pf);Y6=a(kU,"transformers"),kU.forEach(r),Z6=a(Be,`\u2019s log level separately for each node in its
`),mf=s(Be,"CODE",{});var PU=l(mf);J6=a(PU,"Trainer.__init__()"),PU.forEach(r),K6=a(Be,`. So you may want to set this sooner (see the next example) if you tap into other
`),hf=s(Be,"CODE",{});var AU=l(hf);Q6=a(AU,"transformers"),AU.forEach(r),X6=a(Be," functionality before creating the "),pi=s(Be,"A",{href:!0});var OU=l(pi);e9=a(OU,"Trainer"),OU.forEach(r),t9=a(Be," object."),Be.forEach(r),Rg=d(t),mi=s(t,"P",{});var xU=l(mi);r9=a(xU,"Here is an example of how this can be used in an application:"),xU.forEach(r),qg=d(t),f(Qn.$$.fragment,t),Gg=d(t),hi=s(t,"P",{});var CU=l(hi);o9=a(CU,`And then if you only want to see warnings on the main node and all other nodes to not print any most likely duplicated
warnings you could run it as:`),CU.forEach(r),jg=d(t),f(Xn.$$.fragment,t),Mg=d(t),fi=s(t,"P",{});var SU=l(fi);a9=a(SU,`In the multi-node environment if you also don\u2019t want the logs to repeat for each node\u2019s main process, you will want to
change the above to:`),SU.forEach(r),Vg=d(t),f(es.$$.fragment,t),Bg=d(t),ui=s(t,"P",{});var NU=l(ui);n9=a(NU,`and then only the main process of the first node will log at the \u201Cwarning\u201D level, and all other processes on the main
node and all processes on other nodes will log at the \u201Cerror\u201D level.`),NU.forEach(r),Hg=d(t),_i=s(t,"P",{});var IU=l(_i);s9=a(IU,"If you need your application to be as quiet as possible you could do:"),IU.forEach(r),Wg=d(t),f(ts.$$.fragment,t),Yg=d(t),Po=s(t,"P",{});var by=l(Po);l9=a(by,"(add "),ff=s(by,"CODE",{});var UU=l(ff);i9=a(UU,"--log_on_each_node 0"),UU.forEach(r),d9=a(by," if on multi-node environment)"),by.forEach(r),Zg=d(t),Er=s(t,"H2",{class:!0});var yy=l(Er);Ao=s(yy,"A",{id:!0,class:!0,href:!0});var LU=l(Ao);uf=s(LU,"SPAN",{});var FU=l(uf);f(rs.$$.fragment,FU),FU.forEach(r),LU.forEach(r),c9=d(yy),_f=s(yy,"SPAN",{});var zU=l(_f);p9=a(zU,"Randomness"),zU.forEach(r),yy.forEach(r),Jg=d(t),ce=s(t,"P",{});var Ht=l(ce);m9=a(Ht,"When resuming from a checkpoint generated by "),gi=s(Ht,"A",{href:!0});var RU=l(gi);h9=a(RU,"Trainer"),RU.forEach(r),f9=a(Ht,` all efforts are made to restore the
`),gf=s(Ht,"EM",{});var qU=l(gf);u9=a(qU,"python"),qU.forEach(r),_9=a(Ht,", "),vf=s(Ht,"EM",{});var GU=l(vf);g9=a(GU,"numpy"),GU.forEach(r),v9=a(Ht," and "),bf=s(Ht,"EM",{});var jU=l(bf);b9=a(jU,"pytorch"),jU.forEach(r),y9=a(Ht,` RNG states to the same states as they were at the moment of saving that checkpoint,
which should make the \u201Cstop and resume\u201D style of training as close as possible to non-stop training.`),Ht.forEach(r),Kg=d(t),Dt=s(t,"P",{});var mc=l(Dt);w9=a(mc,`However, due to various default non-deterministic pytorch settings this might not fully work. If you want full
determinism please refer to `),os=s(mc,"A",{href:!0,rel:!0});var MU=l(os);E9=a(MU,"Controlling sources of randomness"),MU.forEach(r),$9=a(mc,`. As explained in the document, that some of those settings
that make things deterministic (.e.g., `),yf=s(mc,"CODE",{});var VU=l(yf);T9=a(VU,"torch.backends.cudnn.deterministic"),VU.forEach(r),D9=a(mc,`) may slow things down, therefore this
can\u2019t be done by default, but you can enable those yourself if needed.`),mc.forEach(r),Qg=d(t),$r=s(t,"H2",{class:!0});var wy=l($r);Oo=s(wy,"A",{id:!0,class:!0,href:!0});var BU=l(Oo);wf=s(BU,"SPAN",{});var HU=l(wf);f(as.$$.fragment,HU),HU.forEach(r),BU.forEach(r),k9=d(wy),Ef=s(wy,"SPAN",{});var WU=l(Ef);P9=a(WU,"Specific GPUs Selection"),WU.forEach(r),wy.forEach(r),Xg=d(t),vi=s(t,"P",{});var YU=l(vi);A9=a(YU,"Let\u2019s discuss how you can tell your program which GPUs are to be used and in what order."),YU.forEach(r),ev=d(t),xo=s(t,"P",{});var Ey=l(xo);O9=a(Ey,"When using "),ns=s(Ey,"A",{href:!0,rel:!0});var ZU=l(ns);$f=s(ZU,"CODE",{});var JU=l($f);x9=a(JU,"DistributedDataParallel"),JU.forEach(r),ZU.forEach(r),C9=a(Ey," to use only a subset of your GPUs, you simply specify the number of GPUs to use. For example, if you have 4 GPUs, but you wish to use the first 2 you can do:"),Ey.forEach(r),tv=d(t),f(ss.$$.fragment,t),rv=d(t),kt=s(t,"P",{});var hc=l(kt);S9=a(hc,"if you have either "),ls=s(hc,"A",{href:!0,rel:!0});var KU=l(ls);Tf=s(KU,"CODE",{});var QU=l(Tf);N9=a(QU,"accelerate"),QU.forEach(r),KU.forEach(r),I9=a(hc," or "),is=s(hc,"A",{href:!0,rel:!0});var XU=l(is);Df=s(XU,"CODE",{});var eL=l(Df);U9=a(eL,"deepspeed"),eL.forEach(r),XU.forEach(r),L9=a(hc," installed you can also accomplish the same by using one of:"),hc.forEach(r),ov=d(t),f(ds.$$.fragment,t),av=d(t),f(cs.$$.fragment,t),nv=d(t),Co=s(t,"P",{});var $y=l(Co);F9=a($y,"You don\u2019t need to use the Accelerate or "),bi=s($y,"A",{href:!0});var tL=l(bi);z9=a(tL,"the Deepspeed integration"),tL.forEach(r),R9=a($y," features to use these launchers."),$y.forEach(r),sv=d(t),yi=s(t,"P",{});var rL=l(yi);q9=a(rL,"Until now you were able to tell the program how many GPUs to use. Now let\u2019s discuss how to select specific GPUs and control their order."),rL.forEach(r),lv=d(t),wi=s(t,"P",{});var oL=l(wi);G9=a(oL,"The following environment variables help you control which GPUs to use and their order."),oL.forEach(r),iv=d(t),Ei=s(t,"P",{});var aL=l(Ei);kf=s(aL,"STRONG",{});var nL=l(kf);Pf=s(nL,"CODE",{});var sL=l(Pf);j9=a(sL,"CUDA_VISIBLE_DEVICES"),sL.forEach(r),nL.forEach(r),aL.forEach(r),dv=d(t),So=s(t,"P",{});var Ty=l(So);M9=a(Ty,"If you have multiple GPUs and you\u2019d like to use only 1 or a few of those GPUs, set the environment variable "),Af=s(Ty,"CODE",{});var lL=l(Af);V9=a(lL,"CUDA_VISIBLE_DEVICES"),lL.forEach(r),B9=a(Ty," to a list of the GPUs to be used."),Ty.forEach(r),cv=d(t),$i=s(t,"P",{});var iL=l($i);H9=a(iL,"For example, let\u2019s say you have 4 GPUs: 0, 1, 2 and 3. To run only on the physical GPUs 0 and 2, you can do:"),iL.forEach(r),pv=d(t),f(ps.$$.fragment,t),mv=d(t),Pt=s(t,"P",{});var fc=l(Pt);W9=a(fc,"So now pytorch will see only 2 GPUs, where your physical GPUs 0 and 2 are mapped to "),Of=s(fc,"CODE",{});var dL=l(Of);Y9=a(dL,"cuda:0"),dL.forEach(r),Z9=a(fc," and "),xf=s(fc,"CODE",{});var cL=l(xf);J9=a(cL,"cuda:1"),cL.forEach(r),K9=a(fc," correspondingly."),fc.forEach(r),hv=d(t),Ti=s(t,"P",{});var pL=l(Ti);Q9=a(pL,"You can even change their order:"),pL.forEach(r),fv=d(t),f(ms.$$.fragment,t),uv=d(t),At=s(t,"P",{});var uc=l(At);X9=a(uc,"Here your physical GPUs 0 and 2 are mapped to "),Cf=s(uc,"CODE",{});var mL=l(Cf);e7=a(mL,"cuda:1"),mL.forEach(r),t7=a(uc," and "),Sf=s(uc,"CODE",{});var hL=l(Sf);r7=a(hL,"cuda:0"),hL.forEach(r),o7=a(uc," correspondingly."),uc.forEach(r),_v=d(t),Ot=s(t,"P",{});var _c=l(Ot);a7=a(_c,"The above examples were all for "),Nf=s(_c,"CODE",{});var fL=l(Nf);n7=a(fL,"DistributedDataParallel"),fL.forEach(r),s7=a(_c," use pattern, but the same method works for "),hs=s(_c,"A",{href:!0,rel:!0});var uL=l(hs);If=s(uL,"CODE",{});var _L=l(If);l7=a(_L,"DataParallel"),_L.forEach(r),uL.forEach(r),i7=a(_c," as well:"),_c.forEach(r),gv=d(t),f(fs.$$.fragment,t),vv=d(t),Di=s(t,"P",{});var gL=l(Di);d7=a(gL,"To emulate an environment without GPUs simply set this environment variable to an empty value like so:"),gL.forEach(r),bv=d(t),f(us.$$.fragment,t),yv=d(t),ki=s(t,"P",{});var vL=l(ki);c7=a(vL,"As with any environment variable you can, of course, export those instead of adding these to the command line, as in:"),vL.forEach(r),wv=d(t),f(_s.$$.fragment,t),Ev=d(t),Pi=s(t,"P",{});var bL=l(Pi);p7=a(bL,"but this approach can be confusing since you may forget you set up the environment variable earlier and not understand why the wrong GPUs are used. Therefore, it\u2019s a common practice to set the environment variable just for a specific run on the same command line as it\u2019s shown in most examples of this section."),bL.forEach(r),$v=d(t),Ai=s(t,"P",{});var yL=l(Ai);Uf=s(yL,"STRONG",{});var wL=l(Uf);Lf=s(wL,"CODE",{});var EL=l(Lf);m7=a(EL,"CUDA_DEVICE_ORDER"),EL.forEach(r),wL.forEach(r),yL.forEach(r),Tv=d(t),No=s(t,"P",{});var Dy=l(No);h7=a(Dy,"There is an additional environment variable "),Ff=s(Dy,"CODE",{});var $L=l(Ff);f7=a($L,"CUDA_DEVICE_ORDER"),$L.forEach(r),u7=a(Dy," that controls how the physical devices are ordered. The two choices are:"),Dy.forEach(r),Dv=d(t),Oi=s(t,"OL",{});var TL=l(Oi);gs=s(TL,"LI",{});var ky=l(gs);_7=a(ky,"ordered by PCIe bus IDs (matches "),zf=s(ky,"CODE",{});var DL=l(zf);g7=a(DL,"nvidia-smi"),DL.forEach(r),v7=a(ky,"\u2019s order) - this is the default."),ky.forEach(r),TL.forEach(r),kv=d(t),f(vs.$$.fragment,t),Pv=d(t),bs=s(t,"OL",{start:!0});var kL=l(bs);Rf=s(kL,"LI",{});var PL=l(Rf);b7=a(PL,"ordered by GPU compute capabilities"),PL.forEach(r),kL.forEach(r),Av=d(t),f(ys.$$.fragment,t),Ov=d(t),xt=s(t,"P",{});var gc=l(xt);y7=a(gc,"Most of the time you don\u2019t need to care about this environment variable, but it\u2019s very helpful if you have a lopsided setup where you have an old and a new GPUs physically inserted in such a way so that the slow older card appears to be first. One way to fix that is to swap the cards. But if you can\u2019t swap the cards (e.g., if the cooling of the devices gets impacted) then setting "),qf=s(gc,"CODE",{});var AL=l(qf);w7=a(AL,"CUDA_DEVICE_ORDER=FASTEST_FIRST"),AL.forEach(r),E7=a(gc," will always put the newer faster card first. It\u2019ll be somewhat confusing though since "),Gf=s(gc,"CODE",{});var OL=l(Gf);$7=a(OL,"nvidia-smi"),OL.forEach(r),T7=a(gc," will still report them in the PCIe order."),gc.forEach(r),xv=d(t),xi=s(t,"P",{});var xL=l(xi);D7=a(xL,"The other solution to swapping the order is to use:"),xL.forEach(r),Cv=d(t),f(ws.$$.fragment,t),Sv=d(t),Ci=s(t,"P",{});var CL=l(Ci);k7=a(CL,"In this example we are working with just 2 GPUs, but of course the same would apply to as many GPUs as your computer has."),CL.forEach(r),Nv=d(t),Io=s(t,"P",{});var Py=l(Io);P7=a(Py,"Also if you do set this environment variable it\u2019s the best to set it in your "),jf=s(Py,"CODE",{});var SL=l(jf);A7=a(SL,"~/.bashrc"),SL.forEach(r),O7=a(Py," file or some other startup config file and forget about it."),Py.forEach(r),Iv=d(t),Tr=s(t,"H2",{class:!0});var Ay=l(Tr);Uo=s(Ay,"A",{id:!0,class:!0,href:!0});var NL=l(Uo);Mf=s(NL,"SPAN",{});var IL=l(Mf);f(Es.$$.fragment,IL),IL.forEach(r),NL.forEach(r),x7=d(Ay),Vf=s(Ay,"SPAN",{});var UL=l(Vf);C7=a(UL,"Trainer Integrations"),UL.forEach(r),Ay.forEach(r),Uv=d(t),Lo=s(t,"P",{});var Oy=l(Lo);S7=a(Oy,"The "),Si=s(Oy,"A",{href:!0});var LL=l(Si);N7=a(LL,"Trainer"),LL.forEach(r),I7=a(Oy,` has been extended to support libraries that may dramatically improve your training
time and fit much bigger models.`),Oy.forEach(r),Lv=d(t),pe=s(t,"P",{});var Wt=l(pe);U7=a(Wt,"Currently it supports third party solutions, "),$s=s(Wt,"A",{href:!0,rel:!0});var FL=l($s);L7=a(FL,"DeepSpeed"),FL.forEach(r),F7=a(Wt,", "),Ts=s(Wt,"A",{href:!0,rel:!0});var zL=l(Ts);z7=a(zL,"PyTorch FSDP"),zL.forEach(r),R7=a(Wt," and "),Ds=s(Wt,"A",{href:!0,rel:!0});var RL=l(Ds);q7=a(RL,"FairScale"),RL.forEach(r),G7=a(Wt,", which implement parts of the paper "),ks=s(Wt,"A",{href:!0,rel:!0});var qL=l(ks);j7=a(qL,`ZeRO: Memory Optimizations
Toward Training Trillion Parameter Models, by Samyam Rajbhandari, Jeff Rasley, Olatunji Ruwase, Yuxiong He`),qL.forEach(r),M7=a(Wt,"."),Wt.forEach(r),Fv=d(t),Fo=s(t,"P",{});var xy=l(Fo);V7=a(xy,"This provided support is new and experimental as of this writing. While the support for DeepSpeed and PyTorch FSDP is active and we welcome issues around it, we don\u2019t support the FairScale integration anymore since it has been integrated in PyTorch main (see the "),Ni=s(xy,"A",{href:!0});var GL=l(Ni);B7=a(GL,"PyTorch FSDP integration"),GL.forEach(r),H7=a(xy,")"),xy.forEach(r),zv=d(t),Ii=s(t,"A",{id:!0}),l(Ii).forEach(r),Rv=d(t),Dr=s(t,"H3",{class:!0});var Cy=l(Dr);zo=s(Cy,"A",{id:!0,class:!0,href:!0});var jL=l(zo);Bf=s(jL,"SPAN",{});var ML=l(Bf);f(Ps.$$.fragment,ML),ML.forEach(r),jL.forEach(r),W7=d(Cy),Hf=s(Cy,"SPAN",{});var VL=l(Hf);Y7=a(VL,"CUDA Extension Installation Notes"),VL.forEach(r),Cy.forEach(r),qv=d(t),Ui=s(t,"P",{});var BL=l(Ui);Z7=a(BL,"As of this writing, both FairScale and Deepspeed require compilation of CUDA C++ code, before they can be used."),BL.forEach(r),Gv=d(t),Ct=s(t,"P",{});var vc=l(Ct);J7=a(vc,"While all installation issues should be dealt with through the corresponding GitHub Issues of "),As=s(vc,"A",{href:!0,rel:!0});var HL=l(As);K7=a(HL,"FairScale"),HL.forEach(r),Q7=a(vc," and "),Os=s(vc,"A",{href:!0,rel:!0});var WL=l(Os);X7=a(WL,"Deepspeed"),WL.forEach(r),eD=a(vc,`, there are a few common issues that one may encounter while building
any PyTorch extension that needs to build CUDA extensions.`),vc.forEach(r),jv=d(t),Li=s(t,"P",{});var YL=l(Li);tD=a(YL,"Therefore, if you encounter a CUDA-related build issue while doing one of the following or both:"),YL.forEach(r),Mv=d(t),f(xs.$$.fragment,t),Vv=d(t),Fi=s(t,"P",{});var ZL=l(Fi);rD=a(ZL,"please, read the following notes first."),ZL.forEach(r),Bv=d(t),St=s(t,"P",{});var bc=l(St);oD=a(bc,"In these notes we give examples for what to do when "),Wf=s(bc,"CODE",{});var JL=l(Wf);aD=a(JL,"pytorch"),JL.forEach(r),nD=a(bc," has been built with CUDA "),Yf=s(bc,"CODE",{});var KL=l(Yf);sD=a(KL,"10.2"),KL.forEach(r),lD=a(bc,`. If your situation is
different remember to adjust the version number to the one you are after.`),bc.forEach(r),Hv=d(t),kr=s(t,"H4",{class:!0});var Sy=l(kr);Ro=s(Sy,"A",{id:!0,class:!0,href:!0});var QL=l(Ro);Zf=s(QL,"SPAN",{});var XL=l(Zf);f(Cs.$$.fragment,XL),XL.forEach(r),QL.forEach(r),iD=d(Sy),Jf=s(Sy,"SPAN",{});var eF=l(Jf);dD=a(eF,"Possible problem #1"),eF.forEach(r),Sy.forEach(r),Wv=d(t),zi=s(t,"P",{});var tF=l(zi);cD=a(tF,`While, Pytorch comes with its own CUDA toolkit, to build these two projects you must have an identical version of CUDA
installed system-wide.`),tF.forEach(r),Yv=d(t),Fe=s(t,"P",{});var ma=l(Fe);pD=a(ma,"For example, if you installed "),Kf=s(ma,"CODE",{});var rF=l(Kf);mD=a(rF,"pytorch"),rF.forEach(r),hD=a(ma," with "),Qf=s(ma,"CODE",{});var oF=l(Qf);fD=a(oF,"cudatoolkit==10.2"),oF.forEach(r),uD=a(ma,` in the Python environment, you also need to have
CUDA `),Xf=s(ma,"CODE",{});var aF=l(Xf);_D=a(aF,"10.2"),aF.forEach(r),gD=a(ma," installed system-wide."),ma.forEach(r),Zv=d(t),Nt=s(t,"P",{});var yc=l(Nt);vD=a(yc,"The exact location may vary from system to system, but "),eu=s(yc,"CODE",{});var nF=l(eu);bD=a(nF,"/usr/local/cuda-10.2"),nF.forEach(r),yD=a(yc,` is the most common location on many
Unix systems. When CUDA is correctly set up and added to the `),tu=s(yc,"CODE",{});var sF=l(tu);wD=a(sF,"PATH"),sF.forEach(r),ED=a(yc,` environment variable, one can find the
installation location by doing:`),yc.forEach(r),Jv=d(t),f(Ss.$$.fragment,t),Kv=d(t),qo=s(t,"P",{});var Ny=l(qo);$D=a(Ny,`If you don\u2019t have CUDA installed system-wide, install it first. You will find the instructions by using your favorite
search engine. For example, if you\u2019re on Ubuntu you may want to search for: `),Ns=s(Ny,"A",{href:!0,rel:!0});var lF=l(Ns);TD=a(lF,"ubuntu cuda 10.2 install"),lF.forEach(r),DD=a(Ny,"."),Ny.forEach(r),Qv=d(t),Pr=s(t,"H4",{class:!0});var Iy=l(Pr);Go=s(Iy,"A",{id:!0,class:!0,href:!0});var iF=l(Go);ru=s(iF,"SPAN",{});var dF=l(ru);f(Is.$$.fragment,dF),dF.forEach(r),iF.forEach(r),kD=d(Iy),ou=s(Iy,"SPAN",{});var cF=l(ou);PD=a(cF,"Possible problem #2"),cF.forEach(r),Iy.forEach(r),Xv=d(t),Ri=s(t,"P",{});var pF=l(Ri);AD=a(pF,`Another possible common problem is that you may have more than one CUDA toolkit installed system-wide. For example you
may have:`),pF.forEach(r),e1=d(t),f(Us.$$.fragment,t),t1=d(t),It=s(t,"P",{});var wc=l(It);OD=a(wc,"Now, in this situation you need to make sure that your "),au=s(wc,"CODE",{});var mF=l(au);xD=a(mF,"PATH"),mF.forEach(r),CD=a(wc," and "),nu=s(wc,"CODE",{});var hF=l(nu);SD=a(hF,"LD_LIBRARY_PATH"),hF.forEach(r),ND=a(wc,` environment variables contain
the correct paths to the desired CUDA version. Typically, package installers will set these to contain whatever the
last version was installed. If you encounter the problem, where the package build fails because it can\u2019t find the right
CUDA version despite you having it installed system-wide, it means that you need to adjust the 2 aforementioned
environment variables.`),wc.forEach(r),r1=d(t),qi=s(t,"P",{});var fF=l(qi);ID=a(fF,"First, you may look at their contents:"),fF.forEach(r),o1=d(t),f(Ls.$$.fragment,t),a1=d(t),Gi=s(t,"P",{});var uF=l(Gi);UD=a(uF,"so you get an idea of what is inside."),uF.forEach(r),n1=d(t),jo=s(t,"P",{});var Uy=l(jo);LD=a(Uy,"It\u2019s possible that "),su=s(Uy,"CODE",{});var _F=l(su);FD=a(_F,"LD_LIBRARY_PATH"),_F.forEach(r),zD=a(Uy," is empty."),Uy.forEach(r),s1=d(t),et=s(t,"P",{});var Dl=l(et);lu=s(Dl,"CODE",{});var gF=l(lu);RD=a(gF,"PATH"),gF.forEach(r),qD=a(Dl," lists the locations of where executables can be found and "),iu=s(Dl,"CODE",{});var vF=l(iu);GD=a(vF,"LD_LIBRARY_PATH"),vF.forEach(r),jD=a(Dl,` is for where shared libraries
are to looked for. In both cases, earlier entries have priority over the later ones. `),du=s(Dl,"CODE",{});var bF=l(du);MD=a(bF,":"),bF.forEach(r),VD=a(Dl,` is used to separate multiple
entries.`),Dl.forEach(r),l1=d(t),ji=s(t,"P",{});var yF=l(ji);BD=a(yF,`Now, to tell the build program where to find the specific CUDA toolkit, insert the desired paths to be listed first by
doing:`),yF.forEach(r),i1=d(t),f(Fs.$$.fragment,t),d1=d(t),Mi=s(t,"P",{});var wF=l(Mi);HD=a(wF,"Note that we aren\u2019t overwriting the existing values, but prepending instead."),wF.forEach(r),c1=d(t),ze=s(t,"P",{});var ha=l(ze);WD=a(ha,`Of course, adjust the version number, the full path if need be. Check that the directories you assign actually do
exist. `),cu=s(ha,"CODE",{});var EF=l(cu);YD=a(EF,"lib64"),EF.forEach(r),ZD=a(ha," sub-directory is where the various CUDA "),pu=s(ha,"CODE",{});var $F=l(pu);JD=a($F,".so"),$F.forEach(r),KD=a(ha," objects, like "),mu=s(ha,"CODE",{});var TF=l(mu);QD=a(TF,"libcudart.so"),TF.forEach(r),XD=a(ha,` reside, it\u2019s unlikely
that your system will have it named differently, but if it is adjust it to reflect your reality.`),ha.forEach(r),p1=d(t),Ar=s(t,"H4",{class:!0});var Ly=l(Ar);Mo=s(Ly,"A",{id:!0,class:!0,href:!0});var DF=l(Mo);hu=s(DF,"SPAN",{});var kF=l(hu);f(zs.$$.fragment,kF),kF.forEach(r),DF.forEach(r),ek=d(Ly),fu=s(Ly,"SPAN",{});var PF=l(fu);tk=a(PF,"Possible problem #3"),PF.forEach(r),Ly.forEach(r),m1=d(t),Ut=s(t,"P",{});var Ec=l(Ut);rk=a(Ec,"Some older CUDA versions may refuse to build with newer compilers. For example, you my have "),uu=s(Ec,"CODE",{});var AF=l(uu);ok=a(AF,"gcc-9"),AF.forEach(r),ak=a(Ec,` but it wants
`),_u=s(Ec,"CODE",{});var OF=l(_u);nk=a(OF,"gcc-7"),OF.forEach(r),sk=a(Ec,"."),Ec.forEach(r),h1=d(t),Vi=s(t,"P",{});var xF=l(Vi);lk=a(xF,"There are various ways to go about it."),xF.forEach(r),f1=d(t),Bi=s(t,"P",{});var CF=l(Bi);ik=a(CF,"If you can install the latest CUDA toolkit it typically should support the newer compiler."),CF.forEach(r),u1=d(t),Vo=s(t,"P",{});var Fy=l(Vo);dk=a(Fy,`Alternatively, you could install the lower version of the compiler in addition to the one you already have, or you may
already have it but it\u2019s not the default one, so the build system can\u2019t see it. If you have `),gu=s(Fy,"CODE",{});var SF=l(gu);ck=a(SF,"gcc-7"),SF.forEach(r),pk=a(Fy,` installed but the
build system complains it can\u2019t find it, the following might do the trick:`),Fy.forEach(r),_1=d(t),f(Rs.$$.fragment,t),g1=d(t),j=s(t,"P",{});var fe=l(j);mk=a(fe,"Here, we are making a symlink to "),vu=s(fe,"CODE",{});var NF=l(vu);hk=a(NF,"gcc-7"),NF.forEach(r),fk=a(fe," from "),bu=s(fe,"CODE",{});var IF=l(bu);uk=a(IF,"/usr/local/cuda-10.2/bin/gcc"),IF.forEach(r),_k=a(fe,` and since
`),yu=s(fe,"CODE",{});var UF=l(yu);gk=a(UF,"/usr/local/cuda-10.2/bin/"),UF.forEach(r),vk=a(fe," should be in the "),wu=s(fe,"CODE",{});var LF=l(wu);bk=a(LF,"PATH"),LF.forEach(r),yk=a(fe,` environment variable (see the previous problem\u2019s solution), it
should find `),Eu=s(fe,"CODE",{});var FF=l(Eu);wk=a(FF,"gcc-7"),FF.forEach(r),Ek=a(fe," (and "),$u=s(fe,"CODE",{});var zF=l($u);$k=a(zF,"g++7"),zF.forEach(r),Tk=a(fe,") and then the build will succeed."),fe.forEach(r),v1=d(t),Hi=s(t,"P",{});var RF=l(Hi);Dk=a(RF,"As always make sure to edit the paths in the example to match your situation."),RF.forEach(r),b1=d(t),Or=s(t,"H3",{class:!0});var zy=l(Or);Bo=s(zy,"A",{id:!0,class:!0,href:!0});var qF=l(Bo);Tu=s(qF,"SPAN",{});var GF=l(Tu);f(qs.$$.fragment,GF),GF.forEach(r),qF.forEach(r),kk=d(zy),Du=s(zy,"SPAN",{});var jF=l(Du);Pk=a(jF,"FairScale"),jF.forEach(r),zy.forEach(r),y1=d(t),f(Ho.$$.fragment,t),w1=d(t),Re=s(t,"P",{});var fa=l(Re);Ak=a(fa,"By integrating "),Gs=s(fa,"A",{href:!0,rel:!0});var MF=l(Gs);Ok=a(MF,"FairScale"),MF.forEach(r),xk=a(fa," the "),Wi=s(fa,"A",{href:!0});var VF=l(Wi);Ck=a(VF,"Trainer"),VF.forEach(r),Sk=a(fa,`
provides support for the following features from `),js=s(fa,"A",{href:!0,rel:!0});var BF=l(js);Nk=a(BF,"the ZeRO paper"),BF.forEach(r),Ik=a(fa,":"),fa.forEach(r),E1=d(t),qe=s(t,"OL",{});var ua=l(qe);ku=s(ua,"LI",{});var HF=l(ku);Uk=a(HF,"Optimizer State Sharding"),HF.forEach(r),Lk=d(ua),Pu=s(ua,"LI",{});var WF=l(Pu);Fk=a(WF,"Gradient Sharding"),WF.forEach(r),zk=d(ua),Au=s(ua,"LI",{});var YF=l(Au);Rk=a(YF,"Model Parameters Sharding (new and very experimental)"),YF.forEach(r),qk=d(ua),Ou=s(ua,"LI",{});var ZF=l(Ou);Gk=a(ZF,"CPU offload (new and very experimental)"),ZF.forEach(r),ua.forEach(r),$1=d(t),Yi=s(t,"P",{});var JF=l(Yi);jk=a(JF,"You will need at least two GPUs to use this feature."),JF.forEach(r),T1=d(t),Ms=s(t,"P",{});var mC=l(Ms);xu=s(mC,"STRONG",{});var KF=l(xu);Mk=a(KF,"Installation"),KF.forEach(r),Vk=a(mC,":"),mC.forEach(r),D1=d(t),Zi=s(t,"P",{});var QF=l(Zi);Bk=a(QF,"Install the library via pypi:"),QF.forEach(r),k1=d(t),f(Vs.$$.fragment,t),P1=d(t),Lt=s(t,"P",{});var $c=l(Lt);Hk=a($c,"or via "),Cu=s($c,"CODE",{});var XF=l(Cu);Wk=a(XF,"transformers"),XF.forEach(r),Yk=a($c,"\u2019 "),Su=s($c,"CODE",{});var ez=l(Su);Zk=a(ez,"extras"),ez.forEach(r),Jk=a($c,":"),$c.forEach(r),A1=d(t),f(Bs.$$.fragment,t),O1=d(t),Ft=s(t,"P",{});var Tc=l(Ft);Kk=a(Tc,"(available starting from "),Nu=s(Tc,"CODE",{});var tz=l(Nu);Qk=a(tz,"transformers==4.6.0"),tz.forEach(r),Xk=a(Tc,") or find more details on "),Hs=s(Tc,"A",{href:!0,rel:!0});var rz=l(Hs);eP=a(rz,"the FairScale\u2019s GitHub page"),rz.forEach(r),tP=a(Tc,"."),Tc.forEach(r),x1=d(t),Wo=s(t,"P",{});var Ry=l(Wo);rP=a(Ry,"If you\u2019re still struggling with the build, first make sure to read "),Ji=s(Ry,"A",{href:!0});var oz=l(Ji);oP=a(oz,"CUDA Extension Installation Notes"),oz.forEach(r),aP=a(Ry,"."),Ry.forEach(r),C1=d(t),Ki=s(t,"P",{});var az=l(Ki);nP=a(az,"If it\u2019s still not resolved the build issue, here are a few more ideas."),az.forEach(r),S1=d(t),Ws=s(t,"P",{});var hC=l(Ws);Iu=s(hC,"CODE",{});var nz=l(Iu);sP=a(nz,"fairscale"),nz.forEach(r),lP=a(hC,` seems to have an issue with the recently introduced by pip build isolation feature. If you have a problem
with it, you may want to try one of:`),hC.forEach(r),N1=d(t),f(Ys.$$.fragment,t),I1=d(t),Qi=s(t,"P",{});var sz=l(Qi);iP=a(sz,"or:"),sz.forEach(r),U1=d(t),f(Zs.$$.fragment,t),L1=d(t),Js=s(t,"P",{});var fC=l(Js);Uu=s(fC,"CODE",{});var lz=l(Uu);dP=a(lz,"fairscale"),lz.forEach(r),cP=a(fC," also has issues with building against pytorch-nightly, so if you use it you may have to try one of:"),fC.forEach(r),F1=d(t),f(Ks.$$.fragment,t),z1=d(t),Xi=s(t,"P",{});var iz=l(Xi);pP=a(iz,"or:"),iz.forEach(r),R1=d(t),f(Qs.$$.fragment,t),q1=d(t),ed=s(t,"P",{});var dz=l(ed);mP=a(dz,"Of course, adjust the urls to match the cuda version you use."),dz.forEach(r),G1=d(t),Yo=s(t,"P",{});var qy=l(Yo);hP=a(qy,`If after trying everything suggested you still encounter build issues, please, proceed with the GitHub Issue of
`),Xs=s(qy,"A",{href:!0,rel:!0});var cz=l(Xs);fP=a(cz,"FairScale"),cz.forEach(r),uP=a(qy,"."),qy.forEach(r),j1=d(t),el=s(t,"P",{});var uC=l(el);Lu=s(uC,"STRONG",{});var pz=l(Lu);_P=a(pz,"Usage"),pz.forEach(r),gP=a(uC,":"),uC.forEach(r),M1=d(t),zt=s(t,"P",{});var Dc=l(zt);vP=a(Dc,"To use the first version of Sharded data-parallelism, add "),Fu=s(Dc,"CODE",{});var mz=l(Fu);bP=a(mz,"--sharded_ddp simple"),mz.forEach(r),yP=a(Dc,` to the command line arguments, and
make sure you have added the distributed launcher `),zu=s(Dc,"CODE",{});var hz=l(zu);wP=a(hz,"-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),hz.forEach(r),EP=a(Dc," if you haven\u2019t been using it already."),Dc.forEach(r),V1=d(t),Zo=s(t,"P",{});var Gy=l(Zo);$P=a(Gy,"For example here is how you could use it for "),Ru=s(Gy,"CODE",{});var fz=l(Ru);TP=a(fz,"run_translation.py"),fz.forEach(r),DP=a(Gy," with 2 GPUs:"),Gy.forEach(r),B1=d(t),f(tl.$$.fragment,t),H1=d(t),td=s(t,"P",{});var uz=l(td);kP=a(uz,"Notes:"),uz.forEach(r),W1=d(t),Ge=s(t,"UL",{});var _a=l(Ge);qu=s(_a,"LI",{});var _z=l(qu);PP=a(_z,"This feature requires distributed training (so multiple GPUs)."),_z.forEach(r),AP=d(_a),Gu=s(_a,"LI",{});var gz=l(Gu);OP=a(gz,"It is not implemented for TPUs."),gz.forEach(r),xP=d(_a),rl=s(_a,"LI",{});var jy=l(rl);CP=a(jy,"It works with "),ju=s(jy,"CODE",{});var vz=l(ju);SP=a(vz,"--fp16"),vz.forEach(r),NP=a(jy," too, to make things even faster."),jy.forEach(r),IP=d(_a),ol=s(_a,"LI",{});var My=l(ol);UP=a(My,"One of the main benefits of enabling "),Mu=s(My,"CODE",{});var bz=l(Mu);LP=a(bz,"--sharded_ddp simple"),bz.forEach(r),FP=a(My,` is that it uses a lot less GPU memory, so you should be
able to use significantly larger batch sizes using the same hardware (e.g. 3x and even bigger) which should lead to
significantly shorter training time.`),My.forEach(r),_a.forEach(r),Y1=d(t),al=s(t,"OL",{start:!0});var yz=l(al);tt=s(yz,"LI",{});var ga=l(tt);zP=a(ga,"To use the second version of Sharded data-parallelism, add "),Vu=s(ga,"CODE",{});var wz=l(Vu);RP=a(wz,"--sharded_ddp zero_dp_2"),wz.forEach(r),qP=a(ga," or "),Bu=s(ga,"CODE",{});var Ez=l(Bu);GP=a(Ez,"--sharded_ddp zero_dp_3"),Ez.forEach(r),jP=a(ga," to the command line arguments, and make sure you have added the distributed launcher "),Hu=s(ga,"CODE",{});var $z=l(Hu);MP=a($z,"-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),$z.forEach(r),VP=a(ga," if you haven\u2019t been using it already."),ga.forEach(r),yz.forEach(r),Z1=d(t),Jo=s(t,"P",{});var Vy=l(Jo);BP=a(Vy,"For example here is how you could use it for "),Wu=s(Vy,"CODE",{});var Tz=l(Wu);HP=a(Tz,"run_translation.py"),Tz.forEach(r),WP=a(Vy," with 2 GPUs:"),Vy.forEach(r),J1=d(t),f(nl.$$.fragment,t),K1=d(t),xr=s(t,"P",{});var hg=l(xr);Yu=s(hg,"CODE",{});var Dz=l(Yu);YP=a(Dz,"zero_dp_2"),Dz.forEach(r),ZP=a(hg," is an optimized version of the simple wrapper, while "),Zu=s(hg,"CODE",{});var kz=l(Zu);JP=a(kz,"zero_dp_3"),kz.forEach(r),KP=a(hg,` fully shards model weights,
gradients and optimizer states.`),hg.forEach(r),Q1=d(t),Rt=s(t,"P",{});var kc=l(Rt);QP=a(kc,"Both are compatible with adding "),Ju=s(kc,"CODE",{});var Pz=l(Ju);XP=a(Pz,"cpu_offload"),Pz.forEach(r),eA=a(kc," to enable ZeRO-offload (activate it like this: "),Ku=s(kc,"CODE",{});var Az=l(Ku);tA=a(Az,'--sharded_ddp "zero_dp_2 cpu_offload"'),Az.forEach(r),rA=a(kc,")."),kc.forEach(r),X1=d(t),rd=s(t,"P",{});var Oz=l(rd);oA=a(Oz,"Notes:"),Oz.forEach(r),eb=d(t),me=s(t,"UL",{});var Yt=l(me);Qu=s(Yt,"LI",{});var xz=l(Qu);aA=a(xz,"This feature requires distributed training (so multiple GPUs)."),xz.forEach(r),nA=d(Yt),Xu=s(Yt,"LI",{});var Cz=l(Xu);sA=a(Cz,"It is not implemented for TPUs."),Cz.forEach(r),lA=d(Yt),sl=s(Yt,"LI",{});var By=l(sl);iA=a(By,"It works with "),e_=s(By,"CODE",{});var Sz=l(e_);dA=a(Sz,"--fp16"),Sz.forEach(r),cA=a(By," too, to make things even faster."),By.forEach(r),pA=d(Yt),Cr=s(Yt,"LI",{});var Pc=l(Cr);mA=a(Pc,"The "),t_=s(Pc,"CODE",{});var Nz=l(t_);hA=a(Nz,"cpu_offload"),Nz.forEach(r),fA=a(Pc," additional option requires "),r_=s(Pc,"CODE",{});var Iz=l(r_);uA=a(Iz,"--fp16"),Iz.forEach(r),_A=a(Pc,"."),Pc.forEach(r),gA=d(Yt),o_=s(Yt,"LI",{});var Uz=l(o_);vA=a(Uz,`This is an area of active development, so make sure you have a source install of fairscale to use this feature as
some bugs you encounter may have been fixed there already.`),Uz.forEach(r),Yt.forEach(r),tb=d(t),od=s(t,"P",{});var Lz=l(od);bA=a(Lz,"Known caveats:"),Lz.forEach(r),rb=d(t),Ko=s(t,"UL",{});var Hy=l(Ko);Sr=s(Hy,"LI",{});var Ac=l(Sr);yA=a(Ac,"This feature is incompatible with "),a_=s(Ac,"CODE",{});var Fz=l(a_);wA=a(Fz,"--predict_with_generate"),Fz.forEach(r),EA=a(Ac," in the "),n_=s(Ac,"EM",{});var zz=l(n_);$A=a(zz,"run_translation.py"),zz.forEach(r),TA=a(Ac," script."),Ac.forEach(r),DA=d(Hy),Te=s(Hy,"LI",{});var Zt=l(Te);kA=a(Zt,"Using "),s_=s(Zt,"CODE",{});var Rz=l(s_);PA=a(Rz,"--sharded_ddp zero_dp_3"),Rz.forEach(r),AA=a(Zt,` requires wrapping each layer of the model in the special container
`),l_=s(Zt,"CODE",{});var qz=l(l_);OA=a(qz,"FullyShardedDataParallelism"),qz.forEach(r),xA=a(Zt," of fairscale. It should be used with the option "),i_=s(Zt,"CODE",{});var Gz=l(i_);CA=a(Gz,"auto_wrap"),Gz.forEach(r),SA=a(Zt,` if you are not
doing this yourself: `),d_=s(Zt,"CODE",{});var jz=l(d_);NA=a(jz,'--sharded_ddp "zero_dp_3 auto_wrap"'),jz.forEach(r),IA=a(Zt,"."),Zt.forEach(r),Hy.forEach(r),ob=d(t),Nr=s(t,"H3",{class:!0});var Wy=l(Nr);Qo=s(Wy,"A",{id:!0,class:!0,href:!0});var Mz=l(Qo);c_=s(Mz,"SPAN",{});var Vz=l(c_);f(ll.$$.fragment,Vz),Vz.forEach(r),Mz.forEach(r),UA=d(Wy),p_=s(Wy,"SPAN",{});var Bz=l(p_);LA=a(Bz,"PyTorch Fully Sharded Data parallel"),Bz.forEach(r),Wy.forEach(r),ab=d(t),Xo=s(t,"P",{});var Yy=l(Xo);FA=a(Yy,`To accelerate training huge models on larger batch sizes, we can use a fully sharded data parallel model.
This type of data parallel paradigm enables fitting more data and larger models by sharding the optimizer states, gradients and parameters.
To read more about it and the benefits, check out the `),il=s(Yy,"A",{href:!0,rel:!0});var Hz=l(il);zA=a(Hz,"Fully Sharded Data Parallel blog"),Hz.forEach(r),RA=a(Yy,`.
We have integrated the latest PyTorch\u2019s Fully Sharded Data Parallel (FSDP) training feature.
All you need to do is enable it through the config.`),Yy.forEach(r),nb=d(t),dl=s(t,"P",{});var _C=l(dl);m_=s(_C,"STRONG",{});var Wz=l(m_);qA=a(Wz,"Required PyTorch version for FSDP support"),Wz.forEach(r),GA=a(_C,`: PyTorch Nightly (or 1.12.0 if you read this after it has been released)
as the model saving with FSDP activated is only available with recent fixes.`),_C.forEach(r),sb=d(t),cl=s(t,"P",{});var gC=l(cl);h_=s(gC,"STRONG",{});var Yz=l(h_);jA=a(Yz,"Usage"),Yz.forEach(r),MA=a(gC,":"),gC.forEach(r),lb=d(t),Q=s(t,"UL",{});var He=l(Q);f_=s(He,"LI",{});var Zz=l(f_);pl=s(Zz,"P",{});var Zy=l(pl);VA=a(Zy,`Make sure you have added the distributed launcher
`),u_=s(Zy,"CODE",{});var Jz=l(u_);BA=a(Jz,"-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),Jz.forEach(r),HA=a(Zy," if you haven\u2019t been using it already."),Zy.forEach(r),Zz.forEach(r),WA=d(He),ml=s(He,"LI",{});var Jy=l(ml);ad=s(Jy,"P",{});var vC=l(ad);__=s(vC,"STRONG",{});var Kz=l(__);YA=a(Kz,"Sharding Strategy"),Kz.forEach(r),ZA=a(vC,":"),vC.forEach(r),JA=d(Jy),Ir=s(Jy,"UL",{});var Oc=l(Ir);hl=s(Oc,"LI",{});var Ky=l(hl);KA=a(Ky,`FULL_SHARD : Shards optimizer states + gradients + model parameters across data parallel workers/GPUs.
For this, add `),g_=s(Ky,"CODE",{});var Qz=l(g_);QA=a(Qz,"--fsdp full_shard"),Qz.forEach(r),XA=a(Ky," to the command line arguments."),Ky.forEach(r),eO=d(Oc),fl=s(Oc,"LI",{});var Qy=l(fl);tO=a(Qy,`SHARD_GRAD_OP : Shards optimizer states + gradients across data parallel workers/GPUs.
For this, add `),v_=s(Qy,"CODE",{});var Xz=l(v_);rO=a(Xz,"--fsdp shard_grad_op"),Xz.forEach(r),oO=a(Qy," to the command line arguments."),Qy.forEach(r),aO=d(Oc),ul=s(Oc,"LI",{});var Xy=l(ul);nO=a(Xy,"NO_SHARD : No sharding. For this, add "),b_=s(Xy,"CODE",{});var eR=l(b_);sO=a(eR,"--fsdp no_shard"),eR.forEach(r),lO=a(Xy," to the command line arguments."),Xy.forEach(r),Oc.forEach(r),Jy.forEach(r),iO=d(He),y_=s(He,"LI",{});var tR=l(y_);Ur=s(tR,"P",{});var xc=l(Ur);dO=a(xc,`To offload the parameters and gradients to the CPU,
add `),w_=s(xc,"CODE",{});var rR=l(w_);cO=a(rR,'--fsdp "full_shard offload"'),rR.forEach(r),pO=a(xc," or "),E_=s(xc,"CODE",{});var oR=l(E_);mO=a(oR,'--fsdp "shard_grad_op offload"'),oR.forEach(r),hO=a(xc," to the command line arguments."),xc.forEach(r),tR.forEach(r),fO=d(He),$_=s(He,"LI",{});var aR=l($_);rt=s(aR,"P",{});var va=l(rt);uO=a(va,"To automatically recursively wrap layers with FSDP using "),T_=s(va,"CODE",{});var nR=l(T_);_O=a(nR,"default_auto_wrap_policy"),nR.forEach(r),gO=a(va,`,
add `),D_=s(va,"CODE",{});var sR=l(D_);vO=a(sR,'--fsdp "full_shard auto_wrap"'),sR.forEach(r),bO=a(va," or "),k_=s(va,"CODE",{});var lR=l(k_);yO=a(lR,'--fsdp "shard_grad_op auto_wrap"'),lR.forEach(r),wO=a(va," to the command line arguments."),va.forEach(r),aR.forEach(r),EO=d(He),P_=s(He,"LI",{});var iR=l(P_);Lr=s(iR,"P",{});var Cc=l(Lr);$O=a(Cc,`To enable both CPU offloading and auto wrapping,
add `),A_=s(Cc,"CODE",{});var dR=l(A_);TO=a(dR,'--fsdp "full_shard offload auto_wrap"'),dR.forEach(r),DO=a(Cc," or "),O_=s(Cc,"CODE",{});var cR=l(O_);kO=a(cR,'--fsdp "shard_grad_op offload auto_wrap"'),cR.forEach(r),PO=a(Cc," to the command line arguments."),Cc.forEach(r),iR.forEach(r),AO=d(He),_l=s(He,"LI",{});var e2=l(_l);x_=s(e2,"P",{});var pR=l(x_);OO=a(pR,"If auto wrapping is enabled, you can either use transformer based auto wrap policy or size based auto wrap policy."),pR.forEach(r),xO=d(e2),gl=s(e2,"UL",{});var t2=l(gl);De=s(t2,"LI",{});var Jt=l(De);CO=a(Jt,"For transformer based auto wrap policy, please add "),C_=s(Jt,"CODE",{});var mR=l(C_);SO=a(mR,"--fsdp_transformer_layer_cls_to_wrap <value>"),mR.forEach(r),NO=a(Jt,` to command line arguments.
This specifies the transformer layer class name (case-sensitive) to wrap ,e.g, `),S_=s(Jt,"CODE",{});var hR=l(S_);IO=a(hR,"BertLayer"),hR.forEach(r),UO=a(Jt,", "),N_=s(Jt,"CODE",{});var fR=l(N_);LO=a(fR,"GPTJBlock"),fR.forEach(r),FO=a(Jt,", "),I_=s(Jt,"CODE",{});var uR=l(I_);zO=a(uR,"T5Block"),uR.forEach(r),RO=a(Jt,` \u2026
This is important because submodules that share weights (e.g., embedding layer) should not end up in different FSDP wrapped units.
Using this policy, wrapping happens for each block containing Multi-Head Attention followed by couple of MLP layers.
Remaining layers including the shared embeddings are conviniently wrapped in same outermost FSDP unit.
Therefore, use this for transformer based models.`),Jt.forEach(r),qO=d(t2),vl=s(t2,"LI",{});var r2=l(vl);GO=a(r2,"For size based auto wrap policy, please add "),U_=s(r2,"CODE",{});var _R=l(U_);jO=a(_R,"--fsdp_min_num_params <number>"),_R.forEach(r),MO=a(r2,` to command line arguments.
It specifies FSDP\u2019s minimum number of parameters for auto wrapping.`),r2.forEach(r),t2.forEach(r),e2.forEach(r),He.forEach(r),ib=d(t),nd=s(t,"P",{});var gR=l(nd);L_=s(gR,"STRONG",{});var vR=l(L_);VO=a(vR,"Few caveats to be aware of"),vR.forEach(r),gR.forEach(r),db=d(t),ea=s(t,"UL",{});var o2=l(ea);bl=s(o2,"LI",{});var a2=l(bl);BO=a(a2,`Mixed precision is currently not supported with FSDP as we wait for PyTorch to fix support for it.
More details in this `),yl=s(a2,"A",{href:!0,rel:!0});var bR=l(yl);HO=a(bR,"issues"),bR.forEach(r),WO=a(a2,"."),a2.forEach(r),YO=d(o2),Fr=s(o2,"LI",{});var Sc=l(Fr);ZO=a(Sc,`FSDP currently doesn\u2019t support multiple parameter groups.
More details mentioned in this `),wl=s(Sc,"A",{href:!0,rel:!0});var yR=l(wl);JO=a(yR,"issue"),yR.forEach(r),KO=a(Sc,`
(`),F_=s(Sc,"CODE",{});var wR=l(F_);QO=a(wR,"The original model parameters' .grads are not set, meaning that they cannot be optimized separately (which is why we cannot support multiple parameter groups)"),wR.forEach(r),XO=a(Sc,")."),Sc.forEach(r),o2.forEach(r),cb=d(t),sd=s(t,"P",{});var ER=l(sd);ex=a(ER,"Sections that were moved:"),ER.forEach(r),pb=d(t),w=s(t,"P",{});var E=l(w);tx=a(E,"[ "),ld=s(E,"A",{href:!0});var $R=l(ld);rx=a($R,"DeepSpeed"),$R.forEach(r),z_=s(E,"A",{id:!0}),l(z_).forEach(r),ox=a(E,`
| `),id=s(E,"A",{href:!0});var TR=l(id);ax=a(TR,"Installation"),TR.forEach(r),R_=s(E,"A",{id:!0}),l(R_).forEach(r),nx=a(E,`
| `),dd=s(E,"A",{href:!0});var DR=l(dd);sx=a(DR,"Deployment with multiple GPUs"),DR.forEach(r),q_=s(E,"A",{id:!0}),l(q_).forEach(r),lx=a(E,`
| `),cd=s(E,"A",{href:!0});var kR=l(cd);ix=a(kR,"Deployment with one GPU"),kR.forEach(r),G_=s(E,"A",{id:!0}),l(G_).forEach(r),dx=a(E,`
| `),pd=s(E,"A",{href:!0});var PR=l(pd);cx=a(PR,"Deployment in Notebooks"),PR.forEach(r),j_=s(E,"A",{id:!0}),l(j_).forEach(r),px=a(E,`
| `),md=s(E,"A",{href:!0});var AR=l(md);mx=a(AR,"Configuration"),AR.forEach(r),M_=s(E,"A",{id:!0}),l(M_).forEach(r),hx=a(E,`
| `),hd=s(E,"A",{href:!0});var OR=l(hd);fx=a(OR,"Passing Configuration"),OR.forEach(r),V_=s(E,"A",{id:!0}),l(V_).forEach(r),ux=a(E,`
| `),fd=s(E,"A",{href:!0});var xR=l(fd);_x=a(xR,"Shared Configuration"),xR.forEach(r),B_=s(E,"A",{id:!0}),l(B_).forEach(r),gx=a(E,`
| `),ud=s(E,"A",{href:!0});var CR=l(ud);vx=a(CR,"ZeRO"),CR.forEach(r),H_=s(E,"A",{id:!0}),l(H_).forEach(r),bx=a(E,`
| `),_d=s(E,"A",{href:!0});var SR=l(_d);yx=a(SR,"ZeRO-2 Config"),SR.forEach(r),W_=s(E,"A",{id:!0}),l(W_).forEach(r),wx=a(E,`
| `),gd=s(E,"A",{href:!0});var NR=l(gd);Ex=a(NR,"ZeRO-3 Config"),NR.forEach(r),Y_=s(E,"A",{id:!0}),l(Y_).forEach(r),$x=a(E,`
| `),vd=s(E,"A",{href:!0});var IR=l(vd);Tx=a(IR,"NVMe Support"),IR.forEach(r),Z_=s(E,"A",{id:!0}),l(Z_).forEach(r),Dx=a(E,`
| `),bd=s(E,"A",{href:!0});var UR=l(bd);kx=a(UR,"ZeRO-2 vs ZeRO-3 Performance"),UR.forEach(r),J_=s(E,"A",{id:!0}),l(J_).forEach(r),Px=a(E,`
| `),yd=s(E,"A",{href:!0});var LR=l(yd);Ax=a(LR,"ZeRO-2 Example"),LR.forEach(r),K_=s(E,"A",{id:!0}),l(K_).forEach(r),Ox=a(E,`
| `),wd=s(E,"A",{href:!0});var FR=l(wd);xx=a(FR,"ZeRO-3 Example"),FR.forEach(r),Q_=s(E,"A",{id:!0}),l(Q_).forEach(r),Cx=a(E,`
| `),Ed=s(E,"A",{href:!0});var zR=l(Ed);Sx=a(zR,"Optimizer"),zR.forEach(r),X_=s(E,"A",{id:!0}),l(X_).forEach(r),Nx=a(E,`
| `),$d=s(E,"A",{href:!0});var RR=l($d);Ix=a(RR,"Scheduler"),RR.forEach(r),eg=s(E,"A",{id:!0}),l(eg).forEach(r),Ux=a(E,`
| `),Td=s(E,"A",{href:!0});var qR=l(Td);Lx=a(qR,"fp32 Precision"),qR.forEach(r),tg=s(E,"A",{id:!0}),l(tg).forEach(r),Fx=a(E,`
| `),Dd=s(E,"A",{href:!0});var GR=l(Dd);zx=a(GR,"Automatic Mixed Precision"),GR.forEach(r),rg=s(E,"A",{id:!0}),l(rg).forEach(r),Rx=a(E,`
| `),kd=s(E,"A",{href:!0});var jR=l(kd);qx=a(jR,"Batch Size"),jR.forEach(r),og=s(E,"A",{id:!0}),l(og).forEach(r),Gx=a(E,`
| `),Pd=s(E,"A",{href:!0});var MR=l(Pd);jx=a(MR,"Gradient Accumulation"),MR.forEach(r),ag=s(E,"A",{id:!0}),l(ag).forEach(r),Mx=a(E,`
| `),Ad=s(E,"A",{href:!0});var VR=l(Ad);Vx=a(VR,"Gradient Clipping"),VR.forEach(r),ng=s(E,"A",{id:!0}),l(ng).forEach(r),Bx=a(E,`
| `),Od=s(E,"A",{href:!0});var BR=l(Od);Hx=a(BR,"Getting The Model Weights Out"),BR.forEach(r),sg=s(E,"A",{id:!0}),l(sg).forEach(r),Wx=a(E,`
]`),E.forEach(r),this.h()},h(){m($,"name","hf:doc:metadata"),m($,"content",JSON.stringify(sq)),m(k,"id","trainer"),m(k,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(k,"href","#trainer"),m(D,"class","relative group"),m(se,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer"),m(V,"href","https://github.com/huggingface/transformers/tree/main/examples"),m(V,"rel","nofollow"),m(re,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer"),m(ge,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.TrainingArguments"),m(ve,"href","https://github.com/NVIDIA/apex"),m(ve,"rel","nofollow"),m(be,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer"),m(Gl,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer"),m(jl,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer"),m(Ml,"href","callback"),m(Br,"id","transformers.Trainer"),m(Br,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Br,"href","#transformers.Trainer"),m(Qt,"class","relative group"),m(Vl,"href","/docs/transformers/pr_18595/en/main_classes/model#transformers.PreTrainedModel"),m(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Hl,"href","/docs/transformers/pr_18595/en/main_classes/model#transformers.PreTrainedModel"),m(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Yl,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer"),m(nn,"href","https://github.com/pytorch/pytorch/issues/16266"),m(nn,"rel","nofollow"),m(Zl,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer"),m(Jl,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer"),m(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Kl,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer.log_metrics"),m(Se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(b,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(mo,"id","transformers.Seq2SeqTrainer"),m(mo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(mo,"href","#transformers.Seq2SeqTrainer"),m(dr,"class","relative group"),m(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(fo,"id","transformers.TrainingArguments"),m(fo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(fo,"href","#transformers.TrainingArguments"),m(fr,"class","relative group"),m(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(bo,"id","transformers.Seq2SeqTrainingArguments"),m(bo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(bo,"href","#transformers.Seq2SeqTrainingArguments"),m(vr,"class","relative group"),m(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(yo,"id","checkpoints"),m(yo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(yo,"href","#checkpoints"),m(yr,"class","relative group"),m(Ql,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer"),m(Xl,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.TrainingArguments"),m(ei,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer.train"),m(oi,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.TrainingArguments"),m(Do,"id","logging"),m(Do,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Do,"href","#logging"),m(wr,"class","relative group"),m(ni,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer"),m(si,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.TrainingArguments"),m(di,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.TrainingArguments"),m(ci,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer"),m(pi,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer"),m(Ao,"id","randomness"),m(Ao,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Ao,"href","#randomness"),m(Er,"class","relative group"),m(gi,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer"),m(os,"href","https://pytorch.org/docs/stable/notes/randomness"),m(os,"rel","nofollow"),m(Oo,"id","specific-gpus-selection"),m(Oo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Oo,"href","#specific-gpus-selection"),m($r,"class","relative group"),m(ns,"href","https://pytorch.org/docs/stable/generated/torch.nn.parallel.DistributedDataParallel.html"),m(ns,"rel","nofollow"),m(ls,"href","https://github.com/huggingface/accelerate"),m(ls,"rel","nofollow"),m(is,"href","https://github.com/microsoft/DeepSpeed"),m(is,"rel","nofollow"),m(bi,"href","Deepspeed"),m(hs,"href","https://pytorch.org/docs/stable/generated/torch.nn.DataParallel.html"),m(hs,"rel","nofollow"),m(bs,"start","2"),m(Uo,"id","trainer-integrations"),m(Uo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Uo,"href","#trainer-integrations"),m(Tr,"class","relative group"),m(Si,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer"),m($s,"href","https://github.com/microsoft/DeepSpeed"),m($s,"rel","nofollow"),m(Ts,"href","https://pytorch.org/docs/stable/fsdp.html"),m(Ts,"rel","nofollow"),m(Ds,"href","https://github.com/facebookresearch/fairscale/"),m(Ds,"rel","nofollow"),m(ks,"href","https://arxiv.org/abs/1910.02054"),m(ks,"rel","nofollow"),m(Ni,"href","#pytorch-fully-sharded-data-parallel"),m(Ii,"id","zero-install-notes"),m(zo,"id","cuda-extension-installation-notes"),m(zo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(zo,"href","#cuda-extension-installation-notes"),m(Dr,"class","relative group"),m(As,"href","https://github.com/facebookresearch/fairscale/issues"),m(As,"rel","nofollow"),m(Os,"href","https://github.com/microsoft/DeepSpeed/issues"),m(Os,"rel","nofollow"),m(Ro,"id","possible-problem-1"),m(Ro,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Ro,"href","#possible-problem-1"),m(kr,"class","relative group"),m(Ns,"href","https://www.google.com/search?q=ubuntu+cuda+10.2+install"),m(Ns,"rel","nofollow"),m(Go,"id","possible-problem-2"),m(Go,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Go,"href","#possible-problem-2"),m(Pr,"class","relative group"),m(Mo,"id","possible-problem-3"),m(Mo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Mo,"href","#possible-problem-3"),m(Ar,"class","relative group"),m(Bo,"id","fairscale"),m(Bo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Bo,"href","#fairscale"),m(Or,"class","relative group"),m(Gs,"href","https://github.com/facebookresearch/fairscale/"),m(Gs,"rel","nofollow"),m(Wi,"href","/docs/transformers/pr_18595/en/main_classes/trainer#transformers.Trainer"),m(js,"href","https://arxiv.org/abs/1910.02054"),m(js,"rel","nofollow"),m(Hs,"href","https://github.com/facebookresearch/fairscale/#installation"),m(Hs,"rel","nofollow"),m(Ji,"href","#zero-install-notes"),m(Xs,"href","https://github.com/facebookresearch/fairscale/issues"),m(Xs,"rel","nofollow"),m(al,"start","3"),m(Qo,"id","pytorch-fully-sharded-data-parallel"),m(Qo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Qo,"href","#pytorch-fully-sharded-data-parallel"),m(Nr,"class","relative group"),m(il,"href","https://pytorch.org/blog/introducing-pytorch-fully-sharded-data-parallel-api/"),m(il,"rel","nofollow"),m(yl,"href","https://github.com/pytorch/pytorch/issues/75676"),m(yl,"rel","nofollow"),m(wl,"href","https://github.com/pytorch/pytorch/issues/76501"),m(wl,"rel","nofollow"),m(ld,"href","./deepspeed#deepspeed-trainer-integration"),m(z_,"id","deepspeed"),m(id,"href","./deepspeed#deepspeed-installation"),m(R_,"id","installation"),m(dd,"href","./deepspeed#deepspeed-multi-gpu"),m(q_,"id","deployment-with-multiple-gpus"),m(cd,"href","./deepspeed#deepspeed-one-gpu"),m(G_,"id","deployment-with-one-gpu"),m(pd,"href","./deepspeed#deepspeed-notebook"),m(j_,"id","deployment-in-notebooks"),m(md,"href","./deepspeed#deepspeed-config"),m(M_,"id","configuration"),m(hd,"href","./deepspeed#deepspeed-config-passing"),m(V_,"id","passing-configuration"),m(fd,"href","./deepspeed#deepspeed-config-shared"),m(B_,"id","shared-configuration"),m(ud,"href","./deepspeed#deepspeed-zero"),m(H_,"id","zero"),m(_d,"href","./deepspeed#deepspeed-zero2-config"),m(W_,"id","zero-2-config"),m(gd,"href","./deepspeed#deepspeed-zero3-config"),m(Y_,"id","zero-3-config"),m(vd,"href","./deepspeed#deepspeed-nvme"),m(Z_,"id","nvme-support"),m(bd,"href","./deepspeed#deepspeed-zero2-zero3-performance"),m(J_,"id","zero-2-vs-zero-3-performance"),m(yd,"href","./deepspeed#deepspeed-zero2-example"),m(K_,"id","zero-2-example"),m(wd,"href","./deepspeed#deepspeed-zero3-example"),m(Q_,"id","zero-3-example"),m(Ed,"href","./deepspeed#deepspeed-optimizer"),m(X_,"id","optimizer"),m($d,"href","./deepspeed#deepspeed-scheduler"),m(eg,"id","scheduler"),m(Td,"href","./deepspeed#deepspeed-fp32"),m(tg,"id","fp32-precision"),m(Dd,"href","./deepspeed#deepspeed-amp"),m(rg,"id","automatic-mixed-precision"),m(kd,"href","./deepspeed#deepspeed-bs"),m(og,"id","batch-size"),m(Pd,"href","./deepspeed#deepspeed-grad-acc"),m(ag,"id","gradient-accumulation"),m(Ad,"href","./deepspeed#deepspeed-grad-clip"),m(ng,"id","gradient-clipping"),m(Od,"href","./deepspeed#deepspeed-weight-extraction"),m(sg,"id","getting-the-model-weights-out")},m(t,c){e(document.head,$),p(t,S,c),p(t,D,c),e(D,k),e(k,q),u(A,q,null),e(D,I),e(D,M),e(M,ue),p(t,ee,c),p(t,G,c),e(G,ne),e(G,se),e(se,te),e(G,le),e(G,V),e(V,We),e(G,_e),p(t,F,c),p(t,N,c),e(N,ot),e(N,re),e(re,at),e(N,nt),e(N,ge),e(ge,ba),e(N,ya),p(t,Ye,c),p(t,Pe,c),e(Pe,wa),e(Pe,ve),e(ve,Ea),e(Pe,$a),p(t,W,c),p(t,B,c),e(B,kl),e(B,be),e(be,Gr),e(B,Pl),p(t,Kt,c),p(t,x,c),e(x,H),e(H,jr),e(jr,Al),e(H,Ol),e(x,xl),e(x,Cl),e(Cl,Nc),e(Nc,n2),e(Cl,s2),e(x,l2),e(x,Sl),e(Sl,Ic),e(Ic,i2),e(Sl,d2),e(x,c2),e(x,Nl),e(Nl,Uc),e(Uc,p2),e(Nl,m2),e(x,h2),e(x,st),e(st,Lc),e(Lc,f2),e(st,u2),e(st,Fc),e(Fc,_2),e(st,g2),e(st,zc),e(zc,v2),e(st,b2),e(x,y2),e(x,Il),e(Il,Rc),e(Rc,w2),e(Il,E2),e(x,$2),e(x,Ul),e(Ul,qc),e(qc,T2),e(Ul,D2),e(x,k2),e(x,Ll),e(Ll,Gc),e(Gc,P2),e(Ll,A2),e(x,O2),e(x,Fl),e(Fl,jc),e(jc,x2),e(Fl,C2),e(x,S2),e(x,zl),e(zl,Mc),e(Mc,N2),e(zl,I2),e(x,U2),e(x,Rl),e(Rl,Vc),e(Vc,L2),e(Rl,F2),e(x,z2),e(x,ql),e(ql,Bc),e(Bc,R2),e(ql,q2),p(t,ug,c),u(Mr,t,c),p(t,_g,c),p(t,Vr,c),e(Vr,G2),e(Vr,Gl),e(Gl,j2),e(Vr,M2),p(t,gg,c),u(Ta,t,c),p(t,vg,c),p(t,lt,c),e(lt,V2),e(lt,jl),e(jl,B2),e(lt,H2),e(lt,Ml),e(Ml,W2),e(lt,Y2),p(t,bg,c),p(t,Qt,c),e(Qt,Br),e(Br,Hc),u(Da,Hc,null),e(Qt,Z2),e(Qt,Wc),e(Wc,J2),p(t,yg,c),p(t,b,c),u(ka,b,null),e(b,K2),e(b,Yc),e(Yc,Q2),e(b,X2),e(b,Zc),e(Zc,ew),e(b,tw),e(b,ye),e(ye,Hr),e(Hr,Jc),e(Jc,rw),e(Hr,ow),e(Hr,Vl),e(Vl,aw),e(Hr,nw),e(ye,sw),e(ye,Y),e(Y,Kc),e(Kc,lw),e(Y,iw),e(Y,Qc),e(Qc,dw),e(Y,cw),e(Y,Xc),e(Xc,pw),e(Y,mw),e(Y,ep),e(ep,hw),e(Y,fw),e(Y,tp),e(tp,uw),e(Y,_w),e(Y,rp),e(rp,gw),e(Y,vw),e(ye,bw),e(ye,Bl),e(Bl,op),e(op,yw),e(Bl,ww),e(ye,Ew),e(ye,Ae),e(Ae,ap),e(ap,$w),e(Ae,Tw),e(Ae,np),e(np,Dw),e(Ae,kw),e(Ae,sp),e(sp,Pw),e(Ae,Aw),e(Ae,lp),e(lp,Ow),e(Ae,xw),e(ye,Cw),e(ye,Oe),e(Oe,ip),e(ip,Sw),e(Oe,Nw),e(Oe,dp),e(dp,Iw),e(Oe,Uw),e(Oe,cp),e(cp,Lw),e(Oe,Fw),e(Oe,pp),e(pp,zw),e(Oe,Rw),e(b,qw),e(b,Wr),u(Pa,Wr,null),e(Wr,Gw),e(Wr,Aa),e(Aa,jw),e(Aa,mp),e(mp,Mw),e(Aa,Vw),e(b,Bw),e(b,Yr),u(Oa,Yr,null),e(Yr,Hw),e(Yr,xa),e(xa,Ww),e(xa,hp),e(hp,Yw),e(xa,Zw),e(b,Jw),e(b,it),u(Ca,it,null),e(it,Kw),e(it,fp),e(fp,Qw),e(it,Xw),e(it,up),e(up,eE),e(b,tE),e(b,Zr),u(Sa,Zr,null),e(Zr,rE),e(Zr,_p),e(_p,oE),e(b,aE),e(b,dt),u(Na,dt,null),e(dt,nE),e(dt,gp),e(gp,sE),e(dt,lE),e(dt,Ia),e(Ia,iE),e(Ia,vp),e(vp,dE),e(Ia,cE),e(b,pE),e(b,ct),u(Ua,ct,null),e(ct,mE),e(ct,bp),e(bp,hE),e(ct,fE),e(ct,Ze),e(Ze,uE),e(Ze,yp),e(yp,_E),e(Ze,gE),e(Ze,wp),e(wp,vE),e(Ze,bE),e(Ze,Ep),e(Ep,yE),e(Ze,wE),e(b,EE),e(b,Jr),u(La,Jr,null),e(Jr,$E),e(Jr,$p),e($p,TE),e(b,DE),e(b,xe),u(Fa,xe,null),e(xe,kE),e(xe,Tp),e(Tp,PE),e(xe,AE),e(xe,za),e(za,OE),e(za,Dp),e(Dp,xE),e(za,CE),e(xe,SE),e(xe,kp),e(kp,NE),e(b,IE),e(b,pt),u(Ra,pt,null),e(pt,UE),e(pt,Xt),e(Xt,LE),e(Xt,Pp),e(Pp,FE),e(Xt,zE),e(Xt,Ap),e(Ap,RE),e(Xt,qE),e(pt,GE),e(pt,Op),e(Op,jE),e(b,ME),e(b,Kr),u(qa,Kr,null),e(Kr,VE),e(Kr,Ga),e(Ga,BE),e(Ga,Hl),e(Hl,HE),e(Ga,WE),e(b,YE),e(b,mt),u(ja,mt,null),e(mt,ZE),e(mt,Ma),e(Ma,JE),e(Ma,xp),e(xp,KE),e(Ma,QE),e(mt,XE),e(mt,Cp),e(Cp,e0),e(b,t0),e(b,Qr),u(Va,Qr,null),e(Qr,r0),e(Qr,Sp),e(Sp,o0),e(b,a0),e(b,ht),u(Ba,ht,null),e(ht,n0),e(ht,Ha),e(Ha,s0),e(Ha,Np),e(Np,l0),e(Ha,i0),e(ht,d0),e(ht,Ip),e(Ip,c0),e(b,p0),e(b,Ce),u(Wa,Ce,null),e(Ce,m0),e(Ce,Ya),e(Ya,h0),e(Ya,Up),e(Up,f0),e(Ya,u0),e(Ce,_0),e(Ce,er),e(er,g0),e(er,Lp),e(Lp,v0),e(er,b0),e(er,Fp),e(Fp,y0),e(er,w0),e(Ce,E0),e(Ce,zp),e(zp,$0),e(b,T0),e(b,ft),u(Za,ft,null),e(ft,D0),e(ft,we),e(we,k0),e(we,Rp),e(Rp,P0),e(we,A0),e(we,qp),e(qp,O0),e(we,x0),e(we,Gp),e(Gp,C0),e(we,S0),e(we,jp),e(jp,N0),e(we,I0),e(ft,U0),u(Xr,ft,null),e(b,L0),e(b,eo),u(Ja,eo,null),e(eo,F0),e(eo,Ka),e(Ka,z0),e(Ka,Mp),e(Mp,R0),e(Ka,q0),e(b,G0),e(b,to),u(Qa,to,null),e(to,j0),e(to,Vp),e(Vp,M0),e(b,V0),e(b,ro),u(Xa,ro,null),e(ro,B0),e(ro,en),e(en,H0),e(en,Bp),e(Bp,W0),e(en,Y0),e(b,Z0),e(b,ut),u(tn,ut,null),e(ut,J0),e(ut,rn),e(rn,K0),e(rn,Hp),e(Hp,Q0),e(rn,X0),e(ut,e5),e(ut,Wp),e(Wp,t5),e(b,r5),e(b,P),u(on,P,null),e(P,o5),e(P,Yp),e(Yp,a5),e(P,n5),e(P,Zp),e(Zp,s5),e(P,l5),e(P,Jp),e(Jp,i5),e(P,d5),e(P,tr),e(tr,c5),e(tr,Kp),e(Kp,p5),e(tr,m5),e(tr,Qp),e(Qp,h5),e(tr,f5),e(P,u5),u(oo,P,null),e(P,_5),e(P,Xp),e(Xp,em),e(em,g5),e(P,v5),e(P,Je),e(Je,Ee),e(Ee,b5),e(Ee,tm),e(tm,y5),e(Ee,w5),e(Ee,rm),e(rm,E5),e(Ee,$5),e(Ee,om),e(om,T5),e(Ee,D5),e(Ee,am),e(am,k5),e(Ee,P5),e(Je,A5),e(Je,rr),e(rr,O5),e(rr,nm),e(nm,x5),e(rr,C5),e(rr,sm),e(sm,S5),e(rr,N5),e(Je,I5),e(Je,Wl),e(Wl,lm),e(lm,U5),e(Wl,L5),e(Je,F5),e(Je,_t),e(_t,im),e(im,z5),e(_t,R5),e(_t,dm),e(dm,q5),e(_t,G5),e(_t,cm),e(cm,j5),e(_t,M5),e(P,V5),e(P,pm),e(pm,B5),e(P,H5),e(P,mm),e(mm,W5),e(P,Y5),e(P,an),e(an,Z5),e(an,hm),e(hm,J5),e(an,K5),e(P,Q5),e(P,Ke),e(Ke,X5),e(Ke,fm),e(fm,e$),e(Ke,t$),e(Ke,um),e(um,r$),e(Ke,o$),e(Ke,_m),e(_m,a$),e(Ke,n$),e(P,s$),e(P,oe),e(oe,l$),e(oe,Yl),e(Yl,i$),e(oe,d$),e(oe,gm),e(gm,c$),e(oe,p$),e(oe,vm),e(vm,m$),e(oe,h$),e(oe,bm),e(bm,f$),e(oe,u$),e(oe,ym),e(ym,_$),e(oe,g$),e(P,v$),e(P,U),e(U,b$),e(U,wm),e(wm,y$),e(U,w$),e(U,Em),e(Em,E$),e(U,$$),e(U,$m),e($m,T$),e(U,D$),e(U,Tm),e(Tm,k$),e(U,P$),e(U,nn),e(nn,A$),e(U,O$),e(U,Dm),e(Dm,x$),e(U,C$),e(U,km),e(km,S$),e(U,N$),e(U,Pm),e(Pm,I$),e(U,U$),e(U,Am),e(Am,L$),e(U,F$),e(U,Om),e(Om,z$),e(U,R$),e(P,q$),e(P,$e),e($e,G$),e($e,Zl),e(Zl,j$),e($e,M$),e($e,xm),e(xm,V$),e($e,B$),e($e,Jl),e(Jl,H$),e($e,W$),e($e,Cm),e(Cm,Y$),e($e,Z$),e(P,J$),e(P,Sm),e(Sm,K$),e(b,Q$),e(b,ao),u(sn,ao,null),e(ao,X$),e(ao,Nm),e(Nm,e4),e(b,t4),e(b,no),u(ln,no,null),e(no,r4),e(no,dn),e(dn,o4),e(dn,Im),e(Im,a4),e(dn,n4),e(b,s4),e(b,gt),u(cn,gt,null),e(gt,l4),e(gt,pn),e(pn,i4),e(pn,Um),e(Um,d4),e(pn,c4),e(gt,p4),e(gt,mn),e(mn,m4),e(mn,Lm),e(Lm,h4),e(mn,f4),e(b,u4),e(b,Z),u(hn,Z,null),e(Z,_4),e(Z,Fm),e(Fm,g4),e(Z,v4),e(Z,fn),e(fn,b4),e(fn,zm),e(zm,y4),e(fn,w4),e(Z,E4),u(so,Z,null),e(Z,$4),e(Z,un),e(un,T4),e(un,Rm),e(Rm,D4),e(un,k4),e(Z,P4),e(Z,or),e(or,ar),e(ar,A4),e(ar,qm),e(qm,O4),e(ar,x4),e(ar,Gm),e(Gm,C4),e(ar,S4),e(or,N4),e(or,nr),e(nr,I4),e(nr,jm),e(jm,U4),e(nr,L4),e(nr,Mm),e(Mm,F4),e(nr,z4),e(or,R4),e(or,sr),e(sr,q4),e(sr,Vm),e(Vm,G4),e(sr,j4),e(sr,Bm),e(Bm,M4),e(sr,V4),e(b,B4),e(b,vt),u(_n,vt,null),e(vt,H4),e(vt,lr),e(lr,W4),e(lr,Hm),e(Hm,Y4),e(lr,Z4),e(lr,Wm),e(Wm,J4),e(lr,K4),e(vt,Q4),e(vt,Ym),e(Ym,X4),e(b,e3),e(b,bt),u(gn,bt,null),e(bt,t3),e(bt,ir),e(ir,r3),e(ir,Zm),e(Zm,o3),e(ir,a3),e(ir,Jm),e(Jm,n3),e(ir,s3),e(bt,l3),e(bt,Km),e(Km,i3),e(b,d3),e(b,lo),u(vn,lo,null),e(lo,c3),e(lo,Qe),e(Qe,p3),e(Qe,Qm),e(Qm,m3),e(Qe,h3),e(Qe,Xm),e(Xm,f3),e(Qe,u3),e(Qe,eh),e(eh,_3),e(Qe,g3),e(b,v3),e(b,io),u(bn,io,null),e(io,b3),e(io,yn),e(yn,y3),e(yn,th),e(th,w3),e(yn,E3),e(b,$3),e(b,Se),u(wn,Se,null),e(Se,T3),e(Se,En),e(En,D3),e(En,rh),e(rh,k3),e(En,P3),e(Se,A3),e(Se,oh),e(oh,O3),e(Se,x3),e(Se,$n),e($n,C3),e($n,Kl),e(Kl,S3),e($n,N3),e(b,I3),e(b,yt),u(Tn,yt,null),e(yt,U3),e(yt,Dn),e(Dn,L3),e(Dn,ah),e(ah,F3),e(Dn,z3),e(yt,R3),e(yt,nh),e(nh,q3),e(b,G3),e(b,wt),u(kn,wt,null),e(wt,j3),e(wt,sh),e(sh,M3),e(wt,V3),e(wt,lh),e(lh,B3),e(b,H3),e(b,co),u(Pn,co,null),e(co,W3),e(co,An),e(An,Y3),e(An,ih),e(ih,Z3),e(An,J3),e(b,K3),e(b,po),u(On,po,null),e(po,Q3),e(po,dh),e(dh,X3),e(b,eT),e(b,Et),u(xn,Et,null),e(Et,tT),e(Et,ch),e(ch,rT),e(Et,oT),e(Et,ph),e(ph,aT),p(t,wg,c),p(t,dr,c),e(dr,mo),e(mo,mh),u(Cn,mh,null),e(dr,nT),e(dr,hh),e(hh,sT),p(t,Eg,c),p(t,Xe,c),u(Sn,Xe,null),e(Xe,lT),e(Xe,Ne),u(Nn,Ne,null),e(Ne,iT),e(Ne,fh),e(fh,dT),e(Ne,cT),e(Ne,In),e(In,pT),e(In,uh),e(uh,mT),e(In,hT),e(Ne,fT),e(Ne,_h),e(_h,uT),e(Xe,_T),e(Xe,J),u(Un,J,null),e(J,gT),e(J,gh),e(gh,vT),e(J,bT),e(J,Ln),e(Ln,yT),e(Ln,vh),e(vh,wT),e(Ln,ET),e(J,$T),u(ho,J,null),e(J,TT),e(J,Fn),e(Fn,DT),e(Fn,bh),e(bh,kT),e(Fn,PT),e(J,AT),e(J,cr),e(cr,pr),e(pr,OT),e(pr,yh),e(yh,xT),e(pr,CT),e(pr,wh),e(wh,ST),e(pr,NT),e(cr,IT),e(cr,mr),e(mr,UT),e(mr,Eh),e(Eh,LT),e(mr,FT),e(mr,$h),e($h,zT),e(mr,RT),e(cr,qT),e(cr,hr),e(hr,GT),e(hr,Th),e(Th,jT),e(hr,MT),e(hr,Dh),e(Dh,VT),e(hr,BT),p(t,$g,c),p(t,fr,c),e(fr,fo),e(fo,kh),u(zn,kh,null),e(fr,HT),e(fr,Ph),e(Ph,WT),p(t,Tg,c),p(t,R,c),u(Rn,R,null),e(R,YT),e(R,ie),u(qn,ie,null),e(ie,ZT),e(ie,Ah),e(Ah,JT),e(ie,KT),e(ie,ur),e(ur,QT),e(ur,Oh),e(Oh,XT),e(ur,e8),e(ur,xh),e(xh,t8),e(ur,r8),e(ie,o8),e(ie,_r),e(_r,a8),e(_r,Ch),e(Ch,n8),e(_r,s8),e(_r,Sh),e(Sh,l8),e(_r,i8),e(ie,d8),e(ie,Gn),e(Gn,c8),e(Gn,Nh),e(Nh,p8),e(Gn,m8),e(R,h8),e(R,uo),u(jn,uo,null),e(uo,f8),e(uo,Ih),e(Ih,u8),e(R,_8),e(R,$t),u(Mn,$t,null),e($t,g8),e($t,Uh),e(Uh,v8),e($t,b8),e($t,gr),e(gr,y8),e(gr,Lh),e(Lh,w8),e(gr,E8),e(gr,Fh),e(Fh,$8),e(gr,T8),e(R,D8),e(R,_o),u(Vn,_o,null),e(_o,k8),e(_o,Bn),e(Bn,P8),e(Bn,zh),e(zh,A8),e(Bn,O8),e(R,x8),e(R,go),u(Hn,go,null),e(go,C8),e(go,Rh),e(Rh,S8),e(R,N8),e(R,vo),u(Wn,vo,null),e(vo,I8),e(vo,qh),e(qh,U8),p(t,Dg,c),p(t,vr,c),e(vr,bo),e(bo,Gh),u(Yn,Gh,null),e(vr,L8),e(vr,jh),e(jh,F8),p(t,kg,c),p(t,br,c),u(Zn,br,null),e(br,z8),e(br,Mh),e(Mh,R8),p(t,Pg,c),p(t,yr,c),e(yr,yo),e(yo,Vh),u(Jn,Vh,null),e(yr,q8),e(yr,Bh),e(Bh,G8),p(t,Ag,c),p(t,de,c),e(de,j8),e(de,Ql),e(Ql,M8),e(de,V8),e(de,Hh),e(Hh,B8),e(de,H8),e(de,Xl),e(Xl,W8),e(de,Y8),e(de,Wh),e(Wh,Z8),e(de,J8),p(t,Og,c),p(t,wo,c),e(wo,K8),e(wo,ei),e(ei,Q8),e(wo,X8),p(t,xg,c),p(t,Eo,c),e(Eo,ti),e(ti,Yh),e(Yh,e6),e(ti,t6),e(Eo,r6),e(Eo,ri),e(ri,Zh),e(Zh,o6),e(ri,a6),p(t,Cg,c),p(t,Ie,c),e(Ie,n6),e(Ie,Jh),e(Jh,s6),e(Ie,l6),e(Ie,Kh),e(Kh,i6),e(Ie,d6),e(Ie,oi),e(oi,c6),e(Ie,p6),p(t,Sg,c),p(t,$o,c),e($o,To),e(To,Qh),e(Qh,m6),e(To,h6),e(To,Xh),e(Xh,f6),e(To,u6),e($o,_6),e($o,ai),e(ai,ef),e(ef,g6),e(ai,v6),p(t,Ng,c),p(t,wr,c),e(wr,Do),e(Do,tf),u(Kn,tf,null),e(wr,b6),e(wr,rf),e(rf,y6),p(t,Ig,c),p(t,Ue,c),e(Ue,w6),e(Ue,ni),e(ni,E6),e(Ue,$6),e(Ue,of),e(of,T6),e(Ue,D6),e(Ue,af),e(af,k6),e(Ue,P6),p(t,Ug,c),p(t,Tt,c),e(Tt,A6),e(Tt,nf),e(nf,O6),e(Tt,x6),e(Tt,si),e(si,C6),e(Tt,S6),p(t,Lg,c),p(t,ko,c),e(ko,li),e(li,sf),e(sf,N6),e(li,I6),e(ko,U6),e(ko,ii),e(ii,lf),e(lf,L6),e(ii,F6),p(t,Fg,c),p(t,Le,c),e(Le,z6),e(Le,di),e(di,R6),e(Le,q6),e(Le,df),e(df,G6),e(Le,j6),e(Le,cf),e(cf,M6),e(Le,V6),p(t,zg,c),p(t,K,c),e(K,B6),e(K,ci),e(ci,H6),e(K,W6),e(K,pf),e(pf,Y6),e(K,Z6),e(K,mf),e(mf,J6),e(K,K6),e(K,hf),e(hf,Q6),e(K,X6),e(K,pi),e(pi,e9),e(K,t9),p(t,Rg,c),p(t,mi,c),e(mi,r9),p(t,qg,c),u(Qn,t,c),p(t,Gg,c),p(t,hi,c),e(hi,o9),p(t,jg,c),u(Xn,t,c),p(t,Mg,c),p(t,fi,c),e(fi,a9),p(t,Vg,c),u(es,t,c),p(t,Bg,c),p(t,ui,c),e(ui,n9),p(t,Hg,c),p(t,_i,c),e(_i,s9),p(t,Wg,c),u(ts,t,c),p(t,Yg,c),p(t,Po,c),e(Po,l9),e(Po,ff),e(ff,i9),e(Po,d9),p(t,Zg,c),p(t,Er,c),e(Er,Ao),e(Ao,uf),u(rs,uf,null),e(Er,c9),e(Er,_f),e(_f,p9),p(t,Jg,c),p(t,ce,c),e(ce,m9),e(ce,gi),e(gi,h9),e(ce,f9),e(ce,gf),e(gf,u9),e(ce,_9),e(ce,vf),e(vf,g9),e(ce,v9),e(ce,bf),e(bf,b9),e(ce,y9),p(t,Kg,c),p(t,Dt,c),e(Dt,w9),e(Dt,os),e(os,E9),e(Dt,$9),e(Dt,yf),e(yf,T9),e(Dt,D9),p(t,Qg,c),p(t,$r,c),e($r,Oo),e(Oo,wf),u(as,wf,null),e($r,k9),e($r,Ef),e(Ef,P9),p(t,Xg,c),p(t,vi,c),e(vi,A9),p(t,ev,c),p(t,xo,c),e(xo,O9),e(xo,ns),e(ns,$f),e($f,x9),e(xo,C9),p(t,tv,c),u(ss,t,c),p(t,rv,c),p(t,kt,c),e(kt,S9),e(kt,ls),e(ls,Tf),e(Tf,N9),e(kt,I9),e(kt,is),e(is,Df),e(Df,U9),e(kt,L9),p(t,ov,c),u(ds,t,c),p(t,av,c),u(cs,t,c),p(t,nv,c),p(t,Co,c),e(Co,F9),e(Co,bi),e(bi,z9),e(Co,R9),p(t,sv,c),p(t,yi,c),e(yi,q9),p(t,lv,c),p(t,wi,c),e(wi,G9),p(t,iv,c),p(t,Ei,c),e(Ei,kf),e(kf,Pf),e(Pf,j9),p(t,dv,c),p(t,So,c),e(So,M9),e(So,Af),e(Af,V9),e(So,B9),p(t,cv,c),p(t,$i,c),e($i,H9),p(t,pv,c),u(ps,t,c),p(t,mv,c),p(t,Pt,c),e(Pt,W9),e(Pt,Of),e(Of,Y9),e(Pt,Z9),e(Pt,xf),e(xf,J9),e(Pt,K9),p(t,hv,c),p(t,Ti,c),e(Ti,Q9),p(t,fv,c),u(ms,t,c),p(t,uv,c),p(t,At,c),e(At,X9),e(At,Cf),e(Cf,e7),e(At,t7),e(At,Sf),e(Sf,r7),e(At,o7),p(t,_v,c),p(t,Ot,c),e(Ot,a7),e(Ot,Nf),e(Nf,n7),e(Ot,s7),e(Ot,hs),e(hs,If),e(If,l7),e(Ot,i7),p(t,gv,c),u(fs,t,c),p(t,vv,c),p(t,Di,c),e(Di,d7),p(t,bv,c),u(us,t,c),p(t,yv,c),p(t,ki,c),e(ki,c7),p(t,wv,c),u(_s,t,c),p(t,Ev,c),p(t,Pi,c),e(Pi,p7),p(t,$v,c),p(t,Ai,c),e(Ai,Uf),e(Uf,Lf),e(Lf,m7),p(t,Tv,c),p(t,No,c),e(No,h7),e(No,Ff),e(Ff,f7),e(No,u7),p(t,Dv,c),p(t,Oi,c),e(Oi,gs),e(gs,_7),e(gs,zf),e(zf,g7),e(gs,v7),p(t,kv,c),u(vs,t,c),p(t,Pv,c),p(t,bs,c),e(bs,Rf),e(Rf,b7),p(t,Av,c),u(ys,t,c),p(t,Ov,c),p(t,xt,c),e(xt,y7),e(xt,qf),e(qf,w7),e(xt,E7),e(xt,Gf),e(Gf,$7),e(xt,T7),p(t,xv,c),p(t,xi,c),e(xi,D7),p(t,Cv,c),u(ws,t,c),p(t,Sv,c),p(t,Ci,c),e(Ci,k7),p(t,Nv,c),p(t,Io,c),e(Io,P7),e(Io,jf),e(jf,A7),e(Io,O7),p(t,Iv,c),p(t,Tr,c),e(Tr,Uo),e(Uo,Mf),u(Es,Mf,null),e(Tr,x7),e(Tr,Vf),e(Vf,C7),p(t,Uv,c),p(t,Lo,c),e(Lo,S7),e(Lo,Si),e(Si,N7),e(Lo,I7),p(t,Lv,c),p(t,pe,c),e(pe,U7),e(pe,$s),e($s,L7),e(pe,F7),e(pe,Ts),e(Ts,z7),e(pe,R7),e(pe,Ds),e(Ds,q7),e(pe,G7),e(pe,ks),e(ks,j7),e(pe,M7),p(t,Fv,c),p(t,Fo,c),e(Fo,V7),e(Fo,Ni),e(Ni,B7),e(Fo,H7),p(t,zv,c),p(t,Ii,c),p(t,Rv,c),p(t,Dr,c),e(Dr,zo),e(zo,Bf),u(Ps,Bf,null),e(Dr,W7),e(Dr,Hf),e(Hf,Y7),p(t,qv,c),p(t,Ui,c),e(Ui,Z7),p(t,Gv,c),p(t,Ct,c),e(Ct,J7),e(Ct,As),e(As,K7),e(Ct,Q7),e(Ct,Os),e(Os,X7),e(Ct,eD),p(t,jv,c),p(t,Li,c),e(Li,tD),p(t,Mv,c),u(xs,t,c),p(t,Vv,c),p(t,Fi,c),e(Fi,rD),p(t,Bv,c),p(t,St,c),e(St,oD),e(St,Wf),e(Wf,aD),e(St,nD),e(St,Yf),e(Yf,sD),e(St,lD),p(t,Hv,c),p(t,kr,c),e(kr,Ro),e(Ro,Zf),u(Cs,Zf,null),e(kr,iD),e(kr,Jf),e(Jf,dD),p(t,Wv,c),p(t,zi,c),e(zi,cD),p(t,Yv,c),p(t,Fe,c),e(Fe,pD),e(Fe,Kf),e(Kf,mD),e(Fe,hD),e(Fe,Qf),e(Qf,fD),e(Fe,uD),e(Fe,Xf),e(Xf,_D),e(Fe,gD),p(t,Zv,c),p(t,Nt,c),e(Nt,vD),e(Nt,eu),e(eu,bD),e(Nt,yD),e(Nt,tu),e(tu,wD),e(Nt,ED),p(t,Jv,c),u(Ss,t,c),p(t,Kv,c),p(t,qo,c),e(qo,$D),e(qo,Ns),e(Ns,TD),e(qo,DD),p(t,Qv,c),p(t,Pr,c),e(Pr,Go),e(Go,ru),u(Is,ru,null),e(Pr,kD),e(Pr,ou),e(ou,PD),p(t,Xv,c),p(t,Ri,c),e(Ri,AD),p(t,e1,c),u(Us,t,c),p(t,t1,c),p(t,It,c),e(It,OD),e(It,au),e(au,xD),e(It,CD),e(It,nu),e(nu,SD),e(It,ND),p(t,r1,c),p(t,qi,c),e(qi,ID),p(t,o1,c),u(Ls,t,c),p(t,a1,c),p(t,Gi,c),e(Gi,UD),p(t,n1,c),p(t,jo,c),e(jo,LD),e(jo,su),e(su,FD),e(jo,zD),p(t,s1,c),p(t,et,c),e(et,lu),e(lu,RD),e(et,qD),e(et,iu),e(iu,GD),e(et,jD),e(et,du),e(du,MD),e(et,VD),p(t,l1,c),p(t,ji,c),e(ji,BD),p(t,i1,c),u(Fs,t,c),p(t,d1,c),p(t,Mi,c),e(Mi,HD),p(t,c1,c),p(t,ze,c),e(ze,WD),e(ze,cu),e(cu,YD),e(ze,ZD),e(ze,pu),e(pu,JD),e(ze,KD),e(ze,mu),e(mu,QD),e(ze,XD),p(t,p1,c),p(t,Ar,c),e(Ar,Mo),e(Mo,hu),u(zs,hu,null),e(Ar,ek),e(Ar,fu),e(fu,tk),p(t,m1,c),p(t,Ut,c),e(Ut,rk),e(Ut,uu),e(uu,ok),e(Ut,ak),e(Ut,_u),e(_u,nk),e(Ut,sk),p(t,h1,c),p(t,Vi,c),e(Vi,lk),p(t,f1,c),p(t,Bi,c),e(Bi,ik),p(t,u1,c),p(t,Vo,c),e(Vo,dk),e(Vo,gu),e(gu,ck),e(Vo,pk),p(t,_1,c),u(Rs,t,c),p(t,g1,c),p(t,j,c),e(j,mk),e(j,vu),e(vu,hk),e(j,fk),e(j,bu),e(bu,uk),e(j,_k),e(j,yu),e(yu,gk),e(j,vk),e(j,wu),e(wu,bk),e(j,yk),e(j,Eu),e(Eu,wk),e(j,Ek),e(j,$u),e($u,$k),e(j,Tk),p(t,v1,c),p(t,Hi,c),e(Hi,Dk),p(t,b1,c),p(t,Or,c),e(Or,Bo),e(Bo,Tu),u(qs,Tu,null),e(Or,kk),e(Or,Du),e(Du,Pk),p(t,y1,c),u(Ho,t,c),p(t,w1,c),p(t,Re,c),e(Re,Ak),e(Re,Gs),e(Gs,Ok),e(Re,xk),e(Re,Wi),e(Wi,Ck),e(Re,Sk),e(Re,js),e(js,Nk),e(Re,Ik),p(t,E1,c),p(t,qe,c),e(qe,ku),e(ku,Uk),e(qe,Lk),e(qe,Pu),e(Pu,Fk),e(qe,zk),e(qe,Au),e(Au,Rk),e(qe,qk),e(qe,Ou),e(Ou,Gk),p(t,$1,c),p(t,Yi,c),e(Yi,jk),p(t,T1,c),p(t,Ms,c),e(Ms,xu),e(xu,Mk),e(Ms,Vk),p(t,D1,c),p(t,Zi,c),e(Zi,Bk),p(t,k1,c),u(Vs,t,c),p(t,P1,c),p(t,Lt,c),e(Lt,Hk),e(Lt,Cu),e(Cu,Wk),e(Lt,Yk),e(Lt,Su),e(Su,Zk),e(Lt,Jk),p(t,A1,c),u(Bs,t,c),p(t,O1,c),p(t,Ft,c),e(Ft,Kk),e(Ft,Nu),e(Nu,Qk),e(Ft,Xk),e(Ft,Hs),e(Hs,eP),e(Ft,tP),p(t,x1,c),p(t,Wo,c),e(Wo,rP),e(Wo,Ji),e(Ji,oP),e(Wo,aP),p(t,C1,c),p(t,Ki,c),e(Ki,nP),p(t,S1,c),p(t,Ws,c),e(Ws,Iu),e(Iu,sP),e(Ws,lP),p(t,N1,c),u(Ys,t,c),p(t,I1,c),p(t,Qi,c),e(Qi,iP),p(t,U1,c),u(Zs,t,c),p(t,L1,c),p(t,Js,c),e(Js,Uu),e(Uu,dP),e(Js,cP),p(t,F1,c),u(Ks,t,c),p(t,z1,c),p(t,Xi,c),e(Xi,pP),p(t,R1,c),u(Qs,t,c),p(t,q1,c),p(t,ed,c),e(ed,mP),p(t,G1,c),p(t,Yo,c),e(Yo,hP),e(Yo,Xs),e(Xs,fP),e(Yo,uP),p(t,j1,c),p(t,el,c),e(el,Lu),e(Lu,_P),e(el,gP),p(t,M1,c),p(t,zt,c),e(zt,vP),e(zt,Fu),e(Fu,bP),e(zt,yP),e(zt,zu),e(zu,wP),e(zt,EP),p(t,V1,c),p(t,Zo,c),e(Zo,$P),e(Zo,Ru),e(Ru,TP),e(Zo,DP),p(t,B1,c),u(tl,t,c),p(t,H1,c),p(t,td,c),e(td,kP),p(t,W1,c),p(t,Ge,c),e(Ge,qu),e(qu,PP),e(Ge,AP),e(Ge,Gu),e(Gu,OP),e(Ge,xP),e(Ge,rl),e(rl,CP),e(rl,ju),e(ju,SP),e(rl,NP),e(Ge,IP),e(Ge,ol),e(ol,UP),e(ol,Mu),e(Mu,LP),e(ol,FP),p(t,Y1,c),p(t,al,c),e(al,tt),e(tt,zP),e(tt,Vu),e(Vu,RP),e(tt,qP),e(tt,Bu),e(Bu,GP),e(tt,jP),e(tt,Hu),e(Hu,MP),e(tt,VP),p(t,Z1,c),p(t,Jo,c),e(Jo,BP),e(Jo,Wu),e(Wu,HP),e(Jo,WP),p(t,J1,c),u(nl,t,c),p(t,K1,c),p(t,xr,c),e(xr,Yu),e(Yu,YP),e(xr,ZP),e(xr,Zu),e(Zu,JP),e(xr,KP),p(t,Q1,c),p(t,Rt,c),e(Rt,QP),e(Rt,Ju),e(Ju,XP),e(Rt,eA),e(Rt,Ku),e(Ku,tA),e(Rt,rA),p(t,X1,c),p(t,rd,c),e(rd,oA),p(t,eb,c),p(t,me,c),e(me,Qu),e(Qu,aA),e(me,nA),e(me,Xu),e(Xu,sA),e(me,lA),e(me,sl),e(sl,iA),e(sl,e_),e(e_,dA),e(sl,cA),e(me,pA),e(me,Cr),e(Cr,mA),e(Cr,t_),e(t_,hA),e(Cr,fA),e(Cr,r_),e(r_,uA),e(Cr,_A),e(me,gA),e(me,o_),e(o_,vA),p(t,tb,c),p(t,od,c),e(od,bA),p(t,rb,c),p(t,Ko,c),e(Ko,Sr),e(Sr,yA),e(Sr,a_),e(a_,wA),e(Sr,EA),e(Sr,n_),e(n_,$A),e(Sr,TA),e(Ko,DA),e(Ko,Te),e(Te,kA),e(Te,s_),e(s_,PA),e(Te,AA),e(Te,l_),e(l_,OA),e(Te,xA),e(Te,i_),e(i_,CA),e(Te,SA),e(Te,d_),e(d_,NA),e(Te,IA),p(t,ob,c),p(t,Nr,c),e(Nr,Qo),e(Qo,c_),u(ll,c_,null),e(Nr,UA),e(Nr,p_),e(p_,LA),p(t,ab,c),p(t,Xo,c),e(Xo,FA),e(Xo,il),e(il,zA),e(Xo,RA),p(t,nb,c),p(t,dl,c),e(dl,m_),e(m_,qA),e(dl,GA),p(t,sb,c),p(t,cl,c),e(cl,h_),e(h_,jA),e(cl,MA),p(t,lb,c),p(t,Q,c),e(Q,f_),e(f_,pl),e(pl,VA),e(pl,u_),e(u_,BA),e(pl,HA),e(Q,WA),e(Q,ml),e(ml,ad),e(ad,__),e(__,YA),e(ad,ZA),e(ml,JA),e(ml,Ir),e(Ir,hl),e(hl,KA),e(hl,g_),e(g_,QA),e(hl,XA),e(Ir,eO),e(Ir,fl),e(fl,tO),e(fl,v_),e(v_,rO),e(fl,oO),e(Ir,aO),e(Ir,ul),e(ul,nO),e(ul,b_),e(b_,sO),e(ul,lO),e(Q,iO),e(Q,y_),e(y_,Ur),e(Ur,dO),e(Ur,w_),e(w_,cO),e(Ur,pO),e(Ur,E_),e(E_,mO),e(Ur,hO),e(Q,fO),e(Q,$_),e($_,rt),e(rt,uO),e(rt,T_),e(T_,_O),e(rt,gO),e(rt,D_),e(D_,vO),e(rt,bO),e(rt,k_),e(k_,yO),e(rt,wO),e(Q,EO),e(Q,P_),e(P_,Lr),e(Lr,$O),e(Lr,A_),e(A_,TO),e(Lr,DO),e(Lr,O_),e(O_,kO),e(Lr,PO),e(Q,AO),e(Q,_l),e(_l,x_),e(x_,OO),e(_l,xO),e(_l,gl),e(gl,De),e(De,CO),e(De,C_),e(C_,SO),e(De,NO),e(De,S_),e(S_,IO),e(De,UO),e(De,N_),e(N_,LO),e(De,FO),e(De,I_),e(I_,zO),e(De,RO),e(gl,qO),e(gl,vl),e(vl,GO),e(vl,U_),e(U_,jO),e(vl,MO),p(t,ib,c),p(t,nd,c),e(nd,L_),e(L_,VO),p(t,db,c),p(t,ea,c),e(ea,bl),e(bl,BO),e(bl,yl),e(yl,HO),e(bl,WO),e(ea,YO),e(ea,Fr),e(Fr,ZO),e(Fr,wl),e(wl,JO),e(Fr,KO),e(Fr,F_),e(F_,QO),e(Fr,XO),p(t,cb,c),p(t,sd,c),e(sd,ex),p(t,pb,c),p(t,w,c),e(w,tx),e(w,ld),e(ld,rx),e(w,z_),e(w,ox),e(w,id),e(id,ax),e(w,R_),e(w,nx),e(w,dd),e(dd,sx),e(w,q_),e(w,lx),e(w,cd),e(cd,ix),e(w,G_),e(w,dx),e(w,pd),e(pd,cx),e(w,j_),e(w,px),e(w,md),e(md,mx),e(w,M_),e(w,hx),e(w,hd),e(hd,fx),e(w,V_),e(w,ux),e(w,fd),e(fd,_x),e(w,B_),e(w,gx),e(w,ud),e(ud,vx),e(w,H_),e(w,bx),e(w,_d),e(_d,yx),e(w,W_),e(w,wx),e(w,gd),e(gd,Ex),e(w,Y_),e(w,$x),e(w,vd),e(vd,Tx),e(w,Z_),e(w,Dx),e(w,bd),e(bd,kx),e(w,J_),e(w,Px),e(w,yd),e(yd,Ax),e(w,K_),e(w,Ox),e(w,wd),e(wd,xx),e(w,Q_),e(w,Cx),e(w,Ed),e(Ed,Sx),e(w,X_),e(w,Nx),e(w,$d),e($d,Ix),e(w,eg),e(w,Ux),e(w,Td),e(Td,Lx),e(w,tg),e(w,Fx),e(w,Dd),e(Dd,zx),e(w,rg),e(w,Rx),e(w,kd),e(kd,qx),e(w,og),e(w,Gx),e(w,Pd),e(Pd,jx),e(w,ag),e(w,Mx),e(w,Ad),e(Ad,Vx),e(w,ng),e(w,Bx),e(w,Od),e(Od,Hx),e(w,sg),e(w,Wx),mb=!0},p(t,[c]){const El={};c&2&&(El.$$scope={dirty:c,ctx:t}),Mr.$set(El);const lg={};c&2&&(lg.$$scope={dirty:c,ctx:t}),Xr.$set(lg);const ig={};c&2&&(ig.$$scope={dirty:c,ctx:t}),oo.$set(ig);const dg={};c&2&&(dg.$$scope={dirty:c,ctx:t}),so.$set(dg);const zr={};c&2&&(zr.$$scope={dirty:c,ctx:t}),ho.$set(zr);const cg={};c&2&&(cg.$$scope={dirty:c,ctx:t}),Ho.$set(cg)},i(t){mb||(_(A.$$.fragment,t),_(Mr.$$.fragment,t),_(Ta.$$.fragment,t),_(Da.$$.fragment,t),_(ka.$$.fragment,t),_(Pa.$$.fragment,t),_(Oa.$$.fragment,t),_(Ca.$$.fragment,t),_(Sa.$$.fragment,t),_(Na.$$.fragment,t),_(Ua.$$.fragment,t),_(La.$$.fragment,t),_(Fa.$$.fragment,t),_(Ra.$$.fragment,t),_(qa.$$.fragment,t),_(ja.$$.fragment,t),_(Va.$$.fragment,t),_(Ba.$$.fragment,t),_(Wa.$$.fragment,t),_(Za.$$.fragment,t),_(Xr.$$.fragment,t),_(Ja.$$.fragment,t),_(Qa.$$.fragment,t),_(Xa.$$.fragment,t),_(tn.$$.fragment,t),_(on.$$.fragment,t),_(oo.$$.fragment,t),_(sn.$$.fragment,t),_(ln.$$.fragment,t),_(cn.$$.fragment,t),_(hn.$$.fragment,t),_(so.$$.fragment,t),_(_n.$$.fragment,t),_(gn.$$.fragment,t),_(vn.$$.fragment,t),_(bn.$$.fragment,t),_(wn.$$.fragment,t),_(Tn.$$.fragment,t),_(kn.$$.fragment,t),_(Pn.$$.fragment,t),_(On.$$.fragment,t),_(xn.$$.fragment,t),_(Cn.$$.fragment,t),_(Sn.$$.fragment,t),_(Nn.$$.fragment,t),_(Un.$$.fragment,t),_(ho.$$.fragment,t),_(zn.$$.fragment,t),_(Rn.$$.fragment,t),_(qn.$$.fragment,t),_(jn.$$.fragment,t),_(Mn.$$.fragment,t),_(Vn.$$.fragment,t),_(Hn.$$.fragment,t),_(Wn.$$.fragment,t),_(Yn.$$.fragment,t),_(Zn.$$.fragment,t),_(Jn.$$.fragment,t),_(Kn.$$.fragment,t),_(Qn.$$.fragment,t),_(Xn.$$.fragment,t),_(es.$$.fragment,t),_(ts.$$.fragment,t),_(rs.$$.fragment,t),_(as.$$.fragment,t),_(ss.$$.fragment,t),_(ds.$$.fragment,t),_(cs.$$.fragment,t),_(ps.$$.fragment,t),_(ms.$$.fragment,t),_(fs.$$.fragment,t),_(us.$$.fragment,t),_(_s.$$.fragment,t),_(vs.$$.fragment,t),_(ys.$$.fragment,t),_(ws.$$.fragment,t),_(Es.$$.fragment,t),_(Ps.$$.fragment,t),_(xs.$$.fragment,t),_(Cs.$$.fragment,t),_(Ss.$$.fragment,t),_(Is.$$.fragment,t),_(Us.$$.fragment,t),_(Ls.$$.fragment,t),_(Fs.$$.fragment,t),_(zs.$$.fragment,t),_(Rs.$$.fragment,t),_(qs.$$.fragment,t),_(Ho.$$.fragment,t),_(Vs.$$.fragment,t),_(Bs.$$.fragment,t),_(Ys.$$.fragment,t),_(Zs.$$.fragment,t),_(Ks.$$.fragment,t),_(Qs.$$.fragment,t),_(tl.$$.fragment,t),_(nl.$$.fragment,t),_(ll.$$.fragment,t),mb=!0)},o(t){g(A.$$.fragment,t),g(Mr.$$.fragment,t),g(Ta.$$.fragment,t),g(Da.$$.fragment,t),g(ka.$$.fragment,t),g(Pa.$$.fragment,t),g(Oa.$$.fragment,t),g(Ca.$$.fragment,t),g(Sa.$$.fragment,t),g(Na.$$.fragment,t),g(Ua.$$.fragment,t),g(La.$$.fragment,t),g(Fa.$$.fragment,t),g(Ra.$$.fragment,t),g(qa.$$.fragment,t),g(ja.$$.fragment,t),g(Va.$$.fragment,t),g(Ba.$$.fragment,t),g(Wa.$$.fragment,t),g(Za.$$.fragment,t),g(Xr.$$.fragment,t),g(Ja.$$.fragment,t),g(Qa.$$.fragment,t),g(Xa.$$.fragment,t),g(tn.$$.fragment,t),g(on.$$.fragment,t),g(oo.$$.fragment,t),g(sn.$$.fragment,t),g(ln.$$.fragment,t),g(cn.$$.fragment,t),g(hn.$$.fragment,t),g(so.$$.fragment,t),g(_n.$$.fragment,t),g(gn.$$.fragment,t),g(vn.$$.fragment,t),g(bn.$$.fragment,t),g(wn.$$.fragment,t),g(Tn.$$.fragment,t),g(kn.$$.fragment,t),g(Pn.$$.fragment,t),g(On.$$.fragment,t),g(xn.$$.fragment,t),g(Cn.$$.fragment,t),g(Sn.$$.fragment,t),g(Nn.$$.fragment,t),g(Un.$$.fragment,t),g(ho.$$.fragment,t),g(zn.$$.fragment,t),g(Rn.$$.fragment,t),g(qn.$$.fragment,t),g(jn.$$.fragment,t),g(Mn.$$.fragment,t),g(Vn.$$.fragment,t),g(Hn.$$.fragment,t),g(Wn.$$.fragment,t),g(Yn.$$.fragment,t),g(Zn.$$.fragment,t),g(Jn.$$.fragment,t),g(Kn.$$.fragment,t),g(Qn.$$.fragment,t),g(Xn.$$.fragment,t),g(es.$$.fragment,t),g(ts.$$.fragment,t),g(rs.$$.fragment,t),g(as.$$.fragment,t),g(ss.$$.fragment,t),g(ds.$$.fragment,t),g(cs.$$.fragment,t),g(ps.$$.fragment,t),g(ms.$$.fragment,t),g(fs.$$.fragment,t),g(us.$$.fragment,t),g(_s.$$.fragment,t),g(vs.$$.fragment,t),g(ys.$$.fragment,t),g(ws.$$.fragment,t),g(Es.$$.fragment,t),g(Ps.$$.fragment,t),g(xs.$$.fragment,t),g(Cs.$$.fragment,t),g(Ss.$$.fragment,t),g(Is.$$.fragment,t),g(Us.$$.fragment,t),g(Ls.$$.fragment,t),g(Fs.$$.fragment,t),g(zs.$$.fragment,t),g(Rs.$$.fragment,t),g(qs.$$.fragment,t),g(Ho.$$.fragment,t),g(Vs.$$.fragment,t),g(Bs.$$.fragment,t),g(Ys.$$.fragment,t),g(Zs.$$.fragment,t),g(Ks.$$.fragment,t),g(Qs.$$.fragment,t),g(tl.$$.fragment,t),g(nl.$$.fragment,t),g(ll.$$.fragment,t),mb=!1},d(t){r($),t&&r(S),t&&r(D),v(A),t&&r(ee),t&&r(G),t&&r(F),t&&r(N),t&&r(Ye),t&&r(Pe),t&&r(W),t&&r(B),t&&r(Kt),t&&r(x),t&&r(ug),v(Mr,t),t&&r(_g),t&&r(Vr),t&&r(gg),v(Ta,t),t&&r(vg),t&&r(lt),t&&r(bg),t&&r(Qt),v(Da),t&&r(yg),t&&r(b),v(ka),v(Pa),v(Oa),v(Ca),v(Sa),v(Na),v(Ua),v(La),v(Fa),v(Ra),v(qa),v(ja),v(Va),v(Ba),v(Wa),v(Za),v(Xr),v(Ja),v(Qa),v(Xa),v(tn),v(on),v(oo),v(sn),v(ln),v(cn),v(hn),v(so),v(_n),v(gn),v(vn),v(bn),v(wn),v(Tn),v(kn),v(Pn),v(On),v(xn),t&&r(wg),t&&r(dr),v(Cn),t&&r(Eg),t&&r(Xe),v(Sn),v(Nn),v(Un),v(ho),t&&r($g),t&&r(fr),v(zn),t&&r(Tg),t&&r(R),v(Rn),v(qn),v(jn),v(Mn),v(Vn),v(Hn),v(Wn),t&&r(Dg),t&&r(vr),v(Yn),t&&r(kg),t&&r(br),v(Zn),t&&r(Pg),t&&r(yr),v(Jn),t&&r(Ag),t&&r(de),t&&r(Og),t&&r(wo),t&&r(xg),t&&r(Eo),t&&r(Cg),t&&r(Ie),t&&r(Sg),t&&r($o),t&&r(Ng),t&&r(wr),v(Kn),t&&r(Ig),t&&r(Ue),t&&r(Ug),t&&r(Tt),t&&r(Lg),t&&r(ko),t&&r(Fg),t&&r(Le),t&&r(zg),t&&r(K),t&&r(Rg),t&&r(mi),t&&r(qg),v(Qn,t),t&&r(Gg),t&&r(hi),t&&r(jg),v(Xn,t),t&&r(Mg),t&&r(fi),t&&r(Vg),v(es,t),t&&r(Bg),t&&r(ui),t&&r(Hg),t&&r(_i),t&&r(Wg),v(ts,t),t&&r(Yg),t&&r(Po),t&&r(Zg),t&&r(Er),v(rs),t&&r(Jg),t&&r(ce),t&&r(Kg),t&&r(Dt),t&&r(Qg),t&&r($r),v(as),t&&r(Xg),t&&r(vi),t&&r(ev),t&&r(xo),t&&r(tv),v(ss,t),t&&r(rv),t&&r(kt),t&&r(ov),v(ds,t),t&&r(av),v(cs,t),t&&r(nv),t&&r(Co),t&&r(sv),t&&r(yi),t&&r(lv),t&&r(wi),t&&r(iv),t&&r(Ei),t&&r(dv),t&&r(So),t&&r(cv),t&&r($i),t&&r(pv),v(ps,t),t&&r(mv),t&&r(Pt),t&&r(hv),t&&r(Ti),t&&r(fv),v(ms,t),t&&r(uv),t&&r(At),t&&r(_v),t&&r(Ot),t&&r(gv),v(fs,t),t&&r(vv),t&&r(Di),t&&r(bv),v(us,t),t&&r(yv),t&&r(ki),t&&r(wv),v(_s,t),t&&r(Ev),t&&r(Pi),t&&r($v),t&&r(Ai),t&&r(Tv),t&&r(No),t&&r(Dv),t&&r(Oi),t&&r(kv),v(vs,t),t&&r(Pv),t&&r(bs),t&&r(Av),v(ys,t),t&&r(Ov),t&&r(xt),t&&r(xv),t&&r(xi),t&&r(Cv),v(ws,t),t&&r(Sv),t&&r(Ci),t&&r(Nv),t&&r(Io),t&&r(Iv),t&&r(Tr),v(Es),t&&r(Uv),t&&r(Lo),t&&r(Lv),t&&r(pe),t&&r(Fv),t&&r(Fo),t&&r(zv),t&&r(Ii),t&&r(Rv),t&&r(Dr),v(Ps),t&&r(qv),t&&r(Ui),t&&r(Gv),t&&r(Ct),t&&r(jv),t&&r(Li),t&&r(Mv),v(xs,t),t&&r(Vv),t&&r(Fi),t&&r(Bv),t&&r(St),t&&r(Hv),t&&r(kr),v(Cs),t&&r(Wv),t&&r(zi),t&&r(Yv),t&&r(Fe),t&&r(Zv),t&&r(Nt),t&&r(Jv),v(Ss,t),t&&r(Kv),t&&r(qo),t&&r(Qv),t&&r(Pr),v(Is),t&&r(Xv),t&&r(Ri),t&&r(e1),v(Us,t),t&&r(t1),t&&r(It),t&&r(r1),t&&r(qi),t&&r(o1),v(Ls,t),t&&r(a1),t&&r(Gi),t&&r(n1),t&&r(jo),t&&r(s1),t&&r(et),t&&r(l1),t&&r(ji),t&&r(i1),v(Fs,t),t&&r(d1),t&&r(Mi),t&&r(c1),t&&r(ze),t&&r(p1),t&&r(Ar),v(zs),t&&r(m1),t&&r(Ut),t&&r(h1),t&&r(Vi),t&&r(f1),t&&r(Bi),t&&r(u1),t&&r(Vo),t&&r(_1),v(Rs,t),t&&r(g1),t&&r(j),t&&r(v1),t&&r(Hi),t&&r(b1),t&&r(Or),v(qs),t&&r(y1),v(Ho,t),t&&r(w1),t&&r(Re),t&&r(E1),t&&r(qe),t&&r($1),t&&r(Yi),t&&r(T1),t&&r(Ms),t&&r(D1),t&&r(Zi),t&&r(k1),v(Vs,t),t&&r(P1),t&&r(Lt),t&&r(A1),v(Bs,t),t&&r(O1),t&&r(Ft),t&&r(x1),t&&r(Wo),t&&r(C1),t&&r(Ki),t&&r(S1),t&&r(Ws),t&&r(N1),v(Ys,t),t&&r(I1),t&&r(Qi),t&&r(U1),v(Zs,t),t&&r(L1),t&&r(Js),t&&r(F1),v(Ks,t),t&&r(z1),t&&r(Xi),t&&r(R1),v(Qs,t),t&&r(q1),t&&r(ed),t&&r(G1),t&&r(Yo),t&&r(j1),t&&r(el),t&&r(M1),t&&r(zt),t&&r(V1),t&&r(Zo),t&&r(B1),v(tl,t),t&&r(H1),t&&r(td),t&&r(W1),t&&r(Ge),t&&r(Y1),t&&r(al),t&&r(Z1),t&&r(Jo),t&&r(J1),v(nl,t),t&&r(K1),t&&r(xr),t&&r(Q1),t&&r(Rt),t&&r(X1),t&&r(rd),t&&r(eb),t&&r(me),t&&r(tb),t&&r(od),t&&r(rb),t&&r(Ko),t&&r(ob),t&&r(Nr),v(ll),t&&r(ab),t&&r(Xo),t&&r(nb),t&&r(dl),t&&r(sb),t&&r(cl),t&&r(lb),t&&r(Q),t&&r(ib),t&&r(nd),t&&r(db),t&&r(ea),t&&r(cb),t&&r(sd),t&&r(pb),t&&r(w)}}}const sq={local:"trainer",sections:[{local:"transformers.Trainer",title:"Trainer"},{local:"transformers.Seq2SeqTrainer",title:"Seq2SeqTrainer"},{local:"transformers.TrainingArguments",title:"TrainingArguments"},{local:"transformers.Seq2SeqTrainingArguments",title:"Seq2SeqTrainingArguments"},{local:"checkpoints",title:"Checkpoints"},{local:"logging",title:"Logging"},{local:"randomness",title:"Randomness"},{local:"specific-gpus-selection",title:"Specific GPUs Selection"},{local:"trainer-integrations",sections:[{local:"cuda-extension-installation-notes",sections:[{local:"possible-problem-1",title:"Possible problem #1"},{local:"possible-problem-2",title:"Possible problem #2"},{local:"possible-problem-3",title:"Possible problem #3"}],title:"CUDA Extension Installation Notes"},{local:"fairscale",title:"FairScale"},{local:"pytorch-fully-sharded-data-parallel",title:"PyTorch Fully Sharded Data parallel"}],title:"Trainer Integrations"}],title:"Trainer"};function lq(ae){return JR(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class fq extends HR{constructor($){super();WR(this,$,lq,nq,YR,{})}}export{fq as default,sq as metadata};
