import{S as Xaa,i as zaa,s as Qaa,e as a,k as l,w as F,t as o,M as Waa,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Uaa,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as hgt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Haa($){let g,v,p,m,u,d,h,yo,Ui,dm,gt,Hi,Ji,yL,cm,Oe,We,Yi,Hn,LL,Jn,Yn,xL,Ki,Kn,$L,Zi,fm,Va;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),yo=o(`, make sure its
`),Ui=a("code"),dm=o("model_type"),gt=o(" attribute is set to the same key you use when registering the config (here "),Hi=a("code"),Ji=o('"new-model"'),yL=o(")."),cm=l(),Oe=a("p"),We=o("Likewise, if your "),Yi=a("code"),Hn=o("NewModel"),LL=o(" is a subclass of "),Jn=a("a"),Yn=o("PreTrainedModel"),xL=o(`, make sure its
`),Ki=a("code"),Kn=o("config_class"),$L=o(` attribute is set to the same class you use when registering the model (here
`),Zi=a("code"),fm=o("NewModelConfig"),Va=o(")."),this.h()},l(Ue){g=n(Ue,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var yP=s(p);m=r(yP,"NewModelConfig"),yP.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ed=s(d);h=r(ed,"PretrainedConfig"),ed.forEach(t),yo=r(Ae,`, make sure its
`),Ui=n(Ae,"CODE",{});var LP=s(Ui);dm=r(LP,"model_type"),LP.forEach(t),gt=r(Ae," attribute is set to the same key you use when registering the config (here "),Hi=n(Ae,"CODE",{});var xP=s(Hi);Ji=r(xP,'"new-model"'),xP.forEach(t),yL=r(Ae,")."),Ae.forEach(t),cm=i(Ue),Oe=n(Ue,"P",{});var Lo=s(Oe);We=r(Lo,"Likewise, if your "),Yi=n(Lo,"CODE",{});var Xa=s(Yi);Hn=r(Xa,"NewModel"),Xa.forEach(t),LL=r(Lo," is a subclass of "),Jn=n(Lo,"A",{href:!0});var $P=s(Jn);Yn=r($P,"PreTrainedModel"),$P.forEach(t),xL=r(Lo,`, make sure its
`),Ki=n(Lo,"CODE",{});var mm=s(Ki);Kn=r(mm,"config_class"),mm.forEach(t),$L=r(Lo,` attribute is set to the same class you use when registering the model (here
`),Zi=n(Lo,"CODE",{});var kP=s(Zi);fm=r(kP,"NewModelConfig"),kP.forEach(t),Va=r(Lo,")."),Lo.forEach(t),this.h()},h(){c(Jn,"href","/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel")},m(Ue,Ae){b(Ue,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,yo),e(g,Ui),e(Ui,dm),e(g,gt),e(g,Hi),e(Hi,Ji),e(g,yL),b(Ue,cm,Ae),b(Ue,Oe,Ae),e(Oe,We),e(Oe,Yi),e(Yi,Hn),e(Oe,LL),e(Oe,Jn),e(Jn,Yn),e(Oe,xL),e(Oe,Ki),e(Ki,Kn),e(Oe,$L),e(Oe,Zi),e(Zi,fm),e(Oe,Va)},d(Ue){Ue&&t(g),Ue&&t(cm),Ue&&t(Oe)}}}function Jaa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yaa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kaa($){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var yo=s(p);m=r(yo,"use_auth_token=True"),yo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Zaa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ena($){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var yo=s(p);m=r(yo,"use_auth_token=True"),yo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function ona($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ana($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ina($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function una($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _na($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ena($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa")
model = AutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa")

# Update configuration during loading
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/layoutlm_tf_model_config.json")
model = AutoModelForDocumentQuestionAnswering.from_pretrained(
    "./tf_model/layoutlm_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/layoutlm_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/layoutlm_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ana($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $na($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ina($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ona($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Una($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function esa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function osa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function asa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ssa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function isa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function csa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function msa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function psa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function usa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _sa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Msa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Esa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Csa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Asa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ysa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $sa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ksa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ssa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Psa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Isa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Osa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Usa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ysa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ksa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ela($){let g,v,p,m,u,d,h,yo,Ui,dm,gt,Hi,Ji,yL,cm,Oe,We,Yi,Hn,LL,Jn,Yn,xL,Ki,Kn,$L,Zi,fm,Va,Ue,Ae,yP,ed,LP,xP,Lo,Xa,$P,mm,kP,iZe,RUe,od,gm,gle,kL,dZe,hle,cZe,PUe,Zn,fZe,ple,mZe,gZe,ule,hZe,pZe,BUe,SL,IUe,SP,uZe,NUe,hm,qUe,rd,pm,_le,RL,_Ze,ble,bZe,jUe,xo,PL,vZe,BL,FZe,RP,TZe,MZe,EZe,IL,CZe,vle,wZe,AZe,yZe,Rr,NL,LZe,Fle,xZe,$Ze,td,kZe,Tle,SZe,RZe,Mle,PZe,BZe,IZe,A,um,Ele,NZe,qZe,PP,jZe,DZe,GZe,_m,Cle,OZe,VZe,BP,XZe,zZe,QZe,bm,wle,WZe,UZe,IP,HZe,JZe,YZe,vm,Ale,KZe,ZZe,NP,eeo,oeo,reo,Fm,yle,teo,aeo,qP,neo,seo,leo,Tm,Lle,ieo,deo,jP,ceo,feo,meo,Mm,xle,geo,heo,DP,peo,ueo,_eo,Em,$le,beo,veo,GP,Feo,Teo,Meo,Cm,kle,Eeo,Ceo,OP,weo,Aeo,yeo,wm,Sle,Leo,xeo,VP,$eo,keo,Seo,Am,Rle,Reo,Peo,XP,Beo,Ieo,Neo,ym,Ple,qeo,jeo,zP,Deo,Geo,Oeo,Lm,Ble,Veo,Xeo,QP,zeo,Qeo,Weo,xm,Ile,Ueo,Heo,WP,Jeo,Yeo,Keo,$m,Nle,Zeo,eoo,UP,ooo,roo,too,km,qle,aoo,noo,HP,soo,loo,ioo,Sm,jle,doo,coo,JP,foo,moo,goo,Rm,Dle,hoo,poo,YP,uoo,_oo,boo,Pm,Gle,voo,Foo,KP,Too,Moo,Eoo,Bm,Ole,Coo,woo,ZP,Aoo,yoo,Loo,Im,Vle,xoo,$oo,eB,koo,Soo,Roo,Nm,Xle,Poo,Boo,oB,Ioo,Noo,qoo,qm,zle,joo,Doo,rB,Goo,Ooo,Voo,jm,Qle,Xoo,zoo,tB,Qoo,Woo,Uoo,Dm,Wle,Hoo,Joo,aB,Yoo,Koo,Zoo,Gm,Ule,ero,oro,nB,rro,tro,aro,Om,Hle,nro,sro,sB,lro,iro,dro,Vm,Jle,cro,fro,lB,mro,gro,hro,Xm,Yle,pro,uro,iB,_ro,bro,vro,zm,Kle,Fro,Tro,dB,Mro,Ero,Cro,Qm,Zle,wro,Aro,cB,yro,Lro,xro,Wm,eie,$ro,kro,fB,Sro,Rro,Pro,Um,oie,Bro,Iro,mB,Nro,qro,jro,Hm,rie,Dro,Gro,gB,Oro,Vro,Xro,Jm,tie,zro,Qro,hB,Wro,Uro,Hro,Ym,aie,Jro,Yro,pB,Kro,Zro,eto,Km,nie,oto,rto,uB,tto,ato,nto,Zm,sie,sto,lto,_B,ito,dto,cto,eg,lie,fto,mto,bB,gto,hto,pto,og,iie,uto,_to,vB,bto,vto,Fto,rg,die,Tto,Mto,FB,Eto,Cto,wto,tg,cie,Ato,yto,TB,Lto,xto,$to,ag,fie,kto,Sto,MB,Rto,Pto,Bto,ng,mie,Ito,Nto,EB,qto,jto,Dto,sg,gie,Gto,Oto,CB,Vto,Xto,zto,lg,hie,Qto,Wto,wB,Uto,Hto,Jto,ig,pie,Yto,Kto,AB,Zto,eao,oao,dg,uie,rao,tao,yB,aao,nao,sao,cg,_ie,lao,iao,LB,dao,cao,fao,fg,bie,mao,gao,xB,hao,pao,uao,mg,vie,_ao,bao,$B,vao,Fao,Tao,gg,Fie,Mao,Eao,kB,Cao,wao,Aao,hg,Tie,yao,Lao,SB,xao,$ao,kao,pg,Mie,Sao,Rao,RB,Pao,Bao,Iao,ug,Eie,Nao,qao,PB,jao,Dao,Gao,_g,Cie,Oao,Vao,BB,Xao,zao,Qao,bg,wie,Wao,Uao,IB,Hao,Jao,Yao,vg,Aie,Kao,Zao,NB,eno,ono,rno,Fg,yie,tno,ano,qB,nno,sno,lno,Tg,Lie,ino,dno,jB,cno,fno,mno,Mg,xie,gno,hno,DB,pno,uno,_no,Eg,$ie,bno,vno,GB,Fno,Tno,Mno,Cg,kie,Eno,Cno,OB,wno,Ano,yno,wg,Sie,Lno,xno,VB,$no,kno,Sno,Ag,Rie,Rno,Pno,XB,Bno,Ino,Nno,yg,Pie,qno,jno,zB,Dno,Gno,Ono,Lg,Bie,Vno,Xno,QB,zno,Qno,Wno,xg,Iie,Uno,Hno,WB,Jno,Yno,Kno,$g,Nie,Zno,eso,UB,oso,rso,tso,kg,qie,aso,nso,HB,sso,lso,iso,Sg,jie,dso,cso,JB,fso,mso,gso,Rg,Die,hso,pso,YB,uso,_so,bso,Pg,Gie,vso,Fso,KB,Tso,Mso,Eso,Bg,Oie,Cso,wso,ZB,Aso,yso,Lso,Ig,Vie,xso,$so,eI,kso,Sso,Rso,Ng,Xie,Pso,Bso,oI,Iso,Nso,qso,qg,zie,jso,Dso,rI,Gso,Oso,Vso,jg,Qie,Xso,zso,tI,Qso,Wso,Uso,Dg,Wie,Hso,Jso,aI,Yso,Kso,Zso,Gg,Uie,elo,olo,nI,rlo,tlo,alo,Og,Hie,nlo,slo,sI,llo,ilo,dlo,Vg,Jie,clo,flo,lI,mlo,glo,hlo,Xg,Yie,plo,ulo,iI,_lo,blo,vlo,zg,Kie,Flo,Tlo,dI,Mlo,Elo,Clo,Qg,Zie,wlo,Alo,cI,ylo,Llo,xlo,Wg,ede,$lo,klo,fI,Slo,Rlo,Plo,Ug,ode,Blo,Ilo,mI,Nlo,qlo,jlo,Hg,rde,Dlo,Glo,gI,Olo,Vlo,Xlo,Jg,tde,zlo,Qlo,hI,Wlo,Ulo,Hlo,Yg,ade,Jlo,Ylo,pI,Klo,Zlo,eio,Kg,nde,oio,rio,uI,tio,aio,nio,Zg,sde,sio,lio,_I,iio,dio,cio,eh,lde,fio,mio,bI,gio,hio,pio,oh,ide,uio,_io,vI,bio,vio,Fio,rh,dde,Tio,Mio,FI,Eio,Cio,wio,th,cde,Aio,yio,TI,Lio,xio,$io,ah,fde,kio,Sio,MI,Rio,Pio,Bio,nh,mde,Iio,Nio,EI,qio,jio,Dio,sh,gde,Gio,Oio,CI,Vio,Xio,zio,lh,hde,Qio,Wio,wI,Uio,Hio,Jio,ih,pde,Yio,Kio,AI,Zio,edo,odo,dh,ude,rdo,tdo,yI,ado,ndo,sdo,ch,_de,ldo,ido,LI,ddo,cdo,fdo,fh,bde,mdo,gdo,xI,hdo,pdo,udo,mh,vde,_do,bdo,$I,vdo,Fdo,Tdo,gh,Fde,Mdo,Edo,kI,Cdo,wdo,Ado,hh,Tde,ydo,Ldo,SI,xdo,$do,kdo,ph,Mde,Sdo,Rdo,RI,Pdo,Bdo,Ido,uh,Ede,Ndo,qdo,PI,jdo,Ddo,Gdo,_h,Cde,Odo,Vdo,BI,Xdo,zdo,Qdo,bh,wde,Wdo,Udo,II,Hdo,Jdo,Ydo,vh,Ade,Kdo,Zdo,NI,eco,oco,rco,Fh,yde,tco,aco,qI,nco,sco,lco,Th,Lde,ico,dco,jI,cco,fco,mco,Mh,xde,gco,hco,DI,pco,uco,_co,Eh,$de,bco,vco,GI,Fco,Tco,Mco,Ch,kde,Eco,Cco,OI,wco,Aco,yco,wh,Sde,Lco,xco,VI,$co,kco,Sco,Ah,Rde,Rco,Pco,XI,Bco,Ico,Nco,yh,Pde,qco,jco,zI,Dco,Gco,Oco,Lh,Bde,Vco,Xco,QI,zco,Qco,Wco,xh,Ide,Uco,Hco,WI,Jco,Yco,Kco,$h,Zco,kh,qL,efo,Nde,ofo,DUe,ad,Sh,qde,jL,rfo,jde,tfo,GUe,$o,DL,afo,GL,nfo,UI,sfo,lfo,ifo,OL,dfo,Dde,cfo,ffo,mfo,Pr,VL,gfo,Gde,hfo,pfo,za,ufo,Ode,_fo,bfo,Vde,vfo,Ffo,Xde,Tfo,Mfo,Efo,k,es,zde,Cfo,wfo,HI,Afo,yfo,JI,Lfo,xfo,$fo,os,Qde,kfo,Sfo,YI,Rfo,Pfo,KI,Bfo,Ifo,Nfo,rs,Wde,qfo,jfo,ZI,Dfo,Gfo,eN,Ofo,Vfo,Xfo,Rh,Ude,zfo,Qfo,oN,Wfo,Ufo,Hfo,ts,Hde,Jfo,Yfo,rN,Kfo,Zfo,tN,emo,omo,rmo,Ph,Jde,tmo,amo,aN,nmo,smo,lmo,Bh,Yde,imo,dmo,nN,cmo,fmo,mmo,Ih,Kde,gmo,hmo,sN,pmo,umo,_mo,as,Zde,bmo,vmo,lN,Fmo,Tmo,iN,Mmo,Emo,Cmo,ns,ece,wmo,Amo,dN,ymo,Lmo,cN,xmo,$mo,kmo,ss,oce,Smo,Rmo,fN,Pmo,Bmo,mN,Imo,Nmo,qmo,Nh,rce,jmo,Dmo,gN,Gmo,Omo,Vmo,qh,tce,Xmo,zmo,hN,Qmo,Wmo,Umo,jh,ace,Hmo,Jmo,pN,Ymo,Kmo,Zmo,ls,nce,ego,ogo,uN,rgo,tgo,_N,ago,ngo,sgo,Dh,sce,lgo,igo,bN,dgo,cgo,fgo,is,lce,mgo,ggo,vN,hgo,pgo,FN,ugo,_go,bgo,ds,ice,vgo,Fgo,TN,Tgo,Mgo,MN,Ego,Cgo,wgo,cs,dce,Ago,ygo,EN,Lgo,xgo,CN,$go,kgo,Sgo,fs,cce,Rgo,Pgo,wN,Bgo,Igo,AN,Ngo,qgo,jgo,Gh,fce,Dgo,Ggo,yN,Ogo,Vgo,Xgo,ms,mce,zgo,Qgo,LN,Wgo,Ugo,xN,Hgo,Jgo,Ygo,gs,gce,Kgo,Zgo,$N,eho,oho,kN,rho,tho,aho,hs,hce,nho,sho,SN,lho,iho,RN,dho,cho,fho,ps,pce,mho,gho,PN,hho,pho,BN,uho,_ho,bho,us,uce,vho,Fho,IN,Tho,Mho,NN,Eho,Cho,who,_s,_ce,Aho,yho,qN,Lho,xho,jN,$ho,kho,Sho,Oh,bce,Rho,Pho,DN,Bho,Iho,Nho,bs,vce,qho,jho,GN,Dho,Gho,ON,Oho,Vho,Xho,Vh,Fce,zho,Qho,VN,Who,Uho,Hho,vs,Tce,Jho,Yho,XN,Kho,Zho,zN,epo,opo,rpo,Fs,Mce,tpo,apo,QN,npo,spo,WN,lpo,ipo,dpo,Ts,Ece,cpo,fpo,UN,mpo,gpo,HN,hpo,ppo,upo,Xh,Cce,_po,bpo,JN,vpo,Fpo,Tpo,Ms,wce,Mpo,Epo,YN,Cpo,wpo,KN,Apo,ypo,Lpo,Es,Ace,xpo,$po,ZN,kpo,Spo,eq,Rpo,Ppo,Bpo,Cs,yce,Ipo,Npo,oq,qpo,jpo,rq,Dpo,Gpo,Opo,zh,Lce,Vpo,Xpo,tq,zpo,Qpo,Wpo,ws,xce,Upo,Hpo,aq,Jpo,Ypo,nq,Kpo,Zpo,euo,As,$ce,ouo,ruo,sq,tuo,auo,lq,nuo,suo,luo,ys,kce,iuo,duo,iq,cuo,fuo,dq,muo,guo,huo,Ls,Sce,puo,uuo,cq,_uo,buo,fq,vuo,Fuo,Tuo,xs,Rce,Muo,Euo,mq,Cuo,wuo,gq,Auo,yuo,Luo,$s,Pce,xuo,$uo,hq,kuo,Suo,pq,Ruo,Puo,Buo,ks,Bce,Iuo,Nuo,uq,quo,juo,_q,Duo,Guo,Ouo,Ss,Ice,Vuo,Xuo,bq,zuo,Quo,vq,Wuo,Uuo,Huo,Qh,Nce,Juo,Yuo,Fq,Kuo,Zuo,e_o,Rs,qce,o_o,r_o,Tq,t_o,a_o,Mq,n_o,s_o,l_o,Wh,jce,i_o,d_o,Eq,c_o,f_o,m_o,Uh,Dce,g_o,h_o,Cq,p_o,u_o,__o,Ps,Gce,b_o,v_o,wq,F_o,T_o,Aq,M_o,E_o,C_o,Bs,Oce,w_o,A_o,yq,y_o,L_o,Lq,x_o,$_o,k_o,Is,Vce,S_o,R_o,xq,P_o,B_o,$q,I_o,N_o,q_o,Hh,Xce,j_o,D_o,kq,G_o,O_o,V_o,Ns,zce,X_o,z_o,Sq,Q_o,W_o,Rq,U_o,H_o,J_o,qs,Qce,Y_o,K_o,Pq,Z_o,e1o,Bq,o1o,r1o,t1o,js,Wce,a1o,n1o,Iq,s1o,l1o,Nq,i1o,d1o,c1o,Ds,Uce,f1o,m1o,qq,g1o,h1o,jq,p1o,u1o,_1o,Gs,Hce,b1o,v1o,Dq,F1o,T1o,Gq,M1o,E1o,C1o,Os,Jce,w1o,A1o,Oq,y1o,L1o,Vq,x1o,$1o,k1o,Vs,Yce,S1o,R1o,Xq,P1o,B1o,zq,I1o,N1o,q1o,Xs,Kce,j1o,D1o,Qq,G1o,O1o,Wq,V1o,X1o,z1o,Jh,Zce,Q1o,W1o,Uq,U1o,H1o,J1o,zs,efe,Y1o,K1o,Hq,Z1o,e4o,Jq,o4o,r4o,t4o,Qs,ofe,a4o,n4o,Yq,s4o,l4o,Kq,i4o,d4o,c4o,Yh,rfe,f4o,m4o,Zq,g4o,h4o,p4o,Kh,tfe,u4o,_4o,ej,b4o,v4o,F4o,Zh,afe,T4o,M4o,oj,E4o,C4o,w4o,ep,nfe,A4o,y4o,rj,L4o,x4o,$4o,Ws,sfe,k4o,S4o,tj,R4o,P4o,aj,B4o,I4o,N4o,op,lfe,q4o,j4o,nj,D4o,G4o,O4o,Us,ife,V4o,X4o,sj,z4o,Q4o,lj,W4o,U4o,H4o,Hs,dfe,J4o,Y4o,ij,K4o,Z4o,dj,e2o,o2o,r2o,Js,cfe,t2o,a2o,cj,n2o,s2o,fj,l2o,i2o,d2o,Ys,ffe,c2o,f2o,mj,m2o,g2o,gj,h2o,p2o,u2o,Ks,mfe,_2o,b2o,hj,v2o,F2o,pj,T2o,M2o,E2o,Zs,gfe,C2o,w2o,uj,A2o,y2o,_j,L2o,x2o,$2o,rp,hfe,k2o,S2o,bj,R2o,P2o,B2o,tp,pfe,I2o,N2o,vj,q2o,j2o,D2o,el,ufe,G2o,O2o,Fj,V2o,X2o,Tj,z2o,Q2o,W2o,ol,_fe,U2o,H2o,Mj,J2o,Y2o,Ej,K2o,Z2o,ebo,rl,bfe,obo,rbo,Cj,tbo,abo,wj,nbo,sbo,lbo,ap,vfe,ibo,dbo,Aj,cbo,fbo,mbo,np,Ffe,gbo,hbo,yj,pbo,ubo,_bo,sp,Tfe,bbo,vbo,Lj,Fbo,Tbo,Mbo,tl,Mfe,Ebo,Cbo,xj,wbo,Abo,$j,ybo,Lbo,xbo,al,Efe,$bo,kbo,kj,Sbo,Rbo,Sj,Pbo,Bbo,Ibo,lp,Cfe,Nbo,qbo,Rj,jbo,Dbo,Gbo,ip,wfe,Obo,Vbo,Pj,Xbo,zbo,Qbo,dp,Afe,Wbo,Ubo,Bj,Hbo,Jbo,Ybo,nl,yfe,Kbo,Zbo,Ij,evo,ovo,Nj,rvo,tvo,avo,cp,Lfe,nvo,svo,qj,lvo,ivo,dvo,fp,xfe,cvo,fvo,jj,mvo,gvo,hvo,sl,$fe,pvo,uvo,Dj,_vo,bvo,Gj,vvo,Fvo,Tvo,ll,kfe,Mvo,Evo,Oj,Cvo,wvo,Vj,Avo,yvo,Lvo,il,Sfe,xvo,$vo,Xj,kvo,Svo,zj,Rvo,Pvo,Bvo,dl,Rfe,Ivo,Nvo,Qj,qvo,jvo,Wj,Dvo,Gvo,Ovo,mp,Vvo,gp,XL,Xvo,Pfe,zvo,OUe,nd,hp,Bfe,zL,Qvo,Ife,Wvo,VUe,ko,QL,Uvo,WL,Hvo,Uj,Jvo,Yvo,Kvo,UL,Zvo,Nfe,eFo,oFo,rFo,He,HL,tFo,qfe,aFo,nFo,Qa,sFo,jfe,lFo,iFo,Dfe,dFo,cFo,Gfe,fFo,mFo,gFo,W,pp,Ofe,hFo,pFo,Hj,uFo,_Fo,bFo,up,Vfe,vFo,FFo,Jj,TFo,MFo,EFo,_p,Xfe,CFo,wFo,Yj,AFo,yFo,LFo,bp,zfe,xFo,$Fo,Kj,kFo,SFo,RFo,vp,Qfe,PFo,BFo,Zj,IFo,NFo,qFo,Fp,Wfe,jFo,DFo,eD,GFo,OFo,VFo,Tp,Ufe,XFo,zFo,oD,QFo,WFo,UFo,Mp,Hfe,HFo,JFo,rD,YFo,KFo,ZFo,Ep,Jfe,eTo,oTo,tD,rTo,tTo,aTo,Cp,Yfe,nTo,sTo,aD,lTo,iTo,dTo,wp,Kfe,cTo,fTo,nD,mTo,gTo,hTo,Ap,Zfe,pTo,uTo,sD,_To,bTo,vTo,yp,eme,FTo,TTo,lD,MTo,ETo,CTo,Lp,ome,wTo,ATo,iD,yTo,LTo,xTo,xp,rme,$To,kTo,dD,STo,RTo,PTo,$p,tme,BTo,ITo,cD,NTo,qTo,jTo,kp,ame,DTo,GTo,fD,OTo,VTo,XTo,Sp,nme,zTo,QTo,mD,WTo,UTo,HTo,Rp,sme,JTo,YTo,gD,KTo,ZTo,e8o,Pp,lme,o8o,r8o,hD,t8o,a8o,n8o,Bp,ime,s8o,l8o,pD,i8o,d8o,c8o,Ip,dme,f8o,m8o,uD,g8o,h8o,p8o,Np,cme,u8o,_8o,_D,b8o,v8o,F8o,qp,fme,T8o,M8o,bD,E8o,C8o,w8o,jp,mme,A8o,y8o,vD,L8o,x8o,$8o,Dp,gme,k8o,S8o,FD,R8o,P8o,B8o,Gp,hme,I8o,N8o,TD,q8o,j8o,D8o,Op,pme,G8o,O8o,MD,V8o,X8o,z8o,Vp,ume,Q8o,W8o,ED,U8o,H8o,J8o,Xp,_me,Y8o,K8o,CD,Z8o,eMo,oMo,zp,bme,rMo,tMo,wD,aMo,nMo,sMo,Qp,vme,lMo,iMo,AD,dMo,cMo,fMo,Wp,Fme,mMo,gMo,yD,hMo,pMo,uMo,Up,Tme,_Mo,bMo,LD,vMo,FMo,TMo,Hp,Mme,MMo,EMo,xD,CMo,wMo,AMo,Jp,Eme,yMo,LMo,$D,xMo,$Mo,kMo,Yp,Cme,SMo,RMo,kD,PMo,BMo,IMo,Kp,wme,NMo,qMo,SD,jMo,DMo,GMo,Zp,OMo,eu,VMo,ou,JL,XMo,Ame,zMo,XUe,sd,ru,yme,YL,QMo,Lme,WMo,zUe,So,KL,UMo,ZL,HMo,RD,JMo,YMo,KMo,e9,ZMo,xme,eEo,oEo,rEo,Je,o9,tEo,$me,aEo,nEo,ld,sEo,kme,lEo,iEo,Sme,dEo,cEo,fEo,ie,tu,Rme,mEo,gEo,PD,hEo,pEo,uEo,au,Pme,_Eo,bEo,BD,vEo,FEo,TEo,nu,Bme,MEo,EEo,ID,CEo,wEo,AEo,su,Ime,yEo,LEo,ND,xEo,$Eo,kEo,lu,Nme,SEo,REo,qD,PEo,BEo,IEo,iu,qme,NEo,qEo,jD,jEo,DEo,GEo,du,jme,OEo,VEo,DD,XEo,zEo,QEo,cu,Dme,WEo,UEo,GD,HEo,JEo,YEo,fu,Gme,KEo,ZEo,OD,eCo,oCo,rCo,mu,Ome,tCo,aCo,VD,nCo,sCo,lCo,gu,Vme,iCo,dCo,XD,cCo,fCo,mCo,hu,Xme,gCo,hCo,zD,pCo,uCo,_Co,pu,zme,bCo,vCo,QD,FCo,TCo,MCo,uu,Qme,ECo,CCo,WD,wCo,ACo,yCo,_u,Wme,LCo,xCo,UD,$Co,kCo,SCo,bu,Ume,RCo,PCo,HD,BCo,ICo,NCo,vu,Hme,qCo,jCo,JD,DCo,GCo,OCo,Fu,Jme,VCo,XCo,YD,zCo,QCo,WCo,Tu,Yme,UCo,HCo,KD,JCo,YCo,KCo,Mu,Kme,ZCo,e3o,ZD,o3o,r3o,t3o,Eu,a3o,Cu,n3o,wu,r9,s3o,Zme,l3o,QUe,id,Au,ege,t9,i3o,oge,d3o,WUe,Ro,a9,c3o,dd,f3o,eG,m3o,g3o,oG,h3o,p3o,u3o,n9,_3o,rge,b3o,v3o,F3o,ht,s9,T3o,tge,M3o,E3o,cd,C3o,age,w3o,A3o,rG,y3o,L3o,x3o,yu,$3o,Ye,l9,k3o,nge,S3o,R3o,Wa,P3o,sge,B3o,I3o,lge,N3o,q3o,ige,j3o,D3o,G3o,L,Lu,dge,O3o,V3o,tG,X3o,z3o,Q3o,xu,cge,W3o,U3o,aG,H3o,J3o,Y3o,$u,fge,K3o,Z3o,nG,e5o,o5o,r5o,ku,mge,t5o,a5o,sG,n5o,s5o,l5o,Su,gge,i5o,d5o,lG,c5o,f5o,m5o,Ru,hge,g5o,h5o,iG,p5o,u5o,_5o,Pu,pge,b5o,v5o,dG,F5o,T5o,M5o,Bu,uge,E5o,C5o,cG,w5o,A5o,y5o,Iu,_ge,L5o,x5o,fG,$5o,k5o,S5o,Nu,bge,R5o,P5o,mG,B5o,I5o,N5o,qu,vge,q5o,j5o,gG,D5o,G5o,O5o,ju,Fge,V5o,X5o,hG,z5o,Q5o,W5o,Du,Tge,U5o,H5o,pG,J5o,Y5o,K5o,Gu,Mge,Z5o,e0o,uG,o0o,r0o,t0o,Ou,Ege,a0o,n0o,_G,s0o,l0o,i0o,Vu,Cge,d0o,c0o,bG,f0o,m0o,g0o,Xu,wge,h0o,p0o,vG,u0o,_0o,b0o,zu,Age,v0o,F0o,FG,T0o,M0o,E0o,Qu,yge,C0o,w0o,TG,A0o,y0o,L0o,Wu,Lge,x0o,$0o,MG,k0o,S0o,R0o,Uu,xge,P0o,B0o,EG,I0o,N0o,q0o,Hu,$ge,j0o,D0o,CG,G0o,O0o,V0o,Ju,kge,X0o,z0o,wG,Q0o,W0o,U0o,Yu,Sge,H0o,J0o,AG,Y0o,K0o,Z0o,Ku,Rge,ewo,owo,yG,rwo,two,awo,Zu,Pge,nwo,swo,LG,lwo,iwo,dwo,e_,Bge,cwo,fwo,xG,mwo,gwo,hwo,o_,Ige,pwo,uwo,$G,_wo,bwo,vwo,r_,Nge,Fwo,Two,kG,Mwo,Ewo,Cwo,t_,qge,wwo,Awo,SG,ywo,Lwo,xwo,a_,jge,$wo,kwo,RG,Swo,Rwo,Pwo,n_,Dge,Bwo,Iwo,PG,Nwo,qwo,jwo,s_,Gge,Dwo,Gwo,BG,Owo,Vwo,Xwo,l_,Oge,zwo,Qwo,IG,Wwo,Uwo,Hwo,i_,Vge,Jwo,Ywo,NG,Kwo,Zwo,eAo,cl,Xge,oAo,rAo,qG,tAo,aAo,jG,nAo,sAo,lAo,d_,zge,iAo,dAo,DG,cAo,fAo,mAo,c_,Qge,gAo,hAo,GG,pAo,uAo,_Ao,f_,Wge,bAo,vAo,OG,FAo,TAo,MAo,m_,Uge,EAo,CAo,VG,wAo,AAo,yAo,g_,Hge,LAo,xAo,XG,$Ao,kAo,SAo,h_,Jge,RAo,PAo,zG,BAo,IAo,NAo,p_,Yge,qAo,jAo,QG,DAo,GAo,OAo,u_,Kge,VAo,XAo,WG,zAo,QAo,WAo,__,Zge,UAo,HAo,UG,JAo,YAo,KAo,b_,ehe,ZAo,e6o,HG,o6o,r6o,t6o,v_,ohe,a6o,n6o,JG,s6o,l6o,i6o,F_,rhe,d6o,c6o,YG,f6o,m6o,g6o,T_,the,h6o,p6o,KG,u6o,_6o,b6o,M_,ahe,v6o,F6o,ZG,T6o,M6o,E6o,E_,nhe,C6o,w6o,eO,A6o,y6o,L6o,C_,she,x6o,$6o,oO,k6o,S6o,R6o,w_,lhe,P6o,B6o,rO,I6o,N6o,q6o,A_,ihe,j6o,D6o,tO,G6o,O6o,V6o,y_,dhe,X6o,z6o,aO,Q6o,W6o,U6o,L_,che,H6o,J6o,nO,Y6o,K6o,Z6o,x_,fhe,e7o,o7o,sO,r7o,t7o,a7o,$_,mhe,n7o,s7o,lO,l7o,i7o,d7o,k_,ghe,c7o,f7o,iO,m7o,g7o,h7o,S_,hhe,p7o,u7o,dO,_7o,b7o,v7o,R_,phe,F7o,T7o,cO,M7o,E7o,C7o,P_,uhe,w7o,A7o,fO,y7o,L7o,x7o,B_,_he,$7o,k7o,mO,S7o,R7o,P7o,I_,bhe,B7o,I7o,gO,N7o,q7o,j7o,N_,vhe,D7o,G7o,hO,O7o,V7o,X7o,q_,Fhe,z7o,Q7o,pO,W7o,U7o,H7o,j_,The,J7o,Y7o,uO,K7o,Z7o,eyo,D_,Mhe,oyo,ryo,_O,tyo,ayo,nyo,G_,Ehe,syo,lyo,bO,iyo,dyo,cyo,O_,Che,fyo,myo,vO,gyo,hyo,pyo,V_,whe,uyo,_yo,FO,byo,vyo,Fyo,X_,Ahe,Tyo,Myo,TO,Eyo,Cyo,wyo,z_,yhe,Ayo,yyo,MO,Lyo,xyo,$yo,Q_,Lhe,kyo,Syo,EO,Ryo,Pyo,Byo,W_,xhe,Iyo,Nyo,CO,qyo,jyo,Dyo,U_,$he,Gyo,Oyo,wO,Vyo,Xyo,zyo,H_,khe,Qyo,Wyo,AO,Uyo,Hyo,Jyo,J_,She,Yyo,Kyo,yO,Zyo,eLo,oLo,Y_,Rhe,rLo,tLo,LO,aLo,nLo,sLo,K_,Phe,lLo,iLo,xO,dLo,cLo,fLo,Z_,Bhe,mLo,gLo,$O,hLo,pLo,uLo,e1,Ihe,_Lo,bLo,kO,vLo,FLo,TLo,o1,Nhe,MLo,ELo,SO,CLo,wLo,ALo,r1,qhe,yLo,LLo,RO,xLo,$Lo,kLo,t1,jhe,SLo,RLo,PO,PLo,BLo,ILo,a1,Dhe,NLo,qLo,BO,jLo,DLo,GLo,n1,Ghe,OLo,VLo,IO,XLo,zLo,QLo,s1,Ohe,WLo,ULo,NO,HLo,JLo,YLo,l1,Vhe,KLo,ZLo,qO,e9o,o9o,r9o,i1,Xhe,t9o,a9o,jO,n9o,s9o,l9o,d1,zhe,i9o,d9o,DO,c9o,f9o,m9o,c1,Qhe,g9o,h9o,GO,p9o,u9o,_9o,f1,Whe,b9o,v9o,OO,F9o,T9o,M9o,m1,Uhe,E9o,C9o,VO,w9o,A9o,y9o,g1,Hhe,L9o,x9o,XO,$9o,k9o,S9o,h1,Jhe,R9o,P9o,zO,B9o,I9o,N9o,p1,Yhe,q9o,j9o,QO,D9o,G9o,O9o,u1,Khe,V9o,X9o,WO,z9o,Q9o,W9o,_1,Zhe,U9o,H9o,UO,J9o,Y9o,K9o,b1,epe,Z9o,exo,HO,oxo,rxo,txo,v1,ope,axo,nxo,JO,sxo,lxo,ixo,F1,rpe,dxo,cxo,YO,fxo,mxo,gxo,T1,tpe,hxo,pxo,KO,uxo,_xo,bxo,M1,ape,vxo,Fxo,ZO,Txo,Mxo,Exo,E1,npe,Cxo,wxo,eV,Axo,yxo,Lxo,C1,spe,xxo,$xo,oV,kxo,Sxo,Rxo,w1,lpe,Pxo,Bxo,rV,Ixo,Nxo,qxo,A1,ipe,jxo,Dxo,tV,Gxo,Oxo,Vxo,y1,dpe,Xxo,zxo,aV,Qxo,Wxo,Uxo,L1,cpe,Hxo,Jxo,nV,Yxo,Kxo,Zxo,x1,fpe,e$o,o$o,sV,r$o,t$o,a$o,$1,mpe,n$o,s$o,lV,l$o,i$o,d$o,k1,gpe,c$o,f$o,iV,m$o,g$o,h$o,S1,hpe,p$o,u$o,dV,_$o,b$o,v$o,R1,ppe,F$o,T$o,cV,M$o,E$o,C$o,P1,upe,w$o,A$o,fV,y$o,L$o,x$o,B1,$$o,_pe,k$o,S$o,bpe,R$o,P$o,I1,UUe,fd,N1,vpe,i9,B$o,Fpe,I$o,HUe,Po,d9,N$o,md,q$o,mV,j$o,D$o,gV,G$o,O$o,V$o,c9,X$o,Tpe,z$o,Q$o,W$o,pt,f9,U$o,Mpe,H$o,J$o,gd,Y$o,Epe,K$o,Z$o,hV,eko,oko,rko,q1,tko,Ke,m9,ako,Cpe,nko,sko,Ua,lko,wpe,iko,dko,Ape,cko,fko,ype,mko,gko,hko,G,j1,Lpe,pko,uko,pV,_ko,bko,vko,D1,xpe,Fko,Tko,uV,Mko,Eko,Cko,G1,$pe,wko,Ako,_V,yko,Lko,xko,O1,kpe,$ko,kko,bV,Sko,Rko,Pko,V1,Spe,Bko,Iko,vV,Nko,qko,jko,X1,Rpe,Dko,Gko,FV,Oko,Vko,Xko,z1,Ppe,zko,Qko,TV,Wko,Uko,Hko,Q1,Bpe,Jko,Yko,MV,Kko,Zko,eSo,W1,Ipe,oSo,rSo,EV,tSo,aSo,nSo,U1,Npe,sSo,lSo,CV,iSo,dSo,cSo,H1,qpe,fSo,mSo,wV,gSo,hSo,pSo,J1,jpe,uSo,_So,AV,bSo,vSo,FSo,Y1,Dpe,TSo,MSo,yV,ESo,CSo,wSo,K1,Gpe,ASo,ySo,LV,LSo,xSo,$So,Z1,Ope,kSo,SSo,xV,RSo,PSo,BSo,e4,Vpe,ISo,NSo,$V,qSo,jSo,DSo,o4,Xpe,GSo,OSo,kV,VSo,XSo,zSo,r4,zpe,QSo,WSo,SV,USo,HSo,JSo,t4,Qpe,YSo,KSo,RV,ZSo,eRo,oRo,a4,Wpe,rRo,tRo,PV,aRo,nRo,sRo,n4,Upe,lRo,iRo,BV,dRo,cRo,fRo,s4,Hpe,mRo,gRo,IV,hRo,pRo,uRo,l4,Jpe,_Ro,bRo,NV,vRo,FRo,TRo,i4,Ype,MRo,ERo,qV,CRo,wRo,ARo,d4,Kpe,yRo,LRo,jV,xRo,$Ro,kRo,c4,Zpe,SRo,RRo,DV,PRo,BRo,IRo,f4,eue,NRo,qRo,GV,jRo,DRo,GRo,m4,oue,ORo,VRo,OV,XRo,zRo,QRo,g4,rue,WRo,URo,VV,HRo,JRo,YRo,h4,tue,KRo,ZRo,XV,ePo,oPo,rPo,p4,aue,tPo,aPo,zV,nPo,sPo,lPo,u4,nue,iPo,dPo,QV,cPo,fPo,mPo,_4,sue,gPo,hPo,WV,pPo,uPo,_Po,b4,lue,bPo,vPo,UV,FPo,TPo,MPo,v4,iue,EPo,CPo,HV,wPo,APo,yPo,F4,due,LPo,xPo,JV,$Po,kPo,SPo,T4,cue,RPo,PPo,YV,BPo,IPo,NPo,M4,fue,qPo,jPo,KV,DPo,GPo,OPo,E4,mue,VPo,XPo,ZV,zPo,QPo,WPo,C4,gue,UPo,HPo,eX,JPo,YPo,KPo,w4,hue,ZPo,eBo,oX,oBo,rBo,tBo,A4,pue,aBo,nBo,rX,sBo,lBo,iBo,y4,uue,dBo,cBo,tX,fBo,mBo,gBo,L4,_ue,hBo,pBo,aX,uBo,_Bo,bBo,x4,bue,vBo,FBo,nX,TBo,MBo,EBo,$4,vue,CBo,wBo,sX,ABo,yBo,LBo,k4,Fue,xBo,$Bo,lX,kBo,SBo,RBo,S4,PBo,Tue,BBo,IBo,Mue,NBo,qBo,R4,JUe,hd,P4,Eue,g9,jBo,Cue,DBo,YUe,Bo,h9,GBo,pd,OBo,iX,VBo,XBo,dX,zBo,QBo,WBo,p9,UBo,wue,HBo,JBo,YBo,ut,u9,KBo,Aue,ZBo,eIo,ud,oIo,yue,rIo,tIo,cX,aIo,nIo,sIo,B4,lIo,Ze,_9,iIo,Lue,dIo,cIo,Ha,fIo,xue,mIo,gIo,$ue,hIo,pIo,kue,uIo,_Io,bIo,z,I4,Sue,vIo,FIo,fX,TIo,MIo,EIo,N4,Rue,CIo,wIo,mX,AIo,yIo,LIo,q4,Pue,xIo,$Io,gX,kIo,SIo,RIo,j4,Bue,PIo,BIo,hX,IIo,NIo,qIo,D4,Iue,jIo,DIo,pX,GIo,OIo,VIo,G4,Nue,XIo,zIo,uX,QIo,WIo,UIo,O4,que,HIo,JIo,_X,YIo,KIo,ZIo,V4,jue,eNo,oNo,bX,rNo,tNo,aNo,X4,Due,nNo,sNo,vX,lNo,iNo,dNo,z4,Gue,cNo,fNo,FX,mNo,gNo,hNo,Q4,Oue,pNo,uNo,TX,_No,bNo,vNo,W4,Vue,FNo,TNo,MX,MNo,ENo,CNo,U4,Xue,wNo,ANo,EX,yNo,LNo,xNo,H4,zue,$No,kNo,CX,SNo,RNo,PNo,J4,Que,BNo,INo,wX,NNo,qNo,jNo,Y4,Wue,DNo,GNo,AX,ONo,VNo,XNo,K4,Uue,zNo,QNo,yX,WNo,UNo,HNo,Z4,Hue,JNo,YNo,LX,KNo,ZNo,eqo,e2,Jue,oqo,rqo,xX,tqo,aqo,nqo,o2,Yue,sqo,lqo,$X,iqo,dqo,cqo,r2,Kue,fqo,mqo,kX,gqo,hqo,pqo,t2,Zue,uqo,_qo,SX,bqo,vqo,Fqo,a2,e_e,Tqo,Mqo,RX,Eqo,Cqo,wqo,n2,o_e,Aqo,yqo,PX,Lqo,xqo,$qo,s2,r_e,kqo,Sqo,BX,Rqo,Pqo,Bqo,l2,t_e,Iqo,Nqo,IX,qqo,jqo,Dqo,i2,a_e,Gqo,Oqo,NX,Vqo,Xqo,zqo,d2,n_e,Qqo,Wqo,qX,Uqo,Hqo,Jqo,c2,s_e,Yqo,Kqo,jX,Zqo,ejo,ojo,f2,l_e,rjo,tjo,DX,ajo,njo,sjo,m2,i_e,ljo,ijo,GX,djo,cjo,fjo,g2,d_e,mjo,gjo,OX,hjo,pjo,ujo,h2,c_e,_jo,bjo,VX,vjo,Fjo,Tjo,p2,f_e,Mjo,Ejo,XX,Cjo,wjo,Ajo,u2,m_e,yjo,Ljo,zX,xjo,$jo,kjo,_2,g_e,Sjo,Rjo,QX,Pjo,Bjo,Ijo,b2,h_e,Njo,qjo,WX,jjo,Djo,Gjo,v2,p_e,Ojo,Vjo,UX,Xjo,zjo,Qjo,F2,u_e,Wjo,Ujo,HX,Hjo,Jjo,Yjo,T2,__e,Kjo,Zjo,JX,eDo,oDo,rDo,M2,tDo,b_e,aDo,nDo,v_e,sDo,lDo,E2,KUe,_d,C2,F_e,b9,iDo,T_e,dDo,ZUe,Io,v9,cDo,bd,fDo,YX,mDo,gDo,KX,hDo,pDo,uDo,F9,_Do,M_e,bDo,vDo,FDo,_t,T9,TDo,E_e,MDo,EDo,vd,CDo,C_e,wDo,ADo,ZX,yDo,LDo,xDo,w2,$Do,eo,M9,kDo,w_e,SDo,RDo,Ja,PDo,A_e,BDo,IDo,y_e,NDo,qDo,L_e,jDo,DDo,GDo,U,A2,x_e,ODo,VDo,ez,XDo,zDo,QDo,y2,$_e,WDo,UDo,oz,HDo,JDo,YDo,L2,k_e,KDo,ZDo,rz,eGo,oGo,rGo,x2,S_e,tGo,aGo,tz,nGo,sGo,lGo,$2,R_e,iGo,dGo,az,cGo,fGo,mGo,k2,P_e,gGo,hGo,nz,pGo,uGo,_Go,S2,B_e,bGo,vGo,sz,FGo,TGo,MGo,R2,I_e,EGo,CGo,lz,wGo,AGo,yGo,P2,N_e,LGo,xGo,iz,$Go,kGo,SGo,B2,q_e,RGo,PGo,dz,BGo,IGo,NGo,I2,j_e,qGo,jGo,cz,DGo,GGo,OGo,N2,D_e,VGo,XGo,fz,zGo,QGo,WGo,q2,G_e,UGo,HGo,mz,JGo,YGo,KGo,j2,O_e,ZGo,eOo,gz,oOo,rOo,tOo,D2,V_e,aOo,nOo,hz,sOo,lOo,iOo,G2,X_e,dOo,cOo,pz,fOo,mOo,gOo,O2,z_e,hOo,pOo,uz,uOo,_Oo,bOo,V2,Q_e,vOo,FOo,_z,TOo,MOo,EOo,X2,W_e,COo,wOo,bz,AOo,yOo,LOo,z2,U_e,xOo,$Oo,vz,kOo,SOo,ROo,Q2,H_e,POo,BOo,Fz,IOo,NOo,qOo,W2,J_e,jOo,DOo,Tz,GOo,OOo,VOo,U2,Y_e,XOo,zOo,Mz,QOo,WOo,UOo,H2,K_e,HOo,JOo,Ez,YOo,KOo,ZOo,J2,Z_e,eVo,oVo,Cz,rVo,tVo,aVo,Y2,e1e,nVo,sVo,wz,lVo,iVo,dVo,K2,o1e,cVo,fVo,Az,mVo,gVo,hVo,Z2,r1e,pVo,uVo,yz,_Vo,bVo,vVo,eb,t1e,FVo,TVo,Lz,MVo,EVo,CVo,ob,a1e,wVo,AVo,xz,yVo,LVo,xVo,rb,n1e,$Vo,kVo,$z,SVo,RVo,PVo,tb,s1e,BVo,IVo,kz,NVo,qVo,jVo,ab,l1e,DVo,GVo,Sz,OVo,VVo,XVo,nb,i1e,zVo,QVo,d1e,WVo,UVo,HVo,sb,c1e,JVo,YVo,Rz,KVo,ZVo,eXo,lb,f1e,oXo,rXo,Pz,tXo,aXo,nXo,ib,m1e,sXo,lXo,Bz,iXo,dXo,cXo,db,g1e,fXo,mXo,Iz,gXo,hXo,pXo,cb,uXo,h1e,_Xo,bXo,p1e,vXo,FXo,fb,eHe,Fd,mb,u1e,E9,TXo,_1e,MXo,oHe,No,C9,EXo,Td,CXo,Nz,wXo,AXo,qz,yXo,LXo,xXo,w9,$Xo,b1e,kXo,SXo,RXo,bt,A9,PXo,v1e,BXo,IXo,Md,NXo,F1e,qXo,jXo,jz,DXo,GXo,OXo,gb,VXo,oo,y9,XXo,T1e,zXo,QXo,Ya,WXo,M1e,UXo,HXo,E1e,JXo,YXo,C1e,KXo,ZXo,ezo,me,hb,w1e,ozo,rzo,Dz,tzo,azo,nzo,pb,A1e,szo,lzo,Gz,izo,dzo,czo,ub,y1e,fzo,mzo,Oz,gzo,hzo,pzo,_b,L1e,uzo,_zo,Vz,bzo,vzo,Fzo,bb,x1e,Tzo,Mzo,Xz,Ezo,Czo,wzo,vb,$1e,Azo,yzo,zz,Lzo,xzo,$zo,Fb,k1e,kzo,Szo,Qz,Rzo,Pzo,Bzo,Tb,S1e,Izo,Nzo,Wz,qzo,jzo,Dzo,Mb,R1e,Gzo,Ozo,Uz,Vzo,Xzo,zzo,Eb,P1e,Qzo,Wzo,Hz,Uzo,Hzo,Jzo,Cb,B1e,Yzo,Kzo,Jz,Zzo,eQo,oQo,wb,I1e,rQo,tQo,Yz,aQo,nQo,sQo,Ab,N1e,lQo,iQo,Kz,dQo,cQo,fQo,yb,q1e,mQo,gQo,Zz,hQo,pQo,uQo,Lb,j1e,_Qo,bQo,eQ,vQo,FQo,TQo,xb,D1e,MQo,EQo,oQ,CQo,wQo,AQo,$b,G1e,yQo,LQo,rQ,xQo,$Qo,kQo,kb,O1e,SQo,RQo,tQ,PQo,BQo,IQo,Sb,V1e,NQo,qQo,aQ,jQo,DQo,GQo,Rb,OQo,X1e,VQo,XQo,z1e,zQo,QQo,Pb,rHe,Ed,Bb,Q1e,L9,WQo,W1e,UQo,tHe,qo,x9,HQo,Cd,JQo,nQ,YQo,KQo,sQ,ZQo,eWo,oWo,$9,rWo,U1e,tWo,aWo,nWo,vt,k9,sWo,H1e,lWo,iWo,wd,dWo,J1e,cWo,fWo,lQ,mWo,gWo,hWo,Ib,pWo,ro,S9,uWo,Y1e,_Wo,bWo,Ka,vWo,K1e,FWo,TWo,Z1e,MWo,EWo,e4e,CWo,wWo,AWo,N,Nb,o4e,yWo,LWo,iQ,xWo,$Wo,kWo,qb,r4e,SWo,RWo,dQ,PWo,BWo,IWo,jb,t4e,NWo,qWo,cQ,jWo,DWo,GWo,Db,a4e,OWo,VWo,fQ,XWo,zWo,QWo,Gb,n4e,WWo,UWo,mQ,HWo,JWo,YWo,Ob,s4e,KWo,ZWo,gQ,eUo,oUo,rUo,Vb,l4e,tUo,aUo,hQ,nUo,sUo,lUo,Xb,i4e,iUo,dUo,pQ,cUo,fUo,mUo,zb,d4e,gUo,hUo,uQ,pUo,uUo,_Uo,Qb,c4e,bUo,vUo,_Q,FUo,TUo,MUo,Wb,f4e,EUo,CUo,bQ,wUo,AUo,yUo,Ub,m4e,LUo,xUo,vQ,$Uo,kUo,SUo,Hb,g4e,RUo,PUo,FQ,BUo,IUo,NUo,Jb,h4e,qUo,jUo,TQ,DUo,GUo,OUo,Yb,p4e,VUo,XUo,MQ,zUo,QUo,WUo,Kb,u4e,UUo,HUo,EQ,JUo,YUo,KUo,Zb,_4e,ZUo,eHo,CQ,oHo,rHo,tHo,ev,b4e,aHo,nHo,wQ,sHo,lHo,iHo,ov,v4e,dHo,cHo,AQ,fHo,mHo,gHo,rv,F4e,hHo,pHo,yQ,uHo,_Ho,bHo,tv,T4e,vHo,FHo,LQ,THo,MHo,EHo,av,M4e,CHo,wHo,xQ,AHo,yHo,LHo,nv,E4e,xHo,$Ho,$Q,kHo,SHo,RHo,sv,C4e,PHo,BHo,kQ,IHo,NHo,qHo,lv,w4e,jHo,DHo,SQ,GHo,OHo,VHo,iv,A4e,XHo,zHo,RQ,QHo,WHo,UHo,dv,y4e,HHo,JHo,PQ,YHo,KHo,ZHo,cv,L4e,eJo,oJo,BQ,rJo,tJo,aJo,fv,x4e,nJo,sJo,IQ,lJo,iJo,dJo,mv,$4e,cJo,fJo,NQ,mJo,gJo,hJo,gv,k4e,pJo,uJo,qQ,_Jo,bJo,vJo,hv,S4e,FJo,TJo,jQ,MJo,EJo,CJo,pv,R4e,wJo,AJo,DQ,yJo,LJo,xJo,uv,P4e,$Jo,kJo,GQ,SJo,RJo,PJo,_v,B4e,BJo,IJo,OQ,NJo,qJo,jJo,bv,I4e,DJo,GJo,VQ,OJo,VJo,XJo,vv,N4e,zJo,QJo,XQ,WJo,UJo,HJo,Fv,q4e,JJo,YJo,zQ,KJo,ZJo,eYo,Tv,j4e,oYo,rYo,QQ,tYo,aYo,nYo,Mv,D4e,sYo,lYo,WQ,iYo,dYo,cYo,Ev,G4e,fYo,mYo,UQ,gYo,hYo,pYo,Cv,O4e,uYo,_Yo,HQ,bYo,vYo,FYo,wv,V4e,TYo,MYo,JQ,EYo,CYo,wYo,Av,X4e,AYo,yYo,YQ,LYo,xYo,$Yo,yv,z4e,kYo,SYo,KQ,RYo,PYo,BYo,Lv,Q4e,IYo,NYo,ZQ,qYo,jYo,DYo,xv,W4e,GYo,OYo,eW,VYo,XYo,zYo,$v,U4e,QYo,WYo,oW,UYo,HYo,JYo,kv,H4e,YYo,KYo,rW,ZYo,eKo,oKo,Sv,J4e,rKo,tKo,tW,aKo,nKo,sKo,Rv,Y4e,lKo,iKo,aW,dKo,cKo,fKo,Pv,K4e,mKo,gKo,nW,hKo,pKo,uKo,Bv,_Ko,Z4e,bKo,vKo,e2e,FKo,TKo,Iv,aHe,Ad,Nv,o2e,R9,MKo,r2e,EKo,nHe,jo,P9,CKo,yd,wKo,sW,AKo,yKo,lW,LKo,xKo,$Ko,B9,kKo,t2e,SKo,RKo,PKo,Ft,I9,BKo,a2e,IKo,NKo,Ld,qKo,n2e,jKo,DKo,iW,GKo,OKo,VKo,qv,XKo,to,N9,zKo,s2e,QKo,WKo,Za,UKo,l2e,HKo,JKo,i2e,YKo,KKo,d2e,ZKo,eZo,oZo,Z,jv,c2e,rZo,tZo,dW,aZo,nZo,sZo,Dv,f2e,lZo,iZo,cW,dZo,cZo,fZo,Gv,m2e,mZo,gZo,fW,hZo,pZo,uZo,Ov,g2e,_Zo,bZo,mW,vZo,FZo,TZo,Vv,h2e,MZo,EZo,gW,CZo,wZo,AZo,Xv,p2e,yZo,LZo,hW,xZo,$Zo,kZo,zv,u2e,SZo,RZo,pW,PZo,BZo,IZo,Qv,_2e,NZo,qZo,uW,jZo,DZo,GZo,Wv,b2e,OZo,VZo,_W,XZo,zZo,QZo,Uv,v2e,WZo,UZo,bW,HZo,JZo,YZo,Hv,F2e,KZo,ZZo,vW,eer,oer,rer,Jv,T2e,ter,aer,FW,ner,ser,ler,Yv,M2e,ier,der,TW,cer,fer,mer,Kv,E2e,ger,her,MW,per,uer,_er,Zv,C2e,ber,ver,EW,Fer,Ter,Mer,eF,w2e,Eer,Cer,CW,wer,Aer,yer,oF,A2e,Ler,xer,wW,$er,ker,Ser,rF,y2e,Rer,Per,AW,Ber,Ier,Ner,tF,L2e,qer,jer,yW,Der,Ger,Oer,aF,x2e,Ver,Xer,LW,zer,Qer,Wer,nF,$2e,Uer,Her,xW,Jer,Yer,Ker,sF,k2e,Zer,eor,$W,oor,ror,tor,lF,S2e,aor,nor,kW,sor,lor,ior,iF,R2e,dor,cor,SW,mor,gor,hor,dF,P2e,por,uor,RW,_or,bor,vor,cF,B2e,For,Tor,PW,Mor,Eor,Cor,fF,I2e,wor,Aor,BW,yor,Lor,xor,mF,N2e,$or,kor,IW,Sor,Ror,Por,gF,q2e,Bor,Ior,NW,Nor,qor,jor,hF,j2e,Dor,Gor,qW,Oor,Vor,Xor,pF,D2e,zor,Qor,jW,Wor,Uor,Hor,uF,Jor,G2e,Yor,Kor,O2e,Zor,err,_F,sHe,xd,bF,V2e,q9,orr,X2e,rrr,lHe,Do,j9,trr,$d,arr,DW,nrr,srr,GW,lrr,irr,drr,D9,crr,z2e,frr,mrr,grr,Tt,G9,hrr,Q2e,prr,urr,kd,_rr,W2e,brr,vrr,OW,Frr,Trr,Mrr,vF,Err,ao,O9,Crr,U2e,wrr,Arr,en,yrr,H2e,Lrr,xrr,J2e,$rr,krr,Y2e,Srr,Rrr,Prr,Go,FF,K2e,Brr,Irr,VW,Nrr,qrr,jrr,TF,Z2e,Drr,Grr,XW,Orr,Vrr,Xrr,MF,ebe,zrr,Qrr,zW,Wrr,Urr,Hrr,EF,obe,Jrr,Yrr,QW,Krr,Zrr,etr,CF,rbe,otr,rtr,WW,ttr,atr,ntr,wF,tbe,str,ltr,UW,itr,dtr,ctr,AF,ftr,abe,mtr,gtr,nbe,htr,ptr,yF,iHe,Sd,LF,sbe,V9,utr,lbe,_tr,dHe,Oo,X9,btr,Rd,vtr,HW,Ftr,Ttr,JW,Mtr,Etr,Ctr,z9,wtr,ibe,Atr,ytr,Ltr,Mt,Q9,xtr,dbe,$tr,ktr,Pd,Str,cbe,Rtr,Ptr,YW,Btr,Itr,Ntr,xF,qtr,no,W9,jtr,fbe,Dtr,Gtr,on,Otr,mbe,Vtr,Xtr,gbe,ztr,Qtr,hbe,Wtr,Utr,Htr,H,$F,pbe,Jtr,Ytr,KW,Ktr,Ztr,ear,kF,ube,oar,rar,ZW,tar,aar,nar,SF,_be,sar,lar,eU,iar,dar,car,RF,bbe,far,mar,oU,gar,har,par,PF,vbe,uar,_ar,rU,bar,Far,Tar,BF,Fbe,Mar,Ear,tU,Car,war,Aar,IF,Tbe,yar,Lar,aU,xar,$ar,kar,NF,Mbe,Sar,Rar,nU,Par,Bar,Iar,qF,Ebe,Nar,qar,sU,jar,Dar,Gar,jF,Cbe,Oar,Var,lU,Xar,zar,Qar,DF,wbe,War,Uar,iU,Har,Jar,Yar,GF,Abe,Kar,Zar,dU,enr,onr,rnr,OF,ybe,tnr,anr,cU,nnr,snr,lnr,VF,Lbe,inr,dnr,fU,cnr,fnr,mnr,XF,xbe,gnr,hnr,mU,pnr,unr,_nr,zF,$be,bnr,vnr,gU,Fnr,Tnr,Mnr,QF,kbe,Enr,Cnr,hU,wnr,Anr,ynr,WF,Sbe,Lnr,xnr,pU,$nr,knr,Snr,UF,Rbe,Rnr,Pnr,uU,Bnr,Inr,Nnr,HF,Pbe,qnr,jnr,_U,Dnr,Gnr,Onr,JF,Bbe,Vnr,Xnr,bU,znr,Qnr,Wnr,YF,Ibe,Unr,Hnr,vU,Jnr,Ynr,Knr,KF,Nbe,Znr,esr,FU,osr,rsr,tsr,ZF,qbe,asr,nsr,TU,ssr,lsr,isr,eT,jbe,dsr,csr,MU,fsr,msr,gsr,oT,Dbe,hsr,psr,EU,usr,_sr,bsr,rT,Gbe,vsr,Fsr,CU,Tsr,Msr,Esr,tT,Obe,Csr,wsr,wU,Asr,ysr,Lsr,aT,Vbe,xsr,$sr,AU,ksr,Ssr,Rsr,nT,Xbe,Psr,Bsr,yU,Isr,Nsr,qsr,sT,zbe,jsr,Dsr,LU,Gsr,Osr,Vsr,lT,Qbe,Xsr,zsr,xU,Qsr,Wsr,Usr,iT,Wbe,Hsr,Jsr,$U,Ysr,Ksr,Zsr,dT,Ube,elr,olr,kU,rlr,tlr,alr,cT,Hbe,nlr,slr,SU,llr,ilr,dlr,fT,Jbe,clr,flr,RU,mlr,glr,hlr,mT,Ybe,plr,ulr,PU,_lr,blr,vlr,gT,Flr,Kbe,Tlr,Mlr,Zbe,Elr,Clr,hT,cHe,Bd,pT,eve,U9,wlr,ove,Alr,fHe,Vo,H9,ylr,Id,Llr,BU,xlr,$lr,IU,klr,Slr,Rlr,J9,Plr,rve,Blr,Ilr,Nlr,Et,Y9,qlr,tve,jlr,Dlr,Nd,Glr,ave,Olr,Vlr,NU,Xlr,zlr,Qlr,uT,Wlr,so,K9,Ulr,nve,Hlr,Jlr,rn,Ylr,sve,Klr,Zlr,lve,eir,oir,ive,rir,tir,air,V,_T,dve,nir,sir,qU,lir,iir,dir,bT,cve,cir,fir,jU,mir,gir,hir,vT,fve,pir,uir,DU,_ir,bir,vir,FT,mve,Fir,Tir,GU,Mir,Eir,Cir,TT,gve,wir,Air,OU,yir,Lir,xir,MT,hve,$ir,kir,VU,Sir,Rir,Pir,ET,pve,Bir,Iir,XU,Nir,qir,jir,CT,uve,Dir,Gir,zU,Oir,Vir,Xir,wT,_ve,zir,Qir,QU,Wir,Uir,Hir,AT,bve,Jir,Yir,WU,Kir,Zir,edr,yT,vve,odr,rdr,UU,tdr,adr,ndr,LT,Fve,sdr,ldr,HU,idr,ddr,cdr,xT,Tve,fdr,mdr,JU,gdr,hdr,pdr,$T,Mve,udr,_dr,YU,bdr,vdr,Fdr,kT,Eve,Tdr,Mdr,KU,Edr,Cdr,wdr,ST,Cve,Adr,ydr,ZU,Ldr,xdr,$dr,RT,wve,kdr,Sdr,eH,Rdr,Pdr,Bdr,PT,Ave,Idr,Ndr,oH,qdr,jdr,Ddr,BT,yve,Gdr,Odr,rH,Vdr,Xdr,zdr,IT,Lve,Qdr,Wdr,tH,Udr,Hdr,Jdr,NT,xve,Ydr,Kdr,aH,Zdr,ecr,ocr,qT,$ve,rcr,tcr,nH,acr,ncr,scr,jT,kve,lcr,icr,sH,dcr,ccr,fcr,DT,Sve,mcr,gcr,lH,hcr,pcr,ucr,GT,Rve,_cr,bcr,iH,vcr,Fcr,Tcr,OT,Pve,Mcr,Ecr,dH,Ccr,wcr,Acr,VT,Bve,ycr,Lcr,cH,xcr,$cr,kcr,XT,Ive,Scr,Rcr,fH,Pcr,Bcr,Icr,zT,Nve,Ncr,qcr,mH,jcr,Dcr,Gcr,QT,qve,Ocr,Vcr,gH,Xcr,zcr,Qcr,WT,jve,Wcr,Ucr,hH,Hcr,Jcr,Ycr,UT,Dve,Kcr,Zcr,pH,efr,ofr,rfr,HT,Gve,tfr,afr,uH,nfr,sfr,lfr,JT,Ove,ifr,dfr,_H,cfr,ffr,mfr,YT,Vve,gfr,hfr,bH,pfr,ufr,_fr,KT,Xve,bfr,vfr,vH,Ffr,Tfr,Mfr,ZT,zve,Efr,Cfr,FH,wfr,Afr,yfr,e8,Qve,Lfr,xfr,TH,$fr,kfr,Sfr,o8,Wve,Rfr,Pfr,MH,Bfr,Ifr,Nfr,r8,Uve,qfr,jfr,EH,Dfr,Gfr,Ofr,t8,Hve,Vfr,Xfr,CH,zfr,Qfr,Wfr,a8,Jve,Ufr,Hfr,wH,Jfr,Yfr,Kfr,n8,Yve,Zfr,emr,AH,omr,rmr,tmr,s8,amr,Kve,nmr,smr,Zve,lmr,imr,l8,mHe,qd,i8,eFe,Z9,dmr,oFe,cmr,gHe,Xo,ex,fmr,jd,mmr,yH,gmr,hmr,LH,pmr,umr,_mr,ox,bmr,rFe,vmr,Fmr,Tmr,Ct,rx,Mmr,tFe,Emr,Cmr,Dd,wmr,aFe,Amr,ymr,xH,Lmr,xmr,$mr,d8,kmr,lo,tx,Smr,nFe,Rmr,Pmr,tn,Bmr,sFe,Imr,Nmr,lFe,qmr,jmr,iFe,Dmr,Gmr,Omr,dFe,c8,cFe,Vmr,Xmr,$H,zmr,Qmr,Wmr,f8,Umr,fFe,Hmr,Jmr,mFe,Ymr,Kmr,m8,hHe,Gd,g8,gFe,ax,Zmr,hFe,egr,pHe,zo,nx,ogr,Od,rgr,kH,tgr,agr,SH,ngr,sgr,lgr,sx,igr,pFe,dgr,cgr,fgr,wt,lx,mgr,uFe,ggr,hgr,Vd,pgr,_Fe,ugr,_gr,RH,bgr,vgr,Fgr,h8,Tgr,io,ix,Mgr,bFe,Egr,Cgr,an,wgr,vFe,Agr,ygr,FFe,Lgr,xgr,TFe,$gr,kgr,Sgr,dx,p8,MFe,Rgr,Pgr,PH,Bgr,Igr,Ngr,u8,EFe,qgr,jgr,BH,Dgr,Ggr,Ogr,_8,Vgr,CFe,Xgr,zgr,wFe,Qgr,Wgr,b8,uHe,Xd,v8,AFe,cx,Ugr,yFe,Hgr,_He,Qo,fx,Jgr,zd,Ygr,IH,Kgr,Zgr,NH,ehr,ohr,rhr,mx,thr,LFe,ahr,nhr,shr,At,gx,lhr,xFe,ihr,dhr,Qd,chr,$Fe,fhr,mhr,qH,ghr,hhr,phr,F8,uhr,co,hx,_hr,kFe,bhr,vhr,nn,Fhr,SFe,Thr,Mhr,RFe,Ehr,Chr,PFe,whr,Ahr,yhr,be,T8,BFe,Lhr,xhr,jH,$hr,khr,Shr,M8,IFe,Rhr,Phr,DH,Bhr,Ihr,Nhr,E8,NFe,qhr,jhr,GH,Dhr,Ghr,Ohr,C8,qFe,Vhr,Xhr,OH,zhr,Qhr,Whr,fl,jFe,Uhr,Hhr,VH,Jhr,Yhr,XH,Khr,Zhr,epr,w8,DFe,opr,rpr,zH,tpr,apr,npr,ml,GFe,spr,lpr,QH,ipr,dpr,WH,cpr,fpr,mpr,A8,OFe,gpr,hpr,UH,ppr,upr,_pr,yt,VFe,bpr,vpr,HH,Fpr,Tpr,JH,Mpr,Epr,YH,Cpr,wpr,Apr,y8,XFe,ypr,Lpr,KH,xpr,$pr,kpr,L8,zFe,Spr,Rpr,ZH,Ppr,Bpr,Ipr,x8,QFe,Npr,qpr,eJ,jpr,Dpr,Gpr,$8,WFe,Opr,Vpr,oJ,Xpr,zpr,Qpr,k8,UFe,Wpr,Upr,rJ,Hpr,Jpr,Ypr,S8,HFe,Kpr,Zpr,tJ,eur,our,rur,R8,JFe,tur,aur,aJ,nur,sur,lur,P8,YFe,iur,dur,nJ,cur,fur,mur,B8,gur,KFe,hur,pur,ZFe,uur,_ur,I8,bHe,Wd,N8,eTe,px,bur,oTe,vur,vHe,Wo,ux,Fur,Ud,Tur,sJ,Mur,Eur,lJ,Cur,wur,Aur,_x,yur,rTe,Lur,xur,$ur,Lt,bx,kur,tTe,Sur,Rur,Hd,Pur,aTe,Bur,Iur,iJ,Nur,qur,jur,q8,Dur,fo,vx,Gur,nTe,Our,Vur,sn,Xur,sTe,zur,Qur,lTe,Wur,Uur,iTe,Hur,Jur,Yur,dTe,j8,cTe,Kur,Zur,dJ,e_r,o_r,r_r,D8,t_r,fTe,a_r,n_r,mTe,s_r,l_r,G8,FHe,Jd,O8,gTe,Fx,i_r,hTe,d_r,THe,Uo,Tx,c_r,Yd,f_r,cJ,m_r,g_r,fJ,h_r,p_r,u_r,Mx,__r,pTe,b_r,v_r,F_r,xt,Ex,T_r,uTe,M_r,E_r,Kd,C_r,_Te,w_r,A_r,mJ,y_r,L_r,x_r,V8,$_r,mo,Cx,k_r,bTe,S_r,R_r,ln,P_r,vTe,B_r,I_r,FTe,N_r,q_r,TTe,j_r,D_r,G_r,MTe,X8,ETe,O_r,V_r,gJ,X_r,z_r,Q_r,z8,W_r,CTe,U_r,H_r,wTe,J_r,Y_r,Q8,MHe,Zd,W8,ATe,wx,K_r,yTe,Z_r,EHe,Ho,Ax,e1r,ec,o1r,hJ,r1r,t1r,pJ,a1r,n1r,s1r,yx,l1r,LTe,i1r,d1r,c1r,$t,Lx,f1r,xTe,m1r,g1r,oc,h1r,$Te,p1r,u1r,uJ,_1r,b1r,v1r,U8,F1r,go,xx,T1r,kTe,M1r,E1r,dn,C1r,STe,w1r,A1r,RTe,y1r,L1r,PTe,x1r,$1r,k1r,BTe,H8,ITe,S1r,R1r,_J,P1r,B1r,I1r,J8,N1r,NTe,q1r,j1r,qTe,D1r,G1r,Y8,CHe,rc,K8,jTe,$x,O1r,DTe,V1r,wHe,Jo,kx,X1r,tc,z1r,bJ,Q1r,W1r,vJ,U1r,H1r,J1r,Sx,Y1r,GTe,K1r,Z1r,e4r,kt,Rx,o4r,OTe,r4r,t4r,ac,a4r,VTe,n4r,s4r,FJ,l4r,i4r,d4r,Z8,c4r,ho,Px,f4r,XTe,m4r,g4r,cn,h4r,zTe,p4r,u4r,QTe,_4r,b4r,WTe,v4r,F4r,T4r,Pe,eM,UTe,M4r,E4r,TJ,C4r,w4r,A4r,oM,HTe,y4r,L4r,MJ,x4r,$4r,k4r,rM,JTe,S4r,R4r,EJ,P4r,B4r,I4r,tM,YTe,N4r,q4r,CJ,j4r,D4r,G4r,aM,KTe,O4r,V4r,wJ,X4r,z4r,Q4r,nM,ZTe,W4r,U4r,AJ,H4r,J4r,Y4r,sM,e8e,K4r,Z4r,yJ,e2r,o2r,r2r,lM,o8e,t2r,a2r,LJ,n2r,s2r,l2r,iM,r8e,i2r,d2r,xJ,c2r,f2r,m2r,dM,g2r,t8e,h2r,p2r,a8e,u2r,_2r,cM,AHe,nc,fM,n8e,Bx,b2r,s8e,v2r,yHe,Yo,Ix,F2r,sc,T2r,$J,M2r,E2r,kJ,C2r,w2r,A2r,Nx,y2r,l8e,L2r,x2r,$2r,St,qx,k2r,i8e,S2r,R2r,lc,P2r,d8e,B2r,I2r,SJ,N2r,q2r,j2r,mM,D2r,po,jx,G2r,c8e,O2r,V2r,fn,X2r,f8e,z2r,Q2r,m8e,W2r,U2r,g8e,H2r,J2r,Y2r,it,gM,h8e,K2r,Z2r,RJ,ebr,obr,rbr,hM,p8e,tbr,abr,PJ,nbr,sbr,lbr,pM,u8e,ibr,dbr,BJ,cbr,fbr,mbr,uM,_8e,gbr,hbr,IJ,pbr,ubr,_br,_M,b8e,bbr,vbr,NJ,Fbr,Tbr,Mbr,bM,Ebr,v8e,Cbr,wbr,F8e,Abr,ybr,vM,LHe,ic,FM,T8e,Dx,Lbr,M8e,xbr,xHe,Ko,Gx,$br,dc,kbr,qJ,Sbr,Rbr,jJ,Pbr,Bbr,Ibr,Ox,Nbr,E8e,qbr,jbr,Dbr,Rt,Vx,Gbr,C8e,Obr,Vbr,cc,Xbr,w8e,zbr,Qbr,DJ,Wbr,Ubr,Hbr,TM,Jbr,uo,Xx,Ybr,A8e,Kbr,Zbr,mn,evr,y8e,ovr,rvr,L8e,tvr,avr,x8e,nvr,svr,lvr,ye,MM,$8e,ivr,dvr,GJ,cvr,fvr,mvr,EM,k8e,gvr,hvr,OJ,pvr,uvr,_vr,CM,S8e,bvr,vvr,VJ,Fvr,Tvr,Mvr,wM,R8e,Evr,Cvr,XJ,wvr,Avr,yvr,AM,P8e,Lvr,xvr,zJ,$vr,kvr,Svr,yM,B8e,Rvr,Pvr,QJ,Bvr,Ivr,Nvr,LM,I8e,qvr,jvr,WJ,Dvr,Gvr,Ovr,xM,N8e,Vvr,Xvr,UJ,zvr,Qvr,Wvr,$M,q8e,Uvr,Hvr,HJ,Jvr,Yvr,Kvr,kM,j8e,Zvr,eFr,JJ,oFr,rFr,tFr,SM,aFr,D8e,nFr,sFr,G8e,lFr,iFr,RM,$He,fc,PM,O8e,zx,dFr,V8e,cFr,kHe,Zo,Qx,fFr,mc,mFr,YJ,gFr,hFr,KJ,pFr,uFr,_Fr,Wx,bFr,X8e,vFr,FFr,TFr,Pt,Ux,MFr,z8e,EFr,CFr,gc,wFr,Q8e,AFr,yFr,ZJ,LFr,xFr,$Fr,BM,kFr,_o,Hx,SFr,W8e,RFr,PFr,gn,BFr,U8e,IFr,NFr,H8e,qFr,jFr,J8e,DFr,GFr,OFr,Jx,IM,Y8e,VFr,XFr,eY,zFr,QFr,WFr,NM,K8e,UFr,HFr,oY,JFr,YFr,KFr,qM,ZFr,Z8e,eTr,oTr,eMe,rTr,tTr,jM,SHe,hc,DM,oMe,Yx,aTr,rMe,nTr,RHe,er,Kx,sTr,pc,lTr,rY,iTr,dTr,tY,cTr,fTr,mTr,Zx,gTr,tMe,hTr,pTr,uTr,Bt,e$,_Tr,aMe,bTr,vTr,uc,FTr,nMe,TTr,MTr,aY,ETr,CTr,wTr,GM,ATr,bo,o$,yTr,sMe,LTr,xTr,hn,$Tr,lMe,kTr,STr,iMe,RTr,PTr,dMe,BTr,ITr,NTr,dt,OM,cMe,qTr,jTr,nY,DTr,GTr,OTr,VM,fMe,VTr,XTr,sY,zTr,QTr,WTr,XM,mMe,UTr,HTr,lY,JTr,YTr,KTr,zM,gMe,ZTr,e8r,iY,o8r,r8r,t8r,QM,hMe,a8r,n8r,dY,s8r,l8r,i8r,WM,d8r,pMe,c8r,f8r,uMe,m8r,g8r,UM,PHe,_c,HM,_Me,r$,h8r,bMe,p8r,BHe,or,t$,u8r,bc,_8r,cY,b8r,v8r,fY,F8r,T8r,M8r,a$,E8r,vMe,C8r,w8r,A8r,It,n$,y8r,FMe,L8r,x8r,vc,$8r,TMe,k8r,S8r,mY,R8r,P8r,B8r,JM,I8r,vo,s$,N8r,MMe,q8r,j8r,pn,D8r,EMe,G8r,O8r,CMe,V8r,X8r,wMe,z8r,Q8r,W8r,un,YM,AMe,U8r,H8r,gY,J8r,Y8r,K8r,KM,yMe,Z8r,eMr,hY,oMr,rMr,tMr,ZM,LMe,aMr,nMr,pY,sMr,lMr,iMr,eE,xMe,dMr,cMr,uY,fMr,mMr,gMr,oE,hMr,$Me,pMr,uMr,kMe,_Mr,bMr,rE,IHe,Fc,tE,SMe,l$,vMr,RMe,FMr,NHe,rr,i$,TMr,Tc,MMr,_Y,EMr,CMr,bY,wMr,AMr,yMr,d$,LMr,PMe,xMr,$Mr,kMr,Nt,c$,SMr,BMe,RMr,PMr,Mc,BMr,IMe,IMr,NMr,vY,qMr,jMr,DMr,aE,GMr,Fo,f$,OMr,NMe,VMr,XMr,_n,zMr,qMe,QMr,WMr,jMe,UMr,HMr,DMe,JMr,YMr,KMr,m$,nE,GMe,ZMr,eEr,FY,oEr,rEr,tEr,sE,OMe,aEr,nEr,TY,sEr,lEr,iEr,lE,dEr,VMe,cEr,fEr,XMe,mEr,gEr,iE,qHe,Ec,dE,zMe,g$,hEr,QMe,pEr,jHe,tr,h$,uEr,Cc,_Er,MY,bEr,vEr,EY,FEr,TEr,MEr,p$,EEr,WMe,CEr,wEr,AEr,qt,u$,yEr,UMe,LEr,xEr,wc,$Er,HMe,kEr,SEr,CY,REr,PEr,BEr,cE,IEr,To,_$,NEr,JMe,qEr,jEr,bn,DEr,YMe,GEr,OEr,KMe,VEr,XEr,ZMe,zEr,QEr,WEr,eEe,fE,oEe,UEr,HEr,wY,JEr,YEr,KEr,mE,ZEr,rEe,eCr,oCr,tEe,rCr,tCr,gE,DHe,Ac,hE,aEe,b$,aCr,nEe,nCr,GHe,ar,v$,sCr,yc,lCr,AY,iCr,dCr,yY,cCr,fCr,mCr,F$,gCr,sEe,hCr,pCr,uCr,jt,T$,_Cr,lEe,bCr,vCr,Lc,FCr,iEe,TCr,MCr,LY,ECr,CCr,wCr,pE,ACr,Mo,M$,yCr,dEe,LCr,xCr,vn,$Cr,cEe,kCr,SCr,fEe,RCr,PCr,mEe,BCr,ICr,NCr,ct,uE,gEe,qCr,jCr,xY,DCr,GCr,OCr,_E,hEe,VCr,XCr,$Y,zCr,QCr,WCr,bE,pEe,UCr,HCr,kY,JCr,YCr,KCr,vE,uEe,ZCr,e3r,SY,o3r,r3r,t3r,FE,_Ee,a3r,n3r,RY,s3r,l3r,i3r,TE,d3r,bEe,c3r,f3r,vEe,m3r,g3r,ME,OHe,xc,EE,FEe,E$,h3r,TEe,p3r,VHe,nr,C$,u3r,$c,_3r,PY,b3r,v3r,BY,F3r,T3r,M3r,w$,E3r,MEe,C3r,w3r,A3r,Dt,A$,y3r,EEe,L3r,x3r,kc,$3r,CEe,k3r,S3r,IY,R3r,P3r,B3r,CE,I3r,Eo,y$,N3r,wEe,q3r,j3r,Fn,D3r,AEe,G3r,O3r,yEe,V3r,X3r,LEe,z3r,Q3r,W3r,xEe,wE,$Ee,U3r,H3r,NY,J3r,Y3r,K3r,AE,Z3r,kEe,e5r,o5r,SEe,r5r,t5r,yE,XHe,Sc,LE,REe,L$,a5r,PEe,n5r,zHe,sr,x$,s5r,Rc,l5r,qY,i5r,d5r,jY,c5r,f5r,m5r,$$,g5r,BEe,h5r,p5r,u5r,Gt,k$,_5r,IEe,b5r,v5r,Pc,F5r,NEe,T5r,M5r,DY,E5r,C5r,w5r,xE,A5r,Br,S$,y5r,qEe,L5r,x5r,Tn,$5r,jEe,k5r,S5r,DEe,R5r,P5r,GEe,B5r,I5r,N5r,q,$E,OEe,q5r,j5r,GY,D5r,G5r,O5r,kE,VEe,V5r,X5r,OY,z5r,Q5r,W5r,SE,XEe,U5r,H5r,VY,J5r,Y5r,K5r,RE,zEe,Z5r,e0r,XY,o0r,r0r,t0r,PE,QEe,a0r,n0r,zY,s0r,l0r,i0r,BE,WEe,d0r,c0r,QY,f0r,m0r,g0r,IE,UEe,h0r,p0r,WY,u0r,_0r,b0r,NE,HEe,v0r,F0r,UY,T0r,M0r,E0r,qE,JEe,C0r,w0r,HY,A0r,y0r,L0r,jE,YEe,x0r,$0r,JY,k0r,S0r,R0r,DE,KEe,P0r,B0r,YY,I0r,N0r,q0r,GE,ZEe,j0r,D0r,KY,G0r,O0r,V0r,OE,eCe,X0r,z0r,ZY,Q0r,W0r,U0r,VE,oCe,H0r,J0r,eK,Y0r,K0r,Z0r,XE,rCe,ewr,owr,oK,rwr,twr,awr,zE,tCe,nwr,swr,rK,lwr,iwr,dwr,QE,aCe,cwr,fwr,tK,mwr,gwr,hwr,WE,nCe,pwr,uwr,aK,_wr,bwr,vwr,gl,sCe,Fwr,Twr,nK,Mwr,Ewr,sK,Cwr,wwr,Awr,UE,lCe,ywr,Lwr,lK,xwr,$wr,kwr,HE,iCe,Swr,Rwr,iK,Pwr,Bwr,Iwr,JE,dCe,Nwr,qwr,dK,jwr,Dwr,Gwr,YE,cCe,Owr,Vwr,cK,Xwr,zwr,Qwr,KE,fCe,Wwr,Uwr,fK,Hwr,Jwr,Ywr,ZE,mCe,Kwr,Zwr,mK,eAr,oAr,rAr,eC,gCe,tAr,aAr,gK,nAr,sAr,lAr,oC,hCe,iAr,dAr,hK,cAr,fAr,mAr,rC,pCe,gAr,hAr,pK,pAr,uAr,_Ar,tC,uCe,bAr,vAr,uK,FAr,TAr,MAr,aC,_Ce,EAr,CAr,_K,wAr,AAr,yAr,nC,bCe,LAr,xAr,bK,$Ar,kAr,SAr,sC,vCe,RAr,PAr,vK,BAr,IAr,NAr,lC,FCe,qAr,jAr,FK,DAr,GAr,OAr,iC,TCe,VAr,XAr,TK,zAr,QAr,WAr,dC,MCe,UAr,HAr,MK,JAr,YAr,KAr,cC,ECe,ZAr,e6r,EK,o6r,r6r,t6r,fC,CCe,a6r,n6r,CK,s6r,l6r,i6r,mC,wCe,d6r,c6r,wK,f6r,m6r,g6r,gC,ACe,h6r,p6r,AK,u6r,_6r,b6r,hC,yCe,v6r,F6r,yK,T6r,M6r,E6r,pC,LCe,C6r,w6r,LK,A6r,y6r,L6r,uC,xCe,x6r,$6r,xK,k6r,S6r,R6r,_C,$Ce,P6r,B6r,$K,I6r,N6r,q6r,bC,kCe,j6r,D6r,kK,G6r,O6r,V6r,vC,SCe,X6r,z6r,SK,Q6r,W6r,U6r,FC,RCe,H6r,J6r,RK,Y6r,K6r,Z6r,TC,PCe,e7r,o7r,PK,r7r,t7r,a7r,MC,BCe,n7r,s7r,BK,l7r,i7r,d7r,EC,ICe,c7r,f7r,IK,m7r,g7r,h7r,CC,NCe,p7r,u7r,NK,_7r,b7r,v7r,wC,qCe,F7r,T7r,qK,M7r,E7r,C7r,AC,QHe,Bc,yC,jCe,R$,w7r,DCe,A7r,WHe,lr,P$,y7r,Ic,L7r,jK,x7r,$7r,DK,k7r,S7r,R7r,B$,P7r,GCe,B7r,I7r,N7r,Ot,I$,q7r,OCe,j7r,D7r,Nc,G7r,VCe,O7r,V7r,GK,X7r,z7r,Q7r,LC,W7r,Ir,N$,U7r,XCe,H7r,J7r,Mn,Y7r,zCe,K7r,Z7r,QCe,eyr,oyr,WCe,ryr,tyr,ayr,se,xC,UCe,nyr,syr,OK,lyr,iyr,dyr,$C,HCe,cyr,fyr,VK,myr,gyr,hyr,kC,JCe,pyr,uyr,XK,_yr,byr,vyr,SC,YCe,Fyr,Tyr,zK,Myr,Eyr,Cyr,RC,KCe,wyr,Ayr,QK,yyr,Lyr,xyr,PC,ZCe,$yr,kyr,WK,Syr,Ryr,Pyr,BC,e3e,Byr,Iyr,UK,Nyr,qyr,jyr,IC,o3e,Dyr,Gyr,HK,Oyr,Vyr,Xyr,NC,r3e,zyr,Qyr,JK,Wyr,Uyr,Hyr,qC,t3e,Jyr,Yyr,YK,Kyr,Zyr,eLr,jC,a3e,oLr,rLr,KK,tLr,aLr,nLr,DC,n3e,sLr,lLr,ZK,iLr,dLr,cLr,GC,s3e,fLr,mLr,eZ,gLr,hLr,pLr,OC,l3e,uLr,_Lr,oZ,bLr,vLr,FLr,VC,i3e,TLr,MLr,rZ,ELr,CLr,wLr,XC,d3e,ALr,yLr,tZ,LLr,xLr,$Lr,zC,c3e,kLr,SLr,aZ,RLr,PLr,BLr,QC,f3e,ILr,NLr,nZ,qLr,jLr,DLr,WC,m3e,GLr,OLr,sZ,VLr,XLr,zLr,UC,g3e,QLr,WLr,lZ,ULr,HLr,JLr,HC,h3e,YLr,KLr,iZ,ZLr,e9r,o9r,JC,p3e,r9r,t9r,dZ,a9r,n9r,s9r,YC,u3e,l9r,i9r,cZ,d9r,c9r,f9r,KC,UHe,qc,ZC,_3e,q$,m9r,b3e,g9r,HHe,ir,j$,h9r,jc,p9r,fZ,u9r,_9r,mZ,b9r,v9r,F9r,D$,T9r,v3e,M9r,E9r,C9r,Vt,G$,w9r,F3e,A9r,y9r,Dc,L9r,T3e,x9r,$9r,gZ,k9r,S9r,R9r,e3,P9r,Nr,O$,B9r,M3e,I9r,N9r,En,q9r,E3e,j9r,D9r,C3e,G9r,O9r,w3e,V9r,X9r,z9r,Me,o3,A3e,Q9r,W9r,hZ,U9r,H9r,J9r,r3,y3e,Y9r,K9r,pZ,Z9r,exr,oxr,t3,L3e,rxr,txr,uZ,axr,nxr,sxr,a3,x3e,lxr,ixr,_Z,dxr,cxr,fxr,n3,$3e,mxr,gxr,bZ,hxr,pxr,uxr,s3,k3e,_xr,bxr,vZ,vxr,Fxr,Txr,l3,S3e,Mxr,Exr,FZ,Cxr,wxr,Axr,i3,R3e,yxr,Lxr,TZ,xxr,$xr,kxr,d3,P3e,Sxr,Rxr,MZ,Pxr,Bxr,Ixr,c3,B3e,Nxr,qxr,EZ,jxr,Dxr,Gxr,f3,I3e,Oxr,Vxr,CZ,Xxr,zxr,Qxr,m3,N3e,Wxr,Uxr,wZ,Hxr,Jxr,Yxr,g3,q3e,Kxr,Zxr,AZ,e$r,o$r,r$r,h3,JHe,Gc,p3,j3e,V$,t$r,D3e,a$r,YHe,dr,X$,n$r,Oc,s$r,yZ,l$r,i$r,LZ,d$r,c$r,f$r,z$,m$r,G3e,g$r,h$r,p$r,Xt,Q$,u$r,O3e,_$r,b$r,Vc,v$r,V3e,F$r,T$r,xZ,M$r,E$r,C$r,u3,w$r,qr,W$,A$r,X3e,y$r,L$r,Cn,x$r,z3e,$$r,k$r,Q3e,S$r,R$r,W3e,P$r,B$r,I$r,Ve,_3,U3e,N$r,q$r,$Z,j$r,D$r,G$r,b3,H3e,O$r,V$r,kZ,X$r,z$r,Q$r,hl,J3e,W$r,U$r,SZ,H$r,J$r,RZ,Y$r,K$r,Z$r,v3,Y3e,ekr,okr,PZ,rkr,tkr,akr,F3,K3e,nkr,skr,BZ,lkr,ikr,dkr,T3,Z3e,ckr,fkr,IZ,mkr,gkr,hkr,M3,e5e,pkr,ukr,NZ,_kr,bkr,vkr,E3,o5e,Fkr,Tkr,qZ,Mkr,Ekr,Ckr,C3,KHe,Xc,w3,r5e,U$,wkr,t5e,Akr,ZHe,cr,H$,ykr,zc,Lkr,jZ,xkr,$kr,DZ,kkr,Skr,Rkr,J$,Pkr,a5e,Bkr,Ikr,Nkr,zt,Y$,qkr,n5e,jkr,Dkr,Qc,Gkr,s5e,Okr,Vkr,GZ,Xkr,zkr,Qkr,A3,Wkr,jr,K$,Ukr,l5e,Hkr,Jkr,wn,Ykr,i5e,Kkr,Zkr,d5e,eSr,oSr,c5e,rSr,tSr,aSr,Z$,y3,f5e,nSr,sSr,OZ,lSr,iSr,dSr,L3,m5e,cSr,fSr,VZ,mSr,gSr,hSr,x3,eJe,Wc,$3,g5e,ek,pSr,h5e,uSr,oJe,fr,ok,_Sr,Uc,bSr,XZ,vSr,FSr,zZ,TSr,MSr,ESr,rk,CSr,p5e,wSr,ASr,ySr,Qt,tk,LSr,u5e,xSr,$Sr,Hc,kSr,_5e,SSr,RSr,QZ,PSr,BSr,ISr,k3,NSr,Dr,ak,qSr,b5e,jSr,DSr,An,GSr,v5e,OSr,VSr,F5e,XSr,zSr,T5e,QSr,WSr,USr,de,S3,M5e,HSr,JSr,WZ,YSr,KSr,ZSr,R3,E5e,eRr,oRr,UZ,rRr,tRr,aRr,P3,C5e,nRr,sRr,HZ,lRr,iRr,dRr,B3,w5e,cRr,fRr,JZ,mRr,gRr,hRr,I3,A5e,pRr,uRr,YZ,_Rr,bRr,vRr,N3,y5e,FRr,TRr,KZ,MRr,ERr,CRr,q3,L5e,wRr,ARr,ZZ,yRr,LRr,xRr,j3,x5e,$Rr,kRr,eee,SRr,RRr,PRr,D3,$5e,BRr,IRr,oee,NRr,qRr,jRr,G3,k5e,DRr,GRr,ree,ORr,VRr,XRr,O3,S5e,zRr,QRr,tee,WRr,URr,HRr,V3,R5e,JRr,YRr,aee,KRr,ZRr,ePr,X3,P5e,oPr,rPr,nee,tPr,aPr,nPr,z3,B5e,sPr,lPr,see,iPr,dPr,cPr,Q3,I5e,fPr,mPr,lee,gPr,hPr,pPr,W3,N5e,uPr,_Pr,iee,bPr,vPr,FPr,U3,q5e,TPr,MPr,dee,EPr,CPr,wPr,H3,j5e,APr,yPr,cee,LPr,xPr,$Pr,J3,D5e,kPr,SPr,fee,RPr,PPr,BPr,Y3,G5e,IPr,NPr,mee,qPr,jPr,DPr,K3,rJe,Jc,Z3,O5e,nk,GPr,V5e,OPr,tJe,mr,sk,VPr,Yc,XPr,gee,zPr,QPr,hee,WPr,UPr,HPr,lk,JPr,X5e,YPr,KPr,ZPr,Wt,ik,eBr,z5e,oBr,rBr,Kc,tBr,Q5e,aBr,nBr,pee,sBr,lBr,iBr,e5,dBr,Gr,dk,cBr,W5e,fBr,mBr,yn,gBr,U5e,hBr,pBr,H5e,uBr,_Br,J5e,bBr,vBr,FBr,Le,o5,Y5e,TBr,MBr,uee,EBr,CBr,wBr,r5,K5e,ABr,yBr,_ee,LBr,xBr,$Br,t5,Z5e,kBr,SBr,bee,RBr,PBr,BBr,a5,e0e,IBr,NBr,vee,qBr,jBr,DBr,n5,o0e,GBr,OBr,Fee,VBr,XBr,zBr,s5,r0e,QBr,WBr,Tee,UBr,HBr,JBr,l5,t0e,YBr,KBr,Mee,ZBr,eIr,oIr,i5,a0e,rIr,tIr,Eee,aIr,nIr,sIr,d5,n0e,lIr,iIr,Cee,dIr,cIr,fIr,c5,s0e,mIr,gIr,wee,hIr,pIr,uIr,f5,aJe,Zc,m5,l0e,ck,_Ir,i0e,bIr,nJe,gr,fk,vIr,ef,FIr,Aee,TIr,MIr,yee,EIr,CIr,wIr,mk,AIr,d0e,yIr,LIr,xIr,Ut,gk,$Ir,c0e,kIr,SIr,of,RIr,f0e,PIr,BIr,Lee,IIr,NIr,qIr,g5,jIr,Or,hk,DIr,m0e,GIr,OIr,Ln,VIr,g0e,XIr,zIr,h0e,QIr,WIr,p0e,UIr,HIr,JIr,te,h5,u0e,YIr,KIr,xee,ZIr,eNr,oNr,p5,_0e,rNr,tNr,$ee,aNr,nNr,sNr,u5,b0e,lNr,iNr,kee,dNr,cNr,fNr,_5,v0e,mNr,gNr,See,hNr,pNr,uNr,b5,F0e,_Nr,bNr,Ree,vNr,FNr,TNr,v5,T0e,MNr,ENr,Pee,CNr,wNr,ANr,F5,M0e,yNr,LNr,Bee,xNr,$Nr,kNr,T5,E0e,SNr,RNr,Iee,PNr,BNr,INr,M5,C0e,NNr,qNr,Nee,jNr,DNr,GNr,E5,w0e,ONr,VNr,qee,XNr,zNr,QNr,C5,A0e,WNr,UNr,jee,HNr,JNr,YNr,w5,y0e,KNr,ZNr,Dee,eqr,oqr,rqr,A5,L0e,tqr,aqr,Gee,nqr,sqr,lqr,y5,x0e,iqr,dqr,Oee,cqr,fqr,mqr,L5,$0e,gqr,hqr,Vee,pqr,uqr,_qr,x5,k0e,bqr,vqr,Xee,Fqr,Tqr,Mqr,$5,S0e,Eqr,Cqr,zee,wqr,Aqr,yqr,k5,R0e,Lqr,xqr,Qee,$qr,kqr,Sqr,S5,P0e,Rqr,Pqr,Wee,Bqr,Iqr,Nqr,R5,B0e,qqr,jqr,Uee,Dqr,Gqr,Oqr,P5,I0e,Vqr,Xqr,Hee,zqr,Qqr,Wqr,B5,N0e,Uqr,Hqr,Jee,Jqr,Yqr,Kqr,I5,q0e,Zqr,ejr,Yee,ojr,rjr,tjr,N5,j0e,ajr,njr,Kee,sjr,ljr,ijr,q5,D0e,djr,cjr,Zee,fjr,mjr,gjr,j5,G0e,hjr,pjr,eoe,ujr,_jr,bjr,D5,sJe,rf,G5,O0e,pk,vjr,V0e,Fjr,lJe,hr,uk,Tjr,tf,Mjr,ooe,Ejr,Cjr,roe,wjr,Ajr,yjr,_k,Ljr,X0e,xjr,$jr,kjr,Ht,bk,Sjr,z0e,Rjr,Pjr,af,Bjr,Q0e,Ijr,Njr,toe,qjr,jjr,Djr,O5,Gjr,Vr,vk,Ojr,W0e,Vjr,Xjr,xn,zjr,U0e,Qjr,Wjr,H0e,Ujr,Hjr,J0e,Jjr,Yjr,Kjr,ve,V5,Y0e,Zjr,eDr,aoe,oDr,rDr,tDr,X5,K0e,aDr,nDr,noe,sDr,lDr,iDr,z5,Z0e,dDr,cDr,soe,fDr,mDr,gDr,Q5,ewe,hDr,pDr,loe,uDr,_Dr,bDr,W5,owe,vDr,FDr,ioe,TDr,MDr,EDr,U5,rwe,CDr,wDr,doe,ADr,yDr,LDr,H5,twe,xDr,$Dr,coe,kDr,SDr,RDr,J5,awe,PDr,BDr,foe,IDr,NDr,qDr,Y5,nwe,jDr,DDr,moe,GDr,ODr,VDr,K5,swe,XDr,zDr,goe,QDr,WDr,UDr,Z5,lwe,HDr,JDr,hoe,YDr,KDr,ZDr,e0,iwe,eGr,oGr,poe,rGr,tGr,aGr,o0,dwe,nGr,sGr,uoe,lGr,iGr,dGr,r0,cwe,cGr,fGr,_oe,mGr,gGr,hGr,t0,fwe,pGr,uGr,boe,_Gr,bGr,vGr,a0,mwe,FGr,TGr,voe,MGr,EGr,CGr,n0,gwe,wGr,AGr,Foe,yGr,LGr,xGr,s0,iJe,nf,l0,hwe,Fk,$Gr,pwe,kGr,dJe,pr,Tk,SGr,sf,RGr,Toe,PGr,BGr,Moe,IGr,NGr,qGr,Mk,jGr,uwe,DGr,GGr,OGr,Jt,Ek,VGr,_we,XGr,zGr,lf,QGr,bwe,WGr,UGr,Eoe,HGr,JGr,YGr,i0,KGr,Xr,Ck,ZGr,vwe,eOr,oOr,$n,rOr,Fwe,tOr,aOr,Twe,nOr,sOr,Mwe,lOr,iOr,dOr,wk,d0,Ewe,cOr,fOr,Coe,mOr,gOr,hOr,c0,Cwe,pOr,uOr,woe,_Or,bOr,vOr,f0,cJe,df,m0,wwe,Ak,FOr,Awe,TOr,fJe,ur,yk,MOr,cf,EOr,Aoe,COr,wOr,yoe,AOr,yOr,LOr,Lk,xOr,ywe,$Or,kOr,SOr,Yt,xk,ROr,Lwe,POr,BOr,ff,IOr,xwe,NOr,qOr,Loe,jOr,DOr,GOr,g0,OOr,zr,$k,VOr,$we,XOr,zOr,kn,QOr,kwe,WOr,UOr,Swe,HOr,JOr,Rwe,YOr,KOr,ZOr,Pwe,h0,Bwe,eVr,oVr,xoe,rVr,tVr,aVr,p0,mJe,mf,u0,Iwe,kk,nVr,Nwe,sVr,gJe,_r,Sk,lVr,gf,iVr,$oe,dVr,cVr,koe,fVr,mVr,gVr,Rk,hVr,qwe,pVr,uVr,_Vr,Kt,Pk,bVr,jwe,vVr,FVr,hf,TVr,Dwe,MVr,EVr,Soe,CVr,wVr,AVr,_0,yVr,Qr,Bk,LVr,Gwe,xVr,$Vr,Sn,kVr,Owe,SVr,RVr,Vwe,PVr,BVr,Xwe,IVr,NVr,qVr,ce,b0,zwe,jVr,DVr,Roe,GVr,OVr,VVr,v0,Qwe,XVr,zVr,Poe,QVr,WVr,UVr,F0,Wwe,HVr,JVr,Boe,YVr,KVr,ZVr,T0,Uwe,eXr,oXr,Ioe,rXr,tXr,aXr,M0,Hwe,nXr,sXr,Noe,lXr,iXr,dXr,E0,Jwe,cXr,fXr,qoe,mXr,gXr,hXr,C0,Ywe,pXr,uXr,joe,_Xr,bXr,vXr,w0,Kwe,FXr,TXr,Doe,MXr,EXr,CXr,A0,Zwe,wXr,AXr,Goe,yXr,LXr,xXr,y0,eAe,$Xr,kXr,Ooe,SXr,RXr,PXr,L0,oAe,BXr,IXr,Voe,NXr,qXr,jXr,x0,rAe,DXr,GXr,Xoe,OXr,VXr,XXr,$0,tAe,zXr,QXr,zoe,WXr,UXr,HXr,k0,aAe,JXr,YXr,Qoe,KXr,ZXr,ezr,S0,nAe,ozr,rzr,Woe,tzr,azr,nzr,R0,sAe,szr,lzr,Uoe,izr,dzr,czr,P0,lAe,fzr,mzr,Hoe,gzr,hzr,pzr,B0,iAe,uzr,_zr,Joe,bzr,vzr,Fzr,I0,dAe,Tzr,Mzr,Yoe,Ezr,Czr,wzr,N0,cAe,Azr,yzr,Koe,Lzr,xzr,$zr,q0,hJe,pf,j0,fAe,Ik,kzr,mAe,Szr,pJe,br,Nk,Rzr,uf,Pzr,Zoe,Bzr,Izr,ere,Nzr,qzr,jzr,qk,Dzr,gAe,Gzr,Ozr,Vzr,Zt,jk,Xzr,hAe,zzr,Qzr,_f,Wzr,pAe,Uzr,Hzr,ore,Jzr,Yzr,Kzr,D0,Zzr,Wr,Dk,eQr,uAe,oQr,rQr,Rn,tQr,_Ae,aQr,nQr,bAe,sQr,lQr,vAe,iQr,dQr,cQr,fe,G0,FAe,fQr,mQr,rre,gQr,hQr,pQr,O0,TAe,uQr,_Qr,tre,bQr,vQr,FQr,V0,MAe,TQr,MQr,are,EQr,CQr,wQr,X0,EAe,AQr,yQr,nre,LQr,xQr,$Qr,z0,CAe,kQr,SQr,sre,RQr,PQr,BQr,Q0,wAe,IQr,NQr,lre,qQr,jQr,DQr,W0,AAe,GQr,OQr,ire,VQr,XQr,zQr,U0,yAe,QQr,WQr,dre,UQr,HQr,JQr,H0,LAe,YQr,KQr,cre,ZQr,eWr,oWr,J0,xAe,rWr,tWr,fre,aWr,nWr,sWr,Y0,$Ae,lWr,iWr,mre,dWr,cWr,fWr,K0,kAe,mWr,gWr,gre,hWr,pWr,uWr,Z0,SAe,_Wr,bWr,hre,vWr,FWr,TWr,ew,RAe,MWr,EWr,pre,CWr,wWr,AWr,ow,PAe,yWr,LWr,ure,xWr,$Wr,kWr,rw,BAe,SWr,RWr,_re,PWr,BWr,IWr,tw,IAe,NWr,qWr,bre,jWr,DWr,GWr,aw,NAe,OWr,VWr,vre,XWr,zWr,QWr,nw,qAe,WWr,UWr,Fre,HWr,JWr,YWr,sw,jAe,KWr,ZWr,Tre,eUr,oUr,rUr,lw,uJe,bf,iw,DAe,Gk,tUr,GAe,aUr,_Je,vr,Ok,nUr,vf,sUr,Mre,lUr,iUr,Ere,dUr,cUr,fUr,Vk,mUr,OAe,gUr,hUr,pUr,ea,Xk,uUr,VAe,_Ur,bUr,Ff,vUr,XAe,FUr,TUr,Cre,MUr,EUr,CUr,dw,wUr,Ur,zk,AUr,zAe,yUr,LUr,Pn,xUr,QAe,$Ur,kUr,WAe,SUr,RUr,UAe,PUr,BUr,IUr,HAe,cw,JAe,NUr,qUr,wre,jUr,DUr,GUr,fw,bJe,Tf,mw,YAe,Qk,OUr,KAe,VUr,vJe,Fr,Wk,XUr,Mf,zUr,Are,QUr,WUr,yre,UUr,HUr,JUr,Uk,YUr,ZAe,KUr,ZUr,eHr,oa,Hk,oHr,e6e,rHr,tHr,Ef,aHr,o6e,nHr,sHr,Lre,lHr,iHr,dHr,gw,cHr,Hr,Jk,fHr,r6e,mHr,gHr,Bn,hHr,t6e,pHr,uHr,a6e,_Hr,bHr,n6e,vHr,FHr,THr,s6e,hw,l6e,MHr,EHr,xre,CHr,wHr,AHr,pw,FJe,Cf,uw,i6e,Yk,yHr,d6e,LHr,TJe,Tr,Kk,xHr,wf,$Hr,$re,kHr,SHr,kre,RHr,PHr,BHr,Zk,IHr,c6e,NHr,qHr,jHr,ra,eS,DHr,f6e,GHr,OHr,Af,VHr,m6e,XHr,zHr,Sre,QHr,WHr,UHr,_w,HHr,Jr,oS,JHr,g6e,YHr,KHr,In,ZHr,h6e,eJr,oJr,p6e,rJr,tJr,u6e,aJr,nJr,sJr,re,bw,_6e,lJr,iJr,Rre,dJr,cJr,fJr,vw,b6e,mJr,gJr,Pre,hJr,pJr,uJr,Fw,v6e,_Jr,bJr,Bre,vJr,FJr,TJr,Tw,F6e,MJr,EJr,Ire,CJr,wJr,AJr,Mw,T6e,yJr,LJr,Nre,xJr,$Jr,kJr,Ew,M6e,SJr,RJr,qre,PJr,BJr,IJr,Cw,E6e,NJr,qJr,jre,jJr,DJr,GJr,ww,C6e,OJr,VJr,Dre,XJr,zJr,QJr,Aw,w6e,WJr,UJr,Gre,HJr,JJr,YJr,yw,A6e,KJr,ZJr,Ore,eYr,oYr,rYr,Lw,y6e,tYr,aYr,Vre,nYr,sYr,lYr,xw,L6e,iYr,dYr,Xre,cYr,fYr,mYr,$w,x6e,gYr,hYr,zre,pYr,uYr,_Yr,kw,$6e,bYr,vYr,Qre,FYr,TYr,MYr,Sw,k6e,EYr,CYr,Wre,wYr,AYr,yYr,Rw,S6e,LYr,xYr,Ure,$Yr,kYr,SYr,Pw,R6e,RYr,PYr,Hre,BYr,IYr,NYr,Bw,P6e,qYr,jYr,Jre,DYr,GYr,OYr,Iw,B6e,VYr,XYr,Yre,zYr,QYr,WYr,Nw,I6e,UYr,HYr,Kre,JYr,YYr,KYr,qw,N6e,ZYr,eKr,Zre,oKr,rKr,tKr,jw,q6e,aKr,nKr,ete,sKr,lKr,iKr,Dw,j6e,dKr,cKr,ote,fKr,mKr,gKr,Gw,D6e,hKr,pKr,rte,uKr,_Kr,bKr,Ow,G6e,vKr,FKr,tte,TKr,MKr,EKr,Vw,O6e,CKr,wKr,ate,AKr,yKr,LKr,Xw,V6e,xKr,$Kr,nte,kKr,SKr,RKr,zw,MJe,yf,Qw,X6e,rS,PKr,z6e,BKr,EJe,Mr,tS,IKr,Lf,NKr,ste,qKr,jKr,lte,DKr,GKr,OKr,aS,VKr,Q6e,XKr,zKr,QKr,ta,nS,WKr,W6e,UKr,HKr,xf,JKr,U6e,YKr,KKr,ite,ZKr,eZr,oZr,Ww,rZr,Yr,sS,tZr,H6e,aZr,nZr,Nn,sZr,J6e,lZr,iZr,Y6e,dZr,cZr,K6e,fZr,mZr,gZr,xe,Uw,Z6e,hZr,pZr,dte,uZr,_Zr,bZr,Hw,e7e,vZr,FZr,cte,TZr,MZr,EZr,Jw,o7e,CZr,wZr,fte,AZr,yZr,LZr,Yw,r7e,xZr,$Zr,mte,kZr,SZr,RZr,Kw,t7e,PZr,BZr,gte,IZr,NZr,qZr,Zw,a7e,jZr,DZr,hte,GZr,OZr,VZr,eA,n7e,XZr,zZr,pte,QZr,WZr,UZr,oA,s7e,HZr,JZr,ute,YZr,KZr,ZZr,rA,l7e,eet,oet,_te,ret,tet,aet,tA,i7e,net,set,bte,iet,det,cet,aA,CJe,$f,nA,d7e,lS,fet,c7e,met,wJe,Er,iS,get,kf,het,vte,pet,uet,Fte,_et,bet,vet,dS,Fet,f7e,Tet,Met,Eet,aa,cS,Cet,m7e,wet,Aet,Sf,yet,g7e,Let,xet,Tte,$et,ket,Set,sA,Ret,Kr,fS,Pet,h7e,Bet,Iet,qn,Net,p7e,qet,jet,u7e,Det,Get,_7e,Oet,Vet,Xet,Ee,lA,b7e,zet,Qet,Mte,Wet,Uet,Het,iA,v7e,Jet,Yet,Ete,Ket,Zet,eot,dA,F7e,oot,rot,Cte,tot,aot,not,cA,T7e,sot,lot,wte,iot,dot,cot,fA,M7e,fot,mot,Ate,got,hot,pot,mA,E7e,uot,_ot,yte,bot,vot,Fot,gA,C7e,Tot,Mot,Lte,Eot,Cot,wot,hA,w7e,Aot,yot,xte,Lot,xot,$ot,pA,A7e,kot,Sot,$te,Rot,Pot,Bot,uA,y7e,Iot,Not,kte,qot,jot,Dot,_A,L7e,Got,Oot,Ste,Vot,Xot,zot,bA,x7e,Qot,Wot,Rte,Uot,Hot,Jot,vA,$7e,Yot,Kot,Pte,Zot,ert,ort,FA,AJe,Rf,TA,k7e,mS,rrt,S7e,trt,yJe,Cr,gS,art,Pf,nrt,Bte,srt,lrt,Ite,irt,drt,crt,hS,frt,R7e,mrt,grt,hrt,na,pS,prt,P7e,urt,_rt,Bf,brt,B7e,vrt,Frt,Nte,Trt,Mrt,Ert,MA,Crt,Zr,uS,wrt,I7e,Art,yrt,jn,Lrt,N7e,xrt,$rt,q7e,krt,Srt,j7e,Rrt,Prt,Brt,$e,EA,D7e,Irt,Nrt,qte,qrt,jrt,Drt,CA,G7e,Grt,Ort,jte,Vrt,Xrt,zrt,wA,O7e,Qrt,Wrt,Dte,Urt,Hrt,Jrt,AA,V7e,Yrt,Krt,Gte,Zrt,ett,ott,yA,X7e,rtt,ttt,Ote,att,ntt,stt,LA,z7e,ltt,itt,Vte,dtt,ctt,ftt,xA,Q7e,mtt,gtt,Xte,htt,ptt,utt,$A,W7e,_tt,btt,zte,vtt,Ftt,Ttt,kA,U7e,Mtt,Ett,Qte,Ctt,wtt,Att,SA,H7e,ytt,Ltt,Wte,xtt,$tt,ktt,RA,LJe,If,PA,J7e,_S,Stt,Y7e,Rtt,xJe,wr,bS,Ptt,Nf,Btt,Ute,Itt,Ntt,Hte,qtt,jtt,Dtt,vS,Gtt,K7e,Ott,Vtt,Xtt,sa,FS,ztt,Z7e,Qtt,Wtt,qf,Utt,eye,Htt,Jtt,Jte,Ytt,Ktt,Ztt,BA,eat,et,TS,oat,oye,rat,tat,Dn,aat,rye,nat,sat,tye,lat,iat,aye,dat,cat,fat,ke,IA,nye,mat,gat,Yte,hat,pat,uat,NA,sye,_at,bat,Kte,vat,Fat,Tat,qA,lye,Mat,Eat,Zte,Cat,wat,Aat,jA,iye,yat,Lat,eae,xat,$at,kat,DA,dye,Sat,Rat,oae,Pat,Bat,Iat,GA,cye,Nat,qat,rae,jat,Dat,Gat,OA,fye,Oat,Vat,tae,Xat,zat,Qat,VA,mye,Wat,Uat,aae,Hat,Jat,Yat,XA,gye,Kat,Zat,nae,ent,ont,rnt,zA,hye,tnt,ant,sae,nnt,snt,lnt,QA,$Je,jf,WA,pye,MS,int,uye,dnt,kJe,Ar,ES,cnt,Df,fnt,lae,mnt,gnt,iae,hnt,pnt,unt,CS,_nt,_ye,bnt,vnt,Fnt,la,wS,Tnt,bye,Mnt,Ent,Gf,Cnt,vye,wnt,Ant,dae,ynt,Lnt,xnt,UA,$nt,ot,AS,knt,Fye,Snt,Rnt,Gn,Pnt,Tye,Bnt,Int,Mye,Nnt,qnt,Eye,jnt,Dnt,Gnt,Se,HA,Cye,Ont,Vnt,cae,Xnt,znt,Qnt,JA,wye,Wnt,Unt,fae,Hnt,Jnt,Ynt,YA,Aye,Knt,Znt,mae,est,ost,rst,KA,yye,tst,ast,gae,nst,sst,lst,ZA,Lye,ist,dst,hae,cst,fst,mst,e6,xye,gst,hst,pae,pst,ust,_st,o6,$ye,bst,vst,uae,Fst,Tst,Mst,r6,kye,Est,Cst,_ae,wst,Ast,yst,t6,Sye,Lst,xst,bae,$st,kst,Sst,a6,Rye,Rst,Pst,vae,Bst,Ist,Nst,n6,SJe,Of,s6,Pye,yS,qst,Bye,jst,RJe,yr,LS,Dst,Vf,Gst,Fae,Ost,Vst,Tae,Xst,zst,Qst,xS,Wst,Iye,Ust,Hst,Jst,ia,$S,Yst,Nye,Kst,Zst,Xf,elt,qye,olt,rlt,Mae,tlt,alt,nlt,l6,slt,rt,kS,llt,jye,ilt,dlt,On,clt,Dye,flt,mlt,Gye,glt,hlt,Oye,plt,ult,_lt,Re,i6,Vye,blt,vlt,Eae,Flt,Tlt,Mlt,d6,Xye,Elt,Clt,Cae,wlt,Alt,ylt,c6,zye,Llt,xlt,wae,$lt,klt,Slt,f6,Qye,Rlt,Plt,Aae,Blt,Ilt,Nlt,m6,Wye,qlt,jlt,yae,Dlt,Glt,Olt,g6,Uye,Vlt,Xlt,Lae,zlt,Qlt,Wlt,h6,Hye,Ult,Hlt,xae,Jlt,Ylt,Klt,p6,Jye,Zlt,eit,$ae,oit,rit,tit,u6,Yye,ait,nit,kae,sit,lit,iit,_6,Kye,dit,cit,Sae,fit,mit,git,b6,PJe,zf,v6,Zye,SS,hit,eLe,pit,BJe,Lr,RS,uit,Qf,_it,Rae,bit,vit,Pae,Fit,Tit,Mit,PS,Eit,oLe,Cit,wit,Ait,da,BS,yit,rLe,Lit,xit,Wf,$it,tLe,kit,Sit,Bae,Rit,Pit,Bit,F6,Iit,tt,IS,Nit,aLe,qit,jit,Vn,Dit,nLe,Git,Oit,sLe,Vit,Xit,lLe,zit,Qit,Wit,Xe,T6,iLe,Uit,Hit,Iae,Jit,Yit,Kit,M6,dLe,Zit,edt,Nae,odt,rdt,tdt,E6,cLe,adt,ndt,qae,sdt,ldt,idt,C6,fLe,ddt,cdt,jae,fdt,mdt,gdt,w6,mLe,hdt,pdt,Dae,udt,_dt,bdt,A6,gLe,vdt,Fdt,Gae,Tdt,Mdt,Edt,y6,hLe,Cdt,wdt,Oae,Adt,ydt,Ldt,L6,pLe,xdt,$dt,Vae,kdt,Sdt,Rdt,x6,IJe,Uf,$6,uLe,NS,Pdt,_Le,Bdt,NJe,xr,qS,Idt,Hf,Ndt,Xae,qdt,jdt,zae,Ddt,Gdt,Odt,jS,Vdt,bLe,Xdt,zdt,Qdt,ca,DS,Wdt,vLe,Udt,Hdt,Jf,Jdt,FLe,Ydt,Kdt,Qae,Zdt,ect,oct,k6,rct,at,GS,tct,TLe,act,nct,Xn,sct,MLe,lct,ict,ELe,dct,cct,CLe,fct,mct,gct,ze,S6,wLe,hct,pct,Wae,uct,_ct,bct,R6,ALe,vct,Fct,Uae,Tct,Mct,Ect,P6,yLe,Cct,wct,Hae,Act,yct,Lct,B6,LLe,xct,$ct,Jae,kct,Sct,Rct,I6,xLe,Pct,Bct,Yae,Ict,Nct,qct,N6,$Le,jct,Dct,Kae,Gct,Oct,Vct,q6,kLe,Xct,zct,Zae,Qct,Wct,Uct,j6,SLe,Hct,Jct,ene,Yct,Kct,Zct,D6,qJe,Yf,G6,RLe,OS,eft,PLe,oft,jJe,$r,VS,rft,Kf,tft,one,aft,nft,rne,sft,lft,ift,XS,dft,BLe,cft,fft,mft,fa,zS,gft,ILe,hft,pft,Zf,uft,NLe,_ft,bft,tne,vft,Fft,Tft,O6,Mft,nt,QS,Eft,qLe,Cft,wft,zn,Aft,jLe,yft,Lft,DLe,xft,$ft,GLe,kft,Sft,Rft,OLe,V6,VLe,Pft,Bft,ane,Ift,Nft,qft,X6,DJe,em,z6,XLe,WS,jft,zLe,Dft,GJe,kr,US,Gft,om,Oft,nne,Vft,Xft,sne,zft,Qft,Wft,HS,Uft,QLe,Hft,Jft,Yft,ma,JS,Kft,WLe,Zft,emt,rm,omt,ULe,rmt,tmt,lne,amt,nmt,smt,Q6,lmt,st,YS,imt,HLe,dmt,cmt,Qn,fmt,JLe,mmt,gmt,YLe,hmt,pmt,KLe,umt,_mt,bmt,KS,W6,ZLe,vmt,Fmt,ine,Tmt,Mmt,Emt,U6,e9e,Cmt,wmt,dne,Amt,ymt,Lmt,H6,OJe,tm,J6,o9e,ZS,xmt,r9e,$mt,VJe,Sr,eR,kmt,am,Smt,cne,Rmt,Pmt,fne,Bmt,Imt,Nmt,oR,qmt,t9e,jmt,Dmt,Gmt,ga,rR,Omt,a9e,Vmt,Xmt,nm,zmt,n9e,Qmt,Wmt,mne,Umt,Hmt,Jmt,Y6,Ymt,lt,tR,Kmt,s9e,Zmt,egt,Wn,ogt,l9e,rgt,tgt,i9e,agt,ngt,d9e,sgt,lgt,igt,c9e,K6,f9e,dgt,cgt,gne,fgt,mgt,ggt,Z6,XJe;return d=new oe({}),Va=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),kL=new oe({}),SL=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),hm=new hgt({props:{warning:!0,$$slots:{default:[Haa]},$$scope:{ctx:$}}}),RL=new oe({}),PL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/configuration_auto.py#L625"}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/configuration_auto.py#L648"}}),$h=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Jaa]},$$scope:{ctx:$}}}),qL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/configuration_auto.py#L771"}}),jL=new oe({}),DL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/tokenization_auto.py#L418"}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18414/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/tokenization_auto.py#L432"}}),mp=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Yaa]},$$scope:{ctx:$}}}),XL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/tokenization_auto.py#L633"}}),zL=new oe({}),QL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/feature_extraction_auto.py#L199"}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18414/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/feature_extraction_auto.py#L213"}}),Zp=new hgt({props:{$$slots:{default:[Kaa]},$$scope:{ctx:$}}}),eu=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Zaa]},$$scope:{ctx:$}}}),JL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/feature_extraction_auto.py#L340"}}),YL=new oe({}),KL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/processing_auto.py#L91"}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/processing_auto.py#L105"}}),Eu=new hgt({props:{$$slots:{default:[ena]},$$scope:{ctx:$}}}),Cu=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[ona]},$$scope:{ctx:$}}}),r9=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/processing_auto.py#L258"}}),t9=new oe({}),a9=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L824"}}),s9=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),yu=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[rna]},$$scope:{ctx:$}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),I1=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[tna]},$$scope:{ctx:$}}}),i9=new oe({}),d9=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L831"}}),f9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),q1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[ana]},$$scope:{ctx:$}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),R4=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[nna]},$$scope:{ctx:$}}}),g9=new oe({}),h9=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L846"}}),u9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),B4=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[sna]},$$scope:{ctx:$}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),E2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[lna]},$$scope:{ctx:$}}}),b9=new oe({}),v9=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L853"}}),T9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),w2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[ina]},$$scope:{ctx:$}}}),M9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),fb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[dna]},$$scope:{ctx:$}}}),E9=new oe({}),C9=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L860"}}),A9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),gb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[cna]},$$scope:{ctx:$}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),Pb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[fna]},$$scope:{ctx:$}}}),L9=new oe({}),x9=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L869"}}),k9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),Ib=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[mna]},$$scope:{ctx:$}}}),S9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),Iv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[gna]},$$scope:{ctx:$}}}),R9=new oe({}),P9=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L925"}}),I9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),qv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[hna]},$$scope:{ctx:$}}}),N9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),_F=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[pna]},$$scope:{ctx:$}}}),q9=new oe({}),j9=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L932"}}),G9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),vF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[una]},$$scope:{ctx:$}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),yF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[_na]},$$scope:{ctx:$}}}),V9=new oe({}),X9=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L918"}}),Q9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),xF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[bna]},$$scope:{ctx:$}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),hT=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[vna]},$$scope:{ctx:$}}}),U9=new oe({}),H9=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L878"}}),Y9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),uT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Fna]},$$scope:{ctx:$}}}),K9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),l8=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Tna]},$$scope:{ctx:$}}}),Z9=new oe({}),ex=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L885"}}),rx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),d8=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Mna]},$$scope:{ctx:$}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),m8=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Ena]},$$scope:{ctx:$}}}),ax=new oe({}),nx=new R({props:{name:"class transformers.AutoModelForDocumentQuestionAnswering",anchor:"transformers.AutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L907"}}),lx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),h8=new B({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[Cna]},$$scope:{ctx:$}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),b8=new B({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[wna]},$$scope:{ctx:$}}}),cx=new oe({}),fx=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L941"}}),gx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18414/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18414/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18414/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18414/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),F8=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Ana]},$$scope:{ctx:$}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),I8=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[yna]},$$scope:{ctx:$}}}),px=new oe({}),ux=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L980"}}),bx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),q8=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[Lna]},$$scope:{ctx:$}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),G8=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[xna]},$$scope:{ctx:$}}}),Fx=new oe({}),Tx=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L987"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),V8=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[$na]},$$scope:{ctx:$}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),Q8=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[kna]},$$scope:{ctx:$}}}),wx=new oe({}),Ax=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L896"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),U8=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[Sna]},$$scope:{ctx:$}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),Y8=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Rna]},$$scope:{ctx:$}}}),$x=new oe({}),kx=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L994"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),Z8=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Pna]},$$scope:{ctx:$}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),cM=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Bna]},$$scope:{ctx:$}}}),Bx=new oe({}),Ix=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L1017"}}),qx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),mM=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Ina]},$$scope:{ctx:$}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),vM=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Nna]},$$scope:{ctx:$}}}),Dx=new oe({}),Gx=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L1001"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),TM=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[qna]},$$scope:{ctx:$}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),RM=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[jna]},$$scope:{ctx:$}}}),zx=new oe({}),Qx=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L1008"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),BM=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Dna]},$$scope:{ctx:$}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),jM=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Gna]},$$scope:{ctx:$}}}),Yx=new oe({}),Kx=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L1026"}}),e$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),GM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Ona]},$$scope:{ctx:$}}}),o$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),UM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Vna]},$$scope:{ctx:$}}}),r$=new oe({}),t$=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L1033"}}),n$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),JM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Xna]},$$scope:{ctx:$}}}),s$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),rE=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[zna]},$$scope:{ctx:$}}}),l$=new oe({}),i$=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L973"}}),c$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),aE=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Qna]},$$scope:{ctx:$}}}),f$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),iE=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Wna]},$$scope:{ctx:$}}}),g$=new oe({}),h$=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L948"}}),u$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),cE=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Una]},$$scope:{ctx:$}}}),_$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),gE=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Hna]},$$scope:{ctx:$}}}),b$=new oe({}),v$=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L955"}}),T$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),pE=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Jna]},$$scope:{ctx:$}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Yna]},$$scope:{ctx:$}}}),E$=new oe({}),C$=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_auto.py#L964"}}),A$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Kna]},$$scope:{ctx:$}}}),y$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),yE=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Zna]},$$scope:{ctx:$}}}),L$=new oe({}),x$=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),k$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),xE=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[esa]},$$scope:{ctx:$}}}),S$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),AC=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[osa]},$$scope:{ctx:$}}}),R$=new oe({}),P$=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),I$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),LC=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[rsa]},$$scope:{ctx:$}}}),N$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[tsa]},$$scope:{ctx:$}}}),q$=new oe({}),j$=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),G$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[asa]},$$scope:{ctx:$}}}),O$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),h3=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[nsa]},$$scope:{ctx:$}}}),V$=new oe({}),X$=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_18414/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),u3=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[ssa]},$$scope:{ctx:$}}}),W$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),C3=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[lsa]},$$scope:{ctx:$}}}),U$=new oe({}),H$=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_tf_auto.py#L463"}}),Y$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),A3=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[isa]},$$scope:{ctx:$}}}),K$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),x3=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[dsa]},$$scope:{ctx:$}}}),ek=new oe({}),ok=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),tk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),k3=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[csa]},$$scope:{ctx:$}}}),ak=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),K3=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[fsa]},$$scope:{ctx:$}}}),nk=new oe({}),sk=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),ik=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),e5=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[msa]},$$scope:{ctx:$}}}),dk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[gsa]},$$scope:{ctx:$}}}),ck=new oe({}),fk=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_tf_auto.py#L495"}}),gk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),g5=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[hsa]},$$scope:{ctx:$}}}),hk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[psa]},$$scope:{ctx:$}}}),pk=new oe({}),uk=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),bk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[usa]},$$scope:{ctx:$}}}),vk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),s0=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[_sa]},$$scope:{ctx:$}}}),Fk=new oe({}),Tk=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_tf_auto.py#L538"}}),Ek=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),i0=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[bsa]},$$scope:{ctx:$}}}),Ck=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),f0=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[vsa]},$$scope:{ctx:$}}}),Ak=new oe({}),yk=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),xk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),g0=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Fsa]},$$scope:{ctx:$}}}),$k=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),p0=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Tsa]},$$scope:{ctx:$}}}),kk=new oe({}),Sk=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),Pk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),_0=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Msa]},$$scope:{ctx:$}}}),Bk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),q0=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Esa]},$$scope:{ctx:$}}}),Ik=new oe({}),Nk=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),jk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),D0=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Csa]},$$scope:{ctx:$}}}),Dk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),lw=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[wsa]},$$scope:{ctx:$}}}),Gk=new oe({}),Ok=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),Xk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),dw=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Asa]},$$scope:{ctx:$}}}),zk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),fw=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ysa]},$$scope:{ctx:$}}}),Qk=new oe({}),Wk=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_tf_auto.py#L547"}}),Hk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),gw=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Lsa]},$$scope:{ctx:$}}}),Jk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),pw=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[xsa]},$$scope:{ctx:$}}}),Yk=new oe({}),Kk=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),eS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),_w=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[$sa]},$$scope:{ctx:$}}}),oS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),zw=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[ksa]},$$scope:{ctx:$}}}),rS=new oe({}),tS=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),nS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),Ww=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Ssa]},$$scope:{ctx:$}}}),sS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),aA=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Rsa]},$$scope:{ctx:$}}}),lS=new oe({}),iS=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),cS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),sA=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Psa]},$$scope:{ctx:$}}}),fS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),FA=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Bsa]},$$scope:{ctx:$}}}),mS=new oe({}),gS=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),pS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),MA=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Isa]},$$scope:{ctx:$}}}),uS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),RA=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Nsa]},$$scope:{ctx:$}}}),_S=new oe({}),bS=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),FS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),BA=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[qsa]},$$scope:{ctx:$}}}),TS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),QA=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[jsa]},$$scope:{ctx:$}}}),MS=new oe({}),ES=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),wS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),UA=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Dsa]},$$scope:{ctx:$}}}),AS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),n6=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Gsa]},$$scope:{ctx:$}}}),yS=new oe({}),LS=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),$S=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),l6=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Osa]},$$scope:{ctx:$}}}),kS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),b6=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Vsa]},$$scope:{ctx:$}}}),SS=new oe({}),RS=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),BS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),F6=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Xsa]},$$scope:{ctx:$}}}),IS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),x6=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[zsa]},$$scope:{ctx:$}}}),NS=new oe({}),qS=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),DS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),k6=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Qsa]},$$scope:{ctx:$}}}),GS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),D6=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Wsa]},$$scope:{ctx:$}}}),OS=new oe({}),VS=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),zS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),O6=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Usa]},$$scope:{ctx:$}}}),QS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),X6=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Hsa]},$$scope:{ctx:$}}}),WS=new oe({}),US=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),JS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18414/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),Q6=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Jsa]},$$scope:{ctx:$}}}),YS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),H6=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Ysa]},$$scope:{ctx:$}}}),ZS=new oe({}),eR=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),rR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18414/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18414/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L389"}}),Y6=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Ksa]},$$scope:{ctx:$}}}),tR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18414/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18414/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18414/src/transformers/models/auto/auto_factory.py#L417"}}),Z6=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Zsa]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),yo=a("span"),Ui=o("Auto Classes"),dm=l(),gt=a("p"),Hi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ji=a("code"),yL=o("from_pretrained()"),cm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),Yi=o("Instantiating one of "),Hn=a("a"),LL=o("AutoConfig"),Jn=o(", "),Yn=a("a"),xL=o("AutoModel"),Ki=o(`, and
`),Kn=a("a"),$L=o("AutoTokenizer"),Zi=o(" will directly create a class of the relevant architecture. For instance"),fm=l(),F(Va.$$.fragment),Ue=l(),Ae=a("p"),yP=o("will create a model that is an instance of "),ed=a("a"),LP=o("BertModel"),xP=o("."),Lo=l(),Xa=a("p"),$P=o("There is one class of "),mm=a("code"),kP=o("AutoModel"),iZe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),RUe=l(),od=a("h2"),gm=a("a"),gle=a("span"),F(kL.$$.fragment),dZe=l(),hle=a("span"),cZe=o("Extending the Auto Classes"),PUe=l(),Zn=a("p"),fZe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ple=a("code"),mZe=o("NewModel"),gZe=o(", make sure you have a "),ule=a("code"),hZe=o("NewModelConfig"),pZe=o(` then you can add those to the auto
classes like this:`),BUe=l(),F(SL.$$.fragment),IUe=l(),SP=a("p"),uZe=o("You will then be able to use the auto classes like you would usually do!"),NUe=l(),F(hm.$$.fragment),qUe=l(),rd=a("h2"),pm=a("a"),_le=a("span"),F(RL.$$.fragment),_Ze=l(),ble=a("span"),bZe=o("AutoConfig"),jUe=l(),xo=a("div"),F(PL.$$.fragment),vZe=l(),BL=a("p"),FZe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),RP=a("a"),TZe=o("from_pretrained()"),MZe=o(" class method."),EZe=l(),IL=a("p"),CZe=o("This class cannot be instantiated directly using "),vle=a("code"),wZe=o("__init__()"),AZe=o(" (throws an error)."),yZe=l(),Rr=a("div"),F(NL.$$.fragment),LZe=l(),Fle=a("p"),xZe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),$Ze=l(),td=a("p"),kZe=o("The configuration class to instantiate is selected based on the "),Tle=a("code"),SZe=o("model_type"),RZe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Mle=a("code"),PZe=o("pretrained_model_name_or_path"),BZe=o(":"),IZe=l(),A=a("ul"),um=a("li"),Ele=a("strong"),NZe=o("albert"),qZe=o(" \u2014 "),PP=a("a"),jZe=o("AlbertConfig"),DZe=o(" (ALBERT model)"),GZe=l(),_m=a("li"),Cle=a("strong"),OZe=o("bart"),VZe=o(" \u2014 "),BP=a("a"),XZe=o("BartConfig"),zZe=o(" (BART model)"),QZe=l(),bm=a("li"),wle=a("strong"),WZe=o("beit"),UZe=o(" \u2014 "),IP=a("a"),HZe=o("BeitConfig"),JZe=o(" (BEiT model)"),YZe=l(),vm=a("li"),Ale=a("strong"),KZe=o("bert"),ZZe=o(" \u2014 "),NP=a("a"),eeo=o("BertConfig"),oeo=o(" (BERT model)"),reo=l(),Fm=a("li"),yle=a("strong"),teo=o("bert-generation"),aeo=o(" \u2014 "),qP=a("a"),neo=o("BertGenerationConfig"),seo=o(" (Bert Generation model)"),leo=l(),Tm=a("li"),Lle=a("strong"),ieo=o("big_bird"),deo=o(" \u2014 "),jP=a("a"),ceo=o("BigBirdConfig"),feo=o(" (BigBird model)"),meo=l(),Mm=a("li"),xle=a("strong"),geo=o("bigbird_pegasus"),heo=o(" \u2014 "),DP=a("a"),peo=o("BigBirdPegasusConfig"),ueo=o(" (BigBird-Pegasus model)"),_eo=l(),Em=a("li"),$le=a("strong"),beo=o("blenderbot"),veo=o(" \u2014 "),GP=a("a"),Feo=o("BlenderbotConfig"),Teo=o(" (Blenderbot model)"),Meo=l(),Cm=a("li"),kle=a("strong"),Eeo=o("blenderbot-small"),Ceo=o(" \u2014 "),OP=a("a"),weo=o("BlenderbotSmallConfig"),Aeo=o(" (BlenderbotSmall model)"),yeo=l(),wm=a("li"),Sle=a("strong"),Leo=o("bloom"),xeo=o(" \u2014 "),VP=a("a"),$eo=o("BloomConfig"),keo=o(" (BLOOM model)"),Seo=l(),Am=a("li"),Rle=a("strong"),Reo=o("camembert"),Peo=o(" \u2014 "),XP=a("a"),Beo=o("CamembertConfig"),Ieo=o(" (CamemBERT model)"),Neo=l(),ym=a("li"),Ple=a("strong"),qeo=o("canine"),jeo=o(" \u2014 "),zP=a("a"),Deo=o("CanineConfig"),Geo=o(" (CANINE model)"),Oeo=l(),Lm=a("li"),Ble=a("strong"),Veo=o("clip"),Xeo=o(" \u2014 "),QP=a("a"),zeo=o("CLIPConfig"),Qeo=o(" (CLIP model)"),Weo=l(),xm=a("li"),Ile=a("strong"),Ueo=o("codegen"),Heo=o(" \u2014 "),WP=a("a"),Jeo=o("CodeGenConfig"),Yeo=o(" (CodeGen model)"),Keo=l(),$m=a("li"),Nle=a("strong"),Zeo=o("convbert"),eoo=o(" \u2014 "),UP=a("a"),ooo=o("ConvBertConfig"),roo=o(" (ConvBERT model)"),too=l(),km=a("li"),qle=a("strong"),aoo=o("convnext"),noo=o(" \u2014 "),HP=a("a"),soo=o("ConvNextConfig"),loo=o(" (ConvNeXT model)"),ioo=l(),Sm=a("li"),jle=a("strong"),doo=o("ctrl"),coo=o(" \u2014 "),JP=a("a"),foo=o("CTRLConfig"),moo=o(" (CTRL model)"),goo=l(),Rm=a("li"),Dle=a("strong"),hoo=o("cvt"),poo=o(" \u2014 "),YP=a("a"),uoo=o("CvtConfig"),_oo=o(" (CvT model)"),boo=l(),Pm=a("li"),Gle=a("strong"),voo=o("data2vec-audio"),Foo=o(" \u2014 "),KP=a("a"),Too=o("Data2VecAudioConfig"),Moo=o(" (Data2VecAudio model)"),Eoo=l(),Bm=a("li"),Ole=a("strong"),Coo=o("data2vec-text"),woo=o(" \u2014 "),ZP=a("a"),Aoo=o("Data2VecTextConfig"),yoo=o(" (Data2VecText model)"),Loo=l(),Im=a("li"),Vle=a("strong"),xoo=o("data2vec-vision"),$oo=o(" \u2014 "),eB=a("a"),koo=o("Data2VecVisionConfig"),Soo=o(" (Data2VecVision model)"),Roo=l(),Nm=a("li"),Xle=a("strong"),Poo=o("deberta"),Boo=o(" \u2014 "),oB=a("a"),Ioo=o("DebertaConfig"),Noo=o(" (DeBERTa model)"),qoo=l(),qm=a("li"),zle=a("strong"),joo=o("deberta-v2"),Doo=o(" \u2014 "),rB=a("a"),Goo=o("DebertaV2Config"),Ooo=o(" (DeBERTa-v2 model)"),Voo=l(),jm=a("li"),Qle=a("strong"),Xoo=o("decision_transformer"),zoo=o(" \u2014 "),tB=a("a"),Qoo=o("DecisionTransformerConfig"),Woo=o(" (Decision Transformer model)"),Uoo=l(),Dm=a("li"),Wle=a("strong"),Hoo=o("deit"),Joo=o(" \u2014 "),aB=a("a"),Yoo=o("DeiTConfig"),Koo=o(" (DeiT model)"),Zoo=l(),Gm=a("li"),Ule=a("strong"),ero=o("detr"),oro=o(" \u2014 "),nB=a("a"),rro=o("DetrConfig"),tro=o(" (DETR model)"),aro=l(),Om=a("li"),Hle=a("strong"),nro=o("distilbert"),sro=o(" \u2014 "),sB=a("a"),lro=o("DistilBertConfig"),iro=o(" (DistilBERT model)"),dro=l(),Vm=a("li"),Jle=a("strong"),cro=o("donut-swin"),fro=o(" \u2014 "),lB=a("a"),mro=o("DonutSwinConfig"),gro=o(" (DonutSwin model)"),hro=l(),Xm=a("li"),Yle=a("strong"),pro=o("dpr"),uro=o(" \u2014 "),iB=a("a"),_ro=o("DPRConfig"),bro=o(" (DPR model)"),vro=l(),zm=a("li"),Kle=a("strong"),Fro=o("dpt"),Tro=o(" \u2014 "),dB=a("a"),Mro=o("DPTConfig"),Ero=o(" (DPT model)"),Cro=l(),Qm=a("li"),Zle=a("strong"),wro=o("electra"),Aro=o(" \u2014 "),cB=a("a"),yro=o("ElectraConfig"),Lro=o(" (ELECTRA model)"),xro=l(),Wm=a("li"),eie=a("strong"),$ro=o("encoder-decoder"),kro=o(" \u2014 "),fB=a("a"),Sro=o("EncoderDecoderConfig"),Rro=o(" (Encoder decoder model)"),Pro=l(),Um=a("li"),oie=a("strong"),Bro=o("flaubert"),Iro=o(" \u2014 "),mB=a("a"),Nro=o("FlaubertConfig"),qro=o(" (FlauBERT model)"),jro=l(),Hm=a("li"),rie=a("strong"),Dro=o("flava"),Gro=o(" \u2014 "),gB=a("a"),Oro=o("FlavaConfig"),Vro=o(" (FLAVA model)"),Xro=l(),Jm=a("li"),tie=a("strong"),zro=o("fnet"),Qro=o(" \u2014 "),hB=a("a"),Wro=o("FNetConfig"),Uro=o(" (FNet model)"),Hro=l(),Ym=a("li"),aie=a("strong"),Jro=o("fsmt"),Yro=o(" \u2014 "),pB=a("a"),Kro=o("FSMTConfig"),Zro=o(" (FairSeq Machine-Translation model)"),eto=l(),Km=a("li"),nie=a("strong"),oto=o("funnel"),rto=o(" \u2014 "),uB=a("a"),tto=o("FunnelConfig"),ato=o(" (Funnel Transformer model)"),nto=l(),Zm=a("li"),sie=a("strong"),sto=o("glpn"),lto=o(" \u2014 "),_B=a("a"),ito=o("GLPNConfig"),dto=o(" (GLPN model)"),cto=l(),eg=a("li"),lie=a("strong"),fto=o("gpt2"),mto=o(" \u2014 "),bB=a("a"),gto=o("GPT2Config"),hto=o(" (OpenAI GPT-2 model)"),pto=l(),og=a("li"),iie=a("strong"),uto=o("gpt_neo"),_to=o(" \u2014 "),vB=a("a"),bto=o("GPTNeoConfig"),vto=o(" (GPT Neo model)"),Fto=l(),rg=a("li"),die=a("strong"),Tto=o("gpt_neox"),Mto=o(" \u2014 "),FB=a("a"),Eto=o("GPTNeoXConfig"),Cto=o(" (GPT NeoX model)"),wto=l(),tg=a("li"),cie=a("strong"),Ato=o("gptj"),yto=o(" \u2014 "),TB=a("a"),Lto=o("GPTJConfig"),xto=o(" (GPT-J model)"),$to=l(),ag=a("li"),fie=a("strong"),kto=o("groupvit"),Sto=o(" \u2014 "),MB=a("a"),Rto=o("GroupViTConfig"),Pto=o(" (GroupViT model)"),Bto=l(),ng=a("li"),mie=a("strong"),Ito=o("hubert"),Nto=o(" \u2014 "),EB=a("a"),qto=o("HubertConfig"),jto=o(" (Hubert model)"),Dto=l(),sg=a("li"),gie=a("strong"),Gto=o("ibert"),Oto=o(" \u2014 "),CB=a("a"),Vto=o("IBertConfig"),Xto=o(" (I-BERT model)"),zto=l(),lg=a("li"),hie=a("strong"),Qto=o("imagegpt"),Wto=o(" \u2014 "),wB=a("a"),Uto=o("ImageGPTConfig"),Hto=o(" (ImageGPT model)"),Jto=l(),ig=a("li"),pie=a("strong"),Yto=o("layoutlm"),Kto=o(" \u2014 "),AB=a("a"),Zto=o("LayoutLMConfig"),eao=o(" (LayoutLM model)"),oao=l(),dg=a("li"),uie=a("strong"),rao=o("layoutlmv2"),tao=o(" \u2014 "),yB=a("a"),aao=o("LayoutLMv2Config"),nao=o(" (LayoutLMv2 model)"),sao=l(),cg=a("li"),_ie=a("strong"),lao=o("layoutlmv3"),iao=o(" \u2014 "),LB=a("a"),dao=o("LayoutLMv3Config"),cao=o(" (LayoutLMv3 model)"),fao=l(),fg=a("li"),bie=a("strong"),mao=o("led"),gao=o(" \u2014 "),xB=a("a"),hao=o("LEDConfig"),pao=o(" (LED model)"),uao=l(),mg=a("li"),vie=a("strong"),_ao=o("levit"),bao=o(" \u2014 "),$B=a("a"),vao=o("LevitConfig"),Fao=o(" (LeViT model)"),Tao=l(),gg=a("li"),Fie=a("strong"),Mao=o("longformer"),Eao=o(" \u2014 "),kB=a("a"),Cao=o("LongformerConfig"),wao=o(" (Longformer model)"),Aao=l(),hg=a("li"),Tie=a("strong"),yao=o("longt5"),Lao=o(" \u2014 "),SB=a("a"),xao=o("LongT5Config"),$ao=o(" (LongT5 model)"),kao=l(),pg=a("li"),Mie=a("strong"),Sao=o("luke"),Rao=o(" \u2014 "),RB=a("a"),Pao=o("LukeConfig"),Bao=o(" (LUKE model)"),Iao=l(),ug=a("li"),Eie=a("strong"),Nao=o("lxmert"),qao=o(" \u2014 "),PB=a("a"),jao=o("LxmertConfig"),Dao=o(" (LXMERT model)"),Gao=l(),_g=a("li"),Cie=a("strong"),Oao=o("m2m_100"),Vao=o(" \u2014 "),BB=a("a"),Xao=o("M2M100Config"),zao=o(" (M2M100 model)"),Qao=l(),bg=a("li"),wie=a("strong"),Wao=o("marian"),Uao=o(" \u2014 "),IB=a("a"),Hao=o("MarianConfig"),Jao=o(" (Marian model)"),Yao=l(),vg=a("li"),Aie=a("strong"),Kao=o("maskformer"),Zao=o(" \u2014 "),NB=a("a"),eno=o("MaskFormerConfig"),ono=o(" (MaskFormer model)"),rno=l(),Fg=a("li"),yie=a("strong"),tno=o("mbart"),ano=o(" \u2014 "),qB=a("a"),nno=o("MBartConfig"),sno=o(" (mBART model)"),lno=l(),Tg=a("li"),Lie=a("strong"),ino=o("mctct"),dno=o(" \u2014 "),jB=a("a"),cno=o("MCTCTConfig"),fno=o(" (M-CTC-T model)"),mno=l(),Mg=a("li"),xie=a("strong"),gno=o("megatron-bert"),hno=o(" \u2014 "),DB=a("a"),pno=o("MegatronBertConfig"),uno=o(" (Megatron-BERT model)"),_no=l(),Eg=a("li"),$ie=a("strong"),bno=o("mobilebert"),vno=o(" \u2014 "),GB=a("a"),Fno=o("MobileBertConfig"),Tno=o(" (MobileBERT model)"),Mno=l(),Cg=a("li"),kie=a("strong"),Eno=o("mobilevit"),Cno=o(" \u2014 "),OB=a("a"),wno=o("MobileViTConfig"),Ano=o(" (MobileViT model)"),yno=l(),wg=a("li"),Sie=a("strong"),Lno=o("mpnet"),xno=o(" \u2014 "),VB=a("a"),$no=o("MPNetConfig"),kno=o(" (MPNet model)"),Sno=l(),Ag=a("li"),Rie=a("strong"),Rno=o("mt5"),Pno=o(" \u2014 "),XB=a("a"),Bno=o("MT5Config"),Ino=o(" (MT5 model)"),Nno=l(),yg=a("li"),Pie=a("strong"),qno=o("mvp"),jno=o(" \u2014 "),zB=a("a"),Dno=o("MvpConfig"),Gno=o(" (MVP model)"),Ono=l(),Lg=a("li"),Bie=a("strong"),Vno=o("nezha"),Xno=o(" \u2014 "),QB=a("a"),zno=o("NezhaConfig"),Qno=o(" (Nezha model)"),Wno=l(),xg=a("li"),Iie=a("strong"),Uno=o("nystromformer"),Hno=o(" \u2014 "),WB=a("a"),Jno=o("NystromformerConfig"),Yno=o(" (Nystr\xF6mformer model)"),Kno=l(),$g=a("li"),Nie=a("strong"),Zno=o("openai-gpt"),eso=o(" \u2014 "),UB=a("a"),oso=o("OpenAIGPTConfig"),rso=o(" (OpenAI GPT model)"),tso=l(),kg=a("li"),qie=a("strong"),aso=o("opt"),nso=o(" \u2014 "),HB=a("a"),sso=o("OPTConfig"),lso=o(" (OPT model)"),iso=l(),Sg=a("li"),jie=a("strong"),dso=o("owlvit"),cso=o(" \u2014 "),JB=a("a"),fso=o("OwlViTConfig"),mso=o(" (OWL-ViT model)"),gso=l(),Rg=a("li"),Die=a("strong"),hso=o("pegasus"),pso=o(" \u2014 "),YB=a("a"),uso=o("PegasusConfig"),_so=o(" (Pegasus model)"),bso=l(),Pg=a("li"),Gie=a("strong"),vso=o("perceiver"),Fso=o(" \u2014 "),KB=a("a"),Tso=o("PerceiverConfig"),Mso=o(" (Perceiver model)"),Eso=l(),Bg=a("li"),Oie=a("strong"),Cso=o("plbart"),wso=o(" \u2014 "),ZB=a("a"),Aso=o("PLBartConfig"),yso=o(" (PLBart model)"),Lso=l(),Ig=a("li"),Vie=a("strong"),xso=o("poolformer"),$so=o(" \u2014 "),eI=a("a"),kso=o("PoolFormerConfig"),Sso=o(" (PoolFormer model)"),Rso=l(),Ng=a("li"),Xie=a("strong"),Pso=o("prophetnet"),Bso=o(" \u2014 "),oI=a("a"),Iso=o("ProphetNetConfig"),Nso=o(" (ProphetNet model)"),qso=l(),qg=a("li"),zie=a("strong"),jso=o("qdqbert"),Dso=o(" \u2014 "),rI=a("a"),Gso=o("QDQBertConfig"),Oso=o(" (QDQBert model)"),Vso=l(),jg=a("li"),Qie=a("strong"),Xso=o("rag"),zso=o(" \u2014 "),tI=a("a"),Qso=o("RagConfig"),Wso=o(" (RAG model)"),Uso=l(),Dg=a("li"),Wie=a("strong"),Hso=o("realm"),Jso=o(" \u2014 "),aI=a("a"),Yso=o("RealmConfig"),Kso=o(" (REALM model)"),Zso=l(),Gg=a("li"),Uie=a("strong"),elo=o("reformer"),olo=o(" \u2014 "),nI=a("a"),rlo=o("ReformerConfig"),tlo=o(" (Reformer model)"),alo=l(),Og=a("li"),Hie=a("strong"),nlo=o("regnet"),slo=o(" \u2014 "),sI=a("a"),llo=o("RegNetConfig"),ilo=o(" (RegNet model)"),dlo=l(),Vg=a("li"),Jie=a("strong"),clo=o("rembert"),flo=o(" \u2014 "),lI=a("a"),mlo=o("RemBertConfig"),glo=o(" (RemBERT model)"),hlo=l(),Xg=a("li"),Yie=a("strong"),plo=o("resnet"),ulo=o(" \u2014 "),iI=a("a"),_lo=o("ResNetConfig"),blo=o(" (ResNet model)"),vlo=l(),zg=a("li"),Kie=a("strong"),Flo=o("retribert"),Tlo=o(" \u2014 "),dI=a("a"),Mlo=o("RetriBertConfig"),Elo=o(" (RetriBERT model)"),Clo=l(),Qg=a("li"),Zie=a("strong"),wlo=o("roberta"),Alo=o(" \u2014 "),cI=a("a"),ylo=o("RobertaConfig"),Llo=o(" (RoBERTa model)"),xlo=l(),Wg=a("li"),ede=a("strong"),$lo=o("roformer"),klo=o(" \u2014 "),fI=a("a"),Slo=o("RoFormerConfig"),Rlo=o(" (RoFormer model)"),Plo=l(),Ug=a("li"),ode=a("strong"),Blo=o("segformer"),Ilo=o(" \u2014 "),mI=a("a"),Nlo=o("SegformerConfig"),qlo=o(" (SegFormer model)"),jlo=l(),Hg=a("li"),rde=a("strong"),Dlo=o("sew"),Glo=o(" \u2014 "),gI=a("a"),Olo=o("SEWConfig"),Vlo=o(" (SEW model)"),Xlo=l(),Jg=a("li"),tde=a("strong"),zlo=o("sew-d"),Qlo=o(" \u2014 "),hI=a("a"),Wlo=o("SEWDConfig"),Ulo=o(" (SEW-D model)"),Hlo=l(),Yg=a("li"),ade=a("strong"),Jlo=o("speech-encoder-decoder"),Ylo=o(" \u2014 "),pI=a("a"),Klo=o("SpeechEncoderDecoderConfig"),Zlo=o(" (Speech Encoder decoder model)"),eio=l(),Kg=a("li"),nde=a("strong"),oio=o("speech_to_text"),rio=o(" \u2014 "),uI=a("a"),tio=o("Speech2TextConfig"),aio=o(" (Speech2Text model)"),nio=l(),Zg=a("li"),sde=a("strong"),sio=o("speech_to_text_2"),lio=o(" \u2014 "),_I=a("a"),iio=o("Speech2Text2Config"),dio=o(" (Speech2Text2 model)"),cio=l(),eh=a("li"),lde=a("strong"),fio=o("splinter"),mio=o(" \u2014 "),bI=a("a"),gio=o("SplinterConfig"),hio=o(" (Splinter model)"),pio=l(),oh=a("li"),ide=a("strong"),uio=o("squeezebert"),_io=o(" \u2014 "),vI=a("a"),bio=o("SqueezeBertConfig"),vio=o(" (SqueezeBERT model)"),Fio=l(),rh=a("li"),dde=a("strong"),Tio=o("swin"),Mio=o(" \u2014 "),FI=a("a"),Eio=o("SwinConfig"),Cio=o(" (Swin Transformer model)"),wio=l(),th=a("li"),cde=a("strong"),Aio=o("swinv2"),yio=o(" \u2014 "),TI=a("a"),Lio=o("Swinv2Config"),xio=o(" (Swin Transformer V2 model)"),$io=l(),ah=a("li"),fde=a("strong"),kio=o("t5"),Sio=o(" \u2014 "),MI=a("a"),Rio=o("T5Config"),Pio=o(" (T5 model)"),Bio=l(),nh=a("li"),mde=a("strong"),Iio=o("tapas"),Nio=o(" \u2014 "),EI=a("a"),qio=o("TapasConfig"),jio=o(" (TAPAS model)"),Dio=l(),sh=a("li"),gde=a("strong"),Gio=o("trajectory_transformer"),Oio=o(" \u2014 "),CI=a("a"),Vio=o("TrajectoryTransformerConfig"),Xio=o(" (Trajectory Transformer model)"),zio=l(),lh=a("li"),hde=a("strong"),Qio=o("transfo-xl"),Wio=o(" \u2014 "),wI=a("a"),Uio=o("TransfoXLConfig"),Hio=o(" (Transformer-XL model)"),Jio=l(),ih=a("li"),pde=a("strong"),Yio=o("trocr"),Kio=o(" \u2014 "),AI=a("a"),Zio=o("TrOCRConfig"),edo=o(" (TrOCR model)"),odo=l(),dh=a("li"),ude=a("strong"),rdo=o("unispeech"),tdo=o(" \u2014 "),yI=a("a"),ado=o("UniSpeechConfig"),ndo=o(" (UniSpeech model)"),sdo=l(),ch=a("li"),_de=a("strong"),ldo=o("unispeech-sat"),ido=o(" \u2014 "),LI=a("a"),ddo=o("UniSpeechSatConfig"),cdo=o(" (UniSpeechSat model)"),fdo=l(),fh=a("li"),bde=a("strong"),mdo=o("van"),gdo=o(" \u2014 "),xI=a("a"),hdo=o("VanConfig"),pdo=o(" (VAN model)"),udo=l(),mh=a("li"),vde=a("strong"),_do=o("videomae"),bdo=o(" \u2014 "),$I=a("a"),vdo=o("VideoMAEConfig"),Fdo=o(" (VideoMAE model)"),Tdo=l(),gh=a("li"),Fde=a("strong"),Mdo=o("vilt"),Edo=o(" \u2014 "),kI=a("a"),Cdo=o("ViltConfig"),wdo=o(" (ViLT model)"),Ado=l(),hh=a("li"),Tde=a("strong"),ydo=o("vision-encoder-decoder"),Ldo=o(" \u2014 "),SI=a("a"),xdo=o("VisionEncoderDecoderConfig"),$do=o(" (Vision Encoder decoder model)"),kdo=l(),ph=a("li"),Mde=a("strong"),Sdo=o("vision-text-dual-encoder"),Rdo=o(" \u2014 "),RI=a("a"),Pdo=o("VisionTextDualEncoderConfig"),Bdo=o(" (VisionTextDualEncoder model)"),Ido=l(),uh=a("li"),Ede=a("strong"),Ndo=o("visual_bert"),qdo=o(" \u2014 "),PI=a("a"),jdo=o("VisualBertConfig"),Ddo=o(" (VisualBERT model)"),Gdo=l(),_h=a("li"),Cde=a("strong"),Odo=o("vit"),Vdo=o(" \u2014 "),BI=a("a"),Xdo=o("ViTConfig"),zdo=o(" (ViT model)"),Qdo=l(),bh=a("li"),wde=a("strong"),Wdo=o("vit_mae"),Udo=o(" \u2014 "),II=a("a"),Hdo=o("ViTMAEConfig"),Jdo=o(" (ViTMAE model)"),Ydo=l(),vh=a("li"),Ade=a("strong"),Kdo=o("wav2vec2"),Zdo=o(" \u2014 "),NI=a("a"),eco=o("Wav2Vec2Config"),oco=o(" (Wav2Vec2 model)"),rco=l(),Fh=a("li"),yde=a("strong"),tco=o("wav2vec2-conformer"),aco=o(" \u2014 "),qI=a("a"),nco=o("Wav2Vec2ConformerConfig"),sco=o(" (Wav2Vec2-Conformer model)"),lco=l(),Th=a("li"),Lde=a("strong"),ico=o("wavlm"),dco=o(" \u2014 "),jI=a("a"),cco=o("WavLMConfig"),fco=o(" (WavLM model)"),mco=l(),Mh=a("li"),xde=a("strong"),gco=o("xglm"),hco=o(" \u2014 "),DI=a("a"),pco=o("XGLMConfig"),uco=o(" (XGLM model)"),_co=l(),Eh=a("li"),$de=a("strong"),bco=o("xlm"),vco=o(" \u2014 "),GI=a("a"),Fco=o("XLMConfig"),Tco=o(" (XLM model)"),Mco=l(),Ch=a("li"),kde=a("strong"),Eco=o("xlm-prophetnet"),Cco=o(" \u2014 "),OI=a("a"),wco=o("XLMProphetNetConfig"),Aco=o(" (XLM-ProphetNet model)"),yco=l(),wh=a("li"),Sde=a("strong"),Lco=o("xlm-roberta"),xco=o(" \u2014 "),VI=a("a"),$co=o("XLMRobertaConfig"),kco=o(" (XLM-RoBERTa model)"),Sco=l(),Ah=a("li"),Rde=a("strong"),Rco=o("xlm-roberta-xl"),Pco=o(" \u2014 "),XI=a("a"),Bco=o("XLMRobertaXLConfig"),Ico=o(" (XLM-RoBERTa-XL model)"),Nco=l(),yh=a("li"),Pde=a("strong"),qco=o("xlnet"),jco=o(" \u2014 "),zI=a("a"),Dco=o("XLNetConfig"),Gco=o(" (XLNet model)"),Oco=l(),Lh=a("li"),Bde=a("strong"),Vco=o("yolos"),Xco=o(" \u2014 "),QI=a("a"),zco=o("YolosConfig"),Qco=o(" (YOLOS model)"),Wco=l(),xh=a("li"),Ide=a("strong"),Uco=o("yoso"),Hco=o(" \u2014 "),WI=a("a"),Jco=o("YosoConfig"),Yco=o(" (YOSO model)"),Kco=l(),F($h.$$.fragment),Zco=l(),kh=a("div"),F(qL.$$.fragment),efo=l(),Nde=a("p"),ofo=o("Register a new configuration for this class."),DUe=l(),ad=a("h2"),Sh=a("a"),qde=a("span"),F(jL.$$.fragment),rfo=l(),jde=a("span"),tfo=o("AutoTokenizer"),GUe=l(),$o=a("div"),F(DL.$$.fragment),afo=l(),GL=a("p"),nfo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),UI=a("a"),sfo=o("AutoTokenizer.from_pretrained()"),lfo=o(" class method."),ifo=l(),OL=a("p"),dfo=o("This class cannot be instantiated directly using "),Dde=a("code"),cfo=o("__init__()"),ffo=o(" (throws an error)."),mfo=l(),Pr=a("div"),F(VL.$$.fragment),gfo=l(),Gde=a("p"),hfo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),pfo=l(),za=a("p"),ufo=o("The tokenizer class to instantiate is selected based on the "),Ode=a("code"),_fo=o("model_type"),bfo=o(` property of the config object (either
passed as an argument or loaded from `),Vde=a("code"),vfo=o("pretrained_model_name_or_path"),Ffo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xde=a("code"),Tfo=o("pretrained_model_name_or_path"),Mfo=o(":"),Efo=l(),k=a("ul"),es=a("li"),zde=a("strong"),Cfo=o("albert"),wfo=o(" \u2014 "),HI=a("a"),Afo=o("AlbertTokenizer"),yfo=o(" or "),JI=a("a"),Lfo=o("AlbertTokenizerFast"),xfo=o(" (ALBERT model)"),$fo=l(),os=a("li"),Qde=a("strong"),kfo=o("bart"),Sfo=o(" \u2014 "),YI=a("a"),Rfo=o("BartTokenizer"),Pfo=o(" or "),KI=a("a"),Bfo=o("BartTokenizerFast"),Ifo=o(" (BART model)"),Nfo=l(),rs=a("li"),Wde=a("strong"),qfo=o("barthez"),jfo=o(" \u2014 "),ZI=a("a"),Dfo=o("BarthezTokenizer"),Gfo=o(" or "),eN=a("a"),Ofo=o("BarthezTokenizerFast"),Vfo=o(" (BARThez model)"),Xfo=l(),Rh=a("li"),Ude=a("strong"),zfo=o("bartpho"),Qfo=o(" \u2014 "),oN=a("a"),Wfo=o("BartphoTokenizer"),Ufo=o(" (BARTpho model)"),Hfo=l(),ts=a("li"),Hde=a("strong"),Jfo=o("bert"),Yfo=o(" \u2014 "),rN=a("a"),Kfo=o("BertTokenizer"),Zfo=o(" or "),tN=a("a"),emo=o("BertTokenizerFast"),omo=o(" (BERT model)"),rmo=l(),Ph=a("li"),Jde=a("strong"),tmo=o("bert-generation"),amo=o(" \u2014 "),aN=a("a"),nmo=o("BertGenerationTokenizer"),smo=o(" (Bert Generation model)"),lmo=l(),Bh=a("li"),Yde=a("strong"),imo=o("bert-japanese"),dmo=o(" \u2014 "),nN=a("a"),cmo=o("BertJapaneseTokenizer"),fmo=o(" (BertJapanese model)"),mmo=l(),Ih=a("li"),Kde=a("strong"),gmo=o("bertweet"),hmo=o(" \u2014 "),sN=a("a"),pmo=o("BertweetTokenizer"),umo=o(" (BERTweet model)"),_mo=l(),as=a("li"),Zde=a("strong"),bmo=o("big_bird"),vmo=o(" \u2014 "),lN=a("a"),Fmo=o("BigBirdTokenizer"),Tmo=o(" or "),iN=a("a"),Mmo=o("BigBirdTokenizerFast"),Emo=o(" (BigBird model)"),Cmo=l(),ns=a("li"),ece=a("strong"),wmo=o("bigbird_pegasus"),Amo=o(" \u2014 "),dN=a("a"),ymo=o("PegasusTokenizer"),Lmo=o(" or "),cN=a("a"),xmo=o("PegasusTokenizerFast"),$mo=o(" (BigBird-Pegasus model)"),kmo=l(),ss=a("li"),oce=a("strong"),Smo=o("blenderbot"),Rmo=o(" \u2014 "),fN=a("a"),Pmo=o("BlenderbotTokenizer"),Bmo=o(" or "),mN=a("a"),Imo=o("BlenderbotTokenizerFast"),Nmo=o(" (Blenderbot model)"),qmo=l(),Nh=a("li"),rce=a("strong"),jmo=o("blenderbot-small"),Dmo=o(" \u2014 "),gN=a("a"),Gmo=o("BlenderbotSmallTokenizer"),Omo=o(" (BlenderbotSmall model)"),Vmo=l(),qh=a("li"),tce=a("strong"),Xmo=o("bloom"),zmo=o(" \u2014 "),hN=a("a"),Qmo=o("BloomTokenizerFast"),Wmo=o(" (BLOOM model)"),Umo=l(),jh=a("li"),ace=a("strong"),Hmo=o("byt5"),Jmo=o(" \u2014 "),pN=a("a"),Ymo=o("ByT5Tokenizer"),Kmo=o(" (ByT5 model)"),Zmo=l(),ls=a("li"),nce=a("strong"),ego=o("camembert"),ogo=o(" \u2014 "),uN=a("a"),rgo=o("CamembertTokenizer"),tgo=o(" or "),_N=a("a"),ago=o("CamembertTokenizerFast"),ngo=o(" (CamemBERT model)"),sgo=l(),Dh=a("li"),sce=a("strong"),lgo=o("canine"),igo=o(" \u2014 "),bN=a("a"),dgo=o("CanineTokenizer"),cgo=o(" (CANINE model)"),fgo=l(),is=a("li"),lce=a("strong"),mgo=o("clip"),ggo=o(" \u2014 "),vN=a("a"),hgo=o("CLIPTokenizer"),pgo=o(" or "),FN=a("a"),ugo=o("CLIPTokenizerFast"),_go=o(" (CLIP model)"),bgo=l(),ds=a("li"),ice=a("strong"),vgo=o("codegen"),Fgo=o(" \u2014 "),TN=a("a"),Tgo=o("CodeGenTokenizer"),Mgo=o(" or "),MN=a("a"),Ego=o("CodeGenTokenizerFast"),Cgo=o(" (CodeGen model)"),wgo=l(),cs=a("li"),dce=a("strong"),Ago=o("convbert"),ygo=o(" \u2014 "),EN=a("a"),Lgo=o("ConvBertTokenizer"),xgo=o(" or "),CN=a("a"),$go=o("ConvBertTokenizerFast"),kgo=o(" (ConvBERT model)"),Sgo=l(),fs=a("li"),cce=a("strong"),Rgo=o("cpm"),Pgo=o(" \u2014 "),wN=a("a"),Bgo=o("CpmTokenizer"),Igo=o(" or "),AN=a("a"),Ngo=o("CpmTokenizerFast"),qgo=o(" (CPM model)"),jgo=l(),Gh=a("li"),fce=a("strong"),Dgo=o("ctrl"),Ggo=o(" \u2014 "),yN=a("a"),Ogo=o("CTRLTokenizer"),Vgo=o(" (CTRL model)"),Xgo=l(),ms=a("li"),mce=a("strong"),zgo=o("data2vec-text"),Qgo=o(" \u2014 "),LN=a("a"),Wgo=o("RobertaTokenizer"),Ugo=o(" or "),xN=a("a"),Hgo=o("RobertaTokenizerFast"),Jgo=o(" (Data2VecText model)"),Ygo=l(),gs=a("li"),gce=a("strong"),Kgo=o("deberta"),Zgo=o(" \u2014 "),$N=a("a"),eho=o("DebertaTokenizer"),oho=o(" or "),kN=a("a"),rho=o("DebertaTokenizerFast"),tho=o(" (DeBERTa model)"),aho=l(),hs=a("li"),hce=a("strong"),nho=o("deberta-v2"),sho=o(" \u2014 "),SN=a("a"),lho=o("DebertaV2Tokenizer"),iho=o(" or "),RN=a("a"),dho=o("DebertaV2TokenizerFast"),cho=o(" (DeBERTa-v2 model)"),fho=l(),ps=a("li"),pce=a("strong"),mho=o("distilbert"),gho=o(" \u2014 "),PN=a("a"),hho=o("DistilBertTokenizer"),pho=o(" or "),BN=a("a"),uho=o("DistilBertTokenizerFast"),_ho=o(" (DistilBERT model)"),bho=l(),us=a("li"),uce=a("strong"),vho=o("dpr"),Fho=o(" \u2014 "),IN=a("a"),Tho=o("DPRQuestionEncoderTokenizer"),Mho=o(" or "),NN=a("a"),Eho=o("DPRQuestionEncoderTokenizerFast"),Cho=o(" (DPR model)"),who=l(),_s=a("li"),_ce=a("strong"),Aho=o("electra"),yho=o(" \u2014 "),qN=a("a"),Lho=o("ElectraTokenizer"),xho=o(" or "),jN=a("a"),$ho=o("ElectraTokenizerFast"),kho=o(" (ELECTRA model)"),Sho=l(),Oh=a("li"),bce=a("strong"),Rho=o("flaubert"),Pho=o(" \u2014 "),DN=a("a"),Bho=o("FlaubertTokenizer"),Iho=o(" (FlauBERT model)"),Nho=l(),bs=a("li"),vce=a("strong"),qho=o("fnet"),jho=o(" \u2014 "),GN=a("a"),Dho=o("FNetTokenizer"),Gho=o(" or "),ON=a("a"),Oho=o("FNetTokenizerFast"),Vho=o(" (FNet model)"),Xho=l(),Vh=a("li"),Fce=a("strong"),zho=o("fsmt"),Qho=o(" \u2014 "),VN=a("a"),Who=o("FSMTTokenizer"),Uho=o(" (FairSeq Machine-Translation model)"),Hho=l(),vs=a("li"),Tce=a("strong"),Jho=o("funnel"),Yho=o(" \u2014 "),XN=a("a"),Kho=o("FunnelTokenizer"),Zho=o(" or "),zN=a("a"),epo=o("FunnelTokenizerFast"),opo=o(" (Funnel Transformer model)"),rpo=l(),Fs=a("li"),Mce=a("strong"),tpo=o("gpt2"),apo=o(" \u2014 "),QN=a("a"),npo=o("GPT2Tokenizer"),spo=o(" or "),WN=a("a"),lpo=o("GPT2TokenizerFast"),ipo=o(" (OpenAI GPT-2 model)"),dpo=l(),Ts=a("li"),Ece=a("strong"),cpo=o("gpt_neo"),fpo=o(" \u2014 "),UN=a("a"),mpo=o("GPT2Tokenizer"),gpo=o(" or "),HN=a("a"),hpo=o("GPT2TokenizerFast"),ppo=o(" (GPT Neo model)"),upo=l(),Xh=a("li"),Cce=a("strong"),_po=o("gpt_neox"),bpo=o(" \u2014 "),JN=a("a"),vpo=o("GPTNeoXTokenizerFast"),Fpo=o(" (GPT NeoX model)"),Tpo=l(),Ms=a("li"),wce=a("strong"),Mpo=o("gptj"),Epo=o(" \u2014 "),YN=a("a"),Cpo=o("GPT2Tokenizer"),wpo=o(" or "),KN=a("a"),Apo=o("GPT2TokenizerFast"),ypo=o(" (GPT-J model)"),Lpo=l(),Es=a("li"),Ace=a("strong"),xpo=o("groupvit"),$po=o(" \u2014 "),ZN=a("a"),kpo=o("CLIPTokenizer"),Spo=o(" or "),eq=a("a"),Rpo=o("CLIPTokenizerFast"),Ppo=o(" (GroupViT model)"),Bpo=l(),Cs=a("li"),yce=a("strong"),Ipo=o("herbert"),Npo=o(" \u2014 "),oq=a("a"),qpo=o("HerbertTokenizer"),jpo=o(" or "),rq=a("a"),Dpo=o("HerbertTokenizerFast"),Gpo=o(" (HerBERT model)"),Opo=l(),zh=a("li"),Lce=a("strong"),Vpo=o("hubert"),Xpo=o(" \u2014 "),tq=a("a"),zpo=o("Wav2Vec2CTCTokenizer"),Qpo=o(" (Hubert model)"),Wpo=l(),ws=a("li"),xce=a("strong"),Upo=o("ibert"),Hpo=o(" \u2014 "),aq=a("a"),Jpo=o("RobertaTokenizer"),Ypo=o(" or "),nq=a("a"),Kpo=o("RobertaTokenizerFast"),Zpo=o(" (I-BERT model)"),euo=l(),As=a("li"),$ce=a("strong"),ouo=o("layoutlm"),ruo=o(" \u2014 "),sq=a("a"),tuo=o("LayoutLMTokenizer"),auo=o(" or "),lq=a("a"),nuo=o("LayoutLMTokenizerFast"),suo=o(" (LayoutLM model)"),luo=l(),ys=a("li"),kce=a("strong"),iuo=o("layoutlmv2"),duo=o(" \u2014 "),iq=a("a"),cuo=o("LayoutLMv2Tokenizer"),fuo=o(" or "),dq=a("a"),muo=o("LayoutLMv2TokenizerFast"),guo=o(" (LayoutLMv2 model)"),huo=l(),Ls=a("li"),Sce=a("strong"),puo=o("layoutlmv3"),uuo=o(" \u2014 "),cq=a("a"),_uo=o("LayoutLMv3Tokenizer"),buo=o(" or "),fq=a("a"),vuo=o("LayoutLMv3TokenizerFast"),Fuo=o(" (LayoutLMv3 model)"),Tuo=l(),xs=a("li"),Rce=a("strong"),Muo=o("layoutxlm"),Euo=o(" \u2014 "),mq=a("a"),Cuo=o("LayoutXLMTokenizer"),wuo=o(" or "),gq=a("a"),Auo=o("LayoutXLMTokenizerFast"),yuo=o(" (LayoutXLM model)"),Luo=l(),$s=a("li"),Pce=a("strong"),xuo=o("led"),$uo=o(" \u2014 "),hq=a("a"),kuo=o("LEDTokenizer"),Suo=o(" or "),pq=a("a"),Ruo=o("LEDTokenizerFast"),Puo=o(" (LED model)"),Buo=l(),ks=a("li"),Bce=a("strong"),Iuo=o("longformer"),Nuo=o(" \u2014 "),uq=a("a"),quo=o("LongformerTokenizer"),juo=o(" or "),_q=a("a"),Duo=o("LongformerTokenizerFast"),Guo=o(" (Longformer model)"),Ouo=l(),Ss=a("li"),Ice=a("strong"),Vuo=o("longt5"),Xuo=o(" \u2014 "),bq=a("a"),zuo=o("T5Tokenizer"),Quo=o(" or "),vq=a("a"),Wuo=o("T5TokenizerFast"),Uuo=o(" (LongT5 model)"),Huo=l(),Qh=a("li"),Nce=a("strong"),Juo=o("luke"),Yuo=o(" \u2014 "),Fq=a("a"),Kuo=o("LukeTokenizer"),Zuo=o(" (LUKE model)"),e_o=l(),Rs=a("li"),qce=a("strong"),o_o=o("lxmert"),r_o=o(" \u2014 "),Tq=a("a"),t_o=o("LxmertTokenizer"),a_o=o(" or "),Mq=a("a"),n_o=o("LxmertTokenizerFast"),s_o=o(" (LXMERT model)"),l_o=l(),Wh=a("li"),jce=a("strong"),i_o=o("m2m_100"),d_o=o(" \u2014 "),Eq=a("a"),c_o=o("M2M100Tokenizer"),f_o=o(" (M2M100 model)"),m_o=l(),Uh=a("li"),Dce=a("strong"),g_o=o("marian"),h_o=o(" \u2014 "),Cq=a("a"),p_o=o("MarianTokenizer"),u_o=o(" (Marian model)"),__o=l(),Ps=a("li"),Gce=a("strong"),b_o=o("mbart"),v_o=o(" \u2014 "),wq=a("a"),F_o=o("MBartTokenizer"),T_o=o(" or "),Aq=a("a"),M_o=o("MBartTokenizerFast"),E_o=o(" (mBART model)"),C_o=l(),Bs=a("li"),Oce=a("strong"),w_o=o("mbart50"),A_o=o(" \u2014 "),yq=a("a"),y_o=o("MBart50Tokenizer"),L_o=o(" or "),Lq=a("a"),x_o=o("MBart50TokenizerFast"),$_o=o(" (mBART-50 model)"),k_o=l(),Is=a("li"),Vce=a("strong"),S_o=o("megatron-bert"),R_o=o(" \u2014 "),xq=a("a"),P_o=o("BertTokenizer"),B_o=o(" or "),$q=a("a"),I_o=o("BertTokenizerFast"),N_o=o(" (Megatron-BERT model)"),q_o=l(),Hh=a("li"),Xce=a("strong"),j_o=o("mluke"),D_o=o(" \u2014 "),kq=a("a"),G_o=o("MLukeTokenizer"),O_o=o(" (mLUKE model)"),V_o=l(),Ns=a("li"),zce=a("strong"),X_o=o("mobilebert"),z_o=o(" \u2014 "),Sq=a("a"),Q_o=o("MobileBertTokenizer"),W_o=o(" or "),Rq=a("a"),U_o=o("MobileBertTokenizerFast"),H_o=o(" (MobileBERT model)"),J_o=l(),qs=a("li"),Qce=a("strong"),Y_o=o("mpnet"),K_o=o(" \u2014 "),Pq=a("a"),Z_o=o("MPNetTokenizer"),e1o=o(" or "),Bq=a("a"),o1o=o("MPNetTokenizerFast"),r1o=o(" (MPNet model)"),t1o=l(),js=a("li"),Wce=a("strong"),a1o=o("mt5"),n1o=o(" \u2014 "),Iq=a("a"),s1o=o("MT5Tokenizer"),l1o=o(" or "),Nq=a("a"),i1o=o("MT5TokenizerFast"),d1o=o(" (MT5 model)"),c1o=l(),Ds=a("li"),Uce=a("strong"),f1o=o("mvp"),m1o=o(" \u2014 "),qq=a("a"),g1o=o("MvpTokenizer"),h1o=o(" or "),jq=a("a"),p1o=o("MvpTokenizerFast"),u1o=o(" (MVP model)"),_1o=l(),Gs=a("li"),Hce=a("strong"),b1o=o("nezha"),v1o=o(" \u2014 "),Dq=a("a"),F1o=o("BertTokenizer"),T1o=o(" or "),Gq=a("a"),M1o=o("BertTokenizerFast"),E1o=o(" (Nezha model)"),C1o=l(),Os=a("li"),Jce=a("strong"),w1o=o("nllb"),A1o=o(" \u2014 "),Oq=a("a"),y1o=o("NllbTokenizer"),L1o=o(" or "),Vq=a("a"),x1o=o("NllbTokenizerFast"),$1o=o(" (NLLB model)"),k1o=l(),Vs=a("li"),Yce=a("strong"),S1o=o("nystromformer"),R1o=o(" \u2014 "),Xq=a("a"),P1o=o("AlbertTokenizer"),B1o=o(" or "),zq=a("a"),I1o=o("AlbertTokenizerFast"),N1o=o(" (Nystr\xF6mformer model)"),q1o=l(),Xs=a("li"),Kce=a("strong"),j1o=o("openai-gpt"),D1o=o(" \u2014 "),Qq=a("a"),G1o=o("OpenAIGPTTokenizer"),O1o=o(" or "),Wq=a("a"),V1o=o("OpenAIGPTTokenizerFast"),X1o=o(" (OpenAI GPT model)"),z1o=l(),Jh=a("li"),Zce=a("strong"),Q1o=o("opt"),W1o=o(" \u2014 "),Uq=a("a"),U1o=o("GPT2Tokenizer"),H1o=o(" (OPT model)"),J1o=l(),zs=a("li"),efe=a("strong"),Y1o=o("owlvit"),K1o=o(" \u2014 "),Hq=a("a"),Z1o=o("CLIPTokenizer"),e4o=o(" or "),Jq=a("a"),o4o=o("CLIPTokenizerFast"),r4o=o(" (OWL-ViT model)"),t4o=l(),Qs=a("li"),ofe=a("strong"),a4o=o("pegasus"),n4o=o(" \u2014 "),Yq=a("a"),s4o=o("PegasusTokenizer"),l4o=o(" or "),Kq=a("a"),i4o=o("PegasusTokenizerFast"),d4o=o(" (Pegasus model)"),c4o=l(),Yh=a("li"),rfe=a("strong"),f4o=o("perceiver"),m4o=o(" \u2014 "),Zq=a("a"),g4o=o("PerceiverTokenizer"),h4o=o(" (Perceiver model)"),p4o=l(),Kh=a("li"),tfe=a("strong"),u4o=o("phobert"),_4o=o(" \u2014 "),ej=a("a"),b4o=o("PhobertTokenizer"),v4o=o(" (PhoBERT model)"),F4o=l(),Zh=a("li"),afe=a("strong"),T4o=o("plbart"),M4o=o(" \u2014 "),oj=a("a"),E4o=o("PLBartTokenizer"),C4o=o(" (PLBart model)"),w4o=l(),ep=a("li"),nfe=a("strong"),A4o=o("prophetnet"),y4o=o(" \u2014 "),rj=a("a"),L4o=o("ProphetNetTokenizer"),x4o=o(" (ProphetNet model)"),$4o=l(),Ws=a("li"),sfe=a("strong"),k4o=o("qdqbert"),S4o=o(" \u2014 "),tj=a("a"),R4o=o("BertTokenizer"),P4o=o(" or "),aj=a("a"),B4o=o("BertTokenizerFast"),I4o=o(" (QDQBert model)"),N4o=l(),op=a("li"),lfe=a("strong"),q4o=o("rag"),j4o=o(" \u2014 "),nj=a("a"),D4o=o("RagTokenizer"),G4o=o(" (RAG model)"),O4o=l(),Us=a("li"),ife=a("strong"),V4o=o("realm"),X4o=o(" \u2014 "),sj=a("a"),z4o=o("RealmTokenizer"),Q4o=o(" or "),lj=a("a"),W4o=o("RealmTokenizerFast"),U4o=o(" (REALM model)"),H4o=l(),Hs=a("li"),dfe=a("strong"),J4o=o("reformer"),Y4o=o(" \u2014 "),ij=a("a"),K4o=o("ReformerTokenizer"),Z4o=o(" or "),dj=a("a"),e2o=o("ReformerTokenizerFast"),o2o=o(" (Reformer model)"),r2o=l(),Js=a("li"),cfe=a("strong"),t2o=o("rembert"),a2o=o(" \u2014 "),cj=a("a"),n2o=o("RemBertTokenizer"),s2o=o(" or "),fj=a("a"),l2o=o("RemBertTokenizerFast"),i2o=o(" (RemBERT model)"),d2o=l(),Ys=a("li"),ffe=a("strong"),c2o=o("retribert"),f2o=o(" \u2014 "),mj=a("a"),m2o=o("RetriBertTokenizer"),g2o=o(" or "),gj=a("a"),h2o=o("RetriBertTokenizerFast"),p2o=o(" (RetriBERT model)"),u2o=l(),Ks=a("li"),mfe=a("strong"),_2o=o("roberta"),b2o=o(" \u2014 "),hj=a("a"),v2o=o("RobertaTokenizer"),F2o=o(" or "),pj=a("a"),T2o=o("RobertaTokenizerFast"),M2o=o(" (RoBERTa model)"),E2o=l(),Zs=a("li"),gfe=a("strong"),C2o=o("roformer"),w2o=o(" \u2014 "),uj=a("a"),A2o=o("RoFormerTokenizer"),y2o=o(" or "),_j=a("a"),L2o=o("RoFormerTokenizerFast"),x2o=o(" (RoFormer model)"),$2o=l(),rp=a("li"),hfe=a("strong"),k2o=o("speech_to_text"),S2o=o(" \u2014 "),bj=a("a"),R2o=o("Speech2TextTokenizer"),P2o=o(" (Speech2Text model)"),B2o=l(),tp=a("li"),pfe=a("strong"),I2o=o("speech_to_text_2"),N2o=o(" \u2014 "),vj=a("a"),q2o=o("Speech2Text2Tokenizer"),j2o=o(" (Speech2Text2 model)"),D2o=l(),el=a("li"),ufe=a("strong"),G2o=o("splinter"),O2o=o(" \u2014 "),Fj=a("a"),V2o=o("SplinterTokenizer"),X2o=o(" or "),Tj=a("a"),z2o=o("SplinterTokenizerFast"),Q2o=o(" (Splinter model)"),W2o=l(),ol=a("li"),_fe=a("strong"),U2o=o("squeezebert"),H2o=o(" \u2014 "),Mj=a("a"),J2o=o("SqueezeBertTokenizer"),Y2o=o(" or "),Ej=a("a"),K2o=o("SqueezeBertTokenizerFast"),Z2o=o(" (SqueezeBERT model)"),ebo=l(),rl=a("li"),bfe=a("strong"),obo=o("t5"),rbo=o(" \u2014 "),Cj=a("a"),tbo=o("T5Tokenizer"),abo=o(" or "),wj=a("a"),nbo=o("T5TokenizerFast"),sbo=o(" (T5 model)"),lbo=l(),ap=a("li"),vfe=a("strong"),ibo=o("tapas"),dbo=o(" \u2014 "),Aj=a("a"),cbo=o("TapasTokenizer"),fbo=o(" (TAPAS model)"),mbo=l(),np=a("li"),Ffe=a("strong"),gbo=o("tapex"),hbo=o(" \u2014 "),yj=a("a"),pbo=o("TapexTokenizer"),ubo=o(" (TAPEX model)"),_bo=l(),sp=a("li"),Tfe=a("strong"),bbo=o("transfo-xl"),vbo=o(" \u2014 "),Lj=a("a"),Fbo=o("TransfoXLTokenizer"),Tbo=o(" (Transformer-XL model)"),Mbo=l(),tl=a("li"),Mfe=a("strong"),Ebo=o("vilt"),Cbo=o(" \u2014 "),xj=a("a"),wbo=o("BertTokenizer"),Abo=o(" or "),$j=a("a"),ybo=o("BertTokenizerFast"),Lbo=o(" (ViLT model)"),xbo=l(),al=a("li"),Efe=a("strong"),$bo=o("visual_bert"),kbo=o(" \u2014 "),kj=a("a"),Sbo=o("BertTokenizer"),Rbo=o(" or "),Sj=a("a"),Pbo=o("BertTokenizerFast"),Bbo=o(" (VisualBERT model)"),Ibo=l(),lp=a("li"),Cfe=a("strong"),Nbo=o("wav2vec2"),qbo=o(" \u2014 "),Rj=a("a"),jbo=o("Wav2Vec2CTCTokenizer"),Dbo=o(" (Wav2Vec2 model)"),Gbo=l(),ip=a("li"),wfe=a("strong"),Obo=o("wav2vec2-conformer"),Vbo=o(" \u2014 "),Pj=a("a"),Xbo=o("Wav2Vec2CTCTokenizer"),zbo=o(" (Wav2Vec2-Conformer model)"),Qbo=l(),dp=a("li"),Afe=a("strong"),Wbo=o("wav2vec2_phoneme"),Ubo=o(" \u2014 "),Bj=a("a"),Hbo=o("Wav2Vec2PhonemeCTCTokenizer"),Jbo=o(" (Wav2Vec2Phoneme model)"),Ybo=l(),nl=a("li"),yfe=a("strong"),Kbo=o("xglm"),Zbo=o(" \u2014 "),Ij=a("a"),evo=o("XGLMTokenizer"),ovo=o(" or "),Nj=a("a"),rvo=o("XGLMTokenizerFast"),tvo=o(" (XGLM model)"),avo=l(),cp=a("li"),Lfe=a("strong"),nvo=o("xlm"),svo=o(" \u2014 "),qj=a("a"),lvo=o("XLMTokenizer"),ivo=o(" (XLM model)"),dvo=l(),fp=a("li"),xfe=a("strong"),cvo=o("xlm-prophetnet"),fvo=o(" \u2014 "),jj=a("a"),mvo=o("XLMProphetNetTokenizer"),gvo=o(" (XLM-ProphetNet model)"),hvo=l(),sl=a("li"),$fe=a("strong"),pvo=o("xlm-roberta"),uvo=o(" \u2014 "),Dj=a("a"),_vo=o("XLMRobertaTokenizer"),bvo=o(" or "),Gj=a("a"),vvo=o("XLMRobertaTokenizerFast"),Fvo=o(" (XLM-RoBERTa model)"),Tvo=l(),ll=a("li"),kfe=a("strong"),Mvo=o("xlm-roberta-xl"),Evo=o(" \u2014 "),Oj=a("a"),Cvo=o("RobertaTokenizer"),wvo=o(" or "),Vj=a("a"),Avo=o("RobertaTokenizerFast"),yvo=o(" (XLM-RoBERTa-XL model)"),Lvo=l(),il=a("li"),Sfe=a("strong"),xvo=o("xlnet"),$vo=o(" \u2014 "),Xj=a("a"),kvo=o("XLNetTokenizer"),Svo=o(" or "),zj=a("a"),Rvo=o("XLNetTokenizerFast"),Pvo=o(" (XLNet model)"),Bvo=l(),dl=a("li"),Rfe=a("strong"),Ivo=o("yoso"),Nvo=o(" \u2014 "),Qj=a("a"),qvo=o("AlbertTokenizer"),jvo=o(" or "),Wj=a("a"),Dvo=o("AlbertTokenizerFast"),Gvo=o(" (YOSO model)"),Ovo=l(),F(mp.$$.fragment),Vvo=l(),gp=a("div"),F(XL.$$.fragment),Xvo=l(),Pfe=a("p"),zvo=o("Register a new tokenizer in this mapping."),OUe=l(),nd=a("h2"),hp=a("a"),Bfe=a("span"),F(zL.$$.fragment),Qvo=l(),Ife=a("span"),Wvo=o("AutoFeatureExtractor"),VUe=l(),ko=a("div"),F(QL.$$.fragment),Uvo=l(),WL=a("p"),Hvo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Uj=a("a"),Jvo=o("AutoFeatureExtractor.from_pretrained()"),Yvo=o(" class method."),Kvo=l(),UL=a("p"),Zvo=o("This class cannot be instantiated directly using "),Nfe=a("code"),eFo=o("__init__()"),oFo=o(" (throws an error)."),rFo=l(),He=a("div"),F(HL.$$.fragment),tFo=l(),qfe=a("p"),aFo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),nFo=l(),Qa=a("p"),sFo=o("The feature extractor class to instantiate is selected based on the "),jfe=a("code"),lFo=o("model_type"),iFo=o(` property of the config object
(either passed as an argument or loaded from `),Dfe=a("code"),dFo=o("pretrained_model_name_or_path"),cFo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Gfe=a("code"),fFo=o("pretrained_model_name_or_path"),mFo=o(":"),gFo=l(),W=a("ul"),pp=a("li"),Ofe=a("strong"),hFo=o("beit"),pFo=o(" \u2014 "),Hj=a("a"),uFo=o("BeitFeatureExtractor"),_Fo=o(" (BEiT model)"),bFo=l(),up=a("li"),Vfe=a("strong"),vFo=o("clip"),FFo=o(" \u2014 "),Jj=a("a"),TFo=o("CLIPFeatureExtractor"),MFo=o(" (CLIP model)"),EFo=l(),_p=a("li"),Xfe=a("strong"),CFo=o("convnext"),wFo=o(" \u2014 "),Yj=a("a"),AFo=o("ConvNextFeatureExtractor"),yFo=o(" (ConvNeXT model)"),LFo=l(),bp=a("li"),zfe=a("strong"),xFo=o("cvt"),$Fo=o(" \u2014 "),Kj=a("a"),kFo=o("ConvNextFeatureExtractor"),SFo=o(" (CvT model)"),RFo=l(),vp=a("li"),Qfe=a("strong"),PFo=o("data2vec-audio"),BFo=o(" \u2014 "),Zj=a("a"),IFo=o("Wav2Vec2FeatureExtractor"),NFo=o(" (Data2VecAudio model)"),qFo=l(),Fp=a("li"),Wfe=a("strong"),jFo=o("data2vec-vision"),DFo=o(" \u2014 "),eD=a("a"),GFo=o("BeitFeatureExtractor"),OFo=o(" (Data2VecVision model)"),VFo=l(),Tp=a("li"),Ufe=a("strong"),XFo=o("deit"),zFo=o(" \u2014 "),oD=a("a"),QFo=o("DeiTFeatureExtractor"),WFo=o(" (DeiT model)"),UFo=l(),Mp=a("li"),Hfe=a("strong"),HFo=o("detr"),JFo=o(" \u2014 "),rD=a("a"),YFo=o("DetrFeatureExtractor"),KFo=o(" (DETR model)"),ZFo=l(),Ep=a("li"),Jfe=a("strong"),eTo=o("donut"),oTo=o(" \u2014 "),tD=a("a"),rTo=o("DonutFeatureExtractor"),tTo=o(" (Donut model)"),aTo=l(),Cp=a("li"),Yfe=a("strong"),nTo=o("dpt"),sTo=o(" \u2014 "),aD=a("a"),lTo=o("DPTFeatureExtractor"),iTo=o(" (DPT model)"),dTo=l(),wp=a("li"),Kfe=a("strong"),cTo=o("flava"),fTo=o(" \u2014 "),nD=a("a"),mTo=o("FlavaFeatureExtractor"),gTo=o(" (FLAVA model)"),hTo=l(),Ap=a("li"),Zfe=a("strong"),pTo=o("glpn"),uTo=o(" \u2014 "),sD=a("a"),_To=o("GLPNFeatureExtractor"),bTo=o(" (GLPN model)"),vTo=l(),yp=a("li"),eme=a("strong"),FTo=o("groupvit"),TTo=o(" \u2014 "),lD=a("a"),MTo=o("CLIPFeatureExtractor"),ETo=o(" (GroupViT model)"),CTo=l(),Lp=a("li"),ome=a("strong"),wTo=o("hubert"),ATo=o(" \u2014 "),iD=a("a"),yTo=o("Wav2Vec2FeatureExtractor"),LTo=o(" (Hubert model)"),xTo=l(),xp=a("li"),rme=a("strong"),$To=o("imagegpt"),kTo=o(" \u2014 "),dD=a("a"),STo=o("ImageGPTFeatureExtractor"),RTo=o(" (ImageGPT model)"),PTo=l(),$p=a("li"),tme=a("strong"),BTo=o("layoutlmv2"),ITo=o(" \u2014 "),cD=a("a"),NTo=o("LayoutLMv2FeatureExtractor"),qTo=o(" (LayoutLMv2 model)"),jTo=l(),kp=a("li"),ame=a("strong"),DTo=o("layoutlmv3"),GTo=o(" \u2014 "),fD=a("a"),OTo=o("LayoutLMv3FeatureExtractor"),VTo=o(" (LayoutLMv3 model)"),XTo=l(),Sp=a("li"),nme=a("strong"),zTo=o("levit"),QTo=o(" \u2014 "),mD=a("a"),WTo=o("LevitFeatureExtractor"),UTo=o(" (LeViT model)"),HTo=l(),Rp=a("li"),sme=a("strong"),JTo=o("maskformer"),YTo=o(" \u2014 "),gD=a("a"),KTo=o("MaskFormerFeatureExtractor"),ZTo=o(" (MaskFormer model)"),e8o=l(),Pp=a("li"),lme=a("strong"),o8o=o("mctct"),r8o=o(" \u2014 "),hD=a("a"),t8o=o("MCTCTFeatureExtractor"),a8o=o(" (M-CTC-T model)"),n8o=l(),Bp=a("li"),ime=a("strong"),s8o=o("mobilevit"),l8o=o(" \u2014 "),pD=a("a"),i8o=o("MobileViTFeatureExtractor"),d8o=o(" (MobileViT model)"),c8o=l(),Ip=a("li"),dme=a("strong"),f8o=o("owlvit"),m8o=o(" \u2014 "),uD=a("a"),g8o=o("OwlViTFeatureExtractor"),h8o=o(" (OWL-ViT model)"),p8o=l(),Np=a("li"),cme=a("strong"),u8o=o("perceiver"),_8o=o(" \u2014 "),_D=a("a"),b8o=o("PerceiverFeatureExtractor"),v8o=o(" (Perceiver model)"),F8o=l(),qp=a("li"),fme=a("strong"),T8o=o("poolformer"),M8o=o(" \u2014 "),bD=a("a"),E8o=o("PoolFormerFeatureExtractor"),C8o=o(" (PoolFormer model)"),w8o=l(),jp=a("li"),mme=a("strong"),A8o=o("regnet"),y8o=o(" \u2014 "),vD=a("a"),L8o=o("ConvNextFeatureExtractor"),x8o=o(" (RegNet model)"),$8o=l(),Dp=a("li"),gme=a("strong"),k8o=o("resnet"),S8o=o(" \u2014 "),FD=a("a"),R8o=o("ConvNextFeatureExtractor"),P8o=o(" (ResNet model)"),B8o=l(),Gp=a("li"),hme=a("strong"),I8o=o("segformer"),N8o=o(" \u2014 "),TD=a("a"),q8o=o("SegformerFeatureExtractor"),j8o=o(" (SegFormer model)"),D8o=l(),Op=a("li"),pme=a("strong"),G8o=o("speech_to_text"),O8o=o(" \u2014 "),MD=a("a"),V8o=o("Speech2TextFeatureExtractor"),X8o=o(" (Speech2Text model)"),z8o=l(),Vp=a("li"),ume=a("strong"),Q8o=o("swin"),W8o=o(" \u2014 "),ED=a("a"),U8o=o("ViTFeatureExtractor"),H8o=o(" (Swin Transformer model)"),J8o=l(),Xp=a("li"),_me=a("strong"),Y8o=o("swinv2"),K8o=o(" \u2014 "),CD=a("a"),Z8o=o("ViTFeatureExtractor"),eMo=o(" (Swin Transformer V2 model)"),oMo=l(),zp=a("li"),bme=a("strong"),rMo=o("van"),tMo=o(" \u2014 "),wD=a("a"),aMo=o("ConvNextFeatureExtractor"),nMo=o(" (VAN model)"),sMo=l(),Qp=a("li"),vme=a("strong"),lMo=o("videomae"),iMo=o(" \u2014 "),AD=a("a"),dMo=o("ViTFeatureExtractor"),cMo=o(" (VideoMAE model)"),fMo=l(),Wp=a("li"),Fme=a("strong"),mMo=o("vilt"),gMo=o(" \u2014 "),yD=a("a"),hMo=o("ViltFeatureExtractor"),pMo=o(" (ViLT model)"),uMo=l(),Up=a("li"),Tme=a("strong"),_Mo=o("vit"),bMo=o(" \u2014 "),LD=a("a"),vMo=o("ViTFeatureExtractor"),FMo=o(" (ViT model)"),TMo=l(),Hp=a("li"),Mme=a("strong"),MMo=o("vit_mae"),EMo=o(" \u2014 "),xD=a("a"),CMo=o("ViTFeatureExtractor"),wMo=o(" (ViTMAE model)"),AMo=l(),Jp=a("li"),Eme=a("strong"),yMo=o("wav2vec2"),LMo=o(" \u2014 "),$D=a("a"),xMo=o("Wav2Vec2FeatureExtractor"),$Mo=o(" (Wav2Vec2 model)"),kMo=l(),Yp=a("li"),Cme=a("strong"),SMo=o("wav2vec2-conformer"),RMo=o(" \u2014 "),kD=a("a"),PMo=o("Wav2Vec2FeatureExtractor"),BMo=o(" (Wav2Vec2-Conformer model)"),IMo=l(),Kp=a("li"),wme=a("strong"),NMo=o("yolos"),qMo=o(" \u2014 "),SD=a("a"),jMo=o("YolosFeatureExtractor"),DMo=o(" (YOLOS model)"),GMo=l(),F(Zp.$$.fragment),OMo=l(),F(eu.$$.fragment),VMo=l(),ou=a("div"),F(JL.$$.fragment),XMo=l(),Ame=a("p"),zMo=o("Register a new feature extractor for this class."),XUe=l(),sd=a("h2"),ru=a("a"),yme=a("span"),F(YL.$$.fragment),QMo=l(),Lme=a("span"),WMo=o("AutoProcessor"),zUe=l(),So=a("div"),F(KL.$$.fragment),UMo=l(),ZL=a("p"),HMo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),RD=a("a"),JMo=o("AutoProcessor.from_pretrained()"),YMo=o(" class method."),KMo=l(),e9=a("p"),ZMo=o("This class cannot be instantiated directly using "),xme=a("code"),eEo=o("__init__()"),oEo=o(" (throws an error)."),rEo=l(),Je=a("div"),F(o9.$$.fragment),tEo=l(),$me=a("p"),aEo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),nEo=l(),ld=a("p"),sEo=o("The processor class to instantiate is selected based on the "),kme=a("code"),lEo=o("model_type"),iEo=o(` property of the config object (either
passed as an argument or loaded from `),Sme=a("code"),dEo=o("pretrained_model_name_or_path"),cEo=o(" if possible):"),fEo=l(),ie=a("ul"),tu=a("li"),Rme=a("strong"),mEo=o("clip"),gEo=o(" \u2014 "),PD=a("a"),hEo=o("CLIPProcessor"),pEo=o(" (CLIP model)"),uEo=l(),au=a("li"),Pme=a("strong"),_Eo=o("donut"),bEo=o(" \u2014 "),BD=a("a"),vEo=o("DonutProcessor"),FEo=o(" (Donut model)"),TEo=l(),nu=a("li"),Bme=a("strong"),MEo=o("flava"),EEo=o(" \u2014 "),ID=a("a"),CEo=o("FlavaProcessor"),wEo=o(" (FLAVA model)"),AEo=l(),su=a("li"),Ime=a("strong"),yEo=o("groupvit"),LEo=o(" \u2014 "),ND=a("a"),xEo=o("CLIPProcessor"),$Eo=o(" (GroupViT model)"),kEo=l(),lu=a("li"),Nme=a("strong"),SEo=o("layoutlmv2"),REo=o(" \u2014 "),qD=a("a"),PEo=o("LayoutLMv2Processor"),BEo=o(" (LayoutLMv2 model)"),IEo=l(),iu=a("li"),qme=a("strong"),NEo=o("layoutlmv3"),qEo=o(" \u2014 "),jD=a("a"),jEo=o("LayoutLMv3Processor"),DEo=o(" (LayoutLMv3 model)"),GEo=l(),du=a("li"),jme=a("strong"),OEo=o("layoutxlm"),VEo=o(" \u2014 "),DD=a("a"),XEo=o("LayoutXLMProcessor"),zEo=o(" (LayoutXLM model)"),QEo=l(),cu=a("li"),Dme=a("strong"),WEo=o("owlvit"),UEo=o(" \u2014 "),GD=a("a"),HEo=o("OwlViTProcessor"),JEo=o(" (OWL-ViT model)"),YEo=l(),fu=a("li"),Gme=a("strong"),KEo=o("sew"),ZEo=o(" \u2014 "),OD=a("a"),eCo=o("Wav2Vec2Processor"),oCo=o(" (SEW model)"),rCo=l(),mu=a("li"),Ome=a("strong"),tCo=o("sew-d"),aCo=o(" \u2014 "),VD=a("a"),nCo=o("Wav2Vec2Processor"),sCo=o(" (SEW-D model)"),lCo=l(),gu=a("li"),Vme=a("strong"),iCo=o("speech_to_text"),dCo=o(" \u2014 "),XD=a("a"),cCo=o("Speech2TextProcessor"),fCo=o(" (Speech2Text model)"),mCo=l(),hu=a("li"),Xme=a("strong"),gCo=o("speech_to_text_2"),hCo=o(" \u2014 "),zD=a("a"),pCo=o("Speech2Text2Processor"),uCo=o(" (Speech2Text2 model)"),_Co=l(),pu=a("li"),zme=a("strong"),bCo=o("trocr"),vCo=o(" \u2014 "),QD=a("a"),FCo=o("TrOCRProcessor"),TCo=o(" (TrOCR model)"),MCo=l(),uu=a("li"),Qme=a("strong"),ECo=o("unispeech"),CCo=o(" \u2014 "),WD=a("a"),wCo=o("Wav2Vec2Processor"),ACo=o(" (UniSpeech model)"),yCo=l(),_u=a("li"),Wme=a("strong"),LCo=o("unispeech-sat"),xCo=o(" \u2014 "),UD=a("a"),$Co=o("Wav2Vec2Processor"),kCo=o(" (UniSpeechSat model)"),SCo=l(),bu=a("li"),Ume=a("strong"),RCo=o("vilt"),PCo=o(" \u2014 "),HD=a("a"),BCo=o("ViltProcessor"),ICo=o(" (ViLT model)"),NCo=l(),vu=a("li"),Hme=a("strong"),qCo=o("vision-text-dual-encoder"),jCo=o(" \u2014 "),JD=a("a"),DCo=o("VisionTextDualEncoderProcessor"),GCo=o(" (VisionTextDualEncoder model)"),OCo=l(),Fu=a("li"),Jme=a("strong"),VCo=o("wav2vec2"),XCo=o(" \u2014 "),YD=a("a"),zCo=o("Wav2Vec2Processor"),QCo=o(" (Wav2Vec2 model)"),WCo=l(),Tu=a("li"),Yme=a("strong"),UCo=o("wav2vec2-conformer"),HCo=o(" \u2014 "),KD=a("a"),JCo=o("Wav2Vec2Processor"),YCo=o(" (Wav2Vec2-Conformer model)"),KCo=l(),Mu=a("li"),Kme=a("strong"),ZCo=o("wavlm"),e3o=o(" \u2014 "),ZD=a("a"),o3o=o("Wav2Vec2Processor"),r3o=o(" (WavLM model)"),t3o=l(),F(Eu.$$.fragment),a3o=l(),F(Cu.$$.fragment),n3o=l(),wu=a("div"),F(r9.$$.fragment),s3o=l(),Zme=a("p"),l3o=o("Register a new processor for this class."),QUe=l(),id=a("h2"),Au=a("a"),ege=a("span"),F(t9.$$.fragment),i3o=l(),oge=a("span"),d3o=o("AutoModel"),WUe=l(),Ro=a("div"),F(a9.$$.fragment),c3o=l(),dd=a("p"),f3o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eG=a("a"),m3o=o("from_pretrained()"),g3o=o(" class method or the "),oG=a("a"),h3o=o("from_config()"),p3o=o(` class
method.`),u3o=l(),n9=a("p"),_3o=o("This class cannot be instantiated directly using "),rge=a("code"),b3o=o("__init__()"),v3o=o(" (throws an error)."),F3o=l(),ht=a("div"),F(s9.$$.fragment),T3o=l(),tge=a("p"),M3o=o("Instantiates one of the base model classes of the library from a configuration."),E3o=l(),cd=a("p"),C3o=o(`Note:
Loading a model from its configuration file does `),age=a("strong"),w3o=o("not"),A3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rG=a("a"),y3o=o("from_pretrained()"),L3o=o(" to load the model weights."),x3o=l(),F(yu.$$.fragment),$3o=l(),Ye=a("div"),F(l9.$$.fragment),k3o=l(),nge=a("p"),S3o=o("Instantiate one of the base model classes of the library from a pretrained model."),R3o=l(),Wa=a("p"),P3o=o("The model class to instantiate is selected based on the "),sge=a("code"),B3o=o("model_type"),I3o=o(` property of the config object (either
passed as an argument or loaded from `),lge=a("code"),N3o=o("pretrained_model_name_or_path"),q3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=a("code"),j3o=o("pretrained_model_name_or_path"),D3o=o(":"),G3o=l(),L=a("ul"),Lu=a("li"),dge=a("strong"),O3o=o("albert"),V3o=o(" \u2014 "),tG=a("a"),X3o=o("AlbertModel"),z3o=o(" (ALBERT model)"),Q3o=l(),xu=a("li"),cge=a("strong"),W3o=o("bart"),U3o=o(" \u2014 "),aG=a("a"),H3o=o("BartModel"),J3o=o(" (BART model)"),Y3o=l(),$u=a("li"),fge=a("strong"),K3o=o("beit"),Z3o=o(" \u2014 "),nG=a("a"),e5o=o("BeitModel"),o5o=o(" (BEiT model)"),r5o=l(),ku=a("li"),mge=a("strong"),t5o=o("bert"),a5o=o(" \u2014 "),sG=a("a"),n5o=o("BertModel"),s5o=o(" (BERT model)"),l5o=l(),Su=a("li"),gge=a("strong"),i5o=o("bert-generation"),d5o=o(" \u2014 "),lG=a("a"),c5o=o("BertGenerationEncoder"),f5o=o(" (Bert Generation model)"),m5o=l(),Ru=a("li"),hge=a("strong"),g5o=o("big_bird"),h5o=o(" \u2014 "),iG=a("a"),p5o=o("BigBirdModel"),u5o=o(" (BigBird model)"),_5o=l(),Pu=a("li"),pge=a("strong"),b5o=o("bigbird_pegasus"),v5o=o(" \u2014 "),dG=a("a"),F5o=o("BigBirdPegasusModel"),T5o=o(" (BigBird-Pegasus model)"),M5o=l(),Bu=a("li"),uge=a("strong"),E5o=o("blenderbot"),C5o=o(" \u2014 "),cG=a("a"),w5o=o("BlenderbotModel"),A5o=o(" (Blenderbot model)"),y5o=l(),Iu=a("li"),_ge=a("strong"),L5o=o("blenderbot-small"),x5o=o(" \u2014 "),fG=a("a"),$5o=o("BlenderbotSmallModel"),k5o=o(" (BlenderbotSmall model)"),S5o=l(),Nu=a("li"),bge=a("strong"),R5o=o("bloom"),P5o=o(" \u2014 "),mG=a("a"),B5o=o("BloomModel"),I5o=o(" (BLOOM model)"),N5o=l(),qu=a("li"),vge=a("strong"),q5o=o("camembert"),j5o=o(" \u2014 "),gG=a("a"),D5o=o("CamembertModel"),G5o=o(" (CamemBERT model)"),O5o=l(),ju=a("li"),Fge=a("strong"),V5o=o("canine"),X5o=o(" \u2014 "),hG=a("a"),z5o=o("CanineModel"),Q5o=o(" (CANINE model)"),W5o=l(),Du=a("li"),Tge=a("strong"),U5o=o("clip"),H5o=o(" \u2014 "),pG=a("a"),J5o=o("CLIPModel"),Y5o=o(" (CLIP model)"),K5o=l(),Gu=a("li"),Mge=a("strong"),Z5o=o("codegen"),e0o=o(" \u2014 "),uG=a("a"),o0o=o("CodeGenModel"),r0o=o(" (CodeGen model)"),t0o=l(),Ou=a("li"),Ege=a("strong"),a0o=o("convbert"),n0o=o(" \u2014 "),_G=a("a"),s0o=o("ConvBertModel"),l0o=o(" (ConvBERT model)"),i0o=l(),Vu=a("li"),Cge=a("strong"),d0o=o("convnext"),c0o=o(" \u2014 "),bG=a("a"),f0o=o("ConvNextModel"),m0o=o(" (ConvNeXT model)"),g0o=l(),Xu=a("li"),wge=a("strong"),h0o=o("ctrl"),p0o=o(" \u2014 "),vG=a("a"),u0o=o("CTRLModel"),_0o=o(" (CTRL model)"),b0o=l(),zu=a("li"),Age=a("strong"),v0o=o("cvt"),F0o=o(" \u2014 "),FG=a("a"),T0o=o("CvtModel"),M0o=o(" (CvT model)"),E0o=l(),Qu=a("li"),yge=a("strong"),C0o=o("data2vec-audio"),w0o=o(" \u2014 "),TG=a("a"),A0o=o("Data2VecAudioModel"),y0o=o(" (Data2VecAudio model)"),L0o=l(),Wu=a("li"),Lge=a("strong"),x0o=o("data2vec-text"),$0o=o(" \u2014 "),MG=a("a"),k0o=o("Data2VecTextModel"),S0o=o(" (Data2VecText model)"),R0o=l(),Uu=a("li"),xge=a("strong"),P0o=o("data2vec-vision"),B0o=o(" \u2014 "),EG=a("a"),I0o=o("Data2VecVisionModel"),N0o=o(" (Data2VecVision model)"),q0o=l(),Hu=a("li"),$ge=a("strong"),j0o=o("deberta"),D0o=o(" \u2014 "),CG=a("a"),G0o=o("DebertaModel"),O0o=o(" (DeBERTa model)"),V0o=l(),Ju=a("li"),kge=a("strong"),X0o=o("deberta-v2"),z0o=o(" \u2014 "),wG=a("a"),Q0o=o("DebertaV2Model"),W0o=o(" (DeBERTa-v2 model)"),U0o=l(),Yu=a("li"),Sge=a("strong"),H0o=o("decision_transformer"),J0o=o(" \u2014 "),AG=a("a"),Y0o=o("DecisionTransformerModel"),K0o=o(" (Decision Transformer model)"),Z0o=l(),Ku=a("li"),Rge=a("strong"),ewo=o("deit"),owo=o(" \u2014 "),yG=a("a"),rwo=o("DeiTModel"),two=o(" (DeiT model)"),awo=l(),Zu=a("li"),Pge=a("strong"),nwo=o("detr"),swo=o(" \u2014 "),LG=a("a"),lwo=o("DetrModel"),iwo=o(" (DETR model)"),dwo=l(),e_=a("li"),Bge=a("strong"),cwo=o("distilbert"),fwo=o(" \u2014 "),xG=a("a"),mwo=o("DistilBertModel"),gwo=o(" (DistilBERT model)"),hwo=l(),o_=a("li"),Ige=a("strong"),pwo=o("donut-swin"),uwo=o(" \u2014 "),$G=a("a"),_wo=o("DonutSwinModel"),bwo=o(" (DonutSwin model)"),vwo=l(),r_=a("li"),Nge=a("strong"),Fwo=o("dpr"),Two=o(" \u2014 "),kG=a("a"),Mwo=o("DPRQuestionEncoder"),Ewo=o(" (DPR model)"),Cwo=l(),t_=a("li"),qge=a("strong"),wwo=o("dpt"),Awo=o(" \u2014 "),SG=a("a"),ywo=o("DPTModel"),Lwo=o(" (DPT model)"),xwo=l(),a_=a("li"),jge=a("strong"),$wo=o("electra"),kwo=o(" \u2014 "),RG=a("a"),Swo=o("ElectraModel"),Rwo=o(" (ELECTRA model)"),Pwo=l(),n_=a("li"),Dge=a("strong"),Bwo=o("flaubert"),Iwo=o(" \u2014 "),PG=a("a"),Nwo=o("FlaubertModel"),qwo=o(" (FlauBERT model)"),jwo=l(),s_=a("li"),Gge=a("strong"),Dwo=o("flava"),Gwo=o(" \u2014 "),BG=a("a"),Owo=o("FlavaModel"),Vwo=o(" (FLAVA model)"),Xwo=l(),l_=a("li"),Oge=a("strong"),zwo=o("fnet"),Qwo=o(" \u2014 "),IG=a("a"),Wwo=o("FNetModel"),Uwo=o(" (FNet model)"),Hwo=l(),i_=a("li"),Vge=a("strong"),Jwo=o("fsmt"),Ywo=o(" \u2014 "),NG=a("a"),Kwo=o("FSMTModel"),Zwo=o(" (FairSeq Machine-Translation model)"),eAo=l(),cl=a("li"),Xge=a("strong"),oAo=o("funnel"),rAo=o(" \u2014 "),qG=a("a"),tAo=o("FunnelModel"),aAo=o(" or "),jG=a("a"),nAo=o("FunnelBaseModel"),sAo=o(" (Funnel Transformer model)"),lAo=l(),d_=a("li"),zge=a("strong"),iAo=o("glpn"),dAo=o(" \u2014 "),DG=a("a"),cAo=o("GLPNModel"),fAo=o(" (GLPN model)"),mAo=l(),c_=a("li"),Qge=a("strong"),gAo=o("gpt2"),hAo=o(" \u2014 "),GG=a("a"),pAo=o("GPT2Model"),uAo=o(" (OpenAI GPT-2 model)"),_Ao=l(),f_=a("li"),Wge=a("strong"),bAo=o("gpt_neo"),vAo=o(" \u2014 "),OG=a("a"),FAo=o("GPTNeoModel"),TAo=o(" (GPT Neo model)"),MAo=l(),m_=a("li"),Uge=a("strong"),EAo=o("gpt_neox"),CAo=o(" \u2014 "),VG=a("a"),wAo=o("GPTNeoXModel"),AAo=o(" (GPT NeoX model)"),yAo=l(),g_=a("li"),Hge=a("strong"),LAo=o("gptj"),xAo=o(" \u2014 "),XG=a("a"),$Ao=o("GPTJModel"),kAo=o(" (GPT-J model)"),SAo=l(),h_=a("li"),Jge=a("strong"),RAo=o("groupvit"),PAo=o(" \u2014 "),zG=a("a"),BAo=o("GroupViTModel"),IAo=o(" (GroupViT model)"),NAo=l(),p_=a("li"),Yge=a("strong"),qAo=o("hubert"),jAo=o(" \u2014 "),QG=a("a"),DAo=o("HubertModel"),GAo=o(" (Hubert model)"),OAo=l(),u_=a("li"),Kge=a("strong"),VAo=o("ibert"),XAo=o(" \u2014 "),WG=a("a"),zAo=o("IBertModel"),QAo=o(" (I-BERT model)"),WAo=l(),__=a("li"),Zge=a("strong"),UAo=o("imagegpt"),HAo=o(" \u2014 "),UG=a("a"),JAo=o("ImageGPTModel"),YAo=o(" (ImageGPT model)"),KAo=l(),b_=a("li"),ehe=a("strong"),ZAo=o("layoutlm"),e6o=o(" \u2014 "),HG=a("a"),o6o=o("LayoutLMModel"),r6o=o(" (LayoutLM model)"),t6o=l(),v_=a("li"),ohe=a("strong"),a6o=o("layoutlmv2"),n6o=o(" \u2014 "),JG=a("a"),s6o=o("LayoutLMv2Model"),l6o=o(" (LayoutLMv2 model)"),i6o=l(),F_=a("li"),rhe=a("strong"),d6o=o("layoutlmv3"),c6o=o(" \u2014 "),YG=a("a"),f6o=o("LayoutLMv3Model"),m6o=o(" (LayoutLMv3 model)"),g6o=l(),T_=a("li"),the=a("strong"),h6o=o("led"),p6o=o(" \u2014 "),KG=a("a"),u6o=o("LEDModel"),_6o=o(" (LED model)"),b6o=l(),M_=a("li"),ahe=a("strong"),v6o=o("levit"),F6o=o(" \u2014 "),ZG=a("a"),T6o=o("LevitModel"),M6o=o(" (LeViT model)"),E6o=l(),E_=a("li"),nhe=a("strong"),C6o=o("longformer"),w6o=o(" \u2014 "),eO=a("a"),A6o=o("LongformerModel"),y6o=o(" (Longformer model)"),L6o=l(),C_=a("li"),she=a("strong"),x6o=o("longt5"),$6o=o(" \u2014 "),oO=a("a"),k6o=o("LongT5Model"),S6o=o(" (LongT5 model)"),R6o=l(),w_=a("li"),lhe=a("strong"),P6o=o("luke"),B6o=o(" \u2014 "),rO=a("a"),I6o=o("LukeModel"),N6o=o(" (LUKE model)"),q6o=l(),A_=a("li"),ihe=a("strong"),j6o=o("lxmert"),D6o=o(" \u2014 "),tO=a("a"),G6o=o("LxmertModel"),O6o=o(" (LXMERT model)"),V6o=l(),y_=a("li"),dhe=a("strong"),X6o=o("m2m_100"),z6o=o(" \u2014 "),aO=a("a"),Q6o=o("M2M100Model"),W6o=o(" (M2M100 model)"),U6o=l(),L_=a("li"),che=a("strong"),H6o=o("marian"),J6o=o(" \u2014 "),nO=a("a"),Y6o=o("MarianModel"),K6o=o(" (Marian model)"),Z6o=l(),x_=a("li"),fhe=a("strong"),e7o=o("maskformer"),o7o=o(" \u2014 "),sO=a("a"),r7o=o("MaskFormerModel"),t7o=o(" (MaskFormer model)"),a7o=l(),$_=a("li"),mhe=a("strong"),n7o=o("mbart"),s7o=o(" \u2014 "),lO=a("a"),l7o=o("MBartModel"),i7o=o(" (mBART model)"),d7o=l(),k_=a("li"),ghe=a("strong"),c7o=o("mctct"),f7o=o(" \u2014 "),iO=a("a"),m7o=o("MCTCTModel"),g7o=o(" (M-CTC-T model)"),h7o=l(),S_=a("li"),hhe=a("strong"),p7o=o("megatron-bert"),u7o=o(" \u2014 "),dO=a("a"),_7o=o("MegatronBertModel"),b7o=o(" (Megatron-BERT model)"),v7o=l(),R_=a("li"),phe=a("strong"),F7o=o("mobilebert"),T7o=o(" \u2014 "),cO=a("a"),M7o=o("MobileBertModel"),E7o=o(" (MobileBERT model)"),C7o=l(),P_=a("li"),uhe=a("strong"),w7o=o("mobilevit"),A7o=o(" \u2014 "),fO=a("a"),y7o=o("MobileViTModel"),L7o=o(" (MobileViT model)"),x7o=l(),B_=a("li"),_he=a("strong"),$7o=o("mpnet"),k7o=o(" \u2014 "),mO=a("a"),S7o=o("MPNetModel"),R7o=o(" (MPNet model)"),P7o=l(),I_=a("li"),bhe=a("strong"),B7o=o("mt5"),I7o=o(" \u2014 "),gO=a("a"),N7o=o("MT5Model"),q7o=o(" (MT5 model)"),j7o=l(),N_=a("li"),vhe=a("strong"),D7o=o("mvp"),G7o=o(" \u2014 "),hO=a("a"),O7o=o("MvpModel"),V7o=o(" (MVP model)"),X7o=l(),q_=a("li"),Fhe=a("strong"),z7o=o("nezha"),Q7o=o(" \u2014 "),pO=a("a"),W7o=o("NezhaModel"),U7o=o(" (Nezha model)"),H7o=l(),j_=a("li"),The=a("strong"),J7o=o("nllb"),Y7o=o(" \u2014 "),uO=a("a"),K7o=o("M2M100Model"),Z7o=o(" (NLLB model)"),eyo=l(),D_=a("li"),Mhe=a("strong"),oyo=o("nystromformer"),ryo=o(" \u2014 "),_O=a("a"),tyo=o("NystromformerModel"),ayo=o(" (Nystr\xF6mformer model)"),nyo=l(),G_=a("li"),Ehe=a("strong"),syo=o("openai-gpt"),lyo=o(" \u2014 "),bO=a("a"),iyo=o("OpenAIGPTModel"),dyo=o(" (OpenAI GPT model)"),cyo=l(),O_=a("li"),Che=a("strong"),fyo=o("opt"),myo=o(" \u2014 "),vO=a("a"),gyo=o("OPTModel"),hyo=o(" (OPT model)"),pyo=l(),V_=a("li"),whe=a("strong"),uyo=o("owlvit"),_yo=o(" \u2014 "),FO=a("a"),byo=o("OwlViTModel"),vyo=o(" (OWL-ViT model)"),Fyo=l(),X_=a("li"),Ahe=a("strong"),Tyo=o("pegasus"),Myo=o(" \u2014 "),TO=a("a"),Eyo=o("PegasusModel"),Cyo=o(" (Pegasus model)"),wyo=l(),z_=a("li"),yhe=a("strong"),Ayo=o("perceiver"),yyo=o(" \u2014 "),MO=a("a"),Lyo=o("PerceiverModel"),xyo=o(" (Perceiver model)"),$yo=l(),Q_=a("li"),Lhe=a("strong"),kyo=o("plbart"),Syo=o(" \u2014 "),EO=a("a"),Ryo=o("PLBartModel"),Pyo=o(" (PLBart model)"),Byo=l(),W_=a("li"),xhe=a("strong"),Iyo=o("poolformer"),Nyo=o(" \u2014 "),CO=a("a"),qyo=o("PoolFormerModel"),jyo=o(" (PoolFormer model)"),Dyo=l(),U_=a("li"),$he=a("strong"),Gyo=o("prophetnet"),Oyo=o(" \u2014 "),wO=a("a"),Vyo=o("ProphetNetModel"),Xyo=o(" (ProphetNet model)"),zyo=l(),H_=a("li"),khe=a("strong"),Qyo=o("qdqbert"),Wyo=o(" \u2014 "),AO=a("a"),Uyo=o("QDQBertModel"),Hyo=o(" (QDQBert model)"),Jyo=l(),J_=a("li"),She=a("strong"),Yyo=o("reformer"),Kyo=o(" \u2014 "),yO=a("a"),Zyo=o("ReformerModel"),eLo=o(" (Reformer model)"),oLo=l(),Y_=a("li"),Rhe=a("strong"),rLo=o("regnet"),tLo=o(" \u2014 "),LO=a("a"),aLo=o("RegNetModel"),nLo=o(" (RegNet model)"),sLo=l(),K_=a("li"),Phe=a("strong"),lLo=o("rembert"),iLo=o(" \u2014 "),xO=a("a"),dLo=o("RemBertModel"),cLo=o(" (RemBERT model)"),fLo=l(),Z_=a("li"),Bhe=a("strong"),mLo=o("resnet"),gLo=o(" \u2014 "),$O=a("a"),hLo=o("ResNetModel"),pLo=o(" (ResNet model)"),uLo=l(),e1=a("li"),Ihe=a("strong"),_Lo=o("retribert"),bLo=o(" \u2014 "),kO=a("a"),vLo=o("RetriBertModel"),FLo=o(" (RetriBERT model)"),TLo=l(),o1=a("li"),Nhe=a("strong"),MLo=o("roberta"),ELo=o(" \u2014 "),SO=a("a"),CLo=o("RobertaModel"),wLo=o(" (RoBERTa model)"),ALo=l(),r1=a("li"),qhe=a("strong"),yLo=o("roformer"),LLo=o(" \u2014 "),RO=a("a"),xLo=o("RoFormerModel"),$Lo=o(" (RoFormer model)"),kLo=l(),t1=a("li"),jhe=a("strong"),SLo=o("segformer"),RLo=o(" \u2014 "),PO=a("a"),PLo=o("SegformerModel"),BLo=o(" (SegFormer model)"),ILo=l(),a1=a("li"),Dhe=a("strong"),NLo=o("sew"),qLo=o(" \u2014 "),BO=a("a"),jLo=o("SEWModel"),DLo=o(" (SEW model)"),GLo=l(),n1=a("li"),Ghe=a("strong"),OLo=o("sew-d"),VLo=o(" \u2014 "),IO=a("a"),XLo=o("SEWDModel"),zLo=o(" (SEW-D model)"),QLo=l(),s1=a("li"),Ohe=a("strong"),WLo=o("speech_to_text"),ULo=o(" \u2014 "),NO=a("a"),HLo=o("Speech2TextModel"),JLo=o(" (Speech2Text model)"),YLo=l(),l1=a("li"),Vhe=a("strong"),KLo=o("splinter"),ZLo=o(" \u2014 "),qO=a("a"),e9o=o("SplinterModel"),o9o=o(" (Splinter model)"),r9o=l(),i1=a("li"),Xhe=a("strong"),t9o=o("squeezebert"),a9o=o(" \u2014 "),jO=a("a"),n9o=o("SqueezeBertModel"),s9o=o(" (SqueezeBERT model)"),l9o=l(),d1=a("li"),zhe=a("strong"),i9o=o("swin"),d9o=o(" \u2014 "),DO=a("a"),c9o=o("SwinModel"),f9o=o(" (Swin Transformer model)"),m9o=l(),c1=a("li"),Qhe=a("strong"),g9o=o("swinv2"),h9o=o(" \u2014 "),GO=a("a"),p9o=o("Swinv2Model"),u9o=o(" (Swin Transformer V2 model)"),_9o=l(),f1=a("li"),Whe=a("strong"),b9o=o("t5"),v9o=o(" \u2014 "),OO=a("a"),F9o=o("T5Model"),T9o=o(" (T5 model)"),M9o=l(),m1=a("li"),Uhe=a("strong"),E9o=o("tapas"),C9o=o(" \u2014 "),VO=a("a"),w9o=o("TapasModel"),A9o=o(" (TAPAS model)"),y9o=l(),g1=a("li"),Hhe=a("strong"),L9o=o("trajectory_transformer"),x9o=o(" \u2014 "),XO=a("a"),$9o=o("TrajectoryTransformerModel"),k9o=o(" (Trajectory Transformer model)"),S9o=l(),h1=a("li"),Jhe=a("strong"),R9o=o("transfo-xl"),P9o=o(" \u2014 "),zO=a("a"),B9o=o("TransfoXLModel"),I9o=o(" (Transformer-XL model)"),N9o=l(),p1=a("li"),Yhe=a("strong"),q9o=o("unispeech"),j9o=o(" \u2014 "),QO=a("a"),D9o=o("UniSpeechModel"),G9o=o(" (UniSpeech model)"),O9o=l(),u1=a("li"),Khe=a("strong"),V9o=o("unispeech-sat"),X9o=o(" \u2014 "),WO=a("a"),z9o=o("UniSpeechSatModel"),Q9o=o(" (UniSpeechSat model)"),W9o=l(),_1=a("li"),Zhe=a("strong"),U9o=o("van"),H9o=o(" \u2014 "),UO=a("a"),J9o=o("VanModel"),Y9o=o(" (VAN model)"),K9o=l(),b1=a("li"),epe=a("strong"),Z9o=o("videomae"),exo=o(" \u2014 "),HO=a("a"),oxo=o("VideoMAEModel"),rxo=o(" (VideoMAE model)"),txo=l(),v1=a("li"),ope=a("strong"),axo=o("vilt"),nxo=o(" \u2014 "),JO=a("a"),sxo=o("ViltModel"),lxo=o(" (ViLT model)"),ixo=l(),F1=a("li"),rpe=a("strong"),dxo=o("vision-text-dual-encoder"),cxo=o(" \u2014 "),YO=a("a"),fxo=o("VisionTextDualEncoderModel"),mxo=o(" (VisionTextDualEncoder model)"),gxo=l(),T1=a("li"),tpe=a("strong"),hxo=o("visual_bert"),pxo=o(" \u2014 "),KO=a("a"),uxo=o("VisualBertModel"),_xo=o(" (VisualBERT model)"),bxo=l(),M1=a("li"),ape=a("strong"),vxo=o("vit"),Fxo=o(" \u2014 "),ZO=a("a"),Txo=o("ViTModel"),Mxo=o(" (ViT model)"),Exo=l(),E1=a("li"),npe=a("strong"),Cxo=o("vit_mae"),wxo=o(" \u2014 "),eV=a("a"),Axo=o("ViTMAEModel"),yxo=o(" (ViTMAE model)"),Lxo=l(),C1=a("li"),spe=a("strong"),xxo=o("wav2vec2"),$xo=o(" \u2014 "),oV=a("a"),kxo=o("Wav2Vec2Model"),Sxo=o(" (Wav2Vec2 model)"),Rxo=l(),w1=a("li"),lpe=a("strong"),Pxo=o("wav2vec2-conformer"),Bxo=o(" \u2014 "),rV=a("a"),Ixo=o("Wav2Vec2ConformerModel"),Nxo=o(" (Wav2Vec2-Conformer model)"),qxo=l(),A1=a("li"),ipe=a("strong"),jxo=o("wavlm"),Dxo=o(" \u2014 "),tV=a("a"),Gxo=o("WavLMModel"),Oxo=o(" (WavLM model)"),Vxo=l(),y1=a("li"),dpe=a("strong"),Xxo=o("xglm"),zxo=o(" \u2014 "),aV=a("a"),Qxo=o("XGLMModel"),Wxo=o(" (XGLM model)"),Uxo=l(),L1=a("li"),cpe=a("strong"),Hxo=o("xlm"),Jxo=o(" \u2014 "),nV=a("a"),Yxo=o("XLMModel"),Kxo=o(" (XLM model)"),Zxo=l(),x1=a("li"),fpe=a("strong"),e$o=o("xlm-prophetnet"),o$o=o(" \u2014 "),sV=a("a"),r$o=o("XLMProphetNetModel"),t$o=o(" (XLM-ProphetNet model)"),a$o=l(),$1=a("li"),mpe=a("strong"),n$o=o("xlm-roberta"),s$o=o(" \u2014 "),lV=a("a"),l$o=o("XLMRobertaModel"),i$o=o(" (XLM-RoBERTa model)"),d$o=l(),k1=a("li"),gpe=a("strong"),c$o=o("xlm-roberta-xl"),f$o=o(" \u2014 "),iV=a("a"),m$o=o("XLMRobertaXLModel"),g$o=o(" (XLM-RoBERTa-XL model)"),h$o=l(),S1=a("li"),hpe=a("strong"),p$o=o("xlnet"),u$o=o(" \u2014 "),dV=a("a"),_$o=o("XLNetModel"),b$o=o(" (XLNet model)"),v$o=l(),R1=a("li"),ppe=a("strong"),F$o=o("yolos"),T$o=o(" \u2014 "),cV=a("a"),M$o=o("YolosModel"),E$o=o(" (YOLOS model)"),C$o=l(),P1=a("li"),upe=a("strong"),w$o=o("yoso"),A$o=o(" \u2014 "),fV=a("a"),y$o=o("YosoModel"),L$o=o(" (YOSO model)"),x$o=l(),B1=a("p"),$$o=o("The model is set in evaluation mode by default using "),_pe=a("code"),k$o=o("model.eval()"),S$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=a("code"),R$o=o("model.train()"),P$o=l(),F(I1.$$.fragment),UUe=l(),fd=a("h2"),N1=a("a"),vpe=a("span"),F(i9.$$.fragment),B$o=l(),Fpe=a("span"),I$o=o("AutoModelForPreTraining"),HUe=l(),Po=a("div"),F(d9.$$.fragment),N$o=l(),md=a("p"),q$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mV=a("a"),j$o=o("from_pretrained()"),D$o=o(" class method or the "),gV=a("a"),G$o=o("from_config()"),O$o=o(` class
method.`),V$o=l(),c9=a("p"),X$o=o("This class cannot be instantiated directly using "),Tpe=a("code"),z$o=o("__init__()"),Q$o=o(" (throws an error)."),W$o=l(),pt=a("div"),F(f9.$$.fragment),U$o=l(),Mpe=a("p"),H$o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),J$o=l(),gd=a("p"),Y$o=o(`Note:
Loading a model from its configuration file does `),Epe=a("strong"),K$o=o("not"),Z$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=a("a"),eko=o("from_pretrained()"),oko=o(" to load the model weights."),rko=l(),F(q1.$$.fragment),tko=l(),Ke=a("div"),F(m9.$$.fragment),ako=l(),Cpe=a("p"),nko=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sko=l(),Ua=a("p"),lko=o("The model class to instantiate is selected based on the "),wpe=a("code"),iko=o("model_type"),dko=o(` property of the config object (either
passed as an argument or loaded from `),Ape=a("code"),cko=o("pretrained_model_name_or_path"),fko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=a("code"),mko=o("pretrained_model_name_or_path"),gko=o(":"),hko=l(),G=a("ul"),j1=a("li"),Lpe=a("strong"),pko=o("albert"),uko=o(" \u2014 "),pV=a("a"),_ko=o("AlbertForPreTraining"),bko=o(" (ALBERT model)"),vko=l(),D1=a("li"),xpe=a("strong"),Fko=o("bart"),Tko=o(" \u2014 "),uV=a("a"),Mko=o("BartForConditionalGeneration"),Eko=o(" (BART model)"),Cko=l(),G1=a("li"),$pe=a("strong"),wko=o("bert"),Ako=o(" \u2014 "),_V=a("a"),yko=o("BertForPreTraining"),Lko=o(" (BERT model)"),xko=l(),O1=a("li"),kpe=a("strong"),$ko=o("big_bird"),kko=o(" \u2014 "),bV=a("a"),Sko=o("BigBirdForPreTraining"),Rko=o(" (BigBird model)"),Pko=l(),V1=a("li"),Spe=a("strong"),Bko=o("bloom"),Iko=o(" \u2014 "),vV=a("a"),Nko=o("BloomForCausalLM"),qko=o(" (BLOOM model)"),jko=l(),X1=a("li"),Rpe=a("strong"),Dko=o("camembert"),Gko=o(" \u2014 "),FV=a("a"),Oko=o("CamembertForMaskedLM"),Vko=o(" (CamemBERT model)"),Xko=l(),z1=a("li"),Ppe=a("strong"),zko=o("ctrl"),Qko=o(" \u2014 "),TV=a("a"),Wko=o("CTRLLMHeadModel"),Uko=o(" (CTRL model)"),Hko=l(),Q1=a("li"),Bpe=a("strong"),Jko=o("data2vec-text"),Yko=o(" \u2014 "),MV=a("a"),Kko=o("Data2VecTextForMaskedLM"),Zko=o(" (Data2VecText model)"),eSo=l(),W1=a("li"),Ipe=a("strong"),oSo=o("deberta"),rSo=o(" \u2014 "),EV=a("a"),tSo=o("DebertaForMaskedLM"),aSo=o(" (DeBERTa model)"),nSo=l(),U1=a("li"),Npe=a("strong"),sSo=o("deberta-v2"),lSo=o(" \u2014 "),CV=a("a"),iSo=o("DebertaV2ForMaskedLM"),dSo=o(" (DeBERTa-v2 model)"),cSo=l(),H1=a("li"),qpe=a("strong"),fSo=o("distilbert"),mSo=o(" \u2014 "),wV=a("a"),gSo=o("DistilBertForMaskedLM"),hSo=o(" (DistilBERT model)"),pSo=l(),J1=a("li"),jpe=a("strong"),uSo=o("electra"),_So=o(" \u2014 "),AV=a("a"),bSo=o("ElectraForPreTraining"),vSo=o(" (ELECTRA model)"),FSo=l(),Y1=a("li"),Dpe=a("strong"),TSo=o("flaubert"),MSo=o(" \u2014 "),yV=a("a"),ESo=o("FlaubertWithLMHeadModel"),CSo=o(" (FlauBERT model)"),wSo=l(),K1=a("li"),Gpe=a("strong"),ASo=o("flava"),ySo=o(" \u2014 "),LV=a("a"),LSo=o("FlavaForPreTraining"),xSo=o(" (FLAVA model)"),$So=l(),Z1=a("li"),Ope=a("strong"),kSo=o("fnet"),SSo=o(" \u2014 "),xV=a("a"),RSo=o("FNetForPreTraining"),PSo=o(" (FNet model)"),BSo=l(),e4=a("li"),Vpe=a("strong"),ISo=o("fsmt"),NSo=o(" \u2014 "),$V=a("a"),qSo=o("FSMTForConditionalGeneration"),jSo=o(" (FairSeq Machine-Translation model)"),DSo=l(),o4=a("li"),Xpe=a("strong"),GSo=o("funnel"),OSo=o(" \u2014 "),kV=a("a"),VSo=o("FunnelForPreTraining"),XSo=o(" (Funnel Transformer model)"),zSo=l(),r4=a("li"),zpe=a("strong"),QSo=o("gpt2"),WSo=o(" \u2014 "),SV=a("a"),USo=o("GPT2LMHeadModel"),HSo=o(" (OpenAI GPT-2 model)"),JSo=l(),t4=a("li"),Qpe=a("strong"),YSo=o("ibert"),KSo=o(" \u2014 "),RV=a("a"),ZSo=o("IBertForMaskedLM"),eRo=o(" (I-BERT model)"),oRo=l(),a4=a("li"),Wpe=a("strong"),rRo=o("layoutlm"),tRo=o(" \u2014 "),PV=a("a"),aRo=o("LayoutLMForMaskedLM"),nRo=o(" (LayoutLM model)"),sRo=l(),n4=a("li"),Upe=a("strong"),lRo=o("longformer"),iRo=o(" \u2014 "),BV=a("a"),dRo=o("LongformerForMaskedLM"),cRo=o(" (Longformer model)"),fRo=l(),s4=a("li"),Hpe=a("strong"),mRo=o("luke"),gRo=o(" \u2014 "),IV=a("a"),hRo=o("LukeForMaskedLM"),pRo=o(" (LUKE model)"),uRo=l(),l4=a("li"),Jpe=a("strong"),_Ro=o("lxmert"),bRo=o(" \u2014 "),NV=a("a"),vRo=o("LxmertForPreTraining"),FRo=o(" (LXMERT model)"),TRo=l(),i4=a("li"),Ype=a("strong"),MRo=o("megatron-bert"),ERo=o(" \u2014 "),qV=a("a"),CRo=o("MegatronBertForPreTraining"),wRo=o(" (Megatron-BERT model)"),ARo=l(),d4=a("li"),Kpe=a("strong"),yRo=o("mobilebert"),LRo=o(" \u2014 "),jV=a("a"),xRo=o("MobileBertForPreTraining"),$Ro=o(" (MobileBERT model)"),kRo=l(),c4=a("li"),Zpe=a("strong"),SRo=o("mpnet"),RRo=o(" \u2014 "),DV=a("a"),PRo=o("MPNetForMaskedLM"),BRo=o(" (MPNet model)"),IRo=l(),f4=a("li"),eue=a("strong"),NRo=o("mvp"),qRo=o(" \u2014 "),GV=a("a"),jRo=o("MvpForConditionalGeneration"),DRo=o(" (MVP model)"),GRo=l(),m4=a("li"),oue=a("strong"),ORo=o("nezha"),VRo=o(" \u2014 "),OV=a("a"),XRo=o("NezhaForPreTraining"),zRo=o(" (Nezha model)"),QRo=l(),g4=a("li"),rue=a("strong"),WRo=o("openai-gpt"),URo=o(" \u2014 "),VV=a("a"),HRo=o("OpenAIGPTLMHeadModel"),JRo=o(" (OpenAI GPT model)"),YRo=l(),h4=a("li"),tue=a("strong"),KRo=o("retribert"),ZRo=o(" \u2014 "),XV=a("a"),ePo=o("RetriBertModel"),oPo=o(" (RetriBERT model)"),rPo=l(),p4=a("li"),aue=a("strong"),tPo=o("roberta"),aPo=o(" \u2014 "),zV=a("a"),nPo=o("RobertaForMaskedLM"),sPo=o(" (RoBERTa model)"),lPo=l(),u4=a("li"),nue=a("strong"),iPo=o("splinter"),dPo=o(" \u2014 "),QV=a("a"),cPo=o("SplinterForPreTraining"),fPo=o(" (Splinter model)"),mPo=l(),_4=a("li"),sue=a("strong"),gPo=o("squeezebert"),hPo=o(" \u2014 "),WV=a("a"),pPo=o("SqueezeBertForMaskedLM"),uPo=o(" (SqueezeBERT model)"),_Po=l(),b4=a("li"),lue=a("strong"),bPo=o("t5"),vPo=o(" \u2014 "),UV=a("a"),FPo=o("T5ForConditionalGeneration"),TPo=o(" (T5 model)"),MPo=l(),v4=a("li"),iue=a("strong"),EPo=o("tapas"),CPo=o(" \u2014 "),HV=a("a"),wPo=o("TapasForMaskedLM"),APo=o(" (TAPAS model)"),yPo=l(),F4=a("li"),due=a("strong"),LPo=o("transfo-xl"),xPo=o(" \u2014 "),JV=a("a"),$Po=o("TransfoXLLMHeadModel"),kPo=o(" (Transformer-XL model)"),SPo=l(),T4=a("li"),cue=a("strong"),RPo=o("unispeech"),PPo=o(" \u2014 "),YV=a("a"),BPo=o("UniSpeechForPreTraining"),IPo=o(" (UniSpeech model)"),NPo=l(),M4=a("li"),fue=a("strong"),qPo=o("unispeech-sat"),jPo=o(" \u2014 "),KV=a("a"),DPo=o("UniSpeechSatForPreTraining"),GPo=o(" (UniSpeechSat model)"),OPo=l(),E4=a("li"),mue=a("strong"),VPo=o("videomae"),XPo=o(" \u2014 "),ZV=a("a"),zPo=o("VideoMAEForPreTraining"),QPo=o(" (VideoMAE model)"),WPo=l(),C4=a("li"),gue=a("strong"),UPo=o("visual_bert"),HPo=o(" \u2014 "),eX=a("a"),JPo=o("VisualBertForPreTraining"),YPo=o(" (VisualBERT model)"),KPo=l(),w4=a("li"),hue=a("strong"),ZPo=o("vit_mae"),eBo=o(" \u2014 "),oX=a("a"),oBo=o("ViTMAEForPreTraining"),rBo=o(" (ViTMAE model)"),tBo=l(),A4=a("li"),pue=a("strong"),aBo=o("wav2vec2"),nBo=o(" \u2014 "),rX=a("a"),sBo=o("Wav2Vec2ForPreTraining"),lBo=o(" (Wav2Vec2 model)"),iBo=l(),y4=a("li"),uue=a("strong"),dBo=o("wav2vec2-conformer"),cBo=o(" \u2014 "),tX=a("a"),fBo=o("Wav2Vec2ConformerForPreTraining"),mBo=o(" (Wav2Vec2-Conformer model)"),gBo=l(),L4=a("li"),_ue=a("strong"),hBo=o("xlm"),pBo=o(" \u2014 "),aX=a("a"),uBo=o("XLMWithLMHeadModel"),_Bo=o(" (XLM model)"),bBo=l(),x4=a("li"),bue=a("strong"),vBo=o("xlm-roberta"),FBo=o(" \u2014 "),nX=a("a"),TBo=o("XLMRobertaForMaskedLM"),MBo=o(" (XLM-RoBERTa model)"),EBo=l(),$4=a("li"),vue=a("strong"),CBo=o("xlm-roberta-xl"),wBo=o(" \u2014 "),sX=a("a"),ABo=o("XLMRobertaXLForMaskedLM"),yBo=o(" (XLM-RoBERTa-XL model)"),LBo=l(),k4=a("li"),Fue=a("strong"),xBo=o("xlnet"),$Bo=o(" \u2014 "),lX=a("a"),kBo=o("XLNetLMHeadModel"),SBo=o(" (XLNet model)"),RBo=l(),S4=a("p"),PBo=o("The model is set in evaluation mode by default using "),Tue=a("code"),BBo=o("model.eval()"),IBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mue=a("code"),NBo=o("model.train()"),qBo=l(),F(R4.$$.fragment),JUe=l(),hd=a("h2"),P4=a("a"),Eue=a("span"),F(g9.$$.fragment),jBo=l(),Cue=a("span"),DBo=o("AutoModelForCausalLM"),YUe=l(),Bo=a("div"),F(h9.$$.fragment),GBo=l(),pd=a("p"),OBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),iX=a("a"),VBo=o("from_pretrained()"),XBo=o(" class method or the "),dX=a("a"),zBo=o("from_config()"),QBo=o(` class
method.`),WBo=l(),p9=a("p"),UBo=o("This class cannot be instantiated directly using "),wue=a("code"),HBo=o("__init__()"),JBo=o(" (throws an error)."),YBo=l(),ut=a("div"),F(u9.$$.fragment),KBo=l(),Aue=a("p"),ZBo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),eIo=l(),ud=a("p"),oIo=o(`Note:
Loading a model from its configuration file does `),yue=a("strong"),rIo=o("not"),tIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=a("a"),aIo=o("from_pretrained()"),nIo=o(" to load the model weights."),sIo=l(),F(B4.$$.fragment),lIo=l(),Ze=a("div"),F(_9.$$.fragment),iIo=l(),Lue=a("p"),dIo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),cIo=l(),Ha=a("p"),fIo=o("The model class to instantiate is selected based on the "),xue=a("code"),mIo=o("model_type"),gIo=o(` property of the config object (either
passed as an argument or loaded from `),$ue=a("code"),hIo=o("pretrained_model_name_or_path"),pIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=a("code"),uIo=o("pretrained_model_name_or_path"),_Io=o(":"),bIo=l(),z=a("ul"),I4=a("li"),Sue=a("strong"),vIo=o("bart"),FIo=o(" \u2014 "),fX=a("a"),TIo=o("BartForCausalLM"),MIo=o(" (BART model)"),EIo=l(),N4=a("li"),Rue=a("strong"),CIo=o("bert"),wIo=o(" \u2014 "),mX=a("a"),AIo=o("BertLMHeadModel"),yIo=o(" (BERT model)"),LIo=l(),q4=a("li"),Pue=a("strong"),xIo=o("bert-generation"),$Io=o(" \u2014 "),gX=a("a"),kIo=o("BertGenerationDecoder"),SIo=o(" (Bert Generation model)"),RIo=l(),j4=a("li"),Bue=a("strong"),PIo=o("big_bird"),BIo=o(" \u2014 "),hX=a("a"),IIo=o("BigBirdForCausalLM"),NIo=o(" (BigBird model)"),qIo=l(),D4=a("li"),Iue=a("strong"),jIo=o("bigbird_pegasus"),DIo=o(" \u2014 "),pX=a("a"),GIo=o("BigBirdPegasusForCausalLM"),OIo=o(" (BigBird-Pegasus model)"),VIo=l(),G4=a("li"),Nue=a("strong"),XIo=o("blenderbot"),zIo=o(" \u2014 "),uX=a("a"),QIo=o("BlenderbotForCausalLM"),WIo=o(" (Blenderbot model)"),UIo=l(),O4=a("li"),que=a("strong"),HIo=o("blenderbot-small"),JIo=o(" \u2014 "),_X=a("a"),YIo=o("BlenderbotSmallForCausalLM"),KIo=o(" (BlenderbotSmall model)"),ZIo=l(),V4=a("li"),jue=a("strong"),eNo=o("bloom"),oNo=o(" \u2014 "),bX=a("a"),rNo=o("BloomForCausalLM"),tNo=o(" (BLOOM model)"),aNo=l(),X4=a("li"),Due=a("strong"),nNo=o("camembert"),sNo=o(" \u2014 "),vX=a("a"),lNo=o("CamembertForCausalLM"),iNo=o(" (CamemBERT model)"),dNo=l(),z4=a("li"),Gue=a("strong"),cNo=o("codegen"),fNo=o(" \u2014 "),FX=a("a"),mNo=o("CodeGenForCausalLM"),gNo=o(" (CodeGen model)"),hNo=l(),Q4=a("li"),Oue=a("strong"),pNo=o("ctrl"),uNo=o(" \u2014 "),TX=a("a"),_No=o("CTRLLMHeadModel"),bNo=o(" (CTRL model)"),vNo=l(),W4=a("li"),Vue=a("strong"),FNo=o("data2vec-text"),TNo=o(" \u2014 "),MX=a("a"),MNo=o("Data2VecTextForCausalLM"),ENo=o(" (Data2VecText model)"),CNo=l(),U4=a("li"),Xue=a("strong"),wNo=o("electra"),ANo=o(" \u2014 "),EX=a("a"),yNo=o("ElectraForCausalLM"),LNo=o(" (ELECTRA model)"),xNo=l(),H4=a("li"),zue=a("strong"),$No=o("gpt2"),kNo=o(" \u2014 "),CX=a("a"),SNo=o("GPT2LMHeadModel"),RNo=o(" (OpenAI GPT-2 model)"),PNo=l(),J4=a("li"),Que=a("strong"),BNo=o("gpt_neo"),INo=o(" \u2014 "),wX=a("a"),NNo=o("GPTNeoForCausalLM"),qNo=o(" (GPT Neo model)"),jNo=l(),Y4=a("li"),Wue=a("strong"),DNo=o("gpt_neox"),GNo=o(" \u2014 "),AX=a("a"),ONo=o("GPTNeoXForCausalLM"),VNo=o(" (GPT NeoX model)"),XNo=l(),K4=a("li"),Uue=a("strong"),zNo=o("gptj"),QNo=o(" \u2014 "),yX=a("a"),WNo=o("GPTJForCausalLM"),UNo=o(" (GPT-J model)"),HNo=l(),Z4=a("li"),Hue=a("strong"),JNo=o("marian"),YNo=o(" \u2014 "),LX=a("a"),KNo=o("MarianForCausalLM"),ZNo=o(" (Marian model)"),eqo=l(),e2=a("li"),Jue=a("strong"),oqo=o("mbart"),rqo=o(" \u2014 "),xX=a("a"),tqo=o("MBartForCausalLM"),aqo=o(" (mBART model)"),nqo=l(),o2=a("li"),Yue=a("strong"),sqo=o("megatron-bert"),lqo=o(" \u2014 "),$X=a("a"),iqo=o("MegatronBertForCausalLM"),dqo=o(" (Megatron-BERT model)"),cqo=l(),r2=a("li"),Kue=a("strong"),fqo=o("mvp"),mqo=o(" \u2014 "),kX=a("a"),gqo=o("MvpForCausalLM"),hqo=o(" (MVP model)"),pqo=l(),t2=a("li"),Zue=a("strong"),uqo=o("openai-gpt"),_qo=o(" \u2014 "),SX=a("a"),bqo=o("OpenAIGPTLMHeadModel"),vqo=o(" (OpenAI GPT model)"),Fqo=l(),a2=a("li"),e_e=a("strong"),Tqo=o("opt"),Mqo=o(" \u2014 "),RX=a("a"),Eqo=o("OPTForCausalLM"),Cqo=o(" (OPT model)"),wqo=l(),n2=a("li"),o_e=a("strong"),Aqo=o("pegasus"),yqo=o(" \u2014 "),PX=a("a"),Lqo=o("PegasusForCausalLM"),xqo=o(" (Pegasus model)"),$qo=l(),s2=a("li"),r_e=a("strong"),kqo=o("plbart"),Sqo=o(" \u2014 "),BX=a("a"),Rqo=o("PLBartForCausalLM"),Pqo=o(" (PLBart model)"),Bqo=l(),l2=a("li"),t_e=a("strong"),Iqo=o("prophetnet"),Nqo=o(" \u2014 "),IX=a("a"),qqo=o("ProphetNetForCausalLM"),jqo=o(" (ProphetNet model)"),Dqo=l(),i2=a("li"),a_e=a("strong"),Gqo=o("qdqbert"),Oqo=o(" \u2014 "),NX=a("a"),Vqo=o("QDQBertLMHeadModel"),Xqo=o(" (QDQBert model)"),zqo=l(),d2=a("li"),n_e=a("strong"),Qqo=o("reformer"),Wqo=o(" \u2014 "),qX=a("a"),Uqo=o("ReformerModelWithLMHead"),Hqo=o(" (Reformer model)"),Jqo=l(),c2=a("li"),s_e=a("strong"),Yqo=o("rembert"),Kqo=o(" \u2014 "),jX=a("a"),Zqo=o("RemBertForCausalLM"),ejo=o(" (RemBERT model)"),ojo=l(),f2=a("li"),l_e=a("strong"),rjo=o("roberta"),tjo=o(" \u2014 "),DX=a("a"),ajo=o("RobertaForCausalLM"),njo=o(" (RoBERTa model)"),sjo=l(),m2=a("li"),i_e=a("strong"),ljo=o("roformer"),ijo=o(" \u2014 "),GX=a("a"),djo=o("RoFormerForCausalLM"),cjo=o(" (RoFormer model)"),fjo=l(),g2=a("li"),d_e=a("strong"),mjo=o("speech_to_text_2"),gjo=o(" \u2014 "),OX=a("a"),hjo=o("Speech2Text2ForCausalLM"),pjo=o(" (Speech2Text2 model)"),ujo=l(),h2=a("li"),c_e=a("strong"),_jo=o("transfo-xl"),bjo=o(" \u2014 "),VX=a("a"),vjo=o("TransfoXLLMHeadModel"),Fjo=o(" (Transformer-XL model)"),Tjo=l(),p2=a("li"),f_e=a("strong"),Mjo=o("trocr"),Ejo=o(" \u2014 "),XX=a("a"),Cjo=o("TrOCRForCausalLM"),wjo=o(" (TrOCR model)"),Ajo=l(),u2=a("li"),m_e=a("strong"),yjo=o("xglm"),Ljo=o(" \u2014 "),zX=a("a"),xjo=o("XGLMForCausalLM"),$jo=o(" (XGLM model)"),kjo=l(),_2=a("li"),g_e=a("strong"),Sjo=o("xlm"),Rjo=o(" \u2014 "),QX=a("a"),Pjo=o("XLMWithLMHeadModel"),Bjo=o(" (XLM model)"),Ijo=l(),b2=a("li"),h_e=a("strong"),Njo=o("xlm-prophetnet"),qjo=o(" \u2014 "),WX=a("a"),jjo=o("XLMProphetNetForCausalLM"),Djo=o(" (XLM-ProphetNet model)"),Gjo=l(),v2=a("li"),p_e=a("strong"),Ojo=o("xlm-roberta"),Vjo=o(" \u2014 "),UX=a("a"),Xjo=o("XLMRobertaForCausalLM"),zjo=o(" (XLM-RoBERTa model)"),Qjo=l(),F2=a("li"),u_e=a("strong"),Wjo=o("xlm-roberta-xl"),Ujo=o(" \u2014 "),HX=a("a"),Hjo=o("XLMRobertaXLForCausalLM"),Jjo=o(" (XLM-RoBERTa-XL model)"),Yjo=l(),T2=a("li"),__e=a("strong"),Kjo=o("xlnet"),Zjo=o(" \u2014 "),JX=a("a"),eDo=o("XLNetLMHeadModel"),oDo=o(" (XLNet model)"),rDo=l(),M2=a("p"),tDo=o("The model is set in evaluation mode by default using "),b_e=a("code"),aDo=o("model.eval()"),nDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v_e=a("code"),sDo=o("model.train()"),lDo=l(),F(E2.$$.fragment),KUe=l(),_d=a("h2"),C2=a("a"),F_e=a("span"),F(b9.$$.fragment),iDo=l(),T_e=a("span"),dDo=o("AutoModelForMaskedLM"),ZUe=l(),Io=a("div"),F(v9.$$.fragment),cDo=l(),bd=a("p"),fDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),YX=a("a"),mDo=o("from_pretrained()"),gDo=o(" class method or the "),KX=a("a"),hDo=o("from_config()"),pDo=o(` class
method.`),uDo=l(),F9=a("p"),_Do=o("This class cannot be instantiated directly using "),M_e=a("code"),bDo=o("__init__()"),vDo=o(" (throws an error)."),FDo=l(),_t=a("div"),F(T9.$$.fragment),TDo=l(),E_e=a("p"),MDo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),EDo=l(),vd=a("p"),CDo=o(`Note:
Loading a model from its configuration file does `),C_e=a("strong"),wDo=o("not"),ADo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),yDo=o("from_pretrained()"),LDo=o(" to load the model weights."),xDo=l(),F(w2.$$.fragment),$Do=l(),eo=a("div"),F(M9.$$.fragment),kDo=l(),w_e=a("p"),SDo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),RDo=l(),Ja=a("p"),PDo=o("The model class to instantiate is selected based on the "),A_e=a("code"),BDo=o("model_type"),IDo=o(` property of the config object (either
passed as an argument or loaded from `),y_e=a("code"),NDo=o("pretrained_model_name_or_path"),qDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L_e=a("code"),jDo=o("pretrained_model_name_or_path"),DDo=o(":"),GDo=l(),U=a("ul"),A2=a("li"),x_e=a("strong"),ODo=o("albert"),VDo=o(" \u2014 "),ez=a("a"),XDo=o("AlbertForMaskedLM"),zDo=o(" (ALBERT model)"),QDo=l(),y2=a("li"),$_e=a("strong"),WDo=o("bart"),UDo=o(" \u2014 "),oz=a("a"),HDo=o("BartForConditionalGeneration"),JDo=o(" (BART model)"),YDo=l(),L2=a("li"),k_e=a("strong"),KDo=o("bert"),ZDo=o(" \u2014 "),rz=a("a"),eGo=o("BertForMaskedLM"),oGo=o(" (BERT model)"),rGo=l(),x2=a("li"),S_e=a("strong"),tGo=o("big_bird"),aGo=o(" \u2014 "),tz=a("a"),nGo=o("BigBirdForMaskedLM"),sGo=o(" (BigBird model)"),lGo=l(),$2=a("li"),R_e=a("strong"),iGo=o("camembert"),dGo=o(" \u2014 "),az=a("a"),cGo=o("CamembertForMaskedLM"),fGo=o(" (CamemBERT model)"),mGo=l(),k2=a("li"),P_e=a("strong"),gGo=o("convbert"),hGo=o(" \u2014 "),nz=a("a"),pGo=o("ConvBertForMaskedLM"),uGo=o(" (ConvBERT model)"),_Go=l(),S2=a("li"),B_e=a("strong"),bGo=o("data2vec-text"),vGo=o(" \u2014 "),sz=a("a"),FGo=o("Data2VecTextForMaskedLM"),TGo=o(" (Data2VecText model)"),MGo=l(),R2=a("li"),I_e=a("strong"),EGo=o("deberta"),CGo=o(" \u2014 "),lz=a("a"),wGo=o("DebertaForMaskedLM"),AGo=o(" (DeBERTa model)"),yGo=l(),P2=a("li"),N_e=a("strong"),LGo=o("deberta-v2"),xGo=o(" \u2014 "),iz=a("a"),$Go=o("DebertaV2ForMaskedLM"),kGo=o(" (DeBERTa-v2 model)"),SGo=l(),B2=a("li"),q_e=a("strong"),RGo=o("distilbert"),PGo=o(" \u2014 "),dz=a("a"),BGo=o("DistilBertForMaskedLM"),IGo=o(" (DistilBERT model)"),NGo=l(),I2=a("li"),j_e=a("strong"),qGo=o("electra"),jGo=o(" \u2014 "),cz=a("a"),DGo=o("ElectraForMaskedLM"),GGo=o(" (ELECTRA model)"),OGo=l(),N2=a("li"),D_e=a("strong"),VGo=o("flaubert"),XGo=o(" \u2014 "),fz=a("a"),zGo=o("FlaubertWithLMHeadModel"),QGo=o(" (FlauBERT model)"),WGo=l(),q2=a("li"),G_e=a("strong"),UGo=o("fnet"),HGo=o(" \u2014 "),mz=a("a"),JGo=o("FNetForMaskedLM"),YGo=o(" (FNet model)"),KGo=l(),j2=a("li"),O_e=a("strong"),ZGo=o("funnel"),eOo=o(" \u2014 "),gz=a("a"),oOo=o("FunnelForMaskedLM"),rOo=o(" (Funnel Transformer model)"),tOo=l(),D2=a("li"),V_e=a("strong"),aOo=o("ibert"),nOo=o(" \u2014 "),hz=a("a"),sOo=o("IBertForMaskedLM"),lOo=o(" (I-BERT model)"),iOo=l(),G2=a("li"),X_e=a("strong"),dOo=o("layoutlm"),cOo=o(" \u2014 "),pz=a("a"),fOo=o("LayoutLMForMaskedLM"),mOo=o(" (LayoutLM model)"),gOo=l(),O2=a("li"),z_e=a("strong"),hOo=o("longformer"),pOo=o(" \u2014 "),uz=a("a"),uOo=o("LongformerForMaskedLM"),_Oo=o(" (Longformer model)"),bOo=l(),V2=a("li"),Q_e=a("strong"),vOo=o("luke"),FOo=o(" \u2014 "),_z=a("a"),TOo=o("LukeForMaskedLM"),MOo=o(" (LUKE model)"),EOo=l(),X2=a("li"),W_e=a("strong"),COo=o("mbart"),wOo=o(" \u2014 "),bz=a("a"),AOo=o("MBartForConditionalGeneration"),yOo=o(" (mBART model)"),LOo=l(),z2=a("li"),U_e=a("strong"),xOo=o("megatron-bert"),$Oo=o(" \u2014 "),vz=a("a"),kOo=o("MegatronBertForMaskedLM"),SOo=o(" (Megatron-BERT model)"),ROo=l(),Q2=a("li"),H_e=a("strong"),POo=o("mobilebert"),BOo=o(" \u2014 "),Fz=a("a"),IOo=o("MobileBertForMaskedLM"),NOo=o(" (MobileBERT model)"),qOo=l(),W2=a("li"),J_e=a("strong"),jOo=o("mpnet"),DOo=o(" \u2014 "),Tz=a("a"),GOo=o("MPNetForMaskedLM"),OOo=o(" (MPNet model)"),VOo=l(),U2=a("li"),Y_e=a("strong"),XOo=o("mvp"),zOo=o(" \u2014 "),Mz=a("a"),QOo=o("MvpForConditionalGeneration"),WOo=o(" (MVP model)"),UOo=l(),H2=a("li"),K_e=a("strong"),HOo=o("nezha"),JOo=o(" \u2014 "),Ez=a("a"),YOo=o("NezhaForMaskedLM"),KOo=o(" (Nezha model)"),ZOo=l(),J2=a("li"),Z_e=a("strong"),eVo=o("nystromformer"),oVo=o(" \u2014 "),Cz=a("a"),rVo=o("NystromformerForMaskedLM"),tVo=o(" (Nystr\xF6mformer model)"),aVo=l(),Y2=a("li"),e1e=a("strong"),nVo=o("perceiver"),sVo=o(" \u2014 "),wz=a("a"),lVo=o("PerceiverForMaskedLM"),iVo=o(" (Perceiver model)"),dVo=l(),K2=a("li"),o1e=a("strong"),cVo=o("qdqbert"),fVo=o(" \u2014 "),Az=a("a"),mVo=o("QDQBertForMaskedLM"),gVo=o(" (QDQBert model)"),hVo=l(),Z2=a("li"),r1e=a("strong"),pVo=o("reformer"),uVo=o(" \u2014 "),yz=a("a"),_Vo=o("ReformerForMaskedLM"),bVo=o(" (Reformer model)"),vVo=l(),eb=a("li"),t1e=a("strong"),FVo=o("rembert"),TVo=o(" \u2014 "),Lz=a("a"),MVo=o("RemBertForMaskedLM"),EVo=o(" (RemBERT model)"),CVo=l(),ob=a("li"),a1e=a("strong"),wVo=o("roberta"),AVo=o(" \u2014 "),xz=a("a"),yVo=o("RobertaForMaskedLM"),LVo=o(" (RoBERTa model)"),xVo=l(),rb=a("li"),n1e=a("strong"),$Vo=o("roformer"),kVo=o(" \u2014 "),$z=a("a"),SVo=o("RoFormerForMaskedLM"),RVo=o(" (RoFormer model)"),PVo=l(),tb=a("li"),s1e=a("strong"),BVo=o("squeezebert"),IVo=o(" \u2014 "),kz=a("a"),NVo=o("SqueezeBertForMaskedLM"),qVo=o(" (SqueezeBERT model)"),jVo=l(),ab=a("li"),l1e=a("strong"),DVo=o("tapas"),GVo=o(" \u2014 "),Sz=a("a"),OVo=o("TapasForMaskedLM"),VVo=o(" (TAPAS model)"),XVo=l(),nb=a("li"),i1e=a("strong"),zVo=o("wav2vec2"),QVo=o(" \u2014 "),d1e=a("code"),WVo=o("Wav2Vec2ForMaskedLM"),UVo=o(" (Wav2Vec2 model)"),HVo=l(),sb=a("li"),c1e=a("strong"),JVo=o("xlm"),YVo=o(" \u2014 "),Rz=a("a"),KVo=o("XLMWithLMHeadModel"),ZVo=o(" (XLM model)"),eXo=l(),lb=a("li"),f1e=a("strong"),oXo=o("xlm-roberta"),rXo=o(" \u2014 "),Pz=a("a"),tXo=o("XLMRobertaForMaskedLM"),aXo=o(" (XLM-RoBERTa model)"),nXo=l(),ib=a("li"),m1e=a("strong"),sXo=o("xlm-roberta-xl"),lXo=o(" \u2014 "),Bz=a("a"),iXo=o("XLMRobertaXLForMaskedLM"),dXo=o(" (XLM-RoBERTa-XL model)"),cXo=l(),db=a("li"),g1e=a("strong"),fXo=o("yoso"),mXo=o(" \u2014 "),Iz=a("a"),gXo=o("YosoForMaskedLM"),hXo=o(" (YOSO model)"),pXo=l(),cb=a("p"),uXo=o("The model is set in evaluation mode by default using "),h1e=a("code"),_Xo=o("model.eval()"),bXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p1e=a("code"),vXo=o("model.train()"),FXo=l(),F(fb.$$.fragment),eHe=l(),Fd=a("h2"),mb=a("a"),u1e=a("span"),F(E9.$$.fragment),TXo=l(),_1e=a("span"),MXo=o("AutoModelForSeq2SeqLM"),oHe=l(),No=a("div"),F(C9.$$.fragment),EXo=l(),Td=a("p"),CXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Nz=a("a"),wXo=o("from_pretrained()"),AXo=o(" class method or the "),qz=a("a"),yXo=o("from_config()"),LXo=o(` class
method.`),xXo=l(),w9=a("p"),$Xo=o("This class cannot be instantiated directly using "),b1e=a("code"),kXo=o("__init__()"),SXo=o(" (throws an error)."),RXo=l(),bt=a("div"),F(A9.$$.fragment),PXo=l(),v1e=a("p"),BXo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),IXo=l(),Md=a("p"),NXo=o(`Note:
Loading a model from its configuration file does `),F1e=a("strong"),qXo=o("not"),jXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=a("a"),DXo=o("from_pretrained()"),GXo=o(" to load the model weights."),OXo=l(),F(gb.$$.fragment),VXo=l(),oo=a("div"),F(y9.$$.fragment),XXo=l(),T1e=a("p"),zXo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),QXo=l(),Ya=a("p"),WXo=o("The model class to instantiate is selected based on the "),M1e=a("code"),UXo=o("model_type"),HXo=o(` property of the config object (either
passed as an argument or loaded from `),E1e=a("code"),JXo=o("pretrained_model_name_or_path"),YXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=a("code"),KXo=o("pretrained_model_name_or_path"),ZXo=o(":"),ezo=l(),me=a("ul"),hb=a("li"),w1e=a("strong"),ozo=o("bart"),rzo=o(" \u2014 "),Dz=a("a"),tzo=o("BartForConditionalGeneration"),azo=o(" (BART model)"),nzo=l(),pb=a("li"),A1e=a("strong"),szo=o("bigbird_pegasus"),lzo=o(" \u2014 "),Gz=a("a"),izo=o("BigBirdPegasusForConditionalGeneration"),dzo=o(" (BigBird-Pegasus model)"),czo=l(),ub=a("li"),y1e=a("strong"),fzo=o("blenderbot"),mzo=o(" \u2014 "),Oz=a("a"),gzo=o("BlenderbotForConditionalGeneration"),hzo=o(" (Blenderbot model)"),pzo=l(),_b=a("li"),L1e=a("strong"),uzo=o("blenderbot-small"),_zo=o(" \u2014 "),Vz=a("a"),bzo=o("BlenderbotSmallForConditionalGeneration"),vzo=o(" (BlenderbotSmall model)"),Fzo=l(),bb=a("li"),x1e=a("strong"),Tzo=o("encoder-decoder"),Mzo=o(" \u2014 "),Xz=a("a"),Ezo=o("EncoderDecoderModel"),Czo=o(" (Encoder decoder model)"),wzo=l(),vb=a("li"),$1e=a("strong"),Azo=o("fsmt"),yzo=o(" \u2014 "),zz=a("a"),Lzo=o("FSMTForConditionalGeneration"),xzo=o(" (FairSeq Machine-Translation model)"),$zo=l(),Fb=a("li"),k1e=a("strong"),kzo=o("led"),Szo=o(" \u2014 "),Qz=a("a"),Rzo=o("LEDForConditionalGeneration"),Pzo=o(" (LED model)"),Bzo=l(),Tb=a("li"),S1e=a("strong"),Izo=o("longt5"),Nzo=o(" \u2014 "),Wz=a("a"),qzo=o("LongT5ForConditionalGeneration"),jzo=o(" (LongT5 model)"),Dzo=l(),Mb=a("li"),R1e=a("strong"),Gzo=o("m2m_100"),Ozo=o(" \u2014 "),Uz=a("a"),Vzo=o("M2M100ForConditionalGeneration"),Xzo=o(" (M2M100 model)"),zzo=l(),Eb=a("li"),P1e=a("strong"),Qzo=o("marian"),Wzo=o(" \u2014 "),Hz=a("a"),Uzo=o("MarianMTModel"),Hzo=o(" (Marian model)"),Jzo=l(),Cb=a("li"),B1e=a("strong"),Yzo=o("mbart"),Kzo=o(" \u2014 "),Jz=a("a"),Zzo=o("MBartForConditionalGeneration"),eQo=o(" (mBART model)"),oQo=l(),wb=a("li"),I1e=a("strong"),rQo=o("mt5"),tQo=o(" \u2014 "),Yz=a("a"),aQo=o("MT5ForConditionalGeneration"),nQo=o(" (MT5 model)"),sQo=l(),Ab=a("li"),N1e=a("strong"),lQo=o("mvp"),iQo=o(" \u2014 "),Kz=a("a"),dQo=o("MvpForConditionalGeneration"),cQo=o(" (MVP model)"),fQo=l(),yb=a("li"),q1e=a("strong"),mQo=o("nllb"),gQo=o(" \u2014 "),Zz=a("a"),hQo=o("M2M100ForConditionalGeneration"),pQo=o(" (NLLB model)"),uQo=l(),Lb=a("li"),j1e=a("strong"),_Qo=o("pegasus"),bQo=o(" \u2014 "),eQ=a("a"),vQo=o("PegasusForConditionalGeneration"),FQo=o(" (Pegasus model)"),TQo=l(),xb=a("li"),D1e=a("strong"),MQo=o("plbart"),EQo=o(" \u2014 "),oQ=a("a"),CQo=o("PLBartForConditionalGeneration"),wQo=o(" (PLBart model)"),AQo=l(),$b=a("li"),G1e=a("strong"),yQo=o("prophetnet"),LQo=o(" \u2014 "),rQ=a("a"),xQo=o("ProphetNetForConditionalGeneration"),$Qo=o(" (ProphetNet model)"),kQo=l(),kb=a("li"),O1e=a("strong"),SQo=o("t5"),RQo=o(" \u2014 "),tQ=a("a"),PQo=o("T5ForConditionalGeneration"),BQo=o(" (T5 model)"),IQo=l(),Sb=a("li"),V1e=a("strong"),NQo=o("xlm-prophetnet"),qQo=o(" \u2014 "),aQ=a("a"),jQo=o("XLMProphetNetForConditionalGeneration"),DQo=o(" (XLM-ProphetNet model)"),GQo=l(),Rb=a("p"),OQo=o("The model is set in evaluation mode by default using "),X1e=a("code"),VQo=o("model.eval()"),XQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=a("code"),zQo=o("model.train()"),QQo=l(),F(Pb.$$.fragment),rHe=l(),Ed=a("h2"),Bb=a("a"),Q1e=a("span"),F(L9.$$.fragment),WQo=l(),W1e=a("span"),UQo=o("AutoModelForSequenceClassification"),tHe=l(),qo=a("div"),F(x9.$$.fragment),HQo=l(),Cd=a("p"),JQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nQ=a("a"),YQo=o("from_pretrained()"),KQo=o(" class method or the "),sQ=a("a"),ZQo=o("from_config()"),eWo=o(` class
method.`),oWo=l(),$9=a("p"),rWo=o("This class cannot be instantiated directly using "),U1e=a("code"),tWo=o("__init__()"),aWo=o(" (throws an error)."),nWo=l(),vt=a("div"),F(k9.$$.fragment),sWo=l(),H1e=a("p"),lWo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iWo=l(),wd=a("p"),dWo=o(`Note:
Loading a model from its configuration file does `),J1e=a("strong"),cWo=o("not"),fWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=a("a"),mWo=o("from_pretrained()"),gWo=o(" to load the model weights."),hWo=l(),F(Ib.$$.fragment),pWo=l(),ro=a("div"),F(S9.$$.fragment),uWo=l(),Y1e=a("p"),_Wo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),bWo=l(),Ka=a("p"),vWo=o("The model class to instantiate is selected based on the "),K1e=a("code"),FWo=o("model_type"),TWo=o(` property of the config object (either
passed as an argument or loaded from `),Z1e=a("code"),MWo=o("pretrained_model_name_or_path"),EWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e4e=a("code"),CWo=o("pretrained_model_name_or_path"),wWo=o(":"),AWo=l(),N=a("ul"),Nb=a("li"),o4e=a("strong"),yWo=o("albert"),LWo=o(" \u2014 "),iQ=a("a"),xWo=o("AlbertForSequenceClassification"),$Wo=o(" (ALBERT model)"),kWo=l(),qb=a("li"),r4e=a("strong"),SWo=o("bart"),RWo=o(" \u2014 "),dQ=a("a"),PWo=o("BartForSequenceClassification"),BWo=o(" (BART model)"),IWo=l(),jb=a("li"),t4e=a("strong"),NWo=o("bert"),qWo=o(" \u2014 "),cQ=a("a"),jWo=o("BertForSequenceClassification"),DWo=o(" (BERT model)"),GWo=l(),Db=a("li"),a4e=a("strong"),OWo=o("big_bird"),VWo=o(" \u2014 "),fQ=a("a"),XWo=o("BigBirdForSequenceClassification"),zWo=o(" (BigBird model)"),QWo=l(),Gb=a("li"),n4e=a("strong"),WWo=o("bigbird_pegasus"),UWo=o(" \u2014 "),mQ=a("a"),HWo=o("BigBirdPegasusForSequenceClassification"),JWo=o(" (BigBird-Pegasus model)"),YWo=l(),Ob=a("li"),s4e=a("strong"),KWo=o("bloom"),ZWo=o(" \u2014 "),gQ=a("a"),eUo=o("BloomForSequenceClassification"),oUo=o(" (BLOOM model)"),rUo=l(),Vb=a("li"),l4e=a("strong"),tUo=o("camembert"),aUo=o(" \u2014 "),hQ=a("a"),nUo=o("CamembertForSequenceClassification"),sUo=o(" (CamemBERT model)"),lUo=l(),Xb=a("li"),i4e=a("strong"),iUo=o("canine"),dUo=o(" \u2014 "),pQ=a("a"),cUo=o("CanineForSequenceClassification"),fUo=o(" (CANINE model)"),mUo=l(),zb=a("li"),d4e=a("strong"),gUo=o("convbert"),hUo=o(" \u2014 "),uQ=a("a"),pUo=o("ConvBertForSequenceClassification"),uUo=o(" (ConvBERT model)"),_Uo=l(),Qb=a("li"),c4e=a("strong"),bUo=o("ctrl"),vUo=o(" \u2014 "),_Q=a("a"),FUo=o("CTRLForSequenceClassification"),TUo=o(" (CTRL model)"),MUo=l(),Wb=a("li"),f4e=a("strong"),EUo=o("data2vec-text"),CUo=o(" \u2014 "),bQ=a("a"),wUo=o("Data2VecTextForSequenceClassification"),AUo=o(" (Data2VecText model)"),yUo=l(),Ub=a("li"),m4e=a("strong"),LUo=o("deberta"),xUo=o(" \u2014 "),vQ=a("a"),$Uo=o("DebertaForSequenceClassification"),kUo=o(" (DeBERTa model)"),SUo=l(),Hb=a("li"),g4e=a("strong"),RUo=o("deberta-v2"),PUo=o(" \u2014 "),FQ=a("a"),BUo=o("DebertaV2ForSequenceClassification"),IUo=o(" (DeBERTa-v2 model)"),NUo=l(),Jb=a("li"),h4e=a("strong"),qUo=o("distilbert"),jUo=o(" \u2014 "),TQ=a("a"),DUo=o("DistilBertForSequenceClassification"),GUo=o(" (DistilBERT model)"),OUo=l(),Yb=a("li"),p4e=a("strong"),VUo=o("electra"),XUo=o(" \u2014 "),MQ=a("a"),zUo=o("ElectraForSequenceClassification"),QUo=o(" (ELECTRA model)"),WUo=l(),Kb=a("li"),u4e=a("strong"),UUo=o("flaubert"),HUo=o(" \u2014 "),EQ=a("a"),JUo=o("FlaubertForSequenceClassification"),YUo=o(" (FlauBERT model)"),KUo=l(),Zb=a("li"),_4e=a("strong"),ZUo=o("fnet"),eHo=o(" \u2014 "),CQ=a("a"),oHo=o("FNetForSequenceClassification"),rHo=o(" (FNet model)"),tHo=l(),ev=a("li"),b4e=a("strong"),aHo=o("funnel"),nHo=o(" \u2014 "),wQ=a("a"),sHo=o("FunnelForSequenceClassification"),lHo=o(" (Funnel Transformer model)"),iHo=l(),ov=a("li"),v4e=a("strong"),dHo=o("gpt2"),cHo=o(" \u2014 "),AQ=a("a"),fHo=o("GPT2ForSequenceClassification"),mHo=o(" (OpenAI GPT-2 model)"),gHo=l(),rv=a("li"),F4e=a("strong"),hHo=o("gpt_neo"),pHo=o(" \u2014 "),yQ=a("a"),uHo=o("GPTNeoForSequenceClassification"),_Ho=o(" (GPT Neo model)"),bHo=l(),tv=a("li"),T4e=a("strong"),vHo=o("gptj"),FHo=o(" \u2014 "),LQ=a("a"),THo=o("GPTJForSequenceClassification"),MHo=o(" (GPT-J model)"),EHo=l(),av=a("li"),M4e=a("strong"),CHo=o("ibert"),wHo=o(" \u2014 "),xQ=a("a"),AHo=o("IBertForSequenceClassification"),yHo=o(" (I-BERT model)"),LHo=l(),nv=a("li"),E4e=a("strong"),xHo=o("layoutlm"),$Ho=o(" \u2014 "),$Q=a("a"),kHo=o("LayoutLMForSequenceClassification"),SHo=o(" (LayoutLM model)"),RHo=l(),sv=a("li"),C4e=a("strong"),PHo=o("layoutlmv2"),BHo=o(" \u2014 "),kQ=a("a"),IHo=o("LayoutLMv2ForSequenceClassification"),NHo=o(" (LayoutLMv2 model)"),qHo=l(),lv=a("li"),w4e=a("strong"),jHo=o("layoutlmv3"),DHo=o(" \u2014 "),SQ=a("a"),GHo=o("LayoutLMv3ForSequenceClassification"),OHo=o(" (LayoutLMv3 model)"),VHo=l(),iv=a("li"),A4e=a("strong"),XHo=o("led"),zHo=o(" \u2014 "),RQ=a("a"),QHo=o("LEDForSequenceClassification"),WHo=o(" (LED model)"),UHo=l(),dv=a("li"),y4e=a("strong"),HHo=o("longformer"),JHo=o(" \u2014 "),PQ=a("a"),YHo=o("LongformerForSequenceClassification"),KHo=o(" (Longformer model)"),ZHo=l(),cv=a("li"),L4e=a("strong"),eJo=o("luke"),oJo=o(" \u2014 "),BQ=a("a"),rJo=o("LukeForSequenceClassification"),tJo=o(" (LUKE model)"),aJo=l(),fv=a("li"),x4e=a("strong"),nJo=o("mbart"),sJo=o(" \u2014 "),IQ=a("a"),lJo=o("MBartForSequenceClassification"),iJo=o(" (mBART model)"),dJo=l(),mv=a("li"),$4e=a("strong"),cJo=o("megatron-bert"),fJo=o(" \u2014 "),NQ=a("a"),mJo=o("MegatronBertForSequenceClassification"),gJo=o(" (Megatron-BERT model)"),hJo=l(),gv=a("li"),k4e=a("strong"),pJo=o("mobilebert"),uJo=o(" \u2014 "),qQ=a("a"),_Jo=o("MobileBertForSequenceClassification"),bJo=o(" (MobileBERT model)"),vJo=l(),hv=a("li"),S4e=a("strong"),FJo=o("mpnet"),TJo=o(" \u2014 "),jQ=a("a"),MJo=o("MPNetForSequenceClassification"),EJo=o(" (MPNet model)"),CJo=l(),pv=a("li"),R4e=a("strong"),wJo=o("mvp"),AJo=o(" \u2014 "),DQ=a("a"),yJo=o("MvpForSequenceClassification"),LJo=o(" (MVP model)"),xJo=l(),uv=a("li"),P4e=a("strong"),$Jo=o("nezha"),kJo=o(" \u2014 "),GQ=a("a"),SJo=o("NezhaForSequenceClassification"),RJo=o(" (Nezha model)"),PJo=l(),_v=a("li"),B4e=a("strong"),BJo=o("nystromformer"),IJo=o(" \u2014 "),OQ=a("a"),NJo=o("NystromformerForSequenceClassification"),qJo=o(" (Nystr\xF6mformer model)"),jJo=l(),bv=a("li"),I4e=a("strong"),DJo=o("openai-gpt"),GJo=o(" \u2014 "),VQ=a("a"),OJo=o("OpenAIGPTForSequenceClassification"),VJo=o(" (OpenAI GPT model)"),XJo=l(),vv=a("li"),N4e=a("strong"),zJo=o("opt"),QJo=o(" \u2014 "),XQ=a("a"),WJo=o("OPTForSequenceClassification"),UJo=o(" (OPT model)"),HJo=l(),Fv=a("li"),q4e=a("strong"),JJo=o("perceiver"),YJo=o(" \u2014 "),zQ=a("a"),KJo=o("PerceiverForSequenceClassification"),ZJo=o(" (Perceiver model)"),eYo=l(),Tv=a("li"),j4e=a("strong"),oYo=o("plbart"),rYo=o(" \u2014 "),QQ=a("a"),tYo=o("PLBartForSequenceClassification"),aYo=o(" (PLBart model)"),nYo=l(),Mv=a("li"),D4e=a("strong"),sYo=o("qdqbert"),lYo=o(" \u2014 "),WQ=a("a"),iYo=o("QDQBertForSequenceClassification"),dYo=o(" (QDQBert model)"),cYo=l(),Ev=a("li"),G4e=a("strong"),fYo=o("reformer"),mYo=o(" \u2014 "),UQ=a("a"),gYo=o("ReformerForSequenceClassification"),hYo=o(" (Reformer model)"),pYo=l(),Cv=a("li"),O4e=a("strong"),uYo=o("rembert"),_Yo=o(" \u2014 "),HQ=a("a"),bYo=o("RemBertForSequenceClassification"),vYo=o(" (RemBERT model)"),FYo=l(),wv=a("li"),V4e=a("strong"),TYo=o("roberta"),MYo=o(" \u2014 "),JQ=a("a"),EYo=o("RobertaForSequenceClassification"),CYo=o(" (RoBERTa model)"),wYo=l(),Av=a("li"),X4e=a("strong"),AYo=o("roformer"),yYo=o(" \u2014 "),YQ=a("a"),LYo=o("RoFormerForSequenceClassification"),xYo=o(" (RoFormer model)"),$Yo=l(),yv=a("li"),z4e=a("strong"),kYo=o("squeezebert"),SYo=o(" \u2014 "),KQ=a("a"),RYo=o("SqueezeBertForSequenceClassification"),PYo=o(" (SqueezeBERT model)"),BYo=l(),Lv=a("li"),Q4e=a("strong"),IYo=o("tapas"),NYo=o(" \u2014 "),ZQ=a("a"),qYo=o("TapasForSequenceClassification"),jYo=o(" (TAPAS model)"),DYo=l(),xv=a("li"),W4e=a("strong"),GYo=o("transfo-xl"),OYo=o(" \u2014 "),eW=a("a"),VYo=o("TransfoXLForSequenceClassification"),XYo=o(" (Transformer-XL model)"),zYo=l(),$v=a("li"),U4e=a("strong"),QYo=o("xlm"),WYo=o(" \u2014 "),oW=a("a"),UYo=o("XLMForSequenceClassification"),HYo=o(" (XLM model)"),JYo=l(),kv=a("li"),H4e=a("strong"),YYo=o("xlm-roberta"),KYo=o(" \u2014 "),rW=a("a"),ZYo=o("XLMRobertaForSequenceClassification"),eKo=o(" (XLM-RoBERTa model)"),oKo=l(),Sv=a("li"),J4e=a("strong"),rKo=o("xlm-roberta-xl"),tKo=o(" \u2014 "),tW=a("a"),aKo=o("XLMRobertaXLForSequenceClassification"),nKo=o(" (XLM-RoBERTa-XL model)"),sKo=l(),Rv=a("li"),Y4e=a("strong"),lKo=o("xlnet"),iKo=o(" \u2014 "),aW=a("a"),dKo=o("XLNetForSequenceClassification"),cKo=o(" (XLNet model)"),fKo=l(),Pv=a("li"),K4e=a("strong"),mKo=o("yoso"),gKo=o(" \u2014 "),nW=a("a"),hKo=o("YosoForSequenceClassification"),pKo=o(" (YOSO model)"),uKo=l(),Bv=a("p"),_Ko=o("The model is set in evaluation mode by default using "),Z4e=a("code"),bKo=o("model.eval()"),vKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e2e=a("code"),FKo=o("model.train()"),TKo=l(),F(Iv.$$.fragment),aHe=l(),Ad=a("h2"),Nv=a("a"),o2e=a("span"),F(R9.$$.fragment),MKo=l(),r2e=a("span"),EKo=o("AutoModelForMultipleChoice"),nHe=l(),jo=a("div"),F(P9.$$.fragment),CKo=l(),yd=a("p"),wKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sW=a("a"),AKo=o("from_pretrained()"),yKo=o(" class method or the "),lW=a("a"),LKo=o("from_config()"),xKo=o(` class
method.`),$Ko=l(),B9=a("p"),kKo=o("This class cannot be instantiated directly using "),t2e=a("code"),SKo=o("__init__()"),RKo=o(" (throws an error)."),PKo=l(),Ft=a("div"),F(I9.$$.fragment),BKo=l(),a2e=a("p"),IKo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),NKo=l(),Ld=a("p"),qKo=o(`Note:
Loading a model from its configuration file does `),n2e=a("strong"),jKo=o("not"),DKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=a("a"),GKo=o("from_pretrained()"),OKo=o(" to load the model weights."),VKo=l(),F(qv.$$.fragment),XKo=l(),to=a("div"),F(N9.$$.fragment),zKo=l(),s2e=a("p"),QKo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),WKo=l(),Za=a("p"),UKo=o("The model class to instantiate is selected based on the "),l2e=a("code"),HKo=o("model_type"),JKo=o(` property of the config object (either
passed as an argument or loaded from `),i2e=a("code"),YKo=o("pretrained_model_name_or_path"),KKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=a("code"),ZKo=o("pretrained_model_name_or_path"),eZo=o(":"),oZo=l(),Z=a("ul"),jv=a("li"),c2e=a("strong"),rZo=o("albert"),tZo=o(" \u2014 "),dW=a("a"),aZo=o("AlbertForMultipleChoice"),nZo=o(" (ALBERT model)"),sZo=l(),Dv=a("li"),f2e=a("strong"),lZo=o("bert"),iZo=o(" \u2014 "),cW=a("a"),dZo=o("BertForMultipleChoice"),cZo=o(" (BERT model)"),fZo=l(),Gv=a("li"),m2e=a("strong"),mZo=o("big_bird"),gZo=o(" \u2014 "),fW=a("a"),hZo=o("BigBirdForMultipleChoice"),pZo=o(" (BigBird model)"),uZo=l(),Ov=a("li"),g2e=a("strong"),_Zo=o("camembert"),bZo=o(" \u2014 "),mW=a("a"),vZo=o("CamembertForMultipleChoice"),FZo=o(" (CamemBERT model)"),TZo=l(),Vv=a("li"),h2e=a("strong"),MZo=o("canine"),EZo=o(" \u2014 "),gW=a("a"),CZo=o("CanineForMultipleChoice"),wZo=o(" (CANINE model)"),AZo=l(),Xv=a("li"),p2e=a("strong"),yZo=o("convbert"),LZo=o(" \u2014 "),hW=a("a"),xZo=o("ConvBertForMultipleChoice"),$Zo=o(" (ConvBERT model)"),kZo=l(),zv=a("li"),u2e=a("strong"),SZo=o("data2vec-text"),RZo=o(" \u2014 "),pW=a("a"),PZo=o("Data2VecTextForMultipleChoice"),BZo=o(" (Data2VecText model)"),IZo=l(),Qv=a("li"),_2e=a("strong"),NZo=o("deberta-v2"),qZo=o(" \u2014 "),uW=a("a"),jZo=o("DebertaV2ForMultipleChoice"),DZo=o(" (DeBERTa-v2 model)"),GZo=l(),Wv=a("li"),b2e=a("strong"),OZo=o("distilbert"),VZo=o(" \u2014 "),_W=a("a"),XZo=o("DistilBertForMultipleChoice"),zZo=o(" (DistilBERT model)"),QZo=l(),Uv=a("li"),v2e=a("strong"),WZo=o("electra"),UZo=o(" \u2014 "),bW=a("a"),HZo=o("ElectraForMultipleChoice"),JZo=o(" (ELECTRA model)"),YZo=l(),Hv=a("li"),F2e=a("strong"),KZo=o("flaubert"),ZZo=o(" \u2014 "),vW=a("a"),eer=o("FlaubertForMultipleChoice"),oer=o(" (FlauBERT model)"),rer=l(),Jv=a("li"),T2e=a("strong"),ter=o("fnet"),aer=o(" \u2014 "),FW=a("a"),ner=o("FNetForMultipleChoice"),ser=o(" (FNet model)"),ler=l(),Yv=a("li"),M2e=a("strong"),ier=o("funnel"),der=o(" \u2014 "),TW=a("a"),cer=o("FunnelForMultipleChoice"),fer=o(" (Funnel Transformer model)"),mer=l(),Kv=a("li"),E2e=a("strong"),ger=o("ibert"),her=o(" \u2014 "),MW=a("a"),per=o("IBertForMultipleChoice"),uer=o(" (I-BERT model)"),_er=l(),Zv=a("li"),C2e=a("strong"),ber=o("longformer"),ver=o(" \u2014 "),EW=a("a"),Fer=o("LongformerForMultipleChoice"),Ter=o(" (Longformer model)"),Mer=l(),eF=a("li"),w2e=a("strong"),Eer=o("luke"),Cer=o(" \u2014 "),CW=a("a"),wer=o("LukeForMultipleChoice"),Aer=o(" (LUKE model)"),yer=l(),oF=a("li"),A2e=a("strong"),Ler=o("megatron-bert"),xer=o(" \u2014 "),wW=a("a"),$er=o("MegatronBertForMultipleChoice"),ker=o(" (Megatron-BERT model)"),Ser=l(),rF=a("li"),y2e=a("strong"),Rer=o("mobilebert"),Per=o(" \u2014 "),AW=a("a"),Ber=o("MobileBertForMultipleChoice"),Ier=o(" (MobileBERT model)"),Ner=l(),tF=a("li"),L2e=a("strong"),qer=o("mpnet"),jer=o(" \u2014 "),yW=a("a"),Der=o("MPNetForMultipleChoice"),Ger=o(" (MPNet model)"),Oer=l(),aF=a("li"),x2e=a("strong"),Ver=o("nezha"),Xer=o(" \u2014 "),LW=a("a"),zer=o("NezhaForMultipleChoice"),Qer=o(" (Nezha model)"),Wer=l(),nF=a("li"),$2e=a("strong"),Uer=o("nystromformer"),Her=o(" \u2014 "),xW=a("a"),Jer=o("NystromformerForMultipleChoice"),Yer=o(" (Nystr\xF6mformer model)"),Ker=l(),sF=a("li"),k2e=a("strong"),Zer=o("qdqbert"),eor=o(" \u2014 "),$W=a("a"),oor=o("QDQBertForMultipleChoice"),ror=o(" (QDQBert model)"),tor=l(),lF=a("li"),S2e=a("strong"),aor=o("rembert"),nor=o(" \u2014 "),kW=a("a"),sor=o("RemBertForMultipleChoice"),lor=o(" (RemBERT model)"),ior=l(),iF=a("li"),R2e=a("strong"),dor=o("roberta"),cor=o(" \u2014 "),SW=a("a"),mor=o("RobertaForMultipleChoice"),gor=o(" (RoBERTa model)"),hor=l(),dF=a("li"),P2e=a("strong"),por=o("roformer"),uor=o(" \u2014 "),RW=a("a"),_or=o("RoFormerForMultipleChoice"),bor=o(" (RoFormer model)"),vor=l(),cF=a("li"),B2e=a("strong"),For=o("squeezebert"),Tor=o(" \u2014 "),PW=a("a"),Mor=o("SqueezeBertForMultipleChoice"),Eor=o(" (SqueezeBERT model)"),Cor=l(),fF=a("li"),I2e=a("strong"),wor=o("xlm"),Aor=o(" \u2014 "),BW=a("a"),yor=o("XLMForMultipleChoice"),Lor=o(" (XLM model)"),xor=l(),mF=a("li"),N2e=a("strong"),$or=o("xlm-roberta"),kor=o(" \u2014 "),IW=a("a"),Sor=o("XLMRobertaForMultipleChoice"),Ror=o(" (XLM-RoBERTa model)"),Por=l(),gF=a("li"),q2e=a("strong"),Bor=o("xlm-roberta-xl"),Ior=o(" \u2014 "),NW=a("a"),Nor=o("XLMRobertaXLForMultipleChoice"),qor=o(" (XLM-RoBERTa-XL model)"),jor=l(),hF=a("li"),j2e=a("strong"),Dor=o("xlnet"),Gor=o(" \u2014 "),qW=a("a"),Oor=o("XLNetForMultipleChoice"),Vor=o(" (XLNet model)"),Xor=l(),pF=a("li"),D2e=a("strong"),zor=o("yoso"),Qor=o(" \u2014 "),jW=a("a"),Wor=o("YosoForMultipleChoice"),Uor=o(" (YOSO model)"),Hor=l(),uF=a("p"),Jor=o("The model is set in evaluation mode by default using "),G2e=a("code"),Yor=o("model.eval()"),Kor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O2e=a("code"),Zor=o("model.train()"),err=l(),F(_F.$$.fragment),sHe=l(),xd=a("h2"),bF=a("a"),V2e=a("span"),F(q9.$$.fragment),orr=l(),X2e=a("span"),rrr=o("AutoModelForNextSentencePrediction"),lHe=l(),Do=a("div"),F(j9.$$.fragment),trr=l(),$d=a("p"),arr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),DW=a("a"),nrr=o("from_pretrained()"),srr=o(" class method or the "),GW=a("a"),lrr=o("from_config()"),irr=o(` class
method.`),drr=l(),D9=a("p"),crr=o("This class cannot be instantiated directly using "),z2e=a("code"),frr=o("__init__()"),mrr=o(" (throws an error)."),grr=l(),Tt=a("div"),F(G9.$$.fragment),hrr=l(),Q2e=a("p"),prr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),urr=l(),kd=a("p"),_rr=o(`Note:
Loading a model from its configuration file does `),W2e=a("strong"),brr=o("not"),vrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=a("a"),Frr=o("from_pretrained()"),Trr=o(" to load the model weights."),Mrr=l(),F(vF.$$.fragment),Err=l(),ao=a("div"),F(O9.$$.fragment),Crr=l(),U2e=a("p"),wrr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Arr=l(),en=a("p"),yrr=o("The model class to instantiate is selected based on the "),H2e=a("code"),Lrr=o("model_type"),xrr=o(` property of the config object (either
passed as an argument or loaded from `),J2e=a("code"),$rr=o("pretrained_model_name_or_path"),krr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=a("code"),Srr=o("pretrained_model_name_or_path"),Rrr=o(":"),Prr=l(),Go=a("ul"),FF=a("li"),K2e=a("strong"),Brr=o("bert"),Irr=o(" \u2014 "),VW=a("a"),Nrr=o("BertForNextSentencePrediction"),qrr=o(" (BERT model)"),jrr=l(),TF=a("li"),Z2e=a("strong"),Drr=o("fnet"),Grr=o(" \u2014 "),XW=a("a"),Orr=o("FNetForNextSentencePrediction"),Vrr=o(" (FNet model)"),Xrr=l(),MF=a("li"),ebe=a("strong"),zrr=o("megatron-bert"),Qrr=o(" \u2014 "),zW=a("a"),Wrr=o("MegatronBertForNextSentencePrediction"),Urr=o(" (Megatron-BERT model)"),Hrr=l(),EF=a("li"),obe=a("strong"),Jrr=o("mobilebert"),Yrr=o(" \u2014 "),QW=a("a"),Krr=o("MobileBertForNextSentencePrediction"),Zrr=o(" (MobileBERT model)"),etr=l(),CF=a("li"),rbe=a("strong"),otr=o("nezha"),rtr=o(" \u2014 "),WW=a("a"),ttr=o("NezhaForNextSentencePrediction"),atr=o(" (Nezha model)"),ntr=l(),wF=a("li"),tbe=a("strong"),str=o("qdqbert"),ltr=o(" \u2014 "),UW=a("a"),itr=o("QDQBertForNextSentencePrediction"),dtr=o(" (QDQBert model)"),ctr=l(),AF=a("p"),ftr=o("The model is set in evaluation mode by default using "),abe=a("code"),mtr=o("model.eval()"),gtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nbe=a("code"),htr=o("model.train()"),ptr=l(),F(yF.$$.fragment),iHe=l(),Sd=a("h2"),LF=a("a"),sbe=a("span"),F(V9.$$.fragment),utr=l(),lbe=a("span"),_tr=o("AutoModelForTokenClassification"),dHe=l(),Oo=a("div"),F(X9.$$.fragment),btr=l(),Rd=a("p"),vtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HW=a("a"),Ftr=o("from_pretrained()"),Ttr=o(" class method or the "),JW=a("a"),Mtr=o("from_config()"),Etr=o(` class
method.`),Ctr=l(),z9=a("p"),wtr=o("This class cannot be instantiated directly using "),ibe=a("code"),Atr=o("__init__()"),ytr=o(" (throws an error)."),Ltr=l(),Mt=a("div"),F(Q9.$$.fragment),xtr=l(),dbe=a("p"),$tr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ktr=l(),Pd=a("p"),Str=o(`Note:
Loading a model from its configuration file does `),cbe=a("strong"),Rtr=o("not"),Ptr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=a("a"),Btr=o("from_pretrained()"),Itr=o(" to load the model weights."),Ntr=l(),F(xF.$$.fragment),qtr=l(),no=a("div"),F(W9.$$.fragment),jtr=l(),fbe=a("p"),Dtr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Gtr=l(),on=a("p"),Otr=o("The model class to instantiate is selected based on the "),mbe=a("code"),Vtr=o("model_type"),Xtr=o(` property of the config object (either
passed as an argument or loaded from `),gbe=a("code"),ztr=o("pretrained_model_name_or_path"),Qtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=a("code"),Wtr=o("pretrained_model_name_or_path"),Utr=o(":"),Htr=l(),H=a("ul"),$F=a("li"),pbe=a("strong"),Jtr=o("albert"),Ytr=o(" \u2014 "),KW=a("a"),Ktr=o("AlbertForTokenClassification"),Ztr=o(" (ALBERT model)"),ear=l(),kF=a("li"),ube=a("strong"),oar=o("bert"),rar=o(" \u2014 "),ZW=a("a"),tar=o("BertForTokenClassification"),aar=o(" (BERT model)"),nar=l(),SF=a("li"),_be=a("strong"),sar=o("big_bird"),lar=o(" \u2014 "),eU=a("a"),iar=o("BigBirdForTokenClassification"),dar=o(" (BigBird model)"),car=l(),RF=a("li"),bbe=a("strong"),far=o("bloom"),mar=o(" \u2014 "),oU=a("a"),gar=o("BloomForTokenClassification"),har=o(" (BLOOM model)"),par=l(),PF=a("li"),vbe=a("strong"),uar=o("camembert"),_ar=o(" \u2014 "),rU=a("a"),bar=o("CamembertForTokenClassification"),Far=o(" (CamemBERT model)"),Tar=l(),BF=a("li"),Fbe=a("strong"),Mar=o("canine"),Ear=o(" \u2014 "),tU=a("a"),Car=o("CanineForTokenClassification"),war=o(" (CANINE model)"),Aar=l(),IF=a("li"),Tbe=a("strong"),yar=o("convbert"),Lar=o(" \u2014 "),aU=a("a"),xar=o("ConvBertForTokenClassification"),$ar=o(" (ConvBERT model)"),kar=l(),NF=a("li"),Mbe=a("strong"),Sar=o("data2vec-text"),Rar=o(" \u2014 "),nU=a("a"),Par=o("Data2VecTextForTokenClassification"),Bar=o(" (Data2VecText model)"),Iar=l(),qF=a("li"),Ebe=a("strong"),Nar=o("deberta"),qar=o(" \u2014 "),sU=a("a"),jar=o("DebertaForTokenClassification"),Dar=o(" (DeBERTa model)"),Gar=l(),jF=a("li"),Cbe=a("strong"),Oar=o("deberta-v2"),Var=o(" \u2014 "),lU=a("a"),Xar=o("DebertaV2ForTokenClassification"),zar=o(" (DeBERTa-v2 model)"),Qar=l(),DF=a("li"),wbe=a("strong"),War=o("distilbert"),Uar=o(" \u2014 "),iU=a("a"),Har=o("DistilBertForTokenClassification"),Jar=o(" (DistilBERT model)"),Yar=l(),GF=a("li"),Abe=a("strong"),Kar=o("electra"),Zar=o(" \u2014 "),dU=a("a"),enr=o("ElectraForTokenClassification"),onr=o(" (ELECTRA model)"),rnr=l(),OF=a("li"),ybe=a("strong"),tnr=o("flaubert"),anr=o(" \u2014 "),cU=a("a"),nnr=o("FlaubertForTokenClassification"),snr=o(" (FlauBERT model)"),lnr=l(),VF=a("li"),Lbe=a("strong"),inr=o("fnet"),dnr=o(" \u2014 "),fU=a("a"),cnr=o("FNetForTokenClassification"),fnr=o(" (FNet model)"),mnr=l(),XF=a("li"),xbe=a("strong"),gnr=o("funnel"),hnr=o(" \u2014 "),mU=a("a"),pnr=o("FunnelForTokenClassification"),unr=o(" (Funnel Transformer model)"),_nr=l(),zF=a("li"),$be=a("strong"),bnr=o("gpt2"),vnr=o(" \u2014 "),gU=a("a"),Fnr=o("GPT2ForTokenClassification"),Tnr=o(" (OpenAI GPT-2 model)"),Mnr=l(),QF=a("li"),kbe=a("strong"),Enr=o("ibert"),Cnr=o(" \u2014 "),hU=a("a"),wnr=o("IBertForTokenClassification"),Anr=o(" (I-BERT model)"),ynr=l(),WF=a("li"),Sbe=a("strong"),Lnr=o("layoutlm"),xnr=o(" \u2014 "),pU=a("a"),$nr=o("LayoutLMForTokenClassification"),knr=o(" (LayoutLM model)"),Snr=l(),UF=a("li"),Rbe=a("strong"),Rnr=o("layoutlmv2"),Pnr=o(" \u2014 "),uU=a("a"),Bnr=o("LayoutLMv2ForTokenClassification"),Inr=o(" (LayoutLMv2 model)"),Nnr=l(),HF=a("li"),Pbe=a("strong"),qnr=o("layoutlmv3"),jnr=o(" \u2014 "),_U=a("a"),Dnr=o("LayoutLMv3ForTokenClassification"),Gnr=o(" (LayoutLMv3 model)"),Onr=l(),JF=a("li"),Bbe=a("strong"),Vnr=o("longformer"),Xnr=o(" \u2014 "),bU=a("a"),znr=o("LongformerForTokenClassification"),Qnr=o(" (Longformer model)"),Wnr=l(),YF=a("li"),Ibe=a("strong"),Unr=o("luke"),Hnr=o(" \u2014 "),vU=a("a"),Jnr=o("LukeForTokenClassification"),Ynr=o(" (LUKE model)"),Knr=l(),KF=a("li"),Nbe=a("strong"),Znr=o("megatron-bert"),esr=o(" \u2014 "),FU=a("a"),osr=o("MegatronBertForTokenClassification"),rsr=o(" (Megatron-BERT model)"),tsr=l(),ZF=a("li"),qbe=a("strong"),asr=o("mobilebert"),nsr=o(" \u2014 "),TU=a("a"),ssr=o("MobileBertForTokenClassification"),lsr=o(" (MobileBERT model)"),isr=l(),eT=a("li"),jbe=a("strong"),dsr=o("mpnet"),csr=o(" \u2014 "),MU=a("a"),fsr=o("MPNetForTokenClassification"),msr=o(" (MPNet model)"),gsr=l(),oT=a("li"),Dbe=a("strong"),hsr=o("nezha"),psr=o(" \u2014 "),EU=a("a"),usr=o("NezhaForTokenClassification"),_sr=o(" (Nezha model)"),bsr=l(),rT=a("li"),Gbe=a("strong"),vsr=o("nystromformer"),Fsr=o(" \u2014 "),CU=a("a"),Tsr=o("NystromformerForTokenClassification"),Msr=o(" (Nystr\xF6mformer model)"),Esr=l(),tT=a("li"),Obe=a("strong"),Csr=o("qdqbert"),wsr=o(" \u2014 "),wU=a("a"),Asr=o("QDQBertForTokenClassification"),ysr=o(" (QDQBert model)"),Lsr=l(),aT=a("li"),Vbe=a("strong"),xsr=o("rembert"),$sr=o(" \u2014 "),AU=a("a"),ksr=o("RemBertForTokenClassification"),Ssr=o(" (RemBERT model)"),Rsr=l(),nT=a("li"),Xbe=a("strong"),Psr=o("roberta"),Bsr=o(" \u2014 "),yU=a("a"),Isr=o("RobertaForTokenClassification"),Nsr=o(" (RoBERTa model)"),qsr=l(),sT=a("li"),zbe=a("strong"),jsr=o("roformer"),Dsr=o(" \u2014 "),LU=a("a"),Gsr=o("RoFormerForTokenClassification"),Osr=o(" (RoFormer model)"),Vsr=l(),lT=a("li"),Qbe=a("strong"),Xsr=o("squeezebert"),zsr=o(" \u2014 "),xU=a("a"),Qsr=o("SqueezeBertForTokenClassification"),Wsr=o(" (SqueezeBERT model)"),Usr=l(),iT=a("li"),Wbe=a("strong"),Hsr=o("xlm"),Jsr=o(" \u2014 "),$U=a("a"),Ysr=o("XLMForTokenClassification"),Ksr=o(" (XLM model)"),Zsr=l(),dT=a("li"),Ube=a("strong"),elr=o("xlm-roberta"),olr=o(" \u2014 "),kU=a("a"),rlr=o("XLMRobertaForTokenClassification"),tlr=o(" (XLM-RoBERTa model)"),alr=l(),cT=a("li"),Hbe=a("strong"),nlr=o("xlm-roberta-xl"),slr=o(" \u2014 "),SU=a("a"),llr=o("XLMRobertaXLForTokenClassification"),ilr=o(" (XLM-RoBERTa-XL model)"),dlr=l(),fT=a("li"),Jbe=a("strong"),clr=o("xlnet"),flr=o(" \u2014 "),RU=a("a"),mlr=o("XLNetForTokenClassification"),glr=o(" (XLNet model)"),hlr=l(),mT=a("li"),Ybe=a("strong"),plr=o("yoso"),ulr=o(" \u2014 "),PU=a("a"),_lr=o("YosoForTokenClassification"),blr=o(" (YOSO model)"),vlr=l(),gT=a("p"),Flr=o("The model is set in evaluation mode by default using "),Kbe=a("code"),Tlr=o("model.eval()"),Mlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zbe=a("code"),Elr=o("model.train()"),Clr=l(),F(hT.$$.fragment),cHe=l(),Bd=a("h2"),pT=a("a"),eve=a("span"),F(U9.$$.fragment),wlr=l(),ove=a("span"),Alr=o("AutoModelForQuestionAnswering"),fHe=l(),Vo=a("div"),F(H9.$$.fragment),ylr=l(),Id=a("p"),Llr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BU=a("a"),xlr=o("from_pretrained()"),$lr=o(" class method or the "),IU=a("a"),klr=o("from_config()"),Slr=o(` class
method.`),Rlr=l(),J9=a("p"),Plr=o("This class cannot be instantiated directly using "),rve=a("code"),Blr=o("__init__()"),Ilr=o(" (throws an error)."),Nlr=l(),Et=a("div"),F(Y9.$$.fragment),qlr=l(),tve=a("p"),jlr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Dlr=l(),Nd=a("p"),Glr=o(`Note:
Loading a model from its configuration file does `),ave=a("strong"),Olr=o("not"),Vlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=a("a"),Xlr=o("from_pretrained()"),zlr=o(" to load the model weights."),Qlr=l(),F(uT.$$.fragment),Wlr=l(),so=a("div"),F(K9.$$.fragment),Ulr=l(),nve=a("p"),Hlr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Jlr=l(),rn=a("p"),Ylr=o("The model class to instantiate is selected based on the "),sve=a("code"),Klr=o("model_type"),Zlr=o(` property of the config object (either
passed as an argument or loaded from `),lve=a("code"),eir=o("pretrained_model_name_or_path"),oir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=a("code"),rir=o("pretrained_model_name_or_path"),tir=o(":"),air=l(),V=a("ul"),_T=a("li"),dve=a("strong"),nir=o("albert"),sir=o(" \u2014 "),qU=a("a"),lir=o("AlbertForQuestionAnswering"),iir=o(" (ALBERT model)"),dir=l(),bT=a("li"),cve=a("strong"),cir=o("bart"),fir=o(" \u2014 "),jU=a("a"),mir=o("BartForQuestionAnswering"),gir=o(" (BART model)"),hir=l(),vT=a("li"),fve=a("strong"),pir=o("bert"),uir=o(" \u2014 "),DU=a("a"),_ir=o("BertForQuestionAnswering"),bir=o(" (BERT model)"),vir=l(),FT=a("li"),mve=a("strong"),Fir=o("big_bird"),Tir=o(" \u2014 "),GU=a("a"),Mir=o("BigBirdForQuestionAnswering"),Eir=o(" (BigBird model)"),Cir=l(),TT=a("li"),gve=a("strong"),wir=o("bigbird_pegasus"),Air=o(" \u2014 "),OU=a("a"),yir=o("BigBirdPegasusForQuestionAnswering"),Lir=o(" (BigBird-Pegasus model)"),xir=l(),MT=a("li"),hve=a("strong"),$ir=o("camembert"),kir=o(" \u2014 "),VU=a("a"),Sir=o("CamembertForQuestionAnswering"),Rir=o(" (CamemBERT model)"),Pir=l(),ET=a("li"),pve=a("strong"),Bir=o("canine"),Iir=o(" \u2014 "),XU=a("a"),Nir=o("CanineForQuestionAnswering"),qir=o(" (CANINE model)"),jir=l(),CT=a("li"),uve=a("strong"),Dir=o("convbert"),Gir=o(" \u2014 "),zU=a("a"),Oir=o("ConvBertForQuestionAnswering"),Vir=o(" (ConvBERT model)"),Xir=l(),wT=a("li"),_ve=a("strong"),zir=o("data2vec-text"),Qir=o(" \u2014 "),QU=a("a"),Wir=o("Data2VecTextForQuestionAnswering"),Uir=o(" (Data2VecText model)"),Hir=l(),AT=a("li"),bve=a("strong"),Jir=o("deberta"),Yir=o(" \u2014 "),WU=a("a"),Kir=o("DebertaForQuestionAnswering"),Zir=o(" (DeBERTa model)"),edr=l(),yT=a("li"),vve=a("strong"),odr=o("deberta-v2"),rdr=o(" \u2014 "),UU=a("a"),tdr=o("DebertaV2ForQuestionAnswering"),adr=o(" (DeBERTa-v2 model)"),ndr=l(),LT=a("li"),Fve=a("strong"),sdr=o("distilbert"),ldr=o(" \u2014 "),HU=a("a"),idr=o("DistilBertForQuestionAnswering"),ddr=o(" (DistilBERT model)"),cdr=l(),xT=a("li"),Tve=a("strong"),fdr=o("electra"),mdr=o(" \u2014 "),JU=a("a"),gdr=o("ElectraForQuestionAnswering"),hdr=o(" (ELECTRA model)"),pdr=l(),$T=a("li"),Mve=a("strong"),udr=o("flaubert"),_dr=o(" \u2014 "),YU=a("a"),bdr=o("FlaubertForQuestionAnsweringSimple"),vdr=o(" (FlauBERT model)"),Fdr=l(),kT=a("li"),Eve=a("strong"),Tdr=o("fnet"),Mdr=o(" \u2014 "),KU=a("a"),Edr=o("FNetForQuestionAnswering"),Cdr=o(" (FNet model)"),wdr=l(),ST=a("li"),Cve=a("strong"),Adr=o("funnel"),ydr=o(" \u2014 "),ZU=a("a"),Ldr=o("FunnelForQuestionAnswering"),xdr=o(" (Funnel Transformer model)"),$dr=l(),RT=a("li"),wve=a("strong"),kdr=o("gptj"),Sdr=o(" \u2014 "),eH=a("a"),Rdr=o("GPTJForQuestionAnswering"),Pdr=o(" (GPT-J model)"),Bdr=l(),PT=a("li"),Ave=a("strong"),Idr=o("ibert"),Ndr=o(" \u2014 "),oH=a("a"),qdr=o("IBertForQuestionAnswering"),jdr=o(" (I-BERT model)"),Ddr=l(),BT=a("li"),yve=a("strong"),Gdr=o("layoutlmv2"),Odr=o(" \u2014 "),rH=a("a"),Vdr=o("LayoutLMv2ForQuestionAnswering"),Xdr=o(" (LayoutLMv2 model)"),zdr=l(),IT=a("li"),Lve=a("strong"),Qdr=o("layoutlmv3"),Wdr=o(" \u2014 "),tH=a("a"),Udr=o("LayoutLMv3ForQuestionAnswering"),Hdr=o(" (LayoutLMv3 model)"),Jdr=l(),NT=a("li"),xve=a("strong"),Ydr=o("led"),Kdr=o(" \u2014 "),aH=a("a"),Zdr=o("LEDForQuestionAnswering"),ecr=o(" (LED model)"),ocr=l(),qT=a("li"),$ve=a("strong"),rcr=o("longformer"),tcr=o(" \u2014 "),nH=a("a"),acr=o("LongformerForQuestionAnswering"),ncr=o(" (Longformer model)"),scr=l(),jT=a("li"),kve=a("strong"),lcr=o("luke"),icr=o(" \u2014 "),sH=a("a"),dcr=o("LukeForQuestionAnswering"),ccr=o(" (LUKE model)"),fcr=l(),DT=a("li"),Sve=a("strong"),mcr=o("lxmert"),gcr=o(" \u2014 "),lH=a("a"),hcr=o("LxmertForQuestionAnswering"),pcr=o(" (LXMERT model)"),ucr=l(),GT=a("li"),Rve=a("strong"),_cr=o("mbart"),bcr=o(" \u2014 "),iH=a("a"),vcr=o("MBartForQuestionAnswering"),Fcr=o(" (mBART model)"),Tcr=l(),OT=a("li"),Pve=a("strong"),Mcr=o("megatron-bert"),Ecr=o(" \u2014 "),dH=a("a"),Ccr=o("MegatronBertForQuestionAnswering"),wcr=o(" (Megatron-BERT model)"),Acr=l(),VT=a("li"),Bve=a("strong"),ycr=o("mobilebert"),Lcr=o(" \u2014 "),cH=a("a"),xcr=o("MobileBertForQuestionAnswering"),$cr=o(" (MobileBERT model)"),kcr=l(),XT=a("li"),Ive=a("strong"),Scr=o("mpnet"),Rcr=o(" \u2014 "),fH=a("a"),Pcr=o("MPNetForQuestionAnswering"),Bcr=o(" (MPNet model)"),Icr=l(),zT=a("li"),Nve=a("strong"),Ncr=o("mvp"),qcr=o(" \u2014 "),mH=a("a"),jcr=o("MvpForQuestionAnswering"),Dcr=o(" (MVP model)"),Gcr=l(),QT=a("li"),qve=a("strong"),Ocr=o("nezha"),Vcr=o(" \u2014 "),gH=a("a"),Xcr=o("NezhaForQuestionAnswering"),zcr=o(" (Nezha model)"),Qcr=l(),WT=a("li"),jve=a("strong"),Wcr=o("nystromformer"),Ucr=o(" \u2014 "),hH=a("a"),Hcr=o("NystromformerForQuestionAnswering"),Jcr=o(" (Nystr\xF6mformer model)"),Ycr=l(),UT=a("li"),Dve=a("strong"),Kcr=o("qdqbert"),Zcr=o(" \u2014 "),pH=a("a"),efr=o("QDQBertForQuestionAnswering"),ofr=o(" (QDQBert model)"),rfr=l(),HT=a("li"),Gve=a("strong"),tfr=o("reformer"),afr=o(" \u2014 "),uH=a("a"),nfr=o("ReformerForQuestionAnswering"),sfr=o(" (Reformer model)"),lfr=l(),JT=a("li"),Ove=a("strong"),ifr=o("rembert"),dfr=o(" \u2014 "),_H=a("a"),cfr=o("RemBertForQuestionAnswering"),ffr=o(" (RemBERT model)"),mfr=l(),YT=a("li"),Vve=a("strong"),gfr=o("roberta"),hfr=o(" \u2014 "),bH=a("a"),pfr=o("RobertaForQuestionAnswering"),ufr=o(" (RoBERTa model)"),_fr=l(),KT=a("li"),Xve=a("strong"),bfr=o("roformer"),vfr=o(" \u2014 "),vH=a("a"),Ffr=o("RoFormerForQuestionAnswering"),Tfr=o(" (RoFormer model)"),Mfr=l(),ZT=a("li"),zve=a("strong"),Efr=o("splinter"),Cfr=o(" \u2014 "),FH=a("a"),wfr=o("SplinterForQuestionAnswering"),Afr=o(" (Splinter model)"),yfr=l(),e8=a("li"),Qve=a("strong"),Lfr=o("squeezebert"),xfr=o(" \u2014 "),TH=a("a"),$fr=o("SqueezeBertForQuestionAnswering"),kfr=o(" (SqueezeBERT model)"),Sfr=l(),o8=a("li"),Wve=a("strong"),Rfr=o("xlm"),Pfr=o(" \u2014 "),MH=a("a"),Bfr=o("XLMForQuestionAnsweringSimple"),Ifr=o(" (XLM model)"),Nfr=l(),r8=a("li"),Uve=a("strong"),qfr=o("xlm-roberta"),jfr=o(" \u2014 "),EH=a("a"),Dfr=o("XLMRobertaForQuestionAnswering"),Gfr=o(" (XLM-RoBERTa model)"),Ofr=l(),t8=a("li"),Hve=a("strong"),Vfr=o("xlm-roberta-xl"),Xfr=o(" \u2014 "),CH=a("a"),zfr=o("XLMRobertaXLForQuestionAnswering"),Qfr=o(" (XLM-RoBERTa-XL model)"),Wfr=l(),a8=a("li"),Jve=a("strong"),Ufr=o("xlnet"),Hfr=o(" \u2014 "),wH=a("a"),Jfr=o("XLNetForQuestionAnsweringSimple"),Yfr=o(" (XLNet model)"),Kfr=l(),n8=a("li"),Yve=a("strong"),Zfr=o("yoso"),emr=o(" \u2014 "),AH=a("a"),omr=o("YosoForQuestionAnswering"),rmr=o(" (YOSO model)"),tmr=l(),s8=a("p"),amr=o("The model is set in evaluation mode by default using "),Kve=a("code"),nmr=o("model.eval()"),smr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zve=a("code"),lmr=o("model.train()"),imr=l(),F(l8.$$.fragment),mHe=l(),qd=a("h2"),i8=a("a"),eFe=a("span"),F(Z9.$$.fragment),dmr=l(),oFe=a("span"),cmr=o("AutoModelForTableQuestionAnswering"),gHe=l(),Xo=a("div"),F(ex.$$.fragment),fmr=l(),jd=a("p"),mmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yH=a("a"),gmr=o("from_pretrained()"),hmr=o(" class method or the "),LH=a("a"),pmr=o("from_config()"),umr=o(` class
method.`),_mr=l(),ox=a("p"),bmr=o("This class cannot be instantiated directly using "),rFe=a("code"),vmr=o("__init__()"),Fmr=o(" (throws an error)."),Tmr=l(),Ct=a("div"),F(rx.$$.fragment),Mmr=l(),tFe=a("p"),Emr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Cmr=l(),Dd=a("p"),wmr=o(`Note:
Loading a model from its configuration file does `),aFe=a("strong"),Amr=o("not"),ymr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=a("a"),Lmr=o("from_pretrained()"),xmr=o(" to load the model weights."),$mr=l(),F(d8.$$.fragment),kmr=l(),lo=a("div"),F(tx.$$.fragment),Smr=l(),nFe=a("p"),Rmr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Pmr=l(),tn=a("p"),Bmr=o("The model class to instantiate is selected based on the "),sFe=a("code"),Imr=o("model_type"),Nmr=o(` property of the config object (either
passed as an argument or loaded from `),lFe=a("code"),qmr=o("pretrained_model_name_or_path"),jmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=a("code"),Dmr=o("pretrained_model_name_or_path"),Gmr=o(":"),Omr=l(),dFe=a("ul"),c8=a("li"),cFe=a("strong"),Vmr=o("tapas"),Xmr=o(" \u2014 "),$H=a("a"),zmr=o("TapasForQuestionAnswering"),Qmr=o(" (TAPAS model)"),Wmr=l(),f8=a("p"),Umr=o("The model is set in evaluation mode by default using "),fFe=a("code"),Hmr=o("model.eval()"),Jmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mFe=a("code"),Ymr=o("model.train()"),Kmr=l(),F(m8.$$.fragment),hHe=l(),Gd=a("h2"),g8=a("a"),gFe=a("span"),F(ax.$$.fragment),Zmr=l(),hFe=a("span"),egr=o("AutoModelForDocumentQuestionAnswering"),pHe=l(),zo=a("div"),F(nx.$$.fragment),ogr=l(),Od=a("p"),rgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),kH=a("a"),tgr=o("from_pretrained()"),agr=o(" class method or the "),SH=a("a"),ngr=o("from_config()"),sgr=o(` class
method.`),lgr=l(),sx=a("p"),igr=o("This class cannot be instantiated directly using "),pFe=a("code"),dgr=o("__init__()"),cgr=o(" (throws an error)."),fgr=l(),wt=a("div"),F(lx.$$.fragment),mgr=l(),uFe=a("p"),ggr=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),hgr=l(),Vd=a("p"),pgr=o(`Note:
Loading a model from its configuration file does `),_Fe=a("strong"),ugr=o("not"),_gr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),bgr=o("from_pretrained()"),vgr=o(" to load the model weights."),Fgr=l(),F(h8.$$.fragment),Tgr=l(),io=a("div"),F(ix.$$.fragment),Mgr=l(),bFe=a("p"),Egr=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),Cgr=l(),an=a("p"),wgr=o("The model class to instantiate is selected based on the "),vFe=a("code"),Agr=o("model_type"),ygr=o(` property of the config object (either
passed as an argument or loaded from `),FFe=a("code"),Lgr=o("pretrained_model_name_or_path"),xgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=a("code"),$gr=o("pretrained_model_name_or_path"),kgr=o(":"),Sgr=l(),dx=a("ul"),p8=a("li"),MFe=a("strong"),Rgr=o("layoutlmv2"),Pgr=o(" \u2014 "),PH=a("a"),Bgr=o("LayoutLMv2ForQuestionAnswering"),Igr=o(" (LayoutLMv2 model)"),Ngr=l(),u8=a("li"),EFe=a("strong"),qgr=o("layoutlmv3"),jgr=o(" \u2014 "),BH=a("a"),Dgr=o("LayoutLMv3ForQuestionAnswering"),Ggr=o(" (LayoutLMv3 model)"),Ogr=l(),_8=a("p"),Vgr=o("The model is set in evaluation mode by default using "),CFe=a("code"),Xgr=o("model.eval()"),zgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wFe=a("code"),Qgr=o("model.train()"),Wgr=l(),F(b8.$$.fragment),uHe=l(),Xd=a("h2"),v8=a("a"),AFe=a("span"),F(cx.$$.fragment),Ugr=l(),yFe=a("span"),Hgr=o("AutoModelForImageClassification"),_He=l(),Qo=a("div"),F(fx.$$.fragment),Jgr=l(),zd=a("p"),Ygr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),IH=a("a"),Kgr=o("from_pretrained()"),Zgr=o(" class method or the "),NH=a("a"),ehr=o("from_config()"),ohr=o(` class
method.`),rhr=l(),mx=a("p"),thr=o("This class cannot be instantiated directly using "),LFe=a("code"),ahr=o("__init__()"),nhr=o(" (throws an error)."),shr=l(),At=a("div"),F(gx.$$.fragment),lhr=l(),xFe=a("p"),ihr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dhr=l(),Qd=a("p"),chr=o(`Note:
Loading a model from its configuration file does `),$Fe=a("strong"),fhr=o("not"),mhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=a("a"),ghr=o("from_pretrained()"),hhr=o(" to load the model weights."),phr=l(),F(F8.$$.fragment),uhr=l(),co=a("div"),F(hx.$$.fragment),_hr=l(),kFe=a("p"),bhr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vhr=l(),nn=a("p"),Fhr=o("The model class to instantiate is selected based on the "),SFe=a("code"),Thr=o("model_type"),Mhr=o(` property of the config object (either
passed as an argument or loaded from `),RFe=a("code"),Ehr=o("pretrained_model_name_or_path"),Chr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=a("code"),whr=o("pretrained_model_name_or_path"),Ahr=o(":"),yhr=l(),be=a("ul"),T8=a("li"),BFe=a("strong"),Lhr=o("beit"),xhr=o(" \u2014 "),jH=a("a"),$hr=o("BeitForImageClassification"),khr=o(" (BEiT model)"),Shr=l(),M8=a("li"),IFe=a("strong"),Rhr=o("convnext"),Phr=o(" \u2014 "),DH=a("a"),Bhr=o("ConvNextForImageClassification"),Ihr=o(" (ConvNeXT model)"),Nhr=l(),E8=a("li"),NFe=a("strong"),qhr=o("cvt"),jhr=o(" \u2014 "),GH=a("a"),Dhr=o("CvtForImageClassification"),Ghr=o(" (CvT model)"),Ohr=l(),C8=a("li"),qFe=a("strong"),Vhr=o("data2vec-vision"),Xhr=o(" \u2014 "),OH=a("a"),zhr=o("Data2VecVisionForImageClassification"),Qhr=o(" (Data2VecVision model)"),Whr=l(),fl=a("li"),jFe=a("strong"),Uhr=o("deit"),Hhr=o(" \u2014 "),VH=a("a"),Jhr=o("DeiTForImageClassification"),Yhr=o(" or "),XH=a("a"),Khr=o("DeiTForImageClassificationWithTeacher"),Zhr=o(" (DeiT model)"),epr=l(),w8=a("li"),DFe=a("strong"),opr=o("imagegpt"),rpr=o(" \u2014 "),zH=a("a"),tpr=o("ImageGPTForImageClassification"),apr=o(" (ImageGPT model)"),npr=l(),ml=a("li"),GFe=a("strong"),spr=o("levit"),lpr=o(" \u2014 "),QH=a("a"),ipr=o("LevitForImageClassification"),dpr=o(" or "),WH=a("a"),cpr=o("LevitForImageClassificationWithTeacher"),fpr=o(" (LeViT model)"),mpr=l(),A8=a("li"),OFe=a("strong"),gpr=o("mobilevit"),hpr=o(" \u2014 "),UH=a("a"),ppr=o("MobileViTForImageClassification"),upr=o(" (MobileViT model)"),_pr=l(),yt=a("li"),VFe=a("strong"),bpr=o("perceiver"),vpr=o(" \u2014 "),HH=a("a"),Fpr=o("PerceiverForImageClassificationLearned"),Tpr=o(" or "),JH=a("a"),Mpr=o("PerceiverForImageClassificationFourier"),Epr=o(" or "),YH=a("a"),Cpr=o("PerceiverForImageClassificationConvProcessing"),wpr=o(" (Perceiver model)"),Apr=l(),y8=a("li"),XFe=a("strong"),ypr=o("poolformer"),Lpr=o(" \u2014 "),KH=a("a"),xpr=o("PoolFormerForImageClassification"),$pr=o(" (PoolFormer model)"),kpr=l(),L8=a("li"),zFe=a("strong"),Spr=o("regnet"),Rpr=o(" \u2014 "),ZH=a("a"),Ppr=o("RegNetForImageClassification"),Bpr=o(" (RegNet model)"),Ipr=l(),x8=a("li"),QFe=a("strong"),Npr=o("resnet"),qpr=o(" \u2014 "),eJ=a("a"),jpr=o("ResNetForImageClassification"),Dpr=o(" (ResNet model)"),Gpr=l(),$8=a("li"),WFe=a("strong"),Opr=o("segformer"),Vpr=o(" \u2014 "),oJ=a("a"),Xpr=o("SegformerForImageClassification"),zpr=o(" (SegFormer model)"),Qpr=l(),k8=a("li"),UFe=a("strong"),Wpr=o("swin"),Upr=o(" \u2014 "),rJ=a("a"),Hpr=o("SwinForImageClassification"),Jpr=o(" (Swin Transformer model)"),Ypr=l(),S8=a("li"),HFe=a("strong"),Kpr=o("swinv2"),Zpr=o(" \u2014 "),tJ=a("a"),eur=o("Swinv2ForImageClassification"),our=o(" (Swin Transformer V2 model)"),rur=l(),R8=a("li"),JFe=a("strong"),tur=o("van"),aur=o(" \u2014 "),aJ=a("a"),nur=o("VanForImageClassification"),sur=o(" (VAN model)"),lur=l(),P8=a("li"),YFe=a("strong"),iur=o("vit"),dur=o(" \u2014 "),nJ=a("a"),cur=o("ViTForImageClassification"),fur=o(" (ViT model)"),mur=l(),B8=a("p"),gur=o("The model is set in evaluation mode by default using "),KFe=a("code"),hur=o("model.eval()"),pur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ZFe=a("code"),uur=o("model.train()"),_ur=l(),F(I8.$$.fragment),bHe=l(),Wd=a("h2"),N8=a("a"),eTe=a("span"),F(px.$$.fragment),bur=l(),oTe=a("span"),vur=o("AutoModelForVideoClassification"),vHe=l(),Wo=a("div"),F(ux.$$.fragment),Fur=l(),Ud=a("p"),Tur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),sJ=a("a"),Mur=o("from_pretrained()"),Eur=o(" class method or the "),lJ=a("a"),Cur=o("from_config()"),wur=o(` class
method.`),Aur=l(),_x=a("p"),yur=o("This class cannot be instantiated directly using "),rTe=a("code"),Lur=o("__init__()"),xur=o(" (throws an error)."),$ur=l(),Lt=a("div"),F(bx.$$.fragment),kur=l(),tTe=a("p"),Sur=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),Rur=l(),Hd=a("p"),Pur=o(`Note:
Loading a model from its configuration file does `),aTe=a("strong"),Bur=o("not"),Iur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=a("a"),Nur=o("from_pretrained()"),qur=o(" to load the model weights."),jur=l(),F(q8.$$.fragment),Dur=l(),fo=a("div"),F(vx.$$.fragment),Gur=l(),nTe=a("p"),Our=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),Vur=l(),sn=a("p"),Xur=o("The model class to instantiate is selected based on the "),sTe=a("code"),zur=o("model_type"),Qur=o(` property of the config object (either
passed as an argument or loaded from `),lTe=a("code"),Wur=o("pretrained_model_name_or_path"),Uur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iTe=a("code"),Hur=o("pretrained_model_name_or_path"),Jur=o(":"),Yur=l(),dTe=a("ul"),j8=a("li"),cTe=a("strong"),Kur=o("videomae"),Zur=o(" \u2014 "),dJ=a("a"),e_r=o("VideoMAEForVideoClassification"),o_r=o(" (VideoMAE model)"),r_r=l(),D8=a("p"),t_r=o("The model is set in evaluation mode by default using "),fTe=a("code"),a_r=o("model.eval()"),n_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mTe=a("code"),s_r=o("model.train()"),l_r=l(),F(G8.$$.fragment),FHe=l(),Jd=a("h2"),O8=a("a"),gTe=a("span"),F(Fx.$$.fragment),i_r=l(),hTe=a("span"),d_r=o("AutoModelForVision2Seq"),THe=l(),Uo=a("div"),F(Tx.$$.fragment),c_r=l(),Yd=a("p"),f_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cJ=a("a"),m_r=o("from_pretrained()"),g_r=o(" class method or the "),fJ=a("a"),h_r=o("from_config()"),p_r=o(` class
method.`),u_r=l(),Mx=a("p"),__r=o("This class cannot be instantiated directly using "),pTe=a("code"),b_r=o("__init__()"),v_r=o(" (throws an error)."),F_r=l(),xt=a("div"),F(Ex.$$.fragment),T_r=l(),uTe=a("p"),M_r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),E_r=l(),Kd=a("p"),C_r=o(`Note:
Loading a model from its configuration file does `),_Te=a("strong"),w_r=o("not"),A_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=a("a"),y_r=o("from_pretrained()"),L_r=o(" to load the model weights."),x_r=l(),F(V8.$$.fragment),$_r=l(),mo=a("div"),F(Cx.$$.fragment),k_r=l(),bTe=a("p"),S_r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),R_r=l(),ln=a("p"),P_r=o("The model class to instantiate is selected based on the "),vTe=a("code"),B_r=o("model_type"),I_r=o(` property of the config object (either
passed as an argument or loaded from `),FTe=a("code"),N_r=o("pretrained_model_name_or_path"),q_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=a("code"),j_r=o("pretrained_model_name_or_path"),D_r=o(":"),G_r=l(),MTe=a("ul"),X8=a("li"),ETe=a("strong"),O_r=o("vision-encoder-decoder"),V_r=o(" \u2014 "),gJ=a("a"),X_r=o("VisionEncoderDecoderModel"),z_r=o(" (Vision Encoder decoder model)"),Q_r=l(),z8=a("p"),W_r=o("The model is set in evaluation mode by default using "),CTe=a("code"),U_r=o("model.eval()"),H_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wTe=a("code"),J_r=o("model.train()"),Y_r=l(),F(Q8.$$.fragment),MHe=l(),Zd=a("h2"),W8=a("a"),ATe=a("span"),F(wx.$$.fragment),K_r=l(),yTe=a("span"),Z_r=o("AutoModelForVisualQuestionAnswering"),EHe=l(),Ho=a("div"),F(Ax.$$.fragment),e1r=l(),ec=a("p"),o1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),hJ=a("a"),r1r=o("from_pretrained()"),t1r=o(" class method or the "),pJ=a("a"),a1r=o("from_config()"),n1r=o(` class
method.`),s1r=l(),yx=a("p"),l1r=o("This class cannot be instantiated directly using "),LTe=a("code"),i1r=o("__init__()"),d1r=o(" (throws an error)."),c1r=l(),$t=a("div"),F(Lx.$$.fragment),f1r=l(),xTe=a("p"),m1r=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),g1r=l(),oc=a("p"),h1r=o(`Note:
Loading a model from its configuration file does `),$Te=a("strong"),p1r=o("not"),u1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=a("a"),_1r=o("from_pretrained()"),b1r=o(" to load the model weights."),v1r=l(),F(U8.$$.fragment),F1r=l(),go=a("div"),F(xx.$$.fragment),T1r=l(),kTe=a("p"),M1r=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),E1r=l(),dn=a("p"),C1r=o("The model class to instantiate is selected based on the "),STe=a("code"),w1r=o("model_type"),A1r=o(` property of the config object (either
passed as an argument or loaded from `),RTe=a("code"),y1r=o("pretrained_model_name_or_path"),L1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=a("code"),x1r=o("pretrained_model_name_or_path"),$1r=o(":"),k1r=l(),BTe=a("ul"),H8=a("li"),ITe=a("strong"),S1r=o("vilt"),R1r=o(" \u2014 "),_J=a("a"),P1r=o("ViltForQuestionAnswering"),B1r=o(" (ViLT model)"),I1r=l(),J8=a("p"),N1r=o("The model is set in evaluation mode by default using "),NTe=a("code"),q1r=o("model.eval()"),j1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qTe=a("code"),D1r=o("model.train()"),G1r=l(),F(Y8.$$.fragment),CHe=l(),rc=a("h2"),K8=a("a"),jTe=a("span"),F($x.$$.fragment),O1r=l(),DTe=a("span"),V1r=o("AutoModelForAudioClassification"),wHe=l(),Jo=a("div"),F(kx.$$.fragment),X1r=l(),tc=a("p"),z1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),bJ=a("a"),Q1r=o("from_pretrained()"),W1r=o(" class method or the "),vJ=a("a"),U1r=o("from_config()"),H1r=o(` class
method.`),J1r=l(),Sx=a("p"),Y1r=o("This class cannot be instantiated directly using "),GTe=a("code"),K1r=o("__init__()"),Z1r=o(" (throws an error)."),e4r=l(),kt=a("div"),F(Rx.$$.fragment),o4r=l(),OTe=a("p"),r4r=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),t4r=l(),ac=a("p"),a4r=o(`Note:
Loading a model from its configuration file does `),VTe=a("strong"),n4r=o("not"),s4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FJ=a("a"),l4r=o("from_pretrained()"),i4r=o(" to load the model weights."),d4r=l(),F(Z8.$$.fragment),c4r=l(),ho=a("div"),F(Px.$$.fragment),f4r=l(),XTe=a("p"),m4r=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),g4r=l(),cn=a("p"),h4r=o("The model class to instantiate is selected based on the "),zTe=a("code"),p4r=o("model_type"),u4r=o(` property of the config object (either
passed as an argument or loaded from `),QTe=a("code"),_4r=o("pretrained_model_name_or_path"),b4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=a("code"),v4r=o("pretrained_model_name_or_path"),F4r=o(":"),T4r=l(),Pe=a("ul"),eM=a("li"),UTe=a("strong"),M4r=o("data2vec-audio"),E4r=o(" \u2014 "),TJ=a("a"),C4r=o("Data2VecAudioForSequenceClassification"),w4r=o(" (Data2VecAudio model)"),A4r=l(),oM=a("li"),HTe=a("strong"),y4r=o("hubert"),L4r=o(" \u2014 "),MJ=a("a"),x4r=o("HubertForSequenceClassification"),$4r=o(" (Hubert model)"),k4r=l(),rM=a("li"),JTe=a("strong"),S4r=o("sew"),R4r=o(" \u2014 "),EJ=a("a"),P4r=o("SEWForSequenceClassification"),B4r=o(" (SEW model)"),I4r=l(),tM=a("li"),YTe=a("strong"),N4r=o("sew-d"),q4r=o(" \u2014 "),CJ=a("a"),j4r=o("SEWDForSequenceClassification"),D4r=o(" (SEW-D model)"),G4r=l(),aM=a("li"),KTe=a("strong"),O4r=o("unispeech"),V4r=o(" \u2014 "),wJ=a("a"),X4r=o("UniSpeechForSequenceClassification"),z4r=o(" (UniSpeech model)"),Q4r=l(),nM=a("li"),ZTe=a("strong"),W4r=o("unispeech-sat"),U4r=o(" \u2014 "),AJ=a("a"),H4r=o("UniSpeechSatForSequenceClassification"),J4r=o(" (UniSpeechSat model)"),Y4r=l(),sM=a("li"),e8e=a("strong"),K4r=o("wav2vec2"),Z4r=o(" \u2014 "),yJ=a("a"),e2r=o("Wav2Vec2ForSequenceClassification"),o2r=o(" (Wav2Vec2 model)"),r2r=l(),lM=a("li"),o8e=a("strong"),t2r=o("wav2vec2-conformer"),a2r=o(" \u2014 "),LJ=a("a"),n2r=o("Wav2Vec2ConformerForSequenceClassification"),s2r=o(" (Wav2Vec2-Conformer model)"),l2r=l(),iM=a("li"),r8e=a("strong"),i2r=o("wavlm"),d2r=o(" \u2014 "),xJ=a("a"),c2r=o("WavLMForSequenceClassification"),f2r=o(" (WavLM model)"),m2r=l(),dM=a("p"),g2r=o("The model is set in evaluation mode by default using "),t8e=a("code"),h2r=o("model.eval()"),p2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a8e=a("code"),u2r=o("model.train()"),_2r=l(),F(cM.$$.fragment),AHe=l(),nc=a("h2"),fM=a("a"),n8e=a("span"),F(Bx.$$.fragment),b2r=l(),s8e=a("span"),v2r=o("AutoModelForAudioFrameClassification"),yHe=l(),Yo=a("div"),F(Ix.$$.fragment),F2r=l(),sc=a("p"),T2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),$J=a("a"),M2r=o("from_pretrained()"),E2r=o(" class method or the "),kJ=a("a"),C2r=o("from_config()"),w2r=o(` class
method.`),A2r=l(),Nx=a("p"),y2r=o("This class cannot be instantiated directly using "),l8e=a("code"),L2r=o("__init__()"),x2r=o(" (throws an error)."),$2r=l(),St=a("div"),F(qx.$$.fragment),k2r=l(),i8e=a("p"),S2r=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),R2r=l(),lc=a("p"),P2r=o(`Note:
Loading a model from its configuration file does `),d8e=a("strong"),B2r=o("not"),I2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SJ=a("a"),N2r=o("from_pretrained()"),q2r=o(" to load the model weights."),j2r=l(),F(mM.$$.fragment),D2r=l(),po=a("div"),F(jx.$$.fragment),G2r=l(),c8e=a("p"),O2r=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),V2r=l(),fn=a("p"),X2r=o("The model class to instantiate is selected based on the "),f8e=a("code"),z2r=o("model_type"),Q2r=o(` property of the config object (either
passed as an argument or loaded from `),m8e=a("code"),W2r=o("pretrained_model_name_or_path"),U2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g8e=a("code"),H2r=o("pretrained_model_name_or_path"),J2r=o(":"),Y2r=l(),it=a("ul"),gM=a("li"),h8e=a("strong"),K2r=o("data2vec-audio"),Z2r=o(" \u2014 "),RJ=a("a"),ebr=o("Data2VecAudioForAudioFrameClassification"),obr=o(" (Data2VecAudio model)"),rbr=l(),hM=a("li"),p8e=a("strong"),tbr=o("unispeech-sat"),abr=o(" \u2014 "),PJ=a("a"),nbr=o("UniSpeechSatForAudioFrameClassification"),sbr=o(" (UniSpeechSat model)"),lbr=l(),pM=a("li"),u8e=a("strong"),ibr=o("wav2vec2"),dbr=o(" \u2014 "),BJ=a("a"),cbr=o("Wav2Vec2ForAudioFrameClassification"),fbr=o(" (Wav2Vec2 model)"),mbr=l(),uM=a("li"),_8e=a("strong"),gbr=o("wav2vec2-conformer"),hbr=o(" \u2014 "),IJ=a("a"),pbr=o("Wav2Vec2ConformerForAudioFrameClassification"),ubr=o(" (Wav2Vec2-Conformer model)"),_br=l(),_M=a("li"),b8e=a("strong"),bbr=o("wavlm"),vbr=o(" \u2014 "),NJ=a("a"),Fbr=o("WavLMForAudioFrameClassification"),Tbr=o(" (WavLM model)"),Mbr=l(),bM=a("p"),Ebr=o("The model is set in evaluation mode by default using "),v8e=a("code"),Cbr=o("model.eval()"),wbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F8e=a("code"),Abr=o("model.train()"),ybr=l(),F(vM.$$.fragment),LHe=l(),ic=a("h2"),FM=a("a"),T8e=a("span"),F(Dx.$$.fragment),Lbr=l(),M8e=a("span"),xbr=o("AutoModelForCTC"),xHe=l(),Ko=a("div"),F(Gx.$$.fragment),$br=l(),dc=a("p"),kbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),qJ=a("a"),Sbr=o("from_pretrained()"),Rbr=o(" class method or the "),jJ=a("a"),Pbr=o("from_config()"),Bbr=o(` class
method.`),Ibr=l(),Ox=a("p"),Nbr=o("This class cannot be instantiated directly using "),E8e=a("code"),qbr=o("__init__()"),jbr=o(" (throws an error)."),Dbr=l(),Rt=a("div"),F(Vx.$$.fragment),Gbr=l(),C8e=a("p"),Obr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Vbr=l(),cc=a("p"),Xbr=o(`Note:
Loading a model from its configuration file does `),w8e=a("strong"),zbr=o("not"),Qbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DJ=a("a"),Wbr=o("from_pretrained()"),Ubr=o(" to load the model weights."),Hbr=l(),F(TM.$$.fragment),Jbr=l(),uo=a("div"),F(Xx.$$.fragment),Ybr=l(),A8e=a("p"),Kbr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Zbr=l(),mn=a("p"),evr=o("The model class to instantiate is selected based on the "),y8e=a("code"),ovr=o("model_type"),rvr=o(` property of the config object (either
passed as an argument or loaded from `),L8e=a("code"),tvr=o("pretrained_model_name_or_path"),avr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x8e=a("code"),nvr=o("pretrained_model_name_or_path"),svr=o(":"),lvr=l(),ye=a("ul"),MM=a("li"),$8e=a("strong"),ivr=o("data2vec-audio"),dvr=o(" \u2014 "),GJ=a("a"),cvr=o("Data2VecAudioForCTC"),fvr=o(" (Data2VecAudio model)"),mvr=l(),EM=a("li"),k8e=a("strong"),gvr=o("hubert"),hvr=o(" \u2014 "),OJ=a("a"),pvr=o("HubertForCTC"),uvr=o(" (Hubert model)"),_vr=l(),CM=a("li"),S8e=a("strong"),bvr=o("mctct"),vvr=o(" \u2014 "),VJ=a("a"),Fvr=o("MCTCTForCTC"),Tvr=o(" (M-CTC-T model)"),Mvr=l(),wM=a("li"),R8e=a("strong"),Evr=o("sew"),Cvr=o(" \u2014 "),XJ=a("a"),wvr=o("SEWForCTC"),Avr=o(" (SEW model)"),yvr=l(),AM=a("li"),P8e=a("strong"),Lvr=o("sew-d"),xvr=o(" \u2014 "),zJ=a("a"),$vr=o("SEWDForCTC"),kvr=o(" (SEW-D model)"),Svr=l(),yM=a("li"),B8e=a("strong"),Rvr=o("unispeech"),Pvr=o(" \u2014 "),QJ=a("a"),Bvr=o("UniSpeechForCTC"),Ivr=o(" (UniSpeech model)"),Nvr=l(),LM=a("li"),I8e=a("strong"),qvr=o("unispeech-sat"),jvr=o(" \u2014 "),WJ=a("a"),Dvr=o("UniSpeechSatForCTC"),Gvr=o(" (UniSpeechSat model)"),Ovr=l(),xM=a("li"),N8e=a("strong"),Vvr=o("wav2vec2"),Xvr=o(" \u2014 "),UJ=a("a"),zvr=o("Wav2Vec2ForCTC"),Qvr=o(" (Wav2Vec2 model)"),Wvr=l(),$M=a("li"),q8e=a("strong"),Uvr=o("wav2vec2-conformer"),Hvr=o(" \u2014 "),HJ=a("a"),Jvr=o("Wav2Vec2ConformerForCTC"),Yvr=o(" (Wav2Vec2-Conformer model)"),Kvr=l(),kM=a("li"),j8e=a("strong"),Zvr=o("wavlm"),eFr=o(" \u2014 "),JJ=a("a"),oFr=o("WavLMForCTC"),rFr=o(" (WavLM model)"),tFr=l(),SM=a("p"),aFr=o("The model is set in evaluation mode by default using "),D8e=a("code"),nFr=o("model.eval()"),sFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G8e=a("code"),lFr=o("model.train()"),iFr=l(),F(RM.$$.fragment),$He=l(),fc=a("h2"),PM=a("a"),O8e=a("span"),F(zx.$$.fragment),dFr=l(),V8e=a("span"),cFr=o("AutoModelForSpeechSeq2Seq"),kHe=l(),Zo=a("div"),F(Qx.$$.fragment),fFr=l(),mc=a("p"),mFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),YJ=a("a"),gFr=o("from_pretrained()"),hFr=o(" class method or the "),KJ=a("a"),pFr=o("from_config()"),uFr=o(` class
method.`),_Fr=l(),Wx=a("p"),bFr=o("This class cannot be instantiated directly using "),X8e=a("code"),vFr=o("__init__()"),FFr=o(" (throws an error)."),TFr=l(),Pt=a("div"),F(Ux.$$.fragment),MFr=l(),z8e=a("p"),EFr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),CFr=l(),gc=a("p"),wFr=o(`Note:
Loading a model from its configuration file does `),Q8e=a("strong"),AFr=o("not"),yFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=a("a"),LFr=o("from_pretrained()"),xFr=o(" to load the model weights."),$Fr=l(),F(BM.$$.fragment),kFr=l(),_o=a("div"),F(Hx.$$.fragment),SFr=l(),W8e=a("p"),RFr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),PFr=l(),gn=a("p"),BFr=o("The model class to instantiate is selected based on the "),U8e=a("code"),IFr=o("model_type"),NFr=o(` property of the config object (either
passed as an argument or loaded from `),H8e=a("code"),qFr=o("pretrained_model_name_or_path"),jFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J8e=a("code"),DFr=o("pretrained_model_name_or_path"),GFr=o(":"),OFr=l(),Jx=a("ul"),IM=a("li"),Y8e=a("strong"),VFr=o("speech-encoder-decoder"),XFr=o(" \u2014 "),eY=a("a"),zFr=o("SpeechEncoderDecoderModel"),QFr=o(" (Speech Encoder decoder model)"),WFr=l(),NM=a("li"),K8e=a("strong"),UFr=o("speech_to_text"),HFr=o(" \u2014 "),oY=a("a"),JFr=o("Speech2TextForConditionalGeneration"),YFr=o(" (Speech2Text model)"),KFr=l(),qM=a("p"),ZFr=o("The model is set in evaluation mode by default using "),Z8e=a("code"),eTr=o("model.eval()"),oTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eMe=a("code"),rTr=o("model.train()"),tTr=l(),F(jM.$$.fragment),SHe=l(),hc=a("h2"),DM=a("a"),oMe=a("span"),F(Yx.$$.fragment),aTr=l(),rMe=a("span"),nTr=o("AutoModelForAudioXVector"),RHe=l(),er=a("div"),F(Kx.$$.fragment),sTr=l(),pc=a("p"),lTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),rY=a("a"),iTr=o("from_pretrained()"),dTr=o(" class method or the "),tY=a("a"),cTr=o("from_config()"),fTr=o(` class
method.`),mTr=l(),Zx=a("p"),gTr=o("This class cannot be instantiated directly using "),tMe=a("code"),hTr=o("__init__()"),pTr=o(" (throws an error)."),uTr=l(),Bt=a("div"),F(e$.$$.fragment),_Tr=l(),aMe=a("p"),bTr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),vTr=l(),uc=a("p"),FTr=o(`Note:
Loading a model from its configuration file does `),nMe=a("strong"),TTr=o("not"),MTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=a("a"),ETr=o("from_pretrained()"),CTr=o(" to load the model weights."),wTr=l(),F(GM.$$.fragment),ATr=l(),bo=a("div"),F(o$.$$.fragment),yTr=l(),sMe=a("p"),LTr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),xTr=l(),hn=a("p"),$Tr=o("The model class to instantiate is selected based on the "),lMe=a("code"),kTr=o("model_type"),STr=o(` property of the config object (either
passed as an argument or loaded from `),iMe=a("code"),RTr=o("pretrained_model_name_or_path"),PTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=a("code"),BTr=o("pretrained_model_name_or_path"),ITr=o(":"),NTr=l(),dt=a("ul"),OM=a("li"),cMe=a("strong"),qTr=o("data2vec-audio"),jTr=o(" \u2014 "),nY=a("a"),DTr=o("Data2VecAudioForXVector"),GTr=o(" (Data2VecAudio model)"),OTr=l(),VM=a("li"),fMe=a("strong"),VTr=o("unispeech-sat"),XTr=o(" \u2014 "),sY=a("a"),zTr=o("UniSpeechSatForXVector"),QTr=o(" (UniSpeechSat model)"),WTr=l(),XM=a("li"),mMe=a("strong"),UTr=o("wav2vec2"),HTr=o(" \u2014 "),lY=a("a"),JTr=o("Wav2Vec2ForXVector"),YTr=o(" (Wav2Vec2 model)"),KTr=l(),zM=a("li"),gMe=a("strong"),ZTr=o("wav2vec2-conformer"),e8r=o(" \u2014 "),iY=a("a"),o8r=o("Wav2Vec2ConformerForXVector"),r8r=o(" (Wav2Vec2-Conformer model)"),t8r=l(),QM=a("li"),hMe=a("strong"),a8r=o("wavlm"),n8r=o(" \u2014 "),dY=a("a"),s8r=o("WavLMForXVector"),l8r=o(" (WavLM model)"),i8r=l(),WM=a("p"),d8r=o("The model is set in evaluation mode by default using "),pMe=a("code"),c8r=o("model.eval()"),f8r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uMe=a("code"),m8r=o("model.train()"),g8r=l(),F(UM.$$.fragment),PHe=l(),_c=a("h2"),HM=a("a"),_Me=a("span"),F(r$.$$.fragment),h8r=l(),bMe=a("span"),p8r=o("AutoModelForMaskedImageModeling"),BHe=l(),or=a("div"),F(t$.$$.fragment),u8r=l(),bc=a("p"),_8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),cY=a("a"),b8r=o("from_pretrained()"),v8r=o(" class method or the "),fY=a("a"),F8r=o("from_config()"),T8r=o(` class
method.`),M8r=l(),a$=a("p"),E8r=o("This class cannot be instantiated directly using "),vMe=a("code"),C8r=o("__init__()"),w8r=o(" (throws an error)."),A8r=l(),It=a("div"),F(n$.$$.fragment),y8r=l(),FMe=a("p"),L8r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),x8r=l(),vc=a("p"),$8r=o(`Note:
Loading a model from its configuration file does `),TMe=a("strong"),k8r=o("not"),S8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=a("a"),R8r=o("from_pretrained()"),P8r=o(" to load the model weights."),B8r=l(),F(JM.$$.fragment),I8r=l(),vo=a("div"),F(s$.$$.fragment),N8r=l(),MMe=a("p"),q8r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),j8r=l(),pn=a("p"),D8r=o("The model class to instantiate is selected based on the "),EMe=a("code"),G8r=o("model_type"),O8r=o(` property of the config object (either
passed as an argument or loaded from `),CMe=a("code"),V8r=o("pretrained_model_name_or_path"),X8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=a("code"),z8r=o("pretrained_model_name_or_path"),Q8r=o(":"),W8r=l(),un=a("ul"),YM=a("li"),AMe=a("strong"),U8r=o("deit"),H8r=o(" \u2014 "),gY=a("a"),J8r=o("DeiTForMaskedImageModeling"),Y8r=o(" (DeiT model)"),K8r=l(),KM=a("li"),yMe=a("strong"),Z8r=o("swin"),eMr=o(" \u2014 "),hY=a("a"),oMr=o("SwinForMaskedImageModeling"),rMr=o(" (Swin Transformer model)"),tMr=l(),ZM=a("li"),LMe=a("strong"),aMr=o("swinv2"),nMr=o(" \u2014 "),pY=a("a"),sMr=o("Swinv2ForMaskedImageModeling"),lMr=o(" (Swin Transformer V2 model)"),iMr=l(),eE=a("li"),xMe=a("strong"),dMr=o("vit"),cMr=o(" \u2014 "),uY=a("a"),fMr=o("ViTForMaskedImageModeling"),mMr=o(" (ViT model)"),gMr=l(),oE=a("p"),hMr=o("The model is set in evaluation mode by default using "),$Me=a("code"),pMr=o("model.eval()"),uMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kMe=a("code"),_Mr=o("model.train()"),bMr=l(),F(rE.$$.fragment),IHe=l(),Fc=a("h2"),tE=a("a"),SMe=a("span"),F(l$.$$.fragment),vMr=l(),RMe=a("span"),FMr=o("AutoModelForObjectDetection"),NHe=l(),rr=a("div"),F(i$.$$.fragment),TMr=l(),Tc=a("p"),MMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),_Y=a("a"),EMr=o("from_pretrained()"),CMr=o(" class method or the "),bY=a("a"),wMr=o("from_config()"),AMr=o(` class
method.`),yMr=l(),d$=a("p"),LMr=o("This class cannot be instantiated directly using "),PMe=a("code"),xMr=o("__init__()"),$Mr=o(" (throws an error)."),kMr=l(),Nt=a("div"),F(c$.$$.fragment),SMr=l(),BMe=a("p"),RMr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),PMr=l(),Mc=a("p"),BMr=o(`Note:
Loading a model from its configuration file does `),IMe=a("strong"),IMr=o("not"),NMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=a("a"),qMr=o("from_pretrained()"),jMr=o(" to load the model weights."),DMr=l(),F(aE.$$.fragment),GMr=l(),Fo=a("div"),F(f$.$$.fragment),OMr=l(),NMe=a("p"),VMr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),XMr=l(),_n=a("p"),zMr=o("The model class to instantiate is selected based on the "),qMe=a("code"),QMr=o("model_type"),WMr=o(` property of the config object (either
passed as an argument or loaded from `),jMe=a("code"),UMr=o("pretrained_model_name_or_path"),HMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DMe=a("code"),JMr=o("pretrained_model_name_or_path"),YMr=o(":"),KMr=l(),m$=a("ul"),nE=a("li"),GMe=a("strong"),ZMr=o("detr"),eEr=o(" \u2014 "),FY=a("a"),oEr=o("DetrForObjectDetection"),rEr=o(" (DETR model)"),tEr=l(),sE=a("li"),OMe=a("strong"),aEr=o("yolos"),nEr=o(" \u2014 "),TY=a("a"),sEr=o("YolosForObjectDetection"),lEr=o(" (YOLOS model)"),iEr=l(),lE=a("p"),dEr=o("The model is set in evaluation mode by default using "),VMe=a("code"),cEr=o("model.eval()"),fEr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),XMe=a("code"),mEr=o("model.train()"),gEr=l(),F(iE.$$.fragment),qHe=l(),Ec=a("h2"),dE=a("a"),zMe=a("span"),F(g$.$$.fragment),hEr=l(),QMe=a("span"),pEr=o("AutoModelForImageSegmentation"),jHe=l(),tr=a("div"),F(h$.$$.fragment),uEr=l(),Cc=a("p"),_Er=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),MY=a("a"),bEr=o("from_pretrained()"),vEr=o(" class method or the "),EY=a("a"),FEr=o("from_config()"),TEr=o(` class
method.`),MEr=l(),p$=a("p"),EEr=o("This class cannot be instantiated directly using "),WMe=a("code"),CEr=o("__init__()"),wEr=o(" (throws an error)."),AEr=l(),qt=a("div"),F(u$.$$.fragment),yEr=l(),UMe=a("p"),LEr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),xEr=l(),wc=a("p"),$Er=o(`Note:
Loading a model from its configuration file does `),HMe=a("strong"),kEr=o("not"),SEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CY=a("a"),REr=o("from_pretrained()"),PEr=o(" to load the model weights."),BEr=l(),F(cE.$$.fragment),IEr=l(),To=a("div"),F(_$.$$.fragment),NEr=l(),JMe=a("p"),qEr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),jEr=l(),bn=a("p"),DEr=o("The model class to instantiate is selected based on the "),YMe=a("code"),GEr=o("model_type"),OEr=o(` property of the config object (either
passed as an argument or loaded from `),KMe=a("code"),VEr=o("pretrained_model_name_or_path"),XEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZMe=a("code"),zEr=o("pretrained_model_name_or_path"),QEr=o(":"),WEr=l(),eEe=a("ul"),fE=a("li"),oEe=a("strong"),UEr=o("detr"),HEr=o(" \u2014 "),wY=a("a"),JEr=o("DetrForSegmentation"),YEr=o(" (DETR model)"),KEr=l(),mE=a("p"),ZEr=o("The model is set in evaluation mode by default using "),rEe=a("code"),eCr=o("model.eval()"),oCr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tEe=a("code"),rCr=o("model.train()"),tCr=l(),F(gE.$$.fragment),DHe=l(),Ac=a("h2"),hE=a("a"),aEe=a("span"),F(b$.$$.fragment),aCr=l(),nEe=a("span"),nCr=o("AutoModelForSemanticSegmentation"),GHe=l(),ar=a("div"),F(v$.$$.fragment),sCr=l(),yc=a("p"),lCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),AY=a("a"),iCr=o("from_pretrained()"),dCr=o(" class method or the "),yY=a("a"),cCr=o("from_config()"),fCr=o(` class
method.`),mCr=l(),F$=a("p"),gCr=o("This class cannot be instantiated directly using "),sEe=a("code"),hCr=o("__init__()"),pCr=o(" (throws an error)."),uCr=l(),jt=a("div"),F(T$.$$.fragment),_Cr=l(),lEe=a("p"),bCr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),vCr=l(),Lc=a("p"),FCr=o(`Note:
Loading a model from its configuration file does `),iEe=a("strong"),TCr=o("not"),MCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=a("a"),ECr=o("from_pretrained()"),CCr=o(" to load the model weights."),wCr=l(),F(pE.$$.fragment),ACr=l(),Mo=a("div"),F(M$.$$.fragment),yCr=l(),dEe=a("p"),LCr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),xCr=l(),vn=a("p"),$Cr=o("The model class to instantiate is selected based on the "),cEe=a("code"),kCr=o("model_type"),SCr=o(` property of the config object (either
passed as an argument or loaded from `),fEe=a("code"),RCr=o("pretrained_model_name_or_path"),PCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mEe=a("code"),BCr=o("pretrained_model_name_or_path"),ICr=o(":"),NCr=l(),ct=a("ul"),uE=a("li"),gEe=a("strong"),qCr=o("beit"),jCr=o(" \u2014 "),xY=a("a"),DCr=o("BeitForSemanticSegmentation"),GCr=o(" (BEiT model)"),OCr=l(),_E=a("li"),hEe=a("strong"),VCr=o("data2vec-vision"),XCr=o(" \u2014 "),$Y=a("a"),zCr=o("Data2VecVisionForSemanticSegmentation"),QCr=o(" (Data2VecVision model)"),WCr=l(),bE=a("li"),pEe=a("strong"),UCr=o("dpt"),HCr=o(" \u2014 "),kY=a("a"),JCr=o("DPTForSemanticSegmentation"),YCr=o(" (DPT model)"),KCr=l(),vE=a("li"),uEe=a("strong"),ZCr=o("mobilevit"),e3r=o(" \u2014 "),SY=a("a"),o3r=o("MobileViTForSemanticSegmentation"),r3r=o(" (MobileViT model)"),t3r=l(),FE=a("li"),_Ee=a("strong"),a3r=o("segformer"),n3r=o(" \u2014 "),RY=a("a"),s3r=o("SegformerForSemanticSegmentation"),l3r=o(" (SegFormer model)"),i3r=l(),TE=a("p"),d3r=o("The model is set in evaluation mode by default using "),bEe=a("code"),c3r=o("model.eval()"),f3r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vEe=a("code"),m3r=o("model.train()"),g3r=l(),F(ME.$$.fragment),OHe=l(),xc=a("h2"),EE=a("a"),FEe=a("span"),F(E$.$$.fragment),h3r=l(),TEe=a("span"),p3r=o("AutoModelForInstanceSegmentation"),VHe=l(),nr=a("div"),F(C$.$$.fragment),u3r=l(),$c=a("p"),_3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),PY=a("a"),b3r=o("from_pretrained()"),v3r=o(" class method or the "),BY=a("a"),F3r=o("from_config()"),T3r=o(` class
method.`),M3r=l(),w$=a("p"),E3r=o("This class cannot be instantiated directly using "),MEe=a("code"),C3r=o("__init__()"),w3r=o(" (throws an error)."),A3r=l(),Dt=a("div"),F(A$.$$.fragment),y3r=l(),EEe=a("p"),L3r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),x3r=l(),kc=a("p"),$3r=o(`Note:
Loading a model from its configuration file does `),CEe=a("strong"),k3r=o("not"),S3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=a("a"),R3r=o("from_pretrained()"),P3r=o(" to load the model weights."),B3r=l(),F(CE.$$.fragment),I3r=l(),Eo=a("div"),F(y$.$$.fragment),N3r=l(),wEe=a("p"),q3r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),j3r=l(),Fn=a("p"),D3r=o("The model class to instantiate is selected based on the "),AEe=a("code"),G3r=o("model_type"),O3r=o(` property of the config object (either
passed as an argument or loaded from `),yEe=a("code"),V3r=o("pretrained_model_name_or_path"),X3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LEe=a("code"),z3r=o("pretrained_model_name_or_path"),Q3r=o(":"),W3r=l(),xEe=a("ul"),wE=a("li"),$Ee=a("strong"),U3r=o("maskformer"),H3r=o(" \u2014 "),NY=a("a"),J3r=o("MaskFormerForInstanceSegmentation"),Y3r=o(" (MaskFormer model)"),K3r=l(),AE=a("p"),Z3r=o("The model is set in evaluation mode by default using "),kEe=a("code"),e5r=o("model.eval()"),o5r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SEe=a("code"),r5r=o("model.train()"),t5r=l(),F(yE.$$.fragment),XHe=l(),Sc=a("h2"),LE=a("a"),REe=a("span"),F(L$.$$.fragment),a5r=l(),PEe=a("span"),n5r=o("TFAutoModel"),zHe=l(),sr=a("div"),F(x$.$$.fragment),s5r=l(),Rc=a("p"),l5r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qY=a("a"),i5r=o("from_pretrained()"),d5r=o(" class method or the "),jY=a("a"),c5r=o("from_config()"),f5r=o(` class
method.`),m5r=l(),$$=a("p"),g5r=o("This class cannot be instantiated directly using "),BEe=a("code"),h5r=o("__init__()"),p5r=o(" (throws an error)."),u5r=l(),Gt=a("div"),F(k$.$$.fragment),_5r=l(),IEe=a("p"),b5r=o("Instantiates one of the base model classes of the library from a configuration."),v5r=l(),Pc=a("p"),F5r=o(`Note:
Loading a model from its configuration file does `),NEe=a("strong"),T5r=o("not"),M5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=a("a"),E5r=o("from_pretrained()"),C5r=o(" to load the model weights."),w5r=l(),F(xE.$$.fragment),A5r=l(),Br=a("div"),F(S$.$$.fragment),y5r=l(),qEe=a("p"),L5r=o("Instantiate one of the base model classes of the library from a pretrained model."),x5r=l(),Tn=a("p"),$5r=o("The model class to instantiate is selected based on the "),jEe=a("code"),k5r=o("model_type"),S5r=o(` property of the config object (either
passed as an argument or loaded from `),DEe=a("code"),R5r=o("pretrained_model_name_or_path"),P5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=a("code"),B5r=o("pretrained_model_name_or_path"),I5r=o(":"),N5r=l(),q=a("ul"),$E=a("li"),OEe=a("strong"),q5r=o("albert"),j5r=o(" \u2014 "),GY=a("a"),D5r=o("TFAlbertModel"),G5r=o(" (ALBERT model)"),O5r=l(),kE=a("li"),VEe=a("strong"),V5r=o("bart"),X5r=o(" \u2014 "),OY=a("a"),z5r=o("TFBartModel"),Q5r=o(" (BART model)"),W5r=l(),SE=a("li"),XEe=a("strong"),U5r=o("bert"),H5r=o(" \u2014 "),VY=a("a"),J5r=o("TFBertModel"),Y5r=o(" (BERT model)"),K5r=l(),RE=a("li"),zEe=a("strong"),Z5r=o("blenderbot"),e0r=o(" \u2014 "),XY=a("a"),o0r=o("TFBlenderbotModel"),r0r=o(" (Blenderbot model)"),t0r=l(),PE=a("li"),QEe=a("strong"),a0r=o("blenderbot-small"),n0r=o(" \u2014 "),zY=a("a"),s0r=o("TFBlenderbotSmallModel"),l0r=o(" (BlenderbotSmall model)"),i0r=l(),BE=a("li"),WEe=a("strong"),d0r=o("camembert"),c0r=o(" \u2014 "),QY=a("a"),f0r=o("TFCamembertModel"),m0r=o(" (CamemBERT model)"),g0r=l(),IE=a("li"),UEe=a("strong"),h0r=o("clip"),p0r=o(" \u2014 "),WY=a("a"),u0r=o("TFCLIPModel"),_0r=o(" (CLIP model)"),b0r=l(),NE=a("li"),HEe=a("strong"),v0r=o("convbert"),F0r=o(" \u2014 "),UY=a("a"),T0r=o("TFConvBertModel"),M0r=o(" (ConvBERT model)"),E0r=l(),qE=a("li"),JEe=a("strong"),C0r=o("convnext"),w0r=o(" \u2014 "),HY=a("a"),A0r=o("TFConvNextModel"),y0r=o(" (ConvNeXT model)"),L0r=l(),jE=a("li"),YEe=a("strong"),x0r=o("ctrl"),$0r=o(" \u2014 "),JY=a("a"),k0r=o("TFCTRLModel"),S0r=o(" (CTRL model)"),R0r=l(),DE=a("li"),KEe=a("strong"),P0r=o("data2vec-vision"),B0r=o(" \u2014 "),YY=a("a"),I0r=o("TFData2VecVisionModel"),N0r=o(" (Data2VecVision model)"),q0r=l(),GE=a("li"),ZEe=a("strong"),j0r=o("deberta"),D0r=o(" \u2014 "),KY=a("a"),G0r=o("TFDebertaModel"),O0r=o(" (DeBERTa model)"),V0r=l(),OE=a("li"),eCe=a("strong"),X0r=o("deberta-v2"),z0r=o(" \u2014 "),ZY=a("a"),Q0r=o("TFDebertaV2Model"),W0r=o(" (DeBERTa-v2 model)"),U0r=l(),VE=a("li"),oCe=a("strong"),H0r=o("deit"),J0r=o(" \u2014 "),eK=a("a"),Y0r=o("TFDeiTModel"),K0r=o(" (DeiT model)"),Z0r=l(),XE=a("li"),rCe=a("strong"),ewr=o("distilbert"),owr=o(" \u2014 "),oK=a("a"),rwr=o("TFDistilBertModel"),twr=o(" (DistilBERT model)"),awr=l(),zE=a("li"),tCe=a("strong"),nwr=o("dpr"),swr=o(" \u2014 "),rK=a("a"),lwr=o("TFDPRQuestionEncoder"),iwr=o(" (DPR model)"),dwr=l(),QE=a("li"),aCe=a("strong"),cwr=o("electra"),fwr=o(" \u2014 "),tK=a("a"),mwr=o("TFElectraModel"),gwr=o(" (ELECTRA model)"),hwr=l(),WE=a("li"),nCe=a("strong"),pwr=o("flaubert"),uwr=o(" \u2014 "),aK=a("a"),_wr=o("TFFlaubertModel"),bwr=o(" (FlauBERT model)"),vwr=l(),gl=a("li"),sCe=a("strong"),Fwr=o("funnel"),Twr=o(" \u2014 "),nK=a("a"),Mwr=o("TFFunnelModel"),Ewr=o(" or "),sK=a("a"),Cwr=o("TFFunnelBaseModel"),wwr=o(" (Funnel Transformer model)"),Awr=l(),UE=a("li"),lCe=a("strong"),ywr=o("gpt2"),Lwr=o(" \u2014 "),lK=a("a"),xwr=o("TFGPT2Model"),$wr=o(" (OpenAI GPT-2 model)"),kwr=l(),HE=a("li"),iCe=a("strong"),Swr=o("gptj"),Rwr=o(" \u2014 "),iK=a("a"),Pwr=o("TFGPTJModel"),Bwr=o(" (GPT-J model)"),Iwr=l(),JE=a("li"),dCe=a("strong"),Nwr=o("hubert"),qwr=o(" \u2014 "),dK=a("a"),jwr=o("TFHubertModel"),Dwr=o(" (Hubert model)"),Gwr=l(),YE=a("li"),cCe=a("strong"),Owr=o("layoutlm"),Vwr=o(" \u2014 "),cK=a("a"),Xwr=o("TFLayoutLMModel"),zwr=o(" (LayoutLM model)"),Qwr=l(),KE=a("li"),fCe=a("strong"),Wwr=o("led"),Uwr=o(" \u2014 "),fK=a("a"),Hwr=o("TFLEDModel"),Jwr=o(" (LED model)"),Ywr=l(),ZE=a("li"),mCe=a("strong"),Kwr=o("longformer"),Zwr=o(" \u2014 "),mK=a("a"),eAr=o("TFLongformerModel"),oAr=o(" (Longformer model)"),rAr=l(),eC=a("li"),gCe=a("strong"),tAr=o("lxmert"),aAr=o(" \u2014 "),gK=a("a"),nAr=o("TFLxmertModel"),sAr=o(" (LXMERT model)"),lAr=l(),oC=a("li"),hCe=a("strong"),iAr=o("marian"),dAr=o(" \u2014 "),hK=a("a"),cAr=o("TFMarianModel"),fAr=o(" (Marian model)"),mAr=l(),rC=a("li"),pCe=a("strong"),gAr=o("mbart"),hAr=o(" \u2014 "),pK=a("a"),pAr=o("TFMBartModel"),uAr=o(" (mBART model)"),_Ar=l(),tC=a("li"),uCe=a("strong"),bAr=o("mobilebert"),vAr=o(" \u2014 "),uK=a("a"),FAr=o("TFMobileBertModel"),TAr=o(" (MobileBERT model)"),MAr=l(),aC=a("li"),_Ce=a("strong"),EAr=o("mpnet"),CAr=o(" \u2014 "),_K=a("a"),wAr=o("TFMPNetModel"),AAr=o(" (MPNet model)"),yAr=l(),nC=a("li"),bCe=a("strong"),LAr=o("mt5"),xAr=o(" \u2014 "),bK=a("a"),$Ar=o("TFMT5Model"),kAr=o(" (MT5 model)"),SAr=l(),sC=a("li"),vCe=a("strong"),RAr=o("openai-gpt"),PAr=o(" \u2014 "),vK=a("a"),BAr=o("TFOpenAIGPTModel"),IAr=o(" (OpenAI GPT model)"),NAr=l(),lC=a("li"),FCe=a("strong"),qAr=o("opt"),jAr=o(" \u2014 "),FK=a("a"),DAr=o("TFOPTModel"),GAr=o(" (OPT model)"),OAr=l(),iC=a("li"),TCe=a("strong"),VAr=o("pegasus"),XAr=o(" \u2014 "),TK=a("a"),zAr=o("TFPegasusModel"),QAr=o(" (Pegasus model)"),WAr=l(),dC=a("li"),MCe=a("strong"),UAr=o("regnet"),HAr=o(" \u2014 "),MK=a("a"),JAr=o("TFRegNetModel"),YAr=o(" (RegNet model)"),KAr=l(),cC=a("li"),ECe=a("strong"),ZAr=o("rembert"),e6r=o(" \u2014 "),EK=a("a"),o6r=o("TFRemBertModel"),r6r=o(" (RemBERT model)"),t6r=l(),fC=a("li"),CCe=a("strong"),a6r=o("resnet"),n6r=o(" \u2014 "),CK=a("a"),s6r=o("TFResNetModel"),l6r=o(" (ResNet model)"),i6r=l(),mC=a("li"),wCe=a("strong"),d6r=o("roberta"),c6r=o(" \u2014 "),wK=a("a"),f6r=o("TFRobertaModel"),m6r=o(" (RoBERTa model)"),g6r=l(),gC=a("li"),ACe=a("strong"),h6r=o("roformer"),p6r=o(" \u2014 "),AK=a("a"),u6r=o("TFRoFormerModel"),_6r=o(" (RoFormer model)"),b6r=l(),hC=a("li"),yCe=a("strong"),v6r=o("segformer"),F6r=o(" \u2014 "),yK=a("a"),T6r=o("TFSegformerModel"),M6r=o(" (SegFormer model)"),E6r=l(),pC=a("li"),LCe=a("strong"),C6r=o("speech_to_text"),w6r=o(" \u2014 "),LK=a("a"),A6r=o("TFSpeech2TextModel"),y6r=o(" (Speech2Text model)"),L6r=l(),uC=a("li"),xCe=a("strong"),x6r=o("swin"),$6r=o(" \u2014 "),xK=a("a"),k6r=o("TFSwinModel"),S6r=o(" (Swin Transformer model)"),R6r=l(),_C=a("li"),$Ce=a("strong"),P6r=o("t5"),B6r=o(" \u2014 "),$K=a("a"),I6r=o("TFT5Model"),N6r=o(" (T5 model)"),q6r=l(),bC=a("li"),kCe=a("strong"),j6r=o("tapas"),D6r=o(" \u2014 "),kK=a("a"),G6r=o("TFTapasModel"),O6r=o(" (TAPAS model)"),V6r=l(),vC=a("li"),SCe=a("strong"),X6r=o("transfo-xl"),z6r=o(" \u2014 "),SK=a("a"),Q6r=o("TFTransfoXLModel"),W6r=o(" (Transformer-XL model)"),U6r=l(),FC=a("li"),RCe=a("strong"),H6r=o("vit"),J6r=o(" \u2014 "),RK=a("a"),Y6r=o("TFViTModel"),K6r=o(" (ViT model)"),Z6r=l(),TC=a("li"),PCe=a("strong"),e7r=o("vit_mae"),o7r=o(" \u2014 "),PK=a("a"),r7r=o("TFViTMAEModel"),t7r=o(" (ViTMAE model)"),a7r=l(),MC=a("li"),BCe=a("strong"),n7r=o("wav2vec2"),s7r=o(" \u2014 "),BK=a("a"),l7r=o("TFWav2Vec2Model"),i7r=o(" (Wav2Vec2 model)"),d7r=l(),EC=a("li"),ICe=a("strong"),c7r=o("xlm"),f7r=o(" \u2014 "),IK=a("a"),m7r=o("TFXLMModel"),g7r=o(" (XLM model)"),h7r=l(),CC=a("li"),NCe=a("strong"),p7r=o("xlm-roberta"),u7r=o(" \u2014 "),NK=a("a"),_7r=o("TFXLMRobertaModel"),b7r=o(" (XLM-RoBERTa model)"),v7r=l(),wC=a("li"),qCe=a("strong"),F7r=o("xlnet"),T7r=o(" \u2014 "),qK=a("a"),M7r=o("TFXLNetModel"),E7r=o(" (XLNet model)"),C7r=l(),F(AC.$$.fragment),QHe=l(),Bc=a("h2"),yC=a("a"),jCe=a("span"),F(R$.$$.fragment),w7r=l(),DCe=a("span"),A7r=o("TFAutoModelForPreTraining"),WHe=l(),lr=a("div"),F(P$.$$.fragment),y7r=l(),Ic=a("p"),L7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jK=a("a"),x7r=o("from_pretrained()"),$7r=o(" class method or the "),DK=a("a"),k7r=o("from_config()"),S7r=o(` class
method.`),R7r=l(),B$=a("p"),P7r=o("This class cannot be instantiated directly using "),GCe=a("code"),B7r=o("__init__()"),I7r=o(" (throws an error)."),N7r=l(),Ot=a("div"),F(I$.$$.fragment),q7r=l(),OCe=a("p"),j7r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),D7r=l(),Nc=a("p"),G7r=o(`Note:
Loading a model from its configuration file does `),VCe=a("strong"),O7r=o("not"),V7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GK=a("a"),X7r=o("from_pretrained()"),z7r=o(" to load the model weights."),Q7r=l(),F(LC.$$.fragment),W7r=l(),Ir=a("div"),F(N$.$$.fragment),U7r=l(),XCe=a("p"),H7r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),J7r=l(),Mn=a("p"),Y7r=o("The model class to instantiate is selected based on the "),zCe=a("code"),K7r=o("model_type"),Z7r=o(` property of the config object (either
passed as an argument or loaded from `),QCe=a("code"),eyr=o("pretrained_model_name_or_path"),oyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WCe=a("code"),ryr=o("pretrained_model_name_or_path"),tyr=o(":"),ayr=l(),se=a("ul"),xC=a("li"),UCe=a("strong"),nyr=o("albert"),syr=o(" \u2014 "),OK=a("a"),lyr=o("TFAlbertForPreTraining"),iyr=o(" (ALBERT model)"),dyr=l(),$C=a("li"),HCe=a("strong"),cyr=o("bart"),fyr=o(" \u2014 "),VK=a("a"),myr=o("TFBartForConditionalGeneration"),gyr=o(" (BART model)"),hyr=l(),kC=a("li"),JCe=a("strong"),pyr=o("bert"),uyr=o(" \u2014 "),XK=a("a"),_yr=o("TFBertForPreTraining"),byr=o(" (BERT model)"),vyr=l(),SC=a("li"),YCe=a("strong"),Fyr=o("camembert"),Tyr=o(" \u2014 "),zK=a("a"),Myr=o("TFCamembertForMaskedLM"),Eyr=o(" (CamemBERT model)"),Cyr=l(),RC=a("li"),KCe=a("strong"),wyr=o("ctrl"),Ayr=o(" \u2014 "),QK=a("a"),yyr=o("TFCTRLLMHeadModel"),Lyr=o(" (CTRL model)"),xyr=l(),PC=a("li"),ZCe=a("strong"),$yr=o("distilbert"),kyr=o(" \u2014 "),WK=a("a"),Syr=o("TFDistilBertForMaskedLM"),Ryr=o(" (DistilBERT model)"),Pyr=l(),BC=a("li"),e3e=a("strong"),Byr=o("electra"),Iyr=o(" \u2014 "),UK=a("a"),Nyr=o("TFElectraForPreTraining"),qyr=o(" (ELECTRA model)"),jyr=l(),IC=a("li"),o3e=a("strong"),Dyr=o("flaubert"),Gyr=o(" \u2014 "),HK=a("a"),Oyr=o("TFFlaubertWithLMHeadModel"),Vyr=o(" (FlauBERT model)"),Xyr=l(),NC=a("li"),r3e=a("strong"),zyr=o("funnel"),Qyr=o(" \u2014 "),JK=a("a"),Wyr=o("TFFunnelForPreTraining"),Uyr=o(" (Funnel Transformer model)"),Hyr=l(),qC=a("li"),t3e=a("strong"),Jyr=o("gpt2"),Yyr=o(" \u2014 "),YK=a("a"),Kyr=o("TFGPT2LMHeadModel"),Zyr=o(" (OpenAI GPT-2 model)"),eLr=l(),jC=a("li"),a3e=a("strong"),oLr=o("layoutlm"),rLr=o(" \u2014 "),KK=a("a"),tLr=o("TFLayoutLMForMaskedLM"),aLr=o(" (LayoutLM model)"),nLr=l(),DC=a("li"),n3e=a("strong"),sLr=o("lxmert"),lLr=o(" \u2014 "),ZK=a("a"),iLr=o("TFLxmertForPreTraining"),dLr=o(" (LXMERT model)"),cLr=l(),GC=a("li"),s3e=a("strong"),fLr=o("mobilebert"),mLr=o(" \u2014 "),eZ=a("a"),gLr=o("TFMobileBertForPreTraining"),hLr=o(" (MobileBERT model)"),pLr=l(),OC=a("li"),l3e=a("strong"),uLr=o("mpnet"),_Lr=o(" \u2014 "),oZ=a("a"),bLr=o("TFMPNetForMaskedLM"),vLr=o(" (MPNet model)"),FLr=l(),VC=a("li"),i3e=a("strong"),TLr=o("openai-gpt"),MLr=o(" \u2014 "),rZ=a("a"),ELr=o("TFOpenAIGPTLMHeadModel"),CLr=o(" (OpenAI GPT model)"),wLr=l(),XC=a("li"),d3e=a("strong"),ALr=o("roberta"),yLr=o(" \u2014 "),tZ=a("a"),LLr=o("TFRobertaForMaskedLM"),xLr=o(" (RoBERTa model)"),$Lr=l(),zC=a("li"),c3e=a("strong"),kLr=o("t5"),SLr=o(" \u2014 "),aZ=a("a"),RLr=o("TFT5ForConditionalGeneration"),PLr=o(" (T5 model)"),BLr=l(),QC=a("li"),f3e=a("strong"),ILr=o("tapas"),NLr=o(" \u2014 "),nZ=a("a"),qLr=o("TFTapasForMaskedLM"),jLr=o(" (TAPAS model)"),DLr=l(),WC=a("li"),m3e=a("strong"),GLr=o("transfo-xl"),OLr=o(" \u2014 "),sZ=a("a"),VLr=o("TFTransfoXLLMHeadModel"),XLr=o(" (Transformer-XL model)"),zLr=l(),UC=a("li"),g3e=a("strong"),QLr=o("vit_mae"),WLr=o(" \u2014 "),lZ=a("a"),ULr=o("TFViTMAEForPreTraining"),HLr=o(" (ViTMAE model)"),JLr=l(),HC=a("li"),h3e=a("strong"),YLr=o("xlm"),KLr=o(" \u2014 "),iZ=a("a"),ZLr=o("TFXLMWithLMHeadModel"),e9r=o(" (XLM model)"),o9r=l(),JC=a("li"),p3e=a("strong"),r9r=o("xlm-roberta"),t9r=o(" \u2014 "),dZ=a("a"),a9r=o("TFXLMRobertaForMaskedLM"),n9r=o(" (XLM-RoBERTa model)"),s9r=l(),YC=a("li"),u3e=a("strong"),l9r=o("xlnet"),i9r=o(" \u2014 "),cZ=a("a"),d9r=o("TFXLNetLMHeadModel"),c9r=o(" (XLNet model)"),f9r=l(),F(KC.$$.fragment),UHe=l(),qc=a("h2"),ZC=a("a"),_3e=a("span"),F(q$.$$.fragment),m9r=l(),b3e=a("span"),g9r=o("TFAutoModelForCausalLM"),HHe=l(),ir=a("div"),F(j$.$$.fragment),h9r=l(),jc=a("p"),p9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fZ=a("a"),u9r=o("from_pretrained()"),_9r=o(" class method or the "),mZ=a("a"),b9r=o("from_config()"),v9r=o(` class
method.`),F9r=l(),D$=a("p"),T9r=o("This class cannot be instantiated directly using "),v3e=a("code"),M9r=o("__init__()"),E9r=o(" (throws an error)."),C9r=l(),Vt=a("div"),F(G$.$$.fragment),w9r=l(),F3e=a("p"),A9r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),y9r=l(),Dc=a("p"),L9r=o(`Note:
Loading a model from its configuration file does `),T3e=a("strong"),x9r=o("not"),$9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=a("a"),k9r=o("from_pretrained()"),S9r=o(" to load the model weights."),R9r=l(),F(e3.$$.fragment),P9r=l(),Nr=a("div"),F(O$.$$.fragment),B9r=l(),M3e=a("p"),I9r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),N9r=l(),En=a("p"),q9r=o("The model class to instantiate is selected based on the "),E3e=a("code"),j9r=o("model_type"),D9r=o(` property of the config object (either
passed as an argument or loaded from `),C3e=a("code"),G9r=o("pretrained_model_name_or_path"),O9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w3e=a("code"),V9r=o("pretrained_model_name_or_path"),X9r=o(":"),z9r=l(),Me=a("ul"),o3=a("li"),A3e=a("strong"),Q9r=o("bert"),W9r=o(" \u2014 "),hZ=a("a"),U9r=o("TFBertLMHeadModel"),H9r=o(" (BERT model)"),J9r=l(),r3=a("li"),y3e=a("strong"),Y9r=o("camembert"),K9r=o(" \u2014 "),pZ=a("a"),Z9r=o("TFCamembertForCausalLM"),exr=o(" (CamemBERT model)"),oxr=l(),t3=a("li"),L3e=a("strong"),rxr=o("ctrl"),txr=o(" \u2014 "),uZ=a("a"),axr=o("TFCTRLLMHeadModel"),nxr=o(" (CTRL model)"),sxr=l(),a3=a("li"),x3e=a("strong"),lxr=o("gpt2"),ixr=o(" \u2014 "),_Z=a("a"),dxr=o("TFGPT2LMHeadModel"),cxr=o(" (OpenAI GPT-2 model)"),fxr=l(),n3=a("li"),$3e=a("strong"),mxr=o("gptj"),gxr=o(" \u2014 "),bZ=a("a"),hxr=o("TFGPTJForCausalLM"),pxr=o(" (GPT-J model)"),uxr=l(),s3=a("li"),k3e=a("strong"),_xr=o("openai-gpt"),bxr=o(" \u2014 "),vZ=a("a"),vxr=o("TFOpenAIGPTLMHeadModel"),Fxr=o(" (OpenAI GPT model)"),Txr=l(),l3=a("li"),S3e=a("strong"),Mxr=o("opt"),Exr=o(" \u2014 "),FZ=a("a"),Cxr=o("TFOPTForCausalLM"),wxr=o(" (OPT model)"),Axr=l(),i3=a("li"),R3e=a("strong"),yxr=o("rembert"),Lxr=o(" \u2014 "),TZ=a("a"),xxr=o("TFRemBertForCausalLM"),$xr=o(" (RemBERT model)"),kxr=l(),d3=a("li"),P3e=a("strong"),Sxr=o("roberta"),Rxr=o(" \u2014 "),MZ=a("a"),Pxr=o("TFRobertaForCausalLM"),Bxr=o(" (RoBERTa model)"),Ixr=l(),c3=a("li"),B3e=a("strong"),Nxr=o("roformer"),qxr=o(" \u2014 "),EZ=a("a"),jxr=o("TFRoFormerForCausalLM"),Dxr=o(" (RoFormer model)"),Gxr=l(),f3=a("li"),I3e=a("strong"),Oxr=o("transfo-xl"),Vxr=o(" \u2014 "),CZ=a("a"),Xxr=o("TFTransfoXLLMHeadModel"),zxr=o(" (Transformer-XL model)"),Qxr=l(),m3=a("li"),N3e=a("strong"),Wxr=o("xlm"),Uxr=o(" \u2014 "),wZ=a("a"),Hxr=o("TFXLMWithLMHeadModel"),Jxr=o(" (XLM model)"),Yxr=l(),g3=a("li"),q3e=a("strong"),Kxr=o("xlnet"),Zxr=o(" \u2014 "),AZ=a("a"),e$r=o("TFXLNetLMHeadModel"),o$r=o(" (XLNet model)"),r$r=l(),F(h3.$$.fragment),JHe=l(),Gc=a("h2"),p3=a("a"),j3e=a("span"),F(V$.$$.fragment),t$r=l(),D3e=a("span"),a$r=o("TFAutoModelForImageClassification"),YHe=l(),dr=a("div"),F(X$.$$.fragment),n$r=l(),Oc=a("p"),s$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),yZ=a("a"),l$r=o("from_pretrained()"),i$r=o(" class method or the "),LZ=a("a"),d$r=o("from_config()"),c$r=o(` class
method.`),f$r=l(),z$=a("p"),m$r=o("This class cannot be instantiated directly using "),G3e=a("code"),g$r=o("__init__()"),h$r=o(" (throws an error)."),p$r=l(),Xt=a("div"),F(Q$.$$.fragment),u$r=l(),O3e=a("p"),_$r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),b$r=l(),Vc=a("p"),v$r=o(`Note:
Loading a model from its configuration file does `),V3e=a("strong"),F$r=o("not"),T$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xZ=a("a"),M$r=o("from_pretrained()"),E$r=o(" to load the model weights."),C$r=l(),F(u3.$$.fragment),w$r=l(),qr=a("div"),F(W$.$$.fragment),A$r=l(),X3e=a("p"),y$r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),L$r=l(),Cn=a("p"),x$r=o("The model class to instantiate is selected based on the "),z3e=a("code"),$$r=o("model_type"),k$r=o(` property of the config object (either
passed as an argument or loaded from `),Q3e=a("code"),S$r=o("pretrained_model_name_or_path"),R$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W3e=a("code"),P$r=o("pretrained_model_name_or_path"),B$r=o(":"),I$r=l(),Ve=a("ul"),_3=a("li"),U3e=a("strong"),N$r=o("convnext"),q$r=o(" \u2014 "),$Z=a("a"),j$r=o("TFConvNextForImageClassification"),D$r=o(" (ConvNeXT model)"),G$r=l(),b3=a("li"),H3e=a("strong"),O$r=o("data2vec-vision"),V$r=o(" \u2014 "),kZ=a("a"),X$r=o("TFData2VecVisionForImageClassification"),z$r=o(" (Data2VecVision model)"),Q$r=l(),hl=a("li"),J3e=a("strong"),W$r=o("deit"),U$r=o(" \u2014 "),SZ=a("a"),H$r=o("TFDeiTForImageClassification"),J$r=o(" or "),RZ=a("a"),Y$r=o("TFDeiTForImageClassificationWithTeacher"),K$r=o(" (DeiT model)"),Z$r=l(),v3=a("li"),Y3e=a("strong"),ekr=o("regnet"),okr=o(" \u2014 "),PZ=a("a"),rkr=o("TFRegNetForImageClassification"),tkr=o(" (RegNet model)"),akr=l(),F3=a("li"),K3e=a("strong"),nkr=o("resnet"),skr=o(" \u2014 "),BZ=a("a"),lkr=o("TFResNetForImageClassification"),ikr=o(" (ResNet model)"),dkr=l(),T3=a("li"),Z3e=a("strong"),ckr=o("segformer"),fkr=o(" \u2014 "),IZ=a("a"),mkr=o("TFSegformerForImageClassification"),gkr=o(" (SegFormer model)"),hkr=l(),M3=a("li"),e5e=a("strong"),pkr=o("swin"),ukr=o(" \u2014 "),NZ=a("a"),_kr=o("TFSwinForImageClassification"),bkr=o(" (Swin Transformer model)"),vkr=l(),E3=a("li"),o5e=a("strong"),Fkr=o("vit"),Tkr=o(" \u2014 "),qZ=a("a"),Mkr=o("TFViTForImageClassification"),Ekr=o(" (ViT model)"),Ckr=l(),F(C3.$$.fragment),KHe=l(),Xc=a("h2"),w3=a("a"),r5e=a("span"),F(U$.$$.fragment),wkr=l(),t5e=a("span"),Akr=o("TFAutoModelForSemanticSegmentation"),ZHe=l(),cr=a("div"),F(H$.$$.fragment),ykr=l(),zc=a("p"),Lkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),jZ=a("a"),xkr=o("from_pretrained()"),$kr=o(" class method or the "),DZ=a("a"),kkr=o("from_config()"),Skr=o(` class
method.`),Rkr=l(),J$=a("p"),Pkr=o("This class cannot be instantiated directly using "),a5e=a("code"),Bkr=o("__init__()"),Ikr=o(" (throws an error)."),Nkr=l(),zt=a("div"),F(Y$.$$.fragment),qkr=l(),n5e=a("p"),jkr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Dkr=l(),Qc=a("p"),Gkr=o(`Note:
Loading a model from its configuration file does `),s5e=a("strong"),Okr=o("not"),Vkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GZ=a("a"),Xkr=o("from_pretrained()"),zkr=o(" to load the model weights."),Qkr=l(),F(A3.$$.fragment),Wkr=l(),jr=a("div"),F(K$.$$.fragment),Ukr=l(),l5e=a("p"),Hkr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Jkr=l(),wn=a("p"),Ykr=o("The model class to instantiate is selected based on the "),i5e=a("code"),Kkr=o("model_type"),Zkr=o(` property of the config object (either
passed as an argument or loaded from `),d5e=a("code"),eSr=o("pretrained_model_name_or_path"),oSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c5e=a("code"),rSr=o("pretrained_model_name_or_path"),tSr=o(":"),aSr=l(),Z$=a("ul"),y3=a("li"),f5e=a("strong"),nSr=o("data2vec-vision"),sSr=o(" \u2014 "),OZ=a("a"),lSr=o("TFData2VecVisionForSemanticSegmentation"),iSr=o(" (Data2VecVision model)"),dSr=l(),L3=a("li"),m5e=a("strong"),cSr=o("segformer"),fSr=o(" \u2014 "),VZ=a("a"),mSr=o("TFSegformerForSemanticSegmentation"),gSr=o(" (SegFormer model)"),hSr=l(),F(x3.$$.fragment),eJe=l(),Wc=a("h2"),$3=a("a"),g5e=a("span"),F(ek.$$.fragment),pSr=l(),h5e=a("span"),uSr=o("TFAutoModelForMaskedLM"),oJe=l(),fr=a("div"),F(ok.$$.fragment),_Sr=l(),Uc=a("p"),bSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XZ=a("a"),vSr=o("from_pretrained()"),FSr=o(" class method or the "),zZ=a("a"),TSr=o("from_config()"),MSr=o(` class
method.`),ESr=l(),rk=a("p"),CSr=o("This class cannot be instantiated directly using "),p5e=a("code"),wSr=o("__init__()"),ASr=o(" (throws an error)."),ySr=l(),Qt=a("div"),F(tk.$$.fragment),LSr=l(),u5e=a("p"),xSr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$Sr=l(),Hc=a("p"),kSr=o(`Note:
Loading a model from its configuration file does `),_5e=a("strong"),SSr=o("not"),RSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=a("a"),PSr=o("from_pretrained()"),BSr=o(" to load the model weights."),ISr=l(),F(k3.$$.fragment),NSr=l(),Dr=a("div"),F(ak.$$.fragment),qSr=l(),b5e=a("p"),jSr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),DSr=l(),An=a("p"),GSr=o("The model class to instantiate is selected based on the "),v5e=a("code"),OSr=o("model_type"),VSr=o(` property of the config object (either
passed as an argument or loaded from `),F5e=a("code"),XSr=o("pretrained_model_name_or_path"),zSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T5e=a("code"),QSr=o("pretrained_model_name_or_path"),WSr=o(":"),USr=l(),de=a("ul"),S3=a("li"),M5e=a("strong"),HSr=o("albert"),JSr=o(" \u2014 "),WZ=a("a"),YSr=o("TFAlbertForMaskedLM"),KSr=o(" (ALBERT model)"),ZSr=l(),R3=a("li"),E5e=a("strong"),eRr=o("bert"),oRr=o(" \u2014 "),UZ=a("a"),rRr=o("TFBertForMaskedLM"),tRr=o(" (BERT model)"),aRr=l(),P3=a("li"),C5e=a("strong"),nRr=o("camembert"),sRr=o(" \u2014 "),HZ=a("a"),lRr=o("TFCamembertForMaskedLM"),iRr=o(" (CamemBERT model)"),dRr=l(),B3=a("li"),w5e=a("strong"),cRr=o("convbert"),fRr=o(" \u2014 "),JZ=a("a"),mRr=o("TFConvBertForMaskedLM"),gRr=o(" (ConvBERT model)"),hRr=l(),I3=a("li"),A5e=a("strong"),pRr=o("deberta"),uRr=o(" \u2014 "),YZ=a("a"),_Rr=o("TFDebertaForMaskedLM"),bRr=o(" (DeBERTa model)"),vRr=l(),N3=a("li"),y5e=a("strong"),FRr=o("deberta-v2"),TRr=o(" \u2014 "),KZ=a("a"),MRr=o("TFDebertaV2ForMaskedLM"),ERr=o(" (DeBERTa-v2 model)"),CRr=l(),q3=a("li"),L5e=a("strong"),wRr=o("distilbert"),ARr=o(" \u2014 "),ZZ=a("a"),yRr=o("TFDistilBertForMaskedLM"),LRr=o(" (DistilBERT model)"),xRr=l(),j3=a("li"),x5e=a("strong"),$Rr=o("electra"),kRr=o(" \u2014 "),eee=a("a"),SRr=o("TFElectraForMaskedLM"),RRr=o(" (ELECTRA model)"),PRr=l(),D3=a("li"),$5e=a("strong"),BRr=o("flaubert"),IRr=o(" \u2014 "),oee=a("a"),NRr=o("TFFlaubertWithLMHeadModel"),qRr=o(" (FlauBERT model)"),jRr=l(),G3=a("li"),k5e=a("strong"),DRr=o("funnel"),GRr=o(" \u2014 "),ree=a("a"),ORr=o("TFFunnelForMaskedLM"),VRr=o(" (Funnel Transformer model)"),XRr=l(),O3=a("li"),S5e=a("strong"),zRr=o("layoutlm"),QRr=o(" \u2014 "),tee=a("a"),WRr=o("TFLayoutLMForMaskedLM"),URr=o(" (LayoutLM model)"),HRr=l(),V3=a("li"),R5e=a("strong"),JRr=o("longformer"),YRr=o(" \u2014 "),aee=a("a"),KRr=o("TFLongformerForMaskedLM"),ZRr=o(" (Longformer model)"),ePr=l(),X3=a("li"),P5e=a("strong"),oPr=o("mobilebert"),rPr=o(" \u2014 "),nee=a("a"),tPr=o("TFMobileBertForMaskedLM"),aPr=o(" (MobileBERT model)"),nPr=l(),z3=a("li"),B5e=a("strong"),sPr=o("mpnet"),lPr=o(" \u2014 "),see=a("a"),iPr=o("TFMPNetForMaskedLM"),dPr=o(" (MPNet model)"),cPr=l(),Q3=a("li"),I5e=a("strong"),fPr=o("rembert"),mPr=o(" \u2014 "),lee=a("a"),gPr=o("TFRemBertForMaskedLM"),hPr=o(" (RemBERT model)"),pPr=l(),W3=a("li"),N5e=a("strong"),uPr=o("roberta"),_Pr=o(" \u2014 "),iee=a("a"),bPr=o("TFRobertaForMaskedLM"),vPr=o(" (RoBERTa model)"),FPr=l(),U3=a("li"),q5e=a("strong"),TPr=o("roformer"),MPr=o(" \u2014 "),dee=a("a"),EPr=o("TFRoFormerForMaskedLM"),CPr=o(" (RoFormer model)"),wPr=l(),H3=a("li"),j5e=a("strong"),APr=o("tapas"),yPr=o(" \u2014 "),cee=a("a"),LPr=o("TFTapasForMaskedLM"),xPr=o(" (TAPAS model)"),$Pr=l(),J3=a("li"),D5e=a("strong"),kPr=o("xlm"),SPr=o(" \u2014 "),fee=a("a"),RPr=o("TFXLMWithLMHeadModel"),PPr=o(" (XLM model)"),BPr=l(),Y3=a("li"),G5e=a("strong"),IPr=o("xlm-roberta"),NPr=o(" \u2014 "),mee=a("a"),qPr=o("TFXLMRobertaForMaskedLM"),jPr=o(" (XLM-RoBERTa model)"),DPr=l(),F(K3.$$.fragment),rJe=l(),Jc=a("h2"),Z3=a("a"),O5e=a("span"),F(nk.$$.fragment),GPr=l(),V5e=a("span"),OPr=o("TFAutoModelForSeq2SeqLM"),tJe=l(),mr=a("div"),F(sk.$$.fragment),VPr=l(),Yc=a("p"),XPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gee=a("a"),zPr=o("from_pretrained()"),QPr=o(" class method or the "),hee=a("a"),WPr=o("from_config()"),UPr=o(` class
method.`),HPr=l(),lk=a("p"),JPr=o("This class cannot be instantiated directly using "),X5e=a("code"),YPr=o("__init__()"),KPr=o(" (throws an error)."),ZPr=l(),Wt=a("div"),F(ik.$$.fragment),eBr=l(),z5e=a("p"),oBr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rBr=l(),Kc=a("p"),tBr=o(`Note:
Loading a model from its configuration file does `),Q5e=a("strong"),aBr=o("not"),nBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pee=a("a"),sBr=o("from_pretrained()"),lBr=o(" to load the model weights."),iBr=l(),F(e5.$$.fragment),dBr=l(),Gr=a("div"),F(dk.$$.fragment),cBr=l(),W5e=a("p"),fBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mBr=l(),yn=a("p"),gBr=o("The model class to instantiate is selected based on the "),U5e=a("code"),hBr=o("model_type"),pBr=o(` property of the config object (either
passed as an argument or loaded from `),H5e=a("code"),uBr=o("pretrained_model_name_or_path"),_Br=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J5e=a("code"),bBr=o("pretrained_model_name_or_path"),vBr=o(":"),FBr=l(),Le=a("ul"),o5=a("li"),Y5e=a("strong"),TBr=o("bart"),MBr=o(" \u2014 "),uee=a("a"),EBr=o("TFBartForConditionalGeneration"),CBr=o(" (BART model)"),wBr=l(),r5=a("li"),K5e=a("strong"),ABr=o("blenderbot"),yBr=o(" \u2014 "),_ee=a("a"),LBr=o("TFBlenderbotForConditionalGeneration"),xBr=o(" (Blenderbot model)"),$Br=l(),t5=a("li"),Z5e=a("strong"),kBr=o("blenderbot-small"),SBr=o(" \u2014 "),bee=a("a"),RBr=o("TFBlenderbotSmallForConditionalGeneration"),PBr=o(" (BlenderbotSmall model)"),BBr=l(),a5=a("li"),e0e=a("strong"),IBr=o("encoder-decoder"),NBr=o(" \u2014 "),vee=a("a"),qBr=o("TFEncoderDecoderModel"),jBr=o(" (Encoder decoder model)"),DBr=l(),n5=a("li"),o0e=a("strong"),GBr=o("led"),OBr=o(" \u2014 "),Fee=a("a"),VBr=o("TFLEDForConditionalGeneration"),XBr=o(" (LED model)"),zBr=l(),s5=a("li"),r0e=a("strong"),QBr=o("marian"),WBr=o(" \u2014 "),Tee=a("a"),UBr=o("TFMarianMTModel"),HBr=o(" (Marian model)"),JBr=l(),l5=a("li"),t0e=a("strong"),YBr=o("mbart"),KBr=o(" \u2014 "),Mee=a("a"),ZBr=o("TFMBartForConditionalGeneration"),eIr=o(" (mBART model)"),oIr=l(),i5=a("li"),a0e=a("strong"),rIr=o("mt5"),tIr=o(" \u2014 "),Eee=a("a"),aIr=o("TFMT5ForConditionalGeneration"),nIr=o(" (MT5 model)"),sIr=l(),d5=a("li"),n0e=a("strong"),lIr=o("pegasus"),iIr=o(" \u2014 "),Cee=a("a"),dIr=o("TFPegasusForConditionalGeneration"),cIr=o(" (Pegasus model)"),fIr=l(),c5=a("li"),s0e=a("strong"),mIr=o("t5"),gIr=o(" \u2014 "),wee=a("a"),hIr=o("TFT5ForConditionalGeneration"),pIr=o(" (T5 model)"),uIr=l(),F(f5.$$.fragment),aJe=l(),Zc=a("h2"),m5=a("a"),l0e=a("span"),F(ck.$$.fragment),_Ir=l(),i0e=a("span"),bIr=o("TFAutoModelForSequenceClassification"),nJe=l(),gr=a("div"),F(fk.$$.fragment),vIr=l(),ef=a("p"),FIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Aee=a("a"),TIr=o("from_pretrained()"),MIr=o(" class method or the "),yee=a("a"),EIr=o("from_config()"),CIr=o(` class
method.`),wIr=l(),mk=a("p"),AIr=o("This class cannot be instantiated directly using "),d0e=a("code"),yIr=o("__init__()"),LIr=o(" (throws an error)."),xIr=l(),Ut=a("div"),F(gk.$$.fragment),$Ir=l(),c0e=a("p"),kIr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),SIr=l(),of=a("p"),RIr=o(`Note:
Loading a model from its configuration file does `),f0e=a("strong"),PIr=o("not"),BIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lee=a("a"),IIr=o("from_pretrained()"),NIr=o(" to load the model weights."),qIr=l(),F(g5.$$.fragment),jIr=l(),Or=a("div"),F(hk.$$.fragment),DIr=l(),m0e=a("p"),GIr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),OIr=l(),Ln=a("p"),VIr=o("The model class to instantiate is selected based on the "),g0e=a("code"),XIr=o("model_type"),zIr=o(` property of the config object (either
passed as an argument or loaded from `),h0e=a("code"),QIr=o("pretrained_model_name_or_path"),WIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p0e=a("code"),UIr=o("pretrained_model_name_or_path"),HIr=o(":"),JIr=l(),te=a("ul"),h5=a("li"),u0e=a("strong"),YIr=o("albert"),KIr=o(" \u2014 "),xee=a("a"),ZIr=o("TFAlbertForSequenceClassification"),eNr=o(" (ALBERT model)"),oNr=l(),p5=a("li"),_0e=a("strong"),rNr=o("bert"),tNr=o(" \u2014 "),$ee=a("a"),aNr=o("TFBertForSequenceClassification"),nNr=o(" (BERT model)"),sNr=l(),u5=a("li"),b0e=a("strong"),lNr=o("camembert"),iNr=o(" \u2014 "),kee=a("a"),dNr=o("TFCamembertForSequenceClassification"),cNr=o(" (CamemBERT model)"),fNr=l(),_5=a("li"),v0e=a("strong"),mNr=o("convbert"),gNr=o(" \u2014 "),See=a("a"),hNr=o("TFConvBertForSequenceClassification"),pNr=o(" (ConvBERT model)"),uNr=l(),b5=a("li"),F0e=a("strong"),_Nr=o("ctrl"),bNr=o(" \u2014 "),Ree=a("a"),vNr=o("TFCTRLForSequenceClassification"),FNr=o(" (CTRL model)"),TNr=l(),v5=a("li"),T0e=a("strong"),MNr=o("deberta"),ENr=o(" \u2014 "),Pee=a("a"),CNr=o("TFDebertaForSequenceClassification"),wNr=o(" (DeBERTa model)"),ANr=l(),F5=a("li"),M0e=a("strong"),yNr=o("deberta-v2"),LNr=o(" \u2014 "),Bee=a("a"),xNr=o("TFDebertaV2ForSequenceClassification"),$Nr=o(" (DeBERTa-v2 model)"),kNr=l(),T5=a("li"),E0e=a("strong"),SNr=o("distilbert"),RNr=o(" \u2014 "),Iee=a("a"),PNr=o("TFDistilBertForSequenceClassification"),BNr=o(" (DistilBERT model)"),INr=l(),M5=a("li"),C0e=a("strong"),NNr=o("electra"),qNr=o(" \u2014 "),Nee=a("a"),jNr=o("TFElectraForSequenceClassification"),DNr=o(" (ELECTRA model)"),GNr=l(),E5=a("li"),w0e=a("strong"),ONr=o("flaubert"),VNr=o(" \u2014 "),qee=a("a"),XNr=o("TFFlaubertForSequenceClassification"),zNr=o(" (FlauBERT model)"),QNr=l(),C5=a("li"),A0e=a("strong"),WNr=o("funnel"),UNr=o(" \u2014 "),jee=a("a"),HNr=o("TFFunnelForSequenceClassification"),JNr=o(" (Funnel Transformer model)"),YNr=l(),w5=a("li"),y0e=a("strong"),KNr=o("gpt2"),ZNr=o(" \u2014 "),Dee=a("a"),eqr=o("TFGPT2ForSequenceClassification"),oqr=o(" (OpenAI GPT-2 model)"),rqr=l(),A5=a("li"),L0e=a("strong"),tqr=o("gptj"),aqr=o(" \u2014 "),Gee=a("a"),nqr=o("TFGPTJForSequenceClassification"),sqr=o(" (GPT-J model)"),lqr=l(),y5=a("li"),x0e=a("strong"),iqr=o("layoutlm"),dqr=o(" \u2014 "),Oee=a("a"),cqr=o("TFLayoutLMForSequenceClassification"),fqr=o(" (LayoutLM model)"),mqr=l(),L5=a("li"),$0e=a("strong"),gqr=o("longformer"),hqr=o(" \u2014 "),Vee=a("a"),pqr=o("TFLongformerForSequenceClassification"),uqr=o(" (Longformer model)"),_qr=l(),x5=a("li"),k0e=a("strong"),bqr=o("mobilebert"),vqr=o(" \u2014 "),Xee=a("a"),Fqr=o("TFMobileBertForSequenceClassification"),Tqr=o(" (MobileBERT model)"),Mqr=l(),$5=a("li"),S0e=a("strong"),Eqr=o("mpnet"),Cqr=o(" \u2014 "),zee=a("a"),wqr=o("TFMPNetForSequenceClassification"),Aqr=o(" (MPNet model)"),yqr=l(),k5=a("li"),R0e=a("strong"),Lqr=o("openai-gpt"),xqr=o(" \u2014 "),Qee=a("a"),$qr=o("TFOpenAIGPTForSequenceClassification"),kqr=o(" (OpenAI GPT model)"),Sqr=l(),S5=a("li"),P0e=a("strong"),Rqr=o("rembert"),Pqr=o(" \u2014 "),Wee=a("a"),Bqr=o("TFRemBertForSequenceClassification"),Iqr=o(" (RemBERT model)"),Nqr=l(),R5=a("li"),B0e=a("strong"),qqr=o("roberta"),jqr=o(" \u2014 "),Uee=a("a"),Dqr=o("TFRobertaForSequenceClassification"),Gqr=o(" (RoBERTa model)"),Oqr=l(),P5=a("li"),I0e=a("strong"),Vqr=o("roformer"),Xqr=o(" \u2014 "),Hee=a("a"),zqr=o("TFRoFormerForSequenceClassification"),Qqr=o(" (RoFormer model)"),Wqr=l(),B5=a("li"),N0e=a("strong"),Uqr=o("tapas"),Hqr=o(" \u2014 "),Jee=a("a"),Jqr=o("TFTapasForSequenceClassification"),Yqr=o(" (TAPAS model)"),Kqr=l(),I5=a("li"),q0e=a("strong"),Zqr=o("transfo-xl"),ejr=o(" \u2014 "),Yee=a("a"),ojr=o("TFTransfoXLForSequenceClassification"),rjr=o(" (Transformer-XL model)"),tjr=l(),N5=a("li"),j0e=a("strong"),ajr=o("xlm"),njr=o(" \u2014 "),Kee=a("a"),sjr=o("TFXLMForSequenceClassification"),ljr=o(" (XLM model)"),ijr=l(),q5=a("li"),D0e=a("strong"),djr=o("xlm-roberta"),cjr=o(" \u2014 "),Zee=a("a"),fjr=o("TFXLMRobertaForSequenceClassification"),mjr=o(" (XLM-RoBERTa model)"),gjr=l(),j5=a("li"),G0e=a("strong"),hjr=o("xlnet"),pjr=o(" \u2014 "),eoe=a("a"),ujr=o("TFXLNetForSequenceClassification"),_jr=o(" (XLNet model)"),bjr=l(),F(D5.$$.fragment),sJe=l(),rf=a("h2"),G5=a("a"),O0e=a("span"),F(pk.$$.fragment),vjr=l(),V0e=a("span"),Fjr=o("TFAutoModelForMultipleChoice"),lJe=l(),hr=a("div"),F(uk.$$.fragment),Tjr=l(),tf=a("p"),Mjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ooe=a("a"),Ejr=o("from_pretrained()"),Cjr=o(" class method or the "),roe=a("a"),wjr=o("from_config()"),Ajr=o(` class
method.`),yjr=l(),_k=a("p"),Ljr=o("This class cannot be instantiated directly using "),X0e=a("code"),xjr=o("__init__()"),$jr=o(" (throws an error)."),kjr=l(),Ht=a("div"),F(bk.$$.fragment),Sjr=l(),z0e=a("p"),Rjr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Pjr=l(),af=a("p"),Bjr=o(`Note:
Loading a model from its configuration file does `),Q0e=a("strong"),Ijr=o("not"),Njr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),toe=a("a"),qjr=o("from_pretrained()"),jjr=o(" to load the model weights."),Djr=l(),F(O5.$$.fragment),Gjr=l(),Vr=a("div"),F(vk.$$.fragment),Ojr=l(),W0e=a("p"),Vjr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Xjr=l(),xn=a("p"),zjr=o("The model class to instantiate is selected based on the "),U0e=a("code"),Qjr=o("model_type"),Wjr=o(` property of the config object (either
passed as an argument or loaded from `),H0e=a("code"),Ujr=o("pretrained_model_name_or_path"),Hjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J0e=a("code"),Jjr=o("pretrained_model_name_or_path"),Yjr=o(":"),Kjr=l(),ve=a("ul"),V5=a("li"),Y0e=a("strong"),Zjr=o("albert"),eDr=o(" \u2014 "),aoe=a("a"),oDr=o("TFAlbertForMultipleChoice"),rDr=o(" (ALBERT model)"),tDr=l(),X5=a("li"),K0e=a("strong"),aDr=o("bert"),nDr=o(" \u2014 "),noe=a("a"),sDr=o("TFBertForMultipleChoice"),lDr=o(" (BERT model)"),iDr=l(),z5=a("li"),Z0e=a("strong"),dDr=o("camembert"),cDr=o(" \u2014 "),soe=a("a"),fDr=o("TFCamembertForMultipleChoice"),mDr=o(" (CamemBERT model)"),gDr=l(),Q5=a("li"),ewe=a("strong"),hDr=o("convbert"),pDr=o(" \u2014 "),loe=a("a"),uDr=o("TFConvBertForMultipleChoice"),_Dr=o(" (ConvBERT model)"),bDr=l(),W5=a("li"),owe=a("strong"),vDr=o("distilbert"),FDr=o(" \u2014 "),ioe=a("a"),TDr=o("TFDistilBertForMultipleChoice"),MDr=o(" (DistilBERT model)"),EDr=l(),U5=a("li"),rwe=a("strong"),CDr=o("electra"),wDr=o(" \u2014 "),doe=a("a"),ADr=o("TFElectraForMultipleChoice"),yDr=o(" (ELECTRA model)"),LDr=l(),H5=a("li"),twe=a("strong"),xDr=o("flaubert"),$Dr=o(" \u2014 "),coe=a("a"),kDr=o("TFFlaubertForMultipleChoice"),SDr=o(" (FlauBERT model)"),RDr=l(),J5=a("li"),awe=a("strong"),PDr=o("funnel"),BDr=o(" \u2014 "),foe=a("a"),IDr=o("TFFunnelForMultipleChoice"),NDr=o(" (Funnel Transformer model)"),qDr=l(),Y5=a("li"),nwe=a("strong"),jDr=o("longformer"),DDr=o(" \u2014 "),moe=a("a"),GDr=o("TFLongformerForMultipleChoice"),ODr=o(" (Longformer model)"),VDr=l(),K5=a("li"),swe=a("strong"),XDr=o("mobilebert"),zDr=o(" \u2014 "),goe=a("a"),QDr=o("TFMobileBertForMultipleChoice"),WDr=o(" (MobileBERT model)"),UDr=l(),Z5=a("li"),lwe=a("strong"),HDr=o("mpnet"),JDr=o(" \u2014 "),hoe=a("a"),YDr=o("TFMPNetForMultipleChoice"),KDr=o(" (MPNet model)"),ZDr=l(),e0=a("li"),iwe=a("strong"),eGr=o("rembert"),oGr=o(" \u2014 "),poe=a("a"),rGr=o("TFRemBertForMultipleChoice"),tGr=o(" (RemBERT model)"),aGr=l(),o0=a("li"),dwe=a("strong"),nGr=o("roberta"),sGr=o(" \u2014 "),uoe=a("a"),lGr=o("TFRobertaForMultipleChoice"),iGr=o(" (RoBERTa model)"),dGr=l(),r0=a("li"),cwe=a("strong"),cGr=o("roformer"),fGr=o(" \u2014 "),_oe=a("a"),mGr=o("TFRoFormerForMultipleChoice"),gGr=o(" (RoFormer model)"),hGr=l(),t0=a("li"),fwe=a("strong"),pGr=o("xlm"),uGr=o(" \u2014 "),boe=a("a"),_Gr=o("TFXLMForMultipleChoice"),bGr=o(" (XLM model)"),vGr=l(),a0=a("li"),mwe=a("strong"),FGr=o("xlm-roberta"),TGr=o(" \u2014 "),voe=a("a"),MGr=o("TFXLMRobertaForMultipleChoice"),EGr=o(" (XLM-RoBERTa model)"),CGr=l(),n0=a("li"),gwe=a("strong"),wGr=o("xlnet"),AGr=o(" \u2014 "),Foe=a("a"),yGr=o("TFXLNetForMultipleChoice"),LGr=o(" (XLNet model)"),xGr=l(),F(s0.$$.fragment),iJe=l(),nf=a("h2"),l0=a("a"),hwe=a("span"),F(Fk.$$.fragment),$Gr=l(),pwe=a("span"),kGr=o("TFAutoModelForNextSentencePrediction"),dJe=l(),pr=a("div"),F(Tk.$$.fragment),SGr=l(),sf=a("p"),RGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Toe=a("a"),PGr=o("from_pretrained()"),BGr=o(" class method or the "),Moe=a("a"),IGr=o("from_config()"),NGr=o(` class
method.`),qGr=l(),Mk=a("p"),jGr=o("This class cannot be instantiated directly using "),uwe=a("code"),DGr=o("__init__()"),GGr=o(" (throws an error)."),OGr=l(),Jt=a("div"),F(Ek.$$.fragment),VGr=l(),_we=a("p"),XGr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zGr=l(),lf=a("p"),QGr=o(`Note:
Loading a model from its configuration file does `),bwe=a("strong"),WGr=o("not"),UGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eoe=a("a"),HGr=o("from_pretrained()"),JGr=o(" to load the model weights."),YGr=l(),F(i0.$$.fragment),KGr=l(),Xr=a("div"),F(Ck.$$.fragment),ZGr=l(),vwe=a("p"),eOr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oOr=l(),$n=a("p"),rOr=o("The model class to instantiate is selected based on the "),Fwe=a("code"),tOr=o("model_type"),aOr=o(` property of the config object (either
passed as an argument or loaded from `),Twe=a("code"),nOr=o("pretrained_model_name_or_path"),sOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mwe=a("code"),lOr=o("pretrained_model_name_or_path"),iOr=o(":"),dOr=l(),wk=a("ul"),d0=a("li"),Ewe=a("strong"),cOr=o("bert"),fOr=o(" \u2014 "),Coe=a("a"),mOr=o("TFBertForNextSentencePrediction"),gOr=o(" (BERT model)"),hOr=l(),c0=a("li"),Cwe=a("strong"),pOr=o("mobilebert"),uOr=o(" \u2014 "),woe=a("a"),_Or=o("TFMobileBertForNextSentencePrediction"),bOr=o(" (MobileBERT model)"),vOr=l(),F(f0.$$.fragment),cJe=l(),df=a("h2"),m0=a("a"),wwe=a("span"),F(Ak.$$.fragment),FOr=l(),Awe=a("span"),TOr=o("TFAutoModelForTableQuestionAnswering"),fJe=l(),ur=a("div"),F(yk.$$.fragment),MOr=l(),cf=a("p"),EOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Aoe=a("a"),COr=o("from_pretrained()"),wOr=o(" class method or the "),yoe=a("a"),AOr=o("from_config()"),yOr=o(` class
method.`),LOr=l(),Lk=a("p"),xOr=o("This class cannot be instantiated directly using "),ywe=a("code"),$Or=o("__init__()"),kOr=o(" (throws an error)."),SOr=l(),Yt=a("div"),F(xk.$$.fragment),ROr=l(),Lwe=a("p"),POr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),BOr=l(),ff=a("p"),IOr=o(`Note:
Loading a model from its configuration file does `),xwe=a("strong"),NOr=o("not"),qOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Loe=a("a"),jOr=o("from_pretrained()"),DOr=o(" to load the model weights."),GOr=l(),F(g0.$$.fragment),OOr=l(),zr=a("div"),F($k.$$.fragment),VOr=l(),$we=a("p"),XOr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zOr=l(),kn=a("p"),QOr=o("The model class to instantiate is selected based on the "),kwe=a("code"),WOr=o("model_type"),UOr=o(` property of the config object (either
passed as an argument or loaded from `),Swe=a("code"),HOr=o("pretrained_model_name_or_path"),JOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rwe=a("code"),YOr=o("pretrained_model_name_or_path"),KOr=o(":"),ZOr=l(),Pwe=a("ul"),h0=a("li"),Bwe=a("strong"),eVr=o("tapas"),oVr=o(" \u2014 "),xoe=a("a"),rVr=o("TFTapasForQuestionAnswering"),tVr=o(" (TAPAS model)"),aVr=l(),F(p0.$$.fragment),mJe=l(),mf=a("h2"),u0=a("a"),Iwe=a("span"),F(kk.$$.fragment),nVr=l(),Nwe=a("span"),sVr=o("TFAutoModelForTokenClassification"),gJe=l(),_r=a("div"),F(Sk.$$.fragment),lVr=l(),gf=a("p"),iVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$oe=a("a"),dVr=o("from_pretrained()"),cVr=o(" class method or the "),koe=a("a"),fVr=o("from_config()"),mVr=o(` class
method.`),gVr=l(),Rk=a("p"),hVr=o("This class cannot be instantiated directly using "),qwe=a("code"),pVr=o("__init__()"),uVr=o(" (throws an error)."),_Vr=l(),Kt=a("div"),F(Pk.$$.fragment),bVr=l(),jwe=a("p"),vVr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),FVr=l(),hf=a("p"),TVr=o(`Note:
Loading a model from its configuration file does `),Dwe=a("strong"),MVr=o("not"),EVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=a("a"),CVr=o("from_pretrained()"),wVr=o(" to load the model weights."),AVr=l(),F(_0.$$.fragment),yVr=l(),Qr=a("div"),F(Bk.$$.fragment),LVr=l(),Gwe=a("p"),xVr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$Vr=l(),Sn=a("p"),kVr=o("The model class to instantiate is selected based on the "),Owe=a("code"),SVr=o("model_type"),RVr=o(` property of the config object (either
passed as an argument or loaded from `),Vwe=a("code"),PVr=o("pretrained_model_name_or_path"),BVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xwe=a("code"),IVr=o("pretrained_model_name_or_path"),NVr=o(":"),qVr=l(),ce=a("ul"),b0=a("li"),zwe=a("strong"),jVr=o("albert"),DVr=o(" \u2014 "),Roe=a("a"),GVr=o("TFAlbertForTokenClassification"),OVr=o(" (ALBERT model)"),VVr=l(),v0=a("li"),Qwe=a("strong"),XVr=o("bert"),zVr=o(" \u2014 "),Poe=a("a"),QVr=o("TFBertForTokenClassification"),WVr=o(" (BERT model)"),UVr=l(),F0=a("li"),Wwe=a("strong"),HVr=o("camembert"),JVr=o(" \u2014 "),Boe=a("a"),YVr=o("TFCamembertForTokenClassification"),KVr=o(" (CamemBERT model)"),ZVr=l(),T0=a("li"),Uwe=a("strong"),eXr=o("convbert"),oXr=o(" \u2014 "),Ioe=a("a"),rXr=o("TFConvBertForTokenClassification"),tXr=o(" (ConvBERT model)"),aXr=l(),M0=a("li"),Hwe=a("strong"),nXr=o("deberta"),sXr=o(" \u2014 "),Noe=a("a"),lXr=o("TFDebertaForTokenClassification"),iXr=o(" (DeBERTa model)"),dXr=l(),E0=a("li"),Jwe=a("strong"),cXr=o("deberta-v2"),fXr=o(" \u2014 "),qoe=a("a"),mXr=o("TFDebertaV2ForTokenClassification"),gXr=o(" (DeBERTa-v2 model)"),hXr=l(),C0=a("li"),Ywe=a("strong"),pXr=o("distilbert"),uXr=o(" \u2014 "),joe=a("a"),_Xr=o("TFDistilBertForTokenClassification"),bXr=o(" (DistilBERT model)"),vXr=l(),w0=a("li"),Kwe=a("strong"),FXr=o("electra"),TXr=o(" \u2014 "),Doe=a("a"),MXr=o("TFElectraForTokenClassification"),EXr=o(" (ELECTRA model)"),CXr=l(),A0=a("li"),Zwe=a("strong"),wXr=o("flaubert"),AXr=o(" \u2014 "),Goe=a("a"),yXr=o("TFFlaubertForTokenClassification"),LXr=o(" (FlauBERT model)"),xXr=l(),y0=a("li"),eAe=a("strong"),$Xr=o("funnel"),kXr=o(" \u2014 "),Ooe=a("a"),SXr=o("TFFunnelForTokenClassification"),RXr=o(" (Funnel Transformer model)"),PXr=l(),L0=a("li"),oAe=a("strong"),BXr=o("layoutlm"),IXr=o(" \u2014 "),Voe=a("a"),NXr=o("TFLayoutLMForTokenClassification"),qXr=o(" (LayoutLM model)"),jXr=l(),x0=a("li"),rAe=a("strong"),DXr=o("longformer"),GXr=o(" \u2014 "),Xoe=a("a"),OXr=o("TFLongformerForTokenClassification"),VXr=o(" (Longformer model)"),XXr=l(),$0=a("li"),tAe=a("strong"),zXr=o("mobilebert"),QXr=o(" \u2014 "),zoe=a("a"),WXr=o("TFMobileBertForTokenClassification"),UXr=o(" (MobileBERT model)"),HXr=l(),k0=a("li"),aAe=a("strong"),JXr=o("mpnet"),YXr=o(" \u2014 "),Qoe=a("a"),KXr=o("TFMPNetForTokenClassification"),ZXr=o(" (MPNet model)"),ezr=l(),S0=a("li"),nAe=a("strong"),ozr=o("rembert"),rzr=o(" \u2014 "),Woe=a("a"),tzr=o("TFRemBertForTokenClassification"),azr=o(" (RemBERT model)"),nzr=l(),R0=a("li"),sAe=a("strong"),szr=o("roberta"),lzr=o(" \u2014 "),Uoe=a("a"),izr=o("TFRobertaForTokenClassification"),dzr=o(" (RoBERTa model)"),czr=l(),P0=a("li"),lAe=a("strong"),fzr=o("roformer"),mzr=o(" \u2014 "),Hoe=a("a"),gzr=o("TFRoFormerForTokenClassification"),hzr=o(" (RoFormer model)"),pzr=l(),B0=a("li"),iAe=a("strong"),uzr=o("xlm"),_zr=o(" \u2014 "),Joe=a("a"),bzr=o("TFXLMForTokenClassification"),vzr=o(" (XLM model)"),Fzr=l(),I0=a("li"),dAe=a("strong"),Tzr=o("xlm-roberta"),Mzr=o(" \u2014 "),Yoe=a("a"),Ezr=o("TFXLMRobertaForTokenClassification"),Czr=o(" (XLM-RoBERTa model)"),wzr=l(),N0=a("li"),cAe=a("strong"),Azr=o("xlnet"),yzr=o(" \u2014 "),Koe=a("a"),Lzr=o("TFXLNetForTokenClassification"),xzr=o(" (XLNet model)"),$zr=l(),F(q0.$$.fragment),hJe=l(),pf=a("h2"),j0=a("a"),fAe=a("span"),F(Ik.$$.fragment),kzr=l(),mAe=a("span"),Szr=o("TFAutoModelForQuestionAnswering"),pJe=l(),br=a("div"),F(Nk.$$.fragment),Rzr=l(),uf=a("p"),Pzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Zoe=a("a"),Bzr=o("from_pretrained()"),Izr=o(" class method or the "),ere=a("a"),Nzr=o("from_config()"),qzr=o(` class
method.`),jzr=l(),qk=a("p"),Dzr=o("This class cannot be instantiated directly using "),gAe=a("code"),Gzr=o("__init__()"),Ozr=o(" (throws an error)."),Vzr=l(),Zt=a("div"),F(jk.$$.fragment),Xzr=l(),hAe=a("p"),zzr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Qzr=l(),_f=a("p"),Wzr=o(`Note:
Loading a model from its configuration file does `),pAe=a("strong"),Uzr=o("not"),Hzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ore=a("a"),Jzr=o("from_pretrained()"),Yzr=o(" to load the model weights."),Kzr=l(),F(D0.$$.fragment),Zzr=l(),Wr=a("div"),F(Dk.$$.fragment),eQr=l(),uAe=a("p"),oQr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rQr=l(),Rn=a("p"),tQr=o("The model class to instantiate is selected based on the "),_Ae=a("code"),aQr=o("model_type"),nQr=o(` property of the config object (either
passed as an argument or loaded from `),bAe=a("code"),sQr=o("pretrained_model_name_or_path"),lQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vAe=a("code"),iQr=o("pretrained_model_name_or_path"),dQr=o(":"),cQr=l(),fe=a("ul"),G0=a("li"),FAe=a("strong"),fQr=o("albert"),mQr=o(" \u2014 "),rre=a("a"),gQr=o("TFAlbertForQuestionAnswering"),hQr=o(" (ALBERT model)"),pQr=l(),O0=a("li"),TAe=a("strong"),uQr=o("bert"),_Qr=o(" \u2014 "),tre=a("a"),bQr=o("TFBertForQuestionAnswering"),vQr=o(" (BERT model)"),FQr=l(),V0=a("li"),MAe=a("strong"),TQr=o("camembert"),MQr=o(" \u2014 "),are=a("a"),EQr=o("TFCamembertForQuestionAnswering"),CQr=o(" (CamemBERT model)"),wQr=l(),X0=a("li"),EAe=a("strong"),AQr=o("convbert"),yQr=o(" \u2014 "),nre=a("a"),LQr=o("TFConvBertForQuestionAnswering"),xQr=o(" (ConvBERT model)"),$Qr=l(),z0=a("li"),CAe=a("strong"),kQr=o("deberta"),SQr=o(" \u2014 "),sre=a("a"),RQr=o("TFDebertaForQuestionAnswering"),PQr=o(" (DeBERTa model)"),BQr=l(),Q0=a("li"),wAe=a("strong"),IQr=o("deberta-v2"),NQr=o(" \u2014 "),lre=a("a"),qQr=o("TFDebertaV2ForQuestionAnswering"),jQr=o(" (DeBERTa-v2 model)"),DQr=l(),W0=a("li"),AAe=a("strong"),GQr=o("distilbert"),OQr=o(" \u2014 "),ire=a("a"),VQr=o("TFDistilBertForQuestionAnswering"),XQr=o(" (DistilBERT model)"),zQr=l(),U0=a("li"),yAe=a("strong"),QQr=o("electra"),WQr=o(" \u2014 "),dre=a("a"),UQr=o("TFElectraForQuestionAnswering"),HQr=o(" (ELECTRA model)"),JQr=l(),H0=a("li"),LAe=a("strong"),YQr=o("flaubert"),KQr=o(" \u2014 "),cre=a("a"),ZQr=o("TFFlaubertForQuestionAnsweringSimple"),eWr=o(" (FlauBERT model)"),oWr=l(),J0=a("li"),xAe=a("strong"),rWr=o("funnel"),tWr=o(" \u2014 "),fre=a("a"),aWr=o("TFFunnelForQuestionAnswering"),nWr=o(" (Funnel Transformer model)"),sWr=l(),Y0=a("li"),$Ae=a("strong"),lWr=o("gptj"),iWr=o(" \u2014 "),mre=a("a"),dWr=o("TFGPTJForQuestionAnswering"),cWr=o(" (GPT-J model)"),fWr=l(),K0=a("li"),kAe=a("strong"),mWr=o("longformer"),gWr=o(" \u2014 "),gre=a("a"),hWr=o("TFLongformerForQuestionAnswering"),pWr=o(" (Longformer model)"),uWr=l(),Z0=a("li"),SAe=a("strong"),_Wr=o("mobilebert"),bWr=o(" \u2014 "),hre=a("a"),vWr=o("TFMobileBertForQuestionAnswering"),FWr=o(" (MobileBERT model)"),TWr=l(),ew=a("li"),RAe=a("strong"),MWr=o("mpnet"),EWr=o(" \u2014 "),pre=a("a"),CWr=o("TFMPNetForQuestionAnswering"),wWr=o(" (MPNet model)"),AWr=l(),ow=a("li"),PAe=a("strong"),yWr=o("rembert"),LWr=o(" \u2014 "),ure=a("a"),xWr=o("TFRemBertForQuestionAnswering"),$Wr=o(" (RemBERT model)"),kWr=l(),rw=a("li"),BAe=a("strong"),SWr=o("roberta"),RWr=o(" \u2014 "),_re=a("a"),PWr=o("TFRobertaForQuestionAnswering"),BWr=o(" (RoBERTa model)"),IWr=l(),tw=a("li"),IAe=a("strong"),NWr=o("roformer"),qWr=o(" \u2014 "),bre=a("a"),jWr=o("TFRoFormerForQuestionAnswering"),DWr=o(" (RoFormer model)"),GWr=l(),aw=a("li"),NAe=a("strong"),OWr=o("xlm"),VWr=o(" \u2014 "),vre=a("a"),XWr=o("TFXLMForQuestionAnsweringSimple"),zWr=o(" (XLM model)"),QWr=l(),nw=a("li"),qAe=a("strong"),WWr=o("xlm-roberta"),UWr=o(" \u2014 "),Fre=a("a"),HWr=o("TFXLMRobertaForQuestionAnswering"),JWr=o(" (XLM-RoBERTa model)"),YWr=l(),sw=a("li"),jAe=a("strong"),KWr=o("xlnet"),ZWr=o(" \u2014 "),Tre=a("a"),eUr=o("TFXLNetForQuestionAnsweringSimple"),oUr=o(" (XLNet model)"),rUr=l(),F(lw.$$.fragment),uJe=l(),bf=a("h2"),iw=a("a"),DAe=a("span"),F(Gk.$$.fragment),tUr=l(),GAe=a("span"),aUr=o("TFAutoModelForVision2Seq"),_Je=l(),vr=a("div"),F(Ok.$$.fragment),nUr=l(),vf=a("p"),sUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Mre=a("a"),lUr=o("from_pretrained()"),iUr=o(" class method or the "),Ere=a("a"),dUr=o("from_config()"),cUr=o(` class
method.`),fUr=l(),Vk=a("p"),mUr=o("This class cannot be instantiated directly using "),OAe=a("code"),gUr=o("__init__()"),hUr=o(" (throws an error)."),pUr=l(),ea=a("div"),F(Xk.$$.fragment),uUr=l(),VAe=a("p"),_Ur=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bUr=l(),Ff=a("p"),vUr=o(`Note:
Loading a model from its configuration file does `),XAe=a("strong"),FUr=o("not"),TUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cre=a("a"),MUr=o("from_pretrained()"),EUr=o(" to load the model weights."),CUr=l(),F(dw.$$.fragment),wUr=l(),Ur=a("div"),F(zk.$$.fragment),AUr=l(),zAe=a("p"),yUr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),LUr=l(),Pn=a("p"),xUr=o("The model class to instantiate is selected based on the "),QAe=a("code"),$Ur=o("model_type"),kUr=o(` property of the config object (either
passed as an argument or loaded from `),WAe=a("code"),SUr=o("pretrained_model_name_or_path"),RUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UAe=a("code"),PUr=o("pretrained_model_name_or_path"),BUr=o(":"),IUr=l(),HAe=a("ul"),cw=a("li"),JAe=a("strong"),NUr=o("vision-encoder-decoder"),qUr=o(" \u2014 "),wre=a("a"),jUr=o("TFVisionEncoderDecoderModel"),DUr=o(" (Vision Encoder decoder model)"),GUr=l(),F(fw.$$.fragment),bJe=l(),Tf=a("h2"),mw=a("a"),YAe=a("span"),F(Qk.$$.fragment),OUr=l(),KAe=a("span"),VUr=o("TFAutoModelForSpeechSeq2Seq"),vJe=l(),Fr=a("div"),F(Wk.$$.fragment),XUr=l(),Mf=a("p"),zUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Are=a("a"),QUr=o("from_pretrained()"),WUr=o(" class method or the "),yre=a("a"),UUr=o("from_config()"),HUr=o(` class
method.`),JUr=l(),Uk=a("p"),YUr=o("This class cannot be instantiated directly using "),ZAe=a("code"),KUr=o("__init__()"),ZUr=o(" (throws an error)."),eHr=l(),oa=a("div"),F(Hk.$$.fragment),oHr=l(),e6e=a("p"),rHr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tHr=l(),Ef=a("p"),aHr=o(`Note:
Loading a model from its configuration file does `),o6e=a("strong"),nHr=o("not"),sHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lre=a("a"),lHr=o("from_pretrained()"),iHr=o(" to load the model weights."),dHr=l(),F(gw.$$.fragment),cHr=l(),Hr=a("div"),F(Jk.$$.fragment),fHr=l(),r6e=a("p"),mHr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),gHr=l(),Bn=a("p"),hHr=o("The model class to instantiate is selected based on the "),t6e=a("code"),pHr=o("model_type"),uHr=o(` property of the config object (either
passed as an argument or loaded from `),a6e=a("code"),_Hr=o("pretrained_model_name_or_path"),bHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n6e=a("code"),vHr=o("pretrained_model_name_or_path"),FHr=o(":"),THr=l(),s6e=a("ul"),hw=a("li"),l6e=a("strong"),MHr=o("speech_to_text"),EHr=o(" \u2014 "),xre=a("a"),CHr=o("TFSpeech2TextForConditionalGeneration"),wHr=o(" (Speech2Text model)"),AHr=l(),F(pw.$$.fragment),FJe=l(),Cf=a("h2"),uw=a("a"),i6e=a("span"),F(Yk.$$.fragment),yHr=l(),d6e=a("span"),LHr=o("FlaxAutoModel"),TJe=l(),Tr=a("div"),F(Kk.$$.fragment),xHr=l(),wf=a("p"),$Hr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$re=a("a"),kHr=o("from_pretrained()"),SHr=o(" class method or the "),kre=a("a"),RHr=o("from_config()"),PHr=o(` class
method.`),BHr=l(),Zk=a("p"),IHr=o("This class cannot be instantiated directly using "),c6e=a("code"),NHr=o("__init__()"),qHr=o(" (throws an error)."),jHr=l(),ra=a("div"),F(eS.$$.fragment),DHr=l(),f6e=a("p"),GHr=o("Instantiates one of the base model classes of the library from a configuration."),OHr=l(),Af=a("p"),VHr=o(`Note:
Loading a model from its configuration file does `),m6e=a("strong"),XHr=o("not"),zHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sre=a("a"),QHr=o("from_pretrained()"),WHr=o(" to load the model weights."),UHr=l(),F(_w.$$.fragment),HHr=l(),Jr=a("div"),F(oS.$$.fragment),JHr=l(),g6e=a("p"),YHr=o("Instantiate one of the base model classes of the library from a pretrained model."),KHr=l(),In=a("p"),ZHr=o("The model class to instantiate is selected based on the "),h6e=a("code"),eJr=o("model_type"),oJr=o(` property of the config object (either
passed as an argument or loaded from `),p6e=a("code"),rJr=o("pretrained_model_name_or_path"),tJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u6e=a("code"),aJr=o("pretrained_model_name_or_path"),nJr=o(":"),sJr=l(),re=a("ul"),bw=a("li"),_6e=a("strong"),lJr=o("albert"),iJr=o(" \u2014 "),Rre=a("a"),dJr=o("FlaxAlbertModel"),cJr=o(" (ALBERT model)"),fJr=l(),vw=a("li"),b6e=a("strong"),mJr=o("bart"),gJr=o(" \u2014 "),Pre=a("a"),hJr=o("FlaxBartModel"),pJr=o(" (BART model)"),uJr=l(),Fw=a("li"),v6e=a("strong"),_Jr=o("beit"),bJr=o(" \u2014 "),Bre=a("a"),vJr=o("FlaxBeitModel"),FJr=o(" (BEiT model)"),TJr=l(),Tw=a("li"),F6e=a("strong"),MJr=o("bert"),EJr=o(" \u2014 "),Ire=a("a"),CJr=o("FlaxBertModel"),wJr=o(" (BERT model)"),AJr=l(),Mw=a("li"),T6e=a("strong"),yJr=o("big_bird"),LJr=o(" \u2014 "),Nre=a("a"),xJr=o("FlaxBigBirdModel"),$Jr=o(" (BigBird model)"),kJr=l(),Ew=a("li"),M6e=a("strong"),SJr=o("blenderbot"),RJr=o(" \u2014 "),qre=a("a"),PJr=o("FlaxBlenderbotModel"),BJr=o(" (Blenderbot model)"),IJr=l(),Cw=a("li"),E6e=a("strong"),NJr=o("blenderbot-small"),qJr=o(" \u2014 "),jre=a("a"),jJr=o("FlaxBlenderbotSmallModel"),DJr=o(" (BlenderbotSmall model)"),GJr=l(),ww=a("li"),C6e=a("strong"),OJr=o("clip"),VJr=o(" \u2014 "),Dre=a("a"),XJr=o("FlaxCLIPModel"),zJr=o(" (CLIP model)"),QJr=l(),Aw=a("li"),w6e=a("strong"),WJr=o("distilbert"),UJr=o(" \u2014 "),Gre=a("a"),HJr=o("FlaxDistilBertModel"),JJr=o(" (DistilBERT model)"),YJr=l(),yw=a("li"),A6e=a("strong"),KJr=o("electra"),ZJr=o(" \u2014 "),Ore=a("a"),eYr=o("FlaxElectraModel"),oYr=o(" (ELECTRA model)"),rYr=l(),Lw=a("li"),y6e=a("strong"),tYr=o("gpt2"),aYr=o(" \u2014 "),Vre=a("a"),nYr=o("FlaxGPT2Model"),sYr=o(" (OpenAI GPT-2 model)"),lYr=l(),xw=a("li"),L6e=a("strong"),iYr=o("gpt_neo"),dYr=o(" \u2014 "),Xre=a("a"),cYr=o("FlaxGPTNeoModel"),fYr=o(" (GPT Neo model)"),mYr=l(),$w=a("li"),x6e=a("strong"),gYr=o("gptj"),hYr=o(" \u2014 "),zre=a("a"),pYr=o("FlaxGPTJModel"),uYr=o(" (GPT-J model)"),_Yr=l(),kw=a("li"),$6e=a("strong"),bYr=o("longt5"),vYr=o(" \u2014 "),Qre=a("a"),FYr=o("FlaxLongT5Model"),TYr=o(" (LongT5 model)"),MYr=l(),Sw=a("li"),k6e=a("strong"),EYr=o("marian"),CYr=o(" \u2014 "),Wre=a("a"),wYr=o("FlaxMarianModel"),AYr=o(" (Marian model)"),yYr=l(),Rw=a("li"),S6e=a("strong"),LYr=o("mbart"),xYr=o(" \u2014 "),Ure=a("a"),$Yr=o("FlaxMBartModel"),kYr=o(" (mBART model)"),SYr=l(),Pw=a("li"),R6e=a("strong"),RYr=o("mt5"),PYr=o(" \u2014 "),Hre=a("a"),BYr=o("FlaxMT5Model"),IYr=o(" (MT5 model)"),NYr=l(),Bw=a("li"),P6e=a("strong"),qYr=o("opt"),jYr=o(" \u2014 "),Jre=a("a"),DYr=o("FlaxOPTModel"),GYr=o(" (OPT model)"),OYr=l(),Iw=a("li"),B6e=a("strong"),VYr=o("pegasus"),XYr=o(" \u2014 "),Yre=a("a"),zYr=o("FlaxPegasusModel"),QYr=o(" (Pegasus model)"),WYr=l(),Nw=a("li"),I6e=a("strong"),UYr=o("roberta"),HYr=o(" \u2014 "),Kre=a("a"),JYr=o("FlaxRobertaModel"),YYr=o(" (RoBERTa model)"),KYr=l(),qw=a("li"),N6e=a("strong"),ZYr=o("roformer"),eKr=o(" \u2014 "),Zre=a("a"),oKr=o("FlaxRoFormerModel"),rKr=o(" (RoFormer model)"),tKr=l(),jw=a("li"),q6e=a("strong"),aKr=o("t5"),nKr=o(" \u2014 "),ete=a("a"),sKr=o("FlaxT5Model"),lKr=o(" (T5 model)"),iKr=l(),Dw=a("li"),j6e=a("strong"),dKr=o("vision-text-dual-encoder"),cKr=o(" \u2014 "),ote=a("a"),fKr=o("FlaxVisionTextDualEncoderModel"),mKr=o(" (VisionTextDualEncoder model)"),gKr=l(),Gw=a("li"),D6e=a("strong"),hKr=o("vit"),pKr=o(" \u2014 "),rte=a("a"),uKr=o("FlaxViTModel"),_Kr=o(" (ViT model)"),bKr=l(),Ow=a("li"),G6e=a("strong"),vKr=o("wav2vec2"),FKr=o(" \u2014 "),tte=a("a"),TKr=o("FlaxWav2Vec2Model"),MKr=o(" (Wav2Vec2 model)"),EKr=l(),Vw=a("li"),O6e=a("strong"),CKr=o("xglm"),wKr=o(" \u2014 "),ate=a("a"),AKr=o("FlaxXGLMModel"),yKr=o(" (XGLM model)"),LKr=l(),Xw=a("li"),V6e=a("strong"),xKr=o("xlm-roberta"),$Kr=o(" \u2014 "),nte=a("a"),kKr=o("FlaxXLMRobertaModel"),SKr=o(" (XLM-RoBERTa model)"),RKr=l(),F(zw.$$.fragment),MJe=l(),yf=a("h2"),Qw=a("a"),X6e=a("span"),F(rS.$$.fragment),PKr=l(),z6e=a("span"),BKr=o("FlaxAutoModelForCausalLM"),EJe=l(),Mr=a("div"),F(tS.$$.fragment),IKr=l(),Lf=a("p"),NKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ste=a("a"),qKr=o("from_pretrained()"),jKr=o(" class method or the "),lte=a("a"),DKr=o("from_config()"),GKr=o(` class
method.`),OKr=l(),aS=a("p"),VKr=o("This class cannot be instantiated directly using "),Q6e=a("code"),XKr=o("__init__()"),zKr=o(" (throws an error)."),QKr=l(),ta=a("div"),F(nS.$$.fragment),WKr=l(),W6e=a("p"),UKr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),HKr=l(),xf=a("p"),JKr=o(`Note:
Loading a model from its configuration file does `),U6e=a("strong"),YKr=o("not"),KKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ite=a("a"),ZKr=o("from_pretrained()"),eZr=o(" to load the model weights."),oZr=l(),F(Ww.$$.fragment),rZr=l(),Yr=a("div"),F(sS.$$.fragment),tZr=l(),H6e=a("p"),aZr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nZr=l(),Nn=a("p"),sZr=o("The model class to instantiate is selected based on the "),J6e=a("code"),lZr=o("model_type"),iZr=o(` property of the config object (either
passed as an argument or loaded from `),Y6e=a("code"),dZr=o("pretrained_model_name_or_path"),cZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K6e=a("code"),fZr=o("pretrained_model_name_or_path"),mZr=o(":"),gZr=l(),xe=a("ul"),Uw=a("li"),Z6e=a("strong"),hZr=o("bart"),pZr=o(" \u2014 "),dte=a("a"),uZr=o("FlaxBartForCausalLM"),_Zr=o(" (BART model)"),bZr=l(),Hw=a("li"),e7e=a("strong"),vZr=o("bert"),FZr=o(" \u2014 "),cte=a("a"),TZr=o("FlaxBertForCausalLM"),MZr=o(" (BERT model)"),EZr=l(),Jw=a("li"),o7e=a("strong"),CZr=o("big_bird"),wZr=o(" \u2014 "),fte=a("a"),AZr=o("FlaxBigBirdForCausalLM"),yZr=o(" (BigBird model)"),LZr=l(),Yw=a("li"),r7e=a("strong"),xZr=o("electra"),$Zr=o(" \u2014 "),mte=a("a"),kZr=o("FlaxElectraForCausalLM"),SZr=o(" (ELECTRA model)"),RZr=l(),Kw=a("li"),t7e=a("strong"),PZr=o("gpt2"),BZr=o(" \u2014 "),gte=a("a"),IZr=o("FlaxGPT2LMHeadModel"),NZr=o(" (OpenAI GPT-2 model)"),qZr=l(),Zw=a("li"),a7e=a("strong"),jZr=o("gpt_neo"),DZr=o(" \u2014 "),hte=a("a"),GZr=o("FlaxGPTNeoForCausalLM"),OZr=o(" (GPT Neo model)"),VZr=l(),eA=a("li"),n7e=a("strong"),XZr=o("gptj"),zZr=o(" \u2014 "),pte=a("a"),QZr=o("FlaxGPTJForCausalLM"),WZr=o(" (GPT-J model)"),UZr=l(),oA=a("li"),s7e=a("strong"),HZr=o("opt"),JZr=o(" \u2014 "),ute=a("a"),YZr=o("FlaxOPTForCausalLM"),KZr=o(" (OPT model)"),ZZr=l(),rA=a("li"),l7e=a("strong"),eet=o("roberta"),oet=o(" \u2014 "),_te=a("a"),ret=o("FlaxRobertaForCausalLM"),tet=o(" (RoBERTa model)"),aet=l(),tA=a("li"),i7e=a("strong"),net=o("xglm"),set=o(" \u2014 "),bte=a("a"),iet=o("FlaxXGLMForCausalLM"),det=o(" (XGLM model)"),cet=l(),F(aA.$$.fragment),CJe=l(),$f=a("h2"),nA=a("a"),d7e=a("span"),F(lS.$$.fragment),fet=l(),c7e=a("span"),met=o("FlaxAutoModelForPreTraining"),wJe=l(),Er=a("div"),F(iS.$$.fragment),get=l(),kf=a("p"),het=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vte=a("a"),pet=o("from_pretrained()"),uet=o(" class method or the "),Fte=a("a"),_et=o("from_config()"),bet=o(` class
method.`),vet=l(),dS=a("p"),Fet=o("This class cannot be instantiated directly using "),f7e=a("code"),Tet=o("__init__()"),Met=o(" (throws an error)."),Eet=l(),aa=a("div"),F(cS.$$.fragment),Cet=l(),m7e=a("p"),wet=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Aet=l(),Sf=a("p"),yet=o(`Note:
Loading a model from its configuration file does `),g7e=a("strong"),Let=o("not"),xet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tte=a("a"),$et=o("from_pretrained()"),ket=o(" to load the model weights."),Set=l(),F(sA.$$.fragment),Ret=l(),Kr=a("div"),F(fS.$$.fragment),Pet=l(),h7e=a("p"),Bet=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Iet=l(),qn=a("p"),Net=o("The model class to instantiate is selected based on the "),p7e=a("code"),qet=o("model_type"),jet=o(` property of the config object (either
passed as an argument or loaded from `),u7e=a("code"),Det=o("pretrained_model_name_or_path"),Get=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_7e=a("code"),Oet=o("pretrained_model_name_or_path"),Vet=o(":"),Xet=l(),Ee=a("ul"),lA=a("li"),b7e=a("strong"),zet=o("albert"),Qet=o(" \u2014 "),Mte=a("a"),Wet=o("FlaxAlbertForPreTraining"),Uet=o(" (ALBERT model)"),Het=l(),iA=a("li"),v7e=a("strong"),Jet=o("bart"),Yet=o(" \u2014 "),Ete=a("a"),Ket=o("FlaxBartForConditionalGeneration"),Zet=o(" (BART model)"),eot=l(),dA=a("li"),F7e=a("strong"),oot=o("bert"),rot=o(" \u2014 "),Cte=a("a"),tot=o("FlaxBertForPreTraining"),aot=o(" (BERT model)"),not=l(),cA=a("li"),T7e=a("strong"),sot=o("big_bird"),lot=o(" \u2014 "),wte=a("a"),iot=o("FlaxBigBirdForPreTraining"),dot=o(" (BigBird model)"),cot=l(),fA=a("li"),M7e=a("strong"),fot=o("electra"),mot=o(" \u2014 "),Ate=a("a"),got=o("FlaxElectraForPreTraining"),hot=o(" (ELECTRA model)"),pot=l(),mA=a("li"),E7e=a("strong"),uot=o("longt5"),_ot=o(" \u2014 "),yte=a("a"),bot=o("FlaxLongT5ForConditionalGeneration"),vot=o(" (LongT5 model)"),Fot=l(),gA=a("li"),C7e=a("strong"),Tot=o("mbart"),Mot=o(" \u2014 "),Lte=a("a"),Eot=o("FlaxMBartForConditionalGeneration"),Cot=o(" (mBART model)"),wot=l(),hA=a("li"),w7e=a("strong"),Aot=o("mt5"),yot=o(" \u2014 "),xte=a("a"),Lot=o("FlaxMT5ForConditionalGeneration"),xot=o(" (MT5 model)"),$ot=l(),pA=a("li"),A7e=a("strong"),kot=o("roberta"),Sot=o(" \u2014 "),$te=a("a"),Rot=o("FlaxRobertaForMaskedLM"),Pot=o(" (RoBERTa model)"),Bot=l(),uA=a("li"),y7e=a("strong"),Iot=o("roformer"),Not=o(" \u2014 "),kte=a("a"),qot=o("FlaxRoFormerForMaskedLM"),jot=o(" (RoFormer model)"),Dot=l(),_A=a("li"),L7e=a("strong"),Got=o("t5"),Oot=o(" \u2014 "),Ste=a("a"),Vot=o("FlaxT5ForConditionalGeneration"),Xot=o(" (T5 model)"),zot=l(),bA=a("li"),x7e=a("strong"),Qot=o("wav2vec2"),Wot=o(" \u2014 "),Rte=a("a"),Uot=o("FlaxWav2Vec2ForPreTraining"),Hot=o(" (Wav2Vec2 model)"),Jot=l(),vA=a("li"),$7e=a("strong"),Yot=o("xlm-roberta"),Kot=o(" \u2014 "),Pte=a("a"),Zot=o("FlaxXLMRobertaForMaskedLM"),ert=o(" (XLM-RoBERTa model)"),ort=l(),F(FA.$$.fragment),AJe=l(),Rf=a("h2"),TA=a("a"),k7e=a("span"),F(mS.$$.fragment),rrt=l(),S7e=a("span"),trt=o("FlaxAutoModelForMaskedLM"),yJe=l(),Cr=a("div"),F(gS.$$.fragment),art=l(),Pf=a("p"),nrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Bte=a("a"),srt=o("from_pretrained()"),lrt=o(" class method or the "),Ite=a("a"),irt=o("from_config()"),drt=o(` class
method.`),crt=l(),hS=a("p"),frt=o("This class cannot be instantiated directly using "),R7e=a("code"),mrt=o("__init__()"),grt=o(" (throws an error)."),hrt=l(),na=a("div"),F(pS.$$.fragment),prt=l(),P7e=a("p"),urt=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_rt=l(),Bf=a("p"),brt=o(`Note:
Loading a model from its configuration file does `),B7e=a("strong"),vrt=o("not"),Frt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nte=a("a"),Trt=o("from_pretrained()"),Mrt=o(" to load the model weights."),Ert=l(),F(MA.$$.fragment),Crt=l(),Zr=a("div"),F(uS.$$.fragment),wrt=l(),I7e=a("p"),Art=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),yrt=l(),jn=a("p"),Lrt=o("The model class to instantiate is selected based on the "),N7e=a("code"),xrt=o("model_type"),$rt=o(` property of the config object (either
passed as an argument or loaded from `),q7e=a("code"),krt=o("pretrained_model_name_or_path"),Srt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=a("code"),Rrt=o("pretrained_model_name_or_path"),Prt=o(":"),Brt=l(),$e=a("ul"),EA=a("li"),D7e=a("strong"),Irt=o("albert"),Nrt=o(" \u2014 "),qte=a("a"),qrt=o("FlaxAlbertForMaskedLM"),jrt=o(" (ALBERT model)"),Drt=l(),CA=a("li"),G7e=a("strong"),Grt=o("bart"),Ort=o(" \u2014 "),jte=a("a"),Vrt=o("FlaxBartForConditionalGeneration"),Xrt=o(" (BART model)"),zrt=l(),wA=a("li"),O7e=a("strong"),Qrt=o("bert"),Wrt=o(" \u2014 "),Dte=a("a"),Urt=o("FlaxBertForMaskedLM"),Hrt=o(" (BERT model)"),Jrt=l(),AA=a("li"),V7e=a("strong"),Yrt=o("big_bird"),Krt=o(" \u2014 "),Gte=a("a"),Zrt=o("FlaxBigBirdForMaskedLM"),ett=o(" (BigBird model)"),ott=l(),yA=a("li"),X7e=a("strong"),rtt=o("distilbert"),ttt=o(" \u2014 "),Ote=a("a"),att=o("FlaxDistilBertForMaskedLM"),ntt=o(" (DistilBERT model)"),stt=l(),LA=a("li"),z7e=a("strong"),ltt=o("electra"),itt=o(" \u2014 "),Vte=a("a"),dtt=o("FlaxElectraForMaskedLM"),ctt=o(" (ELECTRA model)"),ftt=l(),xA=a("li"),Q7e=a("strong"),mtt=o("mbart"),gtt=o(" \u2014 "),Xte=a("a"),htt=o("FlaxMBartForConditionalGeneration"),ptt=o(" (mBART model)"),utt=l(),$A=a("li"),W7e=a("strong"),_tt=o("roberta"),btt=o(" \u2014 "),zte=a("a"),vtt=o("FlaxRobertaForMaskedLM"),Ftt=o(" (RoBERTa model)"),Ttt=l(),kA=a("li"),U7e=a("strong"),Mtt=o("roformer"),Ett=o(" \u2014 "),Qte=a("a"),Ctt=o("FlaxRoFormerForMaskedLM"),wtt=o(" (RoFormer model)"),Att=l(),SA=a("li"),H7e=a("strong"),ytt=o("xlm-roberta"),Ltt=o(" \u2014 "),Wte=a("a"),xtt=o("FlaxXLMRobertaForMaskedLM"),$tt=o(" (XLM-RoBERTa model)"),ktt=l(),F(RA.$$.fragment),LJe=l(),If=a("h2"),PA=a("a"),J7e=a("span"),F(_S.$$.fragment),Stt=l(),Y7e=a("span"),Rtt=o("FlaxAutoModelForSeq2SeqLM"),xJe=l(),wr=a("div"),F(bS.$$.fragment),Ptt=l(),Nf=a("p"),Btt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ute=a("a"),Itt=o("from_pretrained()"),Ntt=o(" class method or the "),Hte=a("a"),qtt=o("from_config()"),jtt=o(` class
method.`),Dtt=l(),vS=a("p"),Gtt=o("This class cannot be instantiated directly using "),K7e=a("code"),Ott=o("__init__()"),Vtt=o(" (throws an error)."),Xtt=l(),sa=a("div"),F(FS.$$.fragment),ztt=l(),Z7e=a("p"),Qtt=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Wtt=l(),qf=a("p"),Utt=o(`Note:
Loading a model from its configuration file does `),eye=a("strong"),Htt=o("not"),Jtt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jte=a("a"),Ytt=o("from_pretrained()"),Ktt=o(" to load the model weights."),Ztt=l(),F(BA.$$.fragment),eat=l(),et=a("div"),F(TS.$$.fragment),oat=l(),oye=a("p"),rat=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tat=l(),Dn=a("p"),aat=o("The model class to instantiate is selected based on the "),rye=a("code"),nat=o("model_type"),sat=o(` property of the config object (either
passed as an argument or loaded from `),tye=a("code"),lat=o("pretrained_model_name_or_path"),iat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aye=a("code"),dat=o("pretrained_model_name_or_path"),cat=o(":"),fat=l(),ke=a("ul"),IA=a("li"),nye=a("strong"),mat=o("bart"),gat=o(" \u2014 "),Yte=a("a"),hat=o("FlaxBartForConditionalGeneration"),pat=o(" (BART model)"),uat=l(),NA=a("li"),sye=a("strong"),_at=o("blenderbot"),bat=o(" \u2014 "),Kte=a("a"),vat=o("FlaxBlenderbotForConditionalGeneration"),Fat=o(" (Blenderbot model)"),Tat=l(),qA=a("li"),lye=a("strong"),Mat=o("blenderbot-small"),Eat=o(" \u2014 "),Zte=a("a"),Cat=o("FlaxBlenderbotSmallForConditionalGeneration"),wat=o(" (BlenderbotSmall model)"),Aat=l(),jA=a("li"),iye=a("strong"),yat=o("encoder-decoder"),Lat=o(" \u2014 "),eae=a("a"),xat=o("FlaxEncoderDecoderModel"),$at=o(" (Encoder decoder model)"),kat=l(),DA=a("li"),dye=a("strong"),Sat=o("longt5"),Rat=o(" \u2014 "),oae=a("a"),Pat=o("FlaxLongT5ForConditionalGeneration"),Bat=o(" (LongT5 model)"),Iat=l(),GA=a("li"),cye=a("strong"),Nat=o("marian"),qat=o(" \u2014 "),rae=a("a"),jat=o("FlaxMarianMTModel"),Dat=o(" (Marian model)"),Gat=l(),OA=a("li"),fye=a("strong"),Oat=o("mbart"),Vat=o(" \u2014 "),tae=a("a"),Xat=o("FlaxMBartForConditionalGeneration"),zat=o(" (mBART model)"),Qat=l(),VA=a("li"),mye=a("strong"),Wat=o("mt5"),Uat=o(" \u2014 "),aae=a("a"),Hat=o("FlaxMT5ForConditionalGeneration"),Jat=o(" (MT5 model)"),Yat=l(),XA=a("li"),gye=a("strong"),Kat=o("pegasus"),Zat=o(" \u2014 "),nae=a("a"),ent=o("FlaxPegasusForConditionalGeneration"),ont=o(" (Pegasus model)"),rnt=l(),zA=a("li"),hye=a("strong"),tnt=o("t5"),ant=o(" \u2014 "),sae=a("a"),nnt=o("FlaxT5ForConditionalGeneration"),snt=o(" (T5 model)"),lnt=l(),F(QA.$$.fragment),$Je=l(),jf=a("h2"),WA=a("a"),pye=a("span"),F(MS.$$.fragment),int=l(),uye=a("span"),dnt=o("FlaxAutoModelForSequenceClassification"),kJe=l(),Ar=a("div"),F(ES.$$.fragment),cnt=l(),Df=a("p"),fnt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lae=a("a"),mnt=o("from_pretrained()"),gnt=o(" class method or the "),iae=a("a"),hnt=o("from_config()"),pnt=o(` class
method.`),unt=l(),CS=a("p"),_nt=o("This class cannot be instantiated directly using "),_ye=a("code"),bnt=o("__init__()"),vnt=o(" (throws an error)."),Fnt=l(),la=a("div"),F(wS.$$.fragment),Tnt=l(),bye=a("p"),Mnt=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ent=l(),Gf=a("p"),Cnt=o(`Note:
Loading a model from its configuration file does `),vye=a("strong"),wnt=o("not"),Ant=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dae=a("a"),ynt=o("from_pretrained()"),Lnt=o(" to load the model weights."),xnt=l(),F(UA.$$.fragment),$nt=l(),ot=a("div"),F(AS.$$.fragment),knt=l(),Fye=a("p"),Snt=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Rnt=l(),Gn=a("p"),Pnt=o("The model class to instantiate is selected based on the "),Tye=a("code"),Bnt=o("model_type"),Int=o(` property of the config object (either
passed as an argument or loaded from `),Mye=a("code"),Nnt=o("pretrained_model_name_or_path"),qnt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eye=a("code"),jnt=o("pretrained_model_name_or_path"),Dnt=o(":"),Gnt=l(),Se=a("ul"),HA=a("li"),Cye=a("strong"),Ont=o("albert"),Vnt=o(" \u2014 "),cae=a("a"),Xnt=o("FlaxAlbertForSequenceClassification"),znt=o(" (ALBERT model)"),Qnt=l(),JA=a("li"),wye=a("strong"),Wnt=o("bart"),Unt=o(" \u2014 "),fae=a("a"),Hnt=o("FlaxBartForSequenceClassification"),Jnt=o(" (BART model)"),Ynt=l(),YA=a("li"),Aye=a("strong"),Knt=o("bert"),Znt=o(" \u2014 "),mae=a("a"),est=o("FlaxBertForSequenceClassification"),ost=o(" (BERT model)"),rst=l(),KA=a("li"),yye=a("strong"),tst=o("big_bird"),ast=o(" \u2014 "),gae=a("a"),nst=o("FlaxBigBirdForSequenceClassification"),sst=o(" (BigBird model)"),lst=l(),ZA=a("li"),Lye=a("strong"),ist=o("distilbert"),dst=o(" \u2014 "),hae=a("a"),cst=o("FlaxDistilBertForSequenceClassification"),fst=o(" (DistilBERT model)"),mst=l(),e6=a("li"),xye=a("strong"),gst=o("electra"),hst=o(" \u2014 "),pae=a("a"),pst=o("FlaxElectraForSequenceClassification"),ust=o(" (ELECTRA model)"),_st=l(),o6=a("li"),$ye=a("strong"),bst=o("mbart"),vst=o(" \u2014 "),uae=a("a"),Fst=o("FlaxMBartForSequenceClassification"),Tst=o(" (mBART model)"),Mst=l(),r6=a("li"),kye=a("strong"),Est=o("roberta"),Cst=o(" \u2014 "),_ae=a("a"),wst=o("FlaxRobertaForSequenceClassification"),Ast=o(" (RoBERTa model)"),yst=l(),t6=a("li"),Sye=a("strong"),Lst=o("roformer"),xst=o(" \u2014 "),bae=a("a"),$st=o("FlaxRoFormerForSequenceClassification"),kst=o(" (RoFormer model)"),Sst=l(),a6=a("li"),Rye=a("strong"),Rst=o("xlm-roberta"),Pst=o(" \u2014 "),vae=a("a"),Bst=o("FlaxXLMRobertaForSequenceClassification"),Ist=o(" (XLM-RoBERTa model)"),Nst=l(),F(n6.$$.fragment),SJe=l(),Of=a("h2"),s6=a("a"),Pye=a("span"),F(yS.$$.fragment),qst=l(),Bye=a("span"),jst=o("FlaxAutoModelForQuestionAnswering"),RJe=l(),yr=a("div"),F(LS.$$.fragment),Dst=l(),Vf=a("p"),Gst=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Fae=a("a"),Ost=o("from_pretrained()"),Vst=o(" class method or the "),Tae=a("a"),Xst=o("from_config()"),zst=o(` class
method.`),Qst=l(),xS=a("p"),Wst=o("This class cannot be instantiated directly using "),Iye=a("code"),Ust=o("__init__()"),Hst=o(" (throws an error)."),Jst=l(),ia=a("div"),F($S.$$.fragment),Yst=l(),Nye=a("p"),Kst=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Zst=l(),Xf=a("p"),elt=o(`Note:
Loading a model from its configuration file does `),qye=a("strong"),olt=o("not"),rlt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mae=a("a"),tlt=o("from_pretrained()"),alt=o(" to load the model weights."),nlt=l(),F(l6.$$.fragment),slt=l(),rt=a("div"),F(kS.$$.fragment),llt=l(),jye=a("p"),ilt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),dlt=l(),On=a("p"),clt=o("The model class to instantiate is selected based on the "),Dye=a("code"),flt=o("model_type"),mlt=o(` property of the config object (either
passed as an argument or loaded from `),Gye=a("code"),glt=o("pretrained_model_name_or_path"),hlt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oye=a("code"),plt=o("pretrained_model_name_or_path"),ult=o(":"),_lt=l(),Re=a("ul"),i6=a("li"),Vye=a("strong"),blt=o("albert"),vlt=o(" \u2014 "),Eae=a("a"),Flt=o("FlaxAlbertForQuestionAnswering"),Tlt=o(" (ALBERT model)"),Mlt=l(),d6=a("li"),Xye=a("strong"),Elt=o("bart"),Clt=o(" \u2014 "),Cae=a("a"),wlt=o("FlaxBartForQuestionAnswering"),Alt=o(" (BART model)"),ylt=l(),c6=a("li"),zye=a("strong"),Llt=o("bert"),xlt=o(" \u2014 "),wae=a("a"),$lt=o("FlaxBertForQuestionAnswering"),klt=o(" (BERT model)"),Slt=l(),f6=a("li"),Qye=a("strong"),Rlt=o("big_bird"),Plt=o(" \u2014 "),Aae=a("a"),Blt=o("FlaxBigBirdForQuestionAnswering"),Ilt=o(" (BigBird model)"),Nlt=l(),m6=a("li"),Wye=a("strong"),qlt=o("distilbert"),jlt=o(" \u2014 "),yae=a("a"),Dlt=o("FlaxDistilBertForQuestionAnswering"),Glt=o(" (DistilBERT model)"),Olt=l(),g6=a("li"),Uye=a("strong"),Vlt=o("electra"),Xlt=o(" \u2014 "),Lae=a("a"),zlt=o("FlaxElectraForQuestionAnswering"),Qlt=o(" (ELECTRA model)"),Wlt=l(),h6=a("li"),Hye=a("strong"),Ult=o("mbart"),Hlt=o(" \u2014 "),xae=a("a"),Jlt=o("FlaxMBartForQuestionAnswering"),Ylt=o(" (mBART model)"),Klt=l(),p6=a("li"),Jye=a("strong"),Zlt=o("roberta"),eit=o(" \u2014 "),$ae=a("a"),oit=o("FlaxRobertaForQuestionAnswering"),rit=o(" (RoBERTa model)"),tit=l(),u6=a("li"),Yye=a("strong"),ait=o("roformer"),nit=o(" \u2014 "),kae=a("a"),sit=o("FlaxRoFormerForQuestionAnswering"),lit=o(" (RoFormer model)"),iit=l(),_6=a("li"),Kye=a("strong"),dit=o("xlm-roberta"),cit=o(" \u2014 "),Sae=a("a"),fit=o("FlaxXLMRobertaForQuestionAnswering"),mit=o(" (XLM-RoBERTa model)"),git=l(),F(b6.$$.fragment),PJe=l(),zf=a("h2"),v6=a("a"),Zye=a("span"),F(SS.$$.fragment),hit=l(),eLe=a("span"),pit=o("FlaxAutoModelForTokenClassification"),BJe=l(),Lr=a("div"),F(RS.$$.fragment),uit=l(),Qf=a("p"),_it=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rae=a("a"),bit=o("from_pretrained()"),vit=o(" class method or the "),Pae=a("a"),Fit=o("from_config()"),Tit=o(` class
method.`),Mit=l(),PS=a("p"),Eit=o("This class cannot be instantiated directly using "),oLe=a("code"),Cit=o("__init__()"),wit=o(" (throws an error)."),Ait=l(),da=a("div"),F(BS.$$.fragment),yit=l(),rLe=a("p"),Lit=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),xit=l(),Wf=a("p"),$it=o(`Note:
Loading a model from its configuration file does `),tLe=a("strong"),kit=o("not"),Sit=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bae=a("a"),Rit=o("from_pretrained()"),Pit=o(" to load the model weights."),Bit=l(),F(F6.$$.fragment),Iit=l(),tt=a("div"),F(IS.$$.fragment),Nit=l(),aLe=a("p"),qit=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jit=l(),Vn=a("p"),Dit=o("The model class to instantiate is selected based on the "),nLe=a("code"),Git=o("model_type"),Oit=o(` property of the config object (either
passed as an argument or loaded from `),sLe=a("code"),Vit=o("pretrained_model_name_or_path"),Xit=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lLe=a("code"),zit=o("pretrained_model_name_or_path"),Qit=o(":"),Wit=l(),Xe=a("ul"),T6=a("li"),iLe=a("strong"),Uit=o("albert"),Hit=o(" \u2014 "),Iae=a("a"),Jit=o("FlaxAlbertForTokenClassification"),Yit=o(" (ALBERT model)"),Kit=l(),M6=a("li"),dLe=a("strong"),Zit=o("bert"),edt=o(" \u2014 "),Nae=a("a"),odt=o("FlaxBertForTokenClassification"),rdt=o(" (BERT model)"),tdt=l(),E6=a("li"),cLe=a("strong"),adt=o("big_bird"),ndt=o(" \u2014 "),qae=a("a"),sdt=o("FlaxBigBirdForTokenClassification"),ldt=o(" (BigBird model)"),idt=l(),C6=a("li"),fLe=a("strong"),ddt=o("distilbert"),cdt=o(" \u2014 "),jae=a("a"),fdt=o("FlaxDistilBertForTokenClassification"),mdt=o(" (DistilBERT model)"),gdt=l(),w6=a("li"),mLe=a("strong"),hdt=o("electra"),pdt=o(" \u2014 "),Dae=a("a"),udt=o("FlaxElectraForTokenClassification"),_dt=o(" (ELECTRA model)"),bdt=l(),A6=a("li"),gLe=a("strong"),vdt=o("roberta"),Fdt=o(" \u2014 "),Gae=a("a"),Tdt=o("FlaxRobertaForTokenClassification"),Mdt=o(" (RoBERTa model)"),Edt=l(),y6=a("li"),hLe=a("strong"),Cdt=o("roformer"),wdt=o(" \u2014 "),Oae=a("a"),Adt=o("FlaxRoFormerForTokenClassification"),ydt=o(" (RoFormer model)"),Ldt=l(),L6=a("li"),pLe=a("strong"),xdt=o("xlm-roberta"),$dt=o(" \u2014 "),Vae=a("a"),kdt=o("FlaxXLMRobertaForTokenClassification"),Sdt=o(" (XLM-RoBERTa model)"),Rdt=l(),F(x6.$$.fragment),IJe=l(),Uf=a("h2"),$6=a("a"),uLe=a("span"),F(NS.$$.fragment),Pdt=l(),_Le=a("span"),Bdt=o("FlaxAutoModelForMultipleChoice"),NJe=l(),xr=a("div"),F(qS.$$.fragment),Idt=l(),Hf=a("p"),Ndt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Xae=a("a"),qdt=o("from_pretrained()"),jdt=o(" class method or the "),zae=a("a"),Ddt=o("from_config()"),Gdt=o(` class
method.`),Odt=l(),jS=a("p"),Vdt=o("This class cannot be instantiated directly using "),bLe=a("code"),Xdt=o("__init__()"),zdt=o(" (throws an error)."),Qdt=l(),ca=a("div"),F(DS.$$.fragment),Wdt=l(),vLe=a("p"),Udt=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Hdt=l(),Jf=a("p"),Jdt=o(`Note:
Loading a model from its configuration file does `),FLe=a("strong"),Ydt=o("not"),Kdt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qae=a("a"),Zdt=o("from_pretrained()"),ect=o(" to load the model weights."),oct=l(),F(k6.$$.fragment),rct=l(),at=a("div"),F(GS.$$.fragment),tct=l(),TLe=a("p"),act=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),nct=l(),Xn=a("p"),sct=o("The model class to instantiate is selected based on the "),MLe=a("code"),lct=o("model_type"),ict=o(` property of the config object (either
passed as an argument or loaded from `),ELe=a("code"),dct=o("pretrained_model_name_or_path"),cct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CLe=a("code"),fct=o("pretrained_model_name_or_path"),mct=o(":"),gct=l(),ze=a("ul"),S6=a("li"),wLe=a("strong"),hct=o("albert"),pct=o(" \u2014 "),Wae=a("a"),uct=o("FlaxAlbertForMultipleChoice"),_ct=o(" (ALBERT model)"),bct=l(),R6=a("li"),ALe=a("strong"),vct=o("bert"),Fct=o(" \u2014 "),Uae=a("a"),Tct=o("FlaxBertForMultipleChoice"),Mct=o(" (BERT model)"),Ect=l(),P6=a("li"),yLe=a("strong"),Cct=o("big_bird"),wct=o(" \u2014 "),Hae=a("a"),Act=o("FlaxBigBirdForMultipleChoice"),yct=o(" (BigBird model)"),Lct=l(),B6=a("li"),LLe=a("strong"),xct=o("distilbert"),$ct=o(" \u2014 "),Jae=a("a"),kct=o("FlaxDistilBertForMultipleChoice"),Sct=o(" (DistilBERT model)"),Rct=l(),I6=a("li"),xLe=a("strong"),Pct=o("electra"),Bct=o(" \u2014 "),Yae=a("a"),Ict=o("FlaxElectraForMultipleChoice"),Nct=o(" (ELECTRA model)"),qct=l(),N6=a("li"),$Le=a("strong"),jct=o("roberta"),Dct=o(" \u2014 "),Kae=a("a"),Gct=o("FlaxRobertaForMultipleChoice"),Oct=o(" (RoBERTa model)"),Vct=l(),q6=a("li"),kLe=a("strong"),Xct=o("roformer"),zct=o(" \u2014 "),Zae=a("a"),Qct=o("FlaxRoFormerForMultipleChoice"),Wct=o(" (RoFormer model)"),Uct=l(),j6=a("li"),SLe=a("strong"),Hct=o("xlm-roberta"),Jct=o(" \u2014 "),ene=a("a"),Yct=o("FlaxXLMRobertaForMultipleChoice"),Kct=o(" (XLM-RoBERTa model)"),Zct=l(),F(D6.$$.fragment),qJe=l(),Yf=a("h2"),G6=a("a"),RLe=a("span"),F(OS.$$.fragment),eft=l(),PLe=a("span"),oft=o("FlaxAutoModelForNextSentencePrediction"),jJe=l(),$r=a("div"),F(VS.$$.fragment),rft=l(),Kf=a("p"),tft=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),one=a("a"),aft=o("from_pretrained()"),nft=o(" class method or the "),rne=a("a"),sft=o("from_config()"),lft=o(` class
method.`),ift=l(),XS=a("p"),dft=o("This class cannot be instantiated directly using "),BLe=a("code"),cft=o("__init__()"),fft=o(" (throws an error)."),mft=l(),fa=a("div"),F(zS.$$.fragment),gft=l(),ILe=a("p"),hft=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),pft=l(),Zf=a("p"),uft=o(`Note:
Loading a model from its configuration file does `),NLe=a("strong"),_ft=o("not"),bft=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tne=a("a"),vft=o("from_pretrained()"),Fft=o(" to load the model weights."),Tft=l(),F(O6.$$.fragment),Mft=l(),nt=a("div"),F(QS.$$.fragment),Eft=l(),qLe=a("p"),Cft=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wft=l(),zn=a("p"),Aft=o("The model class to instantiate is selected based on the "),jLe=a("code"),yft=o("model_type"),Lft=o(` property of the config object (either
passed as an argument or loaded from `),DLe=a("code"),xft=o("pretrained_model_name_or_path"),$ft=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GLe=a("code"),kft=o("pretrained_model_name_or_path"),Sft=o(":"),Rft=l(),OLe=a("ul"),V6=a("li"),VLe=a("strong"),Pft=o("bert"),Bft=o(" \u2014 "),ane=a("a"),Ift=o("FlaxBertForNextSentencePrediction"),Nft=o(" (BERT model)"),qft=l(),F(X6.$$.fragment),DJe=l(),em=a("h2"),z6=a("a"),XLe=a("span"),F(WS.$$.fragment),jft=l(),zLe=a("span"),Dft=o("FlaxAutoModelForImageClassification"),GJe=l(),kr=a("div"),F(US.$$.fragment),Gft=l(),om=a("p"),Oft=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nne=a("a"),Vft=o("from_pretrained()"),Xft=o(" class method or the "),sne=a("a"),zft=o("from_config()"),Qft=o(` class
method.`),Wft=l(),HS=a("p"),Uft=o("This class cannot be instantiated directly using "),QLe=a("code"),Hft=o("__init__()"),Jft=o(" (throws an error)."),Yft=l(),ma=a("div"),F(JS.$$.fragment),Kft=l(),WLe=a("p"),Zft=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),emt=l(),rm=a("p"),omt=o(`Note:
Loading a model from its configuration file does `),ULe=a("strong"),rmt=o("not"),tmt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lne=a("a"),amt=o("from_pretrained()"),nmt=o(" to load the model weights."),smt=l(),F(Q6.$$.fragment),lmt=l(),st=a("div"),F(YS.$$.fragment),imt=l(),HLe=a("p"),dmt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cmt=l(),Qn=a("p"),fmt=o("The model class to instantiate is selected based on the "),JLe=a("code"),mmt=o("model_type"),gmt=o(` property of the config object (either
passed as an argument or loaded from `),YLe=a("code"),hmt=o("pretrained_model_name_or_path"),pmt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KLe=a("code"),umt=o("pretrained_model_name_or_path"),_mt=o(":"),bmt=l(),KS=a("ul"),W6=a("li"),ZLe=a("strong"),vmt=o("beit"),Fmt=o(" \u2014 "),ine=a("a"),Tmt=o("FlaxBeitForImageClassification"),Mmt=o(" (BEiT model)"),Emt=l(),U6=a("li"),e9e=a("strong"),Cmt=o("vit"),wmt=o(" \u2014 "),dne=a("a"),Amt=o("FlaxViTForImageClassification"),ymt=o(" (ViT model)"),Lmt=l(),F(H6.$$.fragment),OJe=l(),tm=a("h2"),J6=a("a"),o9e=a("span"),F(ZS.$$.fragment),xmt=l(),r9e=a("span"),$mt=o("FlaxAutoModelForVision2Seq"),VJe=l(),Sr=a("div"),F(eR.$$.fragment),kmt=l(),am=a("p"),Smt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cne=a("a"),Rmt=o("from_pretrained()"),Pmt=o(" class method or the "),fne=a("a"),Bmt=o("from_config()"),Imt=o(` class
method.`),Nmt=l(),oR=a("p"),qmt=o("This class cannot be instantiated directly using "),t9e=a("code"),jmt=o("__init__()"),Dmt=o(" (throws an error)."),Gmt=l(),ga=a("div"),F(rR.$$.fragment),Omt=l(),a9e=a("p"),Vmt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Xmt=l(),nm=a("p"),zmt=o(`Note:
Loading a model from its configuration file does `),n9e=a("strong"),Qmt=o("not"),Wmt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mne=a("a"),Umt=o("from_pretrained()"),Hmt=o(" to load the model weights."),Jmt=l(),F(Y6.$$.fragment),Ymt=l(),lt=a("div"),F(tR.$$.fragment),Kmt=l(),s9e=a("p"),Zmt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),egt=l(),Wn=a("p"),ogt=o("The model class to instantiate is selected based on the "),l9e=a("code"),rgt=o("model_type"),tgt=o(` property of the config object (either
passed as an argument or loaded from `),i9e=a("code"),agt=o("pretrained_model_name_or_path"),ngt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d9e=a("code"),sgt=o("pretrained_model_name_or_path"),lgt=o(":"),igt=l(),c9e=a("ul"),K6=a("li"),f9e=a("strong"),dgt=o("vision-encoder-decoder"),cgt=o(" \u2014 "),gne=a("a"),fgt=o("FlaxVisionEncoderDecoderModel"),mgt=o(" (Vision Encoder decoder model)"),ggt=l(),F(Z6.$$.fragment),this.h()},l(f){const _=Waa('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var aR=s(p);m=n(aR,"A",{id:!0,class:!0,href:!0});var m9e=s(m);u=n(m9e,"SPAN",{});var g9e=s(u);T(d.$$.fragment,g9e),g9e.forEach(t),m9e.forEach(t),h=i(aR),yo=n(aR,"SPAN",{});var h9e=s(yo);Ui=r(h9e,"Auto Classes"),h9e.forEach(t),aR.forEach(t),dm=i(f),gt=n(f,"P",{});var nR=s(gt);Hi=r(nR,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ji=n(nR,"CODE",{});var p9e=s(Ji);yL=r(p9e,"from_pretrained()"),p9e.forEach(t),cm=r(nR,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),nR.forEach(t),Oe=i(f),We=n(f,"P",{});var Un=s(We);Yi=r(Un,"Instantiating one of "),Hn=n(Un,"A",{href:!0});var u9e=s(Hn);LL=r(u9e,"AutoConfig"),u9e.forEach(t),Jn=r(Un,", "),Yn=n(Un,"A",{href:!0});var _9e=s(Yn);xL=r(_9e,"AutoModel"),_9e.forEach(t),Ki=r(Un,`, and
`),Kn=n(Un,"A",{href:!0});var b9e=s(Kn);$L=r(b9e,"AutoTokenizer"),b9e.forEach(t),Zi=r(Un," will directly create a class of the relevant architecture. For instance"),Un.forEach(t),fm=i(f),T(Va.$$.fragment,f),Ue=i(f),Ae=n(f,"P",{});var sR=s(Ae);yP=r(sR,"will create a model that is an instance of "),ed=n(sR,"A",{href:!0});var v9e=s(ed);LP=r(v9e,"BertModel"),v9e.forEach(t),xP=r(sR,"."),sR.forEach(t),Lo=i(f),Xa=n(f,"P",{});var lR=s(Xa);$P=r(lR,"There is one class of "),mm=n(lR,"CODE",{});var F9e=s(mm);kP=r(F9e,"AutoModel"),F9e.forEach(t),iZe=r(lR," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),lR.forEach(t),RUe=i(f),od=n(f,"H2",{class:!0});var iR=s(od);gm=n(iR,"A",{id:!0,class:!0,href:!0});var T9e=s(gm);gle=n(T9e,"SPAN",{});var M9e=s(gle);T(kL.$$.fragment,M9e),M9e.forEach(t),T9e.forEach(t),dZe=i(iR),hle=n(iR,"SPAN",{});var E9e=s(hle);cZe=r(E9e,"Extending the Auto Classes"),E9e.forEach(t),iR.forEach(t),PUe=i(f),Zn=n(f,"P",{});var sm=s(Zn);fZe=r(sm,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ple=n(sm,"CODE",{});var C9e=s(ple);mZe=r(C9e,"NewModel"),C9e.forEach(t),gZe=r(sm,", make sure you have a "),ule=n(sm,"CODE",{});var w9e=s(ule);hZe=r(w9e,"NewModelConfig"),w9e.forEach(t),pZe=r(sm,` then you can add those to the auto
classes like this:`),sm.forEach(t),BUe=i(f),T(SL.$$.fragment,f),IUe=i(f),SP=n(f,"P",{});var A9e=s(SP);uZe=r(A9e,"You will then be able to use the auto classes like you would usually do!"),A9e.forEach(t),NUe=i(f),T(hm.$$.fragment,f),qUe=i(f),rd=n(f,"H2",{class:!0});var dR=s(rd);pm=n(dR,"A",{id:!0,class:!0,href:!0});var y9e=s(pm);_le=n(y9e,"SPAN",{});var L9e=s(_le);T(RL.$$.fragment,L9e),L9e.forEach(t),y9e.forEach(t),_Ze=i(dR),ble=n(dR,"SPAN",{});var x9e=s(ble);bZe=r(x9e,"AutoConfig"),x9e.forEach(t),dR.forEach(t),jUe=i(f),xo=n(f,"DIV",{class:!0});var ft=s(xo);T(PL.$$.fragment,ft),vZe=i(ft),BL=n(ft,"P",{});var cR=s(BL);FZe=r(cR,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),RP=n(cR,"A",{href:!0});var $9e=s(RP);TZe=r($9e,"from_pretrained()"),$9e.forEach(t),MZe=r(cR," class method."),cR.forEach(t),EZe=i(ft),IL=n(ft,"P",{});var fR=s(IL);CZe=r(fR,"This class cannot be instantiated directly using "),vle=n(fR,"CODE",{});var k9e=s(vle);wZe=r(k9e,"__init__()"),k9e.forEach(t),AZe=r(fR," (throws an error)."),fR.forEach(t),yZe=i(ft),Rr=n(ft,"DIV",{class:!0});var mt=s(Rr);T(NL.$$.fragment,mt),LZe=i(mt),Fle=n(mt,"P",{});var S9e=s(Fle);xZe=r(S9e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),S9e.forEach(t),$Ze=i(mt),td=n(mt,"P",{});var lm=s(td);kZe=r(lm,"The configuration class to instantiate is selected based on the "),Tle=n(lm,"CODE",{});var R9e=s(Tle);SZe=r(R9e,"model_type"),R9e.forEach(t),RZe=r(lm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Mle=n(lm,"CODE",{});var P9e=s(Mle);PZe=r(P9e,"pretrained_model_name_or_path"),P9e.forEach(t),BZe=r(lm,":"),lm.forEach(t),IZe=i(mt),A=n(mt,"UL",{});var y=s(A);um=n(y,"LI",{});var e7=s(um);Ele=n(e7,"STRONG",{});var B9e=s(Ele);NZe=r(B9e,"albert"),B9e.forEach(t),qZe=r(e7," \u2014 "),PP=n(e7,"A",{href:!0});var I9e=s(PP);jZe=r(I9e,"AlbertConfig"),I9e.forEach(t),DZe=r(e7," (ALBERT model)"),e7.forEach(t),GZe=i(y),_m=n(y,"LI",{});var o7=s(_m);Cle=n(o7,"STRONG",{});var N9e=s(Cle);OZe=r(N9e,"bart"),N9e.forEach(t),VZe=r(o7," \u2014 "),BP=n(o7,"A",{href:!0});var q9e=s(BP);XZe=r(q9e,"BartConfig"),q9e.forEach(t),zZe=r(o7," (BART model)"),o7.forEach(t),QZe=i(y),bm=n(y,"LI",{});var r7=s(bm);wle=n(r7,"STRONG",{});var j9e=s(wle);WZe=r(j9e,"beit"),j9e.forEach(t),UZe=r(r7," \u2014 "),IP=n(r7,"A",{href:!0});var D9e=s(IP);HZe=r(D9e,"BeitConfig"),D9e.forEach(t),JZe=r(r7," (BEiT model)"),r7.forEach(t),YZe=i(y),vm=n(y,"LI",{});var t7=s(vm);Ale=n(t7,"STRONG",{});var G9e=s(Ale);KZe=r(G9e,"bert"),G9e.forEach(t),ZZe=r(t7," \u2014 "),NP=n(t7,"A",{href:!0});var O9e=s(NP);eeo=r(O9e,"BertConfig"),O9e.forEach(t),oeo=r(t7," (BERT model)"),t7.forEach(t),reo=i(y),Fm=n(y,"LI",{});var a7=s(Fm);yle=n(a7,"STRONG",{});var V9e=s(yle);teo=r(V9e,"bert-generation"),V9e.forEach(t),aeo=r(a7," \u2014 "),qP=n(a7,"A",{href:!0});var X9e=s(qP);neo=r(X9e,"BertGenerationConfig"),X9e.forEach(t),seo=r(a7," (Bert Generation model)"),a7.forEach(t),leo=i(y),Tm=n(y,"LI",{});var n7=s(Tm);Lle=n(n7,"STRONG",{});var z9e=s(Lle);ieo=r(z9e,"big_bird"),z9e.forEach(t),deo=r(n7," \u2014 "),jP=n(n7,"A",{href:!0});var Q9e=s(jP);ceo=r(Q9e,"BigBirdConfig"),Q9e.forEach(t),feo=r(n7," (BigBird model)"),n7.forEach(t),meo=i(y),Mm=n(y,"LI",{});var s7=s(Mm);xle=n(s7,"STRONG",{});var W9e=s(xle);geo=r(W9e,"bigbird_pegasus"),W9e.forEach(t),heo=r(s7," \u2014 "),DP=n(s7,"A",{href:!0});var U9e=s(DP);peo=r(U9e,"BigBirdPegasusConfig"),U9e.forEach(t),ueo=r(s7," (BigBird-Pegasus model)"),s7.forEach(t),_eo=i(y),Em=n(y,"LI",{});var l7=s(Em);$le=n(l7,"STRONG",{});var H9e=s($le);beo=r(H9e,"blenderbot"),H9e.forEach(t),veo=r(l7," \u2014 "),GP=n(l7,"A",{href:!0});var J9e=s(GP);Feo=r(J9e,"BlenderbotConfig"),J9e.forEach(t),Teo=r(l7," (Blenderbot model)"),l7.forEach(t),Meo=i(y),Cm=n(y,"LI",{});var i7=s(Cm);kle=n(i7,"STRONG",{});var Y9e=s(kle);Eeo=r(Y9e,"blenderbot-small"),Y9e.forEach(t),Ceo=r(i7," \u2014 "),OP=n(i7,"A",{href:!0});var K9e=s(OP);weo=r(K9e,"BlenderbotSmallConfig"),K9e.forEach(t),Aeo=r(i7," (BlenderbotSmall model)"),i7.forEach(t),yeo=i(y),wm=n(y,"LI",{});var d7=s(wm);Sle=n(d7,"STRONG",{});var Z9e=s(Sle);Leo=r(Z9e,"bloom"),Z9e.forEach(t),xeo=r(d7," \u2014 "),VP=n(d7,"A",{href:!0});var exe=s(VP);$eo=r(exe,"BloomConfig"),exe.forEach(t),keo=r(d7," (BLOOM model)"),d7.forEach(t),Seo=i(y),Am=n(y,"LI",{});var c7=s(Am);Rle=n(c7,"STRONG",{});var oxe=s(Rle);Reo=r(oxe,"camembert"),oxe.forEach(t),Peo=r(c7," \u2014 "),XP=n(c7,"A",{href:!0});var rxe=s(XP);Beo=r(rxe,"CamembertConfig"),rxe.forEach(t),Ieo=r(c7," (CamemBERT model)"),c7.forEach(t),Neo=i(y),ym=n(y,"LI",{});var f7=s(ym);Ple=n(f7,"STRONG",{});var txe=s(Ple);qeo=r(txe,"canine"),txe.forEach(t),jeo=r(f7," \u2014 "),zP=n(f7,"A",{href:!0});var axe=s(zP);Deo=r(axe,"CanineConfig"),axe.forEach(t),Geo=r(f7," (CANINE model)"),f7.forEach(t),Oeo=i(y),Lm=n(y,"LI",{});var m7=s(Lm);Ble=n(m7,"STRONG",{});var nxe=s(Ble);Veo=r(nxe,"clip"),nxe.forEach(t),Xeo=r(m7," \u2014 "),QP=n(m7,"A",{href:!0});var sxe=s(QP);zeo=r(sxe,"CLIPConfig"),sxe.forEach(t),Qeo=r(m7," (CLIP model)"),m7.forEach(t),Weo=i(y),xm=n(y,"LI",{});var g7=s(xm);Ile=n(g7,"STRONG",{});var lxe=s(Ile);Ueo=r(lxe,"codegen"),lxe.forEach(t),Heo=r(g7," \u2014 "),WP=n(g7,"A",{href:!0});var ixe=s(WP);Jeo=r(ixe,"CodeGenConfig"),ixe.forEach(t),Yeo=r(g7," (CodeGen model)"),g7.forEach(t),Keo=i(y),$m=n(y,"LI",{});var h7=s($m);Nle=n(h7,"STRONG",{});var dxe=s(Nle);Zeo=r(dxe,"convbert"),dxe.forEach(t),eoo=r(h7," \u2014 "),UP=n(h7,"A",{href:!0});var cxe=s(UP);ooo=r(cxe,"ConvBertConfig"),cxe.forEach(t),roo=r(h7," (ConvBERT model)"),h7.forEach(t),too=i(y),km=n(y,"LI",{});var p7=s(km);qle=n(p7,"STRONG",{});var fxe=s(qle);aoo=r(fxe,"convnext"),fxe.forEach(t),noo=r(p7," \u2014 "),HP=n(p7,"A",{href:!0});var mxe=s(HP);soo=r(mxe,"ConvNextConfig"),mxe.forEach(t),loo=r(p7," (ConvNeXT model)"),p7.forEach(t),ioo=i(y),Sm=n(y,"LI",{});var u7=s(Sm);jle=n(u7,"STRONG",{});var gxe=s(jle);doo=r(gxe,"ctrl"),gxe.forEach(t),coo=r(u7," \u2014 "),JP=n(u7,"A",{href:!0});var hxe=s(JP);foo=r(hxe,"CTRLConfig"),hxe.forEach(t),moo=r(u7," (CTRL model)"),u7.forEach(t),goo=i(y),Rm=n(y,"LI",{});var _7=s(Rm);Dle=n(_7,"STRONG",{});var pxe=s(Dle);hoo=r(pxe,"cvt"),pxe.forEach(t),poo=r(_7," \u2014 "),YP=n(_7,"A",{href:!0});var uxe=s(YP);uoo=r(uxe,"CvtConfig"),uxe.forEach(t),_oo=r(_7," (CvT model)"),_7.forEach(t),boo=i(y),Pm=n(y,"LI",{});var b7=s(Pm);Gle=n(b7,"STRONG",{});var _xe=s(Gle);voo=r(_xe,"data2vec-audio"),_xe.forEach(t),Foo=r(b7," \u2014 "),KP=n(b7,"A",{href:!0});var bxe=s(KP);Too=r(bxe,"Data2VecAudioConfig"),bxe.forEach(t),Moo=r(b7," (Data2VecAudio model)"),b7.forEach(t),Eoo=i(y),Bm=n(y,"LI",{});var v7=s(Bm);Ole=n(v7,"STRONG",{});var vxe=s(Ole);Coo=r(vxe,"data2vec-text"),vxe.forEach(t),woo=r(v7," \u2014 "),ZP=n(v7,"A",{href:!0});var Fxe=s(ZP);Aoo=r(Fxe,"Data2VecTextConfig"),Fxe.forEach(t),yoo=r(v7," (Data2VecText model)"),v7.forEach(t),Loo=i(y),Im=n(y,"LI",{});var F7=s(Im);Vle=n(F7,"STRONG",{});var Txe=s(Vle);xoo=r(Txe,"data2vec-vision"),Txe.forEach(t),$oo=r(F7," \u2014 "),eB=n(F7,"A",{href:!0});var Mxe=s(eB);koo=r(Mxe,"Data2VecVisionConfig"),Mxe.forEach(t),Soo=r(F7," (Data2VecVision model)"),F7.forEach(t),Roo=i(y),Nm=n(y,"LI",{});var T7=s(Nm);Xle=n(T7,"STRONG",{});var Exe=s(Xle);Poo=r(Exe,"deberta"),Exe.forEach(t),Boo=r(T7," \u2014 "),oB=n(T7,"A",{href:!0});var Cxe=s(oB);Ioo=r(Cxe,"DebertaConfig"),Cxe.forEach(t),Noo=r(T7," (DeBERTa model)"),T7.forEach(t),qoo=i(y),qm=n(y,"LI",{});var M7=s(qm);zle=n(M7,"STRONG",{});var wxe=s(zle);joo=r(wxe,"deberta-v2"),wxe.forEach(t),Doo=r(M7," \u2014 "),rB=n(M7,"A",{href:!0});var Axe=s(rB);Goo=r(Axe,"DebertaV2Config"),Axe.forEach(t),Ooo=r(M7," (DeBERTa-v2 model)"),M7.forEach(t),Voo=i(y),jm=n(y,"LI",{});var E7=s(jm);Qle=n(E7,"STRONG",{});var yxe=s(Qle);Xoo=r(yxe,"decision_transformer"),yxe.forEach(t),zoo=r(E7," \u2014 "),tB=n(E7,"A",{href:!0});var Lxe=s(tB);Qoo=r(Lxe,"DecisionTransformerConfig"),Lxe.forEach(t),Woo=r(E7," (Decision Transformer model)"),E7.forEach(t),Uoo=i(y),Dm=n(y,"LI",{});var C7=s(Dm);Wle=n(C7,"STRONG",{});var xxe=s(Wle);Hoo=r(xxe,"deit"),xxe.forEach(t),Joo=r(C7," \u2014 "),aB=n(C7,"A",{href:!0});var $xe=s(aB);Yoo=r($xe,"DeiTConfig"),$xe.forEach(t),Koo=r(C7," (DeiT model)"),C7.forEach(t),Zoo=i(y),Gm=n(y,"LI",{});var w7=s(Gm);Ule=n(w7,"STRONG",{});var pgt=s(Ule);ero=r(pgt,"detr"),pgt.forEach(t),oro=r(w7," \u2014 "),nB=n(w7,"A",{href:!0});var ugt=s(nB);rro=r(ugt,"DetrConfig"),ugt.forEach(t),tro=r(w7," (DETR model)"),w7.forEach(t),aro=i(y),Om=n(y,"LI",{});var kxe=s(Om);Hle=n(kxe,"STRONG",{});var _gt=s(Hle);nro=r(_gt,"distilbert"),_gt.forEach(t),sro=r(kxe," \u2014 "),sB=n(kxe,"A",{href:!0});var bgt=s(sB);lro=r(bgt,"DistilBertConfig"),bgt.forEach(t),iro=r(kxe," (DistilBERT model)"),kxe.forEach(t),dro=i(y),Vm=n(y,"LI",{});var Sxe=s(Vm);Jle=n(Sxe,"STRONG",{});var vgt=s(Jle);cro=r(vgt,"donut-swin"),vgt.forEach(t),fro=r(Sxe," \u2014 "),lB=n(Sxe,"A",{href:!0});var Fgt=s(lB);mro=r(Fgt,"DonutSwinConfig"),Fgt.forEach(t),gro=r(Sxe," (DonutSwin model)"),Sxe.forEach(t),hro=i(y),Xm=n(y,"LI",{});var Rxe=s(Xm);Yle=n(Rxe,"STRONG",{});var Tgt=s(Yle);pro=r(Tgt,"dpr"),Tgt.forEach(t),uro=r(Rxe," \u2014 "),iB=n(Rxe,"A",{href:!0});var Mgt=s(iB);_ro=r(Mgt,"DPRConfig"),Mgt.forEach(t),bro=r(Rxe," (DPR model)"),Rxe.forEach(t),vro=i(y),zm=n(y,"LI",{});var Pxe=s(zm);Kle=n(Pxe,"STRONG",{});var Egt=s(Kle);Fro=r(Egt,"dpt"),Egt.forEach(t),Tro=r(Pxe," \u2014 "),dB=n(Pxe,"A",{href:!0});var Cgt=s(dB);Mro=r(Cgt,"DPTConfig"),Cgt.forEach(t),Ero=r(Pxe," (DPT model)"),Pxe.forEach(t),Cro=i(y),Qm=n(y,"LI",{});var Bxe=s(Qm);Zle=n(Bxe,"STRONG",{});var wgt=s(Zle);wro=r(wgt,"electra"),wgt.forEach(t),Aro=r(Bxe," \u2014 "),cB=n(Bxe,"A",{href:!0});var Agt=s(cB);yro=r(Agt,"ElectraConfig"),Agt.forEach(t),Lro=r(Bxe," (ELECTRA model)"),Bxe.forEach(t),xro=i(y),Wm=n(y,"LI",{});var Ixe=s(Wm);eie=n(Ixe,"STRONG",{});var ygt=s(eie);$ro=r(ygt,"encoder-decoder"),ygt.forEach(t),kro=r(Ixe," \u2014 "),fB=n(Ixe,"A",{href:!0});var Lgt=s(fB);Sro=r(Lgt,"EncoderDecoderConfig"),Lgt.forEach(t),Rro=r(Ixe," (Encoder decoder model)"),Ixe.forEach(t),Pro=i(y),Um=n(y,"LI",{});var Nxe=s(Um);oie=n(Nxe,"STRONG",{});var xgt=s(oie);Bro=r(xgt,"flaubert"),xgt.forEach(t),Iro=r(Nxe," \u2014 "),mB=n(Nxe,"A",{href:!0});var $gt=s(mB);Nro=r($gt,"FlaubertConfig"),$gt.forEach(t),qro=r(Nxe," (FlauBERT model)"),Nxe.forEach(t),jro=i(y),Hm=n(y,"LI",{});var qxe=s(Hm);rie=n(qxe,"STRONG",{});var kgt=s(rie);Dro=r(kgt,"flava"),kgt.forEach(t),Gro=r(qxe," \u2014 "),gB=n(qxe,"A",{href:!0});var Sgt=s(gB);Oro=r(Sgt,"FlavaConfig"),Sgt.forEach(t),Vro=r(qxe," (FLAVA model)"),qxe.forEach(t),Xro=i(y),Jm=n(y,"LI",{});var jxe=s(Jm);tie=n(jxe,"STRONG",{});var Rgt=s(tie);zro=r(Rgt,"fnet"),Rgt.forEach(t),Qro=r(jxe," \u2014 "),hB=n(jxe,"A",{href:!0});var Pgt=s(hB);Wro=r(Pgt,"FNetConfig"),Pgt.forEach(t),Uro=r(jxe," (FNet model)"),jxe.forEach(t),Hro=i(y),Ym=n(y,"LI",{});var Dxe=s(Ym);aie=n(Dxe,"STRONG",{});var Bgt=s(aie);Jro=r(Bgt,"fsmt"),Bgt.forEach(t),Yro=r(Dxe," \u2014 "),pB=n(Dxe,"A",{href:!0});var Igt=s(pB);Kro=r(Igt,"FSMTConfig"),Igt.forEach(t),Zro=r(Dxe," (FairSeq Machine-Translation model)"),Dxe.forEach(t),eto=i(y),Km=n(y,"LI",{});var Gxe=s(Km);nie=n(Gxe,"STRONG",{});var Ngt=s(nie);oto=r(Ngt,"funnel"),Ngt.forEach(t),rto=r(Gxe," \u2014 "),uB=n(Gxe,"A",{href:!0});var qgt=s(uB);tto=r(qgt,"FunnelConfig"),qgt.forEach(t),ato=r(Gxe," (Funnel Transformer model)"),Gxe.forEach(t),nto=i(y),Zm=n(y,"LI",{});var Oxe=s(Zm);sie=n(Oxe,"STRONG",{});var jgt=s(sie);sto=r(jgt,"glpn"),jgt.forEach(t),lto=r(Oxe," \u2014 "),_B=n(Oxe,"A",{href:!0});var Dgt=s(_B);ito=r(Dgt,"GLPNConfig"),Dgt.forEach(t),dto=r(Oxe," (GLPN model)"),Oxe.forEach(t),cto=i(y),eg=n(y,"LI",{});var Vxe=s(eg);lie=n(Vxe,"STRONG",{});var Ggt=s(lie);fto=r(Ggt,"gpt2"),Ggt.forEach(t),mto=r(Vxe," \u2014 "),bB=n(Vxe,"A",{href:!0});var Ogt=s(bB);gto=r(Ogt,"GPT2Config"),Ogt.forEach(t),hto=r(Vxe," (OpenAI GPT-2 model)"),Vxe.forEach(t),pto=i(y),og=n(y,"LI",{});var Xxe=s(og);iie=n(Xxe,"STRONG",{});var Vgt=s(iie);uto=r(Vgt,"gpt_neo"),Vgt.forEach(t),_to=r(Xxe," \u2014 "),vB=n(Xxe,"A",{href:!0});var Xgt=s(vB);bto=r(Xgt,"GPTNeoConfig"),Xgt.forEach(t),vto=r(Xxe," (GPT Neo model)"),Xxe.forEach(t),Fto=i(y),rg=n(y,"LI",{});var zxe=s(rg);die=n(zxe,"STRONG",{});var zgt=s(die);Tto=r(zgt,"gpt_neox"),zgt.forEach(t),Mto=r(zxe," \u2014 "),FB=n(zxe,"A",{href:!0});var Qgt=s(FB);Eto=r(Qgt,"GPTNeoXConfig"),Qgt.forEach(t),Cto=r(zxe," (GPT NeoX model)"),zxe.forEach(t),wto=i(y),tg=n(y,"LI",{});var Qxe=s(tg);cie=n(Qxe,"STRONG",{});var Wgt=s(cie);Ato=r(Wgt,"gptj"),Wgt.forEach(t),yto=r(Qxe," \u2014 "),TB=n(Qxe,"A",{href:!0});var Ugt=s(TB);Lto=r(Ugt,"GPTJConfig"),Ugt.forEach(t),xto=r(Qxe," (GPT-J model)"),Qxe.forEach(t),$to=i(y),ag=n(y,"LI",{});var Wxe=s(ag);fie=n(Wxe,"STRONG",{});var Hgt=s(fie);kto=r(Hgt,"groupvit"),Hgt.forEach(t),Sto=r(Wxe," \u2014 "),MB=n(Wxe,"A",{href:!0});var Jgt=s(MB);Rto=r(Jgt,"GroupViTConfig"),Jgt.forEach(t),Pto=r(Wxe," (GroupViT model)"),Wxe.forEach(t),Bto=i(y),ng=n(y,"LI",{});var Uxe=s(ng);mie=n(Uxe,"STRONG",{});var Ygt=s(mie);Ito=r(Ygt,"hubert"),Ygt.forEach(t),Nto=r(Uxe," \u2014 "),EB=n(Uxe,"A",{href:!0});var Kgt=s(EB);qto=r(Kgt,"HubertConfig"),Kgt.forEach(t),jto=r(Uxe," (Hubert model)"),Uxe.forEach(t),Dto=i(y),sg=n(y,"LI",{});var Hxe=s(sg);gie=n(Hxe,"STRONG",{});var Zgt=s(gie);Gto=r(Zgt,"ibert"),Zgt.forEach(t),Oto=r(Hxe," \u2014 "),CB=n(Hxe,"A",{href:!0});var eht=s(CB);Vto=r(eht,"IBertConfig"),eht.forEach(t),Xto=r(Hxe," (I-BERT model)"),Hxe.forEach(t),zto=i(y),lg=n(y,"LI",{});var Jxe=s(lg);hie=n(Jxe,"STRONG",{});var oht=s(hie);Qto=r(oht,"imagegpt"),oht.forEach(t),Wto=r(Jxe," \u2014 "),wB=n(Jxe,"A",{href:!0});var rht=s(wB);Uto=r(rht,"ImageGPTConfig"),rht.forEach(t),Hto=r(Jxe," (ImageGPT model)"),Jxe.forEach(t),Jto=i(y),ig=n(y,"LI",{});var Yxe=s(ig);pie=n(Yxe,"STRONG",{});var tht=s(pie);Yto=r(tht,"layoutlm"),tht.forEach(t),Kto=r(Yxe," \u2014 "),AB=n(Yxe,"A",{href:!0});var aht=s(AB);Zto=r(aht,"LayoutLMConfig"),aht.forEach(t),eao=r(Yxe," (LayoutLM model)"),Yxe.forEach(t),oao=i(y),dg=n(y,"LI",{});var Kxe=s(dg);uie=n(Kxe,"STRONG",{});var nht=s(uie);rao=r(nht,"layoutlmv2"),nht.forEach(t),tao=r(Kxe," \u2014 "),yB=n(Kxe,"A",{href:!0});var sht=s(yB);aao=r(sht,"LayoutLMv2Config"),sht.forEach(t),nao=r(Kxe," (LayoutLMv2 model)"),Kxe.forEach(t),sao=i(y),cg=n(y,"LI",{});var Zxe=s(cg);_ie=n(Zxe,"STRONG",{});var lht=s(_ie);lao=r(lht,"layoutlmv3"),lht.forEach(t),iao=r(Zxe," \u2014 "),LB=n(Zxe,"A",{href:!0});var iht=s(LB);dao=r(iht,"LayoutLMv3Config"),iht.forEach(t),cao=r(Zxe," (LayoutLMv3 model)"),Zxe.forEach(t),fao=i(y),fg=n(y,"LI",{});var e$e=s(fg);bie=n(e$e,"STRONG",{});var dht=s(bie);mao=r(dht,"led"),dht.forEach(t),gao=r(e$e," \u2014 "),xB=n(e$e,"A",{href:!0});var cht=s(xB);hao=r(cht,"LEDConfig"),cht.forEach(t),pao=r(e$e," (LED model)"),e$e.forEach(t),uao=i(y),mg=n(y,"LI",{});var o$e=s(mg);vie=n(o$e,"STRONG",{});var fht=s(vie);_ao=r(fht,"levit"),fht.forEach(t),bao=r(o$e," \u2014 "),$B=n(o$e,"A",{href:!0});var mht=s($B);vao=r(mht,"LevitConfig"),mht.forEach(t),Fao=r(o$e," (LeViT model)"),o$e.forEach(t),Tao=i(y),gg=n(y,"LI",{});var r$e=s(gg);Fie=n(r$e,"STRONG",{});var ght=s(Fie);Mao=r(ght,"longformer"),ght.forEach(t),Eao=r(r$e," \u2014 "),kB=n(r$e,"A",{href:!0});var hht=s(kB);Cao=r(hht,"LongformerConfig"),hht.forEach(t),wao=r(r$e," (Longformer model)"),r$e.forEach(t),Aao=i(y),hg=n(y,"LI",{});var t$e=s(hg);Tie=n(t$e,"STRONG",{});var pht=s(Tie);yao=r(pht,"longt5"),pht.forEach(t),Lao=r(t$e," \u2014 "),SB=n(t$e,"A",{href:!0});var uht=s(SB);xao=r(uht,"LongT5Config"),uht.forEach(t),$ao=r(t$e," (LongT5 model)"),t$e.forEach(t),kao=i(y),pg=n(y,"LI",{});var a$e=s(pg);Mie=n(a$e,"STRONG",{});var _ht=s(Mie);Sao=r(_ht,"luke"),_ht.forEach(t),Rao=r(a$e," \u2014 "),RB=n(a$e,"A",{href:!0});var bht=s(RB);Pao=r(bht,"LukeConfig"),bht.forEach(t),Bao=r(a$e," (LUKE model)"),a$e.forEach(t),Iao=i(y),ug=n(y,"LI",{});var n$e=s(ug);Eie=n(n$e,"STRONG",{});var vht=s(Eie);Nao=r(vht,"lxmert"),vht.forEach(t),qao=r(n$e," \u2014 "),PB=n(n$e,"A",{href:!0});var Fht=s(PB);jao=r(Fht,"LxmertConfig"),Fht.forEach(t),Dao=r(n$e," (LXMERT model)"),n$e.forEach(t),Gao=i(y),_g=n(y,"LI",{});var s$e=s(_g);Cie=n(s$e,"STRONG",{});var Tht=s(Cie);Oao=r(Tht,"m2m_100"),Tht.forEach(t),Vao=r(s$e," \u2014 "),BB=n(s$e,"A",{href:!0});var Mht=s(BB);Xao=r(Mht,"M2M100Config"),Mht.forEach(t),zao=r(s$e," (M2M100 model)"),s$e.forEach(t),Qao=i(y),bg=n(y,"LI",{});var l$e=s(bg);wie=n(l$e,"STRONG",{});var Eht=s(wie);Wao=r(Eht,"marian"),Eht.forEach(t),Uao=r(l$e," \u2014 "),IB=n(l$e,"A",{href:!0});var Cht=s(IB);Hao=r(Cht,"MarianConfig"),Cht.forEach(t),Jao=r(l$e," (Marian model)"),l$e.forEach(t),Yao=i(y),vg=n(y,"LI",{});var i$e=s(vg);Aie=n(i$e,"STRONG",{});var wht=s(Aie);Kao=r(wht,"maskformer"),wht.forEach(t),Zao=r(i$e," \u2014 "),NB=n(i$e,"A",{href:!0});var Aht=s(NB);eno=r(Aht,"MaskFormerConfig"),Aht.forEach(t),ono=r(i$e," (MaskFormer model)"),i$e.forEach(t),rno=i(y),Fg=n(y,"LI",{});var d$e=s(Fg);yie=n(d$e,"STRONG",{});var yht=s(yie);tno=r(yht,"mbart"),yht.forEach(t),ano=r(d$e," \u2014 "),qB=n(d$e,"A",{href:!0});var Lht=s(qB);nno=r(Lht,"MBartConfig"),Lht.forEach(t),sno=r(d$e," (mBART model)"),d$e.forEach(t),lno=i(y),Tg=n(y,"LI",{});var c$e=s(Tg);Lie=n(c$e,"STRONG",{});var xht=s(Lie);ino=r(xht,"mctct"),xht.forEach(t),dno=r(c$e," \u2014 "),jB=n(c$e,"A",{href:!0});var $ht=s(jB);cno=r($ht,"MCTCTConfig"),$ht.forEach(t),fno=r(c$e," (M-CTC-T model)"),c$e.forEach(t),mno=i(y),Mg=n(y,"LI",{});var f$e=s(Mg);xie=n(f$e,"STRONG",{});var kht=s(xie);gno=r(kht,"megatron-bert"),kht.forEach(t),hno=r(f$e," \u2014 "),DB=n(f$e,"A",{href:!0});var Sht=s(DB);pno=r(Sht,"MegatronBertConfig"),Sht.forEach(t),uno=r(f$e," (Megatron-BERT model)"),f$e.forEach(t),_no=i(y),Eg=n(y,"LI",{});var m$e=s(Eg);$ie=n(m$e,"STRONG",{});var Rht=s($ie);bno=r(Rht,"mobilebert"),Rht.forEach(t),vno=r(m$e," \u2014 "),GB=n(m$e,"A",{href:!0});var Pht=s(GB);Fno=r(Pht,"MobileBertConfig"),Pht.forEach(t),Tno=r(m$e," (MobileBERT model)"),m$e.forEach(t),Mno=i(y),Cg=n(y,"LI",{});var g$e=s(Cg);kie=n(g$e,"STRONG",{});var Bht=s(kie);Eno=r(Bht,"mobilevit"),Bht.forEach(t),Cno=r(g$e," \u2014 "),OB=n(g$e,"A",{href:!0});var Iht=s(OB);wno=r(Iht,"MobileViTConfig"),Iht.forEach(t),Ano=r(g$e," (MobileViT model)"),g$e.forEach(t),yno=i(y),wg=n(y,"LI",{});var h$e=s(wg);Sie=n(h$e,"STRONG",{});var Nht=s(Sie);Lno=r(Nht,"mpnet"),Nht.forEach(t),xno=r(h$e," \u2014 "),VB=n(h$e,"A",{href:!0});var qht=s(VB);$no=r(qht,"MPNetConfig"),qht.forEach(t),kno=r(h$e," (MPNet model)"),h$e.forEach(t),Sno=i(y),Ag=n(y,"LI",{});var p$e=s(Ag);Rie=n(p$e,"STRONG",{});var jht=s(Rie);Rno=r(jht,"mt5"),jht.forEach(t),Pno=r(p$e," \u2014 "),XB=n(p$e,"A",{href:!0});var Dht=s(XB);Bno=r(Dht,"MT5Config"),Dht.forEach(t),Ino=r(p$e," (MT5 model)"),p$e.forEach(t),Nno=i(y),yg=n(y,"LI",{});var u$e=s(yg);Pie=n(u$e,"STRONG",{});var Ght=s(Pie);qno=r(Ght,"mvp"),Ght.forEach(t),jno=r(u$e," \u2014 "),zB=n(u$e,"A",{href:!0});var Oht=s(zB);Dno=r(Oht,"MvpConfig"),Oht.forEach(t),Gno=r(u$e," (MVP model)"),u$e.forEach(t),Ono=i(y),Lg=n(y,"LI",{});var _$e=s(Lg);Bie=n(_$e,"STRONG",{});var Vht=s(Bie);Vno=r(Vht,"nezha"),Vht.forEach(t),Xno=r(_$e," \u2014 "),QB=n(_$e,"A",{href:!0});var Xht=s(QB);zno=r(Xht,"NezhaConfig"),Xht.forEach(t),Qno=r(_$e," (Nezha model)"),_$e.forEach(t),Wno=i(y),xg=n(y,"LI",{});var b$e=s(xg);Iie=n(b$e,"STRONG",{});var zht=s(Iie);Uno=r(zht,"nystromformer"),zht.forEach(t),Hno=r(b$e," \u2014 "),WB=n(b$e,"A",{href:!0});var Qht=s(WB);Jno=r(Qht,"NystromformerConfig"),Qht.forEach(t),Yno=r(b$e," (Nystr\xF6mformer model)"),b$e.forEach(t),Kno=i(y),$g=n(y,"LI",{});var v$e=s($g);Nie=n(v$e,"STRONG",{});var Wht=s(Nie);Zno=r(Wht,"openai-gpt"),Wht.forEach(t),eso=r(v$e," \u2014 "),UB=n(v$e,"A",{href:!0});var Uht=s(UB);oso=r(Uht,"OpenAIGPTConfig"),Uht.forEach(t),rso=r(v$e," (OpenAI GPT model)"),v$e.forEach(t),tso=i(y),kg=n(y,"LI",{});var F$e=s(kg);qie=n(F$e,"STRONG",{});var Hht=s(qie);aso=r(Hht,"opt"),Hht.forEach(t),nso=r(F$e," \u2014 "),HB=n(F$e,"A",{href:!0});var Jht=s(HB);sso=r(Jht,"OPTConfig"),Jht.forEach(t),lso=r(F$e," (OPT model)"),F$e.forEach(t),iso=i(y),Sg=n(y,"LI",{});var T$e=s(Sg);jie=n(T$e,"STRONG",{});var Yht=s(jie);dso=r(Yht,"owlvit"),Yht.forEach(t),cso=r(T$e," \u2014 "),JB=n(T$e,"A",{href:!0});var Kht=s(JB);fso=r(Kht,"OwlViTConfig"),Kht.forEach(t),mso=r(T$e," (OWL-ViT model)"),T$e.forEach(t),gso=i(y),Rg=n(y,"LI",{});var M$e=s(Rg);Die=n(M$e,"STRONG",{});var Zht=s(Die);hso=r(Zht,"pegasus"),Zht.forEach(t),pso=r(M$e," \u2014 "),YB=n(M$e,"A",{href:!0});var ept=s(YB);uso=r(ept,"PegasusConfig"),ept.forEach(t),_so=r(M$e," (Pegasus model)"),M$e.forEach(t),bso=i(y),Pg=n(y,"LI",{});var E$e=s(Pg);Gie=n(E$e,"STRONG",{});var opt=s(Gie);vso=r(opt,"perceiver"),opt.forEach(t),Fso=r(E$e," \u2014 "),KB=n(E$e,"A",{href:!0});var rpt=s(KB);Tso=r(rpt,"PerceiverConfig"),rpt.forEach(t),Mso=r(E$e," (Perceiver model)"),E$e.forEach(t),Eso=i(y),Bg=n(y,"LI",{});var C$e=s(Bg);Oie=n(C$e,"STRONG",{});var tpt=s(Oie);Cso=r(tpt,"plbart"),tpt.forEach(t),wso=r(C$e," \u2014 "),ZB=n(C$e,"A",{href:!0});var apt=s(ZB);Aso=r(apt,"PLBartConfig"),apt.forEach(t),yso=r(C$e," (PLBart model)"),C$e.forEach(t),Lso=i(y),Ig=n(y,"LI",{});var w$e=s(Ig);Vie=n(w$e,"STRONG",{});var npt=s(Vie);xso=r(npt,"poolformer"),npt.forEach(t),$so=r(w$e," \u2014 "),eI=n(w$e,"A",{href:!0});var spt=s(eI);kso=r(spt,"PoolFormerConfig"),spt.forEach(t),Sso=r(w$e," (PoolFormer model)"),w$e.forEach(t),Rso=i(y),Ng=n(y,"LI",{});var A$e=s(Ng);Xie=n(A$e,"STRONG",{});var lpt=s(Xie);Pso=r(lpt,"prophetnet"),lpt.forEach(t),Bso=r(A$e," \u2014 "),oI=n(A$e,"A",{href:!0});var ipt=s(oI);Iso=r(ipt,"ProphetNetConfig"),ipt.forEach(t),Nso=r(A$e," (ProphetNet model)"),A$e.forEach(t),qso=i(y),qg=n(y,"LI",{});var y$e=s(qg);zie=n(y$e,"STRONG",{});var dpt=s(zie);jso=r(dpt,"qdqbert"),dpt.forEach(t),Dso=r(y$e," \u2014 "),rI=n(y$e,"A",{href:!0});var cpt=s(rI);Gso=r(cpt,"QDQBertConfig"),cpt.forEach(t),Oso=r(y$e," (QDQBert model)"),y$e.forEach(t),Vso=i(y),jg=n(y,"LI",{});var L$e=s(jg);Qie=n(L$e,"STRONG",{});var fpt=s(Qie);Xso=r(fpt,"rag"),fpt.forEach(t),zso=r(L$e," \u2014 "),tI=n(L$e,"A",{href:!0});var mpt=s(tI);Qso=r(mpt,"RagConfig"),mpt.forEach(t),Wso=r(L$e," (RAG model)"),L$e.forEach(t),Uso=i(y),Dg=n(y,"LI",{});var x$e=s(Dg);Wie=n(x$e,"STRONG",{});var gpt=s(Wie);Hso=r(gpt,"realm"),gpt.forEach(t),Jso=r(x$e," \u2014 "),aI=n(x$e,"A",{href:!0});var hpt=s(aI);Yso=r(hpt,"RealmConfig"),hpt.forEach(t),Kso=r(x$e," (REALM model)"),x$e.forEach(t),Zso=i(y),Gg=n(y,"LI",{});var $$e=s(Gg);Uie=n($$e,"STRONG",{});var ppt=s(Uie);elo=r(ppt,"reformer"),ppt.forEach(t),olo=r($$e," \u2014 "),nI=n($$e,"A",{href:!0});var upt=s(nI);rlo=r(upt,"ReformerConfig"),upt.forEach(t),tlo=r($$e," (Reformer model)"),$$e.forEach(t),alo=i(y),Og=n(y,"LI",{});var k$e=s(Og);Hie=n(k$e,"STRONG",{});var _pt=s(Hie);nlo=r(_pt,"regnet"),_pt.forEach(t),slo=r(k$e," \u2014 "),sI=n(k$e,"A",{href:!0});var bpt=s(sI);llo=r(bpt,"RegNetConfig"),bpt.forEach(t),ilo=r(k$e," (RegNet model)"),k$e.forEach(t),dlo=i(y),Vg=n(y,"LI",{});var S$e=s(Vg);Jie=n(S$e,"STRONG",{});var vpt=s(Jie);clo=r(vpt,"rembert"),vpt.forEach(t),flo=r(S$e," \u2014 "),lI=n(S$e,"A",{href:!0});var Fpt=s(lI);mlo=r(Fpt,"RemBertConfig"),Fpt.forEach(t),glo=r(S$e," (RemBERT model)"),S$e.forEach(t),hlo=i(y),Xg=n(y,"LI",{});var R$e=s(Xg);Yie=n(R$e,"STRONG",{});var Tpt=s(Yie);plo=r(Tpt,"resnet"),Tpt.forEach(t),ulo=r(R$e," \u2014 "),iI=n(R$e,"A",{href:!0});var Mpt=s(iI);_lo=r(Mpt,"ResNetConfig"),Mpt.forEach(t),blo=r(R$e," (ResNet model)"),R$e.forEach(t),vlo=i(y),zg=n(y,"LI",{});var P$e=s(zg);Kie=n(P$e,"STRONG",{});var Ept=s(Kie);Flo=r(Ept,"retribert"),Ept.forEach(t),Tlo=r(P$e," \u2014 "),dI=n(P$e,"A",{href:!0});var Cpt=s(dI);Mlo=r(Cpt,"RetriBertConfig"),Cpt.forEach(t),Elo=r(P$e," (RetriBERT model)"),P$e.forEach(t),Clo=i(y),Qg=n(y,"LI",{});var B$e=s(Qg);Zie=n(B$e,"STRONG",{});var wpt=s(Zie);wlo=r(wpt,"roberta"),wpt.forEach(t),Alo=r(B$e," \u2014 "),cI=n(B$e,"A",{href:!0});var Apt=s(cI);ylo=r(Apt,"RobertaConfig"),Apt.forEach(t),Llo=r(B$e," (RoBERTa model)"),B$e.forEach(t),xlo=i(y),Wg=n(y,"LI",{});var I$e=s(Wg);ede=n(I$e,"STRONG",{});var ypt=s(ede);$lo=r(ypt,"roformer"),ypt.forEach(t),klo=r(I$e," \u2014 "),fI=n(I$e,"A",{href:!0});var Lpt=s(fI);Slo=r(Lpt,"RoFormerConfig"),Lpt.forEach(t),Rlo=r(I$e," (RoFormer model)"),I$e.forEach(t),Plo=i(y),Ug=n(y,"LI",{});var N$e=s(Ug);ode=n(N$e,"STRONG",{});var xpt=s(ode);Blo=r(xpt,"segformer"),xpt.forEach(t),Ilo=r(N$e," \u2014 "),mI=n(N$e,"A",{href:!0});var $pt=s(mI);Nlo=r($pt,"SegformerConfig"),$pt.forEach(t),qlo=r(N$e," (SegFormer model)"),N$e.forEach(t),jlo=i(y),Hg=n(y,"LI",{});var q$e=s(Hg);rde=n(q$e,"STRONG",{});var kpt=s(rde);Dlo=r(kpt,"sew"),kpt.forEach(t),Glo=r(q$e," \u2014 "),gI=n(q$e,"A",{href:!0});var Spt=s(gI);Olo=r(Spt,"SEWConfig"),Spt.forEach(t),Vlo=r(q$e," (SEW model)"),q$e.forEach(t),Xlo=i(y),Jg=n(y,"LI",{});var j$e=s(Jg);tde=n(j$e,"STRONG",{});var Rpt=s(tde);zlo=r(Rpt,"sew-d"),Rpt.forEach(t),Qlo=r(j$e," \u2014 "),hI=n(j$e,"A",{href:!0});var Ppt=s(hI);Wlo=r(Ppt,"SEWDConfig"),Ppt.forEach(t),Ulo=r(j$e," (SEW-D model)"),j$e.forEach(t),Hlo=i(y),Yg=n(y,"LI",{});var D$e=s(Yg);ade=n(D$e,"STRONG",{});var Bpt=s(ade);Jlo=r(Bpt,"speech-encoder-decoder"),Bpt.forEach(t),Ylo=r(D$e," \u2014 "),pI=n(D$e,"A",{href:!0});var Ipt=s(pI);Klo=r(Ipt,"SpeechEncoderDecoderConfig"),Ipt.forEach(t),Zlo=r(D$e," (Speech Encoder decoder model)"),D$e.forEach(t),eio=i(y),Kg=n(y,"LI",{});var G$e=s(Kg);nde=n(G$e,"STRONG",{});var Npt=s(nde);oio=r(Npt,"speech_to_text"),Npt.forEach(t),rio=r(G$e," \u2014 "),uI=n(G$e,"A",{href:!0});var qpt=s(uI);tio=r(qpt,"Speech2TextConfig"),qpt.forEach(t),aio=r(G$e," (Speech2Text model)"),G$e.forEach(t),nio=i(y),Zg=n(y,"LI",{});var O$e=s(Zg);sde=n(O$e,"STRONG",{});var jpt=s(sde);sio=r(jpt,"speech_to_text_2"),jpt.forEach(t),lio=r(O$e," \u2014 "),_I=n(O$e,"A",{href:!0});var Dpt=s(_I);iio=r(Dpt,"Speech2Text2Config"),Dpt.forEach(t),dio=r(O$e," (Speech2Text2 model)"),O$e.forEach(t),cio=i(y),eh=n(y,"LI",{});var V$e=s(eh);lde=n(V$e,"STRONG",{});var Gpt=s(lde);fio=r(Gpt,"splinter"),Gpt.forEach(t),mio=r(V$e," \u2014 "),bI=n(V$e,"A",{href:!0});var Opt=s(bI);gio=r(Opt,"SplinterConfig"),Opt.forEach(t),hio=r(V$e," (Splinter model)"),V$e.forEach(t),pio=i(y),oh=n(y,"LI",{});var X$e=s(oh);ide=n(X$e,"STRONG",{});var Vpt=s(ide);uio=r(Vpt,"squeezebert"),Vpt.forEach(t),_io=r(X$e," \u2014 "),vI=n(X$e,"A",{href:!0});var Xpt=s(vI);bio=r(Xpt,"SqueezeBertConfig"),Xpt.forEach(t),vio=r(X$e," (SqueezeBERT model)"),X$e.forEach(t),Fio=i(y),rh=n(y,"LI",{});var z$e=s(rh);dde=n(z$e,"STRONG",{});var zpt=s(dde);Tio=r(zpt,"swin"),zpt.forEach(t),Mio=r(z$e," \u2014 "),FI=n(z$e,"A",{href:!0});var Qpt=s(FI);Eio=r(Qpt,"SwinConfig"),Qpt.forEach(t),Cio=r(z$e," (Swin Transformer model)"),z$e.forEach(t),wio=i(y),th=n(y,"LI",{});var Q$e=s(th);cde=n(Q$e,"STRONG",{});var Wpt=s(cde);Aio=r(Wpt,"swinv2"),Wpt.forEach(t),yio=r(Q$e," \u2014 "),TI=n(Q$e,"A",{href:!0});var Upt=s(TI);Lio=r(Upt,"Swinv2Config"),Upt.forEach(t),xio=r(Q$e," (Swin Transformer V2 model)"),Q$e.forEach(t),$io=i(y),ah=n(y,"LI",{});var W$e=s(ah);fde=n(W$e,"STRONG",{});var Hpt=s(fde);kio=r(Hpt,"t5"),Hpt.forEach(t),Sio=r(W$e," \u2014 "),MI=n(W$e,"A",{href:!0});var Jpt=s(MI);Rio=r(Jpt,"T5Config"),Jpt.forEach(t),Pio=r(W$e," (T5 model)"),W$e.forEach(t),Bio=i(y),nh=n(y,"LI",{});var U$e=s(nh);mde=n(U$e,"STRONG",{});var Ypt=s(mde);Iio=r(Ypt,"tapas"),Ypt.forEach(t),Nio=r(U$e," \u2014 "),EI=n(U$e,"A",{href:!0});var Kpt=s(EI);qio=r(Kpt,"TapasConfig"),Kpt.forEach(t),jio=r(U$e," (TAPAS model)"),U$e.forEach(t),Dio=i(y),sh=n(y,"LI",{});var H$e=s(sh);gde=n(H$e,"STRONG",{});var Zpt=s(gde);Gio=r(Zpt,"trajectory_transformer"),Zpt.forEach(t),Oio=r(H$e," \u2014 "),CI=n(H$e,"A",{href:!0});var eut=s(CI);Vio=r(eut,"TrajectoryTransformerConfig"),eut.forEach(t),Xio=r(H$e," (Trajectory Transformer model)"),H$e.forEach(t),zio=i(y),lh=n(y,"LI",{});var J$e=s(lh);hde=n(J$e,"STRONG",{});var out=s(hde);Qio=r(out,"transfo-xl"),out.forEach(t),Wio=r(J$e," \u2014 "),wI=n(J$e,"A",{href:!0});var rut=s(wI);Uio=r(rut,"TransfoXLConfig"),rut.forEach(t),Hio=r(J$e," (Transformer-XL model)"),J$e.forEach(t),Jio=i(y),ih=n(y,"LI",{});var Y$e=s(ih);pde=n(Y$e,"STRONG",{});var tut=s(pde);Yio=r(tut,"trocr"),tut.forEach(t),Kio=r(Y$e," \u2014 "),AI=n(Y$e,"A",{href:!0});var aut=s(AI);Zio=r(aut,"TrOCRConfig"),aut.forEach(t),edo=r(Y$e," (TrOCR model)"),Y$e.forEach(t),odo=i(y),dh=n(y,"LI",{});var K$e=s(dh);ude=n(K$e,"STRONG",{});var nut=s(ude);rdo=r(nut,"unispeech"),nut.forEach(t),tdo=r(K$e," \u2014 "),yI=n(K$e,"A",{href:!0});var sut=s(yI);ado=r(sut,"UniSpeechConfig"),sut.forEach(t),ndo=r(K$e," (UniSpeech model)"),K$e.forEach(t),sdo=i(y),ch=n(y,"LI",{});var Z$e=s(ch);_de=n(Z$e,"STRONG",{});var lut=s(_de);ldo=r(lut,"unispeech-sat"),lut.forEach(t),ido=r(Z$e," \u2014 "),LI=n(Z$e,"A",{href:!0});var iut=s(LI);ddo=r(iut,"UniSpeechSatConfig"),iut.forEach(t),cdo=r(Z$e," (UniSpeechSat model)"),Z$e.forEach(t),fdo=i(y),fh=n(y,"LI",{});var eke=s(fh);bde=n(eke,"STRONG",{});var dut=s(bde);mdo=r(dut,"van"),dut.forEach(t),gdo=r(eke," \u2014 "),xI=n(eke,"A",{href:!0});var cut=s(xI);hdo=r(cut,"VanConfig"),cut.forEach(t),pdo=r(eke," (VAN model)"),eke.forEach(t),udo=i(y),mh=n(y,"LI",{});var oke=s(mh);vde=n(oke,"STRONG",{});var fut=s(vde);_do=r(fut,"videomae"),fut.forEach(t),bdo=r(oke," \u2014 "),$I=n(oke,"A",{href:!0});var mut=s($I);vdo=r(mut,"VideoMAEConfig"),mut.forEach(t),Fdo=r(oke," (VideoMAE model)"),oke.forEach(t),Tdo=i(y),gh=n(y,"LI",{});var rke=s(gh);Fde=n(rke,"STRONG",{});var gut=s(Fde);Mdo=r(gut,"vilt"),gut.forEach(t),Edo=r(rke," \u2014 "),kI=n(rke,"A",{href:!0});var hut=s(kI);Cdo=r(hut,"ViltConfig"),hut.forEach(t),wdo=r(rke," (ViLT model)"),rke.forEach(t),Ado=i(y),hh=n(y,"LI",{});var tke=s(hh);Tde=n(tke,"STRONG",{});var put=s(Tde);ydo=r(put,"vision-encoder-decoder"),put.forEach(t),Ldo=r(tke," \u2014 "),SI=n(tke,"A",{href:!0});var uut=s(SI);xdo=r(uut,"VisionEncoderDecoderConfig"),uut.forEach(t),$do=r(tke," (Vision Encoder decoder model)"),tke.forEach(t),kdo=i(y),ph=n(y,"LI",{});var ake=s(ph);Mde=n(ake,"STRONG",{});var _ut=s(Mde);Sdo=r(_ut,"vision-text-dual-encoder"),_ut.forEach(t),Rdo=r(ake," \u2014 "),RI=n(ake,"A",{href:!0});var but=s(RI);Pdo=r(but,"VisionTextDualEncoderConfig"),but.forEach(t),Bdo=r(ake," (VisionTextDualEncoder model)"),ake.forEach(t),Ido=i(y),uh=n(y,"LI",{});var nke=s(uh);Ede=n(nke,"STRONG",{});var vut=s(Ede);Ndo=r(vut,"visual_bert"),vut.forEach(t),qdo=r(nke," \u2014 "),PI=n(nke,"A",{href:!0});var Fut=s(PI);jdo=r(Fut,"VisualBertConfig"),Fut.forEach(t),Ddo=r(nke," (VisualBERT model)"),nke.forEach(t),Gdo=i(y),_h=n(y,"LI",{});var ske=s(_h);Cde=n(ske,"STRONG",{});var Tut=s(Cde);Odo=r(Tut,"vit"),Tut.forEach(t),Vdo=r(ske," \u2014 "),BI=n(ske,"A",{href:!0});var Mut=s(BI);Xdo=r(Mut,"ViTConfig"),Mut.forEach(t),zdo=r(ske," (ViT model)"),ske.forEach(t),Qdo=i(y),bh=n(y,"LI",{});var lke=s(bh);wde=n(lke,"STRONG",{});var Eut=s(wde);Wdo=r(Eut,"vit_mae"),Eut.forEach(t),Udo=r(lke," \u2014 "),II=n(lke,"A",{href:!0});var Cut=s(II);Hdo=r(Cut,"ViTMAEConfig"),Cut.forEach(t),Jdo=r(lke," (ViTMAE model)"),lke.forEach(t),Ydo=i(y),vh=n(y,"LI",{});var ike=s(vh);Ade=n(ike,"STRONG",{});var wut=s(Ade);Kdo=r(wut,"wav2vec2"),wut.forEach(t),Zdo=r(ike," \u2014 "),NI=n(ike,"A",{href:!0});var Aut=s(NI);eco=r(Aut,"Wav2Vec2Config"),Aut.forEach(t),oco=r(ike," (Wav2Vec2 model)"),ike.forEach(t),rco=i(y),Fh=n(y,"LI",{});var dke=s(Fh);yde=n(dke,"STRONG",{});var yut=s(yde);tco=r(yut,"wav2vec2-conformer"),yut.forEach(t),aco=r(dke," \u2014 "),qI=n(dke,"A",{href:!0});var Lut=s(qI);nco=r(Lut,"Wav2Vec2ConformerConfig"),Lut.forEach(t),sco=r(dke," (Wav2Vec2-Conformer model)"),dke.forEach(t),lco=i(y),Th=n(y,"LI",{});var cke=s(Th);Lde=n(cke,"STRONG",{});var xut=s(Lde);ico=r(xut,"wavlm"),xut.forEach(t),dco=r(cke," \u2014 "),jI=n(cke,"A",{href:!0});var $ut=s(jI);cco=r($ut,"WavLMConfig"),$ut.forEach(t),fco=r(cke," (WavLM model)"),cke.forEach(t),mco=i(y),Mh=n(y,"LI",{});var fke=s(Mh);xde=n(fke,"STRONG",{});var kut=s(xde);gco=r(kut,"xglm"),kut.forEach(t),hco=r(fke," \u2014 "),DI=n(fke,"A",{href:!0});var Sut=s(DI);pco=r(Sut,"XGLMConfig"),Sut.forEach(t),uco=r(fke," (XGLM model)"),fke.forEach(t),_co=i(y),Eh=n(y,"LI",{});var mke=s(Eh);$de=n(mke,"STRONG",{});var Rut=s($de);bco=r(Rut,"xlm"),Rut.forEach(t),vco=r(mke," \u2014 "),GI=n(mke,"A",{href:!0});var Put=s(GI);Fco=r(Put,"XLMConfig"),Put.forEach(t),Tco=r(mke," (XLM model)"),mke.forEach(t),Mco=i(y),Ch=n(y,"LI",{});var gke=s(Ch);kde=n(gke,"STRONG",{});var But=s(kde);Eco=r(But,"xlm-prophetnet"),But.forEach(t),Cco=r(gke," \u2014 "),OI=n(gke,"A",{href:!0});var Iut=s(OI);wco=r(Iut,"XLMProphetNetConfig"),Iut.forEach(t),Aco=r(gke," (XLM-ProphetNet model)"),gke.forEach(t),yco=i(y),wh=n(y,"LI",{});var hke=s(wh);Sde=n(hke,"STRONG",{});var Nut=s(Sde);Lco=r(Nut,"xlm-roberta"),Nut.forEach(t),xco=r(hke," \u2014 "),VI=n(hke,"A",{href:!0});var qut=s(VI);$co=r(qut,"XLMRobertaConfig"),qut.forEach(t),kco=r(hke," (XLM-RoBERTa model)"),hke.forEach(t),Sco=i(y),Ah=n(y,"LI",{});var pke=s(Ah);Rde=n(pke,"STRONG",{});var jut=s(Rde);Rco=r(jut,"xlm-roberta-xl"),jut.forEach(t),Pco=r(pke," \u2014 "),XI=n(pke,"A",{href:!0});var Dut=s(XI);Bco=r(Dut,"XLMRobertaXLConfig"),Dut.forEach(t),Ico=r(pke," (XLM-RoBERTa-XL model)"),pke.forEach(t),Nco=i(y),yh=n(y,"LI",{});var uke=s(yh);Pde=n(uke,"STRONG",{});var Gut=s(Pde);qco=r(Gut,"xlnet"),Gut.forEach(t),jco=r(uke," \u2014 "),zI=n(uke,"A",{href:!0});var Out=s(zI);Dco=r(Out,"XLNetConfig"),Out.forEach(t),Gco=r(uke," (XLNet model)"),uke.forEach(t),Oco=i(y),Lh=n(y,"LI",{});var _ke=s(Lh);Bde=n(_ke,"STRONG",{});var Vut=s(Bde);Vco=r(Vut,"yolos"),Vut.forEach(t),Xco=r(_ke," \u2014 "),QI=n(_ke,"A",{href:!0});var Xut=s(QI);zco=r(Xut,"YolosConfig"),Xut.forEach(t),Qco=r(_ke," (YOLOS model)"),_ke.forEach(t),Wco=i(y),xh=n(y,"LI",{});var bke=s(xh);Ide=n(bke,"STRONG",{});var zut=s(Ide);Uco=r(zut,"yoso"),zut.forEach(t),Hco=r(bke," \u2014 "),WI=n(bke,"A",{href:!0});var Qut=s(WI);Jco=r(Qut,"YosoConfig"),Qut.forEach(t),Yco=r(bke," (YOSO model)"),bke.forEach(t),y.forEach(t),Kco=i(mt),T($h.$$.fragment,mt),mt.forEach(t),Zco=i(ft),kh=n(ft,"DIV",{class:!0});var zJe=s(kh);T(qL.$$.fragment,zJe),efo=i(zJe),Nde=n(zJe,"P",{});var Wut=s(Nde);ofo=r(Wut,"Register a new configuration for this class."),Wut.forEach(t),zJe.forEach(t),ft.forEach(t),DUe=i(f),ad=n(f,"H2",{class:!0});var QJe=s(ad);Sh=n(QJe,"A",{id:!0,class:!0,href:!0});var Uut=s(Sh);qde=n(Uut,"SPAN",{});var Hut=s(qde);T(jL.$$.fragment,Hut),Hut.forEach(t),Uut.forEach(t),rfo=i(QJe),jde=n(QJe,"SPAN",{});var Jut=s(jde);tfo=r(Jut,"AutoTokenizer"),Jut.forEach(t),QJe.forEach(t),GUe=i(f),$o=n(f,"DIV",{class:!0});var pl=s($o);T(DL.$$.fragment,pl),afo=i(pl),GL=n(pl,"P",{});var WJe=s(GL);nfo=r(WJe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),UI=n(WJe,"A",{href:!0});var Yut=s(UI);sfo=r(Yut,"AutoTokenizer.from_pretrained()"),Yut.forEach(t),lfo=r(WJe," class method."),WJe.forEach(t),ifo=i(pl),OL=n(pl,"P",{});var UJe=s(OL);dfo=r(UJe,"This class cannot be instantiated directly using "),Dde=n(UJe,"CODE",{});var Kut=s(Dde);cfo=r(Kut,"__init__()"),Kut.forEach(t),ffo=r(UJe," (throws an error)."),UJe.forEach(t),mfo=i(pl),Pr=n(pl,"DIV",{class:!0});var ul=s(Pr);T(VL.$$.fragment,ul),gfo=i(ul),Gde=n(ul,"P",{});var Zut=s(Gde);hfo=r(Zut,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Zut.forEach(t),pfo=i(ul),za=n(ul,"P",{});var A7=s(za);ufo=r(A7,"The tokenizer class to instantiate is selected based on the "),Ode=n(A7,"CODE",{});var e_t=s(Ode);_fo=r(e_t,"model_type"),e_t.forEach(t),bfo=r(A7,` property of the config object (either
passed as an argument or loaded from `),Vde=n(A7,"CODE",{});var o_t=s(Vde);vfo=r(o_t,"pretrained_model_name_or_path"),o_t.forEach(t),Ffo=r(A7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xde=n(A7,"CODE",{});var r_t=s(Xde);Tfo=r(r_t,"pretrained_model_name_or_path"),r_t.forEach(t),Mfo=r(A7,":"),A7.forEach(t),Efo=i(ul),k=n(ul,"UL",{});var S=s(k);es=n(S,"LI",{});var mR=s(es);zde=n(mR,"STRONG",{});var t_t=s(zde);Cfo=r(t_t,"albert"),t_t.forEach(t),wfo=r(mR," \u2014 "),HI=n(mR,"A",{href:!0});var a_t=s(HI);Afo=r(a_t,"AlbertTokenizer"),a_t.forEach(t),yfo=r(mR," or "),JI=n(mR,"A",{href:!0});var n_t=s(JI);Lfo=r(n_t,"AlbertTokenizerFast"),n_t.forEach(t),xfo=r(mR," (ALBERT model)"),mR.forEach(t),$fo=i(S),os=n(S,"LI",{});var gR=s(os);Qde=n(gR,"STRONG",{});var s_t=s(Qde);kfo=r(s_t,"bart"),s_t.forEach(t),Sfo=r(gR," \u2014 "),YI=n(gR,"A",{href:!0});var l_t=s(YI);Rfo=r(l_t,"BartTokenizer"),l_t.forEach(t),Pfo=r(gR," or "),KI=n(gR,"A",{href:!0});var i_t=s(KI);Bfo=r(i_t,"BartTokenizerFast"),i_t.forEach(t),Ifo=r(gR," (BART model)"),gR.forEach(t),Nfo=i(S),rs=n(S,"LI",{});var hR=s(rs);Wde=n(hR,"STRONG",{});var d_t=s(Wde);qfo=r(d_t,"barthez"),d_t.forEach(t),jfo=r(hR," \u2014 "),ZI=n(hR,"A",{href:!0});var c_t=s(ZI);Dfo=r(c_t,"BarthezTokenizer"),c_t.forEach(t),Gfo=r(hR," or "),eN=n(hR,"A",{href:!0});var f_t=s(eN);Ofo=r(f_t,"BarthezTokenizerFast"),f_t.forEach(t),Vfo=r(hR," (BARThez model)"),hR.forEach(t),Xfo=i(S),Rh=n(S,"LI",{});var vke=s(Rh);Ude=n(vke,"STRONG",{});var m_t=s(Ude);zfo=r(m_t,"bartpho"),m_t.forEach(t),Qfo=r(vke," \u2014 "),oN=n(vke,"A",{href:!0});var g_t=s(oN);Wfo=r(g_t,"BartphoTokenizer"),g_t.forEach(t),Ufo=r(vke," (BARTpho model)"),vke.forEach(t),Hfo=i(S),ts=n(S,"LI",{});var pR=s(ts);Hde=n(pR,"STRONG",{});var h_t=s(Hde);Jfo=r(h_t,"bert"),h_t.forEach(t),Yfo=r(pR," \u2014 "),rN=n(pR,"A",{href:!0});var p_t=s(rN);Kfo=r(p_t,"BertTokenizer"),p_t.forEach(t),Zfo=r(pR," or "),tN=n(pR,"A",{href:!0});var u_t=s(tN);emo=r(u_t,"BertTokenizerFast"),u_t.forEach(t),omo=r(pR," (BERT model)"),pR.forEach(t),rmo=i(S),Ph=n(S,"LI",{});var Fke=s(Ph);Jde=n(Fke,"STRONG",{});var __t=s(Jde);tmo=r(__t,"bert-generation"),__t.forEach(t),amo=r(Fke," \u2014 "),aN=n(Fke,"A",{href:!0});var b_t=s(aN);nmo=r(b_t,"BertGenerationTokenizer"),b_t.forEach(t),smo=r(Fke," (Bert Generation model)"),Fke.forEach(t),lmo=i(S),Bh=n(S,"LI",{});var Tke=s(Bh);Yde=n(Tke,"STRONG",{});var v_t=s(Yde);imo=r(v_t,"bert-japanese"),v_t.forEach(t),dmo=r(Tke," \u2014 "),nN=n(Tke,"A",{href:!0});var F_t=s(nN);cmo=r(F_t,"BertJapaneseTokenizer"),F_t.forEach(t),fmo=r(Tke," (BertJapanese model)"),Tke.forEach(t),mmo=i(S),Ih=n(S,"LI",{});var Mke=s(Ih);Kde=n(Mke,"STRONG",{});var T_t=s(Kde);gmo=r(T_t,"bertweet"),T_t.forEach(t),hmo=r(Mke," \u2014 "),sN=n(Mke,"A",{href:!0});var M_t=s(sN);pmo=r(M_t,"BertweetTokenizer"),M_t.forEach(t),umo=r(Mke," (BERTweet model)"),Mke.forEach(t),_mo=i(S),as=n(S,"LI",{});var uR=s(as);Zde=n(uR,"STRONG",{});var E_t=s(Zde);bmo=r(E_t,"big_bird"),E_t.forEach(t),vmo=r(uR," \u2014 "),lN=n(uR,"A",{href:!0});var C_t=s(lN);Fmo=r(C_t,"BigBirdTokenizer"),C_t.forEach(t),Tmo=r(uR," or "),iN=n(uR,"A",{href:!0});var w_t=s(iN);Mmo=r(w_t,"BigBirdTokenizerFast"),w_t.forEach(t),Emo=r(uR," (BigBird model)"),uR.forEach(t),Cmo=i(S),ns=n(S,"LI",{});var _R=s(ns);ece=n(_R,"STRONG",{});var A_t=s(ece);wmo=r(A_t,"bigbird_pegasus"),A_t.forEach(t),Amo=r(_R," \u2014 "),dN=n(_R,"A",{href:!0});var y_t=s(dN);ymo=r(y_t,"PegasusTokenizer"),y_t.forEach(t),Lmo=r(_R," or "),cN=n(_R,"A",{href:!0});var L_t=s(cN);xmo=r(L_t,"PegasusTokenizerFast"),L_t.forEach(t),$mo=r(_R," (BigBird-Pegasus model)"),_R.forEach(t),kmo=i(S),ss=n(S,"LI",{});var bR=s(ss);oce=n(bR,"STRONG",{});var x_t=s(oce);Smo=r(x_t,"blenderbot"),x_t.forEach(t),Rmo=r(bR," \u2014 "),fN=n(bR,"A",{href:!0});var $_t=s(fN);Pmo=r($_t,"BlenderbotTokenizer"),$_t.forEach(t),Bmo=r(bR," or "),mN=n(bR,"A",{href:!0});var k_t=s(mN);Imo=r(k_t,"BlenderbotTokenizerFast"),k_t.forEach(t),Nmo=r(bR," (Blenderbot model)"),bR.forEach(t),qmo=i(S),Nh=n(S,"LI",{});var Eke=s(Nh);rce=n(Eke,"STRONG",{});var S_t=s(rce);jmo=r(S_t,"blenderbot-small"),S_t.forEach(t),Dmo=r(Eke," \u2014 "),gN=n(Eke,"A",{href:!0});var R_t=s(gN);Gmo=r(R_t,"BlenderbotSmallTokenizer"),R_t.forEach(t),Omo=r(Eke," (BlenderbotSmall model)"),Eke.forEach(t),Vmo=i(S),qh=n(S,"LI",{});var Cke=s(qh);tce=n(Cke,"STRONG",{});var P_t=s(tce);Xmo=r(P_t,"bloom"),P_t.forEach(t),zmo=r(Cke," \u2014 "),hN=n(Cke,"A",{href:!0});var B_t=s(hN);Qmo=r(B_t,"BloomTokenizerFast"),B_t.forEach(t),Wmo=r(Cke," (BLOOM model)"),Cke.forEach(t),Umo=i(S),jh=n(S,"LI",{});var wke=s(jh);ace=n(wke,"STRONG",{});var I_t=s(ace);Hmo=r(I_t,"byt5"),I_t.forEach(t),Jmo=r(wke," \u2014 "),pN=n(wke,"A",{href:!0});var N_t=s(pN);Ymo=r(N_t,"ByT5Tokenizer"),N_t.forEach(t),Kmo=r(wke," (ByT5 model)"),wke.forEach(t),Zmo=i(S),ls=n(S,"LI",{});var vR=s(ls);nce=n(vR,"STRONG",{});var q_t=s(nce);ego=r(q_t,"camembert"),q_t.forEach(t),ogo=r(vR," \u2014 "),uN=n(vR,"A",{href:!0});var j_t=s(uN);rgo=r(j_t,"CamembertTokenizer"),j_t.forEach(t),tgo=r(vR," or "),_N=n(vR,"A",{href:!0});var D_t=s(_N);ago=r(D_t,"CamembertTokenizerFast"),D_t.forEach(t),ngo=r(vR," (CamemBERT model)"),vR.forEach(t),sgo=i(S),Dh=n(S,"LI",{});var Ake=s(Dh);sce=n(Ake,"STRONG",{});var G_t=s(sce);lgo=r(G_t,"canine"),G_t.forEach(t),igo=r(Ake," \u2014 "),bN=n(Ake,"A",{href:!0});var O_t=s(bN);dgo=r(O_t,"CanineTokenizer"),O_t.forEach(t),cgo=r(Ake," (CANINE model)"),Ake.forEach(t),fgo=i(S),is=n(S,"LI",{});var FR=s(is);lce=n(FR,"STRONG",{});var V_t=s(lce);mgo=r(V_t,"clip"),V_t.forEach(t),ggo=r(FR," \u2014 "),vN=n(FR,"A",{href:!0});var X_t=s(vN);hgo=r(X_t,"CLIPTokenizer"),X_t.forEach(t),pgo=r(FR," or "),FN=n(FR,"A",{href:!0});var z_t=s(FN);ugo=r(z_t,"CLIPTokenizerFast"),z_t.forEach(t),_go=r(FR," (CLIP model)"),FR.forEach(t),bgo=i(S),ds=n(S,"LI",{});var TR=s(ds);ice=n(TR,"STRONG",{});var Q_t=s(ice);vgo=r(Q_t,"codegen"),Q_t.forEach(t),Fgo=r(TR," \u2014 "),TN=n(TR,"A",{href:!0});var W_t=s(TN);Tgo=r(W_t,"CodeGenTokenizer"),W_t.forEach(t),Mgo=r(TR," or "),MN=n(TR,"A",{href:!0});var U_t=s(MN);Ego=r(U_t,"CodeGenTokenizerFast"),U_t.forEach(t),Cgo=r(TR," (CodeGen model)"),TR.forEach(t),wgo=i(S),cs=n(S,"LI",{});var MR=s(cs);dce=n(MR,"STRONG",{});var H_t=s(dce);Ago=r(H_t,"convbert"),H_t.forEach(t),ygo=r(MR," \u2014 "),EN=n(MR,"A",{href:!0});var J_t=s(EN);Lgo=r(J_t,"ConvBertTokenizer"),J_t.forEach(t),xgo=r(MR," or "),CN=n(MR,"A",{href:!0});var Y_t=s(CN);$go=r(Y_t,"ConvBertTokenizerFast"),Y_t.forEach(t),kgo=r(MR," (ConvBERT model)"),MR.forEach(t),Sgo=i(S),fs=n(S,"LI",{});var ER=s(fs);cce=n(ER,"STRONG",{});var K_t=s(cce);Rgo=r(K_t,"cpm"),K_t.forEach(t),Pgo=r(ER," \u2014 "),wN=n(ER,"A",{href:!0});var Z_t=s(wN);Bgo=r(Z_t,"CpmTokenizer"),Z_t.forEach(t),Igo=r(ER," or "),AN=n(ER,"A",{href:!0});var e1t=s(AN);Ngo=r(e1t,"CpmTokenizerFast"),e1t.forEach(t),qgo=r(ER," (CPM model)"),ER.forEach(t),jgo=i(S),Gh=n(S,"LI",{});var yke=s(Gh);fce=n(yke,"STRONG",{});var o1t=s(fce);Dgo=r(o1t,"ctrl"),o1t.forEach(t),Ggo=r(yke," \u2014 "),yN=n(yke,"A",{href:!0});var r1t=s(yN);Ogo=r(r1t,"CTRLTokenizer"),r1t.forEach(t),Vgo=r(yke," (CTRL model)"),yke.forEach(t),Xgo=i(S),ms=n(S,"LI",{});var CR=s(ms);mce=n(CR,"STRONG",{});var t1t=s(mce);zgo=r(t1t,"data2vec-text"),t1t.forEach(t),Qgo=r(CR," \u2014 "),LN=n(CR,"A",{href:!0});var a1t=s(LN);Wgo=r(a1t,"RobertaTokenizer"),a1t.forEach(t),Ugo=r(CR," or "),xN=n(CR,"A",{href:!0});var n1t=s(xN);Hgo=r(n1t,"RobertaTokenizerFast"),n1t.forEach(t),Jgo=r(CR," (Data2VecText model)"),CR.forEach(t),Ygo=i(S),gs=n(S,"LI",{});var wR=s(gs);gce=n(wR,"STRONG",{});var s1t=s(gce);Kgo=r(s1t,"deberta"),s1t.forEach(t),Zgo=r(wR," \u2014 "),$N=n(wR,"A",{href:!0});var l1t=s($N);eho=r(l1t,"DebertaTokenizer"),l1t.forEach(t),oho=r(wR," or "),kN=n(wR,"A",{href:!0});var i1t=s(kN);rho=r(i1t,"DebertaTokenizerFast"),i1t.forEach(t),tho=r(wR," (DeBERTa model)"),wR.forEach(t),aho=i(S),hs=n(S,"LI",{});var AR=s(hs);hce=n(AR,"STRONG",{});var d1t=s(hce);nho=r(d1t,"deberta-v2"),d1t.forEach(t),sho=r(AR," \u2014 "),SN=n(AR,"A",{href:!0});var c1t=s(SN);lho=r(c1t,"DebertaV2Tokenizer"),c1t.forEach(t),iho=r(AR," or "),RN=n(AR,"A",{href:!0});var f1t=s(RN);dho=r(f1t,"DebertaV2TokenizerFast"),f1t.forEach(t),cho=r(AR," (DeBERTa-v2 model)"),AR.forEach(t),fho=i(S),ps=n(S,"LI",{});var yR=s(ps);pce=n(yR,"STRONG",{});var m1t=s(pce);mho=r(m1t,"distilbert"),m1t.forEach(t),gho=r(yR," \u2014 "),PN=n(yR,"A",{href:!0});var g1t=s(PN);hho=r(g1t,"DistilBertTokenizer"),g1t.forEach(t),pho=r(yR," or "),BN=n(yR,"A",{href:!0});var h1t=s(BN);uho=r(h1t,"DistilBertTokenizerFast"),h1t.forEach(t),_ho=r(yR," (DistilBERT model)"),yR.forEach(t),bho=i(S),us=n(S,"LI",{});var LR=s(us);uce=n(LR,"STRONG",{});var p1t=s(uce);vho=r(p1t,"dpr"),p1t.forEach(t),Fho=r(LR," \u2014 "),IN=n(LR,"A",{href:!0});var u1t=s(IN);Tho=r(u1t,"DPRQuestionEncoderTokenizer"),u1t.forEach(t),Mho=r(LR," or "),NN=n(LR,"A",{href:!0});var _1t=s(NN);Eho=r(_1t,"DPRQuestionEncoderTokenizerFast"),_1t.forEach(t),Cho=r(LR," (DPR model)"),LR.forEach(t),who=i(S),_s=n(S,"LI",{});var xR=s(_s);_ce=n(xR,"STRONG",{});var b1t=s(_ce);Aho=r(b1t,"electra"),b1t.forEach(t),yho=r(xR," \u2014 "),qN=n(xR,"A",{href:!0});var v1t=s(qN);Lho=r(v1t,"ElectraTokenizer"),v1t.forEach(t),xho=r(xR," or "),jN=n(xR,"A",{href:!0});var F1t=s(jN);$ho=r(F1t,"ElectraTokenizerFast"),F1t.forEach(t),kho=r(xR," (ELECTRA model)"),xR.forEach(t),Sho=i(S),Oh=n(S,"LI",{});var Lke=s(Oh);bce=n(Lke,"STRONG",{});var T1t=s(bce);Rho=r(T1t,"flaubert"),T1t.forEach(t),Pho=r(Lke," \u2014 "),DN=n(Lke,"A",{href:!0});var M1t=s(DN);Bho=r(M1t,"FlaubertTokenizer"),M1t.forEach(t),Iho=r(Lke," (FlauBERT model)"),Lke.forEach(t),Nho=i(S),bs=n(S,"LI",{});var $R=s(bs);vce=n($R,"STRONG",{});var E1t=s(vce);qho=r(E1t,"fnet"),E1t.forEach(t),jho=r($R," \u2014 "),GN=n($R,"A",{href:!0});var C1t=s(GN);Dho=r(C1t,"FNetTokenizer"),C1t.forEach(t),Gho=r($R," or "),ON=n($R,"A",{href:!0});var w1t=s(ON);Oho=r(w1t,"FNetTokenizerFast"),w1t.forEach(t),Vho=r($R," (FNet model)"),$R.forEach(t),Xho=i(S),Vh=n(S,"LI",{});var xke=s(Vh);Fce=n(xke,"STRONG",{});var A1t=s(Fce);zho=r(A1t,"fsmt"),A1t.forEach(t),Qho=r(xke," \u2014 "),VN=n(xke,"A",{href:!0});var y1t=s(VN);Who=r(y1t,"FSMTTokenizer"),y1t.forEach(t),Uho=r(xke," (FairSeq Machine-Translation model)"),xke.forEach(t),Hho=i(S),vs=n(S,"LI",{});var kR=s(vs);Tce=n(kR,"STRONG",{});var L1t=s(Tce);Jho=r(L1t,"funnel"),L1t.forEach(t),Yho=r(kR," \u2014 "),XN=n(kR,"A",{href:!0});var x1t=s(XN);Kho=r(x1t,"FunnelTokenizer"),x1t.forEach(t),Zho=r(kR," or "),zN=n(kR,"A",{href:!0});var $1t=s(zN);epo=r($1t,"FunnelTokenizerFast"),$1t.forEach(t),opo=r(kR," (Funnel Transformer model)"),kR.forEach(t),rpo=i(S),Fs=n(S,"LI",{});var SR=s(Fs);Mce=n(SR,"STRONG",{});var k1t=s(Mce);tpo=r(k1t,"gpt2"),k1t.forEach(t),apo=r(SR," \u2014 "),QN=n(SR,"A",{href:!0});var S1t=s(QN);npo=r(S1t,"GPT2Tokenizer"),S1t.forEach(t),spo=r(SR," or "),WN=n(SR,"A",{href:!0});var R1t=s(WN);lpo=r(R1t,"GPT2TokenizerFast"),R1t.forEach(t),ipo=r(SR," (OpenAI GPT-2 model)"),SR.forEach(t),dpo=i(S),Ts=n(S,"LI",{});var RR=s(Ts);Ece=n(RR,"STRONG",{});var P1t=s(Ece);cpo=r(P1t,"gpt_neo"),P1t.forEach(t),fpo=r(RR," \u2014 "),UN=n(RR,"A",{href:!0});var B1t=s(UN);mpo=r(B1t,"GPT2Tokenizer"),B1t.forEach(t),gpo=r(RR," or "),HN=n(RR,"A",{href:!0});var I1t=s(HN);hpo=r(I1t,"GPT2TokenizerFast"),I1t.forEach(t),ppo=r(RR," (GPT Neo model)"),RR.forEach(t),upo=i(S),Xh=n(S,"LI",{});var $ke=s(Xh);Cce=n($ke,"STRONG",{});var N1t=s(Cce);_po=r(N1t,"gpt_neox"),N1t.forEach(t),bpo=r($ke," \u2014 "),JN=n($ke,"A",{href:!0});var q1t=s(JN);vpo=r(q1t,"GPTNeoXTokenizerFast"),q1t.forEach(t),Fpo=r($ke," (GPT NeoX model)"),$ke.forEach(t),Tpo=i(S),Ms=n(S,"LI",{});var PR=s(Ms);wce=n(PR,"STRONG",{});var j1t=s(wce);Mpo=r(j1t,"gptj"),j1t.forEach(t),Epo=r(PR," \u2014 "),YN=n(PR,"A",{href:!0});var D1t=s(YN);Cpo=r(D1t,"GPT2Tokenizer"),D1t.forEach(t),wpo=r(PR," or "),KN=n(PR,"A",{href:!0});var G1t=s(KN);Apo=r(G1t,"GPT2TokenizerFast"),G1t.forEach(t),ypo=r(PR," (GPT-J model)"),PR.forEach(t),Lpo=i(S),Es=n(S,"LI",{});var BR=s(Es);Ace=n(BR,"STRONG",{});var O1t=s(Ace);xpo=r(O1t,"groupvit"),O1t.forEach(t),$po=r(BR," \u2014 "),ZN=n(BR,"A",{href:!0});var V1t=s(ZN);kpo=r(V1t,"CLIPTokenizer"),V1t.forEach(t),Spo=r(BR," or "),eq=n(BR,"A",{href:!0});var X1t=s(eq);Rpo=r(X1t,"CLIPTokenizerFast"),X1t.forEach(t),Ppo=r(BR," (GroupViT model)"),BR.forEach(t),Bpo=i(S),Cs=n(S,"LI",{});var IR=s(Cs);yce=n(IR,"STRONG",{});var z1t=s(yce);Ipo=r(z1t,"herbert"),z1t.forEach(t),Npo=r(IR," \u2014 "),oq=n(IR,"A",{href:!0});var Q1t=s(oq);qpo=r(Q1t,"HerbertTokenizer"),Q1t.forEach(t),jpo=r(IR," or "),rq=n(IR,"A",{href:!0});var W1t=s(rq);Dpo=r(W1t,"HerbertTokenizerFast"),W1t.forEach(t),Gpo=r(IR," (HerBERT model)"),IR.forEach(t),Opo=i(S),zh=n(S,"LI",{});var kke=s(zh);Lce=n(kke,"STRONG",{});var U1t=s(Lce);Vpo=r(U1t,"hubert"),U1t.forEach(t),Xpo=r(kke," \u2014 "),tq=n(kke,"A",{href:!0});var H1t=s(tq);zpo=r(H1t,"Wav2Vec2CTCTokenizer"),H1t.forEach(t),Qpo=r(kke," (Hubert model)"),kke.forEach(t),Wpo=i(S),ws=n(S,"LI",{});var NR=s(ws);xce=n(NR,"STRONG",{});var J1t=s(xce);Upo=r(J1t,"ibert"),J1t.forEach(t),Hpo=r(NR," \u2014 "),aq=n(NR,"A",{href:!0});var Y1t=s(aq);Jpo=r(Y1t,"RobertaTokenizer"),Y1t.forEach(t),Ypo=r(NR," or "),nq=n(NR,"A",{href:!0});var K1t=s(nq);Kpo=r(K1t,"RobertaTokenizerFast"),K1t.forEach(t),Zpo=r(NR," (I-BERT model)"),NR.forEach(t),euo=i(S),As=n(S,"LI",{});var qR=s(As);$ce=n(qR,"STRONG",{});var Z1t=s($ce);ouo=r(Z1t,"layoutlm"),Z1t.forEach(t),ruo=r(qR," \u2014 "),sq=n(qR,"A",{href:!0});var e4t=s(sq);tuo=r(e4t,"LayoutLMTokenizer"),e4t.forEach(t),auo=r(qR," or "),lq=n(qR,"A",{href:!0});var o4t=s(lq);nuo=r(o4t,"LayoutLMTokenizerFast"),o4t.forEach(t),suo=r(qR," (LayoutLM model)"),qR.forEach(t),luo=i(S),ys=n(S,"LI",{});var jR=s(ys);kce=n(jR,"STRONG",{});var r4t=s(kce);iuo=r(r4t,"layoutlmv2"),r4t.forEach(t),duo=r(jR," \u2014 "),iq=n(jR,"A",{href:!0});var t4t=s(iq);cuo=r(t4t,"LayoutLMv2Tokenizer"),t4t.forEach(t),fuo=r(jR," or "),dq=n(jR,"A",{href:!0});var a4t=s(dq);muo=r(a4t,"LayoutLMv2TokenizerFast"),a4t.forEach(t),guo=r(jR," (LayoutLMv2 model)"),jR.forEach(t),huo=i(S),Ls=n(S,"LI",{});var DR=s(Ls);Sce=n(DR,"STRONG",{});var n4t=s(Sce);puo=r(n4t,"layoutlmv3"),n4t.forEach(t),uuo=r(DR," \u2014 "),cq=n(DR,"A",{href:!0});var s4t=s(cq);_uo=r(s4t,"LayoutLMv3Tokenizer"),s4t.forEach(t),buo=r(DR," or "),fq=n(DR,"A",{href:!0});var l4t=s(fq);vuo=r(l4t,"LayoutLMv3TokenizerFast"),l4t.forEach(t),Fuo=r(DR," (LayoutLMv3 model)"),DR.forEach(t),Tuo=i(S),xs=n(S,"LI",{});var GR=s(xs);Rce=n(GR,"STRONG",{});var i4t=s(Rce);Muo=r(i4t,"layoutxlm"),i4t.forEach(t),Euo=r(GR," \u2014 "),mq=n(GR,"A",{href:!0});var d4t=s(mq);Cuo=r(d4t,"LayoutXLMTokenizer"),d4t.forEach(t),wuo=r(GR," or "),gq=n(GR,"A",{href:!0});var c4t=s(gq);Auo=r(c4t,"LayoutXLMTokenizerFast"),c4t.forEach(t),yuo=r(GR," (LayoutXLM model)"),GR.forEach(t),Luo=i(S),$s=n(S,"LI",{});var OR=s($s);Pce=n(OR,"STRONG",{});var f4t=s(Pce);xuo=r(f4t,"led"),f4t.forEach(t),$uo=r(OR," \u2014 "),hq=n(OR,"A",{href:!0});var m4t=s(hq);kuo=r(m4t,"LEDTokenizer"),m4t.forEach(t),Suo=r(OR," or "),pq=n(OR,"A",{href:!0});var g4t=s(pq);Ruo=r(g4t,"LEDTokenizerFast"),g4t.forEach(t),Puo=r(OR," (LED model)"),OR.forEach(t),Buo=i(S),ks=n(S,"LI",{});var VR=s(ks);Bce=n(VR,"STRONG",{});var h4t=s(Bce);Iuo=r(h4t,"longformer"),h4t.forEach(t),Nuo=r(VR," \u2014 "),uq=n(VR,"A",{href:!0});var p4t=s(uq);quo=r(p4t,"LongformerTokenizer"),p4t.forEach(t),juo=r(VR," or "),_q=n(VR,"A",{href:!0});var u4t=s(_q);Duo=r(u4t,"LongformerTokenizerFast"),u4t.forEach(t),Guo=r(VR," (Longformer model)"),VR.forEach(t),Ouo=i(S),Ss=n(S,"LI",{});var XR=s(Ss);Ice=n(XR,"STRONG",{});var _4t=s(Ice);Vuo=r(_4t,"longt5"),_4t.forEach(t),Xuo=r(XR," \u2014 "),bq=n(XR,"A",{href:!0});var b4t=s(bq);zuo=r(b4t,"T5Tokenizer"),b4t.forEach(t),Quo=r(XR," or "),vq=n(XR,"A",{href:!0});var v4t=s(vq);Wuo=r(v4t,"T5TokenizerFast"),v4t.forEach(t),Uuo=r(XR," (LongT5 model)"),XR.forEach(t),Huo=i(S),Qh=n(S,"LI",{});var Ske=s(Qh);Nce=n(Ske,"STRONG",{});var F4t=s(Nce);Juo=r(F4t,"luke"),F4t.forEach(t),Yuo=r(Ske," \u2014 "),Fq=n(Ske,"A",{href:!0});var T4t=s(Fq);Kuo=r(T4t,"LukeTokenizer"),T4t.forEach(t),Zuo=r(Ske," (LUKE model)"),Ske.forEach(t),e_o=i(S),Rs=n(S,"LI",{});var zR=s(Rs);qce=n(zR,"STRONG",{});var M4t=s(qce);o_o=r(M4t,"lxmert"),M4t.forEach(t),r_o=r(zR," \u2014 "),Tq=n(zR,"A",{href:!0});var E4t=s(Tq);t_o=r(E4t,"LxmertTokenizer"),E4t.forEach(t),a_o=r(zR," or "),Mq=n(zR,"A",{href:!0});var C4t=s(Mq);n_o=r(C4t,"LxmertTokenizerFast"),C4t.forEach(t),s_o=r(zR," (LXMERT model)"),zR.forEach(t),l_o=i(S),Wh=n(S,"LI",{});var Rke=s(Wh);jce=n(Rke,"STRONG",{});var w4t=s(jce);i_o=r(w4t,"m2m_100"),w4t.forEach(t),d_o=r(Rke," \u2014 "),Eq=n(Rke,"A",{href:!0});var A4t=s(Eq);c_o=r(A4t,"M2M100Tokenizer"),A4t.forEach(t),f_o=r(Rke," (M2M100 model)"),Rke.forEach(t),m_o=i(S),Uh=n(S,"LI",{});var Pke=s(Uh);Dce=n(Pke,"STRONG",{});var y4t=s(Dce);g_o=r(y4t,"marian"),y4t.forEach(t),h_o=r(Pke," \u2014 "),Cq=n(Pke,"A",{href:!0});var L4t=s(Cq);p_o=r(L4t,"MarianTokenizer"),L4t.forEach(t),u_o=r(Pke," (Marian model)"),Pke.forEach(t),__o=i(S),Ps=n(S,"LI",{});var QR=s(Ps);Gce=n(QR,"STRONG",{});var x4t=s(Gce);b_o=r(x4t,"mbart"),x4t.forEach(t),v_o=r(QR," \u2014 "),wq=n(QR,"A",{href:!0});var $4t=s(wq);F_o=r($4t,"MBartTokenizer"),$4t.forEach(t),T_o=r(QR," or "),Aq=n(QR,"A",{href:!0});var k4t=s(Aq);M_o=r(k4t,"MBartTokenizerFast"),k4t.forEach(t),E_o=r(QR," (mBART model)"),QR.forEach(t),C_o=i(S),Bs=n(S,"LI",{});var WR=s(Bs);Oce=n(WR,"STRONG",{});var S4t=s(Oce);w_o=r(S4t,"mbart50"),S4t.forEach(t),A_o=r(WR," \u2014 "),yq=n(WR,"A",{href:!0});var R4t=s(yq);y_o=r(R4t,"MBart50Tokenizer"),R4t.forEach(t),L_o=r(WR," or "),Lq=n(WR,"A",{href:!0});var P4t=s(Lq);x_o=r(P4t,"MBart50TokenizerFast"),P4t.forEach(t),$_o=r(WR," (mBART-50 model)"),WR.forEach(t),k_o=i(S),Is=n(S,"LI",{});var UR=s(Is);Vce=n(UR,"STRONG",{});var B4t=s(Vce);S_o=r(B4t,"megatron-bert"),B4t.forEach(t),R_o=r(UR," \u2014 "),xq=n(UR,"A",{href:!0});var I4t=s(xq);P_o=r(I4t,"BertTokenizer"),I4t.forEach(t),B_o=r(UR," or "),$q=n(UR,"A",{href:!0});var N4t=s($q);I_o=r(N4t,"BertTokenizerFast"),N4t.forEach(t),N_o=r(UR," (Megatron-BERT model)"),UR.forEach(t),q_o=i(S),Hh=n(S,"LI",{});var Bke=s(Hh);Xce=n(Bke,"STRONG",{});var q4t=s(Xce);j_o=r(q4t,"mluke"),q4t.forEach(t),D_o=r(Bke," \u2014 "),kq=n(Bke,"A",{href:!0});var j4t=s(kq);G_o=r(j4t,"MLukeTokenizer"),j4t.forEach(t),O_o=r(Bke," (mLUKE model)"),Bke.forEach(t),V_o=i(S),Ns=n(S,"LI",{});var HR=s(Ns);zce=n(HR,"STRONG",{});var D4t=s(zce);X_o=r(D4t,"mobilebert"),D4t.forEach(t),z_o=r(HR," \u2014 "),Sq=n(HR,"A",{href:!0});var G4t=s(Sq);Q_o=r(G4t,"MobileBertTokenizer"),G4t.forEach(t),W_o=r(HR," or "),Rq=n(HR,"A",{href:!0});var O4t=s(Rq);U_o=r(O4t,"MobileBertTokenizerFast"),O4t.forEach(t),H_o=r(HR," (MobileBERT model)"),HR.forEach(t),J_o=i(S),qs=n(S,"LI",{});var JR=s(qs);Qce=n(JR,"STRONG",{});var V4t=s(Qce);Y_o=r(V4t,"mpnet"),V4t.forEach(t),K_o=r(JR," \u2014 "),Pq=n(JR,"A",{href:!0});var X4t=s(Pq);Z_o=r(X4t,"MPNetTokenizer"),X4t.forEach(t),e1o=r(JR," or "),Bq=n(JR,"A",{href:!0});var z4t=s(Bq);o1o=r(z4t,"MPNetTokenizerFast"),z4t.forEach(t),r1o=r(JR," (MPNet model)"),JR.forEach(t),t1o=i(S),js=n(S,"LI",{});var YR=s(js);Wce=n(YR,"STRONG",{});var Q4t=s(Wce);a1o=r(Q4t,"mt5"),Q4t.forEach(t),n1o=r(YR," \u2014 "),Iq=n(YR,"A",{href:!0});var W4t=s(Iq);s1o=r(W4t,"MT5Tokenizer"),W4t.forEach(t),l1o=r(YR," or "),Nq=n(YR,"A",{href:!0});var U4t=s(Nq);i1o=r(U4t,"MT5TokenizerFast"),U4t.forEach(t),d1o=r(YR," (MT5 model)"),YR.forEach(t),c1o=i(S),Ds=n(S,"LI",{});var KR=s(Ds);Uce=n(KR,"STRONG",{});var H4t=s(Uce);f1o=r(H4t,"mvp"),H4t.forEach(t),m1o=r(KR," \u2014 "),qq=n(KR,"A",{href:!0});var J4t=s(qq);g1o=r(J4t,"MvpTokenizer"),J4t.forEach(t),h1o=r(KR," or "),jq=n(KR,"A",{href:!0});var Y4t=s(jq);p1o=r(Y4t,"MvpTokenizerFast"),Y4t.forEach(t),u1o=r(KR," (MVP model)"),KR.forEach(t),_1o=i(S),Gs=n(S,"LI",{});var ZR=s(Gs);Hce=n(ZR,"STRONG",{});var K4t=s(Hce);b1o=r(K4t,"nezha"),K4t.forEach(t),v1o=r(ZR," \u2014 "),Dq=n(ZR,"A",{href:!0});var Z4t=s(Dq);F1o=r(Z4t,"BertTokenizer"),Z4t.forEach(t),T1o=r(ZR," or "),Gq=n(ZR,"A",{href:!0});var e2t=s(Gq);M1o=r(e2t,"BertTokenizerFast"),e2t.forEach(t),E1o=r(ZR," (Nezha model)"),ZR.forEach(t),C1o=i(S),Os=n(S,"LI",{});var eP=s(Os);Jce=n(eP,"STRONG",{});var o2t=s(Jce);w1o=r(o2t,"nllb"),o2t.forEach(t),A1o=r(eP," \u2014 "),Oq=n(eP,"A",{href:!0});var r2t=s(Oq);y1o=r(r2t,"NllbTokenizer"),r2t.forEach(t),L1o=r(eP," or "),Vq=n(eP,"A",{href:!0});var t2t=s(Vq);x1o=r(t2t,"NllbTokenizerFast"),t2t.forEach(t),$1o=r(eP," (NLLB model)"),eP.forEach(t),k1o=i(S),Vs=n(S,"LI",{});var oP=s(Vs);Yce=n(oP,"STRONG",{});var a2t=s(Yce);S1o=r(a2t,"nystromformer"),a2t.forEach(t),R1o=r(oP," \u2014 "),Xq=n(oP,"A",{href:!0});var n2t=s(Xq);P1o=r(n2t,"AlbertTokenizer"),n2t.forEach(t),B1o=r(oP," or "),zq=n(oP,"A",{href:!0});var s2t=s(zq);I1o=r(s2t,"AlbertTokenizerFast"),s2t.forEach(t),N1o=r(oP," (Nystr\xF6mformer model)"),oP.forEach(t),q1o=i(S),Xs=n(S,"LI",{});var rP=s(Xs);Kce=n(rP,"STRONG",{});var l2t=s(Kce);j1o=r(l2t,"openai-gpt"),l2t.forEach(t),D1o=r(rP," \u2014 "),Qq=n(rP,"A",{href:!0});var i2t=s(Qq);G1o=r(i2t,"OpenAIGPTTokenizer"),i2t.forEach(t),O1o=r(rP," or "),Wq=n(rP,"A",{href:!0});var d2t=s(Wq);V1o=r(d2t,"OpenAIGPTTokenizerFast"),d2t.forEach(t),X1o=r(rP," (OpenAI GPT model)"),rP.forEach(t),z1o=i(S),Jh=n(S,"LI",{});var Ike=s(Jh);Zce=n(Ike,"STRONG",{});var c2t=s(Zce);Q1o=r(c2t,"opt"),c2t.forEach(t),W1o=r(Ike," \u2014 "),Uq=n(Ike,"A",{href:!0});var f2t=s(Uq);U1o=r(f2t,"GPT2Tokenizer"),f2t.forEach(t),H1o=r(Ike," (OPT model)"),Ike.forEach(t),J1o=i(S),zs=n(S,"LI",{});var tP=s(zs);efe=n(tP,"STRONG",{});var m2t=s(efe);Y1o=r(m2t,"owlvit"),m2t.forEach(t),K1o=r(tP," \u2014 "),Hq=n(tP,"A",{href:!0});var g2t=s(Hq);Z1o=r(g2t,"CLIPTokenizer"),g2t.forEach(t),e4o=r(tP," or "),Jq=n(tP,"A",{href:!0});var h2t=s(Jq);o4o=r(h2t,"CLIPTokenizerFast"),h2t.forEach(t),r4o=r(tP," (OWL-ViT model)"),tP.forEach(t),t4o=i(S),Qs=n(S,"LI",{});var aP=s(Qs);ofe=n(aP,"STRONG",{});var p2t=s(ofe);a4o=r(p2t,"pegasus"),p2t.forEach(t),n4o=r(aP," \u2014 "),Yq=n(aP,"A",{href:!0});var u2t=s(Yq);s4o=r(u2t,"PegasusTokenizer"),u2t.forEach(t),l4o=r(aP," or "),Kq=n(aP,"A",{href:!0});var _2t=s(Kq);i4o=r(_2t,"PegasusTokenizerFast"),_2t.forEach(t),d4o=r(aP," (Pegasus model)"),aP.forEach(t),c4o=i(S),Yh=n(S,"LI",{});var Nke=s(Yh);rfe=n(Nke,"STRONG",{});var b2t=s(rfe);f4o=r(b2t,"perceiver"),b2t.forEach(t),m4o=r(Nke," \u2014 "),Zq=n(Nke,"A",{href:!0});var v2t=s(Zq);g4o=r(v2t,"PerceiverTokenizer"),v2t.forEach(t),h4o=r(Nke," (Perceiver model)"),Nke.forEach(t),p4o=i(S),Kh=n(S,"LI",{});var qke=s(Kh);tfe=n(qke,"STRONG",{});var F2t=s(tfe);u4o=r(F2t,"phobert"),F2t.forEach(t),_4o=r(qke," \u2014 "),ej=n(qke,"A",{href:!0});var T2t=s(ej);b4o=r(T2t,"PhobertTokenizer"),T2t.forEach(t),v4o=r(qke," (PhoBERT model)"),qke.forEach(t),F4o=i(S),Zh=n(S,"LI",{});var jke=s(Zh);afe=n(jke,"STRONG",{});var M2t=s(afe);T4o=r(M2t,"plbart"),M2t.forEach(t),M4o=r(jke," \u2014 "),oj=n(jke,"A",{href:!0});var E2t=s(oj);E4o=r(E2t,"PLBartTokenizer"),E2t.forEach(t),C4o=r(jke," (PLBart model)"),jke.forEach(t),w4o=i(S),ep=n(S,"LI",{});var Dke=s(ep);nfe=n(Dke,"STRONG",{});var C2t=s(nfe);A4o=r(C2t,"prophetnet"),C2t.forEach(t),y4o=r(Dke," \u2014 "),rj=n(Dke,"A",{href:!0});var w2t=s(rj);L4o=r(w2t,"ProphetNetTokenizer"),w2t.forEach(t),x4o=r(Dke," (ProphetNet model)"),Dke.forEach(t),$4o=i(S),Ws=n(S,"LI",{});var nP=s(Ws);sfe=n(nP,"STRONG",{});var A2t=s(sfe);k4o=r(A2t,"qdqbert"),A2t.forEach(t),S4o=r(nP," \u2014 "),tj=n(nP,"A",{href:!0});var y2t=s(tj);R4o=r(y2t,"BertTokenizer"),y2t.forEach(t),P4o=r(nP," or "),aj=n(nP,"A",{href:!0});var L2t=s(aj);B4o=r(L2t,"BertTokenizerFast"),L2t.forEach(t),I4o=r(nP," (QDQBert model)"),nP.forEach(t),N4o=i(S),op=n(S,"LI",{});var Gke=s(op);lfe=n(Gke,"STRONG",{});var x2t=s(lfe);q4o=r(x2t,"rag"),x2t.forEach(t),j4o=r(Gke," \u2014 "),nj=n(Gke,"A",{href:!0});var $2t=s(nj);D4o=r($2t,"RagTokenizer"),$2t.forEach(t),G4o=r(Gke," (RAG model)"),Gke.forEach(t),O4o=i(S),Us=n(S,"LI",{});var sP=s(Us);ife=n(sP,"STRONG",{});var k2t=s(ife);V4o=r(k2t,"realm"),k2t.forEach(t),X4o=r(sP," \u2014 "),sj=n(sP,"A",{href:!0});var S2t=s(sj);z4o=r(S2t,"RealmTokenizer"),S2t.forEach(t),Q4o=r(sP," or "),lj=n(sP,"A",{href:!0});var R2t=s(lj);W4o=r(R2t,"RealmTokenizerFast"),R2t.forEach(t),U4o=r(sP," (REALM model)"),sP.forEach(t),H4o=i(S),Hs=n(S,"LI",{});var lP=s(Hs);dfe=n(lP,"STRONG",{});var P2t=s(dfe);J4o=r(P2t,"reformer"),P2t.forEach(t),Y4o=r(lP," \u2014 "),ij=n(lP,"A",{href:!0});var B2t=s(ij);K4o=r(B2t,"ReformerTokenizer"),B2t.forEach(t),Z4o=r(lP," or "),dj=n(lP,"A",{href:!0});var I2t=s(dj);e2o=r(I2t,"ReformerTokenizerFast"),I2t.forEach(t),o2o=r(lP," (Reformer model)"),lP.forEach(t),r2o=i(S),Js=n(S,"LI",{});var iP=s(Js);cfe=n(iP,"STRONG",{});var N2t=s(cfe);t2o=r(N2t,"rembert"),N2t.forEach(t),a2o=r(iP," \u2014 "),cj=n(iP,"A",{href:!0});var q2t=s(cj);n2o=r(q2t,"RemBertTokenizer"),q2t.forEach(t),s2o=r(iP," or "),fj=n(iP,"A",{href:!0});var j2t=s(fj);l2o=r(j2t,"RemBertTokenizerFast"),j2t.forEach(t),i2o=r(iP," (RemBERT model)"),iP.forEach(t),d2o=i(S),Ys=n(S,"LI",{});var dP=s(Ys);ffe=n(dP,"STRONG",{});var D2t=s(ffe);c2o=r(D2t,"retribert"),D2t.forEach(t),f2o=r(dP," \u2014 "),mj=n(dP,"A",{href:!0});var G2t=s(mj);m2o=r(G2t,"RetriBertTokenizer"),G2t.forEach(t),g2o=r(dP," or "),gj=n(dP,"A",{href:!0});var O2t=s(gj);h2o=r(O2t,"RetriBertTokenizerFast"),O2t.forEach(t),p2o=r(dP," (RetriBERT model)"),dP.forEach(t),u2o=i(S),Ks=n(S,"LI",{});var cP=s(Ks);mfe=n(cP,"STRONG",{});var V2t=s(mfe);_2o=r(V2t,"roberta"),V2t.forEach(t),b2o=r(cP," \u2014 "),hj=n(cP,"A",{href:!0});var X2t=s(hj);v2o=r(X2t,"RobertaTokenizer"),X2t.forEach(t),F2o=r(cP," or "),pj=n(cP,"A",{href:!0});var z2t=s(pj);T2o=r(z2t,"RobertaTokenizerFast"),z2t.forEach(t),M2o=r(cP," (RoBERTa model)"),cP.forEach(t),E2o=i(S),Zs=n(S,"LI",{});var fP=s(Zs);gfe=n(fP,"STRONG",{});var Q2t=s(gfe);C2o=r(Q2t,"roformer"),Q2t.forEach(t),w2o=r(fP," \u2014 "),uj=n(fP,"A",{href:!0});var W2t=s(uj);A2o=r(W2t,"RoFormerTokenizer"),W2t.forEach(t),y2o=r(fP," or "),_j=n(fP,"A",{href:!0});var U2t=s(_j);L2o=r(U2t,"RoFormerTokenizerFast"),U2t.forEach(t),x2o=r(fP," (RoFormer model)"),fP.forEach(t),$2o=i(S),rp=n(S,"LI",{});var Oke=s(rp);hfe=n(Oke,"STRONG",{});var H2t=s(hfe);k2o=r(H2t,"speech_to_text"),H2t.forEach(t),S2o=r(Oke," \u2014 "),bj=n(Oke,"A",{href:!0});var J2t=s(bj);R2o=r(J2t,"Speech2TextTokenizer"),J2t.forEach(t),P2o=r(Oke," (Speech2Text model)"),Oke.forEach(t),B2o=i(S),tp=n(S,"LI",{});var Vke=s(tp);pfe=n(Vke,"STRONG",{});var Y2t=s(pfe);I2o=r(Y2t,"speech_to_text_2"),Y2t.forEach(t),N2o=r(Vke," \u2014 "),vj=n(Vke,"A",{href:!0});var K2t=s(vj);q2o=r(K2t,"Speech2Text2Tokenizer"),K2t.forEach(t),j2o=r(Vke," (Speech2Text2 model)"),Vke.forEach(t),D2o=i(S),el=n(S,"LI",{});var mP=s(el);ufe=n(mP,"STRONG",{});var Z2t=s(ufe);G2o=r(Z2t,"splinter"),Z2t.forEach(t),O2o=r(mP," \u2014 "),Fj=n(mP,"A",{href:!0});var ebt=s(Fj);V2o=r(ebt,"SplinterTokenizer"),ebt.forEach(t),X2o=r(mP," or "),Tj=n(mP,"A",{href:!0});var obt=s(Tj);z2o=r(obt,"SplinterTokenizerFast"),obt.forEach(t),Q2o=r(mP," (Splinter model)"),mP.forEach(t),W2o=i(S),ol=n(S,"LI",{});var gP=s(ol);_fe=n(gP,"STRONG",{});var rbt=s(_fe);U2o=r(rbt,"squeezebert"),rbt.forEach(t),H2o=r(gP," \u2014 "),Mj=n(gP,"A",{href:!0});var tbt=s(Mj);J2o=r(tbt,"SqueezeBertTokenizer"),tbt.forEach(t),Y2o=r(gP," or "),Ej=n(gP,"A",{href:!0});var abt=s(Ej);K2o=r(abt,"SqueezeBertTokenizerFast"),abt.forEach(t),Z2o=r(gP," (SqueezeBERT model)"),gP.forEach(t),ebo=i(S),rl=n(S,"LI",{});var hP=s(rl);bfe=n(hP,"STRONG",{});var nbt=s(bfe);obo=r(nbt,"t5"),nbt.forEach(t),rbo=r(hP," \u2014 "),Cj=n(hP,"A",{href:!0});var sbt=s(Cj);tbo=r(sbt,"T5Tokenizer"),sbt.forEach(t),abo=r(hP," or "),wj=n(hP,"A",{href:!0});var lbt=s(wj);nbo=r(lbt,"T5TokenizerFast"),lbt.forEach(t),sbo=r(hP," (T5 model)"),hP.forEach(t),lbo=i(S),ap=n(S,"LI",{});var Xke=s(ap);vfe=n(Xke,"STRONG",{});var ibt=s(vfe);ibo=r(ibt,"tapas"),ibt.forEach(t),dbo=r(Xke," \u2014 "),Aj=n(Xke,"A",{href:!0});var dbt=s(Aj);cbo=r(dbt,"TapasTokenizer"),dbt.forEach(t),fbo=r(Xke," (TAPAS model)"),Xke.forEach(t),mbo=i(S),np=n(S,"LI",{});var zke=s(np);Ffe=n(zke,"STRONG",{});var cbt=s(Ffe);gbo=r(cbt,"tapex"),cbt.forEach(t),hbo=r(zke," \u2014 "),yj=n(zke,"A",{href:!0});var fbt=s(yj);pbo=r(fbt,"TapexTokenizer"),fbt.forEach(t),ubo=r(zke," (TAPEX model)"),zke.forEach(t),_bo=i(S),sp=n(S,"LI",{});var Qke=s(sp);Tfe=n(Qke,"STRONG",{});var mbt=s(Tfe);bbo=r(mbt,"transfo-xl"),mbt.forEach(t),vbo=r(Qke," \u2014 "),Lj=n(Qke,"A",{href:!0});var gbt=s(Lj);Fbo=r(gbt,"TransfoXLTokenizer"),gbt.forEach(t),Tbo=r(Qke," (Transformer-XL model)"),Qke.forEach(t),Mbo=i(S),tl=n(S,"LI",{});var pP=s(tl);Mfe=n(pP,"STRONG",{});var hbt=s(Mfe);Ebo=r(hbt,"vilt"),hbt.forEach(t),Cbo=r(pP," \u2014 "),xj=n(pP,"A",{href:!0});var pbt=s(xj);wbo=r(pbt,"BertTokenizer"),pbt.forEach(t),Abo=r(pP," or "),$j=n(pP,"A",{href:!0});var ubt=s($j);ybo=r(ubt,"BertTokenizerFast"),ubt.forEach(t),Lbo=r(pP," (ViLT model)"),pP.forEach(t),xbo=i(S),al=n(S,"LI",{});var uP=s(al);Efe=n(uP,"STRONG",{});var _bt=s(Efe);$bo=r(_bt,"visual_bert"),_bt.forEach(t),kbo=r(uP," \u2014 "),kj=n(uP,"A",{href:!0});var bbt=s(kj);Sbo=r(bbt,"BertTokenizer"),bbt.forEach(t),Rbo=r(uP," or "),Sj=n(uP,"A",{href:!0});var vbt=s(Sj);Pbo=r(vbt,"BertTokenizerFast"),vbt.forEach(t),Bbo=r(uP," (VisualBERT model)"),uP.forEach(t),Ibo=i(S),lp=n(S,"LI",{});var Wke=s(lp);Cfe=n(Wke,"STRONG",{});var Fbt=s(Cfe);Nbo=r(Fbt,"wav2vec2"),Fbt.forEach(t),qbo=r(Wke," \u2014 "),Rj=n(Wke,"A",{href:!0});var Tbt=s(Rj);jbo=r(Tbt,"Wav2Vec2CTCTokenizer"),Tbt.forEach(t),Dbo=r(Wke," (Wav2Vec2 model)"),Wke.forEach(t),Gbo=i(S),ip=n(S,"LI",{});var Uke=s(ip);wfe=n(Uke,"STRONG",{});var Mbt=s(wfe);Obo=r(Mbt,"wav2vec2-conformer"),Mbt.forEach(t),Vbo=r(Uke," \u2014 "),Pj=n(Uke,"A",{href:!0});var Ebt=s(Pj);Xbo=r(Ebt,"Wav2Vec2CTCTokenizer"),Ebt.forEach(t),zbo=r(Uke," (Wav2Vec2-Conformer model)"),Uke.forEach(t),Qbo=i(S),dp=n(S,"LI",{});var Hke=s(dp);Afe=n(Hke,"STRONG",{});var Cbt=s(Afe);Wbo=r(Cbt,"wav2vec2_phoneme"),Cbt.forEach(t),Ubo=r(Hke," \u2014 "),Bj=n(Hke,"A",{href:!0});var wbt=s(Bj);Hbo=r(wbt,"Wav2Vec2PhonemeCTCTokenizer"),wbt.forEach(t),Jbo=r(Hke," (Wav2Vec2Phoneme model)"),Hke.forEach(t),Ybo=i(S),nl=n(S,"LI",{});var _P=s(nl);yfe=n(_P,"STRONG",{});var Abt=s(yfe);Kbo=r(Abt,"xglm"),Abt.forEach(t),Zbo=r(_P," \u2014 "),Ij=n(_P,"A",{href:!0});var ybt=s(Ij);evo=r(ybt,"XGLMTokenizer"),ybt.forEach(t),ovo=r(_P," or "),Nj=n(_P,"A",{href:!0});var Lbt=s(Nj);rvo=r(Lbt,"XGLMTokenizerFast"),Lbt.forEach(t),tvo=r(_P," (XGLM model)"),_P.forEach(t),avo=i(S),cp=n(S,"LI",{});var Jke=s(cp);Lfe=n(Jke,"STRONG",{});var xbt=s(Lfe);nvo=r(xbt,"xlm"),xbt.forEach(t),svo=r(Jke," \u2014 "),qj=n(Jke,"A",{href:!0});var $bt=s(qj);lvo=r($bt,"XLMTokenizer"),$bt.forEach(t),ivo=r(Jke," (XLM model)"),Jke.forEach(t),dvo=i(S),fp=n(S,"LI",{});var Yke=s(fp);xfe=n(Yke,"STRONG",{});var kbt=s(xfe);cvo=r(kbt,"xlm-prophetnet"),kbt.forEach(t),fvo=r(Yke," \u2014 "),jj=n(Yke,"A",{href:!0});var Sbt=s(jj);mvo=r(Sbt,"XLMProphetNetTokenizer"),Sbt.forEach(t),gvo=r(Yke," (XLM-ProphetNet model)"),Yke.forEach(t),hvo=i(S),sl=n(S,"LI",{});var bP=s(sl);$fe=n(bP,"STRONG",{});var Rbt=s($fe);pvo=r(Rbt,"xlm-roberta"),Rbt.forEach(t),uvo=r(bP," \u2014 "),Dj=n(bP,"A",{href:!0});var Pbt=s(Dj);_vo=r(Pbt,"XLMRobertaTokenizer"),Pbt.forEach(t),bvo=r(bP," or "),Gj=n(bP,"A",{href:!0});var Bbt=s(Gj);vvo=r(Bbt,"XLMRobertaTokenizerFast"),Bbt.forEach(t),Fvo=r(bP," (XLM-RoBERTa model)"),bP.forEach(t),Tvo=i(S),ll=n(S,"LI",{});var vP=s(ll);kfe=n(vP,"STRONG",{});var Ibt=s(kfe);Mvo=r(Ibt,"xlm-roberta-xl"),Ibt.forEach(t),Evo=r(vP," \u2014 "),Oj=n(vP,"A",{href:!0});var Nbt=s(Oj);Cvo=r(Nbt,"RobertaTokenizer"),Nbt.forEach(t),wvo=r(vP," or "),Vj=n(vP,"A",{href:!0});var qbt=s(Vj);Avo=r(qbt,"RobertaTokenizerFast"),qbt.forEach(t),yvo=r(vP," (XLM-RoBERTa-XL model)"),vP.forEach(t),Lvo=i(S),il=n(S,"LI",{});var FP=s(il);Sfe=n(FP,"STRONG",{});var jbt=s(Sfe);xvo=r(jbt,"xlnet"),jbt.forEach(t),$vo=r(FP," \u2014 "),Xj=n(FP,"A",{href:!0});var Dbt=s(Xj);kvo=r(Dbt,"XLNetTokenizer"),Dbt.forEach(t),Svo=r(FP," or "),zj=n(FP,"A",{href:!0});var Gbt=s(zj);Rvo=r(Gbt,"XLNetTokenizerFast"),Gbt.forEach(t),Pvo=r(FP," (XLNet model)"),FP.forEach(t),Bvo=i(S),dl=n(S,"LI",{});var TP=s(dl);Rfe=n(TP,"STRONG",{});var Obt=s(Rfe);Ivo=r(Obt,"yoso"),Obt.forEach(t),Nvo=r(TP," \u2014 "),Qj=n(TP,"A",{href:!0});var Vbt=s(Qj);qvo=r(Vbt,"AlbertTokenizer"),Vbt.forEach(t),jvo=r(TP," or "),Wj=n(TP,"A",{href:!0});var Xbt=s(Wj);Dvo=r(Xbt,"AlbertTokenizerFast"),Xbt.forEach(t),Gvo=r(TP," (YOSO model)"),TP.forEach(t),S.forEach(t),Ovo=i(ul),T(mp.$$.fragment,ul),ul.forEach(t),Vvo=i(pl),gp=n(pl,"DIV",{class:!0});var HJe=s(gp);T(XL.$$.fragment,HJe),Xvo=i(HJe),Pfe=n(HJe,"P",{});var zbt=s(Pfe);zvo=r(zbt,"Register a new tokenizer in this mapping."),zbt.forEach(t),HJe.forEach(t),pl.forEach(t),OUe=i(f),nd=n(f,"H2",{class:!0});var JJe=s(nd);hp=n(JJe,"A",{id:!0,class:!0,href:!0});var Qbt=s(hp);Bfe=n(Qbt,"SPAN",{});var Wbt=s(Bfe);T(zL.$$.fragment,Wbt),Wbt.forEach(t),Qbt.forEach(t),Qvo=i(JJe),Ife=n(JJe,"SPAN",{});var Ubt=s(Ife);Wvo=r(Ubt,"AutoFeatureExtractor"),Ubt.forEach(t),JJe.forEach(t),VUe=i(f),ko=n(f,"DIV",{class:!0});var _l=s(ko);T(QL.$$.fragment,_l),Uvo=i(_l),WL=n(_l,"P",{});var YJe=s(WL);Hvo=r(YJe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Uj=n(YJe,"A",{href:!0});var Hbt=s(Uj);Jvo=r(Hbt,"AutoFeatureExtractor.from_pretrained()"),Hbt.forEach(t),Yvo=r(YJe," class method."),YJe.forEach(t),Kvo=i(_l),UL=n(_l,"P",{});var KJe=s(UL);Zvo=r(KJe,"This class cannot be instantiated directly using "),Nfe=n(KJe,"CODE",{});var Jbt=s(Nfe);eFo=r(Jbt,"__init__()"),Jbt.forEach(t),oFo=r(KJe," (throws an error)."),KJe.forEach(t),rFo=i(_l),He=n(_l,"DIV",{class:!0});var ha=s(He);T(HL.$$.fragment,ha),tFo=i(ha),qfe=n(ha,"P",{});var Ybt=s(qfe);aFo=r(Ybt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Ybt.forEach(t),nFo=i(ha),Qa=n(ha,"P",{});var y7=s(Qa);sFo=r(y7,"The feature extractor class to instantiate is selected based on the "),jfe=n(y7,"CODE",{});var Kbt=s(jfe);lFo=r(Kbt,"model_type"),Kbt.forEach(t),iFo=r(y7,` property of the config object
(either passed as an argument or loaded from `),Dfe=n(y7,"CODE",{});var Zbt=s(Dfe);dFo=r(Zbt,"pretrained_model_name_or_path"),Zbt.forEach(t),cFo=r(y7,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Gfe=n(y7,"CODE",{});var evt=s(Gfe);fFo=r(evt,"pretrained_model_name_or_path"),evt.forEach(t),mFo=r(y7,":"),y7.forEach(t),gFo=i(ha),W=n(ha,"UL",{});var J=s(W);pp=n(J,"LI",{});var Kke=s(pp);Ofe=n(Kke,"STRONG",{});var ovt=s(Ofe);hFo=r(ovt,"beit"),ovt.forEach(t),pFo=r(Kke," \u2014 "),Hj=n(Kke,"A",{href:!0});var rvt=s(Hj);uFo=r(rvt,"BeitFeatureExtractor"),rvt.forEach(t),_Fo=r(Kke," (BEiT model)"),Kke.forEach(t),bFo=i(J),up=n(J,"LI",{});var Zke=s(up);Vfe=n(Zke,"STRONG",{});var tvt=s(Vfe);vFo=r(tvt,"clip"),tvt.forEach(t),FFo=r(Zke," \u2014 "),Jj=n(Zke,"A",{href:!0});var avt=s(Jj);TFo=r(avt,"CLIPFeatureExtractor"),avt.forEach(t),MFo=r(Zke," (CLIP model)"),Zke.forEach(t),EFo=i(J),_p=n(J,"LI",{});var eSe=s(_p);Xfe=n(eSe,"STRONG",{});var nvt=s(Xfe);CFo=r(nvt,"convnext"),nvt.forEach(t),wFo=r(eSe," \u2014 "),Yj=n(eSe,"A",{href:!0});var svt=s(Yj);AFo=r(svt,"ConvNextFeatureExtractor"),svt.forEach(t),yFo=r(eSe," (ConvNeXT model)"),eSe.forEach(t),LFo=i(J),bp=n(J,"LI",{});var oSe=s(bp);zfe=n(oSe,"STRONG",{});var lvt=s(zfe);xFo=r(lvt,"cvt"),lvt.forEach(t),$Fo=r(oSe," \u2014 "),Kj=n(oSe,"A",{href:!0});var ivt=s(Kj);kFo=r(ivt,"ConvNextFeatureExtractor"),ivt.forEach(t),SFo=r(oSe," (CvT model)"),oSe.forEach(t),RFo=i(J),vp=n(J,"LI",{});var rSe=s(vp);Qfe=n(rSe,"STRONG",{});var dvt=s(Qfe);PFo=r(dvt,"data2vec-audio"),dvt.forEach(t),BFo=r(rSe," \u2014 "),Zj=n(rSe,"A",{href:!0});var cvt=s(Zj);IFo=r(cvt,"Wav2Vec2FeatureExtractor"),cvt.forEach(t),NFo=r(rSe," (Data2VecAudio model)"),rSe.forEach(t),qFo=i(J),Fp=n(J,"LI",{});var tSe=s(Fp);Wfe=n(tSe,"STRONG",{});var fvt=s(Wfe);jFo=r(fvt,"data2vec-vision"),fvt.forEach(t),DFo=r(tSe," \u2014 "),eD=n(tSe,"A",{href:!0});var mvt=s(eD);GFo=r(mvt,"BeitFeatureExtractor"),mvt.forEach(t),OFo=r(tSe," (Data2VecVision model)"),tSe.forEach(t),VFo=i(J),Tp=n(J,"LI",{});var aSe=s(Tp);Ufe=n(aSe,"STRONG",{});var gvt=s(Ufe);XFo=r(gvt,"deit"),gvt.forEach(t),zFo=r(aSe," \u2014 "),oD=n(aSe,"A",{href:!0});var hvt=s(oD);QFo=r(hvt,"DeiTFeatureExtractor"),hvt.forEach(t),WFo=r(aSe," (DeiT model)"),aSe.forEach(t),UFo=i(J),Mp=n(J,"LI",{});var nSe=s(Mp);Hfe=n(nSe,"STRONG",{});var pvt=s(Hfe);HFo=r(pvt,"detr"),pvt.forEach(t),JFo=r(nSe," \u2014 "),rD=n(nSe,"A",{href:!0});var uvt=s(rD);YFo=r(uvt,"DetrFeatureExtractor"),uvt.forEach(t),KFo=r(nSe," (DETR model)"),nSe.forEach(t),ZFo=i(J),Ep=n(J,"LI",{});var sSe=s(Ep);Jfe=n(sSe,"STRONG",{});var _vt=s(Jfe);eTo=r(_vt,"donut"),_vt.forEach(t),oTo=r(sSe," \u2014 "),tD=n(sSe,"A",{href:!0});var bvt=s(tD);rTo=r(bvt,"DonutFeatureExtractor"),bvt.forEach(t),tTo=r(sSe," (Donut model)"),sSe.forEach(t),aTo=i(J),Cp=n(J,"LI",{});var lSe=s(Cp);Yfe=n(lSe,"STRONG",{});var vvt=s(Yfe);nTo=r(vvt,"dpt"),vvt.forEach(t),sTo=r(lSe," \u2014 "),aD=n(lSe,"A",{href:!0});var Fvt=s(aD);lTo=r(Fvt,"DPTFeatureExtractor"),Fvt.forEach(t),iTo=r(lSe," (DPT model)"),lSe.forEach(t),dTo=i(J),wp=n(J,"LI",{});var iSe=s(wp);Kfe=n(iSe,"STRONG",{});var Tvt=s(Kfe);cTo=r(Tvt,"flava"),Tvt.forEach(t),fTo=r(iSe," \u2014 "),nD=n(iSe,"A",{href:!0});var Mvt=s(nD);mTo=r(Mvt,"FlavaFeatureExtractor"),Mvt.forEach(t),gTo=r(iSe," (FLAVA model)"),iSe.forEach(t),hTo=i(J),Ap=n(J,"LI",{});var dSe=s(Ap);Zfe=n(dSe,"STRONG",{});var Evt=s(Zfe);pTo=r(Evt,"glpn"),Evt.forEach(t),uTo=r(dSe," \u2014 "),sD=n(dSe,"A",{href:!0});var Cvt=s(sD);_To=r(Cvt,"GLPNFeatureExtractor"),Cvt.forEach(t),bTo=r(dSe," (GLPN model)"),dSe.forEach(t),vTo=i(J),yp=n(J,"LI",{});var cSe=s(yp);eme=n(cSe,"STRONG",{});var wvt=s(eme);FTo=r(wvt,"groupvit"),wvt.forEach(t),TTo=r(cSe," \u2014 "),lD=n(cSe,"A",{href:!0});var Avt=s(lD);MTo=r(Avt,"CLIPFeatureExtractor"),Avt.forEach(t),ETo=r(cSe," (GroupViT model)"),cSe.forEach(t),CTo=i(J),Lp=n(J,"LI",{});var fSe=s(Lp);ome=n(fSe,"STRONG",{});var yvt=s(ome);wTo=r(yvt,"hubert"),yvt.forEach(t),ATo=r(fSe," \u2014 "),iD=n(fSe,"A",{href:!0});var Lvt=s(iD);yTo=r(Lvt,"Wav2Vec2FeatureExtractor"),Lvt.forEach(t),LTo=r(fSe," (Hubert model)"),fSe.forEach(t),xTo=i(J),xp=n(J,"LI",{});var mSe=s(xp);rme=n(mSe,"STRONG",{});var xvt=s(rme);$To=r(xvt,"imagegpt"),xvt.forEach(t),kTo=r(mSe," \u2014 "),dD=n(mSe,"A",{href:!0});var $vt=s(dD);STo=r($vt,"ImageGPTFeatureExtractor"),$vt.forEach(t),RTo=r(mSe," (ImageGPT model)"),mSe.forEach(t),PTo=i(J),$p=n(J,"LI",{});var gSe=s($p);tme=n(gSe,"STRONG",{});var kvt=s(tme);BTo=r(kvt,"layoutlmv2"),kvt.forEach(t),ITo=r(gSe," \u2014 "),cD=n(gSe,"A",{href:!0});var Svt=s(cD);NTo=r(Svt,"LayoutLMv2FeatureExtractor"),Svt.forEach(t),qTo=r(gSe," (LayoutLMv2 model)"),gSe.forEach(t),jTo=i(J),kp=n(J,"LI",{});var hSe=s(kp);ame=n(hSe,"STRONG",{});var Rvt=s(ame);DTo=r(Rvt,"layoutlmv3"),Rvt.forEach(t),GTo=r(hSe," \u2014 "),fD=n(hSe,"A",{href:!0});var Pvt=s(fD);OTo=r(Pvt,"LayoutLMv3FeatureExtractor"),Pvt.forEach(t),VTo=r(hSe," (LayoutLMv3 model)"),hSe.forEach(t),XTo=i(J),Sp=n(J,"LI",{});var pSe=s(Sp);nme=n(pSe,"STRONG",{});var Bvt=s(nme);zTo=r(Bvt,"levit"),Bvt.forEach(t),QTo=r(pSe," \u2014 "),mD=n(pSe,"A",{href:!0});var Ivt=s(mD);WTo=r(Ivt,"LevitFeatureExtractor"),Ivt.forEach(t),UTo=r(pSe," (LeViT model)"),pSe.forEach(t),HTo=i(J),Rp=n(J,"LI",{});var uSe=s(Rp);sme=n(uSe,"STRONG",{});var Nvt=s(sme);JTo=r(Nvt,"maskformer"),Nvt.forEach(t),YTo=r(uSe," \u2014 "),gD=n(uSe,"A",{href:!0});var qvt=s(gD);KTo=r(qvt,"MaskFormerFeatureExtractor"),qvt.forEach(t),ZTo=r(uSe," (MaskFormer model)"),uSe.forEach(t),e8o=i(J),Pp=n(J,"LI",{});var _Se=s(Pp);lme=n(_Se,"STRONG",{});var jvt=s(lme);o8o=r(jvt,"mctct"),jvt.forEach(t),r8o=r(_Se," \u2014 "),hD=n(_Se,"A",{href:!0});var Dvt=s(hD);t8o=r(Dvt,"MCTCTFeatureExtractor"),Dvt.forEach(t),a8o=r(_Se," (M-CTC-T model)"),_Se.forEach(t),n8o=i(J),Bp=n(J,"LI",{});var bSe=s(Bp);ime=n(bSe,"STRONG",{});var Gvt=s(ime);s8o=r(Gvt,"mobilevit"),Gvt.forEach(t),l8o=r(bSe," \u2014 "),pD=n(bSe,"A",{href:!0});var Ovt=s(pD);i8o=r(Ovt,"MobileViTFeatureExtractor"),Ovt.forEach(t),d8o=r(bSe," (MobileViT model)"),bSe.forEach(t),c8o=i(J),Ip=n(J,"LI",{});var vSe=s(Ip);dme=n(vSe,"STRONG",{});var Vvt=s(dme);f8o=r(Vvt,"owlvit"),Vvt.forEach(t),m8o=r(vSe," \u2014 "),uD=n(vSe,"A",{href:!0});var Xvt=s(uD);g8o=r(Xvt,"OwlViTFeatureExtractor"),Xvt.forEach(t),h8o=r(vSe," (OWL-ViT model)"),vSe.forEach(t),p8o=i(J),Np=n(J,"LI",{});var FSe=s(Np);cme=n(FSe,"STRONG",{});var zvt=s(cme);u8o=r(zvt,"perceiver"),zvt.forEach(t),_8o=r(FSe," \u2014 "),_D=n(FSe,"A",{href:!0});var Qvt=s(_D);b8o=r(Qvt,"PerceiverFeatureExtractor"),Qvt.forEach(t),v8o=r(FSe," (Perceiver model)"),FSe.forEach(t),F8o=i(J),qp=n(J,"LI",{});var TSe=s(qp);fme=n(TSe,"STRONG",{});var Wvt=s(fme);T8o=r(Wvt,"poolformer"),Wvt.forEach(t),M8o=r(TSe," \u2014 "),bD=n(TSe,"A",{href:!0});var Uvt=s(bD);E8o=r(Uvt,"PoolFormerFeatureExtractor"),Uvt.forEach(t),C8o=r(TSe," (PoolFormer model)"),TSe.forEach(t),w8o=i(J),jp=n(J,"LI",{});var MSe=s(jp);mme=n(MSe,"STRONG",{});var Hvt=s(mme);A8o=r(Hvt,"regnet"),Hvt.forEach(t),y8o=r(MSe," \u2014 "),vD=n(MSe,"A",{href:!0});var Jvt=s(vD);L8o=r(Jvt,"ConvNextFeatureExtractor"),Jvt.forEach(t),x8o=r(MSe," (RegNet model)"),MSe.forEach(t),$8o=i(J),Dp=n(J,"LI",{});var ESe=s(Dp);gme=n(ESe,"STRONG",{});var Yvt=s(gme);k8o=r(Yvt,"resnet"),Yvt.forEach(t),S8o=r(ESe," \u2014 "),FD=n(ESe,"A",{href:!0});var Kvt=s(FD);R8o=r(Kvt,"ConvNextFeatureExtractor"),Kvt.forEach(t),P8o=r(ESe," (ResNet model)"),ESe.forEach(t),B8o=i(J),Gp=n(J,"LI",{});var CSe=s(Gp);hme=n(CSe,"STRONG",{});var Zvt=s(hme);I8o=r(Zvt,"segformer"),Zvt.forEach(t),N8o=r(CSe," \u2014 "),TD=n(CSe,"A",{href:!0});var eFt=s(TD);q8o=r(eFt,"SegformerFeatureExtractor"),eFt.forEach(t),j8o=r(CSe," (SegFormer model)"),CSe.forEach(t),D8o=i(J),Op=n(J,"LI",{});var wSe=s(Op);pme=n(wSe,"STRONG",{});var oFt=s(pme);G8o=r(oFt,"speech_to_text"),oFt.forEach(t),O8o=r(wSe," \u2014 "),MD=n(wSe,"A",{href:!0});var rFt=s(MD);V8o=r(rFt,"Speech2TextFeatureExtractor"),rFt.forEach(t),X8o=r(wSe," (Speech2Text model)"),wSe.forEach(t),z8o=i(J),Vp=n(J,"LI",{});var ASe=s(Vp);ume=n(ASe,"STRONG",{});var tFt=s(ume);Q8o=r(tFt,"swin"),tFt.forEach(t),W8o=r(ASe," \u2014 "),ED=n(ASe,"A",{href:!0});var aFt=s(ED);U8o=r(aFt,"ViTFeatureExtractor"),aFt.forEach(t),H8o=r(ASe," (Swin Transformer model)"),ASe.forEach(t),J8o=i(J),Xp=n(J,"LI",{});var ySe=s(Xp);_me=n(ySe,"STRONG",{});var nFt=s(_me);Y8o=r(nFt,"swinv2"),nFt.forEach(t),K8o=r(ySe," \u2014 "),CD=n(ySe,"A",{href:!0});var sFt=s(CD);Z8o=r(sFt,"ViTFeatureExtractor"),sFt.forEach(t),eMo=r(ySe," (Swin Transformer V2 model)"),ySe.forEach(t),oMo=i(J),zp=n(J,"LI",{});var LSe=s(zp);bme=n(LSe,"STRONG",{});var lFt=s(bme);rMo=r(lFt,"van"),lFt.forEach(t),tMo=r(LSe," \u2014 "),wD=n(LSe,"A",{href:!0});var iFt=s(wD);aMo=r(iFt,"ConvNextFeatureExtractor"),iFt.forEach(t),nMo=r(LSe," (VAN model)"),LSe.forEach(t),sMo=i(J),Qp=n(J,"LI",{});var xSe=s(Qp);vme=n(xSe,"STRONG",{});var dFt=s(vme);lMo=r(dFt,"videomae"),dFt.forEach(t),iMo=r(xSe," \u2014 "),AD=n(xSe,"A",{href:!0});var cFt=s(AD);dMo=r(cFt,"ViTFeatureExtractor"),cFt.forEach(t),cMo=r(xSe," (VideoMAE model)"),xSe.forEach(t),fMo=i(J),Wp=n(J,"LI",{});var $Se=s(Wp);Fme=n($Se,"STRONG",{});var fFt=s(Fme);mMo=r(fFt,"vilt"),fFt.forEach(t),gMo=r($Se," \u2014 "),yD=n($Se,"A",{href:!0});var mFt=s(yD);hMo=r(mFt,"ViltFeatureExtractor"),mFt.forEach(t),pMo=r($Se," (ViLT model)"),$Se.forEach(t),uMo=i(J),Up=n(J,"LI",{});var kSe=s(Up);Tme=n(kSe,"STRONG",{});var gFt=s(Tme);_Mo=r(gFt,"vit"),gFt.forEach(t),bMo=r(kSe," \u2014 "),LD=n(kSe,"A",{href:!0});var hFt=s(LD);vMo=r(hFt,"ViTFeatureExtractor"),hFt.forEach(t),FMo=r(kSe," (ViT model)"),kSe.forEach(t),TMo=i(J),Hp=n(J,"LI",{});var SSe=s(Hp);Mme=n(SSe,"STRONG",{});var pFt=s(Mme);MMo=r(pFt,"vit_mae"),pFt.forEach(t),EMo=r(SSe," \u2014 "),xD=n(SSe,"A",{href:!0});var uFt=s(xD);CMo=r(uFt,"ViTFeatureExtractor"),uFt.forEach(t),wMo=r(SSe," (ViTMAE model)"),SSe.forEach(t),AMo=i(J),Jp=n(J,"LI",{});var RSe=s(Jp);Eme=n(RSe,"STRONG",{});var _Ft=s(Eme);yMo=r(_Ft,"wav2vec2"),_Ft.forEach(t),LMo=r(RSe," \u2014 "),$D=n(RSe,"A",{href:!0});var bFt=s($D);xMo=r(bFt,"Wav2Vec2FeatureExtractor"),bFt.forEach(t),$Mo=r(RSe," (Wav2Vec2 model)"),RSe.forEach(t),kMo=i(J),Yp=n(J,"LI",{});var PSe=s(Yp);Cme=n(PSe,"STRONG",{});var vFt=s(Cme);SMo=r(vFt,"wav2vec2-conformer"),vFt.forEach(t),RMo=r(PSe," \u2014 "),kD=n(PSe,"A",{href:!0});var FFt=s(kD);PMo=r(FFt,"Wav2Vec2FeatureExtractor"),FFt.forEach(t),BMo=r(PSe," (Wav2Vec2-Conformer model)"),PSe.forEach(t),IMo=i(J),Kp=n(J,"LI",{});var BSe=s(Kp);wme=n(BSe,"STRONG",{});var TFt=s(wme);NMo=r(TFt,"yolos"),TFt.forEach(t),qMo=r(BSe," \u2014 "),SD=n(BSe,"A",{href:!0});var MFt=s(SD);jMo=r(MFt,"YolosFeatureExtractor"),MFt.forEach(t),DMo=r(BSe," (YOLOS model)"),BSe.forEach(t),J.forEach(t),GMo=i(ha),T(Zp.$$.fragment,ha),OMo=i(ha),T(eu.$$.fragment,ha),ha.forEach(t),VMo=i(_l),ou=n(_l,"DIV",{class:!0});var ZJe=s(ou);T(JL.$$.fragment,ZJe),XMo=i(ZJe),Ame=n(ZJe,"P",{});var EFt=s(Ame);zMo=r(EFt,"Register a new feature extractor for this class."),EFt.forEach(t),ZJe.forEach(t),_l.forEach(t),XUe=i(f),sd=n(f,"H2",{class:!0});var eYe=s(sd);ru=n(eYe,"A",{id:!0,class:!0,href:!0});var CFt=s(ru);yme=n(CFt,"SPAN",{});var wFt=s(yme);T(YL.$$.fragment,wFt),wFt.forEach(t),CFt.forEach(t),QMo=i(eYe),Lme=n(eYe,"SPAN",{});var AFt=s(Lme);WMo=r(AFt,"AutoProcessor"),AFt.forEach(t),eYe.forEach(t),zUe=i(f),So=n(f,"DIV",{class:!0});var bl=s(So);T(KL.$$.fragment,bl),UMo=i(bl),ZL=n(bl,"P",{});var oYe=s(ZL);HMo=r(oYe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),RD=n(oYe,"A",{href:!0});var yFt=s(RD);JMo=r(yFt,"AutoProcessor.from_pretrained()"),yFt.forEach(t),YMo=r(oYe," class method."),oYe.forEach(t),KMo=i(bl),e9=n(bl,"P",{});var rYe=s(e9);ZMo=r(rYe,"This class cannot be instantiated directly using "),xme=n(rYe,"CODE",{});var LFt=s(xme);eEo=r(LFt,"__init__()"),LFt.forEach(t),oEo=r(rYe," (throws an error)."),rYe.forEach(t),rEo=i(bl),Je=n(bl,"DIV",{class:!0});var pa=s(Je);T(o9.$$.fragment,pa),tEo=i(pa),$me=n(pa,"P",{});var xFt=s($me);aEo=r(xFt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),xFt.forEach(t),nEo=i(pa),ld=n(pa,"P",{});var hne=s(ld);sEo=r(hne,"The processor class to instantiate is selected based on the "),kme=n(hne,"CODE",{});var $Ft=s(kme);lEo=r($Ft,"model_type"),$Ft.forEach(t),iEo=r(hne,` property of the config object (either
passed as an argument or loaded from `),Sme=n(hne,"CODE",{});var kFt=s(Sme);dEo=r(kFt,"pretrained_model_name_or_path"),kFt.forEach(t),cEo=r(hne," if possible):"),hne.forEach(t),fEo=i(pa),ie=n(pa,"UL",{});var ge=s(ie);tu=n(ge,"LI",{});var ISe=s(tu);Rme=n(ISe,"STRONG",{});var SFt=s(Rme);mEo=r(SFt,"clip"),SFt.forEach(t),gEo=r(ISe," \u2014 "),PD=n(ISe,"A",{href:!0});var RFt=s(PD);hEo=r(RFt,"CLIPProcessor"),RFt.forEach(t),pEo=r(ISe," (CLIP model)"),ISe.forEach(t),uEo=i(ge),au=n(ge,"LI",{});var NSe=s(au);Pme=n(NSe,"STRONG",{});var PFt=s(Pme);_Eo=r(PFt,"donut"),PFt.forEach(t),bEo=r(NSe," \u2014 "),BD=n(NSe,"A",{href:!0});var BFt=s(BD);vEo=r(BFt,"DonutProcessor"),BFt.forEach(t),FEo=r(NSe," (Donut model)"),NSe.forEach(t),TEo=i(ge),nu=n(ge,"LI",{});var qSe=s(nu);Bme=n(qSe,"STRONG",{});var IFt=s(Bme);MEo=r(IFt,"flava"),IFt.forEach(t),EEo=r(qSe," \u2014 "),ID=n(qSe,"A",{href:!0});var NFt=s(ID);CEo=r(NFt,"FlavaProcessor"),NFt.forEach(t),wEo=r(qSe," (FLAVA model)"),qSe.forEach(t),AEo=i(ge),su=n(ge,"LI",{});var jSe=s(su);Ime=n(jSe,"STRONG",{});var qFt=s(Ime);yEo=r(qFt,"groupvit"),qFt.forEach(t),LEo=r(jSe," \u2014 "),ND=n(jSe,"A",{href:!0});var jFt=s(ND);xEo=r(jFt,"CLIPProcessor"),jFt.forEach(t),$Eo=r(jSe," (GroupViT model)"),jSe.forEach(t),kEo=i(ge),lu=n(ge,"LI",{});var DSe=s(lu);Nme=n(DSe,"STRONG",{});var DFt=s(Nme);SEo=r(DFt,"layoutlmv2"),DFt.forEach(t),REo=r(DSe," \u2014 "),qD=n(DSe,"A",{href:!0});var GFt=s(qD);PEo=r(GFt,"LayoutLMv2Processor"),GFt.forEach(t),BEo=r(DSe," (LayoutLMv2 model)"),DSe.forEach(t),IEo=i(ge),iu=n(ge,"LI",{});var GSe=s(iu);qme=n(GSe,"STRONG",{});var OFt=s(qme);NEo=r(OFt,"layoutlmv3"),OFt.forEach(t),qEo=r(GSe," \u2014 "),jD=n(GSe,"A",{href:!0});var VFt=s(jD);jEo=r(VFt,"LayoutLMv3Processor"),VFt.forEach(t),DEo=r(GSe," (LayoutLMv3 model)"),GSe.forEach(t),GEo=i(ge),du=n(ge,"LI",{});var OSe=s(du);jme=n(OSe,"STRONG",{});var XFt=s(jme);OEo=r(XFt,"layoutxlm"),XFt.forEach(t),VEo=r(OSe," \u2014 "),DD=n(OSe,"A",{href:!0});var zFt=s(DD);XEo=r(zFt,"LayoutXLMProcessor"),zFt.forEach(t),zEo=r(OSe," (LayoutXLM model)"),OSe.forEach(t),QEo=i(ge),cu=n(ge,"LI",{});var VSe=s(cu);Dme=n(VSe,"STRONG",{});var QFt=s(Dme);WEo=r(QFt,"owlvit"),QFt.forEach(t),UEo=r(VSe," \u2014 "),GD=n(VSe,"A",{href:!0});var WFt=s(GD);HEo=r(WFt,"OwlViTProcessor"),WFt.forEach(t),JEo=r(VSe," (OWL-ViT model)"),VSe.forEach(t),YEo=i(ge),fu=n(ge,"LI",{});var XSe=s(fu);Gme=n(XSe,"STRONG",{});var UFt=s(Gme);KEo=r(UFt,"sew"),UFt.forEach(t),ZEo=r(XSe," \u2014 "),OD=n(XSe,"A",{href:!0});var HFt=s(OD);eCo=r(HFt,"Wav2Vec2Processor"),HFt.forEach(t),oCo=r(XSe," (SEW model)"),XSe.forEach(t),rCo=i(ge),mu=n(ge,"LI",{});var zSe=s(mu);Ome=n(zSe,"STRONG",{});var JFt=s(Ome);tCo=r(JFt,"sew-d"),JFt.forEach(t),aCo=r(zSe," \u2014 "),VD=n(zSe,"A",{href:!0});var YFt=s(VD);nCo=r(YFt,"Wav2Vec2Processor"),YFt.forEach(t),sCo=r(zSe," (SEW-D model)"),zSe.forEach(t),lCo=i(ge),gu=n(ge,"LI",{});var QSe=s(gu);Vme=n(QSe,"STRONG",{});var KFt=s(Vme);iCo=r(KFt,"speech_to_text"),KFt.forEach(t),dCo=r(QSe," \u2014 "),XD=n(QSe,"A",{href:!0});var ZFt=s(XD);cCo=r(ZFt,"Speech2TextProcessor"),ZFt.forEach(t),fCo=r(QSe," (Speech2Text model)"),QSe.forEach(t),mCo=i(ge),hu=n(ge,"LI",{});var WSe=s(hu);Xme=n(WSe,"STRONG",{});var eTt=s(Xme);gCo=r(eTt,"speech_to_text_2"),eTt.forEach(t),hCo=r(WSe," \u2014 "),zD=n(WSe,"A",{href:!0});var oTt=s(zD);pCo=r(oTt,"Speech2Text2Processor"),oTt.forEach(t),uCo=r(WSe," (Speech2Text2 model)"),WSe.forEach(t),_Co=i(ge),pu=n(ge,"LI",{});var USe=s(pu);zme=n(USe,"STRONG",{});var rTt=s(zme);bCo=r(rTt,"trocr"),rTt.forEach(t),vCo=r(USe," \u2014 "),QD=n(USe,"A",{href:!0});var tTt=s(QD);FCo=r(tTt,"TrOCRProcessor"),tTt.forEach(t),TCo=r(USe," (TrOCR model)"),USe.forEach(t),MCo=i(ge),uu=n(ge,"LI",{});var HSe=s(uu);Qme=n(HSe,"STRONG",{});var aTt=s(Qme);ECo=r(aTt,"unispeech"),aTt.forEach(t),CCo=r(HSe," \u2014 "),WD=n(HSe,"A",{href:!0});var nTt=s(WD);wCo=r(nTt,"Wav2Vec2Processor"),nTt.forEach(t),ACo=r(HSe," (UniSpeech model)"),HSe.forEach(t),yCo=i(ge),_u=n(ge,"LI",{});var JSe=s(_u);Wme=n(JSe,"STRONG",{});var sTt=s(Wme);LCo=r(sTt,"unispeech-sat"),sTt.forEach(t),xCo=r(JSe," \u2014 "),UD=n(JSe,"A",{href:!0});var lTt=s(UD);$Co=r(lTt,"Wav2Vec2Processor"),lTt.forEach(t),kCo=r(JSe," (UniSpeechSat model)"),JSe.forEach(t),SCo=i(ge),bu=n(ge,"LI",{});var YSe=s(bu);Ume=n(YSe,"STRONG",{});var iTt=s(Ume);RCo=r(iTt,"vilt"),iTt.forEach(t),PCo=r(YSe," \u2014 "),HD=n(YSe,"A",{href:!0});var dTt=s(HD);BCo=r(dTt,"ViltProcessor"),dTt.forEach(t),ICo=r(YSe," (ViLT model)"),YSe.forEach(t),NCo=i(ge),vu=n(ge,"LI",{});var KSe=s(vu);Hme=n(KSe,"STRONG",{});var cTt=s(Hme);qCo=r(cTt,"vision-text-dual-encoder"),cTt.forEach(t),jCo=r(KSe," \u2014 "),JD=n(KSe,"A",{href:!0});var fTt=s(JD);DCo=r(fTt,"VisionTextDualEncoderProcessor"),fTt.forEach(t),GCo=r(KSe," (VisionTextDualEncoder model)"),KSe.forEach(t),OCo=i(ge),Fu=n(ge,"LI",{});var ZSe=s(Fu);Jme=n(ZSe,"STRONG",{});var mTt=s(Jme);VCo=r(mTt,"wav2vec2"),mTt.forEach(t),XCo=r(ZSe," \u2014 "),YD=n(ZSe,"A",{href:!0});var gTt=s(YD);zCo=r(gTt,"Wav2Vec2Processor"),gTt.forEach(t),QCo=r(ZSe," (Wav2Vec2 model)"),ZSe.forEach(t),WCo=i(ge),Tu=n(ge,"LI",{});var eRe=s(Tu);Yme=n(eRe,"STRONG",{});var hTt=s(Yme);UCo=r(hTt,"wav2vec2-conformer"),hTt.forEach(t),HCo=r(eRe," \u2014 "),KD=n(eRe,"A",{href:!0});var pTt=s(KD);JCo=r(pTt,"Wav2Vec2Processor"),pTt.forEach(t),YCo=r(eRe," (Wav2Vec2-Conformer model)"),eRe.forEach(t),KCo=i(ge),Mu=n(ge,"LI",{});var oRe=s(Mu);Kme=n(oRe,"STRONG",{});var uTt=s(Kme);ZCo=r(uTt,"wavlm"),uTt.forEach(t),e3o=r(oRe," \u2014 "),ZD=n(oRe,"A",{href:!0});var _Tt=s(ZD);o3o=r(_Tt,"Wav2Vec2Processor"),_Tt.forEach(t),r3o=r(oRe," (WavLM model)"),oRe.forEach(t),ge.forEach(t),t3o=i(pa),T(Eu.$$.fragment,pa),a3o=i(pa),T(Cu.$$.fragment,pa),pa.forEach(t),n3o=i(bl),wu=n(bl,"DIV",{class:!0});var tYe=s(wu);T(r9.$$.fragment,tYe),s3o=i(tYe),Zme=n(tYe,"P",{});var bTt=s(Zme);l3o=r(bTt,"Register a new processor for this class."),bTt.forEach(t),tYe.forEach(t),bl.forEach(t),QUe=i(f),id=n(f,"H2",{class:!0});var aYe=s(id);Au=n(aYe,"A",{id:!0,class:!0,href:!0});var vTt=s(Au);ege=n(vTt,"SPAN",{});var FTt=s(ege);T(t9.$$.fragment,FTt),FTt.forEach(t),vTt.forEach(t),i3o=i(aYe),oge=n(aYe,"SPAN",{});var TTt=s(oge);d3o=r(TTt,"AutoModel"),TTt.forEach(t),aYe.forEach(t),WUe=i(f),Ro=n(f,"DIV",{class:!0});var vl=s(Ro);T(a9.$$.fragment,vl),c3o=i(vl),dd=n(vl,"P",{});var pne=s(dd);f3o=r(pne,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eG=n(pne,"A",{href:!0});var MTt=s(eG);m3o=r(MTt,"from_pretrained()"),MTt.forEach(t),g3o=r(pne," class method or the "),oG=n(pne,"A",{href:!0});var ETt=s(oG);h3o=r(ETt,"from_config()"),ETt.forEach(t),p3o=r(pne,` class
method.`),pne.forEach(t),u3o=i(vl),n9=n(vl,"P",{});var nYe=s(n9);_3o=r(nYe,"This class cannot be instantiated directly using "),rge=n(nYe,"CODE",{});var CTt=s(rge);b3o=r(CTt,"__init__()"),CTt.forEach(t),v3o=r(nYe," (throws an error)."),nYe.forEach(t),F3o=i(vl),ht=n(vl,"DIV",{class:!0});var L7=s(ht);T(s9.$$.fragment,L7),T3o=i(L7),tge=n(L7,"P",{});var wTt=s(tge);M3o=r(wTt,"Instantiates one of the base model classes of the library from a configuration."),wTt.forEach(t),E3o=i(L7),cd=n(L7,"P",{});var une=s(cd);C3o=r(une,`Note:
Loading a model from its configuration file does `),age=n(une,"STRONG",{});var ATt=s(age);w3o=r(ATt,"not"),ATt.forEach(t),A3o=r(une,` load the model weights. It only affects the
model\u2019s configuration. Use `),rG=n(une,"A",{href:!0});var yTt=s(rG);y3o=r(yTt,"from_pretrained()"),yTt.forEach(t),L3o=r(une," to load the model weights."),une.forEach(t),x3o=i(L7),T(yu.$$.fragment,L7),L7.forEach(t),$3o=i(vl),Ye=n(vl,"DIV",{class:!0});var ua=s(Ye);T(l9.$$.fragment,ua),k3o=i(ua),nge=n(ua,"P",{});var LTt=s(nge);S3o=r(LTt,"Instantiate one of the base model classes of the library from a pretrained model."),LTt.forEach(t),R3o=i(ua),Wa=n(ua,"P",{});var x7=s(Wa);P3o=r(x7,"The model class to instantiate is selected based on the "),sge=n(x7,"CODE",{});var xTt=s(sge);B3o=r(xTt,"model_type"),xTt.forEach(t),I3o=r(x7,` property of the config object (either
passed as an argument or loaded from `),lge=n(x7,"CODE",{});var $Tt=s(lge);N3o=r($Tt,"pretrained_model_name_or_path"),$Tt.forEach(t),q3o=r(x7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=n(x7,"CODE",{});var kTt=s(ige);j3o=r(kTt,"pretrained_model_name_or_path"),kTt.forEach(t),D3o=r(x7,":"),x7.forEach(t),G3o=i(ua),L=n(ua,"UL",{});var x=s(L);Lu=n(x,"LI",{});var rRe=s(Lu);dge=n(rRe,"STRONG",{});var STt=s(dge);O3o=r(STt,"albert"),STt.forEach(t),V3o=r(rRe," \u2014 "),tG=n(rRe,"A",{href:!0});var RTt=s(tG);X3o=r(RTt,"AlbertModel"),RTt.forEach(t),z3o=r(rRe," (ALBERT model)"),rRe.forEach(t),Q3o=i(x),xu=n(x,"LI",{});var tRe=s(xu);cge=n(tRe,"STRONG",{});var PTt=s(cge);W3o=r(PTt,"bart"),PTt.forEach(t),U3o=r(tRe," \u2014 "),aG=n(tRe,"A",{href:!0});var BTt=s(aG);H3o=r(BTt,"BartModel"),BTt.forEach(t),J3o=r(tRe," (BART model)"),tRe.forEach(t),Y3o=i(x),$u=n(x,"LI",{});var aRe=s($u);fge=n(aRe,"STRONG",{});var ITt=s(fge);K3o=r(ITt,"beit"),ITt.forEach(t),Z3o=r(aRe," \u2014 "),nG=n(aRe,"A",{href:!0});var NTt=s(nG);e5o=r(NTt,"BeitModel"),NTt.forEach(t),o5o=r(aRe," (BEiT model)"),aRe.forEach(t),r5o=i(x),ku=n(x,"LI",{});var nRe=s(ku);mge=n(nRe,"STRONG",{});var qTt=s(mge);t5o=r(qTt,"bert"),qTt.forEach(t),a5o=r(nRe," \u2014 "),sG=n(nRe,"A",{href:!0});var jTt=s(sG);n5o=r(jTt,"BertModel"),jTt.forEach(t),s5o=r(nRe," (BERT model)"),nRe.forEach(t),l5o=i(x),Su=n(x,"LI",{});var sRe=s(Su);gge=n(sRe,"STRONG",{});var DTt=s(gge);i5o=r(DTt,"bert-generation"),DTt.forEach(t),d5o=r(sRe," \u2014 "),lG=n(sRe,"A",{href:!0});var GTt=s(lG);c5o=r(GTt,"BertGenerationEncoder"),GTt.forEach(t),f5o=r(sRe," (Bert Generation model)"),sRe.forEach(t),m5o=i(x),Ru=n(x,"LI",{});var lRe=s(Ru);hge=n(lRe,"STRONG",{});var OTt=s(hge);g5o=r(OTt,"big_bird"),OTt.forEach(t),h5o=r(lRe," \u2014 "),iG=n(lRe,"A",{href:!0});var VTt=s(iG);p5o=r(VTt,"BigBirdModel"),VTt.forEach(t),u5o=r(lRe," (BigBird model)"),lRe.forEach(t),_5o=i(x),Pu=n(x,"LI",{});var iRe=s(Pu);pge=n(iRe,"STRONG",{});var XTt=s(pge);b5o=r(XTt,"bigbird_pegasus"),XTt.forEach(t),v5o=r(iRe," \u2014 "),dG=n(iRe,"A",{href:!0});var zTt=s(dG);F5o=r(zTt,"BigBirdPegasusModel"),zTt.forEach(t),T5o=r(iRe," (BigBird-Pegasus model)"),iRe.forEach(t),M5o=i(x),Bu=n(x,"LI",{});var dRe=s(Bu);uge=n(dRe,"STRONG",{});var QTt=s(uge);E5o=r(QTt,"blenderbot"),QTt.forEach(t),C5o=r(dRe," \u2014 "),cG=n(dRe,"A",{href:!0});var WTt=s(cG);w5o=r(WTt,"BlenderbotModel"),WTt.forEach(t),A5o=r(dRe," (Blenderbot model)"),dRe.forEach(t),y5o=i(x),Iu=n(x,"LI",{});var cRe=s(Iu);_ge=n(cRe,"STRONG",{});var UTt=s(_ge);L5o=r(UTt,"blenderbot-small"),UTt.forEach(t),x5o=r(cRe," \u2014 "),fG=n(cRe,"A",{href:!0});var HTt=s(fG);$5o=r(HTt,"BlenderbotSmallModel"),HTt.forEach(t),k5o=r(cRe," (BlenderbotSmall model)"),cRe.forEach(t),S5o=i(x),Nu=n(x,"LI",{});var fRe=s(Nu);bge=n(fRe,"STRONG",{});var JTt=s(bge);R5o=r(JTt,"bloom"),JTt.forEach(t),P5o=r(fRe," \u2014 "),mG=n(fRe,"A",{href:!0});var YTt=s(mG);B5o=r(YTt,"BloomModel"),YTt.forEach(t),I5o=r(fRe," (BLOOM model)"),fRe.forEach(t),N5o=i(x),qu=n(x,"LI",{});var mRe=s(qu);vge=n(mRe,"STRONG",{});var KTt=s(vge);q5o=r(KTt,"camembert"),KTt.forEach(t),j5o=r(mRe," \u2014 "),gG=n(mRe,"A",{href:!0});var ZTt=s(gG);D5o=r(ZTt,"CamembertModel"),ZTt.forEach(t),G5o=r(mRe," (CamemBERT model)"),mRe.forEach(t),O5o=i(x),ju=n(x,"LI",{});var gRe=s(ju);Fge=n(gRe,"STRONG",{});var e8t=s(Fge);V5o=r(e8t,"canine"),e8t.forEach(t),X5o=r(gRe," \u2014 "),hG=n(gRe,"A",{href:!0});var o8t=s(hG);z5o=r(o8t,"CanineModel"),o8t.forEach(t),Q5o=r(gRe," (CANINE model)"),gRe.forEach(t),W5o=i(x),Du=n(x,"LI",{});var hRe=s(Du);Tge=n(hRe,"STRONG",{});var r8t=s(Tge);U5o=r(r8t,"clip"),r8t.forEach(t),H5o=r(hRe," \u2014 "),pG=n(hRe,"A",{href:!0});var t8t=s(pG);J5o=r(t8t,"CLIPModel"),t8t.forEach(t),Y5o=r(hRe," (CLIP model)"),hRe.forEach(t),K5o=i(x),Gu=n(x,"LI",{});var pRe=s(Gu);Mge=n(pRe,"STRONG",{});var a8t=s(Mge);Z5o=r(a8t,"codegen"),a8t.forEach(t),e0o=r(pRe," \u2014 "),uG=n(pRe,"A",{href:!0});var n8t=s(uG);o0o=r(n8t,"CodeGenModel"),n8t.forEach(t),r0o=r(pRe," (CodeGen model)"),pRe.forEach(t),t0o=i(x),Ou=n(x,"LI",{});var uRe=s(Ou);Ege=n(uRe,"STRONG",{});var s8t=s(Ege);a0o=r(s8t,"convbert"),s8t.forEach(t),n0o=r(uRe," \u2014 "),_G=n(uRe,"A",{href:!0});var l8t=s(_G);s0o=r(l8t,"ConvBertModel"),l8t.forEach(t),l0o=r(uRe," (ConvBERT model)"),uRe.forEach(t),i0o=i(x),Vu=n(x,"LI",{});var _Re=s(Vu);Cge=n(_Re,"STRONG",{});var i8t=s(Cge);d0o=r(i8t,"convnext"),i8t.forEach(t),c0o=r(_Re," \u2014 "),bG=n(_Re,"A",{href:!0});var d8t=s(bG);f0o=r(d8t,"ConvNextModel"),d8t.forEach(t),m0o=r(_Re," (ConvNeXT model)"),_Re.forEach(t),g0o=i(x),Xu=n(x,"LI",{});var bRe=s(Xu);wge=n(bRe,"STRONG",{});var c8t=s(wge);h0o=r(c8t,"ctrl"),c8t.forEach(t),p0o=r(bRe," \u2014 "),vG=n(bRe,"A",{href:!0});var f8t=s(vG);u0o=r(f8t,"CTRLModel"),f8t.forEach(t),_0o=r(bRe," (CTRL model)"),bRe.forEach(t),b0o=i(x),zu=n(x,"LI",{});var vRe=s(zu);Age=n(vRe,"STRONG",{});var m8t=s(Age);v0o=r(m8t,"cvt"),m8t.forEach(t),F0o=r(vRe," \u2014 "),FG=n(vRe,"A",{href:!0});var g8t=s(FG);T0o=r(g8t,"CvtModel"),g8t.forEach(t),M0o=r(vRe," (CvT model)"),vRe.forEach(t),E0o=i(x),Qu=n(x,"LI",{});var FRe=s(Qu);yge=n(FRe,"STRONG",{});var h8t=s(yge);C0o=r(h8t,"data2vec-audio"),h8t.forEach(t),w0o=r(FRe," \u2014 "),TG=n(FRe,"A",{href:!0});var p8t=s(TG);A0o=r(p8t,"Data2VecAudioModel"),p8t.forEach(t),y0o=r(FRe," (Data2VecAudio model)"),FRe.forEach(t),L0o=i(x),Wu=n(x,"LI",{});var TRe=s(Wu);Lge=n(TRe,"STRONG",{});var u8t=s(Lge);x0o=r(u8t,"data2vec-text"),u8t.forEach(t),$0o=r(TRe," \u2014 "),MG=n(TRe,"A",{href:!0});var _8t=s(MG);k0o=r(_8t,"Data2VecTextModel"),_8t.forEach(t),S0o=r(TRe," (Data2VecText model)"),TRe.forEach(t),R0o=i(x),Uu=n(x,"LI",{});var MRe=s(Uu);xge=n(MRe,"STRONG",{});var b8t=s(xge);P0o=r(b8t,"data2vec-vision"),b8t.forEach(t),B0o=r(MRe," \u2014 "),EG=n(MRe,"A",{href:!0});var v8t=s(EG);I0o=r(v8t,"Data2VecVisionModel"),v8t.forEach(t),N0o=r(MRe," (Data2VecVision model)"),MRe.forEach(t),q0o=i(x),Hu=n(x,"LI",{});var ERe=s(Hu);$ge=n(ERe,"STRONG",{});var F8t=s($ge);j0o=r(F8t,"deberta"),F8t.forEach(t),D0o=r(ERe," \u2014 "),CG=n(ERe,"A",{href:!0});var T8t=s(CG);G0o=r(T8t,"DebertaModel"),T8t.forEach(t),O0o=r(ERe," (DeBERTa model)"),ERe.forEach(t),V0o=i(x),Ju=n(x,"LI",{});var CRe=s(Ju);kge=n(CRe,"STRONG",{});var M8t=s(kge);X0o=r(M8t,"deberta-v2"),M8t.forEach(t),z0o=r(CRe," \u2014 "),wG=n(CRe,"A",{href:!0});var E8t=s(wG);Q0o=r(E8t,"DebertaV2Model"),E8t.forEach(t),W0o=r(CRe," (DeBERTa-v2 model)"),CRe.forEach(t),U0o=i(x),Yu=n(x,"LI",{});var wRe=s(Yu);Sge=n(wRe,"STRONG",{});var C8t=s(Sge);H0o=r(C8t,"decision_transformer"),C8t.forEach(t),J0o=r(wRe," \u2014 "),AG=n(wRe,"A",{href:!0});var w8t=s(AG);Y0o=r(w8t,"DecisionTransformerModel"),w8t.forEach(t),K0o=r(wRe," (Decision Transformer model)"),wRe.forEach(t),Z0o=i(x),Ku=n(x,"LI",{});var ARe=s(Ku);Rge=n(ARe,"STRONG",{});var A8t=s(Rge);ewo=r(A8t,"deit"),A8t.forEach(t),owo=r(ARe," \u2014 "),yG=n(ARe,"A",{href:!0});var y8t=s(yG);rwo=r(y8t,"DeiTModel"),y8t.forEach(t),two=r(ARe," (DeiT model)"),ARe.forEach(t),awo=i(x),Zu=n(x,"LI",{});var yRe=s(Zu);Pge=n(yRe,"STRONG",{});var L8t=s(Pge);nwo=r(L8t,"detr"),L8t.forEach(t),swo=r(yRe," \u2014 "),LG=n(yRe,"A",{href:!0});var x8t=s(LG);lwo=r(x8t,"DetrModel"),x8t.forEach(t),iwo=r(yRe," (DETR model)"),yRe.forEach(t),dwo=i(x),e_=n(x,"LI",{});var LRe=s(e_);Bge=n(LRe,"STRONG",{});var $8t=s(Bge);cwo=r($8t,"distilbert"),$8t.forEach(t),fwo=r(LRe," \u2014 "),xG=n(LRe,"A",{href:!0});var k8t=s(xG);mwo=r(k8t,"DistilBertModel"),k8t.forEach(t),gwo=r(LRe," (DistilBERT model)"),LRe.forEach(t),hwo=i(x),o_=n(x,"LI",{});var xRe=s(o_);Ige=n(xRe,"STRONG",{});var S8t=s(Ige);pwo=r(S8t,"donut-swin"),S8t.forEach(t),uwo=r(xRe," \u2014 "),$G=n(xRe,"A",{href:!0});var R8t=s($G);_wo=r(R8t,"DonutSwinModel"),R8t.forEach(t),bwo=r(xRe," (DonutSwin model)"),xRe.forEach(t),vwo=i(x),r_=n(x,"LI",{});var $Re=s(r_);Nge=n($Re,"STRONG",{});var P8t=s(Nge);Fwo=r(P8t,"dpr"),P8t.forEach(t),Two=r($Re," \u2014 "),kG=n($Re,"A",{href:!0});var B8t=s(kG);Mwo=r(B8t,"DPRQuestionEncoder"),B8t.forEach(t),Ewo=r($Re," (DPR model)"),$Re.forEach(t),Cwo=i(x),t_=n(x,"LI",{});var kRe=s(t_);qge=n(kRe,"STRONG",{});var I8t=s(qge);wwo=r(I8t,"dpt"),I8t.forEach(t),Awo=r(kRe," \u2014 "),SG=n(kRe,"A",{href:!0});var N8t=s(SG);ywo=r(N8t,"DPTModel"),N8t.forEach(t),Lwo=r(kRe," (DPT model)"),kRe.forEach(t),xwo=i(x),a_=n(x,"LI",{});var SRe=s(a_);jge=n(SRe,"STRONG",{});var q8t=s(jge);$wo=r(q8t,"electra"),q8t.forEach(t),kwo=r(SRe," \u2014 "),RG=n(SRe,"A",{href:!0});var j8t=s(RG);Swo=r(j8t,"ElectraModel"),j8t.forEach(t),Rwo=r(SRe," (ELECTRA model)"),SRe.forEach(t),Pwo=i(x),n_=n(x,"LI",{});var RRe=s(n_);Dge=n(RRe,"STRONG",{});var D8t=s(Dge);Bwo=r(D8t,"flaubert"),D8t.forEach(t),Iwo=r(RRe," \u2014 "),PG=n(RRe,"A",{href:!0});var G8t=s(PG);Nwo=r(G8t,"FlaubertModel"),G8t.forEach(t),qwo=r(RRe," (FlauBERT model)"),RRe.forEach(t),jwo=i(x),s_=n(x,"LI",{});var PRe=s(s_);Gge=n(PRe,"STRONG",{});var O8t=s(Gge);Dwo=r(O8t,"flava"),O8t.forEach(t),Gwo=r(PRe," \u2014 "),BG=n(PRe,"A",{href:!0});var V8t=s(BG);Owo=r(V8t,"FlavaModel"),V8t.forEach(t),Vwo=r(PRe," (FLAVA model)"),PRe.forEach(t),Xwo=i(x),l_=n(x,"LI",{});var BRe=s(l_);Oge=n(BRe,"STRONG",{});var X8t=s(Oge);zwo=r(X8t,"fnet"),X8t.forEach(t),Qwo=r(BRe," \u2014 "),IG=n(BRe,"A",{href:!0});var z8t=s(IG);Wwo=r(z8t,"FNetModel"),z8t.forEach(t),Uwo=r(BRe," (FNet model)"),BRe.forEach(t),Hwo=i(x),i_=n(x,"LI",{});var IRe=s(i_);Vge=n(IRe,"STRONG",{});var Q8t=s(Vge);Jwo=r(Q8t,"fsmt"),Q8t.forEach(t),Ywo=r(IRe," \u2014 "),NG=n(IRe,"A",{href:!0});var W8t=s(NG);Kwo=r(W8t,"FSMTModel"),W8t.forEach(t),Zwo=r(IRe," (FairSeq Machine-Translation model)"),IRe.forEach(t),eAo=i(x),cl=n(x,"LI",{});var MP=s(cl);Xge=n(MP,"STRONG",{});var U8t=s(Xge);oAo=r(U8t,"funnel"),U8t.forEach(t),rAo=r(MP," \u2014 "),qG=n(MP,"A",{href:!0});var H8t=s(qG);tAo=r(H8t,"FunnelModel"),H8t.forEach(t),aAo=r(MP," or "),jG=n(MP,"A",{href:!0});var J8t=s(jG);nAo=r(J8t,"FunnelBaseModel"),J8t.forEach(t),sAo=r(MP," (Funnel Transformer model)"),MP.forEach(t),lAo=i(x),d_=n(x,"LI",{});var NRe=s(d_);zge=n(NRe,"STRONG",{});var Y8t=s(zge);iAo=r(Y8t,"glpn"),Y8t.forEach(t),dAo=r(NRe," \u2014 "),DG=n(NRe,"A",{href:!0});var K8t=s(DG);cAo=r(K8t,"GLPNModel"),K8t.forEach(t),fAo=r(NRe," (GLPN model)"),NRe.forEach(t),mAo=i(x),c_=n(x,"LI",{});var qRe=s(c_);Qge=n(qRe,"STRONG",{});var Z8t=s(Qge);gAo=r(Z8t,"gpt2"),Z8t.forEach(t),hAo=r(qRe," \u2014 "),GG=n(qRe,"A",{href:!0});var eMt=s(GG);pAo=r(eMt,"GPT2Model"),eMt.forEach(t),uAo=r(qRe," (OpenAI GPT-2 model)"),qRe.forEach(t),_Ao=i(x),f_=n(x,"LI",{});var jRe=s(f_);Wge=n(jRe,"STRONG",{});var oMt=s(Wge);bAo=r(oMt,"gpt_neo"),oMt.forEach(t),vAo=r(jRe," \u2014 "),OG=n(jRe,"A",{href:!0});var rMt=s(OG);FAo=r(rMt,"GPTNeoModel"),rMt.forEach(t),TAo=r(jRe," (GPT Neo model)"),jRe.forEach(t),MAo=i(x),m_=n(x,"LI",{});var DRe=s(m_);Uge=n(DRe,"STRONG",{});var tMt=s(Uge);EAo=r(tMt,"gpt_neox"),tMt.forEach(t),CAo=r(DRe," \u2014 "),VG=n(DRe,"A",{href:!0});var aMt=s(VG);wAo=r(aMt,"GPTNeoXModel"),aMt.forEach(t),AAo=r(DRe," (GPT NeoX model)"),DRe.forEach(t),yAo=i(x),g_=n(x,"LI",{});var GRe=s(g_);Hge=n(GRe,"STRONG",{});var nMt=s(Hge);LAo=r(nMt,"gptj"),nMt.forEach(t),xAo=r(GRe," \u2014 "),XG=n(GRe,"A",{href:!0});var sMt=s(XG);$Ao=r(sMt,"GPTJModel"),sMt.forEach(t),kAo=r(GRe," (GPT-J model)"),GRe.forEach(t),SAo=i(x),h_=n(x,"LI",{});var ORe=s(h_);Jge=n(ORe,"STRONG",{});var lMt=s(Jge);RAo=r(lMt,"groupvit"),lMt.forEach(t),PAo=r(ORe," \u2014 "),zG=n(ORe,"A",{href:!0});var iMt=s(zG);BAo=r(iMt,"GroupViTModel"),iMt.forEach(t),IAo=r(ORe," (GroupViT model)"),ORe.forEach(t),NAo=i(x),p_=n(x,"LI",{});var VRe=s(p_);Yge=n(VRe,"STRONG",{});var dMt=s(Yge);qAo=r(dMt,"hubert"),dMt.forEach(t),jAo=r(VRe," \u2014 "),QG=n(VRe,"A",{href:!0});var cMt=s(QG);DAo=r(cMt,"HubertModel"),cMt.forEach(t),GAo=r(VRe," (Hubert model)"),VRe.forEach(t),OAo=i(x),u_=n(x,"LI",{});var XRe=s(u_);Kge=n(XRe,"STRONG",{});var fMt=s(Kge);VAo=r(fMt,"ibert"),fMt.forEach(t),XAo=r(XRe," \u2014 "),WG=n(XRe,"A",{href:!0});var mMt=s(WG);zAo=r(mMt,"IBertModel"),mMt.forEach(t),QAo=r(XRe," (I-BERT model)"),XRe.forEach(t),WAo=i(x),__=n(x,"LI",{});var zRe=s(__);Zge=n(zRe,"STRONG",{});var gMt=s(Zge);UAo=r(gMt,"imagegpt"),gMt.forEach(t),HAo=r(zRe," \u2014 "),UG=n(zRe,"A",{href:!0});var hMt=s(UG);JAo=r(hMt,"ImageGPTModel"),hMt.forEach(t),YAo=r(zRe," (ImageGPT model)"),zRe.forEach(t),KAo=i(x),b_=n(x,"LI",{});var QRe=s(b_);ehe=n(QRe,"STRONG",{});var pMt=s(ehe);ZAo=r(pMt,"layoutlm"),pMt.forEach(t),e6o=r(QRe," \u2014 "),HG=n(QRe,"A",{href:!0});var uMt=s(HG);o6o=r(uMt,"LayoutLMModel"),uMt.forEach(t),r6o=r(QRe," (LayoutLM model)"),QRe.forEach(t),t6o=i(x),v_=n(x,"LI",{});var WRe=s(v_);ohe=n(WRe,"STRONG",{});var _Mt=s(ohe);a6o=r(_Mt,"layoutlmv2"),_Mt.forEach(t),n6o=r(WRe," \u2014 "),JG=n(WRe,"A",{href:!0});var bMt=s(JG);s6o=r(bMt,"LayoutLMv2Model"),bMt.forEach(t),l6o=r(WRe," (LayoutLMv2 model)"),WRe.forEach(t),i6o=i(x),F_=n(x,"LI",{});var URe=s(F_);rhe=n(URe,"STRONG",{});var vMt=s(rhe);d6o=r(vMt,"layoutlmv3"),vMt.forEach(t),c6o=r(URe," \u2014 "),YG=n(URe,"A",{href:!0});var FMt=s(YG);f6o=r(FMt,"LayoutLMv3Model"),FMt.forEach(t),m6o=r(URe," (LayoutLMv3 model)"),URe.forEach(t),g6o=i(x),T_=n(x,"LI",{});var HRe=s(T_);the=n(HRe,"STRONG",{});var TMt=s(the);h6o=r(TMt,"led"),TMt.forEach(t),p6o=r(HRe," \u2014 "),KG=n(HRe,"A",{href:!0});var MMt=s(KG);u6o=r(MMt,"LEDModel"),MMt.forEach(t),_6o=r(HRe," (LED model)"),HRe.forEach(t),b6o=i(x),M_=n(x,"LI",{});var JRe=s(M_);ahe=n(JRe,"STRONG",{});var EMt=s(ahe);v6o=r(EMt,"levit"),EMt.forEach(t),F6o=r(JRe," \u2014 "),ZG=n(JRe,"A",{href:!0});var CMt=s(ZG);T6o=r(CMt,"LevitModel"),CMt.forEach(t),M6o=r(JRe," (LeViT model)"),JRe.forEach(t),E6o=i(x),E_=n(x,"LI",{});var YRe=s(E_);nhe=n(YRe,"STRONG",{});var wMt=s(nhe);C6o=r(wMt,"longformer"),wMt.forEach(t),w6o=r(YRe," \u2014 "),eO=n(YRe,"A",{href:!0});var AMt=s(eO);A6o=r(AMt,"LongformerModel"),AMt.forEach(t),y6o=r(YRe," (Longformer model)"),YRe.forEach(t),L6o=i(x),C_=n(x,"LI",{});var KRe=s(C_);she=n(KRe,"STRONG",{});var yMt=s(she);x6o=r(yMt,"longt5"),yMt.forEach(t),$6o=r(KRe," \u2014 "),oO=n(KRe,"A",{href:!0});var LMt=s(oO);k6o=r(LMt,"LongT5Model"),LMt.forEach(t),S6o=r(KRe," (LongT5 model)"),KRe.forEach(t),R6o=i(x),w_=n(x,"LI",{});var ZRe=s(w_);lhe=n(ZRe,"STRONG",{});var xMt=s(lhe);P6o=r(xMt,"luke"),xMt.forEach(t),B6o=r(ZRe," \u2014 "),rO=n(ZRe,"A",{href:!0});var $Mt=s(rO);I6o=r($Mt,"LukeModel"),$Mt.forEach(t),N6o=r(ZRe," (LUKE model)"),ZRe.forEach(t),q6o=i(x),A_=n(x,"LI",{});var ePe=s(A_);ihe=n(ePe,"STRONG",{});var kMt=s(ihe);j6o=r(kMt,"lxmert"),kMt.forEach(t),D6o=r(ePe," \u2014 "),tO=n(ePe,"A",{href:!0});var SMt=s(tO);G6o=r(SMt,"LxmertModel"),SMt.forEach(t),O6o=r(ePe," (LXMERT model)"),ePe.forEach(t),V6o=i(x),y_=n(x,"LI",{});var oPe=s(y_);dhe=n(oPe,"STRONG",{});var RMt=s(dhe);X6o=r(RMt,"m2m_100"),RMt.forEach(t),z6o=r(oPe," \u2014 "),aO=n(oPe,"A",{href:!0});var PMt=s(aO);Q6o=r(PMt,"M2M100Model"),PMt.forEach(t),W6o=r(oPe," (M2M100 model)"),oPe.forEach(t),U6o=i(x),L_=n(x,"LI",{});var rPe=s(L_);che=n(rPe,"STRONG",{});var BMt=s(che);H6o=r(BMt,"marian"),BMt.forEach(t),J6o=r(rPe," \u2014 "),nO=n(rPe,"A",{href:!0});var IMt=s(nO);Y6o=r(IMt,"MarianModel"),IMt.forEach(t),K6o=r(rPe," (Marian model)"),rPe.forEach(t),Z6o=i(x),x_=n(x,"LI",{});var tPe=s(x_);fhe=n(tPe,"STRONG",{});var NMt=s(fhe);e7o=r(NMt,"maskformer"),NMt.forEach(t),o7o=r(tPe," \u2014 "),sO=n(tPe,"A",{href:!0});var qMt=s(sO);r7o=r(qMt,"MaskFormerModel"),qMt.forEach(t),t7o=r(tPe," (MaskFormer model)"),tPe.forEach(t),a7o=i(x),$_=n(x,"LI",{});var aPe=s($_);mhe=n(aPe,"STRONG",{});var jMt=s(mhe);n7o=r(jMt,"mbart"),jMt.forEach(t),s7o=r(aPe," \u2014 "),lO=n(aPe,"A",{href:!0});var DMt=s(lO);l7o=r(DMt,"MBartModel"),DMt.forEach(t),i7o=r(aPe," (mBART model)"),aPe.forEach(t),d7o=i(x),k_=n(x,"LI",{});var nPe=s(k_);ghe=n(nPe,"STRONG",{});var GMt=s(ghe);c7o=r(GMt,"mctct"),GMt.forEach(t),f7o=r(nPe," \u2014 "),iO=n(nPe,"A",{href:!0});var OMt=s(iO);m7o=r(OMt,"MCTCTModel"),OMt.forEach(t),g7o=r(nPe," (M-CTC-T model)"),nPe.forEach(t),h7o=i(x),S_=n(x,"LI",{});var sPe=s(S_);hhe=n(sPe,"STRONG",{});var VMt=s(hhe);p7o=r(VMt,"megatron-bert"),VMt.forEach(t),u7o=r(sPe," \u2014 "),dO=n(sPe,"A",{href:!0});var XMt=s(dO);_7o=r(XMt,"MegatronBertModel"),XMt.forEach(t),b7o=r(sPe," (Megatron-BERT model)"),sPe.forEach(t),v7o=i(x),R_=n(x,"LI",{});var lPe=s(R_);phe=n(lPe,"STRONG",{});var zMt=s(phe);F7o=r(zMt,"mobilebert"),zMt.forEach(t),T7o=r(lPe," \u2014 "),cO=n(lPe,"A",{href:!0});var QMt=s(cO);M7o=r(QMt,"MobileBertModel"),QMt.forEach(t),E7o=r(lPe," (MobileBERT model)"),lPe.forEach(t),C7o=i(x),P_=n(x,"LI",{});var iPe=s(P_);uhe=n(iPe,"STRONG",{});var WMt=s(uhe);w7o=r(WMt,"mobilevit"),WMt.forEach(t),A7o=r(iPe," \u2014 "),fO=n(iPe,"A",{href:!0});var UMt=s(fO);y7o=r(UMt,"MobileViTModel"),UMt.forEach(t),L7o=r(iPe," (MobileViT model)"),iPe.forEach(t),x7o=i(x),B_=n(x,"LI",{});var dPe=s(B_);_he=n(dPe,"STRONG",{});var HMt=s(_he);$7o=r(HMt,"mpnet"),HMt.forEach(t),k7o=r(dPe," \u2014 "),mO=n(dPe,"A",{href:!0});var JMt=s(mO);S7o=r(JMt,"MPNetModel"),JMt.forEach(t),R7o=r(dPe," (MPNet model)"),dPe.forEach(t),P7o=i(x),I_=n(x,"LI",{});var cPe=s(I_);bhe=n(cPe,"STRONG",{});var YMt=s(bhe);B7o=r(YMt,"mt5"),YMt.forEach(t),I7o=r(cPe," \u2014 "),gO=n(cPe,"A",{href:!0});var KMt=s(gO);N7o=r(KMt,"MT5Model"),KMt.forEach(t),q7o=r(cPe," (MT5 model)"),cPe.forEach(t),j7o=i(x),N_=n(x,"LI",{});var fPe=s(N_);vhe=n(fPe,"STRONG",{});var ZMt=s(vhe);D7o=r(ZMt,"mvp"),ZMt.forEach(t),G7o=r(fPe," \u2014 "),hO=n(fPe,"A",{href:!0});var eEt=s(hO);O7o=r(eEt,"MvpModel"),eEt.forEach(t),V7o=r(fPe," (MVP model)"),fPe.forEach(t),X7o=i(x),q_=n(x,"LI",{});var mPe=s(q_);Fhe=n(mPe,"STRONG",{});var oEt=s(Fhe);z7o=r(oEt,"nezha"),oEt.forEach(t),Q7o=r(mPe," \u2014 "),pO=n(mPe,"A",{href:!0});var rEt=s(pO);W7o=r(rEt,"NezhaModel"),rEt.forEach(t),U7o=r(mPe," (Nezha model)"),mPe.forEach(t),H7o=i(x),j_=n(x,"LI",{});var gPe=s(j_);The=n(gPe,"STRONG",{});var tEt=s(The);J7o=r(tEt,"nllb"),tEt.forEach(t),Y7o=r(gPe," \u2014 "),uO=n(gPe,"A",{href:!0});var aEt=s(uO);K7o=r(aEt,"M2M100Model"),aEt.forEach(t),Z7o=r(gPe," (NLLB model)"),gPe.forEach(t),eyo=i(x),D_=n(x,"LI",{});var hPe=s(D_);Mhe=n(hPe,"STRONG",{});var nEt=s(Mhe);oyo=r(nEt,"nystromformer"),nEt.forEach(t),ryo=r(hPe," \u2014 "),_O=n(hPe,"A",{href:!0});var sEt=s(_O);tyo=r(sEt,"NystromformerModel"),sEt.forEach(t),ayo=r(hPe," (Nystr\xF6mformer model)"),hPe.forEach(t),nyo=i(x),G_=n(x,"LI",{});var pPe=s(G_);Ehe=n(pPe,"STRONG",{});var lEt=s(Ehe);syo=r(lEt,"openai-gpt"),lEt.forEach(t),lyo=r(pPe," \u2014 "),bO=n(pPe,"A",{href:!0});var iEt=s(bO);iyo=r(iEt,"OpenAIGPTModel"),iEt.forEach(t),dyo=r(pPe," (OpenAI GPT model)"),pPe.forEach(t),cyo=i(x),O_=n(x,"LI",{});var uPe=s(O_);Che=n(uPe,"STRONG",{});var dEt=s(Che);fyo=r(dEt,"opt"),dEt.forEach(t),myo=r(uPe," \u2014 "),vO=n(uPe,"A",{href:!0});var cEt=s(vO);gyo=r(cEt,"OPTModel"),cEt.forEach(t),hyo=r(uPe," (OPT model)"),uPe.forEach(t),pyo=i(x),V_=n(x,"LI",{});var _Pe=s(V_);whe=n(_Pe,"STRONG",{});var fEt=s(whe);uyo=r(fEt,"owlvit"),fEt.forEach(t),_yo=r(_Pe," \u2014 "),FO=n(_Pe,"A",{href:!0});var mEt=s(FO);byo=r(mEt,"OwlViTModel"),mEt.forEach(t),vyo=r(_Pe," (OWL-ViT model)"),_Pe.forEach(t),Fyo=i(x),X_=n(x,"LI",{});var bPe=s(X_);Ahe=n(bPe,"STRONG",{});var gEt=s(Ahe);Tyo=r(gEt,"pegasus"),gEt.forEach(t),Myo=r(bPe," \u2014 "),TO=n(bPe,"A",{href:!0});var hEt=s(TO);Eyo=r(hEt,"PegasusModel"),hEt.forEach(t),Cyo=r(bPe," (Pegasus model)"),bPe.forEach(t),wyo=i(x),z_=n(x,"LI",{});var vPe=s(z_);yhe=n(vPe,"STRONG",{});var pEt=s(yhe);Ayo=r(pEt,"perceiver"),pEt.forEach(t),yyo=r(vPe," \u2014 "),MO=n(vPe,"A",{href:!0});var uEt=s(MO);Lyo=r(uEt,"PerceiverModel"),uEt.forEach(t),xyo=r(vPe," (Perceiver model)"),vPe.forEach(t),$yo=i(x),Q_=n(x,"LI",{});var FPe=s(Q_);Lhe=n(FPe,"STRONG",{});var _Et=s(Lhe);kyo=r(_Et,"plbart"),_Et.forEach(t),Syo=r(FPe," \u2014 "),EO=n(FPe,"A",{href:!0});var bEt=s(EO);Ryo=r(bEt,"PLBartModel"),bEt.forEach(t),Pyo=r(FPe," (PLBart model)"),FPe.forEach(t),Byo=i(x),W_=n(x,"LI",{});var TPe=s(W_);xhe=n(TPe,"STRONG",{});var vEt=s(xhe);Iyo=r(vEt,"poolformer"),vEt.forEach(t),Nyo=r(TPe," \u2014 "),CO=n(TPe,"A",{href:!0});var FEt=s(CO);qyo=r(FEt,"PoolFormerModel"),FEt.forEach(t),jyo=r(TPe," (PoolFormer model)"),TPe.forEach(t),Dyo=i(x),U_=n(x,"LI",{});var MPe=s(U_);$he=n(MPe,"STRONG",{});var TEt=s($he);Gyo=r(TEt,"prophetnet"),TEt.forEach(t),Oyo=r(MPe," \u2014 "),wO=n(MPe,"A",{href:!0});var MEt=s(wO);Vyo=r(MEt,"ProphetNetModel"),MEt.forEach(t),Xyo=r(MPe," (ProphetNet model)"),MPe.forEach(t),zyo=i(x),H_=n(x,"LI",{});var EPe=s(H_);khe=n(EPe,"STRONG",{});var EEt=s(khe);Qyo=r(EEt,"qdqbert"),EEt.forEach(t),Wyo=r(EPe," \u2014 "),AO=n(EPe,"A",{href:!0});var CEt=s(AO);Uyo=r(CEt,"QDQBertModel"),CEt.forEach(t),Hyo=r(EPe," (QDQBert model)"),EPe.forEach(t),Jyo=i(x),J_=n(x,"LI",{});var CPe=s(J_);She=n(CPe,"STRONG",{});var wEt=s(She);Yyo=r(wEt,"reformer"),wEt.forEach(t),Kyo=r(CPe," \u2014 "),yO=n(CPe,"A",{href:!0});var AEt=s(yO);Zyo=r(AEt,"ReformerModel"),AEt.forEach(t),eLo=r(CPe," (Reformer model)"),CPe.forEach(t),oLo=i(x),Y_=n(x,"LI",{});var wPe=s(Y_);Rhe=n(wPe,"STRONG",{});var yEt=s(Rhe);rLo=r(yEt,"regnet"),yEt.forEach(t),tLo=r(wPe," \u2014 "),LO=n(wPe,"A",{href:!0});var LEt=s(LO);aLo=r(LEt,"RegNetModel"),LEt.forEach(t),nLo=r(wPe," (RegNet model)"),wPe.forEach(t),sLo=i(x),K_=n(x,"LI",{});var APe=s(K_);Phe=n(APe,"STRONG",{});var xEt=s(Phe);lLo=r(xEt,"rembert"),xEt.forEach(t),iLo=r(APe," \u2014 "),xO=n(APe,"A",{href:!0});var $Et=s(xO);dLo=r($Et,"RemBertModel"),$Et.forEach(t),cLo=r(APe," (RemBERT model)"),APe.forEach(t),fLo=i(x),Z_=n(x,"LI",{});var yPe=s(Z_);Bhe=n(yPe,"STRONG",{});var kEt=s(Bhe);mLo=r(kEt,"resnet"),kEt.forEach(t),gLo=r(yPe," \u2014 "),$O=n(yPe,"A",{href:!0});var SEt=s($O);hLo=r(SEt,"ResNetModel"),SEt.forEach(t),pLo=r(yPe," (ResNet model)"),yPe.forEach(t),uLo=i(x),e1=n(x,"LI",{});var LPe=s(e1);Ihe=n(LPe,"STRONG",{});var REt=s(Ihe);_Lo=r(REt,"retribert"),REt.forEach(t),bLo=r(LPe," \u2014 "),kO=n(LPe,"A",{href:!0});var PEt=s(kO);vLo=r(PEt,"RetriBertModel"),PEt.forEach(t),FLo=r(LPe," (RetriBERT model)"),LPe.forEach(t),TLo=i(x),o1=n(x,"LI",{});var xPe=s(o1);Nhe=n(xPe,"STRONG",{});var BEt=s(Nhe);MLo=r(BEt,"roberta"),BEt.forEach(t),ELo=r(xPe," \u2014 "),SO=n(xPe,"A",{href:!0});var IEt=s(SO);CLo=r(IEt,"RobertaModel"),IEt.forEach(t),wLo=r(xPe," (RoBERTa model)"),xPe.forEach(t),ALo=i(x),r1=n(x,"LI",{});var $Pe=s(r1);qhe=n($Pe,"STRONG",{});var NEt=s(qhe);yLo=r(NEt,"roformer"),NEt.forEach(t),LLo=r($Pe," \u2014 "),RO=n($Pe,"A",{href:!0});var qEt=s(RO);xLo=r(qEt,"RoFormerModel"),qEt.forEach(t),$Lo=r($Pe," (RoFormer model)"),$Pe.forEach(t),kLo=i(x),t1=n(x,"LI",{});var kPe=s(t1);jhe=n(kPe,"STRONG",{});var jEt=s(jhe);SLo=r(jEt,"segformer"),jEt.forEach(t),RLo=r(kPe," \u2014 "),PO=n(kPe,"A",{href:!0});var DEt=s(PO);PLo=r(DEt,"SegformerModel"),DEt.forEach(t),BLo=r(kPe," (SegFormer model)"),kPe.forEach(t),ILo=i(x),a1=n(x,"LI",{});var SPe=s(a1);Dhe=n(SPe,"STRONG",{});var GEt=s(Dhe);NLo=r(GEt,"sew"),GEt.forEach(t),qLo=r(SPe," \u2014 "),BO=n(SPe,"A",{href:!0});var OEt=s(BO);jLo=r(OEt,"SEWModel"),OEt.forEach(t),DLo=r(SPe," (SEW model)"),SPe.forEach(t),GLo=i(x),n1=n(x,"LI",{});var RPe=s(n1);Ghe=n(RPe,"STRONG",{});var VEt=s(Ghe);OLo=r(VEt,"sew-d"),VEt.forEach(t),VLo=r(RPe," \u2014 "),IO=n(RPe,"A",{href:!0});var XEt=s(IO);XLo=r(XEt,"SEWDModel"),XEt.forEach(t),zLo=r(RPe," (SEW-D model)"),RPe.forEach(t),QLo=i(x),s1=n(x,"LI",{});var PPe=s(s1);Ohe=n(PPe,"STRONG",{});var zEt=s(Ohe);WLo=r(zEt,"speech_to_text"),zEt.forEach(t),ULo=r(PPe," \u2014 "),NO=n(PPe,"A",{href:!0});var QEt=s(NO);HLo=r(QEt,"Speech2TextModel"),QEt.forEach(t),JLo=r(PPe," (Speech2Text model)"),PPe.forEach(t),YLo=i(x),l1=n(x,"LI",{});var BPe=s(l1);Vhe=n(BPe,"STRONG",{});var WEt=s(Vhe);KLo=r(WEt,"splinter"),WEt.forEach(t),ZLo=r(BPe," \u2014 "),qO=n(BPe,"A",{href:!0});var UEt=s(qO);e9o=r(UEt,"SplinterModel"),UEt.forEach(t),o9o=r(BPe," (Splinter model)"),BPe.forEach(t),r9o=i(x),i1=n(x,"LI",{});var IPe=s(i1);Xhe=n(IPe,"STRONG",{});var HEt=s(Xhe);t9o=r(HEt,"squeezebert"),HEt.forEach(t),a9o=r(IPe," \u2014 "),jO=n(IPe,"A",{href:!0});var JEt=s(jO);n9o=r(JEt,"SqueezeBertModel"),JEt.forEach(t),s9o=r(IPe," (SqueezeBERT model)"),IPe.forEach(t),l9o=i(x),d1=n(x,"LI",{});var NPe=s(d1);zhe=n(NPe,"STRONG",{});var YEt=s(zhe);i9o=r(YEt,"swin"),YEt.forEach(t),d9o=r(NPe," \u2014 "),DO=n(NPe,"A",{href:!0});var KEt=s(DO);c9o=r(KEt,"SwinModel"),KEt.forEach(t),f9o=r(NPe," (Swin Transformer model)"),NPe.forEach(t),m9o=i(x),c1=n(x,"LI",{});var qPe=s(c1);Qhe=n(qPe,"STRONG",{});var ZEt=s(Qhe);g9o=r(ZEt,"swinv2"),ZEt.forEach(t),h9o=r(qPe," \u2014 "),GO=n(qPe,"A",{href:!0});var eCt=s(GO);p9o=r(eCt,"Swinv2Model"),eCt.forEach(t),u9o=r(qPe," (Swin Transformer V2 model)"),qPe.forEach(t),_9o=i(x),f1=n(x,"LI",{});var jPe=s(f1);Whe=n(jPe,"STRONG",{});var oCt=s(Whe);b9o=r(oCt,"t5"),oCt.forEach(t),v9o=r(jPe," \u2014 "),OO=n(jPe,"A",{href:!0});var rCt=s(OO);F9o=r(rCt,"T5Model"),rCt.forEach(t),T9o=r(jPe," (T5 model)"),jPe.forEach(t),M9o=i(x),m1=n(x,"LI",{});var DPe=s(m1);Uhe=n(DPe,"STRONG",{});var tCt=s(Uhe);E9o=r(tCt,"tapas"),tCt.forEach(t),C9o=r(DPe," \u2014 "),VO=n(DPe,"A",{href:!0});var aCt=s(VO);w9o=r(aCt,"TapasModel"),aCt.forEach(t),A9o=r(DPe," (TAPAS model)"),DPe.forEach(t),y9o=i(x),g1=n(x,"LI",{});var GPe=s(g1);Hhe=n(GPe,"STRONG",{});var nCt=s(Hhe);L9o=r(nCt,"trajectory_transformer"),nCt.forEach(t),x9o=r(GPe," \u2014 "),XO=n(GPe,"A",{href:!0});var sCt=s(XO);$9o=r(sCt,"TrajectoryTransformerModel"),sCt.forEach(t),k9o=r(GPe," (Trajectory Transformer model)"),GPe.forEach(t),S9o=i(x),h1=n(x,"LI",{});var OPe=s(h1);Jhe=n(OPe,"STRONG",{});var lCt=s(Jhe);R9o=r(lCt,"transfo-xl"),lCt.forEach(t),P9o=r(OPe," \u2014 "),zO=n(OPe,"A",{href:!0});var iCt=s(zO);B9o=r(iCt,"TransfoXLModel"),iCt.forEach(t),I9o=r(OPe," (Transformer-XL model)"),OPe.forEach(t),N9o=i(x),p1=n(x,"LI",{});var VPe=s(p1);Yhe=n(VPe,"STRONG",{});var dCt=s(Yhe);q9o=r(dCt,"unispeech"),dCt.forEach(t),j9o=r(VPe," \u2014 "),QO=n(VPe,"A",{href:!0});var cCt=s(QO);D9o=r(cCt,"UniSpeechModel"),cCt.forEach(t),G9o=r(VPe," (UniSpeech model)"),VPe.forEach(t),O9o=i(x),u1=n(x,"LI",{});var XPe=s(u1);Khe=n(XPe,"STRONG",{});var fCt=s(Khe);V9o=r(fCt,"unispeech-sat"),fCt.forEach(t),X9o=r(XPe," \u2014 "),WO=n(XPe,"A",{href:!0});var mCt=s(WO);z9o=r(mCt,"UniSpeechSatModel"),mCt.forEach(t),Q9o=r(XPe," (UniSpeechSat model)"),XPe.forEach(t),W9o=i(x),_1=n(x,"LI",{});var zPe=s(_1);Zhe=n(zPe,"STRONG",{});var gCt=s(Zhe);U9o=r(gCt,"van"),gCt.forEach(t),H9o=r(zPe," \u2014 "),UO=n(zPe,"A",{href:!0});var hCt=s(UO);J9o=r(hCt,"VanModel"),hCt.forEach(t),Y9o=r(zPe," (VAN model)"),zPe.forEach(t),K9o=i(x),b1=n(x,"LI",{});var QPe=s(b1);epe=n(QPe,"STRONG",{});var pCt=s(epe);Z9o=r(pCt,"videomae"),pCt.forEach(t),exo=r(QPe," \u2014 "),HO=n(QPe,"A",{href:!0});var uCt=s(HO);oxo=r(uCt,"VideoMAEModel"),uCt.forEach(t),rxo=r(QPe," (VideoMAE model)"),QPe.forEach(t),txo=i(x),v1=n(x,"LI",{});var WPe=s(v1);ope=n(WPe,"STRONG",{});var _Ct=s(ope);axo=r(_Ct,"vilt"),_Ct.forEach(t),nxo=r(WPe," \u2014 "),JO=n(WPe,"A",{href:!0});var bCt=s(JO);sxo=r(bCt,"ViltModel"),bCt.forEach(t),lxo=r(WPe," (ViLT model)"),WPe.forEach(t),ixo=i(x),F1=n(x,"LI",{});var UPe=s(F1);rpe=n(UPe,"STRONG",{});var vCt=s(rpe);dxo=r(vCt,"vision-text-dual-encoder"),vCt.forEach(t),cxo=r(UPe," \u2014 "),YO=n(UPe,"A",{href:!0});var FCt=s(YO);fxo=r(FCt,"VisionTextDualEncoderModel"),FCt.forEach(t),mxo=r(UPe," (VisionTextDualEncoder model)"),UPe.forEach(t),gxo=i(x),T1=n(x,"LI",{});var HPe=s(T1);tpe=n(HPe,"STRONG",{});var TCt=s(tpe);hxo=r(TCt,"visual_bert"),TCt.forEach(t),pxo=r(HPe," \u2014 "),KO=n(HPe,"A",{href:!0});var MCt=s(KO);uxo=r(MCt,"VisualBertModel"),MCt.forEach(t),_xo=r(HPe," (VisualBERT model)"),HPe.forEach(t),bxo=i(x),M1=n(x,"LI",{});var JPe=s(M1);ape=n(JPe,"STRONG",{});var ECt=s(ape);vxo=r(ECt,"vit"),ECt.forEach(t),Fxo=r(JPe," \u2014 "),ZO=n(JPe,"A",{href:!0});var CCt=s(ZO);Txo=r(CCt,"ViTModel"),CCt.forEach(t),Mxo=r(JPe," (ViT model)"),JPe.forEach(t),Exo=i(x),E1=n(x,"LI",{});var YPe=s(E1);npe=n(YPe,"STRONG",{});var wCt=s(npe);Cxo=r(wCt,"vit_mae"),wCt.forEach(t),wxo=r(YPe," \u2014 "),eV=n(YPe,"A",{href:!0});var ACt=s(eV);Axo=r(ACt,"ViTMAEModel"),ACt.forEach(t),yxo=r(YPe," (ViTMAE model)"),YPe.forEach(t),Lxo=i(x),C1=n(x,"LI",{});var KPe=s(C1);spe=n(KPe,"STRONG",{});var yCt=s(spe);xxo=r(yCt,"wav2vec2"),yCt.forEach(t),$xo=r(KPe," \u2014 "),oV=n(KPe,"A",{href:!0});var LCt=s(oV);kxo=r(LCt,"Wav2Vec2Model"),LCt.forEach(t),Sxo=r(KPe," (Wav2Vec2 model)"),KPe.forEach(t),Rxo=i(x),w1=n(x,"LI",{});var ZPe=s(w1);lpe=n(ZPe,"STRONG",{});var xCt=s(lpe);Pxo=r(xCt,"wav2vec2-conformer"),xCt.forEach(t),Bxo=r(ZPe," \u2014 "),rV=n(ZPe,"A",{href:!0});var $Ct=s(rV);Ixo=r($Ct,"Wav2Vec2ConformerModel"),$Ct.forEach(t),Nxo=r(ZPe," (Wav2Vec2-Conformer model)"),ZPe.forEach(t),qxo=i(x),A1=n(x,"LI",{});var eBe=s(A1);ipe=n(eBe,"STRONG",{});var kCt=s(ipe);jxo=r(kCt,"wavlm"),kCt.forEach(t),Dxo=r(eBe," \u2014 "),tV=n(eBe,"A",{href:!0});var SCt=s(tV);Gxo=r(SCt,"WavLMModel"),SCt.forEach(t),Oxo=r(eBe," (WavLM model)"),eBe.forEach(t),Vxo=i(x),y1=n(x,"LI",{});var oBe=s(y1);dpe=n(oBe,"STRONG",{});var RCt=s(dpe);Xxo=r(RCt,"xglm"),RCt.forEach(t),zxo=r(oBe," \u2014 "),aV=n(oBe,"A",{href:!0});var PCt=s(aV);Qxo=r(PCt,"XGLMModel"),PCt.forEach(t),Wxo=r(oBe," (XGLM model)"),oBe.forEach(t),Uxo=i(x),L1=n(x,"LI",{});var rBe=s(L1);cpe=n(rBe,"STRONG",{});var BCt=s(cpe);Hxo=r(BCt,"xlm"),BCt.forEach(t),Jxo=r(rBe," \u2014 "),nV=n(rBe,"A",{href:!0});var ICt=s(nV);Yxo=r(ICt,"XLMModel"),ICt.forEach(t),Kxo=r(rBe," (XLM model)"),rBe.forEach(t),Zxo=i(x),x1=n(x,"LI",{});var tBe=s(x1);fpe=n(tBe,"STRONG",{});var NCt=s(fpe);e$o=r(NCt,"xlm-prophetnet"),NCt.forEach(t),o$o=r(tBe," \u2014 "),sV=n(tBe,"A",{href:!0});var qCt=s(sV);r$o=r(qCt,"XLMProphetNetModel"),qCt.forEach(t),t$o=r(tBe," (XLM-ProphetNet model)"),tBe.forEach(t),a$o=i(x),$1=n(x,"LI",{});var aBe=s($1);mpe=n(aBe,"STRONG",{});var jCt=s(mpe);n$o=r(jCt,"xlm-roberta"),jCt.forEach(t),s$o=r(aBe," \u2014 "),lV=n(aBe,"A",{href:!0});var DCt=s(lV);l$o=r(DCt,"XLMRobertaModel"),DCt.forEach(t),i$o=r(aBe," (XLM-RoBERTa model)"),aBe.forEach(t),d$o=i(x),k1=n(x,"LI",{});var nBe=s(k1);gpe=n(nBe,"STRONG",{});var GCt=s(gpe);c$o=r(GCt,"xlm-roberta-xl"),GCt.forEach(t),f$o=r(nBe," \u2014 "),iV=n(nBe,"A",{href:!0});var OCt=s(iV);m$o=r(OCt,"XLMRobertaXLModel"),OCt.forEach(t),g$o=r(nBe," (XLM-RoBERTa-XL model)"),nBe.forEach(t),h$o=i(x),S1=n(x,"LI",{});var sBe=s(S1);hpe=n(sBe,"STRONG",{});var VCt=s(hpe);p$o=r(VCt,"xlnet"),VCt.forEach(t),u$o=r(sBe," \u2014 "),dV=n(sBe,"A",{href:!0});var XCt=s(dV);_$o=r(XCt,"XLNetModel"),XCt.forEach(t),b$o=r(sBe," (XLNet model)"),sBe.forEach(t),v$o=i(x),R1=n(x,"LI",{});var lBe=s(R1);ppe=n(lBe,"STRONG",{});var zCt=s(ppe);F$o=r(zCt,"yolos"),zCt.forEach(t),T$o=r(lBe," \u2014 "),cV=n(lBe,"A",{href:!0});var QCt=s(cV);M$o=r(QCt,"YolosModel"),QCt.forEach(t),E$o=r(lBe," (YOLOS model)"),lBe.forEach(t),C$o=i(x),P1=n(x,"LI",{});var iBe=s(P1);upe=n(iBe,"STRONG",{});var WCt=s(upe);w$o=r(WCt,"yoso"),WCt.forEach(t),A$o=r(iBe," \u2014 "),fV=n(iBe,"A",{href:!0});var UCt=s(fV);y$o=r(UCt,"YosoModel"),UCt.forEach(t),L$o=r(iBe," (YOSO model)"),iBe.forEach(t),x.forEach(t),x$o=i(ua),B1=n(ua,"P",{});var dBe=s(B1);$$o=r(dBe,"The model is set in evaluation mode by default using "),_pe=n(dBe,"CODE",{});var HCt=s(_pe);k$o=r(HCt,"model.eval()"),HCt.forEach(t),S$o=r(dBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=n(dBe,"CODE",{});var JCt=s(bpe);R$o=r(JCt,"model.train()"),JCt.forEach(t),dBe.forEach(t),P$o=i(ua),T(I1.$$.fragment,ua),ua.forEach(t),vl.forEach(t),UUe=i(f),fd=n(f,"H2",{class:!0});var sYe=s(fd);N1=n(sYe,"A",{id:!0,class:!0,href:!0});var YCt=s(N1);vpe=n(YCt,"SPAN",{});var KCt=s(vpe);T(i9.$$.fragment,KCt),KCt.forEach(t),YCt.forEach(t),B$o=i(sYe),Fpe=n(sYe,"SPAN",{});var ZCt=s(Fpe);I$o=r(ZCt,"AutoModelForPreTraining"),ZCt.forEach(t),sYe.forEach(t),HUe=i(f),Po=n(f,"DIV",{class:!0});var Fl=s(Po);T(d9.$$.fragment,Fl),N$o=i(Fl),md=n(Fl,"P",{});var _ne=s(md);q$o=r(_ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mV=n(_ne,"A",{href:!0});var e3t=s(mV);j$o=r(e3t,"from_pretrained()"),e3t.forEach(t),D$o=r(_ne," class method or the "),gV=n(_ne,"A",{href:!0});var o3t=s(gV);G$o=r(o3t,"from_config()"),o3t.forEach(t),O$o=r(_ne,` class
method.`),_ne.forEach(t),V$o=i(Fl),c9=n(Fl,"P",{});var lYe=s(c9);X$o=r(lYe,"This class cannot be instantiated directly using "),Tpe=n(lYe,"CODE",{});var r3t=s(Tpe);z$o=r(r3t,"__init__()"),r3t.forEach(t),Q$o=r(lYe," (throws an error)."),lYe.forEach(t),W$o=i(Fl),pt=n(Fl,"DIV",{class:!0});var $7=s(pt);T(f9.$$.fragment,$7),U$o=i($7),Mpe=n($7,"P",{});var t3t=s(Mpe);H$o=r(t3t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),t3t.forEach(t),J$o=i($7),gd=n($7,"P",{});var bne=s(gd);Y$o=r(bne,`Note:
Loading a model from its configuration file does `),Epe=n(bne,"STRONG",{});var a3t=s(Epe);K$o=r(a3t,"not"),a3t.forEach(t),Z$o=r(bne,` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=n(bne,"A",{href:!0});var n3t=s(hV);eko=r(n3t,"from_pretrained()"),n3t.forEach(t),oko=r(bne," to load the model weights."),bne.forEach(t),rko=i($7),T(q1.$$.fragment,$7),$7.forEach(t),tko=i(Fl),Ke=n(Fl,"DIV",{class:!0});var _a=s(Ke);T(m9.$$.fragment,_a),ako=i(_a),Cpe=n(_a,"P",{});var s3t=s(Cpe);nko=r(s3t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),s3t.forEach(t),sko=i(_a),Ua=n(_a,"P",{});var k7=s(Ua);lko=r(k7,"The model class to instantiate is selected based on the "),wpe=n(k7,"CODE",{});var l3t=s(wpe);iko=r(l3t,"model_type"),l3t.forEach(t),dko=r(k7,` property of the config object (either
passed as an argument or loaded from `),Ape=n(k7,"CODE",{});var i3t=s(Ape);cko=r(i3t,"pretrained_model_name_or_path"),i3t.forEach(t),fko=r(k7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=n(k7,"CODE",{});var d3t=s(ype);mko=r(d3t,"pretrained_model_name_or_path"),d3t.forEach(t),gko=r(k7,":"),k7.forEach(t),hko=i(_a),G=n(_a,"UL",{});var O=s(G);j1=n(O,"LI",{});var cBe=s(j1);Lpe=n(cBe,"STRONG",{});var c3t=s(Lpe);pko=r(c3t,"albert"),c3t.forEach(t),uko=r(cBe," \u2014 "),pV=n(cBe,"A",{href:!0});var f3t=s(pV);_ko=r(f3t,"AlbertForPreTraining"),f3t.forEach(t),bko=r(cBe," (ALBERT model)"),cBe.forEach(t),vko=i(O),D1=n(O,"LI",{});var fBe=s(D1);xpe=n(fBe,"STRONG",{});var m3t=s(xpe);Fko=r(m3t,"bart"),m3t.forEach(t),Tko=r(fBe," \u2014 "),uV=n(fBe,"A",{href:!0});var g3t=s(uV);Mko=r(g3t,"BartForConditionalGeneration"),g3t.forEach(t),Eko=r(fBe," (BART model)"),fBe.forEach(t),Cko=i(O),G1=n(O,"LI",{});var mBe=s(G1);$pe=n(mBe,"STRONG",{});var h3t=s($pe);wko=r(h3t,"bert"),h3t.forEach(t),Ako=r(mBe," \u2014 "),_V=n(mBe,"A",{href:!0});var p3t=s(_V);yko=r(p3t,"BertForPreTraining"),p3t.forEach(t),Lko=r(mBe," (BERT model)"),mBe.forEach(t),xko=i(O),O1=n(O,"LI",{});var gBe=s(O1);kpe=n(gBe,"STRONG",{});var u3t=s(kpe);$ko=r(u3t,"big_bird"),u3t.forEach(t),kko=r(gBe," \u2014 "),bV=n(gBe,"A",{href:!0});var _3t=s(bV);Sko=r(_3t,"BigBirdForPreTraining"),_3t.forEach(t),Rko=r(gBe," (BigBird model)"),gBe.forEach(t),Pko=i(O),V1=n(O,"LI",{});var hBe=s(V1);Spe=n(hBe,"STRONG",{});var b3t=s(Spe);Bko=r(b3t,"bloom"),b3t.forEach(t),Iko=r(hBe," \u2014 "),vV=n(hBe,"A",{href:!0});var v3t=s(vV);Nko=r(v3t,"BloomForCausalLM"),v3t.forEach(t),qko=r(hBe," (BLOOM model)"),hBe.forEach(t),jko=i(O),X1=n(O,"LI",{});var pBe=s(X1);Rpe=n(pBe,"STRONG",{});var F3t=s(Rpe);Dko=r(F3t,"camembert"),F3t.forEach(t),Gko=r(pBe," \u2014 "),FV=n(pBe,"A",{href:!0});var T3t=s(FV);Oko=r(T3t,"CamembertForMaskedLM"),T3t.forEach(t),Vko=r(pBe," (CamemBERT model)"),pBe.forEach(t),Xko=i(O),z1=n(O,"LI",{});var uBe=s(z1);Ppe=n(uBe,"STRONG",{});var M3t=s(Ppe);zko=r(M3t,"ctrl"),M3t.forEach(t),Qko=r(uBe," \u2014 "),TV=n(uBe,"A",{href:!0});var E3t=s(TV);Wko=r(E3t,"CTRLLMHeadModel"),E3t.forEach(t),Uko=r(uBe," (CTRL model)"),uBe.forEach(t),Hko=i(O),Q1=n(O,"LI",{});var _Be=s(Q1);Bpe=n(_Be,"STRONG",{});var C3t=s(Bpe);Jko=r(C3t,"data2vec-text"),C3t.forEach(t),Yko=r(_Be," \u2014 "),MV=n(_Be,"A",{href:!0});var w3t=s(MV);Kko=r(w3t,"Data2VecTextForMaskedLM"),w3t.forEach(t),Zko=r(_Be," (Data2VecText model)"),_Be.forEach(t),eSo=i(O),W1=n(O,"LI",{});var bBe=s(W1);Ipe=n(bBe,"STRONG",{});var A3t=s(Ipe);oSo=r(A3t,"deberta"),A3t.forEach(t),rSo=r(bBe," \u2014 "),EV=n(bBe,"A",{href:!0});var y3t=s(EV);tSo=r(y3t,"DebertaForMaskedLM"),y3t.forEach(t),aSo=r(bBe," (DeBERTa model)"),bBe.forEach(t),nSo=i(O),U1=n(O,"LI",{});var vBe=s(U1);Npe=n(vBe,"STRONG",{});var L3t=s(Npe);sSo=r(L3t,"deberta-v2"),L3t.forEach(t),lSo=r(vBe," \u2014 "),CV=n(vBe,"A",{href:!0});var x3t=s(CV);iSo=r(x3t,"DebertaV2ForMaskedLM"),x3t.forEach(t),dSo=r(vBe," (DeBERTa-v2 model)"),vBe.forEach(t),cSo=i(O),H1=n(O,"LI",{});var FBe=s(H1);qpe=n(FBe,"STRONG",{});var $3t=s(qpe);fSo=r($3t,"distilbert"),$3t.forEach(t),mSo=r(FBe," \u2014 "),wV=n(FBe,"A",{href:!0});var k3t=s(wV);gSo=r(k3t,"DistilBertForMaskedLM"),k3t.forEach(t),hSo=r(FBe," (DistilBERT model)"),FBe.forEach(t),pSo=i(O),J1=n(O,"LI",{});var TBe=s(J1);jpe=n(TBe,"STRONG",{});var S3t=s(jpe);uSo=r(S3t,"electra"),S3t.forEach(t),_So=r(TBe," \u2014 "),AV=n(TBe,"A",{href:!0});var R3t=s(AV);bSo=r(R3t,"ElectraForPreTraining"),R3t.forEach(t),vSo=r(TBe," (ELECTRA model)"),TBe.forEach(t),FSo=i(O),Y1=n(O,"LI",{});var MBe=s(Y1);Dpe=n(MBe,"STRONG",{});var P3t=s(Dpe);TSo=r(P3t,"flaubert"),P3t.forEach(t),MSo=r(MBe," \u2014 "),yV=n(MBe,"A",{href:!0});var B3t=s(yV);ESo=r(B3t,"FlaubertWithLMHeadModel"),B3t.forEach(t),CSo=r(MBe," (FlauBERT model)"),MBe.forEach(t),wSo=i(O),K1=n(O,"LI",{});var EBe=s(K1);Gpe=n(EBe,"STRONG",{});var I3t=s(Gpe);ASo=r(I3t,"flava"),I3t.forEach(t),ySo=r(EBe," \u2014 "),LV=n(EBe,"A",{href:!0});var N3t=s(LV);LSo=r(N3t,"FlavaForPreTraining"),N3t.forEach(t),xSo=r(EBe," (FLAVA model)"),EBe.forEach(t),$So=i(O),Z1=n(O,"LI",{});var CBe=s(Z1);Ope=n(CBe,"STRONG",{});var q3t=s(Ope);kSo=r(q3t,"fnet"),q3t.forEach(t),SSo=r(CBe," \u2014 "),xV=n(CBe,"A",{href:!0});var j3t=s(xV);RSo=r(j3t,"FNetForPreTraining"),j3t.forEach(t),PSo=r(CBe," (FNet model)"),CBe.forEach(t),BSo=i(O),e4=n(O,"LI",{});var wBe=s(e4);Vpe=n(wBe,"STRONG",{});var D3t=s(Vpe);ISo=r(D3t,"fsmt"),D3t.forEach(t),NSo=r(wBe," \u2014 "),$V=n(wBe,"A",{href:!0});var G3t=s($V);qSo=r(G3t,"FSMTForConditionalGeneration"),G3t.forEach(t),jSo=r(wBe," (FairSeq Machine-Translation model)"),wBe.forEach(t),DSo=i(O),o4=n(O,"LI",{});var ABe=s(o4);Xpe=n(ABe,"STRONG",{});var O3t=s(Xpe);GSo=r(O3t,"funnel"),O3t.forEach(t),OSo=r(ABe," \u2014 "),kV=n(ABe,"A",{href:!0});var V3t=s(kV);VSo=r(V3t,"FunnelForPreTraining"),V3t.forEach(t),XSo=r(ABe," (Funnel Transformer model)"),ABe.forEach(t),zSo=i(O),r4=n(O,"LI",{});var yBe=s(r4);zpe=n(yBe,"STRONG",{});var X3t=s(zpe);QSo=r(X3t,"gpt2"),X3t.forEach(t),WSo=r(yBe," \u2014 "),SV=n(yBe,"A",{href:!0});var z3t=s(SV);USo=r(z3t,"GPT2LMHeadModel"),z3t.forEach(t),HSo=r(yBe," (OpenAI GPT-2 model)"),yBe.forEach(t),JSo=i(O),t4=n(O,"LI",{});var LBe=s(t4);Qpe=n(LBe,"STRONG",{});var Q3t=s(Qpe);YSo=r(Q3t,"ibert"),Q3t.forEach(t),KSo=r(LBe," \u2014 "),RV=n(LBe,"A",{href:!0});var W3t=s(RV);ZSo=r(W3t,"IBertForMaskedLM"),W3t.forEach(t),eRo=r(LBe," (I-BERT model)"),LBe.forEach(t),oRo=i(O),a4=n(O,"LI",{});var xBe=s(a4);Wpe=n(xBe,"STRONG",{});var U3t=s(Wpe);rRo=r(U3t,"layoutlm"),U3t.forEach(t),tRo=r(xBe," \u2014 "),PV=n(xBe,"A",{href:!0});var H3t=s(PV);aRo=r(H3t,"LayoutLMForMaskedLM"),H3t.forEach(t),nRo=r(xBe," (LayoutLM model)"),xBe.forEach(t),sRo=i(O),n4=n(O,"LI",{});var $Be=s(n4);Upe=n($Be,"STRONG",{});var J3t=s(Upe);lRo=r(J3t,"longformer"),J3t.forEach(t),iRo=r($Be," \u2014 "),BV=n($Be,"A",{href:!0});var Y3t=s(BV);dRo=r(Y3t,"LongformerForMaskedLM"),Y3t.forEach(t),cRo=r($Be," (Longformer model)"),$Be.forEach(t),fRo=i(O),s4=n(O,"LI",{});var kBe=s(s4);Hpe=n(kBe,"STRONG",{});var K3t=s(Hpe);mRo=r(K3t,"luke"),K3t.forEach(t),gRo=r(kBe," \u2014 "),IV=n(kBe,"A",{href:!0});var Z3t=s(IV);hRo=r(Z3t,"LukeForMaskedLM"),Z3t.forEach(t),pRo=r(kBe," (LUKE model)"),kBe.forEach(t),uRo=i(O),l4=n(O,"LI",{});var SBe=s(l4);Jpe=n(SBe,"STRONG",{});var e5t=s(Jpe);_Ro=r(e5t,"lxmert"),e5t.forEach(t),bRo=r(SBe," \u2014 "),NV=n(SBe,"A",{href:!0});var o5t=s(NV);vRo=r(o5t,"LxmertForPreTraining"),o5t.forEach(t),FRo=r(SBe," (LXMERT model)"),SBe.forEach(t),TRo=i(O),i4=n(O,"LI",{});var RBe=s(i4);Ype=n(RBe,"STRONG",{});var r5t=s(Ype);MRo=r(r5t,"megatron-bert"),r5t.forEach(t),ERo=r(RBe," \u2014 "),qV=n(RBe,"A",{href:!0});var t5t=s(qV);CRo=r(t5t,"MegatronBertForPreTraining"),t5t.forEach(t),wRo=r(RBe," (Megatron-BERT model)"),RBe.forEach(t),ARo=i(O),d4=n(O,"LI",{});var PBe=s(d4);Kpe=n(PBe,"STRONG",{});var a5t=s(Kpe);yRo=r(a5t,"mobilebert"),a5t.forEach(t),LRo=r(PBe," \u2014 "),jV=n(PBe,"A",{href:!0});var n5t=s(jV);xRo=r(n5t,"MobileBertForPreTraining"),n5t.forEach(t),$Ro=r(PBe," (MobileBERT model)"),PBe.forEach(t),kRo=i(O),c4=n(O,"LI",{});var BBe=s(c4);Zpe=n(BBe,"STRONG",{});var s5t=s(Zpe);SRo=r(s5t,"mpnet"),s5t.forEach(t),RRo=r(BBe," \u2014 "),DV=n(BBe,"A",{href:!0});var l5t=s(DV);PRo=r(l5t,"MPNetForMaskedLM"),l5t.forEach(t),BRo=r(BBe," (MPNet model)"),BBe.forEach(t),IRo=i(O),f4=n(O,"LI",{});var IBe=s(f4);eue=n(IBe,"STRONG",{});var i5t=s(eue);NRo=r(i5t,"mvp"),i5t.forEach(t),qRo=r(IBe," \u2014 "),GV=n(IBe,"A",{href:!0});var d5t=s(GV);jRo=r(d5t,"MvpForConditionalGeneration"),d5t.forEach(t),DRo=r(IBe," (MVP model)"),IBe.forEach(t),GRo=i(O),m4=n(O,"LI",{});var NBe=s(m4);oue=n(NBe,"STRONG",{});var c5t=s(oue);ORo=r(c5t,"nezha"),c5t.forEach(t),VRo=r(NBe," \u2014 "),OV=n(NBe,"A",{href:!0});var f5t=s(OV);XRo=r(f5t,"NezhaForPreTraining"),f5t.forEach(t),zRo=r(NBe," (Nezha model)"),NBe.forEach(t),QRo=i(O),g4=n(O,"LI",{});var qBe=s(g4);rue=n(qBe,"STRONG",{});var m5t=s(rue);WRo=r(m5t,"openai-gpt"),m5t.forEach(t),URo=r(qBe," \u2014 "),VV=n(qBe,"A",{href:!0});var g5t=s(VV);HRo=r(g5t,"OpenAIGPTLMHeadModel"),g5t.forEach(t),JRo=r(qBe," (OpenAI GPT model)"),qBe.forEach(t),YRo=i(O),h4=n(O,"LI",{});var jBe=s(h4);tue=n(jBe,"STRONG",{});var h5t=s(tue);KRo=r(h5t,"retribert"),h5t.forEach(t),ZRo=r(jBe," \u2014 "),XV=n(jBe,"A",{href:!0});var p5t=s(XV);ePo=r(p5t,"RetriBertModel"),p5t.forEach(t),oPo=r(jBe," (RetriBERT model)"),jBe.forEach(t),rPo=i(O),p4=n(O,"LI",{});var DBe=s(p4);aue=n(DBe,"STRONG",{});var u5t=s(aue);tPo=r(u5t,"roberta"),u5t.forEach(t),aPo=r(DBe," \u2014 "),zV=n(DBe,"A",{href:!0});var _5t=s(zV);nPo=r(_5t,"RobertaForMaskedLM"),_5t.forEach(t),sPo=r(DBe," (RoBERTa model)"),DBe.forEach(t),lPo=i(O),u4=n(O,"LI",{});var GBe=s(u4);nue=n(GBe,"STRONG",{});var b5t=s(nue);iPo=r(b5t,"splinter"),b5t.forEach(t),dPo=r(GBe," \u2014 "),QV=n(GBe,"A",{href:!0});var v5t=s(QV);cPo=r(v5t,"SplinterForPreTraining"),v5t.forEach(t),fPo=r(GBe," (Splinter model)"),GBe.forEach(t),mPo=i(O),_4=n(O,"LI",{});var OBe=s(_4);sue=n(OBe,"STRONG",{});var F5t=s(sue);gPo=r(F5t,"squeezebert"),F5t.forEach(t),hPo=r(OBe," \u2014 "),WV=n(OBe,"A",{href:!0});var T5t=s(WV);pPo=r(T5t,"SqueezeBertForMaskedLM"),T5t.forEach(t),uPo=r(OBe," (SqueezeBERT model)"),OBe.forEach(t),_Po=i(O),b4=n(O,"LI",{});var VBe=s(b4);lue=n(VBe,"STRONG",{});var M5t=s(lue);bPo=r(M5t,"t5"),M5t.forEach(t),vPo=r(VBe," \u2014 "),UV=n(VBe,"A",{href:!0});var E5t=s(UV);FPo=r(E5t,"T5ForConditionalGeneration"),E5t.forEach(t),TPo=r(VBe," (T5 model)"),VBe.forEach(t),MPo=i(O),v4=n(O,"LI",{});var XBe=s(v4);iue=n(XBe,"STRONG",{});var C5t=s(iue);EPo=r(C5t,"tapas"),C5t.forEach(t),CPo=r(XBe," \u2014 "),HV=n(XBe,"A",{href:!0});var w5t=s(HV);wPo=r(w5t,"TapasForMaskedLM"),w5t.forEach(t),APo=r(XBe," (TAPAS model)"),XBe.forEach(t),yPo=i(O),F4=n(O,"LI",{});var zBe=s(F4);due=n(zBe,"STRONG",{});var A5t=s(due);LPo=r(A5t,"transfo-xl"),A5t.forEach(t),xPo=r(zBe," \u2014 "),JV=n(zBe,"A",{href:!0});var y5t=s(JV);$Po=r(y5t,"TransfoXLLMHeadModel"),y5t.forEach(t),kPo=r(zBe," (Transformer-XL model)"),zBe.forEach(t),SPo=i(O),T4=n(O,"LI",{});var QBe=s(T4);cue=n(QBe,"STRONG",{});var L5t=s(cue);RPo=r(L5t,"unispeech"),L5t.forEach(t),PPo=r(QBe," \u2014 "),YV=n(QBe,"A",{href:!0});var x5t=s(YV);BPo=r(x5t,"UniSpeechForPreTraining"),x5t.forEach(t),IPo=r(QBe," (UniSpeech model)"),QBe.forEach(t),NPo=i(O),M4=n(O,"LI",{});var WBe=s(M4);fue=n(WBe,"STRONG",{});var $5t=s(fue);qPo=r($5t,"unispeech-sat"),$5t.forEach(t),jPo=r(WBe," \u2014 "),KV=n(WBe,"A",{href:!0});var k5t=s(KV);DPo=r(k5t,"UniSpeechSatForPreTraining"),k5t.forEach(t),GPo=r(WBe," (UniSpeechSat model)"),WBe.forEach(t),OPo=i(O),E4=n(O,"LI",{});var UBe=s(E4);mue=n(UBe,"STRONG",{});var S5t=s(mue);VPo=r(S5t,"videomae"),S5t.forEach(t),XPo=r(UBe," \u2014 "),ZV=n(UBe,"A",{href:!0});var R5t=s(ZV);zPo=r(R5t,"VideoMAEForPreTraining"),R5t.forEach(t),QPo=r(UBe," (VideoMAE model)"),UBe.forEach(t),WPo=i(O),C4=n(O,"LI",{});var HBe=s(C4);gue=n(HBe,"STRONG",{});var P5t=s(gue);UPo=r(P5t,"visual_bert"),P5t.forEach(t),HPo=r(HBe," \u2014 "),eX=n(HBe,"A",{href:!0});var B5t=s(eX);JPo=r(B5t,"VisualBertForPreTraining"),B5t.forEach(t),YPo=r(HBe," (VisualBERT model)"),HBe.forEach(t),KPo=i(O),w4=n(O,"LI",{});var JBe=s(w4);hue=n(JBe,"STRONG",{});var I5t=s(hue);ZPo=r(I5t,"vit_mae"),I5t.forEach(t),eBo=r(JBe," \u2014 "),oX=n(JBe,"A",{href:!0});var N5t=s(oX);oBo=r(N5t,"ViTMAEForPreTraining"),N5t.forEach(t),rBo=r(JBe," (ViTMAE model)"),JBe.forEach(t),tBo=i(O),A4=n(O,"LI",{});var YBe=s(A4);pue=n(YBe,"STRONG",{});var q5t=s(pue);aBo=r(q5t,"wav2vec2"),q5t.forEach(t),nBo=r(YBe," \u2014 "),rX=n(YBe,"A",{href:!0});var j5t=s(rX);sBo=r(j5t,"Wav2Vec2ForPreTraining"),j5t.forEach(t),lBo=r(YBe," (Wav2Vec2 model)"),YBe.forEach(t),iBo=i(O),y4=n(O,"LI",{});var KBe=s(y4);uue=n(KBe,"STRONG",{});var D5t=s(uue);dBo=r(D5t,"wav2vec2-conformer"),D5t.forEach(t),cBo=r(KBe," \u2014 "),tX=n(KBe,"A",{href:!0});var G5t=s(tX);fBo=r(G5t,"Wav2Vec2ConformerForPreTraining"),G5t.forEach(t),mBo=r(KBe," (Wav2Vec2-Conformer model)"),KBe.forEach(t),gBo=i(O),L4=n(O,"LI",{});var ZBe=s(L4);_ue=n(ZBe,"STRONG",{});var O5t=s(_ue);hBo=r(O5t,"xlm"),O5t.forEach(t),pBo=r(ZBe," \u2014 "),aX=n(ZBe,"A",{href:!0});var V5t=s(aX);uBo=r(V5t,"XLMWithLMHeadModel"),V5t.forEach(t),_Bo=r(ZBe," (XLM model)"),ZBe.forEach(t),bBo=i(O),x4=n(O,"LI",{});var eIe=s(x4);bue=n(eIe,"STRONG",{});var X5t=s(bue);vBo=r(X5t,"xlm-roberta"),X5t.forEach(t),FBo=r(eIe," \u2014 "),nX=n(eIe,"A",{href:!0});var z5t=s(nX);TBo=r(z5t,"XLMRobertaForMaskedLM"),z5t.forEach(t),MBo=r(eIe," (XLM-RoBERTa model)"),eIe.forEach(t),EBo=i(O),$4=n(O,"LI",{});var oIe=s($4);vue=n(oIe,"STRONG",{});var Q5t=s(vue);CBo=r(Q5t,"xlm-roberta-xl"),Q5t.forEach(t),wBo=r(oIe," \u2014 "),sX=n(oIe,"A",{href:!0});var W5t=s(sX);ABo=r(W5t,"XLMRobertaXLForMaskedLM"),W5t.forEach(t),yBo=r(oIe," (XLM-RoBERTa-XL model)"),oIe.forEach(t),LBo=i(O),k4=n(O,"LI",{});var rIe=s(k4);Fue=n(rIe,"STRONG",{});var U5t=s(Fue);xBo=r(U5t,"xlnet"),U5t.forEach(t),$Bo=r(rIe," \u2014 "),lX=n(rIe,"A",{href:!0});var H5t=s(lX);kBo=r(H5t,"XLNetLMHeadModel"),H5t.forEach(t),SBo=r(rIe," (XLNet model)"),rIe.forEach(t),O.forEach(t),RBo=i(_a),S4=n(_a,"P",{});var tIe=s(S4);PBo=r(tIe,"The model is set in evaluation mode by default using "),Tue=n(tIe,"CODE",{});var J5t=s(Tue);BBo=r(J5t,"model.eval()"),J5t.forEach(t),IBo=r(tIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mue=n(tIe,"CODE",{});var Y5t=s(Mue);NBo=r(Y5t,"model.train()"),Y5t.forEach(t),tIe.forEach(t),qBo=i(_a),T(R4.$$.fragment,_a),_a.forEach(t),Fl.forEach(t),JUe=i(f),hd=n(f,"H2",{class:!0});var iYe=s(hd);P4=n(iYe,"A",{id:!0,class:!0,href:!0});var K5t=s(P4);Eue=n(K5t,"SPAN",{});var Z5t=s(Eue);T(g9.$$.fragment,Z5t),Z5t.forEach(t),K5t.forEach(t),jBo=i(iYe),Cue=n(iYe,"SPAN",{});var e0t=s(Cue);DBo=r(e0t,"AutoModelForCausalLM"),e0t.forEach(t),iYe.forEach(t),YUe=i(f),Bo=n(f,"DIV",{class:!0});var Tl=s(Bo);T(h9.$$.fragment,Tl),GBo=i(Tl),pd=n(Tl,"P",{});var vne=s(pd);OBo=r(vne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),iX=n(vne,"A",{href:!0});var o0t=s(iX);VBo=r(o0t,"from_pretrained()"),o0t.forEach(t),XBo=r(vne," class method or the "),dX=n(vne,"A",{href:!0});var r0t=s(dX);zBo=r(r0t,"from_config()"),r0t.forEach(t),QBo=r(vne,` class
method.`),vne.forEach(t),WBo=i(Tl),p9=n(Tl,"P",{});var dYe=s(p9);UBo=r(dYe,"This class cannot be instantiated directly using "),wue=n(dYe,"CODE",{});var t0t=s(wue);HBo=r(t0t,"__init__()"),t0t.forEach(t),JBo=r(dYe," (throws an error)."),dYe.forEach(t),YBo=i(Tl),ut=n(Tl,"DIV",{class:!0});var S7=s(ut);T(u9.$$.fragment,S7),KBo=i(S7),Aue=n(S7,"P",{});var a0t=s(Aue);ZBo=r(a0t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),a0t.forEach(t),eIo=i(S7),ud=n(S7,"P",{});var Fne=s(ud);oIo=r(Fne,`Note:
Loading a model from its configuration file does `),yue=n(Fne,"STRONG",{});var n0t=s(yue);rIo=r(n0t,"not"),n0t.forEach(t),tIo=r(Fne,` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=n(Fne,"A",{href:!0});var s0t=s(cX);aIo=r(s0t,"from_pretrained()"),s0t.forEach(t),nIo=r(Fne," to load the model weights."),Fne.forEach(t),sIo=i(S7),T(B4.$$.fragment,S7),S7.forEach(t),lIo=i(Tl),Ze=n(Tl,"DIV",{class:!0});var ba=s(Ze);T(_9.$$.fragment,ba),iIo=i(ba),Lue=n(ba,"P",{});var l0t=s(Lue);dIo=r(l0t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),l0t.forEach(t),cIo=i(ba),Ha=n(ba,"P",{});var R7=s(Ha);fIo=r(R7,"The model class to instantiate is selected based on the "),xue=n(R7,"CODE",{});var i0t=s(xue);mIo=r(i0t,"model_type"),i0t.forEach(t),gIo=r(R7,` property of the config object (either
passed as an argument or loaded from `),$ue=n(R7,"CODE",{});var d0t=s($ue);hIo=r(d0t,"pretrained_model_name_or_path"),d0t.forEach(t),pIo=r(R7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=n(R7,"CODE",{});var c0t=s(kue);uIo=r(c0t,"pretrained_model_name_or_path"),c0t.forEach(t),_Io=r(R7,":"),R7.forEach(t),bIo=i(ba),z=n(ba,"UL",{});var Q=s(z);I4=n(Q,"LI",{});var aIe=s(I4);Sue=n(aIe,"STRONG",{});var f0t=s(Sue);vIo=r(f0t,"bart"),f0t.forEach(t),FIo=r(aIe," \u2014 "),fX=n(aIe,"A",{href:!0});var m0t=s(fX);TIo=r(m0t,"BartForCausalLM"),m0t.forEach(t),MIo=r(aIe," (BART model)"),aIe.forEach(t),EIo=i(Q),N4=n(Q,"LI",{});var nIe=s(N4);Rue=n(nIe,"STRONG",{});var g0t=s(Rue);CIo=r(g0t,"bert"),g0t.forEach(t),wIo=r(nIe," \u2014 "),mX=n(nIe,"A",{href:!0});var h0t=s(mX);AIo=r(h0t,"BertLMHeadModel"),h0t.forEach(t),yIo=r(nIe," (BERT model)"),nIe.forEach(t),LIo=i(Q),q4=n(Q,"LI",{});var sIe=s(q4);Pue=n(sIe,"STRONG",{});var p0t=s(Pue);xIo=r(p0t,"bert-generation"),p0t.forEach(t),$Io=r(sIe," \u2014 "),gX=n(sIe,"A",{href:!0});var u0t=s(gX);kIo=r(u0t,"BertGenerationDecoder"),u0t.forEach(t),SIo=r(sIe," (Bert Generation model)"),sIe.forEach(t),RIo=i(Q),j4=n(Q,"LI",{});var lIe=s(j4);Bue=n(lIe,"STRONG",{});var _0t=s(Bue);PIo=r(_0t,"big_bird"),_0t.forEach(t),BIo=r(lIe," \u2014 "),hX=n(lIe,"A",{href:!0});var b0t=s(hX);IIo=r(b0t,"BigBirdForCausalLM"),b0t.forEach(t),NIo=r(lIe," (BigBird model)"),lIe.forEach(t),qIo=i(Q),D4=n(Q,"LI",{});var iIe=s(D4);Iue=n(iIe,"STRONG",{});var v0t=s(Iue);jIo=r(v0t,"bigbird_pegasus"),v0t.forEach(t),DIo=r(iIe," \u2014 "),pX=n(iIe,"A",{href:!0});var F0t=s(pX);GIo=r(F0t,"BigBirdPegasusForCausalLM"),F0t.forEach(t),OIo=r(iIe," (BigBird-Pegasus model)"),iIe.forEach(t),VIo=i(Q),G4=n(Q,"LI",{});var dIe=s(G4);Nue=n(dIe,"STRONG",{});var T0t=s(Nue);XIo=r(T0t,"blenderbot"),T0t.forEach(t),zIo=r(dIe," \u2014 "),uX=n(dIe,"A",{href:!0});var M0t=s(uX);QIo=r(M0t,"BlenderbotForCausalLM"),M0t.forEach(t),WIo=r(dIe," (Blenderbot model)"),dIe.forEach(t),UIo=i(Q),O4=n(Q,"LI",{});var cIe=s(O4);que=n(cIe,"STRONG",{});var E0t=s(que);HIo=r(E0t,"blenderbot-small"),E0t.forEach(t),JIo=r(cIe," \u2014 "),_X=n(cIe,"A",{href:!0});var C0t=s(_X);YIo=r(C0t,"BlenderbotSmallForCausalLM"),C0t.forEach(t),KIo=r(cIe," (BlenderbotSmall model)"),cIe.forEach(t),ZIo=i(Q),V4=n(Q,"LI",{});var fIe=s(V4);jue=n(fIe,"STRONG",{});var w0t=s(jue);eNo=r(w0t,"bloom"),w0t.forEach(t),oNo=r(fIe," \u2014 "),bX=n(fIe,"A",{href:!0});var A0t=s(bX);rNo=r(A0t,"BloomForCausalLM"),A0t.forEach(t),tNo=r(fIe," (BLOOM model)"),fIe.forEach(t),aNo=i(Q),X4=n(Q,"LI",{});var mIe=s(X4);Due=n(mIe,"STRONG",{});var y0t=s(Due);nNo=r(y0t,"camembert"),y0t.forEach(t),sNo=r(mIe," \u2014 "),vX=n(mIe,"A",{href:!0});var L0t=s(vX);lNo=r(L0t,"CamembertForCausalLM"),L0t.forEach(t),iNo=r(mIe," (CamemBERT model)"),mIe.forEach(t),dNo=i(Q),z4=n(Q,"LI",{});var gIe=s(z4);Gue=n(gIe,"STRONG",{});var x0t=s(Gue);cNo=r(x0t,"codegen"),x0t.forEach(t),fNo=r(gIe," \u2014 "),FX=n(gIe,"A",{href:!0});var $0t=s(FX);mNo=r($0t,"CodeGenForCausalLM"),$0t.forEach(t),gNo=r(gIe," (CodeGen model)"),gIe.forEach(t),hNo=i(Q),Q4=n(Q,"LI",{});var hIe=s(Q4);Oue=n(hIe,"STRONG",{});var k0t=s(Oue);pNo=r(k0t,"ctrl"),k0t.forEach(t),uNo=r(hIe," \u2014 "),TX=n(hIe,"A",{href:!0});var S0t=s(TX);_No=r(S0t,"CTRLLMHeadModel"),S0t.forEach(t),bNo=r(hIe," (CTRL model)"),hIe.forEach(t),vNo=i(Q),W4=n(Q,"LI",{});var pIe=s(W4);Vue=n(pIe,"STRONG",{});var R0t=s(Vue);FNo=r(R0t,"data2vec-text"),R0t.forEach(t),TNo=r(pIe," \u2014 "),MX=n(pIe,"A",{href:!0});var P0t=s(MX);MNo=r(P0t,"Data2VecTextForCausalLM"),P0t.forEach(t),ENo=r(pIe," (Data2VecText model)"),pIe.forEach(t),CNo=i(Q),U4=n(Q,"LI",{});var uIe=s(U4);Xue=n(uIe,"STRONG",{});var B0t=s(Xue);wNo=r(B0t,"electra"),B0t.forEach(t),ANo=r(uIe," \u2014 "),EX=n(uIe,"A",{href:!0});var I0t=s(EX);yNo=r(I0t,"ElectraForCausalLM"),I0t.forEach(t),LNo=r(uIe," (ELECTRA model)"),uIe.forEach(t),xNo=i(Q),H4=n(Q,"LI",{});var _Ie=s(H4);zue=n(_Ie,"STRONG",{});var N0t=s(zue);$No=r(N0t,"gpt2"),N0t.forEach(t),kNo=r(_Ie," \u2014 "),CX=n(_Ie,"A",{href:!0});var q0t=s(CX);SNo=r(q0t,"GPT2LMHeadModel"),q0t.forEach(t),RNo=r(_Ie," (OpenAI GPT-2 model)"),_Ie.forEach(t),PNo=i(Q),J4=n(Q,"LI",{});var bIe=s(J4);Que=n(bIe,"STRONG",{});var j0t=s(Que);BNo=r(j0t,"gpt_neo"),j0t.forEach(t),INo=r(bIe," \u2014 "),wX=n(bIe,"A",{href:!0});var D0t=s(wX);NNo=r(D0t,"GPTNeoForCausalLM"),D0t.forEach(t),qNo=r(bIe," (GPT Neo model)"),bIe.forEach(t),jNo=i(Q),Y4=n(Q,"LI",{});var vIe=s(Y4);Wue=n(vIe,"STRONG",{});var G0t=s(Wue);DNo=r(G0t,"gpt_neox"),G0t.forEach(t),GNo=r(vIe," \u2014 "),AX=n(vIe,"A",{href:!0});var O0t=s(AX);ONo=r(O0t,"GPTNeoXForCausalLM"),O0t.forEach(t),VNo=r(vIe," (GPT NeoX model)"),vIe.forEach(t),XNo=i(Q),K4=n(Q,"LI",{});var FIe=s(K4);Uue=n(FIe,"STRONG",{});var V0t=s(Uue);zNo=r(V0t,"gptj"),V0t.forEach(t),QNo=r(FIe," \u2014 "),yX=n(FIe,"A",{href:!0});var X0t=s(yX);WNo=r(X0t,"GPTJForCausalLM"),X0t.forEach(t),UNo=r(FIe," (GPT-J model)"),FIe.forEach(t),HNo=i(Q),Z4=n(Q,"LI",{});var TIe=s(Z4);Hue=n(TIe,"STRONG",{});var z0t=s(Hue);JNo=r(z0t,"marian"),z0t.forEach(t),YNo=r(TIe," \u2014 "),LX=n(TIe,"A",{href:!0});var Q0t=s(LX);KNo=r(Q0t,"MarianForCausalLM"),Q0t.forEach(t),ZNo=r(TIe," (Marian model)"),TIe.forEach(t),eqo=i(Q),e2=n(Q,"LI",{});var MIe=s(e2);Jue=n(MIe,"STRONG",{});var W0t=s(Jue);oqo=r(W0t,"mbart"),W0t.forEach(t),rqo=r(MIe," \u2014 "),xX=n(MIe,"A",{href:!0});var U0t=s(xX);tqo=r(U0t,"MBartForCausalLM"),U0t.forEach(t),aqo=r(MIe," (mBART model)"),MIe.forEach(t),nqo=i(Q),o2=n(Q,"LI",{});var EIe=s(o2);Yue=n(EIe,"STRONG",{});var H0t=s(Yue);sqo=r(H0t,"megatron-bert"),H0t.forEach(t),lqo=r(EIe," \u2014 "),$X=n(EIe,"A",{href:!0});var J0t=s($X);iqo=r(J0t,"MegatronBertForCausalLM"),J0t.forEach(t),dqo=r(EIe," (Megatron-BERT model)"),EIe.forEach(t),cqo=i(Q),r2=n(Q,"LI",{});var CIe=s(r2);Kue=n(CIe,"STRONG",{});var Y0t=s(Kue);fqo=r(Y0t,"mvp"),Y0t.forEach(t),mqo=r(CIe," \u2014 "),kX=n(CIe,"A",{href:!0});var K0t=s(kX);gqo=r(K0t,"MvpForCausalLM"),K0t.forEach(t),hqo=r(CIe," (MVP model)"),CIe.forEach(t),pqo=i(Q),t2=n(Q,"LI",{});var wIe=s(t2);Zue=n(wIe,"STRONG",{});var Z0t=s(Zue);uqo=r(Z0t,"openai-gpt"),Z0t.forEach(t),_qo=r(wIe," \u2014 "),SX=n(wIe,"A",{href:!0});var ewt=s(SX);bqo=r(ewt,"OpenAIGPTLMHeadModel"),ewt.forEach(t),vqo=r(wIe," (OpenAI GPT model)"),wIe.forEach(t),Fqo=i(Q),a2=n(Q,"LI",{});var AIe=s(a2);e_e=n(AIe,"STRONG",{});var owt=s(e_e);Tqo=r(owt,"opt"),owt.forEach(t),Mqo=r(AIe," \u2014 "),RX=n(AIe,"A",{href:!0});var rwt=s(RX);Eqo=r(rwt,"OPTForCausalLM"),rwt.forEach(t),Cqo=r(AIe," (OPT model)"),AIe.forEach(t),wqo=i(Q),n2=n(Q,"LI",{});var yIe=s(n2);o_e=n(yIe,"STRONG",{});var twt=s(o_e);Aqo=r(twt,"pegasus"),twt.forEach(t),yqo=r(yIe," \u2014 "),PX=n(yIe,"A",{href:!0});var awt=s(PX);Lqo=r(awt,"PegasusForCausalLM"),awt.forEach(t),xqo=r(yIe," (Pegasus model)"),yIe.forEach(t),$qo=i(Q),s2=n(Q,"LI",{});var LIe=s(s2);r_e=n(LIe,"STRONG",{});var nwt=s(r_e);kqo=r(nwt,"plbart"),nwt.forEach(t),Sqo=r(LIe," \u2014 "),BX=n(LIe,"A",{href:!0});var swt=s(BX);Rqo=r(swt,"PLBartForCausalLM"),swt.forEach(t),Pqo=r(LIe," (PLBart model)"),LIe.forEach(t),Bqo=i(Q),l2=n(Q,"LI",{});var xIe=s(l2);t_e=n(xIe,"STRONG",{});var lwt=s(t_e);Iqo=r(lwt,"prophetnet"),lwt.forEach(t),Nqo=r(xIe," \u2014 "),IX=n(xIe,"A",{href:!0});var iwt=s(IX);qqo=r(iwt,"ProphetNetForCausalLM"),iwt.forEach(t),jqo=r(xIe," (ProphetNet model)"),xIe.forEach(t),Dqo=i(Q),i2=n(Q,"LI",{});var $Ie=s(i2);a_e=n($Ie,"STRONG",{});var dwt=s(a_e);Gqo=r(dwt,"qdqbert"),dwt.forEach(t),Oqo=r($Ie," \u2014 "),NX=n($Ie,"A",{href:!0});var cwt=s(NX);Vqo=r(cwt,"QDQBertLMHeadModel"),cwt.forEach(t),Xqo=r($Ie," (QDQBert model)"),$Ie.forEach(t),zqo=i(Q),d2=n(Q,"LI",{});var kIe=s(d2);n_e=n(kIe,"STRONG",{});var fwt=s(n_e);Qqo=r(fwt,"reformer"),fwt.forEach(t),Wqo=r(kIe," \u2014 "),qX=n(kIe,"A",{href:!0});var mwt=s(qX);Uqo=r(mwt,"ReformerModelWithLMHead"),mwt.forEach(t),Hqo=r(kIe," (Reformer model)"),kIe.forEach(t),Jqo=i(Q),c2=n(Q,"LI",{});var SIe=s(c2);s_e=n(SIe,"STRONG",{});var gwt=s(s_e);Yqo=r(gwt,"rembert"),gwt.forEach(t),Kqo=r(SIe," \u2014 "),jX=n(SIe,"A",{href:!0});var hwt=s(jX);Zqo=r(hwt,"RemBertForCausalLM"),hwt.forEach(t),ejo=r(SIe," (RemBERT model)"),SIe.forEach(t),ojo=i(Q),f2=n(Q,"LI",{});var RIe=s(f2);l_e=n(RIe,"STRONG",{});var pwt=s(l_e);rjo=r(pwt,"roberta"),pwt.forEach(t),tjo=r(RIe," \u2014 "),DX=n(RIe,"A",{href:!0});var uwt=s(DX);ajo=r(uwt,"RobertaForCausalLM"),uwt.forEach(t),njo=r(RIe," (RoBERTa model)"),RIe.forEach(t),sjo=i(Q),m2=n(Q,"LI",{});var PIe=s(m2);i_e=n(PIe,"STRONG",{});var _wt=s(i_e);ljo=r(_wt,"roformer"),_wt.forEach(t),ijo=r(PIe," \u2014 "),GX=n(PIe,"A",{href:!0});var bwt=s(GX);djo=r(bwt,"RoFormerForCausalLM"),bwt.forEach(t),cjo=r(PIe," (RoFormer model)"),PIe.forEach(t),fjo=i(Q),g2=n(Q,"LI",{});var BIe=s(g2);d_e=n(BIe,"STRONG",{});var vwt=s(d_e);mjo=r(vwt,"speech_to_text_2"),vwt.forEach(t),gjo=r(BIe," \u2014 "),OX=n(BIe,"A",{href:!0});var Fwt=s(OX);hjo=r(Fwt,"Speech2Text2ForCausalLM"),Fwt.forEach(t),pjo=r(BIe," (Speech2Text2 model)"),BIe.forEach(t),ujo=i(Q),h2=n(Q,"LI",{});var IIe=s(h2);c_e=n(IIe,"STRONG",{});var Twt=s(c_e);_jo=r(Twt,"transfo-xl"),Twt.forEach(t),bjo=r(IIe," \u2014 "),VX=n(IIe,"A",{href:!0});var Mwt=s(VX);vjo=r(Mwt,"TransfoXLLMHeadModel"),Mwt.forEach(t),Fjo=r(IIe," (Transformer-XL model)"),IIe.forEach(t),Tjo=i(Q),p2=n(Q,"LI",{});var NIe=s(p2);f_e=n(NIe,"STRONG",{});var Ewt=s(f_e);Mjo=r(Ewt,"trocr"),Ewt.forEach(t),Ejo=r(NIe," \u2014 "),XX=n(NIe,"A",{href:!0});var Cwt=s(XX);Cjo=r(Cwt,"TrOCRForCausalLM"),Cwt.forEach(t),wjo=r(NIe," (TrOCR model)"),NIe.forEach(t),Ajo=i(Q),u2=n(Q,"LI",{});var qIe=s(u2);m_e=n(qIe,"STRONG",{});var wwt=s(m_e);yjo=r(wwt,"xglm"),wwt.forEach(t),Ljo=r(qIe," \u2014 "),zX=n(qIe,"A",{href:!0});var Awt=s(zX);xjo=r(Awt,"XGLMForCausalLM"),Awt.forEach(t),$jo=r(qIe," (XGLM model)"),qIe.forEach(t),kjo=i(Q),_2=n(Q,"LI",{});var jIe=s(_2);g_e=n(jIe,"STRONG",{});var ywt=s(g_e);Sjo=r(ywt,"xlm"),ywt.forEach(t),Rjo=r(jIe," \u2014 "),QX=n(jIe,"A",{href:!0});var Lwt=s(QX);Pjo=r(Lwt,"XLMWithLMHeadModel"),Lwt.forEach(t),Bjo=r(jIe," (XLM model)"),jIe.forEach(t),Ijo=i(Q),b2=n(Q,"LI",{});var DIe=s(b2);h_e=n(DIe,"STRONG",{});var xwt=s(h_e);Njo=r(xwt,"xlm-prophetnet"),xwt.forEach(t),qjo=r(DIe," \u2014 "),WX=n(DIe,"A",{href:!0});var $wt=s(WX);jjo=r($wt,"XLMProphetNetForCausalLM"),$wt.forEach(t),Djo=r(DIe," (XLM-ProphetNet model)"),DIe.forEach(t),Gjo=i(Q),v2=n(Q,"LI",{});var GIe=s(v2);p_e=n(GIe,"STRONG",{});var kwt=s(p_e);Ojo=r(kwt,"xlm-roberta"),kwt.forEach(t),Vjo=r(GIe," \u2014 "),UX=n(GIe,"A",{href:!0});var Swt=s(UX);Xjo=r(Swt,"XLMRobertaForCausalLM"),Swt.forEach(t),zjo=r(GIe," (XLM-RoBERTa model)"),GIe.forEach(t),Qjo=i(Q),F2=n(Q,"LI",{});var OIe=s(F2);u_e=n(OIe,"STRONG",{});var Rwt=s(u_e);Wjo=r(Rwt,"xlm-roberta-xl"),Rwt.forEach(t),Ujo=r(OIe," \u2014 "),HX=n(OIe,"A",{href:!0});var Pwt=s(HX);Hjo=r(Pwt,"XLMRobertaXLForCausalLM"),Pwt.forEach(t),Jjo=r(OIe," (XLM-RoBERTa-XL model)"),OIe.forEach(t),Yjo=i(Q),T2=n(Q,"LI",{});var VIe=s(T2);__e=n(VIe,"STRONG",{});var Bwt=s(__e);Kjo=r(Bwt,"xlnet"),Bwt.forEach(t),Zjo=r(VIe," \u2014 "),JX=n(VIe,"A",{href:!0});var Iwt=s(JX);eDo=r(Iwt,"XLNetLMHeadModel"),Iwt.forEach(t),oDo=r(VIe," (XLNet model)"),VIe.forEach(t),Q.forEach(t),rDo=i(ba),M2=n(ba,"P",{});var XIe=s(M2);tDo=r(XIe,"The model is set in evaluation mode by default using "),b_e=n(XIe,"CODE",{});var Nwt=s(b_e);aDo=r(Nwt,"model.eval()"),Nwt.forEach(t),nDo=r(XIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v_e=n(XIe,"CODE",{});var qwt=s(v_e);sDo=r(qwt,"model.train()"),qwt.forEach(t),XIe.forEach(t),lDo=i(ba),T(E2.$$.fragment,ba),ba.forEach(t),Tl.forEach(t),KUe=i(f),_d=n(f,"H2",{class:!0});var cYe=s(_d);C2=n(cYe,"A",{id:!0,class:!0,href:!0});var jwt=s(C2);F_e=n(jwt,"SPAN",{});var Dwt=s(F_e);T(b9.$$.fragment,Dwt),Dwt.forEach(t),jwt.forEach(t),iDo=i(cYe),T_e=n(cYe,"SPAN",{});var Gwt=s(T_e);dDo=r(Gwt,"AutoModelForMaskedLM"),Gwt.forEach(t),cYe.forEach(t),ZUe=i(f),Io=n(f,"DIV",{class:!0});var Ml=s(Io);T(v9.$$.fragment,Ml),cDo=i(Ml),bd=n(Ml,"P",{});var Tne=s(bd);fDo=r(Tne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),YX=n(Tne,"A",{href:!0});var Owt=s(YX);mDo=r(Owt,"from_pretrained()"),Owt.forEach(t),gDo=r(Tne," class method or the "),KX=n(Tne,"A",{href:!0});var Vwt=s(KX);hDo=r(Vwt,"from_config()"),Vwt.forEach(t),pDo=r(Tne,` class
method.`),Tne.forEach(t),uDo=i(Ml),F9=n(Ml,"P",{});var fYe=s(F9);_Do=r(fYe,"This class cannot be instantiated directly using "),M_e=n(fYe,"CODE",{});var Xwt=s(M_e);bDo=r(Xwt,"__init__()"),Xwt.forEach(t),vDo=r(fYe," (throws an error)."),fYe.forEach(t),FDo=i(Ml),_t=n(Ml,"DIV",{class:!0});var P7=s(_t);T(T9.$$.fragment,P7),TDo=i(P7),E_e=n(P7,"P",{});var zwt=s(E_e);MDo=r(zwt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zwt.forEach(t),EDo=i(P7),vd=n(P7,"P",{});var Mne=s(vd);CDo=r(Mne,`Note:
Loading a model from its configuration file does `),C_e=n(Mne,"STRONG",{});var Qwt=s(C_e);wDo=r(Qwt,"not"),Qwt.forEach(t),ADo=r(Mne,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(Mne,"A",{href:!0});var Wwt=s(ZX);yDo=r(Wwt,"from_pretrained()"),Wwt.forEach(t),LDo=r(Mne," to load the model weights."),Mne.forEach(t),xDo=i(P7),T(w2.$$.fragment,P7),P7.forEach(t),$Do=i(Ml),eo=n(Ml,"DIV",{class:!0});var va=s(eo);T(M9.$$.fragment,va),kDo=i(va),w_e=n(va,"P",{});var Uwt=s(w_e);SDo=r(Uwt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Uwt.forEach(t),RDo=i(va),Ja=n(va,"P",{});var B7=s(Ja);PDo=r(B7,"The model class to instantiate is selected based on the "),A_e=n(B7,"CODE",{});var Hwt=s(A_e);BDo=r(Hwt,"model_type"),Hwt.forEach(t),IDo=r(B7,` property of the config object (either
passed as an argument or loaded from `),y_e=n(B7,"CODE",{});var Jwt=s(y_e);NDo=r(Jwt,"pretrained_model_name_or_path"),Jwt.forEach(t),qDo=r(B7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L_e=n(B7,"CODE",{});var Ywt=s(L_e);jDo=r(Ywt,"pretrained_model_name_or_path"),Ywt.forEach(t),DDo=r(B7,":"),B7.forEach(t),GDo=i(va),U=n(va,"UL",{});var Y=s(U);A2=n(Y,"LI",{});var zIe=s(A2);x_e=n(zIe,"STRONG",{});var Kwt=s(x_e);ODo=r(Kwt,"albert"),Kwt.forEach(t),VDo=r(zIe," \u2014 "),ez=n(zIe,"A",{href:!0});var Zwt=s(ez);XDo=r(Zwt,"AlbertForMaskedLM"),Zwt.forEach(t),zDo=r(zIe," (ALBERT model)"),zIe.forEach(t),QDo=i(Y),y2=n(Y,"LI",{});var QIe=s(y2);$_e=n(QIe,"STRONG",{});var eAt=s($_e);WDo=r(eAt,"bart"),eAt.forEach(t),UDo=r(QIe," \u2014 "),oz=n(QIe,"A",{href:!0});var oAt=s(oz);HDo=r(oAt,"BartForConditionalGeneration"),oAt.forEach(t),JDo=r(QIe," (BART model)"),QIe.forEach(t),YDo=i(Y),L2=n(Y,"LI",{});var WIe=s(L2);k_e=n(WIe,"STRONG",{});var rAt=s(k_e);KDo=r(rAt,"bert"),rAt.forEach(t),ZDo=r(WIe," \u2014 "),rz=n(WIe,"A",{href:!0});var tAt=s(rz);eGo=r(tAt,"BertForMaskedLM"),tAt.forEach(t),oGo=r(WIe," (BERT model)"),WIe.forEach(t),rGo=i(Y),x2=n(Y,"LI",{});var UIe=s(x2);S_e=n(UIe,"STRONG",{});var aAt=s(S_e);tGo=r(aAt,"big_bird"),aAt.forEach(t),aGo=r(UIe," \u2014 "),tz=n(UIe,"A",{href:!0});var nAt=s(tz);nGo=r(nAt,"BigBirdForMaskedLM"),nAt.forEach(t),sGo=r(UIe," (BigBird model)"),UIe.forEach(t),lGo=i(Y),$2=n(Y,"LI",{});var HIe=s($2);R_e=n(HIe,"STRONG",{});var sAt=s(R_e);iGo=r(sAt,"camembert"),sAt.forEach(t),dGo=r(HIe," \u2014 "),az=n(HIe,"A",{href:!0});var lAt=s(az);cGo=r(lAt,"CamembertForMaskedLM"),lAt.forEach(t),fGo=r(HIe," (CamemBERT model)"),HIe.forEach(t),mGo=i(Y),k2=n(Y,"LI",{});var JIe=s(k2);P_e=n(JIe,"STRONG",{});var iAt=s(P_e);gGo=r(iAt,"convbert"),iAt.forEach(t),hGo=r(JIe," \u2014 "),nz=n(JIe,"A",{href:!0});var dAt=s(nz);pGo=r(dAt,"ConvBertForMaskedLM"),dAt.forEach(t),uGo=r(JIe," (ConvBERT model)"),JIe.forEach(t),_Go=i(Y),S2=n(Y,"LI",{});var YIe=s(S2);B_e=n(YIe,"STRONG",{});var cAt=s(B_e);bGo=r(cAt,"data2vec-text"),cAt.forEach(t),vGo=r(YIe," \u2014 "),sz=n(YIe,"A",{href:!0});var fAt=s(sz);FGo=r(fAt,"Data2VecTextForMaskedLM"),fAt.forEach(t),TGo=r(YIe," (Data2VecText model)"),YIe.forEach(t),MGo=i(Y),R2=n(Y,"LI",{});var KIe=s(R2);I_e=n(KIe,"STRONG",{});var mAt=s(I_e);EGo=r(mAt,"deberta"),mAt.forEach(t),CGo=r(KIe," \u2014 "),lz=n(KIe,"A",{href:!0});var gAt=s(lz);wGo=r(gAt,"DebertaForMaskedLM"),gAt.forEach(t),AGo=r(KIe," (DeBERTa model)"),KIe.forEach(t),yGo=i(Y),P2=n(Y,"LI",{});var ZIe=s(P2);N_e=n(ZIe,"STRONG",{});var hAt=s(N_e);LGo=r(hAt,"deberta-v2"),hAt.forEach(t),xGo=r(ZIe," \u2014 "),iz=n(ZIe,"A",{href:!0});var pAt=s(iz);$Go=r(pAt,"DebertaV2ForMaskedLM"),pAt.forEach(t),kGo=r(ZIe," (DeBERTa-v2 model)"),ZIe.forEach(t),SGo=i(Y),B2=n(Y,"LI",{});var eNe=s(B2);q_e=n(eNe,"STRONG",{});var uAt=s(q_e);RGo=r(uAt,"distilbert"),uAt.forEach(t),PGo=r(eNe," \u2014 "),dz=n(eNe,"A",{href:!0});var _At=s(dz);BGo=r(_At,"DistilBertForMaskedLM"),_At.forEach(t),IGo=r(eNe," (DistilBERT model)"),eNe.forEach(t),NGo=i(Y),I2=n(Y,"LI",{});var oNe=s(I2);j_e=n(oNe,"STRONG",{});var bAt=s(j_e);qGo=r(bAt,"electra"),bAt.forEach(t),jGo=r(oNe," \u2014 "),cz=n(oNe,"A",{href:!0});var vAt=s(cz);DGo=r(vAt,"ElectraForMaskedLM"),vAt.forEach(t),GGo=r(oNe," (ELECTRA model)"),oNe.forEach(t),OGo=i(Y),N2=n(Y,"LI",{});var rNe=s(N2);D_e=n(rNe,"STRONG",{});var FAt=s(D_e);VGo=r(FAt,"flaubert"),FAt.forEach(t),XGo=r(rNe," \u2014 "),fz=n(rNe,"A",{href:!0});var TAt=s(fz);zGo=r(TAt,"FlaubertWithLMHeadModel"),TAt.forEach(t),QGo=r(rNe," (FlauBERT model)"),rNe.forEach(t),WGo=i(Y),q2=n(Y,"LI",{});var tNe=s(q2);G_e=n(tNe,"STRONG",{});var MAt=s(G_e);UGo=r(MAt,"fnet"),MAt.forEach(t),HGo=r(tNe," \u2014 "),mz=n(tNe,"A",{href:!0});var EAt=s(mz);JGo=r(EAt,"FNetForMaskedLM"),EAt.forEach(t),YGo=r(tNe," (FNet model)"),tNe.forEach(t),KGo=i(Y),j2=n(Y,"LI",{});var aNe=s(j2);O_e=n(aNe,"STRONG",{});var CAt=s(O_e);ZGo=r(CAt,"funnel"),CAt.forEach(t),eOo=r(aNe," \u2014 "),gz=n(aNe,"A",{href:!0});var wAt=s(gz);oOo=r(wAt,"FunnelForMaskedLM"),wAt.forEach(t),rOo=r(aNe," (Funnel Transformer model)"),aNe.forEach(t),tOo=i(Y),D2=n(Y,"LI",{});var nNe=s(D2);V_e=n(nNe,"STRONG",{});var AAt=s(V_e);aOo=r(AAt,"ibert"),AAt.forEach(t),nOo=r(nNe," \u2014 "),hz=n(nNe,"A",{href:!0});var yAt=s(hz);sOo=r(yAt,"IBertForMaskedLM"),yAt.forEach(t),lOo=r(nNe," (I-BERT model)"),nNe.forEach(t),iOo=i(Y),G2=n(Y,"LI",{});var sNe=s(G2);X_e=n(sNe,"STRONG",{});var LAt=s(X_e);dOo=r(LAt,"layoutlm"),LAt.forEach(t),cOo=r(sNe," \u2014 "),pz=n(sNe,"A",{href:!0});var xAt=s(pz);fOo=r(xAt,"LayoutLMForMaskedLM"),xAt.forEach(t),mOo=r(sNe," (LayoutLM model)"),sNe.forEach(t),gOo=i(Y),O2=n(Y,"LI",{});var lNe=s(O2);z_e=n(lNe,"STRONG",{});var $At=s(z_e);hOo=r($At,"longformer"),$At.forEach(t),pOo=r(lNe," \u2014 "),uz=n(lNe,"A",{href:!0});var kAt=s(uz);uOo=r(kAt,"LongformerForMaskedLM"),kAt.forEach(t),_Oo=r(lNe," (Longformer model)"),lNe.forEach(t),bOo=i(Y),V2=n(Y,"LI",{});var iNe=s(V2);Q_e=n(iNe,"STRONG",{});var SAt=s(Q_e);vOo=r(SAt,"luke"),SAt.forEach(t),FOo=r(iNe," \u2014 "),_z=n(iNe,"A",{href:!0});var RAt=s(_z);TOo=r(RAt,"LukeForMaskedLM"),RAt.forEach(t),MOo=r(iNe," (LUKE model)"),iNe.forEach(t),EOo=i(Y),X2=n(Y,"LI",{});var dNe=s(X2);W_e=n(dNe,"STRONG",{});var PAt=s(W_e);COo=r(PAt,"mbart"),PAt.forEach(t),wOo=r(dNe," \u2014 "),bz=n(dNe,"A",{href:!0});var BAt=s(bz);AOo=r(BAt,"MBartForConditionalGeneration"),BAt.forEach(t),yOo=r(dNe," (mBART model)"),dNe.forEach(t),LOo=i(Y),z2=n(Y,"LI",{});var cNe=s(z2);U_e=n(cNe,"STRONG",{});var IAt=s(U_e);xOo=r(IAt,"megatron-bert"),IAt.forEach(t),$Oo=r(cNe," \u2014 "),vz=n(cNe,"A",{href:!0});var NAt=s(vz);kOo=r(NAt,"MegatronBertForMaskedLM"),NAt.forEach(t),SOo=r(cNe," (Megatron-BERT model)"),cNe.forEach(t),ROo=i(Y),Q2=n(Y,"LI",{});var fNe=s(Q2);H_e=n(fNe,"STRONG",{});var qAt=s(H_e);POo=r(qAt,"mobilebert"),qAt.forEach(t),BOo=r(fNe," \u2014 "),Fz=n(fNe,"A",{href:!0});var jAt=s(Fz);IOo=r(jAt,"MobileBertForMaskedLM"),jAt.forEach(t),NOo=r(fNe," (MobileBERT model)"),fNe.forEach(t),qOo=i(Y),W2=n(Y,"LI",{});var mNe=s(W2);J_e=n(mNe,"STRONG",{});var DAt=s(J_e);jOo=r(DAt,"mpnet"),DAt.forEach(t),DOo=r(mNe," \u2014 "),Tz=n(mNe,"A",{href:!0});var GAt=s(Tz);GOo=r(GAt,"MPNetForMaskedLM"),GAt.forEach(t),OOo=r(mNe," (MPNet model)"),mNe.forEach(t),VOo=i(Y),U2=n(Y,"LI",{});var gNe=s(U2);Y_e=n(gNe,"STRONG",{});var OAt=s(Y_e);XOo=r(OAt,"mvp"),OAt.forEach(t),zOo=r(gNe," \u2014 "),Mz=n(gNe,"A",{href:!0});var VAt=s(Mz);QOo=r(VAt,"MvpForConditionalGeneration"),VAt.forEach(t),WOo=r(gNe," (MVP model)"),gNe.forEach(t),UOo=i(Y),H2=n(Y,"LI",{});var hNe=s(H2);K_e=n(hNe,"STRONG",{});var XAt=s(K_e);HOo=r(XAt,"nezha"),XAt.forEach(t),JOo=r(hNe," \u2014 "),Ez=n(hNe,"A",{href:!0});var zAt=s(Ez);YOo=r(zAt,"NezhaForMaskedLM"),zAt.forEach(t),KOo=r(hNe," (Nezha model)"),hNe.forEach(t),ZOo=i(Y),J2=n(Y,"LI",{});var pNe=s(J2);Z_e=n(pNe,"STRONG",{});var QAt=s(Z_e);eVo=r(QAt,"nystromformer"),QAt.forEach(t),oVo=r(pNe," \u2014 "),Cz=n(pNe,"A",{href:!0});var WAt=s(Cz);rVo=r(WAt,"NystromformerForMaskedLM"),WAt.forEach(t),tVo=r(pNe," (Nystr\xF6mformer model)"),pNe.forEach(t),aVo=i(Y),Y2=n(Y,"LI",{});var uNe=s(Y2);e1e=n(uNe,"STRONG",{});var UAt=s(e1e);nVo=r(UAt,"perceiver"),UAt.forEach(t),sVo=r(uNe," \u2014 "),wz=n(uNe,"A",{href:!0});var HAt=s(wz);lVo=r(HAt,"PerceiverForMaskedLM"),HAt.forEach(t),iVo=r(uNe," (Perceiver model)"),uNe.forEach(t),dVo=i(Y),K2=n(Y,"LI",{});var _Ne=s(K2);o1e=n(_Ne,"STRONG",{});var JAt=s(o1e);cVo=r(JAt,"qdqbert"),JAt.forEach(t),fVo=r(_Ne," \u2014 "),Az=n(_Ne,"A",{href:!0});var YAt=s(Az);mVo=r(YAt,"QDQBertForMaskedLM"),YAt.forEach(t),gVo=r(_Ne," (QDQBert model)"),_Ne.forEach(t),hVo=i(Y),Z2=n(Y,"LI",{});var bNe=s(Z2);r1e=n(bNe,"STRONG",{});var KAt=s(r1e);pVo=r(KAt,"reformer"),KAt.forEach(t),uVo=r(bNe," \u2014 "),yz=n(bNe,"A",{href:!0});var ZAt=s(yz);_Vo=r(ZAt,"ReformerForMaskedLM"),ZAt.forEach(t),bVo=r(bNe," (Reformer model)"),bNe.forEach(t),vVo=i(Y),eb=n(Y,"LI",{});var vNe=s(eb);t1e=n(vNe,"STRONG",{});var e6t=s(t1e);FVo=r(e6t,"rembert"),e6t.forEach(t),TVo=r(vNe," \u2014 "),Lz=n(vNe,"A",{href:!0});var o6t=s(Lz);MVo=r(o6t,"RemBertForMaskedLM"),o6t.forEach(t),EVo=r(vNe," (RemBERT model)"),vNe.forEach(t),CVo=i(Y),ob=n(Y,"LI",{});var FNe=s(ob);a1e=n(FNe,"STRONG",{});var r6t=s(a1e);wVo=r(r6t,"roberta"),r6t.forEach(t),AVo=r(FNe," \u2014 "),xz=n(FNe,"A",{href:!0});var t6t=s(xz);yVo=r(t6t,"RobertaForMaskedLM"),t6t.forEach(t),LVo=r(FNe," (RoBERTa model)"),FNe.forEach(t),xVo=i(Y),rb=n(Y,"LI",{});var TNe=s(rb);n1e=n(TNe,"STRONG",{});var a6t=s(n1e);$Vo=r(a6t,"roformer"),a6t.forEach(t),kVo=r(TNe," \u2014 "),$z=n(TNe,"A",{href:!0});var n6t=s($z);SVo=r(n6t,"RoFormerForMaskedLM"),n6t.forEach(t),RVo=r(TNe," (RoFormer model)"),TNe.forEach(t),PVo=i(Y),tb=n(Y,"LI",{});var MNe=s(tb);s1e=n(MNe,"STRONG",{});var s6t=s(s1e);BVo=r(s6t,"squeezebert"),s6t.forEach(t),IVo=r(MNe," \u2014 "),kz=n(MNe,"A",{href:!0});var l6t=s(kz);NVo=r(l6t,"SqueezeBertForMaskedLM"),l6t.forEach(t),qVo=r(MNe," (SqueezeBERT model)"),MNe.forEach(t),jVo=i(Y),ab=n(Y,"LI",{});var ENe=s(ab);l1e=n(ENe,"STRONG",{});var i6t=s(l1e);DVo=r(i6t,"tapas"),i6t.forEach(t),GVo=r(ENe," \u2014 "),Sz=n(ENe,"A",{href:!0});var d6t=s(Sz);OVo=r(d6t,"TapasForMaskedLM"),d6t.forEach(t),VVo=r(ENe," (TAPAS model)"),ENe.forEach(t),XVo=i(Y),nb=n(Y,"LI",{});var CNe=s(nb);i1e=n(CNe,"STRONG",{});var c6t=s(i1e);zVo=r(c6t,"wav2vec2"),c6t.forEach(t),QVo=r(CNe," \u2014 "),d1e=n(CNe,"CODE",{});var f6t=s(d1e);WVo=r(f6t,"Wav2Vec2ForMaskedLM"),f6t.forEach(t),UVo=r(CNe," (Wav2Vec2 model)"),CNe.forEach(t),HVo=i(Y),sb=n(Y,"LI",{});var wNe=s(sb);c1e=n(wNe,"STRONG",{});var m6t=s(c1e);JVo=r(m6t,"xlm"),m6t.forEach(t),YVo=r(wNe," \u2014 "),Rz=n(wNe,"A",{href:!0});var g6t=s(Rz);KVo=r(g6t,"XLMWithLMHeadModel"),g6t.forEach(t),ZVo=r(wNe," (XLM model)"),wNe.forEach(t),eXo=i(Y),lb=n(Y,"LI",{});var ANe=s(lb);f1e=n(ANe,"STRONG",{});var h6t=s(f1e);oXo=r(h6t,"xlm-roberta"),h6t.forEach(t),rXo=r(ANe," \u2014 "),Pz=n(ANe,"A",{href:!0});var p6t=s(Pz);tXo=r(p6t,"XLMRobertaForMaskedLM"),p6t.forEach(t),aXo=r(ANe," (XLM-RoBERTa model)"),ANe.forEach(t),nXo=i(Y),ib=n(Y,"LI",{});var yNe=s(ib);m1e=n(yNe,"STRONG",{});var u6t=s(m1e);sXo=r(u6t,"xlm-roberta-xl"),u6t.forEach(t),lXo=r(yNe," \u2014 "),Bz=n(yNe,"A",{href:!0});var _6t=s(Bz);iXo=r(_6t,"XLMRobertaXLForMaskedLM"),_6t.forEach(t),dXo=r(yNe," (XLM-RoBERTa-XL model)"),yNe.forEach(t),cXo=i(Y),db=n(Y,"LI",{});var LNe=s(db);g1e=n(LNe,"STRONG",{});var b6t=s(g1e);fXo=r(b6t,"yoso"),b6t.forEach(t),mXo=r(LNe," \u2014 "),Iz=n(LNe,"A",{href:!0});var v6t=s(Iz);gXo=r(v6t,"YosoForMaskedLM"),v6t.forEach(t),hXo=r(LNe," (YOSO model)"),LNe.forEach(t),Y.forEach(t),pXo=i(va),cb=n(va,"P",{});var xNe=s(cb);uXo=r(xNe,"The model is set in evaluation mode by default using "),h1e=n(xNe,"CODE",{});var F6t=s(h1e);_Xo=r(F6t,"model.eval()"),F6t.forEach(t),bXo=r(xNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p1e=n(xNe,"CODE",{});var T6t=s(p1e);vXo=r(T6t,"model.train()"),T6t.forEach(t),xNe.forEach(t),FXo=i(va),T(fb.$$.fragment,va),va.forEach(t),Ml.forEach(t),eHe=i(f),Fd=n(f,"H2",{class:!0});var mYe=s(Fd);mb=n(mYe,"A",{id:!0,class:!0,href:!0});var M6t=s(mb);u1e=n(M6t,"SPAN",{});var E6t=s(u1e);T(E9.$$.fragment,E6t),E6t.forEach(t),M6t.forEach(t),TXo=i(mYe),_1e=n(mYe,"SPAN",{});var C6t=s(_1e);MXo=r(C6t,"AutoModelForSeq2SeqLM"),C6t.forEach(t),mYe.forEach(t),oHe=i(f),No=n(f,"DIV",{class:!0});var El=s(No);T(C9.$$.fragment,El),EXo=i(El),Td=n(El,"P",{});var Ene=s(Td);CXo=r(Ene,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Nz=n(Ene,"A",{href:!0});var w6t=s(Nz);wXo=r(w6t,"from_pretrained()"),w6t.forEach(t),AXo=r(Ene," class method or the "),qz=n(Ene,"A",{href:!0});var A6t=s(qz);yXo=r(A6t,"from_config()"),A6t.forEach(t),LXo=r(Ene,` class
method.`),Ene.forEach(t),xXo=i(El),w9=n(El,"P",{});var gYe=s(w9);$Xo=r(gYe,"This class cannot be instantiated directly using "),b1e=n(gYe,"CODE",{});var y6t=s(b1e);kXo=r(y6t,"__init__()"),y6t.forEach(t),SXo=r(gYe," (throws an error)."),gYe.forEach(t),RXo=i(El),bt=n(El,"DIV",{class:!0});var I7=s(bt);T(A9.$$.fragment,I7),PXo=i(I7),v1e=n(I7,"P",{});var L6t=s(v1e);BXo=r(L6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),L6t.forEach(t),IXo=i(I7),Md=n(I7,"P",{});var Cne=s(Md);NXo=r(Cne,`Note:
Loading a model from its configuration file does `),F1e=n(Cne,"STRONG",{});var x6t=s(F1e);qXo=r(x6t,"not"),x6t.forEach(t),jXo=r(Cne,` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=n(Cne,"A",{href:!0});var $6t=s(jz);DXo=r($6t,"from_pretrained()"),$6t.forEach(t),GXo=r(Cne," to load the model weights."),Cne.forEach(t),OXo=i(I7),T(gb.$$.fragment,I7),I7.forEach(t),VXo=i(El),oo=n(El,"DIV",{class:!0});var Fa=s(oo);T(y9.$$.fragment,Fa),XXo=i(Fa),T1e=n(Fa,"P",{});var k6t=s(T1e);zXo=r(k6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),k6t.forEach(t),QXo=i(Fa),Ya=n(Fa,"P",{});var N7=s(Ya);WXo=r(N7,"The model class to instantiate is selected based on the "),M1e=n(N7,"CODE",{});var S6t=s(M1e);UXo=r(S6t,"model_type"),S6t.forEach(t),HXo=r(N7,` property of the config object (either
passed as an argument or loaded from `),E1e=n(N7,"CODE",{});var R6t=s(E1e);JXo=r(R6t,"pretrained_model_name_or_path"),R6t.forEach(t),YXo=r(N7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=n(N7,"CODE",{});var P6t=s(C1e);KXo=r(P6t,"pretrained_model_name_or_path"),P6t.forEach(t),ZXo=r(N7,":"),N7.forEach(t),ezo=i(Fa),me=n(Fa,"UL",{});var _e=s(me);hb=n(_e,"LI",{});var $Ne=s(hb);w1e=n($Ne,"STRONG",{});var B6t=s(w1e);ozo=r(B6t,"bart"),B6t.forEach(t),rzo=r($Ne," \u2014 "),Dz=n($Ne,"A",{href:!0});var I6t=s(Dz);tzo=r(I6t,"BartForConditionalGeneration"),I6t.forEach(t),azo=r($Ne," (BART model)"),$Ne.forEach(t),nzo=i(_e),pb=n(_e,"LI",{});var kNe=s(pb);A1e=n(kNe,"STRONG",{});var N6t=s(A1e);szo=r(N6t,"bigbird_pegasus"),N6t.forEach(t),lzo=r(kNe," \u2014 "),Gz=n(kNe,"A",{href:!0});var q6t=s(Gz);izo=r(q6t,"BigBirdPegasusForConditionalGeneration"),q6t.forEach(t),dzo=r(kNe," (BigBird-Pegasus model)"),kNe.forEach(t),czo=i(_e),ub=n(_e,"LI",{});var SNe=s(ub);y1e=n(SNe,"STRONG",{});var j6t=s(y1e);fzo=r(j6t,"blenderbot"),j6t.forEach(t),mzo=r(SNe," \u2014 "),Oz=n(SNe,"A",{href:!0});var D6t=s(Oz);gzo=r(D6t,"BlenderbotForConditionalGeneration"),D6t.forEach(t),hzo=r(SNe," (Blenderbot model)"),SNe.forEach(t),pzo=i(_e),_b=n(_e,"LI",{});var RNe=s(_b);L1e=n(RNe,"STRONG",{});var G6t=s(L1e);uzo=r(G6t,"blenderbot-small"),G6t.forEach(t),_zo=r(RNe," \u2014 "),Vz=n(RNe,"A",{href:!0});var O6t=s(Vz);bzo=r(O6t,"BlenderbotSmallForConditionalGeneration"),O6t.forEach(t),vzo=r(RNe," (BlenderbotSmall model)"),RNe.forEach(t),Fzo=i(_e),bb=n(_e,"LI",{});var PNe=s(bb);x1e=n(PNe,"STRONG",{});var V6t=s(x1e);Tzo=r(V6t,"encoder-decoder"),V6t.forEach(t),Mzo=r(PNe," \u2014 "),Xz=n(PNe,"A",{href:!0});var X6t=s(Xz);Ezo=r(X6t,"EncoderDecoderModel"),X6t.forEach(t),Czo=r(PNe," (Encoder decoder model)"),PNe.forEach(t),wzo=i(_e),vb=n(_e,"LI",{});var BNe=s(vb);$1e=n(BNe,"STRONG",{});var z6t=s($1e);Azo=r(z6t,"fsmt"),z6t.forEach(t),yzo=r(BNe," \u2014 "),zz=n(BNe,"A",{href:!0});var Q6t=s(zz);Lzo=r(Q6t,"FSMTForConditionalGeneration"),Q6t.forEach(t),xzo=r(BNe," (FairSeq Machine-Translation model)"),BNe.forEach(t),$zo=i(_e),Fb=n(_e,"LI",{});var INe=s(Fb);k1e=n(INe,"STRONG",{});var W6t=s(k1e);kzo=r(W6t,"led"),W6t.forEach(t),Szo=r(INe," \u2014 "),Qz=n(INe,"A",{href:!0});var U6t=s(Qz);Rzo=r(U6t,"LEDForConditionalGeneration"),U6t.forEach(t),Pzo=r(INe," (LED model)"),INe.forEach(t),Bzo=i(_e),Tb=n(_e,"LI",{});var NNe=s(Tb);S1e=n(NNe,"STRONG",{});var H6t=s(S1e);Izo=r(H6t,"longt5"),H6t.forEach(t),Nzo=r(NNe," \u2014 "),Wz=n(NNe,"A",{href:!0});var J6t=s(Wz);qzo=r(J6t,"LongT5ForConditionalGeneration"),J6t.forEach(t),jzo=r(NNe," (LongT5 model)"),NNe.forEach(t),Dzo=i(_e),Mb=n(_e,"LI",{});var qNe=s(Mb);R1e=n(qNe,"STRONG",{});var Y6t=s(R1e);Gzo=r(Y6t,"m2m_100"),Y6t.forEach(t),Ozo=r(qNe," \u2014 "),Uz=n(qNe,"A",{href:!0});var K6t=s(Uz);Vzo=r(K6t,"M2M100ForConditionalGeneration"),K6t.forEach(t),Xzo=r(qNe," (M2M100 model)"),qNe.forEach(t),zzo=i(_e),Eb=n(_e,"LI",{});var jNe=s(Eb);P1e=n(jNe,"STRONG",{});var Z6t=s(P1e);Qzo=r(Z6t,"marian"),Z6t.forEach(t),Wzo=r(jNe," \u2014 "),Hz=n(jNe,"A",{href:!0});var e7t=s(Hz);Uzo=r(e7t,"MarianMTModel"),e7t.forEach(t),Hzo=r(jNe," (Marian model)"),jNe.forEach(t),Jzo=i(_e),Cb=n(_e,"LI",{});var DNe=s(Cb);B1e=n(DNe,"STRONG",{});var o7t=s(B1e);Yzo=r(o7t,"mbart"),o7t.forEach(t),Kzo=r(DNe," \u2014 "),Jz=n(DNe,"A",{href:!0});var r7t=s(Jz);Zzo=r(r7t,"MBartForConditionalGeneration"),r7t.forEach(t),eQo=r(DNe," (mBART model)"),DNe.forEach(t),oQo=i(_e),wb=n(_e,"LI",{});var GNe=s(wb);I1e=n(GNe,"STRONG",{});var t7t=s(I1e);rQo=r(t7t,"mt5"),t7t.forEach(t),tQo=r(GNe," \u2014 "),Yz=n(GNe,"A",{href:!0});var a7t=s(Yz);aQo=r(a7t,"MT5ForConditionalGeneration"),a7t.forEach(t),nQo=r(GNe," (MT5 model)"),GNe.forEach(t),sQo=i(_e),Ab=n(_e,"LI",{});var ONe=s(Ab);N1e=n(ONe,"STRONG",{});var n7t=s(N1e);lQo=r(n7t,"mvp"),n7t.forEach(t),iQo=r(ONe," \u2014 "),Kz=n(ONe,"A",{href:!0});var s7t=s(Kz);dQo=r(s7t,"MvpForConditionalGeneration"),s7t.forEach(t),cQo=r(ONe," (MVP model)"),ONe.forEach(t),fQo=i(_e),yb=n(_e,"LI",{});var VNe=s(yb);q1e=n(VNe,"STRONG",{});var l7t=s(q1e);mQo=r(l7t,"nllb"),l7t.forEach(t),gQo=r(VNe," \u2014 "),Zz=n(VNe,"A",{href:!0});var i7t=s(Zz);hQo=r(i7t,"M2M100ForConditionalGeneration"),i7t.forEach(t),pQo=r(VNe," (NLLB model)"),VNe.forEach(t),uQo=i(_e),Lb=n(_e,"LI",{});var XNe=s(Lb);j1e=n(XNe,"STRONG",{});var d7t=s(j1e);_Qo=r(d7t,"pegasus"),d7t.forEach(t),bQo=r(XNe," \u2014 "),eQ=n(XNe,"A",{href:!0});var c7t=s(eQ);vQo=r(c7t,"PegasusForConditionalGeneration"),c7t.forEach(t),FQo=r(XNe," (Pegasus model)"),XNe.forEach(t),TQo=i(_e),xb=n(_e,"LI",{});var zNe=s(xb);D1e=n(zNe,"STRONG",{});var f7t=s(D1e);MQo=r(f7t,"plbart"),f7t.forEach(t),EQo=r(zNe," \u2014 "),oQ=n(zNe,"A",{href:!0});var m7t=s(oQ);CQo=r(m7t,"PLBartForConditionalGeneration"),m7t.forEach(t),wQo=r(zNe," (PLBart model)"),zNe.forEach(t),AQo=i(_e),$b=n(_e,"LI",{});var QNe=s($b);G1e=n(QNe,"STRONG",{});var g7t=s(G1e);yQo=r(g7t,"prophetnet"),g7t.forEach(t),LQo=r(QNe," \u2014 "),rQ=n(QNe,"A",{href:!0});var h7t=s(rQ);xQo=r(h7t,"ProphetNetForConditionalGeneration"),h7t.forEach(t),$Qo=r(QNe," (ProphetNet model)"),QNe.forEach(t),kQo=i(_e),kb=n(_e,"LI",{});var WNe=s(kb);O1e=n(WNe,"STRONG",{});var p7t=s(O1e);SQo=r(p7t,"t5"),p7t.forEach(t),RQo=r(WNe," \u2014 "),tQ=n(WNe,"A",{href:!0});var u7t=s(tQ);PQo=r(u7t,"T5ForConditionalGeneration"),u7t.forEach(t),BQo=r(WNe," (T5 model)"),WNe.forEach(t),IQo=i(_e),Sb=n(_e,"LI",{});var UNe=s(Sb);V1e=n(UNe,"STRONG",{});var _7t=s(V1e);NQo=r(_7t,"xlm-prophetnet"),_7t.forEach(t),qQo=r(UNe," \u2014 "),aQ=n(UNe,"A",{href:!0});var b7t=s(aQ);jQo=r(b7t,"XLMProphetNetForConditionalGeneration"),b7t.forEach(t),DQo=r(UNe," (XLM-ProphetNet model)"),UNe.forEach(t),_e.forEach(t),GQo=i(Fa),Rb=n(Fa,"P",{});var HNe=s(Rb);OQo=r(HNe,"The model is set in evaluation mode by default using "),X1e=n(HNe,"CODE",{});var v7t=s(X1e);VQo=r(v7t,"model.eval()"),v7t.forEach(t),XQo=r(HNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=n(HNe,"CODE",{});var F7t=s(z1e);zQo=r(F7t,"model.train()"),F7t.forEach(t),HNe.forEach(t),QQo=i(Fa),T(Pb.$$.fragment,Fa),Fa.forEach(t),El.forEach(t),rHe=i(f),Ed=n(f,"H2",{class:!0});var hYe=s(Ed);Bb=n(hYe,"A",{id:!0,class:!0,href:!0});var T7t=s(Bb);Q1e=n(T7t,"SPAN",{});var M7t=s(Q1e);T(L9.$$.fragment,M7t),M7t.forEach(t),T7t.forEach(t),WQo=i(hYe),W1e=n(hYe,"SPAN",{});var E7t=s(W1e);UQo=r(E7t,"AutoModelForSequenceClassification"),E7t.forEach(t),hYe.forEach(t),tHe=i(f),qo=n(f,"DIV",{class:!0});var Cl=s(qo);T(x9.$$.fragment,Cl),HQo=i(Cl),Cd=n(Cl,"P",{});var wne=s(Cd);JQo=r(wne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nQ=n(wne,"A",{href:!0});var C7t=s(nQ);YQo=r(C7t,"from_pretrained()"),C7t.forEach(t),KQo=r(wne," class method or the "),sQ=n(wne,"A",{href:!0});var w7t=s(sQ);ZQo=r(w7t,"from_config()"),w7t.forEach(t),eWo=r(wne,` class
method.`),wne.forEach(t),oWo=i(Cl),$9=n(Cl,"P",{});var pYe=s($9);rWo=r(pYe,"This class cannot be instantiated directly using "),U1e=n(pYe,"CODE",{});var A7t=s(U1e);tWo=r(A7t,"__init__()"),A7t.forEach(t),aWo=r(pYe," (throws an error)."),pYe.forEach(t),nWo=i(Cl),vt=n(Cl,"DIV",{class:!0});var q7=s(vt);T(k9.$$.fragment,q7),sWo=i(q7),H1e=n(q7,"P",{});var y7t=s(H1e);lWo=r(y7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),y7t.forEach(t),iWo=i(q7),wd=n(q7,"P",{});var Ane=s(wd);dWo=r(Ane,`Note:
Loading a model from its configuration file does `),J1e=n(Ane,"STRONG",{});var L7t=s(J1e);cWo=r(L7t,"not"),L7t.forEach(t),fWo=r(Ane,` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=n(Ane,"A",{href:!0});var x7t=s(lQ);mWo=r(x7t,"from_pretrained()"),x7t.forEach(t),gWo=r(Ane," to load the model weights."),Ane.forEach(t),hWo=i(q7),T(Ib.$$.fragment,q7),q7.forEach(t),pWo=i(Cl),ro=n(Cl,"DIV",{class:!0});var Ta=s(ro);T(S9.$$.fragment,Ta),uWo=i(Ta),Y1e=n(Ta,"P",{});var $7t=s(Y1e);_Wo=r($7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$7t.forEach(t),bWo=i(Ta),Ka=n(Ta,"P",{});var j7=s(Ka);vWo=r(j7,"The model class to instantiate is selected based on the "),K1e=n(j7,"CODE",{});var k7t=s(K1e);FWo=r(k7t,"model_type"),k7t.forEach(t),TWo=r(j7,` property of the config object (either
passed as an argument or loaded from `),Z1e=n(j7,"CODE",{});var S7t=s(Z1e);MWo=r(S7t,"pretrained_model_name_or_path"),S7t.forEach(t),EWo=r(j7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e4e=n(j7,"CODE",{});var R7t=s(e4e);CWo=r(R7t,"pretrained_model_name_or_path"),R7t.forEach(t),wWo=r(j7,":"),j7.forEach(t),AWo=i(Ta),N=n(Ta,"UL",{});var j=s(N);Nb=n(j,"LI",{});var JNe=s(Nb);o4e=n(JNe,"STRONG",{});var P7t=s(o4e);yWo=r(P7t,"albert"),P7t.forEach(t),LWo=r(JNe," \u2014 "),iQ=n(JNe,"A",{href:!0});var B7t=s(iQ);xWo=r(B7t,"AlbertForSequenceClassification"),B7t.forEach(t),$Wo=r(JNe," (ALBERT model)"),JNe.forEach(t),kWo=i(j),qb=n(j,"LI",{});var YNe=s(qb);r4e=n(YNe,"STRONG",{});var I7t=s(r4e);SWo=r(I7t,"bart"),I7t.forEach(t),RWo=r(YNe," \u2014 "),dQ=n(YNe,"A",{href:!0});var N7t=s(dQ);PWo=r(N7t,"BartForSequenceClassification"),N7t.forEach(t),BWo=r(YNe," (BART model)"),YNe.forEach(t),IWo=i(j),jb=n(j,"LI",{});var KNe=s(jb);t4e=n(KNe,"STRONG",{});var q7t=s(t4e);NWo=r(q7t,"bert"),q7t.forEach(t),qWo=r(KNe," \u2014 "),cQ=n(KNe,"A",{href:!0});var j7t=s(cQ);jWo=r(j7t,"BertForSequenceClassification"),j7t.forEach(t),DWo=r(KNe," (BERT model)"),KNe.forEach(t),GWo=i(j),Db=n(j,"LI",{});var ZNe=s(Db);a4e=n(ZNe,"STRONG",{});var D7t=s(a4e);OWo=r(D7t,"big_bird"),D7t.forEach(t),VWo=r(ZNe," \u2014 "),fQ=n(ZNe,"A",{href:!0});var G7t=s(fQ);XWo=r(G7t,"BigBirdForSequenceClassification"),G7t.forEach(t),zWo=r(ZNe," (BigBird model)"),ZNe.forEach(t),QWo=i(j),Gb=n(j,"LI",{});var eqe=s(Gb);n4e=n(eqe,"STRONG",{});var O7t=s(n4e);WWo=r(O7t,"bigbird_pegasus"),O7t.forEach(t),UWo=r(eqe," \u2014 "),mQ=n(eqe,"A",{href:!0});var V7t=s(mQ);HWo=r(V7t,"BigBirdPegasusForSequenceClassification"),V7t.forEach(t),JWo=r(eqe," (BigBird-Pegasus model)"),eqe.forEach(t),YWo=i(j),Ob=n(j,"LI",{});var oqe=s(Ob);s4e=n(oqe,"STRONG",{});var X7t=s(s4e);KWo=r(X7t,"bloom"),X7t.forEach(t),ZWo=r(oqe," \u2014 "),gQ=n(oqe,"A",{href:!0});var z7t=s(gQ);eUo=r(z7t,"BloomForSequenceClassification"),z7t.forEach(t),oUo=r(oqe," (BLOOM model)"),oqe.forEach(t),rUo=i(j),Vb=n(j,"LI",{});var rqe=s(Vb);l4e=n(rqe,"STRONG",{});var Q7t=s(l4e);tUo=r(Q7t,"camembert"),Q7t.forEach(t),aUo=r(rqe," \u2014 "),hQ=n(rqe,"A",{href:!0});var W7t=s(hQ);nUo=r(W7t,"CamembertForSequenceClassification"),W7t.forEach(t),sUo=r(rqe," (CamemBERT model)"),rqe.forEach(t),lUo=i(j),Xb=n(j,"LI",{});var tqe=s(Xb);i4e=n(tqe,"STRONG",{});var U7t=s(i4e);iUo=r(U7t,"canine"),U7t.forEach(t),dUo=r(tqe," \u2014 "),pQ=n(tqe,"A",{href:!0});var H7t=s(pQ);cUo=r(H7t,"CanineForSequenceClassification"),H7t.forEach(t),fUo=r(tqe," (CANINE model)"),tqe.forEach(t),mUo=i(j),zb=n(j,"LI",{});var aqe=s(zb);d4e=n(aqe,"STRONG",{});var J7t=s(d4e);gUo=r(J7t,"convbert"),J7t.forEach(t),hUo=r(aqe," \u2014 "),uQ=n(aqe,"A",{href:!0});var Y7t=s(uQ);pUo=r(Y7t,"ConvBertForSequenceClassification"),Y7t.forEach(t),uUo=r(aqe," (ConvBERT model)"),aqe.forEach(t),_Uo=i(j),Qb=n(j,"LI",{});var nqe=s(Qb);c4e=n(nqe,"STRONG",{});var K7t=s(c4e);bUo=r(K7t,"ctrl"),K7t.forEach(t),vUo=r(nqe," \u2014 "),_Q=n(nqe,"A",{href:!0});var Z7t=s(_Q);FUo=r(Z7t,"CTRLForSequenceClassification"),Z7t.forEach(t),TUo=r(nqe," (CTRL model)"),nqe.forEach(t),MUo=i(j),Wb=n(j,"LI",{});var sqe=s(Wb);f4e=n(sqe,"STRONG",{});var eyt=s(f4e);EUo=r(eyt,"data2vec-text"),eyt.forEach(t),CUo=r(sqe," \u2014 "),bQ=n(sqe,"A",{href:!0});var oyt=s(bQ);wUo=r(oyt,"Data2VecTextForSequenceClassification"),oyt.forEach(t),AUo=r(sqe," (Data2VecText model)"),sqe.forEach(t),yUo=i(j),Ub=n(j,"LI",{});var lqe=s(Ub);m4e=n(lqe,"STRONG",{});var ryt=s(m4e);LUo=r(ryt,"deberta"),ryt.forEach(t),xUo=r(lqe," \u2014 "),vQ=n(lqe,"A",{href:!0});var tyt=s(vQ);$Uo=r(tyt,"DebertaForSequenceClassification"),tyt.forEach(t),kUo=r(lqe," (DeBERTa model)"),lqe.forEach(t),SUo=i(j),Hb=n(j,"LI",{});var iqe=s(Hb);g4e=n(iqe,"STRONG",{});var ayt=s(g4e);RUo=r(ayt,"deberta-v2"),ayt.forEach(t),PUo=r(iqe," \u2014 "),FQ=n(iqe,"A",{href:!0});var nyt=s(FQ);BUo=r(nyt,"DebertaV2ForSequenceClassification"),nyt.forEach(t),IUo=r(iqe," (DeBERTa-v2 model)"),iqe.forEach(t),NUo=i(j),Jb=n(j,"LI",{});var dqe=s(Jb);h4e=n(dqe,"STRONG",{});var syt=s(h4e);qUo=r(syt,"distilbert"),syt.forEach(t),jUo=r(dqe," \u2014 "),TQ=n(dqe,"A",{href:!0});var lyt=s(TQ);DUo=r(lyt,"DistilBertForSequenceClassification"),lyt.forEach(t),GUo=r(dqe," (DistilBERT model)"),dqe.forEach(t),OUo=i(j),Yb=n(j,"LI",{});var cqe=s(Yb);p4e=n(cqe,"STRONG",{});var iyt=s(p4e);VUo=r(iyt,"electra"),iyt.forEach(t),XUo=r(cqe," \u2014 "),MQ=n(cqe,"A",{href:!0});var dyt=s(MQ);zUo=r(dyt,"ElectraForSequenceClassification"),dyt.forEach(t),QUo=r(cqe," (ELECTRA model)"),cqe.forEach(t),WUo=i(j),Kb=n(j,"LI",{});var fqe=s(Kb);u4e=n(fqe,"STRONG",{});var cyt=s(u4e);UUo=r(cyt,"flaubert"),cyt.forEach(t),HUo=r(fqe," \u2014 "),EQ=n(fqe,"A",{href:!0});var fyt=s(EQ);JUo=r(fyt,"FlaubertForSequenceClassification"),fyt.forEach(t),YUo=r(fqe," (FlauBERT model)"),fqe.forEach(t),KUo=i(j),Zb=n(j,"LI",{});var mqe=s(Zb);_4e=n(mqe,"STRONG",{});var myt=s(_4e);ZUo=r(myt,"fnet"),myt.forEach(t),eHo=r(mqe," \u2014 "),CQ=n(mqe,"A",{href:!0});var gyt=s(CQ);oHo=r(gyt,"FNetForSequenceClassification"),gyt.forEach(t),rHo=r(mqe," (FNet model)"),mqe.forEach(t),tHo=i(j),ev=n(j,"LI",{});var gqe=s(ev);b4e=n(gqe,"STRONG",{});var hyt=s(b4e);aHo=r(hyt,"funnel"),hyt.forEach(t),nHo=r(gqe," \u2014 "),wQ=n(gqe,"A",{href:!0});var pyt=s(wQ);sHo=r(pyt,"FunnelForSequenceClassification"),pyt.forEach(t),lHo=r(gqe," (Funnel Transformer model)"),gqe.forEach(t),iHo=i(j),ov=n(j,"LI",{});var hqe=s(ov);v4e=n(hqe,"STRONG",{});var uyt=s(v4e);dHo=r(uyt,"gpt2"),uyt.forEach(t),cHo=r(hqe," \u2014 "),AQ=n(hqe,"A",{href:!0});var _yt=s(AQ);fHo=r(_yt,"GPT2ForSequenceClassification"),_yt.forEach(t),mHo=r(hqe," (OpenAI GPT-2 model)"),hqe.forEach(t),gHo=i(j),rv=n(j,"LI",{});var pqe=s(rv);F4e=n(pqe,"STRONG",{});var byt=s(F4e);hHo=r(byt,"gpt_neo"),byt.forEach(t),pHo=r(pqe," \u2014 "),yQ=n(pqe,"A",{href:!0});var vyt=s(yQ);uHo=r(vyt,"GPTNeoForSequenceClassification"),vyt.forEach(t),_Ho=r(pqe," (GPT Neo model)"),pqe.forEach(t),bHo=i(j),tv=n(j,"LI",{});var uqe=s(tv);T4e=n(uqe,"STRONG",{});var Fyt=s(T4e);vHo=r(Fyt,"gptj"),Fyt.forEach(t),FHo=r(uqe," \u2014 "),LQ=n(uqe,"A",{href:!0});var Tyt=s(LQ);THo=r(Tyt,"GPTJForSequenceClassification"),Tyt.forEach(t),MHo=r(uqe," (GPT-J model)"),uqe.forEach(t),EHo=i(j),av=n(j,"LI",{});var _qe=s(av);M4e=n(_qe,"STRONG",{});var Myt=s(M4e);CHo=r(Myt,"ibert"),Myt.forEach(t),wHo=r(_qe," \u2014 "),xQ=n(_qe,"A",{href:!0});var Eyt=s(xQ);AHo=r(Eyt,"IBertForSequenceClassification"),Eyt.forEach(t),yHo=r(_qe," (I-BERT model)"),_qe.forEach(t),LHo=i(j),nv=n(j,"LI",{});var bqe=s(nv);E4e=n(bqe,"STRONG",{});var Cyt=s(E4e);xHo=r(Cyt,"layoutlm"),Cyt.forEach(t),$Ho=r(bqe," \u2014 "),$Q=n(bqe,"A",{href:!0});var wyt=s($Q);kHo=r(wyt,"LayoutLMForSequenceClassification"),wyt.forEach(t),SHo=r(bqe," (LayoutLM model)"),bqe.forEach(t),RHo=i(j),sv=n(j,"LI",{});var vqe=s(sv);C4e=n(vqe,"STRONG",{});var Ayt=s(C4e);PHo=r(Ayt,"layoutlmv2"),Ayt.forEach(t),BHo=r(vqe," \u2014 "),kQ=n(vqe,"A",{href:!0});var yyt=s(kQ);IHo=r(yyt,"LayoutLMv2ForSequenceClassification"),yyt.forEach(t),NHo=r(vqe," (LayoutLMv2 model)"),vqe.forEach(t),qHo=i(j),lv=n(j,"LI",{});var Fqe=s(lv);w4e=n(Fqe,"STRONG",{});var Lyt=s(w4e);jHo=r(Lyt,"layoutlmv3"),Lyt.forEach(t),DHo=r(Fqe," \u2014 "),SQ=n(Fqe,"A",{href:!0});var xyt=s(SQ);GHo=r(xyt,"LayoutLMv3ForSequenceClassification"),xyt.forEach(t),OHo=r(Fqe," (LayoutLMv3 model)"),Fqe.forEach(t),VHo=i(j),iv=n(j,"LI",{});var Tqe=s(iv);A4e=n(Tqe,"STRONG",{});var $yt=s(A4e);XHo=r($yt,"led"),$yt.forEach(t),zHo=r(Tqe," \u2014 "),RQ=n(Tqe,"A",{href:!0});var kyt=s(RQ);QHo=r(kyt,"LEDForSequenceClassification"),kyt.forEach(t),WHo=r(Tqe," (LED model)"),Tqe.forEach(t),UHo=i(j),dv=n(j,"LI",{});var Mqe=s(dv);y4e=n(Mqe,"STRONG",{});var Syt=s(y4e);HHo=r(Syt,"longformer"),Syt.forEach(t),JHo=r(Mqe," \u2014 "),PQ=n(Mqe,"A",{href:!0});var Ryt=s(PQ);YHo=r(Ryt,"LongformerForSequenceClassification"),Ryt.forEach(t),KHo=r(Mqe," (Longformer model)"),Mqe.forEach(t),ZHo=i(j),cv=n(j,"LI",{});var Eqe=s(cv);L4e=n(Eqe,"STRONG",{});var Pyt=s(L4e);eJo=r(Pyt,"luke"),Pyt.forEach(t),oJo=r(Eqe," \u2014 "),BQ=n(Eqe,"A",{href:!0});var Byt=s(BQ);rJo=r(Byt,"LukeForSequenceClassification"),Byt.forEach(t),tJo=r(Eqe," (LUKE model)"),Eqe.forEach(t),aJo=i(j),fv=n(j,"LI",{});var Cqe=s(fv);x4e=n(Cqe,"STRONG",{});var Iyt=s(x4e);nJo=r(Iyt,"mbart"),Iyt.forEach(t),sJo=r(Cqe," \u2014 "),IQ=n(Cqe,"A",{href:!0});var Nyt=s(IQ);lJo=r(Nyt,"MBartForSequenceClassification"),Nyt.forEach(t),iJo=r(Cqe," (mBART model)"),Cqe.forEach(t),dJo=i(j),mv=n(j,"LI",{});var wqe=s(mv);$4e=n(wqe,"STRONG",{});var qyt=s($4e);cJo=r(qyt,"megatron-bert"),qyt.forEach(t),fJo=r(wqe," \u2014 "),NQ=n(wqe,"A",{href:!0});var jyt=s(NQ);mJo=r(jyt,"MegatronBertForSequenceClassification"),jyt.forEach(t),gJo=r(wqe," (Megatron-BERT model)"),wqe.forEach(t),hJo=i(j),gv=n(j,"LI",{});var Aqe=s(gv);k4e=n(Aqe,"STRONG",{});var Dyt=s(k4e);pJo=r(Dyt,"mobilebert"),Dyt.forEach(t),uJo=r(Aqe," \u2014 "),qQ=n(Aqe,"A",{href:!0});var Gyt=s(qQ);_Jo=r(Gyt,"MobileBertForSequenceClassification"),Gyt.forEach(t),bJo=r(Aqe," (MobileBERT model)"),Aqe.forEach(t),vJo=i(j),hv=n(j,"LI",{});var yqe=s(hv);S4e=n(yqe,"STRONG",{});var Oyt=s(S4e);FJo=r(Oyt,"mpnet"),Oyt.forEach(t),TJo=r(yqe," \u2014 "),jQ=n(yqe,"A",{href:!0});var Vyt=s(jQ);MJo=r(Vyt,"MPNetForSequenceClassification"),Vyt.forEach(t),EJo=r(yqe," (MPNet model)"),yqe.forEach(t),CJo=i(j),pv=n(j,"LI",{});var Lqe=s(pv);R4e=n(Lqe,"STRONG",{});var Xyt=s(R4e);wJo=r(Xyt,"mvp"),Xyt.forEach(t),AJo=r(Lqe," \u2014 "),DQ=n(Lqe,"A",{href:!0});var zyt=s(DQ);yJo=r(zyt,"MvpForSequenceClassification"),zyt.forEach(t),LJo=r(Lqe," (MVP model)"),Lqe.forEach(t),xJo=i(j),uv=n(j,"LI",{});var xqe=s(uv);P4e=n(xqe,"STRONG",{});var Qyt=s(P4e);$Jo=r(Qyt,"nezha"),Qyt.forEach(t),kJo=r(xqe," \u2014 "),GQ=n(xqe,"A",{href:!0});var Wyt=s(GQ);SJo=r(Wyt,"NezhaForSequenceClassification"),Wyt.forEach(t),RJo=r(xqe," (Nezha model)"),xqe.forEach(t),PJo=i(j),_v=n(j,"LI",{});var $qe=s(_v);B4e=n($qe,"STRONG",{});var Uyt=s(B4e);BJo=r(Uyt,"nystromformer"),Uyt.forEach(t),IJo=r($qe," \u2014 "),OQ=n($qe,"A",{href:!0});var Hyt=s(OQ);NJo=r(Hyt,"NystromformerForSequenceClassification"),Hyt.forEach(t),qJo=r($qe," (Nystr\xF6mformer model)"),$qe.forEach(t),jJo=i(j),bv=n(j,"LI",{});var kqe=s(bv);I4e=n(kqe,"STRONG",{});var Jyt=s(I4e);DJo=r(Jyt,"openai-gpt"),Jyt.forEach(t),GJo=r(kqe," \u2014 "),VQ=n(kqe,"A",{href:!0});var Yyt=s(VQ);OJo=r(Yyt,"OpenAIGPTForSequenceClassification"),Yyt.forEach(t),VJo=r(kqe," (OpenAI GPT model)"),kqe.forEach(t),XJo=i(j),vv=n(j,"LI",{});var Sqe=s(vv);N4e=n(Sqe,"STRONG",{});var Kyt=s(N4e);zJo=r(Kyt,"opt"),Kyt.forEach(t),QJo=r(Sqe," \u2014 "),XQ=n(Sqe,"A",{href:!0});var Zyt=s(XQ);WJo=r(Zyt,"OPTForSequenceClassification"),Zyt.forEach(t),UJo=r(Sqe," (OPT model)"),Sqe.forEach(t),HJo=i(j),Fv=n(j,"LI",{});var Rqe=s(Fv);q4e=n(Rqe,"STRONG",{});var eLt=s(q4e);JJo=r(eLt,"perceiver"),eLt.forEach(t),YJo=r(Rqe," \u2014 "),zQ=n(Rqe,"A",{href:!0});var oLt=s(zQ);KJo=r(oLt,"PerceiverForSequenceClassification"),oLt.forEach(t),ZJo=r(Rqe," (Perceiver model)"),Rqe.forEach(t),eYo=i(j),Tv=n(j,"LI",{});var Pqe=s(Tv);j4e=n(Pqe,"STRONG",{});var rLt=s(j4e);oYo=r(rLt,"plbart"),rLt.forEach(t),rYo=r(Pqe," \u2014 "),QQ=n(Pqe,"A",{href:!0});var tLt=s(QQ);tYo=r(tLt,"PLBartForSequenceClassification"),tLt.forEach(t),aYo=r(Pqe," (PLBart model)"),Pqe.forEach(t),nYo=i(j),Mv=n(j,"LI",{});var Bqe=s(Mv);D4e=n(Bqe,"STRONG",{});var aLt=s(D4e);sYo=r(aLt,"qdqbert"),aLt.forEach(t),lYo=r(Bqe," \u2014 "),WQ=n(Bqe,"A",{href:!0});var nLt=s(WQ);iYo=r(nLt,"QDQBertForSequenceClassification"),nLt.forEach(t),dYo=r(Bqe," (QDQBert model)"),Bqe.forEach(t),cYo=i(j),Ev=n(j,"LI",{});var Iqe=s(Ev);G4e=n(Iqe,"STRONG",{});var sLt=s(G4e);fYo=r(sLt,"reformer"),sLt.forEach(t),mYo=r(Iqe," \u2014 "),UQ=n(Iqe,"A",{href:!0});var lLt=s(UQ);gYo=r(lLt,"ReformerForSequenceClassification"),lLt.forEach(t),hYo=r(Iqe," (Reformer model)"),Iqe.forEach(t),pYo=i(j),Cv=n(j,"LI",{});var Nqe=s(Cv);O4e=n(Nqe,"STRONG",{});var iLt=s(O4e);uYo=r(iLt,"rembert"),iLt.forEach(t),_Yo=r(Nqe," \u2014 "),HQ=n(Nqe,"A",{href:!0});var dLt=s(HQ);bYo=r(dLt,"RemBertForSequenceClassification"),dLt.forEach(t),vYo=r(Nqe," (RemBERT model)"),Nqe.forEach(t),FYo=i(j),wv=n(j,"LI",{});var qqe=s(wv);V4e=n(qqe,"STRONG",{});var cLt=s(V4e);TYo=r(cLt,"roberta"),cLt.forEach(t),MYo=r(qqe," \u2014 "),JQ=n(qqe,"A",{href:!0});var fLt=s(JQ);EYo=r(fLt,"RobertaForSequenceClassification"),fLt.forEach(t),CYo=r(qqe," (RoBERTa model)"),qqe.forEach(t),wYo=i(j),Av=n(j,"LI",{});var jqe=s(Av);X4e=n(jqe,"STRONG",{});var mLt=s(X4e);AYo=r(mLt,"roformer"),mLt.forEach(t),yYo=r(jqe," \u2014 "),YQ=n(jqe,"A",{href:!0});var gLt=s(YQ);LYo=r(gLt,"RoFormerForSequenceClassification"),gLt.forEach(t),xYo=r(jqe," (RoFormer model)"),jqe.forEach(t),$Yo=i(j),yv=n(j,"LI",{});var Dqe=s(yv);z4e=n(Dqe,"STRONG",{});var hLt=s(z4e);kYo=r(hLt,"squeezebert"),hLt.forEach(t),SYo=r(Dqe," \u2014 "),KQ=n(Dqe,"A",{href:!0});var pLt=s(KQ);RYo=r(pLt,"SqueezeBertForSequenceClassification"),pLt.forEach(t),PYo=r(Dqe," (SqueezeBERT model)"),Dqe.forEach(t),BYo=i(j),Lv=n(j,"LI",{});var Gqe=s(Lv);Q4e=n(Gqe,"STRONG",{});var uLt=s(Q4e);IYo=r(uLt,"tapas"),uLt.forEach(t),NYo=r(Gqe," \u2014 "),ZQ=n(Gqe,"A",{href:!0});var _Lt=s(ZQ);qYo=r(_Lt,"TapasForSequenceClassification"),_Lt.forEach(t),jYo=r(Gqe," (TAPAS model)"),Gqe.forEach(t),DYo=i(j),xv=n(j,"LI",{});var Oqe=s(xv);W4e=n(Oqe,"STRONG",{});var bLt=s(W4e);GYo=r(bLt,"transfo-xl"),bLt.forEach(t),OYo=r(Oqe," \u2014 "),eW=n(Oqe,"A",{href:!0});var vLt=s(eW);VYo=r(vLt,"TransfoXLForSequenceClassification"),vLt.forEach(t),XYo=r(Oqe," (Transformer-XL model)"),Oqe.forEach(t),zYo=i(j),$v=n(j,"LI",{});var Vqe=s($v);U4e=n(Vqe,"STRONG",{});var FLt=s(U4e);QYo=r(FLt,"xlm"),FLt.forEach(t),WYo=r(Vqe," \u2014 "),oW=n(Vqe,"A",{href:!0});var TLt=s(oW);UYo=r(TLt,"XLMForSequenceClassification"),TLt.forEach(t),HYo=r(Vqe," (XLM model)"),Vqe.forEach(t),JYo=i(j),kv=n(j,"LI",{});var Xqe=s(kv);H4e=n(Xqe,"STRONG",{});var MLt=s(H4e);YYo=r(MLt,"xlm-roberta"),MLt.forEach(t),KYo=r(Xqe," \u2014 "),rW=n(Xqe,"A",{href:!0});var ELt=s(rW);ZYo=r(ELt,"XLMRobertaForSequenceClassification"),ELt.forEach(t),eKo=r(Xqe," (XLM-RoBERTa model)"),Xqe.forEach(t),oKo=i(j),Sv=n(j,"LI",{});var zqe=s(Sv);J4e=n(zqe,"STRONG",{});var CLt=s(J4e);rKo=r(CLt,"xlm-roberta-xl"),CLt.forEach(t),tKo=r(zqe," \u2014 "),tW=n(zqe,"A",{href:!0});var wLt=s(tW);aKo=r(wLt,"XLMRobertaXLForSequenceClassification"),wLt.forEach(t),nKo=r(zqe," (XLM-RoBERTa-XL model)"),zqe.forEach(t),sKo=i(j),Rv=n(j,"LI",{});var Qqe=s(Rv);Y4e=n(Qqe,"STRONG",{});var ALt=s(Y4e);lKo=r(ALt,"xlnet"),ALt.forEach(t),iKo=r(Qqe," \u2014 "),aW=n(Qqe,"A",{href:!0});var yLt=s(aW);dKo=r(yLt,"XLNetForSequenceClassification"),yLt.forEach(t),cKo=r(Qqe," (XLNet model)"),Qqe.forEach(t),fKo=i(j),Pv=n(j,"LI",{});var Wqe=s(Pv);K4e=n(Wqe,"STRONG",{});var LLt=s(K4e);mKo=r(LLt,"yoso"),LLt.forEach(t),gKo=r(Wqe," \u2014 "),nW=n(Wqe,"A",{href:!0});var xLt=s(nW);hKo=r(xLt,"YosoForSequenceClassification"),xLt.forEach(t),pKo=r(Wqe," (YOSO model)"),Wqe.forEach(t),j.forEach(t),uKo=i(Ta),Bv=n(Ta,"P",{});var Uqe=s(Bv);_Ko=r(Uqe,"The model is set in evaluation mode by default using "),Z4e=n(Uqe,"CODE",{});var $Lt=s(Z4e);bKo=r($Lt,"model.eval()"),$Lt.forEach(t),vKo=r(Uqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e2e=n(Uqe,"CODE",{});var kLt=s(e2e);FKo=r(kLt,"model.train()"),kLt.forEach(t),Uqe.forEach(t),TKo=i(Ta),T(Iv.$$.fragment,Ta),Ta.forEach(t),Cl.forEach(t),aHe=i(f),Ad=n(f,"H2",{class:!0});var uYe=s(Ad);Nv=n(uYe,"A",{id:!0,class:!0,href:!0});var SLt=s(Nv);o2e=n(SLt,"SPAN",{});var RLt=s(o2e);T(R9.$$.fragment,RLt),RLt.forEach(t),SLt.forEach(t),MKo=i(uYe),r2e=n(uYe,"SPAN",{});var PLt=s(r2e);EKo=r(PLt,"AutoModelForMultipleChoice"),PLt.forEach(t),uYe.forEach(t),nHe=i(f),jo=n(f,"DIV",{class:!0});var wl=s(jo);T(P9.$$.fragment,wl),CKo=i(wl),yd=n(wl,"P",{});var yne=s(yd);wKo=r(yne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sW=n(yne,"A",{href:!0});var BLt=s(sW);AKo=r(BLt,"from_pretrained()"),BLt.forEach(t),yKo=r(yne," class method or the "),lW=n(yne,"A",{href:!0});var ILt=s(lW);LKo=r(ILt,"from_config()"),ILt.forEach(t),xKo=r(yne,` class
method.`),yne.forEach(t),$Ko=i(wl),B9=n(wl,"P",{});var _Ye=s(B9);kKo=r(_Ye,"This class cannot be instantiated directly using "),t2e=n(_Ye,"CODE",{});var NLt=s(t2e);SKo=r(NLt,"__init__()"),NLt.forEach(t),RKo=r(_Ye," (throws an error)."),_Ye.forEach(t),PKo=i(wl),Ft=n(wl,"DIV",{class:!0});var D7=s(Ft);T(I9.$$.fragment,D7),BKo=i(D7),a2e=n(D7,"P",{});var qLt=s(a2e);IKo=r(qLt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qLt.forEach(t),NKo=i(D7),Ld=n(D7,"P",{});var Lne=s(Ld);qKo=r(Lne,`Note:
Loading a model from its configuration file does `),n2e=n(Lne,"STRONG",{});var jLt=s(n2e);jKo=r(jLt,"not"),jLt.forEach(t),DKo=r(Lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=n(Lne,"A",{href:!0});var DLt=s(iW);GKo=r(DLt,"from_pretrained()"),DLt.forEach(t),OKo=r(Lne," to load the model weights."),Lne.forEach(t),VKo=i(D7),T(qv.$$.fragment,D7),D7.forEach(t),XKo=i(wl),to=n(wl,"DIV",{class:!0});var Ma=s(to);T(N9.$$.fragment,Ma),zKo=i(Ma),s2e=n(Ma,"P",{});var GLt=s(s2e);QKo=r(GLt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),GLt.forEach(t),WKo=i(Ma),Za=n(Ma,"P",{});var G7=s(Za);UKo=r(G7,"The model class to instantiate is selected based on the "),l2e=n(G7,"CODE",{});var OLt=s(l2e);HKo=r(OLt,"model_type"),OLt.forEach(t),JKo=r(G7,` property of the config object (either
passed as an argument or loaded from `),i2e=n(G7,"CODE",{});var VLt=s(i2e);YKo=r(VLt,"pretrained_model_name_or_path"),VLt.forEach(t),KKo=r(G7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=n(G7,"CODE",{});var XLt=s(d2e);ZKo=r(XLt,"pretrained_model_name_or_path"),XLt.forEach(t),eZo=r(G7,":"),G7.forEach(t),oZo=i(Ma),Z=n(Ma,"UL",{});var ee=s(Z);jv=n(ee,"LI",{});var Hqe=s(jv);c2e=n(Hqe,"STRONG",{});var zLt=s(c2e);rZo=r(zLt,"albert"),zLt.forEach(t),tZo=r(Hqe," \u2014 "),dW=n(Hqe,"A",{href:!0});var QLt=s(dW);aZo=r(QLt,"AlbertForMultipleChoice"),QLt.forEach(t),nZo=r(Hqe," (ALBERT model)"),Hqe.forEach(t),sZo=i(ee),Dv=n(ee,"LI",{});var Jqe=s(Dv);f2e=n(Jqe,"STRONG",{});var WLt=s(f2e);lZo=r(WLt,"bert"),WLt.forEach(t),iZo=r(Jqe," \u2014 "),cW=n(Jqe,"A",{href:!0});var ULt=s(cW);dZo=r(ULt,"BertForMultipleChoice"),ULt.forEach(t),cZo=r(Jqe," (BERT model)"),Jqe.forEach(t),fZo=i(ee),Gv=n(ee,"LI",{});var Yqe=s(Gv);m2e=n(Yqe,"STRONG",{});var HLt=s(m2e);mZo=r(HLt,"big_bird"),HLt.forEach(t),gZo=r(Yqe," \u2014 "),fW=n(Yqe,"A",{href:!0});var JLt=s(fW);hZo=r(JLt,"BigBirdForMultipleChoice"),JLt.forEach(t),pZo=r(Yqe," (BigBird model)"),Yqe.forEach(t),uZo=i(ee),Ov=n(ee,"LI",{});var Kqe=s(Ov);g2e=n(Kqe,"STRONG",{});var YLt=s(g2e);_Zo=r(YLt,"camembert"),YLt.forEach(t),bZo=r(Kqe," \u2014 "),mW=n(Kqe,"A",{href:!0});var KLt=s(mW);vZo=r(KLt,"CamembertForMultipleChoice"),KLt.forEach(t),FZo=r(Kqe," (CamemBERT model)"),Kqe.forEach(t),TZo=i(ee),Vv=n(ee,"LI",{});var Zqe=s(Vv);h2e=n(Zqe,"STRONG",{});var ZLt=s(h2e);MZo=r(ZLt,"canine"),ZLt.forEach(t),EZo=r(Zqe," \u2014 "),gW=n(Zqe,"A",{href:!0});var e9t=s(gW);CZo=r(e9t,"CanineForMultipleChoice"),e9t.forEach(t),wZo=r(Zqe," (CANINE model)"),Zqe.forEach(t),AZo=i(ee),Xv=n(ee,"LI",{});var eje=s(Xv);p2e=n(eje,"STRONG",{});var o9t=s(p2e);yZo=r(o9t,"convbert"),o9t.forEach(t),LZo=r(eje," \u2014 "),hW=n(eje,"A",{href:!0});var r9t=s(hW);xZo=r(r9t,"ConvBertForMultipleChoice"),r9t.forEach(t),$Zo=r(eje," (ConvBERT model)"),eje.forEach(t),kZo=i(ee),zv=n(ee,"LI",{});var oje=s(zv);u2e=n(oje,"STRONG",{});var t9t=s(u2e);SZo=r(t9t,"data2vec-text"),t9t.forEach(t),RZo=r(oje," \u2014 "),pW=n(oje,"A",{href:!0});var a9t=s(pW);PZo=r(a9t,"Data2VecTextForMultipleChoice"),a9t.forEach(t),BZo=r(oje," (Data2VecText model)"),oje.forEach(t),IZo=i(ee),Qv=n(ee,"LI",{});var rje=s(Qv);_2e=n(rje,"STRONG",{});var n9t=s(_2e);NZo=r(n9t,"deberta-v2"),n9t.forEach(t),qZo=r(rje," \u2014 "),uW=n(rje,"A",{href:!0});var s9t=s(uW);jZo=r(s9t,"DebertaV2ForMultipleChoice"),s9t.forEach(t),DZo=r(rje," (DeBERTa-v2 model)"),rje.forEach(t),GZo=i(ee),Wv=n(ee,"LI",{});var tje=s(Wv);b2e=n(tje,"STRONG",{});var l9t=s(b2e);OZo=r(l9t,"distilbert"),l9t.forEach(t),VZo=r(tje," \u2014 "),_W=n(tje,"A",{href:!0});var i9t=s(_W);XZo=r(i9t,"DistilBertForMultipleChoice"),i9t.forEach(t),zZo=r(tje," (DistilBERT model)"),tje.forEach(t),QZo=i(ee),Uv=n(ee,"LI",{});var aje=s(Uv);v2e=n(aje,"STRONG",{});var d9t=s(v2e);WZo=r(d9t,"electra"),d9t.forEach(t),UZo=r(aje," \u2014 "),bW=n(aje,"A",{href:!0});var c9t=s(bW);HZo=r(c9t,"ElectraForMultipleChoice"),c9t.forEach(t),JZo=r(aje," (ELECTRA model)"),aje.forEach(t),YZo=i(ee),Hv=n(ee,"LI",{});var nje=s(Hv);F2e=n(nje,"STRONG",{});var f9t=s(F2e);KZo=r(f9t,"flaubert"),f9t.forEach(t),ZZo=r(nje," \u2014 "),vW=n(nje,"A",{href:!0});var m9t=s(vW);eer=r(m9t,"FlaubertForMultipleChoice"),m9t.forEach(t),oer=r(nje," (FlauBERT model)"),nje.forEach(t),rer=i(ee),Jv=n(ee,"LI",{});var sje=s(Jv);T2e=n(sje,"STRONG",{});var g9t=s(T2e);ter=r(g9t,"fnet"),g9t.forEach(t),aer=r(sje," \u2014 "),FW=n(sje,"A",{href:!0});var h9t=s(FW);ner=r(h9t,"FNetForMultipleChoice"),h9t.forEach(t),ser=r(sje," (FNet model)"),sje.forEach(t),ler=i(ee),Yv=n(ee,"LI",{});var lje=s(Yv);M2e=n(lje,"STRONG",{});var p9t=s(M2e);ier=r(p9t,"funnel"),p9t.forEach(t),der=r(lje," \u2014 "),TW=n(lje,"A",{href:!0});var u9t=s(TW);cer=r(u9t,"FunnelForMultipleChoice"),u9t.forEach(t),fer=r(lje," (Funnel Transformer model)"),lje.forEach(t),mer=i(ee),Kv=n(ee,"LI",{});var ije=s(Kv);E2e=n(ije,"STRONG",{});var _9t=s(E2e);ger=r(_9t,"ibert"),_9t.forEach(t),her=r(ije," \u2014 "),MW=n(ije,"A",{href:!0});var b9t=s(MW);per=r(b9t,"IBertForMultipleChoice"),b9t.forEach(t),uer=r(ije," (I-BERT model)"),ije.forEach(t),_er=i(ee),Zv=n(ee,"LI",{});var dje=s(Zv);C2e=n(dje,"STRONG",{});var v9t=s(C2e);ber=r(v9t,"longformer"),v9t.forEach(t),ver=r(dje," \u2014 "),EW=n(dje,"A",{href:!0});var F9t=s(EW);Fer=r(F9t,"LongformerForMultipleChoice"),F9t.forEach(t),Ter=r(dje," (Longformer model)"),dje.forEach(t),Mer=i(ee),eF=n(ee,"LI",{});var cje=s(eF);w2e=n(cje,"STRONG",{});var T9t=s(w2e);Eer=r(T9t,"luke"),T9t.forEach(t),Cer=r(cje," \u2014 "),CW=n(cje,"A",{href:!0});var M9t=s(CW);wer=r(M9t,"LukeForMultipleChoice"),M9t.forEach(t),Aer=r(cje," (LUKE model)"),cje.forEach(t),yer=i(ee),oF=n(ee,"LI",{});var fje=s(oF);A2e=n(fje,"STRONG",{});var E9t=s(A2e);Ler=r(E9t,"megatron-bert"),E9t.forEach(t),xer=r(fje," \u2014 "),wW=n(fje,"A",{href:!0});var C9t=s(wW);$er=r(C9t,"MegatronBertForMultipleChoice"),C9t.forEach(t),ker=r(fje," (Megatron-BERT model)"),fje.forEach(t),Ser=i(ee),rF=n(ee,"LI",{});var mje=s(rF);y2e=n(mje,"STRONG",{});var w9t=s(y2e);Rer=r(w9t,"mobilebert"),w9t.forEach(t),Per=r(mje," \u2014 "),AW=n(mje,"A",{href:!0});var A9t=s(AW);Ber=r(A9t,"MobileBertForMultipleChoice"),A9t.forEach(t),Ier=r(mje," (MobileBERT model)"),mje.forEach(t),Ner=i(ee),tF=n(ee,"LI",{});var gje=s(tF);L2e=n(gje,"STRONG",{});var y9t=s(L2e);qer=r(y9t,"mpnet"),y9t.forEach(t),jer=r(gje," \u2014 "),yW=n(gje,"A",{href:!0});var L9t=s(yW);Der=r(L9t,"MPNetForMultipleChoice"),L9t.forEach(t),Ger=r(gje," (MPNet model)"),gje.forEach(t),Oer=i(ee),aF=n(ee,"LI",{});var hje=s(aF);x2e=n(hje,"STRONG",{});var x9t=s(x2e);Ver=r(x9t,"nezha"),x9t.forEach(t),Xer=r(hje," \u2014 "),LW=n(hje,"A",{href:!0});var $9t=s(LW);zer=r($9t,"NezhaForMultipleChoice"),$9t.forEach(t),Qer=r(hje," (Nezha model)"),hje.forEach(t),Wer=i(ee),nF=n(ee,"LI",{});var pje=s(nF);$2e=n(pje,"STRONG",{});var k9t=s($2e);Uer=r(k9t,"nystromformer"),k9t.forEach(t),Her=r(pje," \u2014 "),xW=n(pje,"A",{href:!0});var S9t=s(xW);Jer=r(S9t,"NystromformerForMultipleChoice"),S9t.forEach(t),Yer=r(pje," (Nystr\xF6mformer model)"),pje.forEach(t),Ker=i(ee),sF=n(ee,"LI",{});var uje=s(sF);k2e=n(uje,"STRONG",{});var R9t=s(k2e);Zer=r(R9t,"qdqbert"),R9t.forEach(t),eor=r(uje," \u2014 "),$W=n(uje,"A",{href:!0});var P9t=s($W);oor=r(P9t,"QDQBertForMultipleChoice"),P9t.forEach(t),ror=r(uje," (QDQBert model)"),uje.forEach(t),tor=i(ee),lF=n(ee,"LI",{});var _je=s(lF);S2e=n(_je,"STRONG",{});var B9t=s(S2e);aor=r(B9t,"rembert"),B9t.forEach(t),nor=r(_je," \u2014 "),kW=n(_je,"A",{href:!0});var I9t=s(kW);sor=r(I9t,"RemBertForMultipleChoice"),I9t.forEach(t),lor=r(_je," (RemBERT model)"),_je.forEach(t),ior=i(ee),iF=n(ee,"LI",{});var bje=s(iF);R2e=n(bje,"STRONG",{});var N9t=s(R2e);dor=r(N9t,"roberta"),N9t.forEach(t),cor=r(bje," \u2014 "),SW=n(bje,"A",{href:!0});var q9t=s(SW);mor=r(q9t,"RobertaForMultipleChoice"),q9t.forEach(t),gor=r(bje," (RoBERTa model)"),bje.forEach(t),hor=i(ee),dF=n(ee,"LI",{});var vje=s(dF);P2e=n(vje,"STRONG",{});var j9t=s(P2e);por=r(j9t,"roformer"),j9t.forEach(t),uor=r(vje," \u2014 "),RW=n(vje,"A",{href:!0});var D9t=s(RW);_or=r(D9t,"RoFormerForMultipleChoice"),D9t.forEach(t),bor=r(vje," (RoFormer model)"),vje.forEach(t),vor=i(ee),cF=n(ee,"LI",{});var Fje=s(cF);B2e=n(Fje,"STRONG",{});var G9t=s(B2e);For=r(G9t,"squeezebert"),G9t.forEach(t),Tor=r(Fje," \u2014 "),PW=n(Fje,"A",{href:!0});var O9t=s(PW);Mor=r(O9t,"SqueezeBertForMultipleChoice"),O9t.forEach(t),Eor=r(Fje," (SqueezeBERT model)"),Fje.forEach(t),Cor=i(ee),fF=n(ee,"LI",{});var Tje=s(fF);I2e=n(Tje,"STRONG",{});var V9t=s(I2e);wor=r(V9t,"xlm"),V9t.forEach(t),Aor=r(Tje," \u2014 "),BW=n(Tje,"A",{href:!0});var X9t=s(BW);yor=r(X9t,"XLMForMultipleChoice"),X9t.forEach(t),Lor=r(Tje," (XLM model)"),Tje.forEach(t),xor=i(ee),mF=n(ee,"LI",{});var Mje=s(mF);N2e=n(Mje,"STRONG",{});var z9t=s(N2e);$or=r(z9t,"xlm-roberta"),z9t.forEach(t),kor=r(Mje," \u2014 "),IW=n(Mje,"A",{href:!0});var Q9t=s(IW);Sor=r(Q9t,"XLMRobertaForMultipleChoice"),Q9t.forEach(t),Ror=r(Mje," (XLM-RoBERTa model)"),Mje.forEach(t),Por=i(ee),gF=n(ee,"LI",{});var Eje=s(gF);q2e=n(Eje,"STRONG",{});var W9t=s(q2e);Bor=r(W9t,"xlm-roberta-xl"),W9t.forEach(t),Ior=r(Eje," \u2014 "),NW=n(Eje,"A",{href:!0});var U9t=s(NW);Nor=r(U9t,"XLMRobertaXLForMultipleChoice"),U9t.forEach(t),qor=r(Eje," (XLM-RoBERTa-XL model)"),Eje.forEach(t),jor=i(ee),hF=n(ee,"LI",{});var Cje=s(hF);j2e=n(Cje,"STRONG",{});var H9t=s(j2e);Dor=r(H9t,"xlnet"),H9t.forEach(t),Gor=r(Cje," \u2014 "),qW=n(Cje,"A",{href:!0});var J9t=s(qW);Oor=r(J9t,"XLNetForMultipleChoice"),J9t.forEach(t),Vor=r(Cje," (XLNet model)"),Cje.forEach(t),Xor=i(ee),pF=n(ee,"LI",{});var wje=s(pF);D2e=n(wje,"STRONG",{});var Y9t=s(D2e);zor=r(Y9t,"yoso"),Y9t.forEach(t),Qor=r(wje," \u2014 "),jW=n(wje,"A",{href:!0});var K9t=s(jW);Wor=r(K9t,"YosoForMultipleChoice"),K9t.forEach(t),Uor=r(wje," (YOSO model)"),wje.forEach(t),ee.forEach(t),Hor=i(Ma),uF=n(Ma,"P",{});var Aje=s(uF);Jor=r(Aje,"The model is set in evaluation mode by default using "),G2e=n(Aje,"CODE",{});var Z9t=s(G2e);Yor=r(Z9t,"model.eval()"),Z9t.forEach(t),Kor=r(Aje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O2e=n(Aje,"CODE",{});var ext=s(O2e);Zor=r(ext,"model.train()"),ext.forEach(t),Aje.forEach(t),err=i(Ma),T(_F.$$.fragment,Ma),Ma.forEach(t),wl.forEach(t),sHe=i(f),xd=n(f,"H2",{class:!0});var bYe=s(xd);bF=n(bYe,"A",{id:!0,class:!0,href:!0});var oxt=s(bF);V2e=n(oxt,"SPAN",{});var rxt=s(V2e);T(q9.$$.fragment,rxt),rxt.forEach(t),oxt.forEach(t),orr=i(bYe),X2e=n(bYe,"SPAN",{});var txt=s(X2e);rrr=r(txt,"AutoModelForNextSentencePrediction"),txt.forEach(t),bYe.forEach(t),lHe=i(f),Do=n(f,"DIV",{class:!0});var Al=s(Do);T(j9.$$.fragment,Al),trr=i(Al),$d=n(Al,"P",{});var xne=s($d);arr=r(xne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),DW=n(xne,"A",{href:!0});var axt=s(DW);nrr=r(axt,"from_pretrained()"),axt.forEach(t),srr=r(xne," class method or the "),GW=n(xne,"A",{href:!0});var nxt=s(GW);lrr=r(nxt,"from_config()"),nxt.forEach(t),irr=r(xne,` class
method.`),xne.forEach(t),drr=i(Al),D9=n(Al,"P",{});var vYe=s(D9);crr=r(vYe,"This class cannot be instantiated directly using "),z2e=n(vYe,"CODE",{});var sxt=s(z2e);frr=r(sxt,"__init__()"),sxt.forEach(t),mrr=r(vYe," (throws an error)."),vYe.forEach(t),grr=i(Al),Tt=n(Al,"DIV",{class:!0});var O7=s(Tt);T(G9.$$.fragment,O7),hrr=i(O7),Q2e=n(O7,"P",{});var lxt=s(Q2e);prr=r(lxt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lxt.forEach(t),urr=i(O7),kd=n(O7,"P",{});var $ne=s(kd);_rr=r($ne,`Note:
Loading a model from its configuration file does `),W2e=n($ne,"STRONG",{});var ixt=s(W2e);brr=r(ixt,"not"),ixt.forEach(t),vrr=r($ne,` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=n($ne,"A",{href:!0});var dxt=s(OW);Frr=r(dxt,"from_pretrained()"),dxt.forEach(t),Trr=r($ne," to load the model weights."),$ne.forEach(t),Mrr=i(O7),T(vF.$$.fragment,O7),O7.forEach(t),Err=i(Al),ao=n(Al,"DIV",{class:!0});var Ea=s(ao);T(O9.$$.fragment,Ea),Crr=i(Ea),U2e=n(Ea,"P",{});var cxt=s(U2e);wrr=r(cxt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cxt.forEach(t),Arr=i(Ea),en=n(Ea,"P",{});var V7=s(en);yrr=r(V7,"The model class to instantiate is selected based on the "),H2e=n(V7,"CODE",{});var fxt=s(H2e);Lrr=r(fxt,"model_type"),fxt.forEach(t),xrr=r(V7,` property of the config object (either
passed as an argument or loaded from `),J2e=n(V7,"CODE",{});var mxt=s(J2e);$rr=r(mxt,"pretrained_model_name_or_path"),mxt.forEach(t),krr=r(V7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=n(V7,"CODE",{});var gxt=s(Y2e);Srr=r(gxt,"pretrained_model_name_or_path"),gxt.forEach(t),Rrr=r(V7,":"),V7.forEach(t),Prr=i(Ea),Go=n(Ea,"UL",{});var Ca=s(Go);FF=n(Ca,"LI",{});var yje=s(FF);K2e=n(yje,"STRONG",{});var hxt=s(K2e);Brr=r(hxt,"bert"),hxt.forEach(t),Irr=r(yje," \u2014 "),VW=n(yje,"A",{href:!0});var pxt=s(VW);Nrr=r(pxt,"BertForNextSentencePrediction"),pxt.forEach(t),qrr=r(yje," (BERT model)"),yje.forEach(t),jrr=i(Ca),TF=n(Ca,"LI",{});var Lje=s(TF);Z2e=n(Lje,"STRONG",{});var uxt=s(Z2e);Drr=r(uxt,"fnet"),uxt.forEach(t),Grr=r(Lje," \u2014 "),XW=n(Lje,"A",{href:!0});var _xt=s(XW);Orr=r(_xt,"FNetForNextSentencePrediction"),_xt.forEach(t),Vrr=r(Lje," (FNet model)"),Lje.forEach(t),Xrr=i(Ca),MF=n(Ca,"LI",{});var xje=s(MF);ebe=n(xje,"STRONG",{});var bxt=s(ebe);zrr=r(bxt,"megatron-bert"),bxt.forEach(t),Qrr=r(xje," \u2014 "),zW=n(xje,"A",{href:!0});var vxt=s(zW);Wrr=r(vxt,"MegatronBertForNextSentencePrediction"),vxt.forEach(t),Urr=r(xje," (Megatron-BERT model)"),xje.forEach(t),Hrr=i(Ca),EF=n(Ca,"LI",{});var $je=s(EF);obe=n($je,"STRONG",{});var Fxt=s(obe);Jrr=r(Fxt,"mobilebert"),Fxt.forEach(t),Yrr=r($je," \u2014 "),QW=n($je,"A",{href:!0});var Txt=s(QW);Krr=r(Txt,"MobileBertForNextSentencePrediction"),Txt.forEach(t),Zrr=r($je," (MobileBERT model)"),$je.forEach(t),etr=i(Ca),CF=n(Ca,"LI",{});var kje=s(CF);rbe=n(kje,"STRONG",{});var Mxt=s(rbe);otr=r(Mxt,"nezha"),Mxt.forEach(t),rtr=r(kje," \u2014 "),WW=n(kje,"A",{href:!0});var Ext=s(WW);ttr=r(Ext,"NezhaForNextSentencePrediction"),Ext.forEach(t),atr=r(kje," (Nezha model)"),kje.forEach(t),ntr=i(Ca),wF=n(Ca,"LI",{});var Sje=s(wF);tbe=n(Sje,"STRONG",{});var Cxt=s(tbe);str=r(Cxt,"qdqbert"),Cxt.forEach(t),ltr=r(Sje," \u2014 "),UW=n(Sje,"A",{href:!0});var wxt=s(UW);itr=r(wxt,"QDQBertForNextSentencePrediction"),wxt.forEach(t),dtr=r(Sje," (QDQBert model)"),Sje.forEach(t),Ca.forEach(t),ctr=i(Ea),AF=n(Ea,"P",{});var Rje=s(AF);ftr=r(Rje,"The model is set in evaluation mode by default using "),abe=n(Rje,"CODE",{});var Axt=s(abe);mtr=r(Axt,"model.eval()"),Axt.forEach(t),gtr=r(Rje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nbe=n(Rje,"CODE",{});var yxt=s(nbe);htr=r(yxt,"model.train()"),yxt.forEach(t),Rje.forEach(t),ptr=i(Ea),T(yF.$$.fragment,Ea),Ea.forEach(t),Al.forEach(t),iHe=i(f),Sd=n(f,"H2",{class:!0});var FYe=s(Sd);LF=n(FYe,"A",{id:!0,class:!0,href:!0});var Lxt=s(LF);sbe=n(Lxt,"SPAN",{});var xxt=s(sbe);T(V9.$$.fragment,xxt),xxt.forEach(t),Lxt.forEach(t),utr=i(FYe),lbe=n(FYe,"SPAN",{});var $xt=s(lbe);_tr=r($xt,"AutoModelForTokenClassification"),$xt.forEach(t),FYe.forEach(t),dHe=i(f),Oo=n(f,"DIV",{class:!0});var yl=s(Oo);T(X9.$$.fragment,yl),btr=i(yl),Rd=n(yl,"P",{});var kne=s(Rd);vtr=r(kne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HW=n(kne,"A",{href:!0});var kxt=s(HW);Ftr=r(kxt,"from_pretrained()"),kxt.forEach(t),Ttr=r(kne," class method or the "),JW=n(kne,"A",{href:!0});var Sxt=s(JW);Mtr=r(Sxt,"from_config()"),Sxt.forEach(t),Etr=r(kne,` class
method.`),kne.forEach(t),Ctr=i(yl),z9=n(yl,"P",{});var TYe=s(z9);wtr=r(TYe,"This class cannot be instantiated directly using "),ibe=n(TYe,"CODE",{});var Rxt=s(ibe);Atr=r(Rxt,"__init__()"),Rxt.forEach(t),ytr=r(TYe," (throws an error)."),TYe.forEach(t),Ltr=i(yl),Mt=n(yl,"DIV",{class:!0});var X7=s(Mt);T(Q9.$$.fragment,X7),xtr=i(X7),dbe=n(X7,"P",{});var Pxt=s(dbe);$tr=r(Pxt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Pxt.forEach(t),ktr=i(X7),Pd=n(X7,"P",{});var Sne=s(Pd);Str=r(Sne,`Note:
Loading a model from its configuration file does `),cbe=n(Sne,"STRONG",{});var Bxt=s(cbe);Rtr=r(Bxt,"not"),Bxt.forEach(t),Ptr=r(Sne,` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=n(Sne,"A",{href:!0});var Ixt=s(YW);Btr=r(Ixt,"from_pretrained()"),Ixt.forEach(t),Itr=r(Sne," to load the model weights."),Sne.forEach(t),Ntr=i(X7),T(xF.$$.fragment,X7),X7.forEach(t),qtr=i(yl),no=n(yl,"DIV",{class:!0});var wa=s(no);T(W9.$$.fragment,wa),jtr=i(wa),fbe=n(wa,"P",{});var Nxt=s(fbe);Dtr=r(Nxt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Nxt.forEach(t),Gtr=i(wa),on=n(wa,"P",{});var z7=s(on);Otr=r(z7,"The model class to instantiate is selected based on the "),mbe=n(z7,"CODE",{});var qxt=s(mbe);Vtr=r(qxt,"model_type"),qxt.forEach(t),Xtr=r(z7,` property of the config object (either
passed as an argument or loaded from `),gbe=n(z7,"CODE",{});var jxt=s(gbe);ztr=r(jxt,"pretrained_model_name_or_path"),jxt.forEach(t),Qtr=r(z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=n(z7,"CODE",{});var Dxt=s(hbe);Wtr=r(Dxt,"pretrained_model_name_or_path"),Dxt.forEach(t),Utr=r(z7,":"),z7.forEach(t),Htr=i(wa),H=n(wa,"UL",{});var K=s(H);$F=n(K,"LI",{});var Pje=s($F);pbe=n(Pje,"STRONG",{});var Gxt=s(pbe);Jtr=r(Gxt,"albert"),Gxt.forEach(t),Ytr=r(Pje," \u2014 "),KW=n(Pje,"A",{href:!0});var Oxt=s(KW);Ktr=r(Oxt,"AlbertForTokenClassification"),Oxt.forEach(t),Ztr=r(Pje," (ALBERT model)"),Pje.forEach(t),ear=i(K),kF=n(K,"LI",{});var Bje=s(kF);ube=n(Bje,"STRONG",{});var Vxt=s(ube);oar=r(Vxt,"bert"),Vxt.forEach(t),rar=r(Bje," \u2014 "),ZW=n(Bje,"A",{href:!0});var Xxt=s(ZW);tar=r(Xxt,"BertForTokenClassification"),Xxt.forEach(t),aar=r(Bje," (BERT model)"),Bje.forEach(t),nar=i(K),SF=n(K,"LI",{});var Ije=s(SF);_be=n(Ije,"STRONG",{});var zxt=s(_be);sar=r(zxt,"big_bird"),zxt.forEach(t),lar=r(Ije," \u2014 "),eU=n(Ije,"A",{href:!0});var Qxt=s(eU);iar=r(Qxt,"BigBirdForTokenClassification"),Qxt.forEach(t),dar=r(Ije," (BigBird model)"),Ije.forEach(t),car=i(K),RF=n(K,"LI",{});var Nje=s(RF);bbe=n(Nje,"STRONG",{});var Wxt=s(bbe);far=r(Wxt,"bloom"),Wxt.forEach(t),mar=r(Nje," \u2014 "),oU=n(Nje,"A",{href:!0});var Uxt=s(oU);gar=r(Uxt,"BloomForTokenClassification"),Uxt.forEach(t),har=r(Nje," (BLOOM model)"),Nje.forEach(t),par=i(K),PF=n(K,"LI",{});var qje=s(PF);vbe=n(qje,"STRONG",{});var Hxt=s(vbe);uar=r(Hxt,"camembert"),Hxt.forEach(t),_ar=r(qje," \u2014 "),rU=n(qje,"A",{href:!0});var Jxt=s(rU);bar=r(Jxt,"CamembertForTokenClassification"),Jxt.forEach(t),Far=r(qje," (CamemBERT model)"),qje.forEach(t),Tar=i(K),BF=n(K,"LI",{});var jje=s(BF);Fbe=n(jje,"STRONG",{});var Yxt=s(Fbe);Mar=r(Yxt,"canine"),Yxt.forEach(t),Ear=r(jje," \u2014 "),tU=n(jje,"A",{href:!0});var Kxt=s(tU);Car=r(Kxt,"CanineForTokenClassification"),Kxt.forEach(t),war=r(jje," (CANINE model)"),jje.forEach(t),Aar=i(K),IF=n(K,"LI",{});var Dje=s(IF);Tbe=n(Dje,"STRONG",{});var Zxt=s(Tbe);yar=r(Zxt,"convbert"),Zxt.forEach(t),Lar=r(Dje," \u2014 "),aU=n(Dje,"A",{href:!0});var e$t=s(aU);xar=r(e$t,"ConvBertForTokenClassification"),e$t.forEach(t),$ar=r(Dje," (ConvBERT model)"),Dje.forEach(t),kar=i(K),NF=n(K,"LI",{});var Gje=s(NF);Mbe=n(Gje,"STRONG",{});var o$t=s(Mbe);Sar=r(o$t,"data2vec-text"),o$t.forEach(t),Rar=r(Gje," \u2014 "),nU=n(Gje,"A",{href:!0});var r$t=s(nU);Par=r(r$t,"Data2VecTextForTokenClassification"),r$t.forEach(t),Bar=r(Gje," (Data2VecText model)"),Gje.forEach(t),Iar=i(K),qF=n(K,"LI",{});var Oje=s(qF);Ebe=n(Oje,"STRONG",{});var t$t=s(Ebe);Nar=r(t$t,"deberta"),t$t.forEach(t),qar=r(Oje," \u2014 "),sU=n(Oje,"A",{href:!0});var a$t=s(sU);jar=r(a$t,"DebertaForTokenClassification"),a$t.forEach(t),Dar=r(Oje," (DeBERTa model)"),Oje.forEach(t),Gar=i(K),jF=n(K,"LI",{});var Vje=s(jF);Cbe=n(Vje,"STRONG",{});var n$t=s(Cbe);Oar=r(n$t,"deberta-v2"),n$t.forEach(t),Var=r(Vje," \u2014 "),lU=n(Vje,"A",{href:!0});var s$t=s(lU);Xar=r(s$t,"DebertaV2ForTokenClassification"),s$t.forEach(t),zar=r(Vje," (DeBERTa-v2 model)"),Vje.forEach(t),Qar=i(K),DF=n(K,"LI",{});var Xje=s(DF);wbe=n(Xje,"STRONG",{});var l$t=s(wbe);War=r(l$t,"distilbert"),l$t.forEach(t),Uar=r(Xje," \u2014 "),iU=n(Xje,"A",{href:!0});var i$t=s(iU);Har=r(i$t,"DistilBertForTokenClassification"),i$t.forEach(t),Jar=r(Xje," (DistilBERT model)"),Xje.forEach(t),Yar=i(K),GF=n(K,"LI",{});var zje=s(GF);Abe=n(zje,"STRONG",{});var d$t=s(Abe);Kar=r(d$t,"electra"),d$t.forEach(t),Zar=r(zje," \u2014 "),dU=n(zje,"A",{href:!0});var c$t=s(dU);enr=r(c$t,"ElectraForTokenClassification"),c$t.forEach(t),onr=r(zje," (ELECTRA model)"),zje.forEach(t),rnr=i(K),OF=n(K,"LI",{});var Qje=s(OF);ybe=n(Qje,"STRONG",{});var f$t=s(ybe);tnr=r(f$t,"flaubert"),f$t.forEach(t),anr=r(Qje," \u2014 "),cU=n(Qje,"A",{href:!0});var m$t=s(cU);nnr=r(m$t,"FlaubertForTokenClassification"),m$t.forEach(t),snr=r(Qje," (FlauBERT model)"),Qje.forEach(t),lnr=i(K),VF=n(K,"LI",{});var Wje=s(VF);Lbe=n(Wje,"STRONG",{});var g$t=s(Lbe);inr=r(g$t,"fnet"),g$t.forEach(t),dnr=r(Wje," \u2014 "),fU=n(Wje,"A",{href:!0});var h$t=s(fU);cnr=r(h$t,"FNetForTokenClassification"),h$t.forEach(t),fnr=r(Wje," (FNet model)"),Wje.forEach(t),mnr=i(K),XF=n(K,"LI",{});var Uje=s(XF);xbe=n(Uje,"STRONG",{});var p$t=s(xbe);gnr=r(p$t,"funnel"),p$t.forEach(t),hnr=r(Uje," \u2014 "),mU=n(Uje,"A",{href:!0});var u$t=s(mU);pnr=r(u$t,"FunnelForTokenClassification"),u$t.forEach(t),unr=r(Uje," (Funnel Transformer model)"),Uje.forEach(t),_nr=i(K),zF=n(K,"LI",{});var Hje=s(zF);$be=n(Hje,"STRONG",{});var _$t=s($be);bnr=r(_$t,"gpt2"),_$t.forEach(t),vnr=r(Hje," \u2014 "),gU=n(Hje,"A",{href:!0});var b$t=s(gU);Fnr=r(b$t,"GPT2ForTokenClassification"),b$t.forEach(t),Tnr=r(Hje," (OpenAI GPT-2 model)"),Hje.forEach(t),Mnr=i(K),QF=n(K,"LI",{});var Jje=s(QF);kbe=n(Jje,"STRONG",{});var v$t=s(kbe);Enr=r(v$t,"ibert"),v$t.forEach(t),Cnr=r(Jje," \u2014 "),hU=n(Jje,"A",{href:!0});var F$t=s(hU);wnr=r(F$t,"IBertForTokenClassification"),F$t.forEach(t),Anr=r(Jje," (I-BERT model)"),Jje.forEach(t),ynr=i(K),WF=n(K,"LI",{});var Yje=s(WF);Sbe=n(Yje,"STRONG",{});var T$t=s(Sbe);Lnr=r(T$t,"layoutlm"),T$t.forEach(t),xnr=r(Yje," \u2014 "),pU=n(Yje,"A",{href:!0});var M$t=s(pU);$nr=r(M$t,"LayoutLMForTokenClassification"),M$t.forEach(t),knr=r(Yje," (LayoutLM model)"),Yje.forEach(t),Snr=i(K),UF=n(K,"LI",{});var Kje=s(UF);Rbe=n(Kje,"STRONG",{});var E$t=s(Rbe);Rnr=r(E$t,"layoutlmv2"),E$t.forEach(t),Pnr=r(Kje," \u2014 "),uU=n(Kje,"A",{href:!0});var C$t=s(uU);Bnr=r(C$t,"LayoutLMv2ForTokenClassification"),C$t.forEach(t),Inr=r(Kje," (LayoutLMv2 model)"),Kje.forEach(t),Nnr=i(K),HF=n(K,"LI",{});var Zje=s(HF);Pbe=n(Zje,"STRONG",{});var w$t=s(Pbe);qnr=r(w$t,"layoutlmv3"),w$t.forEach(t),jnr=r(Zje," \u2014 "),_U=n(Zje,"A",{href:!0});var A$t=s(_U);Dnr=r(A$t,"LayoutLMv3ForTokenClassification"),A$t.forEach(t),Gnr=r(Zje," (LayoutLMv3 model)"),Zje.forEach(t),Onr=i(K),JF=n(K,"LI",{});var eDe=s(JF);Bbe=n(eDe,"STRONG",{});var y$t=s(Bbe);Vnr=r(y$t,"longformer"),y$t.forEach(t),Xnr=r(eDe," \u2014 "),bU=n(eDe,"A",{href:!0});var L$t=s(bU);znr=r(L$t,"LongformerForTokenClassification"),L$t.forEach(t),Qnr=r(eDe," (Longformer model)"),eDe.forEach(t),Wnr=i(K),YF=n(K,"LI",{});var oDe=s(YF);Ibe=n(oDe,"STRONG",{});var x$t=s(Ibe);Unr=r(x$t,"luke"),x$t.forEach(t),Hnr=r(oDe," \u2014 "),vU=n(oDe,"A",{href:!0});var $$t=s(vU);Jnr=r($$t,"LukeForTokenClassification"),$$t.forEach(t),Ynr=r(oDe," (LUKE model)"),oDe.forEach(t),Knr=i(K),KF=n(K,"LI",{});var rDe=s(KF);Nbe=n(rDe,"STRONG",{});var k$t=s(Nbe);Znr=r(k$t,"megatron-bert"),k$t.forEach(t),esr=r(rDe," \u2014 "),FU=n(rDe,"A",{href:!0});var S$t=s(FU);osr=r(S$t,"MegatronBertForTokenClassification"),S$t.forEach(t),rsr=r(rDe," (Megatron-BERT model)"),rDe.forEach(t),tsr=i(K),ZF=n(K,"LI",{});var tDe=s(ZF);qbe=n(tDe,"STRONG",{});var R$t=s(qbe);asr=r(R$t,"mobilebert"),R$t.forEach(t),nsr=r(tDe," \u2014 "),TU=n(tDe,"A",{href:!0});var P$t=s(TU);ssr=r(P$t,"MobileBertForTokenClassification"),P$t.forEach(t),lsr=r(tDe," (MobileBERT model)"),tDe.forEach(t),isr=i(K),eT=n(K,"LI",{});var aDe=s(eT);jbe=n(aDe,"STRONG",{});var B$t=s(jbe);dsr=r(B$t,"mpnet"),B$t.forEach(t),csr=r(aDe," \u2014 "),MU=n(aDe,"A",{href:!0});var I$t=s(MU);fsr=r(I$t,"MPNetForTokenClassification"),I$t.forEach(t),msr=r(aDe," (MPNet model)"),aDe.forEach(t),gsr=i(K),oT=n(K,"LI",{});var nDe=s(oT);Dbe=n(nDe,"STRONG",{});var N$t=s(Dbe);hsr=r(N$t,"nezha"),N$t.forEach(t),psr=r(nDe," \u2014 "),EU=n(nDe,"A",{href:!0});var q$t=s(EU);usr=r(q$t,"NezhaForTokenClassification"),q$t.forEach(t),_sr=r(nDe," (Nezha model)"),nDe.forEach(t),bsr=i(K),rT=n(K,"LI",{});var sDe=s(rT);Gbe=n(sDe,"STRONG",{});var j$t=s(Gbe);vsr=r(j$t,"nystromformer"),j$t.forEach(t),Fsr=r(sDe," \u2014 "),CU=n(sDe,"A",{href:!0});var D$t=s(CU);Tsr=r(D$t,"NystromformerForTokenClassification"),D$t.forEach(t),Msr=r(sDe," (Nystr\xF6mformer model)"),sDe.forEach(t),Esr=i(K),tT=n(K,"LI",{});var lDe=s(tT);Obe=n(lDe,"STRONG",{});var G$t=s(Obe);Csr=r(G$t,"qdqbert"),G$t.forEach(t),wsr=r(lDe," \u2014 "),wU=n(lDe,"A",{href:!0});var O$t=s(wU);Asr=r(O$t,"QDQBertForTokenClassification"),O$t.forEach(t),ysr=r(lDe," (QDQBert model)"),lDe.forEach(t),Lsr=i(K),aT=n(K,"LI",{});var iDe=s(aT);Vbe=n(iDe,"STRONG",{});var V$t=s(Vbe);xsr=r(V$t,"rembert"),V$t.forEach(t),$sr=r(iDe," \u2014 "),AU=n(iDe,"A",{href:!0});var X$t=s(AU);ksr=r(X$t,"RemBertForTokenClassification"),X$t.forEach(t),Ssr=r(iDe," (RemBERT model)"),iDe.forEach(t),Rsr=i(K),nT=n(K,"LI",{});var dDe=s(nT);Xbe=n(dDe,"STRONG",{});var z$t=s(Xbe);Psr=r(z$t,"roberta"),z$t.forEach(t),Bsr=r(dDe," \u2014 "),yU=n(dDe,"A",{href:!0});var Q$t=s(yU);Isr=r(Q$t,"RobertaForTokenClassification"),Q$t.forEach(t),Nsr=r(dDe," (RoBERTa model)"),dDe.forEach(t),qsr=i(K),sT=n(K,"LI",{});var cDe=s(sT);zbe=n(cDe,"STRONG",{});var W$t=s(zbe);jsr=r(W$t,"roformer"),W$t.forEach(t),Dsr=r(cDe," \u2014 "),LU=n(cDe,"A",{href:!0});var U$t=s(LU);Gsr=r(U$t,"RoFormerForTokenClassification"),U$t.forEach(t),Osr=r(cDe," (RoFormer model)"),cDe.forEach(t),Vsr=i(K),lT=n(K,"LI",{});var fDe=s(lT);Qbe=n(fDe,"STRONG",{});var H$t=s(Qbe);Xsr=r(H$t,"squeezebert"),H$t.forEach(t),zsr=r(fDe," \u2014 "),xU=n(fDe,"A",{href:!0});var J$t=s(xU);Qsr=r(J$t,"SqueezeBertForTokenClassification"),J$t.forEach(t),Wsr=r(fDe," (SqueezeBERT model)"),fDe.forEach(t),Usr=i(K),iT=n(K,"LI",{});var mDe=s(iT);Wbe=n(mDe,"STRONG",{});var Y$t=s(Wbe);Hsr=r(Y$t,"xlm"),Y$t.forEach(t),Jsr=r(mDe," \u2014 "),$U=n(mDe,"A",{href:!0});var K$t=s($U);Ysr=r(K$t,"XLMForTokenClassification"),K$t.forEach(t),Ksr=r(mDe," (XLM model)"),mDe.forEach(t),Zsr=i(K),dT=n(K,"LI",{});var gDe=s(dT);Ube=n(gDe,"STRONG",{});var Z$t=s(Ube);elr=r(Z$t,"xlm-roberta"),Z$t.forEach(t),olr=r(gDe," \u2014 "),kU=n(gDe,"A",{href:!0});var ekt=s(kU);rlr=r(ekt,"XLMRobertaForTokenClassification"),ekt.forEach(t),tlr=r(gDe," (XLM-RoBERTa model)"),gDe.forEach(t),alr=i(K),cT=n(K,"LI",{});var hDe=s(cT);Hbe=n(hDe,"STRONG",{});var okt=s(Hbe);nlr=r(okt,"xlm-roberta-xl"),okt.forEach(t),slr=r(hDe," \u2014 "),SU=n(hDe,"A",{href:!0});var rkt=s(SU);llr=r(rkt,"XLMRobertaXLForTokenClassification"),rkt.forEach(t),ilr=r(hDe," (XLM-RoBERTa-XL model)"),hDe.forEach(t),dlr=i(K),fT=n(K,"LI",{});var pDe=s(fT);Jbe=n(pDe,"STRONG",{});var tkt=s(Jbe);clr=r(tkt,"xlnet"),tkt.forEach(t),flr=r(pDe," \u2014 "),RU=n(pDe,"A",{href:!0});var akt=s(RU);mlr=r(akt,"XLNetForTokenClassification"),akt.forEach(t),glr=r(pDe," (XLNet model)"),pDe.forEach(t),hlr=i(K),mT=n(K,"LI",{});var uDe=s(mT);Ybe=n(uDe,"STRONG",{});var nkt=s(Ybe);plr=r(nkt,"yoso"),nkt.forEach(t),ulr=r(uDe," \u2014 "),PU=n(uDe,"A",{href:!0});var skt=s(PU);_lr=r(skt,"YosoForTokenClassification"),skt.forEach(t),blr=r(uDe," (YOSO model)"),uDe.forEach(t),K.forEach(t),vlr=i(wa),gT=n(wa,"P",{});var _De=s(gT);Flr=r(_De,"The model is set in evaluation mode by default using "),Kbe=n(_De,"CODE",{});var lkt=s(Kbe);Tlr=r(lkt,"model.eval()"),lkt.forEach(t),Mlr=r(_De,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zbe=n(_De,"CODE",{});var ikt=s(Zbe);Elr=r(ikt,"model.train()"),ikt.forEach(t),_De.forEach(t),Clr=i(wa),T(hT.$$.fragment,wa),wa.forEach(t),yl.forEach(t),cHe=i(f),Bd=n(f,"H2",{class:!0});var MYe=s(Bd);pT=n(MYe,"A",{id:!0,class:!0,href:!0});var dkt=s(pT);eve=n(dkt,"SPAN",{});var ckt=s(eve);T(U9.$$.fragment,ckt),ckt.forEach(t),dkt.forEach(t),wlr=i(MYe),ove=n(MYe,"SPAN",{});var fkt=s(ove);Alr=r(fkt,"AutoModelForQuestionAnswering"),fkt.forEach(t),MYe.forEach(t),fHe=i(f),Vo=n(f,"DIV",{class:!0});var Ll=s(Vo);T(H9.$$.fragment,Ll),ylr=i(Ll),Id=n(Ll,"P",{});var Rne=s(Id);Llr=r(Rne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BU=n(Rne,"A",{href:!0});var mkt=s(BU);xlr=r(mkt,"from_pretrained()"),mkt.forEach(t),$lr=r(Rne," class method or the "),IU=n(Rne,"A",{href:!0});var gkt=s(IU);klr=r(gkt,"from_config()"),gkt.forEach(t),Slr=r(Rne,` class
method.`),Rne.forEach(t),Rlr=i(Ll),J9=n(Ll,"P",{});var EYe=s(J9);Plr=r(EYe,"This class cannot be instantiated directly using "),rve=n(EYe,"CODE",{});var hkt=s(rve);Blr=r(hkt,"__init__()"),hkt.forEach(t),Ilr=r(EYe," (throws an error)."),EYe.forEach(t),Nlr=i(Ll),Et=n(Ll,"DIV",{class:!0});var Q7=s(Et);T(Y9.$$.fragment,Q7),qlr=i(Q7),tve=n(Q7,"P",{});var pkt=s(tve);jlr=r(pkt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pkt.forEach(t),Dlr=i(Q7),Nd=n(Q7,"P",{});var Pne=s(Nd);Glr=r(Pne,`Note:
Loading a model from its configuration file does `),ave=n(Pne,"STRONG",{});var ukt=s(ave);Olr=r(ukt,"not"),ukt.forEach(t),Vlr=r(Pne,` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=n(Pne,"A",{href:!0});var _kt=s(NU);Xlr=r(_kt,"from_pretrained()"),_kt.forEach(t),zlr=r(Pne," to load the model weights."),Pne.forEach(t),Qlr=i(Q7),T(uT.$$.fragment,Q7),Q7.forEach(t),Wlr=i(Ll),so=n(Ll,"DIV",{class:!0});var Aa=s(so);T(K9.$$.fragment,Aa),Ulr=i(Aa),nve=n(Aa,"P",{});var bkt=s(nve);Hlr=r(bkt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),bkt.forEach(t),Jlr=i(Aa),rn=n(Aa,"P",{});var W7=s(rn);Ylr=r(W7,"The model class to instantiate is selected based on the "),sve=n(W7,"CODE",{});var vkt=s(sve);Klr=r(vkt,"model_type"),vkt.forEach(t),Zlr=r(W7,` property of the config object (either
passed as an argument or loaded from `),lve=n(W7,"CODE",{});var Fkt=s(lve);eir=r(Fkt,"pretrained_model_name_or_path"),Fkt.forEach(t),oir=r(W7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=n(W7,"CODE",{});var Tkt=s(ive);rir=r(Tkt,"pretrained_model_name_or_path"),Tkt.forEach(t),tir=r(W7,":"),W7.forEach(t),air=i(Aa),V=n(Aa,"UL",{});var X=s(V);_T=n(X,"LI",{});var bDe=s(_T);dve=n(bDe,"STRONG",{});var Mkt=s(dve);nir=r(Mkt,"albert"),Mkt.forEach(t),sir=r(bDe," \u2014 "),qU=n(bDe,"A",{href:!0});var Ekt=s(qU);lir=r(Ekt,"AlbertForQuestionAnswering"),Ekt.forEach(t),iir=r(bDe," (ALBERT model)"),bDe.forEach(t),dir=i(X),bT=n(X,"LI",{});var vDe=s(bT);cve=n(vDe,"STRONG",{});var Ckt=s(cve);cir=r(Ckt,"bart"),Ckt.forEach(t),fir=r(vDe," \u2014 "),jU=n(vDe,"A",{href:!0});var wkt=s(jU);mir=r(wkt,"BartForQuestionAnswering"),wkt.forEach(t),gir=r(vDe," (BART model)"),vDe.forEach(t),hir=i(X),vT=n(X,"LI",{});var FDe=s(vT);fve=n(FDe,"STRONG",{});var Akt=s(fve);pir=r(Akt,"bert"),Akt.forEach(t),uir=r(FDe," \u2014 "),DU=n(FDe,"A",{href:!0});var ykt=s(DU);_ir=r(ykt,"BertForQuestionAnswering"),ykt.forEach(t),bir=r(FDe," (BERT model)"),FDe.forEach(t),vir=i(X),FT=n(X,"LI",{});var TDe=s(FT);mve=n(TDe,"STRONG",{});var Lkt=s(mve);Fir=r(Lkt,"big_bird"),Lkt.forEach(t),Tir=r(TDe," \u2014 "),GU=n(TDe,"A",{href:!0});var xkt=s(GU);Mir=r(xkt,"BigBirdForQuestionAnswering"),xkt.forEach(t),Eir=r(TDe," (BigBird model)"),TDe.forEach(t),Cir=i(X),TT=n(X,"LI",{});var MDe=s(TT);gve=n(MDe,"STRONG",{});var $kt=s(gve);wir=r($kt,"bigbird_pegasus"),$kt.forEach(t),Air=r(MDe," \u2014 "),OU=n(MDe,"A",{href:!0});var kkt=s(OU);yir=r(kkt,"BigBirdPegasusForQuestionAnswering"),kkt.forEach(t),Lir=r(MDe," (BigBird-Pegasus model)"),MDe.forEach(t),xir=i(X),MT=n(X,"LI",{});var EDe=s(MT);hve=n(EDe,"STRONG",{});var Skt=s(hve);$ir=r(Skt,"camembert"),Skt.forEach(t),kir=r(EDe," \u2014 "),VU=n(EDe,"A",{href:!0});var Rkt=s(VU);Sir=r(Rkt,"CamembertForQuestionAnswering"),Rkt.forEach(t),Rir=r(EDe," (CamemBERT model)"),EDe.forEach(t),Pir=i(X),ET=n(X,"LI",{});var CDe=s(ET);pve=n(CDe,"STRONG",{});var Pkt=s(pve);Bir=r(Pkt,"canine"),Pkt.forEach(t),Iir=r(CDe," \u2014 "),XU=n(CDe,"A",{href:!0});var Bkt=s(XU);Nir=r(Bkt,"CanineForQuestionAnswering"),Bkt.forEach(t),qir=r(CDe," (CANINE model)"),CDe.forEach(t),jir=i(X),CT=n(X,"LI",{});var wDe=s(CT);uve=n(wDe,"STRONG",{});var Ikt=s(uve);Dir=r(Ikt,"convbert"),Ikt.forEach(t),Gir=r(wDe," \u2014 "),zU=n(wDe,"A",{href:!0});var Nkt=s(zU);Oir=r(Nkt,"ConvBertForQuestionAnswering"),Nkt.forEach(t),Vir=r(wDe," (ConvBERT model)"),wDe.forEach(t),Xir=i(X),wT=n(X,"LI",{});var ADe=s(wT);_ve=n(ADe,"STRONG",{});var qkt=s(_ve);zir=r(qkt,"data2vec-text"),qkt.forEach(t),Qir=r(ADe," \u2014 "),QU=n(ADe,"A",{href:!0});var jkt=s(QU);Wir=r(jkt,"Data2VecTextForQuestionAnswering"),jkt.forEach(t),Uir=r(ADe," (Data2VecText model)"),ADe.forEach(t),Hir=i(X),AT=n(X,"LI",{});var yDe=s(AT);bve=n(yDe,"STRONG",{});var Dkt=s(bve);Jir=r(Dkt,"deberta"),Dkt.forEach(t),Yir=r(yDe," \u2014 "),WU=n(yDe,"A",{href:!0});var Gkt=s(WU);Kir=r(Gkt,"DebertaForQuestionAnswering"),Gkt.forEach(t),Zir=r(yDe," (DeBERTa model)"),yDe.forEach(t),edr=i(X),yT=n(X,"LI",{});var LDe=s(yT);vve=n(LDe,"STRONG",{});var Okt=s(vve);odr=r(Okt,"deberta-v2"),Okt.forEach(t),rdr=r(LDe," \u2014 "),UU=n(LDe,"A",{href:!0});var Vkt=s(UU);tdr=r(Vkt,"DebertaV2ForQuestionAnswering"),Vkt.forEach(t),adr=r(LDe," (DeBERTa-v2 model)"),LDe.forEach(t),ndr=i(X),LT=n(X,"LI",{});var xDe=s(LT);Fve=n(xDe,"STRONG",{});var Xkt=s(Fve);sdr=r(Xkt,"distilbert"),Xkt.forEach(t),ldr=r(xDe," \u2014 "),HU=n(xDe,"A",{href:!0});var zkt=s(HU);idr=r(zkt,"DistilBertForQuestionAnswering"),zkt.forEach(t),ddr=r(xDe," (DistilBERT model)"),xDe.forEach(t),cdr=i(X),xT=n(X,"LI",{});var $De=s(xT);Tve=n($De,"STRONG",{});var Qkt=s(Tve);fdr=r(Qkt,"electra"),Qkt.forEach(t),mdr=r($De," \u2014 "),JU=n($De,"A",{href:!0});var Wkt=s(JU);gdr=r(Wkt,"ElectraForQuestionAnswering"),Wkt.forEach(t),hdr=r($De," (ELECTRA model)"),$De.forEach(t),pdr=i(X),$T=n(X,"LI",{});var kDe=s($T);Mve=n(kDe,"STRONG",{});var Ukt=s(Mve);udr=r(Ukt,"flaubert"),Ukt.forEach(t),_dr=r(kDe," \u2014 "),YU=n(kDe,"A",{href:!0});var Hkt=s(YU);bdr=r(Hkt,"FlaubertForQuestionAnsweringSimple"),Hkt.forEach(t),vdr=r(kDe," (FlauBERT model)"),kDe.forEach(t),Fdr=i(X),kT=n(X,"LI",{});var SDe=s(kT);Eve=n(SDe,"STRONG",{});var Jkt=s(Eve);Tdr=r(Jkt,"fnet"),Jkt.forEach(t),Mdr=r(SDe," \u2014 "),KU=n(SDe,"A",{href:!0});var Ykt=s(KU);Edr=r(Ykt,"FNetForQuestionAnswering"),Ykt.forEach(t),Cdr=r(SDe," (FNet model)"),SDe.forEach(t),wdr=i(X),ST=n(X,"LI",{});var RDe=s(ST);Cve=n(RDe,"STRONG",{});var Kkt=s(Cve);Adr=r(Kkt,"funnel"),Kkt.forEach(t),ydr=r(RDe," \u2014 "),ZU=n(RDe,"A",{href:!0});var Zkt=s(ZU);Ldr=r(Zkt,"FunnelForQuestionAnswering"),Zkt.forEach(t),xdr=r(RDe," (Funnel Transformer model)"),RDe.forEach(t),$dr=i(X),RT=n(X,"LI",{});var PDe=s(RT);wve=n(PDe,"STRONG",{});var eSt=s(wve);kdr=r(eSt,"gptj"),eSt.forEach(t),Sdr=r(PDe," \u2014 "),eH=n(PDe,"A",{href:!0});var oSt=s(eH);Rdr=r(oSt,"GPTJForQuestionAnswering"),oSt.forEach(t),Pdr=r(PDe," (GPT-J model)"),PDe.forEach(t),Bdr=i(X),PT=n(X,"LI",{});var BDe=s(PT);Ave=n(BDe,"STRONG",{});var rSt=s(Ave);Idr=r(rSt,"ibert"),rSt.forEach(t),Ndr=r(BDe," \u2014 "),oH=n(BDe,"A",{href:!0});var tSt=s(oH);qdr=r(tSt,"IBertForQuestionAnswering"),tSt.forEach(t),jdr=r(BDe," (I-BERT model)"),BDe.forEach(t),Ddr=i(X),BT=n(X,"LI",{});var IDe=s(BT);yve=n(IDe,"STRONG",{});var aSt=s(yve);Gdr=r(aSt,"layoutlmv2"),aSt.forEach(t),Odr=r(IDe," \u2014 "),rH=n(IDe,"A",{href:!0});var nSt=s(rH);Vdr=r(nSt,"LayoutLMv2ForQuestionAnswering"),nSt.forEach(t),Xdr=r(IDe," (LayoutLMv2 model)"),IDe.forEach(t),zdr=i(X),IT=n(X,"LI",{});var NDe=s(IT);Lve=n(NDe,"STRONG",{});var sSt=s(Lve);Qdr=r(sSt,"layoutlmv3"),sSt.forEach(t),Wdr=r(NDe," \u2014 "),tH=n(NDe,"A",{href:!0});var lSt=s(tH);Udr=r(lSt,"LayoutLMv3ForQuestionAnswering"),lSt.forEach(t),Hdr=r(NDe," (LayoutLMv3 model)"),NDe.forEach(t),Jdr=i(X),NT=n(X,"LI",{});var qDe=s(NT);xve=n(qDe,"STRONG",{});var iSt=s(xve);Ydr=r(iSt,"led"),iSt.forEach(t),Kdr=r(qDe," \u2014 "),aH=n(qDe,"A",{href:!0});var dSt=s(aH);Zdr=r(dSt,"LEDForQuestionAnswering"),dSt.forEach(t),ecr=r(qDe," (LED model)"),qDe.forEach(t),ocr=i(X),qT=n(X,"LI",{});var jDe=s(qT);$ve=n(jDe,"STRONG",{});var cSt=s($ve);rcr=r(cSt,"longformer"),cSt.forEach(t),tcr=r(jDe," \u2014 "),nH=n(jDe,"A",{href:!0});var fSt=s(nH);acr=r(fSt,"LongformerForQuestionAnswering"),fSt.forEach(t),ncr=r(jDe," (Longformer model)"),jDe.forEach(t),scr=i(X),jT=n(X,"LI",{});var DDe=s(jT);kve=n(DDe,"STRONG",{});var mSt=s(kve);lcr=r(mSt,"luke"),mSt.forEach(t),icr=r(DDe," \u2014 "),sH=n(DDe,"A",{href:!0});var gSt=s(sH);dcr=r(gSt,"LukeForQuestionAnswering"),gSt.forEach(t),ccr=r(DDe," (LUKE model)"),DDe.forEach(t),fcr=i(X),DT=n(X,"LI",{});var GDe=s(DT);Sve=n(GDe,"STRONG",{});var hSt=s(Sve);mcr=r(hSt,"lxmert"),hSt.forEach(t),gcr=r(GDe," \u2014 "),lH=n(GDe,"A",{href:!0});var pSt=s(lH);hcr=r(pSt,"LxmertForQuestionAnswering"),pSt.forEach(t),pcr=r(GDe," (LXMERT model)"),GDe.forEach(t),ucr=i(X),GT=n(X,"LI",{});var ODe=s(GT);Rve=n(ODe,"STRONG",{});var uSt=s(Rve);_cr=r(uSt,"mbart"),uSt.forEach(t),bcr=r(ODe," \u2014 "),iH=n(ODe,"A",{href:!0});var _St=s(iH);vcr=r(_St,"MBartForQuestionAnswering"),_St.forEach(t),Fcr=r(ODe," (mBART model)"),ODe.forEach(t),Tcr=i(X),OT=n(X,"LI",{});var VDe=s(OT);Pve=n(VDe,"STRONG",{});var bSt=s(Pve);Mcr=r(bSt,"megatron-bert"),bSt.forEach(t),Ecr=r(VDe," \u2014 "),dH=n(VDe,"A",{href:!0});var vSt=s(dH);Ccr=r(vSt,"MegatronBertForQuestionAnswering"),vSt.forEach(t),wcr=r(VDe," (Megatron-BERT model)"),VDe.forEach(t),Acr=i(X),VT=n(X,"LI",{});var XDe=s(VT);Bve=n(XDe,"STRONG",{});var FSt=s(Bve);ycr=r(FSt,"mobilebert"),FSt.forEach(t),Lcr=r(XDe," \u2014 "),cH=n(XDe,"A",{href:!0});var TSt=s(cH);xcr=r(TSt,"MobileBertForQuestionAnswering"),TSt.forEach(t),$cr=r(XDe," (MobileBERT model)"),XDe.forEach(t),kcr=i(X),XT=n(X,"LI",{});var zDe=s(XT);Ive=n(zDe,"STRONG",{});var MSt=s(Ive);Scr=r(MSt,"mpnet"),MSt.forEach(t),Rcr=r(zDe," \u2014 "),fH=n(zDe,"A",{href:!0});var ESt=s(fH);Pcr=r(ESt,"MPNetForQuestionAnswering"),ESt.forEach(t),Bcr=r(zDe," (MPNet model)"),zDe.forEach(t),Icr=i(X),zT=n(X,"LI",{});var QDe=s(zT);Nve=n(QDe,"STRONG",{});var CSt=s(Nve);Ncr=r(CSt,"mvp"),CSt.forEach(t),qcr=r(QDe," \u2014 "),mH=n(QDe,"A",{href:!0});var wSt=s(mH);jcr=r(wSt,"MvpForQuestionAnswering"),wSt.forEach(t),Dcr=r(QDe," (MVP model)"),QDe.forEach(t),Gcr=i(X),QT=n(X,"LI",{});var WDe=s(QT);qve=n(WDe,"STRONG",{});var ASt=s(qve);Ocr=r(ASt,"nezha"),ASt.forEach(t),Vcr=r(WDe," \u2014 "),gH=n(WDe,"A",{href:!0});var ySt=s(gH);Xcr=r(ySt,"NezhaForQuestionAnswering"),ySt.forEach(t),zcr=r(WDe," (Nezha model)"),WDe.forEach(t),Qcr=i(X),WT=n(X,"LI",{});var UDe=s(WT);jve=n(UDe,"STRONG",{});var LSt=s(jve);Wcr=r(LSt,"nystromformer"),LSt.forEach(t),Ucr=r(UDe," \u2014 "),hH=n(UDe,"A",{href:!0});var xSt=s(hH);Hcr=r(xSt,"NystromformerForQuestionAnswering"),xSt.forEach(t),Jcr=r(UDe," (Nystr\xF6mformer model)"),UDe.forEach(t),Ycr=i(X),UT=n(X,"LI",{});var HDe=s(UT);Dve=n(HDe,"STRONG",{});var $St=s(Dve);Kcr=r($St,"qdqbert"),$St.forEach(t),Zcr=r(HDe," \u2014 "),pH=n(HDe,"A",{href:!0});var kSt=s(pH);efr=r(kSt,"QDQBertForQuestionAnswering"),kSt.forEach(t),ofr=r(HDe," (QDQBert model)"),HDe.forEach(t),rfr=i(X),HT=n(X,"LI",{});var JDe=s(HT);Gve=n(JDe,"STRONG",{});var SSt=s(Gve);tfr=r(SSt,"reformer"),SSt.forEach(t),afr=r(JDe," \u2014 "),uH=n(JDe,"A",{href:!0});var RSt=s(uH);nfr=r(RSt,"ReformerForQuestionAnswering"),RSt.forEach(t),sfr=r(JDe," (Reformer model)"),JDe.forEach(t),lfr=i(X),JT=n(X,"LI",{});var YDe=s(JT);Ove=n(YDe,"STRONG",{});var PSt=s(Ove);ifr=r(PSt,"rembert"),PSt.forEach(t),dfr=r(YDe," \u2014 "),_H=n(YDe,"A",{href:!0});var BSt=s(_H);cfr=r(BSt,"RemBertForQuestionAnswering"),BSt.forEach(t),ffr=r(YDe," (RemBERT model)"),YDe.forEach(t),mfr=i(X),YT=n(X,"LI",{});var KDe=s(YT);Vve=n(KDe,"STRONG",{});var ISt=s(Vve);gfr=r(ISt,"roberta"),ISt.forEach(t),hfr=r(KDe," \u2014 "),bH=n(KDe,"A",{href:!0});var NSt=s(bH);pfr=r(NSt,"RobertaForQuestionAnswering"),NSt.forEach(t),ufr=r(KDe," (RoBERTa model)"),KDe.forEach(t),_fr=i(X),KT=n(X,"LI",{});var ZDe=s(KT);Xve=n(ZDe,"STRONG",{});var qSt=s(Xve);bfr=r(qSt,"roformer"),qSt.forEach(t),vfr=r(ZDe," \u2014 "),vH=n(ZDe,"A",{href:!0});var jSt=s(vH);Ffr=r(jSt,"RoFormerForQuestionAnswering"),jSt.forEach(t),Tfr=r(ZDe," (RoFormer model)"),ZDe.forEach(t),Mfr=i(X),ZT=n(X,"LI",{});var eGe=s(ZT);zve=n(eGe,"STRONG",{});var DSt=s(zve);Efr=r(DSt,"splinter"),DSt.forEach(t),Cfr=r(eGe," \u2014 "),FH=n(eGe,"A",{href:!0});var GSt=s(FH);wfr=r(GSt,"SplinterForQuestionAnswering"),GSt.forEach(t),Afr=r(eGe," (Splinter model)"),eGe.forEach(t),yfr=i(X),e8=n(X,"LI",{});var oGe=s(e8);Qve=n(oGe,"STRONG",{});var OSt=s(Qve);Lfr=r(OSt,"squeezebert"),OSt.forEach(t),xfr=r(oGe," \u2014 "),TH=n(oGe,"A",{href:!0});var VSt=s(TH);$fr=r(VSt,"SqueezeBertForQuestionAnswering"),VSt.forEach(t),kfr=r(oGe," (SqueezeBERT model)"),oGe.forEach(t),Sfr=i(X),o8=n(X,"LI",{});var rGe=s(o8);Wve=n(rGe,"STRONG",{});var XSt=s(Wve);Rfr=r(XSt,"xlm"),XSt.forEach(t),Pfr=r(rGe," \u2014 "),MH=n(rGe,"A",{href:!0});var zSt=s(MH);Bfr=r(zSt,"XLMForQuestionAnsweringSimple"),zSt.forEach(t),Ifr=r(rGe," (XLM model)"),rGe.forEach(t),Nfr=i(X),r8=n(X,"LI",{});var tGe=s(r8);Uve=n(tGe,"STRONG",{});var QSt=s(Uve);qfr=r(QSt,"xlm-roberta"),QSt.forEach(t),jfr=r(tGe," \u2014 "),EH=n(tGe,"A",{href:!0});var WSt=s(EH);Dfr=r(WSt,"XLMRobertaForQuestionAnswering"),WSt.forEach(t),Gfr=r(tGe," (XLM-RoBERTa model)"),tGe.forEach(t),Ofr=i(X),t8=n(X,"LI",{});var aGe=s(t8);Hve=n(aGe,"STRONG",{});var USt=s(Hve);Vfr=r(USt,"xlm-roberta-xl"),USt.forEach(t),Xfr=r(aGe," \u2014 "),CH=n(aGe,"A",{href:!0});var HSt=s(CH);zfr=r(HSt,"XLMRobertaXLForQuestionAnswering"),HSt.forEach(t),Qfr=r(aGe," (XLM-RoBERTa-XL model)"),aGe.forEach(t),Wfr=i(X),a8=n(X,"LI",{});var nGe=s(a8);Jve=n(nGe,"STRONG",{});var JSt=s(Jve);Ufr=r(JSt,"xlnet"),JSt.forEach(t),Hfr=r(nGe," \u2014 "),wH=n(nGe,"A",{href:!0});var YSt=s(wH);Jfr=r(YSt,"XLNetForQuestionAnsweringSimple"),YSt.forEach(t),Yfr=r(nGe," (XLNet model)"),nGe.forEach(t),Kfr=i(X),n8=n(X,"LI",{});var sGe=s(n8);Yve=n(sGe,"STRONG",{});var KSt=s(Yve);Zfr=r(KSt,"yoso"),KSt.forEach(t),emr=r(sGe," \u2014 "),AH=n(sGe,"A",{href:!0});var ZSt=s(AH);omr=r(ZSt,"YosoForQuestionAnswering"),ZSt.forEach(t),rmr=r(sGe," (YOSO model)"),sGe.forEach(t),X.forEach(t),tmr=i(Aa),s8=n(Aa,"P",{});var lGe=s(s8);amr=r(lGe,"The model is set in evaluation mode by default using "),Kve=n(lGe,"CODE",{});var eRt=s(Kve);nmr=r(eRt,"model.eval()"),eRt.forEach(t),smr=r(lGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zve=n(lGe,"CODE",{});var oRt=s(Zve);lmr=r(oRt,"model.train()"),oRt.forEach(t),lGe.forEach(t),imr=i(Aa),T(l8.$$.fragment,Aa),Aa.forEach(t),Ll.forEach(t),mHe=i(f),qd=n(f,"H2",{class:!0});var CYe=s(qd);i8=n(CYe,"A",{id:!0,class:!0,href:!0});var rRt=s(i8);eFe=n(rRt,"SPAN",{});var tRt=s(eFe);T(Z9.$$.fragment,tRt),tRt.forEach(t),rRt.forEach(t),dmr=i(CYe),oFe=n(CYe,"SPAN",{});var aRt=s(oFe);cmr=r(aRt,"AutoModelForTableQuestionAnswering"),aRt.forEach(t),CYe.forEach(t),gHe=i(f),Xo=n(f,"DIV",{class:!0});var xl=s(Xo);T(ex.$$.fragment,xl),fmr=i(xl),jd=n(xl,"P",{});var Bne=s(jd);mmr=r(Bne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yH=n(Bne,"A",{href:!0});var nRt=s(yH);gmr=r(nRt,"from_pretrained()"),nRt.forEach(t),hmr=r(Bne," class method or the "),LH=n(Bne,"A",{href:!0});var sRt=s(LH);pmr=r(sRt,"from_config()"),sRt.forEach(t),umr=r(Bne,` class
method.`),Bne.forEach(t),_mr=i(xl),ox=n(xl,"P",{});var wYe=s(ox);bmr=r(wYe,"This class cannot be instantiated directly using "),rFe=n(wYe,"CODE",{});var lRt=s(rFe);vmr=r(lRt,"__init__()"),lRt.forEach(t),Fmr=r(wYe," (throws an error)."),wYe.forEach(t),Tmr=i(xl),Ct=n(xl,"DIV",{class:!0});var U7=s(Ct);T(rx.$$.fragment,U7),Mmr=i(U7),tFe=n(U7,"P",{});var iRt=s(tFe);Emr=r(iRt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),iRt.forEach(t),Cmr=i(U7),Dd=n(U7,"P",{});var Ine=s(Dd);wmr=r(Ine,`Note:
Loading a model from its configuration file does `),aFe=n(Ine,"STRONG",{});var dRt=s(aFe);Amr=r(dRt,"not"),dRt.forEach(t),ymr=r(Ine,` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=n(Ine,"A",{href:!0});var cRt=s(xH);Lmr=r(cRt,"from_pretrained()"),cRt.forEach(t),xmr=r(Ine," to load the model weights."),Ine.forEach(t),$mr=i(U7),T(d8.$$.fragment,U7),U7.forEach(t),kmr=i(xl),lo=n(xl,"DIV",{class:!0});var ya=s(lo);T(tx.$$.fragment,ya),Smr=i(ya),nFe=n(ya,"P",{});var fRt=s(nFe);Rmr=r(fRt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),fRt.forEach(t),Pmr=i(ya),tn=n(ya,"P",{});var H7=s(tn);Bmr=r(H7,"The model class to instantiate is selected based on the "),sFe=n(H7,"CODE",{});var mRt=s(sFe);Imr=r(mRt,"model_type"),mRt.forEach(t),Nmr=r(H7,` property of the config object (either
passed as an argument or loaded from `),lFe=n(H7,"CODE",{});var gRt=s(lFe);qmr=r(gRt,"pretrained_model_name_or_path"),gRt.forEach(t),jmr=r(H7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=n(H7,"CODE",{});var hRt=s(iFe);Dmr=r(hRt,"pretrained_model_name_or_path"),hRt.forEach(t),Gmr=r(H7,":"),H7.forEach(t),Omr=i(ya),dFe=n(ya,"UL",{});var pRt=s(dFe);c8=n(pRt,"LI",{});var iGe=s(c8);cFe=n(iGe,"STRONG",{});var uRt=s(cFe);Vmr=r(uRt,"tapas"),uRt.forEach(t),Xmr=r(iGe," \u2014 "),$H=n(iGe,"A",{href:!0});var _Rt=s($H);zmr=r(_Rt,"TapasForQuestionAnswering"),_Rt.forEach(t),Qmr=r(iGe," (TAPAS model)"),iGe.forEach(t),pRt.forEach(t),Wmr=i(ya),f8=n(ya,"P",{});var dGe=s(f8);Umr=r(dGe,"The model is set in evaluation mode by default using "),fFe=n(dGe,"CODE",{});var bRt=s(fFe);Hmr=r(bRt,"model.eval()"),bRt.forEach(t),Jmr=r(dGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mFe=n(dGe,"CODE",{});var vRt=s(mFe);Ymr=r(vRt,"model.train()"),vRt.forEach(t),dGe.forEach(t),Kmr=i(ya),T(m8.$$.fragment,ya),ya.forEach(t),xl.forEach(t),hHe=i(f),Gd=n(f,"H2",{class:!0});var AYe=s(Gd);g8=n(AYe,"A",{id:!0,class:!0,href:!0});var FRt=s(g8);gFe=n(FRt,"SPAN",{});var TRt=s(gFe);T(ax.$$.fragment,TRt),TRt.forEach(t),FRt.forEach(t),Zmr=i(AYe),hFe=n(AYe,"SPAN",{});var MRt=s(hFe);egr=r(MRt,"AutoModelForDocumentQuestionAnswering"),MRt.forEach(t),AYe.forEach(t),pHe=i(f),zo=n(f,"DIV",{class:!0});var $l=s(zo);T(nx.$$.fragment,$l),ogr=i($l),Od=n($l,"P",{});var Nne=s(Od);rgr=r(Nne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),kH=n(Nne,"A",{href:!0});var ERt=s(kH);tgr=r(ERt,"from_pretrained()"),ERt.forEach(t),agr=r(Nne," class method or the "),SH=n(Nne,"A",{href:!0});var CRt=s(SH);ngr=r(CRt,"from_config()"),CRt.forEach(t),sgr=r(Nne,` class
method.`),Nne.forEach(t),lgr=i($l),sx=n($l,"P",{});var yYe=s(sx);igr=r(yYe,"This class cannot be instantiated directly using "),pFe=n(yYe,"CODE",{});var wRt=s(pFe);dgr=r(wRt,"__init__()"),wRt.forEach(t),cgr=r(yYe," (throws an error)."),yYe.forEach(t),fgr=i($l),wt=n($l,"DIV",{class:!0});var J7=s(wt);T(lx.$$.fragment,J7),mgr=i(J7),uFe=n(J7,"P",{});var ARt=s(uFe);ggr=r(ARt,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),ARt.forEach(t),hgr=i(J7),Vd=n(J7,"P",{});var qne=s(Vd);pgr=r(qne,`Note:
Loading a model from its configuration file does `),_Fe=n(qne,"STRONG",{});var yRt=s(_Fe);ugr=r(yRt,"not"),yRt.forEach(t),_gr=r(qne,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(qne,"A",{href:!0});var LRt=s(RH);bgr=r(LRt,"from_pretrained()"),LRt.forEach(t),vgr=r(qne," to load the model weights."),qne.forEach(t),Fgr=i(J7),T(h8.$$.fragment,J7),J7.forEach(t),Tgr=i($l),io=n($l,"DIV",{class:!0});var La=s(io);T(ix.$$.fragment,La),Mgr=i(La),bFe=n(La,"P",{});var xRt=s(bFe);Egr=r(xRt,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),xRt.forEach(t),Cgr=i(La),an=n(La,"P",{});var Y7=s(an);wgr=r(Y7,"The model class to instantiate is selected based on the "),vFe=n(Y7,"CODE",{});var $Rt=s(vFe);Agr=r($Rt,"model_type"),$Rt.forEach(t),ygr=r(Y7,` property of the config object (either
passed as an argument or loaded from `),FFe=n(Y7,"CODE",{});var kRt=s(FFe);Lgr=r(kRt,"pretrained_model_name_or_path"),kRt.forEach(t),xgr=r(Y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=n(Y7,"CODE",{});var SRt=s(TFe);$gr=r(SRt,"pretrained_model_name_or_path"),SRt.forEach(t),kgr=r(Y7,":"),Y7.forEach(t),Sgr=i(La),dx=n(La,"UL",{});var LYe=s(dx);p8=n(LYe,"LI",{});var cGe=s(p8);MFe=n(cGe,"STRONG",{});var RRt=s(MFe);Rgr=r(RRt,"layoutlmv2"),RRt.forEach(t),Pgr=r(cGe," \u2014 "),PH=n(cGe,"A",{href:!0});var PRt=s(PH);Bgr=r(PRt,"LayoutLMv2ForQuestionAnswering"),PRt.forEach(t),Igr=r(cGe," (LayoutLMv2 model)"),cGe.forEach(t),Ngr=i(LYe),u8=n(LYe,"LI",{});var fGe=s(u8);EFe=n(fGe,"STRONG",{});var BRt=s(EFe);qgr=r(BRt,"layoutlmv3"),BRt.forEach(t),jgr=r(fGe," \u2014 "),BH=n(fGe,"A",{href:!0});var IRt=s(BH);Dgr=r(IRt,"LayoutLMv3ForQuestionAnswering"),IRt.forEach(t),Ggr=r(fGe," (LayoutLMv3 model)"),fGe.forEach(t),LYe.forEach(t),Ogr=i(La),_8=n(La,"P",{});var mGe=s(_8);Vgr=r(mGe,"The model is set in evaluation mode by default using "),CFe=n(mGe,"CODE",{});var NRt=s(CFe);Xgr=r(NRt,"model.eval()"),NRt.forEach(t),zgr=r(mGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wFe=n(mGe,"CODE",{});var qRt=s(wFe);Qgr=r(qRt,"model.train()"),qRt.forEach(t),mGe.forEach(t),Wgr=i(La),T(b8.$$.fragment,La),La.forEach(t),$l.forEach(t),uHe=i(f),Xd=n(f,"H2",{class:!0});var xYe=s(Xd);v8=n(xYe,"A",{id:!0,class:!0,href:!0});var jRt=s(v8);AFe=n(jRt,"SPAN",{});var DRt=s(AFe);T(cx.$$.fragment,DRt),DRt.forEach(t),jRt.forEach(t),Ugr=i(xYe),yFe=n(xYe,"SPAN",{});var GRt=s(yFe);Hgr=r(GRt,"AutoModelForImageClassification"),GRt.forEach(t),xYe.forEach(t),_He=i(f),Qo=n(f,"DIV",{class:!0});var kl=s(Qo);T(fx.$$.fragment,kl),Jgr=i(kl),zd=n(kl,"P",{});var jne=s(zd);Ygr=r(jne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),IH=n(jne,"A",{href:!0});var ORt=s(IH);Kgr=r(ORt,"from_pretrained()"),ORt.forEach(t),Zgr=r(jne," class method or the "),NH=n(jne,"A",{href:!0});var VRt=s(NH);ehr=r(VRt,"from_config()"),VRt.forEach(t),ohr=r(jne,` class
method.`),jne.forEach(t),rhr=i(kl),mx=n(kl,"P",{});var $Ye=s(mx);thr=r($Ye,"This class cannot be instantiated directly using "),LFe=n($Ye,"CODE",{});var XRt=s(LFe);ahr=r(XRt,"__init__()"),XRt.forEach(t),nhr=r($Ye," (throws an error)."),$Ye.forEach(t),shr=i(kl),At=n(kl,"DIV",{class:!0});var K7=s(At);T(gx.$$.fragment,K7),lhr=i(K7),xFe=n(K7,"P",{});var zRt=s(xFe);ihr=r(zRt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zRt.forEach(t),dhr=i(K7),Qd=n(K7,"P",{});var Dne=s(Qd);chr=r(Dne,`Note:
Loading a model from its configuration file does `),$Fe=n(Dne,"STRONG",{});var QRt=s($Fe);fhr=r(QRt,"not"),QRt.forEach(t),mhr=r(Dne,` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=n(Dne,"A",{href:!0});var WRt=s(qH);ghr=r(WRt,"from_pretrained()"),WRt.forEach(t),hhr=r(Dne," to load the model weights."),Dne.forEach(t),phr=i(K7),T(F8.$$.fragment,K7),K7.forEach(t),uhr=i(kl),co=n(kl,"DIV",{class:!0});var xa=s(co);T(hx.$$.fragment,xa),_hr=i(xa),kFe=n(xa,"P",{});var URt=s(kFe);bhr=r(URt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),URt.forEach(t),vhr=i(xa),nn=n(xa,"P",{});var Z7=s(nn);Fhr=r(Z7,"The model class to instantiate is selected based on the "),SFe=n(Z7,"CODE",{});var HRt=s(SFe);Thr=r(HRt,"model_type"),HRt.forEach(t),Mhr=r(Z7,` property of the config object (either
passed as an argument or loaded from `),RFe=n(Z7,"CODE",{});var JRt=s(RFe);Ehr=r(JRt,"pretrained_model_name_or_path"),JRt.forEach(t),Chr=r(Z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=n(Z7,"CODE",{});var YRt=s(PFe);whr=r(YRt,"pretrained_model_name_or_path"),YRt.forEach(t),Ahr=r(Z7,":"),Z7.forEach(t),yhr=i(xa),be=n(xa,"UL",{});var Fe=s(be);T8=n(Fe,"LI",{});var gGe=s(T8);BFe=n(gGe,"STRONG",{});var KRt=s(BFe);Lhr=r(KRt,"beit"),KRt.forEach(t),xhr=r(gGe," \u2014 "),jH=n(gGe,"A",{href:!0});var ZRt=s(jH);$hr=r(ZRt,"BeitForImageClassification"),ZRt.forEach(t),khr=r(gGe," (BEiT model)"),gGe.forEach(t),Shr=i(Fe),M8=n(Fe,"LI",{});var hGe=s(M8);IFe=n(hGe,"STRONG",{});var ePt=s(IFe);Rhr=r(ePt,"convnext"),ePt.forEach(t),Phr=r(hGe," \u2014 "),DH=n(hGe,"A",{href:!0});var oPt=s(DH);Bhr=r(oPt,"ConvNextForImageClassification"),oPt.forEach(t),Ihr=r(hGe," (ConvNeXT model)"),hGe.forEach(t),Nhr=i(Fe),E8=n(Fe,"LI",{});var pGe=s(E8);NFe=n(pGe,"STRONG",{});var rPt=s(NFe);qhr=r(rPt,"cvt"),rPt.forEach(t),jhr=r(pGe," \u2014 "),GH=n(pGe,"A",{href:!0});var tPt=s(GH);Dhr=r(tPt,"CvtForImageClassification"),tPt.forEach(t),Ghr=r(pGe," (CvT model)"),pGe.forEach(t),Ohr=i(Fe),C8=n(Fe,"LI",{});var uGe=s(C8);qFe=n(uGe,"STRONG",{});var aPt=s(qFe);Vhr=r(aPt,"data2vec-vision"),aPt.forEach(t),Xhr=r(uGe," \u2014 "),OH=n(uGe,"A",{href:!0});var nPt=s(OH);zhr=r(nPt,"Data2VecVisionForImageClassification"),nPt.forEach(t),Qhr=r(uGe," (Data2VecVision model)"),uGe.forEach(t),Whr=i(Fe),fl=n(Fe,"LI",{});var EP=s(fl);jFe=n(EP,"STRONG",{});var sPt=s(jFe);Uhr=r(sPt,"deit"),sPt.forEach(t),Hhr=r(EP," \u2014 "),VH=n(EP,"A",{href:!0});var lPt=s(VH);Jhr=r(lPt,"DeiTForImageClassification"),lPt.forEach(t),Yhr=r(EP," or "),XH=n(EP,"A",{href:!0});var iPt=s(XH);Khr=r(iPt,"DeiTForImageClassificationWithTeacher"),iPt.forEach(t),Zhr=r(EP," (DeiT model)"),EP.forEach(t),epr=i(Fe),w8=n(Fe,"LI",{});var _Ge=s(w8);DFe=n(_Ge,"STRONG",{});var dPt=s(DFe);opr=r(dPt,"imagegpt"),dPt.forEach(t),rpr=r(_Ge," \u2014 "),zH=n(_Ge,"A",{href:!0});var cPt=s(zH);tpr=r(cPt,"ImageGPTForImageClassification"),cPt.forEach(t),apr=r(_Ge," (ImageGPT model)"),_Ge.forEach(t),npr=i(Fe),ml=n(Fe,"LI",{});var CP=s(ml);GFe=n(CP,"STRONG",{});var fPt=s(GFe);spr=r(fPt,"levit"),fPt.forEach(t),lpr=r(CP," \u2014 "),QH=n(CP,"A",{href:!0});var mPt=s(QH);ipr=r(mPt,"LevitForImageClassification"),mPt.forEach(t),dpr=r(CP," or "),WH=n(CP,"A",{href:!0});var gPt=s(WH);cpr=r(gPt,"LevitForImageClassificationWithTeacher"),gPt.forEach(t),fpr=r(CP," (LeViT model)"),CP.forEach(t),mpr=i(Fe),A8=n(Fe,"LI",{});var bGe=s(A8);OFe=n(bGe,"STRONG",{});var hPt=s(OFe);gpr=r(hPt,"mobilevit"),hPt.forEach(t),hpr=r(bGe," \u2014 "),UH=n(bGe,"A",{href:!0});var pPt=s(UH);ppr=r(pPt,"MobileViTForImageClassification"),pPt.forEach(t),upr=r(bGe," (MobileViT model)"),bGe.forEach(t),_pr=i(Fe),yt=n(Fe,"LI",{});var im=s(yt);VFe=n(im,"STRONG",{});var uPt=s(VFe);bpr=r(uPt,"perceiver"),uPt.forEach(t),vpr=r(im," \u2014 "),HH=n(im,"A",{href:!0});var _Pt=s(HH);Fpr=r(_Pt,"PerceiverForImageClassificationLearned"),_Pt.forEach(t),Tpr=r(im," or "),JH=n(im,"A",{href:!0});var bPt=s(JH);Mpr=r(bPt,"PerceiverForImageClassificationFourier"),bPt.forEach(t),Epr=r(im," or "),YH=n(im,"A",{href:!0});var vPt=s(YH);Cpr=r(vPt,"PerceiverForImageClassificationConvProcessing"),vPt.forEach(t),wpr=r(im," (Perceiver model)"),im.forEach(t),Apr=i(Fe),y8=n(Fe,"LI",{});var vGe=s(y8);XFe=n(vGe,"STRONG",{});var FPt=s(XFe);ypr=r(FPt,"poolformer"),FPt.forEach(t),Lpr=r(vGe," \u2014 "),KH=n(vGe,"A",{href:!0});var TPt=s(KH);xpr=r(TPt,"PoolFormerForImageClassification"),TPt.forEach(t),$pr=r(vGe," (PoolFormer model)"),vGe.forEach(t),kpr=i(Fe),L8=n(Fe,"LI",{});var FGe=s(L8);zFe=n(FGe,"STRONG",{});var MPt=s(zFe);Spr=r(MPt,"regnet"),MPt.forEach(t),Rpr=r(FGe," \u2014 "),ZH=n(FGe,"A",{href:!0});var EPt=s(ZH);Ppr=r(EPt,"RegNetForImageClassification"),EPt.forEach(t),Bpr=r(FGe," (RegNet model)"),FGe.forEach(t),Ipr=i(Fe),x8=n(Fe,"LI",{});var TGe=s(x8);QFe=n(TGe,"STRONG",{});var CPt=s(QFe);Npr=r(CPt,"resnet"),CPt.forEach(t),qpr=r(TGe," \u2014 "),eJ=n(TGe,"A",{href:!0});var wPt=s(eJ);jpr=r(wPt,"ResNetForImageClassification"),wPt.forEach(t),Dpr=r(TGe," (ResNet model)"),TGe.forEach(t),Gpr=i(Fe),$8=n(Fe,"LI",{});var MGe=s($8);WFe=n(MGe,"STRONG",{});var APt=s(WFe);Opr=r(APt,"segformer"),APt.forEach(t),Vpr=r(MGe," \u2014 "),oJ=n(MGe,"A",{href:!0});var yPt=s(oJ);Xpr=r(yPt,"SegformerForImageClassification"),yPt.forEach(t),zpr=r(MGe," (SegFormer model)"),MGe.forEach(t),Qpr=i(Fe),k8=n(Fe,"LI",{});var EGe=s(k8);UFe=n(EGe,"STRONG",{});var LPt=s(UFe);Wpr=r(LPt,"swin"),LPt.forEach(t),Upr=r(EGe," \u2014 "),rJ=n(EGe,"A",{href:!0});var xPt=s(rJ);Hpr=r(xPt,"SwinForImageClassification"),xPt.forEach(t),Jpr=r(EGe," (Swin Transformer model)"),EGe.forEach(t),Ypr=i(Fe),S8=n(Fe,"LI",{});var CGe=s(S8);HFe=n(CGe,"STRONG",{});var $Pt=s(HFe);Kpr=r($Pt,"swinv2"),$Pt.forEach(t),Zpr=r(CGe," \u2014 "),tJ=n(CGe,"A",{href:!0});var kPt=s(tJ);eur=r(kPt,"Swinv2ForImageClassification"),kPt.forEach(t),our=r(CGe," (Swin Transformer V2 model)"),CGe.forEach(t),rur=i(Fe),R8=n(Fe,"LI",{});var wGe=s(R8);JFe=n(wGe,"STRONG",{});var SPt=s(JFe);tur=r(SPt,"van"),SPt.forEach(t),aur=r(wGe," \u2014 "),aJ=n(wGe,"A",{href:!0});var RPt=s(aJ);nur=r(RPt,"VanForImageClassification"),RPt.forEach(t),sur=r(wGe," (VAN model)"),wGe.forEach(t),lur=i(Fe),P8=n(Fe,"LI",{});var AGe=s(P8);YFe=n(AGe,"STRONG",{});var PPt=s(YFe);iur=r(PPt,"vit"),PPt.forEach(t),dur=r(AGe," \u2014 "),nJ=n(AGe,"A",{href:!0});var BPt=s(nJ);cur=r(BPt,"ViTForImageClassification"),BPt.forEach(t),fur=r(AGe," (ViT model)"),AGe.forEach(t),Fe.forEach(t),mur=i(xa),B8=n(xa,"P",{});var yGe=s(B8);gur=r(yGe,"The model is set in evaluation mode by default using "),KFe=n(yGe,"CODE",{});var IPt=s(KFe);hur=r(IPt,"model.eval()"),IPt.forEach(t),pur=r(yGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ZFe=n(yGe,"CODE",{});var NPt=s(ZFe);uur=r(NPt,"model.train()"),NPt.forEach(t),yGe.forEach(t),_ur=i(xa),T(I8.$$.fragment,xa),xa.forEach(t),kl.forEach(t),bHe=i(f),Wd=n(f,"H2",{class:!0});var kYe=s(Wd);N8=n(kYe,"A",{id:!0,class:!0,href:!0});var qPt=s(N8);eTe=n(qPt,"SPAN",{});var jPt=s(eTe);T(px.$$.fragment,jPt),jPt.forEach(t),qPt.forEach(t),bur=i(kYe),oTe=n(kYe,"SPAN",{});var DPt=s(oTe);vur=r(DPt,"AutoModelForVideoClassification"),DPt.forEach(t),kYe.forEach(t),vHe=i(f),Wo=n(f,"DIV",{class:!0});var Sl=s(Wo);T(ux.$$.fragment,Sl),Fur=i(Sl),Ud=n(Sl,"P",{});var Gne=s(Ud);Tur=r(Gne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),sJ=n(Gne,"A",{href:!0});var GPt=s(sJ);Mur=r(GPt,"from_pretrained()"),GPt.forEach(t),Eur=r(Gne," class method or the "),lJ=n(Gne,"A",{href:!0});var OPt=s(lJ);Cur=r(OPt,"from_config()"),OPt.forEach(t),wur=r(Gne,` class
method.`),Gne.forEach(t),Aur=i(Sl),_x=n(Sl,"P",{});var SYe=s(_x);yur=r(SYe,"This class cannot be instantiated directly using "),rTe=n(SYe,"CODE",{});var VPt=s(rTe);Lur=r(VPt,"__init__()"),VPt.forEach(t),xur=r(SYe," (throws an error)."),SYe.forEach(t),$ur=i(Sl),Lt=n(Sl,"DIV",{class:!0});var ey=s(Lt);T(bx.$$.fragment,ey),kur=i(ey),tTe=n(ey,"P",{});var XPt=s(tTe);Sur=r(XPt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),XPt.forEach(t),Rur=i(ey),Hd=n(ey,"P",{});var One=s(Hd);Pur=r(One,`Note:
Loading a model from its configuration file does `),aTe=n(One,"STRONG",{});var zPt=s(aTe);Bur=r(zPt,"not"),zPt.forEach(t),Iur=r(One,` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=n(One,"A",{href:!0});var QPt=s(iJ);Nur=r(QPt,"from_pretrained()"),QPt.forEach(t),qur=r(One," to load the model weights."),One.forEach(t),jur=i(ey),T(q8.$$.fragment,ey),ey.forEach(t),Dur=i(Sl),fo=n(Sl,"DIV",{class:!0});var $a=s(fo);T(vx.$$.fragment,$a),Gur=i($a),nTe=n($a,"P",{});var WPt=s(nTe);Our=r(WPt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),WPt.forEach(t),Vur=i($a),sn=n($a,"P",{});var oy=s(sn);Xur=r(oy,"The model class to instantiate is selected based on the "),sTe=n(oy,"CODE",{});var UPt=s(sTe);zur=r(UPt,"model_type"),UPt.forEach(t),Qur=r(oy,` property of the config object (either
passed as an argument or loaded from `),lTe=n(oy,"CODE",{});var HPt=s(lTe);Wur=r(HPt,"pretrained_model_name_or_path"),HPt.forEach(t),Uur=r(oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iTe=n(oy,"CODE",{});var JPt=s(iTe);Hur=r(JPt,"pretrained_model_name_or_path"),JPt.forEach(t),Jur=r(oy,":"),oy.forEach(t),Yur=i($a),dTe=n($a,"UL",{});var YPt=s(dTe);j8=n(YPt,"LI",{});var LGe=s(j8);cTe=n(LGe,"STRONG",{});var KPt=s(cTe);Kur=r(KPt,"videomae"),KPt.forEach(t),Zur=r(LGe," \u2014 "),dJ=n(LGe,"A",{href:!0});var ZPt=s(dJ);e_r=r(ZPt,"VideoMAEForVideoClassification"),ZPt.forEach(t),o_r=r(LGe," (VideoMAE model)"),LGe.forEach(t),YPt.forEach(t),r_r=i($a),D8=n($a,"P",{});var xGe=s(D8);t_r=r(xGe,"The model is set in evaluation mode by default using "),fTe=n(xGe,"CODE",{});var eBt=s(fTe);a_r=r(eBt,"model.eval()"),eBt.forEach(t),n_r=r(xGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mTe=n(xGe,"CODE",{});var oBt=s(mTe);s_r=r(oBt,"model.train()"),oBt.forEach(t),xGe.forEach(t),l_r=i($a),T(G8.$$.fragment,$a),$a.forEach(t),Sl.forEach(t),FHe=i(f),Jd=n(f,"H2",{class:!0});var RYe=s(Jd);O8=n(RYe,"A",{id:!0,class:!0,href:!0});var rBt=s(O8);gTe=n(rBt,"SPAN",{});var tBt=s(gTe);T(Fx.$$.fragment,tBt),tBt.forEach(t),rBt.forEach(t),i_r=i(RYe),hTe=n(RYe,"SPAN",{});var aBt=s(hTe);d_r=r(aBt,"AutoModelForVision2Seq"),aBt.forEach(t),RYe.forEach(t),THe=i(f),Uo=n(f,"DIV",{class:!0});var Rl=s(Uo);T(Tx.$$.fragment,Rl),c_r=i(Rl),Yd=n(Rl,"P",{});var Vne=s(Yd);f_r=r(Vne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cJ=n(Vne,"A",{href:!0});var nBt=s(cJ);m_r=r(nBt,"from_pretrained()"),nBt.forEach(t),g_r=r(Vne," class method or the "),fJ=n(Vne,"A",{href:!0});var sBt=s(fJ);h_r=r(sBt,"from_config()"),sBt.forEach(t),p_r=r(Vne,` class
method.`),Vne.forEach(t),u_r=i(Rl),Mx=n(Rl,"P",{});var PYe=s(Mx);__r=r(PYe,"This class cannot be instantiated directly using "),pTe=n(PYe,"CODE",{});var lBt=s(pTe);b_r=r(lBt,"__init__()"),lBt.forEach(t),v_r=r(PYe," (throws an error)."),PYe.forEach(t),F_r=i(Rl),xt=n(Rl,"DIV",{class:!0});var ry=s(xt);T(Ex.$$.fragment,ry),T_r=i(ry),uTe=n(ry,"P",{});var iBt=s(uTe);M_r=r(iBt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),iBt.forEach(t),E_r=i(ry),Kd=n(ry,"P",{});var Xne=s(Kd);C_r=r(Xne,`Note:
Loading a model from its configuration file does `),_Te=n(Xne,"STRONG",{});var dBt=s(_Te);w_r=r(dBt,"not"),dBt.forEach(t),A_r=r(Xne,` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=n(Xne,"A",{href:!0});var cBt=s(mJ);y_r=r(cBt,"from_pretrained()"),cBt.forEach(t),L_r=r(Xne," to load the model weights."),Xne.forEach(t),x_r=i(ry),T(V8.$$.fragment,ry),ry.forEach(t),$_r=i(Rl),mo=n(Rl,"DIV",{class:!0});var ka=s(mo);T(Cx.$$.fragment,ka),k_r=i(ka),bTe=n(ka,"P",{});var fBt=s(bTe);S_r=r(fBt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),fBt.forEach(t),R_r=i(ka),ln=n(ka,"P",{});var ty=s(ln);P_r=r(ty,"The model class to instantiate is selected based on the "),vTe=n(ty,"CODE",{});var mBt=s(vTe);B_r=r(mBt,"model_type"),mBt.forEach(t),I_r=r(ty,` property of the config object (either
passed as an argument or loaded from `),FTe=n(ty,"CODE",{});var gBt=s(FTe);N_r=r(gBt,"pretrained_model_name_or_path"),gBt.forEach(t),q_r=r(ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=n(ty,"CODE",{});var hBt=s(TTe);j_r=r(hBt,"pretrained_model_name_or_path"),hBt.forEach(t),D_r=r(ty,":"),ty.forEach(t),G_r=i(ka),MTe=n(ka,"UL",{});var pBt=s(MTe);X8=n(pBt,"LI",{});var $Ge=s(X8);ETe=n($Ge,"STRONG",{});var uBt=s(ETe);O_r=r(uBt,"vision-encoder-decoder"),uBt.forEach(t),V_r=r($Ge," \u2014 "),gJ=n($Ge,"A",{href:!0});var _Bt=s(gJ);X_r=r(_Bt,"VisionEncoderDecoderModel"),_Bt.forEach(t),z_r=r($Ge," (Vision Encoder decoder model)"),$Ge.forEach(t),pBt.forEach(t),Q_r=i(ka),z8=n(ka,"P",{});var kGe=s(z8);W_r=r(kGe,"The model is set in evaluation mode by default using "),CTe=n(kGe,"CODE",{});var bBt=s(CTe);U_r=r(bBt,"model.eval()"),bBt.forEach(t),H_r=r(kGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wTe=n(kGe,"CODE",{});var vBt=s(wTe);J_r=r(vBt,"model.train()"),vBt.forEach(t),kGe.forEach(t),Y_r=i(ka),T(Q8.$$.fragment,ka),ka.forEach(t),Rl.forEach(t),MHe=i(f),Zd=n(f,"H2",{class:!0});var BYe=s(Zd);W8=n(BYe,"A",{id:!0,class:!0,href:!0});var FBt=s(W8);ATe=n(FBt,"SPAN",{});var TBt=s(ATe);T(wx.$$.fragment,TBt),TBt.forEach(t),FBt.forEach(t),K_r=i(BYe),yTe=n(BYe,"SPAN",{});var MBt=s(yTe);Z_r=r(MBt,"AutoModelForVisualQuestionAnswering"),MBt.forEach(t),BYe.forEach(t),EHe=i(f),Ho=n(f,"DIV",{class:!0});var Pl=s(Ho);T(Ax.$$.fragment,Pl),e1r=i(Pl),ec=n(Pl,"P",{});var zne=s(ec);o1r=r(zne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),hJ=n(zne,"A",{href:!0});var EBt=s(hJ);r1r=r(EBt,"from_pretrained()"),EBt.forEach(t),t1r=r(zne," class method or the "),pJ=n(zne,"A",{href:!0});var CBt=s(pJ);a1r=r(CBt,"from_config()"),CBt.forEach(t),n1r=r(zne,` class
method.`),zne.forEach(t),s1r=i(Pl),yx=n(Pl,"P",{});var IYe=s(yx);l1r=r(IYe,"This class cannot be instantiated directly using "),LTe=n(IYe,"CODE",{});var wBt=s(LTe);i1r=r(wBt,"__init__()"),wBt.forEach(t),d1r=r(IYe," (throws an error)."),IYe.forEach(t),c1r=i(Pl),$t=n(Pl,"DIV",{class:!0});var ay=s($t);T(Lx.$$.fragment,ay),f1r=i(ay),xTe=n(ay,"P",{});var ABt=s(xTe);m1r=r(ABt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),ABt.forEach(t),g1r=i(ay),oc=n(ay,"P",{});var Qne=s(oc);h1r=r(Qne,`Note:
Loading a model from its configuration file does `),$Te=n(Qne,"STRONG",{});var yBt=s($Te);p1r=r(yBt,"not"),yBt.forEach(t),u1r=r(Qne,` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=n(Qne,"A",{href:!0});var LBt=s(uJ);_1r=r(LBt,"from_pretrained()"),LBt.forEach(t),b1r=r(Qne," to load the model weights."),Qne.forEach(t),v1r=i(ay),T(U8.$$.fragment,ay),ay.forEach(t),F1r=i(Pl),go=n(Pl,"DIV",{class:!0});var Sa=s(go);T(xx.$$.fragment,Sa),T1r=i(Sa),kTe=n(Sa,"P",{});var xBt=s(kTe);M1r=r(xBt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),xBt.forEach(t),E1r=i(Sa),dn=n(Sa,"P",{});var ny=s(dn);C1r=r(ny,"The model class to instantiate is selected based on the "),STe=n(ny,"CODE",{});var $Bt=s(STe);w1r=r($Bt,"model_type"),$Bt.forEach(t),A1r=r(ny,` property of the config object (either
passed as an argument or loaded from `),RTe=n(ny,"CODE",{});var kBt=s(RTe);y1r=r(kBt,"pretrained_model_name_or_path"),kBt.forEach(t),L1r=r(ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=n(ny,"CODE",{});var SBt=s(PTe);x1r=r(SBt,"pretrained_model_name_or_path"),SBt.forEach(t),$1r=r(ny,":"),ny.forEach(t),k1r=i(Sa),BTe=n(Sa,"UL",{});var RBt=s(BTe);H8=n(RBt,"LI",{});var SGe=s(H8);ITe=n(SGe,"STRONG",{});var PBt=s(ITe);S1r=r(PBt,"vilt"),PBt.forEach(t),R1r=r(SGe," \u2014 "),_J=n(SGe,"A",{href:!0});var BBt=s(_J);P1r=r(BBt,"ViltForQuestionAnswering"),BBt.forEach(t),B1r=r(SGe," (ViLT model)"),SGe.forEach(t),RBt.forEach(t),I1r=i(Sa),J8=n(Sa,"P",{});var RGe=s(J8);N1r=r(RGe,"The model is set in evaluation mode by default using "),NTe=n(RGe,"CODE",{});var IBt=s(NTe);q1r=r(IBt,"model.eval()"),IBt.forEach(t),j1r=r(RGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qTe=n(RGe,"CODE",{});var NBt=s(qTe);D1r=r(NBt,"model.train()"),NBt.forEach(t),RGe.forEach(t),G1r=i(Sa),T(Y8.$$.fragment,Sa),Sa.forEach(t),Pl.forEach(t),CHe=i(f),rc=n(f,"H2",{class:!0});var NYe=s(rc);K8=n(NYe,"A",{id:!0,class:!0,href:!0});var qBt=s(K8);jTe=n(qBt,"SPAN",{});var jBt=s(jTe);T($x.$$.fragment,jBt),jBt.forEach(t),qBt.forEach(t),O1r=i(NYe),DTe=n(NYe,"SPAN",{});var DBt=s(DTe);V1r=r(DBt,"AutoModelForAudioClassification"),DBt.forEach(t),NYe.forEach(t),wHe=i(f),Jo=n(f,"DIV",{class:!0});var Bl=s(Jo);T(kx.$$.fragment,Bl),X1r=i(Bl),tc=n(Bl,"P",{});var Wne=s(tc);z1r=r(Wne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),bJ=n(Wne,"A",{href:!0});var GBt=s(bJ);Q1r=r(GBt,"from_pretrained()"),GBt.forEach(t),W1r=r(Wne," class method or the "),vJ=n(Wne,"A",{href:!0});var OBt=s(vJ);U1r=r(OBt,"from_config()"),OBt.forEach(t),H1r=r(Wne,` class
method.`),Wne.forEach(t),J1r=i(Bl),Sx=n(Bl,"P",{});var qYe=s(Sx);Y1r=r(qYe,"This class cannot be instantiated directly using "),GTe=n(qYe,"CODE",{});var VBt=s(GTe);K1r=r(VBt,"__init__()"),VBt.forEach(t),Z1r=r(qYe," (throws an error)."),qYe.forEach(t),e4r=i(Bl),kt=n(Bl,"DIV",{class:!0});var sy=s(kt);T(Rx.$$.fragment,sy),o4r=i(sy),OTe=n(sy,"P",{});var XBt=s(OTe);r4r=r(XBt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),XBt.forEach(t),t4r=i(sy),ac=n(sy,"P",{});var Une=s(ac);a4r=r(Une,`Note:
Loading a model from its configuration file does `),VTe=n(Une,"STRONG",{});var zBt=s(VTe);n4r=r(zBt,"not"),zBt.forEach(t),s4r=r(Une,` load the model weights. It only affects the
model\u2019s configuration. Use `),FJ=n(Une,"A",{href:!0});var QBt=s(FJ);l4r=r(QBt,"from_pretrained()"),QBt.forEach(t),i4r=r(Une," to load the model weights."),Une.forEach(t),d4r=i(sy),T(Z8.$$.fragment,sy),sy.forEach(t),c4r=i(Bl),ho=n(Bl,"DIV",{class:!0});var Ra=s(ho);T(Px.$$.fragment,Ra),f4r=i(Ra),XTe=n(Ra,"P",{});var WBt=s(XTe);m4r=r(WBt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),WBt.forEach(t),g4r=i(Ra),cn=n(Ra,"P",{});var ly=s(cn);h4r=r(ly,"The model class to instantiate is selected based on the "),zTe=n(ly,"CODE",{});var UBt=s(zTe);p4r=r(UBt,"model_type"),UBt.forEach(t),u4r=r(ly,` property of the config object (either
passed as an argument or loaded from `),QTe=n(ly,"CODE",{});var HBt=s(QTe);_4r=r(HBt,"pretrained_model_name_or_path"),HBt.forEach(t),b4r=r(ly,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=n(ly,"CODE",{});var JBt=s(WTe);v4r=r(JBt,"pretrained_model_name_or_path"),JBt.forEach(t),F4r=r(ly,":"),ly.forEach(t),T4r=i(Ra),Pe=n(Ra,"UL",{});var Qe=s(Pe);eM=n(Qe,"LI",{});var PGe=s(eM);UTe=n(PGe,"STRONG",{});var YBt=s(UTe);M4r=r(YBt,"data2vec-audio"),YBt.forEach(t),E4r=r(PGe," \u2014 "),TJ=n(PGe,"A",{href:!0});var KBt=s(TJ);C4r=r(KBt,"Data2VecAudioForSequenceClassification"),KBt.forEach(t),w4r=r(PGe," (Data2VecAudio model)"),PGe.forEach(t),A4r=i(Qe),oM=n(Qe,"LI",{});var BGe=s(oM);HTe=n(BGe,"STRONG",{});var ZBt=s(HTe);y4r=r(ZBt,"hubert"),ZBt.forEach(t),L4r=r(BGe," \u2014 "),MJ=n(BGe,"A",{href:!0});var eIt=s(MJ);x4r=r(eIt,"HubertForSequenceClassification"),eIt.forEach(t),$4r=r(BGe," (Hubert model)"),BGe.forEach(t),k4r=i(Qe),rM=n(Qe,"LI",{});var IGe=s(rM);JTe=n(IGe,"STRONG",{});var oIt=s(JTe);S4r=r(oIt,"sew"),oIt.forEach(t),R4r=r(IGe," \u2014 "),EJ=n(IGe,"A",{href:!0});var rIt=s(EJ);P4r=r(rIt,"SEWForSequenceClassification"),rIt.forEach(t),B4r=r(IGe," (SEW model)"),IGe.forEach(t),I4r=i(Qe),tM=n(Qe,"LI",{});var NGe=s(tM);YTe=n(NGe,"STRONG",{});var tIt=s(YTe);N4r=r(tIt,"sew-d"),tIt.forEach(t),q4r=r(NGe," \u2014 "),CJ=n(NGe,"A",{href:!0});var aIt=s(CJ);j4r=r(aIt,"SEWDForSequenceClassification"),aIt.forEach(t),D4r=r(NGe," (SEW-D model)"),NGe.forEach(t),G4r=i(Qe),aM=n(Qe,"LI",{});var qGe=s(aM);KTe=n(qGe,"STRONG",{});var nIt=s(KTe);O4r=r(nIt,"unispeech"),nIt.forEach(t),V4r=r(qGe," \u2014 "),wJ=n(qGe,"A",{href:!0});var sIt=s(wJ);X4r=r(sIt,"UniSpeechForSequenceClassification"),sIt.forEach(t),z4r=r(qGe," (UniSpeech model)"),qGe.forEach(t),Q4r=i(Qe),nM=n(Qe,"LI",{});var jGe=s(nM);ZTe=n(jGe,"STRONG",{});var lIt=s(ZTe);W4r=r(lIt,"unispeech-sat"),lIt.forEach(t),U4r=r(jGe," \u2014 "),AJ=n(jGe,"A",{href:!0});var iIt=s(AJ);H4r=r(iIt,"UniSpeechSatForSequenceClassification"),iIt.forEach(t),J4r=r(jGe," (UniSpeechSat model)"),jGe.forEach(t),Y4r=i(Qe),sM=n(Qe,"LI",{});var DGe=s(sM);e8e=n(DGe,"STRONG",{});var dIt=s(e8e);K4r=r(dIt,"wav2vec2"),dIt.forEach(t),Z4r=r(DGe," \u2014 "),yJ=n(DGe,"A",{href:!0});var cIt=s(yJ);e2r=r(cIt,"Wav2Vec2ForSequenceClassification"),cIt.forEach(t),o2r=r(DGe," (Wav2Vec2 model)"),DGe.forEach(t),r2r=i(Qe),lM=n(Qe,"LI",{});var GGe=s(lM);o8e=n(GGe,"STRONG",{});var fIt=s(o8e);t2r=r(fIt,"wav2vec2-conformer"),fIt.forEach(t),a2r=r(GGe," \u2014 "),LJ=n(GGe,"A",{href:!0});var mIt=s(LJ);n2r=r(mIt,"Wav2Vec2ConformerForSequenceClassification"),mIt.forEach(t),s2r=r(GGe," (Wav2Vec2-Conformer model)"),GGe.forEach(t),l2r=i(Qe),iM=n(Qe,"LI",{});var OGe=s(iM);r8e=n(OGe,"STRONG",{});var gIt=s(r8e);i2r=r(gIt,"wavlm"),gIt.forEach(t),d2r=r(OGe," \u2014 "),xJ=n(OGe,"A",{href:!0});var hIt=s(xJ);c2r=r(hIt,"WavLMForSequenceClassification"),hIt.forEach(t),f2r=r(OGe," (WavLM model)"),OGe.forEach(t),Qe.forEach(t),m2r=i(Ra),dM=n(Ra,"P",{});var VGe=s(dM);g2r=r(VGe,"The model is set in evaluation mode by default using "),t8e=n(VGe,"CODE",{});var pIt=s(t8e);h2r=r(pIt,"model.eval()"),pIt.forEach(t),p2r=r(VGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a8e=n(VGe,"CODE",{});var uIt=s(a8e);u2r=r(uIt,"model.train()"),uIt.forEach(t),VGe.forEach(t),_2r=i(Ra),T(cM.$$.fragment,Ra),Ra.forEach(t),Bl.forEach(t),AHe=i(f),nc=n(f,"H2",{class:!0});var jYe=s(nc);fM=n(jYe,"A",{id:!0,class:!0,href:!0});var _It=s(fM);n8e=n(_It,"SPAN",{});var bIt=s(n8e);T(Bx.$$.fragment,bIt),bIt.forEach(t),_It.forEach(t),b2r=i(jYe),s8e=n(jYe,"SPAN",{});var vIt=s(s8e);v2r=r(vIt,"AutoModelForAudioFrameClassification"),vIt.forEach(t),jYe.forEach(t),yHe=i(f),Yo=n(f,"DIV",{class:!0});var Il=s(Yo);T(Ix.$$.fragment,Il),F2r=i(Il),sc=n(Il,"P",{});var Hne=s(sc);T2r=r(Hne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),$J=n(Hne,"A",{href:!0});var FIt=s($J);M2r=r(FIt,"from_pretrained()"),FIt.forEach(t),E2r=r(Hne," class method or the "),kJ=n(Hne,"A",{href:!0});var TIt=s(kJ);C2r=r(TIt,"from_config()"),TIt.forEach(t),w2r=r(Hne,` class
method.`),Hne.forEach(t),A2r=i(Il),Nx=n(Il,"P",{});var DYe=s(Nx);y2r=r(DYe,"This class cannot be instantiated directly using "),l8e=n(DYe,"CODE",{});var MIt=s(l8e);L2r=r(MIt,"__init__()"),MIt.forEach(t),x2r=r(DYe," (throws an error)."),DYe.forEach(t),$2r=i(Il),St=n(Il,"DIV",{class:!0});var iy=s(St);T(qx.$$.fragment,iy),k2r=i(iy),i8e=n(iy,"P",{});var EIt=s(i8e);S2r=r(EIt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),EIt.forEach(t),R2r=i(iy),lc=n(iy,"P",{});var Jne=s(lc);P2r=r(Jne,`Note:
Loading a model from its configuration file does `),d8e=n(Jne,"STRONG",{});var CIt=s(d8e);B2r=r(CIt,"not"),CIt.forEach(t),I2r=r(Jne,` load the model weights. It only affects the
model\u2019s configuration. Use `),SJ=n(Jne,"A",{href:!0});var wIt=s(SJ);N2r=r(wIt,"from_pretrained()"),wIt.forEach(t),q2r=r(Jne," to load the model weights."),Jne.forEach(t),j2r=i(iy),T(mM.$$.fragment,iy),iy.forEach(t),D2r=i(Il),po=n(Il,"DIV",{class:!0});var Pa=s(po);T(jx.$$.fragment,Pa),G2r=i(Pa),c8e=n(Pa,"P",{});var AIt=s(c8e);O2r=r(AIt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),AIt.forEach(t),V2r=i(Pa),fn=n(Pa,"P",{});var dy=s(fn);X2r=r(dy,"The model class to instantiate is selected based on the "),f8e=n(dy,"CODE",{});var yIt=s(f8e);z2r=r(yIt,"model_type"),yIt.forEach(t),Q2r=r(dy,` property of the config object (either
passed as an argument or loaded from `),m8e=n(dy,"CODE",{});var LIt=s(m8e);W2r=r(LIt,"pretrained_model_name_or_path"),LIt.forEach(t),U2r=r(dy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g8e=n(dy,"CODE",{});var xIt=s(g8e);H2r=r(xIt,"pretrained_model_name_or_path"),xIt.forEach(t),J2r=r(dy,":"),dy.forEach(t),Y2r=i(Pa),it=n(Pa,"UL",{});var Nl=s(it);gM=n(Nl,"LI",{});var XGe=s(gM);h8e=n(XGe,"STRONG",{});var $It=s(h8e);K2r=r($It,"data2vec-audio"),$It.forEach(t),Z2r=r(XGe," \u2014 "),RJ=n(XGe,"A",{href:!0});var kIt=s(RJ);ebr=r(kIt,"Data2VecAudioForAudioFrameClassification"),kIt.forEach(t),obr=r(XGe," (Data2VecAudio model)"),XGe.forEach(t),rbr=i(Nl),hM=n(Nl,"LI",{});var zGe=s(hM);p8e=n(zGe,"STRONG",{});var SIt=s(p8e);tbr=r(SIt,"unispeech-sat"),SIt.forEach(t),abr=r(zGe," \u2014 "),PJ=n(zGe,"A",{href:!0});var RIt=s(PJ);nbr=r(RIt,"UniSpeechSatForAudioFrameClassification"),RIt.forEach(t),sbr=r(zGe," (UniSpeechSat model)"),zGe.forEach(t),lbr=i(Nl),pM=n(Nl,"LI",{});var QGe=s(pM);u8e=n(QGe,"STRONG",{});var PIt=s(u8e);ibr=r(PIt,"wav2vec2"),PIt.forEach(t),dbr=r(QGe," \u2014 "),BJ=n(QGe,"A",{href:!0});var BIt=s(BJ);cbr=r(BIt,"Wav2Vec2ForAudioFrameClassification"),BIt.forEach(t),fbr=r(QGe," (Wav2Vec2 model)"),QGe.forEach(t),mbr=i(Nl),uM=n(Nl,"LI",{});var WGe=s(uM);_8e=n(WGe,"STRONG",{});var IIt=s(_8e);gbr=r(IIt,"wav2vec2-conformer"),IIt.forEach(t),hbr=r(WGe," \u2014 "),IJ=n(WGe,"A",{href:!0});var NIt=s(IJ);pbr=r(NIt,"Wav2Vec2ConformerForAudioFrameClassification"),NIt.forEach(t),ubr=r(WGe," (Wav2Vec2-Conformer model)"),WGe.forEach(t),_br=i(Nl),_M=n(Nl,"LI",{});var UGe=s(_M);b8e=n(UGe,"STRONG",{});var qIt=s(b8e);bbr=r(qIt,"wavlm"),qIt.forEach(t),vbr=r(UGe," \u2014 "),NJ=n(UGe,"A",{href:!0});var jIt=s(NJ);Fbr=r(jIt,"WavLMForAudioFrameClassification"),jIt.forEach(t),Tbr=r(UGe," (WavLM model)"),UGe.forEach(t),Nl.forEach(t),Mbr=i(Pa),bM=n(Pa,"P",{});var HGe=s(bM);Ebr=r(HGe,"The model is set in evaluation mode by default using "),v8e=n(HGe,"CODE",{});var DIt=s(v8e);Cbr=r(DIt,"model.eval()"),DIt.forEach(t),wbr=r(HGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F8e=n(HGe,"CODE",{});var GIt=s(F8e);Abr=r(GIt,"model.train()"),GIt.forEach(t),HGe.forEach(t),ybr=i(Pa),T(vM.$$.fragment,Pa),Pa.forEach(t),Il.forEach(t),LHe=i(f),ic=n(f,"H2",{class:!0});var GYe=s(ic);FM=n(GYe,"A",{id:!0,class:!0,href:!0});var OIt=s(FM);T8e=n(OIt,"SPAN",{});var VIt=s(T8e);T(Dx.$$.fragment,VIt),VIt.forEach(t),OIt.forEach(t),Lbr=i(GYe),M8e=n(GYe,"SPAN",{});var XIt=s(M8e);xbr=r(XIt,"AutoModelForCTC"),XIt.forEach(t),GYe.forEach(t),xHe=i(f),Ko=n(f,"DIV",{class:!0});var ql=s(Ko);T(Gx.$$.fragment,ql),$br=i(ql),dc=n(ql,"P",{});var Yne=s(dc);kbr=r(Yne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),qJ=n(Yne,"A",{href:!0});var zIt=s(qJ);Sbr=r(zIt,"from_pretrained()"),zIt.forEach(t),Rbr=r(Yne," class method or the "),jJ=n(Yne,"A",{href:!0});var QIt=s(jJ);Pbr=r(QIt,"from_config()"),QIt.forEach(t),Bbr=r(Yne,` class
method.`),Yne.forEach(t),Ibr=i(ql),Ox=n(ql,"P",{});var OYe=s(Ox);Nbr=r(OYe,"This class cannot be instantiated directly using "),E8e=n(OYe,"CODE",{});var WIt=s(E8e);qbr=r(WIt,"__init__()"),WIt.forEach(t),jbr=r(OYe," (throws an error)."),OYe.forEach(t),Dbr=i(ql),Rt=n(ql,"DIV",{class:!0});var cy=s(Rt);T(Vx.$$.fragment,cy),Gbr=i(cy),C8e=n(cy,"P",{});var UIt=s(C8e);Obr=r(UIt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),UIt.forEach(t),Vbr=i(cy),cc=n(cy,"P",{});var Kne=s(cc);Xbr=r(Kne,`Note:
Loading a model from its configuration file does `),w8e=n(Kne,"STRONG",{});var HIt=s(w8e);zbr=r(HIt,"not"),HIt.forEach(t),Qbr=r(Kne,` load the model weights. It only affects the
model\u2019s configuration. Use `),DJ=n(Kne,"A",{href:!0});var JIt=s(DJ);Wbr=r(JIt,"from_pretrained()"),JIt.forEach(t),Ubr=r(Kne," to load the model weights."),Kne.forEach(t),Hbr=i(cy),T(TM.$$.fragment,cy),cy.forEach(t),Jbr=i(ql),uo=n(ql,"DIV",{class:!0});var Ba=s(uo);T(Xx.$$.fragment,Ba),Ybr=i(Ba),A8e=n(Ba,"P",{});var YIt=s(A8e);Kbr=r(YIt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),YIt.forEach(t),Zbr=i(Ba),mn=n(Ba,"P",{});var fy=s(mn);evr=r(fy,"The model class to instantiate is selected based on the "),y8e=n(fy,"CODE",{});var KIt=s(y8e);ovr=r(KIt,"model_type"),KIt.forEach(t),rvr=r(fy,` property of the config object (either
passed as an argument or loaded from `),L8e=n(fy,"CODE",{});var ZIt=s(L8e);tvr=r(ZIt,"pretrained_model_name_or_path"),ZIt.forEach(t),avr=r(fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x8e=n(fy,"CODE",{});var eNt=s(x8e);nvr=r(eNt,"pretrained_model_name_or_path"),eNt.forEach(t),svr=r(fy,":"),fy.forEach(t),lvr=i(Ba),ye=n(Ba,"UL",{});var Be=s(ye);MM=n(Be,"LI",{});var JGe=s(MM);$8e=n(JGe,"STRONG",{});var oNt=s($8e);ivr=r(oNt,"data2vec-audio"),oNt.forEach(t),dvr=r(JGe," \u2014 "),GJ=n(JGe,"A",{href:!0});var rNt=s(GJ);cvr=r(rNt,"Data2VecAudioForCTC"),rNt.forEach(t),fvr=r(JGe," (Data2VecAudio model)"),JGe.forEach(t),mvr=i(Be),EM=n(Be,"LI",{});var YGe=s(EM);k8e=n(YGe,"STRONG",{});var tNt=s(k8e);gvr=r(tNt,"hubert"),tNt.forEach(t),hvr=r(YGe," \u2014 "),OJ=n(YGe,"A",{href:!0});var aNt=s(OJ);pvr=r(aNt,"HubertForCTC"),aNt.forEach(t),uvr=r(YGe," (Hubert model)"),YGe.forEach(t),_vr=i(Be),CM=n(Be,"LI",{});var KGe=s(CM);S8e=n(KGe,"STRONG",{});var nNt=s(S8e);bvr=r(nNt,"mctct"),nNt.forEach(t),vvr=r(KGe," \u2014 "),VJ=n(KGe,"A",{href:!0});var sNt=s(VJ);Fvr=r(sNt,"MCTCTForCTC"),sNt.forEach(t),Tvr=r(KGe," (M-CTC-T model)"),KGe.forEach(t),Mvr=i(Be),wM=n(Be,"LI",{});var ZGe=s(wM);R8e=n(ZGe,"STRONG",{});var lNt=s(R8e);Evr=r(lNt,"sew"),lNt.forEach(t),Cvr=r(ZGe," \u2014 "),XJ=n(ZGe,"A",{href:!0});var iNt=s(XJ);wvr=r(iNt,"SEWForCTC"),iNt.forEach(t),Avr=r(ZGe," (SEW model)"),ZGe.forEach(t),yvr=i(Be),AM=n(Be,"LI",{});var eOe=s(AM);P8e=n(eOe,"STRONG",{});var dNt=s(P8e);Lvr=r(dNt,"sew-d"),dNt.forEach(t),xvr=r(eOe," \u2014 "),zJ=n(eOe,"A",{href:!0});var cNt=s(zJ);$vr=r(cNt,"SEWDForCTC"),cNt.forEach(t),kvr=r(eOe," (SEW-D model)"),eOe.forEach(t),Svr=i(Be),yM=n(Be,"LI",{});var oOe=s(yM);B8e=n(oOe,"STRONG",{});var fNt=s(B8e);Rvr=r(fNt,"unispeech"),fNt.forEach(t),Pvr=r(oOe," \u2014 "),QJ=n(oOe,"A",{href:!0});var mNt=s(QJ);Bvr=r(mNt,"UniSpeechForCTC"),mNt.forEach(t),Ivr=r(oOe," (UniSpeech model)"),oOe.forEach(t),Nvr=i(Be),LM=n(Be,"LI",{});var rOe=s(LM);I8e=n(rOe,"STRONG",{});var gNt=s(I8e);qvr=r(gNt,"unispeech-sat"),gNt.forEach(t),jvr=r(rOe," \u2014 "),WJ=n(rOe,"A",{href:!0});var hNt=s(WJ);Dvr=r(hNt,"UniSpeechSatForCTC"),hNt.forEach(t),Gvr=r(rOe," (UniSpeechSat model)"),rOe.forEach(t),Ovr=i(Be),xM=n(Be,"LI",{});var tOe=s(xM);N8e=n(tOe,"STRONG",{});var pNt=s(N8e);Vvr=r(pNt,"wav2vec2"),pNt.forEach(t),Xvr=r(tOe," \u2014 "),UJ=n(tOe,"A",{href:!0});var uNt=s(UJ);zvr=r(uNt,"Wav2Vec2ForCTC"),uNt.forEach(t),Qvr=r(tOe," (Wav2Vec2 model)"),tOe.forEach(t),Wvr=i(Be),$M=n(Be,"LI",{});var aOe=s($M);q8e=n(aOe,"STRONG",{});var _Nt=s(q8e);Uvr=r(_Nt,"wav2vec2-conformer"),_Nt.forEach(t),Hvr=r(aOe," \u2014 "),HJ=n(aOe,"A",{href:!0});var bNt=s(HJ);Jvr=r(bNt,"Wav2Vec2ConformerForCTC"),bNt.forEach(t),Yvr=r(aOe," (Wav2Vec2-Conformer model)"),aOe.forEach(t),Kvr=i(Be),kM=n(Be,"LI",{});var nOe=s(kM);j8e=n(nOe,"STRONG",{});var vNt=s(j8e);Zvr=r(vNt,"wavlm"),vNt.forEach(t),eFr=r(nOe," \u2014 "),JJ=n(nOe,"A",{href:!0});var FNt=s(JJ);oFr=r(FNt,"WavLMForCTC"),FNt.forEach(t),rFr=r(nOe," (WavLM model)"),nOe.forEach(t),Be.forEach(t),tFr=i(Ba),SM=n(Ba,"P",{});var sOe=s(SM);aFr=r(sOe,"The model is set in evaluation mode by default using "),D8e=n(sOe,"CODE",{});var TNt=s(D8e);nFr=r(TNt,"model.eval()"),TNt.forEach(t),sFr=r(sOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G8e=n(sOe,"CODE",{});var MNt=s(G8e);lFr=r(MNt,"model.train()"),MNt.forEach(t),sOe.forEach(t),iFr=i(Ba),T(RM.$$.fragment,Ba),Ba.forEach(t),ql.forEach(t),$He=i(f),fc=n(f,"H2",{class:!0});var VYe=s(fc);PM=n(VYe,"A",{id:!0,class:!0,href:!0});var ENt=s(PM);O8e=n(ENt,"SPAN",{});var CNt=s(O8e);T(zx.$$.fragment,CNt),CNt.forEach(t),ENt.forEach(t),dFr=i(VYe),V8e=n(VYe,"SPAN",{});var wNt=s(V8e);cFr=r(wNt,"AutoModelForSpeechSeq2Seq"),wNt.forEach(t),VYe.forEach(t),kHe=i(f),Zo=n(f,"DIV",{class:!0});var jl=s(Zo);T(Qx.$$.fragment,jl),fFr=i(jl),mc=n(jl,"P",{});var Zne=s(mc);mFr=r(Zne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),YJ=n(Zne,"A",{href:!0});var ANt=s(YJ);gFr=r(ANt,"from_pretrained()"),ANt.forEach(t),hFr=r(Zne," class method or the "),KJ=n(Zne,"A",{href:!0});var yNt=s(KJ);pFr=r(yNt,"from_config()"),yNt.forEach(t),uFr=r(Zne,` class
method.`),Zne.forEach(t),_Fr=i(jl),Wx=n(jl,"P",{});var XYe=s(Wx);bFr=r(XYe,"This class cannot be instantiated directly using "),X8e=n(XYe,"CODE",{});var LNt=s(X8e);vFr=r(LNt,"__init__()"),LNt.forEach(t),FFr=r(XYe," (throws an error)."),XYe.forEach(t),TFr=i(jl),Pt=n(jl,"DIV",{class:!0});var my=s(Pt);T(Ux.$$.fragment,my),MFr=i(my),z8e=n(my,"P",{});var xNt=s(z8e);EFr=r(xNt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xNt.forEach(t),CFr=i(my),gc=n(my,"P",{});var ese=s(gc);wFr=r(ese,`Note:
Loading a model from its configuration file does `),Q8e=n(ese,"STRONG",{});var $Nt=s(Q8e);AFr=r($Nt,"not"),$Nt.forEach(t),yFr=r(ese,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=n(ese,"A",{href:!0});var kNt=s(ZJ);LFr=r(kNt,"from_pretrained()"),kNt.forEach(t),xFr=r(ese," to load the model weights."),ese.forEach(t),$Fr=i(my),T(BM.$$.fragment,my),my.forEach(t),kFr=i(jl),_o=n(jl,"DIV",{class:!0});var Ia=s(_o);T(Hx.$$.fragment,Ia),SFr=i(Ia),W8e=n(Ia,"P",{});var SNt=s(W8e);RFr=r(SNt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),SNt.forEach(t),PFr=i(Ia),gn=n(Ia,"P",{});var gy=s(gn);BFr=r(gy,"The model class to instantiate is selected based on the "),U8e=n(gy,"CODE",{});var RNt=s(U8e);IFr=r(RNt,"model_type"),RNt.forEach(t),NFr=r(gy,` property of the config object (either
passed as an argument or loaded from `),H8e=n(gy,"CODE",{});var PNt=s(H8e);qFr=r(PNt,"pretrained_model_name_or_path"),PNt.forEach(t),jFr=r(gy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J8e=n(gy,"CODE",{});var BNt=s(J8e);DFr=r(BNt,"pretrained_model_name_or_path"),BNt.forEach(t),GFr=r(gy,":"),gy.forEach(t),OFr=i(Ia),Jx=n(Ia,"UL",{});var zYe=s(Jx);IM=n(zYe,"LI",{});var lOe=s(IM);Y8e=n(lOe,"STRONG",{});var INt=s(Y8e);VFr=r(INt,"speech-encoder-decoder"),INt.forEach(t),XFr=r(lOe," \u2014 "),eY=n(lOe,"A",{href:!0});var NNt=s(eY);zFr=r(NNt,"SpeechEncoderDecoderModel"),NNt.forEach(t),QFr=r(lOe," (Speech Encoder decoder model)"),lOe.forEach(t),WFr=i(zYe),NM=n(zYe,"LI",{});var iOe=s(NM);K8e=n(iOe,"STRONG",{});var qNt=s(K8e);UFr=r(qNt,"speech_to_text"),qNt.forEach(t),HFr=r(iOe," \u2014 "),oY=n(iOe,"A",{href:!0});var jNt=s(oY);JFr=r(jNt,"Speech2TextForConditionalGeneration"),jNt.forEach(t),YFr=r(iOe," (Speech2Text model)"),iOe.forEach(t),zYe.forEach(t),KFr=i(Ia),qM=n(Ia,"P",{});var dOe=s(qM);ZFr=r(dOe,"The model is set in evaluation mode by default using "),Z8e=n(dOe,"CODE",{});var DNt=s(Z8e);eTr=r(DNt,"model.eval()"),DNt.forEach(t),oTr=r(dOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eMe=n(dOe,"CODE",{});var GNt=s(eMe);rTr=r(GNt,"model.train()"),GNt.forEach(t),dOe.forEach(t),tTr=i(Ia),T(jM.$$.fragment,Ia),Ia.forEach(t),jl.forEach(t),SHe=i(f),hc=n(f,"H2",{class:!0});var QYe=s(hc);DM=n(QYe,"A",{id:!0,class:!0,href:!0});var ONt=s(DM);oMe=n(ONt,"SPAN",{});var VNt=s(oMe);T(Yx.$$.fragment,VNt),VNt.forEach(t),ONt.forEach(t),aTr=i(QYe),rMe=n(QYe,"SPAN",{});var XNt=s(rMe);nTr=r(XNt,"AutoModelForAudioXVector"),XNt.forEach(t),QYe.forEach(t),RHe=i(f),er=n(f,"DIV",{class:!0});var Dl=s(er);T(Kx.$$.fragment,Dl),sTr=i(Dl),pc=n(Dl,"P",{});var ose=s(pc);lTr=r(ose,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),rY=n(ose,"A",{href:!0});var zNt=s(rY);iTr=r(zNt,"from_pretrained()"),zNt.forEach(t),dTr=r(ose," class method or the "),tY=n(ose,"A",{href:!0});var QNt=s(tY);cTr=r(QNt,"from_config()"),QNt.forEach(t),fTr=r(ose,` class
method.`),ose.forEach(t),mTr=i(Dl),Zx=n(Dl,"P",{});var WYe=s(Zx);gTr=r(WYe,"This class cannot be instantiated directly using "),tMe=n(WYe,"CODE",{});var WNt=s(tMe);hTr=r(WNt,"__init__()"),WNt.forEach(t),pTr=r(WYe," (throws an error)."),WYe.forEach(t),uTr=i(Dl),Bt=n(Dl,"DIV",{class:!0});var hy=s(Bt);T(e$.$$.fragment,hy),_Tr=i(hy),aMe=n(hy,"P",{});var UNt=s(aMe);bTr=r(UNt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),UNt.forEach(t),vTr=i(hy),uc=n(hy,"P",{});var rse=s(uc);FTr=r(rse,`Note:
Loading a model from its configuration file does `),nMe=n(rse,"STRONG",{});var HNt=s(nMe);TTr=r(HNt,"not"),HNt.forEach(t),MTr=r(rse,` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=n(rse,"A",{href:!0});var JNt=s(aY);ETr=r(JNt,"from_pretrained()"),JNt.forEach(t),CTr=r(rse," to load the model weights."),rse.forEach(t),wTr=i(hy),T(GM.$$.fragment,hy),hy.forEach(t),ATr=i(Dl),bo=n(Dl,"DIV",{class:!0});var Na=s(bo);T(o$.$$.fragment,Na),yTr=i(Na),sMe=n(Na,"P",{});var YNt=s(sMe);LTr=r(YNt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),YNt.forEach(t),xTr=i(Na),hn=n(Na,"P",{});var py=s(hn);$Tr=r(py,"The model class to instantiate is selected based on the "),lMe=n(py,"CODE",{});var KNt=s(lMe);kTr=r(KNt,"model_type"),KNt.forEach(t),STr=r(py,` property of the config object (either
passed as an argument or loaded from `),iMe=n(py,"CODE",{});var ZNt=s(iMe);RTr=r(ZNt,"pretrained_model_name_or_path"),ZNt.forEach(t),PTr=r(py,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=n(py,"CODE",{});var eqt=s(dMe);BTr=r(eqt,"pretrained_model_name_or_path"),eqt.forEach(t),ITr=r(py,":"),py.forEach(t),NTr=i(Na),dt=n(Na,"UL",{});var Gl=s(dt);OM=n(Gl,"LI",{});var cOe=s(OM);cMe=n(cOe,"STRONG",{});var oqt=s(cMe);qTr=r(oqt,"data2vec-audio"),oqt.forEach(t),jTr=r(cOe," \u2014 "),nY=n(cOe,"A",{href:!0});var rqt=s(nY);DTr=r(rqt,"Data2VecAudioForXVector"),rqt.forEach(t),GTr=r(cOe," (Data2VecAudio model)"),cOe.forEach(t),OTr=i(Gl),VM=n(Gl,"LI",{});var fOe=s(VM);fMe=n(fOe,"STRONG",{});var tqt=s(fMe);VTr=r(tqt,"unispeech-sat"),tqt.forEach(t),XTr=r(fOe," \u2014 "),sY=n(fOe,"A",{href:!0});var aqt=s(sY);zTr=r(aqt,"UniSpeechSatForXVector"),aqt.forEach(t),QTr=r(fOe," (UniSpeechSat model)"),fOe.forEach(t),WTr=i(Gl),XM=n(Gl,"LI",{});var mOe=s(XM);mMe=n(mOe,"STRONG",{});var nqt=s(mMe);UTr=r(nqt,"wav2vec2"),nqt.forEach(t),HTr=r(mOe," \u2014 "),lY=n(mOe,"A",{href:!0});var sqt=s(lY);JTr=r(sqt,"Wav2Vec2ForXVector"),sqt.forEach(t),YTr=r(mOe," (Wav2Vec2 model)"),mOe.forEach(t),KTr=i(Gl),zM=n(Gl,"LI",{});var gOe=s(zM);gMe=n(gOe,"STRONG",{});var lqt=s(gMe);ZTr=r(lqt,"wav2vec2-conformer"),lqt.forEach(t),e8r=r(gOe," \u2014 "),iY=n(gOe,"A",{href:!0});var iqt=s(iY);o8r=r(iqt,"Wav2Vec2ConformerForXVector"),iqt.forEach(t),r8r=r(gOe," (Wav2Vec2-Conformer model)"),gOe.forEach(t),t8r=i(Gl),QM=n(Gl,"LI",{});var hOe=s(QM);hMe=n(hOe,"STRONG",{});var dqt=s(hMe);a8r=r(dqt,"wavlm"),dqt.forEach(t),n8r=r(hOe," \u2014 "),dY=n(hOe,"A",{href:!0});var cqt=s(dY);s8r=r(cqt,"WavLMForXVector"),cqt.forEach(t),l8r=r(hOe," (WavLM model)"),hOe.forEach(t),Gl.forEach(t),i8r=i(Na),WM=n(Na,"P",{});var pOe=s(WM);d8r=r(pOe,"The model is set in evaluation mode by default using "),pMe=n(pOe,"CODE",{});var fqt=s(pMe);c8r=r(fqt,"model.eval()"),fqt.forEach(t),f8r=r(pOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uMe=n(pOe,"CODE",{});var mqt=s(uMe);m8r=r(mqt,"model.train()"),mqt.forEach(t),pOe.forEach(t),g8r=i(Na),T(UM.$$.fragment,Na),Na.forEach(t),Dl.forEach(t),PHe=i(f),_c=n(f,"H2",{class:!0});var UYe=s(_c);HM=n(UYe,"A",{id:!0,class:!0,href:!0});var gqt=s(HM);_Me=n(gqt,"SPAN",{});var hqt=s(_Me);T(r$.$$.fragment,hqt),hqt.forEach(t),gqt.forEach(t),h8r=i(UYe),bMe=n(UYe,"SPAN",{});var pqt=s(bMe);p8r=r(pqt,"AutoModelForMaskedImageModeling"),pqt.forEach(t),UYe.forEach(t),BHe=i(f),or=n(f,"DIV",{class:!0});var Ol=s(or);T(t$.$$.fragment,Ol),u8r=i(Ol),bc=n(Ol,"P",{});var tse=s(bc);_8r=r(tse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),cY=n(tse,"A",{href:!0});var uqt=s(cY);b8r=r(uqt,"from_pretrained()"),uqt.forEach(t),v8r=r(tse," class method or the "),fY=n(tse,"A",{href:!0});var _qt=s(fY);F8r=r(_qt,"from_config()"),_qt.forEach(t),T8r=r(tse,` class
method.`),tse.forEach(t),M8r=i(Ol),a$=n(Ol,"P",{});var HYe=s(a$);E8r=r(HYe,"This class cannot be instantiated directly using "),vMe=n(HYe,"CODE",{});var bqt=s(vMe);C8r=r(bqt,"__init__()"),bqt.forEach(t),w8r=r(HYe," (throws an error)."),HYe.forEach(t),A8r=i(Ol),It=n(Ol,"DIV",{class:!0});var uy=s(It);T(n$.$$.fragment,uy),y8r=i(uy),FMe=n(uy,"P",{});var vqt=s(FMe);L8r=r(vqt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),vqt.forEach(t),x8r=i(uy),vc=n(uy,"P",{});var ase=s(vc);$8r=r(ase,`Note:
Loading a model from its configuration file does `),TMe=n(ase,"STRONG",{});var Fqt=s(TMe);k8r=r(Fqt,"not"),Fqt.forEach(t),S8r=r(ase,` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=n(ase,"A",{href:!0});var Tqt=s(mY);R8r=r(Tqt,"from_pretrained()"),Tqt.forEach(t),P8r=r(ase," to load the model weights."),ase.forEach(t),B8r=i(uy),T(JM.$$.fragment,uy),uy.forEach(t),I8r=i(Ol),vo=n(Ol,"DIV",{class:!0});var qa=s(vo);T(s$.$$.fragment,qa),N8r=i(qa),MMe=n(qa,"P",{});var Mqt=s(MMe);q8r=r(Mqt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Mqt.forEach(t),j8r=i(qa),pn=n(qa,"P",{});var _y=s(pn);D8r=r(_y,"The model class to instantiate is selected based on the "),EMe=n(_y,"CODE",{});var Eqt=s(EMe);G8r=r(Eqt,"model_type"),Eqt.forEach(t),O8r=r(_y,` property of the config object (either
passed as an argument or loaded from `),CMe=n(_y,"CODE",{});var Cqt=s(CMe);V8r=r(Cqt,"pretrained_model_name_or_path"),Cqt.forEach(t),X8r=r(_y,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=n(_y,"CODE",{});var wqt=s(wMe);z8r=r(wqt,"pretrained_model_name_or_path"),wqt.forEach(t),Q8r=r(_y,":"),_y.forEach(t),W8r=i(qa),un=n(qa,"UL",{});var by=s(un);YM=n(by,"LI",{});var uOe=s(YM);AMe=n(uOe,"STRONG",{});var Aqt=s(AMe);U8r=r(Aqt,"deit"),Aqt.forEach(t),H8r=r(uOe," \u2014 "),gY=n(uOe,"A",{href:!0});var yqt=s(gY);J8r=r(yqt,"DeiTForMaskedImageModeling"),yqt.forEach(t),Y8r=r(uOe," (DeiT model)"),uOe.forEach(t),K8r=i(by),KM=n(by,"LI",{});var _Oe=s(KM);yMe=n(_Oe,"STRONG",{});var Lqt=s(yMe);Z8r=r(Lqt,"swin"),Lqt.forEach(t),eMr=r(_Oe," \u2014 "),hY=n(_Oe,"A",{href:!0});var xqt=s(hY);oMr=r(xqt,"SwinForMaskedImageModeling"),xqt.forEach(t),rMr=r(_Oe," (Swin Transformer model)"),_Oe.forEach(t),tMr=i(by),ZM=n(by,"LI",{});var bOe=s(ZM);LMe=n(bOe,"STRONG",{});var $qt=s(LMe);aMr=r($qt,"swinv2"),$qt.forEach(t),nMr=r(bOe," \u2014 "),pY=n(bOe,"A",{href:!0});var kqt=s(pY);sMr=r(kqt,"Swinv2ForMaskedImageModeling"),kqt.forEach(t),lMr=r(bOe," (Swin Transformer V2 model)"),bOe.forEach(t),iMr=i(by),eE=n(by,"LI",{});var vOe=s(eE);xMe=n(vOe,"STRONG",{});var Sqt=s(xMe);dMr=r(Sqt,"vit"),Sqt.forEach(t),cMr=r(vOe," \u2014 "),uY=n(vOe,"A",{href:!0});var Rqt=s(uY);fMr=r(Rqt,"ViTForMaskedImageModeling"),Rqt.forEach(t),mMr=r(vOe," (ViT model)"),vOe.forEach(t),by.forEach(t),gMr=i(qa),oE=n(qa,"P",{});var FOe=s(oE);hMr=r(FOe,"The model is set in evaluation mode by default using "),$Me=n(FOe,"CODE",{});var Pqt=s($Me);pMr=r(Pqt,"model.eval()"),Pqt.forEach(t),uMr=r(FOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kMe=n(FOe,"CODE",{});var Bqt=s(kMe);_Mr=r(Bqt,"model.train()"),Bqt.forEach(t),FOe.forEach(t),bMr=i(qa),T(rE.$$.fragment,qa),qa.forEach(t),Ol.forEach(t),IHe=i(f),Fc=n(f,"H2",{class:!0});var JYe=s(Fc);tE=n(JYe,"A",{id:!0,class:!0,href:!0});var Iqt=s(tE);SMe=n(Iqt,"SPAN",{});var Nqt=s(SMe);T(l$.$$.fragment,Nqt),Nqt.forEach(t),Iqt.forEach(t),vMr=i(JYe),RMe=n(JYe,"SPAN",{});var qqt=s(RMe);FMr=r(qqt,"AutoModelForObjectDetection"),qqt.forEach(t),JYe.forEach(t),NHe=i(f),rr=n(f,"DIV",{class:!0});var Vl=s(rr);T(i$.$$.fragment,Vl),TMr=i(Vl),Tc=n(Vl,"P",{});var nse=s(Tc);MMr=r(nse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),_Y=n(nse,"A",{href:!0});var jqt=s(_Y);EMr=r(jqt,"from_pretrained()"),jqt.forEach(t),CMr=r(nse," class method or the "),bY=n(nse,"A",{href:!0});var Dqt=s(bY);wMr=r(Dqt,"from_config()"),Dqt.forEach(t),AMr=r(nse,` class
method.`),nse.forEach(t),yMr=i(Vl),d$=n(Vl,"P",{});var YYe=s(d$);LMr=r(YYe,"This class cannot be instantiated directly using "),PMe=n(YYe,"CODE",{});var Gqt=s(PMe);xMr=r(Gqt,"__init__()"),Gqt.forEach(t),$Mr=r(YYe," (throws an error)."),YYe.forEach(t),kMr=i(Vl),Nt=n(Vl,"DIV",{class:!0});var vy=s(Nt);T(c$.$$.fragment,vy),SMr=i(vy),BMe=n(vy,"P",{});var Oqt=s(BMe);RMr=r(Oqt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Oqt.forEach(t),PMr=i(vy),Mc=n(vy,"P",{});var sse=s(Mc);BMr=r(sse,`Note:
Loading a model from its configuration file does `),IMe=n(sse,"STRONG",{});var Vqt=s(IMe);IMr=r(Vqt,"not"),Vqt.forEach(t),NMr=r(sse,` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=n(sse,"A",{href:!0});var Xqt=s(vY);qMr=r(Xqt,"from_pretrained()"),Xqt.forEach(t),jMr=r(sse," to load the model weights."),sse.forEach(t),DMr=i(vy),T(aE.$$.fragment,vy),vy.forEach(t),GMr=i(Vl),Fo=n(Vl,"DIV",{class:!0});var ja=s(Fo);T(f$.$$.fragment,ja),OMr=i(ja),NMe=n(ja,"P",{});var zqt=s(NMe);VMr=r(zqt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),zqt.forEach(t),XMr=i(ja),_n=n(ja,"P",{});var Fy=s(_n);zMr=r(Fy,"The model class to instantiate is selected based on the "),qMe=n(Fy,"CODE",{});var Qqt=s(qMe);QMr=r(Qqt,"model_type"),Qqt.forEach(t),WMr=r(Fy,` property of the config object (either
passed as an argument or loaded from `),jMe=n(Fy,"CODE",{});var Wqt=s(jMe);UMr=r(Wqt,"pretrained_model_name_or_path"),Wqt.forEach(t),HMr=r(Fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DMe=n(Fy,"CODE",{});var Uqt=s(DMe);JMr=r(Uqt,"pretrained_model_name_or_path"),Uqt.forEach(t),YMr=r(Fy,":"),Fy.forEach(t),KMr=i(ja),m$=n(ja,"UL",{});var KYe=s(m$);nE=n(KYe,"LI",{});var TOe=s(nE);GMe=n(TOe,"STRONG",{});var Hqt=s(GMe);ZMr=r(Hqt,"detr"),Hqt.forEach(t),eEr=r(TOe," \u2014 "),FY=n(TOe,"A",{href:!0});var Jqt=s(FY);oEr=r(Jqt,"DetrForObjectDetection"),Jqt.forEach(t),rEr=r(TOe," (DETR model)"),TOe.forEach(t),tEr=i(KYe),sE=n(KYe,"LI",{});var MOe=s(sE);OMe=n(MOe,"STRONG",{});var Yqt=s(OMe);aEr=r(Yqt,"yolos"),Yqt.forEach(t),nEr=r(MOe," \u2014 "),TY=n(MOe,"A",{href:!0});var Kqt=s(TY);sEr=r(Kqt,"YolosForObjectDetection"),Kqt.forEach(t),lEr=r(MOe," (YOLOS model)"),MOe.forEach(t),KYe.forEach(t),iEr=i(ja),lE=n(ja,"P",{});var EOe=s(lE);dEr=r(EOe,"The model is set in evaluation mode by default using "),VMe=n(EOe,"CODE",{});var Zqt=s(VMe);cEr=r(Zqt,"model.eval()"),Zqt.forEach(t),fEr=r(EOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),XMe=n(EOe,"CODE",{});var ejt=s(XMe);mEr=r(ejt,"model.train()"),ejt.forEach(t),EOe.forEach(t),gEr=i(ja),T(iE.$$.fragment,ja),ja.forEach(t),Vl.forEach(t),qHe=i(f),Ec=n(f,"H2",{class:!0});var ZYe=s(Ec);dE=n(ZYe,"A",{id:!0,class:!0,href:!0});var ojt=s(dE);zMe=n(ojt,"SPAN",{});var rjt=s(zMe);T(g$.$$.fragment,rjt),rjt.forEach(t),ojt.forEach(t),hEr=i(ZYe),QMe=n(ZYe,"SPAN",{});var tjt=s(QMe);pEr=r(tjt,"AutoModelForImageSegmentation"),tjt.forEach(t),ZYe.forEach(t),jHe=i(f),tr=n(f,"DIV",{class:!0});var Xl=s(tr);T(h$.$$.fragment,Xl),uEr=i(Xl),Cc=n(Xl,"P",{});var lse=s(Cc);_Er=r(lse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),MY=n(lse,"A",{href:!0});var ajt=s(MY);bEr=r(ajt,"from_pretrained()"),ajt.forEach(t),vEr=r(lse," class method or the "),EY=n(lse,"A",{href:!0});var njt=s(EY);FEr=r(njt,"from_config()"),njt.forEach(t),TEr=r(lse,` class
method.`),lse.forEach(t),MEr=i(Xl),p$=n(Xl,"P",{});var eKe=s(p$);EEr=r(eKe,"This class cannot be instantiated directly using "),WMe=n(eKe,"CODE",{});var sjt=s(WMe);CEr=r(sjt,"__init__()"),sjt.forEach(t),wEr=r(eKe," (throws an error)."),eKe.forEach(t),AEr=i(Xl),qt=n(Xl,"DIV",{class:!0});var Ty=s(qt);T(u$.$$.fragment,Ty),yEr=i(Ty),UMe=n(Ty,"P",{});var ljt=s(UMe);LEr=r(ljt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),ljt.forEach(t),xEr=i(Ty),wc=n(Ty,"P",{});var ise=s(wc);$Er=r(ise,`Note:
Loading a model from its configuration file does `),HMe=n(ise,"STRONG",{});var ijt=s(HMe);kEr=r(ijt,"not"),ijt.forEach(t),SEr=r(ise,` load the model weights. It only affects the
model\u2019s configuration. Use `),CY=n(ise,"A",{href:!0});var djt=s(CY);REr=r(djt,"from_pretrained()"),djt.forEach(t),PEr=r(ise," to load the model weights."),ise.forEach(t),BEr=i(Ty),T(cE.$$.fragment,Ty),Ty.forEach(t),IEr=i(Xl),To=n(Xl,"DIV",{class:!0});var Da=s(To);T(_$.$$.fragment,Da),NEr=i(Da),JMe=n(Da,"P",{});var cjt=s(JMe);qEr=r(cjt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),cjt.forEach(t),jEr=i(Da),bn=n(Da,"P",{});var My=s(bn);DEr=r(My,"The model class to instantiate is selected based on the "),YMe=n(My,"CODE",{});var fjt=s(YMe);GEr=r(fjt,"model_type"),fjt.forEach(t),OEr=r(My,` property of the config object (either
passed as an argument or loaded from `),KMe=n(My,"CODE",{});var mjt=s(KMe);VEr=r(mjt,"pretrained_model_name_or_path"),mjt.forEach(t),XEr=r(My,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZMe=n(My,"CODE",{});var gjt=s(ZMe);zEr=r(gjt,"pretrained_model_name_or_path"),gjt.forEach(t),QEr=r(My,":"),My.forEach(t),WEr=i(Da),eEe=n(Da,"UL",{});var hjt=s(eEe);fE=n(hjt,"LI",{});var COe=s(fE);oEe=n(COe,"STRONG",{});var pjt=s(oEe);UEr=r(pjt,"detr"),pjt.forEach(t),HEr=r(COe," \u2014 "),wY=n(COe,"A",{href:!0});var ujt=s(wY);JEr=r(ujt,"DetrForSegmentation"),ujt.forEach(t),YEr=r(COe," (DETR model)"),COe.forEach(t),hjt.forEach(t),KEr=i(Da),mE=n(Da,"P",{});var wOe=s(mE);ZEr=r(wOe,"The model is set in evaluation mode by default using "),rEe=n(wOe,"CODE",{});var _jt=s(rEe);eCr=r(_jt,"model.eval()"),_jt.forEach(t),oCr=r(wOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tEe=n(wOe,"CODE",{});var bjt=s(tEe);rCr=r(bjt,"model.train()"),bjt.forEach(t),wOe.forEach(t),tCr=i(Da),T(gE.$$.fragment,Da),Da.forEach(t),Xl.forEach(t),DHe=i(f),Ac=n(f,"H2",{class:!0});var oKe=s(Ac);hE=n(oKe,"A",{id:!0,class:!0,href:!0});var vjt=s(hE);aEe=n(vjt,"SPAN",{});var Fjt=s(aEe);T(b$.$$.fragment,Fjt),Fjt.forEach(t),vjt.forEach(t),aCr=i(oKe),nEe=n(oKe,"SPAN",{});var Tjt=s(nEe);nCr=r(Tjt,"AutoModelForSemanticSegmentation"),Tjt.forEach(t),oKe.forEach(t),GHe=i(f),ar=n(f,"DIV",{class:!0});var zl=s(ar);T(v$.$$.fragment,zl),sCr=i(zl),yc=n(zl,"P",{});var dse=s(yc);lCr=r(dse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),AY=n(dse,"A",{href:!0});var Mjt=s(AY);iCr=r(Mjt,"from_pretrained()"),Mjt.forEach(t),dCr=r(dse," class method or the "),yY=n(dse,"A",{href:!0});var Ejt=s(yY);cCr=r(Ejt,"from_config()"),Ejt.forEach(t),fCr=r(dse,` class
method.`),dse.forEach(t),mCr=i(zl),F$=n(zl,"P",{});var rKe=s(F$);gCr=r(rKe,"This class cannot be instantiated directly using "),sEe=n(rKe,"CODE",{});var Cjt=s(sEe);hCr=r(Cjt,"__init__()"),Cjt.forEach(t),pCr=r(rKe," (throws an error)."),rKe.forEach(t),uCr=i(zl),jt=n(zl,"DIV",{class:!0});var Ey=s(jt);T(T$.$$.fragment,Ey),_Cr=i(Ey),lEe=n(Ey,"P",{});var wjt=s(lEe);bCr=r(wjt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),wjt.forEach(t),vCr=i(Ey),Lc=n(Ey,"P",{});var cse=s(Lc);FCr=r(cse,`Note:
Loading a model from its configuration file does `),iEe=n(cse,"STRONG",{});var Ajt=s(iEe);TCr=r(Ajt,"not"),Ajt.forEach(t),MCr=r(cse,` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=n(cse,"A",{href:!0});var yjt=s(LY);ECr=r(yjt,"from_pretrained()"),yjt.forEach(t),CCr=r(cse," to load the model weights."),cse.forEach(t),wCr=i(Ey),T(pE.$$.fragment,Ey),Ey.forEach(t),ACr=i(zl),Mo=n(zl,"DIV",{class:!0});var Ga=s(Mo);T(M$.$$.fragment,Ga),yCr=i(Ga),dEe=n(Ga,"P",{});var Ljt=s(dEe);LCr=r(Ljt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Ljt.forEach(t),xCr=i(Ga),vn=n(Ga,"P",{});var Cy=s(vn);$Cr=r(Cy,"The model class to instantiate is selected based on the "),cEe=n(Cy,"CODE",{});var xjt=s(cEe);kCr=r(xjt,"model_type"),xjt.forEach(t),SCr=r(Cy,` property of the config object (either
passed as an argument or loaded from `),fEe=n(Cy,"CODE",{});var $jt=s(fEe);RCr=r($jt,"pretrained_model_name_or_path"),$jt.forEach(t),PCr=r(Cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mEe=n(Cy,"CODE",{});var kjt=s(mEe);BCr=r(kjt,"pretrained_model_name_or_path"),kjt.forEach(t),ICr=r(Cy,":"),Cy.forEach(t),NCr=i(Ga),ct=n(Ga,"UL",{});var Ql=s(ct);uE=n(Ql,"LI",{});var AOe=s(uE);gEe=n(AOe,"STRONG",{});var Sjt=s(gEe);qCr=r(Sjt,"beit"),Sjt.forEach(t),jCr=r(AOe," \u2014 "),xY=n(AOe,"A",{href:!0});var Rjt=s(xY);DCr=r(Rjt,"BeitForSemanticSegmentation"),Rjt.forEach(t),GCr=r(AOe," (BEiT model)"),AOe.forEach(t),OCr=i(Ql),_E=n(Ql,"LI",{});var yOe=s(_E);hEe=n(yOe,"STRONG",{});var Pjt=s(hEe);VCr=r(Pjt,"data2vec-vision"),Pjt.forEach(t),XCr=r(yOe," \u2014 "),$Y=n(yOe,"A",{href:!0});var Bjt=s($Y);zCr=r(Bjt,"Data2VecVisionForSemanticSegmentation"),Bjt.forEach(t),QCr=r(yOe," (Data2VecVision model)"),yOe.forEach(t),WCr=i(Ql),bE=n(Ql,"LI",{});var LOe=s(bE);pEe=n(LOe,"STRONG",{});var Ijt=s(pEe);UCr=r(Ijt,"dpt"),Ijt.forEach(t),HCr=r(LOe," \u2014 "),kY=n(LOe,"A",{href:!0});var Njt=s(kY);JCr=r(Njt,"DPTForSemanticSegmentation"),Njt.forEach(t),YCr=r(LOe," (DPT model)"),LOe.forEach(t),KCr=i(Ql),vE=n(Ql,"LI",{});var xOe=s(vE);uEe=n(xOe,"STRONG",{});var qjt=s(uEe);ZCr=r(qjt,"mobilevit"),qjt.forEach(t),e3r=r(xOe," \u2014 "),SY=n(xOe,"A",{href:!0});var jjt=s(SY);o3r=r(jjt,"MobileViTForSemanticSegmentation"),jjt.forEach(t),r3r=r(xOe," (MobileViT model)"),xOe.forEach(t),t3r=i(Ql),FE=n(Ql,"LI",{});var $Oe=s(FE);_Ee=n($Oe,"STRONG",{});var Djt=s(_Ee);a3r=r(Djt,"segformer"),Djt.forEach(t),n3r=r($Oe," \u2014 "),RY=n($Oe,"A",{href:!0});var Gjt=s(RY);s3r=r(Gjt,"SegformerForSemanticSegmentation"),Gjt.forEach(t),l3r=r($Oe," (SegFormer model)"),$Oe.forEach(t),Ql.forEach(t),i3r=i(Ga),TE=n(Ga,"P",{});var kOe=s(TE);d3r=r(kOe,"The model is set in evaluation mode by default using "),bEe=n(kOe,"CODE",{});var Ojt=s(bEe);c3r=r(Ojt,"model.eval()"),Ojt.forEach(t),f3r=r(kOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vEe=n(kOe,"CODE",{});var Vjt=s(vEe);m3r=r(Vjt,"model.train()"),Vjt.forEach(t),kOe.forEach(t),g3r=i(Ga),T(ME.$$.fragment,Ga),Ga.forEach(t),zl.forEach(t),OHe=i(f),xc=n(f,"H2",{class:!0});var tKe=s(xc);EE=n(tKe,"A",{id:!0,class:!0,href:!0});var Xjt=s(EE);FEe=n(Xjt,"SPAN",{});var zjt=s(FEe);T(E$.$$.fragment,zjt),zjt.forEach(t),Xjt.forEach(t),h3r=i(tKe),TEe=n(tKe,"SPAN",{});var Qjt=s(TEe);p3r=r(Qjt,"AutoModelForInstanceSegmentation"),Qjt.forEach(t),tKe.forEach(t),VHe=i(f),nr=n(f,"DIV",{class:!0});var Wl=s(nr);T(C$.$$.fragment,Wl),u3r=i(Wl),$c=n(Wl,"P",{});var fse=s($c);_3r=r(fse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),PY=n(fse,"A",{href:!0});var Wjt=s(PY);b3r=r(Wjt,"from_pretrained()"),Wjt.forEach(t),v3r=r(fse," class method or the "),BY=n(fse,"A",{href:!0});var Ujt=s(BY);F3r=r(Ujt,"from_config()"),Ujt.forEach(t),T3r=r(fse,` class
method.`),fse.forEach(t),M3r=i(Wl),w$=n(Wl,"P",{});var aKe=s(w$);E3r=r(aKe,"This class cannot be instantiated directly using "),MEe=n(aKe,"CODE",{});var Hjt=s(MEe);C3r=r(Hjt,"__init__()"),Hjt.forEach(t),w3r=r(aKe," (throws an error)."),aKe.forEach(t),A3r=i(Wl),Dt=n(Wl,"DIV",{class:!0});var wy=s(Dt);T(A$.$$.fragment,wy),y3r=i(wy),EEe=n(wy,"P",{});var Jjt=s(EEe);L3r=r(Jjt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Jjt.forEach(t),x3r=i(wy),kc=n(wy,"P",{});var mse=s(kc);$3r=r(mse,`Note:
Loading a model from its configuration file does `),CEe=n(mse,"STRONG",{});var Yjt=s(CEe);k3r=r(Yjt,"not"),Yjt.forEach(t),S3r=r(mse,` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=n(mse,"A",{href:!0});var Kjt=s(IY);R3r=r(Kjt,"from_pretrained()"),Kjt.forEach(t),P3r=r(mse," to load the model weights."),mse.forEach(t),B3r=i(wy),T(CE.$$.fragment,wy),wy.forEach(t),I3r=i(Wl),Eo=n(Wl,"DIV",{class:!0});var Oa=s(Eo);T(y$.$$.fragment,Oa),N3r=i(Oa),wEe=n(Oa,"P",{});var Zjt=s(wEe);q3r=r(Zjt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Zjt.forEach(t),j3r=i(Oa),Fn=n(Oa,"P",{});var Ay=s(Fn);D3r=r(Ay,"The model class to instantiate is selected based on the "),AEe=n(Ay,"CODE",{});var eDt=s(AEe);G3r=r(eDt,"model_type"),eDt.forEach(t),O3r=r(Ay,` property of the config object (either
passed as an argument or loaded from `),yEe=n(Ay,"CODE",{});var oDt=s(yEe);V3r=r(oDt,"pretrained_model_name_or_path"),oDt.forEach(t),X3r=r(Ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LEe=n(Ay,"CODE",{});var rDt=s(LEe);z3r=r(rDt,"pretrained_model_name_or_path"),rDt.forEach(t),Q3r=r(Ay,":"),Ay.forEach(t),W3r=i(Oa),xEe=n(Oa,"UL",{});var tDt=s(xEe);wE=n(tDt,"LI",{});var SOe=s(wE);$Ee=n(SOe,"STRONG",{});var aDt=s($Ee);U3r=r(aDt,"maskformer"),aDt.forEach(t),H3r=r(SOe," \u2014 "),NY=n(SOe,"A",{href:!0});var nDt=s(NY);J3r=r(nDt,"MaskFormerForInstanceSegmentation"),nDt.forEach(t),Y3r=r(SOe," (MaskFormer model)"),SOe.forEach(t),tDt.forEach(t),K3r=i(Oa),AE=n(Oa,"P",{});var ROe=s(AE);Z3r=r(ROe,"The model is set in evaluation mode by default using "),kEe=n(ROe,"CODE",{});var sDt=s(kEe);e5r=r(sDt,"model.eval()"),sDt.forEach(t),o5r=r(ROe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SEe=n(ROe,"CODE",{});var lDt=s(SEe);r5r=r(lDt,"model.train()"),lDt.forEach(t),ROe.forEach(t),t5r=i(Oa),T(yE.$$.fragment,Oa),Oa.forEach(t),Wl.forEach(t),XHe=i(f),Sc=n(f,"H2",{class:!0});var nKe=s(Sc);LE=n(nKe,"A",{id:!0,class:!0,href:!0});var iDt=s(LE);REe=n(iDt,"SPAN",{});var dDt=s(REe);T(L$.$$.fragment,dDt),dDt.forEach(t),iDt.forEach(t),a5r=i(nKe),PEe=n(nKe,"SPAN",{});var cDt=s(PEe);n5r=r(cDt,"TFAutoModel"),cDt.forEach(t),nKe.forEach(t),zHe=i(f),sr=n(f,"DIV",{class:!0});var Ul=s(sr);T(x$.$$.fragment,Ul),s5r=i(Ul),Rc=n(Ul,"P",{});var gse=s(Rc);l5r=r(gse,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qY=n(gse,"A",{href:!0});var fDt=s(qY);i5r=r(fDt,"from_pretrained()"),fDt.forEach(t),d5r=r(gse," class method or the "),jY=n(gse,"A",{href:!0});var mDt=s(jY);c5r=r(mDt,"from_config()"),mDt.forEach(t),f5r=r(gse,` class
method.`),gse.forEach(t),m5r=i(Ul),$$=n(Ul,"P",{});var sKe=s($$);g5r=r(sKe,"This class cannot be instantiated directly using "),BEe=n(sKe,"CODE",{});var gDt=s(BEe);h5r=r(gDt,"__init__()"),gDt.forEach(t),p5r=r(sKe," (throws an error)."),sKe.forEach(t),u5r=i(Ul),Gt=n(Ul,"DIV",{class:!0});var yy=s(Gt);T(k$.$$.fragment,yy),_5r=i(yy),IEe=n(yy,"P",{});var hDt=s(IEe);b5r=r(hDt,"Instantiates one of the base model classes of the library from a configuration."),hDt.forEach(t),v5r=i(yy),Pc=n(yy,"P",{});var hse=s(Pc);F5r=r(hse,`Note:
Loading a model from its configuration file does `),NEe=n(hse,"STRONG",{});var pDt=s(NEe);T5r=r(pDt,"not"),pDt.forEach(t),M5r=r(hse,` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=n(hse,"A",{href:!0});var uDt=s(DY);E5r=r(uDt,"from_pretrained()"),uDt.forEach(t),C5r=r(hse," to load the model weights."),hse.forEach(t),w5r=i(yy),T(xE.$$.fragment,yy),yy.forEach(t),A5r=i(Ul),Br=n(Ul,"DIV",{class:!0});var Hl=s(Br);T(S$.$$.fragment,Hl),y5r=i(Hl),qEe=n(Hl,"P",{});var _Dt=s(qEe);L5r=r(_Dt,"Instantiate one of the base model classes of the library from a pretrained model."),_Dt.forEach(t),x5r=i(Hl),Tn=n(Hl,"P",{});var Ly=s(Tn);$5r=r(Ly,"The model class to instantiate is selected based on the "),jEe=n(Ly,"CODE",{});var bDt=s(jEe);k5r=r(bDt,"model_type"),bDt.forEach(t),S5r=r(Ly,` property of the config object (either
passed as an argument or loaded from `),DEe=n(Ly,"CODE",{});var vDt=s(DEe);R5r=r(vDt,"pretrained_model_name_or_path"),vDt.forEach(t),P5r=r(Ly,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=n(Ly,"CODE",{});var FDt=s(GEe);B5r=r(FDt,"pretrained_model_name_or_path"),FDt.forEach(t),I5r=r(Ly,":"),Ly.forEach(t),N5r=i(Hl),q=n(Hl,"UL",{});var D=s(q);$E=n(D,"LI",{});var POe=s($E);OEe=n(POe,"STRONG",{});var TDt=s(OEe);q5r=r(TDt,"albert"),TDt.forEach(t),j5r=r(POe," \u2014 "),GY=n(POe,"A",{href:!0});var MDt=s(GY);D5r=r(MDt,"TFAlbertModel"),MDt.forEach(t),G5r=r(POe," (ALBERT model)"),POe.forEach(t),O5r=i(D),kE=n(D,"LI",{});var BOe=s(kE);VEe=n(BOe,"STRONG",{});var EDt=s(VEe);V5r=r(EDt,"bart"),EDt.forEach(t),X5r=r(BOe," \u2014 "),OY=n(BOe,"A",{href:!0});var CDt=s(OY);z5r=r(CDt,"TFBartModel"),CDt.forEach(t),Q5r=r(BOe," (BART model)"),BOe.forEach(t),W5r=i(D),SE=n(D,"LI",{});var IOe=s(SE);XEe=n(IOe,"STRONG",{});var wDt=s(XEe);U5r=r(wDt,"bert"),wDt.forEach(t),H5r=r(IOe," \u2014 "),VY=n(IOe,"A",{href:!0});var ADt=s(VY);J5r=r(ADt,"TFBertModel"),ADt.forEach(t),Y5r=r(IOe," (BERT model)"),IOe.forEach(t),K5r=i(D),RE=n(D,"LI",{});var NOe=s(RE);zEe=n(NOe,"STRONG",{});var yDt=s(zEe);Z5r=r(yDt,"blenderbot"),yDt.forEach(t),e0r=r(NOe," \u2014 "),XY=n(NOe,"A",{href:!0});var LDt=s(XY);o0r=r(LDt,"TFBlenderbotModel"),LDt.forEach(t),r0r=r(NOe," (Blenderbot model)"),NOe.forEach(t),t0r=i(D),PE=n(D,"LI",{});var qOe=s(PE);QEe=n(qOe,"STRONG",{});var xDt=s(QEe);a0r=r(xDt,"blenderbot-small"),xDt.forEach(t),n0r=r(qOe," \u2014 "),zY=n(qOe,"A",{href:!0});var $Dt=s(zY);s0r=r($Dt,"TFBlenderbotSmallModel"),$Dt.forEach(t),l0r=r(qOe," (BlenderbotSmall model)"),qOe.forEach(t),i0r=i(D),BE=n(D,"LI",{});var jOe=s(BE);WEe=n(jOe,"STRONG",{});var kDt=s(WEe);d0r=r(kDt,"camembert"),kDt.forEach(t),c0r=r(jOe," \u2014 "),QY=n(jOe,"A",{href:!0});var SDt=s(QY);f0r=r(SDt,"TFCamembertModel"),SDt.forEach(t),m0r=r(jOe," (CamemBERT model)"),jOe.forEach(t),g0r=i(D),IE=n(D,"LI",{});var DOe=s(IE);UEe=n(DOe,"STRONG",{});var RDt=s(UEe);h0r=r(RDt,"clip"),RDt.forEach(t),p0r=r(DOe," \u2014 "),WY=n(DOe,"A",{href:!0});var PDt=s(WY);u0r=r(PDt,"TFCLIPModel"),PDt.forEach(t),_0r=r(DOe," (CLIP model)"),DOe.forEach(t),b0r=i(D),NE=n(D,"LI",{});var GOe=s(NE);HEe=n(GOe,"STRONG",{});var BDt=s(HEe);v0r=r(BDt,"convbert"),BDt.forEach(t),F0r=r(GOe," \u2014 "),UY=n(GOe,"A",{href:!0});var IDt=s(UY);T0r=r(IDt,"TFConvBertModel"),IDt.forEach(t),M0r=r(GOe," (ConvBERT model)"),GOe.forEach(t),E0r=i(D),qE=n(D,"LI",{});var OOe=s(qE);JEe=n(OOe,"STRONG",{});var NDt=s(JEe);C0r=r(NDt,"convnext"),NDt.forEach(t),w0r=r(OOe," \u2014 "),HY=n(OOe,"A",{href:!0});var qDt=s(HY);A0r=r(qDt,"TFConvNextModel"),qDt.forEach(t),y0r=r(OOe," (ConvNeXT model)"),OOe.forEach(t),L0r=i(D),jE=n(D,"LI",{});var VOe=s(jE);YEe=n(VOe,"STRONG",{});var jDt=s(YEe);x0r=r(jDt,"ctrl"),jDt.forEach(t),$0r=r(VOe," \u2014 "),JY=n(VOe,"A",{href:!0});var DDt=s(JY);k0r=r(DDt,"TFCTRLModel"),DDt.forEach(t),S0r=r(VOe," (CTRL model)"),VOe.forEach(t),R0r=i(D),DE=n(D,"LI",{});var XOe=s(DE);KEe=n(XOe,"STRONG",{});var GDt=s(KEe);P0r=r(GDt,"data2vec-vision"),GDt.forEach(t),B0r=r(XOe," \u2014 "),YY=n(XOe,"A",{href:!0});var ODt=s(YY);I0r=r(ODt,"TFData2VecVisionModel"),ODt.forEach(t),N0r=r(XOe," (Data2VecVision model)"),XOe.forEach(t),q0r=i(D),GE=n(D,"LI",{});var zOe=s(GE);ZEe=n(zOe,"STRONG",{});var VDt=s(ZEe);j0r=r(VDt,"deberta"),VDt.forEach(t),D0r=r(zOe," \u2014 "),KY=n(zOe,"A",{href:!0});var XDt=s(KY);G0r=r(XDt,"TFDebertaModel"),XDt.forEach(t),O0r=r(zOe," (DeBERTa model)"),zOe.forEach(t),V0r=i(D),OE=n(D,"LI",{});var QOe=s(OE);eCe=n(QOe,"STRONG",{});var zDt=s(eCe);X0r=r(zDt,"deberta-v2"),zDt.forEach(t),z0r=r(QOe," \u2014 "),ZY=n(QOe,"A",{href:!0});var QDt=s(ZY);Q0r=r(QDt,"TFDebertaV2Model"),QDt.forEach(t),W0r=r(QOe," (DeBERTa-v2 model)"),QOe.forEach(t),U0r=i(D),VE=n(D,"LI",{});var WOe=s(VE);oCe=n(WOe,"STRONG",{});var WDt=s(oCe);H0r=r(WDt,"deit"),WDt.forEach(t),J0r=r(WOe," \u2014 "),eK=n(WOe,"A",{href:!0});var UDt=s(eK);Y0r=r(UDt,"TFDeiTModel"),UDt.forEach(t),K0r=r(WOe," (DeiT model)"),WOe.forEach(t),Z0r=i(D),XE=n(D,"LI",{});var UOe=s(XE);rCe=n(UOe,"STRONG",{});var HDt=s(rCe);ewr=r(HDt,"distilbert"),HDt.forEach(t),owr=r(UOe," \u2014 "),oK=n(UOe,"A",{href:!0});var JDt=s(oK);rwr=r(JDt,"TFDistilBertModel"),JDt.forEach(t),twr=r(UOe," (DistilBERT model)"),UOe.forEach(t),awr=i(D),zE=n(D,"LI",{});var HOe=s(zE);tCe=n(HOe,"STRONG",{});var YDt=s(tCe);nwr=r(YDt,"dpr"),YDt.forEach(t),swr=r(HOe," \u2014 "),rK=n(HOe,"A",{href:!0});var KDt=s(rK);lwr=r(KDt,"TFDPRQuestionEncoder"),KDt.forEach(t),iwr=r(HOe," (DPR model)"),HOe.forEach(t),dwr=i(D),QE=n(D,"LI",{});var JOe=s(QE);aCe=n(JOe,"STRONG",{});var ZDt=s(aCe);cwr=r(ZDt,"electra"),ZDt.forEach(t),fwr=r(JOe," \u2014 "),tK=n(JOe,"A",{href:!0});var eGt=s(tK);mwr=r(eGt,"TFElectraModel"),eGt.forEach(t),gwr=r(JOe," (ELECTRA model)"),JOe.forEach(t),hwr=i(D),WE=n(D,"LI",{});var YOe=s(WE);nCe=n(YOe,"STRONG",{});var oGt=s(nCe);pwr=r(oGt,"flaubert"),oGt.forEach(t),uwr=r(YOe," \u2014 "),aK=n(YOe,"A",{href:!0});var rGt=s(aK);_wr=r(rGt,"TFFlaubertModel"),rGt.forEach(t),bwr=r(YOe," (FlauBERT model)"),YOe.forEach(t),vwr=i(D),gl=n(D,"LI",{});var wP=s(gl);sCe=n(wP,"STRONG",{});var tGt=s(sCe);Fwr=r(tGt,"funnel"),tGt.forEach(t),Twr=r(wP," \u2014 "),nK=n(wP,"A",{href:!0});var aGt=s(nK);Mwr=r(aGt,"TFFunnelModel"),aGt.forEach(t),Ewr=r(wP," or "),sK=n(wP,"A",{href:!0});var nGt=s(sK);Cwr=r(nGt,"TFFunnelBaseModel"),nGt.forEach(t),wwr=r(wP," (Funnel Transformer model)"),wP.forEach(t),Awr=i(D),UE=n(D,"LI",{});var KOe=s(UE);lCe=n(KOe,"STRONG",{});var sGt=s(lCe);ywr=r(sGt,"gpt2"),sGt.forEach(t),Lwr=r(KOe," \u2014 "),lK=n(KOe,"A",{href:!0});var lGt=s(lK);xwr=r(lGt,"TFGPT2Model"),lGt.forEach(t),$wr=r(KOe," (OpenAI GPT-2 model)"),KOe.forEach(t),kwr=i(D),HE=n(D,"LI",{});var ZOe=s(HE);iCe=n(ZOe,"STRONG",{});var iGt=s(iCe);Swr=r(iGt,"gptj"),iGt.forEach(t),Rwr=r(ZOe," \u2014 "),iK=n(ZOe,"A",{href:!0});var dGt=s(iK);Pwr=r(dGt,"TFGPTJModel"),dGt.forEach(t),Bwr=r(ZOe," (GPT-J model)"),ZOe.forEach(t),Iwr=i(D),JE=n(D,"LI",{});var eVe=s(JE);dCe=n(eVe,"STRONG",{});var cGt=s(dCe);Nwr=r(cGt,"hubert"),cGt.forEach(t),qwr=r(eVe," \u2014 "),dK=n(eVe,"A",{href:!0});var fGt=s(dK);jwr=r(fGt,"TFHubertModel"),fGt.forEach(t),Dwr=r(eVe," (Hubert model)"),eVe.forEach(t),Gwr=i(D),YE=n(D,"LI",{});var oVe=s(YE);cCe=n(oVe,"STRONG",{});var mGt=s(cCe);Owr=r(mGt,"layoutlm"),mGt.forEach(t),Vwr=r(oVe," \u2014 "),cK=n(oVe,"A",{href:!0});var gGt=s(cK);Xwr=r(gGt,"TFLayoutLMModel"),gGt.forEach(t),zwr=r(oVe," (LayoutLM model)"),oVe.forEach(t),Qwr=i(D),KE=n(D,"LI",{});var rVe=s(KE);fCe=n(rVe,"STRONG",{});var hGt=s(fCe);Wwr=r(hGt,"led"),hGt.forEach(t),Uwr=r(rVe," \u2014 "),fK=n(rVe,"A",{href:!0});var pGt=s(fK);Hwr=r(pGt,"TFLEDModel"),pGt.forEach(t),Jwr=r(rVe," (LED model)"),rVe.forEach(t),Ywr=i(D),ZE=n(D,"LI",{});var tVe=s(ZE);mCe=n(tVe,"STRONG",{});var uGt=s(mCe);Kwr=r(uGt,"longformer"),uGt.forEach(t),Zwr=r(tVe," \u2014 "),mK=n(tVe,"A",{href:!0});var _Gt=s(mK);eAr=r(_Gt,"TFLongformerModel"),_Gt.forEach(t),oAr=r(tVe," (Longformer model)"),tVe.forEach(t),rAr=i(D),eC=n(D,"LI",{});var aVe=s(eC);gCe=n(aVe,"STRONG",{});var bGt=s(gCe);tAr=r(bGt,"lxmert"),bGt.forEach(t),aAr=r(aVe," \u2014 "),gK=n(aVe,"A",{href:!0});var vGt=s(gK);nAr=r(vGt,"TFLxmertModel"),vGt.forEach(t),sAr=r(aVe," (LXMERT model)"),aVe.forEach(t),lAr=i(D),oC=n(D,"LI",{});var nVe=s(oC);hCe=n(nVe,"STRONG",{});var FGt=s(hCe);iAr=r(FGt,"marian"),FGt.forEach(t),dAr=r(nVe," \u2014 "),hK=n(nVe,"A",{href:!0});var TGt=s(hK);cAr=r(TGt,"TFMarianModel"),TGt.forEach(t),fAr=r(nVe," (Marian model)"),nVe.forEach(t),mAr=i(D),rC=n(D,"LI",{});var sVe=s(rC);pCe=n(sVe,"STRONG",{});var MGt=s(pCe);gAr=r(MGt,"mbart"),MGt.forEach(t),hAr=r(sVe," \u2014 "),pK=n(sVe,"A",{href:!0});var EGt=s(pK);pAr=r(EGt,"TFMBartModel"),EGt.forEach(t),uAr=r(sVe," (mBART model)"),sVe.forEach(t),_Ar=i(D),tC=n(D,"LI",{});var lVe=s(tC);uCe=n(lVe,"STRONG",{});var CGt=s(uCe);bAr=r(CGt,"mobilebert"),CGt.forEach(t),vAr=r(lVe," \u2014 "),uK=n(lVe,"A",{href:!0});var wGt=s(uK);FAr=r(wGt,"TFMobileBertModel"),wGt.forEach(t),TAr=r(lVe," (MobileBERT model)"),lVe.forEach(t),MAr=i(D),aC=n(D,"LI",{});var iVe=s(aC);_Ce=n(iVe,"STRONG",{});var AGt=s(_Ce);EAr=r(AGt,"mpnet"),AGt.forEach(t),CAr=r(iVe," \u2014 "),_K=n(iVe,"A",{href:!0});var yGt=s(_K);wAr=r(yGt,"TFMPNetModel"),yGt.forEach(t),AAr=r(iVe," (MPNet model)"),iVe.forEach(t),yAr=i(D),nC=n(D,"LI",{});var dVe=s(nC);bCe=n(dVe,"STRONG",{});var LGt=s(bCe);LAr=r(LGt,"mt5"),LGt.forEach(t),xAr=r(dVe," \u2014 "),bK=n(dVe,"A",{href:!0});var xGt=s(bK);$Ar=r(xGt,"TFMT5Model"),xGt.forEach(t),kAr=r(dVe," (MT5 model)"),dVe.forEach(t),SAr=i(D),sC=n(D,"LI",{});var cVe=s(sC);vCe=n(cVe,"STRONG",{});var $Gt=s(vCe);RAr=r($Gt,"openai-gpt"),$Gt.forEach(t),PAr=r(cVe," \u2014 "),vK=n(cVe,"A",{href:!0});var kGt=s(vK);BAr=r(kGt,"TFOpenAIGPTModel"),kGt.forEach(t),IAr=r(cVe," (OpenAI GPT model)"),cVe.forEach(t),NAr=i(D),lC=n(D,"LI",{});var fVe=s(lC);FCe=n(fVe,"STRONG",{});var SGt=s(FCe);qAr=r(SGt,"opt"),SGt.forEach(t),jAr=r(fVe," \u2014 "),FK=n(fVe,"A",{href:!0});var RGt=s(FK);DAr=r(RGt,"TFOPTModel"),RGt.forEach(t),GAr=r(fVe," (OPT model)"),fVe.forEach(t),OAr=i(D),iC=n(D,"LI",{});var mVe=s(iC);TCe=n(mVe,"STRONG",{});var PGt=s(TCe);VAr=r(PGt,"pegasus"),PGt.forEach(t),XAr=r(mVe," \u2014 "),TK=n(mVe,"A",{href:!0});var BGt=s(TK);zAr=r(BGt,"TFPegasusModel"),BGt.forEach(t),QAr=r(mVe," (Pegasus model)"),mVe.forEach(t),WAr=i(D),dC=n(D,"LI",{});var gVe=s(dC);MCe=n(gVe,"STRONG",{});var IGt=s(MCe);UAr=r(IGt,"regnet"),IGt.forEach(t),HAr=r(gVe," \u2014 "),MK=n(gVe,"A",{href:!0});var NGt=s(MK);JAr=r(NGt,"TFRegNetModel"),NGt.forEach(t),YAr=r(gVe," (RegNet model)"),gVe.forEach(t),KAr=i(D),cC=n(D,"LI",{});var hVe=s(cC);ECe=n(hVe,"STRONG",{});var qGt=s(ECe);ZAr=r(qGt,"rembert"),qGt.forEach(t),e6r=r(hVe," \u2014 "),EK=n(hVe,"A",{href:!0});var jGt=s(EK);o6r=r(jGt,"TFRemBertModel"),jGt.forEach(t),r6r=r(hVe," (RemBERT model)"),hVe.forEach(t),t6r=i(D),fC=n(D,"LI",{});var pVe=s(fC);CCe=n(pVe,"STRONG",{});var DGt=s(CCe);a6r=r(DGt,"resnet"),DGt.forEach(t),n6r=r(pVe," \u2014 "),CK=n(pVe,"A",{href:!0});var GGt=s(CK);s6r=r(GGt,"TFResNetModel"),GGt.forEach(t),l6r=r(pVe," (ResNet model)"),pVe.forEach(t),i6r=i(D),mC=n(D,"LI",{});var uVe=s(mC);wCe=n(uVe,"STRONG",{});var OGt=s(wCe);d6r=r(OGt,"roberta"),OGt.forEach(t),c6r=r(uVe," \u2014 "),wK=n(uVe,"A",{href:!0});var VGt=s(wK);f6r=r(VGt,"TFRobertaModel"),VGt.forEach(t),m6r=r(uVe," (RoBERTa model)"),uVe.forEach(t),g6r=i(D),gC=n(D,"LI",{});var _Ve=s(gC);ACe=n(_Ve,"STRONG",{});var XGt=s(ACe);h6r=r(XGt,"roformer"),XGt.forEach(t),p6r=r(_Ve," \u2014 "),AK=n(_Ve,"A",{href:!0});var zGt=s(AK);u6r=r(zGt,"TFRoFormerModel"),zGt.forEach(t),_6r=r(_Ve," (RoFormer model)"),_Ve.forEach(t),b6r=i(D),hC=n(D,"LI",{});var bVe=s(hC);yCe=n(bVe,"STRONG",{});var QGt=s(yCe);v6r=r(QGt,"segformer"),QGt.forEach(t),F6r=r(bVe," \u2014 "),yK=n(bVe,"A",{href:!0});var WGt=s(yK);T6r=r(WGt,"TFSegformerModel"),WGt.forEach(t),M6r=r(bVe," (SegFormer model)"),bVe.forEach(t),E6r=i(D),pC=n(D,"LI",{});var vVe=s(pC);LCe=n(vVe,"STRONG",{});var UGt=s(LCe);C6r=r(UGt,"speech_to_text"),UGt.forEach(t),w6r=r(vVe," \u2014 "),LK=n(vVe,"A",{href:!0});var HGt=s(LK);A6r=r(HGt,"TFSpeech2TextModel"),HGt.forEach(t),y6r=r(vVe," (Speech2Text model)"),vVe.forEach(t),L6r=i(D),uC=n(D,"LI",{});var FVe=s(uC);xCe=n(FVe,"STRONG",{});var JGt=s(xCe);x6r=r(JGt,"swin"),JGt.forEach(t),$6r=r(FVe," \u2014 "),xK=n(FVe,"A",{href:!0});var YGt=s(xK);k6r=r(YGt,"TFSwinModel"),YGt.forEach(t),S6r=r(FVe," (Swin Transformer model)"),FVe.forEach(t),R6r=i(D),_C=n(D,"LI",{});var TVe=s(_C);$Ce=n(TVe,"STRONG",{});var KGt=s($Ce);P6r=r(KGt,"t5"),KGt.forEach(t),B6r=r(TVe," \u2014 "),$K=n(TVe,"A",{href:!0});var ZGt=s($K);I6r=r(ZGt,"TFT5Model"),ZGt.forEach(t),N6r=r(TVe," (T5 model)"),TVe.forEach(t),q6r=i(D),bC=n(D,"LI",{});var MVe=s(bC);kCe=n(MVe,"STRONG",{});var eOt=s(kCe);j6r=r(eOt,"tapas"),eOt.forEach(t),D6r=r(MVe," \u2014 "),kK=n(MVe,"A",{href:!0});var oOt=s(kK);G6r=r(oOt,"TFTapasModel"),oOt.forEach(t),O6r=r(MVe," (TAPAS model)"),MVe.forEach(t),V6r=i(D),vC=n(D,"LI",{});var EVe=s(vC);SCe=n(EVe,"STRONG",{});var rOt=s(SCe);X6r=r(rOt,"transfo-xl"),rOt.forEach(t),z6r=r(EVe," \u2014 "),SK=n(EVe,"A",{href:!0});var tOt=s(SK);Q6r=r(tOt,"TFTransfoXLModel"),tOt.forEach(t),W6r=r(EVe," (Transformer-XL model)"),EVe.forEach(t),U6r=i(D),FC=n(D,"LI",{});var CVe=s(FC);RCe=n(CVe,"STRONG",{});var aOt=s(RCe);H6r=r(aOt,"vit"),aOt.forEach(t),J6r=r(CVe," \u2014 "),RK=n(CVe,"A",{href:!0});var nOt=s(RK);Y6r=r(nOt,"TFViTModel"),nOt.forEach(t),K6r=r(CVe," (ViT model)"),CVe.forEach(t),Z6r=i(D),TC=n(D,"LI",{});var wVe=s(TC);PCe=n(wVe,"STRONG",{});var sOt=s(PCe);e7r=r(sOt,"vit_mae"),sOt.forEach(t),o7r=r(wVe," \u2014 "),PK=n(wVe,"A",{href:!0});var lOt=s(PK);r7r=r(lOt,"TFViTMAEModel"),lOt.forEach(t),t7r=r(wVe," (ViTMAE model)"),wVe.forEach(t),a7r=i(D),MC=n(D,"LI",{});var AVe=s(MC);BCe=n(AVe,"STRONG",{});var iOt=s(BCe);n7r=r(iOt,"wav2vec2"),iOt.forEach(t),s7r=r(AVe," \u2014 "),BK=n(AVe,"A",{href:!0});var dOt=s(BK);l7r=r(dOt,"TFWav2Vec2Model"),dOt.forEach(t),i7r=r(AVe," (Wav2Vec2 model)"),AVe.forEach(t),d7r=i(D),EC=n(D,"LI",{});var yVe=s(EC);ICe=n(yVe,"STRONG",{});var cOt=s(ICe);c7r=r(cOt,"xlm"),cOt.forEach(t),f7r=r(yVe," \u2014 "),IK=n(yVe,"A",{href:!0});var fOt=s(IK);m7r=r(fOt,"TFXLMModel"),fOt.forEach(t),g7r=r(yVe," (XLM model)"),yVe.forEach(t),h7r=i(D),CC=n(D,"LI",{});var LVe=s(CC);NCe=n(LVe,"STRONG",{});var mOt=s(NCe);p7r=r(mOt,"xlm-roberta"),mOt.forEach(t),u7r=r(LVe," \u2014 "),NK=n(LVe,"A",{href:!0});var gOt=s(NK);_7r=r(gOt,"TFXLMRobertaModel"),gOt.forEach(t),b7r=r(LVe," (XLM-RoBERTa model)"),LVe.forEach(t),v7r=i(D),wC=n(D,"LI",{});var xVe=s(wC);qCe=n(xVe,"STRONG",{});var hOt=s(qCe);F7r=r(hOt,"xlnet"),hOt.forEach(t),T7r=r(xVe," \u2014 "),qK=n(xVe,"A",{href:!0});var pOt=s(qK);M7r=r(pOt,"TFXLNetModel"),pOt.forEach(t),E7r=r(xVe," (XLNet model)"),xVe.forEach(t),D.forEach(t),C7r=i(Hl),T(AC.$$.fragment,Hl),Hl.forEach(t),Ul.forEach(t),QHe=i(f),Bc=n(f,"H2",{class:!0});var lKe=s(Bc);yC=n(lKe,"A",{id:!0,class:!0,href:!0});var uOt=s(yC);jCe=n(uOt,"SPAN",{});var _Ot=s(jCe);T(R$.$$.fragment,_Ot),_Ot.forEach(t),uOt.forEach(t),w7r=i(lKe),DCe=n(lKe,"SPAN",{});var bOt=s(DCe);A7r=r(bOt,"TFAutoModelForPreTraining"),bOt.forEach(t),lKe.forEach(t),WHe=i(f),lr=n(f,"DIV",{class:!0});var Jl=s(lr);T(P$.$$.fragment,Jl),y7r=i(Jl),Ic=n(Jl,"P",{});var pse=s(Ic);L7r=r(pse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jK=n(pse,"A",{href:!0});var vOt=s(jK);x7r=r(vOt,"from_pretrained()"),vOt.forEach(t),$7r=r(pse," class method or the "),DK=n(pse,"A",{href:!0});var FOt=s(DK);k7r=r(FOt,"from_config()"),FOt.forEach(t),S7r=r(pse,` class
method.`),pse.forEach(t),R7r=i(Jl),B$=n(Jl,"P",{});var iKe=s(B$);P7r=r(iKe,"This class cannot be instantiated directly using "),GCe=n(iKe,"CODE",{});var TOt=s(GCe);B7r=r(TOt,"__init__()"),TOt.forEach(t),I7r=r(iKe," (throws an error)."),iKe.forEach(t),N7r=i(Jl),Ot=n(Jl,"DIV",{class:!0});var xy=s(Ot);T(I$.$$.fragment,xy),q7r=i(xy),OCe=n(xy,"P",{});var MOt=s(OCe);j7r=r(MOt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),MOt.forEach(t),D7r=i(xy),Nc=n(xy,"P",{});var use=s(Nc);G7r=r(use,`Note:
Loading a model from its configuration file does `),VCe=n(use,"STRONG",{});var EOt=s(VCe);O7r=r(EOt,"not"),EOt.forEach(t),V7r=r(use,` load the model weights. It only affects the
model\u2019s configuration. Use `),GK=n(use,"A",{href:!0});var COt=s(GK);X7r=r(COt,"from_pretrained()"),COt.forEach(t),z7r=r(use," to load the model weights."),use.forEach(t),Q7r=i(xy),T(LC.$$.fragment,xy),xy.forEach(t),W7r=i(Jl),Ir=n(Jl,"DIV",{class:!0});var Yl=s(Ir);T(N$.$$.fragment,Yl),U7r=i(Yl),XCe=n(Yl,"P",{});var wOt=s(XCe);H7r=r(wOt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wOt.forEach(t),J7r=i(Yl),Mn=n(Yl,"P",{});var $y=s(Mn);Y7r=r($y,"The model class to instantiate is selected based on the "),zCe=n($y,"CODE",{});var AOt=s(zCe);K7r=r(AOt,"model_type"),AOt.forEach(t),Z7r=r($y,` property of the config object (either
passed as an argument or loaded from `),QCe=n($y,"CODE",{});var yOt=s(QCe);eyr=r(yOt,"pretrained_model_name_or_path"),yOt.forEach(t),oyr=r($y,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WCe=n($y,"CODE",{});var LOt=s(WCe);ryr=r(LOt,"pretrained_model_name_or_path"),LOt.forEach(t),tyr=r($y,":"),$y.forEach(t),ayr=i(Yl),se=n(Yl,"UL",{});var le=s(se);xC=n(le,"LI",{});var $Ve=s(xC);UCe=n($Ve,"STRONG",{});var xOt=s(UCe);nyr=r(xOt,"albert"),xOt.forEach(t),syr=r($Ve," \u2014 "),OK=n($Ve,"A",{href:!0});var $Ot=s(OK);lyr=r($Ot,"TFAlbertForPreTraining"),$Ot.forEach(t),iyr=r($Ve," (ALBERT model)"),$Ve.forEach(t),dyr=i(le),$C=n(le,"LI",{});var kVe=s($C);HCe=n(kVe,"STRONG",{});var kOt=s(HCe);cyr=r(kOt,"bart"),kOt.forEach(t),fyr=r(kVe," \u2014 "),VK=n(kVe,"A",{href:!0});var SOt=s(VK);myr=r(SOt,"TFBartForConditionalGeneration"),SOt.forEach(t),gyr=r(kVe," (BART model)"),kVe.forEach(t),hyr=i(le),kC=n(le,"LI",{});var SVe=s(kC);JCe=n(SVe,"STRONG",{});var ROt=s(JCe);pyr=r(ROt,"bert"),ROt.forEach(t),uyr=r(SVe," \u2014 "),XK=n(SVe,"A",{href:!0});var POt=s(XK);_yr=r(POt,"TFBertForPreTraining"),POt.forEach(t),byr=r(SVe," (BERT model)"),SVe.forEach(t),vyr=i(le),SC=n(le,"LI",{});var RVe=s(SC);YCe=n(RVe,"STRONG",{});var BOt=s(YCe);Fyr=r(BOt,"camembert"),BOt.forEach(t),Tyr=r(RVe," \u2014 "),zK=n(RVe,"A",{href:!0});var IOt=s(zK);Myr=r(IOt,"TFCamembertForMaskedLM"),IOt.forEach(t),Eyr=r(RVe," (CamemBERT model)"),RVe.forEach(t),Cyr=i(le),RC=n(le,"LI",{});var PVe=s(RC);KCe=n(PVe,"STRONG",{});var NOt=s(KCe);wyr=r(NOt,"ctrl"),NOt.forEach(t),Ayr=r(PVe," \u2014 "),QK=n(PVe,"A",{href:!0});var qOt=s(QK);yyr=r(qOt,"TFCTRLLMHeadModel"),qOt.forEach(t),Lyr=r(PVe," (CTRL model)"),PVe.forEach(t),xyr=i(le),PC=n(le,"LI",{});var BVe=s(PC);ZCe=n(BVe,"STRONG",{});var jOt=s(ZCe);$yr=r(jOt,"distilbert"),jOt.forEach(t),kyr=r(BVe," \u2014 "),WK=n(BVe,"A",{href:!0});var DOt=s(WK);Syr=r(DOt,"TFDistilBertForMaskedLM"),DOt.forEach(t),Ryr=r(BVe," (DistilBERT model)"),BVe.forEach(t),Pyr=i(le),BC=n(le,"LI",{});var IVe=s(BC);e3e=n(IVe,"STRONG",{});var GOt=s(e3e);Byr=r(GOt,"electra"),GOt.forEach(t),Iyr=r(IVe," \u2014 "),UK=n(IVe,"A",{href:!0});var OOt=s(UK);Nyr=r(OOt,"TFElectraForPreTraining"),OOt.forEach(t),qyr=r(IVe," (ELECTRA model)"),IVe.forEach(t),jyr=i(le),IC=n(le,"LI",{});var NVe=s(IC);o3e=n(NVe,"STRONG",{});var VOt=s(o3e);Dyr=r(VOt,"flaubert"),VOt.forEach(t),Gyr=r(NVe," \u2014 "),HK=n(NVe,"A",{href:!0});var XOt=s(HK);Oyr=r(XOt,"TFFlaubertWithLMHeadModel"),XOt.forEach(t),Vyr=r(NVe," (FlauBERT model)"),NVe.forEach(t),Xyr=i(le),NC=n(le,"LI",{});var qVe=s(NC);r3e=n(qVe,"STRONG",{});var zOt=s(r3e);zyr=r(zOt,"funnel"),zOt.forEach(t),Qyr=r(qVe," \u2014 "),JK=n(qVe,"A",{href:!0});var QOt=s(JK);Wyr=r(QOt,"TFFunnelForPreTraining"),QOt.forEach(t),Uyr=r(qVe," (Funnel Transformer model)"),qVe.forEach(t),Hyr=i(le),qC=n(le,"LI",{});var jVe=s(qC);t3e=n(jVe,"STRONG",{});var WOt=s(t3e);Jyr=r(WOt,"gpt2"),WOt.forEach(t),Yyr=r(jVe," \u2014 "),YK=n(jVe,"A",{href:!0});var UOt=s(YK);Kyr=r(UOt,"TFGPT2LMHeadModel"),UOt.forEach(t),Zyr=r(jVe," (OpenAI GPT-2 model)"),jVe.forEach(t),eLr=i(le),jC=n(le,"LI",{});var DVe=s(jC);a3e=n(DVe,"STRONG",{});var HOt=s(a3e);oLr=r(HOt,"layoutlm"),HOt.forEach(t),rLr=r(DVe," \u2014 "),KK=n(DVe,"A",{href:!0});var JOt=s(KK);tLr=r(JOt,"TFLayoutLMForMaskedLM"),JOt.forEach(t),aLr=r(DVe," (LayoutLM model)"),DVe.forEach(t),nLr=i(le),DC=n(le,"LI",{});var GVe=s(DC);n3e=n(GVe,"STRONG",{});var YOt=s(n3e);sLr=r(YOt,"lxmert"),YOt.forEach(t),lLr=r(GVe," \u2014 "),ZK=n(GVe,"A",{href:!0});var KOt=s(ZK);iLr=r(KOt,"TFLxmertForPreTraining"),KOt.forEach(t),dLr=r(GVe," (LXMERT model)"),GVe.forEach(t),cLr=i(le),GC=n(le,"LI",{});var OVe=s(GC);s3e=n(OVe,"STRONG",{});var ZOt=s(s3e);fLr=r(ZOt,"mobilebert"),ZOt.forEach(t),mLr=r(OVe," \u2014 "),eZ=n(OVe,"A",{href:!0});var eVt=s(eZ);gLr=r(eVt,"TFMobileBertForPreTraining"),eVt.forEach(t),hLr=r(OVe," (MobileBERT model)"),OVe.forEach(t),pLr=i(le),OC=n(le,"LI",{});var VVe=s(OC);l3e=n(VVe,"STRONG",{});var oVt=s(l3e);uLr=r(oVt,"mpnet"),oVt.forEach(t),_Lr=r(VVe," \u2014 "),oZ=n(VVe,"A",{href:!0});var rVt=s(oZ);bLr=r(rVt,"TFMPNetForMaskedLM"),rVt.forEach(t),vLr=r(VVe," (MPNet model)"),VVe.forEach(t),FLr=i(le),VC=n(le,"LI",{});var XVe=s(VC);i3e=n(XVe,"STRONG",{});var tVt=s(i3e);TLr=r(tVt,"openai-gpt"),tVt.forEach(t),MLr=r(XVe," \u2014 "),rZ=n(XVe,"A",{href:!0});var aVt=s(rZ);ELr=r(aVt,"TFOpenAIGPTLMHeadModel"),aVt.forEach(t),CLr=r(XVe," (OpenAI GPT model)"),XVe.forEach(t),wLr=i(le),XC=n(le,"LI",{});var zVe=s(XC);d3e=n(zVe,"STRONG",{});var nVt=s(d3e);ALr=r(nVt,"roberta"),nVt.forEach(t),yLr=r(zVe," \u2014 "),tZ=n(zVe,"A",{href:!0});var sVt=s(tZ);LLr=r(sVt,"TFRobertaForMaskedLM"),sVt.forEach(t),xLr=r(zVe," (RoBERTa model)"),zVe.forEach(t),$Lr=i(le),zC=n(le,"LI",{});var QVe=s(zC);c3e=n(QVe,"STRONG",{});var lVt=s(c3e);kLr=r(lVt,"t5"),lVt.forEach(t),SLr=r(QVe," \u2014 "),aZ=n(QVe,"A",{href:!0});var iVt=s(aZ);RLr=r(iVt,"TFT5ForConditionalGeneration"),iVt.forEach(t),PLr=r(QVe," (T5 model)"),QVe.forEach(t),BLr=i(le),QC=n(le,"LI",{});var WVe=s(QC);f3e=n(WVe,"STRONG",{});var dVt=s(f3e);ILr=r(dVt,"tapas"),dVt.forEach(t),NLr=r(WVe," \u2014 "),nZ=n(WVe,"A",{href:!0});var cVt=s(nZ);qLr=r(cVt,"TFTapasForMaskedLM"),cVt.forEach(t),jLr=r(WVe," (TAPAS model)"),WVe.forEach(t),DLr=i(le),WC=n(le,"LI",{});var UVe=s(WC);m3e=n(UVe,"STRONG",{});var fVt=s(m3e);GLr=r(fVt,"transfo-xl"),fVt.forEach(t),OLr=r(UVe," \u2014 "),sZ=n(UVe,"A",{href:!0});var mVt=s(sZ);VLr=r(mVt,"TFTransfoXLLMHeadModel"),mVt.forEach(t),XLr=r(UVe," (Transformer-XL model)"),UVe.forEach(t),zLr=i(le),UC=n(le,"LI",{});var HVe=s(UC);g3e=n(HVe,"STRONG",{});var gVt=s(g3e);QLr=r(gVt,"vit_mae"),gVt.forEach(t),WLr=r(HVe," \u2014 "),lZ=n(HVe,"A",{href:!0});var hVt=s(lZ);ULr=r(hVt,"TFViTMAEForPreTraining"),hVt.forEach(t),HLr=r(HVe," (ViTMAE model)"),HVe.forEach(t),JLr=i(le),HC=n(le,"LI",{});var JVe=s(HC);h3e=n(JVe,"STRONG",{});var pVt=s(h3e);YLr=r(pVt,"xlm"),pVt.forEach(t),KLr=r(JVe," \u2014 "),iZ=n(JVe,"A",{href:!0});var uVt=s(iZ);ZLr=r(uVt,"TFXLMWithLMHeadModel"),uVt.forEach(t),e9r=r(JVe," (XLM model)"),JVe.forEach(t),o9r=i(le),JC=n(le,"LI",{});var YVe=s(JC);p3e=n(YVe,"STRONG",{});var _Vt=s(p3e);r9r=r(_Vt,"xlm-roberta"),_Vt.forEach(t),t9r=r(YVe," \u2014 "),dZ=n(YVe,"A",{href:!0});var bVt=s(dZ);a9r=r(bVt,"TFXLMRobertaForMaskedLM"),bVt.forEach(t),n9r=r(YVe," (XLM-RoBERTa model)"),YVe.forEach(t),s9r=i(le),YC=n(le,"LI",{});var KVe=s(YC);u3e=n(KVe,"STRONG",{});var vVt=s(u3e);l9r=r(vVt,"xlnet"),vVt.forEach(t),i9r=r(KVe," \u2014 "),cZ=n(KVe,"A",{href:!0});var FVt=s(cZ);d9r=r(FVt,"TFXLNetLMHeadModel"),FVt.forEach(t),c9r=r(KVe," (XLNet model)"),KVe.forEach(t),le.forEach(t),f9r=i(Yl),T(KC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),UHe=i(f),qc=n(f,"H2",{class:!0});var dKe=s(qc);ZC=n(dKe,"A",{id:!0,class:!0,href:!0});var TVt=s(ZC);_3e=n(TVt,"SPAN",{});var MVt=s(_3e);T(q$.$$.fragment,MVt),MVt.forEach(t),TVt.forEach(t),m9r=i(dKe),b3e=n(dKe,"SPAN",{});var EVt=s(b3e);g9r=r(EVt,"TFAutoModelForCausalLM"),EVt.forEach(t),dKe.forEach(t),HHe=i(f),ir=n(f,"DIV",{class:!0});var Kl=s(ir);T(j$.$$.fragment,Kl),h9r=i(Kl),jc=n(Kl,"P",{});var _se=s(jc);p9r=r(_se,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fZ=n(_se,"A",{href:!0});var CVt=s(fZ);u9r=r(CVt,"from_pretrained()"),CVt.forEach(t),_9r=r(_se," class method or the "),mZ=n(_se,"A",{href:!0});var wVt=s(mZ);b9r=r(wVt,"from_config()"),wVt.forEach(t),v9r=r(_se,` class
method.`),_se.forEach(t),F9r=i(Kl),D$=n(Kl,"P",{});var cKe=s(D$);T9r=r(cKe,"This class cannot be instantiated directly using "),v3e=n(cKe,"CODE",{});var AVt=s(v3e);M9r=r(AVt,"__init__()"),AVt.forEach(t),E9r=r(cKe," (throws an error)."),cKe.forEach(t),C9r=i(Kl),Vt=n(Kl,"DIV",{class:!0});var ky=s(Vt);T(G$.$$.fragment,ky),w9r=i(ky),F3e=n(ky,"P",{});var yVt=s(F3e);A9r=r(yVt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yVt.forEach(t),y9r=i(ky),Dc=n(ky,"P",{});var bse=s(Dc);L9r=r(bse,`Note:
Loading a model from its configuration file does `),T3e=n(bse,"STRONG",{});var LVt=s(T3e);x9r=r(LVt,"not"),LVt.forEach(t),$9r=r(bse,` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=n(bse,"A",{href:!0});var xVt=s(gZ);k9r=r(xVt,"from_pretrained()"),xVt.forEach(t),S9r=r(bse," to load the model weights."),bse.forEach(t),R9r=i(ky),T(e3.$$.fragment,ky),ky.forEach(t),P9r=i(Kl),Nr=n(Kl,"DIV",{class:!0});var Zl=s(Nr);T(O$.$$.fragment,Zl),B9r=i(Zl),M3e=n(Zl,"P",{});var $Vt=s(M3e);I9r=r($Vt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Vt.forEach(t),N9r=i(Zl),En=n(Zl,"P",{});var Sy=s(En);q9r=r(Sy,"The model class to instantiate is selected based on the "),E3e=n(Sy,"CODE",{});var kVt=s(E3e);j9r=r(kVt,"model_type"),kVt.forEach(t),D9r=r(Sy,` property of the config object (either
passed as an argument or loaded from `),C3e=n(Sy,"CODE",{});var SVt=s(C3e);G9r=r(SVt,"pretrained_model_name_or_path"),SVt.forEach(t),O9r=r(Sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w3e=n(Sy,"CODE",{});var RVt=s(w3e);V9r=r(RVt,"pretrained_model_name_or_path"),RVt.forEach(t),X9r=r(Sy,":"),Sy.forEach(t),z9r=i(Zl),Me=n(Zl,"UL",{});var Ce=s(Me);o3=n(Ce,"LI",{});var ZVe=s(o3);A3e=n(ZVe,"STRONG",{});var PVt=s(A3e);Q9r=r(PVt,"bert"),PVt.forEach(t),W9r=r(ZVe," \u2014 "),hZ=n(ZVe,"A",{href:!0});var BVt=s(hZ);U9r=r(BVt,"TFBertLMHeadModel"),BVt.forEach(t),H9r=r(ZVe," (BERT model)"),ZVe.forEach(t),J9r=i(Ce),r3=n(Ce,"LI",{});var eXe=s(r3);y3e=n(eXe,"STRONG",{});var IVt=s(y3e);Y9r=r(IVt,"camembert"),IVt.forEach(t),K9r=r(eXe," \u2014 "),pZ=n(eXe,"A",{href:!0});var NVt=s(pZ);Z9r=r(NVt,"TFCamembertForCausalLM"),NVt.forEach(t),exr=r(eXe," (CamemBERT model)"),eXe.forEach(t),oxr=i(Ce),t3=n(Ce,"LI",{});var oXe=s(t3);L3e=n(oXe,"STRONG",{});var qVt=s(L3e);rxr=r(qVt,"ctrl"),qVt.forEach(t),txr=r(oXe," \u2014 "),uZ=n(oXe,"A",{href:!0});var jVt=s(uZ);axr=r(jVt,"TFCTRLLMHeadModel"),jVt.forEach(t),nxr=r(oXe," (CTRL model)"),oXe.forEach(t),sxr=i(Ce),a3=n(Ce,"LI",{});var rXe=s(a3);x3e=n(rXe,"STRONG",{});var DVt=s(x3e);lxr=r(DVt,"gpt2"),DVt.forEach(t),ixr=r(rXe," \u2014 "),_Z=n(rXe,"A",{href:!0});var GVt=s(_Z);dxr=r(GVt,"TFGPT2LMHeadModel"),GVt.forEach(t),cxr=r(rXe," (OpenAI GPT-2 model)"),rXe.forEach(t),fxr=i(Ce),n3=n(Ce,"LI",{});var tXe=s(n3);$3e=n(tXe,"STRONG",{});var OVt=s($3e);mxr=r(OVt,"gptj"),OVt.forEach(t),gxr=r(tXe," \u2014 "),bZ=n(tXe,"A",{href:!0});var VVt=s(bZ);hxr=r(VVt,"TFGPTJForCausalLM"),VVt.forEach(t),pxr=r(tXe," (GPT-J model)"),tXe.forEach(t),uxr=i(Ce),s3=n(Ce,"LI",{});var aXe=s(s3);k3e=n(aXe,"STRONG",{});var XVt=s(k3e);_xr=r(XVt,"openai-gpt"),XVt.forEach(t),bxr=r(aXe," \u2014 "),vZ=n(aXe,"A",{href:!0});var zVt=s(vZ);vxr=r(zVt,"TFOpenAIGPTLMHeadModel"),zVt.forEach(t),Fxr=r(aXe," (OpenAI GPT model)"),aXe.forEach(t),Txr=i(Ce),l3=n(Ce,"LI",{});var nXe=s(l3);S3e=n(nXe,"STRONG",{});var QVt=s(S3e);Mxr=r(QVt,"opt"),QVt.forEach(t),Exr=r(nXe," \u2014 "),FZ=n(nXe,"A",{href:!0});var WVt=s(FZ);Cxr=r(WVt,"TFOPTForCausalLM"),WVt.forEach(t),wxr=r(nXe," (OPT model)"),nXe.forEach(t),Axr=i(Ce),i3=n(Ce,"LI",{});var sXe=s(i3);R3e=n(sXe,"STRONG",{});var UVt=s(R3e);yxr=r(UVt,"rembert"),UVt.forEach(t),Lxr=r(sXe," \u2014 "),TZ=n(sXe,"A",{href:!0});var HVt=s(TZ);xxr=r(HVt,"TFRemBertForCausalLM"),HVt.forEach(t),$xr=r(sXe," (RemBERT model)"),sXe.forEach(t),kxr=i(Ce),d3=n(Ce,"LI",{});var lXe=s(d3);P3e=n(lXe,"STRONG",{});var JVt=s(P3e);Sxr=r(JVt,"roberta"),JVt.forEach(t),Rxr=r(lXe," \u2014 "),MZ=n(lXe,"A",{href:!0});var YVt=s(MZ);Pxr=r(YVt,"TFRobertaForCausalLM"),YVt.forEach(t),Bxr=r(lXe," (RoBERTa model)"),lXe.forEach(t),Ixr=i(Ce),c3=n(Ce,"LI",{});var iXe=s(c3);B3e=n(iXe,"STRONG",{});var KVt=s(B3e);Nxr=r(KVt,"roformer"),KVt.forEach(t),qxr=r(iXe," \u2014 "),EZ=n(iXe,"A",{href:!0});var ZVt=s(EZ);jxr=r(ZVt,"TFRoFormerForCausalLM"),ZVt.forEach(t),Dxr=r(iXe," (RoFormer model)"),iXe.forEach(t),Gxr=i(Ce),f3=n(Ce,"LI",{});var dXe=s(f3);I3e=n(dXe,"STRONG",{});var eXt=s(I3e);Oxr=r(eXt,"transfo-xl"),eXt.forEach(t),Vxr=r(dXe," \u2014 "),CZ=n(dXe,"A",{href:!0});var oXt=s(CZ);Xxr=r(oXt,"TFTransfoXLLMHeadModel"),oXt.forEach(t),zxr=r(dXe," (Transformer-XL model)"),dXe.forEach(t),Qxr=i(Ce),m3=n(Ce,"LI",{});var cXe=s(m3);N3e=n(cXe,"STRONG",{});var rXt=s(N3e);Wxr=r(rXt,"xlm"),rXt.forEach(t),Uxr=r(cXe," \u2014 "),wZ=n(cXe,"A",{href:!0});var tXt=s(wZ);Hxr=r(tXt,"TFXLMWithLMHeadModel"),tXt.forEach(t),Jxr=r(cXe," (XLM model)"),cXe.forEach(t),Yxr=i(Ce),g3=n(Ce,"LI",{});var fXe=s(g3);q3e=n(fXe,"STRONG",{});var aXt=s(q3e);Kxr=r(aXt,"xlnet"),aXt.forEach(t),Zxr=r(fXe," \u2014 "),AZ=n(fXe,"A",{href:!0});var nXt=s(AZ);e$r=r(nXt,"TFXLNetLMHeadModel"),nXt.forEach(t),o$r=r(fXe," (XLNet model)"),fXe.forEach(t),Ce.forEach(t),r$r=i(Zl),T(h3.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),JHe=i(f),Gc=n(f,"H2",{class:!0});var fKe=s(Gc);p3=n(fKe,"A",{id:!0,class:!0,href:!0});var sXt=s(p3);j3e=n(sXt,"SPAN",{});var lXt=s(j3e);T(V$.$$.fragment,lXt),lXt.forEach(t),sXt.forEach(t),t$r=i(fKe),D3e=n(fKe,"SPAN",{});var iXt=s(D3e);a$r=r(iXt,"TFAutoModelForImageClassification"),iXt.forEach(t),fKe.forEach(t),YHe=i(f),dr=n(f,"DIV",{class:!0});var ei=s(dr);T(X$.$$.fragment,ei),n$r=i(ei),Oc=n(ei,"P",{});var vse=s(Oc);s$r=r(vse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),yZ=n(vse,"A",{href:!0});var dXt=s(yZ);l$r=r(dXt,"from_pretrained()"),dXt.forEach(t),i$r=r(vse," class method or the "),LZ=n(vse,"A",{href:!0});var cXt=s(LZ);d$r=r(cXt,"from_config()"),cXt.forEach(t),c$r=r(vse,` class
method.`),vse.forEach(t),f$r=i(ei),z$=n(ei,"P",{});var mKe=s(z$);m$r=r(mKe,"This class cannot be instantiated directly using "),G3e=n(mKe,"CODE",{});var fXt=s(G3e);g$r=r(fXt,"__init__()"),fXt.forEach(t),h$r=r(mKe," (throws an error)."),mKe.forEach(t),p$r=i(ei),Xt=n(ei,"DIV",{class:!0});var Ry=s(Xt);T(Q$.$$.fragment,Ry),u$r=i(Ry),O3e=n(Ry,"P",{});var mXt=s(O3e);_$r=r(mXt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mXt.forEach(t),b$r=i(Ry),Vc=n(Ry,"P",{});var Fse=s(Vc);v$r=r(Fse,`Note:
Loading a model from its configuration file does `),V3e=n(Fse,"STRONG",{});var gXt=s(V3e);F$r=r(gXt,"not"),gXt.forEach(t),T$r=r(Fse,` load the model weights. It only affects the
model\u2019s configuration. Use `),xZ=n(Fse,"A",{href:!0});var hXt=s(xZ);M$r=r(hXt,"from_pretrained()"),hXt.forEach(t),E$r=r(Fse," to load the model weights."),Fse.forEach(t),C$r=i(Ry),T(u3.$$.fragment,Ry),Ry.forEach(t),w$r=i(ei),qr=n(ei,"DIV",{class:!0});var oi=s(qr);T(W$.$$.fragment,oi),A$r=i(oi),X3e=n(oi,"P",{});var pXt=s(X3e);y$r=r(pXt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),pXt.forEach(t),L$r=i(oi),Cn=n(oi,"P",{});var Py=s(Cn);x$r=r(Py,"The model class to instantiate is selected based on the "),z3e=n(Py,"CODE",{});var uXt=s(z3e);$$r=r(uXt,"model_type"),uXt.forEach(t),k$r=r(Py,` property of the config object (either
passed as an argument or loaded from `),Q3e=n(Py,"CODE",{});var _Xt=s(Q3e);S$r=r(_Xt,"pretrained_model_name_or_path"),_Xt.forEach(t),R$r=r(Py,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W3e=n(Py,"CODE",{});var bXt=s(W3e);P$r=r(bXt,"pretrained_model_name_or_path"),bXt.forEach(t),B$r=r(Py,":"),Py.forEach(t),I$r=i(oi),Ve=n(oi,"UL",{});var Co=s(Ve);_3=n(Co,"LI",{});var mXe=s(_3);U3e=n(mXe,"STRONG",{});var vXt=s(U3e);N$r=r(vXt,"convnext"),vXt.forEach(t),q$r=r(mXe," \u2014 "),$Z=n(mXe,"A",{href:!0});var FXt=s($Z);j$r=r(FXt,"TFConvNextForImageClassification"),FXt.forEach(t),D$r=r(mXe," (ConvNeXT model)"),mXe.forEach(t),G$r=i(Co),b3=n(Co,"LI",{});var gXe=s(b3);H3e=n(gXe,"STRONG",{});var TXt=s(H3e);O$r=r(TXt,"data2vec-vision"),TXt.forEach(t),V$r=r(gXe," \u2014 "),kZ=n(gXe,"A",{href:!0});var MXt=s(kZ);X$r=r(MXt,"TFData2VecVisionForImageClassification"),MXt.forEach(t),z$r=r(gXe," (Data2VecVision model)"),gXe.forEach(t),Q$r=i(Co),hl=n(Co,"LI",{});var AP=s(hl);J3e=n(AP,"STRONG",{});var EXt=s(J3e);W$r=r(EXt,"deit"),EXt.forEach(t),U$r=r(AP," \u2014 "),SZ=n(AP,"A",{href:!0});var CXt=s(SZ);H$r=r(CXt,"TFDeiTForImageClassification"),CXt.forEach(t),J$r=r(AP," or "),RZ=n(AP,"A",{href:!0});var wXt=s(RZ);Y$r=r(wXt,"TFDeiTForImageClassificationWithTeacher"),wXt.forEach(t),K$r=r(AP," (DeiT model)"),AP.forEach(t),Z$r=i(Co),v3=n(Co,"LI",{});var hXe=s(v3);Y3e=n(hXe,"STRONG",{});var AXt=s(Y3e);ekr=r(AXt,"regnet"),AXt.forEach(t),okr=r(hXe," \u2014 "),PZ=n(hXe,"A",{href:!0});var yXt=s(PZ);rkr=r(yXt,"TFRegNetForImageClassification"),yXt.forEach(t),tkr=r(hXe," (RegNet model)"),hXe.forEach(t),akr=i(Co),F3=n(Co,"LI",{});var pXe=s(F3);K3e=n(pXe,"STRONG",{});var LXt=s(K3e);nkr=r(LXt,"resnet"),LXt.forEach(t),skr=r(pXe," \u2014 "),BZ=n(pXe,"A",{href:!0});var xXt=s(BZ);lkr=r(xXt,"TFResNetForImageClassification"),xXt.forEach(t),ikr=r(pXe," (ResNet model)"),pXe.forEach(t),dkr=i(Co),T3=n(Co,"LI",{});var uXe=s(T3);Z3e=n(uXe,"STRONG",{});var $Xt=s(Z3e);ckr=r($Xt,"segformer"),$Xt.forEach(t),fkr=r(uXe," \u2014 "),IZ=n(uXe,"A",{href:!0});var kXt=s(IZ);mkr=r(kXt,"TFSegformerForImageClassification"),kXt.forEach(t),gkr=r(uXe," (SegFormer model)"),uXe.forEach(t),hkr=i(Co),M3=n(Co,"LI",{});var _Xe=s(M3);e5e=n(_Xe,"STRONG",{});var SXt=s(e5e);pkr=r(SXt,"swin"),SXt.forEach(t),ukr=r(_Xe," \u2014 "),NZ=n(_Xe,"A",{href:!0});var RXt=s(NZ);_kr=r(RXt,"TFSwinForImageClassification"),RXt.forEach(t),bkr=r(_Xe," (Swin Transformer model)"),_Xe.forEach(t),vkr=i(Co),E3=n(Co,"LI",{});var bXe=s(E3);o5e=n(bXe,"STRONG",{});var PXt=s(o5e);Fkr=r(PXt,"vit"),PXt.forEach(t),Tkr=r(bXe," \u2014 "),qZ=n(bXe,"A",{href:!0});var BXt=s(qZ);Mkr=r(BXt,"TFViTForImageClassification"),BXt.forEach(t),Ekr=r(bXe," (ViT model)"),bXe.forEach(t),Co.forEach(t),Ckr=i(oi),T(C3.$$.fragment,oi),oi.forEach(t),ei.forEach(t),KHe=i(f),Xc=n(f,"H2",{class:!0});var gKe=s(Xc);w3=n(gKe,"A",{id:!0,class:!0,href:!0});var IXt=s(w3);r5e=n(IXt,"SPAN",{});var NXt=s(r5e);T(U$.$$.fragment,NXt),NXt.forEach(t),IXt.forEach(t),wkr=i(gKe),t5e=n(gKe,"SPAN",{});var qXt=s(t5e);Akr=r(qXt,"TFAutoModelForSemanticSegmentation"),qXt.forEach(t),gKe.forEach(t),ZHe=i(f),cr=n(f,"DIV",{class:!0});var ri=s(cr);T(H$.$$.fragment,ri),ykr=i(ri),zc=n(ri,"P",{});var Tse=s(zc);Lkr=r(Tse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),jZ=n(Tse,"A",{href:!0});var jXt=s(jZ);xkr=r(jXt,"from_pretrained()"),jXt.forEach(t),$kr=r(Tse," class method or the "),DZ=n(Tse,"A",{href:!0});var DXt=s(DZ);kkr=r(DXt,"from_config()"),DXt.forEach(t),Skr=r(Tse,` class
method.`),Tse.forEach(t),Rkr=i(ri),J$=n(ri,"P",{});var hKe=s(J$);Pkr=r(hKe,"This class cannot be instantiated directly using "),a5e=n(hKe,"CODE",{});var GXt=s(a5e);Bkr=r(GXt,"__init__()"),GXt.forEach(t),Ikr=r(hKe," (throws an error)."),hKe.forEach(t),Nkr=i(ri),zt=n(ri,"DIV",{class:!0});var By=s(zt);T(Y$.$$.fragment,By),qkr=i(By),n5e=n(By,"P",{});var OXt=s(n5e);jkr=r(OXt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),OXt.forEach(t),Dkr=i(By),Qc=n(By,"P",{});var Mse=s(Qc);Gkr=r(Mse,`Note:
Loading a model from its configuration file does `),s5e=n(Mse,"STRONG",{});var VXt=s(s5e);Okr=r(VXt,"not"),VXt.forEach(t),Vkr=r(Mse,` load the model weights. It only affects the
model\u2019s configuration. Use `),GZ=n(Mse,"A",{href:!0});var XXt=s(GZ);Xkr=r(XXt,"from_pretrained()"),XXt.forEach(t),zkr=r(Mse," to load the model weights."),Mse.forEach(t),Qkr=i(By),T(A3.$$.fragment,By),By.forEach(t),Wkr=i(ri),jr=n(ri,"DIV",{class:!0});var ti=s(jr);T(K$.$$.fragment,ti),Ukr=i(ti),l5e=n(ti,"P",{});var zXt=s(l5e);Hkr=r(zXt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),zXt.forEach(t),Jkr=i(ti),wn=n(ti,"P",{});var Iy=s(wn);Ykr=r(Iy,"The model class to instantiate is selected based on the "),i5e=n(Iy,"CODE",{});var QXt=s(i5e);Kkr=r(QXt,"model_type"),QXt.forEach(t),Zkr=r(Iy,` property of the config object (either
passed as an argument or loaded from `),d5e=n(Iy,"CODE",{});var WXt=s(d5e);eSr=r(WXt,"pretrained_model_name_or_path"),WXt.forEach(t),oSr=r(Iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c5e=n(Iy,"CODE",{});var UXt=s(c5e);rSr=r(UXt,"pretrained_model_name_or_path"),UXt.forEach(t),tSr=r(Iy,":"),Iy.forEach(t),aSr=i(ti),Z$=n(ti,"UL",{});var pKe=s(Z$);y3=n(pKe,"LI",{});var vXe=s(y3);f5e=n(vXe,"STRONG",{});var HXt=s(f5e);nSr=r(HXt,"data2vec-vision"),HXt.forEach(t),sSr=r(vXe," \u2014 "),OZ=n(vXe,"A",{href:!0});var JXt=s(OZ);lSr=r(JXt,"TFData2VecVisionForSemanticSegmentation"),JXt.forEach(t),iSr=r(vXe," (Data2VecVision model)"),vXe.forEach(t),dSr=i(pKe),L3=n(pKe,"LI",{});var FXe=s(L3);m5e=n(FXe,"STRONG",{});var YXt=s(m5e);cSr=r(YXt,"segformer"),YXt.forEach(t),fSr=r(FXe," \u2014 "),VZ=n(FXe,"A",{href:!0});var KXt=s(VZ);mSr=r(KXt,"TFSegformerForSemanticSegmentation"),KXt.forEach(t),gSr=r(FXe," (SegFormer model)"),FXe.forEach(t),pKe.forEach(t),hSr=i(ti),T(x3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),eJe=i(f),Wc=n(f,"H2",{class:!0});var uKe=s(Wc);$3=n(uKe,"A",{id:!0,class:!0,href:!0});var ZXt=s($3);g5e=n(ZXt,"SPAN",{});var ezt=s(g5e);T(ek.$$.fragment,ezt),ezt.forEach(t),ZXt.forEach(t),pSr=i(uKe),h5e=n(uKe,"SPAN",{});var ozt=s(h5e);uSr=r(ozt,"TFAutoModelForMaskedLM"),ozt.forEach(t),uKe.forEach(t),oJe=i(f),fr=n(f,"DIV",{class:!0});var ai=s(fr);T(ok.$$.fragment,ai),_Sr=i(ai),Uc=n(ai,"P",{});var Ese=s(Uc);bSr=r(Ese,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XZ=n(Ese,"A",{href:!0});var rzt=s(XZ);vSr=r(rzt,"from_pretrained()"),rzt.forEach(t),FSr=r(Ese," class method or the "),zZ=n(Ese,"A",{href:!0});var tzt=s(zZ);TSr=r(tzt,"from_config()"),tzt.forEach(t),MSr=r(Ese,` class
method.`),Ese.forEach(t),ESr=i(ai),rk=n(ai,"P",{});var _Ke=s(rk);CSr=r(_Ke,"This class cannot be instantiated directly using "),p5e=n(_Ke,"CODE",{});var azt=s(p5e);wSr=r(azt,"__init__()"),azt.forEach(t),ASr=r(_Ke," (throws an error)."),_Ke.forEach(t),ySr=i(ai),Qt=n(ai,"DIV",{class:!0});var Ny=s(Qt);T(tk.$$.fragment,Ny),LSr=i(Ny),u5e=n(Ny,"P",{});var nzt=s(u5e);xSr=r(nzt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),nzt.forEach(t),$Sr=i(Ny),Hc=n(Ny,"P",{});var Cse=s(Hc);kSr=r(Cse,`Note:
Loading a model from its configuration file does `),_5e=n(Cse,"STRONG",{});var szt=s(_5e);SSr=r(szt,"not"),szt.forEach(t),RSr=r(Cse,` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=n(Cse,"A",{href:!0});var lzt=s(QZ);PSr=r(lzt,"from_pretrained()"),lzt.forEach(t),BSr=r(Cse," to load the model weights."),Cse.forEach(t),ISr=i(Ny),T(k3.$$.fragment,Ny),Ny.forEach(t),NSr=i(ai),Dr=n(ai,"DIV",{class:!0});var ni=s(Dr);T(ak.$$.fragment,ni),qSr=i(ni),b5e=n(ni,"P",{});var izt=s(b5e);jSr=r(izt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),izt.forEach(t),DSr=i(ni),An=n(ni,"P",{});var qy=s(An);GSr=r(qy,"The model class to instantiate is selected based on the "),v5e=n(qy,"CODE",{});var dzt=s(v5e);OSr=r(dzt,"model_type"),dzt.forEach(t),VSr=r(qy,` property of the config object (either
passed as an argument or loaded from `),F5e=n(qy,"CODE",{});var czt=s(F5e);XSr=r(czt,"pretrained_model_name_or_path"),czt.forEach(t),zSr=r(qy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T5e=n(qy,"CODE",{});var fzt=s(T5e);QSr=r(fzt,"pretrained_model_name_or_path"),fzt.forEach(t),WSr=r(qy,":"),qy.forEach(t),USr=i(ni),de=n(ni,"UL",{});var he=s(de);S3=n(he,"LI",{});var TXe=s(S3);M5e=n(TXe,"STRONG",{});var mzt=s(M5e);HSr=r(mzt,"albert"),mzt.forEach(t),JSr=r(TXe," \u2014 "),WZ=n(TXe,"A",{href:!0});var gzt=s(WZ);YSr=r(gzt,"TFAlbertForMaskedLM"),gzt.forEach(t),KSr=r(TXe," (ALBERT model)"),TXe.forEach(t),ZSr=i(he),R3=n(he,"LI",{});var MXe=s(R3);E5e=n(MXe,"STRONG",{});var hzt=s(E5e);eRr=r(hzt,"bert"),hzt.forEach(t),oRr=r(MXe," \u2014 "),UZ=n(MXe,"A",{href:!0});var pzt=s(UZ);rRr=r(pzt,"TFBertForMaskedLM"),pzt.forEach(t),tRr=r(MXe," (BERT model)"),MXe.forEach(t),aRr=i(he),P3=n(he,"LI",{});var EXe=s(P3);C5e=n(EXe,"STRONG",{});var uzt=s(C5e);nRr=r(uzt,"camembert"),uzt.forEach(t),sRr=r(EXe," \u2014 "),HZ=n(EXe,"A",{href:!0});var _zt=s(HZ);lRr=r(_zt,"TFCamembertForMaskedLM"),_zt.forEach(t),iRr=r(EXe," (CamemBERT model)"),EXe.forEach(t),dRr=i(he),B3=n(he,"LI",{});var CXe=s(B3);w5e=n(CXe,"STRONG",{});var bzt=s(w5e);cRr=r(bzt,"convbert"),bzt.forEach(t),fRr=r(CXe," \u2014 "),JZ=n(CXe,"A",{href:!0});var vzt=s(JZ);mRr=r(vzt,"TFConvBertForMaskedLM"),vzt.forEach(t),gRr=r(CXe," (ConvBERT model)"),CXe.forEach(t),hRr=i(he),I3=n(he,"LI",{});var wXe=s(I3);A5e=n(wXe,"STRONG",{});var Fzt=s(A5e);pRr=r(Fzt,"deberta"),Fzt.forEach(t),uRr=r(wXe," \u2014 "),YZ=n(wXe,"A",{href:!0});var Tzt=s(YZ);_Rr=r(Tzt,"TFDebertaForMaskedLM"),Tzt.forEach(t),bRr=r(wXe," (DeBERTa model)"),wXe.forEach(t),vRr=i(he),N3=n(he,"LI",{});var AXe=s(N3);y5e=n(AXe,"STRONG",{});var Mzt=s(y5e);FRr=r(Mzt,"deberta-v2"),Mzt.forEach(t),TRr=r(AXe," \u2014 "),KZ=n(AXe,"A",{href:!0});var Ezt=s(KZ);MRr=r(Ezt,"TFDebertaV2ForMaskedLM"),Ezt.forEach(t),ERr=r(AXe," (DeBERTa-v2 model)"),AXe.forEach(t),CRr=i(he),q3=n(he,"LI",{});var yXe=s(q3);L5e=n(yXe,"STRONG",{});var Czt=s(L5e);wRr=r(Czt,"distilbert"),Czt.forEach(t),ARr=r(yXe," \u2014 "),ZZ=n(yXe,"A",{href:!0});var wzt=s(ZZ);yRr=r(wzt,"TFDistilBertForMaskedLM"),wzt.forEach(t),LRr=r(yXe," (DistilBERT model)"),yXe.forEach(t),xRr=i(he),j3=n(he,"LI",{});var LXe=s(j3);x5e=n(LXe,"STRONG",{});var Azt=s(x5e);$Rr=r(Azt,"electra"),Azt.forEach(t),kRr=r(LXe," \u2014 "),eee=n(LXe,"A",{href:!0});var yzt=s(eee);SRr=r(yzt,"TFElectraForMaskedLM"),yzt.forEach(t),RRr=r(LXe," (ELECTRA model)"),LXe.forEach(t),PRr=i(he),D3=n(he,"LI",{});var xXe=s(D3);$5e=n(xXe,"STRONG",{});var Lzt=s($5e);BRr=r(Lzt,"flaubert"),Lzt.forEach(t),IRr=r(xXe," \u2014 "),oee=n(xXe,"A",{href:!0});var xzt=s(oee);NRr=r(xzt,"TFFlaubertWithLMHeadModel"),xzt.forEach(t),qRr=r(xXe," (FlauBERT model)"),xXe.forEach(t),jRr=i(he),G3=n(he,"LI",{});var $Xe=s(G3);k5e=n($Xe,"STRONG",{});var $zt=s(k5e);DRr=r($zt,"funnel"),$zt.forEach(t),GRr=r($Xe," \u2014 "),ree=n($Xe,"A",{href:!0});var kzt=s(ree);ORr=r(kzt,"TFFunnelForMaskedLM"),kzt.forEach(t),VRr=r($Xe," (Funnel Transformer model)"),$Xe.forEach(t),XRr=i(he),O3=n(he,"LI",{});var kXe=s(O3);S5e=n(kXe,"STRONG",{});var Szt=s(S5e);zRr=r(Szt,"layoutlm"),Szt.forEach(t),QRr=r(kXe," \u2014 "),tee=n(kXe,"A",{href:!0});var Rzt=s(tee);WRr=r(Rzt,"TFLayoutLMForMaskedLM"),Rzt.forEach(t),URr=r(kXe," (LayoutLM model)"),kXe.forEach(t),HRr=i(he),V3=n(he,"LI",{});var SXe=s(V3);R5e=n(SXe,"STRONG",{});var Pzt=s(R5e);JRr=r(Pzt,"longformer"),Pzt.forEach(t),YRr=r(SXe," \u2014 "),aee=n(SXe,"A",{href:!0});var Bzt=s(aee);KRr=r(Bzt,"TFLongformerForMaskedLM"),Bzt.forEach(t),ZRr=r(SXe," (Longformer model)"),SXe.forEach(t),ePr=i(he),X3=n(he,"LI",{});var RXe=s(X3);P5e=n(RXe,"STRONG",{});var Izt=s(P5e);oPr=r(Izt,"mobilebert"),Izt.forEach(t),rPr=r(RXe," \u2014 "),nee=n(RXe,"A",{href:!0});var Nzt=s(nee);tPr=r(Nzt,"TFMobileBertForMaskedLM"),Nzt.forEach(t),aPr=r(RXe," (MobileBERT model)"),RXe.forEach(t),nPr=i(he),z3=n(he,"LI",{});var PXe=s(z3);B5e=n(PXe,"STRONG",{});var qzt=s(B5e);sPr=r(qzt,"mpnet"),qzt.forEach(t),lPr=r(PXe," \u2014 "),see=n(PXe,"A",{href:!0});var jzt=s(see);iPr=r(jzt,"TFMPNetForMaskedLM"),jzt.forEach(t),dPr=r(PXe," (MPNet model)"),PXe.forEach(t),cPr=i(he),Q3=n(he,"LI",{});var BXe=s(Q3);I5e=n(BXe,"STRONG",{});var Dzt=s(I5e);fPr=r(Dzt,"rembert"),Dzt.forEach(t),mPr=r(BXe," \u2014 "),lee=n(BXe,"A",{href:!0});var Gzt=s(lee);gPr=r(Gzt,"TFRemBertForMaskedLM"),Gzt.forEach(t),hPr=r(BXe," (RemBERT model)"),BXe.forEach(t),pPr=i(he),W3=n(he,"LI",{});var IXe=s(W3);N5e=n(IXe,"STRONG",{});var Ozt=s(N5e);uPr=r(Ozt,"roberta"),Ozt.forEach(t),_Pr=r(IXe," \u2014 "),iee=n(IXe,"A",{href:!0});var Vzt=s(iee);bPr=r(Vzt,"TFRobertaForMaskedLM"),Vzt.forEach(t),vPr=r(IXe," (RoBERTa model)"),IXe.forEach(t),FPr=i(he),U3=n(he,"LI",{});var NXe=s(U3);q5e=n(NXe,"STRONG",{});var Xzt=s(q5e);TPr=r(Xzt,"roformer"),Xzt.forEach(t),MPr=r(NXe," \u2014 "),dee=n(NXe,"A",{href:!0});var zzt=s(dee);EPr=r(zzt,"TFRoFormerForMaskedLM"),zzt.forEach(t),CPr=r(NXe," (RoFormer model)"),NXe.forEach(t),wPr=i(he),H3=n(he,"LI",{});var qXe=s(H3);j5e=n(qXe,"STRONG",{});var Qzt=s(j5e);APr=r(Qzt,"tapas"),Qzt.forEach(t),yPr=r(qXe," \u2014 "),cee=n(qXe,"A",{href:!0});var Wzt=s(cee);LPr=r(Wzt,"TFTapasForMaskedLM"),Wzt.forEach(t),xPr=r(qXe," (TAPAS model)"),qXe.forEach(t),$Pr=i(he),J3=n(he,"LI",{});var jXe=s(J3);D5e=n(jXe,"STRONG",{});var Uzt=s(D5e);kPr=r(Uzt,"xlm"),Uzt.forEach(t),SPr=r(jXe," \u2014 "),fee=n(jXe,"A",{href:!0});var Hzt=s(fee);RPr=r(Hzt,"TFXLMWithLMHeadModel"),Hzt.forEach(t),PPr=r(jXe," (XLM model)"),jXe.forEach(t),BPr=i(he),Y3=n(he,"LI",{});var DXe=s(Y3);G5e=n(DXe,"STRONG",{});var Jzt=s(G5e);IPr=r(Jzt,"xlm-roberta"),Jzt.forEach(t),NPr=r(DXe," \u2014 "),mee=n(DXe,"A",{href:!0});var Yzt=s(mee);qPr=r(Yzt,"TFXLMRobertaForMaskedLM"),Yzt.forEach(t),jPr=r(DXe," (XLM-RoBERTa model)"),DXe.forEach(t),he.forEach(t),DPr=i(ni),T(K3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),rJe=i(f),Jc=n(f,"H2",{class:!0});var bKe=s(Jc);Z3=n(bKe,"A",{id:!0,class:!0,href:!0});var Kzt=s(Z3);O5e=n(Kzt,"SPAN",{});var Zzt=s(O5e);T(nk.$$.fragment,Zzt),Zzt.forEach(t),Kzt.forEach(t),GPr=i(bKe),V5e=n(bKe,"SPAN",{});var eQt=s(V5e);OPr=r(eQt,"TFAutoModelForSeq2SeqLM"),eQt.forEach(t),bKe.forEach(t),tJe=i(f),mr=n(f,"DIV",{class:!0});var si=s(mr);T(sk.$$.fragment,si),VPr=i(si),Yc=n(si,"P",{});var wse=s(Yc);XPr=r(wse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gee=n(wse,"A",{href:!0});var oQt=s(gee);zPr=r(oQt,"from_pretrained()"),oQt.forEach(t),QPr=r(wse," class method or the "),hee=n(wse,"A",{href:!0});var rQt=s(hee);WPr=r(rQt,"from_config()"),rQt.forEach(t),UPr=r(wse,` class
method.`),wse.forEach(t),HPr=i(si),lk=n(si,"P",{});var vKe=s(lk);JPr=r(vKe,"This class cannot be instantiated directly using "),X5e=n(vKe,"CODE",{});var tQt=s(X5e);YPr=r(tQt,"__init__()"),tQt.forEach(t),KPr=r(vKe," (throws an error)."),vKe.forEach(t),ZPr=i(si),Wt=n(si,"DIV",{class:!0});var jy=s(Wt);T(ik.$$.fragment,jy),eBr=i(jy),z5e=n(jy,"P",{});var aQt=s(z5e);oBr=r(aQt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aQt.forEach(t),rBr=i(jy),Kc=n(jy,"P",{});var Ase=s(Kc);tBr=r(Ase,`Note:
Loading a model from its configuration file does `),Q5e=n(Ase,"STRONG",{});var nQt=s(Q5e);aBr=r(nQt,"not"),nQt.forEach(t),nBr=r(Ase,` load the model weights. It only affects the
model\u2019s configuration. Use `),pee=n(Ase,"A",{href:!0});var sQt=s(pee);sBr=r(sQt,"from_pretrained()"),sQt.forEach(t),lBr=r(Ase," to load the model weights."),Ase.forEach(t),iBr=i(jy),T(e5.$$.fragment,jy),jy.forEach(t),dBr=i(si),Gr=n(si,"DIV",{class:!0});var li=s(Gr);T(dk.$$.fragment,li),cBr=i(li),W5e=n(li,"P",{});var lQt=s(W5e);fBr=r(lQt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lQt.forEach(t),mBr=i(li),yn=n(li,"P",{});var Dy=s(yn);gBr=r(Dy,"The model class to instantiate is selected based on the "),U5e=n(Dy,"CODE",{});var iQt=s(U5e);hBr=r(iQt,"model_type"),iQt.forEach(t),pBr=r(Dy,` property of the config object (either
passed as an argument or loaded from `),H5e=n(Dy,"CODE",{});var dQt=s(H5e);uBr=r(dQt,"pretrained_model_name_or_path"),dQt.forEach(t),_Br=r(Dy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J5e=n(Dy,"CODE",{});var cQt=s(J5e);bBr=r(cQt,"pretrained_model_name_or_path"),cQt.forEach(t),vBr=r(Dy,":"),Dy.forEach(t),FBr=i(li),Le=n(li,"UL",{});var Ie=s(Le);o5=n(Ie,"LI",{});var GXe=s(o5);Y5e=n(GXe,"STRONG",{});var fQt=s(Y5e);TBr=r(fQt,"bart"),fQt.forEach(t),MBr=r(GXe," \u2014 "),uee=n(GXe,"A",{href:!0});var mQt=s(uee);EBr=r(mQt,"TFBartForConditionalGeneration"),mQt.forEach(t),CBr=r(GXe," (BART model)"),GXe.forEach(t),wBr=i(Ie),r5=n(Ie,"LI",{});var OXe=s(r5);K5e=n(OXe,"STRONG",{});var gQt=s(K5e);ABr=r(gQt,"blenderbot"),gQt.forEach(t),yBr=r(OXe," \u2014 "),_ee=n(OXe,"A",{href:!0});var hQt=s(_ee);LBr=r(hQt,"TFBlenderbotForConditionalGeneration"),hQt.forEach(t),xBr=r(OXe," (Blenderbot model)"),OXe.forEach(t),$Br=i(Ie),t5=n(Ie,"LI",{});var VXe=s(t5);Z5e=n(VXe,"STRONG",{});var pQt=s(Z5e);kBr=r(pQt,"blenderbot-small"),pQt.forEach(t),SBr=r(VXe," \u2014 "),bee=n(VXe,"A",{href:!0});var uQt=s(bee);RBr=r(uQt,"TFBlenderbotSmallForConditionalGeneration"),uQt.forEach(t),PBr=r(VXe," (BlenderbotSmall model)"),VXe.forEach(t),BBr=i(Ie),a5=n(Ie,"LI",{});var XXe=s(a5);e0e=n(XXe,"STRONG",{});var _Qt=s(e0e);IBr=r(_Qt,"encoder-decoder"),_Qt.forEach(t),NBr=r(XXe," \u2014 "),vee=n(XXe,"A",{href:!0});var bQt=s(vee);qBr=r(bQt,"TFEncoderDecoderModel"),bQt.forEach(t),jBr=r(XXe," (Encoder decoder model)"),XXe.forEach(t),DBr=i(Ie),n5=n(Ie,"LI",{});var zXe=s(n5);o0e=n(zXe,"STRONG",{});var vQt=s(o0e);GBr=r(vQt,"led"),vQt.forEach(t),OBr=r(zXe," \u2014 "),Fee=n(zXe,"A",{href:!0});var FQt=s(Fee);VBr=r(FQt,"TFLEDForConditionalGeneration"),FQt.forEach(t),XBr=r(zXe," (LED model)"),zXe.forEach(t),zBr=i(Ie),s5=n(Ie,"LI",{});var QXe=s(s5);r0e=n(QXe,"STRONG",{});var TQt=s(r0e);QBr=r(TQt,"marian"),TQt.forEach(t),WBr=r(QXe," \u2014 "),Tee=n(QXe,"A",{href:!0});var MQt=s(Tee);UBr=r(MQt,"TFMarianMTModel"),MQt.forEach(t),HBr=r(QXe," (Marian model)"),QXe.forEach(t),JBr=i(Ie),l5=n(Ie,"LI",{});var WXe=s(l5);t0e=n(WXe,"STRONG",{});var EQt=s(t0e);YBr=r(EQt,"mbart"),EQt.forEach(t),KBr=r(WXe," \u2014 "),Mee=n(WXe,"A",{href:!0});var CQt=s(Mee);ZBr=r(CQt,"TFMBartForConditionalGeneration"),CQt.forEach(t),eIr=r(WXe," (mBART model)"),WXe.forEach(t),oIr=i(Ie),i5=n(Ie,"LI",{});var UXe=s(i5);a0e=n(UXe,"STRONG",{});var wQt=s(a0e);rIr=r(wQt,"mt5"),wQt.forEach(t),tIr=r(UXe," \u2014 "),Eee=n(UXe,"A",{href:!0});var AQt=s(Eee);aIr=r(AQt,"TFMT5ForConditionalGeneration"),AQt.forEach(t),nIr=r(UXe," (MT5 model)"),UXe.forEach(t),sIr=i(Ie),d5=n(Ie,"LI",{});var HXe=s(d5);n0e=n(HXe,"STRONG",{});var yQt=s(n0e);lIr=r(yQt,"pegasus"),yQt.forEach(t),iIr=r(HXe," \u2014 "),Cee=n(HXe,"A",{href:!0});var LQt=s(Cee);dIr=r(LQt,"TFPegasusForConditionalGeneration"),LQt.forEach(t),cIr=r(HXe," (Pegasus model)"),HXe.forEach(t),fIr=i(Ie),c5=n(Ie,"LI",{});var JXe=s(c5);s0e=n(JXe,"STRONG",{});var xQt=s(s0e);mIr=r(xQt,"t5"),xQt.forEach(t),gIr=r(JXe," \u2014 "),wee=n(JXe,"A",{href:!0});var $Qt=s(wee);hIr=r($Qt,"TFT5ForConditionalGeneration"),$Qt.forEach(t),pIr=r(JXe," (T5 model)"),JXe.forEach(t),Ie.forEach(t),uIr=i(li),T(f5.$$.fragment,li),li.forEach(t),si.forEach(t),aJe=i(f),Zc=n(f,"H2",{class:!0});var FKe=s(Zc);m5=n(FKe,"A",{id:!0,class:!0,href:!0});var kQt=s(m5);l0e=n(kQt,"SPAN",{});var SQt=s(l0e);T(ck.$$.fragment,SQt),SQt.forEach(t),kQt.forEach(t),_Ir=i(FKe),i0e=n(FKe,"SPAN",{});var RQt=s(i0e);bIr=r(RQt,"TFAutoModelForSequenceClassification"),RQt.forEach(t),FKe.forEach(t),nJe=i(f),gr=n(f,"DIV",{class:!0});var ii=s(gr);T(fk.$$.fragment,ii),vIr=i(ii),ef=n(ii,"P",{});var yse=s(ef);FIr=r(yse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Aee=n(yse,"A",{href:!0});var PQt=s(Aee);TIr=r(PQt,"from_pretrained()"),PQt.forEach(t),MIr=r(yse," class method or the "),yee=n(yse,"A",{href:!0});var BQt=s(yee);EIr=r(BQt,"from_config()"),BQt.forEach(t),CIr=r(yse,` class
method.`),yse.forEach(t),wIr=i(ii),mk=n(ii,"P",{});var TKe=s(mk);AIr=r(TKe,"This class cannot be instantiated directly using "),d0e=n(TKe,"CODE",{});var IQt=s(d0e);yIr=r(IQt,"__init__()"),IQt.forEach(t),LIr=r(TKe," (throws an error)."),TKe.forEach(t),xIr=i(ii),Ut=n(ii,"DIV",{class:!0});var Gy=s(Ut);T(gk.$$.fragment,Gy),$Ir=i(Gy),c0e=n(Gy,"P",{});var NQt=s(c0e);kIr=r(NQt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),NQt.forEach(t),SIr=i(Gy),of=n(Gy,"P",{});var Lse=s(of);RIr=r(Lse,`Note:
Loading a model from its configuration file does `),f0e=n(Lse,"STRONG",{});var qQt=s(f0e);PIr=r(qQt,"not"),qQt.forEach(t),BIr=r(Lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lee=n(Lse,"A",{href:!0});var jQt=s(Lee);IIr=r(jQt,"from_pretrained()"),jQt.forEach(t),NIr=r(Lse," to load the model weights."),Lse.forEach(t),qIr=i(Gy),T(g5.$$.fragment,Gy),Gy.forEach(t),jIr=i(ii),Or=n(ii,"DIV",{class:!0});var di=s(Or);T(hk.$$.fragment,di),DIr=i(di),m0e=n(di,"P",{});var DQt=s(m0e);GIr=r(DQt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),DQt.forEach(t),OIr=i(di),Ln=n(di,"P",{});var Oy=s(Ln);VIr=r(Oy,"The model class to instantiate is selected based on the "),g0e=n(Oy,"CODE",{});var GQt=s(g0e);XIr=r(GQt,"model_type"),GQt.forEach(t),zIr=r(Oy,` property of the config object (either
passed as an argument or loaded from `),h0e=n(Oy,"CODE",{});var OQt=s(h0e);QIr=r(OQt,"pretrained_model_name_or_path"),OQt.forEach(t),WIr=r(Oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p0e=n(Oy,"CODE",{});var VQt=s(p0e);UIr=r(VQt,"pretrained_model_name_or_path"),VQt.forEach(t),HIr=r(Oy,":"),Oy.forEach(t),JIr=i(di),te=n(di,"UL",{});var ne=s(te);h5=n(ne,"LI",{});var YXe=s(h5);u0e=n(YXe,"STRONG",{});var XQt=s(u0e);YIr=r(XQt,"albert"),XQt.forEach(t),KIr=r(YXe," \u2014 "),xee=n(YXe,"A",{href:!0});var zQt=s(xee);ZIr=r(zQt,"TFAlbertForSequenceClassification"),zQt.forEach(t),eNr=r(YXe," (ALBERT model)"),YXe.forEach(t),oNr=i(ne),p5=n(ne,"LI",{});var KXe=s(p5);_0e=n(KXe,"STRONG",{});var QQt=s(_0e);rNr=r(QQt,"bert"),QQt.forEach(t),tNr=r(KXe," \u2014 "),$ee=n(KXe,"A",{href:!0});var WQt=s($ee);aNr=r(WQt,"TFBertForSequenceClassification"),WQt.forEach(t),nNr=r(KXe," (BERT model)"),KXe.forEach(t),sNr=i(ne),u5=n(ne,"LI",{});var ZXe=s(u5);b0e=n(ZXe,"STRONG",{});var UQt=s(b0e);lNr=r(UQt,"camembert"),UQt.forEach(t),iNr=r(ZXe," \u2014 "),kee=n(ZXe,"A",{href:!0});var HQt=s(kee);dNr=r(HQt,"TFCamembertForSequenceClassification"),HQt.forEach(t),cNr=r(ZXe," (CamemBERT model)"),ZXe.forEach(t),fNr=i(ne),_5=n(ne,"LI",{});var eze=s(_5);v0e=n(eze,"STRONG",{});var JQt=s(v0e);mNr=r(JQt,"convbert"),JQt.forEach(t),gNr=r(eze," \u2014 "),See=n(eze,"A",{href:!0});var YQt=s(See);hNr=r(YQt,"TFConvBertForSequenceClassification"),YQt.forEach(t),pNr=r(eze," (ConvBERT model)"),eze.forEach(t),uNr=i(ne),b5=n(ne,"LI",{});var oze=s(b5);F0e=n(oze,"STRONG",{});var KQt=s(F0e);_Nr=r(KQt,"ctrl"),KQt.forEach(t),bNr=r(oze," \u2014 "),Ree=n(oze,"A",{href:!0});var ZQt=s(Ree);vNr=r(ZQt,"TFCTRLForSequenceClassification"),ZQt.forEach(t),FNr=r(oze," (CTRL model)"),oze.forEach(t),TNr=i(ne),v5=n(ne,"LI",{});var rze=s(v5);T0e=n(rze,"STRONG",{});var eWt=s(T0e);MNr=r(eWt,"deberta"),eWt.forEach(t),ENr=r(rze," \u2014 "),Pee=n(rze,"A",{href:!0});var oWt=s(Pee);CNr=r(oWt,"TFDebertaForSequenceClassification"),oWt.forEach(t),wNr=r(rze," (DeBERTa model)"),rze.forEach(t),ANr=i(ne),F5=n(ne,"LI",{});var tze=s(F5);M0e=n(tze,"STRONG",{});var rWt=s(M0e);yNr=r(rWt,"deberta-v2"),rWt.forEach(t),LNr=r(tze," \u2014 "),Bee=n(tze,"A",{href:!0});var tWt=s(Bee);xNr=r(tWt,"TFDebertaV2ForSequenceClassification"),tWt.forEach(t),$Nr=r(tze," (DeBERTa-v2 model)"),tze.forEach(t),kNr=i(ne),T5=n(ne,"LI",{});var aze=s(T5);E0e=n(aze,"STRONG",{});var aWt=s(E0e);SNr=r(aWt,"distilbert"),aWt.forEach(t),RNr=r(aze," \u2014 "),Iee=n(aze,"A",{href:!0});var nWt=s(Iee);PNr=r(nWt,"TFDistilBertForSequenceClassification"),nWt.forEach(t),BNr=r(aze," (DistilBERT model)"),aze.forEach(t),INr=i(ne),M5=n(ne,"LI",{});var nze=s(M5);C0e=n(nze,"STRONG",{});var sWt=s(C0e);NNr=r(sWt,"electra"),sWt.forEach(t),qNr=r(nze," \u2014 "),Nee=n(nze,"A",{href:!0});var lWt=s(Nee);jNr=r(lWt,"TFElectraForSequenceClassification"),lWt.forEach(t),DNr=r(nze," (ELECTRA model)"),nze.forEach(t),GNr=i(ne),E5=n(ne,"LI",{});var sze=s(E5);w0e=n(sze,"STRONG",{});var iWt=s(w0e);ONr=r(iWt,"flaubert"),iWt.forEach(t),VNr=r(sze," \u2014 "),qee=n(sze,"A",{href:!0});var dWt=s(qee);XNr=r(dWt,"TFFlaubertForSequenceClassification"),dWt.forEach(t),zNr=r(sze," (FlauBERT model)"),sze.forEach(t),QNr=i(ne),C5=n(ne,"LI",{});var lze=s(C5);A0e=n(lze,"STRONG",{});var cWt=s(A0e);WNr=r(cWt,"funnel"),cWt.forEach(t),UNr=r(lze," \u2014 "),jee=n(lze,"A",{href:!0});var fWt=s(jee);HNr=r(fWt,"TFFunnelForSequenceClassification"),fWt.forEach(t),JNr=r(lze," (Funnel Transformer model)"),lze.forEach(t),YNr=i(ne),w5=n(ne,"LI",{});var ize=s(w5);y0e=n(ize,"STRONG",{});var mWt=s(y0e);KNr=r(mWt,"gpt2"),mWt.forEach(t),ZNr=r(ize," \u2014 "),Dee=n(ize,"A",{href:!0});var gWt=s(Dee);eqr=r(gWt,"TFGPT2ForSequenceClassification"),gWt.forEach(t),oqr=r(ize," (OpenAI GPT-2 model)"),ize.forEach(t),rqr=i(ne),A5=n(ne,"LI",{});var dze=s(A5);L0e=n(dze,"STRONG",{});var hWt=s(L0e);tqr=r(hWt,"gptj"),hWt.forEach(t),aqr=r(dze," \u2014 "),Gee=n(dze,"A",{href:!0});var pWt=s(Gee);nqr=r(pWt,"TFGPTJForSequenceClassification"),pWt.forEach(t),sqr=r(dze," (GPT-J model)"),dze.forEach(t),lqr=i(ne),y5=n(ne,"LI",{});var cze=s(y5);x0e=n(cze,"STRONG",{});var uWt=s(x0e);iqr=r(uWt,"layoutlm"),uWt.forEach(t),dqr=r(cze," \u2014 "),Oee=n(cze,"A",{href:!0});var _Wt=s(Oee);cqr=r(_Wt,"TFLayoutLMForSequenceClassification"),_Wt.forEach(t),fqr=r(cze," (LayoutLM model)"),cze.forEach(t),mqr=i(ne),L5=n(ne,"LI",{});var fze=s(L5);$0e=n(fze,"STRONG",{});var bWt=s($0e);gqr=r(bWt,"longformer"),bWt.forEach(t),hqr=r(fze," \u2014 "),Vee=n(fze,"A",{href:!0});var vWt=s(Vee);pqr=r(vWt,"TFLongformerForSequenceClassification"),vWt.forEach(t),uqr=r(fze," (Longformer model)"),fze.forEach(t),_qr=i(ne),x5=n(ne,"LI",{});var mze=s(x5);k0e=n(mze,"STRONG",{});var FWt=s(k0e);bqr=r(FWt,"mobilebert"),FWt.forEach(t),vqr=r(mze," \u2014 "),Xee=n(mze,"A",{href:!0});var TWt=s(Xee);Fqr=r(TWt,"TFMobileBertForSequenceClassification"),TWt.forEach(t),Tqr=r(mze," (MobileBERT model)"),mze.forEach(t),Mqr=i(ne),$5=n(ne,"LI",{});var gze=s($5);S0e=n(gze,"STRONG",{});var MWt=s(S0e);Eqr=r(MWt,"mpnet"),MWt.forEach(t),Cqr=r(gze," \u2014 "),zee=n(gze,"A",{href:!0});var EWt=s(zee);wqr=r(EWt,"TFMPNetForSequenceClassification"),EWt.forEach(t),Aqr=r(gze," (MPNet model)"),gze.forEach(t),yqr=i(ne),k5=n(ne,"LI",{});var hze=s(k5);R0e=n(hze,"STRONG",{});var CWt=s(R0e);Lqr=r(CWt,"openai-gpt"),CWt.forEach(t),xqr=r(hze," \u2014 "),Qee=n(hze,"A",{href:!0});var wWt=s(Qee);$qr=r(wWt,"TFOpenAIGPTForSequenceClassification"),wWt.forEach(t),kqr=r(hze," (OpenAI GPT model)"),hze.forEach(t),Sqr=i(ne),S5=n(ne,"LI",{});var pze=s(S5);P0e=n(pze,"STRONG",{});var AWt=s(P0e);Rqr=r(AWt,"rembert"),AWt.forEach(t),Pqr=r(pze," \u2014 "),Wee=n(pze,"A",{href:!0});var yWt=s(Wee);Bqr=r(yWt,"TFRemBertForSequenceClassification"),yWt.forEach(t),Iqr=r(pze," (RemBERT model)"),pze.forEach(t),Nqr=i(ne),R5=n(ne,"LI",{});var uze=s(R5);B0e=n(uze,"STRONG",{});var LWt=s(B0e);qqr=r(LWt,"roberta"),LWt.forEach(t),jqr=r(uze," \u2014 "),Uee=n(uze,"A",{href:!0});var xWt=s(Uee);Dqr=r(xWt,"TFRobertaForSequenceClassification"),xWt.forEach(t),Gqr=r(uze," (RoBERTa model)"),uze.forEach(t),Oqr=i(ne),P5=n(ne,"LI",{});var _ze=s(P5);I0e=n(_ze,"STRONG",{});var $Wt=s(I0e);Vqr=r($Wt,"roformer"),$Wt.forEach(t),Xqr=r(_ze," \u2014 "),Hee=n(_ze,"A",{href:!0});var kWt=s(Hee);zqr=r(kWt,"TFRoFormerForSequenceClassification"),kWt.forEach(t),Qqr=r(_ze," (RoFormer model)"),_ze.forEach(t),Wqr=i(ne),B5=n(ne,"LI",{});var bze=s(B5);N0e=n(bze,"STRONG",{});var SWt=s(N0e);Uqr=r(SWt,"tapas"),SWt.forEach(t),Hqr=r(bze," \u2014 "),Jee=n(bze,"A",{href:!0});var RWt=s(Jee);Jqr=r(RWt,"TFTapasForSequenceClassification"),RWt.forEach(t),Yqr=r(bze," (TAPAS model)"),bze.forEach(t),Kqr=i(ne),I5=n(ne,"LI",{});var vze=s(I5);q0e=n(vze,"STRONG",{});var PWt=s(q0e);Zqr=r(PWt,"transfo-xl"),PWt.forEach(t),ejr=r(vze," \u2014 "),Yee=n(vze,"A",{href:!0});var BWt=s(Yee);ojr=r(BWt,"TFTransfoXLForSequenceClassification"),BWt.forEach(t),rjr=r(vze," (Transformer-XL model)"),vze.forEach(t),tjr=i(ne),N5=n(ne,"LI",{});var Fze=s(N5);j0e=n(Fze,"STRONG",{});var IWt=s(j0e);ajr=r(IWt,"xlm"),IWt.forEach(t),njr=r(Fze," \u2014 "),Kee=n(Fze,"A",{href:!0});var NWt=s(Kee);sjr=r(NWt,"TFXLMForSequenceClassification"),NWt.forEach(t),ljr=r(Fze," (XLM model)"),Fze.forEach(t),ijr=i(ne),q5=n(ne,"LI",{});var Tze=s(q5);D0e=n(Tze,"STRONG",{});var qWt=s(D0e);djr=r(qWt,"xlm-roberta"),qWt.forEach(t),cjr=r(Tze," \u2014 "),Zee=n(Tze,"A",{href:!0});var jWt=s(Zee);fjr=r(jWt,"TFXLMRobertaForSequenceClassification"),jWt.forEach(t),mjr=r(Tze," (XLM-RoBERTa model)"),Tze.forEach(t),gjr=i(ne),j5=n(ne,"LI",{});var Mze=s(j5);G0e=n(Mze,"STRONG",{});var DWt=s(G0e);hjr=r(DWt,"xlnet"),DWt.forEach(t),pjr=r(Mze," \u2014 "),eoe=n(Mze,"A",{href:!0});var GWt=s(eoe);ujr=r(GWt,"TFXLNetForSequenceClassification"),GWt.forEach(t),_jr=r(Mze," (XLNet model)"),Mze.forEach(t),ne.forEach(t),bjr=i(di),T(D5.$$.fragment,di),di.forEach(t),ii.forEach(t),sJe=i(f),rf=n(f,"H2",{class:!0});var MKe=s(rf);G5=n(MKe,"A",{id:!0,class:!0,href:!0});var OWt=s(G5);O0e=n(OWt,"SPAN",{});var VWt=s(O0e);T(pk.$$.fragment,VWt),VWt.forEach(t),OWt.forEach(t),vjr=i(MKe),V0e=n(MKe,"SPAN",{});var XWt=s(V0e);Fjr=r(XWt,"TFAutoModelForMultipleChoice"),XWt.forEach(t),MKe.forEach(t),lJe=i(f),hr=n(f,"DIV",{class:!0});var ci=s(hr);T(uk.$$.fragment,ci),Tjr=i(ci),tf=n(ci,"P",{});var xse=s(tf);Mjr=r(xse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ooe=n(xse,"A",{href:!0});var zWt=s(ooe);Ejr=r(zWt,"from_pretrained()"),zWt.forEach(t),Cjr=r(xse," class method or the "),roe=n(xse,"A",{href:!0});var QWt=s(roe);wjr=r(QWt,"from_config()"),QWt.forEach(t),Ajr=r(xse,` class
method.`),xse.forEach(t),yjr=i(ci),_k=n(ci,"P",{});var EKe=s(_k);Ljr=r(EKe,"This class cannot be instantiated directly using "),X0e=n(EKe,"CODE",{});var WWt=s(X0e);xjr=r(WWt,"__init__()"),WWt.forEach(t),$jr=r(EKe," (throws an error)."),EKe.forEach(t),kjr=i(ci),Ht=n(ci,"DIV",{class:!0});var Vy=s(Ht);T(bk.$$.fragment,Vy),Sjr=i(Vy),z0e=n(Vy,"P",{});var UWt=s(z0e);Rjr=r(UWt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),UWt.forEach(t),Pjr=i(Vy),af=n(Vy,"P",{});var $se=s(af);Bjr=r($se,`Note:
Loading a model from its configuration file does `),Q0e=n($se,"STRONG",{});var HWt=s(Q0e);Ijr=r(HWt,"not"),HWt.forEach(t),Njr=r($se,` load the model weights. It only affects the
model\u2019s configuration. Use `),toe=n($se,"A",{href:!0});var JWt=s(toe);qjr=r(JWt,"from_pretrained()"),JWt.forEach(t),jjr=r($se," to load the model weights."),$se.forEach(t),Djr=i(Vy),T(O5.$$.fragment,Vy),Vy.forEach(t),Gjr=i(ci),Vr=n(ci,"DIV",{class:!0});var fi=s(Vr);T(vk.$$.fragment,fi),Ojr=i(fi),W0e=n(fi,"P",{});var YWt=s(W0e);Vjr=r(YWt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),YWt.forEach(t),Xjr=i(fi),xn=n(fi,"P",{});var Xy=s(xn);zjr=r(Xy,"The model class to instantiate is selected based on the "),U0e=n(Xy,"CODE",{});var KWt=s(U0e);Qjr=r(KWt,"model_type"),KWt.forEach(t),Wjr=r(Xy,` property of the config object (either
passed as an argument or loaded from `),H0e=n(Xy,"CODE",{});var ZWt=s(H0e);Ujr=r(ZWt,"pretrained_model_name_or_path"),ZWt.forEach(t),Hjr=r(Xy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J0e=n(Xy,"CODE",{});var eUt=s(J0e);Jjr=r(eUt,"pretrained_model_name_or_path"),eUt.forEach(t),Yjr=r(Xy,":"),Xy.forEach(t),Kjr=i(fi),ve=n(fi,"UL",{});var Te=s(ve);V5=n(Te,"LI",{});var Eze=s(V5);Y0e=n(Eze,"STRONG",{});var oUt=s(Y0e);Zjr=r(oUt,"albert"),oUt.forEach(t),eDr=r(Eze," \u2014 "),aoe=n(Eze,"A",{href:!0});var rUt=s(aoe);oDr=r(rUt,"TFAlbertForMultipleChoice"),rUt.forEach(t),rDr=r(Eze," (ALBERT model)"),Eze.forEach(t),tDr=i(Te),X5=n(Te,"LI",{});var Cze=s(X5);K0e=n(Cze,"STRONG",{});var tUt=s(K0e);aDr=r(tUt,"bert"),tUt.forEach(t),nDr=r(Cze," \u2014 "),noe=n(Cze,"A",{href:!0});var aUt=s(noe);sDr=r(aUt,"TFBertForMultipleChoice"),aUt.forEach(t),lDr=r(Cze," (BERT model)"),Cze.forEach(t),iDr=i(Te),z5=n(Te,"LI",{});var wze=s(z5);Z0e=n(wze,"STRONG",{});var nUt=s(Z0e);dDr=r(nUt,"camembert"),nUt.forEach(t),cDr=r(wze," \u2014 "),soe=n(wze,"A",{href:!0});var sUt=s(soe);fDr=r(sUt,"TFCamembertForMultipleChoice"),sUt.forEach(t),mDr=r(wze," (CamemBERT model)"),wze.forEach(t),gDr=i(Te),Q5=n(Te,"LI",{});var Aze=s(Q5);ewe=n(Aze,"STRONG",{});var lUt=s(ewe);hDr=r(lUt,"convbert"),lUt.forEach(t),pDr=r(Aze," \u2014 "),loe=n(Aze,"A",{href:!0});var iUt=s(loe);uDr=r(iUt,"TFConvBertForMultipleChoice"),iUt.forEach(t),_Dr=r(Aze," (ConvBERT model)"),Aze.forEach(t),bDr=i(Te),W5=n(Te,"LI",{});var yze=s(W5);owe=n(yze,"STRONG",{});var dUt=s(owe);vDr=r(dUt,"distilbert"),dUt.forEach(t),FDr=r(yze," \u2014 "),ioe=n(yze,"A",{href:!0});var cUt=s(ioe);TDr=r(cUt,"TFDistilBertForMultipleChoice"),cUt.forEach(t),MDr=r(yze," (DistilBERT model)"),yze.forEach(t),EDr=i(Te),U5=n(Te,"LI",{});var Lze=s(U5);rwe=n(Lze,"STRONG",{});var fUt=s(rwe);CDr=r(fUt,"electra"),fUt.forEach(t),wDr=r(Lze," \u2014 "),doe=n(Lze,"A",{href:!0});var mUt=s(doe);ADr=r(mUt,"TFElectraForMultipleChoice"),mUt.forEach(t),yDr=r(Lze," (ELECTRA model)"),Lze.forEach(t),LDr=i(Te),H5=n(Te,"LI",{});var xze=s(H5);twe=n(xze,"STRONG",{});var gUt=s(twe);xDr=r(gUt,"flaubert"),gUt.forEach(t),$Dr=r(xze," \u2014 "),coe=n(xze,"A",{href:!0});var hUt=s(coe);kDr=r(hUt,"TFFlaubertForMultipleChoice"),hUt.forEach(t),SDr=r(xze," (FlauBERT model)"),xze.forEach(t),RDr=i(Te),J5=n(Te,"LI",{});var $ze=s(J5);awe=n($ze,"STRONG",{});var pUt=s(awe);PDr=r(pUt,"funnel"),pUt.forEach(t),BDr=r($ze," \u2014 "),foe=n($ze,"A",{href:!0});var uUt=s(foe);IDr=r(uUt,"TFFunnelForMultipleChoice"),uUt.forEach(t),NDr=r($ze," (Funnel Transformer model)"),$ze.forEach(t),qDr=i(Te),Y5=n(Te,"LI",{});var kze=s(Y5);nwe=n(kze,"STRONG",{});var _Ut=s(nwe);jDr=r(_Ut,"longformer"),_Ut.forEach(t),DDr=r(kze," \u2014 "),moe=n(kze,"A",{href:!0});var bUt=s(moe);GDr=r(bUt,"TFLongformerForMultipleChoice"),bUt.forEach(t),ODr=r(kze," (Longformer model)"),kze.forEach(t),VDr=i(Te),K5=n(Te,"LI",{});var Sze=s(K5);swe=n(Sze,"STRONG",{});var vUt=s(swe);XDr=r(vUt,"mobilebert"),vUt.forEach(t),zDr=r(Sze," \u2014 "),goe=n(Sze,"A",{href:!0});var FUt=s(goe);QDr=r(FUt,"TFMobileBertForMultipleChoice"),FUt.forEach(t),WDr=r(Sze," (MobileBERT model)"),Sze.forEach(t),UDr=i(Te),Z5=n(Te,"LI",{});var Rze=s(Z5);lwe=n(Rze,"STRONG",{});var TUt=s(lwe);HDr=r(TUt,"mpnet"),TUt.forEach(t),JDr=r(Rze," \u2014 "),hoe=n(Rze,"A",{href:!0});var MUt=s(hoe);YDr=r(MUt,"TFMPNetForMultipleChoice"),MUt.forEach(t),KDr=r(Rze," (MPNet model)"),Rze.forEach(t),ZDr=i(Te),e0=n(Te,"LI",{});var Pze=s(e0);iwe=n(Pze,"STRONG",{});var EUt=s(iwe);eGr=r(EUt,"rembert"),EUt.forEach(t),oGr=r(Pze," \u2014 "),poe=n(Pze,"A",{href:!0});var CUt=s(poe);rGr=r(CUt,"TFRemBertForMultipleChoice"),CUt.forEach(t),tGr=r(Pze," (RemBERT model)"),Pze.forEach(t),aGr=i(Te),o0=n(Te,"LI",{});var Bze=s(o0);dwe=n(Bze,"STRONG",{});var wUt=s(dwe);nGr=r(wUt,"roberta"),wUt.forEach(t),sGr=r(Bze," \u2014 "),uoe=n(Bze,"A",{href:!0});var AUt=s(uoe);lGr=r(AUt,"TFRobertaForMultipleChoice"),AUt.forEach(t),iGr=r(Bze," (RoBERTa model)"),Bze.forEach(t),dGr=i(Te),r0=n(Te,"LI",{});var Ize=s(r0);cwe=n(Ize,"STRONG",{});var yUt=s(cwe);cGr=r(yUt,"roformer"),yUt.forEach(t),fGr=r(Ize," \u2014 "),_oe=n(Ize,"A",{href:!0});var LUt=s(_oe);mGr=r(LUt,"TFRoFormerForMultipleChoice"),LUt.forEach(t),gGr=r(Ize," (RoFormer model)"),Ize.forEach(t),hGr=i(Te),t0=n(Te,"LI",{});var Nze=s(t0);fwe=n(Nze,"STRONG",{});var xUt=s(fwe);pGr=r(xUt,"xlm"),xUt.forEach(t),uGr=r(Nze," \u2014 "),boe=n(Nze,"A",{href:!0});var $Ut=s(boe);_Gr=r($Ut,"TFXLMForMultipleChoice"),$Ut.forEach(t),bGr=r(Nze," (XLM model)"),Nze.forEach(t),vGr=i(Te),a0=n(Te,"LI",{});var qze=s(a0);mwe=n(qze,"STRONG",{});var kUt=s(mwe);FGr=r(kUt,"xlm-roberta"),kUt.forEach(t),TGr=r(qze," \u2014 "),voe=n(qze,"A",{href:!0});var SUt=s(voe);MGr=r(SUt,"TFXLMRobertaForMultipleChoice"),SUt.forEach(t),EGr=r(qze," (XLM-RoBERTa model)"),qze.forEach(t),CGr=i(Te),n0=n(Te,"LI",{});var jze=s(n0);gwe=n(jze,"STRONG",{});var RUt=s(gwe);wGr=r(RUt,"xlnet"),RUt.forEach(t),AGr=r(jze," \u2014 "),Foe=n(jze,"A",{href:!0});var PUt=s(Foe);yGr=r(PUt,"TFXLNetForMultipleChoice"),PUt.forEach(t),LGr=r(jze," (XLNet model)"),jze.forEach(t),Te.forEach(t),xGr=i(fi),T(s0.$$.fragment,fi),fi.forEach(t),ci.forEach(t),iJe=i(f),nf=n(f,"H2",{class:!0});var CKe=s(nf);l0=n(CKe,"A",{id:!0,class:!0,href:!0});var BUt=s(l0);hwe=n(BUt,"SPAN",{});var IUt=s(hwe);T(Fk.$$.fragment,IUt),IUt.forEach(t),BUt.forEach(t),$Gr=i(CKe),pwe=n(CKe,"SPAN",{});var NUt=s(pwe);kGr=r(NUt,"TFAutoModelForNextSentencePrediction"),NUt.forEach(t),CKe.forEach(t),dJe=i(f),pr=n(f,"DIV",{class:!0});var mi=s(pr);T(Tk.$$.fragment,mi),SGr=i(mi),sf=n(mi,"P",{});var kse=s(sf);RGr=r(kse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Toe=n(kse,"A",{href:!0});var qUt=s(Toe);PGr=r(qUt,"from_pretrained()"),qUt.forEach(t),BGr=r(kse," class method or the "),Moe=n(kse,"A",{href:!0});var jUt=s(Moe);IGr=r(jUt,"from_config()"),jUt.forEach(t),NGr=r(kse,` class
method.`),kse.forEach(t),qGr=i(mi),Mk=n(mi,"P",{});var wKe=s(Mk);jGr=r(wKe,"This class cannot be instantiated directly using "),uwe=n(wKe,"CODE",{});var DUt=s(uwe);DGr=r(DUt,"__init__()"),DUt.forEach(t),GGr=r(wKe," (throws an error)."),wKe.forEach(t),OGr=i(mi),Jt=n(mi,"DIV",{class:!0});var zy=s(Jt);T(Ek.$$.fragment,zy),VGr=i(zy),_we=n(zy,"P",{});var GUt=s(_we);XGr=r(GUt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),GUt.forEach(t),zGr=i(zy),lf=n(zy,"P",{});var Sse=s(lf);QGr=r(Sse,`Note:
Loading a model from its configuration file does `),bwe=n(Sse,"STRONG",{});var OUt=s(bwe);WGr=r(OUt,"not"),OUt.forEach(t),UGr=r(Sse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eoe=n(Sse,"A",{href:!0});var VUt=s(Eoe);HGr=r(VUt,"from_pretrained()"),VUt.forEach(t),JGr=r(Sse," to load the model weights."),Sse.forEach(t),YGr=i(zy),T(i0.$$.fragment,zy),zy.forEach(t),KGr=i(mi),Xr=n(mi,"DIV",{class:!0});var gi=s(Xr);T(Ck.$$.fragment,gi),ZGr=i(gi),vwe=n(gi,"P",{});var XUt=s(vwe);eOr=r(XUt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),XUt.forEach(t),oOr=i(gi),$n=n(gi,"P",{});var Qy=s($n);rOr=r(Qy,"The model class to instantiate is selected based on the "),Fwe=n(Qy,"CODE",{});var zUt=s(Fwe);tOr=r(zUt,"model_type"),zUt.forEach(t),aOr=r(Qy,` property of the config object (either
passed as an argument or loaded from `),Twe=n(Qy,"CODE",{});var QUt=s(Twe);nOr=r(QUt,"pretrained_model_name_or_path"),QUt.forEach(t),sOr=r(Qy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mwe=n(Qy,"CODE",{});var WUt=s(Mwe);lOr=r(WUt,"pretrained_model_name_or_path"),WUt.forEach(t),iOr=r(Qy,":"),Qy.forEach(t),dOr=i(gi),wk=n(gi,"UL",{});var AKe=s(wk);d0=n(AKe,"LI",{});var Dze=s(d0);Ewe=n(Dze,"STRONG",{});var UUt=s(Ewe);cOr=r(UUt,"bert"),UUt.forEach(t),fOr=r(Dze," \u2014 "),Coe=n(Dze,"A",{href:!0});var HUt=s(Coe);mOr=r(HUt,"TFBertForNextSentencePrediction"),HUt.forEach(t),gOr=r(Dze," (BERT model)"),Dze.forEach(t),hOr=i(AKe),c0=n(AKe,"LI",{});var Gze=s(c0);Cwe=n(Gze,"STRONG",{});var JUt=s(Cwe);pOr=r(JUt,"mobilebert"),JUt.forEach(t),uOr=r(Gze," \u2014 "),woe=n(Gze,"A",{href:!0});var YUt=s(woe);_Or=r(YUt,"TFMobileBertForNextSentencePrediction"),YUt.forEach(t),bOr=r(Gze," (MobileBERT model)"),Gze.forEach(t),AKe.forEach(t),vOr=i(gi),T(f0.$$.fragment,gi),gi.forEach(t),mi.forEach(t),cJe=i(f),df=n(f,"H2",{class:!0});var yKe=s(df);m0=n(yKe,"A",{id:!0,class:!0,href:!0});var KUt=s(m0);wwe=n(KUt,"SPAN",{});var ZUt=s(wwe);T(Ak.$$.fragment,ZUt),ZUt.forEach(t),KUt.forEach(t),FOr=i(yKe),Awe=n(yKe,"SPAN",{});var eHt=s(Awe);TOr=r(eHt,"TFAutoModelForTableQuestionAnswering"),eHt.forEach(t),yKe.forEach(t),fJe=i(f),ur=n(f,"DIV",{class:!0});var hi=s(ur);T(yk.$$.fragment,hi),MOr=i(hi),cf=n(hi,"P",{});var Rse=s(cf);EOr=r(Rse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Aoe=n(Rse,"A",{href:!0});var oHt=s(Aoe);COr=r(oHt,"from_pretrained()"),oHt.forEach(t),wOr=r(Rse," class method or the "),yoe=n(Rse,"A",{href:!0});var rHt=s(yoe);AOr=r(rHt,"from_config()"),rHt.forEach(t),yOr=r(Rse,` class
method.`),Rse.forEach(t),LOr=i(hi),Lk=n(hi,"P",{});var LKe=s(Lk);xOr=r(LKe,"This class cannot be instantiated directly using "),ywe=n(LKe,"CODE",{});var tHt=s(ywe);$Or=r(tHt,"__init__()"),tHt.forEach(t),kOr=r(LKe," (throws an error)."),LKe.forEach(t),SOr=i(hi),Yt=n(hi,"DIV",{class:!0});var Wy=s(Yt);T(xk.$$.fragment,Wy),ROr=i(Wy),Lwe=n(Wy,"P",{});var aHt=s(Lwe);POr=r(aHt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),aHt.forEach(t),BOr=i(Wy),ff=n(Wy,"P",{});var Pse=s(ff);IOr=r(Pse,`Note:
Loading a model from its configuration file does `),xwe=n(Pse,"STRONG",{});var nHt=s(xwe);NOr=r(nHt,"not"),nHt.forEach(t),qOr=r(Pse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Loe=n(Pse,"A",{href:!0});var sHt=s(Loe);jOr=r(sHt,"from_pretrained()"),sHt.forEach(t),DOr=r(Pse," to load the model weights."),Pse.forEach(t),GOr=i(Wy),T(g0.$$.fragment,Wy),Wy.forEach(t),OOr=i(hi),zr=n(hi,"DIV",{class:!0});var pi=s(zr);T($k.$$.fragment,pi),VOr=i(pi),$we=n(pi,"P",{});var lHt=s($we);XOr=r(lHt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),lHt.forEach(t),zOr=i(pi),kn=n(pi,"P",{});var Uy=s(kn);QOr=r(Uy,"The model class to instantiate is selected based on the "),kwe=n(Uy,"CODE",{});var iHt=s(kwe);WOr=r(iHt,"model_type"),iHt.forEach(t),UOr=r(Uy,` property of the config object (either
passed as an argument or loaded from `),Swe=n(Uy,"CODE",{});var dHt=s(Swe);HOr=r(dHt,"pretrained_model_name_or_path"),dHt.forEach(t),JOr=r(Uy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rwe=n(Uy,"CODE",{});var cHt=s(Rwe);YOr=r(cHt,"pretrained_model_name_or_path"),cHt.forEach(t),KOr=r(Uy,":"),Uy.forEach(t),ZOr=i(pi),Pwe=n(pi,"UL",{});var fHt=s(Pwe);h0=n(fHt,"LI",{});var Oze=s(h0);Bwe=n(Oze,"STRONG",{});var mHt=s(Bwe);eVr=r(mHt,"tapas"),mHt.forEach(t),oVr=r(Oze," \u2014 "),xoe=n(Oze,"A",{href:!0});var gHt=s(xoe);rVr=r(gHt,"TFTapasForQuestionAnswering"),gHt.forEach(t),tVr=r(Oze," (TAPAS model)"),Oze.forEach(t),fHt.forEach(t),aVr=i(pi),T(p0.$$.fragment,pi),pi.forEach(t),hi.forEach(t),mJe=i(f),mf=n(f,"H2",{class:!0});var xKe=s(mf);u0=n(xKe,"A",{id:!0,class:!0,href:!0});var hHt=s(u0);Iwe=n(hHt,"SPAN",{});var pHt=s(Iwe);T(kk.$$.fragment,pHt),pHt.forEach(t),hHt.forEach(t),nVr=i(xKe),Nwe=n(xKe,"SPAN",{});var uHt=s(Nwe);sVr=r(uHt,"TFAutoModelForTokenClassification"),uHt.forEach(t),xKe.forEach(t),gJe=i(f),_r=n(f,"DIV",{class:!0});var ui=s(_r);T(Sk.$$.fragment,ui),lVr=i(ui),gf=n(ui,"P",{});var Bse=s(gf);iVr=r(Bse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$oe=n(Bse,"A",{href:!0});var _Ht=s($oe);dVr=r(_Ht,"from_pretrained()"),_Ht.forEach(t),cVr=r(Bse," class method or the "),koe=n(Bse,"A",{href:!0});var bHt=s(koe);fVr=r(bHt,"from_config()"),bHt.forEach(t),mVr=r(Bse,` class
method.`),Bse.forEach(t),gVr=i(ui),Rk=n(ui,"P",{});var $Ke=s(Rk);hVr=r($Ke,"This class cannot be instantiated directly using "),qwe=n($Ke,"CODE",{});var vHt=s(qwe);pVr=r(vHt,"__init__()"),vHt.forEach(t),uVr=r($Ke," (throws an error)."),$Ke.forEach(t),_Vr=i(ui),Kt=n(ui,"DIV",{class:!0});var Hy=s(Kt);T(Pk.$$.fragment,Hy),bVr=i(Hy),jwe=n(Hy,"P",{});var FHt=s(jwe);vVr=r(FHt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),FHt.forEach(t),FVr=i(Hy),hf=n(Hy,"P",{});var Ise=s(hf);TVr=r(Ise,`Note:
Loading a model from its configuration file does `),Dwe=n(Ise,"STRONG",{});var THt=s(Dwe);MVr=r(THt,"not"),THt.forEach(t),EVr=r(Ise,` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=n(Ise,"A",{href:!0});var MHt=s(Soe);CVr=r(MHt,"from_pretrained()"),MHt.forEach(t),wVr=r(Ise," to load the model weights."),Ise.forEach(t),AVr=i(Hy),T(_0.$$.fragment,Hy),Hy.forEach(t),yVr=i(ui),Qr=n(ui,"DIV",{class:!0});var _i=s(Qr);T(Bk.$$.fragment,_i),LVr=i(_i),Gwe=n(_i,"P",{});var EHt=s(Gwe);xVr=r(EHt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),EHt.forEach(t),$Vr=i(_i),Sn=n(_i,"P",{});var Jy=s(Sn);kVr=r(Jy,"The model class to instantiate is selected based on the "),Owe=n(Jy,"CODE",{});var CHt=s(Owe);SVr=r(CHt,"model_type"),CHt.forEach(t),RVr=r(Jy,` property of the config object (either
passed as an argument or loaded from `),Vwe=n(Jy,"CODE",{});var wHt=s(Vwe);PVr=r(wHt,"pretrained_model_name_or_path"),wHt.forEach(t),BVr=r(Jy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xwe=n(Jy,"CODE",{});var AHt=s(Xwe);IVr=r(AHt,"pretrained_model_name_or_path"),AHt.forEach(t),NVr=r(Jy,":"),Jy.forEach(t),qVr=i(_i),ce=n(_i,"UL",{});var pe=s(ce);b0=n(pe,"LI",{});var Vze=s(b0);zwe=n(Vze,"STRONG",{});var yHt=s(zwe);jVr=r(yHt,"albert"),yHt.forEach(t),DVr=r(Vze," \u2014 "),Roe=n(Vze,"A",{href:!0});var LHt=s(Roe);GVr=r(LHt,"TFAlbertForTokenClassification"),LHt.forEach(t),OVr=r(Vze," (ALBERT model)"),Vze.forEach(t),VVr=i(pe),v0=n(pe,"LI",{});var Xze=s(v0);Qwe=n(Xze,"STRONG",{});var xHt=s(Qwe);XVr=r(xHt,"bert"),xHt.forEach(t),zVr=r(Xze," \u2014 "),Poe=n(Xze,"A",{href:!0});var $Ht=s(Poe);QVr=r($Ht,"TFBertForTokenClassification"),$Ht.forEach(t),WVr=r(Xze," (BERT model)"),Xze.forEach(t),UVr=i(pe),F0=n(pe,"LI",{});var zze=s(F0);Wwe=n(zze,"STRONG",{});var kHt=s(Wwe);HVr=r(kHt,"camembert"),kHt.forEach(t),JVr=r(zze," \u2014 "),Boe=n(zze,"A",{href:!0});var SHt=s(Boe);YVr=r(SHt,"TFCamembertForTokenClassification"),SHt.forEach(t),KVr=r(zze," (CamemBERT model)"),zze.forEach(t),ZVr=i(pe),T0=n(pe,"LI",{});var Qze=s(T0);Uwe=n(Qze,"STRONG",{});var RHt=s(Uwe);eXr=r(RHt,"convbert"),RHt.forEach(t),oXr=r(Qze," \u2014 "),Ioe=n(Qze,"A",{href:!0});var PHt=s(Ioe);rXr=r(PHt,"TFConvBertForTokenClassification"),PHt.forEach(t),tXr=r(Qze," (ConvBERT model)"),Qze.forEach(t),aXr=i(pe),M0=n(pe,"LI",{});var Wze=s(M0);Hwe=n(Wze,"STRONG",{});var BHt=s(Hwe);nXr=r(BHt,"deberta"),BHt.forEach(t),sXr=r(Wze," \u2014 "),Noe=n(Wze,"A",{href:!0});var IHt=s(Noe);lXr=r(IHt,"TFDebertaForTokenClassification"),IHt.forEach(t),iXr=r(Wze," (DeBERTa model)"),Wze.forEach(t),dXr=i(pe),E0=n(pe,"LI",{});var Uze=s(E0);Jwe=n(Uze,"STRONG",{});var NHt=s(Jwe);cXr=r(NHt,"deberta-v2"),NHt.forEach(t),fXr=r(Uze," \u2014 "),qoe=n(Uze,"A",{href:!0});var qHt=s(qoe);mXr=r(qHt,"TFDebertaV2ForTokenClassification"),qHt.forEach(t),gXr=r(Uze," (DeBERTa-v2 model)"),Uze.forEach(t),hXr=i(pe),C0=n(pe,"LI",{});var Hze=s(C0);Ywe=n(Hze,"STRONG",{});var jHt=s(Ywe);pXr=r(jHt,"distilbert"),jHt.forEach(t),uXr=r(Hze," \u2014 "),joe=n(Hze,"A",{href:!0});var DHt=s(joe);_Xr=r(DHt,"TFDistilBertForTokenClassification"),DHt.forEach(t),bXr=r(Hze," (DistilBERT model)"),Hze.forEach(t),vXr=i(pe),w0=n(pe,"LI",{});var Jze=s(w0);Kwe=n(Jze,"STRONG",{});var GHt=s(Kwe);FXr=r(GHt,"electra"),GHt.forEach(t),TXr=r(Jze," \u2014 "),Doe=n(Jze,"A",{href:!0});var OHt=s(Doe);MXr=r(OHt,"TFElectraForTokenClassification"),OHt.forEach(t),EXr=r(Jze," (ELECTRA model)"),Jze.forEach(t),CXr=i(pe),A0=n(pe,"LI",{});var Yze=s(A0);Zwe=n(Yze,"STRONG",{});var VHt=s(Zwe);wXr=r(VHt,"flaubert"),VHt.forEach(t),AXr=r(Yze," \u2014 "),Goe=n(Yze,"A",{href:!0});var XHt=s(Goe);yXr=r(XHt,"TFFlaubertForTokenClassification"),XHt.forEach(t),LXr=r(Yze," (FlauBERT model)"),Yze.forEach(t),xXr=i(pe),y0=n(pe,"LI",{});var Kze=s(y0);eAe=n(Kze,"STRONG",{});var zHt=s(eAe);$Xr=r(zHt,"funnel"),zHt.forEach(t),kXr=r(Kze," \u2014 "),Ooe=n(Kze,"A",{href:!0});var QHt=s(Ooe);SXr=r(QHt,"TFFunnelForTokenClassification"),QHt.forEach(t),RXr=r(Kze," (Funnel Transformer model)"),Kze.forEach(t),PXr=i(pe),L0=n(pe,"LI",{});var Zze=s(L0);oAe=n(Zze,"STRONG",{});var WHt=s(oAe);BXr=r(WHt,"layoutlm"),WHt.forEach(t),IXr=r(Zze," \u2014 "),Voe=n(Zze,"A",{href:!0});var UHt=s(Voe);NXr=r(UHt,"TFLayoutLMForTokenClassification"),UHt.forEach(t),qXr=r(Zze," (LayoutLM model)"),Zze.forEach(t),jXr=i(pe),x0=n(pe,"LI",{});var eQe=s(x0);rAe=n(eQe,"STRONG",{});var HHt=s(rAe);DXr=r(HHt,"longformer"),HHt.forEach(t),GXr=r(eQe," \u2014 "),Xoe=n(eQe,"A",{href:!0});var JHt=s(Xoe);OXr=r(JHt,"TFLongformerForTokenClassification"),JHt.forEach(t),VXr=r(eQe," (Longformer model)"),eQe.forEach(t),XXr=i(pe),$0=n(pe,"LI",{});var oQe=s($0);tAe=n(oQe,"STRONG",{});var YHt=s(tAe);zXr=r(YHt,"mobilebert"),YHt.forEach(t),QXr=r(oQe," \u2014 "),zoe=n(oQe,"A",{href:!0});var KHt=s(zoe);WXr=r(KHt,"TFMobileBertForTokenClassification"),KHt.forEach(t),UXr=r(oQe," (MobileBERT model)"),oQe.forEach(t),HXr=i(pe),k0=n(pe,"LI",{});var rQe=s(k0);aAe=n(rQe,"STRONG",{});var ZHt=s(aAe);JXr=r(ZHt,"mpnet"),ZHt.forEach(t),YXr=r(rQe," \u2014 "),Qoe=n(rQe,"A",{href:!0});var eJt=s(Qoe);KXr=r(eJt,"TFMPNetForTokenClassification"),eJt.forEach(t),ZXr=r(rQe," (MPNet model)"),rQe.forEach(t),ezr=i(pe),S0=n(pe,"LI",{});var tQe=s(S0);nAe=n(tQe,"STRONG",{});var oJt=s(nAe);ozr=r(oJt,"rembert"),oJt.forEach(t),rzr=r(tQe," \u2014 "),Woe=n(tQe,"A",{href:!0});var rJt=s(Woe);tzr=r(rJt,"TFRemBertForTokenClassification"),rJt.forEach(t),azr=r(tQe," (RemBERT model)"),tQe.forEach(t),nzr=i(pe),R0=n(pe,"LI",{});var aQe=s(R0);sAe=n(aQe,"STRONG",{});var tJt=s(sAe);szr=r(tJt,"roberta"),tJt.forEach(t),lzr=r(aQe," \u2014 "),Uoe=n(aQe,"A",{href:!0});var aJt=s(Uoe);izr=r(aJt,"TFRobertaForTokenClassification"),aJt.forEach(t),dzr=r(aQe," (RoBERTa model)"),aQe.forEach(t),czr=i(pe),P0=n(pe,"LI",{});var nQe=s(P0);lAe=n(nQe,"STRONG",{});var nJt=s(lAe);fzr=r(nJt,"roformer"),nJt.forEach(t),mzr=r(nQe," \u2014 "),Hoe=n(nQe,"A",{href:!0});var sJt=s(Hoe);gzr=r(sJt,"TFRoFormerForTokenClassification"),sJt.forEach(t),hzr=r(nQe," (RoFormer model)"),nQe.forEach(t),pzr=i(pe),B0=n(pe,"LI",{});var sQe=s(B0);iAe=n(sQe,"STRONG",{});var lJt=s(iAe);uzr=r(lJt,"xlm"),lJt.forEach(t),_zr=r(sQe," \u2014 "),Joe=n(sQe,"A",{href:!0});var iJt=s(Joe);bzr=r(iJt,"TFXLMForTokenClassification"),iJt.forEach(t),vzr=r(sQe," (XLM model)"),sQe.forEach(t),Fzr=i(pe),I0=n(pe,"LI",{});var lQe=s(I0);dAe=n(lQe,"STRONG",{});var dJt=s(dAe);Tzr=r(dJt,"xlm-roberta"),dJt.forEach(t),Mzr=r(lQe," \u2014 "),Yoe=n(lQe,"A",{href:!0});var cJt=s(Yoe);Ezr=r(cJt,"TFXLMRobertaForTokenClassification"),cJt.forEach(t),Czr=r(lQe," (XLM-RoBERTa model)"),lQe.forEach(t),wzr=i(pe),N0=n(pe,"LI",{});var iQe=s(N0);cAe=n(iQe,"STRONG",{});var fJt=s(cAe);Azr=r(fJt,"xlnet"),fJt.forEach(t),yzr=r(iQe," \u2014 "),Koe=n(iQe,"A",{href:!0});var mJt=s(Koe);Lzr=r(mJt,"TFXLNetForTokenClassification"),mJt.forEach(t),xzr=r(iQe," (XLNet model)"),iQe.forEach(t),pe.forEach(t),$zr=i(_i),T(q0.$$.fragment,_i),_i.forEach(t),ui.forEach(t),hJe=i(f),pf=n(f,"H2",{class:!0});var kKe=s(pf);j0=n(kKe,"A",{id:!0,class:!0,href:!0});var gJt=s(j0);fAe=n(gJt,"SPAN",{});var hJt=s(fAe);T(Ik.$$.fragment,hJt),hJt.forEach(t),gJt.forEach(t),kzr=i(kKe),mAe=n(kKe,"SPAN",{});var pJt=s(mAe);Szr=r(pJt,"TFAutoModelForQuestionAnswering"),pJt.forEach(t),kKe.forEach(t),pJe=i(f),br=n(f,"DIV",{class:!0});var bi=s(br);T(Nk.$$.fragment,bi),Rzr=i(bi),uf=n(bi,"P",{});var Nse=s(uf);Pzr=r(Nse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Zoe=n(Nse,"A",{href:!0});var uJt=s(Zoe);Bzr=r(uJt,"from_pretrained()"),uJt.forEach(t),Izr=r(Nse," class method or the "),ere=n(Nse,"A",{href:!0});var _Jt=s(ere);Nzr=r(_Jt,"from_config()"),_Jt.forEach(t),qzr=r(Nse,` class
method.`),Nse.forEach(t),jzr=i(bi),qk=n(bi,"P",{});var SKe=s(qk);Dzr=r(SKe,"This class cannot be instantiated directly using "),gAe=n(SKe,"CODE",{});var bJt=s(gAe);Gzr=r(bJt,"__init__()"),bJt.forEach(t),Ozr=r(SKe," (throws an error)."),SKe.forEach(t),Vzr=i(bi),Zt=n(bi,"DIV",{class:!0});var Yy=s(Zt);T(jk.$$.fragment,Yy),Xzr=i(Yy),hAe=n(Yy,"P",{});var vJt=s(hAe);zzr=r(vJt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vJt.forEach(t),Qzr=i(Yy),_f=n(Yy,"P",{});var qse=s(_f);Wzr=r(qse,`Note:
Loading a model from its configuration file does `),pAe=n(qse,"STRONG",{});var FJt=s(pAe);Uzr=r(FJt,"not"),FJt.forEach(t),Hzr=r(qse,` load the model weights. It only affects the
model\u2019s configuration. Use `),ore=n(qse,"A",{href:!0});var TJt=s(ore);Jzr=r(TJt,"from_pretrained()"),TJt.forEach(t),Yzr=r(qse," to load the model weights."),qse.forEach(t),Kzr=i(Yy),T(D0.$$.fragment,Yy),Yy.forEach(t),Zzr=i(bi),Wr=n(bi,"DIV",{class:!0});var vi=s(Wr);T(Dk.$$.fragment,vi),eQr=i(vi),uAe=n(vi,"P",{});var MJt=s(uAe);oQr=r(MJt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),MJt.forEach(t),rQr=i(vi),Rn=n(vi,"P",{});var Ky=s(Rn);tQr=r(Ky,"The model class to instantiate is selected based on the "),_Ae=n(Ky,"CODE",{});var EJt=s(_Ae);aQr=r(EJt,"model_type"),EJt.forEach(t),nQr=r(Ky,` property of the config object (either
passed as an argument or loaded from `),bAe=n(Ky,"CODE",{});var CJt=s(bAe);sQr=r(CJt,"pretrained_model_name_or_path"),CJt.forEach(t),lQr=r(Ky,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vAe=n(Ky,"CODE",{});var wJt=s(vAe);iQr=r(wJt,"pretrained_model_name_or_path"),wJt.forEach(t),dQr=r(Ky,":"),Ky.forEach(t),cQr=i(vi),fe=n(vi,"UL",{});var ue=s(fe);G0=n(ue,"LI",{});var dQe=s(G0);FAe=n(dQe,"STRONG",{});var AJt=s(FAe);fQr=r(AJt,"albert"),AJt.forEach(t),mQr=r(dQe," \u2014 "),rre=n(dQe,"A",{href:!0});var yJt=s(rre);gQr=r(yJt,"TFAlbertForQuestionAnswering"),yJt.forEach(t),hQr=r(dQe," (ALBERT model)"),dQe.forEach(t),pQr=i(ue),O0=n(ue,"LI",{});var cQe=s(O0);TAe=n(cQe,"STRONG",{});var LJt=s(TAe);uQr=r(LJt,"bert"),LJt.forEach(t),_Qr=r(cQe," \u2014 "),tre=n(cQe,"A",{href:!0});var xJt=s(tre);bQr=r(xJt,"TFBertForQuestionAnswering"),xJt.forEach(t),vQr=r(cQe," (BERT model)"),cQe.forEach(t),FQr=i(ue),V0=n(ue,"LI",{});var fQe=s(V0);MAe=n(fQe,"STRONG",{});var $Jt=s(MAe);TQr=r($Jt,"camembert"),$Jt.forEach(t),MQr=r(fQe," \u2014 "),are=n(fQe,"A",{href:!0});var kJt=s(are);EQr=r(kJt,"TFCamembertForQuestionAnswering"),kJt.forEach(t),CQr=r(fQe," (CamemBERT model)"),fQe.forEach(t),wQr=i(ue),X0=n(ue,"LI",{});var mQe=s(X0);EAe=n(mQe,"STRONG",{});var SJt=s(EAe);AQr=r(SJt,"convbert"),SJt.forEach(t),yQr=r(mQe," \u2014 "),nre=n(mQe,"A",{href:!0});var RJt=s(nre);LQr=r(RJt,"TFConvBertForQuestionAnswering"),RJt.forEach(t),xQr=r(mQe," (ConvBERT model)"),mQe.forEach(t),$Qr=i(ue),z0=n(ue,"LI",{});var gQe=s(z0);CAe=n(gQe,"STRONG",{});var PJt=s(CAe);kQr=r(PJt,"deberta"),PJt.forEach(t),SQr=r(gQe," \u2014 "),sre=n(gQe,"A",{href:!0});var BJt=s(sre);RQr=r(BJt,"TFDebertaForQuestionAnswering"),BJt.forEach(t),PQr=r(gQe," (DeBERTa model)"),gQe.forEach(t),BQr=i(ue),Q0=n(ue,"LI",{});var hQe=s(Q0);wAe=n(hQe,"STRONG",{});var IJt=s(wAe);IQr=r(IJt,"deberta-v2"),IJt.forEach(t),NQr=r(hQe," \u2014 "),lre=n(hQe,"A",{href:!0});var NJt=s(lre);qQr=r(NJt,"TFDebertaV2ForQuestionAnswering"),NJt.forEach(t),jQr=r(hQe," (DeBERTa-v2 model)"),hQe.forEach(t),DQr=i(ue),W0=n(ue,"LI",{});var pQe=s(W0);AAe=n(pQe,"STRONG",{});var qJt=s(AAe);GQr=r(qJt,"distilbert"),qJt.forEach(t),OQr=r(pQe," \u2014 "),ire=n(pQe,"A",{href:!0});var jJt=s(ire);VQr=r(jJt,"TFDistilBertForQuestionAnswering"),jJt.forEach(t),XQr=r(pQe," (DistilBERT model)"),pQe.forEach(t),zQr=i(ue),U0=n(ue,"LI",{});var uQe=s(U0);yAe=n(uQe,"STRONG",{});var DJt=s(yAe);QQr=r(DJt,"electra"),DJt.forEach(t),WQr=r(uQe," \u2014 "),dre=n(uQe,"A",{href:!0});var GJt=s(dre);UQr=r(GJt,"TFElectraForQuestionAnswering"),GJt.forEach(t),HQr=r(uQe," (ELECTRA model)"),uQe.forEach(t),JQr=i(ue),H0=n(ue,"LI",{});var _Qe=s(H0);LAe=n(_Qe,"STRONG",{});var OJt=s(LAe);YQr=r(OJt,"flaubert"),OJt.forEach(t),KQr=r(_Qe," \u2014 "),cre=n(_Qe,"A",{href:!0});var VJt=s(cre);ZQr=r(VJt,"TFFlaubertForQuestionAnsweringSimple"),VJt.forEach(t),eWr=r(_Qe," (FlauBERT model)"),_Qe.forEach(t),oWr=i(ue),J0=n(ue,"LI",{});var bQe=s(J0);xAe=n(bQe,"STRONG",{});var XJt=s(xAe);rWr=r(XJt,"funnel"),XJt.forEach(t),tWr=r(bQe," \u2014 "),fre=n(bQe,"A",{href:!0});var zJt=s(fre);aWr=r(zJt,"TFFunnelForQuestionAnswering"),zJt.forEach(t),nWr=r(bQe," (Funnel Transformer model)"),bQe.forEach(t),sWr=i(ue),Y0=n(ue,"LI",{});var vQe=s(Y0);$Ae=n(vQe,"STRONG",{});var QJt=s($Ae);lWr=r(QJt,"gptj"),QJt.forEach(t),iWr=r(vQe," \u2014 "),mre=n(vQe,"A",{href:!0});var WJt=s(mre);dWr=r(WJt,"TFGPTJForQuestionAnswering"),WJt.forEach(t),cWr=r(vQe," (GPT-J model)"),vQe.forEach(t),fWr=i(ue),K0=n(ue,"LI",{});var FQe=s(K0);kAe=n(FQe,"STRONG",{});var UJt=s(kAe);mWr=r(UJt,"longformer"),UJt.forEach(t),gWr=r(FQe," \u2014 "),gre=n(FQe,"A",{href:!0});var HJt=s(gre);hWr=r(HJt,"TFLongformerForQuestionAnswering"),HJt.forEach(t),pWr=r(FQe," (Longformer model)"),FQe.forEach(t),uWr=i(ue),Z0=n(ue,"LI",{});var TQe=s(Z0);SAe=n(TQe,"STRONG",{});var JJt=s(SAe);_Wr=r(JJt,"mobilebert"),JJt.forEach(t),bWr=r(TQe," \u2014 "),hre=n(TQe,"A",{href:!0});var YJt=s(hre);vWr=r(YJt,"TFMobileBertForQuestionAnswering"),YJt.forEach(t),FWr=r(TQe," (MobileBERT model)"),TQe.forEach(t),TWr=i(ue),ew=n(ue,"LI",{});var MQe=s(ew);RAe=n(MQe,"STRONG",{});var KJt=s(RAe);MWr=r(KJt,"mpnet"),KJt.forEach(t),EWr=r(MQe," \u2014 "),pre=n(MQe,"A",{href:!0});var ZJt=s(pre);CWr=r(ZJt,"TFMPNetForQuestionAnswering"),ZJt.forEach(t),wWr=r(MQe," (MPNet model)"),MQe.forEach(t),AWr=i(ue),ow=n(ue,"LI",{});var EQe=s(ow);PAe=n(EQe,"STRONG",{});var eYt=s(PAe);yWr=r(eYt,"rembert"),eYt.forEach(t),LWr=r(EQe," \u2014 "),ure=n(EQe,"A",{href:!0});var oYt=s(ure);xWr=r(oYt,"TFRemBertForQuestionAnswering"),oYt.forEach(t),$Wr=r(EQe," (RemBERT model)"),EQe.forEach(t),kWr=i(ue),rw=n(ue,"LI",{});var CQe=s(rw);BAe=n(CQe,"STRONG",{});var rYt=s(BAe);SWr=r(rYt,"roberta"),rYt.forEach(t),RWr=r(CQe," \u2014 "),_re=n(CQe,"A",{href:!0});var tYt=s(_re);PWr=r(tYt,"TFRobertaForQuestionAnswering"),tYt.forEach(t),BWr=r(CQe," (RoBERTa model)"),CQe.forEach(t),IWr=i(ue),tw=n(ue,"LI",{});var wQe=s(tw);IAe=n(wQe,"STRONG",{});var aYt=s(IAe);NWr=r(aYt,"roformer"),aYt.forEach(t),qWr=r(wQe," \u2014 "),bre=n(wQe,"A",{href:!0});var nYt=s(bre);jWr=r(nYt,"TFRoFormerForQuestionAnswering"),nYt.forEach(t),DWr=r(wQe," (RoFormer model)"),wQe.forEach(t),GWr=i(ue),aw=n(ue,"LI",{});var AQe=s(aw);NAe=n(AQe,"STRONG",{});var sYt=s(NAe);OWr=r(sYt,"xlm"),sYt.forEach(t),VWr=r(AQe," \u2014 "),vre=n(AQe,"A",{href:!0});var lYt=s(vre);XWr=r(lYt,"TFXLMForQuestionAnsweringSimple"),lYt.forEach(t),zWr=r(AQe," (XLM model)"),AQe.forEach(t),QWr=i(ue),nw=n(ue,"LI",{});var yQe=s(nw);qAe=n(yQe,"STRONG",{});var iYt=s(qAe);WWr=r(iYt,"xlm-roberta"),iYt.forEach(t),UWr=r(yQe," \u2014 "),Fre=n(yQe,"A",{href:!0});var dYt=s(Fre);HWr=r(dYt,"TFXLMRobertaForQuestionAnswering"),dYt.forEach(t),JWr=r(yQe," (XLM-RoBERTa model)"),yQe.forEach(t),YWr=i(ue),sw=n(ue,"LI",{});var LQe=s(sw);jAe=n(LQe,"STRONG",{});var cYt=s(jAe);KWr=r(cYt,"xlnet"),cYt.forEach(t),ZWr=r(LQe," \u2014 "),Tre=n(LQe,"A",{href:!0});var fYt=s(Tre);eUr=r(fYt,"TFXLNetForQuestionAnsweringSimple"),fYt.forEach(t),oUr=r(LQe," (XLNet model)"),LQe.forEach(t),ue.forEach(t),rUr=i(vi),T(lw.$$.fragment,vi),vi.forEach(t),bi.forEach(t),uJe=i(f),bf=n(f,"H2",{class:!0});var RKe=s(bf);iw=n(RKe,"A",{id:!0,class:!0,href:!0});var mYt=s(iw);DAe=n(mYt,"SPAN",{});var gYt=s(DAe);T(Gk.$$.fragment,gYt),gYt.forEach(t),mYt.forEach(t),tUr=i(RKe),GAe=n(RKe,"SPAN",{});var hYt=s(GAe);aUr=r(hYt,"TFAutoModelForVision2Seq"),hYt.forEach(t),RKe.forEach(t),_Je=i(f),vr=n(f,"DIV",{class:!0});var Fi=s(vr);T(Ok.$$.fragment,Fi),nUr=i(Fi),vf=n(Fi,"P",{});var jse=s(vf);sUr=r(jse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Mre=n(jse,"A",{href:!0});var pYt=s(Mre);lUr=r(pYt,"from_pretrained()"),pYt.forEach(t),iUr=r(jse," class method or the "),Ere=n(jse,"A",{href:!0});var uYt=s(Ere);dUr=r(uYt,"from_config()"),uYt.forEach(t),cUr=r(jse,` class
method.`),jse.forEach(t),fUr=i(Fi),Vk=n(Fi,"P",{});var PKe=s(Vk);mUr=r(PKe,"This class cannot be instantiated directly using "),OAe=n(PKe,"CODE",{});var _Yt=s(OAe);gUr=r(_Yt,"__init__()"),_Yt.forEach(t),hUr=r(PKe," (throws an error)."),PKe.forEach(t),pUr=i(Fi),ea=n(Fi,"DIV",{class:!0});var Zy=s(ea);T(Xk.$$.fragment,Zy),uUr=i(Zy),VAe=n(Zy,"P",{});var bYt=s(VAe);_Ur=r(bYt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bYt.forEach(t),bUr=i(Zy),Ff=n(Zy,"P",{});var Dse=s(Ff);vUr=r(Dse,`Note:
Loading a model from its configuration file does `),XAe=n(Dse,"STRONG",{});var vYt=s(XAe);FUr=r(vYt,"not"),vYt.forEach(t),TUr=r(Dse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cre=n(Dse,"A",{href:!0});var FYt=s(Cre);MUr=r(FYt,"from_pretrained()"),FYt.forEach(t),EUr=r(Dse," to load the model weights."),Dse.forEach(t),CUr=i(Zy),T(dw.$$.fragment,Zy),Zy.forEach(t),wUr=i(Fi),Ur=n(Fi,"DIV",{class:!0});var Ti=s(Ur);T(zk.$$.fragment,Ti),AUr=i(Ti),zAe=n(Ti,"P",{});var TYt=s(zAe);yUr=r(TYt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),TYt.forEach(t),LUr=i(Ti),Pn=n(Ti,"P",{});var eL=s(Pn);xUr=r(eL,"The model class to instantiate is selected based on the "),QAe=n(eL,"CODE",{});var MYt=s(QAe);$Ur=r(MYt,"model_type"),MYt.forEach(t),kUr=r(eL,` property of the config object (either
passed as an argument or loaded from `),WAe=n(eL,"CODE",{});var EYt=s(WAe);SUr=r(EYt,"pretrained_model_name_or_path"),EYt.forEach(t),RUr=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UAe=n(eL,"CODE",{});var CYt=s(UAe);PUr=r(CYt,"pretrained_model_name_or_path"),CYt.forEach(t),BUr=r(eL,":"),eL.forEach(t),IUr=i(Ti),HAe=n(Ti,"UL",{});var wYt=s(HAe);cw=n(wYt,"LI",{});var xQe=s(cw);JAe=n(xQe,"STRONG",{});var AYt=s(JAe);NUr=r(AYt,"vision-encoder-decoder"),AYt.forEach(t),qUr=r(xQe," \u2014 "),wre=n(xQe,"A",{href:!0});var yYt=s(wre);jUr=r(yYt,"TFVisionEncoderDecoderModel"),yYt.forEach(t),DUr=r(xQe," (Vision Encoder decoder model)"),xQe.forEach(t),wYt.forEach(t),GUr=i(Ti),T(fw.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),bJe=i(f),Tf=n(f,"H2",{class:!0});var BKe=s(Tf);mw=n(BKe,"A",{id:!0,class:!0,href:!0});var LYt=s(mw);YAe=n(LYt,"SPAN",{});var xYt=s(YAe);T(Qk.$$.fragment,xYt),xYt.forEach(t),LYt.forEach(t),OUr=i(BKe),KAe=n(BKe,"SPAN",{});var $Yt=s(KAe);VUr=r($Yt,"TFAutoModelForSpeechSeq2Seq"),$Yt.forEach(t),BKe.forEach(t),vJe=i(f),Fr=n(f,"DIV",{class:!0});var Mi=s(Fr);T(Wk.$$.fragment,Mi),XUr=i(Mi),Mf=n(Mi,"P",{});var Gse=s(Mf);zUr=r(Gse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Are=n(Gse,"A",{href:!0});var kYt=s(Are);QUr=r(kYt,"from_pretrained()"),kYt.forEach(t),WUr=r(Gse," class method or the "),yre=n(Gse,"A",{href:!0});var SYt=s(yre);UUr=r(SYt,"from_config()"),SYt.forEach(t),HUr=r(Gse,` class
method.`),Gse.forEach(t),JUr=i(Mi),Uk=n(Mi,"P",{});var IKe=s(Uk);YUr=r(IKe,"This class cannot be instantiated directly using "),ZAe=n(IKe,"CODE",{});var RYt=s(ZAe);KUr=r(RYt,"__init__()"),RYt.forEach(t),ZUr=r(IKe," (throws an error)."),IKe.forEach(t),eHr=i(Mi),oa=n(Mi,"DIV",{class:!0});var oL=s(oa);T(Hk.$$.fragment,oL),oHr=i(oL),e6e=n(oL,"P",{});var PYt=s(e6e);rHr=r(PYt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),PYt.forEach(t),tHr=i(oL),Ef=n(oL,"P",{});var Ose=s(Ef);aHr=r(Ose,`Note:
Loading a model from its configuration file does `),o6e=n(Ose,"STRONG",{});var BYt=s(o6e);nHr=r(BYt,"not"),BYt.forEach(t),sHr=r(Ose,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lre=n(Ose,"A",{href:!0});var IYt=s(Lre);lHr=r(IYt,"from_pretrained()"),IYt.forEach(t),iHr=r(Ose," to load the model weights."),Ose.forEach(t),dHr=i(oL),T(gw.$$.fragment,oL),oL.forEach(t),cHr=i(Mi),Hr=n(Mi,"DIV",{class:!0});var Ei=s(Hr);T(Jk.$$.fragment,Ei),fHr=i(Ei),r6e=n(Ei,"P",{});var NYt=s(r6e);mHr=r(NYt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),NYt.forEach(t),gHr=i(Ei),Bn=n(Ei,"P",{});var rL=s(Bn);hHr=r(rL,"The model class to instantiate is selected based on the "),t6e=n(rL,"CODE",{});var qYt=s(t6e);pHr=r(qYt,"model_type"),qYt.forEach(t),uHr=r(rL,` property of the config object (either
passed as an argument or loaded from `),a6e=n(rL,"CODE",{});var jYt=s(a6e);_Hr=r(jYt,"pretrained_model_name_or_path"),jYt.forEach(t),bHr=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n6e=n(rL,"CODE",{});var DYt=s(n6e);vHr=r(DYt,"pretrained_model_name_or_path"),DYt.forEach(t),FHr=r(rL,":"),rL.forEach(t),THr=i(Ei),s6e=n(Ei,"UL",{});var GYt=s(s6e);hw=n(GYt,"LI",{});var $Qe=s(hw);l6e=n($Qe,"STRONG",{});var OYt=s(l6e);MHr=r(OYt,"speech_to_text"),OYt.forEach(t),EHr=r($Qe," \u2014 "),xre=n($Qe,"A",{href:!0});var VYt=s(xre);CHr=r(VYt,"TFSpeech2TextForConditionalGeneration"),VYt.forEach(t),wHr=r($Qe," (Speech2Text model)"),$Qe.forEach(t),GYt.forEach(t),AHr=i(Ei),T(pw.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),FJe=i(f),Cf=n(f,"H2",{class:!0});var NKe=s(Cf);uw=n(NKe,"A",{id:!0,class:!0,href:!0});var XYt=s(uw);i6e=n(XYt,"SPAN",{});var zYt=s(i6e);T(Yk.$$.fragment,zYt),zYt.forEach(t),XYt.forEach(t),yHr=i(NKe),d6e=n(NKe,"SPAN",{});var QYt=s(d6e);LHr=r(QYt,"FlaxAutoModel"),QYt.forEach(t),NKe.forEach(t),TJe=i(f),Tr=n(f,"DIV",{class:!0});var Ci=s(Tr);T(Kk.$$.fragment,Ci),xHr=i(Ci),wf=n(Ci,"P",{});var Vse=s(wf);$Hr=r(Vse,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$re=n(Vse,"A",{href:!0});var WYt=s($re);kHr=r(WYt,"from_pretrained()"),WYt.forEach(t),SHr=r(Vse," class method or the "),kre=n(Vse,"A",{href:!0});var UYt=s(kre);RHr=r(UYt,"from_config()"),UYt.forEach(t),PHr=r(Vse,` class
method.`),Vse.forEach(t),BHr=i(Ci),Zk=n(Ci,"P",{});var qKe=s(Zk);IHr=r(qKe,"This class cannot be instantiated directly using "),c6e=n(qKe,"CODE",{});var HYt=s(c6e);NHr=r(HYt,"__init__()"),HYt.forEach(t),qHr=r(qKe," (throws an error)."),qKe.forEach(t),jHr=i(Ci),ra=n(Ci,"DIV",{class:!0});var tL=s(ra);T(eS.$$.fragment,tL),DHr=i(tL),f6e=n(tL,"P",{});var JYt=s(f6e);GHr=r(JYt,"Instantiates one of the base model classes of the library from a configuration."),JYt.forEach(t),OHr=i(tL),Af=n(tL,"P",{});var Xse=s(Af);VHr=r(Xse,`Note:
Loading a model from its configuration file does `),m6e=n(Xse,"STRONG",{});var YYt=s(m6e);XHr=r(YYt,"not"),YYt.forEach(t),zHr=r(Xse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sre=n(Xse,"A",{href:!0});var KYt=s(Sre);QHr=r(KYt,"from_pretrained()"),KYt.forEach(t),WHr=r(Xse," to load the model weights."),Xse.forEach(t),UHr=i(tL),T(_w.$$.fragment,tL),tL.forEach(t),HHr=i(Ci),Jr=n(Ci,"DIV",{class:!0});var wi=s(Jr);T(oS.$$.fragment,wi),JHr=i(wi),g6e=n(wi,"P",{});var ZYt=s(g6e);YHr=r(ZYt,"Instantiate one of the base model classes of the library from a pretrained model."),ZYt.forEach(t),KHr=i(wi),In=n(wi,"P",{});var aL=s(In);ZHr=r(aL,"The model class to instantiate is selected based on the "),h6e=n(aL,"CODE",{});var eKt=s(h6e);eJr=r(eKt,"model_type"),eKt.forEach(t),oJr=r(aL,` property of the config object (either
passed as an argument or loaded from `),p6e=n(aL,"CODE",{});var oKt=s(p6e);rJr=r(oKt,"pretrained_model_name_or_path"),oKt.forEach(t),tJr=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u6e=n(aL,"CODE",{});var rKt=s(u6e);aJr=r(rKt,"pretrained_model_name_or_path"),rKt.forEach(t),nJr=r(aL,":"),aL.forEach(t),sJr=i(wi),re=n(wi,"UL",{});var ae=s(re);bw=n(ae,"LI",{});var kQe=s(bw);_6e=n(kQe,"STRONG",{});var tKt=s(_6e);lJr=r(tKt,"albert"),tKt.forEach(t),iJr=r(kQe," \u2014 "),Rre=n(kQe,"A",{href:!0});var aKt=s(Rre);dJr=r(aKt,"FlaxAlbertModel"),aKt.forEach(t),cJr=r(kQe," (ALBERT model)"),kQe.forEach(t),fJr=i(ae),vw=n(ae,"LI",{});var SQe=s(vw);b6e=n(SQe,"STRONG",{});var nKt=s(b6e);mJr=r(nKt,"bart"),nKt.forEach(t),gJr=r(SQe," \u2014 "),Pre=n(SQe,"A",{href:!0});var sKt=s(Pre);hJr=r(sKt,"FlaxBartModel"),sKt.forEach(t),pJr=r(SQe," (BART model)"),SQe.forEach(t),uJr=i(ae),Fw=n(ae,"LI",{});var RQe=s(Fw);v6e=n(RQe,"STRONG",{});var lKt=s(v6e);_Jr=r(lKt,"beit"),lKt.forEach(t),bJr=r(RQe," \u2014 "),Bre=n(RQe,"A",{href:!0});var iKt=s(Bre);vJr=r(iKt,"FlaxBeitModel"),iKt.forEach(t),FJr=r(RQe," (BEiT model)"),RQe.forEach(t),TJr=i(ae),Tw=n(ae,"LI",{});var PQe=s(Tw);F6e=n(PQe,"STRONG",{});var dKt=s(F6e);MJr=r(dKt,"bert"),dKt.forEach(t),EJr=r(PQe," \u2014 "),Ire=n(PQe,"A",{href:!0});var cKt=s(Ire);CJr=r(cKt,"FlaxBertModel"),cKt.forEach(t),wJr=r(PQe," (BERT model)"),PQe.forEach(t),AJr=i(ae),Mw=n(ae,"LI",{});var BQe=s(Mw);T6e=n(BQe,"STRONG",{});var fKt=s(T6e);yJr=r(fKt,"big_bird"),fKt.forEach(t),LJr=r(BQe," \u2014 "),Nre=n(BQe,"A",{href:!0});var mKt=s(Nre);xJr=r(mKt,"FlaxBigBirdModel"),mKt.forEach(t),$Jr=r(BQe," (BigBird model)"),BQe.forEach(t),kJr=i(ae),Ew=n(ae,"LI",{});var IQe=s(Ew);M6e=n(IQe,"STRONG",{});var gKt=s(M6e);SJr=r(gKt,"blenderbot"),gKt.forEach(t),RJr=r(IQe," \u2014 "),qre=n(IQe,"A",{href:!0});var hKt=s(qre);PJr=r(hKt,"FlaxBlenderbotModel"),hKt.forEach(t),BJr=r(IQe," (Blenderbot model)"),IQe.forEach(t),IJr=i(ae),Cw=n(ae,"LI",{});var NQe=s(Cw);E6e=n(NQe,"STRONG",{});var pKt=s(E6e);NJr=r(pKt,"blenderbot-small"),pKt.forEach(t),qJr=r(NQe," \u2014 "),jre=n(NQe,"A",{href:!0});var uKt=s(jre);jJr=r(uKt,"FlaxBlenderbotSmallModel"),uKt.forEach(t),DJr=r(NQe," (BlenderbotSmall model)"),NQe.forEach(t),GJr=i(ae),ww=n(ae,"LI",{});var qQe=s(ww);C6e=n(qQe,"STRONG",{});var _Kt=s(C6e);OJr=r(_Kt,"clip"),_Kt.forEach(t),VJr=r(qQe," \u2014 "),Dre=n(qQe,"A",{href:!0});var bKt=s(Dre);XJr=r(bKt,"FlaxCLIPModel"),bKt.forEach(t),zJr=r(qQe," (CLIP model)"),qQe.forEach(t),QJr=i(ae),Aw=n(ae,"LI",{});var jQe=s(Aw);w6e=n(jQe,"STRONG",{});var vKt=s(w6e);WJr=r(vKt,"distilbert"),vKt.forEach(t),UJr=r(jQe," \u2014 "),Gre=n(jQe,"A",{href:!0});var FKt=s(Gre);HJr=r(FKt,"FlaxDistilBertModel"),FKt.forEach(t),JJr=r(jQe," (DistilBERT model)"),jQe.forEach(t),YJr=i(ae),yw=n(ae,"LI",{});var DQe=s(yw);A6e=n(DQe,"STRONG",{});var TKt=s(A6e);KJr=r(TKt,"electra"),TKt.forEach(t),ZJr=r(DQe," \u2014 "),Ore=n(DQe,"A",{href:!0});var MKt=s(Ore);eYr=r(MKt,"FlaxElectraModel"),MKt.forEach(t),oYr=r(DQe," (ELECTRA model)"),DQe.forEach(t),rYr=i(ae),Lw=n(ae,"LI",{});var GQe=s(Lw);y6e=n(GQe,"STRONG",{});var EKt=s(y6e);tYr=r(EKt,"gpt2"),EKt.forEach(t),aYr=r(GQe," \u2014 "),Vre=n(GQe,"A",{href:!0});var CKt=s(Vre);nYr=r(CKt,"FlaxGPT2Model"),CKt.forEach(t),sYr=r(GQe," (OpenAI GPT-2 model)"),GQe.forEach(t),lYr=i(ae),xw=n(ae,"LI",{});var OQe=s(xw);L6e=n(OQe,"STRONG",{});var wKt=s(L6e);iYr=r(wKt,"gpt_neo"),wKt.forEach(t),dYr=r(OQe," \u2014 "),Xre=n(OQe,"A",{href:!0});var AKt=s(Xre);cYr=r(AKt,"FlaxGPTNeoModel"),AKt.forEach(t),fYr=r(OQe," (GPT Neo model)"),OQe.forEach(t),mYr=i(ae),$w=n(ae,"LI",{});var VQe=s($w);x6e=n(VQe,"STRONG",{});var yKt=s(x6e);gYr=r(yKt,"gptj"),yKt.forEach(t),hYr=r(VQe," \u2014 "),zre=n(VQe,"A",{href:!0});var LKt=s(zre);pYr=r(LKt,"FlaxGPTJModel"),LKt.forEach(t),uYr=r(VQe," (GPT-J model)"),VQe.forEach(t),_Yr=i(ae),kw=n(ae,"LI",{});var XQe=s(kw);$6e=n(XQe,"STRONG",{});var xKt=s($6e);bYr=r(xKt,"longt5"),xKt.forEach(t),vYr=r(XQe," \u2014 "),Qre=n(XQe,"A",{href:!0});var $Kt=s(Qre);FYr=r($Kt,"FlaxLongT5Model"),$Kt.forEach(t),TYr=r(XQe," (LongT5 model)"),XQe.forEach(t),MYr=i(ae),Sw=n(ae,"LI",{});var zQe=s(Sw);k6e=n(zQe,"STRONG",{});var kKt=s(k6e);EYr=r(kKt,"marian"),kKt.forEach(t),CYr=r(zQe," \u2014 "),Wre=n(zQe,"A",{href:!0});var SKt=s(Wre);wYr=r(SKt,"FlaxMarianModel"),SKt.forEach(t),AYr=r(zQe," (Marian model)"),zQe.forEach(t),yYr=i(ae),Rw=n(ae,"LI",{});var QQe=s(Rw);S6e=n(QQe,"STRONG",{});var RKt=s(S6e);LYr=r(RKt,"mbart"),RKt.forEach(t),xYr=r(QQe," \u2014 "),Ure=n(QQe,"A",{href:!0});var PKt=s(Ure);$Yr=r(PKt,"FlaxMBartModel"),PKt.forEach(t),kYr=r(QQe," (mBART model)"),QQe.forEach(t),SYr=i(ae),Pw=n(ae,"LI",{});var WQe=s(Pw);R6e=n(WQe,"STRONG",{});var BKt=s(R6e);RYr=r(BKt,"mt5"),BKt.forEach(t),PYr=r(WQe," \u2014 "),Hre=n(WQe,"A",{href:!0});var IKt=s(Hre);BYr=r(IKt,"FlaxMT5Model"),IKt.forEach(t),IYr=r(WQe," (MT5 model)"),WQe.forEach(t),NYr=i(ae),Bw=n(ae,"LI",{});var UQe=s(Bw);P6e=n(UQe,"STRONG",{});var NKt=s(P6e);qYr=r(NKt,"opt"),NKt.forEach(t),jYr=r(UQe," \u2014 "),Jre=n(UQe,"A",{href:!0});var qKt=s(Jre);DYr=r(qKt,"FlaxOPTModel"),qKt.forEach(t),GYr=r(UQe," (OPT model)"),UQe.forEach(t),OYr=i(ae),Iw=n(ae,"LI",{});var HQe=s(Iw);B6e=n(HQe,"STRONG",{});var jKt=s(B6e);VYr=r(jKt,"pegasus"),jKt.forEach(t),XYr=r(HQe," \u2014 "),Yre=n(HQe,"A",{href:!0});var DKt=s(Yre);zYr=r(DKt,"FlaxPegasusModel"),DKt.forEach(t),QYr=r(HQe," (Pegasus model)"),HQe.forEach(t),WYr=i(ae),Nw=n(ae,"LI",{});var JQe=s(Nw);I6e=n(JQe,"STRONG",{});var GKt=s(I6e);UYr=r(GKt,"roberta"),GKt.forEach(t),HYr=r(JQe," \u2014 "),Kre=n(JQe,"A",{href:!0});var OKt=s(Kre);JYr=r(OKt,"FlaxRobertaModel"),OKt.forEach(t),YYr=r(JQe," (RoBERTa model)"),JQe.forEach(t),KYr=i(ae),qw=n(ae,"LI",{});var YQe=s(qw);N6e=n(YQe,"STRONG",{});var VKt=s(N6e);ZYr=r(VKt,"roformer"),VKt.forEach(t),eKr=r(YQe," \u2014 "),Zre=n(YQe,"A",{href:!0});var XKt=s(Zre);oKr=r(XKt,"FlaxRoFormerModel"),XKt.forEach(t),rKr=r(YQe," (RoFormer model)"),YQe.forEach(t),tKr=i(ae),jw=n(ae,"LI",{});var KQe=s(jw);q6e=n(KQe,"STRONG",{});var zKt=s(q6e);aKr=r(zKt,"t5"),zKt.forEach(t),nKr=r(KQe," \u2014 "),ete=n(KQe,"A",{href:!0});var QKt=s(ete);sKr=r(QKt,"FlaxT5Model"),QKt.forEach(t),lKr=r(KQe," (T5 model)"),KQe.forEach(t),iKr=i(ae),Dw=n(ae,"LI",{});var ZQe=s(Dw);j6e=n(ZQe,"STRONG",{});var WKt=s(j6e);dKr=r(WKt,"vision-text-dual-encoder"),WKt.forEach(t),cKr=r(ZQe," \u2014 "),ote=n(ZQe,"A",{href:!0});var UKt=s(ote);fKr=r(UKt,"FlaxVisionTextDualEncoderModel"),UKt.forEach(t),mKr=r(ZQe," (VisionTextDualEncoder model)"),ZQe.forEach(t),gKr=i(ae),Gw=n(ae,"LI",{});var eWe=s(Gw);D6e=n(eWe,"STRONG",{});var HKt=s(D6e);hKr=r(HKt,"vit"),HKt.forEach(t),pKr=r(eWe," \u2014 "),rte=n(eWe,"A",{href:!0});var JKt=s(rte);uKr=r(JKt,"FlaxViTModel"),JKt.forEach(t),_Kr=r(eWe," (ViT model)"),eWe.forEach(t),bKr=i(ae),Ow=n(ae,"LI",{});var oWe=s(Ow);G6e=n(oWe,"STRONG",{});var YKt=s(G6e);vKr=r(YKt,"wav2vec2"),YKt.forEach(t),FKr=r(oWe," \u2014 "),tte=n(oWe,"A",{href:!0});var KKt=s(tte);TKr=r(KKt,"FlaxWav2Vec2Model"),KKt.forEach(t),MKr=r(oWe," (Wav2Vec2 model)"),oWe.forEach(t),EKr=i(ae),Vw=n(ae,"LI",{});var rWe=s(Vw);O6e=n(rWe,"STRONG",{});var ZKt=s(O6e);CKr=r(ZKt,"xglm"),ZKt.forEach(t),wKr=r(rWe," \u2014 "),ate=n(rWe,"A",{href:!0});var eZt=s(ate);AKr=r(eZt,"FlaxXGLMModel"),eZt.forEach(t),yKr=r(rWe," (XGLM model)"),rWe.forEach(t),LKr=i(ae),Xw=n(ae,"LI",{});var tWe=s(Xw);V6e=n(tWe,"STRONG",{});var oZt=s(V6e);xKr=r(oZt,"xlm-roberta"),oZt.forEach(t),$Kr=r(tWe," \u2014 "),nte=n(tWe,"A",{href:!0});var rZt=s(nte);kKr=r(rZt,"FlaxXLMRobertaModel"),rZt.forEach(t),SKr=r(tWe," (XLM-RoBERTa model)"),tWe.forEach(t),ae.forEach(t),RKr=i(wi),T(zw.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),MJe=i(f),yf=n(f,"H2",{class:!0});var jKe=s(yf);Qw=n(jKe,"A",{id:!0,class:!0,href:!0});var tZt=s(Qw);X6e=n(tZt,"SPAN",{});var aZt=s(X6e);T(rS.$$.fragment,aZt),aZt.forEach(t),tZt.forEach(t),PKr=i(jKe),z6e=n(jKe,"SPAN",{});var nZt=s(z6e);BKr=r(nZt,"FlaxAutoModelForCausalLM"),nZt.forEach(t),jKe.forEach(t),EJe=i(f),Mr=n(f,"DIV",{class:!0});var Ai=s(Mr);T(tS.$$.fragment,Ai),IKr=i(Ai),Lf=n(Ai,"P",{});var zse=s(Lf);NKr=r(zse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ste=n(zse,"A",{href:!0});var sZt=s(ste);qKr=r(sZt,"from_pretrained()"),sZt.forEach(t),jKr=r(zse," class method or the "),lte=n(zse,"A",{href:!0});var lZt=s(lte);DKr=r(lZt,"from_config()"),lZt.forEach(t),GKr=r(zse,` class
method.`),zse.forEach(t),OKr=i(Ai),aS=n(Ai,"P",{});var DKe=s(aS);VKr=r(DKe,"This class cannot be instantiated directly using "),Q6e=n(DKe,"CODE",{});var iZt=s(Q6e);XKr=r(iZt,"__init__()"),iZt.forEach(t),zKr=r(DKe," (throws an error)."),DKe.forEach(t),QKr=i(Ai),ta=n(Ai,"DIV",{class:!0});var nL=s(ta);T(nS.$$.fragment,nL),WKr=i(nL),W6e=n(nL,"P",{});var dZt=s(W6e);UKr=r(dZt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dZt.forEach(t),HKr=i(nL),xf=n(nL,"P",{});var Qse=s(xf);JKr=r(Qse,`Note:
Loading a model from its configuration file does `),U6e=n(Qse,"STRONG",{});var cZt=s(U6e);YKr=r(cZt,"not"),cZt.forEach(t),KKr=r(Qse,` load the model weights. It only affects the
model\u2019s configuration. Use `),ite=n(Qse,"A",{href:!0});var fZt=s(ite);ZKr=r(fZt,"from_pretrained()"),fZt.forEach(t),eZr=r(Qse," to load the model weights."),Qse.forEach(t),oZr=i(nL),T(Ww.$$.fragment,nL),nL.forEach(t),rZr=i(Ai),Yr=n(Ai,"DIV",{class:!0});var yi=s(Yr);T(sS.$$.fragment,yi),tZr=i(yi),H6e=n(yi,"P",{});var mZt=s(H6e);aZr=r(mZt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mZt.forEach(t),nZr=i(yi),Nn=n(yi,"P",{});var sL=s(Nn);sZr=r(sL,"The model class to instantiate is selected based on the "),J6e=n(sL,"CODE",{});var gZt=s(J6e);lZr=r(gZt,"model_type"),gZt.forEach(t),iZr=r(sL,` property of the config object (either
passed as an argument or loaded from `),Y6e=n(sL,"CODE",{});var hZt=s(Y6e);dZr=r(hZt,"pretrained_model_name_or_path"),hZt.forEach(t),cZr=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K6e=n(sL,"CODE",{});var pZt=s(K6e);fZr=r(pZt,"pretrained_model_name_or_path"),pZt.forEach(t),mZr=r(sL,":"),sL.forEach(t),gZr=i(yi),xe=n(yi,"UL",{});var Ne=s(xe);Uw=n(Ne,"LI",{});var aWe=s(Uw);Z6e=n(aWe,"STRONG",{});var uZt=s(Z6e);hZr=r(uZt,"bart"),uZt.forEach(t),pZr=r(aWe," \u2014 "),dte=n(aWe,"A",{href:!0});var _Zt=s(dte);uZr=r(_Zt,"FlaxBartForCausalLM"),_Zt.forEach(t),_Zr=r(aWe," (BART model)"),aWe.forEach(t),bZr=i(Ne),Hw=n(Ne,"LI",{});var nWe=s(Hw);e7e=n(nWe,"STRONG",{});var bZt=s(e7e);vZr=r(bZt,"bert"),bZt.forEach(t),FZr=r(nWe," \u2014 "),cte=n(nWe,"A",{href:!0});var vZt=s(cte);TZr=r(vZt,"FlaxBertForCausalLM"),vZt.forEach(t),MZr=r(nWe," (BERT model)"),nWe.forEach(t),EZr=i(Ne),Jw=n(Ne,"LI",{});var sWe=s(Jw);o7e=n(sWe,"STRONG",{});var FZt=s(o7e);CZr=r(FZt,"big_bird"),FZt.forEach(t),wZr=r(sWe," \u2014 "),fte=n(sWe,"A",{href:!0});var TZt=s(fte);AZr=r(TZt,"FlaxBigBirdForCausalLM"),TZt.forEach(t),yZr=r(sWe," (BigBird model)"),sWe.forEach(t),LZr=i(Ne),Yw=n(Ne,"LI",{});var lWe=s(Yw);r7e=n(lWe,"STRONG",{});var MZt=s(r7e);xZr=r(MZt,"electra"),MZt.forEach(t),$Zr=r(lWe," \u2014 "),mte=n(lWe,"A",{href:!0});var EZt=s(mte);kZr=r(EZt,"FlaxElectraForCausalLM"),EZt.forEach(t),SZr=r(lWe," (ELECTRA model)"),lWe.forEach(t),RZr=i(Ne),Kw=n(Ne,"LI",{});var iWe=s(Kw);t7e=n(iWe,"STRONG",{});var CZt=s(t7e);PZr=r(CZt,"gpt2"),CZt.forEach(t),BZr=r(iWe," \u2014 "),gte=n(iWe,"A",{href:!0});var wZt=s(gte);IZr=r(wZt,"FlaxGPT2LMHeadModel"),wZt.forEach(t),NZr=r(iWe," (OpenAI GPT-2 model)"),iWe.forEach(t),qZr=i(Ne),Zw=n(Ne,"LI",{});var dWe=s(Zw);a7e=n(dWe,"STRONG",{});var AZt=s(a7e);jZr=r(AZt,"gpt_neo"),AZt.forEach(t),DZr=r(dWe," \u2014 "),hte=n(dWe,"A",{href:!0});var yZt=s(hte);GZr=r(yZt,"FlaxGPTNeoForCausalLM"),yZt.forEach(t),OZr=r(dWe," (GPT Neo model)"),dWe.forEach(t),VZr=i(Ne),eA=n(Ne,"LI",{});var cWe=s(eA);n7e=n(cWe,"STRONG",{});var LZt=s(n7e);XZr=r(LZt,"gptj"),LZt.forEach(t),zZr=r(cWe," \u2014 "),pte=n(cWe,"A",{href:!0});var xZt=s(pte);QZr=r(xZt,"FlaxGPTJForCausalLM"),xZt.forEach(t),WZr=r(cWe," (GPT-J model)"),cWe.forEach(t),UZr=i(Ne),oA=n(Ne,"LI",{});var fWe=s(oA);s7e=n(fWe,"STRONG",{});var $Zt=s(s7e);HZr=r($Zt,"opt"),$Zt.forEach(t),JZr=r(fWe," \u2014 "),ute=n(fWe,"A",{href:!0});var kZt=s(ute);YZr=r(kZt,"FlaxOPTForCausalLM"),kZt.forEach(t),KZr=r(fWe," (OPT model)"),fWe.forEach(t),ZZr=i(Ne),rA=n(Ne,"LI",{});var mWe=s(rA);l7e=n(mWe,"STRONG",{});var SZt=s(l7e);eet=r(SZt,"roberta"),SZt.forEach(t),oet=r(mWe," \u2014 "),_te=n(mWe,"A",{href:!0});var RZt=s(_te);ret=r(RZt,"FlaxRobertaForCausalLM"),RZt.forEach(t),tet=r(mWe," (RoBERTa model)"),mWe.forEach(t),aet=i(Ne),tA=n(Ne,"LI",{});var gWe=s(tA);i7e=n(gWe,"STRONG",{});var PZt=s(i7e);net=r(PZt,"xglm"),PZt.forEach(t),set=r(gWe," \u2014 "),bte=n(gWe,"A",{href:!0});var BZt=s(bte);iet=r(BZt,"FlaxXGLMForCausalLM"),BZt.forEach(t),det=r(gWe," (XGLM model)"),gWe.forEach(t),Ne.forEach(t),cet=i(yi),T(aA.$$.fragment,yi),yi.forEach(t),Ai.forEach(t),CJe=i(f),$f=n(f,"H2",{class:!0});var GKe=s($f);nA=n(GKe,"A",{id:!0,class:!0,href:!0});var IZt=s(nA);d7e=n(IZt,"SPAN",{});var NZt=s(d7e);T(lS.$$.fragment,NZt),NZt.forEach(t),IZt.forEach(t),fet=i(GKe),c7e=n(GKe,"SPAN",{});var qZt=s(c7e);met=r(qZt,"FlaxAutoModelForPreTraining"),qZt.forEach(t),GKe.forEach(t),wJe=i(f),Er=n(f,"DIV",{class:!0});var Li=s(Er);T(iS.$$.fragment,Li),get=i(Li),kf=n(Li,"P",{});var Wse=s(kf);het=r(Wse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vte=n(Wse,"A",{href:!0});var jZt=s(vte);pet=r(jZt,"from_pretrained()"),jZt.forEach(t),uet=r(Wse," class method or the "),Fte=n(Wse,"A",{href:!0});var DZt=s(Fte);_et=r(DZt,"from_config()"),DZt.forEach(t),bet=r(Wse,` class
method.`),Wse.forEach(t),vet=i(Li),dS=n(Li,"P",{});var OKe=s(dS);Fet=r(OKe,"This class cannot be instantiated directly using "),f7e=n(OKe,"CODE",{});var GZt=s(f7e);Tet=r(GZt,"__init__()"),GZt.forEach(t),Met=r(OKe," (throws an error)."),OKe.forEach(t),Eet=i(Li),aa=n(Li,"DIV",{class:!0});var lL=s(aa);T(cS.$$.fragment,lL),Cet=i(lL),m7e=n(lL,"P",{});var OZt=s(m7e);wet=r(OZt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),OZt.forEach(t),Aet=i(lL),Sf=n(lL,"P",{});var Use=s(Sf);yet=r(Use,`Note:
Loading a model from its configuration file does `),g7e=n(Use,"STRONG",{});var VZt=s(g7e);Let=r(VZt,"not"),VZt.forEach(t),xet=r(Use,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tte=n(Use,"A",{href:!0});var XZt=s(Tte);$et=r(XZt,"from_pretrained()"),XZt.forEach(t),ket=r(Use," to load the model weights."),Use.forEach(t),Set=i(lL),T(sA.$$.fragment,lL),lL.forEach(t),Ret=i(Li),Kr=n(Li,"DIV",{class:!0});var xi=s(Kr);T(fS.$$.fragment,xi),Pet=i(xi),h7e=n(xi,"P",{});var zZt=s(h7e);Bet=r(zZt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zZt.forEach(t),Iet=i(xi),qn=n(xi,"P",{});var iL=s(qn);Net=r(iL,"The model class to instantiate is selected based on the "),p7e=n(iL,"CODE",{});var QZt=s(p7e);qet=r(QZt,"model_type"),QZt.forEach(t),jet=r(iL,` property of the config object (either
passed as an argument or loaded from `),u7e=n(iL,"CODE",{});var WZt=s(u7e);Det=r(WZt,"pretrained_model_name_or_path"),WZt.forEach(t),Get=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_7e=n(iL,"CODE",{});var UZt=s(_7e);Oet=r(UZt,"pretrained_model_name_or_path"),UZt.forEach(t),Vet=r(iL,":"),iL.forEach(t),Xet=i(xi),Ee=n(xi,"UL",{});var we=s(Ee);lA=n(we,"LI",{});var hWe=s(lA);b7e=n(hWe,"STRONG",{});var HZt=s(b7e);zet=r(HZt,"albert"),HZt.forEach(t),Qet=r(hWe," \u2014 "),Mte=n(hWe,"A",{href:!0});var JZt=s(Mte);Wet=r(JZt,"FlaxAlbertForPreTraining"),JZt.forEach(t),Uet=r(hWe," (ALBERT model)"),hWe.forEach(t),Het=i(we),iA=n(we,"LI",{});var pWe=s(iA);v7e=n(pWe,"STRONG",{});var YZt=s(v7e);Jet=r(YZt,"bart"),YZt.forEach(t),Yet=r(pWe," \u2014 "),Ete=n(pWe,"A",{href:!0});var KZt=s(Ete);Ket=r(KZt,"FlaxBartForConditionalGeneration"),KZt.forEach(t),Zet=r(pWe," (BART model)"),pWe.forEach(t),eot=i(we),dA=n(we,"LI",{});var uWe=s(dA);F7e=n(uWe,"STRONG",{});var ZZt=s(F7e);oot=r(ZZt,"bert"),ZZt.forEach(t),rot=r(uWe," \u2014 "),Cte=n(uWe,"A",{href:!0});var eea=s(Cte);tot=r(eea,"FlaxBertForPreTraining"),eea.forEach(t),aot=r(uWe," (BERT model)"),uWe.forEach(t),not=i(we),cA=n(we,"LI",{});var _We=s(cA);T7e=n(_We,"STRONG",{});var oea=s(T7e);sot=r(oea,"big_bird"),oea.forEach(t),lot=r(_We," \u2014 "),wte=n(_We,"A",{href:!0});var rea=s(wte);iot=r(rea,"FlaxBigBirdForPreTraining"),rea.forEach(t),dot=r(_We," (BigBird model)"),_We.forEach(t),cot=i(we),fA=n(we,"LI",{});var bWe=s(fA);M7e=n(bWe,"STRONG",{});var tea=s(M7e);fot=r(tea,"electra"),tea.forEach(t),mot=r(bWe," \u2014 "),Ate=n(bWe,"A",{href:!0});var aea=s(Ate);got=r(aea,"FlaxElectraForPreTraining"),aea.forEach(t),hot=r(bWe," (ELECTRA model)"),bWe.forEach(t),pot=i(we),mA=n(we,"LI",{});var vWe=s(mA);E7e=n(vWe,"STRONG",{});var nea=s(E7e);uot=r(nea,"longt5"),nea.forEach(t),_ot=r(vWe," \u2014 "),yte=n(vWe,"A",{href:!0});var sea=s(yte);bot=r(sea,"FlaxLongT5ForConditionalGeneration"),sea.forEach(t),vot=r(vWe," (LongT5 model)"),vWe.forEach(t),Fot=i(we),gA=n(we,"LI",{});var FWe=s(gA);C7e=n(FWe,"STRONG",{});var lea=s(C7e);Tot=r(lea,"mbart"),lea.forEach(t),Mot=r(FWe," \u2014 "),Lte=n(FWe,"A",{href:!0});var iea=s(Lte);Eot=r(iea,"FlaxMBartForConditionalGeneration"),iea.forEach(t),Cot=r(FWe," (mBART model)"),FWe.forEach(t),wot=i(we),hA=n(we,"LI",{});var TWe=s(hA);w7e=n(TWe,"STRONG",{});var dea=s(w7e);Aot=r(dea,"mt5"),dea.forEach(t),yot=r(TWe," \u2014 "),xte=n(TWe,"A",{href:!0});var cea=s(xte);Lot=r(cea,"FlaxMT5ForConditionalGeneration"),cea.forEach(t),xot=r(TWe," (MT5 model)"),TWe.forEach(t),$ot=i(we),pA=n(we,"LI",{});var MWe=s(pA);A7e=n(MWe,"STRONG",{});var fea=s(A7e);kot=r(fea,"roberta"),fea.forEach(t),Sot=r(MWe," \u2014 "),$te=n(MWe,"A",{href:!0});var mea=s($te);Rot=r(mea,"FlaxRobertaForMaskedLM"),mea.forEach(t),Pot=r(MWe," (RoBERTa model)"),MWe.forEach(t),Bot=i(we),uA=n(we,"LI",{});var EWe=s(uA);y7e=n(EWe,"STRONG",{});var gea=s(y7e);Iot=r(gea,"roformer"),gea.forEach(t),Not=r(EWe," \u2014 "),kte=n(EWe,"A",{href:!0});var hea=s(kte);qot=r(hea,"FlaxRoFormerForMaskedLM"),hea.forEach(t),jot=r(EWe," (RoFormer model)"),EWe.forEach(t),Dot=i(we),_A=n(we,"LI",{});var CWe=s(_A);L7e=n(CWe,"STRONG",{});var pea=s(L7e);Got=r(pea,"t5"),pea.forEach(t),Oot=r(CWe," \u2014 "),Ste=n(CWe,"A",{href:!0});var uea=s(Ste);Vot=r(uea,"FlaxT5ForConditionalGeneration"),uea.forEach(t),Xot=r(CWe," (T5 model)"),CWe.forEach(t),zot=i(we),bA=n(we,"LI",{});var wWe=s(bA);x7e=n(wWe,"STRONG",{});var _ea=s(x7e);Qot=r(_ea,"wav2vec2"),_ea.forEach(t),Wot=r(wWe," \u2014 "),Rte=n(wWe,"A",{href:!0});var bea=s(Rte);Uot=r(bea,"FlaxWav2Vec2ForPreTraining"),bea.forEach(t),Hot=r(wWe," (Wav2Vec2 model)"),wWe.forEach(t),Jot=i(we),vA=n(we,"LI",{});var AWe=s(vA);$7e=n(AWe,"STRONG",{});var vea=s($7e);Yot=r(vea,"xlm-roberta"),vea.forEach(t),Kot=r(AWe," \u2014 "),Pte=n(AWe,"A",{href:!0});var Fea=s(Pte);Zot=r(Fea,"FlaxXLMRobertaForMaskedLM"),Fea.forEach(t),ert=r(AWe," (XLM-RoBERTa model)"),AWe.forEach(t),we.forEach(t),ort=i(xi),T(FA.$$.fragment,xi),xi.forEach(t),Li.forEach(t),AJe=i(f),Rf=n(f,"H2",{class:!0});var VKe=s(Rf);TA=n(VKe,"A",{id:!0,class:!0,href:!0});var Tea=s(TA);k7e=n(Tea,"SPAN",{});var Mea=s(k7e);T(mS.$$.fragment,Mea),Mea.forEach(t),Tea.forEach(t),rrt=i(VKe),S7e=n(VKe,"SPAN",{});var Eea=s(S7e);trt=r(Eea,"FlaxAutoModelForMaskedLM"),Eea.forEach(t),VKe.forEach(t),yJe=i(f),Cr=n(f,"DIV",{class:!0});var $i=s(Cr);T(gS.$$.fragment,$i),art=i($i),Pf=n($i,"P",{});var Hse=s(Pf);nrt=r(Hse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Bte=n(Hse,"A",{href:!0});var Cea=s(Bte);srt=r(Cea,"from_pretrained()"),Cea.forEach(t),lrt=r(Hse," class method or the "),Ite=n(Hse,"A",{href:!0});var wea=s(Ite);irt=r(wea,"from_config()"),wea.forEach(t),drt=r(Hse,` class
method.`),Hse.forEach(t),crt=i($i),hS=n($i,"P",{});var XKe=s(hS);frt=r(XKe,"This class cannot be instantiated directly using "),R7e=n(XKe,"CODE",{});var Aea=s(R7e);mrt=r(Aea,"__init__()"),Aea.forEach(t),grt=r(XKe," (throws an error)."),XKe.forEach(t),hrt=i($i),na=n($i,"DIV",{class:!0});var dL=s(na);T(pS.$$.fragment,dL),prt=i(dL),P7e=n(dL,"P",{});var yea=s(P7e);urt=r(yea,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yea.forEach(t),_rt=i(dL),Bf=n(dL,"P",{});var Jse=s(Bf);brt=r(Jse,`Note:
Loading a model from its configuration file does `),B7e=n(Jse,"STRONG",{});var Lea=s(B7e);vrt=r(Lea,"not"),Lea.forEach(t),Frt=r(Jse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nte=n(Jse,"A",{href:!0});var xea=s(Nte);Trt=r(xea,"from_pretrained()"),xea.forEach(t),Mrt=r(Jse," to load the model weights."),Jse.forEach(t),Ert=i(dL),T(MA.$$.fragment,dL),dL.forEach(t),Crt=i($i),Zr=n($i,"DIV",{class:!0});var ki=s(Zr);T(uS.$$.fragment,ki),wrt=i(ki),I7e=n(ki,"P",{});var $ea=s(I7e);Art=r($ea,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$ea.forEach(t),yrt=i(ki),jn=n(ki,"P",{});var cL=s(jn);Lrt=r(cL,"The model class to instantiate is selected based on the "),N7e=n(cL,"CODE",{});var kea=s(N7e);xrt=r(kea,"model_type"),kea.forEach(t),$rt=r(cL,` property of the config object (either
passed as an argument or loaded from `),q7e=n(cL,"CODE",{});var Sea=s(q7e);krt=r(Sea,"pretrained_model_name_or_path"),Sea.forEach(t),Srt=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=n(cL,"CODE",{});var Rea=s(j7e);Rrt=r(Rea,"pretrained_model_name_or_path"),Rea.forEach(t),Prt=r(cL,":"),cL.forEach(t),Brt=i(ki),$e=n(ki,"UL",{});var qe=s($e);EA=n(qe,"LI",{});var yWe=s(EA);D7e=n(yWe,"STRONG",{});var Pea=s(D7e);Irt=r(Pea,"albert"),Pea.forEach(t),Nrt=r(yWe," \u2014 "),qte=n(yWe,"A",{href:!0});var Bea=s(qte);qrt=r(Bea,"FlaxAlbertForMaskedLM"),Bea.forEach(t),jrt=r(yWe," (ALBERT model)"),yWe.forEach(t),Drt=i(qe),CA=n(qe,"LI",{});var LWe=s(CA);G7e=n(LWe,"STRONG",{});var Iea=s(G7e);Grt=r(Iea,"bart"),Iea.forEach(t),Ort=r(LWe," \u2014 "),jte=n(LWe,"A",{href:!0});var Nea=s(jte);Vrt=r(Nea,"FlaxBartForConditionalGeneration"),Nea.forEach(t),Xrt=r(LWe," (BART model)"),LWe.forEach(t),zrt=i(qe),wA=n(qe,"LI",{});var xWe=s(wA);O7e=n(xWe,"STRONG",{});var qea=s(O7e);Qrt=r(qea,"bert"),qea.forEach(t),Wrt=r(xWe," \u2014 "),Dte=n(xWe,"A",{href:!0});var jea=s(Dte);Urt=r(jea,"FlaxBertForMaskedLM"),jea.forEach(t),Hrt=r(xWe," (BERT model)"),xWe.forEach(t),Jrt=i(qe),AA=n(qe,"LI",{});var $We=s(AA);V7e=n($We,"STRONG",{});var Dea=s(V7e);Yrt=r(Dea,"big_bird"),Dea.forEach(t),Krt=r($We," \u2014 "),Gte=n($We,"A",{href:!0});var Gea=s(Gte);Zrt=r(Gea,"FlaxBigBirdForMaskedLM"),Gea.forEach(t),ett=r($We," (BigBird model)"),$We.forEach(t),ott=i(qe),yA=n(qe,"LI",{});var kWe=s(yA);X7e=n(kWe,"STRONG",{});var Oea=s(X7e);rtt=r(Oea,"distilbert"),Oea.forEach(t),ttt=r(kWe," \u2014 "),Ote=n(kWe,"A",{href:!0});var Vea=s(Ote);att=r(Vea,"FlaxDistilBertForMaskedLM"),Vea.forEach(t),ntt=r(kWe," (DistilBERT model)"),kWe.forEach(t),stt=i(qe),LA=n(qe,"LI",{});var SWe=s(LA);z7e=n(SWe,"STRONG",{});var Xea=s(z7e);ltt=r(Xea,"electra"),Xea.forEach(t),itt=r(SWe," \u2014 "),Vte=n(SWe,"A",{href:!0});var zea=s(Vte);dtt=r(zea,"FlaxElectraForMaskedLM"),zea.forEach(t),ctt=r(SWe," (ELECTRA model)"),SWe.forEach(t),ftt=i(qe),xA=n(qe,"LI",{});var RWe=s(xA);Q7e=n(RWe,"STRONG",{});var Qea=s(Q7e);mtt=r(Qea,"mbart"),Qea.forEach(t),gtt=r(RWe," \u2014 "),Xte=n(RWe,"A",{href:!0});var Wea=s(Xte);htt=r(Wea,"FlaxMBartForConditionalGeneration"),Wea.forEach(t),ptt=r(RWe," (mBART model)"),RWe.forEach(t),utt=i(qe),$A=n(qe,"LI",{});var PWe=s($A);W7e=n(PWe,"STRONG",{});var Uea=s(W7e);_tt=r(Uea,"roberta"),Uea.forEach(t),btt=r(PWe," \u2014 "),zte=n(PWe,"A",{href:!0});var Hea=s(zte);vtt=r(Hea,"FlaxRobertaForMaskedLM"),Hea.forEach(t),Ftt=r(PWe," (RoBERTa model)"),PWe.forEach(t),Ttt=i(qe),kA=n(qe,"LI",{});var BWe=s(kA);U7e=n(BWe,"STRONG",{});var Jea=s(U7e);Mtt=r(Jea,"roformer"),Jea.forEach(t),Ett=r(BWe," \u2014 "),Qte=n(BWe,"A",{href:!0});var Yea=s(Qte);Ctt=r(Yea,"FlaxRoFormerForMaskedLM"),Yea.forEach(t),wtt=r(BWe," (RoFormer model)"),BWe.forEach(t),Att=i(qe),SA=n(qe,"LI",{});var IWe=s(SA);H7e=n(IWe,"STRONG",{});var Kea=s(H7e);ytt=r(Kea,"xlm-roberta"),Kea.forEach(t),Ltt=r(IWe," \u2014 "),Wte=n(IWe,"A",{href:!0});var Zea=s(Wte);xtt=r(Zea,"FlaxXLMRobertaForMaskedLM"),Zea.forEach(t),$tt=r(IWe," (XLM-RoBERTa model)"),IWe.forEach(t),qe.forEach(t),ktt=i(ki),T(RA.$$.fragment,ki),ki.forEach(t),$i.forEach(t),LJe=i(f),If=n(f,"H2",{class:!0});var zKe=s(If);PA=n(zKe,"A",{id:!0,class:!0,href:!0});var eoa=s(PA);J7e=n(eoa,"SPAN",{});var ooa=s(J7e);T(_S.$$.fragment,ooa),ooa.forEach(t),eoa.forEach(t),Stt=i(zKe),Y7e=n(zKe,"SPAN",{});var roa=s(Y7e);Rtt=r(roa,"FlaxAutoModelForSeq2SeqLM"),roa.forEach(t),zKe.forEach(t),xJe=i(f),wr=n(f,"DIV",{class:!0});var Si=s(wr);T(bS.$$.fragment,Si),Ptt=i(Si),Nf=n(Si,"P",{});var Yse=s(Nf);Btt=r(Yse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ute=n(Yse,"A",{href:!0});var toa=s(Ute);Itt=r(toa,"from_pretrained()"),toa.forEach(t),Ntt=r(Yse," class method or the "),Hte=n(Yse,"A",{href:!0});var aoa=s(Hte);qtt=r(aoa,"from_config()"),aoa.forEach(t),jtt=r(Yse,` class
method.`),Yse.forEach(t),Dtt=i(Si),vS=n(Si,"P",{});var QKe=s(vS);Gtt=r(QKe,"This class cannot be instantiated directly using "),K7e=n(QKe,"CODE",{});var noa=s(K7e);Ott=r(noa,"__init__()"),noa.forEach(t),Vtt=r(QKe," (throws an error)."),QKe.forEach(t),Xtt=i(Si),sa=n(Si,"DIV",{class:!0});var fL=s(sa);T(FS.$$.fragment,fL),ztt=i(fL),Z7e=n(fL,"P",{});var soa=s(Z7e);Qtt=r(soa,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),soa.forEach(t),Wtt=i(fL),qf=n(fL,"P",{});var Kse=s(qf);Utt=r(Kse,`Note:
Loading a model from its configuration file does `),eye=n(Kse,"STRONG",{});var loa=s(eye);Htt=r(loa,"not"),loa.forEach(t),Jtt=r(Kse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jte=n(Kse,"A",{href:!0});var ioa=s(Jte);Ytt=r(ioa,"from_pretrained()"),ioa.forEach(t),Ktt=r(Kse," to load the model weights."),Kse.forEach(t),Ztt=i(fL),T(BA.$$.fragment,fL),fL.forEach(t),eat=i(Si),et=n(Si,"DIV",{class:!0});var Ri=s(et);T(TS.$$.fragment,Ri),oat=i(Ri),oye=n(Ri,"P",{});var doa=s(oye);rat=r(doa,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),doa.forEach(t),tat=i(Ri),Dn=n(Ri,"P",{});var mL=s(Dn);aat=r(mL,"The model class to instantiate is selected based on the "),rye=n(mL,"CODE",{});var coa=s(rye);nat=r(coa,"model_type"),coa.forEach(t),sat=r(mL,` property of the config object (either
passed as an argument or loaded from `),tye=n(mL,"CODE",{});var foa=s(tye);lat=r(foa,"pretrained_model_name_or_path"),foa.forEach(t),iat=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aye=n(mL,"CODE",{});var moa=s(aye);dat=r(moa,"pretrained_model_name_or_path"),moa.forEach(t),cat=r(mL,":"),mL.forEach(t),fat=i(Ri),ke=n(Ri,"UL",{});var je=s(ke);IA=n(je,"LI",{});var NWe=s(IA);nye=n(NWe,"STRONG",{});var goa=s(nye);mat=r(goa,"bart"),goa.forEach(t),gat=r(NWe," \u2014 "),Yte=n(NWe,"A",{href:!0});var hoa=s(Yte);hat=r(hoa,"FlaxBartForConditionalGeneration"),hoa.forEach(t),pat=r(NWe," (BART model)"),NWe.forEach(t),uat=i(je),NA=n(je,"LI",{});var qWe=s(NA);sye=n(qWe,"STRONG",{});var poa=s(sye);_at=r(poa,"blenderbot"),poa.forEach(t),bat=r(qWe," \u2014 "),Kte=n(qWe,"A",{href:!0});var uoa=s(Kte);vat=r(uoa,"FlaxBlenderbotForConditionalGeneration"),uoa.forEach(t),Fat=r(qWe," (Blenderbot model)"),qWe.forEach(t),Tat=i(je),qA=n(je,"LI",{});var jWe=s(qA);lye=n(jWe,"STRONG",{});var _oa=s(lye);Mat=r(_oa,"blenderbot-small"),_oa.forEach(t),Eat=r(jWe," \u2014 "),Zte=n(jWe,"A",{href:!0});var boa=s(Zte);Cat=r(boa,"FlaxBlenderbotSmallForConditionalGeneration"),boa.forEach(t),wat=r(jWe," (BlenderbotSmall model)"),jWe.forEach(t),Aat=i(je),jA=n(je,"LI",{});var DWe=s(jA);iye=n(DWe,"STRONG",{});var voa=s(iye);yat=r(voa,"encoder-decoder"),voa.forEach(t),Lat=r(DWe," \u2014 "),eae=n(DWe,"A",{href:!0});var Foa=s(eae);xat=r(Foa,"FlaxEncoderDecoderModel"),Foa.forEach(t),$at=r(DWe," (Encoder decoder model)"),DWe.forEach(t),kat=i(je),DA=n(je,"LI",{});var GWe=s(DA);dye=n(GWe,"STRONG",{});var Toa=s(dye);Sat=r(Toa,"longt5"),Toa.forEach(t),Rat=r(GWe," \u2014 "),oae=n(GWe,"A",{href:!0});var Moa=s(oae);Pat=r(Moa,"FlaxLongT5ForConditionalGeneration"),Moa.forEach(t),Bat=r(GWe," (LongT5 model)"),GWe.forEach(t),Iat=i(je),GA=n(je,"LI",{});var OWe=s(GA);cye=n(OWe,"STRONG",{});var Eoa=s(cye);Nat=r(Eoa,"marian"),Eoa.forEach(t),qat=r(OWe," \u2014 "),rae=n(OWe,"A",{href:!0});var Coa=s(rae);jat=r(Coa,"FlaxMarianMTModel"),Coa.forEach(t),Dat=r(OWe," (Marian model)"),OWe.forEach(t),Gat=i(je),OA=n(je,"LI",{});var VWe=s(OA);fye=n(VWe,"STRONG",{});var woa=s(fye);Oat=r(woa,"mbart"),woa.forEach(t),Vat=r(VWe," \u2014 "),tae=n(VWe,"A",{href:!0});var Aoa=s(tae);Xat=r(Aoa,"FlaxMBartForConditionalGeneration"),Aoa.forEach(t),zat=r(VWe," (mBART model)"),VWe.forEach(t),Qat=i(je),VA=n(je,"LI",{});var XWe=s(VA);mye=n(XWe,"STRONG",{});var yoa=s(mye);Wat=r(yoa,"mt5"),yoa.forEach(t),Uat=r(XWe," \u2014 "),aae=n(XWe,"A",{href:!0});var Loa=s(aae);Hat=r(Loa,"FlaxMT5ForConditionalGeneration"),Loa.forEach(t),Jat=r(XWe," (MT5 model)"),XWe.forEach(t),Yat=i(je),XA=n(je,"LI",{});var zWe=s(XA);gye=n(zWe,"STRONG",{});var xoa=s(gye);Kat=r(xoa,"pegasus"),xoa.forEach(t),Zat=r(zWe," \u2014 "),nae=n(zWe,"A",{href:!0});var $oa=s(nae);ent=r($oa,"FlaxPegasusForConditionalGeneration"),$oa.forEach(t),ont=r(zWe," (Pegasus model)"),zWe.forEach(t),rnt=i(je),zA=n(je,"LI",{});var QWe=s(zA);hye=n(QWe,"STRONG",{});var koa=s(hye);tnt=r(koa,"t5"),koa.forEach(t),ant=r(QWe," \u2014 "),sae=n(QWe,"A",{href:!0});var Soa=s(sae);nnt=r(Soa,"FlaxT5ForConditionalGeneration"),Soa.forEach(t),snt=r(QWe," (T5 model)"),QWe.forEach(t),je.forEach(t),lnt=i(Ri),T(QA.$$.fragment,Ri),Ri.forEach(t),Si.forEach(t),$Je=i(f),jf=n(f,"H2",{class:!0});var WKe=s(jf);WA=n(WKe,"A",{id:!0,class:!0,href:!0});var Roa=s(WA);pye=n(Roa,"SPAN",{});var Poa=s(pye);T(MS.$$.fragment,Poa),Poa.forEach(t),Roa.forEach(t),int=i(WKe),uye=n(WKe,"SPAN",{});var Boa=s(uye);dnt=r(Boa,"FlaxAutoModelForSequenceClassification"),Boa.forEach(t),WKe.forEach(t),kJe=i(f),Ar=n(f,"DIV",{class:!0});var Pi=s(Ar);T(ES.$$.fragment,Pi),cnt=i(Pi),Df=n(Pi,"P",{});var Zse=s(Df);fnt=r(Zse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lae=n(Zse,"A",{href:!0});var Ioa=s(lae);mnt=r(Ioa,"from_pretrained()"),Ioa.forEach(t),gnt=r(Zse," class method or the "),iae=n(Zse,"A",{href:!0});var Noa=s(iae);hnt=r(Noa,"from_config()"),Noa.forEach(t),pnt=r(Zse,` class
method.`),Zse.forEach(t),unt=i(Pi),CS=n(Pi,"P",{});var UKe=s(CS);_nt=r(UKe,"This class cannot be instantiated directly using "),_ye=n(UKe,"CODE",{});var qoa=s(_ye);bnt=r(qoa,"__init__()"),qoa.forEach(t),vnt=r(UKe," (throws an error)."),UKe.forEach(t),Fnt=i(Pi),la=n(Pi,"DIV",{class:!0});var gL=s(la);T(wS.$$.fragment,gL),Tnt=i(gL),bye=n(gL,"P",{});var joa=s(bye);Mnt=r(joa,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),joa.forEach(t),Ent=i(gL),Gf=n(gL,"P",{});var ele=s(Gf);Cnt=r(ele,`Note:
Loading a model from its configuration file does `),vye=n(ele,"STRONG",{});var Doa=s(vye);wnt=r(Doa,"not"),Doa.forEach(t),Ant=r(ele,` load the model weights. It only affects the
model\u2019s configuration. Use `),dae=n(ele,"A",{href:!0});var Goa=s(dae);ynt=r(Goa,"from_pretrained()"),Goa.forEach(t),Lnt=r(ele," to load the model weights."),ele.forEach(t),xnt=i(gL),T(UA.$$.fragment,gL),gL.forEach(t),$nt=i(Pi),ot=n(Pi,"DIV",{class:!0});var Bi=s(ot);T(AS.$$.fragment,Bi),knt=i(Bi),Fye=n(Bi,"P",{});var Ooa=s(Fye);Snt=r(Ooa,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ooa.forEach(t),Rnt=i(Bi),Gn=n(Bi,"P",{});var hL=s(Gn);Pnt=r(hL,"The model class to instantiate is selected based on the "),Tye=n(hL,"CODE",{});var Voa=s(Tye);Bnt=r(Voa,"model_type"),Voa.forEach(t),Int=r(hL,` property of the config object (either
passed as an argument or loaded from `),Mye=n(hL,"CODE",{});var Xoa=s(Mye);Nnt=r(Xoa,"pretrained_model_name_or_path"),Xoa.forEach(t),qnt=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eye=n(hL,"CODE",{});var zoa=s(Eye);jnt=r(zoa,"pretrained_model_name_or_path"),zoa.forEach(t),Dnt=r(hL,":"),hL.forEach(t),Gnt=i(Bi),Se=n(Bi,"UL",{});var De=s(Se);HA=n(De,"LI",{});var WWe=s(HA);Cye=n(WWe,"STRONG",{});var Qoa=s(Cye);Ont=r(Qoa,"albert"),Qoa.forEach(t),Vnt=r(WWe," \u2014 "),cae=n(WWe,"A",{href:!0});var Woa=s(cae);Xnt=r(Woa,"FlaxAlbertForSequenceClassification"),Woa.forEach(t),znt=r(WWe," (ALBERT model)"),WWe.forEach(t),Qnt=i(De),JA=n(De,"LI",{});var UWe=s(JA);wye=n(UWe,"STRONG",{});var Uoa=s(wye);Wnt=r(Uoa,"bart"),Uoa.forEach(t),Unt=r(UWe," \u2014 "),fae=n(UWe,"A",{href:!0});var Hoa=s(fae);Hnt=r(Hoa,"FlaxBartForSequenceClassification"),Hoa.forEach(t),Jnt=r(UWe," (BART model)"),UWe.forEach(t),Ynt=i(De),YA=n(De,"LI",{});var HWe=s(YA);Aye=n(HWe,"STRONG",{});var Joa=s(Aye);Knt=r(Joa,"bert"),Joa.forEach(t),Znt=r(HWe," \u2014 "),mae=n(HWe,"A",{href:!0});var Yoa=s(mae);est=r(Yoa,"FlaxBertForSequenceClassification"),Yoa.forEach(t),ost=r(HWe," (BERT model)"),HWe.forEach(t),rst=i(De),KA=n(De,"LI",{});var JWe=s(KA);yye=n(JWe,"STRONG",{});var Koa=s(yye);tst=r(Koa,"big_bird"),Koa.forEach(t),ast=r(JWe," \u2014 "),gae=n(JWe,"A",{href:!0});var Zoa=s(gae);nst=r(Zoa,"FlaxBigBirdForSequenceClassification"),Zoa.forEach(t),sst=r(JWe," (BigBird model)"),JWe.forEach(t),lst=i(De),ZA=n(De,"LI",{});var YWe=s(ZA);Lye=n(YWe,"STRONG",{});var era=s(Lye);ist=r(era,"distilbert"),era.forEach(t),dst=r(YWe," \u2014 "),hae=n(YWe,"A",{href:!0});var ora=s(hae);cst=r(ora,"FlaxDistilBertForSequenceClassification"),ora.forEach(t),fst=r(YWe," (DistilBERT model)"),YWe.forEach(t),mst=i(De),e6=n(De,"LI",{});var KWe=s(e6);xye=n(KWe,"STRONG",{});var rra=s(xye);gst=r(rra,"electra"),rra.forEach(t),hst=r(KWe," \u2014 "),pae=n(KWe,"A",{href:!0});var tra=s(pae);pst=r(tra,"FlaxElectraForSequenceClassification"),tra.forEach(t),ust=r(KWe," (ELECTRA model)"),KWe.forEach(t),_st=i(De),o6=n(De,"LI",{});var ZWe=s(o6);$ye=n(ZWe,"STRONG",{});var ara=s($ye);bst=r(ara,"mbart"),ara.forEach(t),vst=r(ZWe," \u2014 "),uae=n(ZWe,"A",{href:!0});var nra=s(uae);Fst=r(nra,"FlaxMBartForSequenceClassification"),nra.forEach(t),Tst=r(ZWe," (mBART model)"),ZWe.forEach(t),Mst=i(De),r6=n(De,"LI",{});var eUe=s(r6);kye=n(eUe,"STRONG",{});var sra=s(kye);Est=r(sra,"roberta"),sra.forEach(t),Cst=r(eUe," \u2014 "),_ae=n(eUe,"A",{href:!0});var lra=s(_ae);wst=r(lra,"FlaxRobertaForSequenceClassification"),lra.forEach(t),Ast=r(eUe," (RoBERTa model)"),eUe.forEach(t),yst=i(De),t6=n(De,"LI",{});var oUe=s(t6);Sye=n(oUe,"STRONG",{});var ira=s(Sye);Lst=r(ira,"roformer"),ira.forEach(t),xst=r(oUe," \u2014 "),bae=n(oUe,"A",{href:!0});var dra=s(bae);$st=r(dra,"FlaxRoFormerForSequenceClassification"),dra.forEach(t),kst=r(oUe," (RoFormer model)"),oUe.forEach(t),Sst=i(De),a6=n(De,"LI",{});var rUe=s(a6);Rye=n(rUe,"STRONG",{});var cra=s(Rye);Rst=r(cra,"xlm-roberta"),cra.forEach(t),Pst=r(rUe," \u2014 "),vae=n(rUe,"A",{href:!0});var fra=s(vae);Bst=r(fra,"FlaxXLMRobertaForSequenceClassification"),fra.forEach(t),Ist=r(rUe," (XLM-RoBERTa model)"),rUe.forEach(t),De.forEach(t),Nst=i(Bi),T(n6.$$.fragment,Bi),Bi.forEach(t),Pi.forEach(t),SJe=i(f),Of=n(f,"H2",{class:!0});var HKe=s(Of);s6=n(HKe,"A",{id:!0,class:!0,href:!0});var mra=s(s6);Pye=n(mra,"SPAN",{});var gra=s(Pye);T(yS.$$.fragment,gra),gra.forEach(t),mra.forEach(t),qst=i(HKe),Bye=n(HKe,"SPAN",{});var hra=s(Bye);jst=r(hra,"FlaxAutoModelForQuestionAnswering"),hra.forEach(t),HKe.forEach(t),RJe=i(f),yr=n(f,"DIV",{class:!0});var Ii=s(yr);T(LS.$$.fragment,Ii),Dst=i(Ii),Vf=n(Ii,"P",{});var ole=s(Vf);Gst=r(ole,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Fae=n(ole,"A",{href:!0});var pra=s(Fae);Ost=r(pra,"from_pretrained()"),pra.forEach(t),Vst=r(ole," class method or the "),Tae=n(ole,"A",{href:!0});var ura=s(Tae);Xst=r(ura,"from_config()"),ura.forEach(t),zst=r(ole,` class
method.`),ole.forEach(t),Qst=i(Ii),xS=n(Ii,"P",{});var JKe=s(xS);Wst=r(JKe,"This class cannot be instantiated directly using "),Iye=n(JKe,"CODE",{});var _ra=s(Iye);Ust=r(_ra,"__init__()"),_ra.forEach(t),Hst=r(JKe," (throws an error)."),JKe.forEach(t),Jst=i(Ii),ia=n(Ii,"DIV",{class:!0});var pL=s(ia);T($S.$$.fragment,pL),Yst=i(pL),Nye=n(pL,"P",{});var bra=s(Nye);Kst=r(bra,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bra.forEach(t),Zst=i(pL),Xf=n(pL,"P",{});var rle=s(Xf);elt=r(rle,`Note:
Loading a model from its configuration file does `),qye=n(rle,"STRONG",{});var vra=s(qye);olt=r(vra,"not"),vra.forEach(t),rlt=r(rle,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mae=n(rle,"A",{href:!0});var Fra=s(Mae);tlt=r(Fra,"from_pretrained()"),Fra.forEach(t),alt=r(rle," to load the model weights."),rle.forEach(t),nlt=i(pL),T(l6.$$.fragment,pL),pL.forEach(t),slt=i(Ii),rt=n(Ii,"DIV",{class:!0});var Ni=s(rt);T(kS.$$.fragment,Ni),llt=i(Ni),jye=n(Ni,"P",{});var Tra=s(jye);ilt=r(Tra,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Tra.forEach(t),dlt=i(Ni),On=n(Ni,"P",{});var uL=s(On);clt=r(uL,"The model class to instantiate is selected based on the "),Dye=n(uL,"CODE",{});var Mra=s(Dye);flt=r(Mra,"model_type"),Mra.forEach(t),mlt=r(uL,` property of the config object (either
passed as an argument or loaded from `),Gye=n(uL,"CODE",{});var Era=s(Gye);glt=r(Era,"pretrained_model_name_or_path"),Era.forEach(t),hlt=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oye=n(uL,"CODE",{});var Cra=s(Oye);plt=r(Cra,"pretrained_model_name_or_path"),Cra.forEach(t),ult=r(uL,":"),uL.forEach(t),_lt=i(Ni),Re=n(Ni,"UL",{});var Ge=s(Re);i6=n(Ge,"LI",{});var tUe=s(i6);Vye=n(tUe,"STRONG",{});var wra=s(Vye);blt=r(wra,"albert"),wra.forEach(t),vlt=r(tUe," \u2014 "),Eae=n(tUe,"A",{href:!0});var Ara=s(Eae);Flt=r(Ara,"FlaxAlbertForQuestionAnswering"),Ara.forEach(t),Tlt=r(tUe," (ALBERT model)"),tUe.forEach(t),Mlt=i(Ge),d6=n(Ge,"LI",{});var aUe=s(d6);Xye=n(aUe,"STRONG",{});var yra=s(Xye);Elt=r(yra,"bart"),yra.forEach(t),Clt=r(aUe," \u2014 "),Cae=n(aUe,"A",{href:!0});var Lra=s(Cae);wlt=r(Lra,"FlaxBartForQuestionAnswering"),Lra.forEach(t),Alt=r(aUe," (BART model)"),aUe.forEach(t),ylt=i(Ge),c6=n(Ge,"LI",{});var nUe=s(c6);zye=n(nUe,"STRONG",{});var xra=s(zye);Llt=r(xra,"bert"),xra.forEach(t),xlt=r(nUe," \u2014 "),wae=n(nUe,"A",{href:!0});var $ra=s(wae);$lt=r($ra,"FlaxBertForQuestionAnswering"),$ra.forEach(t),klt=r(nUe," (BERT model)"),nUe.forEach(t),Slt=i(Ge),f6=n(Ge,"LI",{});var sUe=s(f6);Qye=n(sUe,"STRONG",{});var kra=s(Qye);Rlt=r(kra,"big_bird"),kra.forEach(t),Plt=r(sUe," \u2014 "),Aae=n(sUe,"A",{href:!0});var Sra=s(Aae);Blt=r(Sra,"FlaxBigBirdForQuestionAnswering"),Sra.forEach(t),Ilt=r(sUe," (BigBird model)"),sUe.forEach(t),Nlt=i(Ge),m6=n(Ge,"LI",{});var lUe=s(m6);Wye=n(lUe,"STRONG",{});var Rra=s(Wye);qlt=r(Rra,"distilbert"),Rra.forEach(t),jlt=r(lUe," \u2014 "),yae=n(lUe,"A",{href:!0});var Pra=s(yae);Dlt=r(Pra,"FlaxDistilBertForQuestionAnswering"),Pra.forEach(t),Glt=r(lUe," (DistilBERT model)"),lUe.forEach(t),Olt=i(Ge),g6=n(Ge,"LI",{});var iUe=s(g6);Uye=n(iUe,"STRONG",{});var Bra=s(Uye);Vlt=r(Bra,"electra"),Bra.forEach(t),Xlt=r(iUe," \u2014 "),Lae=n(iUe,"A",{href:!0});var Ira=s(Lae);zlt=r(Ira,"FlaxElectraForQuestionAnswering"),Ira.forEach(t),Qlt=r(iUe," (ELECTRA model)"),iUe.forEach(t),Wlt=i(Ge),h6=n(Ge,"LI",{});var dUe=s(h6);Hye=n(dUe,"STRONG",{});var Nra=s(Hye);Ult=r(Nra,"mbart"),Nra.forEach(t),Hlt=r(dUe," \u2014 "),xae=n(dUe,"A",{href:!0});var qra=s(xae);Jlt=r(qra,"FlaxMBartForQuestionAnswering"),qra.forEach(t),Ylt=r(dUe," (mBART model)"),dUe.forEach(t),Klt=i(Ge),p6=n(Ge,"LI",{});var cUe=s(p6);Jye=n(cUe,"STRONG",{});var jra=s(Jye);Zlt=r(jra,"roberta"),jra.forEach(t),eit=r(cUe," \u2014 "),$ae=n(cUe,"A",{href:!0});var Dra=s($ae);oit=r(Dra,"FlaxRobertaForQuestionAnswering"),Dra.forEach(t),rit=r(cUe," (RoBERTa model)"),cUe.forEach(t),tit=i(Ge),u6=n(Ge,"LI",{});var fUe=s(u6);Yye=n(fUe,"STRONG",{});var Gra=s(Yye);ait=r(Gra,"roformer"),Gra.forEach(t),nit=r(fUe," \u2014 "),kae=n(fUe,"A",{href:!0});var Ora=s(kae);sit=r(Ora,"FlaxRoFormerForQuestionAnswering"),Ora.forEach(t),lit=r(fUe," (RoFormer model)"),fUe.forEach(t),iit=i(Ge),_6=n(Ge,"LI",{});var mUe=s(_6);Kye=n(mUe,"STRONG",{});var Vra=s(Kye);dit=r(Vra,"xlm-roberta"),Vra.forEach(t),cit=r(mUe," \u2014 "),Sae=n(mUe,"A",{href:!0});var Xra=s(Sae);fit=r(Xra,"FlaxXLMRobertaForQuestionAnswering"),Xra.forEach(t),mit=r(mUe," (XLM-RoBERTa model)"),mUe.forEach(t),Ge.forEach(t),git=i(Ni),T(b6.$$.fragment,Ni),Ni.forEach(t),Ii.forEach(t),PJe=i(f),zf=n(f,"H2",{class:!0});var YKe=s(zf);v6=n(YKe,"A",{id:!0,class:!0,href:!0});var zra=s(v6);Zye=n(zra,"SPAN",{});var Qra=s(Zye);T(SS.$$.fragment,Qra),Qra.forEach(t),zra.forEach(t),hit=i(YKe),eLe=n(YKe,"SPAN",{});var Wra=s(eLe);pit=r(Wra,"FlaxAutoModelForTokenClassification"),Wra.forEach(t),YKe.forEach(t),BJe=i(f),Lr=n(f,"DIV",{class:!0});var qi=s(Lr);T(RS.$$.fragment,qi),uit=i(qi),Qf=n(qi,"P",{});var tle=s(Qf);_it=r(tle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rae=n(tle,"A",{href:!0});var Ura=s(Rae);bit=r(Ura,"from_pretrained()"),Ura.forEach(t),vit=r(tle," class method or the "),Pae=n(tle,"A",{href:!0});var Hra=s(Pae);Fit=r(Hra,"from_config()"),Hra.forEach(t),Tit=r(tle,` class
method.`),tle.forEach(t),Mit=i(qi),PS=n(qi,"P",{});var KKe=s(PS);Eit=r(KKe,"This class cannot be instantiated directly using "),oLe=n(KKe,"CODE",{});var Jra=s(oLe);Cit=r(Jra,"__init__()"),Jra.forEach(t),wit=r(KKe," (throws an error)."),KKe.forEach(t),Ait=i(qi),da=n(qi,"DIV",{class:!0});var _L=s(da);T(BS.$$.fragment,_L),yit=i(_L),rLe=n(_L,"P",{});var Yra=s(rLe);Lit=r(Yra,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Yra.forEach(t),xit=i(_L),Wf=n(_L,"P",{});var ale=s(Wf);$it=r(ale,`Note:
Loading a model from its configuration file does `),tLe=n(ale,"STRONG",{});var Kra=s(tLe);kit=r(Kra,"not"),Kra.forEach(t),Sit=r(ale,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bae=n(ale,"A",{href:!0});var Zra=s(Bae);Rit=r(Zra,"from_pretrained()"),Zra.forEach(t),Pit=r(ale," to load the model weights."),ale.forEach(t),Bit=i(_L),T(F6.$$.fragment,_L),_L.forEach(t),Iit=i(qi),tt=n(qi,"DIV",{class:!0});var ji=s(tt);T(IS.$$.fragment,ji),Nit=i(ji),aLe=n(ji,"P",{});var eta=s(aLe);qit=r(eta,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),eta.forEach(t),jit=i(ji),Vn=n(ji,"P",{});var bL=s(Vn);Dit=r(bL,"The model class to instantiate is selected based on the "),nLe=n(bL,"CODE",{});var ota=s(nLe);Git=r(ota,"model_type"),ota.forEach(t),Oit=r(bL,` property of the config object (either
passed as an argument or loaded from `),sLe=n(bL,"CODE",{});var rta=s(sLe);Vit=r(rta,"pretrained_model_name_or_path"),rta.forEach(t),Xit=r(bL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lLe=n(bL,"CODE",{});var tta=s(lLe);zit=r(tta,"pretrained_model_name_or_path"),tta.forEach(t),Qit=r(bL,":"),bL.forEach(t),Wit=i(ji),Xe=n(ji,"UL",{});var wo=s(Xe);T6=n(wo,"LI",{});var gUe=s(T6);iLe=n(gUe,"STRONG",{});var ata=s(iLe);Uit=r(ata,"albert"),ata.forEach(t),Hit=r(gUe," \u2014 "),Iae=n(gUe,"A",{href:!0});var nta=s(Iae);Jit=r(nta,"FlaxAlbertForTokenClassification"),nta.forEach(t),Yit=r(gUe," (ALBERT model)"),gUe.forEach(t),Kit=i(wo),M6=n(wo,"LI",{});var hUe=s(M6);dLe=n(hUe,"STRONG",{});var sta=s(dLe);Zit=r(sta,"bert"),sta.forEach(t),edt=r(hUe," \u2014 "),Nae=n(hUe,"A",{href:!0});var lta=s(Nae);odt=r(lta,"FlaxBertForTokenClassification"),lta.forEach(t),rdt=r(hUe," (BERT model)"),hUe.forEach(t),tdt=i(wo),E6=n(wo,"LI",{});var pUe=s(E6);cLe=n(pUe,"STRONG",{});var ita=s(cLe);adt=r(ita,"big_bird"),ita.forEach(t),ndt=r(pUe," \u2014 "),qae=n(pUe,"A",{href:!0});var dta=s(qae);sdt=r(dta,"FlaxBigBirdForTokenClassification"),dta.forEach(t),ldt=r(pUe," (BigBird model)"),pUe.forEach(t),idt=i(wo),C6=n(wo,"LI",{});var uUe=s(C6);fLe=n(uUe,"STRONG",{});var cta=s(fLe);ddt=r(cta,"distilbert"),cta.forEach(t),cdt=r(uUe," \u2014 "),jae=n(uUe,"A",{href:!0});var fta=s(jae);fdt=r(fta,"FlaxDistilBertForTokenClassification"),fta.forEach(t),mdt=r(uUe," (DistilBERT model)"),uUe.forEach(t),gdt=i(wo),w6=n(wo,"LI",{});var _Ue=s(w6);mLe=n(_Ue,"STRONG",{});var mta=s(mLe);hdt=r(mta,"electra"),mta.forEach(t),pdt=r(_Ue," \u2014 "),Dae=n(_Ue,"A",{href:!0});var gta=s(Dae);udt=r(gta,"FlaxElectraForTokenClassification"),gta.forEach(t),_dt=r(_Ue," (ELECTRA model)"),_Ue.forEach(t),bdt=i(wo),A6=n(wo,"LI",{});var bUe=s(A6);gLe=n(bUe,"STRONG",{});var hta=s(gLe);vdt=r(hta,"roberta"),hta.forEach(t),Fdt=r(bUe," \u2014 "),Gae=n(bUe,"A",{href:!0});var pta=s(Gae);Tdt=r(pta,"FlaxRobertaForTokenClassification"),pta.forEach(t),Mdt=r(bUe," (RoBERTa model)"),bUe.forEach(t),Edt=i(wo),y6=n(wo,"LI",{});var vUe=s(y6);hLe=n(vUe,"STRONG",{});var uta=s(hLe);Cdt=r(uta,"roformer"),uta.forEach(t),wdt=r(vUe," \u2014 "),Oae=n(vUe,"A",{href:!0});var _ta=s(Oae);Adt=r(_ta,"FlaxRoFormerForTokenClassification"),_ta.forEach(t),ydt=r(vUe," (RoFormer model)"),vUe.forEach(t),Ldt=i(wo),L6=n(wo,"LI",{});var FUe=s(L6);pLe=n(FUe,"STRONG",{});var bta=s(pLe);xdt=r(bta,"xlm-roberta"),bta.forEach(t),$dt=r(FUe," \u2014 "),Vae=n(FUe,"A",{href:!0});var vta=s(Vae);kdt=r(vta,"FlaxXLMRobertaForTokenClassification"),vta.forEach(t),Sdt=r(FUe," (XLM-RoBERTa model)"),FUe.forEach(t),wo.forEach(t),Rdt=i(ji),T(x6.$$.fragment,ji),ji.forEach(t),qi.forEach(t),IJe=i(f),Uf=n(f,"H2",{class:!0});var ZKe=s(Uf);$6=n(ZKe,"A",{id:!0,class:!0,href:!0});var Fta=s($6);uLe=n(Fta,"SPAN",{});var Tta=s(uLe);T(NS.$$.fragment,Tta),Tta.forEach(t),Fta.forEach(t),Pdt=i(ZKe),_Le=n(ZKe,"SPAN",{});var Mta=s(_Le);Bdt=r(Mta,"FlaxAutoModelForMultipleChoice"),Mta.forEach(t),ZKe.forEach(t),NJe=i(f),xr=n(f,"DIV",{class:!0});var Di=s(xr);T(qS.$$.fragment,Di),Idt=i(Di),Hf=n(Di,"P",{});var nle=s(Hf);Ndt=r(nle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Xae=n(nle,"A",{href:!0});var Eta=s(Xae);qdt=r(Eta,"from_pretrained()"),Eta.forEach(t),jdt=r(nle," class method or the "),zae=n(nle,"A",{href:!0});var Cta=s(zae);Ddt=r(Cta,"from_config()"),Cta.forEach(t),Gdt=r(nle,` class
method.`),nle.forEach(t),Odt=i(Di),jS=n(Di,"P",{});var eZe=s(jS);Vdt=r(eZe,"This class cannot be instantiated directly using "),bLe=n(eZe,"CODE",{});var wta=s(bLe);Xdt=r(wta,"__init__()"),wta.forEach(t),zdt=r(eZe," (throws an error)."),eZe.forEach(t),Qdt=i(Di),ca=n(Di,"DIV",{class:!0});var vL=s(ca);T(DS.$$.fragment,vL),Wdt=i(vL),vLe=n(vL,"P",{});var Ata=s(vLe);Udt=r(Ata,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ata.forEach(t),Hdt=i(vL),Jf=n(vL,"P",{});var sle=s(Jf);Jdt=r(sle,`Note:
Loading a model from its configuration file does `),FLe=n(sle,"STRONG",{});var yta=s(FLe);Ydt=r(yta,"not"),yta.forEach(t),Kdt=r(sle,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qae=n(sle,"A",{href:!0});var Lta=s(Qae);Zdt=r(Lta,"from_pretrained()"),Lta.forEach(t),ect=r(sle," to load the model weights."),sle.forEach(t),oct=i(vL),T(k6.$$.fragment,vL),vL.forEach(t),rct=i(Di),at=n(Di,"DIV",{class:!0});var Gi=s(at);T(GS.$$.fragment,Gi),tct=i(Gi),TLe=n(Gi,"P",{});var xta=s(TLe);act=r(xta,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xta.forEach(t),nct=i(Gi),Xn=n(Gi,"P",{});var FL=s(Xn);sct=r(FL,"The model class to instantiate is selected based on the "),MLe=n(FL,"CODE",{});var $ta=s(MLe);lct=r($ta,"model_type"),$ta.forEach(t),ict=r(FL,` property of the config object (either
passed as an argument or loaded from `),ELe=n(FL,"CODE",{});var kta=s(ELe);dct=r(kta,"pretrained_model_name_or_path"),kta.forEach(t),cct=r(FL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CLe=n(FL,"CODE",{});var Sta=s(CLe);fct=r(Sta,"pretrained_model_name_or_path"),Sta.forEach(t),mct=r(FL,":"),FL.forEach(t),gct=i(Gi),ze=n(Gi,"UL",{});var Ao=s(ze);S6=n(Ao,"LI",{});var TUe=s(S6);wLe=n(TUe,"STRONG",{});var Rta=s(wLe);hct=r(Rta,"albert"),Rta.forEach(t),pct=r(TUe," \u2014 "),Wae=n(TUe,"A",{href:!0});var Pta=s(Wae);uct=r(Pta,"FlaxAlbertForMultipleChoice"),Pta.forEach(t),_ct=r(TUe," (ALBERT model)"),TUe.forEach(t),bct=i(Ao),R6=n(Ao,"LI",{});var MUe=s(R6);ALe=n(MUe,"STRONG",{});var Bta=s(ALe);vct=r(Bta,"bert"),Bta.forEach(t),Fct=r(MUe," \u2014 "),Uae=n(MUe,"A",{href:!0});var Ita=s(Uae);Tct=r(Ita,"FlaxBertForMultipleChoice"),Ita.forEach(t),Mct=r(MUe," (BERT model)"),MUe.forEach(t),Ect=i(Ao),P6=n(Ao,"LI",{});var EUe=s(P6);yLe=n(EUe,"STRONG",{});var Nta=s(yLe);Cct=r(Nta,"big_bird"),Nta.forEach(t),wct=r(EUe," \u2014 "),Hae=n(EUe,"A",{href:!0});var qta=s(Hae);Act=r(qta,"FlaxBigBirdForMultipleChoice"),qta.forEach(t),yct=r(EUe," (BigBird model)"),EUe.forEach(t),Lct=i(Ao),B6=n(Ao,"LI",{});var CUe=s(B6);LLe=n(CUe,"STRONG",{});var jta=s(LLe);xct=r(jta,"distilbert"),jta.forEach(t),$ct=r(CUe," \u2014 "),Jae=n(CUe,"A",{href:!0});var Dta=s(Jae);kct=r(Dta,"FlaxDistilBertForMultipleChoice"),Dta.forEach(t),Sct=r(CUe," (DistilBERT model)"),CUe.forEach(t),Rct=i(Ao),I6=n(Ao,"LI",{});var wUe=s(I6);xLe=n(wUe,"STRONG",{});var Gta=s(xLe);Pct=r(Gta,"electra"),Gta.forEach(t),Bct=r(wUe," \u2014 "),Yae=n(wUe,"A",{href:!0});var Ota=s(Yae);Ict=r(Ota,"FlaxElectraForMultipleChoice"),Ota.forEach(t),Nct=r(wUe," (ELECTRA model)"),wUe.forEach(t),qct=i(Ao),N6=n(Ao,"LI",{});var AUe=s(N6);$Le=n(AUe,"STRONG",{});var Vta=s($Le);jct=r(Vta,"roberta"),Vta.forEach(t),Dct=r(AUe," \u2014 "),Kae=n(AUe,"A",{href:!0});var Xta=s(Kae);Gct=r(Xta,"FlaxRobertaForMultipleChoice"),Xta.forEach(t),Oct=r(AUe," (RoBERTa model)"),AUe.forEach(t),Vct=i(Ao),q6=n(Ao,"LI",{});var yUe=s(q6);kLe=n(yUe,"STRONG",{});var zta=s(kLe);Xct=r(zta,"roformer"),zta.forEach(t),zct=r(yUe," \u2014 "),Zae=n(yUe,"A",{href:!0});var Qta=s(Zae);Qct=r(Qta,"FlaxRoFormerForMultipleChoice"),Qta.forEach(t),Wct=r(yUe," (RoFormer model)"),yUe.forEach(t),Uct=i(Ao),j6=n(Ao,"LI",{});var LUe=s(j6);SLe=n(LUe,"STRONG",{});var Wta=s(SLe);Hct=r(Wta,"xlm-roberta"),Wta.forEach(t),Jct=r(LUe," \u2014 "),ene=n(LUe,"A",{href:!0});var Uta=s(ene);Yct=r(Uta,"FlaxXLMRobertaForMultipleChoice"),Uta.forEach(t),Kct=r(LUe," (XLM-RoBERTa model)"),LUe.forEach(t),Ao.forEach(t),Zct=i(Gi),T(D6.$$.fragment,Gi),Gi.forEach(t),Di.forEach(t),qJe=i(f),Yf=n(f,"H2",{class:!0});var oZe=s(Yf);G6=n(oZe,"A",{id:!0,class:!0,href:!0});var Hta=s(G6);RLe=n(Hta,"SPAN",{});var Jta=s(RLe);T(OS.$$.fragment,Jta),Jta.forEach(t),Hta.forEach(t),eft=i(oZe),PLe=n(oZe,"SPAN",{});var Yta=s(PLe);oft=r(Yta,"FlaxAutoModelForNextSentencePrediction"),Yta.forEach(t),oZe.forEach(t),jJe=i(f),$r=n(f,"DIV",{class:!0});var Oi=s($r);T(VS.$$.fragment,Oi),rft=i(Oi),Kf=n(Oi,"P",{});var lle=s(Kf);tft=r(lle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),one=n(lle,"A",{href:!0});var Kta=s(one);aft=r(Kta,"from_pretrained()"),Kta.forEach(t),nft=r(lle," class method or the "),rne=n(lle,"A",{href:!0});var Zta=s(rne);sft=r(Zta,"from_config()"),Zta.forEach(t),lft=r(lle,` class
method.`),lle.forEach(t),ift=i(Oi),XS=n(Oi,"P",{});var rZe=s(XS);dft=r(rZe,"This class cannot be instantiated directly using "),BLe=n(rZe,"CODE",{});var eaa=s(BLe);cft=r(eaa,"__init__()"),eaa.forEach(t),fft=r(rZe," (throws an error)."),rZe.forEach(t),mft=i(Oi),fa=n(Oi,"DIV",{class:!0});var TL=s(fa);T(zS.$$.fragment,TL),gft=i(TL),ILe=n(TL,"P",{});var oaa=s(ILe);hft=r(oaa,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),oaa.forEach(t),pft=i(TL),Zf=n(TL,"P",{});var ile=s(Zf);uft=r(ile,`Note:
Loading a model from its configuration file does `),NLe=n(ile,"STRONG",{});var raa=s(NLe);_ft=r(raa,"not"),raa.forEach(t),bft=r(ile,` load the model weights. It only affects the
model\u2019s configuration. Use `),tne=n(ile,"A",{href:!0});var taa=s(tne);vft=r(taa,"from_pretrained()"),taa.forEach(t),Fft=r(ile," to load the model weights."),ile.forEach(t),Tft=i(TL),T(O6.$$.fragment,TL),TL.forEach(t),Mft=i(Oi),nt=n(Oi,"DIV",{class:!0});var Vi=s(nt);T(QS.$$.fragment,Vi),Eft=i(Vi),qLe=n(Vi,"P",{});var aaa=s(qLe);Cft=r(aaa,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),aaa.forEach(t),wft=i(Vi),zn=n(Vi,"P",{});var ML=s(zn);Aft=r(ML,"The model class to instantiate is selected based on the "),jLe=n(ML,"CODE",{});var naa=s(jLe);yft=r(naa,"model_type"),naa.forEach(t),Lft=r(ML,` property of the config object (either
passed as an argument or loaded from `),DLe=n(ML,"CODE",{});var saa=s(DLe);xft=r(saa,"pretrained_model_name_or_path"),saa.forEach(t),$ft=r(ML,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GLe=n(ML,"CODE",{});var laa=s(GLe);kft=r(laa,"pretrained_model_name_or_path"),laa.forEach(t),Sft=r(ML,":"),ML.forEach(t),Rft=i(Vi),OLe=n(Vi,"UL",{});var iaa=s(OLe);V6=n(iaa,"LI",{});var xUe=s(V6);VLe=n(xUe,"STRONG",{});var daa=s(VLe);Pft=r(daa,"bert"),daa.forEach(t),Bft=r(xUe," \u2014 "),ane=n(xUe,"A",{href:!0});var caa=s(ane);Ift=r(caa,"FlaxBertForNextSentencePrediction"),caa.forEach(t),Nft=r(xUe," (BERT model)"),xUe.forEach(t),iaa.forEach(t),qft=i(Vi),T(X6.$$.fragment,Vi),Vi.forEach(t),Oi.forEach(t),DJe=i(f),em=n(f,"H2",{class:!0});var tZe=s(em);z6=n(tZe,"A",{id:!0,class:!0,href:!0});var faa=s(z6);XLe=n(faa,"SPAN",{});var maa=s(XLe);T(WS.$$.fragment,maa),maa.forEach(t),faa.forEach(t),jft=i(tZe),zLe=n(tZe,"SPAN",{});var gaa=s(zLe);Dft=r(gaa,"FlaxAutoModelForImageClassification"),gaa.forEach(t),tZe.forEach(t),GJe=i(f),kr=n(f,"DIV",{class:!0});var Xi=s(kr);T(US.$$.fragment,Xi),Gft=i(Xi),om=n(Xi,"P",{});var dle=s(om);Oft=r(dle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nne=n(dle,"A",{href:!0});var haa=s(nne);Vft=r(haa,"from_pretrained()"),haa.forEach(t),Xft=r(dle," class method or the "),sne=n(dle,"A",{href:!0});var paa=s(sne);zft=r(paa,"from_config()"),paa.forEach(t),Qft=r(dle,` class
method.`),dle.forEach(t),Wft=i(Xi),HS=n(Xi,"P",{});var aZe=s(HS);Uft=r(aZe,"This class cannot be instantiated directly using "),QLe=n(aZe,"CODE",{});var uaa=s(QLe);Hft=r(uaa,"__init__()"),uaa.forEach(t),Jft=r(aZe," (throws an error)."),aZe.forEach(t),Yft=i(Xi),ma=n(Xi,"DIV",{class:!0});var EL=s(ma);T(JS.$$.fragment,EL),Kft=i(EL),WLe=n(EL,"P",{});var _aa=s(WLe);Zft=r(_aa,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_aa.forEach(t),emt=i(EL),rm=n(EL,"P",{});var cle=s(rm);omt=r(cle,`Note:
Loading a model from its configuration file does `),ULe=n(cle,"STRONG",{});var baa=s(ULe);rmt=r(baa,"not"),baa.forEach(t),tmt=r(cle,` load the model weights. It only affects the
model\u2019s configuration. Use `),lne=n(cle,"A",{href:!0});var vaa=s(lne);amt=r(vaa,"from_pretrained()"),vaa.forEach(t),nmt=r(cle," to load the model weights."),cle.forEach(t),smt=i(EL),T(Q6.$$.fragment,EL),EL.forEach(t),lmt=i(Xi),st=n(Xi,"DIV",{class:!0});var zi=s(st);T(YS.$$.fragment,zi),imt=i(zi),HLe=n(zi,"P",{});var Faa=s(HLe);dmt=r(Faa,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Faa.forEach(t),cmt=i(zi),Qn=n(zi,"P",{});var CL=s(Qn);fmt=r(CL,"The model class to instantiate is selected based on the "),JLe=n(CL,"CODE",{});var Taa=s(JLe);mmt=r(Taa,"model_type"),Taa.forEach(t),gmt=r(CL,` property of the config object (either
passed as an argument or loaded from `),YLe=n(CL,"CODE",{});var Maa=s(YLe);hmt=r(Maa,"pretrained_model_name_or_path"),Maa.forEach(t),pmt=r(CL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KLe=n(CL,"CODE",{});var Eaa=s(KLe);umt=r(Eaa,"pretrained_model_name_or_path"),Eaa.forEach(t),_mt=r(CL,":"),CL.forEach(t),bmt=i(zi),KS=n(zi,"UL",{});var nZe=s(KS);W6=n(nZe,"LI",{});var $Ue=s(W6);ZLe=n($Ue,"STRONG",{});var Caa=s(ZLe);vmt=r(Caa,"beit"),Caa.forEach(t),Fmt=r($Ue," \u2014 "),ine=n($Ue,"A",{href:!0});var waa=s(ine);Tmt=r(waa,"FlaxBeitForImageClassification"),waa.forEach(t),Mmt=r($Ue," (BEiT model)"),$Ue.forEach(t),Emt=i(nZe),U6=n(nZe,"LI",{});var kUe=s(U6);e9e=n(kUe,"STRONG",{});var Aaa=s(e9e);Cmt=r(Aaa,"vit"),Aaa.forEach(t),wmt=r(kUe," \u2014 "),dne=n(kUe,"A",{href:!0});var yaa=s(dne);Amt=r(yaa,"FlaxViTForImageClassification"),yaa.forEach(t),ymt=r(kUe," (ViT model)"),kUe.forEach(t),nZe.forEach(t),Lmt=i(zi),T(H6.$$.fragment,zi),zi.forEach(t),Xi.forEach(t),OJe=i(f),tm=n(f,"H2",{class:!0});var sZe=s(tm);J6=n(sZe,"A",{id:!0,class:!0,href:!0});var Laa=s(J6);o9e=n(Laa,"SPAN",{});var xaa=s(o9e);T(ZS.$$.fragment,xaa),xaa.forEach(t),Laa.forEach(t),xmt=i(sZe),r9e=n(sZe,"SPAN",{});var $aa=s(r9e);$mt=r($aa,"FlaxAutoModelForVision2Seq"),$aa.forEach(t),sZe.forEach(t),VJe=i(f),Sr=n(f,"DIV",{class:!0});var Qi=s(Sr);T(eR.$$.fragment,Qi),kmt=i(Qi),am=n(Qi,"P",{});var fle=s(am);Smt=r(fle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cne=n(fle,"A",{href:!0});var kaa=s(cne);Rmt=r(kaa,"from_pretrained()"),kaa.forEach(t),Pmt=r(fle," class method or the "),fne=n(fle,"A",{href:!0});var Saa=s(fne);Bmt=r(Saa,"from_config()"),Saa.forEach(t),Imt=r(fle,` class
method.`),fle.forEach(t),Nmt=i(Qi),oR=n(Qi,"P",{});var lZe=s(oR);qmt=r(lZe,"This class cannot be instantiated directly using "),t9e=n(lZe,"CODE",{});var Raa=s(t9e);jmt=r(Raa,"__init__()"),Raa.forEach(t),Dmt=r(lZe," (throws an error)."),lZe.forEach(t),Gmt=i(Qi),ga=n(Qi,"DIV",{class:!0});var wL=s(ga);T(rR.$$.fragment,wL),Omt=i(wL),a9e=n(wL,"P",{});var Paa=s(a9e);Vmt=r(Paa,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Paa.forEach(t),Xmt=i(wL),nm=n(wL,"P",{});var mle=s(nm);zmt=r(mle,`Note:
Loading a model from its configuration file does `),n9e=n(mle,"STRONG",{});var Baa=s(n9e);Qmt=r(Baa,"not"),Baa.forEach(t),Wmt=r(mle,` load the model weights. It only affects the
model\u2019s configuration. Use `),mne=n(mle,"A",{href:!0});var Iaa=s(mne);Umt=r(Iaa,"from_pretrained()"),Iaa.forEach(t),Hmt=r(mle," to load the model weights."),mle.forEach(t),Jmt=i(wL),T(Y6.$$.fragment,wL),wL.forEach(t),Ymt=i(Qi),lt=n(Qi,"DIV",{class:!0});var Wi=s(lt);T(tR.$$.fragment,Wi),Kmt=i(Wi),s9e=n(Wi,"P",{});var Naa=s(s9e);Zmt=r(Naa,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Naa.forEach(t),egt=i(Wi),Wn=n(Wi,"P",{});var AL=s(Wn);ogt=r(AL,"The model class to instantiate is selected based on the "),l9e=n(AL,"CODE",{});var qaa=s(l9e);rgt=r(qaa,"model_type"),qaa.forEach(t),tgt=r(AL,` property of the config object (either
passed as an argument or loaded from `),i9e=n(AL,"CODE",{});var jaa=s(i9e);agt=r(jaa,"pretrained_model_name_or_path"),jaa.forEach(t),ngt=r(AL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d9e=n(AL,"CODE",{});var Daa=s(d9e);sgt=r(Daa,"pretrained_model_name_or_path"),Daa.forEach(t),lgt=r(AL,":"),AL.forEach(t),igt=i(Wi),c9e=n(Wi,"UL",{});var Gaa=s(c9e);K6=n(Gaa,"LI",{});var SUe=s(K6);f9e=n(SUe,"STRONG",{});var Oaa=s(f9e);dgt=r(Oaa,"vision-encoder-decoder"),Oaa.forEach(t),cgt=r(SUe," \u2014 "),gne=n(SUe,"A",{href:!0});var Vaa=s(gne);fgt=r(Vaa,"FlaxVisionEncoderDecoderModel"),Vaa.forEach(t),mgt=r(SUe," (Vision Encoder decoder model)"),SUe.forEach(t),Gaa.forEach(t),ggt=i(Wi),T(Z6.$$.fragment,Wi),Wi.forEach(t),Qi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(ola)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Hn,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.AutoConfig"),c(Yn,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.AutoModel"),c(Kn,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.AutoTokenizer"),c(ed,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertModel"),c(gm,"id","extending-the-auto-classes"),c(gm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gm,"href","#extending-the-auto-classes"),c(od,"class","relative group"),c(pm,"id","transformers.AutoConfig"),c(pm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pm,"href","#transformers.AutoConfig"),c(rd,"class","relative group"),c(RP,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(PP,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertConfig"),c(BP,"href","/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartConfig"),c(IP,"href","/docs/transformers/pr_18414/en/model_doc/beit#transformers.BeitConfig"),c(NP,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertConfig"),c(qP,"href","/docs/transformers/pr_18414/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(jP,"href","/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdConfig"),c(DP,"href","/docs/transformers/pr_18414/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(GP,"href","/docs/transformers/pr_18414/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(OP,"href","/docs/transformers/pr_18414/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(VP,"href","/docs/transformers/pr_18414/en/model_doc/bloom#transformers.BloomConfig"),c(XP,"href","/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertConfig"),c(zP,"href","/docs/transformers/pr_18414/en/model_doc/canine#transformers.CanineConfig"),c(QP,"href","/docs/transformers/pr_18414/en/model_doc/clip#transformers.CLIPConfig"),c(WP,"href","/docs/transformers/pr_18414/en/model_doc/codegen#transformers.CodeGenConfig"),c(UP,"href","/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertConfig"),c(HP,"href","/docs/transformers/pr_18414/en/model_doc/convnext#transformers.ConvNextConfig"),c(JP,"href","/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.CTRLConfig"),c(YP,"href","/docs/transformers/pr_18414/en/model_doc/cvt#transformers.CvtConfig"),c(KP,"href","/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(ZP,"href","/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(eB,"href","/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(oB,"href","/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaConfig"),c(rB,"href","/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(tB,"href","/docs/transformers/pr_18414/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(aB,"href","/docs/transformers/pr_18414/en/model_doc/deit#transformers.DeiTConfig"),c(nB,"href","/docs/transformers/pr_18414/en/model_doc/detr#transformers.DetrConfig"),c(sB,"href","/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertConfig"),c(lB,"href","/docs/transformers/pr_18414/en/model_doc/donut#transformers.DonutSwinConfig"),c(iB,"href","/docs/transformers/pr_18414/en/model_doc/dpr#transformers.DPRConfig"),c(dB,"href","/docs/transformers/pr_18414/en/model_doc/dpt#transformers.DPTConfig"),c(cB,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraConfig"),c(fB,"href","/docs/transformers/pr_18414/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(mB,"href","/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertConfig"),c(gB,"href","/docs/transformers/pr_18414/en/model_doc/flava#transformers.FlavaConfig"),c(hB,"href","/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetConfig"),c(pB,"href","/docs/transformers/pr_18414/en/model_doc/fsmt#transformers.FSMTConfig"),c(uB,"href","/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelConfig"),c(_B,"href","/docs/transformers/pr_18414/en/model_doc/glpn#transformers.GLPNConfig"),c(bB,"href","/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2Config"),c(vB,"href","/docs/transformers/pr_18414/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(FB,"href","/docs/transformers/pr_18414/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(TB,"href","/docs/transformers/pr_18414/en/model_doc/gptj#transformers.GPTJConfig"),c(MB,"href","/docs/transformers/pr_18414/en/model_doc/groupvit#transformers.GroupViTConfig"),c(EB,"href","/docs/transformers/pr_18414/en/model_doc/hubert#transformers.HubertConfig"),c(CB,"href","/docs/transformers/pr_18414/en/model_doc/ibert#transformers.IBertConfig"),c(wB,"href","/docs/transformers/pr_18414/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(AB,"href","/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(yB,"href","/docs/transformers/pr_18414/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(LB,"href","/docs/transformers/pr_18414/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(xB,"href","/docs/transformers/pr_18414/en/model_doc/led#transformers.LEDConfig"),c($B,"href","/docs/transformers/pr_18414/en/model_doc/levit#transformers.LevitConfig"),c(kB,"href","/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerConfig"),c(SB,"href","/docs/transformers/pr_18414/en/model_doc/longt5#transformers.LongT5Config"),c(RB,"href","/docs/transformers/pr_18414/en/model_doc/luke#transformers.LukeConfig"),c(PB,"href","/docs/transformers/pr_18414/en/model_doc/lxmert#transformers.LxmertConfig"),c(BB,"href","/docs/transformers/pr_18414/en/model_doc/m2m_100#transformers.M2M100Config"),c(IB,"href","/docs/transformers/pr_18414/en/model_doc/marian#transformers.MarianConfig"),c(NB,"href","/docs/transformers/pr_18414/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(qB,"href","/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartConfig"),c(jB,"href","/docs/transformers/pr_18414/en/model_doc/mctct#transformers.MCTCTConfig"),c(DB,"href","/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(GB,"href","/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(OB,"href","/docs/transformers/pr_18414/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(VB,"href","/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetConfig"),c(XB,"href","/docs/transformers/pr_18414/en/model_doc/mt5#transformers.MT5Config"),c(zB,"href","/docs/transformers/pr_18414/en/model_doc/mvp#transformers.MvpConfig"),c(QB,"href","/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaConfig"),c(WB,"href","/docs/transformers/pr_18414/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(UB,"href","/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(HB,"href","/docs/transformers/pr_18414/en/model_doc/opt#transformers.OPTConfig"),c(JB,"href","/docs/transformers/pr_18414/en/model_doc/owlvit#transformers.OwlViTConfig"),c(YB,"href","/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.PegasusConfig"),c(KB,"href","/docs/transformers/pr_18414/en/model_doc/perceiver#transformers.PerceiverConfig"),c(ZB,"href","/docs/transformers/pr_18414/en/model_doc/plbart#transformers.PLBartConfig"),c(eI,"href","/docs/transformers/pr_18414/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(oI,"href","/docs/transformers/pr_18414/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(rI,"href","/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(tI,"href","/docs/transformers/pr_18414/en/model_doc/rag#transformers.RagConfig"),c(aI,"href","/docs/transformers/pr_18414/en/model_doc/realm#transformers.RealmConfig"),c(nI,"href","/docs/transformers/pr_18414/en/model_doc/reformer#transformers.ReformerConfig"),c(sI,"href","/docs/transformers/pr_18414/en/model_doc/regnet#transformers.RegNetConfig"),c(lI,"href","/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertConfig"),c(iI,"href","/docs/transformers/pr_18414/en/model_doc/resnet#transformers.ResNetConfig"),c(dI,"href","/docs/transformers/pr_18414/en/model_doc/retribert#transformers.RetriBertConfig"),c(cI,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaConfig"),c(fI,"href","/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerConfig"),c(mI,"href","/docs/transformers/pr_18414/en/model_doc/segformer#transformers.SegformerConfig"),c(gI,"href","/docs/transformers/pr_18414/en/model_doc/sew#transformers.SEWConfig"),c(hI,"href","/docs/transformers/pr_18414/en/model_doc/sew-d#transformers.SEWDConfig"),c(pI,"href","/docs/transformers/pr_18414/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(uI,"href","/docs/transformers/pr_18414/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(_I,"href","/docs/transformers/pr_18414/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(bI,"href","/docs/transformers/pr_18414/en/model_doc/splinter#transformers.SplinterConfig"),c(vI,"href","/docs/transformers/pr_18414/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(FI,"href","/docs/transformers/pr_18414/en/model_doc/swin#transformers.SwinConfig"),c(TI,"href","/docs/transformers/pr_18414/en/model_doc/swinv2#transformers.Swinv2Config"),c(MI,"href","/docs/transformers/pr_18414/en/model_doc/t5#transformers.T5Config"),c(EI,"href","/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TapasConfig"),c(CI,"href","/docs/transformers/pr_18414/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(wI,"href","/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(AI,"href","/docs/transformers/pr_18414/en/model_doc/trocr#transformers.TrOCRConfig"),c(yI,"href","/docs/transformers/pr_18414/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(LI,"href","/docs/transformers/pr_18414/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(xI,"href","/docs/transformers/pr_18414/en/model_doc/van#transformers.VanConfig"),c($I,"href","/docs/transformers/pr_18414/en/model_doc/videomae#transformers.VideoMAEConfig"),c(kI,"href","/docs/transformers/pr_18414/en/model_doc/vilt#transformers.ViltConfig"),c(SI,"href","/docs/transformers/pr_18414/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(RI,"href","/docs/transformers/pr_18414/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(PI,"href","/docs/transformers/pr_18414/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(BI,"href","/docs/transformers/pr_18414/en/model_doc/vit#transformers.ViTConfig"),c(II,"href","/docs/transformers/pr_18414/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(NI,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(qI,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(jI,"href","/docs/transformers/pr_18414/en/model_doc/wavlm#transformers.WavLMConfig"),c(DI,"href","/docs/transformers/pr_18414/en/model_doc/xglm#transformers.XGLMConfig"),c(GI,"href","/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMConfig"),c(OI,"href","/docs/transformers/pr_18414/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(VI,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(XI,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(zI,"href","/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetConfig"),c(QI,"href","/docs/transformers/pr_18414/en/model_doc/yolos#transformers.YolosConfig"),c(WI,"href","/docs/transformers/pr_18414/en/model_doc/yoso#transformers.YosoConfig"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sh,"id","transformers.AutoTokenizer"),c(Sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sh,"href","#transformers.AutoTokenizer"),c(ad,"class","relative group"),c(UI,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(HI,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertTokenizer"),c(JI,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(YI,"href","/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartTokenizer"),c(KI,"href","/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartTokenizerFast"),c(ZI,"href","/docs/transformers/pr_18414/en/model_doc/barthez#transformers.BarthezTokenizer"),c(eN,"href","/docs/transformers/pr_18414/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(oN,"href","/docs/transformers/pr_18414/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(rN,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertTokenizer"),c(tN,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertTokenizerFast"),c(aN,"href","/docs/transformers/pr_18414/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(nN,"href","/docs/transformers/pr_18414/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(sN,"href","/docs/transformers/pr_18414/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(lN,"href","/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(iN,"href","/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(dN,"href","/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(cN,"href","/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(fN,"href","/docs/transformers/pr_18414/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(mN,"href","/docs/transformers/pr_18414/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(gN,"href","/docs/transformers/pr_18414/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(hN,"href","/docs/transformers/pr_18414/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(pN,"href","/docs/transformers/pr_18414/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(uN,"href","/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertTokenizer"),c(_N,"href","/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(bN,"href","/docs/transformers/pr_18414/en/model_doc/canine#transformers.CanineTokenizer"),c(vN,"href","/docs/transformers/pr_18414/en/model_doc/clip#transformers.CLIPTokenizer"),c(FN,"href","/docs/transformers/pr_18414/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(TN,"href","/docs/transformers/pr_18414/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(MN,"href","/docs/transformers/pr_18414/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(EN,"href","/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(CN,"href","/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(wN,"href","/docs/transformers/pr_18414/en/model_doc/cpm#transformers.CpmTokenizer"),c(AN,"href","/docs/transformers/pr_18414/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(yN,"href","/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(LN,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaTokenizer"),c(xN,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c($N,"href","/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaTokenizer"),c(kN,"href","/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(SN,"href","/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(RN,"href","/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(PN,"href","/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(BN,"href","/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(IN,"href","/docs/transformers/pr_18414/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(NN,"href","/docs/transformers/pr_18414/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(qN,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraTokenizer"),c(jN,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(DN,"href","/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(GN,"href","/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetTokenizer"),c(ON,"href","/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(VN,"href","/docs/transformers/pr_18414/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(XN,"href","/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelTokenizer"),c(zN,"href","/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(QN,"href","/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(WN,"href","/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(UN,"href","/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(HN,"href","/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(JN,"href","/docs/transformers/pr_18414/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(YN,"href","/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(KN,"href","/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(ZN,"href","/docs/transformers/pr_18414/en/model_doc/clip#transformers.CLIPTokenizer"),c(eq,"href","/docs/transformers/pr_18414/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(oq,"href","/docs/transformers/pr_18414/en/model_doc/herbert#transformers.HerbertTokenizer"),c(rq,"href","/docs/transformers/pr_18414/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(tq,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(aq,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaTokenizer"),c(nq,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(sq,"href","/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(lq,"href","/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(iq,"href","/docs/transformers/pr_18414/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(dq,"href","/docs/transformers/pr_18414/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(cq,"href","/docs/transformers/pr_18414/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(fq,"href","/docs/transformers/pr_18414/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(mq,"href","/docs/transformers/pr_18414/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(gq,"href","/docs/transformers/pr_18414/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(hq,"href","/docs/transformers/pr_18414/en/model_doc/led#transformers.LEDTokenizer"),c(pq,"href","/docs/transformers/pr_18414/en/model_doc/led#transformers.LEDTokenizerFast"),c(uq,"href","/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerTokenizer"),c(_q,"href","/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(bq,"href","/docs/transformers/pr_18414/en/model_doc/t5#transformers.T5Tokenizer"),c(vq,"href","/docs/transformers/pr_18414/en/model_doc/t5#transformers.T5TokenizerFast"),c(Fq,"href","/docs/transformers/pr_18414/en/model_doc/luke#transformers.LukeTokenizer"),c(Tq,"href","/docs/transformers/pr_18414/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(Mq,"href","/docs/transformers/pr_18414/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(Eq,"href","/docs/transformers/pr_18414/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(Cq,"href","/docs/transformers/pr_18414/en/model_doc/marian#transformers.MarianTokenizer"),c(wq,"href","/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartTokenizer"),c(Aq,"href","/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(yq,"href","/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(Lq,"href","/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(xq,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertTokenizer"),c($q,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertTokenizerFast"),c(kq,"href","/docs/transformers/pr_18414/en/model_doc/mluke#transformers.MLukeTokenizer"),c(Sq,"href","/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(Rq,"href","/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(Pq,"href","/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(Bq,"href","/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(Iq,"href","/docs/transformers/pr_18414/en/model_doc/t5#transformers.T5Tokenizer"),c(Nq,"href","/docs/transformers/pr_18414/en/model_doc/t5#transformers.T5TokenizerFast"),c(qq,"href","/docs/transformers/pr_18414/en/model_doc/mvp#transformers.MvpTokenizer"),c(jq,"href","/docs/transformers/pr_18414/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(Dq,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertTokenizer"),c(Gq,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertTokenizerFast"),c(Oq,"href","/docs/transformers/pr_18414/en/model_doc/nllb#transformers.NllbTokenizer"),c(Vq,"href","/docs/transformers/pr_18414/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(Xq,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertTokenizer"),c(zq,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Qq,"href","/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(Wq,"href","/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(Uq,"href","/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Hq,"href","/docs/transformers/pr_18414/en/model_doc/clip#transformers.CLIPTokenizer"),c(Jq,"href","/docs/transformers/pr_18414/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Yq,"href","/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Kq,"href","/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Zq,"href","/docs/transformers/pr_18414/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(ej,"href","/docs/transformers/pr_18414/en/model_doc/phobert#transformers.PhobertTokenizer"),c(oj,"href","/docs/transformers/pr_18414/en/model_doc/plbart#transformers.PLBartTokenizer"),c(rj,"href","/docs/transformers/pr_18414/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(tj,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertTokenizer"),c(aj,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertTokenizerFast"),c(nj,"href","/docs/transformers/pr_18414/en/model_doc/rag#transformers.RagTokenizer"),c(sj,"href","/docs/transformers/pr_18414/en/model_doc/realm#transformers.RealmTokenizer"),c(lj,"href","/docs/transformers/pr_18414/en/model_doc/realm#transformers.RealmTokenizerFast"),c(ij,"href","/docs/transformers/pr_18414/en/model_doc/reformer#transformers.ReformerTokenizer"),c(dj,"href","/docs/transformers/pr_18414/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(cj,"href","/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertTokenizer"),c(fj,"href","/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(mj,"href","/docs/transformers/pr_18414/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(gj,"href","/docs/transformers/pr_18414/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(hj,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaTokenizer"),c(pj,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uj,"href","/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(_j,"href","/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(bj,"href","/docs/transformers/pr_18414/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(vj,"href","/docs/transformers/pr_18414/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(Fj,"href","/docs/transformers/pr_18414/en/model_doc/splinter#transformers.SplinterTokenizer"),c(Tj,"href","/docs/transformers/pr_18414/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(Mj,"href","/docs/transformers/pr_18414/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(Ej,"href","/docs/transformers/pr_18414/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(Cj,"href","/docs/transformers/pr_18414/en/model_doc/t5#transformers.T5Tokenizer"),c(wj,"href","/docs/transformers/pr_18414/en/model_doc/t5#transformers.T5TokenizerFast"),c(Aj,"href","/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TapasTokenizer"),c(yj,"href","/docs/transformers/pr_18414/en/model_doc/tapex#transformers.TapexTokenizer"),c(Lj,"href","/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(xj,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertTokenizer"),c($j,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertTokenizerFast"),c(kj,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertTokenizer"),c(Sj,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertTokenizerFast"),c(Rj,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Pj,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Bj,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(Ij,"href","/docs/transformers/pr_18414/en/model_doc/xglm#transformers.XGLMTokenizer"),c(Nj,"href","/docs/transformers/pr_18414/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(qj,"href","/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMTokenizer"),c(jj,"href","/docs/transformers/pr_18414/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(Dj,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(Gj,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(Oj,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Vj,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Xj,"href","/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(zj,"href","/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(Qj,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertTokenizer"),c(Wj,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hp,"id","transformers.AutoFeatureExtractor"),c(hp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hp,"href","#transformers.AutoFeatureExtractor"),c(nd,"class","relative group"),c(Uj,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(Hj,"href","/docs/transformers/pr_18414/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Jj,"href","/docs/transformers/pr_18414/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Yj,"href","/docs/transformers/pr_18414/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Kj,"href","/docs/transformers/pr_18414/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Zj,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(eD,"href","/docs/transformers/pr_18414/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(oD,"href","/docs/transformers/pr_18414/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(rD,"href","/docs/transformers/pr_18414/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(tD,"href","/docs/transformers/pr_18414/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(aD,"href","/docs/transformers/pr_18414/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(nD,"href","/docs/transformers/pr_18414/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(sD,"href","/docs/transformers/pr_18414/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(lD,"href","/docs/transformers/pr_18414/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(iD,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(dD,"href","/docs/transformers/pr_18414/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(cD,"href","/docs/transformers/pr_18414/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(fD,"href","/docs/transformers/pr_18414/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(mD,"href","/docs/transformers/pr_18414/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(gD,"href","/docs/transformers/pr_18414/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(hD,"href","/docs/transformers/pr_18414/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(pD,"href","/docs/transformers/pr_18414/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(uD,"href","/docs/transformers/pr_18414/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(_D,"href","/docs/transformers/pr_18414/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(bD,"href","/docs/transformers/pr_18414/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(vD,"href","/docs/transformers/pr_18414/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(FD,"href","/docs/transformers/pr_18414/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(TD,"href","/docs/transformers/pr_18414/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(MD,"href","/docs/transformers/pr_18414/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(ED,"href","/docs/transformers/pr_18414/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(CD,"href","/docs/transformers/pr_18414/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(wD,"href","/docs/transformers/pr_18414/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AD,"href","/docs/transformers/pr_18414/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yD,"href","/docs/transformers/pr_18414/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(LD,"href","/docs/transformers/pr_18414/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(xD,"href","/docs/transformers/pr_18414/en/model_doc/vit#transformers.ViTFeatureExtractor"),c($D,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(kD,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(SD,"href","/docs/transformers/pr_18414/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ou,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ru,"id","transformers.AutoProcessor"),c(ru,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ru,"href","#transformers.AutoProcessor"),c(sd,"class","relative group"),c(RD,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(PD,"href","/docs/transformers/pr_18414/en/model_doc/clip#transformers.CLIPProcessor"),c(BD,"href","/docs/transformers/pr_18414/en/model_doc/donut#transformers.DonutProcessor"),c(ID,"href","/docs/transformers/pr_18414/en/model_doc/flava#transformers.FlavaProcessor"),c(ND,"href","/docs/transformers/pr_18414/en/model_doc/clip#transformers.CLIPProcessor"),c(qD,"href","/docs/transformers/pr_18414/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(jD,"href","/docs/transformers/pr_18414/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(DD,"href","/docs/transformers/pr_18414/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(GD,"href","/docs/transformers/pr_18414/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(OD,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VD,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(XD,"href","/docs/transformers/pr_18414/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(zD,"href","/docs/transformers/pr_18414/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(QD,"href","/docs/transformers/pr_18414/en/model_doc/trocr#transformers.TrOCRProcessor"),c(WD,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(UD,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(HD,"href","/docs/transformers/pr_18414/en/model_doc/vilt#transformers.ViltProcessor"),c(JD,"href","/docs/transformers/pr_18414/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(YD,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KD,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ZD,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Au,"id","transformers.AutoModel"),c(Au,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Au,"href","#transformers.AutoModel"),c(id,"class","relative group"),c(eG,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oG,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rG,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tG,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertModel"),c(aG,"href","/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartModel"),c(nG,"href","/docs/transformers/pr_18414/en/model_doc/beit#transformers.BeitModel"),c(sG,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertModel"),c(lG,"href","/docs/transformers/pr_18414/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(iG,"href","/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdModel"),c(dG,"href","/docs/transformers/pr_18414/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(cG,"href","/docs/transformers/pr_18414/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(fG,"href","/docs/transformers/pr_18414/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(mG,"href","/docs/transformers/pr_18414/en/model_doc/bloom#transformers.BloomModel"),c(gG,"href","/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertModel"),c(hG,"href","/docs/transformers/pr_18414/en/model_doc/canine#transformers.CanineModel"),c(pG,"href","/docs/transformers/pr_18414/en/model_doc/clip#transformers.CLIPModel"),c(uG,"href","/docs/transformers/pr_18414/en/model_doc/codegen#transformers.CodeGenModel"),c(_G,"href","/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertModel"),c(bG,"href","/docs/transformers/pr_18414/en/model_doc/convnext#transformers.ConvNextModel"),c(vG,"href","/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.CTRLModel"),c(FG,"href","/docs/transformers/pr_18414/en/model_doc/cvt#transformers.CvtModel"),c(TG,"href","/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(MG,"href","/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(EG,"href","/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(CG,"href","/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaModel"),c(wG,"href","/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(AG,"href","/docs/transformers/pr_18414/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(yG,"href","/docs/transformers/pr_18414/en/model_doc/deit#transformers.DeiTModel"),c(LG,"href","/docs/transformers/pr_18414/en/model_doc/detr#transformers.DetrModel"),c(xG,"href","/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertModel"),c($G,"href","/docs/transformers/pr_18414/en/model_doc/donut#transformers.DonutSwinModel"),c(kG,"href","/docs/transformers/pr_18414/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(SG,"href","/docs/transformers/pr_18414/en/model_doc/dpt#transformers.DPTModel"),c(RG,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraModel"),c(PG,"href","/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertModel"),c(BG,"href","/docs/transformers/pr_18414/en/model_doc/flava#transformers.FlavaModel"),c(IG,"href","/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetModel"),c(NG,"href","/docs/transformers/pr_18414/en/model_doc/fsmt#transformers.FSMTModel"),c(qG,"href","/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelModel"),c(jG,"href","/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelBaseModel"),c(DG,"href","/docs/transformers/pr_18414/en/model_doc/glpn#transformers.GLPNModel"),c(GG,"href","/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2Model"),c(OG,"href","/docs/transformers/pr_18414/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(VG,"href","/docs/transformers/pr_18414/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(XG,"href","/docs/transformers/pr_18414/en/model_doc/gptj#transformers.GPTJModel"),c(zG,"href","/docs/transformers/pr_18414/en/model_doc/groupvit#transformers.GroupViTModel"),c(QG,"href","/docs/transformers/pr_18414/en/model_doc/hubert#transformers.HubertModel"),c(WG,"href","/docs/transformers/pr_18414/en/model_doc/ibert#transformers.IBertModel"),c(UG,"href","/docs/transformers/pr_18414/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(HG,"href","/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(JG,"href","/docs/transformers/pr_18414/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(YG,"href","/docs/transformers/pr_18414/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(KG,"href","/docs/transformers/pr_18414/en/model_doc/led#transformers.LEDModel"),c(ZG,"href","/docs/transformers/pr_18414/en/model_doc/levit#transformers.LevitModel"),c(eO,"href","/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerModel"),c(oO,"href","/docs/transformers/pr_18414/en/model_doc/longt5#transformers.LongT5Model"),c(rO,"href","/docs/transformers/pr_18414/en/model_doc/luke#transformers.LukeModel"),c(tO,"href","/docs/transformers/pr_18414/en/model_doc/lxmert#transformers.LxmertModel"),c(aO,"href","/docs/transformers/pr_18414/en/model_doc/m2m_100#transformers.M2M100Model"),c(nO,"href","/docs/transformers/pr_18414/en/model_doc/marian#transformers.MarianModel"),c(sO,"href","/docs/transformers/pr_18414/en/model_doc/maskformer#transformers.MaskFormerModel"),c(lO,"href","/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartModel"),c(iO,"href","/docs/transformers/pr_18414/en/model_doc/mctct#transformers.MCTCTModel"),c(dO,"href","/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(cO,"href","/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertModel"),c(fO,"href","/docs/transformers/pr_18414/en/model_doc/mobilevit#transformers.MobileViTModel"),c(mO,"href","/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetModel"),c(gO,"href","/docs/transformers/pr_18414/en/model_doc/mt5#transformers.MT5Model"),c(hO,"href","/docs/transformers/pr_18414/en/model_doc/mvp#transformers.MvpModel"),c(pO,"href","/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaModel"),c(uO,"href","/docs/transformers/pr_18414/en/model_doc/m2m_100#transformers.M2M100Model"),c(_O,"href","/docs/transformers/pr_18414/en/model_doc/nystromformer#transformers.NystromformerModel"),c(bO,"href","/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(vO,"href","/docs/transformers/pr_18414/en/model_doc/opt#transformers.OPTModel"),c(FO,"href","/docs/transformers/pr_18414/en/model_doc/owlvit#transformers.OwlViTModel"),c(TO,"href","/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.PegasusModel"),c(MO,"href","/docs/transformers/pr_18414/en/model_doc/perceiver#transformers.PerceiverModel"),c(EO,"href","/docs/transformers/pr_18414/en/model_doc/plbart#transformers.PLBartModel"),c(CO,"href","/docs/transformers/pr_18414/en/model_doc/poolformer#transformers.PoolFormerModel"),c(wO,"href","/docs/transformers/pr_18414/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(AO,"href","/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertModel"),c(yO,"href","/docs/transformers/pr_18414/en/model_doc/reformer#transformers.ReformerModel"),c(LO,"href","/docs/transformers/pr_18414/en/model_doc/regnet#transformers.RegNetModel"),c(xO,"href","/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertModel"),c($O,"href","/docs/transformers/pr_18414/en/model_doc/resnet#transformers.ResNetModel"),c(kO,"href","/docs/transformers/pr_18414/en/model_doc/retribert#transformers.RetriBertModel"),c(SO,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaModel"),c(RO,"href","/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerModel"),c(PO,"href","/docs/transformers/pr_18414/en/model_doc/segformer#transformers.SegformerModel"),c(BO,"href","/docs/transformers/pr_18414/en/model_doc/sew#transformers.SEWModel"),c(IO,"href","/docs/transformers/pr_18414/en/model_doc/sew-d#transformers.SEWDModel"),c(NO,"href","/docs/transformers/pr_18414/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(qO,"href","/docs/transformers/pr_18414/en/model_doc/splinter#transformers.SplinterModel"),c(jO,"href","/docs/transformers/pr_18414/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(DO,"href","/docs/transformers/pr_18414/en/model_doc/swin#transformers.SwinModel"),c(GO,"href","/docs/transformers/pr_18414/en/model_doc/swinv2#transformers.Swinv2Model"),c(OO,"href","/docs/transformers/pr_18414/en/model_doc/t5#transformers.T5Model"),c(VO,"href","/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TapasModel"),c(XO,"href","/docs/transformers/pr_18414/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(zO,"href","/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(QO,"href","/docs/transformers/pr_18414/en/model_doc/unispeech#transformers.UniSpeechModel"),c(WO,"href","/docs/transformers/pr_18414/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(UO,"href","/docs/transformers/pr_18414/en/model_doc/van#transformers.VanModel"),c(HO,"href","/docs/transformers/pr_18414/en/model_doc/videomae#transformers.VideoMAEModel"),c(JO,"href","/docs/transformers/pr_18414/en/model_doc/vilt#transformers.ViltModel"),c(YO,"href","/docs/transformers/pr_18414/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(KO,"href","/docs/transformers/pr_18414/en/model_doc/visual_bert#transformers.VisualBertModel"),c(ZO,"href","/docs/transformers/pr_18414/en/model_doc/vit#transformers.ViTModel"),c(eV,"href","/docs/transformers/pr_18414/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(oV,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(rV,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(tV,"href","/docs/transformers/pr_18414/en/model_doc/wavlm#transformers.WavLMModel"),c(aV,"href","/docs/transformers/pr_18414/en/model_doc/xglm#transformers.XGLMModel"),c(nV,"href","/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMModel"),c(sV,"href","/docs/transformers/pr_18414/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(lV,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(iV,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(dV,"href","/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetModel"),c(cV,"href","/docs/transformers/pr_18414/en/model_doc/yolos#transformers.YolosModel"),c(fV,"href","/docs/transformers/pr_18414/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N1,"id","transformers.AutoModelForPreTraining"),c(N1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N1,"href","#transformers.AutoModelForPreTraining"),c(fd,"class","relative group"),c(mV,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gV,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hV,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pV,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertForPreTraining"),c(uV,"href","/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(_V,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertForPreTraining"),c(bV,"href","/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(vV,"href","/docs/transformers/pr_18414/en/model_doc/bloom#transformers.BloomForCausalLM"),c(FV,"href","/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(TV,"href","/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(MV,"href","/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(EV,"href","/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(CV,"href","/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(wV,"href","/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(AV,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraForPreTraining"),c(yV,"href","/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(LV,"href","/docs/transformers/pr_18414/en/model_doc/flava#transformers.FlavaForPreTraining"),c(xV,"href","/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetForPreTraining"),c($V,"href","/docs/transformers/pr_18414/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(kV,"href","/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(SV,"href","/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(RV,"href","/docs/transformers/pr_18414/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(PV,"href","/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(BV,"href","/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(IV,"href","/docs/transformers/pr_18414/en/model_doc/luke#transformers.LukeForMaskedLM"),c(NV,"href","/docs/transformers/pr_18414/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(qV,"href","/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(jV,"href","/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(DV,"href","/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(GV,"href","/docs/transformers/pr_18414/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(OV,"href","/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(VV,"href","/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(XV,"href","/docs/transformers/pr_18414/en/model_doc/retribert#transformers.RetriBertModel"),c(zV,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(QV,"href","/docs/transformers/pr_18414/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(WV,"href","/docs/transformers/pr_18414/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(UV,"href","/docs/transformers/pr_18414/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(HV,"href","/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(JV,"href","/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(YV,"href","/docs/transformers/pr_18414/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(KV,"href","/docs/transformers/pr_18414/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(ZV,"href","/docs/transformers/pr_18414/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(eX,"href","/docs/transformers/pr_18414/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(oX,"href","/docs/transformers/pr_18414/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(rX,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(tX,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(aX,"href","/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(nX,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(sX,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(lX,"href","/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P4,"id","transformers.AutoModelForCausalLM"),c(P4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P4,"href","#transformers.AutoModelForCausalLM"),c(hd,"class","relative group"),c(iX,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dX,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cX,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fX,"href","/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartForCausalLM"),c(mX,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertLMHeadModel"),c(gX,"href","/docs/transformers/pr_18414/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(hX,"href","/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(pX,"href","/docs/transformers/pr_18414/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(uX,"href","/docs/transformers/pr_18414/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(_X,"href","/docs/transformers/pr_18414/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(bX,"href","/docs/transformers/pr_18414/en/model_doc/bloom#transformers.BloomForCausalLM"),c(vX,"href","/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(FX,"href","/docs/transformers/pr_18414/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(TX,"href","/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(MX,"href","/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(EX,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraForCausalLM"),c(CX,"href","/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(wX,"href","/docs/transformers/pr_18414/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(AX,"href","/docs/transformers/pr_18414/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(yX,"href","/docs/transformers/pr_18414/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(LX,"href","/docs/transformers/pr_18414/en/model_doc/marian#transformers.MarianForCausalLM"),c(xX,"href","/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartForCausalLM"),c($X,"href","/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(kX,"href","/docs/transformers/pr_18414/en/model_doc/mvp#transformers.MvpForCausalLM"),c(SX,"href","/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(RX,"href","/docs/transformers/pr_18414/en/model_doc/opt#transformers.OPTForCausalLM"),c(PX,"href","/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(BX,"href","/docs/transformers/pr_18414/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(IX,"href","/docs/transformers/pr_18414/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(NX,"href","/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(qX,"href","/docs/transformers/pr_18414/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(jX,"href","/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(DX,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(GX,"href","/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(OX,"href","/docs/transformers/pr_18414/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(VX,"href","/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(XX,"href","/docs/transformers/pr_18414/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(zX,"href","/docs/transformers/pr_18414/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(QX,"href","/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(WX,"href","/docs/transformers/pr_18414/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(UX,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(HX,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(JX,"href","/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C2,"id","transformers.AutoModelForMaskedLM"),c(C2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C2,"href","#transformers.AutoModelForMaskedLM"),c(_d,"class","relative group"),c(YX,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(oz,"href","/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(rz,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertForMaskedLM"),c(tz,"href","/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(az,"href","/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(nz,"href","/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(sz,"href","/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(lz,"href","/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(iz,"href","/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(dz,"href","/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(cz,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(fz,"href","/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(mz,"href","/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(gz,"href","/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(hz,"href","/docs/transformers/pr_18414/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(pz,"href","/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(uz,"href","/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(_z,"href","/docs/transformers/pr_18414/en/model_doc/luke#transformers.LukeForMaskedLM"),c(bz,"href","/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(vz,"href","/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Fz,"href","/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Tz,"href","/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Mz,"href","/docs/transformers/pr_18414/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(Ez,"href","/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(Cz,"href","/docs/transformers/pr_18414/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(wz,"href","/docs/transformers/pr_18414/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Az,"href","/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(yz,"href","/docs/transformers/pr_18414/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Lz,"href","/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(xz,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c($z,"href","/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(kz,"href","/docs/transformers/pr_18414/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Sz,"href","/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Rz,"href","/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Pz,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Bz,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Iz,"href","/docs/transformers/pr_18414/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mb,"id","transformers.AutoModelForSeq2SeqLM"),c(mb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Fd,"class","relative group"),c(Nz,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qz,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jz,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dz,"href","/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Gz,"href","/docs/transformers/pr_18414/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Oz,"href","/docs/transformers/pr_18414/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Vz,"href","/docs/transformers/pr_18414/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Xz,"href","/docs/transformers/pr_18414/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(zz,"href","/docs/transformers/pr_18414/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Qz,"href","/docs/transformers/pr_18414/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Wz,"href","/docs/transformers/pr_18414/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(Uz,"href","/docs/transformers/pr_18414/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Hz,"href","/docs/transformers/pr_18414/en/model_doc/marian#transformers.MarianMTModel"),c(Jz,"href","/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Yz,"href","/docs/transformers/pr_18414/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Kz,"href","/docs/transformers/pr_18414/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(Zz,"href","/docs/transformers/pr_18414/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(eQ,"href","/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(oQ,"href","/docs/transformers/pr_18414/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(rQ,"href","/docs/transformers/pr_18414/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(tQ,"href","/docs/transformers/pr_18414/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(aQ,"href","/docs/transformers/pr_18414/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bb,"id","transformers.AutoModelForSequenceClassification"),c(Bb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bb,"href","#transformers.AutoModelForSequenceClassification"),c(Ed,"class","relative group"),c(nQ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sQ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lQ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iQ,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(dQ,"href","/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartForSequenceClassification"),c(cQ,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertForSequenceClassification"),c(fQ,"href","/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(mQ,"href","/docs/transformers/pr_18414/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(gQ,"href","/docs/transformers/pr_18414/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(hQ,"href","/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(pQ,"href","/docs/transformers/pr_18414/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(uQ,"href","/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(_Q,"href","/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(bQ,"href","/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(vQ,"href","/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(FQ,"href","/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(TQ,"href","/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(MQ,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(EQ,"href","/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(CQ,"href","/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(wQ,"href","/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(AQ,"href","/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(yQ,"href","/docs/transformers/pr_18414/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(LQ,"href","/docs/transformers/pr_18414/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(xQ,"href","/docs/transformers/pr_18414/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c($Q,"href","/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(kQ,"href","/docs/transformers/pr_18414/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(SQ,"href","/docs/transformers/pr_18414/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(RQ,"href","/docs/transformers/pr_18414/en/model_doc/led#transformers.LEDForSequenceClassification"),c(PQ,"href","/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(BQ,"href","/docs/transformers/pr_18414/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(IQ,"href","/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(NQ,"href","/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(qQ,"href","/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(jQ,"href","/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(DQ,"href","/docs/transformers/pr_18414/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(GQ,"href","/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(OQ,"href","/docs/transformers/pr_18414/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(VQ,"href","/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(XQ,"href","/docs/transformers/pr_18414/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(zQ,"href","/docs/transformers/pr_18414/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(QQ,"href","/docs/transformers/pr_18414/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(WQ,"href","/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(UQ,"href","/docs/transformers/pr_18414/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(HQ,"href","/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(JQ,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(YQ,"href","/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(KQ,"href","/docs/transformers/pr_18414/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(ZQ,"href","/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(eW,"href","/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(oW,"href","/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(rW,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(tW,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(aW,"href","/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(nW,"href","/docs/transformers/pr_18414/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nv,"id","transformers.AutoModelForMultipleChoice"),c(Nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nv,"href","#transformers.AutoModelForMultipleChoice"),c(Ad,"class","relative group"),c(sW,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lW,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iW,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dW,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(cW,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertForMultipleChoice"),c(fW,"href","/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(mW,"href","/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(gW,"href","/docs/transformers/pr_18414/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(hW,"href","/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(pW,"href","/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(uW,"href","/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(_W,"href","/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(bW,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(vW,"href","/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(FW,"href","/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(TW,"href","/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(MW,"href","/docs/transformers/pr_18414/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(EW,"href","/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(CW,"href","/docs/transformers/pr_18414/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(wW,"href","/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(AW,"href","/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(yW,"href","/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(LW,"href","/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(xW,"href","/docs/transformers/pr_18414/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c($W,"href","/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(kW,"href","/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(SW,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(RW,"href","/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(PW,"href","/docs/transformers/pr_18414/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(BW,"href","/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(IW,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(NW,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(qW,"href","/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(jW,"href","/docs/transformers/pr_18414/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bF,"id","transformers.AutoModelForNextSentencePrediction"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.AutoModelForNextSentencePrediction"),c(xd,"class","relative group"),c(DW,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GW,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OW,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VW,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(XW,"href","/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(zW,"href","/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(QW,"href","/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(WW,"href","/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(UW,"href","/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LF,"id","transformers.AutoModelForTokenClassification"),c(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LF,"href","#transformers.AutoModelForTokenClassification"),c(Sd,"class","relative group"),c(HW,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JW,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YW,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KW,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(ZW,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertForTokenClassification"),c(eU,"href","/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(oU,"href","/docs/transformers/pr_18414/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(rU,"href","/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(tU,"href","/docs/transformers/pr_18414/en/model_doc/canine#transformers.CanineForTokenClassification"),c(aU,"href","/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(nU,"href","/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(sU,"href","/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(lU,"href","/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(iU,"href","/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(dU,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(cU,"href","/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(fU,"href","/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(mU,"href","/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(gU,"href","/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(hU,"href","/docs/transformers/pr_18414/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(pU,"href","/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(uU,"href","/docs/transformers/pr_18414/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(_U,"href","/docs/transformers/pr_18414/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(bU,"href","/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(vU,"href","/docs/transformers/pr_18414/en/model_doc/luke#transformers.LukeForTokenClassification"),c(FU,"href","/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(TU,"href","/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(MU,"href","/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(EU,"href","/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(CU,"href","/docs/transformers/pr_18414/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(wU,"href","/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(AU,"href","/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(yU,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(LU,"href","/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(xU,"href","/docs/transformers/pr_18414/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c($U,"href","/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(kU,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(SU,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(RU,"href","/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(PU,"href","/docs/transformers/pr_18414/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pT,"id","transformers.AutoModelForQuestionAnswering"),c(pT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pT,"href","#transformers.AutoModelForQuestionAnswering"),c(Bd,"class","relative group"),c(BU,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IU,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NU,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qU,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(jU,"href","/docs/transformers/pr_18414/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_18414/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_18414/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_18414/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_18414/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_18414/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(KU,"href","/docs/transformers/pr_18414/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(ZU,"href","/docs/transformers/pr_18414/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(eH,"href","/docs/transformers/pr_18414/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(oH,"href","/docs/transformers/pr_18414/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(rH,"href","/docs/transformers/pr_18414/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(tH,"href","/docs/transformers/pr_18414/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(aH,"href","/docs/transformers/pr_18414/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(nH,"href","/docs/transformers/pr_18414/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(sH,"href","/docs/transformers/pr_18414/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(lH,"href","/docs/transformers/pr_18414/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(iH,"href","/docs/transformers/pr_18414/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(dH,"href","/docs/transformers/pr_18414/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(cH,"href","/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(fH,"href","/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(mH,"href","/docs/transformers/pr_18414/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(gH,"href","/docs/transformers/pr_18414/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(hH,"href","/docs/transformers/pr_18414/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(pH,"href","/docs/transformers/pr_18414/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(uH,"href","/docs/transformers/pr_18414/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(_H,"href","/docs/transformers/pr_18414/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(bH,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(vH,"href","/docs/transformers/pr_18414/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(FH,"href","/docs/transformers/pr_18414/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(TH,"href","/docs/transformers/pr_18414/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(MH,"href","/docs/transformers/pr_18414/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(EH,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(CH,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(wH,"href","/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(AH,"href","/docs/transformers/pr_18414/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i8,"id","transformers.AutoModelForTableQuestionAnswering"),c(i8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i8,"href","#transformers.AutoModelForTableQuestionAnswering"),c(qd,"class","relative group"),c(yH,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LH,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xH,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($H,"href","/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g8,"id","transformers.AutoModelForDocumentQuestionAnswering"),c(g8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g8,"href","#transformers.AutoModelForDocumentQuestionAnswering"),c(Gd,"class","relative group"),c(kH,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/pr_18414/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(BH,"href","/docs/transformers/pr_18414/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v8,"id","transformers.AutoModelForImageClassification"),c(v8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v8,"href","#transformers.AutoModelForImageClassification"),c(Xd,"class","relative group"),c(IH,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NH,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qH,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jH,"href","/docs/transformers/pr_18414/en/model_doc/beit#transformers.BeitForImageClassification"),c(DH,"href","/docs/transformers/pr_18414/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(GH,"href","/docs/transformers/pr_18414/en/model_doc/cvt#transformers.CvtForImageClassification"),c(OH,"href","/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(VH,"href","/docs/transformers/pr_18414/en/model_doc/deit#transformers.DeiTForImageClassification"),c(XH,"href","/docs/transformers/pr_18414/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(zH,"href","/docs/transformers/pr_18414/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(QH,"href","/docs/transformers/pr_18414/en/model_doc/levit#transformers.LevitForImageClassification"),c(WH,"href","/docs/transformers/pr_18414/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(UH,"href","/docs/transformers/pr_18414/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(HH,"href","/docs/transformers/pr_18414/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(JH,"href","/docs/transformers/pr_18414/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(YH,"href","/docs/transformers/pr_18414/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(KH,"href","/docs/transformers/pr_18414/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(ZH,"href","/docs/transformers/pr_18414/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(eJ,"href","/docs/transformers/pr_18414/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(oJ,"href","/docs/transformers/pr_18414/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(rJ,"href","/docs/transformers/pr_18414/en/model_doc/swin#transformers.SwinForImageClassification"),c(tJ,"href","/docs/transformers/pr_18414/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(aJ,"href","/docs/transformers/pr_18414/en/model_doc/van#transformers.VanForImageClassification"),c(nJ,"href","/docs/transformers/pr_18414/en/model_doc/vit#transformers.ViTForImageClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N8,"id","transformers.AutoModelForVideoClassification"),c(N8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N8,"href","#transformers.AutoModelForVideoClassification"),c(Wd,"class","relative group"),c(sJ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lJ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iJ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dJ,"href","/docs/transformers/pr_18414/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O8,"id","transformers.AutoModelForVision2Seq"),c(O8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O8,"href","#transformers.AutoModelForVision2Seq"),c(Jd,"class","relative group"),c(cJ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fJ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mJ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gJ,"href","/docs/transformers/pr_18414/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W8,"id","transformers.AutoModelForVisualQuestionAnswering"),c(W8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W8,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Zd,"class","relative group"),c(hJ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pJ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uJ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_J,"href","/docs/transformers/pr_18414/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K8,"id","transformers.AutoModelForAudioClassification"),c(K8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K8,"href","#transformers.AutoModelForAudioClassification"),c(rc,"class","relative group"),c(bJ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vJ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FJ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TJ,"href","/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(MJ,"href","/docs/transformers/pr_18414/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(EJ,"href","/docs/transformers/pr_18414/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(CJ,"href","/docs/transformers/pr_18414/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(wJ,"href","/docs/transformers/pr_18414/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(AJ,"href","/docs/transformers/pr_18414/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(yJ,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(LJ,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(xJ,"href","/docs/transformers/pr_18414/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fM,"id","transformers.AutoModelForAudioFrameClassification"),c(fM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fM,"href","#transformers.AutoModelForAudioFrameClassification"),c(nc,"class","relative group"),c($J,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kJ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SJ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RJ,"href","/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(PJ,"href","/docs/transformers/pr_18414/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(BJ,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(IJ,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(NJ,"href","/docs/transformers/pr_18414/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FM,"id","transformers.AutoModelForCTC"),c(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FM,"href","#transformers.AutoModelForCTC"),c(ic,"class","relative group"),c(qJ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jJ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DJ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GJ,"href","/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(OJ,"href","/docs/transformers/pr_18414/en/model_doc/hubert#transformers.HubertForCTC"),c(VJ,"href","/docs/transformers/pr_18414/en/model_doc/mctct#transformers.MCTCTForCTC"),c(XJ,"href","/docs/transformers/pr_18414/en/model_doc/sew#transformers.SEWForCTC"),c(zJ,"href","/docs/transformers/pr_18414/en/model_doc/sew-d#transformers.SEWDForCTC"),c(QJ,"href","/docs/transformers/pr_18414/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(WJ,"href","/docs/transformers/pr_18414/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(UJ,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(HJ,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(JJ,"href","/docs/transformers/pr_18414/en/model_doc/wavlm#transformers.WavLMForCTC"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PM,"id","transformers.AutoModelForSpeechSeq2Seq"),c(PM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PM,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(fc,"class","relative group"),c(YJ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KJ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZJ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eY,"href","/docs/transformers/pr_18414/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(oY,"href","/docs/transformers/pr_18414/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DM,"id","transformers.AutoModelForAudioXVector"),c(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DM,"href","#transformers.AutoModelForAudioXVector"),c(hc,"class","relative group"),c(rY,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tY,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aY,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nY,"href","/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(sY,"href","/docs/transformers/pr_18414/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(lY,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(iY,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(dY,"href","/docs/transformers/pr_18414/en/model_doc/wavlm#transformers.WavLMForXVector"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HM,"id","transformers.AutoModelForMaskedImageModeling"),c(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HM,"href","#transformers.AutoModelForMaskedImageModeling"),c(_c,"class","relative group"),c(cY,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fY,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mY,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gY,"href","/docs/transformers/pr_18414/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(hY,"href","/docs/transformers/pr_18414/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(pY,"href","/docs/transformers/pr_18414/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(uY,"href","/docs/transformers/pr_18414/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tE,"id","transformers.AutoModelForObjectDetection"),c(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tE,"href","#transformers.AutoModelForObjectDetection"),c(Fc,"class","relative group"),c(_Y,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bY,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vY,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FY,"href","/docs/transformers/pr_18414/en/model_doc/detr#transformers.DetrForObjectDetection"),c(TY,"href","/docs/transformers/pr_18414/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dE,"id","transformers.AutoModelForImageSegmentation"),c(dE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dE,"href","#transformers.AutoModelForImageSegmentation"),c(Ec,"class","relative group"),c(MY,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EY,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CY,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wY,"href","/docs/transformers/pr_18414/en/model_doc/detr#transformers.DetrForSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hE,"id","transformers.AutoModelForSemanticSegmentation"),c(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hE,"href","#transformers.AutoModelForSemanticSegmentation"),c(Ac,"class","relative group"),c(AY,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yY,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LY,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xY,"href","/docs/transformers/pr_18414/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c($Y,"href","/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(kY,"href","/docs/transformers/pr_18414/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(SY,"href","/docs/transformers/pr_18414/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(RY,"href","/docs/transformers/pr_18414/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.AutoModelForInstanceSegmentation"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.AutoModelForInstanceSegmentation"),c(xc,"class","relative group"),c(PY,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BY,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IY,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NY,"href","/docs/transformers/pr_18414/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LE,"id","transformers.TFAutoModel"),c(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LE,"href","#transformers.TFAutoModel"),c(Sc,"class","relative group"),c(qY,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jY,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DY,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GY,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.TFAlbertModel"),c(OY,"href","/docs/transformers/pr_18414/en/model_doc/bart#transformers.TFBartModel"),c(VY,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.TFBertModel"),c(XY,"href","/docs/transformers/pr_18414/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(zY,"href","/docs/transformers/pr_18414/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(QY,"href","/docs/transformers/pr_18414/en/model_doc/camembert#transformers.TFCamembertModel"),c(WY,"href","/docs/transformers/pr_18414/en/model_doc/clip#transformers.TFCLIPModel"),c(UY,"href","/docs/transformers/pr_18414/en/model_doc/convbert#transformers.TFConvBertModel"),c(HY,"href","/docs/transformers/pr_18414/en/model_doc/convnext#transformers.TFConvNextModel"),c(JY,"href","/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.TFCTRLModel"),c(YY,"href","/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(KY,"href","/docs/transformers/pr_18414/en/model_doc/deberta#transformers.TFDebertaModel"),c(ZY,"href","/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(eK,"href","/docs/transformers/pr_18414/en/model_doc/deit#transformers.TFDeiTModel"),c(oK,"href","/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(rK,"href","/docs/transformers/pr_18414/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(tK,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.TFElectraModel"),c(aK,"href","/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(nK,"href","/docs/transformers/pr_18414/en/model_doc/funnel#transformers.TFFunnelModel"),c(sK,"href","/docs/transformers/pr_18414/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(lK,"href","/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.TFGPT2Model"),c(iK,"href","/docs/transformers/pr_18414/en/model_doc/gptj#transformers.TFGPTJModel"),c(dK,"href","/docs/transformers/pr_18414/en/model_doc/hubert#transformers.TFHubertModel"),c(cK,"href","/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(fK,"href","/docs/transformers/pr_18414/en/model_doc/led#transformers.TFLEDModel"),c(mK,"href","/docs/transformers/pr_18414/en/model_doc/longformer#transformers.TFLongformerModel"),c(gK,"href","/docs/transformers/pr_18414/en/model_doc/lxmert#transformers.TFLxmertModel"),c(hK,"href","/docs/transformers/pr_18414/en/model_doc/marian#transformers.TFMarianModel"),c(pK,"href","/docs/transformers/pr_18414/en/model_doc/mbart#transformers.TFMBartModel"),c(uK,"href","/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(_K,"href","/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.TFMPNetModel"),c(bK,"href","/docs/transformers/pr_18414/en/model_doc/mt5#transformers.TFMT5Model"),c(vK,"href","/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(FK,"href","/docs/transformers/pr_18414/en/model_doc/opt#transformers.TFOPTModel"),c(TK,"href","/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.TFPegasusModel"),c(MK,"href","/docs/transformers/pr_18414/en/model_doc/regnet#transformers.TFRegNetModel"),c(EK,"href","/docs/transformers/pr_18414/en/model_doc/rembert#transformers.TFRemBertModel"),c(CK,"href","/docs/transformers/pr_18414/en/model_doc/resnet#transformers.TFResNetModel"),c(wK,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.TFRobertaModel"),c(AK,"href","/docs/transformers/pr_18414/en/model_doc/roformer#transformers.TFRoFormerModel"),c(yK,"href","/docs/transformers/pr_18414/en/model_doc/segformer#transformers.TFSegformerModel"),c(LK,"href","/docs/transformers/pr_18414/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(xK,"href","/docs/transformers/pr_18414/en/model_doc/swin#transformers.TFSwinModel"),c($K,"href","/docs/transformers/pr_18414/en/model_doc/t5#transformers.TFT5Model"),c(kK,"href","/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TFTapasModel"),c(SK,"href","/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(RK,"href","/docs/transformers/pr_18414/en/model_doc/vit#transformers.TFViTModel"),c(PK,"href","/docs/transformers/pr_18414/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(BK,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(IK,"href","/docs/transformers/pr_18414/en/model_doc/xlm#transformers.TFXLMModel"),c(NK,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(qK,"href","/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yC,"id","transformers.TFAutoModelForPreTraining"),c(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yC,"href","#transformers.TFAutoModelForPreTraining"),c(Bc,"class","relative group"),c(jK,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DK,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GK,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OK,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(VK,"href","/docs/transformers/pr_18414/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(XK,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.TFBertForPreTraining"),c(zK,"href","/docs/transformers/pr_18414/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(QK,"href","/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(WK,"href","/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(UK,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(HK,"href","/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(JK,"href","/docs/transformers/pr_18414/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(YK,"href","/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(KK,"href","/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(ZK,"href","/docs/transformers/pr_18414/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(eZ,"href","/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(oZ,"href","/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(rZ,"href","/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(tZ,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(aZ,"href","/docs/transformers/pr_18414/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(nZ,"href","/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(sZ,"href","/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(lZ,"href","/docs/transformers/pr_18414/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(iZ,"href","/docs/transformers/pr_18414/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(dZ,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(cZ,"href","/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZC,"id","transformers.TFAutoModelForCausalLM"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.TFAutoModelForCausalLM"),c(qc,"class","relative group"),c(fZ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mZ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gZ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hZ,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(pZ,"href","/docs/transformers/pr_18414/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(uZ,"href","/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(_Z,"href","/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(bZ,"href","/docs/transformers/pr_18414/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(vZ,"href","/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(FZ,"href","/docs/transformers/pr_18414/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(TZ,"href","/docs/transformers/pr_18414/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(MZ,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(EZ,"href","/docs/transformers/pr_18414/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(CZ,"href","/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(wZ,"href","/docs/transformers/pr_18414/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(AZ,"href","/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p3,"id","transformers.TFAutoModelForImageClassification"),c(p3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p3,"href","#transformers.TFAutoModelForImageClassification"),c(Gc,"class","relative group"),c(yZ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LZ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xZ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Z,"href","/docs/transformers/pr_18414/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(kZ,"href","/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(SZ,"href","/docs/transformers/pr_18414/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(RZ,"href","/docs/transformers/pr_18414/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(PZ,"href","/docs/transformers/pr_18414/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(BZ,"href","/docs/transformers/pr_18414/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(IZ,"href","/docs/transformers/pr_18414/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(NZ,"href","/docs/transformers/pr_18414/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(qZ,"href","/docs/transformers/pr_18414/en/model_doc/vit#transformers.TFViTForImageClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w3,"id","transformers.TFAutoModelForSemanticSegmentation"),c(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w3,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(Xc,"class","relative group"),c(jZ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DZ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GZ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OZ,"href","/docs/transformers/pr_18414/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(VZ,"href","/docs/transformers/pr_18414/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($3,"id","transformers.TFAutoModelForMaskedLM"),c($3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($3,"href","#transformers.TFAutoModelForMaskedLM"),c(Wc,"class","relative group"),c(XZ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zZ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QZ,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WZ,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(UZ,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(HZ,"href","/docs/transformers/pr_18414/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(JZ,"href","/docs/transformers/pr_18414/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(YZ,"href","/docs/transformers/pr_18414/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(KZ,"href","/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(ZZ,"href","/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(eee,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(oee,"href","/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(ree,"href","/docs/transformers/pr_18414/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(tee,"href","/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(aee,"href","/docs/transformers/pr_18414/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(nee,"href","/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(see,"href","/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(lee,"href","/docs/transformers/pr_18414/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(iee,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(dee,"href","/docs/transformers/pr_18414/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(cee,"href","/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(fee,"href","/docs/transformers/pr_18414/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(mee,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z3,"id","transformers.TFAutoModelForSeq2SeqLM"),c(Z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z3,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Jc,"class","relative group"),c(gee,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hee,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pee,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uee,"href","/docs/transformers/pr_18414/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(_ee,"href","/docs/transformers/pr_18414/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(bee,"href","/docs/transformers/pr_18414/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(vee,"href","/docs/transformers/pr_18414/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(Fee,"href","/docs/transformers/pr_18414/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(Tee,"href","/docs/transformers/pr_18414/en/model_doc/marian#transformers.TFMarianMTModel"),c(Mee,"href","/docs/transformers/pr_18414/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(Eee,"href","/docs/transformers/pr_18414/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(Cee,"href","/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(wee,"href","/docs/transformers/pr_18414/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m5,"id","transformers.TFAutoModelForSequenceClassification"),c(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m5,"href","#transformers.TFAutoModelForSequenceClassification"),c(Zc,"class","relative group"),c(Aee,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yee,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lee,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xee,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c($ee,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(kee,"href","/docs/transformers/pr_18414/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(See,"href","/docs/transformers/pr_18414/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(Ree,"href","/docs/transformers/pr_18414/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(Pee,"href","/docs/transformers/pr_18414/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(Bee,"href","/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(Iee,"href","/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(Nee,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(qee,"href","/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(jee,"href","/docs/transformers/pr_18414/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(Dee,"href","/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(Gee,"href","/docs/transformers/pr_18414/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(Oee,"href","/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(Vee,"href","/docs/transformers/pr_18414/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(Xee,"href","/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(zee,"href","/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(Qee,"href","/docs/transformers/pr_18414/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(Wee,"href","/docs/transformers/pr_18414/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(Uee,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Hee,"href","/docs/transformers/pr_18414/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(Jee,"href","/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(Yee,"href","/docs/transformers/pr_18414/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(Kee,"href","/docs/transformers/pr_18414/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(Zee,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(eoe,"href","/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.TFAutoModelForMultipleChoice"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.TFAutoModelForMultipleChoice"),c(rf,"class","relative group"),c(ooe,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(roe,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(toe,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aoe,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(noe,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(soe,"href","/docs/transformers/pr_18414/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(loe,"href","/docs/transformers/pr_18414/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(ioe,"href","/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(doe,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(coe,"href","/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(foe,"href","/docs/transformers/pr_18414/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(moe,"href","/docs/transformers/pr_18414/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(goe,"href","/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(hoe,"href","/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(poe,"href","/docs/transformers/pr_18414/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(uoe,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(_oe,"href","/docs/transformers/pr_18414/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(boe,"href","/docs/transformers/pr_18414/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(voe,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(Foe,"href","/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l0,"id","transformers.TFAutoModelForNextSentencePrediction"),c(l0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l0,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(nf,"class","relative group"),c(Toe,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Moe,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Eoe,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Coe,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(woe,"href","/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m0,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(m0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m0,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(df,"class","relative group"),c(Aoe,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yoe,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Loe,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xoe,"href","/docs/transformers/pr_18414/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u0,"id","transformers.TFAutoModelForTokenClassification"),c(u0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u0,"href","#transformers.TFAutoModelForTokenClassification"),c(mf,"class","relative group"),c($oe,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(koe,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Soe,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Roe,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(Poe,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(Boe,"href","/docs/transformers/pr_18414/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(Ioe,"href","/docs/transformers/pr_18414/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(Noe,"href","/docs/transformers/pr_18414/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(qoe,"href","/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(joe,"href","/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(Doe,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(Goe,"href","/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(Ooe,"href","/docs/transformers/pr_18414/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(Voe,"href","/docs/transformers/pr_18414/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(Xoe,"href","/docs/transformers/pr_18414/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(zoe,"href","/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(Qoe,"href","/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(Woe,"href","/docs/transformers/pr_18414/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(Uoe,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Hoe,"href","/docs/transformers/pr_18414/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(Joe,"href","/docs/transformers/pr_18414/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(Yoe,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(Koe,"href","/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j0,"id","transformers.TFAutoModelForQuestionAnswering"),c(j0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j0,"href","#transformers.TFAutoModelForQuestionAnswering"),c(pf,"class","relative group"),c(Zoe,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ere,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ore,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rre,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(tre,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(are,"href","/docs/transformers/pr_18414/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(nre,"href","/docs/transformers/pr_18414/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(sre,"href","/docs/transformers/pr_18414/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(lre,"href","/docs/transformers/pr_18414/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(ire,"href","/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(dre,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(cre,"href","/docs/transformers/pr_18414/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(fre,"href","/docs/transformers/pr_18414/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(mre,"href","/docs/transformers/pr_18414/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(gre,"href","/docs/transformers/pr_18414/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(hre,"href","/docs/transformers/pr_18414/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(pre,"href","/docs/transformers/pr_18414/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(ure,"href","/docs/transformers/pr_18414/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(_re,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(bre,"href","/docs/transformers/pr_18414/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(vre,"href","/docs/transformers/pr_18414/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(Fre,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(Tre,"href","/docs/transformers/pr_18414/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iw,"id","transformers.TFAutoModelForVision2Seq"),c(iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iw,"href","#transformers.TFAutoModelForVision2Seq"),c(bf,"class","relative group"),c(Mre,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ere,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cre,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wre,"href","/docs/transformers/pr_18414/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mw,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(mw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mw,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Tf,"class","relative group"),c(Are,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yre,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lre,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xre,"href","/docs/transformers/pr_18414/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uw,"id","transformers.FlaxAutoModel"),c(uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uw,"href","#transformers.FlaxAutoModel"),c(Cf,"class","relative group"),c($re,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kre,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sre,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rre,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.FlaxAlbertModel"),c(Pre,"href","/docs/transformers/pr_18414/en/model_doc/bart#transformers.FlaxBartModel"),c(Bre,"href","/docs/transformers/pr_18414/en/model_doc/beit#transformers.FlaxBeitModel"),c(Ire,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.FlaxBertModel"),c(Nre,"href","/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(qre,"href","/docs/transformers/pr_18414/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(jre,"href","/docs/transformers/pr_18414/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(Dre,"href","/docs/transformers/pr_18414/en/model_doc/clip#transformers.FlaxCLIPModel"),c(Gre,"href","/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(Ore,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.FlaxElectraModel"),c(Vre,"href","/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(Xre,"href","/docs/transformers/pr_18414/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(zre,"href","/docs/transformers/pr_18414/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(Qre,"href","/docs/transformers/pr_18414/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Wre,"href","/docs/transformers/pr_18414/en/model_doc/marian#transformers.FlaxMarianModel"),c(Ure,"href","/docs/transformers/pr_18414/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Hre,"href","/docs/transformers/pr_18414/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Jre,"href","/docs/transformers/pr_18414/en/model_doc/opt#transformers.FlaxOPTModel"),c(Yre,"href","/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Kre,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Zre,"href","/docs/transformers/pr_18414/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(ete,"href","/docs/transformers/pr_18414/en/model_doc/t5#transformers.FlaxT5Model"),c(ote,"href","/docs/transformers/pr_18414/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(rte,"href","/docs/transformers/pr_18414/en/model_doc/vit#transformers.FlaxViTModel"),c(tte,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(ate,"href","/docs/transformers/pr_18414/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(nte,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qw,"id","transformers.FlaxAutoModelForCausalLM"),c(Qw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qw,"href","#transformers.FlaxAutoModelForCausalLM"),c(yf,"class","relative group"),c(ste,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lte,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ite,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dte,"href","/docs/transformers/pr_18414/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(cte,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(fte,"href","/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(mte,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(gte,"href","/docs/transformers/pr_18414/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(hte,"href","/docs/transformers/pr_18414/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(pte,"href","/docs/transformers/pr_18414/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(ute,"href","/docs/transformers/pr_18414/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(_te,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(bte,"href","/docs/transformers/pr_18414/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nA,"id","transformers.FlaxAutoModelForPreTraining"),c(nA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nA,"href","#transformers.FlaxAutoModelForPreTraining"),c($f,"class","relative group"),c(vte,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fte,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tte,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mte,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Ete,"href","/docs/transformers/pr_18414/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Cte,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(wte,"href","/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Ate,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(yte,"href","/docs/transformers/pr_18414/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Lte,"href","/docs/transformers/pr_18414/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(xte,"href","/docs/transformers/pr_18414/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c($te,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(kte,"href","/docs/transformers/pr_18414/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Ste,"href","/docs/transformers/pr_18414/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Rte,"href","/docs/transformers/pr_18414/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Pte,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TA,"id","transformers.FlaxAutoModelForMaskedLM"),c(TA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TA,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Rf,"class","relative group"),c(Bte,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ite,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nte,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qte,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(jte,"href","/docs/transformers/pr_18414/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Dte,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(Gte,"href","/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(Ote,"href","/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(Vte,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Xte,"href","/docs/transformers/pr_18414/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(zte,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Qte,"href","/docs/transformers/pr_18414/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Wte,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PA,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(PA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PA,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(If,"class","relative group"),c(Ute,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hte,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jte,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yte,"href","/docs/transformers/pr_18414/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Kte,"href","/docs/transformers/pr_18414/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Zte,"href","/docs/transformers/pr_18414/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(eae,"href","/docs/transformers/pr_18414/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(oae,"href","/docs/transformers/pr_18414/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(rae,"href","/docs/transformers/pr_18414/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(tae,"href","/docs/transformers/pr_18414/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(aae,"href","/docs/transformers/pr_18414/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(nae,"href","/docs/transformers/pr_18414/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(sae,"href","/docs/transformers/pr_18414/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WA,"id","transformers.FlaxAutoModelForSequenceClassification"),c(WA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WA,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(jf,"class","relative group"),c(lae,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iae,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dae,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cae,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(fae,"href","/docs/transformers/pr_18414/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(mae,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(gae,"href","/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(hae,"href","/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(pae,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(uae,"href","/docs/transformers/pr_18414/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(_ae,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(bae,"href","/docs/transformers/pr_18414/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(vae,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s6,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(s6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s6,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Of,"class","relative group"),c(Fae,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tae,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mae,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eae,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Cae,"href","/docs/transformers/pr_18414/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(wae,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Aae,"href","/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(yae,"href","/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Lae,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(xae,"href","/docs/transformers/pr_18414/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c($ae,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(kae,"href","/docs/transformers/pr_18414/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Sae,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v6,"id","transformers.FlaxAutoModelForTokenClassification"),c(v6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v6,"href","#transformers.FlaxAutoModelForTokenClassification"),c(zf,"class","relative group"),c(Rae,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pae,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bae,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iae,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Nae,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(qae,"href","/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(jae,"href","/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Dae,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Gae,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Oae,"href","/docs/transformers/pr_18414/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Vae,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($6,"id","transformers.FlaxAutoModelForMultipleChoice"),c($6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($6,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Uf,"class","relative group"),c(Xae,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zae,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qae,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wae,"href","/docs/transformers/pr_18414/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Uae,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Hae,"href","/docs/transformers/pr_18414/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Jae,"href","/docs/transformers/pr_18414/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Yae,"href","/docs/transformers/pr_18414/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Kae,"href","/docs/transformers/pr_18414/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Zae,"href","/docs/transformers/pr_18414/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(ene,"href","/docs/transformers/pr_18414/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G6,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(G6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G6,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Yf,"class","relative group"),c(one,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rne,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tne,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ane,"href","/docs/transformers/pr_18414/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z6,"id","transformers.FlaxAutoModelForImageClassification"),c(z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z6,"href","#transformers.FlaxAutoModelForImageClassification"),c(em,"class","relative group"),c(nne,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sne,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lne,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ine,"href","/docs/transformers/pr_18414/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(dne,"href","/docs/transformers/pr_18414/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J6,"id","transformers.FlaxAutoModelForVision2Seq"),c(J6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J6,"href","#transformers.FlaxAutoModelForVision2Seq"),c(tm,"class","relative group"),c(cne,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fne,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mne,"href","/docs/transformers/pr_18414/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gne,"href","/docs/transformers/pr_18414/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,yo),e(yo,Ui),b(f,dm,_),b(f,gt,_),e(gt,Hi),e(gt,Ji),e(Ji,yL),e(gt,cm),b(f,Oe,_),b(f,We,_),e(We,Yi),e(We,Hn),e(Hn,LL),e(We,Jn),e(We,Yn),e(Yn,xL),e(We,Ki),e(We,Kn),e(Kn,$L),e(We,Zi),b(f,fm,_),M(Va,f,_),b(f,Ue,_),b(f,Ae,_),e(Ae,yP),e(Ae,ed),e(ed,LP),e(Ae,xP),b(f,Lo,_),b(f,Xa,_),e(Xa,$P),e(Xa,mm),e(mm,kP),e(Xa,iZe),b(f,RUe,_),b(f,od,_),e(od,gm),e(gm,gle),M(kL,gle,null),e(od,dZe),e(od,hle),e(hle,cZe),b(f,PUe,_),b(f,Zn,_),e(Zn,fZe),e(Zn,ple),e(ple,mZe),e(Zn,gZe),e(Zn,ule),e(ule,hZe),e(Zn,pZe),b(f,BUe,_),M(SL,f,_),b(f,IUe,_),b(f,SP,_),e(SP,uZe),b(f,NUe,_),M(hm,f,_),b(f,qUe,_),b(f,rd,_),e(rd,pm),e(pm,_le),M(RL,_le,null),e(rd,_Ze),e(rd,ble),e(ble,bZe),b(f,jUe,_),b(f,xo,_),M(PL,xo,null),e(xo,vZe),e(xo,BL),e(BL,FZe),e(BL,RP),e(RP,TZe),e(BL,MZe),e(xo,EZe),e(xo,IL),e(IL,CZe),e(IL,vle),e(vle,wZe),e(IL,AZe),e(xo,yZe),e(xo,Rr),M(NL,Rr,null),e(Rr,LZe),e(Rr,Fle),e(Fle,xZe),e(Rr,$Ze),e(Rr,td),e(td,kZe),e(td,Tle),e(Tle,SZe),e(td,RZe),e(td,Mle),e(Mle,PZe),e(td,BZe),e(Rr,IZe),e(Rr,A),e(A,um),e(um,Ele),e(Ele,NZe),e(um,qZe),e(um,PP),e(PP,jZe),e(um,DZe),e(A,GZe),e(A,_m),e(_m,Cle),e(Cle,OZe),e(_m,VZe),e(_m,BP),e(BP,XZe),e(_m,zZe),e(A,QZe),e(A,bm),e(bm,wle),e(wle,WZe),e(bm,UZe),e(bm,IP),e(IP,HZe),e(bm,JZe),e(A,YZe),e(A,vm),e(vm,Ale),e(Ale,KZe),e(vm,ZZe),e(vm,NP),e(NP,eeo),e(vm,oeo),e(A,reo),e(A,Fm),e(Fm,yle),e(yle,teo),e(Fm,aeo),e(Fm,qP),e(qP,neo),e(Fm,seo),e(A,leo),e(A,Tm),e(Tm,Lle),e(Lle,ieo),e(Tm,deo),e(Tm,jP),e(jP,ceo),e(Tm,feo),e(A,meo),e(A,Mm),e(Mm,xle),e(xle,geo),e(Mm,heo),e(Mm,DP),e(DP,peo),e(Mm,ueo),e(A,_eo),e(A,Em),e(Em,$le),e($le,beo),e(Em,veo),e(Em,GP),e(GP,Feo),e(Em,Teo),e(A,Meo),e(A,Cm),e(Cm,kle),e(kle,Eeo),e(Cm,Ceo),e(Cm,OP),e(OP,weo),e(Cm,Aeo),e(A,yeo),e(A,wm),e(wm,Sle),e(Sle,Leo),e(wm,xeo),e(wm,VP),e(VP,$eo),e(wm,keo),e(A,Seo),e(A,Am),e(Am,Rle),e(Rle,Reo),e(Am,Peo),e(Am,XP),e(XP,Beo),e(Am,Ieo),e(A,Neo),e(A,ym),e(ym,Ple),e(Ple,qeo),e(ym,jeo),e(ym,zP),e(zP,Deo),e(ym,Geo),e(A,Oeo),e(A,Lm),e(Lm,Ble),e(Ble,Veo),e(Lm,Xeo),e(Lm,QP),e(QP,zeo),e(Lm,Qeo),e(A,Weo),e(A,xm),e(xm,Ile),e(Ile,Ueo),e(xm,Heo),e(xm,WP),e(WP,Jeo),e(xm,Yeo),e(A,Keo),e(A,$m),e($m,Nle),e(Nle,Zeo),e($m,eoo),e($m,UP),e(UP,ooo),e($m,roo),e(A,too),e(A,km),e(km,qle),e(qle,aoo),e(km,noo),e(km,HP),e(HP,soo),e(km,loo),e(A,ioo),e(A,Sm),e(Sm,jle),e(jle,doo),e(Sm,coo),e(Sm,JP),e(JP,foo),e(Sm,moo),e(A,goo),e(A,Rm),e(Rm,Dle),e(Dle,hoo),e(Rm,poo),e(Rm,YP),e(YP,uoo),e(Rm,_oo),e(A,boo),e(A,Pm),e(Pm,Gle),e(Gle,voo),e(Pm,Foo),e(Pm,KP),e(KP,Too),e(Pm,Moo),e(A,Eoo),e(A,Bm),e(Bm,Ole),e(Ole,Coo),e(Bm,woo),e(Bm,ZP),e(ZP,Aoo),e(Bm,yoo),e(A,Loo),e(A,Im),e(Im,Vle),e(Vle,xoo),e(Im,$oo),e(Im,eB),e(eB,koo),e(Im,Soo),e(A,Roo),e(A,Nm),e(Nm,Xle),e(Xle,Poo),e(Nm,Boo),e(Nm,oB),e(oB,Ioo),e(Nm,Noo),e(A,qoo),e(A,qm),e(qm,zle),e(zle,joo),e(qm,Doo),e(qm,rB),e(rB,Goo),e(qm,Ooo),e(A,Voo),e(A,jm),e(jm,Qle),e(Qle,Xoo),e(jm,zoo),e(jm,tB),e(tB,Qoo),e(jm,Woo),e(A,Uoo),e(A,Dm),e(Dm,Wle),e(Wle,Hoo),e(Dm,Joo),e(Dm,aB),e(aB,Yoo),e(Dm,Koo),e(A,Zoo),e(A,Gm),e(Gm,Ule),e(Ule,ero),e(Gm,oro),e(Gm,nB),e(nB,rro),e(Gm,tro),e(A,aro),e(A,Om),e(Om,Hle),e(Hle,nro),e(Om,sro),e(Om,sB),e(sB,lro),e(Om,iro),e(A,dro),e(A,Vm),e(Vm,Jle),e(Jle,cro),e(Vm,fro),e(Vm,lB),e(lB,mro),e(Vm,gro),e(A,hro),e(A,Xm),e(Xm,Yle),e(Yle,pro),e(Xm,uro),e(Xm,iB),e(iB,_ro),e(Xm,bro),e(A,vro),e(A,zm),e(zm,Kle),e(Kle,Fro),e(zm,Tro),e(zm,dB),e(dB,Mro),e(zm,Ero),e(A,Cro),e(A,Qm),e(Qm,Zle),e(Zle,wro),e(Qm,Aro),e(Qm,cB),e(cB,yro),e(Qm,Lro),e(A,xro),e(A,Wm),e(Wm,eie),e(eie,$ro),e(Wm,kro),e(Wm,fB),e(fB,Sro),e(Wm,Rro),e(A,Pro),e(A,Um),e(Um,oie),e(oie,Bro),e(Um,Iro),e(Um,mB),e(mB,Nro),e(Um,qro),e(A,jro),e(A,Hm),e(Hm,rie),e(rie,Dro),e(Hm,Gro),e(Hm,gB),e(gB,Oro),e(Hm,Vro),e(A,Xro),e(A,Jm),e(Jm,tie),e(tie,zro),e(Jm,Qro),e(Jm,hB),e(hB,Wro),e(Jm,Uro),e(A,Hro),e(A,Ym),e(Ym,aie),e(aie,Jro),e(Ym,Yro),e(Ym,pB),e(pB,Kro),e(Ym,Zro),e(A,eto),e(A,Km),e(Km,nie),e(nie,oto),e(Km,rto),e(Km,uB),e(uB,tto),e(Km,ato),e(A,nto),e(A,Zm),e(Zm,sie),e(sie,sto),e(Zm,lto),e(Zm,_B),e(_B,ito),e(Zm,dto),e(A,cto),e(A,eg),e(eg,lie),e(lie,fto),e(eg,mto),e(eg,bB),e(bB,gto),e(eg,hto),e(A,pto),e(A,og),e(og,iie),e(iie,uto),e(og,_to),e(og,vB),e(vB,bto),e(og,vto),e(A,Fto),e(A,rg),e(rg,die),e(die,Tto),e(rg,Mto),e(rg,FB),e(FB,Eto),e(rg,Cto),e(A,wto),e(A,tg),e(tg,cie),e(cie,Ato),e(tg,yto),e(tg,TB),e(TB,Lto),e(tg,xto),e(A,$to),e(A,ag),e(ag,fie),e(fie,kto),e(ag,Sto),e(ag,MB),e(MB,Rto),e(ag,Pto),e(A,Bto),e(A,ng),e(ng,mie),e(mie,Ito),e(ng,Nto),e(ng,EB),e(EB,qto),e(ng,jto),e(A,Dto),e(A,sg),e(sg,gie),e(gie,Gto),e(sg,Oto),e(sg,CB),e(CB,Vto),e(sg,Xto),e(A,zto),e(A,lg),e(lg,hie),e(hie,Qto),e(lg,Wto),e(lg,wB),e(wB,Uto),e(lg,Hto),e(A,Jto),e(A,ig),e(ig,pie),e(pie,Yto),e(ig,Kto),e(ig,AB),e(AB,Zto),e(ig,eao),e(A,oao),e(A,dg),e(dg,uie),e(uie,rao),e(dg,tao),e(dg,yB),e(yB,aao),e(dg,nao),e(A,sao),e(A,cg),e(cg,_ie),e(_ie,lao),e(cg,iao),e(cg,LB),e(LB,dao),e(cg,cao),e(A,fao),e(A,fg),e(fg,bie),e(bie,mao),e(fg,gao),e(fg,xB),e(xB,hao),e(fg,pao),e(A,uao),e(A,mg),e(mg,vie),e(vie,_ao),e(mg,bao),e(mg,$B),e($B,vao),e(mg,Fao),e(A,Tao),e(A,gg),e(gg,Fie),e(Fie,Mao),e(gg,Eao),e(gg,kB),e(kB,Cao),e(gg,wao),e(A,Aao),e(A,hg),e(hg,Tie),e(Tie,yao),e(hg,Lao),e(hg,SB),e(SB,xao),e(hg,$ao),e(A,kao),e(A,pg),e(pg,Mie),e(Mie,Sao),e(pg,Rao),e(pg,RB),e(RB,Pao),e(pg,Bao),e(A,Iao),e(A,ug),e(ug,Eie),e(Eie,Nao),e(ug,qao),e(ug,PB),e(PB,jao),e(ug,Dao),e(A,Gao),e(A,_g),e(_g,Cie),e(Cie,Oao),e(_g,Vao),e(_g,BB),e(BB,Xao),e(_g,zao),e(A,Qao),e(A,bg),e(bg,wie),e(wie,Wao),e(bg,Uao),e(bg,IB),e(IB,Hao),e(bg,Jao),e(A,Yao),e(A,vg),e(vg,Aie),e(Aie,Kao),e(vg,Zao),e(vg,NB),e(NB,eno),e(vg,ono),e(A,rno),e(A,Fg),e(Fg,yie),e(yie,tno),e(Fg,ano),e(Fg,qB),e(qB,nno),e(Fg,sno),e(A,lno),e(A,Tg),e(Tg,Lie),e(Lie,ino),e(Tg,dno),e(Tg,jB),e(jB,cno),e(Tg,fno),e(A,mno),e(A,Mg),e(Mg,xie),e(xie,gno),e(Mg,hno),e(Mg,DB),e(DB,pno),e(Mg,uno),e(A,_no),e(A,Eg),e(Eg,$ie),e($ie,bno),e(Eg,vno),e(Eg,GB),e(GB,Fno),e(Eg,Tno),e(A,Mno),e(A,Cg),e(Cg,kie),e(kie,Eno),e(Cg,Cno),e(Cg,OB),e(OB,wno),e(Cg,Ano),e(A,yno),e(A,wg),e(wg,Sie),e(Sie,Lno),e(wg,xno),e(wg,VB),e(VB,$no),e(wg,kno),e(A,Sno),e(A,Ag),e(Ag,Rie),e(Rie,Rno),e(Ag,Pno),e(Ag,XB),e(XB,Bno),e(Ag,Ino),e(A,Nno),e(A,yg),e(yg,Pie),e(Pie,qno),e(yg,jno),e(yg,zB),e(zB,Dno),e(yg,Gno),e(A,Ono),e(A,Lg),e(Lg,Bie),e(Bie,Vno),e(Lg,Xno),e(Lg,QB),e(QB,zno),e(Lg,Qno),e(A,Wno),e(A,xg),e(xg,Iie),e(Iie,Uno),e(xg,Hno),e(xg,WB),e(WB,Jno),e(xg,Yno),e(A,Kno),e(A,$g),e($g,Nie),e(Nie,Zno),e($g,eso),e($g,UB),e(UB,oso),e($g,rso),e(A,tso),e(A,kg),e(kg,qie),e(qie,aso),e(kg,nso),e(kg,HB),e(HB,sso),e(kg,lso),e(A,iso),e(A,Sg),e(Sg,jie),e(jie,dso),e(Sg,cso),e(Sg,JB),e(JB,fso),e(Sg,mso),e(A,gso),e(A,Rg),e(Rg,Die),e(Die,hso),e(Rg,pso),e(Rg,YB),e(YB,uso),e(Rg,_so),e(A,bso),e(A,Pg),e(Pg,Gie),e(Gie,vso),e(Pg,Fso),e(Pg,KB),e(KB,Tso),e(Pg,Mso),e(A,Eso),e(A,Bg),e(Bg,Oie),e(Oie,Cso),e(Bg,wso),e(Bg,ZB),e(ZB,Aso),e(Bg,yso),e(A,Lso),e(A,Ig),e(Ig,Vie),e(Vie,xso),e(Ig,$so),e(Ig,eI),e(eI,kso),e(Ig,Sso),e(A,Rso),e(A,Ng),e(Ng,Xie),e(Xie,Pso),e(Ng,Bso),e(Ng,oI),e(oI,Iso),e(Ng,Nso),e(A,qso),e(A,qg),e(qg,zie),e(zie,jso),e(qg,Dso),e(qg,rI),e(rI,Gso),e(qg,Oso),e(A,Vso),e(A,jg),e(jg,Qie),e(Qie,Xso),e(jg,zso),e(jg,tI),e(tI,Qso),e(jg,Wso),e(A,Uso),e(A,Dg),e(Dg,Wie),e(Wie,Hso),e(Dg,Jso),e(Dg,aI),e(aI,Yso),e(Dg,Kso),e(A,Zso),e(A,Gg),e(Gg,Uie),e(Uie,elo),e(Gg,olo),e(Gg,nI),e(nI,rlo),e(Gg,tlo),e(A,alo),e(A,Og),e(Og,Hie),e(Hie,nlo),e(Og,slo),e(Og,sI),e(sI,llo),e(Og,ilo),e(A,dlo),e(A,Vg),e(Vg,Jie),e(Jie,clo),e(Vg,flo),e(Vg,lI),e(lI,mlo),e(Vg,glo),e(A,hlo),e(A,Xg),e(Xg,Yie),e(Yie,plo),e(Xg,ulo),e(Xg,iI),e(iI,_lo),e(Xg,blo),e(A,vlo),e(A,zg),e(zg,Kie),e(Kie,Flo),e(zg,Tlo),e(zg,dI),e(dI,Mlo),e(zg,Elo),e(A,Clo),e(A,Qg),e(Qg,Zie),e(Zie,wlo),e(Qg,Alo),e(Qg,cI),e(cI,ylo),e(Qg,Llo),e(A,xlo),e(A,Wg),e(Wg,ede),e(ede,$lo),e(Wg,klo),e(Wg,fI),e(fI,Slo),e(Wg,Rlo),e(A,Plo),e(A,Ug),e(Ug,ode),e(ode,Blo),e(Ug,Ilo),e(Ug,mI),e(mI,Nlo),e(Ug,qlo),e(A,jlo),e(A,Hg),e(Hg,rde),e(rde,Dlo),e(Hg,Glo),e(Hg,gI),e(gI,Olo),e(Hg,Vlo),e(A,Xlo),e(A,Jg),e(Jg,tde),e(tde,zlo),e(Jg,Qlo),e(Jg,hI),e(hI,Wlo),e(Jg,Ulo),e(A,Hlo),e(A,Yg),e(Yg,ade),e(ade,Jlo),e(Yg,Ylo),e(Yg,pI),e(pI,Klo),e(Yg,Zlo),e(A,eio),e(A,Kg),e(Kg,nde),e(nde,oio),e(Kg,rio),e(Kg,uI),e(uI,tio),e(Kg,aio),e(A,nio),e(A,Zg),e(Zg,sde),e(sde,sio),e(Zg,lio),e(Zg,_I),e(_I,iio),e(Zg,dio),e(A,cio),e(A,eh),e(eh,lde),e(lde,fio),e(eh,mio),e(eh,bI),e(bI,gio),e(eh,hio),e(A,pio),e(A,oh),e(oh,ide),e(ide,uio),e(oh,_io),e(oh,vI),e(vI,bio),e(oh,vio),e(A,Fio),e(A,rh),e(rh,dde),e(dde,Tio),e(rh,Mio),e(rh,FI),e(FI,Eio),e(rh,Cio),e(A,wio),e(A,th),e(th,cde),e(cde,Aio),e(th,yio),e(th,TI),e(TI,Lio),e(th,xio),e(A,$io),e(A,ah),e(ah,fde),e(fde,kio),e(ah,Sio),e(ah,MI),e(MI,Rio),e(ah,Pio),e(A,Bio),e(A,nh),e(nh,mde),e(mde,Iio),e(nh,Nio),e(nh,EI),e(EI,qio),e(nh,jio),e(A,Dio),e(A,sh),e(sh,gde),e(gde,Gio),e(sh,Oio),e(sh,CI),e(CI,Vio),e(sh,Xio),e(A,zio),e(A,lh),e(lh,hde),e(hde,Qio),e(lh,Wio),e(lh,wI),e(wI,Uio),e(lh,Hio),e(A,Jio),e(A,ih),e(ih,pde),e(pde,Yio),e(ih,Kio),e(ih,AI),e(AI,Zio),e(ih,edo),e(A,odo),e(A,dh),e(dh,ude),e(ude,rdo),e(dh,tdo),e(dh,yI),e(yI,ado),e(dh,ndo),e(A,sdo),e(A,ch),e(ch,_de),e(_de,ldo),e(ch,ido),e(ch,LI),e(LI,ddo),e(ch,cdo),e(A,fdo),e(A,fh),e(fh,bde),e(bde,mdo),e(fh,gdo),e(fh,xI),e(xI,hdo),e(fh,pdo),e(A,udo),e(A,mh),e(mh,vde),e(vde,_do),e(mh,bdo),e(mh,$I),e($I,vdo),e(mh,Fdo),e(A,Tdo),e(A,gh),e(gh,Fde),e(Fde,Mdo),e(gh,Edo),e(gh,kI),e(kI,Cdo),e(gh,wdo),e(A,Ado),e(A,hh),e(hh,Tde),e(Tde,ydo),e(hh,Ldo),e(hh,SI),e(SI,xdo),e(hh,$do),e(A,kdo),e(A,ph),e(ph,Mde),e(Mde,Sdo),e(ph,Rdo),e(ph,RI),e(RI,Pdo),e(ph,Bdo),e(A,Ido),e(A,uh),e(uh,Ede),e(Ede,Ndo),e(uh,qdo),e(uh,PI),e(PI,jdo),e(uh,Ddo),e(A,Gdo),e(A,_h),e(_h,Cde),e(Cde,Odo),e(_h,Vdo),e(_h,BI),e(BI,Xdo),e(_h,zdo),e(A,Qdo),e(A,bh),e(bh,wde),e(wde,Wdo),e(bh,Udo),e(bh,II),e(II,Hdo),e(bh,Jdo),e(A,Ydo),e(A,vh),e(vh,Ade),e(Ade,Kdo),e(vh,Zdo),e(vh,NI),e(NI,eco),e(vh,oco),e(A,rco),e(A,Fh),e(Fh,yde),e(yde,tco),e(Fh,aco),e(Fh,qI),e(qI,nco),e(Fh,sco),e(A,lco),e(A,Th),e(Th,Lde),e(Lde,ico),e(Th,dco),e(Th,jI),e(jI,cco),e(Th,fco),e(A,mco),e(A,Mh),e(Mh,xde),e(xde,gco),e(Mh,hco),e(Mh,DI),e(DI,pco),e(Mh,uco),e(A,_co),e(A,Eh),e(Eh,$de),e($de,bco),e(Eh,vco),e(Eh,GI),e(GI,Fco),e(Eh,Tco),e(A,Mco),e(A,Ch),e(Ch,kde),e(kde,Eco),e(Ch,Cco),e(Ch,OI),e(OI,wco),e(Ch,Aco),e(A,yco),e(A,wh),e(wh,Sde),e(Sde,Lco),e(wh,xco),e(wh,VI),e(VI,$co),e(wh,kco),e(A,Sco),e(A,Ah),e(Ah,Rde),e(Rde,Rco),e(Ah,Pco),e(Ah,XI),e(XI,Bco),e(Ah,Ico),e(A,Nco),e(A,yh),e(yh,Pde),e(Pde,qco),e(yh,jco),e(yh,zI),e(zI,Dco),e(yh,Gco),e(A,Oco),e(A,Lh),e(Lh,Bde),e(Bde,Vco),e(Lh,Xco),e(Lh,QI),e(QI,zco),e(Lh,Qco),e(A,Wco),e(A,xh),e(xh,Ide),e(Ide,Uco),e(xh,Hco),e(xh,WI),e(WI,Jco),e(xh,Yco),e(Rr,Kco),M($h,Rr,null),e(xo,Zco),e(xo,kh),M(qL,kh,null),e(kh,efo),e(kh,Nde),e(Nde,ofo),b(f,DUe,_),b(f,ad,_),e(ad,Sh),e(Sh,qde),M(jL,qde,null),e(ad,rfo),e(ad,jde),e(jde,tfo),b(f,GUe,_),b(f,$o,_),M(DL,$o,null),e($o,afo),e($o,GL),e(GL,nfo),e(GL,UI),e(UI,sfo),e(GL,lfo),e($o,ifo),e($o,OL),e(OL,dfo),e(OL,Dde),e(Dde,cfo),e(OL,ffo),e($o,mfo),e($o,Pr),M(VL,Pr,null),e(Pr,gfo),e(Pr,Gde),e(Gde,hfo),e(Pr,pfo),e(Pr,za),e(za,ufo),e(za,Ode),e(Ode,_fo),e(za,bfo),e(za,Vde),e(Vde,vfo),e(za,Ffo),e(za,Xde),e(Xde,Tfo),e(za,Mfo),e(Pr,Efo),e(Pr,k),e(k,es),e(es,zde),e(zde,Cfo),e(es,wfo),e(es,HI),e(HI,Afo),e(es,yfo),e(es,JI),e(JI,Lfo),e(es,xfo),e(k,$fo),e(k,os),e(os,Qde),e(Qde,kfo),e(os,Sfo),e(os,YI),e(YI,Rfo),e(os,Pfo),e(os,KI),e(KI,Bfo),e(os,Ifo),e(k,Nfo),e(k,rs),e(rs,Wde),e(Wde,qfo),e(rs,jfo),e(rs,ZI),e(ZI,Dfo),e(rs,Gfo),e(rs,eN),e(eN,Ofo),e(rs,Vfo),e(k,Xfo),e(k,Rh),e(Rh,Ude),e(Ude,zfo),e(Rh,Qfo),e(Rh,oN),e(oN,Wfo),e(Rh,Ufo),e(k,Hfo),e(k,ts),e(ts,Hde),e(Hde,Jfo),e(ts,Yfo),e(ts,rN),e(rN,Kfo),e(ts,Zfo),e(ts,tN),e(tN,emo),e(ts,omo),e(k,rmo),e(k,Ph),e(Ph,Jde),e(Jde,tmo),e(Ph,amo),e(Ph,aN),e(aN,nmo),e(Ph,smo),e(k,lmo),e(k,Bh),e(Bh,Yde),e(Yde,imo),e(Bh,dmo),e(Bh,nN),e(nN,cmo),e(Bh,fmo),e(k,mmo),e(k,Ih),e(Ih,Kde),e(Kde,gmo),e(Ih,hmo),e(Ih,sN),e(sN,pmo),e(Ih,umo),e(k,_mo),e(k,as),e(as,Zde),e(Zde,bmo),e(as,vmo),e(as,lN),e(lN,Fmo),e(as,Tmo),e(as,iN),e(iN,Mmo),e(as,Emo),e(k,Cmo),e(k,ns),e(ns,ece),e(ece,wmo),e(ns,Amo),e(ns,dN),e(dN,ymo),e(ns,Lmo),e(ns,cN),e(cN,xmo),e(ns,$mo),e(k,kmo),e(k,ss),e(ss,oce),e(oce,Smo),e(ss,Rmo),e(ss,fN),e(fN,Pmo),e(ss,Bmo),e(ss,mN),e(mN,Imo),e(ss,Nmo),e(k,qmo),e(k,Nh),e(Nh,rce),e(rce,jmo),e(Nh,Dmo),e(Nh,gN),e(gN,Gmo),e(Nh,Omo),e(k,Vmo),e(k,qh),e(qh,tce),e(tce,Xmo),e(qh,zmo),e(qh,hN),e(hN,Qmo),e(qh,Wmo),e(k,Umo),e(k,jh),e(jh,ace),e(ace,Hmo),e(jh,Jmo),e(jh,pN),e(pN,Ymo),e(jh,Kmo),e(k,Zmo),e(k,ls),e(ls,nce),e(nce,ego),e(ls,ogo),e(ls,uN),e(uN,rgo),e(ls,tgo),e(ls,_N),e(_N,ago),e(ls,ngo),e(k,sgo),e(k,Dh),e(Dh,sce),e(sce,lgo),e(Dh,igo),e(Dh,bN),e(bN,dgo),e(Dh,cgo),e(k,fgo),e(k,is),e(is,lce),e(lce,mgo),e(is,ggo),e(is,vN),e(vN,hgo),e(is,pgo),e(is,FN),e(FN,ugo),e(is,_go),e(k,bgo),e(k,ds),e(ds,ice),e(ice,vgo),e(ds,Fgo),e(ds,TN),e(TN,Tgo),e(ds,Mgo),e(ds,MN),e(MN,Ego),e(ds,Cgo),e(k,wgo),e(k,cs),e(cs,dce),e(dce,Ago),e(cs,ygo),e(cs,EN),e(EN,Lgo),e(cs,xgo),e(cs,CN),e(CN,$go),e(cs,kgo),e(k,Sgo),e(k,fs),e(fs,cce),e(cce,Rgo),e(fs,Pgo),e(fs,wN),e(wN,Bgo),e(fs,Igo),e(fs,AN),e(AN,Ngo),e(fs,qgo),e(k,jgo),e(k,Gh),e(Gh,fce),e(fce,Dgo),e(Gh,Ggo),e(Gh,yN),e(yN,Ogo),e(Gh,Vgo),e(k,Xgo),e(k,ms),e(ms,mce),e(mce,zgo),e(ms,Qgo),e(ms,LN),e(LN,Wgo),e(ms,Ugo),e(ms,xN),e(xN,Hgo),e(ms,Jgo),e(k,Ygo),e(k,gs),e(gs,gce),e(gce,Kgo),e(gs,Zgo),e(gs,$N),e($N,eho),e(gs,oho),e(gs,kN),e(kN,rho),e(gs,tho),e(k,aho),e(k,hs),e(hs,hce),e(hce,nho),e(hs,sho),e(hs,SN),e(SN,lho),e(hs,iho),e(hs,RN),e(RN,dho),e(hs,cho),e(k,fho),e(k,ps),e(ps,pce),e(pce,mho),e(ps,gho),e(ps,PN),e(PN,hho),e(ps,pho),e(ps,BN),e(BN,uho),e(ps,_ho),e(k,bho),e(k,us),e(us,uce),e(uce,vho),e(us,Fho),e(us,IN),e(IN,Tho),e(us,Mho),e(us,NN),e(NN,Eho),e(us,Cho),e(k,who),e(k,_s),e(_s,_ce),e(_ce,Aho),e(_s,yho),e(_s,qN),e(qN,Lho),e(_s,xho),e(_s,jN),e(jN,$ho),e(_s,kho),e(k,Sho),e(k,Oh),e(Oh,bce),e(bce,Rho),e(Oh,Pho),e(Oh,DN),e(DN,Bho),e(Oh,Iho),e(k,Nho),e(k,bs),e(bs,vce),e(vce,qho),e(bs,jho),e(bs,GN),e(GN,Dho),e(bs,Gho),e(bs,ON),e(ON,Oho),e(bs,Vho),e(k,Xho),e(k,Vh),e(Vh,Fce),e(Fce,zho),e(Vh,Qho),e(Vh,VN),e(VN,Who),e(Vh,Uho),e(k,Hho),e(k,vs),e(vs,Tce),e(Tce,Jho),e(vs,Yho),e(vs,XN),e(XN,Kho),e(vs,Zho),e(vs,zN),e(zN,epo),e(vs,opo),e(k,rpo),e(k,Fs),e(Fs,Mce),e(Mce,tpo),e(Fs,apo),e(Fs,QN),e(QN,npo),e(Fs,spo),e(Fs,WN),e(WN,lpo),e(Fs,ipo),e(k,dpo),e(k,Ts),e(Ts,Ece),e(Ece,cpo),e(Ts,fpo),e(Ts,UN),e(UN,mpo),e(Ts,gpo),e(Ts,HN),e(HN,hpo),e(Ts,ppo),e(k,upo),e(k,Xh),e(Xh,Cce),e(Cce,_po),e(Xh,bpo),e(Xh,JN),e(JN,vpo),e(Xh,Fpo),e(k,Tpo),e(k,Ms),e(Ms,wce),e(wce,Mpo),e(Ms,Epo),e(Ms,YN),e(YN,Cpo),e(Ms,wpo),e(Ms,KN),e(KN,Apo),e(Ms,ypo),e(k,Lpo),e(k,Es),e(Es,Ace),e(Ace,xpo),e(Es,$po),e(Es,ZN),e(ZN,kpo),e(Es,Spo),e(Es,eq),e(eq,Rpo),e(Es,Ppo),e(k,Bpo),e(k,Cs),e(Cs,yce),e(yce,Ipo),e(Cs,Npo),e(Cs,oq),e(oq,qpo),e(Cs,jpo),e(Cs,rq),e(rq,Dpo),e(Cs,Gpo),e(k,Opo),e(k,zh),e(zh,Lce),e(Lce,Vpo),e(zh,Xpo),e(zh,tq),e(tq,zpo),e(zh,Qpo),e(k,Wpo),e(k,ws),e(ws,xce),e(xce,Upo),e(ws,Hpo),e(ws,aq),e(aq,Jpo),e(ws,Ypo),e(ws,nq),e(nq,Kpo),e(ws,Zpo),e(k,euo),e(k,As),e(As,$ce),e($ce,ouo),e(As,ruo),e(As,sq),e(sq,tuo),e(As,auo),e(As,lq),e(lq,nuo),e(As,suo),e(k,luo),e(k,ys),e(ys,kce),e(kce,iuo),e(ys,duo),e(ys,iq),e(iq,cuo),e(ys,fuo),e(ys,dq),e(dq,muo),e(ys,guo),e(k,huo),e(k,Ls),e(Ls,Sce),e(Sce,puo),e(Ls,uuo),e(Ls,cq),e(cq,_uo),e(Ls,buo),e(Ls,fq),e(fq,vuo),e(Ls,Fuo),e(k,Tuo),e(k,xs),e(xs,Rce),e(Rce,Muo),e(xs,Euo),e(xs,mq),e(mq,Cuo),e(xs,wuo),e(xs,gq),e(gq,Auo),e(xs,yuo),e(k,Luo),e(k,$s),e($s,Pce),e(Pce,xuo),e($s,$uo),e($s,hq),e(hq,kuo),e($s,Suo),e($s,pq),e(pq,Ruo),e($s,Puo),e(k,Buo),e(k,ks),e(ks,Bce),e(Bce,Iuo),e(ks,Nuo),e(ks,uq),e(uq,quo),e(ks,juo),e(ks,_q),e(_q,Duo),e(ks,Guo),e(k,Ouo),e(k,Ss),e(Ss,Ice),e(Ice,Vuo),e(Ss,Xuo),e(Ss,bq),e(bq,zuo),e(Ss,Quo),e(Ss,vq),e(vq,Wuo),e(Ss,Uuo),e(k,Huo),e(k,Qh),e(Qh,Nce),e(Nce,Juo),e(Qh,Yuo),e(Qh,Fq),e(Fq,Kuo),e(Qh,Zuo),e(k,e_o),e(k,Rs),e(Rs,qce),e(qce,o_o),e(Rs,r_o),e(Rs,Tq),e(Tq,t_o),e(Rs,a_o),e(Rs,Mq),e(Mq,n_o),e(Rs,s_o),e(k,l_o),e(k,Wh),e(Wh,jce),e(jce,i_o),e(Wh,d_o),e(Wh,Eq),e(Eq,c_o),e(Wh,f_o),e(k,m_o),e(k,Uh),e(Uh,Dce),e(Dce,g_o),e(Uh,h_o),e(Uh,Cq),e(Cq,p_o),e(Uh,u_o),e(k,__o),e(k,Ps),e(Ps,Gce),e(Gce,b_o),e(Ps,v_o),e(Ps,wq),e(wq,F_o),e(Ps,T_o),e(Ps,Aq),e(Aq,M_o),e(Ps,E_o),e(k,C_o),e(k,Bs),e(Bs,Oce),e(Oce,w_o),e(Bs,A_o),e(Bs,yq),e(yq,y_o),e(Bs,L_o),e(Bs,Lq),e(Lq,x_o),e(Bs,$_o),e(k,k_o),e(k,Is),e(Is,Vce),e(Vce,S_o),e(Is,R_o),e(Is,xq),e(xq,P_o),e(Is,B_o),e(Is,$q),e($q,I_o),e(Is,N_o),e(k,q_o),e(k,Hh),e(Hh,Xce),e(Xce,j_o),e(Hh,D_o),e(Hh,kq),e(kq,G_o),e(Hh,O_o),e(k,V_o),e(k,Ns),e(Ns,zce),e(zce,X_o),e(Ns,z_o),e(Ns,Sq),e(Sq,Q_o),e(Ns,W_o),e(Ns,Rq),e(Rq,U_o),e(Ns,H_o),e(k,J_o),e(k,qs),e(qs,Qce),e(Qce,Y_o),e(qs,K_o),e(qs,Pq),e(Pq,Z_o),e(qs,e1o),e(qs,Bq),e(Bq,o1o),e(qs,r1o),e(k,t1o),e(k,js),e(js,Wce),e(Wce,a1o),e(js,n1o),e(js,Iq),e(Iq,s1o),e(js,l1o),e(js,Nq),e(Nq,i1o),e(js,d1o),e(k,c1o),e(k,Ds),e(Ds,Uce),e(Uce,f1o),e(Ds,m1o),e(Ds,qq),e(qq,g1o),e(Ds,h1o),e(Ds,jq),e(jq,p1o),e(Ds,u1o),e(k,_1o),e(k,Gs),e(Gs,Hce),e(Hce,b1o),e(Gs,v1o),e(Gs,Dq),e(Dq,F1o),e(Gs,T1o),e(Gs,Gq),e(Gq,M1o),e(Gs,E1o),e(k,C1o),e(k,Os),e(Os,Jce),e(Jce,w1o),e(Os,A1o),e(Os,Oq),e(Oq,y1o),e(Os,L1o),e(Os,Vq),e(Vq,x1o),e(Os,$1o),e(k,k1o),e(k,Vs),e(Vs,Yce),e(Yce,S1o),e(Vs,R1o),e(Vs,Xq),e(Xq,P1o),e(Vs,B1o),e(Vs,zq),e(zq,I1o),e(Vs,N1o),e(k,q1o),e(k,Xs),e(Xs,Kce),e(Kce,j1o),e(Xs,D1o),e(Xs,Qq),e(Qq,G1o),e(Xs,O1o),e(Xs,Wq),e(Wq,V1o),e(Xs,X1o),e(k,z1o),e(k,Jh),e(Jh,Zce),e(Zce,Q1o),e(Jh,W1o),e(Jh,Uq),e(Uq,U1o),e(Jh,H1o),e(k,J1o),e(k,zs),e(zs,efe),e(efe,Y1o),e(zs,K1o),e(zs,Hq),e(Hq,Z1o),e(zs,e4o),e(zs,Jq),e(Jq,o4o),e(zs,r4o),e(k,t4o),e(k,Qs),e(Qs,ofe),e(ofe,a4o),e(Qs,n4o),e(Qs,Yq),e(Yq,s4o),e(Qs,l4o),e(Qs,Kq),e(Kq,i4o),e(Qs,d4o),e(k,c4o),e(k,Yh),e(Yh,rfe),e(rfe,f4o),e(Yh,m4o),e(Yh,Zq),e(Zq,g4o),e(Yh,h4o),e(k,p4o),e(k,Kh),e(Kh,tfe),e(tfe,u4o),e(Kh,_4o),e(Kh,ej),e(ej,b4o),e(Kh,v4o),e(k,F4o),e(k,Zh),e(Zh,afe),e(afe,T4o),e(Zh,M4o),e(Zh,oj),e(oj,E4o),e(Zh,C4o),e(k,w4o),e(k,ep),e(ep,nfe),e(nfe,A4o),e(ep,y4o),e(ep,rj),e(rj,L4o),e(ep,x4o),e(k,$4o),e(k,Ws),e(Ws,sfe),e(sfe,k4o),e(Ws,S4o),e(Ws,tj),e(tj,R4o),e(Ws,P4o),e(Ws,aj),e(aj,B4o),e(Ws,I4o),e(k,N4o),e(k,op),e(op,lfe),e(lfe,q4o),e(op,j4o),e(op,nj),e(nj,D4o),e(op,G4o),e(k,O4o),e(k,Us),e(Us,ife),e(ife,V4o),e(Us,X4o),e(Us,sj),e(sj,z4o),e(Us,Q4o),e(Us,lj),e(lj,W4o),e(Us,U4o),e(k,H4o),e(k,Hs),e(Hs,dfe),e(dfe,J4o),e(Hs,Y4o),e(Hs,ij),e(ij,K4o),e(Hs,Z4o),e(Hs,dj),e(dj,e2o),e(Hs,o2o),e(k,r2o),e(k,Js),e(Js,cfe),e(cfe,t2o),e(Js,a2o),e(Js,cj),e(cj,n2o),e(Js,s2o),e(Js,fj),e(fj,l2o),e(Js,i2o),e(k,d2o),e(k,Ys),e(Ys,ffe),e(ffe,c2o),e(Ys,f2o),e(Ys,mj),e(mj,m2o),e(Ys,g2o),e(Ys,gj),e(gj,h2o),e(Ys,p2o),e(k,u2o),e(k,Ks),e(Ks,mfe),e(mfe,_2o),e(Ks,b2o),e(Ks,hj),e(hj,v2o),e(Ks,F2o),e(Ks,pj),e(pj,T2o),e(Ks,M2o),e(k,E2o),e(k,Zs),e(Zs,gfe),e(gfe,C2o),e(Zs,w2o),e(Zs,uj),e(uj,A2o),e(Zs,y2o),e(Zs,_j),e(_j,L2o),e(Zs,x2o),e(k,$2o),e(k,rp),e(rp,hfe),e(hfe,k2o),e(rp,S2o),e(rp,bj),e(bj,R2o),e(rp,P2o),e(k,B2o),e(k,tp),e(tp,pfe),e(pfe,I2o),e(tp,N2o),e(tp,vj),e(vj,q2o),e(tp,j2o),e(k,D2o),e(k,el),e(el,ufe),e(ufe,G2o),e(el,O2o),e(el,Fj),e(Fj,V2o),e(el,X2o),e(el,Tj),e(Tj,z2o),e(el,Q2o),e(k,W2o),e(k,ol),e(ol,_fe),e(_fe,U2o),e(ol,H2o),e(ol,Mj),e(Mj,J2o),e(ol,Y2o),e(ol,Ej),e(Ej,K2o),e(ol,Z2o),e(k,ebo),e(k,rl),e(rl,bfe),e(bfe,obo),e(rl,rbo),e(rl,Cj),e(Cj,tbo),e(rl,abo),e(rl,wj),e(wj,nbo),e(rl,sbo),e(k,lbo),e(k,ap),e(ap,vfe),e(vfe,ibo),e(ap,dbo),e(ap,Aj),e(Aj,cbo),e(ap,fbo),e(k,mbo),e(k,np),e(np,Ffe),e(Ffe,gbo),e(np,hbo),e(np,yj),e(yj,pbo),e(np,ubo),e(k,_bo),e(k,sp),e(sp,Tfe),e(Tfe,bbo),e(sp,vbo),e(sp,Lj),e(Lj,Fbo),e(sp,Tbo),e(k,Mbo),e(k,tl),e(tl,Mfe),e(Mfe,Ebo),e(tl,Cbo),e(tl,xj),e(xj,wbo),e(tl,Abo),e(tl,$j),e($j,ybo),e(tl,Lbo),e(k,xbo),e(k,al),e(al,Efe),e(Efe,$bo),e(al,kbo),e(al,kj),e(kj,Sbo),e(al,Rbo),e(al,Sj),e(Sj,Pbo),e(al,Bbo),e(k,Ibo),e(k,lp),e(lp,Cfe),e(Cfe,Nbo),e(lp,qbo),e(lp,Rj),e(Rj,jbo),e(lp,Dbo),e(k,Gbo),e(k,ip),e(ip,wfe),e(wfe,Obo),e(ip,Vbo),e(ip,Pj),e(Pj,Xbo),e(ip,zbo),e(k,Qbo),e(k,dp),e(dp,Afe),e(Afe,Wbo),e(dp,Ubo),e(dp,Bj),e(Bj,Hbo),e(dp,Jbo),e(k,Ybo),e(k,nl),e(nl,yfe),e(yfe,Kbo),e(nl,Zbo),e(nl,Ij),e(Ij,evo),e(nl,ovo),e(nl,Nj),e(Nj,rvo),e(nl,tvo),e(k,avo),e(k,cp),e(cp,Lfe),e(Lfe,nvo),e(cp,svo),e(cp,qj),e(qj,lvo),e(cp,ivo),e(k,dvo),e(k,fp),e(fp,xfe),e(xfe,cvo),e(fp,fvo),e(fp,jj),e(jj,mvo),e(fp,gvo),e(k,hvo),e(k,sl),e(sl,$fe),e($fe,pvo),e(sl,uvo),e(sl,Dj),e(Dj,_vo),e(sl,bvo),e(sl,Gj),e(Gj,vvo),e(sl,Fvo),e(k,Tvo),e(k,ll),e(ll,kfe),e(kfe,Mvo),e(ll,Evo),e(ll,Oj),e(Oj,Cvo),e(ll,wvo),e(ll,Vj),e(Vj,Avo),e(ll,yvo),e(k,Lvo),e(k,il),e(il,Sfe),e(Sfe,xvo),e(il,$vo),e(il,Xj),e(Xj,kvo),e(il,Svo),e(il,zj),e(zj,Rvo),e(il,Pvo),e(k,Bvo),e(k,dl),e(dl,Rfe),e(Rfe,Ivo),e(dl,Nvo),e(dl,Qj),e(Qj,qvo),e(dl,jvo),e(dl,Wj),e(Wj,Dvo),e(dl,Gvo),e(Pr,Ovo),M(mp,Pr,null),e($o,Vvo),e($o,gp),M(XL,gp,null),e(gp,Xvo),e(gp,Pfe),e(Pfe,zvo),b(f,OUe,_),b(f,nd,_),e(nd,hp),e(hp,Bfe),M(zL,Bfe,null),e(nd,Qvo),e(nd,Ife),e(Ife,Wvo),b(f,VUe,_),b(f,ko,_),M(QL,ko,null),e(ko,Uvo),e(ko,WL),e(WL,Hvo),e(WL,Uj),e(Uj,Jvo),e(WL,Yvo),e(ko,Kvo),e(ko,UL),e(UL,Zvo),e(UL,Nfe),e(Nfe,eFo),e(UL,oFo),e(ko,rFo),e(ko,He),M(HL,He,null),e(He,tFo),e(He,qfe),e(qfe,aFo),e(He,nFo),e(He,Qa),e(Qa,sFo),e(Qa,jfe),e(jfe,lFo),e(Qa,iFo),e(Qa,Dfe),e(Dfe,dFo),e(Qa,cFo),e(Qa,Gfe),e(Gfe,fFo),e(Qa,mFo),e(He,gFo),e(He,W),e(W,pp),e(pp,Ofe),e(Ofe,hFo),e(pp,pFo),e(pp,Hj),e(Hj,uFo),e(pp,_Fo),e(W,bFo),e(W,up),e(up,Vfe),e(Vfe,vFo),e(up,FFo),e(up,Jj),e(Jj,TFo),e(up,MFo),e(W,EFo),e(W,_p),e(_p,Xfe),e(Xfe,CFo),e(_p,wFo),e(_p,Yj),e(Yj,AFo),e(_p,yFo),e(W,LFo),e(W,bp),e(bp,zfe),e(zfe,xFo),e(bp,$Fo),e(bp,Kj),e(Kj,kFo),e(bp,SFo),e(W,RFo),e(W,vp),e(vp,Qfe),e(Qfe,PFo),e(vp,BFo),e(vp,Zj),e(Zj,IFo),e(vp,NFo),e(W,qFo),e(W,Fp),e(Fp,Wfe),e(Wfe,jFo),e(Fp,DFo),e(Fp,eD),e(eD,GFo),e(Fp,OFo),e(W,VFo),e(W,Tp),e(Tp,Ufe),e(Ufe,XFo),e(Tp,zFo),e(Tp,oD),e(oD,QFo),e(Tp,WFo),e(W,UFo),e(W,Mp),e(Mp,Hfe),e(Hfe,HFo),e(Mp,JFo),e(Mp,rD),e(rD,YFo),e(Mp,KFo),e(W,ZFo),e(W,Ep),e(Ep,Jfe),e(Jfe,eTo),e(Ep,oTo),e(Ep,tD),e(tD,rTo),e(Ep,tTo),e(W,aTo),e(W,Cp),e(Cp,Yfe),e(Yfe,nTo),e(Cp,sTo),e(Cp,aD),e(aD,lTo),e(Cp,iTo),e(W,dTo),e(W,wp),e(wp,Kfe),e(Kfe,cTo),e(wp,fTo),e(wp,nD),e(nD,mTo),e(wp,gTo),e(W,hTo),e(W,Ap),e(Ap,Zfe),e(Zfe,pTo),e(Ap,uTo),e(Ap,sD),e(sD,_To),e(Ap,bTo),e(W,vTo),e(W,yp),e(yp,eme),e(eme,FTo),e(yp,TTo),e(yp,lD),e(lD,MTo),e(yp,ETo),e(W,CTo),e(W,Lp),e(Lp,ome),e(ome,wTo),e(Lp,ATo),e(Lp,iD),e(iD,yTo),e(Lp,LTo),e(W,xTo),e(W,xp),e(xp,rme),e(rme,$To),e(xp,kTo),e(xp,dD),e(dD,STo),e(xp,RTo),e(W,PTo),e(W,$p),e($p,tme),e(tme,BTo),e($p,ITo),e($p,cD),e(cD,NTo),e($p,qTo),e(W,jTo),e(W,kp),e(kp,ame),e(ame,DTo),e(kp,GTo),e(kp,fD),e(fD,OTo),e(kp,VTo),e(W,XTo),e(W,Sp),e(Sp,nme),e(nme,zTo),e(Sp,QTo),e(Sp,mD),e(mD,WTo),e(Sp,UTo),e(W,HTo),e(W,Rp),e(Rp,sme),e(sme,JTo),e(Rp,YTo),e(Rp,gD),e(gD,KTo),e(Rp,ZTo),e(W,e8o),e(W,Pp),e(Pp,lme),e(lme,o8o),e(Pp,r8o),e(Pp,hD),e(hD,t8o),e(Pp,a8o),e(W,n8o),e(W,Bp),e(Bp,ime),e(ime,s8o),e(Bp,l8o),e(Bp,pD),e(pD,i8o),e(Bp,d8o),e(W,c8o),e(W,Ip),e(Ip,dme),e(dme,f8o),e(Ip,m8o),e(Ip,uD),e(uD,g8o),e(Ip,h8o),e(W,p8o),e(W,Np),e(Np,cme),e(cme,u8o),e(Np,_8o),e(Np,_D),e(_D,b8o),e(Np,v8o),e(W,F8o),e(W,qp),e(qp,fme),e(fme,T8o),e(qp,M8o),e(qp,bD),e(bD,E8o),e(qp,C8o),e(W,w8o),e(W,jp),e(jp,mme),e(mme,A8o),e(jp,y8o),e(jp,vD),e(vD,L8o),e(jp,x8o),e(W,$8o),e(W,Dp),e(Dp,gme),e(gme,k8o),e(Dp,S8o),e(Dp,FD),e(FD,R8o),e(Dp,P8o),e(W,B8o),e(W,Gp),e(Gp,hme),e(hme,I8o),e(Gp,N8o),e(Gp,TD),e(TD,q8o),e(Gp,j8o),e(W,D8o),e(W,Op),e(Op,pme),e(pme,G8o),e(Op,O8o),e(Op,MD),e(MD,V8o),e(Op,X8o),e(W,z8o),e(W,Vp),e(Vp,ume),e(ume,Q8o),e(Vp,W8o),e(Vp,ED),e(ED,U8o),e(Vp,H8o),e(W,J8o),e(W,Xp),e(Xp,_me),e(_me,Y8o),e(Xp,K8o),e(Xp,CD),e(CD,Z8o),e(Xp,eMo),e(W,oMo),e(W,zp),e(zp,bme),e(bme,rMo),e(zp,tMo),e(zp,wD),e(wD,aMo),e(zp,nMo),e(W,sMo),e(W,Qp),e(Qp,vme),e(vme,lMo),e(Qp,iMo),e(Qp,AD),e(AD,dMo),e(Qp,cMo),e(W,fMo),e(W,Wp),e(Wp,Fme),e(Fme,mMo),e(Wp,gMo),e(Wp,yD),e(yD,hMo),e(Wp,pMo),e(W,uMo),e(W,Up),e(Up,Tme),e(Tme,_Mo),e(Up,bMo),e(Up,LD),e(LD,vMo),e(Up,FMo),e(W,TMo),e(W,Hp),e(Hp,Mme),e(Mme,MMo),e(Hp,EMo),e(Hp,xD),e(xD,CMo),e(Hp,wMo),e(W,AMo),e(W,Jp),e(Jp,Eme),e(Eme,yMo),e(Jp,LMo),e(Jp,$D),e($D,xMo),e(Jp,$Mo),e(W,kMo),e(W,Yp),e(Yp,Cme),e(Cme,SMo),e(Yp,RMo),e(Yp,kD),e(kD,PMo),e(Yp,BMo),e(W,IMo),e(W,Kp),e(Kp,wme),e(wme,NMo),e(Kp,qMo),e(Kp,SD),e(SD,jMo),e(Kp,DMo),e(He,GMo),M(Zp,He,null),e(He,OMo),M(eu,He,null),e(ko,VMo),e(ko,ou),M(JL,ou,null),e(ou,XMo),e(ou,Ame),e(Ame,zMo),b(f,XUe,_),b(f,sd,_),e(sd,ru),e(ru,yme),M(YL,yme,null),e(sd,QMo),e(sd,Lme),e(Lme,WMo),b(f,zUe,_),b(f,So,_),M(KL,So,null),e(So,UMo),e(So,ZL),e(ZL,HMo),e(ZL,RD),e(RD,JMo),e(ZL,YMo),e(So,KMo),e(So,e9),e(e9,ZMo),e(e9,xme),e(xme,eEo),e(e9,oEo),e(So,rEo),e(So,Je),M(o9,Je,null),e(Je,tEo),e(Je,$me),e($me,aEo),e(Je,nEo),e(Je,ld),e(ld,sEo),e(ld,kme),e(kme,lEo),e(ld,iEo),e(ld,Sme),e(Sme,dEo),e(ld,cEo),e(Je,fEo),e(Je,ie),e(ie,tu),e(tu,Rme),e(Rme,mEo),e(tu,gEo),e(tu,PD),e(PD,hEo),e(tu,pEo),e(ie,uEo),e(ie,au),e(au,Pme),e(Pme,_Eo),e(au,bEo),e(au,BD),e(BD,vEo),e(au,FEo),e(ie,TEo),e(ie,nu),e(nu,Bme),e(Bme,MEo),e(nu,EEo),e(nu,ID),e(ID,CEo),e(nu,wEo),e(ie,AEo),e(ie,su),e(su,Ime),e(Ime,yEo),e(su,LEo),e(su,ND),e(ND,xEo),e(su,$Eo),e(ie,kEo),e(ie,lu),e(lu,Nme),e(Nme,SEo),e(lu,REo),e(lu,qD),e(qD,PEo),e(lu,BEo),e(ie,IEo),e(ie,iu),e(iu,qme),e(qme,NEo),e(iu,qEo),e(iu,jD),e(jD,jEo),e(iu,DEo),e(ie,GEo),e(ie,du),e(du,jme),e(jme,OEo),e(du,VEo),e(du,DD),e(DD,XEo),e(du,zEo),e(ie,QEo),e(ie,cu),e(cu,Dme),e(Dme,WEo),e(cu,UEo),e(cu,GD),e(GD,HEo),e(cu,JEo),e(ie,YEo),e(ie,fu),e(fu,Gme),e(Gme,KEo),e(fu,ZEo),e(fu,OD),e(OD,eCo),e(fu,oCo),e(ie,rCo),e(ie,mu),e(mu,Ome),e(Ome,tCo),e(mu,aCo),e(mu,VD),e(VD,nCo),e(mu,sCo),e(ie,lCo),e(ie,gu),e(gu,Vme),e(Vme,iCo),e(gu,dCo),e(gu,XD),e(XD,cCo),e(gu,fCo),e(ie,mCo),e(ie,hu),e(hu,Xme),e(Xme,gCo),e(hu,hCo),e(hu,zD),e(zD,pCo),e(hu,uCo),e(ie,_Co),e(ie,pu),e(pu,zme),e(zme,bCo),e(pu,vCo),e(pu,QD),e(QD,FCo),e(pu,TCo),e(ie,MCo),e(ie,uu),e(uu,Qme),e(Qme,ECo),e(uu,CCo),e(uu,WD),e(WD,wCo),e(uu,ACo),e(ie,yCo),e(ie,_u),e(_u,Wme),e(Wme,LCo),e(_u,xCo),e(_u,UD),e(UD,$Co),e(_u,kCo),e(ie,SCo),e(ie,bu),e(bu,Ume),e(Ume,RCo),e(bu,PCo),e(bu,HD),e(HD,BCo),e(bu,ICo),e(ie,NCo),e(ie,vu),e(vu,Hme),e(Hme,qCo),e(vu,jCo),e(vu,JD),e(JD,DCo),e(vu,GCo),e(ie,OCo),e(ie,Fu),e(Fu,Jme),e(Jme,VCo),e(Fu,XCo),e(Fu,YD),e(YD,zCo),e(Fu,QCo),e(ie,WCo),e(ie,Tu),e(Tu,Yme),e(Yme,UCo),e(Tu,HCo),e(Tu,KD),e(KD,JCo),e(Tu,YCo),e(ie,KCo),e(ie,Mu),e(Mu,Kme),e(Kme,ZCo),e(Mu,e3o),e(Mu,ZD),e(ZD,o3o),e(Mu,r3o),e(Je,t3o),M(Eu,Je,null),e(Je,a3o),M(Cu,Je,null),e(So,n3o),e(So,wu),M(r9,wu,null),e(wu,s3o),e(wu,Zme),e(Zme,l3o),b(f,QUe,_),b(f,id,_),e(id,Au),e(Au,ege),M(t9,ege,null),e(id,i3o),e(id,oge),e(oge,d3o),b(f,WUe,_),b(f,Ro,_),M(a9,Ro,null),e(Ro,c3o),e(Ro,dd),e(dd,f3o),e(dd,eG),e(eG,m3o),e(dd,g3o),e(dd,oG),e(oG,h3o),e(dd,p3o),e(Ro,u3o),e(Ro,n9),e(n9,_3o),e(n9,rge),e(rge,b3o),e(n9,v3o),e(Ro,F3o),e(Ro,ht),M(s9,ht,null),e(ht,T3o),e(ht,tge),e(tge,M3o),e(ht,E3o),e(ht,cd),e(cd,C3o),e(cd,age),e(age,w3o),e(cd,A3o),e(cd,rG),e(rG,y3o),e(cd,L3o),e(ht,x3o),M(yu,ht,null),e(Ro,$3o),e(Ro,Ye),M(l9,Ye,null),e(Ye,k3o),e(Ye,nge),e(nge,S3o),e(Ye,R3o),e(Ye,Wa),e(Wa,P3o),e(Wa,sge),e(sge,B3o),e(Wa,I3o),e(Wa,lge),e(lge,N3o),e(Wa,q3o),e(Wa,ige),e(ige,j3o),e(Wa,D3o),e(Ye,G3o),e(Ye,L),e(L,Lu),e(Lu,dge),e(dge,O3o),e(Lu,V3o),e(Lu,tG),e(tG,X3o),e(Lu,z3o),e(L,Q3o),e(L,xu),e(xu,cge),e(cge,W3o),e(xu,U3o),e(xu,aG),e(aG,H3o),e(xu,J3o),e(L,Y3o),e(L,$u),e($u,fge),e(fge,K3o),e($u,Z3o),e($u,nG),e(nG,e5o),e($u,o5o),e(L,r5o),e(L,ku),e(ku,mge),e(mge,t5o),e(ku,a5o),e(ku,sG),e(sG,n5o),e(ku,s5o),e(L,l5o),e(L,Su),e(Su,gge),e(gge,i5o),e(Su,d5o),e(Su,lG),e(lG,c5o),e(Su,f5o),e(L,m5o),e(L,Ru),e(Ru,hge),e(hge,g5o),e(Ru,h5o),e(Ru,iG),e(iG,p5o),e(Ru,u5o),e(L,_5o),e(L,Pu),e(Pu,pge),e(pge,b5o),e(Pu,v5o),e(Pu,dG),e(dG,F5o),e(Pu,T5o),e(L,M5o),e(L,Bu),e(Bu,uge),e(uge,E5o),e(Bu,C5o),e(Bu,cG),e(cG,w5o),e(Bu,A5o),e(L,y5o),e(L,Iu),e(Iu,_ge),e(_ge,L5o),e(Iu,x5o),e(Iu,fG),e(fG,$5o),e(Iu,k5o),e(L,S5o),e(L,Nu),e(Nu,bge),e(bge,R5o),e(Nu,P5o),e(Nu,mG),e(mG,B5o),e(Nu,I5o),e(L,N5o),e(L,qu),e(qu,vge),e(vge,q5o),e(qu,j5o),e(qu,gG),e(gG,D5o),e(qu,G5o),e(L,O5o),e(L,ju),e(ju,Fge),e(Fge,V5o),e(ju,X5o),e(ju,hG),e(hG,z5o),e(ju,Q5o),e(L,W5o),e(L,Du),e(Du,Tge),e(Tge,U5o),e(Du,H5o),e(Du,pG),e(pG,J5o),e(Du,Y5o),e(L,K5o),e(L,Gu),e(Gu,Mge),e(Mge,Z5o),e(Gu,e0o),e(Gu,uG),e(uG,o0o),e(Gu,r0o),e(L,t0o),e(L,Ou),e(Ou,Ege),e(Ege,a0o),e(Ou,n0o),e(Ou,_G),e(_G,s0o),e(Ou,l0o),e(L,i0o),e(L,Vu),e(Vu,Cge),e(Cge,d0o),e(Vu,c0o),e(Vu,bG),e(bG,f0o),e(Vu,m0o),e(L,g0o),e(L,Xu),e(Xu,wge),e(wge,h0o),e(Xu,p0o),e(Xu,vG),e(vG,u0o),e(Xu,_0o),e(L,b0o),e(L,zu),e(zu,Age),e(Age,v0o),e(zu,F0o),e(zu,FG),e(FG,T0o),e(zu,M0o),e(L,E0o),e(L,Qu),e(Qu,yge),e(yge,C0o),e(Qu,w0o),e(Qu,TG),e(TG,A0o),e(Qu,y0o),e(L,L0o),e(L,Wu),e(Wu,Lge),e(Lge,x0o),e(Wu,$0o),e(Wu,MG),e(MG,k0o),e(Wu,S0o),e(L,R0o),e(L,Uu),e(Uu,xge),e(xge,P0o),e(Uu,B0o),e(Uu,EG),e(EG,I0o),e(Uu,N0o),e(L,q0o),e(L,Hu),e(Hu,$ge),e($ge,j0o),e(Hu,D0o),e(Hu,CG),e(CG,G0o),e(Hu,O0o),e(L,V0o),e(L,Ju),e(Ju,kge),e(kge,X0o),e(Ju,z0o),e(Ju,wG),e(wG,Q0o),e(Ju,W0o),e(L,U0o),e(L,Yu),e(Yu,Sge),e(Sge,H0o),e(Yu,J0o),e(Yu,AG),e(AG,Y0o),e(Yu,K0o),e(L,Z0o),e(L,Ku),e(Ku,Rge),e(Rge,ewo),e(Ku,owo),e(Ku,yG),e(yG,rwo),e(Ku,two),e(L,awo),e(L,Zu),e(Zu,Pge),e(Pge,nwo),e(Zu,swo),e(Zu,LG),e(LG,lwo),e(Zu,iwo),e(L,dwo),e(L,e_),e(e_,Bge),e(Bge,cwo),e(e_,fwo),e(e_,xG),e(xG,mwo),e(e_,gwo),e(L,hwo),e(L,o_),e(o_,Ige),e(Ige,pwo),e(o_,uwo),e(o_,$G),e($G,_wo),e(o_,bwo),e(L,vwo),e(L,r_),e(r_,Nge),e(Nge,Fwo),e(r_,Two),e(r_,kG),e(kG,Mwo),e(r_,Ewo),e(L,Cwo),e(L,t_),e(t_,qge),e(qge,wwo),e(t_,Awo),e(t_,SG),e(SG,ywo),e(t_,Lwo),e(L,xwo),e(L,a_),e(a_,jge),e(jge,$wo),e(a_,kwo),e(a_,RG),e(RG,Swo),e(a_,Rwo),e(L,Pwo),e(L,n_),e(n_,Dge),e(Dge,Bwo),e(n_,Iwo),e(n_,PG),e(PG,Nwo),e(n_,qwo),e(L,jwo),e(L,s_),e(s_,Gge),e(Gge,Dwo),e(s_,Gwo),e(s_,BG),e(BG,Owo),e(s_,Vwo),e(L,Xwo),e(L,l_),e(l_,Oge),e(Oge,zwo),e(l_,Qwo),e(l_,IG),e(IG,Wwo),e(l_,Uwo),e(L,Hwo),e(L,i_),e(i_,Vge),e(Vge,Jwo),e(i_,Ywo),e(i_,NG),e(NG,Kwo),e(i_,Zwo),e(L,eAo),e(L,cl),e(cl,Xge),e(Xge,oAo),e(cl,rAo),e(cl,qG),e(qG,tAo),e(cl,aAo),e(cl,jG),e(jG,nAo),e(cl,sAo),e(L,lAo),e(L,d_),e(d_,zge),e(zge,iAo),e(d_,dAo),e(d_,DG),e(DG,cAo),e(d_,fAo),e(L,mAo),e(L,c_),e(c_,Qge),e(Qge,gAo),e(c_,hAo),e(c_,GG),e(GG,pAo),e(c_,uAo),e(L,_Ao),e(L,f_),e(f_,Wge),e(Wge,bAo),e(f_,vAo),e(f_,OG),e(OG,FAo),e(f_,TAo),e(L,MAo),e(L,m_),e(m_,Uge),e(Uge,EAo),e(m_,CAo),e(m_,VG),e(VG,wAo),e(m_,AAo),e(L,yAo),e(L,g_),e(g_,Hge),e(Hge,LAo),e(g_,xAo),e(g_,XG),e(XG,$Ao),e(g_,kAo),e(L,SAo),e(L,h_),e(h_,Jge),e(Jge,RAo),e(h_,PAo),e(h_,zG),e(zG,BAo),e(h_,IAo),e(L,NAo),e(L,p_),e(p_,Yge),e(Yge,qAo),e(p_,jAo),e(p_,QG),e(QG,DAo),e(p_,GAo),e(L,OAo),e(L,u_),e(u_,Kge),e(Kge,VAo),e(u_,XAo),e(u_,WG),e(WG,zAo),e(u_,QAo),e(L,WAo),e(L,__),e(__,Zge),e(Zge,UAo),e(__,HAo),e(__,UG),e(UG,JAo),e(__,YAo),e(L,KAo),e(L,b_),e(b_,ehe),e(ehe,ZAo),e(b_,e6o),e(b_,HG),e(HG,o6o),e(b_,r6o),e(L,t6o),e(L,v_),e(v_,ohe),e(ohe,a6o),e(v_,n6o),e(v_,JG),e(JG,s6o),e(v_,l6o),e(L,i6o),e(L,F_),e(F_,rhe),e(rhe,d6o),e(F_,c6o),e(F_,YG),e(YG,f6o),e(F_,m6o),e(L,g6o),e(L,T_),e(T_,the),e(the,h6o),e(T_,p6o),e(T_,KG),e(KG,u6o),e(T_,_6o),e(L,b6o),e(L,M_),e(M_,ahe),e(ahe,v6o),e(M_,F6o),e(M_,ZG),e(ZG,T6o),e(M_,M6o),e(L,E6o),e(L,E_),e(E_,nhe),e(nhe,C6o),e(E_,w6o),e(E_,eO),e(eO,A6o),e(E_,y6o),e(L,L6o),e(L,C_),e(C_,she),e(she,x6o),e(C_,$6o),e(C_,oO),e(oO,k6o),e(C_,S6o),e(L,R6o),e(L,w_),e(w_,lhe),e(lhe,P6o),e(w_,B6o),e(w_,rO),e(rO,I6o),e(w_,N6o),e(L,q6o),e(L,A_),e(A_,ihe),e(ihe,j6o),e(A_,D6o),e(A_,tO),e(tO,G6o),e(A_,O6o),e(L,V6o),e(L,y_),e(y_,dhe),e(dhe,X6o),e(y_,z6o),e(y_,aO),e(aO,Q6o),e(y_,W6o),e(L,U6o),e(L,L_),e(L_,che),e(che,H6o),e(L_,J6o),e(L_,nO),e(nO,Y6o),e(L_,K6o),e(L,Z6o),e(L,x_),e(x_,fhe),e(fhe,e7o),e(x_,o7o),e(x_,sO),e(sO,r7o),e(x_,t7o),e(L,a7o),e(L,$_),e($_,mhe),e(mhe,n7o),e($_,s7o),e($_,lO),e(lO,l7o),e($_,i7o),e(L,d7o),e(L,k_),e(k_,ghe),e(ghe,c7o),e(k_,f7o),e(k_,iO),e(iO,m7o),e(k_,g7o),e(L,h7o),e(L,S_),e(S_,hhe),e(hhe,p7o),e(S_,u7o),e(S_,dO),e(dO,_7o),e(S_,b7o),e(L,v7o),e(L,R_),e(R_,phe),e(phe,F7o),e(R_,T7o),e(R_,cO),e(cO,M7o),e(R_,E7o),e(L,C7o),e(L,P_),e(P_,uhe),e(uhe,w7o),e(P_,A7o),e(P_,fO),e(fO,y7o),e(P_,L7o),e(L,x7o),e(L,B_),e(B_,_he),e(_he,$7o),e(B_,k7o),e(B_,mO),e(mO,S7o),e(B_,R7o),e(L,P7o),e(L,I_),e(I_,bhe),e(bhe,B7o),e(I_,I7o),e(I_,gO),e(gO,N7o),e(I_,q7o),e(L,j7o),e(L,N_),e(N_,vhe),e(vhe,D7o),e(N_,G7o),e(N_,hO),e(hO,O7o),e(N_,V7o),e(L,X7o),e(L,q_),e(q_,Fhe),e(Fhe,z7o),e(q_,Q7o),e(q_,pO),e(pO,W7o),e(q_,U7o),e(L,H7o),e(L,j_),e(j_,The),e(The,J7o),e(j_,Y7o),e(j_,uO),e(uO,K7o),e(j_,Z7o),e(L,eyo),e(L,D_),e(D_,Mhe),e(Mhe,oyo),e(D_,ryo),e(D_,_O),e(_O,tyo),e(D_,ayo),e(L,nyo),e(L,G_),e(G_,Ehe),e(Ehe,syo),e(G_,lyo),e(G_,bO),e(bO,iyo),e(G_,dyo),e(L,cyo),e(L,O_),e(O_,Che),e(Che,fyo),e(O_,myo),e(O_,vO),e(vO,gyo),e(O_,hyo),e(L,pyo),e(L,V_),e(V_,whe),e(whe,uyo),e(V_,_yo),e(V_,FO),e(FO,byo),e(V_,vyo),e(L,Fyo),e(L,X_),e(X_,Ahe),e(Ahe,Tyo),e(X_,Myo),e(X_,TO),e(TO,Eyo),e(X_,Cyo),e(L,wyo),e(L,z_),e(z_,yhe),e(yhe,Ayo),e(z_,yyo),e(z_,MO),e(MO,Lyo),e(z_,xyo),e(L,$yo),e(L,Q_),e(Q_,Lhe),e(Lhe,kyo),e(Q_,Syo),e(Q_,EO),e(EO,Ryo),e(Q_,Pyo),e(L,Byo),e(L,W_),e(W_,xhe),e(xhe,Iyo),e(W_,Nyo),e(W_,CO),e(CO,qyo),e(W_,jyo),e(L,Dyo),e(L,U_),e(U_,$he),e($he,Gyo),e(U_,Oyo),e(U_,wO),e(wO,Vyo),e(U_,Xyo),e(L,zyo),e(L,H_),e(H_,khe),e(khe,Qyo),e(H_,Wyo),e(H_,AO),e(AO,Uyo),e(H_,Hyo),e(L,Jyo),e(L,J_),e(J_,She),e(She,Yyo),e(J_,Kyo),e(J_,yO),e(yO,Zyo),e(J_,eLo),e(L,oLo),e(L,Y_),e(Y_,Rhe),e(Rhe,rLo),e(Y_,tLo),e(Y_,LO),e(LO,aLo),e(Y_,nLo),e(L,sLo),e(L,K_),e(K_,Phe),e(Phe,lLo),e(K_,iLo),e(K_,xO),e(xO,dLo),e(K_,cLo),e(L,fLo),e(L,Z_),e(Z_,Bhe),e(Bhe,mLo),e(Z_,gLo),e(Z_,$O),e($O,hLo),e(Z_,pLo),e(L,uLo),e(L,e1),e(e1,Ihe),e(Ihe,_Lo),e(e1,bLo),e(e1,kO),e(kO,vLo),e(e1,FLo),e(L,TLo),e(L,o1),e(o1,Nhe),e(Nhe,MLo),e(o1,ELo),e(o1,SO),e(SO,CLo),e(o1,wLo),e(L,ALo),e(L,r1),e(r1,qhe),e(qhe,yLo),e(r1,LLo),e(r1,RO),e(RO,xLo),e(r1,$Lo),e(L,kLo),e(L,t1),e(t1,jhe),e(jhe,SLo),e(t1,RLo),e(t1,PO),e(PO,PLo),e(t1,BLo),e(L,ILo),e(L,a1),e(a1,Dhe),e(Dhe,NLo),e(a1,qLo),e(a1,BO),e(BO,jLo),e(a1,DLo),e(L,GLo),e(L,n1),e(n1,Ghe),e(Ghe,OLo),e(n1,VLo),e(n1,IO),e(IO,XLo),e(n1,zLo),e(L,QLo),e(L,s1),e(s1,Ohe),e(Ohe,WLo),e(s1,ULo),e(s1,NO),e(NO,HLo),e(s1,JLo),e(L,YLo),e(L,l1),e(l1,Vhe),e(Vhe,KLo),e(l1,ZLo),e(l1,qO),e(qO,e9o),e(l1,o9o),e(L,r9o),e(L,i1),e(i1,Xhe),e(Xhe,t9o),e(i1,a9o),e(i1,jO),e(jO,n9o),e(i1,s9o),e(L,l9o),e(L,d1),e(d1,zhe),e(zhe,i9o),e(d1,d9o),e(d1,DO),e(DO,c9o),e(d1,f9o),e(L,m9o),e(L,c1),e(c1,Qhe),e(Qhe,g9o),e(c1,h9o),e(c1,GO),e(GO,p9o),e(c1,u9o),e(L,_9o),e(L,f1),e(f1,Whe),e(Whe,b9o),e(f1,v9o),e(f1,OO),e(OO,F9o),e(f1,T9o),e(L,M9o),e(L,m1),e(m1,Uhe),e(Uhe,E9o),e(m1,C9o),e(m1,VO),e(VO,w9o),e(m1,A9o),e(L,y9o),e(L,g1),e(g1,Hhe),e(Hhe,L9o),e(g1,x9o),e(g1,XO),e(XO,$9o),e(g1,k9o),e(L,S9o),e(L,h1),e(h1,Jhe),e(Jhe,R9o),e(h1,P9o),e(h1,zO),e(zO,B9o),e(h1,I9o),e(L,N9o),e(L,p1),e(p1,Yhe),e(Yhe,q9o),e(p1,j9o),e(p1,QO),e(QO,D9o),e(p1,G9o),e(L,O9o),e(L,u1),e(u1,Khe),e(Khe,V9o),e(u1,X9o),e(u1,WO),e(WO,z9o),e(u1,Q9o),e(L,W9o),e(L,_1),e(_1,Zhe),e(Zhe,U9o),e(_1,H9o),e(_1,UO),e(UO,J9o),e(_1,Y9o),e(L,K9o),e(L,b1),e(b1,epe),e(epe,Z9o),e(b1,exo),e(b1,HO),e(HO,oxo),e(b1,rxo),e(L,txo),e(L,v1),e(v1,ope),e(ope,axo),e(v1,nxo),e(v1,JO),e(JO,sxo),e(v1,lxo),e(L,ixo),e(L,F1),e(F1,rpe),e(rpe,dxo),e(F1,cxo),e(F1,YO),e(YO,fxo),e(F1,mxo),e(L,gxo),e(L,T1),e(T1,tpe),e(tpe,hxo),e(T1,pxo),e(T1,KO),e(KO,uxo),e(T1,_xo),e(L,bxo),e(L,M1),e(M1,ape),e(ape,vxo),e(M1,Fxo),e(M1,ZO),e(ZO,Txo),e(M1,Mxo),e(L,Exo),e(L,E1),e(E1,npe),e(npe,Cxo),e(E1,wxo),e(E1,eV),e(eV,Axo),e(E1,yxo),e(L,Lxo),e(L,C1),e(C1,spe),e(spe,xxo),e(C1,$xo),e(C1,oV),e(oV,kxo),e(C1,Sxo),e(L,Rxo),e(L,w1),e(w1,lpe),e(lpe,Pxo),e(w1,Bxo),e(w1,rV),e(rV,Ixo),e(w1,Nxo),e(L,qxo),e(L,A1),e(A1,ipe),e(ipe,jxo),e(A1,Dxo),e(A1,tV),e(tV,Gxo),e(A1,Oxo),e(L,Vxo),e(L,y1),e(y1,dpe),e(dpe,Xxo),e(y1,zxo),e(y1,aV),e(aV,Qxo),e(y1,Wxo),e(L,Uxo),e(L,L1),e(L1,cpe),e(cpe,Hxo),e(L1,Jxo),e(L1,nV),e(nV,Yxo),e(L1,Kxo),e(L,Zxo),e(L,x1),e(x1,fpe),e(fpe,e$o),e(x1,o$o),e(x1,sV),e(sV,r$o),e(x1,t$o),e(L,a$o),e(L,$1),e($1,mpe),e(mpe,n$o),e($1,s$o),e($1,lV),e(lV,l$o),e($1,i$o),e(L,d$o),e(L,k1),e(k1,gpe),e(gpe,c$o),e(k1,f$o),e(k1,iV),e(iV,m$o),e(k1,g$o),e(L,h$o),e(L,S1),e(S1,hpe),e(hpe,p$o),e(S1,u$o),e(S1,dV),e(dV,_$o),e(S1,b$o),e(L,v$o),e(L,R1),e(R1,ppe),e(ppe,F$o),e(R1,T$o),e(R1,cV),e(cV,M$o),e(R1,E$o),e(L,C$o),e(L,P1),e(P1,upe),e(upe,w$o),e(P1,A$o),e(P1,fV),e(fV,y$o),e(P1,L$o),e(Ye,x$o),e(Ye,B1),e(B1,$$o),e(B1,_pe),e(_pe,k$o),e(B1,S$o),e(B1,bpe),e(bpe,R$o),e(Ye,P$o),M(I1,Ye,null),b(f,UUe,_),b(f,fd,_),e(fd,N1),e(N1,vpe),M(i9,vpe,null),e(fd,B$o),e(fd,Fpe),e(Fpe,I$o),b(f,HUe,_),b(f,Po,_),M(d9,Po,null),e(Po,N$o),e(Po,md),e(md,q$o),e(md,mV),e(mV,j$o),e(md,D$o),e(md,gV),e(gV,G$o),e(md,O$o),e(Po,V$o),e(Po,c9),e(c9,X$o),e(c9,Tpe),e(Tpe,z$o),e(c9,Q$o),e(Po,W$o),e(Po,pt),M(f9,pt,null),e(pt,U$o),e(pt,Mpe),e(Mpe,H$o),e(pt,J$o),e(pt,gd),e(gd,Y$o),e(gd,Epe),e(Epe,K$o),e(gd,Z$o),e(gd,hV),e(hV,eko),e(gd,oko),e(pt,rko),M(q1,pt,null),e(Po,tko),e(Po,Ke),M(m9,Ke,null),e(Ke,ako),e(Ke,Cpe),e(Cpe,nko),e(Ke,sko),e(Ke,Ua),e(Ua,lko),e(Ua,wpe),e(wpe,iko),e(Ua,dko),e(Ua,Ape),e(Ape,cko),e(Ua,fko),e(Ua,ype),e(ype,mko),e(Ua,gko),e(Ke,hko),e(Ke,G),e(G,j1),e(j1,Lpe),e(Lpe,pko),e(j1,uko),e(j1,pV),e(pV,_ko),e(j1,bko),e(G,vko),e(G,D1),e(D1,xpe),e(xpe,Fko),e(D1,Tko),e(D1,uV),e(uV,Mko),e(D1,Eko),e(G,Cko),e(G,G1),e(G1,$pe),e($pe,wko),e(G1,Ako),e(G1,_V),e(_V,yko),e(G1,Lko),e(G,xko),e(G,O1),e(O1,kpe),e(kpe,$ko),e(O1,kko),e(O1,bV),e(bV,Sko),e(O1,Rko),e(G,Pko),e(G,V1),e(V1,Spe),e(Spe,Bko),e(V1,Iko),e(V1,vV),e(vV,Nko),e(V1,qko),e(G,jko),e(G,X1),e(X1,Rpe),e(Rpe,Dko),e(X1,Gko),e(X1,FV),e(FV,Oko),e(X1,Vko),e(G,Xko),e(G,z1),e(z1,Ppe),e(Ppe,zko),e(z1,Qko),e(z1,TV),e(TV,Wko),e(z1,Uko),e(G,Hko),e(G,Q1),e(Q1,Bpe),e(Bpe,Jko),e(Q1,Yko),e(Q1,MV),e(MV,Kko),e(Q1,Zko),e(G,eSo),e(G,W1),e(W1,Ipe),e(Ipe,oSo),e(W1,rSo),e(W1,EV),e(EV,tSo),e(W1,aSo),e(G,nSo),e(G,U1),e(U1,Npe),e(Npe,sSo),e(U1,lSo),e(U1,CV),e(CV,iSo),e(U1,dSo),e(G,cSo),e(G,H1),e(H1,qpe),e(qpe,fSo),e(H1,mSo),e(H1,wV),e(wV,gSo),e(H1,hSo),e(G,pSo),e(G,J1),e(J1,jpe),e(jpe,uSo),e(J1,_So),e(J1,AV),e(AV,bSo),e(J1,vSo),e(G,FSo),e(G,Y1),e(Y1,Dpe),e(Dpe,TSo),e(Y1,MSo),e(Y1,yV),e(yV,ESo),e(Y1,CSo),e(G,wSo),e(G,K1),e(K1,Gpe),e(Gpe,ASo),e(K1,ySo),e(K1,LV),e(LV,LSo),e(K1,xSo),e(G,$So),e(G,Z1),e(Z1,Ope),e(Ope,kSo),e(Z1,SSo),e(Z1,xV),e(xV,RSo),e(Z1,PSo),e(G,BSo),e(G,e4),e(e4,Vpe),e(Vpe,ISo),e(e4,NSo),e(e4,$V),e($V,qSo),e(e4,jSo),e(G,DSo),e(G,o4),e(o4,Xpe),e(Xpe,GSo),e(o4,OSo),e(o4,kV),e(kV,VSo),e(o4,XSo),e(G,zSo),e(G,r4),e(r4,zpe),e(zpe,QSo),e(r4,WSo),e(r4,SV),e(SV,USo),e(r4,HSo),e(G,JSo),e(G,t4),e(t4,Qpe),e(Qpe,YSo),e(t4,KSo),e(t4,RV),e(RV,ZSo),e(t4,eRo),e(G,oRo),e(G,a4),e(a4,Wpe),e(Wpe,rRo),e(a4,tRo),e(a4,PV),e(PV,aRo),e(a4,nRo),e(G,sRo),e(G,n4),e(n4,Upe),e(Upe,lRo),e(n4,iRo),e(n4,BV),e(BV,dRo),e(n4,cRo),e(G,fRo),e(G,s4),e(s4,Hpe),e(Hpe,mRo),e(s4,gRo),e(s4,IV),e(IV,hRo),e(s4,pRo),e(G,uRo),e(G,l4),e(l4,Jpe),e(Jpe,_Ro),e(l4,bRo),e(l4,NV),e(NV,vRo),e(l4,FRo),e(G,TRo),e(G,i4),e(i4,Ype),e(Ype,MRo),e(i4,ERo),e(i4,qV),e(qV,CRo),e(i4,wRo),e(G,ARo),e(G,d4),e(d4,Kpe),e(Kpe,yRo),e(d4,LRo),e(d4,jV),e(jV,xRo),e(d4,$Ro),e(G,kRo),e(G,c4),e(c4,Zpe),e(Zpe,SRo),e(c4,RRo),e(c4,DV),e(DV,PRo),e(c4,BRo),e(G,IRo),e(G,f4),e(f4,eue),e(eue,NRo),e(f4,qRo),e(f4,GV),e(GV,jRo),e(f4,DRo),e(G,GRo),e(G,m4),e(m4,oue),e(oue,ORo),e(m4,VRo),e(m4,OV),e(OV,XRo),e(m4,zRo),e(G,QRo),e(G,g4),e(g4,rue),e(rue,WRo),e(g4,URo),e(g4,VV),e(VV,HRo),e(g4,JRo),e(G,YRo),e(G,h4),e(h4,tue),e(tue,KRo),e(h4,ZRo),e(h4,XV),e(XV,ePo),e(h4,oPo),e(G,rPo),e(G,p4),e(p4,aue),e(aue,tPo),e(p4,aPo),e(p4,zV),e(zV,nPo),e(p4,sPo),e(G,lPo),e(G,u4),e(u4,nue),e(nue,iPo),e(u4,dPo),e(u4,QV),e(QV,cPo),e(u4,fPo),e(G,mPo),e(G,_4),e(_4,sue),e(sue,gPo),e(_4,hPo),e(_4,WV),e(WV,pPo),e(_4,uPo),e(G,_Po),e(G,b4),e(b4,lue),e(lue,bPo),e(b4,vPo),e(b4,UV),e(UV,FPo),e(b4,TPo),e(G,MPo),e(G,v4),e(v4,iue),e(iue,EPo),e(v4,CPo),e(v4,HV),e(HV,wPo),e(v4,APo),e(G,yPo),e(G,F4),e(F4,due),e(due,LPo),e(F4,xPo),e(F4,JV),e(JV,$Po),e(F4,kPo),e(G,SPo),e(G,T4),e(T4,cue),e(cue,RPo),e(T4,PPo),e(T4,YV),e(YV,BPo),e(T4,IPo),e(G,NPo),e(G,M4),e(M4,fue),e(fue,qPo),e(M4,jPo),e(M4,KV),e(KV,DPo),e(M4,GPo),e(G,OPo),e(G,E4),e(E4,mue),e(mue,VPo),e(E4,XPo),e(E4,ZV),e(ZV,zPo),e(E4,QPo),e(G,WPo),e(G,C4),e(C4,gue),e(gue,UPo),e(C4,HPo),e(C4,eX),e(eX,JPo),e(C4,YPo),e(G,KPo),e(G,w4),e(w4,hue),e(hue,ZPo),e(w4,eBo),e(w4,oX),e(oX,oBo),e(w4,rBo),e(G,tBo),e(G,A4),e(A4,pue),e(pue,aBo),e(A4,nBo),e(A4,rX),e(rX,sBo),e(A4,lBo),e(G,iBo),e(G,y4),e(y4,uue),e(uue,dBo),e(y4,cBo),e(y4,tX),e(tX,fBo),e(y4,mBo),e(G,gBo),e(G,L4),e(L4,_ue),e(_ue,hBo),e(L4,pBo),e(L4,aX),e(aX,uBo),e(L4,_Bo),e(G,bBo),e(G,x4),e(x4,bue),e(bue,vBo),e(x4,FBo),e(x4,nX),e(nX,TBo),e(x4,MBo),e(G,EBo),e(G,$4),e($4,vue),e(vue,CBo),e($4,wBo),e($4,sX),e(sX,ABo),e($4,yBo),e(G,LBo),e(G,k4),e(k4,Fue),e(Fue,xBo),e(k4,$Bo),e(k4,lX),e(lX,kBo),e(k4,SBo),e(Ke,RBo),e(Ke,S4),e(S4,PBo),e(S4,Tue),e(Tue,BBo),e(S4,IBo),e(S4,Mue),e(Mue,NBo),e(Ke,qBo),M(R4,Ke,null),b(f,JUe,_),b(f,hd,_),e(hd,P4),e(P4,Eue),M(g9,Eue,null),e(hd,jBo),e(hd,Cue),e(Cue,DBo),b(f,YUe,_),b(f,Bo,_),M(h9,Bo,null),e(Bo,GBo),e(Bo,pd),e(pd,OBo),e(pd,iX),e(iX,VBo),e(pd,XBo),e(pd,dX),e(dX,zBo),e(pd,QBo),e(Bo,WBo),e(Bo,p9),e(p9,UBo),e(p9,wue),e(wue,HBo),e(p9,JBo),e(Bo,YBo),e(Bo,ut),M(u9,ut,null),e(ut,KBo),e(ut,Aue),e(Aue,ZBo),e(ut,eIo),e(ut,ud),e(ud,oIo),e(ud,yue),e(yue,rIo),e(ud,tIo),e(ud,cX),e(cX,aIo),e(ud,nIo),e(ut,sIo),M(B4,ut,null),e(Bo,lIo),e(Bo,Ze),M(_9,Ze,null),e(Ze,iIo),e(Ze,Lue),e(Lue,dIo),e(Ze,cIo),e(Ze,Ha),e(Ha,fIo),e(Ha,xue),e(xue,mIo),e(Ha,gIo),e(Ha,$ue),e($ue,hIo),e(Ha,pIo),e(Ha,kue),e(kue,uIo),e(Ha,_Io),e(Ze,bIo),e(Ze,z),e(z,I4),e(I4,Sue),e(Sue,vIo),e(I4,FIo),e(I4,fX),e(fX,TIo),e(I4,MIo),e(z,EIo),e(z,N4),e(N4,Rue),e(Rue,CIo),e(N4,wIo),e(N4,mX),e(mX,AIo),e(N4,yIo),e(z,LIo),e(z,q4),e(q4,Pue),e(Pue,xIo),e(q4,$Io),e(q4,gX),e(gX,kIo),e(q4,SIo),e(z,RIo),e(z,j4),e(j4,Bue),e(Bue,PIo),e(j4,BIo),e(j4,hX),e(hX,IIo),e(j4,NIo),e(z,qIo),e(z,D4),e(D4,Iue),e(Iue,jIo),e(D4,DIo),e(D4,pX),e(pX,GIo),e(D4,OIo),e(z,VIo),e(z,G4),e(G4,Nue),e(Nue,XIo),e(G4,zIo),e(G4,uX),e(uX,QIo),e(G4,WIo),e(z,UIo),e(z,O4),e(O4,que),e(que,HIo),e(O4,JIo),e(O4,_X),e(_X,YIo),e(O4,KIo),e(z,ZIo),e(z,V4),e(V4,jue),e(jue,eNo),e(V4,oNo),e(V4,bX),e(bX,rNo),e(V4,tNo),e(z,aNo),e(z,X4),e(X4,Due),e(Due,nNo),e(X4,sNo),e(X4,vX),e(vX,lNo),e(X4,iNo),e(z,dNo),e(z,z4),e(z4,Gue),e(Gue,cNo),e(z4,fNo),e(z4,FX),e(FX,mNo),e(z4,gNo),e(z,hNo),e(z,Q4),e(Q4,Oue),e(Oue,pNo),e(Q4,uNo),e(Q4,TX),e(TX,_No),e(Q4,bNo),e(z,vNo),e(z,W4),e(W4,Vue),e(Vue,FNo),e(W4,TNo),e(W4,MX),e(MX,MNo),e(W4,ENo),e(z,CNo),e(z,U4),e(U4,Xue),e(Xue,wNo),e(U4,ANo),e(U4,EX),e(EX,yNo),e(U4,LNo),e(z,xNo),e(z,H4),e(H4,zue),e(zue,$No),e(H4,kNo),e(H4,CX),e(CX,SNo),e(H4,RNo),e(z,PNo),e(z,J4),e(J4,Que),e(Que,BNo),e(J4,INo),e(J4,wX),e(wX,NNo),e(J4,qNo),e(z,jNo),e(z,Y4),e(Y4,Wue),e(Wue,DNo),e(Y4,GNo),e(Y4,AX),e(AX,ONo),e(Y4,VNo),e(z,XNo),e(z,K4),e(K4,Uue),e(Uue,zNo),e(K4,QNo),e(K4,yX),e(yX,WNo),e(K4,UNo),e(z,HNo),e(z,Z4),e(Z4,Hue),e(Hue,JNo),e(Z4,YNo),e(Z4,LX),e(LX,KNo),e(Z4,ZNo),e(z,eqo),e(z,e2),e(e2,Jue),e(Jue,oqo),e(e2,rqo),e(e2,xX),e(xX,tqo),e(e2,aqo),e(z,nqo),e(z,o2),e(o2,Yue),e(Yue,sqo),e(o2,lqo),e(o2,$X),e($X,iqo),e(o2,dqo),e(z,cqo),e(z,r2),e(r2,Kue),e(Kue,fqo),e(r2,mqo),e(r2,kX),e(kX,gqo),e(r2,hqo),e(z,pqo),e(z,t2),e(t2,Zue),e(Zue,uqo),e(t2,_qo),e(t2,SX),e(SX,bqo),e(t2,vqo),e(z,Fqo),e(z,a2),e(a2,e_e),e(e_e,Tqo),e(a2,Mqo),e(a2,RX),e(RX,Eqo),e(a2,Cqo),e(z,wqo),e(z,n2),e(n2,o_e),e(o_e,Aqo),e(n2,yqo),e(n2,PX),e(PX,Lqo),e(n2,xqo),e(z,$qo),e(z,s2),e(s2,r_e),e(r_e,kqo),e(s2,Sqo),e(s2,BX),e(BX,Rqo),e(s2,Pqo),e(z,Bqo),e(z,l2),e(l2,t_e),e(t_e,Iqo),e(l2,Nqo),e(l2,IX),e(IX,qqo),e(l2,jqo),e(z,Dqo),e(z,i2),e(i2,a_e),e(a_e,Gqo),e(i2,Oqo),e(i2,NX),e(NX,Vqo),e(i2,Xqo),e(z,zqo),e(z,d2),e(d2,n_e),e(n_e,Qqo),e(d2,Wqo),e(d2,qX),e(qX,Uqo),e(d2,Hqo),e(z,Jqo),e(z,c2),e(c2,s_e),e(s_e,Yqo),e(c2,Kqo),e(c2,jX),e(jX,Zqo),e(c2,ejo),e(z,ojo),e(z,f2),e(f2,l_e),e(l_e,rjo),e(f2,tjo),e(f2,DX),e(DX,ajo),e(f2,njo),e(z,sjo),e(z,m2),e(m2,i_e),e(i_e,ljo),e(m2,ijo),e(m2,GX),e(GX,djo),e(m2,cjo),e(z,fjo),e(z,g2),e(g2,d_e),e(d_e,mjo),e(g2,gjo),e(g2,OX),e(OX,hjo),e(g2,pjo),e(z,ujo),e(z,h2),e(h2,c_e),e(c_e,_jo),e(h2,bjo),e(h2,VX),e(VX,vjo),e(h2,Fjo),e(z,Tjo),e(z,p2),e(p2,f_e),e(f_e,Mjo),e(p2,Ejo),e(p2,XX),e(XX,Cjo),e(p2,wjo),e(z,Ajo),e(z,u2),e(u2,m_e),e(m_e,yjo),e(u2,Ljo),e(u2,zX),e(zX,xjo),e(u2,$jo),e(z,kjo),e(z,_2),e(_2,g_e),e(g_e,Sjo),e(_2,Rjo),e(_2,QX),e(QX,Pjo),e(_2,Bjo),e(z,Ijo),e(z,b2),e(b2,h_e),e(h_e,Njo),e(b2,qjo),e(b2,WX),e(WX,jjo),e(b2,Djo),e(z,Gjo),e(z,v2),e(v2,p_e),e(p_e,Ojo),e(v2,Vjo),e(v2,UX),e(UX,Xjo),e(v2,zjo),e(z,Qjo),e(z,F2),e(F2,u_e),e(u_e,Wjo),e(F2,Ujo),e(F2,HX),e(HX,Hjo),e(F2,Jjo),e(z,Yjo),e(z,T2),e(T2,__e),e(__e,Kjo),e(T2,Zjo),e(T2,JX),e(JX,eDo),e(T2,oDo),e(Ze,rDo),e(Ze,M2),e(M2,tDo),e(M2,b_e),e(b_e,aDo),e(M2,nDo),e(M2,v_e),e(v_e,sDo),e(Ze,lDo),M(E2,Ze,null),b(f,KUe,_),b(f,_d,_),e(_d,C2),e(C2,F_e),M(b9,F_e,null),e(_d,iDo),e(_d,T_e),e(T_e,dDo),b(f,ZUe,_),b(f,Io,_),M(v9,Io,null),e(Io,cDo),e(Io,bd),e(bd,fDo),e(bd,YX),e(YX,mDo),e(bd,gDo),e(bd,KX),e(KX,hDo),e(bd,pDo),e(Io,uDo),e(Io,F9),e(F9,_Do),e(F9,M_e),e(M_e,bDo),e(F9,vDo),e(Io,FDo),e(Io,_t),M(T9,_t,null),e(_t,TDo),e(_t,E_e),e(E_e,MDo),e(_t,EDo),e(_t,vd),e(vd,CDo),e(vd,C_e),e(C_e,wDo),e(vd,ADo),e(vd,ZX),e(ZX,yDo),e(vd,LDo),e(_t,xDo),M(w2,_t,null),e(Io,$Do),e(Io,eo),M(M9,eo,null),e(eo,kDo),e(eo,w_e),e(w_e,SDo),e(eo,RDo),e(eo,Ja),e(Ja,PDo),e(Ja,A_e),e(A_e,BDo),e(Ja,IDo),e(Ja,y_e),e(y_e,NDo),e(Ja,qDo),e(Ja,L_e),e(L_e,jDo),e(Ja,DDo),e(eo,GDo),e(eo,U),e(U,A2),e(A2,x_e),e(x_e,ODo),e(A2,VDo),e(A2,ez),e(ez,XDo),e(A2,zDo),e(U,QDo),e(U,y2),e(y2,$_e),e($_e,WDo),e(y2,UDo),e(y2,oz),e(oz,HDo),e(y2,JDo),e(U,YDo),e(U,L2),e(L2,k_e),e(k_e,KDo),e(L2,ZDo),e(L2,rz),e(rz,eGo),e(L2,oGo),e(U,rGo),e(U,x2),e(x2,S_e),e(S_e,tGo),e(x2,aGo),e(x2,tz),e(tz,nGo),e(x2,sGo),e(U,lGo),e(U,$2),e($2,R_e),e(R_e,iGo),e($2,dGo),e($2,az),e(az,cGo),e($2,fGo),e(U,mGo),e(U,k2),e(k2,P_e),e(P_e,gGo),e(k2,hGo),e(k2,nz),e(nz,pGo),e(k2,uGo),e(U,_Go),e(U,S2),e(S2,B_e),e(B_e,bGo),e(S2,vGo),e(S2,sz),e(sz,FGo),e(S2,TGo),e(U,MGo),e(U,R2),e(R2,I_e),e(I_e,EGo),e(R2,CGo),e(R2,lz),e(lz,wGo),e(R2,AGo),e(U,yGo),e(U,P2),e(P2,N_e),e(N_e,LGo),e(P2,xGo),e(P2,iz),e(iz,$Go),e(P2,kGo),e(U,SGo),e(U,B2),e(B2,q_e),e(q_e,RGo),e(B2,PGo),e(B2,dz),e(dz,BGo),e(B2,IGo),e(U,NGo),e(U,I2),e(I2,j_e),e(j_e,qGo),e(I2,jGo),e(I2,cz),e(cz,DGo),e(I2,GGo),e(U,OGo),e(U,N2),e(N2,D_e),e(D_e,VGo),e(N2,XGo),e(N2,fz),e(fz,zGo),e(N2,QGo),e(U,WGo),e(U,q2),e(q2,G_e),e(G_e,UGo),e(q2,HGo),e(q2,mz),e(mz,JGo),e(q2,YGo),e(U,KGo),e(U,j2),e(j2,O_e),e(O_e,ZGo),e(j2,eOo),e(j2,gz),e(gz,oOo),e(j2,rOo),e(U,tOo),e(U,D2),e(D2,V_e),e(V_e,aOo),e(D2,nOo),e(D2,hz),e(hz,sOo),e(D2,lOo),e(U,iOo),e(U,G2),e(G2,X_e),e(X_e,dOo),e(G2,cOo),e(G2,pz),e(pz,fOo),e(G2,mOo),e(U,gOo),e(U,O2),e(O2,z_e),e(z_e,hOo),e(O2,pOo),e(O2,uz),e(uz,uOo),e(O2,_Oo),e(U,bOo),e(U,V2),e(V2,Q_e),e(Q_e,vOo),e(V2,FOo),e(V2,_z),e(_z,TOo),e(V2,MOo),e(U,EOo),e(U,X2),e(X2,W_e),e(W_e,COo),e(X2,wOo),e(X2,bz),e(bz,AOo),e(X2,yOo),e(U,LOo),e(U,z2),e(z2,U_e),e(U_e,xOo),e(z2,$Oo),e(z2,vz),e(vz,kOo),e(z2,SOo),e(U,ROo),e(U,Q2),e(Q2,H_e),e(H_e,POo),e(Q2,BOo),e(Q2,Fz),e(Fz,IOo),e(Q2,NOo),e(U,qOo),e(U,W2),e(W2,J_e),e(J_e,jOo),e(W2,DOo),e(W2,Tz),e(Tz,GOo),e(W2,OOo),e(U,VOo),e(U,U2),e(U2,Y_e),e(Y_e,XOo),e(U2,zOo),e(U2,Mz),e(Mz,QOo),e(U2,WOo),e(U,UOo),e(U,H2),e(H2,K_e),e(K_e,HOo),e(H2,JOo),e(H2,Ez),e(Ez,YOo),e(H2,KOo),e(U,ZOo),e(U,J2),e(J2,Z_e),e(Z_e,eVo),e(J2,oVo),e(J2,Cz),e(Cz,rVo),e(J2,tVo),e(U,aVo),e(U,Y2),e(Y2,e1e),e(e1e,nVo),e(Y2,sVo),e(Y2,wz),e(wz,lVo),e(Y2,iVo),e(U,dVo),e(U,K2),e(K2,o1e),e(o1e,cVo),e(K2,fVo),e(K2,Az),e(Az,mVo),e(K2,gVo),e(U,hVo),e(U,Z2),e(Z2,r1e),e(r1e,pVo),e(Z2,uVo),e(Z2,yz),e(yz,_Vo),e(Z2,bVo),e(U,vVo),e(U,eb),e(eb,t1e),e(t1e,FVo),e(eb,TVo),e(eb,Lz),e(Lz,MVo),e(eb,EVo),e(U,CVo),e(U,ob),e(ob,a1e),e(a1e,wVo),e(ob,AVo),e(ob,xz),e(xz,yVo),e(ob,LVo),e(U,xVo),e(U,rb),e(rb,n1e),e(n1e,$Vo),e(rb,kVo),e(rb,$z),e($z,SVo),e(rb,RVo),e(U,PVo),e(U,tb),e(tb,s1e),e(s1e,BVo),e(tb,IVo),e(tb,kz),e(kz,NVo),e(tb,qVo),e(U,jVo),e(U,ab),e(ab,l1e),e(l1e,DVo),e(ab,GVo),e(ab,Sz),e(Sz,OVo),e(ab,VVo),e(U,XVo),e(U,nb),e(nb,i1e),e(i1e,zVo),e(nb,QVo),e(nb,d1e),e(d1e,WVo),e(nb,UVo),e(U,HVo),e(U,sb),e(sb,c1e),e(c1e,JVo),e(sb,YVo),e(sb,Rz),e(Rz,KVo),e(sb,ZVo),e(U,eXo),e(U,lb),e(lb,f1e),e(f1e,oXo),e(lb,rXo),e(lb,Pz),e(Pz,tXo),e(lb,aXo),e(U,nXo),e(U,ib),e(ib,m1e),e(m1e,sXo),e(ib,lXo),e(ib,Bz),e(Bz,iXo),e(ib,dXo),e(U,cXo),e(U,db),e(db,g1e),e(g1e,fXo),e(db,mXo),e(db,Iz),e(Iz,gXo),e(db,hXo),e(eo,pXo),e(eo,cb),e(cb,uXo),e(cb,h1e),e(h1e,_Xo),e(cb,bXo),e(cb,p1e),e(p1e,vXo),e(eo,FXo),M(fb,eo,null),b(f,eHe,_),b(f,Fd,_),e(Fd,mb),e(mb,u1e),M(E9,u1e,null),e(Fd,TXo),e(Fd,_1e),e(_1e,MXo),b(f,oHe,_),b(f,No,_),M(C9,No,null),e(No,EXo),e(No,Td),e(Td,CXo),e(Td,Nz),e(Nz,wXo),e(Td,AXo),e(Td,qz),e(qz,yXo),e(Td,LXo),e(No,xXo),e(No,w9),e(w9,$Xo),e(w9,b1e),e(b1e,kXo),e(w9,SXo),e(No,RXo),e(No,bt),M(A9,bt,null),e(bt,PXo),e(bt,v1e),e(v1e,BXo),e(bt,IXo),e(bt,Md),e(Md,NXo),e(Md,F1e),e(F1e,qXo),e(Md,jXo),e(Md,jz),e(jz,DXo),e(Md,GXo),e(bt,OXo),M(gb,bt,null),e(No,VXo),e(No,oo),M(y9,oo,null),e(oo,XXo),e(oo,T1e),e(T1e,zXo),e(oo,QXo),e(oo,Ya),e(Ya,WXo),e(Ya,M1e),e(M1e,UXo),e(Ya,HXo),e(Ya,E1e),e(E1e,JXo),e(Ya,YXo),e(Ya,C1e),e(C1e,KXo),e(Ya,ZXo),e(oo,ezo),e(oo,me),e(me,hb),e(hb,w1e),e(w1e,ozo),e(hb,rzo),e(hb,Dz),e(Dz,tzo),e(hb,azo),e(me,nzo),e(me,pb),e(pb,A1e),e(A1e,szo),e(pb,lzo),e(pb,Gz),e(Gz,izo),e(pb,dzo),e(me,czo),e(me,ub),e(ub,y1e),e(y1e,fzo),e(ub,mzo),e(ub,Oz),e(Oz,gzo),e(ub,hzo),e(me,pzo),e(me,_b),e(_b,L1e),e(L1e,uzo),e(_b,_zo),e(_b,Vz),e(Vz,bzo),e(_b,vzo),e(me,Fzo),e(me,bb),e(bb,x1e),e(x1e,Tzo),e(bb,Mzo),e(bb,Xz),e(Xz,Ezo),e(bb,Czo),e(me,wzo),e(me,vb),e(vb,$1e),e($1e,Azo),e(vb,yzo),e(vb,zz),e(zz,Lzo),e(vb,xzo),e(me,$zo),e(me,Fb),e(Fb,k1e),e(k1e,kzo),e(Fb,Szo),e(Fb,Qz),e(Qz,Rzo),e(Fb,Pzo),e(me,Bzo),e(me,Tb),e(Tb,S1e),e(S1e,Izo),e(Tb,Nzo),e(Tb,Wz),e(Wz,qzo),e(Tb,jzo),e(me,Dzo),e(me,Mb),e(Mb,R1e),e(R1e,Gzo),e(Mb,Ozo),e(Mb,Uz),e(Uz,Vzo),e(Mb,Xzo),e(me,zzo),e(me,Eb),e(Eb,P1e),e(P1e,Qzo),e(Eb,Wzo),e(Eb,Hz),e(Hz,Uzo),e(Eb,Hzo),e(me,Jzo),e(me,Cb),e(Cb,B1e),e(B1e,Yzo),e(Cb,Kzo),e(Cb,Jz),e(Jz,Zzo),e(Cb,eQo),e(me,oQo),e(me,wb),e(wb,I1e),e(I1e,rQo),e(wb,tQo),e(wb,Yz),e(Yz,aQo),e(wb,nQo),e(me,sQo),e(me,Ab),e(Ab,N1e),e(N1e,lQo),e(Ab,iQo),e(Ab,Kz),e(Kz,dQo),e(Ab,cQo),e(me,fQo),e(me,yb),e(yb,q1e),e(q1e,mQo),e(yb,gQo),e(yb,Zz),e(Zz,hQo),e(yb,pQo),e(me,uQo),e(me,Lb),e(Lb,j1e),e(j1e,_Qo),e(Lb,bQo),e(Lb,eQ),e(eQ,vQo),e(Lb,FQo),e(me,TQo),e(me,xb),e(xb,D1e),e(D1e,MQo),e(xb,EQo),e(xb,oQ),e(oQ,CQo),e(xb,wQo),e(me,AQo),e(me,$b),e($b,G1e),e(G1e,yQo),e($b,LQo),e($b,rQ),e(rQ,xQo),e($b,$Qo),e(me,kQo),e(me,kb),e(kb,O1e),e(O1e,SQo),e(kb,RQo),e(kb,tQ),e(tQ,PQo),e(kb,BQo),e(me,IQo),e(me,Sb),e(Sb,V1e),e(V1e,NQo),e(Sb,qQo),e(Sb,aQ),e(aQ,jQo),e(Sb,DQo),e(oo,GQo),e(oo,Rb),e(Rb,OQo),e(Rb,X1e),e(X1e,VQo),e(Rb,XQo),e(Rb,z1e),e(z1e,zQo),e(oo,QQo),M(Pb,oo,null),b(f,rHe,_),b(f,Ed,_),e(Ed,Bb),e(Bb,Q1e),M(L9,Q1e,null),e(Ed,WQo),e(Ed,W1e),e(W1e,UQo),b(f,tHe,_),b(f,qo,_),M(x9,qo,null),e(qo,HQo),e(qo,Cd),e(Cd,JQo),e(Cd,nQ),e(nQ,YQo),e(Cd,KQo),e(Cd,sQ),e(sQ,ZQo),e(Cd,eWo),e(qo,oWo),e(qo,$9),e($9,rWo),e($9,U1e),e(U1e,tWo),e($9,aWo),e(qo,nWo),e(qo,vt),M(k9,vt,null),e(vt,sWo),e(vt,H1e),e(H1e,lWo),e(vt,iWo),e(vt,wd),e(wd,dWo),e(wd,J1e),e(J1e,cWo),e(wd,fWo),e(wd,lQ),e(lQ,mWo),e(wd,gWo),e(vt,hWo),M(Ib,vt,null),e(qo,pWo),e(qo,ro),M(S9,ro,null),e(ro,uWo),e(ro,Y1e),e(Y1e,_Wo),e(ro,bWo),e(ro,Ka),e(Ka,vWo),e(Ka,K1e),e(K1e,FWo),e(Ka,TWo),e(Ka,Z1e),e(Z1e,MWo),e(Ka,EWo),e(Ka,e4e),e(e4e,CWo),e(Ka,wWo),e(ro,AWo),e(ro,N),e(N,Nb),e(Nb,o4e),e(o4e,yWo),e(Nb,LWo),e(Nb,iQ),e(iQ,xWo),e(Nb,$Wo),e(N,kWo),e(N,qb),e(qb,r4e),e(r4e,SWo),e(qb,RWo),e(qb,dQ),e(dQ,PWo),e(qb,BWo),e(N,IWo),e(N,jb),e(jb,t4e),e(t4e,NWo),e(jb,qWo),e(jb,cQ),e(cQ,jWo),e(jb,DWo),e(N,GWo),e(N,Db),e(Db,a4e),e(a4e,OWo),e(Db,VWo),e(Db,fQ),e(fQ,XWo),e(Db,zWo),e(N,QWo),e(N,Gb),e(Gb,n4e),e(n4e,WWo),e(Gb,UWo),e(Gb,mQ),e(mQ,HWo),e(Gb,JWo),e(N,YWo),e(N,Ob),e(Ob,s4e),e(s4e,KWo),e(Ob,ZWo),e(Ob,gQ),e(gQ,eUo),e(Ob,oUo),e(N,rUo),e(N,Vb),e(Vb,l4e),e(l4e,tUo),e(Vb,aUo),e(Vb,hQ),e(hQ,nUo),e(Vb,sUo),e(N,lUo),e(N,Xb),e(Xb,i4e),e(i4e,iUo),e(Xb,dUo),e(Xb,pQ),e(pQ,cUo),e(Xb,fUo),e(N,mUo),e(N,zb),e(zb,d4e),e(d4e,gUo),e(zb,hUo),e(zb,uQ),e(uQ,pUo),e(zb,uUo),e(N,_Uo),e(N,Qb),e(Qb,c4e),e(c4e,bUo),e(Qb,vUo),e(Qb,_Q),e(_Q,FUo),e(Qb,TUo),e(N,MUo),e(N,Wb),e(Wb,f4e),e(f4e,EUo),e(Wb,CUo),e(Wb,bQ),e(bQ,wUo),e(Wb,AUo),e(N,yUo),e(N,Ub),e(Ub,m4e),e(m4e,LUo),e(Ub,xUo),e(Ub,vQ),e(vQ,$Uo),e(Ub,kUo),e(N,SUo),e(N,Hb),e(Hb,g4e),e(g4e,RUo),e(Hb,PUo),e(Hb,FQ),e(FQ,BUo),e(Hb,IUo),e(N,NUo),e(N,Jb),e(Jb,h4e),e(h4e,qUo),e(Jb,jUo),e(Jb,TQ),e(TQ,DUo),e(Jb,GUo),e(N,OUo),e(N,Yb),e(Yb,p4e),e(p4e,VUo),e(Yb,XUo),e(Yb,MQ),e(MQ,zUo),e(Yb,QUo),e(N,WUo),e(N,Kb),e(Kb,u4e),e(u4e,UUo),e(Kb,HUo),e(Kb,EQ),e(EQ,JUo),e(Kb,YUo),e(N,KUo),e(N,Zb),e(Zb,_4e),e(_4e,ZUo),e(Zb,eHo),e(Zb,CQ),e(CQ,oHo),e(Zb,rHo),e(N,tHo),e(N,ev),e(ev,b4e),e(b4e,aHo),e(ev,nHo),e(ev,wQ),e(wQ,sHo),e(ev,lHo),e(N,iHo),e(N,ov),e(ov,v4e),e(v4e,dHo),e(ov,cHo),e(ov,AQ),e(AQ,fHo),e(ov,mHo),e(N,gHo),e(N,rv),e(rv,F4e),e(F4e,hHo),e(rv,pHo),e(rv,yQ),e(yQ,uHo),e(rv,_Ho),e(N,bHo),e(N,tv),e(tv,T4e),e(T4e,vHo),e(tv,FHo),e(tv,LQ),e(LQ,THo),e(tv,MHo),e(N,EHo),e(N,av),e(av,M4e),e(M4e,CHo),e(av,wHo),e(av,xQ),e(xQ,AHo),e(av,yHo),e(N,LHo),e(N,nv),e(nv,E4e),e(E4e,xHo),e(nv,$Ho),e(nv,$Q),e($Q,kHo),e(nv,SHo),e(N,RHo),e(N,sv),e(sv,C4e),e(C4e,PHo),e(sv,BHo),e(sv,kQ),e(kQ,IHo),e(sv,NHo),e(N,qHo),e(N,lv),e(lv,w4e),e(w4e,jHo),e(lv,DHo),e(lv,SQ),e(SQ,GHo),e(lv,OHo),e(N,VHo),e(N,iv),e(iv,A4e),e(A4e,XHo),e(iv,zHo),e(iv,RQ),e(RQ,QHo),e(iv,WHo),e(N,UHo),e(N,dv),e(dv,y4e),e(y4e,HHo),e(dv,JHo),e(dv,PQ),e(PQ,YHo),e(dv,KHo),e(N,ZHo),e(N,cv),e(cv,L4e),e(L4e,eJo),e(cv,oJo),e(cv,BQ),e(BQ,rJo),e(cv,tJo),e(N,aJo),e(N,fv),e(fv,x4e),e(x4e,nJo),e(fv,sJo),e(fv,IQ),e(IQ,lJo),e(fv,iJo),e(N,dJo),e(N,mv),e(mv,$4e),e($4e,cJo),e(mv,fJo),e(mv,NQ),e(NQ,mJo),e(mv,gJo),e(N,hJo),e(N,gv),e(gv,k4e),e(k4e,pJo),e(gv,uJo),e(gv,qQ),e(qQ,_Jo),e(gv,bJo),e(N,vJo),e(N,hv),e(hv,S4e),e(S4e,FJo),e(hv,TJo),e(hv,jQ),e(jQ,MJo),e(hv,EJo),e(N,CJo),e(N,pv),e(pv,R4e),e(R4e,wJo),e(pv,AJo),e(pv,DQ),e(DQ,yJo),e(pv,LJo),e(N,xJo),e(N,uv),e(uv,P4e),e(P4e,$Jo),e(uv,kJo),e(uv,GQ),e(GQ,SJo),e(uv,RJo),e(N,PJo),e(N,_v),e(_v,B4e),e(B4e,BJo),e(_v,IJo),e(_v,OQ),e(OQ,NJo),e(_v,qJo),e(N,jJo),e(N,bv),e(bv,I4e),e(I4e,DJo),e(bv,GJo),e(bv,VQ),e(VQ,OJo),e(bv,VJo),e(N,XJo),e(N,vv),e(vv,N4e),e(N4e,zJo),e(vv,QJo),e(vv,XQ),e(XQ,WJo),e(vv,UJo),e(N,HJo),e(N,Fv),e(Fv,q4e),e(q4e,JJo),e(Fv,YJo),e(Fv,zQ),e(zQ,KJo),e(Fv,ZJo),e(N,eYo),e(N,Tv),e(Tv,j4e),e(j4e,oYo),e(Tv,rYo),e(Tv,QQ),e(QQ,tYo),e(Tv,aYo),e(N,nYo),e(N,Mv),e(Mv,D4e),e(D4e,sYo),e(Mv,lYo),e(Mv,WQ),e(WQ,iYo),e(Mv,dYo),e(N,cYo),e(N,Ev),e(Ev,G4e),e(G4e,fYo),e(Ev,mYo),e(Ev,UQ),e(UQ,gYo),e(Ev,hYo),e(N,pYo),e(N,Cv),e(Cv,O4e),e(O4e,uYo),e(Cv,_Yo),e(Cv,HQ),e(HQ,bYo),e(Cv,vYo),e(N,FYo),e(N,wv),e(wv,V4e),e(V4e,TYo),e(wv,MYo),e(wv,JQ),e(JQ,EYo),e(wv,CYo),e(N,wYo),e(N,Av),e(Av,X4e),e(X4e,AYo),e(Av,yYo),e(Av,YQ),e(YQ,LYo),e(Av,xYo),e(N,$Yo),e(N,yv),e(yv,z4e),e(z4e,kYo),e(yv,SYo),e(yv,KQ),e(KQ,RYo),e(yv,PYo),e(N,BYo),e(N,Lv),e(Lv,Q4e),e(Q4e,IYo),e(Lv,NYo),e(Lv,ZQ),e(ZQ,qYo),e(Lv,jYo),e(N,DYo),e(N,xv),e(xv,W4e),e(W4e,GYo),e(xv,OYo),e(xv,eW),e(eW,VYo),e(xv,XYo),e(N,zYo),e(N,$v),e($v,U4e),e(U4e,QYo),e($v,WYo),e($v,oW),e(oW,UYo),e($v,HYo),e(N,JYo),e(N,kv),e(kv,H4e),e(H4e,YYo),e(kv,KYo),e(kv,rW),e(rW,ZYo),e(kv,eKo),e(N,oKo),e(N,Sv),e(Sv,J4e),e(J4e,rKo),e(Sv,tKo),e(Sv,tW),e(tW,aKo),e(Sv,nKo),e(N,sKo),e(N,Rv),e(Rv,Y4e),e(Y4e,lKo),e(Rv,iKo),e(Rv,aW),e(aW,dKo),e(Rv,cKo),e(N,fKo),e(N,Pv),e(Pv,K4e),e(K4e,mKo),e(Pv,gKo),e(Pv,nW),e(nW,hKo),e(Pv,pKo),e(ro,uKo),e(ro,Bv),e(Bv,_Ko),e(Bv,Z4e),e(Z4e,bKo),e(Bv,vKo),e(Bv,e2e),e(e2e,FKo),e(ro,TKo),M(Iv,ro,null),b(f,aHe,_),b(f,Ad,_),e(Ad,Nv),e(Nv,o2e),M(R9,o2e,null),e(Ad,MKo),e(Ad,r2e),e(r2e,EKo),b(f,nHe,_),b(f,jo,_),M(P9,jo,null),e(jo,CKo),e(jo,yd),e(yd,wKo),e(yd,sW),e(sW,AKo),e(yd,yKo),e(yd,lW),e(lW,LKo),e(yd,xKo),e(jo,$Ko),e(jo,B9),e(B9,kKo),e(B9,t2e),e(t2e,SKo),e(B9,RKo),e(jo,PKo),e(jo,Ft),M(I9,Ft,null),e(Ft,BKo),e(Ft,a2e),e(a2e,IKo),e(Ft,NKo),e(Ft,Ld),e(Ld,qKo),e(Ld,n2e),e(n2e,jKo),e(Ld,DKo),e(Ld,iW),e(iW,GKo),e(Ld,OKo),e(Ft,VKo),M(qv,Ft,null),e(jo,XKo),e(jo,to),M(N9,to,null),e(to,zKo),e(to,s2e),e(s2e,QKo),e(to,WKo),e(to,Za),e(Za,UKo),e(Za,l2e),e(l2e,HKo),e(Za,JKo),e(Za,i2e),e(i2e,YKo),e(Za,KKo),e(Za,d2e),e(d2e,ZKo),e(Za,eZo),e(to,oZo),e(to,Z),e(Z,jv),e(jv,c2e),e(c2e,rZo),e(jv,tZo),e(jv,dW),e(dW,aZo),e(jv,nZo),e(Z,sZo),e(Z,Dv),e(Dv,f2e),e(f2e,lZo),e(Dv,iZo),e(Dv,cW),e(cW,dZo),e(Dv,cZo),e(Z,fZo),e(Z,Gv),e(Gv,m2e),e(m2e,mZo),e(Gv,gZo),e(Gv,fW),e(fW,hZo),e(Gv,pZo),e(Z,uZo),e(Z,Ov),e(Ov,g2e),e(g2e,_Zo),e(Ov,bZo),e(Ov,mW),e(mW,vZo),e(Ov,FZo),e(Z,TZo),e(Z,Vv),e(Vv,h2e),e(h2e,MZo),e(Vv,EZo),e(Vv,gW),e(gW,CZo),e(Vv,wZo),e(Z,AZo),e(Z,Xv),e(Xv,p2e),e(p2e,yZo),e(Xv,LZo),e(Xv,hW),e(hW,xZo),e(Xv,$Zo),e(Z,kZo),e(Z,zv),e(zv,u2e),e(u2e,SZo),e(zv,RZo),e(zv,pW),e(pW,PZo),e(zv,BZo),e(Z,IZo),e(Z,Qv),e(Qv,_2e),e(_2e,NZo),e(Qv,qZo),e(Qv,uW),e(uW,jZo),e(Qv,DZo),e(Z,GZo),e(Z,Wv),e(Wv,b2e),e(b2e,OZo),e(Wv,VZo),e(Wv,_W),e(_W,XZo),e(Wv,zZo),e(Z,QZo),e(Z,Uv),e(Uv,v2e),e(v2e,WZo),e(Uv,UZo),e(Uv,bW),e(bW,HZo),e(Uv,JZo),e(Z,YZo),e(Z,Hv),e(Hv,F2e),e(F2e,KZo),e(Hv,ZZo),e(Hv,vW),e(vW,eer),e(Hv,oer),e(Z,rer),e(Z,Jv),e(Jv,T2e),e(T2e,ter),e(Jv,aer),e(Jv,FW),e(FW,ner),e(Jv,ser),e(Z,ler),e(Z,Yv),e(Yv,M2e),e(M2e,ier),e(Yv,der),e(Yv,TW),e(TW,cer),e(Yv,fer),e(Z,mer),e(Z,Kv),e(Kv,E2e),e(E2e,ger),e(Kv,her),e(Kv,MW),e(MW,per),e(Kv,uer),e(Z,_er),e(Z,Zv),e(Zv,C2e),e(C2e,ber),e(Zv,ver),e(Zv,EW),e(EW,Fer),e(Zv,Ter),e(Z,Mer),e(Z,eF),e(eF,w2e),e(w2e,Eer),e(eF,Cer),e(eF,CW),e(CW,wer),e(eF,Aer),e(Z,yer),e(Z,oF),e(oF,A2e),e(A2e,Ler),e(oF,xer),e(oF,wW),e(wW,$er),e(oF,ker),e(Z,Ser),e(Z,rF),e(rF,y2e),e(y2e,Rer),e(rF,Per),e(rF,AW),e(AW,Ber),e(rF,Ier),e(Z,Ner),e(Z,tF),e(tF,L2e),e(L2e,qer),e(tF,jer),e(tF,yW),e(yW,Der),e(tF,Ger),e(Z,Oer),e(Z,aF),e(aF,x2e),e(x2e,Ver),e(aF,Xer),e(aF,LW),e(LW,zer),e(aF,Qer),e(Z,Wer),e(Z,nF),e(nF,$2e),e($2e,Uer),e(nF,Her),e(nF,xW),e(xW,Jer),e(nF,Yer),e(Z,Ker),e(Z,sF),e(sF,k2e),e(k2e,Zer),e(sF,eor),e(sF,$W),e($W,oor),e(sF,ror),e(Z,tor),e(Z,lF),e(lF,S2e),e(S2e,aor),e(lF,nor),e(lF,kW),e(kW,sor),e(lF,lor),e(Z,ior),e(Z,iF),e(iF,R2e),e(R2e,dor),e(iF,cor),e(iF,SW),e(SW,mor),e(iF,gor),e(Z,hor),e(Z,dF),e(dF,P2e),e(P2e,por),e(dF,uor),e(dF,RW),e(RW,_or),e(dF,bor),e(Z,vor),e(Z,cF),e(cF,B2e),e(B2e,For),e(cF,Tor),e(cF,PW),e(PW,Mor),e(cF,Eor),e(Z,Cor),e(Z,fF),e(fF,I2e),e(I2e,wor),e(fF,Aor),e(fF,BW),e(BW,yor),e(fF,Lor),e(Z,xor),e(Z,mF),e(mF,N2e),e(N2e,$or),e(mF,kor),e(mF,IW),e(IW,Sor),e(mF,Ror),e(Z,Por),e(Z,gF),e(gF,q2e),e(q2e,Bor),e(gF,Ior),e(gF,NW),e(NW,Nor),e(gF,qor),e(Z,jor),e(Z,hF),e(hF,j2e),e(j2e,Dor),e(hF,Gor),e(hF,qW),e(qW,Oor),e(hF,Vor),e(Z,Xor),e(Z,pF),e(pF,D2e),e(D2e,zor),e(pF,Qor),e(pF,jW),e(jW,Wor),e(pF,Uor),e(to,Hor),e(to,uF),e(uF,Jor),e(uF,G2e),e(G2e,Yor),e(uF,Kor),e(uF,O2e),e(O2e,Zor),e(to,err),M(_F,to,null),b(f,sHe,_),b(f,xd,_),e(xd,bF),e(bF,V2e),M(q9,V2e,null),e(xd,orr),e(xd,X2e),e(X2e,rrr),b(f,lHe,_),b(f,Do,_),M(j9,Do,null),e(Do,trr),e(Do,$d),e($d,arr),e($d,DW),e(DW,nrr),e($d,srr),e($d,GW),e(GW,lrr),e($d,irr),e(Do,drr),e(Do,D9),e(D9,crr),e(D9,z2e),e(z2e,frr),e(D9,mrr),e(Do,grr),e(Do,Tt),M(G9,Tt,null),e(Tt,hrr),e(Tt,Q2e),e(Q2e,prr),e(Tt,urr),e(Tt,kd),e(kd,_rr),e(kd,W2e),e(W2e,brr),e(kd,vrr),e(kd,OW),e(OW,Frr),e(kd,Trr),e(Tt,Mrr),M(vF,Tt,null),e(Do,Err),e(Do,ao),M(O9,ao,null),e(ao,Crr),e(ao,U2e),e(U2e,wrr),e(ao,Arr),e(ao,en),e(en,yrr),e(en,H2e),e(H2e,Lrr),e(en,xrr),e(en,J2e),e(J2e,$rr),e(en,krr),e(en,Y2e),e(Y2e,Srr),e(en,Rrr),e(ao,Prr),e(ao,Go),e(Go,FF),e(FF,K2e),e(K2e,Brr),e(FF,Irr),e(FF,VW),e(VW,Nrr),e(FF,qrr),e(Go,jrr),e(Go,TF),e(TF,Z2e),e(Z2e,Drr),e(TF,Grr),e(TF,XW),e(XW,Orr),e(TF,Vrr),e(Go,Xrr),e(Go,MF),e(MF,ebe),e(ebe,zrr),e(MF,Qrr),e(MF,zW),e(zW,Wrr),e(MF,Urr),e(Go,Hrr),e(Go,EF),e(EF,obe),e(obe,Jrr),e(EF,Yrr),e(EF,QW),e(QW,Krr),e(EF,Zrr),e(Go,etr),e(Go,CF),e(CF,rbe),e(rbe,otr),e(CF,rtr),e(CF,WW),e(WW,ttr),e(CF,atr),e(Go,ntr),e(Go,wF),e(wF,tbe),e(tbe,str),e(wF,ltr),e(wF,UW),e(UW,itr),e(wF,dtr),e(ao,ctr),e(ao,AF),e(AF,ftr),e(AF,abe),e(abe,mtr),e(AF,gtr),e(AF,nbe),e(nbe,htr),e(ao,ptr),M(yF,ao,null),b(f,iHe,_),b(f,Sd,_),e(Sd,LF),e(LF,sbe),M(V9,sbe,null),e(Sd,utr),e(Sd,lbe),e(lbe,_tr),b(f,dHe,_),b(f,Oo,_),M(X9,Oo,null),e(Oo,btr),e(Oo,Rd),e(Rd,vtr),e(Rd,HW),e(HW,Ftr),e(Rd,Ttr),e(Rd,JW),e(JW,Mtr),e(Rd,Etr),e(Oo,Ctr),e(Oo,z9),e(z9,wtr),e(z9,ibe),e(ibe,Atr),e(z9,ytr),e(Oo,Ltr),e(Oo,Mt),M(Q9,Mt,null),e(Mt,xtr),e(Mt,dbe),e(dbe,$tr),e(Mt,ktr),e(Mt,Pd),e(Pd,Str),e(Pd,cbe),e(cbe,Rtr),e(Pd,Ptr),e(Pd,YW),e(YW,Btr),e(Pd,Itr),e(Mt,Ntr),M(xF,Mt,null),e(Oo,qtr),e(Oo,no),M(W9,no,null),e(no,jtr),e(no,fbe),e(fbe,Dtr),e(no,Gtr),e(no,on),e(on,Otr),e(on,mbe),e(mbe,Vtr),e(on,Xtr),e(on,gbe),e(gbe,ztr),e(on,Qtr),e(on,hbe),e(hbe,Wtr),e(on,Utr),e(no,Htr),e(no,H),e(H,$F),e($F,pbe),e(pbe,Jtr),e($F,Ytr),e($F,KW),e(KW,Ktr),e($F,Ztr),e(H,ear),e(H,kF),e(kF,ube),e(ube,oar),e(kF,rar),e(kF,ZW),e(ZW,tar),e(kF,aar),e(H,nar),e(H,SF),e(SF,_be),e(_be,sar),e(SF,lar),e(SF,eU),e(eU,iar),e(SF,dar),e(H,car),e(H,RF),e(RF,bbe),e(bbe,far),e(RF,mar),e(RF,oU),e(oU,gar),e(RF,har),e(H,par),e(H,PF),e(PF,vbe),e(vbe,uar),e(PF,_ar),e(PF,rU),e(rU,bar),e(PF,Far),e(H,Tar),e(H,BF),e(BF,Fbe),e(Fbe,Mar),e(BF,Ear),e(BF,tU),e(tU,Car),e(BF,war),e(H,Aar),e(H,IF),e(IF,Tbe),e(Tbe,yar),e(IF,Lar),e(IF,aU),e(aU,xar),e(IF,$ar),e(H,kar),e(H,NF),e(NF,Mbe),e(Mbe,Sar),e(NF,Rar),e(NF,nU),e(nU,Par),e(NF,Bar),e(H,Iar),e(H,qF),e(qF,Ebe),e(Ebe,Nar),e(qF,qar),e(qF,sU),e(sU,jar),e(qF,Dar),e(H,Gar),e(H,jF),e(jF,Cbe),e(Cbe,Oar),e(jF,Var),e(jF,lU),e(lU,Xar),e(jF,zar),e(H,Qar),e(H,DF),e(DF,wbe),e(wbe,War),e(DF,Uar),e(DF,iU),e(iU,Har),e(DF,Jar),e(H,Yar),e(H,GF),e(GF,Abe),e(Abe,Kar),e(GF,Zar),e(GF,dU),e(dU,enr),e(GF,onr),e(H,rnr),e(H,OF),e(OF,ybe),e(ybe,tnr),e(OF,anr),e(OF,cU),e(cU,nnr),e(OF,snr),e(H,lnr),e(H,VF),e(VF,Lbe),e(Lbe,inr),e(VF,dnr),e(VF,fU),e(fU,cnr),e(VF,fnr),e(H,mnr),e(H,XF),e(XF,xbe),e(xbe,gnr),e(XF,hnr),e(XF,mU),e(mU,pnr),e(XF,unr),e(H,_nr),e(H,zF),e(zF,$be),e($be,bnr),e(zF,vnr),e(zF,gU),e(gU,Fnr),e(zF,Tnr),e(H,Mnr),e(H,QF),e(QF,kbe),e(kbe,Enr),e(QF,Cnr),e(QF,hU),e(hU,wnr),e(QF,Anr),e(H,ynr),e(H,WF),e(WF,Sbe),e(Sbe,Lnr),e(WF,xnr),e(WF,pU),e(pU,$nr),e(WF,knr),e(H,Snr),e(H,UF),e(UF,Rbe),e(Rbe,Rnr),e(UF,Pnr),e(UF,uU),e(uU,Bnr),e(UF,Inr),e(H,Nnr),e(H,HF),e(HF,Pbe),e(Pbe,qnr),e(HF,jnr),e(HF,_U),e(_U,Dnr),e(HF,Gnr),e(H,Onr),e(H,JF),e(JF,Bbe),e(Bbe,Vnr),e(JF,Xnr),e(JF,bU),e(bU,znr),e(JF,Qnr),e(H,Wnr),e(H,YF),e(YF,Ibe),e(Ibe,Unr),e(YF,Hnr),e(YF,vU),e(vU,Jnr),e(YF,Ynr),e(H,Knr),e(H,KF),e(KF,Nbe),e(Nbe,Znr),e(KF,esr),e(KF,FU),e(FU,osr),e(KF,rsr),e(H,tsr),e(H,ZF),e(ZF,qbe),e(qbe,asr),e(ZF,nsr),e(ZF,TU),e(TU,ssr),e(ZF,lsr),e(H,isr),e(H,eT),e(eT,jbe),e(jbe,dsr),e(eT,csr),e(eT,MU),e(MU,fsr),e(eT,msr),e(H,gsr),e(H,oT),e(oT,Dbe),e(Dbe,hsr),e(oT,psr),e(oT,EU),e(EU,usr),e(oT,_sr),e(H,bsr),e(H,rT),e(rT,Gbe),e(Gbe,vsr),e(rT,Fsr),e(rT,CU),e(CU,Tsr),e(rT,Msr),e(H,Esr),e(H,tT),e(tT,Obe),e(Obe,Csr),e(tT,wsr),e(tT,wU),e(wU,Asr),e(tT,ysr),e(H,Lsr),e(H,aT),e(aT,Vbe),e(Vbe,xsr),e(aT,$sr),e(aT,AU),e(AU,ksr),e(aT,Ssr),e(H,Rsr),e(H,nT),e(nT,Xbe),e(Xbe,Psr),e(nT,Bsr),e(nT,yU),e(yU,Isr),e(nT,Nsr),e(H,qsr),e(H,sT),e(sT,zbe),e(zbe,jsr),e(sT,Dsr),e(sT,LU),e(LU,Gsr),e(sT,Osr),e(H,Vsr),e(H,lT),e(lT,Qbe),e(Qbe,Xsr),e(lT,zsr),e(lT,xU),e(xU,Qsr),e(lT,Wsr),e(H,Usr),e(H,iT),e(iT,Wbe),e(Wbe,Hsr),e(iT,Jsr),e(iT,$U),e($U,Ysr),e(iT,Ksr),e(H,Zsr),e(H,dT),e(dT,Ube),e(Ube,elr),e(dT,olr),e(dT,kU),e(kU,rlr),e(dT,tlr),e(H,alr),e(H,cT),e(cT,Hbe),e(Hbe,nlr),e(cT,slr),e(cT,SU),e(SU,llr),e(cT,ilr),e(H,dlr),e(H,fT),e(fT,Jbe),e(Jbe,clr),e(fT,flr),e(fT,RU),e(RU,mlr),e(fT,glr),e(H,hlr),e(H,mT),e(mT,Ybe),e(Ybe,plr),e(mT,ulr),e(mT,PU),e(PU,_lr),e(mT,blr),e(no,vlr),e(no,gT),e(gT,Flr),e(gT,Kbe),e(Kbe,Tlr),e(gT,Mlr),e(gT,Zbe),e(Zbe,Elr),e(no,Clr),M(hT,no,null),b(f,cHe,_),b(f,Bd,_),e(Bd,pT),e(pT,eve),M(U9,eve,null),e(Bd,wlr),e(Bd,ove),e(ove,Alr),b(f,fHe,_),b(f,Vo,_),M(H9,Vo,null),e(Vo,ylr),e(Vo,Id),e(Id,Llr),e(Id,BU),e(BU,xlr),e(Id,$lr),e(Id,IU),e(IU,klr),e(Id,Slr),e(Vo,Rlr),e(Vo,J9),e(J9,Plr),e(J9,rve),e(rve,Blr),e(J9,Ilr),e(Vo,Nlr),e(Vo,Et),M(Y9,Et,null),e(Et,qlr),e(Et,tve),e(tve,jlr),e(Et,Dlr),e(Et,Nd),e(Nd,Glr),e(Nd,ave),e(ave,Olr),e(Nd,Vlr),e(Nd,NU),e(NU,Xlr),e(Nd,zlr),e(Et,Qlr),M(uT,Et,null),e(Vo,Wlr),e(Vo,so),M(K9,so,null),e(so,Ulr),e(so,nve),e(nve,Hlr),e(so,Jlr),e(so,rn),e(rn,Ylr),e(rn,sve),e(sve,Klr),e(rn,Zlr),e(rn,lve),e(lve,eir),e(rn,oir),e(rn,ive),e(ive,rir),e(rn,tir),e(so,air),e(so,V),e(V,_T),e(_T,dve),e(dve,nir),e(_T,sir),e(_T,qU),e(qU,lir),e(_T,iir),e(V,dir),e(V,bT),e(bT,cve),e(cve,cir),e(bT,fir),e(bT,jU),e(jU,mir),e(bT,gir),e(V,hir),e(V,vT),e(vT,fve),e(fve,pir),e(vT,uir),e(vT,DU),e(DU,_ir),e(vT,bir),e(V,vir),e(V,FT),e(FT,mve),e(mve,Fir),e(FT,Tir),e(FT,GU),e(GU,Mir),e(FT,Eir),e(V,Cir),e(V,TT),e(TT,gve),e(gve,wir),e(TT,Air),e(TT,OU),e(OU,yir),e(TT,Lir),e(V,xir),e(V,MT),e(MT,hve),e(hve,$ir),e(MT,kir),e(MT,VU),e(VU,Sir),e(MT,Rir),e(V,Pir),e(V,ET),e(ET,pve),e(pve,Bir),e(ET,Iir),e(ET,XU),e(XU,Nir),e(ET,qir),e(V,jir),e(V,CT),e(CT,uve),e(uve,Dir),e(CT,Gir),e(CT,zU),e(zU,Oir),e(CT,Vir),e(V,Xir),e(V,wT),e(wT,_ve),e(_ve,zir),e(wT,Qir),e(wT,QU),e(QU,Wir),e(wT,Uir),e(V,Hir),e(V,AT),e(AT,bve),e(bve,Jir),e(AT,Yir),e(AT,WU),e(WU,Kir),e(AT,Zir),e(V,edr),e(V,yT),e(yT,vve),e(vve,odr),e(yT,rdr),e(yT,UU),e(UU,tdr),e(yT,adr),e(V,ndr),e(V,LT),e(LT,Fve),e(Fve,sdr),e(LT,ldr),e(LT,HU),e(HU,idr),e(LT,ddr),e(V,cdr),e(V,xT),e(xT,Tve),e(Tve,fdr),e(xT,mdr),e(xT,JU),e(JU,gdr),e(xT,hdr),e(V,pdr),e(V,$T),e($T,Mve),e(Mve,udr),e($T,_dr),e($T,YU),e(YU,bdr),e($T,vdr),e(V,Fdr),e(V,kT),e(kT,Eve),e(Eve,Tdr),e(kT,Mdr),e(kT,KU),e(KU,Edr),e(kT,Cdr),e(V,wdr),e(V,ST),e(ST,Cve),e(Cve,Adr),e(ST,ydr),e(ST,ZU),e(ZU,Ldr),e(ST,xdr),e(V,$dr),e(V,RT),e(RT,wve),e(wve,kdr),e(RT,Sdr),e(RT,eH),e(eH,Rdr),e(RT,Pdr),e(V,Bdr),e(V,PT),e(PT,Ave),e(Ave,Idr),e(PT,Ndr),e(PT,oH),e(oH,qdr),e(PT,jdr),e(V,Ddr),e(V,BT),e(BT,yve),e(yve,Gdr),e(BT,Odr),e(BT,rH),e(rH,Vdr),e(BT,Xdr),e(V,zdr),e(V,IT),e(IT,Lve),e(Lve,Qdr),e(IT,Wdr),e(IT,tH),e(tH,Udr),e(IT,Hdr),e(V,Jdr),e(V,NT),e(NT,xve),e(xve,Ydr),e(NT,Kdr),e(NT,aH),e(aH,Zdr),e(NT,ecr),e(V,ocr),e(V,qT),e(qT,$ve),e($ve,rcr),e(qT,tcr),e(qT,nH),e(nH,acr),e(qT,ncr),e(V,scr),e(V,jT),e(jT,kve),e(kve,lcr),e(jT,icr),e(jT,sH),e(sH,dcr),e(jT,ccr),e(V,fcr),e(V,DT),e(DT,Sve),e(Sve,mcr),e(DT,gcr),e(DT,lH),e(lH,hcr),e(DT,pcr),e(V,ucr),e(V,GT),e(GT,Rve),e(Rve,_cr),e(GT,bcr),e(GT,iH),e(iH,vcr),e(GT,Fcr),e(V,Tcr),e(V,OT),e(OT,Pve),e(Pve,Mcr),e(OT,Ecr),e(OT,dH),e(dH,Ccr),e(OT,wcr),e(V,Acr),e(V,VT),e(VT,Bve),e(Bve,ycr),e(VT,Lcr),e(VT,cH),e(cH,xcr),e(VT,$cr),e(V,kcr),e(V,XT),e(XT,Ive),e(Ive,Scr),e(XT,Rcr),e(XT,fH),e(fH,Pcr),e(XT,Bcr),e(V,Icr),e(V,zT),e(zT,Nve),e(Nve,Ncr),e(zT,qcr),e(zT,mH),e(mH,jcr),e(zT,Dcr),e(V,Gcr),e(V,QT),e(QT,qve),e(qve,Ocr),e(QT,Vcr),e(QT,gH),e(gH,Xcr),e(QT,zcr),e(V,Qcr),e(V,WT),e(WT,jve),e(jve,Wcr),e(WT,Ucr),e(WT,hH),e(hH,Hcr),e(WT,Jcr),e(V,Ycr),e(V,UT),e(UT,Dve),e(Dve,Kcr),e(UT,Zcr),e(UT,pH),e(pH,efr),e(UT,ofr),e(V,rfr),e(V,HT),e(HT,Gve),e(Gve,tfr),e(HT,afr),e(HT,uH),e(uH,nfr),e(HT,sfr),e(V,lfr),e(V,JT),e(JT,Ove),e(Ove,ifr),e(JT,dfr),e(JT,_H),e(_H,cfr),e(JT,ffr),e(V,mfr),e(V,YT),e(YT,Vve),e(Vve,gfr),e(YT,hfr),e(YT,bH),e(bH,pfr),e(YT,ufr),e(V,_fr),e(V,KT),e(KT,Xve),e(Xve,bfr),e(KT,vfr),e(KT,vH),e(vH,Ffr),e(KT,Tfr),e(V,Mfr),e(V,ZT),e(ZT,zve),e(zve,Efr),e(ZT,Cfr),e(ZT,FH),e(FH,wfr),e(ZT,Afr),e(V,yfr),e(V,e8),e(e8,Qve),e(Qve,Lfr),e(e8,xfr),e(e8,TH),e(TH,$fr),e(e8,kfr),e(V,Sfr),e(V,o8),e(o8,Wve),e(Wve,Rfr),e(o8,Pfr),e(o8,MH),e(MH,Bfr),e(o8,Ifr),e(V,Nfr),e(V,r8),e(r8,Uve),e(Uve,qfr),e(r8,jfr),e(r8,EH),e(EH,Dfr),e(r8,Gfr),e(V,Ofr),e(V,t8),e(t8,Hve),e(Hve,Vfr),e(t8,Xfr),e(t8,CH),e(CH,zfr),e(t8,Qfr),e(V,Wfr),e(V,a8),e(a8,Jve),e(Jve,Ufr),e(a8,Hfr),e(a8,wH),e(wH,Jfr),e(a8,Yfr),e(V,Kfr),e(V,n8),e(n8,Yve),e(Yve,Zfr),e(n8,emr),e(n8,AH),e(AH,omr),e(n8,rmr),e(so,tmr),e(so,s8),e(s8,amr),e(s8,Kve),e(Kve,nmr),e(s8,smr),e(s8,Zve),e(Zve,lmr),e(so,imr),M(l8,so,null),b(f,mHe,_),b(f,qd,_),e(qd,i8),e(i8,eFe),M(Z9,eFe,null),e(qd,dmr),e(qd,oFe),e(oFe,cmr),b(f,gHe,_),b(f,Xo,_),M(ex,Xo,null),e(Xo,fmr),e(Xo,jd),e(jd,mmr),e(jd,yH),e(yH,gmr),e(jd,hmr),e(jd,LH),e(LH,pmr),e(jd,umr),e(Xo,_mr),e(Xo,ox),e(ox,bmr),e(ox,rFe),e(rFe,vmr),e(ox,Fmr),e(Xo,Tmr),e(Xo,Ct),M(rx,Ct,null),e(Ct,Mmr),e(Ct,tFe),e(tFe,Emr),e(Ct,Cmr),e(Ct,Dd),e(Dd,wmr),e(Dd,aFe),e(aFe,Amr),e(Dd,ymr),e(Dd,xH),e(xH,Lmr),e(Dd,xmr),e(Ct,$mr),M(d8,Ct,null),e(Xo,kmr),e(Xo,lo),M(tx,lo,null),e(lo,Smr),e(lo,nFe),e(nFe,Rmr),e(lo,Pmr),e(lo,tn),e(tn,Bmr),e(tn,sFe),e(sFe,Imr),e(tn,Nmr),e(tn,lFe),e(lFe,qmr),e(tn,jmr),e(tn,iFe),e(iFe,Dmr),e(tn,Gmr),e(lo,Omr),e(lo,dFe),e(dFe,c8),e(c8,cFe),e(cFe,Vmr),e(c8,Xmr),e(c8,$H),e($H,zmr),e(c8,Qmr),e(lo,Wmr),e(lo,f8),e(f8,Umr),e(f8,fFe),e(fFe,Hmr),e(f8,Jmr),e(f8,mFe),e(mFe,Ymr),e(lo,Kmr),M(m8,lo,null),b(f,hHe,_),b(f,Gd,_),e(Gd,g8),e(g8,gFe),M(ax,gFe,null),e(Gd,Zmr),e(Gd,hFe),e(hFe,egr),b(f,pHe,_),b(f,zo,_),M(nx,zo,null),e(zo,ogr),e(zo,Od),e(Od,rgr),e(Od,kH),e(kH,tgr),e(Od,agr),e(Od,SH),e(SH,ngr),e(Od,sgr),e(zo,lgr),e(zo,sx),e(sx,igr),e(sx,pFe),e(pFe,dgr),e(sx,cgr),e(zo,fgr),e(zo,wt),M(lx,wt,null),e(wt,mgr),e(wt,uFe),e(uFe,ggr),e(wt,hgr),e(wt,Vd),e(Vd,pgr),e(Vd,_Fe),e(_Fe,ugr),e(Vd,_gr),e(Vd,RH),e(RH,bgr),e(Vd,vgr),e(wt,Fgr),M(h8,wt,null),e(zo,Tgr),e(zo,io),M(ix,io,null),e(io,Mgr),e(io,bFe),e(bFe,Egr),e(io,Cgr),e(io,an),e(an,wgr),e(an,vFe),e(vFe,Agr),e(an,ygr),e(an,FFe),e(FFe,Lgr),e(an,xgr),e(an,TFe),e(TFe,$gr),e(an,kgr),e(io,Sgr),e(io,dx),e(dx,p8),e(p8,MFe),e(MFe,Rgr),e(p8,Pgr),e(p8,PH),e(PH,Bgr),e(p8,Igr),e(dx,Ngr),e(dx,u8),e(u8,EFe),e(EFe,qgr),e(u8,jgr),e(u8,BH),e(BH,Dgr),e(u8,Ggr),e(io,Ogr),e(io,_8),e(_8,Vgr),e(_8,CFe),e(CFe,Xgr),e(_8,zgr),e(_8,wFe),e(wFe,Qgr),e(io,Wgr),M(b8,io,null),b(f,uHe,_),b(f,Xd,_),e(Xd,v8),e(v8,AFe),M(cx,AFe,null),e(Xd,Ugr),e(Xd,yFe),e(yFe,Hgr),b(f,_He,_),b(f,Qo,_),M(fx,Qo,null),e(Qo,Jgr),e(Qo,zd),e(zd,Ygr),e(zd,IH),e(IH,Kgr),e(zd,Zgr),e(zd,NH),e(NH,ehr),e(zd,ohr),e(Qo,rhr),e(Qo,mx),e(mx,thr),e(mx,LFe),e(LFe,ahr),e(mx,nhr),e(Qo,shr),e(Qo,At),M(gx,At,null),e(At,lhr),e(At,xFe),e(xFe,ihr),e(At,dhr),e(At,Qd),e(Qd,chr),e(Qd,$Fe),e($Fe,fhr),e(Qd,mhr),e(Qd,qH),e(qH,ghr),e(Qd,hhr),e(At,phr),M(F8,At,null),e(Qo,uhr),e(Qo,co),M(hx,co,null),e(co,_hr),e(co,kFe),e(kFe,bhr),e(co,vhr),e(co,nn),e(nn,Fhr),e(nn,SFe),e(SFe,Thr),e(nn,Mhr),e(nn,RFe),e(RFe,Ehr),e(nn,Chr),e(nn,PFe),e(PFe,whr),e(nn,Ahr),e(co,yhr),e(co,be),e(be,T8),e(T8,BFe),e(BFe,Lhr),e(T8,xhr),e(T8,jH),e(jH,$hr),e(T8,khr),e(be,Shr),e(be,M8),e(M8,IFe),e(IFe,Rhr),e(M8,Phr),e(M8,DH),e(DH,Bhr),e(M8,Ihr),e(be,Nhr),e(be,E8),e(E8,NFe),e(NFe,qhr),e(E8,jhr),e(E8,GH),e(GH,Dhr),e(E8,Ghr),e(be,Ohr),e(be,C8),e(C8,qFe),e(qFe,Vhr),e(C8,Xhr),e(C8,OH),e(OH,zhr),e(C8,Qhr),e(be,Whr),e(be,fl),e(fl,jFe),e(jFe,Uhr),e(fl,Hhr),e(fl,VH),e(VH,Jhr),e(fl,Yhr),e(fl,XH),e(XH,Khr),e(fl,Zhr),e(be,epr),e(be,w8),e(w8,DFe),e(DFe,opr),e(w8,rpr),e(w8,zH),e(zH,tpr),e(w8,apr),e(be,npr),e(be,ml),e(ml,GFe),e(GFe,spr),e(ml,lpr),e(ml,QH),e(QH,ipr),e(ml,dpr),e(ml,WH),e(WH,cpr),e(ml,fpr),e(be,mpr),e(be,A8),e(A8,OFe),e(OFe,gpr),e(A8,hpr),e(A8,UH),e(UH,ppr),e(A8,upr),e(be,_pr),e(be,yt),e(yt,VFe),e(VFe,bpr),e(yt,vpr),e(yt,HH),e(HH,Fpr),e(yt,Tpr),e(yt,JH),e(JH,Mpr),e(yt,Epr),e(yt,YH),e(YH,Cpr),e(yt,wpr),e(be,Apr),e(be,y8),e(y8,XFe),e(XFe,ypr),e(y8,Lpr),e(y8,KH),e(KH,xpr),e(y8,$pr),e(be,kpr),e(be,L8),e(L8,zFe),e(zFe,Spr),e(L8,Rpr),e(L8,ZH),e(ZH,Ppr),e(L8,Bpr),e(be,Ipr),e(be,x8),e(x8,QFe),e(QFe,Npr),e(x8,qpr),e(x8,eJ),e(eJ,jpr),e(x8,Dpr),e(be,Gpr),e(be,$8),e($8,WFe),e(WFe,Opr),e($8,Vpr),e($8,oJ),e(oJ,Xpr),e($8,zpr),e(be,Qpr),e(be,k8),e(k8,UFe),e(UFe,Wpr),e(k8,Upr),e(k8,rJ),e(rJ,Hpr),e(k8,Jpr),e(be,Ypr),e(be,S8),e(S8,HFe),e(HFe,Kpr),e(S8,Zpr),e(S8,tJ),e(tJ,eur),e(S8,our),e(be,rur),e(be,R8),e(R8,JFe),e(JFe,tur),e(R8,aur),e(R8,aJ),e(aJ,nur),e(R8,sur),e(be,lur),e(be,P8),e(P8,YFe),e(YFe,iur),e(P8,dur),e(P8,nJ),e(nJ,cur),e(P8,fur),e(co,mur),e(co,B8),e(B8,gur),e(B8,KFe),e(KFe,hur),e(B8,pur),e(B8,ZFe),e(ZFe,uur),e(co,_ur),M(I8,co,null),b(f,bHe,_),b(f,Wd,_),e(Wd,N8),e(N8,eTe),M(px,eTe,null),e(Wd,bur),e(Wd,oTe),e(oTe,vur),b(f,vHe,_),b(f,Wo,_),M(ux,Wo,null),e(Wo,Fur),e(Wo,Ud),e(Ud,Tur),e(Ud,sJ),e(sJ,Mur),e(Ud,Eur),e(Ud,lJ),e(lJ,Cur),e(Ud,wur),e(Wo,Aur),e(Wo,_x),e(_x,yur),e(_x,rTe),e(rTe,Lur),e(_x,xur),e(Wo,$ur),e(Wo,Lt),M(bx,Lt,null),e(Lt,kur),e(Lt,tTe),e(tTe,Sur),e(Lt,Rur),e(Lt,Hd),e(Hd,Pur),e(Hd,aTe),e(aTe,Bur),e(Hd,Iur),e(Hd,iJ),e(iJ,Nur),e(Hd,qur),e(Lt,jur),M(q8,Lt,null),e(Wo,Dur),e(Wo,fo),M(vx,fo,null),e(fo,Gur),e(fo,nTe),e(nTe,Our),e(fo,Vur),e(fo,sn),e(sn,Xur),e(sn,sTe),e(sTe,zur),e(sn,Qur),e(sn,lTe),e(lTe,Wur),e(sn,Uur),e(sn,iTe),e(iTe,Hur),e(sn,Jur),e(fo,Yur),e(fo,dTe),e(dTe,j8),e(j8,cTe),e(cTe,Kur),e(j8,Zur),e(j8,dJ),e(dJ,e_r),e(j8,o_r),e(fo,r_r),e(fo,D8),e(D8,t_r),e(D8,fTe),e(fTe,a_r),e(D8,n_r),e(D8,mTe),e(mTe,s_r),e(fo,l_r),M(G8,fo,null),b(f,FHe,_),b(f,Jd,_),e(Jd,O8),e(O8,gTe),M(Fx,gTe,null),e(Jd,i_r),e(Jd,hTe),e(hTe,d_r),b(f,THe,_),b(f,Uo,_),M(Tx,Uo,null),e(Uo,c_r),e(Uo,Yd),e(Yd,f_r),e(Yd,cJ),e(cJ,m_r),e(Yd,g_r),e(Yd,fJ),e(fJ,h_r),e(Yd,p_r),e(Uo,u_r),e(Uo,Mx),e(Mx,__r),e(Mx,pTe),e(pTe,b_r),e(Mx,v_r),e(Uo,F_r),e(Uo,xt),M(Ex,xt,null),e(xt,T_r),e(xt,uTe),e(uTe,M_r),e(xt,E_r),e(xt,Kd),e(Kd,C_r),e(Kd,_Te),e(_Te,w_r),e(Kd,A_r),e(Kd,mJ),e(mJ,y_r),e(Kd,L_r),e(xt,x_r),M(V8,xt,null),e(Uo,$_r),e(Uo,mo),M(Cx,mo,null),e(mo,k_r),e(mo,bTe),e(bTe,S_r),e(mo,R_r),e(mo,ln),e(ln,P_r),e(ln,vTe),e(vTe,B_r),e(ln,I_r),e(ln,FTe),e(FTe,N_r),e(ln,q_r),e(ln,TTe),e(TTe,j_r),e(ln,D_r),e(mo,G_r),e(mo,MTe),e(MTe,X8),e(X8,ETe),e(ETe,O_r),e(X8,V_r),e(X8,gJ),e(gJ,X_r),e(X8,z_r),e(mo,Q_r),e(mo,z8),e(z8,W_r),e(z8,CTe),e(CTe,U_r),e(z8,H_r),e(z8,wTe),e(wTe,J_r),e(mo,Y_r),M(Q8,mo,null),b(f,MHe,_),b(f,Zd,_),e(Zd,W8),e(W8,ATe),M(wx,ATe,null),e(Zd,K_r),e(Zd,yTe),e(yTe,Z_r),b(f,EHe,_),b(f,Ho,_),M(Ax,Ho,null),e(Ho,e1r),e(Ho,ec),e(ec,o1r),e(ec,hJ),e(hJ,r1r),e(ec,t1r),e(ec,pJ),e(pJ,a1r),e(ec,n1r),e(Ho,s1r),e(Ho,yx),e(yx,l1r),e(yx,LTe),e(LTe,i1r),e(yx,d1r),e(Ho,c1r),e(Ho,$t),M(Lx,$t,null),e($t,f1r),e($t,xTe),e(xTe,m1r),e($t,g1r),e($t,oc),e(oc,h1r),e(oc,$Te),e($Te,p1r),e(oc,u1r),e(oc,uJ),e(uJ,_1r),e(oc,b1r),e($t,v1r),M(U8,$t,null),e(Ho,F1r),e(Ho,go),M(xx,go,null),e(go,T1r),e(go,kTe),e(kTe,M1r),e(go,E1r),e(go,dn),e(dn,C1r),e(dn,STe),e(STe,w1r),e(dn,A1r),e(dn,RTe),e(RTe,y1r),e(dn,L1r),e(dn,PTe),e(PTe,x1r),e(dn,$1r),e(go,k1r),e(go,BTe),e(BTe,H8),e(H8,ITe),e(ITe,S1r),e(H8,R1r),e(H8,_J),e(_J,P1r),e(H8,B1r),e(go,I1r),e(go,J8),e(J8,N1r),e(J8,NTe),e(NTe,q1r),e(J8,j1r),e(J8,qTe),e(qTe,D1r),e(go,G1r),M(Y8,go,null),b(f,CHe,_),b(f,rc,_),e(rc,K8),e(K8,jTe),M($x,jTe,null),e(rc,O1r),e(rc,DTe),e(DTe,V1r),b(f,wHe,_),b(f,Jo,_),M(kx,Jo,null),e(Jo,X1r),e(Jo,tc),e(tc,z1r),e(tc,bJ),e(bJ,Q1r),e(tc,W1r),e(tc,vJ),e(vJ,U1r),e(tc,H1r),e(Jo,J1r),e(Jo,Sx),e(Sx,Y1r),e(Sx,GTe),e(GTe,K1r),e(Sx,Z1r),e(Jo,e4r),e(Jo,kt),M(Rx,kt,null),e(kt,o4r),e(kt,OTe),e(OTe,r4r),e(kt,t4r),e(kt,ac),e(ac,a4r),e(ac,VTe),e(VTe,n4r),e(ac,s4r),e(ac,FJ),e(FJ,l4r),e(ac,i4r),e(kt,d4r),M(Z8,kt,null),e(Jo,c4r),e(Jo,ho),M(Px,ho,null),e(ho,f4r),e(ho,XTe),e(XTe,m4r),e(ho,g4r),e(ho,cn),e(cn,h4r),e(cn,zTe),e(zTe,p4r),e(cn,u4r),e(cn,QTe),e(QTe,_4r),e(cn,b4r),e(cn,WTe),e(WTe,v4r),e(cn,F4r),e(ho,T4r),e(ho,Pe),e(Pe,eM),e(eM,UTe),e(UTe,M4r),e(eM,E4r),e(eM,TJ),e(TJ,C4r),e(eM,w4r),e(Pe,A4r),e(Pe,oM),e(oM,HTe),e(HTe,y4r),e(oM,L4r),e(oM,MJ),e(MJ,x4r),e(oM,$4r),e(Pe,k4r),e(Pe,rM),e(rM,JTe),e(JTe,S4r),e(rM,R4r),e(rM,EJ),e(EJ,P4r),e(rM,B4r),e(Pe,I4r),e(Pe,tM),e(tM,YTe),e(YTe,N4r),e(tM,q4r),e(tM,CJ),e(CJ,j4r),e(tM,D4r),e(Pe,G4r),e(Pe,aM),e(aM,KTe),e(KTe,O4r),e(aM,V4r),e(aM,wJ),e(wJ,X4r),e(aM,z4r),e(Pe,Q4r),e(Pe,nM),e(nM,ZTe),e(ZTe,W4r),e(nM,U4r),e(nM,AJ),e(AJ,H4r),e(nM,J4r),e(Pe,Y4r),e(Pe,sM),e(sM,e8e),e(e8e,K4r),e(sM,Z4r),e(sM,yJ),e(yJ,e2r),e(sM,o2r),e(Pe,r2r),e(Pe,lM),e(lM,o8e),e(o8e,t2r),e(lM,a2r),e(lM,LJ),e(LJ,n2r),e(lM,s2r),e(Pe,l2r),e(Pe,iM),e(iM,r8e),e(r8e,i2r),e(iM,d2r),e(iM,xJ),e(xJ,c2r),e(iM,f2r),e(ho,m2r),e(ho,dM),e(dM,g2r),e(dM,t8e),e(t8e,h2r),e(dM,p2r),e(dM,a8e),e(a8e,u2r),e(ho,_2r),M(cM,ho,null),b(f,AHe,_),b(f,nc,_),e(nc,fM),e(fM,n8e),M(Bx,n8e,null),e(nc,b2r),e(nc,s8e),e(s8e,v2r),b(f,yHe,_),b(f,Yo,_),M(Ix,Yo,null),e(Yo,F2r),e(Yo,sc),e(sc,T2r),e(sc,$J),e($J,M2r),e(sc,E2r),e(sc,kJ),e(kJ,C2r),e(sc,w2r),e(Yo,A2r),e(Yo,Nx),e(Nx,y2r),e(Nx,l8e),e(l8e,L2r),e(Nx,x2r),e(Yo,$2r),e(Yo,St),M(qx,St,null),e(St,k2r),e(St,i8e),e(i8e,S2r),e(St,R2r),e(St,lc),e(lc,P2r),e(lc,d8e),e(d8e,B2r),e(lc,I2r),e(lc,SJ),e(SJ,N2r),e(lc,q2r),e(St,j2r),M(mM,St,null),e(Yo,D2r),e(Yo,po),M(jx,po,null),e(po,G2r),e(po,c8e),e(c8e,O2r),e(po,V2r),e(po,fn),e(fn,X2r),e(fn,f8e),e(f8e,z2r),e(fn,Q2r),e(fn,m8e),e(m8e,W2r),e(fn,U2r),e(fn,g8e),e(g8e,H2r),e(fn,J2r),e(po,Y2r),e(po,it),e(it,gM),e(gM,h8e),e(h8e,K2r),e(gM,Z2r),e(gM,RJ),e(RJ,ebr),e(gM,obr),e(it,rbr),e(it,hM),e(hM,p8e),e(p8e,tbr),e(hM,abr),e(hM,PJ),e(PJ,nbr),e(hM,sbr),e(it,lbr),e(it,pM),e(pM,u8e),e(u8e,ibr),e(pM,dbr),e(pM,BJ),e(BJ,cbr),e(pM,fbr),e(it,mbr),e(it,uM),e(uM,_8e),e(_8e,gbr),e(uM,hbr),e(uM,IJ),e(IJ,pbr),e(uM,ubr),e(it,_br),e(it,_M),e(_M,b8e),e(b8e,bbr),e(_M,vbr),e(_M,NJ),e(NJ,Fbr),e(_M,Tbr),e(po,Mbr),e(po,bM),e(bM,Ebr),e(bM,v8e),e(v8e,Cbr),e(bM,wbr),e(bM,F8e),e(F8e,Abr),e(po,ybr),M(vM,po,null),b(f,LHe,_),b(f,ic,_),e(ic,FM),e(FM,T8e),M(Dx,T8e,null),e(ic,Lbr),e(ic,M8e),e(M8e,xbr),b(f,xHe,_),b(f,Ko,_),M(Gx,Ko,null),e(Ko,$br),e(Ko,dc),e(dc,kbr),e(dc,qJ),e(qJ,Sbr),e(dc,Rbr),e(dc,jJ),e(jJ,Pbr),e(dc,Bbr),e(Ko,Ibr),e(Ko,Ox),e(Ox,Nbr),e(Ox,E8e),e(E8e,qbr),e(Ox,jbr),e(Ko,Dbr),e(Ko,Rt),M(Vx,Rt,null),e(Rt,Gbr),e(Rt,C8e),e(C8e,Obr),e(Rt,Vbr),e(Rt,cc),e(cc,Xbr),e(cc,w8e),e(w8e,zbr),e(cc,Qbr),e(cc,DJ),e(DJ,Wbr),e(cc,Ubr),e(Rt,Hbr),M(TM,Rt,null),e(Ko,Jbr),e(Ko,uo),M(Xx,uo,null),e(uo,Ybr),e(uo,A8e),e(A8e,Kbr),e(uo,Zbr),e(uo,mn),e(mn,evr),e(mn,y8e),e(y8e,ovr),e(mn,rvr),e(mn,L8e),e(L8e,tvr),e(mn,avr),e(mn,x8e),e(x8e,nvr),e(mn,svr),e(uo,lvr),e(uo,ye),e(ye,MM),e(MM,$8e),e($8e,ivr),e(MM,dvr),e(MM,GJ),e(GJ,cvr),e(MM,fvr),e(ye,mvr),e(ye,EM),e(EM,k8e),e(k8e,gvr),e(EM,hvr),e(EM,OJ),e(OJ,pvr),e(EM,uvr),e(ye,_vr),e(ye,CM),e(CM,S8e),e(S8e,bvr),e(CM,vvr),e(CM,VJ),e(VJ,Fvr),e(CM,Tvr),e(ye,Mvr),e(ye,wM),e(wM,R8e),e(R8e,Evr),e(wM,Cvr),e(wM,XJ),e(XJ,wvr),e(wM,Avr),e(ye,yvr),e(ye,AM),e(AM,P8e),e(P8e,Lvr),e(AM,xvr),e(AM,zJ),e(zJ,$vr),e(AM,kvr),e(ye,Svr),e(ye,yM),e(yM,B8e),e(B8e,Rvr),e(yM,Pvr),e(yM,QJ),e(QJ,Bvr),e(yM,Ivr),e(ye,Nvr),e(ye,LM),e(LM,I8e),e(I8e,qvr),e(LM,jvr),e(LM,WJ),e(WJ,Dvr),e(LM,Gvr),e(ye,Ovr),e(ye,xM),e(xM,N8e),e(N8e,Vvr),e(xM,Xvr),e(xM,UJ),e(UJ,zvr),e(xM,Qvr),e(ye,Wvr),e(ye,$M),e($M,q8e),e(q8e,Uvr),e($M,Hvr),e($M,HJ),e(HJ,Jvr),e($M,Yvr),e(ye,Kvr),e(ye,kM),e(kM,j8e),e(j8e,Zvr),e(kM,eFr),e(kM,JJ),e(JJ,oFr),e(kM,rFr),e(uo,tFr),e(uo,SM),e(SM,aFr),e(SM,D8e),e(D8e,nFr),e(SM,sFr),e(SM,G8e),e(G8e,lFr),e(uo,iFr),M(RM,uo,null),b(f,$He,_),b(f,fc,_),e(fc,PM),e(PM,O8e),M(zx,O8e,null),e(fc,dFr),e(fc,V8e),e(V8e,cFr),b(f,kHe,_),b(f,Zo,_),M(Qx,Zo,null),e(Zo,fFr),e(Zo,mc),e(mc,mFr),e(mc,YJ),e(YJ,gFr),e(mc,hFr),e(mc,KJ),e(KJ,pFr),e(mc,uFr),e(Zo,_Fr),e(Zo,Wx),e(Wx,bFr),e(Wx,X8e),e(X8e,vFr),e(Wx,FFr),e(Zo,TFr),e(Zo,Pt),M(Ux,Pt,null),e(Pt,MFr),e(Pt,z8e),e(z8e,EFr),e(Pt,CFr),e(Pt,gc),e(gc,wFr),e(gc,Q8e),e(Q8e,AFr),e(gc,yFr),e(gc,ZJ),e(ZJ,LFr),e(gc,xFr),e(Pt,$Fr),M(BM,Pt,null),e(Zo,kFr),e(Zo,_o),M(Hx,_o,null),e(_o,SFr),e(_o,W8e),e(W8e,RFr),e(_o,PFr),e(_o,gn),e(gn,BFr),e(gn,U8e),e(U8e,IFr),e(gn,NFr),e(gn,H8e),e(H8e,qFr),e(gn,jFr),e(gn,J8e),e(J8e,DFr),e(gn,GFr),e(_o,OFr),e(_o,Jx),e(Jx,IM),e(IM,Y8e),e(Y8e,VFr),e(IM,XFr),e(IM,eY),e(eY,zFr),e(IM,QFr),e(Jx,WFr),e(Jx,NM),e(NM,K8e),e(K8e,UFr),e(NM,HFr),e(NM,oY),e(oY,JFr),e(NM,YFr),e(_o,KFr),e(_o,qM),e(qM,ZFr),e(qM,Z8e),e(Z8e,eTr),e(qM,oTr),e(qM,eMe),e(eMe,rTr),e(_o,tTr),M(jM,_o,null),b(f,SHe,_),b(f,hc,_),e(hc,DM),e(DM,oMe),M(Yx,oMe,null),e(hc,aTr),e(hc,rMe),e(rMe,nTr),b(f,RHe,_),b(f,er,_),M(Kx,er,null),e(er,sTr),e(er,pc),e(pc,lTr),e(pc,rY),e(rY,iTr),e(pc,dTr),e(pc,tY),e(tY,cTr),e(pc,fTr),e(er,mTr),e(er,Zx),e(Zx,gTr),e(Zx,tMe),e(tMe,hTr),e(Zx,pTr),e(er,uTr),e(er,Bt),M(e$,Bt,null),e(Bt,_Tr),e(Bt,aMe),e(aMe,bTr),e(Bt,vTr),e(Bt,uc),e(uc,FTr),e(uc,nMe),e(nMe,TTr),e(uc,MTr),e(uc,aY),e(aY,ETr),e(uc,CTr),e(Bt,wTr),M(GM,Bt,null),e(er,ATr),e(er,bo),M(o$,bo,null),e(bo,yTr),e(bo,sMe),e(sMe,LTr),e(bo,xTr),e(bo,hn),e(hn,$Tr),e(hn,lMe),e(lMe,kTr),e(hn,STr),e(hn,iMe),e(iMe,RTr),e(hn,PTr),e(hn,dMe),e(dMe,BTr),e(hn,ITr),e(bo,NTr),e(bo,dt),e(dt,OM),e(OM,cMe),e(cMe,qTr),e(OM,jTr),e(OM,nY),e(nY,DTr),e(OM,GTr),e(dt,OTr),e(dt,VM),e(VM,fMe),e(fMe,VTr),e(VM,XTr),e(VM,sY),e(sY,zTr),e(VM,QTr),e(dt,WTr),e(dt,XM),e(XM,mMe),e(mMe,UTr),e(XM,HTr),e(XM,lY),e(lY,JTr),e(XM,YTr),e(dt,KTr),e(dt,zM),e(zM,gMe),e(gMe,ZTr),e(zM,e8r),e(zM,iY),e(iY,o8r),e(zM,r8r),e(dt,t8r),e(dt,QM),e(QM,hMe),e(hMe,a8r),e(QM,n8r),e(QM,dY),e(dY,s8r),e(QM,l8r),e(bo,i8r),e(bo,WM),e(WM,d8r),e(WM,pMe),e(pMe,c8r),e(WM,f8r),e(WM,uMe),e(uMe,m8r),e(bo,g8r),M(UM,bo,null),b(f,PHe,_),b(f,_c,_),e(_c,HM),e(HM,_Me),M(r$,_Me,null),e(_c,h8r),e(_c,bMe),e(bMe,p8r),b(f,BHe,_),b(f,or,_),M(t$,or,null),e(or,u8r),e(or,bc),e(bc,_8r),e(bc,cY),e(cY,b8r),e(bc,v8r),e(bc,fY),e(fY,F8r),e(bc,T8r),e(or,M8r),e(or,a$),e(a$,E8r),e(a$,vMe),e(vMe,C8r),e(a$,w8r),e(or,A8r),e(or,It),M(n$,It,null),e(It,y8r),e(It,FMe),e(FMe,L8r),e(It,x8r),e(It,vc),e(vc,$8r),e(vc,TMe),e(TMe,k8r),e(vc,S8r),e(vc,mY),e(mY,R8r),e(vc,P8r),e(It,B8r),M(JM,It,null),e(or,I8r),e(or,vo),M(s$,vo,null),e(vo,N8r),e(vo,MMe),e(MMe,q8r),e(vo,j8r),e(vo,pn),e(pn,D8r),e(pn,EMe),e(EMe,G8r),e(pn,O8r),e(pn,CMe),e(CMe,V8r),e(pn,X8r),e(pn,wMe),e(wMe,z8r),e(pn,Q8r),e(vo,W8r),e(vo,un),e(un,YM),e(YM,AMe),e(AMe,U8r),e(YM,H8r),e(YM,gY),e(gY,J8r),e(YM,Y8r),e(un,K8r),e(un,KM),e(KM,yMe),e(yMe,Z8r),e(KM,eMr),e(KM,hY),e(hY,oMr),e(KM,rMr),e(un,tMr),e(un,ZM),e(ZM,LMe),e(LMe,aMr),e(ZM,nMr),e(ZM,pY),e(pY,sMr),e(ZM,lMr),e(un,iMr),e(un,eE),e(eE,xMe),e(xMe,dMr),e(eE,cMr),e(eE,uY),e(uY,fMr),e(eE,mMr),e(vo,gMr),e(vo,oE),e(oE,hMr),e(oE,$Me),e($Me,pMr),e(oE,uMr),e(oE,kMe),e(kMe,_Mr),e(vo,bMr),M(rE,vo,null),b(f,IHe,_),b(f,Fc,_),e(Fc,tE),e(tE,SMe),M(l$,SMe,null),e(Fc,vMr),e(Fc,RMe),e(RMe,FMr),b(f,NHe,_),b(f,rr,_),M(i$,rr,null),e(rr,TMr),e(rr,Tc),e(Tc,MMr),e(Tc,_Y),e(_Y,EMr),e(Tc,CMr),e(Tc,bY),e(bY,wMr),e(Tc,AMr),e(rr,yMr),e(rr,d$),e(d$,LMr),e(d$,PMe),e(PMe,xMr),e(d$,$Mr),e(rr,kMr),e(rr,Nt),M(c$,Nt,null),e(Nt,SMr),e(Nt,BMe),e(BMe,RMr),e(Nt,PMr),e(Nt,Mc),e(Mc,BMr),e(Mc,IMe),e(IMe,IMr),e(Mc,NMr),e(Mc,vY),e(vY,qMr),e(Mc,jMr),e(Nt,DMr),M(aE,Nt,null),e(rr,GMr),e(rr,Fo),M(f$,Fo,null),e(Fo,OMr),e(Fo,NMe),e(NMe,VMr),e(Fo,XMr),e(Fo,_n),e(_n,zMr),e(_n,qMe),e(qMe,QMr),e(_n,WMr),e(_n,jMe),e(jMe,UMr),e(_n,HMr),e(_n,DMe),e(DMe,JMr),e(_n,YMr),e(Fo,KMr),e(Fo,m$),e(m$,nE),e(nE,GMe),e(GMe,ZMr),e(nE,eEr),e(nE,FY),e(FY,oEr),e(nE,rEr),e(m$,tEr),e(m$,sE),e(sE,OMe),e(OMe,aEr),e(sE,nEr),e(sE,TY),e(TY,sEr),e(sE,lEr),e(Fo,iEr),e(Fo,lE),e(lE,dEr),e(lE,VMe),e(VMe,cEr),e(lE,fEr),e(lE,XMe),e(XMe,mEr),e(Fo,gEr),M(iE,Fo,null),b(f,qHe,_),b(f,Ec,_),e(Ec,dE),e(dE,zMe),M(g$,zMe,null),e(Ec,hEr),e(Ec,QMe),e(QMe,pEr),b(f,jHe,_),b(f,tr,_),M(h$,tr,null),e(tr,uEr),e(tr,Cc),e(Cc,_Er),e(Cc,MY),e(MY,bEr),e(Cc,vEr),e(Cc,EY),e(EY,FEr),e(Cc,TEr),e(tr,MEr),e(tr,p$),e(p$,EEr),e(p$,WMe),e(WMe,CEr),e(p$,wEr),e(tr,AEr),e(tr,qt),M(u$,qt,null),e(qt,yEr),e(qt,UMe),e(UMe,LEr),e(qt,xEr),e(qt,wc),e(wc,$Er),e(wc,HMe),e(HMe,kEr),e(wc,SEr),e(wc,CY),e(CY,REr),e(wc,PEr),e(qt,BEr),M(cE,qt,null),e(tr,IEr),e(tr,To),M(_$,To,null),e(To,NEr),e(To,JMe),e(JMe,qEr),e(To,jEr),e(To,bn),e(bn,DEr),e(bn,YMe),e(YMe,GEr),e(bn,OEr),e(bn,KMe),e(KMe,VEr),e(bn,XEr),e(bn,ZMe),e(ZMe,zEr),e(bn,QEr),e(To,WEr),e(To,eEe),e(eEe,fE),e(fE,oEe),e(oEe,UEr),e(fE,HEr),e(fE,wY),e(wY,JEr),e(fE,YEr),e(To,KEr),e(To,mE),e(mE,ZEr),e(mE,rEe),e(rEe,eCr),e(mE,oCr),e(mE,tEe),e(tEe,rCr),e(To,tCr),M(gE,To,null),b(f,DHe,_),b(f,Ac,_),e(Ac,hE),e(hE,aEe),M(b$,aEe,null),e(Ac,aCr),e(Ac,nEe),e(nEe,nCr),b(f,GHe,_),b(f,ar,_),M(v$,ar,null),e(ar,sCr),e(ar,yc),e(yc,lCr),e(yc,AY),e(AY,iCr),e(yc,dCr),e(yc,yY),e(yY,cCr),e(yc,fCr),e(ar,mCr),e(ar,F$),e(F$,gCr),e(F$,sEe),e(sEe,hCr),e(F$,pCr),e(ar,uCr),e(ar,jt),M(T$,jt,null),e(jt,_Cr),e(jt,lEe),e(lEe,bCr),e(jt,vCr),e(jt,Lc),e(Lc,FCr),e(Lc,iEe),e(iEe,TCr),e(Lc,MCr),e(Lc,LY),e(LY,ECr),e(Lc,CCr),e(jt,wCr),M(pE,jt,null),e(ar,ACr),e(ar,Mo),M(M$,Mo,null),e(Mo,yCr),e(Mo,dEe),e(dEe,LCr),e(Mo,xCr),e(Mo,vn),e(vn,$Cr),e(vn,cEe),e(cEe,kCr),e(vn,SCr),e(vn,fEe),e(fEe,RCr),e(vn,PCr),e(vn,mEe),e(mEe,BCr),e(vn,ICr),e(Mo,NCr),e(Mo,ct),e(ct,uE),e(uE,gEe),e(gEe,qCr),e(uE,jCr),e(uE,xY),e(xY,DCr),e(uE,GCr),e(ct,OCr),e(ct,_E),e(_E,hEe),e(hEe,VCr),e(_E,XCr),e(_E,$Y),e($Y,zCr),e(_E,QCr),e(ct,WCr),e(ct,bE),e(bE,pEe),e(pEe,UCr),e(bE,HCr),e(bE,kY),e(kY,JCr),e(bE,YCr),e(ct,KCr),e(ct,vE),e(vE,uEe),e(uEe,ZCr),e(vE,e3r),e(vE,SY),e(SY,o3r),e(vE,r3r),e(ct,t3r),e(ct,FE),e(FE,_Ee),e(_Ee,a3r),e(FE,n3r),e(FE,RY),e(RY,s3r),e(FE,l3r),e(Mo,i3r),e(Mo,TE),e(TE,d3r),e(TE,bEe),e(bEe,c3r),e(TE,f3r),e(TE,vEe),e(vEe,m3r),e(Mo,g3r),M(ME,Mo,null),b(f,OHe,_),b(f,xc,_),e(xc,EE),e(EE,FEe),M(E$,FEe,null),e(xc,h3r),e(xc,TEe),e(TEe,p3r),b(f,VHe,_),b(f,nr,_),M(C$,nr,null),e(nr,u3r),e(nr,$c),e($c,_3r),e($c,PY),e(PY,b3r),e($c,v3r),e($c,BY),e(BY,F3r),e($c,T3r),e(nr,M3r),e(nr,w$),e(w$,E3r),e(w$,MEe),e(MEe,C3r),e(w$,w3r),e(nr,A3r),e(nr,Dt),M(A$,Dt,null),e(Dt,y3r),e(Dt,EEe),e(EEe,L3r),e(Dt,x3r),e(Dt,kc),e(kc,$3r),e(kc,CEe),e(CEe,k3r),e(kc,S3r),e(kc,IY),e(IY,R3r),e(kc,P3r),e(Dt,B3r),M(CE,Dt,null),e(nr,I3r),e(nr,Eo),M(y$,Eo,null),e(Eo,N3r),e(Eo,wEe),e(wEe,q3r),e(Eo,j3r),e(Eo,Fn),e(Fn,D3r),e(Fn,AEe),e(AEe,G3r),e(Fn,O3r),e(Fn,yEe),e(yEe,V3r),e(Fn,X3r),e(Fn,LEe),e(LEe,z3r),e(Fn,Q3r),e(Eo,W3r),e(Eo,xEe),e(xEe,wE),e(wE,$Ee),e($Ee,U3r),e(wE,H3r),e(wE,NY),e(NY,J3r),e(wE,Y3r),e(Eo,K3r),e(Eo,AE),e(AE,Z3r),e(AE,kEe),e(kEe,e5r),e(AE,o5r),e(AE,SEe),e(SEe,r5r),e(Eo,t5r),M(yE,Eo,null),b(f,XHe,_),b(f,Sc,_),e(Sc,LE),e(LE,REe),M(L$,REe,null),e(Sc,a5r),e(Sc,PEe),e(PEe,n5r),b(f,zHe,_),b(f,sr,_),M(x$,sr,null),e(sr,s5r),e(sr,Rc),e(Rc,l5r),e(Rc,qY),e(qY,i5r),e(Rc,d5r),e(Rc,jY),e(jY,c5r),e(Rc,f5r),e(sr,m5r),e(sr,$$),e($$,g5r),e($$,BEe),e(BEe,h5r),e($$,p5r),e(sr,u5r),e(sr,Gt),M(k$,Gt,null),e(Gt,_5r),e(Gt,IEe),e(IEe,b5r),e(Gt,v5r),e(Gt,Pc),e(Pc,F5r),e(Pc,NEe),e(NEe,T5r),e(Pc,M5r),e(Pc,DY),e(DY,E5r),e(Pc,C5r),e(Gt,w5r),M(xE,Gt,null),e(sr,A5r),e(sr,Br),M(S$,Br,null),e(Br,y5r),e(Br,qEe),e(qEe,L5r),e(Br,x5r),e(Br,Tn),e(Tn,$5r),e(Tn,jEe),e(jEe,k5r),e(Tn,S5r),e(Tn,DEe),e(DEe,R5r),e(Tn,P5r),e(Tn,GEe),e(GEe,B5r),e(Tn,I5r),e(Br,N5r),e(Br,q),e(q,$E),e($E,OEe),e(OEe,q5r),e($E,j5r),e($E,GY),e(GY,D5r),e($E,G5r),e(q,O5r),e(q,kE),e(kE,VEe),e(VEe,V5r),e(kE,X5r),e(kE,OY),e(OY,z5r),e(kE,Q5r),e(q,W5r),e(q,SE),e(SE,XEe),e(XEe,U5r),e(SE,H5r),e(SE,VY),e(VY,J5r),e(SE,Y5r),e(q,K5r),e(q,RE),e(RE,zEe),e(zEe,Z5r),e(RE,e0r),e(RE,XY),e(XY,o0r),e(RE,r0r),e(q,t0r),e(q,PE),e(PE,QEe),e(QEe,a0r),e(PE,n0r),e(PE,zY),e(zY,s0r),e(PE,l0r),e(q,i0r),e(q,BE),e(BE,WEe),e(WEe,d0r),e(BE,c0r),e(BE,QY),e(QY,f0r),e(BE,m0r),e(q,g0r),e(q,IE),e(IE,UEe),e(UEe,h0r),e(IE,p0r),e(IE,WY),e(WY,u0r),e(IE,_0r),e(q,b0r),e(q,NE),e(NE,HEe),e(HEe,v0r),e(NE,F0r),e(NE,UY),e(UY,T0r),e(NE,M0r),e(q,E0r),e(q,qE),e(qE,JEe),e(JEe,C0r),e(qE,w0r),e(qE,HY),e(HY,A0r),e(qE,y0r),e(q,L0r),e(q,jE),e(jE,YEe),e(YEe,x0r),e(jE,$0r),e(jE,JY),e(JY,k0r),e(jE,S0r),e(q,R0r),e(q,DE),e(DE,KEe),e(KEe,P0r),e(DE,B0r),e(DE,YY),e(YY,I0r),e(DE,N0r),e(q,q0r),e(q,GE),e(GE,ZEe),e(ZEe,j0r),e(GE,D0r),e(GE,KY),e(KY,G0r),e(GE,O0r),e(q,V0r),e(q,OE),e(OE,eCe),e(eCe,X0r),e(OE,z0r),e(OE,ZY),e(ZY,Q0r),e(OE,W0r),e(q,U0r),e(q,VE),e(VE,oCe),e(oCe,H0r),e(VE,J0r),e(VE,eK),e(eK,Y0r),e(VE,K0r),e(q,Z0r),e(q,XE),e(XE,rCe),e(rCe,ewr),e(XE,owr),e(XE,oK),e(oK,rwr),e(XE,twr),e(q,awr),e(q,zE),e(zE,tCe),e(tCe,nwr),e(zE,swr),e(zE,rK),e(rK,lwr),e(zE,iwr),e(q,dwr),e(q,QE),e(QE,aCe),e(aCe,cwr),e(QE,fwr),e(QE,tK),e(tK,mwr),e(QE,gwr),e(q,hwr),e(q,WE),e(WE,nCe),e(nCe,pwr),e(WE,uwr),e(WE,aK),e(aK,_wr),e(WE,bwr),e(q,vwr),e(q,gl),e(gl,sCe),e(sCe,Fwr),e(gl,Twr),e(gl,nK),e(nK,Mwr),e(gl,Ewr),e(gl,sK),e(sK,Cwr),e(gl,wwr),e(q,Awr),e(q,UE),e(UE,lCe),e(lCe,ywr),e(UE,Lwr),e(UE,lK),e(lK,xwr),e(UE,$wr),e(q,kwr),e(q,HE),e(HE,iCe),e(iCe,Swr),e(HE,Rwr),e(HE,iK),e(iK,Pwr),e(HE,Bwr),e(q,Iwr),e(q,JE),e(JE,dCe),e(dCe,Nwr),e(JE,qwr),e(JE,dK),e(dK,jwr),e(JE,Dwr),e(q,Gwr),e(q,YE),e(YE,cCe),e(cCe,Owr),e(YE,Vwr),e(YE,cK),e(cK,Xwr),e(YE,zwr),e(q,Qwr),e(q,KE),e(KE,fCe),e(fCe,Wwr),e(KE,Uwr),e(KE,fK),e(fK,Hwr),e(KE,Jwr),e(q,Ywr),e(q,ZE),e(ZE,mCe),e(mCe,Kwr),e(ZE,Zwr),e(ZE,mK),e(mK,eAr),e(ZE,oAr),e(q,rAr),e(q,eC),e(eC,gCe),e(gCe,tAr),e(eC,aAr),e(eC,gK),e(gK,nAr),e(eC,sAr),e(q,lAr),e(q,oC),e(oC,hCe),e(hCe,iAr),e(oC,dAr),e(oC,hK),e(hK,cAr),e(oC,fAr),e(q,mAr),e(q,rC),e(rC,pCe),e(pCe,gAr),e(rC,hAr),e(rC,pK),e(pK,pAr),e(rC,uAr),e(q,_Ar),e(q,tC),e(tC,uCe),e(uCe,bAr),e(tC,vAr),e(tC,uK),e(uK,FAr),e(tC,TAr),e(q,MAr),e(q,aC),e(aC,_Ce),e(_Ce,EAr),e(aC,CAr),e(aC,_K),e(_K,wAr),e(aC,AAr),e(q,yAr),e(q,nC),e(nC,bCe),e(bCe,LAr),e(nC,xAr),e(nC,bK),e(bK,$Ar),e(nC,kAr),e(q,SAr),e(q,sC),e(sC,vCe),e(vCe,RAr),e(sC,PAr),e(sC,vK),e(vK,BAr),e(sC,IAr),e(q,NAr),e(q,lC),e(lC,FCe),e(FCe,qAr),e(lC,jAr),e(lC,FK),e(FK,DAr),e(lC,GAr),e(q,OAr),e(q,iC),e(iC,TCe),e(TCe,VAr),e(iC,XAr),e(iC,TK),e(TK,zAr),e(iC,QAr),e(q,WAr),e(q,dC),e(dC,MCe),e(MCe,UAr),e(dC,HAr),e(dC,MK),e(MK,JAr),e(dC,YAr),e(q,KAr),e(q,cC),e(cC,ECe),e(ECe,ZAr),e(cC,e6r),e(cC,EK),e(EK,o6r),e(cC,r6r),e(q,t6r),e(q,fC),e(fC,CCe),e(CCe,a6r),e(fC,n6r),e(fC,CK),e(CK,s6r),e(fC,l6r),e(q,i6r),e(q,mC),e(mC,wCe),e(wCe,d6r),e(mC,c6r),e(mC,wK),e(wK,f6r),e(mC,m6r),e(q,g6r),e(q,gC),e(gC,ACe),e(ACe,h6r),e(gC,p6r),e(gC,AK),e(AK,u6r),e(gC,_6r),e(q,b6r),e(q,hC),e(hC,yCe),e(yCe,v6r),e(hC,F6r),e(hC,yK),e(yK,T6r),e(hC,M6r),e(q,E6r),e(q,pC),e(pC,LCe),e(LCe,C6r),e(pC,w6r),e(pC,LK),e(LK,A6r),e(pC,y6r),e(q,L6r),e(q,uC),e(uC,xCe),e(xCe,x6r),e(uC,$6r),e(uC,xK),e(xK,k6r),e(uC,S6r),e(q,R6r),e(q,_C),e(_C,$Ce),e($Ce,P6r),e(_C,B6r),e(_C,$K),e($K,I6r),e(_C,N6r),e(q,q6r),e(q,bC),e(bC,kCe),e(kCe,j6r),e(bC,D6r),e(bC,kK),e(kK,G6r),e(bC,O6r),e(q,V6r),e(q,vC),e(vC,SCe),e(SCe,X6r),e(vC,z6r),e(vC,SK),e(SK,Q6r),e(vC,W6r),e(q,U6r),e(q,FC),e(FC,RCe),e(RCe,H6r),e(FC,J6r),e(FC,RK),e(RK,Y6r),e(FC,K6r),e(q,Z6r),e(q,TC),e(TC,PCe),e(PCe,e7r),e(TC,o7r),e(TC,PK),e(PK,r7r),e(TC,t7r),e(q,a7r),e(q,MC),e(MC,BCe),e(BCe,n7r),e(MC,s7r),e(MC,BK),e(BK,l7r),e(MC,i7r),e(q,d7r),e(q,EC),e(EC,ICe),e(ICe,c7r),e(EC,f7r),e(EC,IK),e(IK,m7r),e(EC,g7r),e(q,h7r),e(q,CC),e(CC,NCe),e(NCe,p7r),e(CC,u7r),e(CC,NK),e(NK,_7r),e(CC,b7r),e(q,v7r),e(q,wC),e(wC,qCe),e(qCe,F7r),e(wC,T7r),e(wC,qK),e(qK,M7r),e(wC,E7r),e(Br,C7r),M(AC,Br,null),b(f,QHe,_),b(f,Bc,_),e(Bc,yC),e(yC,jCe),M(R$,jCe,null),e(Bc,w7r),e(Bc,DCe),e(DCe,A7r),b(f,WHe,_),b(f,lr,_),M(P$,lr,null),e(lr,y7r),e(lr,Ic),e(Ic,L7r),e(Ic,jK),e(jK,x7r),e(Ic,$7r),e(Ic,DK),e(DK,k7r),e(Ic,S7r),e(lr,R7r),e(lr,B$),e(B$,P7r),e(B$,GCe),e(GCe,B7r),e(B$,I7r),e(lr,N7r),e(lr,Ot),M(I$,Ot,null),e(Ot,q7r),e(Ot,OCe),e(OCe,j7r),e(Ot,D7r),e(Ot,Nc),e(Nc,G7r),e(Nc,VCe),e(VCe,O7r),e(Nc,V7r),e(Nc,GK),e(GK,X7r),e(Nc,z7r),e(Ot,Q7r),M(LC,Ot,null),e(lr,W7r),e(lr,Ir),M(N$,Ir,null),e(Ir,U7r),e(Ir,XCe),e(XCe,H7r),e(Ir,J7r),e(Ir,Mn),e(Mn,Y7r),e(Mn,zCe),e(zCe,K7r),e(Mn,Z7r),e(Mn,QCe),e(QCe,eyr),e(Mn,oyr),e(Mn,WCe),e(WCe,ryr),e(Mn,tyr),e(Ir,ayr),e(Ir,se),e(se,xC),e(xC,UCe),e(UCe,nyr),e(xC,syr),e(xC,OK),e(OK,lyr),e(xC,iyr),e(se,dyr),e(se,$C),e($C,HCe),e(HCe,cyr),e($C,fyr),e($C,VK),e(VK,myr),e($C,gyr),e(se,hyr),e(se,kC),e(kC,JCe),e(JCe,pyr),e(kC,uyr),e(kC,XK),e(XK,_yr),e(kC,byr),e(se,vyr),e(se,SC),e(SC,YCe),e(YCe,Fyr),e(SC,Tyr),e(SC,zK),e(zK,Myr),e(SC,Eyr),e(se,Cyr),e(se,RC),e(RC,KCe),e(KCe,wyr),e(RC,Ayr),e(RC,QK),e(QK,yyr),e(RC,Lyr),e(se,xyr),e(se,PC),e(PC,ZCe),e(ZCe,$yr),e(PC,kyr),e(PC,WK),e(WK,Syr),e(PC,Ryr),e(se,Pyr),e(se,BC),e(BC,e3e),e(e3e,Byr),e(BC,Iyr),e(BC,UK),e(UK,Nyr),e(BC,qyr),e(se,jyr),e(se,IC),e(IC,o3e),e(o3e,Dyr),e(IC,Gyr),e(IC,HK),e(HK,Oyr),e(IC,Vyr),e(se,Xyr),e(se,NC),e(NC,r3e),e(r3e,zyr),e(NC,Qyr),e(NC,JK),e(JK,Wyr),e(NC,Uyr),e(se,Hyr),e(se,qC),e(qC,t3e),e(t3e,Jyr),e(qC,Yyr),e(qC,YK),e(YK,Kyr),e(qC,Zyr),e(se,eLr),e(se,jC),e(jC,a3e),e(a3e,oLr),e(jC,rLr),e(jC,KK),e(KK,tLr),e(jC,aLr),e(se,nLr),e(se,DC),e(DC,n3e),e(n3e,sLr),e(DC,lLr),e(DC,ZK),e(ZK,iLr),e(DC,dLr),e(se,cLr),e(se,GC),e(GC,s3e),e(s3e,fLr),e(GC,mLr),e(GC,eZ),e(eZ,gLr),e(GC,hLr),e(se,pLr),e(se,OC),e(OC,l3e),e(l3e,uLr),e(OC,_Lr),e(OC,oZ),e(oZ,bLr),e(OC,vLr),e(se,FLr),e(se,VC),e(VC,i3e),e(i3e,TLr),e(VC,MLr),e(VC,rZ),e(rZ,ELr),e(VC,CLr),e(se,wLr),e(se,XC),e(XC,d3e),e(d3e,ALr),e(XC,yLr),e(XC,tZ),e(tZ,LLr),e(XC,xLr),e(se,$Lr),e(se,zC),e(zC,c3e),e(c3e,kLr),e(zC,SLr),e(zC,aZ),e(aZ,RLr),e(zC,PLr),e(se,BLr),e(se,QC),e(QC,f3e),e(f3e,ILr),e(QC,NLr),e(QC,nZ),e(nZ,qLr),e(QC,jLr),e(se,DLr),e(se,WC),e(WC,m3e),e(m3e,GLr),e(WC,OLr),e(WC,sZ),e(sZ,VLr),e(WC,XLr),e(se,zLr),e(se,UC),e(UC,g3e),e(g3e,QLr),e(UC,WLr),e(UC,lZ),e(lZ,ULr),e(UC,HLr),e(se,JLr),e(se,HC),e(HC,h3e),e(h3e,YLr),e(HC,KLr),e(HC,iZ),e(iZ,ZLr),e(HC,e9r),e(se,o9r),e(se,JC),e(JC,p3e),e(p3e,r9r),e(JC,t9r),e(JC,dZ),e(dZ,a9r),e(JC,n9r),e(se,s9r),e(se,YC),e(YC,u3e),e(u3e,l9r),e(YC,i9r),e(YC,cZ),e(cZ,d9r),e(YC,c9r),e(Ir,f9r),M(KC,Ir,null),b(f,UHe,_),b(f,qc,_),e(qc,ZC),e(ZC,_3e),M(q$,_3e,null),e(qc,m9r),e(qc,b3e),e(b3e,g9r),b(f,HHe,_),b(f,ir,_),M(j$,ir,null),e(ir,h9r),e(ir,jc),e(jc,p9r),e(jc,fZ),e(fZ,u9r),e(jc,_9r),e(jc,mZ),e(mZ,b9r),e(jc,v9r),e(ir,F9r),e(ir,D$),e(D$,T9r),e(D$,v3e),e(v3e,M9r),e(D$,E9r),e(ir,C9r),e(ir,Vt),M(G$,Vt,null),e(Vt,w9r),e(Vt,F3e),e(F3e,A9r),e(Vt,y9r),e(Vt,Dc),e(Dc,L9r),e(Dc,T3e),e(T3e,x9r),e(Dc,$9r),e(Dc,gZ),e(gZ,k9r),e(Dc,S9r),e(Vt,R9r),M(e3,Vt,null),e(ir,P9r),e(ir,Nr),M(O$,Nr,null),e(Nr,B9r),e(Nr,M3e),e(M3e,I9r),e(Nr,N9r),e(Nr,En),e(En,q9r),e(En,E3e),e(E3e,j9r),e(En,D9r),e(En,C3e),e(C3e,G9r),e(En,O9r),e(En,w3e),e(w3e,V9r),e(En,X9r),e(Nr,z9r),e(Nr,Me),e(Me,o3),e(o3,A3e),e(A3e,Q9r),e(o3,W9r),e(o3,hZ),e(hZ,U9r),e(o3,H9r),e(Me,J9r),e(Me,r3),e(r3,y3e),e(y3e,Y9r),e(r3,K9r),e(r3,pZ),e(pZ,Z9r),e(r3,exr),e(Me,oxr),e(Me,t3),e(t3,L3e),e(L3e,rxr),e(t3,txr),e(t3,uZ),e(uZ,axr),e(t3,nxr),e(Me,sxr),e(Me,a3),e(a3,x3e),e(x3e,lxr),e(a3,ixr),e(a3,_Z),e(_Z,dxr),e(a3,cxr),e(Me,fxr),e(Me,n3),e(n3,$3e),e($3e,mxr),e(n3,gxr),e(n3,bZ),e(bZ,hxr),e(n3,pxr),e(Me,uxr),e(Me,s3),e(s3,k3e),e(k3e,_xr),e(s3,bxr),e(s3,vZ),e(vZ,vxr),e(s3,Fxr),e(Me,Txr),e(Me,l3),e(l3,S3e),e(S3e,Mxr),e(l3,Exr),e(l3,FZ),e(FZ,Cxr),e(l3,wxr),e(Me,Axr),e(Me,i3),e(i3,R3e),e(R3e,yxr),e(i3,Lxr),e(i3,TZ),e(TZ,xxr),e(i3,$xr),e(Me,kxr),e(Me,d3),e(d3,P3e),e(P3e,Sxr),e(d3,Rxr),e(d3,MZ),e(MZ,Pxr),e(d3,Bxr),e(Me,Ixr),e(Me,c3),e(c3,B3e),e(B3e,Nxr),e(c3,qxr),e(c3,EZ),e(EZ,jxr),e(c3,Dxr),e(Me,Gxr),e(Me,f3),e(f3,I3e),e(I3e,Oxr),e(f3,Vxr),e(f3,CZ),e(CZ,Xxr),e(f3,zxr),e(Me,Qxr),e(Me,m3),e(m3,N3e),e(N3e,Wxr),e(m3,Uxr),e(m3,wZ),e(wZ,Hxr),e(m3,Jxr),e(Me,Yxr),e(Me,g3),e(g3,q3e),e(q3e,Kxr),e(g3,Zxr),e(g3,AZ),e(AZ,e$r),e(g3,o$r),e(Nr,r$r),M(h3,Nr,null),b(f,JHe,_),b(f,Gc,_),e(Gc,p3),e(p3,j3e),M(V$,j3e,null),e(Gc,t$r),e(Gc,D3e),e(D3e,a$r),b(f,YHe,_),b(f,dr,_),M(X$,dr,null),e(dr,n$r),e(dr,Oc),e(Oc,s$r),e(Oc,yZ),e(yZ,l$r),e(Oc,i$r),e(Oc,LZ),e(LZ,d$r),e(Oc,c$r),e(dr,f$r),e(dr,z$),e(z$,m$r),e(z$,G3e),e(G3e,g$r),e(z$,h$r),e(dr,p$r),e(dr,Xt),M(Q$,Xt,null),e(Xt,u$r),e(Xt,O3e),e(O3e,_$r),e(Xt,b$r),e(Xt,Vc),e(Vc,v$r),e(Vc,V3e),e(V3e,F$r),e(Vc,T$r),e(Vc,xZ),e(xZ,M$r),e(Vc,E$r),e(Xt,C$r),M(u3,Xt,null),e(dr,w$r),e(dr,qr),M(W$,qr,null),e(qr,A$r),e(qr,X3e),e(X3e,y$r),e(qr,L$r),e(qr,Cn),e(Cn,x$r),e(Cn,z3e),e(z3e,$$r),e(Cn,k$r),e(Cn,Q3e),e(Q3e,S$r),e(Cn,R$r),e(Cn,W3e),e(W3e,P$r),e(Cn,B$r),e(qr,I$r),e(qr,Ve),e(Ve,_3),e(_3,U3e),e(U3e,N$r),e(_3,q$r),e(_3,$Z),e($Z,j$r),e(_3,D$r),e(Ve,G$r),e(Ve,b3),e(b3,H3e),e(H3e,O$r),e(b3,V$r),e(b3,kZ),e(kZ,X$r),e(b3,z$r),e(Ve,Q$r),e(Ve,hl),e(hl,J3e),e(J3e,W$r),e(hl,U$r),e(hl,SZ),e(SZ,H$r),e(hl,J$r),e(hl,RZ),e(RZ,Y$r),e(hl,K$r),e(Ve,Z$r),e(Ve,v3),e(v3,Y3e),e(Y3e,ekr),e(v3,okr),e(v3,PZ),e(PZ,rkr),e(v3,tkr),e(Ve,akr),e(Ve,F3),e(F3,K3e),e(K3e,nkr),e(F3,skr),e(F3,BZ),e(BZ,lkr),e(F3,ikr),e(Ve,dkr),e(Ve,T3),e(T3,Z3e),e(Z3e,ckr),e(T3,fkr),e(T3,IZ),e(IZ,mkr),e(T3,gkr),e(Ve,hkr),e(Ve,M3),e(M3,e5e),e(e5e,pkr),e(M3,ukr),e(M3,NZ),e(NZ,_kr),e(M3,bkr),e(Ve,vkr),e(Ve,E3),e(E3,o5e),e(o5e,Fkr),e(E3,Tkr),e(E3,qZ),e(qZ,Mkr),e(E3,Ekr),e(qr,Ckr),M(C3,qr,null),b(f,KHe,_),b(f,Xc,_),e(Xc,w3),e(w3,r5e),M(U$,r5e,null),e(Xc,wkr),e(Xc,t5e),e(t5e,Akr),b(f,ZHe,_),b(f,cr,_),M(H$,cr,null),e(cr,ykr),e(cr,zc),e(zc,Lkr),e(zc,jZ),e(jZ,xkr),e(zc,$kr),e(zc,DZ),e(DZ,kkr),e(zc,Skr),e(cr,Rkr),e(cr,J$),e(J$,Pkr),e(J$,a5e),e(a5e,Bkr),e(J$,Ikr),e(cr,Nkr),e(cr,zt),M(Y$,zt,null),e(zt,qkr),e(zt,n5e),e(n5e,jkr),e(zt,Dkr),e(zt,Qc),e(Qc,Gkr),e(Qc,s5e),e(s5e,Okr),e(Qc,Vkr),e(Qc,GZ),e(GZ,Xkr),e(Qc,zkr),e(zt,Qkr),M(A3,zt,null),e(cr,Wkr),e(cr,jr),M(K$,jr,null),e(jr,Ukr),e(jr,l5e),e(l5e,Hkr),e(jr,Jkr),e(jr,wn),e(wn,Ykr),e(wn,i5e),e(i5e,Kkr),e(wn,Zkr),e(wn,d5e),e(d5e,eSr),e(wn,oSr),e(wn,c5e),e(c5e,rSr),e(wn,tSr),e(jr,aSr),e(jr,Z$),e(Z$,y3),e(y3,f5e),e(f5e,nSr),e(y3,sSr),e(y3,OZ),e(OZ,lSr),e(y3,iSr),e(Z$,dSr),e(Z$,L3),e(L3,m5e),e(m5e,cSr),e(L3,fSr),e(L3,VZ),e(VZ,mSr),e(L3,gSr),e(jr,hSr),M(x3,jr,null),b(f,eJe,_),b(f,Wc,_),e(Wc,$3),e($3,g5e),M(ek,g5e,null),e(Wc,pSr),e(Wc,h5e),e(h5e,uSr),b(f,oJe,_),b(f,fr,_),M(ok,fr,null),e(fr,_Sr),e(fr,Uc),e(Uc,bSr),e(Uc,XZ),e(XZ,vSr),e(Uc,FSr),e(Uc,zZ),e(zZ,TSr),e(Uc,MSr),e(fr,ESr),e(fr,rk),e(rk,CSr),e(rk,p5e),e(p5e,wSr),e(rk,ASr),e(fr,ySr),e(fr,Qt),M(tk,Qt,null),e(Qt,LSr),e(Qt,u5e),e(u5e,xSr),e(Qt,$Sr),e(Qt,Hc),e(Hc,kSr),e(Hc,_5e),e(_5e,SSr),e(Hc,RSr),e(Hc,QZ),e(QZ,PSr),e(Hc,BSr),e(Qt,ISr),M(k3,Qt,null),e(fr,NSr),e(fr,Dr),M(ak,Dr,null),e(Dr,qSr),e(Dr,b5e),e(b5e,jSr),e(Dr,DSr),e(Dr,An),e(An,GSr),e(An,v5e),e(v5e,OSr),e(An,VSr),e(An,F5e),e(F5e,XSr),e(An,zSr),e(An,T5e),e(T5e,QSr),e(An,WSr),e(Dr,USr),e(Dr,de),e(de,S3),e(S3,M5e),e(M5e,HSr),e(S3,JSr),e(S3,WZ),e(WZ,YSr),e(S3,KSr),e(de,ZSr),e(de,R3),e(R3,E5e),e(E5e,eRr),e(R3,oRr),e(R3,UZ),e(UZ,rRr),e(R3,tRr),e(de,aRr),e(de,P3),e(P3,C5e),e(C5e,nRr),e(P3,sRr),e(P3,HZ),e(HZ,lRr),e(P3,iRr),e(de,dRr),e(de,B3),e(B3,w5e),e(w5e,cRr),e(B3,fRr),e(B3,JZ),e(JZ,mRr),e(B3,gRr),e(de,hRr),e(de,I3),e(I3,A5e),e(A5e,pRr),e(I3,uRr),e(I3,YZ),e(YZ,_Rr),e(I3,bRr),e(de,vRr),e(de,N3),e(N3,y5e),e(y5e,FRr),e(N3,TRr),e(N3,KZ),e(KZ,MRr),e(N3,ERr),e(de,CRr),e(de,q3),e(q3,L5e),e(L5e,wRr),e(q3,ARr),e(q3,ZZ),e(ZZ,yRr),e(q3,LRr),e(de,xRr),e(de,j3),e(j3,x5e),e(x5e,$Rr),e(j3,kRr),e(j3,eee),e(eee,SRr),e(j3,RRr),e(de,PRr),e(de,D3),e(D3,$5e),e($5e,BRr),e(D3,IRr),e(D3,oee),e(oee,NRr),e(D3,qRr),e(de,jRr),e(de,G3),e(G3,k5e),e(k5e,DRr),e(G3,GRr),e(G3,ree),e(ree,ORr),e(G3,VRr),e(de,XRr),e(de,O3),e(O3,S5e),e(S5e,zRr),e(O3,QRr),e(O3,tee),e(tee,WRr),e(O3,URr),e(de,HRr),e(de,V3),e(V3,R5e),e(R5e,JRr),e(V3,YRr),e(V3,aee),e(aee,KRr),e(V3,ZRr),e(de,ePr),e(de,X3),e(X3,P5e),e(P5e,oPr),e(X3,rPr),e(X3,nee),e(nee,tPr),e(X3,aPr),e(de,nPr),e(de,z3),e(z3,B5e),e(B5e,sPr),e(z3,lPr),e(z3,see),e(see,iPr),e(z3,dPr),e(de,cPr),e(de,Q3),e(Q3,I5e),e(I5e,fPr),e(Q3,mPr),e(Q3,lee),e(lee,gPr),e(Q3,hPr),e(de,pPr),e(de,W3),e(W3,N5e),e(N5e,uPr),e(W3,_Pr),e(W3,iee),e(iee,bPr),e(W3,vPr),e(de,FPr),e(de,U3),e(U3,q5e),e(q5e,TPr),e(U3,MPr),e(U3,dee),e(dee,EPr),e(U3,CPr),e(de,wPr),e(de,H3),e(H3,j5e),e(j5e,APr),e(H3,yPr),e(H3,cee),e(cee,LPr),e(H3,xPr),e(de,$Pr),e(de,J3),e(J3,D5e),e(D5e,kPr),e(J3,SPr),e(J3,fee),e(fee,RPr),e(J3,PPr),e(de,BPr),e(de,Y3),e(Y3,G5e),e(G5e,IPr),e(Y3,NPr),e(Y3,mee),e(mee,qPr),e(Y3,jPr),e(Dr,DPr),M(K3,Dr,null),b(f,rJe,_),b(f,Jc,_),e(Jc,Z3),e(Z3,O5e),M(nk,O5e,null),e(Jc,GPr),e(Jc,V5e),e(V5e,OPr),b(f,tJe,_),b(f,mr,_),M(sk,mr,null),e(mr,VPr),e(mr,Yc),e(Yc,XPr),e(Yc,gee),e(gee,zPr),e(Yc,QPr),e(Yc,hee),e(hee,WPr),e(Yc,UPr),e(mr,HPr),e(mr,lk),e(lk,JPr),e(lk,X5e),e(X5e,YPr),e(lk,KPr),e(mr,ZPr),e(mr,Wt),M(ik,Wt,null),e(Wt,eBr),e(Wt,z5e),e(z5e,oBr),e(Wt,rBr),e(Wt,Kc),e(Kc,tBr),e(Kc,Q5e),e(Q5e,aBr),e(Kc,nBr),e(Kc,pee),e(pee,sBr),e(Kc,lBr),e(Wt,iBr),M(e5,Wt,null),e(mr,dBr),e(mr,Gr),M(dk,Gr,null),e(Gr,cBr),e(Gr,W5e),e(W5e,fBr),e(Gr,mBr),e(Gr,yn),e(yn,gBr),e(yn,U5e),e(U5e,hBr),e(yn,pBr),e(yn,H5e),e(H5e,uBr),e(yn,_Br),e(yn,J5e),e(J5e,bBr),e(yn,vBr),e(Gr,FBr),e(Gr,Le),e(Le,o5),e(o5,Y5e),e(Y5e,TBr),e(o5,MBr),e(o5,uee),e(uee,EBr),e(o5,CBr),e(Le,wBr),e(Le,r5),e(r5,K5e),e(K5e,ABr),e(r5,yBr),e(r5,_ee),e(_ee,LBr),e(r5,xBr),e(Le,$Br),e(Le,t5),e(t5,Z5e),e(Z5e,kBr),e(t5,SBr),e(t5,bee),e(bee,RBr),e(t5,PBr),e(Le,BBr),e(Le,a5),e(a5,e0e),e(e0e,IBr),e(a5,NBr),e(a5,vee),e(vee,qBr),e(a5,jBr),e(Le,DBr),e(Le,n5),e(n5,o0e),e(o0e,GBr),e(n5,OBr),e(n5,Fee),e(Fee,VBr),e(n5,XBr),e(Le,zBr),e(Le,s5),e(s5,r0e),e(r0e,QBr),e(s5,WBr),e(s5,Tee),e(Tee,UBr),e(s5,HBr),e(Le,JBr),e(Le,l5),e(l5,t0e),e(t0e,YBr),e(l5,KBr),e(l5,Mee),e(Mee,ZBr),e(l5,eIr),e(Le,oIr),e(Le,i5),e(i5,a0e),e(a0e,rIr),e(i5,tIr),e(i5,Eee),e(Eee,aIr),e(i5,nIr),e(Le,sIr),e(Le,d5),e(d5,n0e),e(n0e,lIr),e(d5,iIr),e(d5,Cee),e(Cee,dIr),e(d5,cIr),e(Le,fIr),e(Le,c5),e(c5,s0e),e(s0e,mIr),e(c5,gIr),e(c5,wee),e(wee,hIr),e(c5,pIr),e(Gr,uIr),M(f5,Gr,null),b(f,aJe,_),b(f,Zc,_),e(Zc,m5),e(m5,l0e),M(ck,l0e,null),e(Zc,_Ir),e(Zc,i0e),e(i0e,bIr),b(f,nJe,_),b(f,gr,_),M(fk,gr,null),e(gr,vIr),e(gr,ef),e(ef,FIr),e(ef,Aee),e(Aee,TIr),e(ef,MIr),e(ef,yee),e(yee,EIr),e(ef,CIr),e(gr,wIr),e(gr,mk),e(mk,AIr),e(mk,d0e),e(d0e,yIr),e(mk,LIr),e(gr,xIr),e(gr,Ut),M(gk,Ut,null),e(Ut,$Ir),e(Ut,c0e),e(c0e,kIr),e(Ut,SIr),e(Ut,of),e(of,RIr),e(of,f0e),e(f0e,PIr),e(of,BIr),e(of,Lee),e(Lee,IIr),e(of,NIr),e(Ut,qIr),M(g5,Ut,null),e(gr,jIr),e(gr,Or),M(hk,Or,null),e(Or,DIr),e(Or,m0e),e(m0e,GIr),e(Or,OIr),e(Or,Ln),e(Ln,VIr),e(Ln,g0e),e(g0e,XIr),e(Ln,zIr),e(Ln,h0e),e(h0e,QIr),e(Ln,WIr),e(Ln,p0e),e(p0e,UIr),e(Ln,HIr),e(Or,JIr),e(Or,te),e(te,h5),e(h5,u0e),e(u0e,YIr),e(h5,KIr),e(h5,xee),e(xee,ZIr),e(h5,eNr),e(te,oNr),e(te,p5),e(p5,_0e),e(_0e,rNr),e(p5,tNr),e(p5,$ee),e($ee,aNr),e(p5,nNr),e(te,sNr),e(te,u5),e(u5,b0e),e(b0e,lNr),e(u5,iNr),e(u5,kee),e(kee,dNr),e(u5,cNr),e(te,fNr),e(te,_5),e(_5,v0e),e(v0e,mNr),e(_5,gNr),e(_5,See),e(See,hNr),e(_5,pNr),e(te,uNr),e(te,b5),e(b5,F0e),e(F0e,_Nr),e(b5,bNr),e(b5,Ree),e(Ree,vNr),e(b5,FNr),e(te,TNr),e(te,v5),e(v5,T0e),e(T0e,MNr),e(v5,ENr),e(v5,Pee),e(Pee,CNr),e(v5,wNr),e(te,ANr),e(te,F5),e(F5,M0e),e(M0e,yNr),e(F5,LNr),e(F5,Bee),e(Bee,xNr),e(F5,$Nr),e(te,kNr),e(te,T5),e(T5,E0e),e(E0e,SNr),e(T5,RNr),e(T5,Iee),e(Iee,PNr),e(T5,BNr),e(te,INr),e(te,M5),e(M5,C0e),e(C0e,NNr),e(M5,qNr),e(M5,Nee),e(Nee,jNr),e(M5,DNr),e(te,GNr),e(te,E5),e(E5,w0e),e(w0e,ONr),e(E5,VNr),e(E5,qee),e(qee,XNr),e(E5,zNr),e(te,QNr),e(te,C5),e(C5,A0e),e(A0e,WNr),e(C5,UNr),e(C5,jee),e(jee,HNr),e(C5,JNr),e(te,YNr),e(te,w5),e(w5,y0e),e(y0e,KNr),e(w5,ZNr),e(w5,Dee),e(Dee,eqr),e(w5,oqr),e(te,rqr),e(te,A5),e(A5,L0e),e(L0e,tqr),e(A5,aqr),e(A5,Gee),e(Gee,nqr),e(A5,sqr),e(te,lqr),e(te,y5),e(y5,x0e),e(x0e,iqr),e(y5,dqr),e(y5,Oee),e(Oee,cqr),e(y5,fqr),e(te,mqr),e(te,L5),e(L5,$0e),e($0e,gqr),e(L5,hqr),e(L5,Vee),e(Vee,pqr),e(L5,uqr),e(te,_qr),e(te,x5),e(x5,k0e),e(k0e,bqr),e(x5,vqr),e(x5,Xee),e(Xee,Fqr),e(x5,Tqr),e(te,Mqr),e(te,$5),e($5,S0e),e(S0e,Eqr),e($5,Cqr),e($5,zee),e(zee,wqr),e($5,Aqr),e(te,yqr),e(te,k5),e(k5,R0e),e(R0e,Lqr),e(k5,xqr),e(k5,Qee),e(Qee,$qr),e(k5,kqr),e(te,Sqr),e(te,S5),e(S5,P0e),e(P0e,Rqr),e(S5,Pqr),e(S5,Wee),e(Wee,Bqr),e(S5,Iqr),e(te,Nqr),e(te,R5),e(R5,B0e),e(B0e,qqr),e(R5,jqr),e(R5,Uee),e(Uee,Dqr),e(R5,Gqr),e(te,Oqr),e(te,P5),e(P5,I0e),e(I0e,Vqr),e(P5,Xqr),e(P5,Hee),e(Hee,zqr),e(P5,Qqr),e(te,Wqr),e(te,B5),e(B5,N0e),e(N0e,Uqr),e(B5,Hqr),e(B5,Jee),e(Jee,Jqr),e(B5,Yqr),e(te,Kqr),e(te,I5),e(I5,q0e),e(q0e,Zqr),e(I5,ejr),e(I5,Yee),e(Yee,ojr),e(I5,rjr),e(te,tjr),e(te,N5),e(N5,j0e),e(j0e,ajr),e(N5,njr),e(N5,Kee),e(Kee,sjr),e(N5,ljr),e(te,ijr),e(te,q5),e(q5,D0e),e(D0e,djr),e(q5,cjr),e(q5,Zee),e(Zee,fjr),e(q5,mjr),e(te,gjr),e(te,j5),e(j5,G0e),e(G0e,hjr),e(j5,pjr),e(j5,eoe),e(eoe,ujr),e(j5,_jr),e(Or,bjr),M(D5,Or,null),b(f,sJe,_),b(f,rf,_),e(rf,G5),e(G5,O0e),M(pk,O0e,null),e(rf,vjr),e(rf,V0e),e(V0e,Fjr),b(f,lJe,_),b(f,hr,_),M(uk,hr,null),e(hr,Tjr),e(hr,tf),e(tf,Mjr),e(tf,ooe),e(ooe,Ejr),e(tf,Cjr),e(tf,roe),e(roe,wjr),e(tf,Ajr),e(hr,yjr),e(hr,_k),e(_k,Ljr),e(_k,X0e),e(X0e,xjr),e(_k,$jr),e(hr,kjr),e(hr,Ht),M(bk,Ht,null),e(Ht,Sjr),e(Ht,z0e),e(z0e,Rjr),e(Ht,Pjr),e(Ht,af),e(af,Bjr),e(af,Q0e),e(Q0e,Ijr),e(af,Njr),e(af,toe),e(toe,qjr),e(af,jjr),e(Ht,Djr),M(O5,Ht,null),e(hr,Gjr),e(hr,Vr),M(vk,Vr,null),e(Vr,Ojr),e(Vr,W0e),e(W0e,Vjr),e(Vr,Xjr),e(Vr,xn),e(xn,zjr),e(xn,U0e),e(U0e,Qjr),e(xn,Wjr),e(xn,H0e),e(H0e,Ujr),e(xn,Hjr),e(xn,J0e),e(J0e,Jjr),e(xn,Yjr),e(Vr,Kjr),e(Vr,ve),e(ve,V5),e(V5,Y0e),e(Y0e,Zjr),e(V5,eDr),e(V5,aoe),e(aoe,oDr),e(V5,rDr),e(ve,tDr),e(ve,X5),e(X5,K0e),e(K0e,aDr),e(X5,nDr),e(X5,noe),e(noe,sDr),e(X5,lDr),e(ve,iDr),e(ve,z5),e(z5,Z0e),e(Z0e,dDr),e(z5,cDr),e(z5,soe),e(soe,fDr),e(z5,mDr),e(ve,gDr),e(ve,Q5),e(Q5,ewe),e(ewe,hDr),e(Q5,pDr),e(Q5,loe),e(loe,uDr),e(Q5,_Dr),e(ve,bDr),e(ve,W5),e(W5,owe),e(owe,vDr),e(W5,FDr),e(W5,ioe),e(ioe,TDr),e(W5,MDr),e(ve,EDr),e(ve,U5),e(U5,rwe),e(rwe,CDr),e(U5,wDr),e(U5,doe),e(doe,ADr),e(U5,yDr),e(ve,LDr),e(ve,H5),e(H5,twe),e(twe,xDr),e(H5,$Dr),e(H5,coe),e(coe,kDr),e(H5,SDr),e(ve,RDr),e(ve,J5),e(J5,awe),e(awe,PDr),e(J5,BDr),e(J5,foe),e(foe,IDr),e(J5,NDr),e(ve,qDr),e(ve,Y5),e(Y5,nwe),e(nwe,jDr),e(Y5,DDr),e(Y5,moe),e(moe,GDr),e(Y5,ODr),e(ve,VDr),e(ve,K5),e(K5,swe),e(swe,XDr),e(K5,zDr),e(K5,goe),e(goe,QDr),e(K5,WDr),e(ve,UDr),e(ve,Z5),e(Z5,lwe),e(lwe,HDr),e(Z5,JDr),e(Z5,hoe),e(hoe,YDr),e(Z5,KDr),e(ve,ZDr),e(ve,e0),e(e0,iwe),e(iwe,eGr),e(e0,oGr),e(e0,poe),e(poe,rGr),e(e0,tGr),e(ve,aGr),e(ve,o0),e(o0,dwe),e(dwe,nGr),e(o0,sGr),e(o0,uoe),e(uoe,lGr),e(o0,iGr),e(ve,dGr),e(ve,r0),e(r0,cwe),e(cwe,cGr),e(r0,fGr),e(r0,_oe),e(_oe,mGr),e(r0,gGr),e(ve,hGr),e(ve,t0),e(t0,fwe),e(fwe,pGr),e(t0,uGr),e(t0,boe),e(boe,_Gr),e(t0,bGr),e(ve,vGr),e(ve,a0),e(a0,mwe),e(mwe,FGr),e(a0,TGr),e(a0,voe),e(voe,MGr),e(a0,EGr),e(ve,CGr),e(ve,n0),e(n0,gwe),e(gwe,wGr),e(n0,AGr),e(n0,Foe),e(Foe,yGr),e(n0,LGr),e(Vr,xGr),M(s0,Vr,null),b(f,iJe,_),b(f,nf,_),e(nf,l0),e(l0,hwe),M(Fk,hwe,null),e(nf,$Gr),e(nf,pwe),e(pwe,kGr),b(f,dJe,_),b(f,pr,_),M(Tk,pr,null),e(pr,SGr),e(pr,sf),e(sf,RGr),e(sf,Toe),e(Toe,PGr),e(sf,BGr),e(sf,Moe),e(Moe,IGr),e(sf,NGr),e(pr,qGr),e(pr,Mk),e(Mk,jGr),e(Mk,uwe),e(uwe,DGr),e(Mk,GGr),e(pr,OGr),e(pr,Jt),M(Ek,Jt,null),e(Jt,VGr),e(Jt,_we),e(_we,XGr),e(Jt,zGr),e(Jt,lf),e(lf,QGr),e(lf,bwe),e(bwe,WGr),e(lf,UGr),e(lf,Eoe),e(Eoe,HGr),e(lf,JGr),e(Jt,YGr),M(i0,Jt,null),e(pr,KGr),e(pr,Xr),M(Ck,Xr,null),e(Xr,ZGr),e(Xr,vwe),e(vwe,eOr),e(Xr,oOr),e(Xr,$n),e($n,rOr),e($n,Fwe),e(Fwe,tOr),e($n,aOr),e($n,Twe),e(Twe,nOr),e($n,sOr),e($n,Mwe),e(Mwe,lOr),e($n,iOr),e(Xr,dOr),e(Xr,wk),e(wk,d0),e(d0,Ewe),e(Ewe,cOr),e(d0,fOr),e(d0,Coe),e(Coe,mOr),e(d0,gOr),e(wk,hOr),e(wk,c0),e(c0,Cwe),e(Cwe,pOr),e(c0,uOr),e(c0,woe),e(woe,_Or),e(c0,bOr),e(Xr,vOr),M(f0,Xr,null),b(f,cJe,_),b(f,df,_),e(df,m0),e(m0,wwe),M(Ak,wwe,null),e(df,FOr),e(df,Awe),e(Awe,TOr),b(f,fJe,_),b(f,ur,_),M(yk,ur,null),e(ur,MOr),e(ur,cf),e(cf,EOr),e(cf,Aoe),e(Aoe,COr),e(cf,wOr),e(cf,yoe),e(yoe,AOr),e(cf,yOr),e(ur,LOr),e(ur,Lk),e(Lk,xOr),e(Lk,ywe),e(ywe,$Or),e(Lk,kOr),e(ur,SOr),e(ur,Yt),M(xk,Yt,null),e(Yt,ROr),e(Yt,Lwe),e(Lwe,POr),e(Yt,BOr),e(Yt,ff),e(ff,IOr),e(ff,xwe),e(xwe,NOr),e(ff,qOr),e(ff,Loe),e(Loe,jOr),e(ff,DOr),e(Yt,GOr),M(g0,Yt,null),e(ur,OOr),e(ur,zr),M($k,zr,null),e(zr,VOr),e(zr,$we),e($we,XOr),e(zr,zOr),e(zr,kn),e(kn,QOr),e(kn,kwe),e(kwe,WOr),e(kn,UOr),e(kn,Swe),e(Swe,HOr),e(kn,JOr),e(kn,Rwe),e(Rwe,YOr),e(kn,KOr),e(zr,ZOr),e(zr,Pwe),e(Pwe,h0),e(h0,Bwe),e(Bwe,eVr),e(h0,oVr),e(h0,xoe),e(xoe,rVr),e(h0,tVr),e(zr,aVr),M(p0,zr,null),b(f,mJe,_),b(f,mf,_),e(mf,u0),e(u0,Iwe),M(kk,Iwe,null),e(mf,nVr),e(mf,Nwe),e(Nwe,sVr),b(f,gJe,_),b(f,_r,_),M(Sk,_r,null),e(_r,lVr),e(_r,gf),e(gf,iVr),e(gf,$oe),e($oe,dVr),e(gf,cVr),e(gf,koe),e(koe,fVr),e(gf,mVr),e(_r,gVr),e(_r,Rk),e(Rk,hVr),e(Rk,qwe),e(qwe,pVr),e(Rk,uVr),e(_r,_Vr),e(_r,Kt),M(Pk,Kt,null),e(Kt,bVr),e(Kt,jwe),e(jwe,vVr),e(Kt,FVr),e(Kt,hf),e(hf,TVr),e(hf,Dwe),e(Dwe,MVr),e(hf,EVr),e(hf,Soe),e(Soe,CVr),e(hf,wVr),e(Kt,AVr),M(_0,Kt,null),e(_r,yVr),e(_r,Qr),M(Bk,Qr,null),e(Qr,LVr),e(Qr,Gwe),e(Gwe,xVr),e(Qr,$Vr),e(Qr,Sn),e(Sn,kVr),e(Sn,Owe),e(Owe,SVr),e(Sn,RVr),e(Sn,Vwe),e(Vwe,PVr),e(Sn,BVr),e(Sn,Xwe),e(Xwe,IVr),e(Sn,NVr),e(Qr,qVr),e(Qr,ce),e(ce,b0),e(b0,zwe),e(zwe,jVr),e(b0,DVr),e(b0,Roe),e(Roe,GVr),e(b0,OVr),e(ce,VVr),e(ce,v0),e(v0,Qwe),e(Qwe,XVr),e(v0,zVr),e(v0,Poe),e(Poe,QVr),e(v0,WVr),e(ce,UVr),e(ce,F0),e(F0,Wwe),e(Wwe,HVr),e(F0,JVr),e(F0,Boe),e(Boe,YVr),e(F0,KVr),e(ce,ZVr),e(ce,T0),e(T0,Uwe),e(Uwe,eXr),e(T0,oXr),e(T0,Ioe),e(Ioe,rXr),e(T0,tXr),e(ce,aXr),e(ce,M0),e(M0,Hwe),e(Hwe,nXr),e(M0,sXr),e(M0,Noe),e(Noe,lXr),e(M0,iXr),e(ce,dXr),e(ce,E0),e(E0,Jwe),e(Jwe,cXr),e(E0,fXr),e(E0,qoe),e(qoe,mXr),e(E0,gXr),e(ce,hXr),e(ce,C0),e(C0,Ywe),e(Ywe,pXr),e(C0,uXr),e(C0,joe),e(joe,_Xr),e(C0,bXr),e(ce,vXr),e(ce,w0),e(w0,Kwe),e(Kwe,FXr),e(w0,TXr),e(w0,Doe),e(Doe,MXr),e(w0,EXr),e(ce,CXr),e(ce,A0),e(A0,Zwe),e(Zwe,wXr),e(A0,AXr),e(A0,Goe),e(Goe,yXr),e(A0,LXr),e(ce,xXr),e(ce,y0),e(y0,eAe),e(eAe,$Xr),e(y0,kXr),e(y0,Ooe),e(Ooe,SXr),e(y0,RXr),e(ce,PXr),e(ce,L0),e(L0,oAe),e(oAe,BXr),e(L0,IXr),e(L0,Voe),e(Voe,NXr),e(L0,qXr),e(ce,jXr),e(ce,x0),e(x0,rAe),e(rAe,DXr),e(x0,GXr),e(x0,Xoe),e(Xoe,OXr),e(x0,VXr),e(ce,XXr),e(ce,$0),e($0,tAe),e(tAe,zXr),e($0,QXr),e($0,zoe),e(zoe,WXr),e($0,UXr),e(ce,HXr),e(ce,k0),e(k0,aAe),e(aAe,JXr),e(k0,YXr),e(k0,Qoe),e(Qoe,KXr),e(k0,ZXr),e(ce,ezr),e(ce,S0),e(S0,nAe),e(nAe,ozr),e(S0,rzr),e(S0,Woe),e(Woe,tzr),e(S0,azr),e(ce,nzr),e(ce,R0),e(R0,sAe),e(sAe,szr),e(R0,lzr),e(R0,Uoe),e(Uoe,izr),e(R0,dzr),e(ce,czr),e(ce,P0),e(P0,lAe),e(lAe,fzr),e(P0,mzr),e(P0,Hoe),e(Hoe,gzr),e(P0,hzr),e(ce,pzr),e(ce,B0),e(B0,iAe),e(iAe,uzr),e(B0,_zr),e(B0,Joe),e(Joe,bzr),e(B0,vzr),e(ce,Fzr),e(ce,I0),e(I0,dAe),e(dAe,Tzr),e(I0,Mzr),e(I0,Yoe),e(Yoe,Ezr),e(I0,Czr),e(ce,wzr),e(ce,N0),e(N0,cAe),e(cAe,Azr),e(N0,yzr),e(N0,Koe),e(Koe,Lzr),e(N0,xzr),e(Qr,$zr),M(q0,Qr,null),b(f,hJe,_),b(f,pf,_),e(pf,j0),e(j0,fAe),M(Ik,fAe,null),e(pf,kzr),e(pf,mAe),e(mAe,Szr),b(f,pJe,_),b(f,br,_),M(Nk,br,null),e(br,Rzr),e(br,uf),e(uf,Pzr),e(uf,Zoe),e(Zoe,Bzr),e(uf,Izr),e(uf,ere),e(ere,Nzr),e(uf,qzr),e(br,jzr),e(br,qk),e(qk,Dzr),e(qk,gAe),e(gAe,Gzr),e(qk,Ozr),e(br,Vzr),e(br,Zt),M(jk,Zt,null),e(Zt,Xzr),e(Zt,hAe),e(hAe,zzr),e(Zt,Qzr),e(Zt,_f),e(_f,Wzr),e(_f,pAe),e(pAe,Uzr),e(_f,Hzr),e(_f,ore),e(ore,Jzr),e(_f,Yzr),e(Zt,Kzr),M(D0,Zt,null),e(br,Zzr),e(br,Wr),M(Dk,Wr,null),e(Wr,eQr),e(Wr,uAe),e(uAe,oQr),e(Wr,rQr),e(Wr,Rn),e(Rn,tQr),e(Rn,_Ae),e(_Ae,aQr),e(Rn,nQr),e(Rn,bAe),e(bAe,sQr),e(Rn,lQr),e(Rn,vAe),e(vAe,iQr),e(Rn,dQr),e(Wr,cQr),e(Wr,fe),e(fe,G0),e(G0,FAe),e(FAe,fQr),e(G0,mQr),e(G0,rre),e(rre,gQr),e(G0,hQr),e(fe,pQr),e(fe,O0),e(O0,TAe),e(TAe,uQr),e(O0,_Qr),e(O0,tre),e(tre,bQr),e(O0,vQr),e(fe,FQr),e(fe,V0),e(V0,MAe),e(MAe,TQr),e(V0,MQr),e(V0,are),e(are,EQr),e(V0,CQr),e(fe,wQr),e(fe,X0),e(X0,EAe),e(EAe,AQr),e(X0,yQr),e(X0,nre),e(nre,LQr),e(X0,xQr),e(fe,$Qr),e(fe,z0),e(z0,CAe),e(CAe,kQr),e(z0,SQr),e(z0,sre),e(sre,RQr),e(z0,PQr),e(fe,BQr),e(fe,Q0),e(Q0,wAe),e(wAe,IQr),e(Q0,NQr),e(Q0,lre),e(lre,qQr),e(Q0,jQr),e(fe,DQr),e(fe,W0),e(W0,AAe),e(AAe,GQr),e(W0,OQr),e(W0,ire),e(ire,VQr),e(W0,XQr),e(fe,zQr),e(fe,U0),e(U0,yAe),e(yAe,QQr),e(U0,WQr),e(U0,dre),e(dre,UQr),e(U0,HQr),e(fe,JQr),e(fe,H0),e(H0,LAe),e(LAe,YQr),e(H0,KQr),e(H0,cre),e(cre,ZQr),e(H0,eWr),e(fe,oWr),e(fe,J0),e(J0,xAe),e(xAe,rWr),e(J0,tWr),e(J0,fre),e(fre,aWr),e(J0,nWr),e(fe,sWr),e(fe,Y0),e(Y0,$Ae),e($Ae,lWr),e(Y0,iWr),e(Y0,mre),e(mre,dWr),e(Y0,cWr),e(fe,fWr),e(fe,K0),e(K0,kAe),e(kAe,mWr),e(K0,gWr),e(K0,gre),e(gre,hWr),e(K0,pWr),e(fe,uWr),e(fe,Z0),e(Z0,SAe),e(SAe,_Wr),e(Z0,bWr),e(Z0,hre),e(hre,vWr),e(Z0,FWr),e(fe,TWr),e(fe,ew),e(ew,RAe),e(RAe,MWr),e(ew,EWr),e(ew,pre),e(pre,CWr),e(ew,wWr),e(fe,AWr),e(fe,ow),e(ow,PAe),e(PAe,yWr),e(ow,LWr),e(ow,ure),e(ure,xWr),e(ow,$Wr),e(fe,kWr),e(fe,rw),e(rw,BAe),e(BAe,SWr),e(rw,RWr),e(rw,_re),e(_re,PWr),e(rw,BWr),e(fe,IWr),e(fe,tw),e(tw,IAe),e(IAe,NWr),e(tw,qWr),e(tw,bre),e(bre,jWr),e(tw,DWr),e(fe,GWr),e(fe,aw),e(aw,NAe),e(NAe,OWr),e(aw,VWr),e(aw,vre),e(vre,XWr),e(aw,zWr),e(fe,QWr),e(fe,nw),e(nw,qAe),e(qAe,WWr),e(nw,UWr),e(nw,Fre),e(Fre,HWr),e(nw,JWr),e(fe,YWr),e(fe,sw),e(sw,jAe),e(jAe,KWr),e(sw,ZWr),e(sw,Tre),e(Tre,eUr),e(sw,oUr),e(Wr,rUr),M(lw,Wr,null),b(f,uJe,_),b(f,bf,_),e(bf,iw),e(iw,DAe),M(Gk,DAe,null),e(bf,tUr),e(bf,GAe),e(GAe,aUr),b(f,_Je,_),b(f,vr,_),M(Ok,vr,null),e(vr,nUr),e(vr,vf),e(vf,sUr),e(vf,Mre),e(Mre,lUr),e(vf,iUr),e(vf,Ere),e(Ere,dUr),e(vf,cUr),e(vr,fUr),e(vr,Vk),e(Vk,mUr),e(Vk,OAe),e(OAe,gUr),e(Vk,hUr),e(vr,pUr),e(vr,ea),M(Xk,ea,null),e(ea,uUr),e(ea,VAe),e(VAe,_Ur),e(ea,bUr),e(ea,Ff),e(Ff,vUr),e(Ff,XAe),e(XAe,FUr),e(Ff,TUr),e(Ff,Cre),e(Cre,MUr),e(Ff,EUr),e(ea,CUr),M(dw,ea,null),e(vr,wUr),e(vr,Ur),M(zk,Ur,null),e(Ur,AUr),e(Ur,zAe),e(zAe,yUr),e(Ur,LUr),e(Ur,Pn),e(Pn,xUr),e(Pn,QAe),e(QAe,$Ur),e(Pn,kUr),e(Pn,WAe),e(WAe,SUr),e(Pn,RUr),e(Pn,UAe),e(UAe,PUr),e(Pn,BUr),e(Ur,IUr),e(Ur,HAe),e(HAe,cw),e(cw,JAe),e(JAe,NUr),e(cw,qUr),e(cw,wre),e(wre,jUr),e(cw,DUr),e(Ur,GUr),M(fw,Ur,null),b(f,bJe,_),b(f,Tf,_),e(Tf,mw),e(mw,YAe),M(Qk,YAe,null),e(Tf,OUr),e(Tf,KAe),e(KAe,VUr),b(f,vJe,_),b(f,Fr,_),M(Wk,Fr,null),e(Fr,XUr),e(Fr,Mf),e(Mf,zUr),e(Mf,Are),e(Are,QUr),e(Mf,WUr),e(Mf,yre),e(yre,UUr),e(Mf,HUr),e(Fr,JUr),e(Fr,Uk),e(Uk,YUr),e(Uk,ZAe),e(ZAe,KUr),e(Uk,ZUr),e(Fr,eHr),e(Fr,oa),M(Hk,oa,null),e(oa,oHr),e(oa,e6e),e(e6e,rHr),e(oa,tHr),e(oa,Ef),e(Ef,aHr),e(Ef,o6e),e(o6e,nHr),e(Ef,sHr),e(Ef,Lre),e(Lre,lHr),e(Ef,iHr),e(oa,dHr),M(gw,oa,null),e(Fr,cHr),e(Fr,Hr),M(Jk,Hr,null),e(Hr,fHr),e(Hr,r6e),e(r6e,mHr),e(Hr,gHr),e(Hr,Bn),e(Bn,hHr),e(Bn,t6e),e(t6e,pHr),e(Bn,uHr),e(Bn,a6e),e(a6e,_Hr),e(Bn,bHr),e(Bn,n6e),e(n6e,vHr),e(Bn,FHr),e(Hr,THr),e(Hr,s6e),e(s6e,hw),e(hw,l6e),e(l6e,MHr),e(hw,EHr),e(hw,xre),e(xre,CHr),e(hw,wHr),e(Hr,AHr),M(pw,Hr,null),b(f,FJe,_),b(f,Cf,_),e(Cf,uw),e(uw,i6e),M(Yk,i6e,null),e(Cf,yHr),e(Cf,d6e),e(d6e,LHr),b(f,TJe,_),b(f,Tr,_),M(Kk,Tr,null),e(Tr,xHr),e(Tr,wf),e(wf,$Hr),e(wf,$re),e($re,kHr),e(wf,SHr),e(wf,kre),e(kre,RHr),e(wf,PHr),e(Tr,BHr),e(Tr,Zk),e(Zk,IHr),e(Zk,c6e),e(c6e,NHr),e(Zk,qHr),e(Tr,jHr),e(Tr,ra),M(eS,ra,null),e(ra,DHr),e(ra,f6e),e(f6e,GHr),e(ra,OHr),e(ra,Af),e(Af,VHr),e(Af,m6e),e(m6e,XHr),e(Af,zHr),e(Af,Sre),e(Sre,QHr),e(Af,WHr),e(ra,UHr),M(_w,ra,null),e(Tr,HHr),e(Tr,Jr),M(oS,Jr,null),e(Jr,JHr),e(Jr,g6e),e(g6e,YHr),e(Jr,KHr),e(Jr,In),e(In,ZHr),e(In,h6e),e(h6e,eJr),e(In,oJr),e(In,p6e),e(p6e,rJr),e(In,tJr),e(In,u6e),e(u6e,aJr),e(In,nJr),e(Jr,sJr),e(Jr,re),e(re,bw),e(bw,_6e),e(_6e,lJr),e(bw,iJr),e(bw,Rre),e(Rre,dJr),e(bw,cJr),e(re,fJr),e(re,vw),e(vw,b6e),e(b6e,mJr),e(vw,gJr),e(vw,Pre),e(Pre,hJr),e(vw,pJr),e(re,uJr),e(re,Fw),e(Fw,v6e),e(v6e,_Jr),e(Fw,bJr),e(Fw,Bre),e(Bre,vJr),e(Fw,FJr),e(re,TJr),e(re,Tw),e(Tw,F6e),e(F6e,MJr),e(Tw,EJr),e(Tw,Ire),e(Ire,CJr),e(Tw,wJr),e(re,AJr),e(re,Mw),e(Mw,T6e),e(T6e,yJr),e(Mw,LJr),e(Mw,Nre),e(Nre,xJr),e(Mw,$Jr),e(re,kJr),e(re,Ew),e(Ew,M6e),e(M6e,SJr),e(Ew,RJr),e(Ew,qre),e(qre,PJr),e(Ew,BJr),e(re,IJr),e(re,Cw),e(Cw,E6e),e(E6e,NJr),e(Cw,qJr),e(Cw,jre),e(jre,jJr),e(Cw,DJr),e(re,GJr),e(re,ww),e(ww,C6e),e(C6e,OJr),e(ww,VJr),e(ww,Dre),e(Dre,XJr),e(ww,zJr),e(re,QJr),e(re,Aw),e(Aw,w6e),e(w6e,WJr),e(Aw,UJr),e(Aw,Gre),e(Gre,HJr),e(Aw,JJr),e(re,YJr),e(re,yw),e(yw,A6e),e(A6e,KJr),e(yw,ZJr),e(yw,Ore),e(Ore,eYr),e(yw,oYr),e(re,rYr),e(re,Lw),e(Lw,y6e),e(y6e,tYr),e(Lw,aYr),e(Lw,Vre),e(Vre,nYr),e(Lw,sYr),e(re,lYr),e(re,xw),e(xw,L6e),e(L6e,iYr),e(xw,dYr),e(xw,Xre),e(Xre,cYr),e(xw,fYr),e(re,mYr),e(re,$w),e($w,x6e),e(x6e,gYr),e($w,hYr),e($w,zre),e(zre,pYr),e($w,uYr),e(re,_Yr),e(re,kw),e(kw,$6e),e($6e,bYr),e(kw,vYr),e(kw,Qre),e(Qre,FYr),e(kw,TYr),e(re,MYr),e(re,Sw),e(Sw,k6e),e(k6e,EYr),e(Sw,CYr),e(Sw,Wre),e(Wre,wYr),e(Sw,AYr),e(re,yYr),e(re,Rw),e(Rw,S6e),e(S6e,LYr),e(Rw,xYr),e(Rw,Ure),e(Ure,$Yr),e(Rw,kYr),e(re,SYr),e(re,Pw),e(Pw,R6e),e(R6e,RYr),e(Pw,PYr),e(Pw,Hre),e(Hre,BYr),e(Pw,IYr),e(re,NYr),e(re,Bw),e(Bw,P6e),e(P6e,qYr),e(Bw,jYr),e(Bw,Jre),e(Jre,DYr),e(Bw,GYr),e(re,OYr),e(re,Iw),e(Iw,B6e),e(B6e,VYr),e(Iw,XYr),e(Iw,Yre),e(Yre,zYr),e(Iw,QYr),e(re,WYr),e(re,Nw),e(Nw,I6e),e(I6e,UYr),e(Nw,HYr),e(Nw,Kre),e(Kre,JYr),e(Nw,YYr),e(re,KYr),e(re,qw),e(qw,N6e),e(N6e,ZYr),e(qw,eKr),e(qw,Zre),e(Zre,oKr),e(qw,rKr),e(re,tKr),e(re,jw),e(jw,q6e),e(q6e,aKr),e(jw,nKr),e(jw,ete),e(ete,sKr),e(jw,lKr),e(re,iKr),e(re,Dw),e(Dw,j6e),e(j6e,dKr),e(Dw,cKr),e(Dw,ote),e(ote,fKr),e(Dw,mKr),e(re,gKr),e(re,Gw),e(Gw,D6e),e(D6e,hKr),e(Gw,pKr),e(Gw,rte),e(rte,uKr),e(Gw,_Kr),e(re,bKr),e(re,Ow),e(Ow,G6e),e(G6e,vKr),e(Ow,FKr),e(Ow,tte),e(tte,TKr),e(Ow,MKr),e(re,EKr),e(re,Vw),e(Vw,O6e),e(O6e,CKr),e(Vw,wKr),e(Vw,ate),e(ate,AKr),e(Vw,yKr),e(re,LKr),e(re,Xw),e(Xw,V6e),e(V6e,xKr),e(Xw,$Kr),e(Xw,nte),e(nte,kKr),e(Xw,SKr),e(Jr,RKr),M(zw,Jr,null),b(f,MJe,_),b(f,yf,_),e(yf,Qw),e(Qw,X6e),M(rS,X6e,null),e(yf,PKr),e(yf,z6e),e(z6e,BKr),b(f,EJe,_),b(f,Mr,_),M(tS,Mr,null),e(Mr,IKr),e(Mr,Lf),e(Lf,NKr),e(Lf,ste),e(ste,qKr),e(Lf,jKr),e(Lf,lte),e(lte,DKr),e(Lf,GKr),e(Mr,OKr),e(Mr,aS),e(aS,VKr),e(aS,Q6e),e(Q6e,XKr),e(aS,zKr),e(Mr,QKr),e(Mr,ta),M(nS,ta,null),e(ta,WKr),e(ta,W6e),e(W6e,UKr),e(ta,HKr),e(ta,xf),e(xf,JKr),e(xf,U6e),e(U6e,YKr),e(xf,KKr),e(xf,ite),e(ite,ZKr),e(xf,eZr),e(ta,oZr),M(Ww,ta,null),e(Mr,rZr),e(Mr,Yr),M(sS,Yr,null),e(Yr,tZr),e(Yr,H6e),e(H6e,aZr),e(Yr,nZr),e(Yr,Nn),e(Nn,sZr),e(Nn,J6e),e(J6e,lZr),e(Nn,iZr),e(Nn,Y6e),e(Y6e,dZr),e(Nn,cZr),e(Nn,K6e),e(K6e,fZr),e(Nn,mZr),e(Yr,gZr),e(Yr,xe),e(xe,Uw),e(Uw,Z6e),e(Z6e,hZr),e(Uw,pZr),e(Uw,dte),e(dte,uZr),e(Uw,_Zr),e(xe,bZr),e(xe,Hw),e(Hw,e7e),e(e7e,vZr),e(Hw,FZr),e(Hw,cte),e(cte,TZr),e(Hw,MZr),e(xe,EZr),e(xe,Jw),e(Jw,o7e),e(o7e,CZr),e(Jw,wZr),e(Jw,fte),e(fte,AZr),e(Jw,yZr),e(xe,LZr),e(xe,Yw),e(Yw,r7e),e(r7e,xZr),e(Yw,$Zr),e(Yw,mte),e(mte,kZr),e(Yw,SZr),e(xe,RZr),e(xe,Kw),e(Kw,t7e),e(t7e,PZr),e(Kw,BZr),e(Kw,gte),e(gte,IZr),e(Kw,NZr),e(xe,qZr),e(xe,Zw),e(Zw,a7e),e(a7e,jZr),e(Zw,DZr),e(Zw,hte),e(hte,GZr),e(Zw,OZr),e(xe,VZr),e(xe,eA),e(eA,n7e),e(n7e,XZr),e(eA,zZr),e(eA,pte),e(pte,QZr),e(eA,WZr),e(xe,UZr),e(xe,oA),e(oA,s7e),e(s7e,HZr),e(oA,JZr),e(oA,ute),e(ute,YZr),e(oA,KZr),e(xe,ZZr),e(xe,rA),e(rA,l7e),e(l7e,eet),e(rA,oet),e(rA,_te),e(_te,ret),e(rA,tet),e(xe,aet),e(xe,tA),e(tA,i7e),e(i7e,net),e(tA,set),e(tA,bte),e(bte,iet),e(tA,det),e(Yr,cet),M(aA,Yr,null),b(f,CJe,_),b(f,$f,_),e($f,nA),e(nA,d7e),M(lS,d7e,null),e($f,fet),e($f,c7e),e(c7e,met),b(f,wJe,_),b(f,Er,_),M(iS,Er,null),e(Er,get),e(Er,kf),e(kf,het),e(kf,vte),e(vte,pet),e(kf,uet),e(kf,Fte),e(Fte,_et),e(kf,bet),e(Er,vet),e(Er,dS),e(dS,Fet),e(dS,f7e),e(f7e,Tet),e(dS,Met),e(Er,Eet),e(Er,aa),M(cS,aa,null),e(aa,Cet),e(aa,m7e),e(m7e,wet),e(aa,Aet),e(aa,Sf),e(Sf,yet),e(Sf,g7e),e(g7e,Let),e(Sf,xet),e(Sf,Tte),e(Tte,$et),e(Sf,ket),e(aa,Set),M(sA,aa,null),e(Er,Ret),e(Er,Kr),M(fS,Kr,null),e(Kr,Pet),e(Kr,h7e),e(h7e,Bet),e(Kr,Iet),e(Kr,qn),e(qn,Net),e(qn,p7e),e(p7e,qet),e(qn,jet),e(qn,u7e),e(u7e,Det),e(qn,Get),e(qn,_7e),e(_7e,Oet),e(qn,Vet),e(Kr,Xet),e(Kr,Ee),e(Ee,lA),e(lA,b7e),e(b7e,zet),e(lA,Qet),e(lA,Mte),e(Mte,Wet),e(lA,Uet),e(Ee,Het),e(Ee,iA),e(iA,v7e),e(v7e,Jet),e(iA,Yet),e(iA,Ete),e(Ete,Ket),e(iA,Zet),e(Ee,eot),e(Ee,dA),e(dA,F7e),e(F7e,oot),e(dA,rot),e(dA,Cte),e(Cte,tot),e(dA,aot),e(Ee,not),e(Ee,cA),e(cA,T7e),e(T7e,sot),e(cA,lot),e(cA,wte),e(wte,iot),e(cA,dot),e(Ee,cot),e(Ee,fA),e(fA,M7e),e(M7e,fot),e(fA,mot),e(fA,Ate),e(Ate,got),e(fA,hot),e(Ee,pot),e(Ee,mA),e(mA,E7e),e(E7e,uot),e(mA,_ot),e(mA,yte),e(yte,bot),e(mA,vot),e(Ee,Fot),e(Ee,gA),e(gA,C7e),e(C7e,Tot),e(gA,Mot),e(gA,Lte),e(Lte,Eot),e(gA,Cot),e(Ee,wot),e(Ee,hA),e(hA,w7e),e(w7e,Aot),e(hA,yot),e(hA,xte),e(xte,Lot),e(hA,xot),e(Ee,$ot),e(Ee,pA),e(pA,A7e),e(A7e,kot),e(pA,Sot),e(pA,$te),e($te,Rot),e(pA,Pot),e(Ee,Bot),e(Ee,uA),e(uA,y7e),e(y7e,Iot),e(uA,Not),e(uA,kte),e(kte,qot),e(uA,jot),e(Ee,Dot),e(Ee,_A),e(_A,L7e),e(L7e,Got),e(_A,Oot),e(_A,Ste),e(Ste,Vot),e(_A,Xot),e(Ee,zot),e(Ee,bA),e(bA,x7e),e(x7e,Qot),e(bA,Wot),e(bA,Rte),e(Rte,Uot),e(bA,Hot),e(Ee,Jot),e(Ee,vA),e(vA,$7e),e($7e,Yot),e(vA,Kot),e(vA,Pte),e(Pte,Zot),e(vA,ert),e(Kr,ort),M(FA,Kr,null),b(f,AJe,_),b(f,Rf,_),e(Rf,TA),e(TA,k7e),M(mS,k7e,null),e(Rf,rrt),e(Rf,S7e),e(S7e,trt),b(f,yJe,_),b(f,Cr,_),M(gS,Cr,null),e(Cr,art),e(Cr,Pf),e(Pf,nrt),e(Pf,Bte),e(Bte,srt),e(Pf,lrt),e(Pf,Ite),e(Ite,irt),e(Pf,drt),e(Cr,crt),e(Cr,hS),e(hS,frt),e(hS,R7e),e(R7e,mrt),e(hS,grt),e(Cr,hrt),e(Cr,na),M(pS,na,null),e(na,prt),e(na,P7e),e(P7e,urt),e(na,_rt),e(na,Bf),e(Bf,brt),e(Bf,B7e),e(B7e,vrt),e(Bf,Frt),e(Bf,Nte),e(Nte,Trt),e(Bf,Mrt),e(na,Ert),M(MA,na,null),e(Cr,Crt),e(Cr,Zr),M(uS,Zr,null),e(Zr,wrt),e(Zr,I7e),e(I7e,Art),e(Zr,yrt),e(Zr,jn),e(jn,Lrt),e(jn,N7e),e(N7e,xrt),e(jn,$rt),e(jn,q7e),e(q7e,krt),e(jn,Srt),e(jn,j7e),e(j7e,Rrt),e(jn,Prt),e(Zr,Brt),e(Zr,$e),e($e,EA),e(EA,D7e),e(D7e,Irt),e(EA,Nrt),e(EA,qte),e(qte,qrt),e(EA,jrt),e($e,Drt),e($e,CA),e(CA,G7e),e(G7e,Grt),e(CA,Ort),e(CA,jte),e(jte,Vrt),e(CA,Xrt),e($e,zrt),e($e,wA),e(wA,O7e),e(O7e,Qrt),e(wA,Wrt),e(wA,Dte),e(Dte,Urt),e(wA,Hrt),e($e,Jrt),e($e,AA),e(AA,V7e),e(V7e,Yrt),e(AA,Krt),e(AA,Gte),e(Gte,Zrt),e(AA,ett),e($e,ott),e($e,yA),e(yA,X7e),e(X7e,rtt),e(yA,ttt),e(yA,Ote),e(Ote,att),e(yA,ntt),e($e,stt),e($e,LA),e(LA,z7e),e(z7e,ltt),e(LA,itt),e(LA,Vte),e(Vte,dtt),e(LA,ctt),e($e,ftt),e($e,xA),e(xA,Q7e),e(Q7e,mtt),e(xA,gtt),e(xA,Xte),e(Xte,htt),e(xA,ptt),e($e,utt),e($e,$A),e($A,W7e),e(W7e,_tt),e($A,btt),e($A,zte),e(zte,vtt),e($A,Ftt),e($e,Ttt),e($e,kA),e(kA,U7e),e(U7e,Mtt),e(kA,Ett),e(kA,Qte),e(Qte,Ctt),e(kA,wtt),e($e,Att),e($e,SA),e(SA,H7e),e(H7e,ytt),e(SA,Ltt),e(SA,Wte),e(Wte,xtt),e(SA,$tt),e(Zr,ktt),M(RA,Zr,null),b(f,LJe,_),b(f,If,_),e(If,PA),e(PA,J7e),M(_S,J7e,null),e(If,Stt),e(If,Y7e),e(Y7e,Rtt),b(f,xJe,_),b(f,wr,_),M(bS,wr,null),e(wr,Ptt),e(wr,Nf),e(Nf,Btt),e(Nf,Ute),e(Ute,Itt),e(Nf,Ntt),e(Nf,Hte),e(Hte,qtt),e(Nf,jtt),e(wr,Dtt),e(wr,vS),e(vS,Gtt),e(vS,K7e),e(K7e,Ott),e(vS,Vtt),e(wr,Xtt),e(wr,sa),M(FS,sa,null),e(sa,ztt),e(sa,Z7e),e(Z7e,Qtt),e(sa,Wtt),e(sa,qf),e(qf,Utt),e(qf,eye),e(eye,Htt),e(qf,Jtt),e(qf,Jte),e(Jte,Ytt),e(qf,Ktt),e(sa,Ztt),M(BA,sa,null),e(wr,eat),e(wr,et),M(TS,et,null),e(et,oat),e(et,oye),e(oye,rat),e(et,tat),e(et,Dn),e(Dn,aat),e(Dn,rye),e(rye,nat),e(Dn,sat),e(Dn,tye),e(tye,lat),e(Dn,iat),e(Dn,aye),e(aye,dat),e(Dn,cat),e(et,fat),e(et,ke),e(ke,IA),e(IA,nye),e(nye,mat),e(IA,gat),e(IA,Yte),e(Yte,hat),e(IA,pat),e(ke,uat),e(ke,NA),e(NA,sye),e(sye,_at),e(NA,bat),e(NA,Kte),e(Kte,vat),e(NA,Fat),e(ke,Tat),e(ke,qA),e(qA,lye),e(lye,Mat),e(qA,Eat),e(qA,Zte),e(Zte,Cat),e(qA,wat),e(ke,Aat),e(ke,jA),e(jA,iye),e(iye,yat),e(jA,Lat),e(jA,eae),e(eae,xat),e(jA,$at),e(ke,kat),e(ke,DA),e(DA,dye),e(dye,Sat),e(DA,Rat),e(DA,oae),e(oae,Pat),e(DA,Bat),e(ke,Iat),e(ke,GA),e(GA,cye),e(cye,Nat),e(GA,qat),e(GA,rae),e(rae,jat),e(GA,Dat),e(ke,Gat),e(ke,OA),e(OA,fye),e(fye,Oat),e(OA,Vat),e(OA,tae),e(tae,Xat),e(OA,zat),e(ke,Qat),e(ke,VA),e(VA,mye),e(mye,Wat),e(VA,Uat),e(VA,aae),e(aae,Hat),e(VA,Jat),e(ke,Yat),e(ke,XA),e(XA,gye),e(gye,Kat),e(XA,Zat),e(XA,nae),e(nae,ent),e(XA,ont),e(ke,rnt),e(ke,zA),e(zA,hye),e(hye,tnt),e(zA,ant),e(zA,sae),e(sae,nnt),e(zA,snt),e(et,lnt),M(QA,et,null),b(f,$Je,_),b(f,jf,_),e(jf,WA),e(WA,pye),M(MS,pye,null),e(jf,int),e(jf,uye),e(uye,dnt),b(f,kJe,_),b(f,Ar,_),M(ES,Ar,null),e(Ar,cnt),e(Ar,Df),e(Df,fnt),e(Df,lae),e(lae,mnt),e(Df,gnt),e(Df,iae),e(iae,hnt),e(Df,pnt),e(Ar,unt),e(Ar,CS),e(CS,_nt),e(CS,_ye),e(_ye,bnt),e(CS,vnt),e(Ar,Fnt),e(Ar,la),M(wS,la,null),e(la,Tnt),e(la,bye),e(bye,Mnt),e(la,Ent),e(la,Gf),e(Gf,Cnt),e(Gf,vye),e(vye,wnt),e(Gf,Ant),e(Gf,dae),e(dae,ynt),e(Gf,Lnt),e(la,xnt),M(UA,la,null),e(Ar,$nt),e(Ar,ot),M(AS,ot,null),e(ot,knt),e(ot,Fye),e(Fye,Snt),e(ot,Rnt),e(ot,Gn),e(Gn,Pnt),e(Gn,Tye),e(Tye,Bnt),e(Gn,Int),e(Gn,Mye),e(Mye,Nnt),e(Gn,qnt),e(Gn,Eye),e(Eye,jnt),e(Gn,Dnt),e(ot,Gnt),e(ot,Se),e(Se,HA),e(HA,Cye),e(Cye,Ont),e(HA,Vnt),e(HA,cae),e(cae,Xnt),e(HA,znt),e(Se,Qnt),e(Se,JA),e(JA,wye),e(wye,Wnt),e(JA,Unt),e(JA,fae),e(fae,Hnt),e(JA,Jnt),e(Se,Ynt),e(Se,YA),e(YA,Aye),e(Aye,Knt),e(YA,Znt),e(YA,mae),e(mae,est),e(YA,ost),e(Se,rst),e(Se,KA),e(KA,yye),e(yye,tst),e(KA,ast),e(KA,gae),e(gae,nst),e(KA,sst),e(Se,lst),e(Se,ZA),e(ZA,Lye),e(Lye,ist),e(ZA,dst),e(ZA,hae),e(hae,cst),e(ZA,fst),e(Se,mst),e(Se,e6),e(e6,xye),e(xye,gst),e(e6,hst),e(e6,pae),e(pae,pst),e(e6,ust),e(Se,_st),e(Se,o6),e(o6,$ye),e($ye,bst),e(o6,vst),e(o6,uae),e(uae,Fst),e(o6,Tst),e(Se,Mst),e(Se,r6),e(r6,kye),e(kye,Est),e(r6,Cst),e(r6,_ae),e(_ae,wst),e(r6,Ast),e(Se,yst),e(Se,t6),e(t6,Sye),e(Sye,Lst),e(t6,xst),e(t6,bae),e(bae,$st),e(t6,kst),e(Se,Sst),e(Se,a6),e(a6,Rye),e(Rye,Rst),e(a6,Pst),e(a6,vae),e(vae,Bst),e(a6,Ist),e(ot,Nst),M(n6,ot,null),b(f,SJe,_),b(f,Of,_),e(Of,s6),e(s6,Pye),M(yS,Pye,null),e(Of,qst),e(Of,Bye),e(Bye,jst),b(f,RJe,_),b(f,yr,_),M(LS,yr,null),e(yr,Dst),e(yr,Vf),e(Vf,Gst),e(Vf,Fae),e(Fae,Ost),e(Vf,Vst),e(Vf,Tae),e(Tae,Xst),e(Vf,zst),e(yr,Qst),e(yr,xS),e(xS,Wst),e(xS,Iye),e(Iye,Ust),e(xS,Hst),e(yr,Jst),e(yr,ia),M($S,ia,null),e(ia,Yst),e(ia,Nye),e(Nye,Kst),e(ia,Zst),e(ia,Xf),e(Xf,elt),e(Xf,qye),e(qye,olt),e(Xf,rlt),e(Xf,Mae),e(Mae,tlt),e(Xf,alt),e(ia,nlt),M(l6,ia,null),e(yr,slt),e(yr,rt),M(kS,rt,null),e(rt,llt),e(rt,jye),e(jye,ilt),e(rt,dlt),e(rt,On),e(On,clt),e(On,Dye),e(Dye,flt),e(On,mlt),e(On,Gye),e(Gye,glt),e(On,hlt),e(On,Oye),e(Oye,plt),e(On,ult),e(rt,_lt),e(rt,Re),e(Re,i6),e(i6,Vye),e(Vye,blt),e(i6,vlt),e(i6,Eae),e(Eae,Flt),e(i6,Tlt),e(Re,Mlt),e(Re,d6),e(d6,Xye),e(Xye,Elt),e(d6,Clt),e(d6,Cae),e(Cae,wlt),e(d6,Alt),e(Re,ylt),e(Re,c6),e(c6,zye),e(zye,Llt),e(c6,xlt),e(c6,wae),e(wae,$lt),e(c6,klt),e(Re,Slt),e(Re,f6),e(f6,Qye),e(Qye,Rlt),e(f6,Plt),e(f6,Aae),e(Aae,Blt),e(f6,Ilt),e(Re,Nlt),e(Re,m6),e(m6,Wye),e(Wye,qlt),e(m6,jlt),e(m6,yae),e(yae,Dlt),e(m6,Glt),e(Re,Olt),e(Re,g6),e(g6,Uye),e(Uye,Vlt),e(g6,Xlt),e(g6,Lae),e(Lae,zlt),e(g6,Qlt),e(Re,Wlt),e(Re,h6),e(h6,Hye),e(Hye,Ult),e(h6,Hlt),e(h6,xae),e(xae,Jlt),e(h6,Ylt),e(Re,Klt),e(Re,p6),e(p6,Jye),e(Jye,Zlt),e(p6,eit),e(p6,$ae),e($ae,oit),e(p6,rit),e(Re,tit),e(Re,u6),e(u6,Yye),e(Yye,ait),e(u6,nit),e(u6,kae),e(kae,sit),e(u6,lit),e(Re,iit),e(Re,_6),e(_6,Kye),e(Kye,dit),e(_6,cit),e(_6,Sae),e(Sae,fit),e(_6,mit),e(rt,git),M(b6,rt,null),b(f,PJe,_),b(f,zf,_),e(zf,v6),e(v6,Zye),M(SS,Zye,null),e(zf,hit),e(zf,eLe),e(eLe,pit),b(f,BJe,_),b(f,Lr,_),M(RS,Lr,null),e(Lr,uit),e(Lr,Qf),e(Qf,_it),e(Qf,Rae),e(Rae,bit),e(Qf,vit),e(Qf,Pae),e(Pae,Fit),e(Qf,Tit),e(Lr,Mit),e(Lr,PS),e(PS,Eit),e(PS,oLe),e(oLe,Cit),e(PS,wit),e(Lr,Ait),e(Lr,da),M(BS,da,null),e(da,yit),e(da,rLe),e(rLe,Lit),e(da,xit),e(da,Wf),e(Wf,$it),e(Wf,tLe),e(tLe,kit),e(Wf,Sit),e(Wf,Bae),e(Bae,Rit),e(Wf,Pit),e(da,Bit),M(F6,da,null),e(Lr,Iit),e(Lr,tt),M(IS,tt,null),e(tt,Nit),e(tt,aLe),e(aLe,qit),e(tt,jit),e(tt,Vn),e(Vn,Dit),e(Vn,nLe),e(nLe,Git),e(Vn,Oit),e(Vn,sLe),e(sLe,Vit),e(Vn,Xit),e(Vn,lLe),e(lLe,zit),e(Vn,Qit),e(tt,Wit),e(tt,Xe),e(Xe,T6),e(T6,iLe),e(iLe,Uit),e(T6,Hit),e(T6,Iae),e(Iae,Jit),e(T6,Yit),e(Xe,Kit),e(Xe,M6),e(M6,dLe),e(dLe,Zit),e(M6,edt),e(M6,Nae),e(Nae,odt),e(M6,rdt),e(Xe,tdt),e(Xe,E6),e(E6,cLe),e(cLe,adt),e(E6,ndt),e(E6,qae),e(qae,sdt),e(E6,ldt),e(Xe,idt),e(Xe,C6),e(C6,fLe),e(fLe,ddt),e(C6,cdt),e(C6,jae),e(jae,fdt),e(C6,mdt),e(Xe,gdt),e(Xe,w6),e(w6,mLe),e(mLe,hdt),e(w6,pdt),e(w6,Dae),e(Dae,udt),e(w6,_dt),e(Xe,bdt),e(Xe,A6),e(A6,gLe),e(gLe,vdt),e(A6,Fdt),e(A6,Gae),e(Gae,Tdt),e(A6,Mdt),e(Xe,Edt),e(Xe,y6),e(y6,hLe),e(hLe,Cdt),e(y6,wdt),e(y6,Oae),e(Oae,Adt),e(y6,ydt),e(Xe,Ldt),e(Xe,L6),e(L6,pLe),e(pLe,xdt),e(L6,$dt),e(L6,Vae),e(Vae,kdt),e(L6,Sdt),e(tt,Rdt),M(x6,tt,null),b(f,IJe,_),b(f,Uf,_),e(Uf,$6),e($6,uLe),M(NS,uLe,null),e(Uf,Pdt),e(Uf,_Le),e(_Le,Bdt),b(f,NJe,_),b(f,xr,_),M(qS,xr,null),e(xr,Idt),e(xr,Hf),e(Hf,Ndt),e(Hf,Xae),e(Xae,qdt),e(Hf,jdt),e(Hf,zae),e(zae,Ddt),e(Hf,Gdt),e(xr,Odt),e(xr,jS),e(jS,Vdt),e(jS,bLe),e(bLe,Xdt),e(jS,zdt),e(xr,Qdt),e(xr,ca),M(DS,ca,null),e(ca,Wdt),e(ca,vLe),e(vLe,Udt),e(ca,Hdt),e(ca,Jf),e(Jf,Jdt),e(Jf,FLe),e(FLe,Ydt),e(Jf,Kdt),e(Jf,Qae),e(Qae,Zdt),e(Jf,ect),e(ca,oct),M(k6,ca,null),e(xr,rct),e(xr,at),M(GS,at,null),e(at,tct),e(at,TLe),e(TLe,act),e(at,nct),e(at,Xn),e(Xn,sct),e(Xn,MLe),e(MLe,lct),e(Xn,ict),e(Xn,ELe),e(ELe,dct),e(Xn,cct),e(Xn,CLe),e(CLe,fct),e(Xn,mct),e(at,gct),e(at,ze),e(ze,S6),e(S6,wLe),e(wLe,hct),e(S6,pct),e(S6,Wae),e(Wae,uct),e(S6,_ct),e(ze,bct),e(ze,R6),e(R6,ALe),e(ALe,vct),e(R6,Fct),e(R6,Uae),e(Uae,Tct),e(R6,Mct),e(ze,Ect),e(ze,P6),e(P6,yLe),e(yLe,Cct),e(P6,wct),e(P6,Hae),e(Hae,Act),e(P6,yct),e(ze,Lct),e(ze,B6),e(B6,LLe),e(LLe,xct),e(B6,$ct),e(B6,Jae),e(Jae,kct),e(B6,Sct),e(ze,Rct),e(ze,I6),e(I6,xLe),e(xLe,Pct),e(I6,Bct),e(I6,Yae),e(Yae,Ict),e(I6,Nct),e(ze,qct),e(ze,N6),e(N6,$Le),e($Le,jct),e(N6,Dct),e(N6,Kae),e(Kae,Gct),e(N6,Oct),e(ze,Vct),e(ze,q6),e(q6,kLe),e(kLe,Xct),e(q6,zct),e(q6,Zae),e(Zae,Qct),e(q6,Wct),e(ze,Uct),e(ze,j6),e(j6,SLe),e(SLe,Hct),e(j6,Jct),e(j6,ene),e(ene,Yct),e(j6,Kct),e(at,Zct),M(D6,at,null),b(f,qJe,_),b(f,Yf,_),e(Yf,G6),e(G6,RLe),M(OS,RLe,null),e(Yf,eft),e(Yf,PLe),e(PLe,oft),b(f,jJe,_),b(f,$r,_),M(VS,$r,null),e($r,rft),e($r,Kf),e(Kf,tft),e(Kf,one),e(one,aft),e(Kf,nft),e(Kf,rne),e(rne,sft),e(Kf,lft),e($r,ift),e($r,XS),e(XS,dft),e(XS,BLe),e(BLe,cft),e(XS,fft),e($r,mft),e($r,fa),M(zS,fa,null),e(fa,gft),e(fa,ILe),e(ILe,hft),e(fa,pft),e(fa,Zf),e(Zf,uft),e(Zf,NLe),e(NLe,_ft),e(Zf,bft),e(Zf,tne),e(tne,vft),e(Zf,Fft),e(fa,Tft),M(O6,fa,null),e($r,Mft),e($r,nt),M(QS,nt,null),e(nt,Eft),e(nt,qLe),e(qLe,Cft),e(nt,wft),e(nt,zn),e(zn,Aft),e(zn,jLe),e(jLe,yft),e(zn,Lft),e(zn,DLe),e(DLe,xft),e(zn,$ft),e(zn,GLe),e(GLe,kft),e(zn,Sft),e(nt,Rft),e(nt,OLe),e(OLe,V6),e(V6,VLe),e(VLe,Pft),e(V6,Bft),e(V6,ane),e(ane,Ift),e(V6,Nft),e(nt,qft),M(X6,nt,null),b(f,DJe,_),b(f,em,_),e(em,z6),e(z6,XLe),M(WS,XLe,null),e(em,jft),e(em,zLe),e(zLe,Dft),b(f,GJe,_),b(f,kr,_),M(US,kr,null),e(kr,Gft),e(kr,om),e(om,Oft),e(om,nne),e(nne,Vft),e(om,Xft),e(om,sne),e(sne,zft),e(om,Qft),e(kr,Wft),e(kr,HS),e(HS,Uft),e(HS,QLe),e(QLe,Hft),e(HS,Jft),e(kr,Yft),e(kr,ma),M(JS,ma,null),e(ma,Kft),e(ma,WLe),e(WLe,Zft),e(ma,emt),e(ma,rm),e(rm,omt),e(rm,ULe),e(ULe,rmt),e(rm,tmt),e(rm,lne),e(lne,amt),e(rm,nmt),e(ma,smt),M(Q6,ma,null),e(kr,lmt),e(kr,st),M(YS,st,null),e(st,imt),e(st,HLe),e(HLe,dmt),e(st,cmt),e(st,Qn),e(Qn,fmt),e(Qn,JLe),e(JLe,mmt),e(Qn,gmt),e(Qn,YLe),e(YLe,hmt),e(Qn,pmt),e(Qn,KLe),e(KLe,umt),e(Qn,_mt),e(st,bmt),e(st,KS),e(KS,W6),e(W6,ZLe),e(ZLe,vmt),e(W6,Fmt),e(W6,ine),e(ine,Tmt),e(W6,Mmt),e(KS,Emt),e(KS,U6),e(U6,e9e),e(e9e,Cmt),e(U6,wmt),e(U6,dne),e(dne,Amt),e(U6,ymt),e(st,Lmt),M(H6,st,null),b(f,OJe,_),b(f,tm,_),e(tm,J6),e(J6,o9e),M(ZS,o9e,null),e(tm,xmt),e(tm,r9e),e(r9e,$mt),b(f,VJe,_),b(f,Sr,_),M(eR,Sr,null),e(Sr,kmt),e(Sr,am),e(am,Smt),e(am,cne),e(cne,Rmt),e(am,Pmt),e(am,fne),e(fne,Bmt),e(am,Imt),e(Sr,Nmt),e(Sr,oR),e(oR,qmt),e(oR,t9e),e(t9e,jmt),e(oR,Dmt),e(Sr,Gmt),e(Sr,ga),M(rR,ga,null),e(ga,Omt),e(ga,a9e),e(a9e,Vmt),e(ga,Xmt),e(ga,nm),e(nm,zmt),e(nm,n9e),e(n9e,Qmt),e(nm,Wmt),e(nm,mne),e(mne,Umt),e(nm,Hmt),e(ga,Jmt),M(Y6,ga,null),e(Sr,Ymt),e(Sr,lt),M(tR,lt,null),e(lt,Kmt),e(lt,s9e),e(s9e,Zmt),e(lt,egt),e(lt,Wn),e(Wn,ogt),e(Wn,l9e),e(l9e,rgt),e(Wn,tgt),e(Wn,i9e),e(i9e,agt),e(Wn,ngt),e(Wn,d9e),e(d9e,sgt),e(Wn,lgt),e(lt,igt),e(lt,c9e),e(c9e,K6),e(K6,f9e),e(f9e,dgt),e(K6,cgt),e(K6,gne),e(gne,fgt),e(K6,mgt),e(lt,ggt),M(Z6,lt,null),XJe=!0},p(f,[_]){const aR={};_&2&&(aR.$$scope={dirty:_,ctx:f}),hm.$set(aR);const m9e={};_&2&&(m9e.$$scope={dirty:_,ctx:f}),$h.$set(m9e);const g9e={};_&2&&(g9e.$$scope={dirty:_,ctx:f}),mp.$set(g9e);const h9e={};_&2&&(h9e.$$scope={dirty:_,ctx:f}),Zp.$set(h9e);const nR={};_&2&&(nR.$$scope={dirty:_,ctx:f}),eu.$set(nR);const p9e={};_&2&&(p9e.$$scope={dirty:_,ctx:f}),Eu.$set(p9e);const Un={};_&2&&(Un.$$scope={dirty:_,ctx:f}),Cu.$set(Un);const u9e={};_&2&&(u9e.$$scope={dirty:_,ctx:f}),yu.$set(u9e);const _9e={};_&2&&(_9e.$$scope={dirty:_,ctx:f}),I1.$set(_9e);const b9e={};_&2&&(b9e.$$scope={dirty:_,ctx:f}),q1.$set(b9e);const sR={};_&2&&(sR.$$scope={dirty:_,ctx:f}),R4.$set(sR);const v9e={};_&2&&(v9e.$$scope={dirty:_,ctx:f}),B4.$set(v9e);const lR={};_&2&&(lR.$$scope={dirty:_,ctx:f}),E2.$set(lR);const F9e={};_&2&&(F9e.$$scope={dirty:_,ctx:f}),w2.$set(F9e);const iR={};_&2&&(iR.$$scope={dirty:_,ctx:f}),fb.$set(iR);const T9e={};_&2&&(T9e.$$scope={dirty:_,ctx:f}),gb.$set(T9e);const M9e={};_&2&&(M9e.$$scope={dirty:_,ctx:f}),Pb.$set(M9e);const E9e={};_&2&&(E9e.$$scope={dirty:_,ctx:f}),Ib.$set(E9e);const sm={};_&2&&(sm.$$scope={dirty:_,ctx:f}),Iv.$set(sm);const C9e={};_&2&&(C9e.$$scope={dirty:_,ctx:f}),qv.$set(C9e);const w9e={};_&2&&(w9e.$$scope={dirty:_,ctx:f}),_F.$set(w9e);const A9e={};_&2&&(A9e.$$scope={dirty:_,ctx:f}),vF.$set(A9e);const dR={};_&2&&(dR.$$scope={dirty:_,ctx:f}),yF.$set(dR);const y9e={};_&2&&(y9e.$$scope={dirty:_,ctx:f}),xF.$set(y9e);const L9e={};_&2&&(L9e.$$scope={dirty:_,ctx:f}),hT.$set(L9e);const x9e={};_&2&&(x9e.$$scope={dirty:_,ctx:f}),uT.$set(x9e);const ft={};_&2&&(ft.$$scope={dirty:_,ctx:f}),l8.$set(ft);const cR={};_&2&&(cR.$$scope={dirty:_,ctx:f}),d8.$set(cR);const $9e={};_&2&&($9e.$$scope={dirty:_,ctx:f}),m8.$set($9e);const fR={};_&2&&(fR.$$scope={dirty:_,ctx:f}),h8.$set(fR);const k9e={};_&2&&(k9e.$$scope={dirty:_,ctx:f}),b8.$set(k9e);const mt={};_&2&&(mt.$$scope={dirty:_,ctx:f}),F8.$set(mt);const S9e={};_&2&&(S9e.$$scope={dirty:_,ctx:f}),I8.$set(S9e);const lm={};_&2&&(lm.$$scope={dirty:_,ctx:f}),q8.$set(lm);const R9e={};_&2&&(R9e.$$scope={dirty:_,ctx:f}),G8.$set(R9e);const P9e={};_&2&&(P9e.$$scope={dirty:_,ctx:f}),V8.$set(P9e);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),Q8.$set(y);const e7={};_&2&&(e7.$$scope={dirty:_,ctx:f}),U8.$set(e7);const B9e={};_&2&&(B9e.$$scope={dirty:_,ctx:f}),Y8.$set(B9e);const I9e={};_&2&&(I9e.$$scope={dirty:_,ctx:f}),Z8.$set(I9e);const o7={};_&2&&(o7.$$scope={dirty:_,ctx:f}),cM.$set(o7);const N9e={};_&2&&(N9e.$$scope={dirty:_,ctx:f}),mM.$set(N9e);const q9e={};_&2&&(q9e.$$scope={dirty:_,ctx:f}),vM.$set(q9e);const r7={};_&2&&(r7.$$scope={dirty:_,ctx:f}),TM.$set(r7);const j9e={};_&2&&(j9e.$$scope={dirty:_,ctx:f}),RM.$set(j9e);const D9e={};_&2&&(D9e.$$scope={dirty:_,ctx:f}),BM.$set(D9e);const t7={};_&2&&(t7.$$scope={dirty:_,ctx:f}),jM.$set(t7);const G9e={};_&2&&(G9e.$$scope={dirty:_,ctx:f}),GM.$set(G9e);const O9e={};_&2&&(O9e.$$scope={dirty:_,ctx:f}),UM.$set(O9e);const a7={};_&2&&(a7.$$scope={dirty:_,ctx:f}),JM.$set(a7);const V9e={};_&2&&(V9e.$$scope={dirty:_,ctx:f}),rE.$set(V9e);const X9e={};_&2&&(X9e.$$scope={dirty:_,ctx:f}),aE.$set(X9e);const n7={};_&2&&(n7.$$scope={dirty:_,ctx:f}),iE.$set(n7);const z9e={};_&2&&(z9e.$$scope={dirty:_,ctx:f}),cE.$set(z9e);const Q9e={};_&2&&(Q9e.$$scope={dirty:_,ctx:f}),gE.$set(Q9e);const s7={};_&2&&(s7.$$scope={dirty:_,ctx:f}),pE.$set(s7);const W9e={};_&2&&(W9e.$$scope={dirty:_,ctx:f}),ME.$set(W9e);const U9e={};_&2&&(U9e.$$scope={dirty:_,ctx:f}),CE.$set(U9e);const l7={};_&2&&(l7.$$scope={dirty:_,ctx:f}),yE.$set(l7);const H9e={};_&2&&(H9e.$$scope={dirty:_,ctx:f}),xE.$set(H9e);const J9e={};_&2&&(J9e.$$scope={dirty:_,ctx:f}),AC.$set(J9e);const i7={};_&2&&(i7.$$scope={dirty:_,ctx:f}),LC.$set(i7);const Y9e={};_&2&&(Y9e.$$scope={dirty:_,ctx:f}),KC.$set(Y9e);const K9e={};_&2&&(K9e.$$scope={dirty:_,ctx:f}),e3.$set(K9e);const d7={};_&2&&(d7.$$scope={dirty:_,ctx:f}),h3.$set(d7);const Z9e={};_&2&&(Z9e.$$scope={dirty:_,ctx:f}),u3.$set(Z9e);const exe={};_&2&&(exe.$$scope={dirty:_,ctx:f}),C3.$set(exe);const c7={};_&2&&(c7.$$scope={dirty:_,ctx:f}),A3.$set(c7);const oxe={};_&2&&(oxe.$$scope={dirty:_,ctx:f}),x3.$set(oxe);const rxe={};_&2&&(rxe.$$scope={dirty:_,ctx:f}),k3.$set(rxe);const f7={};_&2&&(f7.$$scope={dirty:_,ctx:f}),K3.$set(f7);const txe={};_&2&&(txe.$$scope={dirty:_,ctx:f}),e5.$set(txe);const axe={};_&2&&(axe.$$scope={dirty:_,ctx:f}),f5.$set(axe);const m7={};_&2&&(m7.$$scope={dirty:_,ctx:f}),g5.$set(m7);const nxe={};_&2&&(nxe.$$scope={dirty:_,ctx:f}),D5.$set(nxe);const sxe={};_&2&&(sxe.$$scope={dirty:_,ctx:f}),O5.$set(sxe);const g7={};_&2&&(g7.$$scope={dirty:_,ctx:f}),s0.$set(g7);const lxe={};_&2&&(lxe.$$scope={dirty:_,ctx:f}),i0.$set(lxe);const ixe={};_&2&&(ixe.$$scope={dirty:_,ctx:f}),f0.$set(ixe);const h7={};_&2&&(h7.$$scope={dirty:_,ctx:f}),g0.$set(h7);const dxe={};_&2&&(dxe.$$scope={dirty:_,ctx:f}),p0.$set(dxe);const cxe={};_&2&&(cxe.$$scope={dirty:_,ctx:f}),_0.$set(cxe);const p7={};_&2&&(p7.$$scope={dirty:_,ctx:f}),q0.$set(p7);const fxe={};_&2&&(fxe.$$scope={dirty:_,ctx:f}),D0.$set(fxe);const mxe={};_&2&&(mxe.$$scope={dirty:_,ctx:f}),lw.$set(mxe);const u7={};_&2&&(u7.$$scope={dirty:_,ctx:f}),dw.$set(u7);const gxe={};_&2&&(gxe.$$scope={dirty:_,ctx:f}),fw.$set(gxe);const hxe={};_&2&&(hxe.$$scope={dirty:_,ctx:f}),gw.$set(hxe);const _7={};_&2&&(_7.$$scope={dirty:_,ctx:f}),pw.$set(_7);const pxe={};_&2&&(pxe.$$scope={dirty:_,ctx:f}),_w.$set(pxe);const uxe={};_&2&&(uxe.$$scope={dirty:_,ctx:f}),zw.$set(uxe);const b7={};_&2&&(b7.$$scope={dirty:_,ctx:f}),Ww.$set(b7);const _xe={};_&2&&(_xe.$$scope={dirty:_,ctx:f}),aA.$set(_xe);const bxe={};_&2&&(bxe.$$scope={dirty:_,ctx:f}),sA.$set(bxe);const v7={};_&2&&(v7.$$scope={dirty:_,ctx:f}),FA.$set(v7);const vxe={};_&2&&(vxe.$$scope={dirty:_,ctx:f}),MA.$set(vxe);const Fxe={};_&2&&(Fxe.$$scope={dirty:_,ctx:f}),RA.$set(Fxe);const F7={};_&2&&(F7.$$scope={dirty:_,ctx:f}),BA.$set(F7);const Txe={};_&2&&(Txe.$$scope={dirty:_,ctx:f}),QA.$set(Txe);const Mxe={};_&2&&(Mxe.$$scope={dirty:_,ctx:f}),UA.$set(Mxe);const T7={};_&2&&(T7.$$scope={dirty:_,ctx:f}),n6.$set(T7);const Exe={};_&2&&(Exe.$$scope={dirty:_,ctx:f}),l6.$set(Exe);const Cxe={};_&2&&(Cxe.$$scope={dirty:_,ctx:f}),b6.$set(Cxe);const M7={};_&2&&(M7.$$scope={dirty:_,ctx:f}),F6.$set(M7);const wxe={};_&2&&(wxe.$$scope={dirty:_,ctx:f}),x6.$set(wxe);const Axe={};_&2&&(Axe.$$scope={dirty:_,ctx:f}),k6.$set(Axe);const E7={};_&2&&(E7.$$scope={dirty:_,ctx:f}),D6.$set(E7);const yxe={};_&2&&(yxe.$$scope={dirty:_,ctx:f}),O6.$set(yxe);const Lxe={};_&2&&(Lxe.$$scope={dirty:_,ctx:f}),X6.$set(Lxe);const C7={};_&2&&(C7.$$scope={dirty:_,ctx:f}),Q6.$set(C7);const xxe={};_&2&&(xxe.$$scope={dirty:_,ctx:f}),H6.$set(xxe);const $xe={};_&2&&($xe.$$scope={dirty:_,ctx:f}),Y6.$set($xe);const w7={};_&2&&(w7.$$scope={dirty:_,ctx:f}),Z6.$set(w7)},i(f){XJe||(E(d.$$.fragment,f),E(Va.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(hm.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(NL.$$.fragment,f),E($h.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(VL.$$.fragment,f),E(mp.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(Zp.$$.fragment,f),E(eu.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(o9.$$.fragment,f),E(Eu.$$.fragment,f),E(Cu.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(yu.$$.fragment,f),E(l9.$$.fragment,f),E(I1.$$.fragment,f),E(i9.$$.fragment,f),E(d9.$$.fragment,f),E(f9.$$.fragment,f),E(q1.$$.fragment,f),E(m9.$$.fragment,f),E(R4.$$.fragment,f),E(g9.$$.fragment,f),E(h9.$$.fragment,f),E(u9.$$.fragment,f),E(B4.$$.fragment,f),E(_9.$$.fragment,f),E(E2.$$.fragment,f),E(b9.$$.fragment,f),E(v9.$$.fragment,f),E(T9.$$.fragment,f),E(w2.$$.fragment,f),E(M9.$$.fragment,f),E(fb.$$.fragment,f),E(E9.$$.fragment,f),E(C9.$$.fragment,f),E(A9.$$.fragment,f),E(gb.$$.fragment,f),E(y9.$$.fragment,f),E(Pb.$$.fragment,f),E(L9.$$.fragment,f),E(x9.$$.fragment,f),E(k9.$$.fragment,f),E(Ib.$$.fragment,f),E(S9.$$.fragment,f),E(Iv.$$.fragment,f),E(R9.$$.fragment,f),E(P9.$$.fragment,f),E(I9.$$.fragment,f),E(qv.$$.fragment,f),E(N9.$$.fragment,f),E(_F.$$.fragment,f),E(q9.$$.fragment,f),E(j9.$$.fragment,f),E(G9.$$.fragment,f),E(vF.$$.fragment,f),E(O9.$$.fragment,f),E(yF.$$.fragment,f),E(V9.$$.fragment,f),E(X9.$$.fragment,f),E(Q9.$$.fragment,f),E(xF.$$.fragment,f),E(W9.$$.fragment,f),E(hT.$$.fragment,f),E(U9.$$.fragment,f),E(H9.$$.fragment,f),E(Y9.$$.fragment,f),E(uT.$$.fragment,f),E(K9.$$.fragment,f),E(l8.$$.fragment,f),E(Z9.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(d8.$$.fragment,f),E(tx.$$.fragment,f),E(m8.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(h8.$$.fragment,f),E(ix.$$.fragment,f),E(b8.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(F8.$$.fragment,f),E(hx.$$.fragment,f),E(I8.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(q8.$$.fragment,f),E(vx.$$.fragment,f),E(G8.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(V8.$$.fragment,f),E(Cx.$$.fragment,f),E(Q8.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(U8.$$.fragment,f),E(xx.$$.fragment,f),E(Y8.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(Z8.$$.fragment,f),E(Px.$$.fragment,f),E(cM.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(mM.$$.fragment,f),E(jx.$$.fragment,f),E(vM.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(TM.$$.fragment,f),E(Xx.$$.fragment,f),E(RM.$$.fragment,f),E(zx.$$.fragment,f),E(Qx.$$.fragment,f),E(Ux.$$.fragment,f),E(BM.$$.fragment,f),E(Hx.$$.fragment,f),E(jM.$$.fragment,f),E(Yx.$$.fragment,f),E(Kx.$$.fragment,f),E(e$.$$.fragment,f),E(GM.$$.fragment,f),E(o$.$$.fragment,f),E(UM.$$.fragment,f),E(r$.$$.fragment,f),E(t$.$$.fragment,f),E(n$.$$.fragment,f),E(JM.$$.fragment,f),E(s$.$$.fragment,f),E(rE.$$.fragment,f),E(l$.$$.fragment,f),E(i$.$$.fragment,f),E(c$.$$.fragment,f),E(aE.$$.fragment,f),E(f$.$$.fragment,f),E(iE.$$.fragment,f),E(g$.$$.fragment,f),E(h$.$$.fragment,f),E(u$.$$.fragment,f),E(cE.$$.fragment,f),E(_$.$$.fragment,f),E(gE.$$.fragment,f),E(b$.$$.fragment,f),E(v$.$$.fragment,f),E(T$.$$.fragment,f),E(pE.$$.fragment,f),E(M$.$$.fragment,f),E(ME.$$.fragment,f),E(E$.$$.fragment,f),E(C$.$$.fragment,f),E(A$.$$.fragment,f),E(CE.$$.fragment,f),E(y$.$$.fragment,f),E(yE.$$.fragment,f),E(L$.$$.fragment,f),E(x$.$$.fragment,f),E(k$.$$.fragment,f),E(xE.$$.fragment,f),E(S$.$$.fragment,f),E(AC.$$.fragment,f),E(R$.$$.fragment,f),E(P$.$$.fragment,f),E(I$.$$.fragment,f),E(LC.$$.fragment,f),E(N$.$$.fragment,f),E(KC.$$.fragment,f),E(q$.$$.fragment,f),E(j$.$$.fragment,f),E(G$.$$.fragment,f),E(e3.$$.fragment,f),E(O$.$$.fragment,f),E(h3.$$.fragment,f),E(V$.$$.fragment,f),E(X$.$$.fragment,f),E(Q$.$$.fragment,f),E(u3.$$.fragment,f),E(W$.$$.fragment,f),E(C3.$$.fragment,f),E(U$.$$.fragment,f),E(H$.$$.fragment,f),E(Y$.$$.fragment,f),E(A3.$$.fragment,f),E(K$.$$.fragment,f),E(x3.$$.fragment,f),E(ek.$$.fragment,f),E(ok.$$.fragment,f),E(tk.$$.fragment,f),E(k3.$$.fragment,f),E(ak.$$.fragment,f),E(K3.$$.fragment,f),E(nk.$$.fragment,f),E(sk.$$.fragment,f),E(ik.$$.fragment,f),E(e5.$$.fragment,f),E(dk.$$.fragment,f),E(f5.$$.fragment,f),E(ck.$$.fragment,f),E(fk.$$.fragment,f),E(gk.$$.fragment,f),E(g5.$$.fragment,f),E(hk.$$.fragment,f),E(D5.$$.fragment,f),E(pk.$$.fragment,f),E(uk.$$.fragment,f),E(bk.$$.fragment,f),E(O5.$$.fragment,f),E(vk.$$.fragment,f),E(s0.$$.fragment,f),E(Fk.$$.fragment,f),E(Tk.$$.fragment,f),E(Ek.$$.fragment,f),E(i0.$$.fragment,f),E(Ck.$$.fragment,f),E(f0.$$.fragment,f),E(Ak.$$.fragment,f),E(yk.$$.fragment,f),E(xk.$$.fragment,f),E(g0.$$.fragment,f),E($k.$$.fragment,f),E(p0.$$.fragment,f),E(kk.$$.fragment,f),E(Sk.$$.fragment,f),E(Pk.$$.fragment,f),E(_0.$$.fragment,f),E(Bk.$$.fragment,f),E(q0.$$.fragment,f),E(Ik.$$.fragment,f),E(Nk.$$.fragment,f),E(jk.$$.fragment,f),E(D0.$$.fragment,f),E(Dk.$$.fragment,f),E(lw.$$.fragment,f),E(Gk.$$.fragment,f),E(Ok.$$.fragment,f),E(Xk.$$.fragment,f),E(dw.$$.fragment,f),E(zk.$$.fragment,f),E(fw.$$.fragment,f),E(Qk.$$.fragment,f),E(Wk.$$.fragment,f),E(Hk.$$.fragment,f),E(gw.$$.fragment,f),E(Jk.$$.fragment,f),E(pw.$$.fragment,f),E(Yk.$$.fragment,f),E(Kk.$$.fragment,f),E(eS.$$.fragment,f),E(_w.$$.fragment,f),E(oS.$$.fragment,f),E(zw.$$.fragment,f),E(rS.$$.fragment,f),E(tS.$$.fragment,f),E(nS.$$.fragment,f),E(Ww.$$.fragment,f),E(sS.$$.fragment,f),E(aA.$$.fragment,f),E(lS.$$.fragment,f),E(iS.$$.fragment,f),E(cS.$$.fragment,f),E(sA.$$.fragment,f),E(fS.$$.fragment,f),E(FA.$$.fragment,f),E(mS.$$.fragment,f),E(gS.$$.fragment,f),E(pS.$$.fragment,f),E(MA.$$.fragment,f),E(uS.$$.fragment,f),E(RA.$$.fragment,f),E(_S.$$.fragment,f),E(bS.$$.fragment,f),E(FS.$$.fragment,f),E(BA.$$.fragment,f),E(TS.$$.fragment,f),E(QA.$$.fragment,f),E(MS.$$.fragment,f),E(ES.$$.fragment,f),E(wS.$$.fragment,f),E(UA.$$.fragment,f),E(AS.$$.fragment,f),E(n6.$$.fragment,f),E(yS.$$.fragment,f),E(LS.$$.fragment,f),E($S.$$.fragment,f),E(l6.$$.fragment,f),E(kS.$$.fragment,f),E(b6.$$.fragment,f),E(SS.$$.fragment,f),E(RS.$$.fragment,f),E(BS.$$.fragment,f),E(F6.$$.fragment,f),E(IS.$$.fragment,f),E(x6.$$.fragment,f),E(NS.$$.fragment,f),E(qS.$$.fragment,f),E(DS.$$.fragment,f),E(k6.$$.fragment,f),E(GS.$$.fragment,f),E(D6.$$.fragment,f),E(OS.$$.fragment,f),E(VS.$$.fragment,f),E(zS.$$.fragment,f),E(O6.$$.fragment,f),E(QS.$$.fragment,f),E(X6.$$.fragment,f),E(WS.$$.fragment,f),E(US.$$.fragment,f),E(JS.$$.fragment,f),E(Q6.$$.fragment,f),E(YS.$$.fragment,f),E(H6.$$.fragment,f),E(ZS.$$.fragment,f),E(eR.$$.fragment,f),E(rR.$$.fragment,f),E(Y6.$$.fragment,f),E(tR.$$.fragment,f),E(Z6.$$.fragment,f),XJe=!0)},o(f){C(d.$$.fragment,f),C(Va.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(hm.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(NL.$$.fragment,f),C($h.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(VL.$$.fragment,f),C(mp.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(Zp.$$.fragment,f),C(eu.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(o9.$$.fragment,f),C(Eu.$$.fragment,f),C(Cu.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(yu.$$.fragment,f),C(l9.$$.fragment,f),C(I1.$$.fragment,f),C(i9.$$.fragment,f),C(d9.$$.fragment,f),C(f9.$$.fragment,f),C(q1.$$.fragment,f),C(m9.$$.fragment,f),C(R4.$$.fragment,f),C(g9.$$.fragment,f),C(h9.$$.fragment,f),C(u9.$$.fragment,f),C(B4.$$.fragment,f),C(_9.$$.fragment,f),C(E2.$$.fragment,f),C(b9.$$.fragment,f),C(v9.$$.fragment,f),C(T9.$$.fragment,f),C(w2.$$.fragment,f),C(M9.$$.fragment,f),C(fb.$$.fragment,f),C(E9.$$.fragment,f),C(C9.$$.fragment,f),C(A9.$$.fragment,f),C(gb.$$.fragment,f),C(y9.$$.fragment,f),C(Pb.$$.fragment,f),C(L9.$$.fragment,f),C(x9.$$.fragment,f),C(k9.$$.fragment,f),C(Ib.$$.fragment,f),C(S9.$$.fragment,f),C(Iv.$$.fragment,f),C(R9.$$.fragment,f),C(P9.$$.fragment,f),C(I9.$$.fragment,f),C(qv.$$.fragment,f),C(N9.$$.fragment,f),C(_F.$$.fragment,f),C(q9.$$.fragment,f),C(j9.$$.fragment,f),C(G9.$$.fragment,f),C(vF.$$.fragment,f),C(O9.$$.fragment,f),C(yF.$$.fragment,f),C(V9.$$.fragment,f),C(X9.$$.fragment,f),C(Q9.$$.fragment,f),C(xF.$$.fragment,f),C(W9.$$.fragment,f),C(hT.$$.fragment,f),C(U9.$$.fragment,f),C(H9.$$.fragment,f),C(Y9.$$.fragment,f),C(uT.$$.fragment,f),C(K9.$$.fragment,f),C(l8.$$.fragment,f),C(Z9.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(d8.$$.fragment,f),C(tx.$$.fragment,f),C(m8.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(h8.$$.fragment,f),C(ix.$$.fragment,f),C(b8.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(F8.$$.fragment,f),C(hx.$$.fragment,f),C(I8.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(q8.$$.fragment,f),C(vx.$$.fragment,f),C(G8.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(V8.$$.fragment,f),C(Cx.$$.fragment,f),C(Q8.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(U8.$$.fragment,f),C(xx.$$.fragment,f),C(Y8.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(Z8.$$.fragment,f),C(Px.$$.fragment,f),C(cM.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(mM.$$.fragment,f),C(jx.$$.fragment,f),C(vM.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(TM.$$.fragment,f),C(Xx.$$.fragment,f),C(RM.$$.fragment,f),C(zx.$$.fragment,f),C(Qx.$$.fragment,f),C(Ux.$$.fragment,f),C(BM.$$.fragment,f),C(Hx.$$.fragment,f),C(jM.$$.fragment,f),C(Yx.$$.fragment,f),C(Kx.$$.fragment,f),C(e$.$$.fragment,f),C(GM.$$.fragment,f),C(o$.$$.fragment,f),C(UM.$$.fragment,f),C(r$.$$.fragment,f),C(t$.$$.fragment,f),C(n$.$$.fragment,f),C(JM.$$.fragment,f),C(s$.$$.fragment,f),C(rE.$$.fragment,f),C(l$.$$.fragment,f),C(i$.$$.fragment,f),C(c$.$$.fragment,f),C(aE.$$.fragment,f),C(f$.$$.fragment,f),C(iE.$$.fragment,f),C(g$.$$.fragment,f),C(h$.$$.fragment,f),C(u$.$$.fragment,f),C(cE.$$.fragment,f),C(_$.$$.fragment,f),C(gE.$$.fragment,f),C(b$.$$.fragment,f),C(v$.$$.fragment,f),C(T$.$$.fragment,f),C(pE.$$.fragment,f),C(M$.$$.fragment,f),C(ME.$$.fragment,f),C(E$.$$.fragment,f),C(C$.$$.fragment,f),C(A$.$$.fragment,f),C(CE.$$.fragment,f),C(y$.$$.fragment,f),C(yE.$$.fragment,f),C(L$.$$.fragment,f),C(x$.$$.fragment,f),C(k$.$$.fragment,f),C(xE.$$.fragment,f),C(S$.$$.fragment,f),C(AC.$$.fragment,f),C(R$.$$.fragment,f),C(P$.$$.fragment,f),C(I$.$$.fragment,f),C(LC.$$.fragment,f),C(N$.$$.fragment,f),C(KC.$$.fragment,f),C(q$.$$.fragment,f),C(j$.$$.fragment,f),C(G$.$$.fragment,f),C(e3.$$.fragment,f),C(O$.$$.fragment,f),C(h3.$$.fragment,f),C(V$.$$.fragment,f),C(X$.$$.fragment,f),C(Q$.$$.fragment,f),C(u3.$$.fragment,f),C(W$.$$.fragment,f),C(C3.$$.fragment,f),C(U$.$$.fragment,f),C(H$.$$.fragment,f),C(Y$.$$.fragment,f),C(A3.$$.fragment,f),C(K$.$$.fragment,f),C(x3.$$.fragment,f),C(ek.$$.fragment,f),C(ok.$$.fragment,f),C(tk.$$.fragment,f),C(k3.$$.fragment,f),C(ak.$$.fragment,f),C(K3.$$.fragment,f),C(nk.$$.fragment,f),C(sk.$$.fragment,f),C(ik.$$.fragment,f),C(e5.$$.fragment,f),C(dk.$$.fragment,f),C(f5.$$.fragment,f),C(ck.$$.fragment,f),C(fk.$$.fragment,f),C(gk.$$.fragment,f),C(g5.$$.fragment,f),C(hk.$$.fragment,f),C(D5.$$.fragment,f),C(pk.$$.fragment,f),C(uk.$$.fragment,f),C(bk.$$.fragment,f),C(O5.$$.fragment,f),C(vk.$$.fragment,f),C(s0.$$.fragment,f),C(Fk.$$.fragment,f),C(Tk.$$.fragment,f),C(Ek.$$.fragment,f),C(i0.$$.fragment,f),C(Ck.$$.fragment,f),C(f0.$$.fragment,f),C(Ak.$$.fragment,f),C(yk.$$.fragment,f),C(xk.$$.fragment,f),C(g0.$$.fragment,f),C($k.$$.fragment,f),C(p0.$$.fragment,f),C(kk.$$.fragment,f),C(Sk.$$.fragment,f),C(Pk.$$.fragment,f),C(_0.$$.fragment,f),C(Bk.$$.fragment,f),C(q0.$$.fragment,f),C(Ik.$$.fragment,f),C(Nk.$$.fragment,f),C(jk.$$.fragment,f),C(D0.$$.fragment,f),C(Dk.$$.fragment,f),C(lw.$$.fragment,f),C(Gk.$$.fragment,f),C(Ok.$$.fragment,f),C(Xk.$$.fragment,f),C(dw.$$.fragment,f),C(zk.$$.fragment,f),C(fw.$$.fragment,f),C(Qk.$$.fragment,f),C(Wk.$$.fragment,f),C(Hk.$$.fragment,f),C(gw.$$.fragment,f),C(Jk.$$.fragment,f),C(pw.$$.fragment,f),C(Yk.$$.fragment,f),C(Kk.$$.fragment,f),C(eS.$$.fragment,f),C(_w.$$.fragment,f),C(oS.$$.fragment,f),C(zw.$$.fragment,f),C(rS.$$.fragment,f),C(tS.$$.fragment,f),C(nS.$$.fragment,f),C(Ww.$$.fragment,f),C(sS.$$.fragment,f),C(aA.$$.fragment,f),C(lS.$$.fragment,f),C(iS.$$.fragment,f),C(cS.$$.fragment,f),C(sA.$$.fragment,f),C(fS.$$.fragment,f),C(FA.$$.fragment,f),C(mS.$$.fragment,f),C(gS.$$.fragment,f),C(pS.$$.fragment,f),C(MA.$$.fragment,f),C(uS.$$.fragment,f),C(RA.$$.fragment,f),C(_S.$$.fragment,f),C(bS.$$.fragment,f),C(FS.$$.fragment,f),C(BA.$$.fragment,f),C(TS.$$.fragment,f),C(QA.$$.fragment,f),C(MS.$$.fragment,f),C(ES.$$.fragment,f),C(wS.$$.fragment,f),C(UA.$$.fragment,f),C(AS.$$.fragment,f),C(n6.$$.fragment,f),C(yS.$$.fragment,f),C(LS.$$.fragment,f),C($S.$$.fragment,f),C(l6.$$.fragment,f),C(kS.$$.fragment,f),C(b6.$$.fragment,f),C(SS.$$.fragment,f),C(RS.$$.fragment,f),C(BS.$$.fragment,f),C(F6.$$.fragment,f),C(IS.$$.fragment,f),C(x6.$$.fragment,f),C(NS.$$.fragment,f),C(qS.$$.fragment,f),C(DS.$$.fragment,f),C(k6.$$.fragment,f),C(GS.$$.fragment,f),C(D6.$$.fragment,f),C(OS.$$.fragment,f),C(VS.$$.fragment,f),C(zS.$$.fragment,f),C(O6.$$.fragment,f),C(QS.$$.fragment,f),C(X6.$$.fragment,f),C(WS.$$.fragment,f),C(US.$$.fragment,f),C(JS.$$.fragment,f),C(Q6.$$.fragment,f),C(YS.$$.fragment,f),C(H6.$$.fragment,f),C(ZS.$$.fragment,f),C(eR.$$.fragment,f),C(rR.$$.fragment,f),C(Y6.$$.fragment,f),C(tR.$$.fragment,f),C(Z6.$$.fragment,f),XJe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(dm),f&&t(gt),f&&t(Oe),f&&t(We),f&&t(fm),w(Va,f),f&&t(Ue),f&&t(Ae),f&&t(Lo),f&&t(Xa),f&&t(RUe),f&&t(od),w(kL),f&&t(PUe),f&&t(Zn),f&&t(BUe),w(SL,f),f&&t(IUe),f&&t(SP),f&&t(NUe),w(hm,f),f&&t(qUe),f&&t(rd),w(RL),f&&t(jUe),f&&t(xo),w(PL),w(NL),w($h),w(qL),f&&t(DUe),f&&t(ad),w(jL),f&&t(GUe),f&&t($o),w(DL),w(VL),w(mp),w(XL),f&&t(OUe),f&&t(nd),w(zL),f&&t(VUe),f&&t(ko),w(QL),w(HL),w(Zp),w(eu),w(JL),f&&t(XUe),f&&t(sd),w(YL),f&&t(zUe),f&&t(So),w(KL),w(o9),w(Eu),w(Cu),w(r9),f&&t(QUe),f&&t(id),w(t9),f&&t(WUe),f&&t(Ro),w(a9),w(s9),w(yu),w(l9),w(I1),f&&t(UUe),f&&t(fd),w(i9),f&&t(HUe),f&&t(Po),w(d9),w(f9),w(q1),w(m9),w(R4),f&&t(JUe),f&&t(hd),w(g9),f&&t(YUe),f&&t(Bo),w(h9),w(u9),w(B4),w(_9),w(E2),f&&t(KUe),f&&t(_d),w(b9),f&&t(ZUe),f&&t(Io),w(v9),w(T9),w(w2),w(M9),w(fb),f&&t(eHe),f&&t(Fd),w(E9),f&&t(oHe),f&&t(No),w(C9),w(A9),w(gb),w(y9),w(Pb),f&&t(rHe),f&&t(Ed),w(L9),f&&t(tHe),f&&t(qo),w(x9),w(k9),w(Ib),w(S9),w(Iv),f&&t(aHe),f&&t(Ad),w(R9),f&&t(nHe),f&&t(jo),w(P9),w(I9),w(qv),w(N9),w(_F),f&&t(sHe),f&&t(xd),w(q9),f&&t(lHe),f&&t(Do),w(j9),w(G9),w(vF),w(O9),w(yF),f&&t(iHe),f&&t(Sd),w(V9),f&&t(dHe),f&&t(Oo),w(X9),w(Q9),w(xF),w(W9),w(hT),f&&t(cHe),f&&t(Bd),w(U9),f&&t(fHe),f&&t(Vo),w(H9),w(Y9),w(uT),w(K9),w(l8),f&&t(mHe),f&&t(qd),w(Z9),f&&t(gHe),f&&t(Xo),w(ex),w(rx),w(d8),w(tx),w(m8),f&&t(hHe),f&&t(Gd),w(ax),f&&t(pHe),f&&t(zo),w(nx),w(lx),w(h8),w(ix),w(b8),f&&t(uHe),f&&t(Xd),w(cx),f&&t(_He),f&&t(Qo),w(fx),w(gx),w(F8),w(hx),w(I8),f&&t(bHe),f&&t(Wd),w(px),f&&t(vHe),f&&t(Wo),w(ux),w(bx),w(q8),w(vx),w(G8),f&&t(FHe),f&&t(Jd),w(Fx),f&&t(THe),f&&t(Uo),w(Tx),w(Ex),w(V8),w(Cx),w(Q8),f&&t(MHe),f&&t(Zd),w(wx),f&&t(EHe),f&&t(Ho),w(Ax),w(Lx),w(U8),w(xx),w(Y8),f&&t(CHe),f&&t(rc),w($x),f&&t(wHe),f&&t(Jo),w(kx),w(Rx),w(Z8),w(Px),w(cM),f&&t(AHe),f&&t(nc),w(Bx),f&&t(yHe),f&&t(Yo),w(Ix),w(qx),w(mM),w(jx),w(vM),f&&t(LHe),f&&t(ic),w(Dx),f&&t(xHe),f&&t(Ko),w(Gx),w(Vx),w(TM),w(Xx),w(RM),f&&t($He),f&&t(fc),w(zx),f&&t(kHe),f&&t(Zo),w(Qx),w(Ux),w(BM),w(Hx),w(jM),f&&t(SHe),f&&t(hc),w(Yx),f&&t(RHe),f&&t(er),w(Kx),w(e$),w(GM),w(o$),w(UM),f&&t(PHe),f&&t(_c),w(r$),f&&t(BHe),f&&t(or),w(t$),w(n$),w(JM),w(s$),w(rE),f&&t(IHe),f&&t(Fc),w(l$),f&&t(NHe),f&&t(rr),w(i$),w(c$),w(aE),w(f$),w(iE),f&&t(qHe),f&&t(Ec),w(g$),f&&t(jHe),f&&t(tr),w(h$),w(u$),w(cE),w(_$),w(gE),f&&t(DHe),f&&t(Ac),w(b$),f&&t(GHe),f&&t(ar),w(v$),w(T$),w(pE),w(M$),w(ME),f&&t(OHe),f&&t(xc),w(E$),f&&t(VHe),f&&t(nr),w(C$),w(A$),w(CE),w(y$),w(yE),f&&t(XHe),f&&t(Sc),w(L$),f&&t(zHe),f&&t(sr),w(x$),w(k$),w(xE),w(S$),w(AC),f&&t(QHe),f&&t(Bc),w(R$),f&&t(WHe),f&&t(lr),w(P$),w(I$),w(LC),w(N$),w(KC),f&&t(UHe),f&&t(qc),w(q$),f&&t(HHe),f&&t(ir),w(j$),w(G$),w(e3),w(O$),w(h3),f&&t(JHe),f&&t(Gc),w(V$),f&&t(YHe),f&&t(dr),w(X$),w(Q$),w(u3),w(W$),w(C3),f&&t(KHe),f&&t(Xc),w(U$),f&&t(ZHe),f&&t(cr),w(H$),w(Y$),w(A3),w(K$),w(x3),f&&t(eJe),f&&t(Wc),w(ek),f&&t(oJe),f&&t(fr),w(ok),w(tk),w(k3),w(ak),w(K3),f&&t(rJe),f&&t(Jc),w(nk),f&&t(tJe),f&&t(mr),w(sk),w(ik),w(e5),w(dk),w(f5),f&&t(aJe),f&&t(Zc),w(ck),f&&t(nJe),f&&t(gr),w(fk),w(gk),w(g5),w(hk),w(D5),f&&t(sJe),f&&t(rf),w(pk),f&&t(lJe),f&&t(hr),w(uk),w(bk),w(O5),w(vk),w(s0),f&&t(iJe),f&&t(nf),w(Fk),f&&t(dJe),f&&t(pr),w(Tk),w(Ek),w(i0),w(Ck),w(f0),f&&t(cJe),f&&t(df),w(Ak),f&&t(fJe),f&&t(ur),w(yk),w(xk),w(g0),w($k),w(p0),f&&t(mJe),f&&t(mf),w(kk),f&&t(gJe),f&&t(_r),w(Sk),w(Pk),w(_0),w(Bk),w(q0),f&&t(hJe),f&&t(pf),w(Ik),f&&t(pJe),f&&t(br),w(Nk),w(jk),w(D0),w(Dk),w(lw),f&&t(uJe),f&&t(bf),w(Gk),f&&t(_Je),f&&t(vr),w(Ok),w(Xk),w(dw),w(zk),w(fw),f&&t(bJe),f&&t(Tf),w(Qk),f&&t(vJe),f&&t(Fr),w(Wk),w(Hk),w(gw),w(Jk),w(pw),f&&t(FJe),f&&t(Cf),w(Yk),f&&t(TJe),f&&t(Tr),w(Kk),w(eS),w(_w),w(oS),w(zw),f&&t(MJe),f&&t(yf),w(rS),f&&t(EJe),f&&t(Mr),w(tS),w(nS),w(Ww),w(sS),w(aA),f&&t(CJe),f&&t($f),w(lS),f&&t(wJe),f&&t(Er),w(iS),w(cS),w(sA),w(fS),w(FA),f&&t(AJe),f&&t(Rf),w(mS),f&&t(yJe),f&&t(Cr),w(gS),w(pS),w(MA),w(uS),w(RA),f&&t(LJe),f&&t(If),w(_S),f&&t(xJe),f&&t(wr),w(bS),w(FS),w(BA),w(TS),w(QA),f&&t($Je),f&&t(jf),w(MS),f&&t(kJe),f&&t(Ar),w(ES),w(wS),w(UA),w(AS),w(n6),f&&t(SJe),f&&t(Of),w(yS),f&&t(RJe),f&&t(yr),w(LS),w($S),w(l6),w(kS),w(b6),f&&t(PJe),f&&t(zf),w(SS),f&&t(BJe),f&&t(Lr),w(RS),w(BS),w(F6),w(IS),w(x6),f&&t(IJe),f&&t(Uf),w(NS),f&&t(NJe),f&&t(xr),w(qS),w(DS),w(k6),w(GS),w(D6),f&&t(qJe),f&&t(Yf),w(OS),f&&t(jJe),f&&t($r),w(VS),w(zS),w(O6),w(QS),w(X6),f&&t(DJe),f&&t(em),w(WS),f&&t(GJe),f&&t(kr),w(US),w(JS),w(Q6),w(YS),w(H6),f&&t(OJe),f&&t(tm),w(ZS),f&&t(VJe),f&&t(Sr),w(eR),w(rR),w(Y6),w(tR),w(Z6)}}}const ola={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForDocumentQuestionAnswering",title:"AutoModelForDocumentQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function rla($){return Uaa(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class dla extends Xaa{constructor(g){super();zaa(this,g,rla,ela,Qaa,{})}}export{dla as default,ola as metadata};
