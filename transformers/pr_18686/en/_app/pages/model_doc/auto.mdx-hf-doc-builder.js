import{S as Rra,i as Pra,s as Bra,e as a,k as l,w as F,t as o,M as Ira,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Nra,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Tft}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function qra($){let g,v,p,m,_,d,h,Ao,Oi,em,ft,Vi,Xi,dy,om,Oe,Qe,zi,Xn,cy,zn,Wn,fy,Wi,Qn,my,Qi,rm,ja;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Ao=o(`, make sure its
`),Oi=a("code"),em=o("model_type"),ft=o(" attribute is set to the same key you use when registering the config (here "),Vi=a("code"),Xi=o('"new-model"'),dy=o(")."),om=l(),Oe=a("p"),Qe=o("Likewise, if your "),zi=a("code"),Xn=o("NewModel"),cy=o(" is a subclass of "),zn=a("a"),Wn=o("PreTrainedModel"),fy=o(`, make sure its
`),Wi=a("code"),Qn=o("config_class"),my=o(` attribute is set to the same class you use when registering the model (here
`),Qi=a("code"),rm=o("NewModelConfig"),ja=o(")."),this.h()},l(Ue){g=n(Ue,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var tP=s(p);m=r(tP,"NewModelConfig"),tP.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ui=s(d);h=r(Ui,"PretrainedConfig"),Ui.forEach(t),Ao=r(Ae,`, make sure its
`),Oi=n(Ae,"CODE",{});var aP=s(Oi);em=r(aP,"model_type"),aP.forEach(t),ft=r(Ae," attribute is set to the same key you use when registering the config (here "),Vi=n(Ae,"CODE",{});var nP=s(Vi);Xi=r(nP,'"new-model"'),nP.forEach(t),dy=r(Ae,")."),Ae.forEach(t),om=i(Ue),Oe=n(Ue,"P",{});var Lo=s(Oe);Qe=r(Lo,"Likewise, if your "),zi=n(Lo,"CODE",{});var Da=s(zi);Xn=r(Da,"NewModel"),Da.forEach(t),cy=r(Lo," is a subclass of "),zn=n(Lo,"A",{href:!0});var sP=s(zn);Wn=r(sP,"PreTrainedModel"),sP.forEach(t),fy=r(Lo,`, make sure its
`),Wi=n(Lo,"CODE",{});var tm=s(Wi);Qn=r(tm,"config_class"),tm.forEach(t),my=r(Lo,` attribute is set to the same class you use when registering the model (here
`),Qi=n(Lo,"CODE",{});var lP=s(Qi);rm=r(lP,"NewModelConfig"),lP.forEach(t),ja=r(Lo,")."),Lo.forEach(t),this.h()},h(){c(zn,"href","/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel")},m(Ue,Ae){b(Ue,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Ao),e(g,Oi),e(Oi,em),e(g,ft),e(g,Vi),e(Vi,Xi),e(g,dy),b(Ue,om,Ae),b(Ue,Oe,Ae),e(Oe,Qe),e(Oe,zi),e(zi,Xn),e(Oe,cy),e(Oe,zn),e(zn,Wn),e(Oe,fy),e(Oe,Wi),e(Wi,Qn),e(Oe,my),e(Oe,Qi),e(Qi,rm),e(Oe,ja)},d(Ue){Ue&&t(g),Ue&&t(om),Ue&&t(Oe)}}}function jra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gra($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Ao=s(p);m=r(Ao,"use_auth_token=True"),Ao.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Ora($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vra($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Ao=s(p);m=r(Ao,"use_auth_token=True"),Ao.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Xra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ura($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ota($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ata($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ita($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _ta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ata($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $ta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ita($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ota($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function raa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function taa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function naa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function saa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function laa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function daa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function caa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function faa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function maa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function haa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function paa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _aa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function baa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Faa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Taa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Maa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Caa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function waa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Aaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Laa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $aa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Saa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Raa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Paa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Baa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Naa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Daa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gaa($){let g,v,p,m,_,d,h,Ao,Oi,em,ft,Vi,Xi,dy,om,Oe,Qe,zi,Xn,cy,zn,Wn,fy,Wi,Qn,my,Qi,rm,ja,Ue,Ae,tP,Ui,aP,nP,Lo,Da,sP,tm,lP,cKe,DQe,Hi,am,Ise,gy,fKe,Nse,mKe,GQe,Un,gKe,qse,hKe,pKe,jse,_Ke,uKe,OQe,hy,VQe,iP,bKe,XQe,nm,zQe,Ji,sm,Dse,py,vKe,Gse,FKe,WQe,yo,_y,TKe,uy,MKe,dP,EKe,CKe,wKe,by,AKe,Ose,LKe,yKe,xKe,kr,vy,$Ke,Vse,kKe,SKe,Yi,RKe,Xse,PKe,BKe,zse,IKe,NKe,qKe,A,lm,Wse,jKe,DKe,cP,GKe,OKe,VKe,im,Qse,XKe,zKe,fP,WKe,QKe,UKe,dm,Use,HKe,JKe,mP,YKe,KKe,ZKe,cm,Hse,eZe,oZe,gP,rZe,tZe,aZe,fm,Jse,nZe,sZe,hP,lZe,iZe,dZe,mm,Yse,cZe,fZe,pP,mZe,gZe,hZe,gm,Kse,pZe,_Ze,_P,uZe,bZe,vZe,hm,Zse,FZe,TZe,uP,MZe,EZe,CZe,pm,ele,wZe,AZe,bP,LZe,yZe,xZe,_m,ole,$Ze,kZe,vP,SZe,RZe,PZe,um,rle,BZe,IZe,FP,NZe,qZe,jZe,bm,tle,DZe,GZe,TP,OZe,VZe,XZe,vm,ale,zZe,WZe,MP,QZe,UZe,HZe,Fm,nle,JZe,YZe,EP,KZe,ZZe,eeo,Tm,sle,oeo,reo,CP,teo,aeo,neo,Mm,lle,seo,leo,wP,ieo,deo,ceo,Em,ile,feo,meo,AP,geo,heo,peo,Cm,dle,_eo,ueo,LP,beo,veo,Feo,wm,cle,Teo,Meo,yP,Eeo,Ceo,weo,Am,fle,Aeo,Leo,xP,yeo,xeo,$eo,Lm,mle,keo,Seo,$P,Reo,Peo,Beo,ym,gle,Ieo,Neo,kP,qeo,jeo,Deo,xm,hle,Geo,Oeo,SP,Veo,Xeo,zeo,$m,ple,Weo,Qeo,RP,Ueo,Heo,Jeo,km,_le,Yeo,Keo,PP,Zeo,eoo,ooo,Sm,ule,roo,too,BP,aoo,noo,soo,Rm,ble,loo,ioo,IP,doo,coo,foo,Pm,vle,moo,goo,NP,hoo,poo,_oo,Bm,Fle,uoo,boo,qP,voo,Foo,Too,Im,Tle,Moo,Eoo,jP,Coo,woo,Aoo,Nm,Mle,Loo,yoo,DP,xoo,$oo,koo,qm,Ele,Soo,Roo,GP,Poo,Boo,Ioo,jm,Cle,Noo,qoo,OP,joo,Doo,Goo,Dm,wle,Ooo,Voo,VP,Xoo,zoo,Woo,Gm,Ale,Qoo,Uoo,XP,Hoo,Joo,Yoo,Om,Lle,Koo,Zoo,zP,ero,oro,rro,Vm,yle,tro,aro,WP,nro,sro,lro,Xm,xle,iro,dro,QP,cro,fro,mro,zm,$le,gro,hro,UP,pro,_ro,uro,Wm,kle,bro,vro,HP,Fro,Tro,Mro,Qm,Sle,Ero,Cro,JP,wro,Aro,Lro,Um,Rle,yro,xro,YP,$ro,kro,Sro,Hm,Ple,Rro,Pro,KP,Bro,Iro,Nro,Jm,Ble,qro,jro,ZP,Dro,Gro,Oro,Ym,Ile,Vro,Xro,eB,zro,Wro,Qro,Km,Nle,Uro,Hro,oB,Jro,Yro,Kro,Zm,qle,Zro,eto,rB,oto,rto,tto,eg,jle,ato,nto,tB,sto,lto,ito,og,Dle,dto,cto,aB,fto,mto,gto,rg,Gle,hto,pto,nB,_to,uto,bto,tg,Ole,vto,Fto,sB,Tto,Mto,Eto,ag,Vle,Cto,wto,lB,Ato,Lto,yto,ng,Xle,xto,$to,iB,kto,Sto,Rto,sg,zle,Pto,Bto,dB,Ito,Nto,qto,lg,Wle,jto,Dto,cB,Gto,Oto,Vto,ig,Qle,Xto,zto,fB,Wto,Qto,Uto,dg,Ule,Hto,Jto,mB,Yto,Kto,Zto,cg,Hle,eao,oao,gB,rao,tao,aao,fg,Jle,nao,sao,hB,lao,iao,dao,mg,Yle,cao,fao,pB,mao,gao,hao,gg,Kle,pao,_ao,_B,uao,bao,vao,hg,Zle,Fao,Tao,uB,Mao,Eao,Cao,pg,eie,wao,Aao,bB,Lao,yao,xao,_g,oie,$ao,kao,vB,Sao,Rao,Pao,ug,rie,Bao,Iao,FB,Nao,qao,jao,bg,tie,Dao,Gao,TB,Oao,Vao,Xao,vg,aie,zao,Wao,MB,Qao,Uao,Hao,Fg,nie,Jao,Yao,EB,Kao,Zao,eno,Tg,sie,ono,rno,CB,tno,ano,nno,Mg,lie,sno,lno,wB,ino,dno,cno,Eg,iie,fno,mno,AB,gno,hno,pno,Cg,die,_no,uno,LB,bno,vno,Fno,wg,cie,Tno,Mno,yB,Eno,Cno,wno,Ag,fie,Ano,Lno,xB,yno,xno,$no,Lg,mie,kno,Sno,$B,Rno,Pno,Bno,yg,gie,Ino,Nno,kB,qno,jno,Dno,xg,hie,Gno,Ono,SB,Vno,Xno,zno,$g,pie,Wno,Qno,RB,Uno,Hno,Jno,kg,_ie,Yno,Kno,PB,Zno,eso,oso,Sg,uie,rso,tso,BB,aso,nso,sso,Rg,bie,lso,iso,IB,dso,cso,fso,Pg,vie,mso,gso,NB,hso,pso,_so,Bg,Fie,uso,bso,qB,vso,Fso,Tso,Ig,Tie,Mso,Eso,jB,Cso,wso,Aso,Ng,Mie,Lso,yso,DB,xso,$so,kso,qg,Eie,Sso,Rso,GB,Pso,Bso,Iso,jg,Cie,Nso,qso,OB,jso,Dso,Gso,Dg,wie,Oso,Vso,VB,Xso,zso,Wso,Gg,Aie,Qso,Uso,XB,Hso,Jso,Yso,Og,Lie,Kso,Zso,zB,elo,olo,rlo,Vg,yie,tlo,alo,WB,nlo,slo,llo,Xg,xie,ilo,dlo,QB,clo,flo,mlo,zg,$ie,glo,hlo,UB,plo,_lo,ulo,Wg,kie,blo,vlo,HB,Flo,Tlo,Mlo,Qg,Sie,Elo,Clo,JB,wlo,Alo,Llo,Ug,Rie,ylo,xlo,YB,$lo,klo,Slo,Hg,Pie,Rlo,Plo,KB,Blo,Ilo,Nlo,Jg,Bie,qlo,jlo,ZB,Dlo,Glo,Olo,Yg,Iie,Vlo,Xlo,eI,zlo,Wlo,Qlo,Kg,Nie,Ulo,Hlo,oI,Jlo,Ylo,Klo,Zg,qie,Zlo,eio,rI,oio,rio,tio,eh,jie,aio,nio,tI,sio,lio,iio,oh,Die,dio,cio,aI,fio,mio,gio,rh,Gie,hio,pio,nI,_io,uio,bio,th,Oie,vio,Fio,sI,Tio,Mio,Eio,ah,Vie,Cio,wio,lI,Aio,Lio,yio,nh,Xie,xio,$io,iI,kio,Sio,Rio,sh,zie,Pio,Bio,dI,Iio,Nio,qio,lh,Wie,jio,Dio,cI,Gio,Oio,Vio,ih,Qie,Xio,zio,fI,Wio,Qio,Uio,dh,Uie,Hio,Jio,mI,Yio,Kio,Zio,ch,Hie,edo,odo,gI,rdo,tdo,ado,fh,Jie,ndo,sdo,hI,ldo,ido,ddo,mh,Yie,cdo,fdo,pI,mdo,gdo,hdo,gh,Kie,pdo,_do,_I,udo,bdo,vdo,hh,Zie,Fdo,Tdo,uI,Mdo,Edo,Cdo,ph,ede,wdo,Ado,bI,Ldo,ydo,xdo,_h,ode,$do,kdo,vI,Sdo,Rdo,Pdo,uh,rde,Bdo,Ido,FI,Ndo,qdo,jdo,bh,tde,Ddo,Gdo,TI,Odo,Vdo,Xdo,vh,ade,zdo,Wdo,MI,Qdo,Udo,Hdo,Fh,nde,Jdo,Ydo,EI,Kdo,Zdo,eco,Th,oco,Mh,Fy,rco,sde,tco,QQe,Ki,Eh,lde,Ty,aco,ide,nco,UQe,xo,My,sco,Ey,lco,CI,ico,dco,cco,Cy,fco,dde,mco,gco,hco,Sr,wy,pco,cde,_co,uco,Ga,bco,fde,vco,Fco,mde,Tco,Mco,gde,Eco,Cco,wco,k,Hn,hde,Aco,Lco,wI,yco,xco,AI,$co,kco,Sco,Jn,pde,Rco,Pco,LI,Bco,Ico,yI,Nco,qco,jco,Yn,_de,Dco,Gco,xI,Oco,Vco,$I,Xco,zco,Wco,Ch,ude,Qco,Uco,kI,Hco,Jco,Yco,Kn,bde,Kco,Zco,SI,efo,ofo,RI,rfo,tfo,afo,wh,vde,nfo,sfo,PI,lfo,ifo,dfo,Ah,Fde,cfo,ffo,BI,mfo,gfo,hfo,Lh,Tde,pfo,_fo,II,ufo,bfo,vfo,Zn,Mde,Ffo,Tfo,NI,Mfo,Efo,qI,Cfo,wfo,Afo,es,Ede,Lfo,yfo,jI,xfo,$fo,DI,kfo,Sfo,Rfo,os,Cde,Pfo,Bfo,GI,Ifo,Nfo,OI,qfo,jfo,Dfo,yh,wde,Gfo,Ofo,VI,Vfo,Xfo,zfo,xh,Ade,Wfo,Qfo,XI,Ufo,Hfo,Jfo,$h,Lde,Yfo,Kfo,zI,Zfo,emo,omo,rs,yde,rmo,tmo,WI,amo,nmo,QI,smo,lmo,imo,kh,xde,dmo,cmo,UI,fmo,mmo,gmo,ts,$de,hmo,pmo,HI,_mo,umo,JI,bmo,vmo,Fmo,as,kde,Tmo,Mmo,YI,Emo,Cmo,KI,wmo,Amo,Lmo,ns,Sde,ymo,xmo,ZI,$mo,kmo,eN,Smo,Rmo,Pmo,ss,Rde,Bmo,Imo,oN,Nmo,qmo,rN,jmo,Dmo,Gmo,Sh,Pde,Omo,Vmo,tN,Xmo,zmo,Wmo,ls,Bde,Qmo,Umo,aN,Hmo,Jmo,nN,Ymo,Kmo,Zmo,is,Ide,ego,ogo,sN,rgo,tgo,lN,ago,ngo,sgo,ds,Nde,lgo,igo,iN,dgo,cgo,dN,fgo,mgo,ggo,cs,qde,hgo,pgo,cN,_go,ugo,fN,bgo,vgo,Fgo,fs,jde,Tgo,Mgo,mN,Ego,Cgo,gN,wgo,Ago,Lgo,ms,Dde,ygo,xgo,hN,$go,kgo,pN,Sgo,Rgo,Pgo,Rh,Gde,Bgo,Igo,_N,Ngo,qgo,jgo,gs,Ode,Dgo,Ggo,uN,Ogo,Vgo,bN,Xgo,zgo,Wgo,Ph,Vde,Qgo,Ugo,vN,Hgo,Jgo,Ygo,hs,Xde,Kgo,Zgo,FN,eho,oho,TN,rho,tho,aho,ps,zde,nho,sho,MN,lho,iho,EN,dho,cho,fho,_s,Wde,mho,gho,CN,hho,pho,wN,_ho,uho,bho,Bh,Qde,vho,Fho,AN,Tho,Mho,Eho,us,Ude,Cho,who,LN,Aho,Lho,yN,yho,xho,$ho,bs,Hde,kho,Sho,xN,Rho,Pho,$N,Bho,Iho,Nho,vs,Jde,qho,jho,kN,Dho,Gho,SN,Oho,Vho,Xho,Ih,Yde,zho,Who,RN,Qho,Uho,Hho,Fs,Kde,Jho,Yho,PN,Kho,Zho,BN,epo,opo,rpo,Ts,Zde,tpo,apo,IN,npo,spo,NN,lpo,ipo,dpo,Ms,ece,cpo,fpo,qN,mpo,gpo,jN,hpo,ppo,_po,Es,oce,upo,bpo,DN,vpo,Fpo,GN,Tpo,Mpo,Epo,Cs,rce,Cpo,wpo,ON,Apo,Lpo,VN,ypo,xpo,$po,ws,tce,kpo,Spo,XN,Rpo,Ppo,zN,Bpo,Ipo,Npo,As,ace,qpo,jpo,WN,Dpo,Gpo,QN,Opo,Vpo,Xpo,Ls,nce,zpo,Wpo,UN,Qpo,Upo,HN,Hpo,Jpo,Ypo,Nh,sce,Kpo,Zpo,JN,e_o,o_o,r_o,ys,lce,t_o,a_o,YN,n_o,s_o,KN,l_o,i_o,d_o,qh,ice,c_o,f_o,ZN,m_o,g_o,h_o,jh,dce,p_o,__o,eq,u_o,b_o,v_o,xs,cce,F_o,T_o,oq,M_o,E_o,rq,C_o,w_o,A_o,$s,fce,L_o,y_o,tq,x_o,$_o,aq,k_o,S_o,R_o,ks,mce,P_o,B_o,nq,I_o,N_o,sq,q_o,j_o,D_o,Dh,gce,G_o,O_o,lq,V_o,X_o,z_o,Ss,hce,W_o,Q_o,iq,U_o,H_o,dq,J_o,Y_o,K_o,Rs,pce,Z_o,euo,cq,ouo,ruo,fq,tuo,auo,nuo,Ps,_ce,suo,luo,mq,iuo,duo,gq,cuo,fuo,muo,Bs,uce,guo,huo,hq,puo,_uo,pq,uuo,buo,vuo,Is,bce,Fuo,Tuo,_q,Muo,Euo,uq,Cuo,wuo,Auo,Ns,vce,Luo,yuo,bq,xuo,$uo,vq,kuo,Suo,Ruo,qs,Fce,Puo,Buo,Fq,Iuo,Nuo,Tq,quo,juo,Duo,js,Tce,Guo,Ouo,Mq,Vuo,Xuo,Eq,zuo,Wuo,Quo,Gh,Mce,Uuo,Huo,Cq,Juo,Yuo,Kuo,Ds,Ece,Zuo,e1o,wq,o1o,r1o,Aq,t1o,a1o,n1o,Gs,Cce,s1o,l1o,Lq,i1o,d1o,yq,c1o,f1o,m1o,Oh,wce,g1o,h1o,xq,p1o,_1o,u1o,Vh,Ace,b1o,v1o,$q,F1o,T1o,M1o,Xh,Lce,E1o,C1o,kq,w1o,A1o,L1o,zh,yce,y1o,x1o,Sq,$1o,k1o,S1o,Os,xce,R1o,P1o,Rq,B1o,I1o,Pq,N1o,q1o,j1o,Wh,$ce,D1o,G1o,Bq,O1o,V1o,X1o,Vs,kce,z1o,W1o,Iq,Q1o,U1o,Nq,H1o,J1o,Y1o,Xs,Sce,K1o,Z1o,qq,e6o,o6o,jq,r6o,t6o,a6o,zs,Rce,n6o,s6o,Dq,l6o,i6o,Gq,d6o,c6o,f6o,Ws,Pce,m6o,g6o,Oq,h6o,p6o,Vq,_6o,u6o,b6o,Qs,Bce,v6o,F6o,Xq,T6o,M6o,zq,E6o,C6o,w6o,Us,Ice,A6o,L6o,Wq,y6o,x6o,Qq,$6o,k6o,S6o,Qh,Nce,R6o,P6o,Uq,B6o,I6o,N6o,Uh,qce,q6o,j6o,Hq,D6o,G6o,O6o,Hs,jce,V6o,X6o,Jq,z6o,W6o,Yq,Q6o,U6o,H6o,Js,Dce,J6o,Y6o,Kq,K6o,Z6o,Zq,e8o,o8o,r8o,Ys,Gce,t8o,a8o,ej,n8o,s8o,oj,l8o,i8o,d8o,Hh,Oce,c8o,f8o,rj,m8o,g8o,h8o,Jh,Vce,p8o,_8o,tj,u8o,b8o,v8o,Yh,Xce,F8o,T8o,aj,M8o,E8o,C8o,Ks,zce,w8o,A8o,nj,L8o,y8o,sj,x8o,$8o,k8o,Zs,Wce,S8o,R8o,lj,P8o,B8o,ij,I8o,N8o,q8o,Kh,Qce,j8o,D8o,dj,G8o,O8o,V8o,Zh,Uce,X8o,z8o,cj,W8o,Q8o,U8o,ep,Hce,H8o,J8o,fj,Y8o,K8o,Z8o,el,Jce,e2o,o2o,mj,r2o,t2o,gj,a2o,n2o,s2o,op,Yce,l2o,i2o,hj,d2o,c2o,f2o,rp,Kce,m2o,g2o,pj,h2o,p2o,_2o,ol,Zce,u2o,b2o,_j,v2o,F2o,uj,T2o,M2o,E2o,rl,efe,C2o,w2o,bj,A2o,L2o,vj,y2o,x2o,$2o,tl,ofe,k2o,S2o,Fj,R2o,P2o,Tj,B2o,I2o,N2o,al,rfe,q2o,j2o,Mj,D2o,G2o,Ej,O2o,V2o,X2o,tp,z2o,ap,Ay,W2o,tfe,Q2o,HQe,Zi,np,afe,Ly,U2o,nfe,H2o,JQe,$o,yy,J2o,xy,Y2o,Cj,K2o,Z2o,ebo,$y,obo,sfe,rbo,tbo,abo,He,ky,nbo,lfe,sbo,lbo,Oa,ibo,ife,dbo,cbo,dfe,fbo,mbo,cfe,gbo,hbo,pbo,Q,sp,ffe,_bo,ubo,wj,bbo,vbo,Fbo,lp,mfe,Tbo,Mbo,Aj,Ebo,Cbo,wbo,ip,gfe,Abo,Lbo,Lj,ybo,xbo,$bo,dp,hfe,kbo,Sbo,yj,Rbo,Pbo,Bbo,cp,pfe,Ibo,Nbo,xj,qbo,jbo,Dbo,fp,_fe,Gbo,Obo,$j,Vbo,Xbo,zbo,mp,ufe,Wbo,Qbo,kj,Ubo,Hbo,Jbo,gp,bfe,Ybo,Kbo,Sj,Zbo,evo,ovo,hp,vfe,rvo,tvo,Rj,avo,nvo,svo,pp,Ffe,lvo,ivo,Pj,dvo,cvo,fvo,_p,Tfe,mvo,gvo,Bj,hvo,pvo,_vo,up,Mfe,uvo,bvo,Ij,vvo,Fvo,Tvo,bp,Efe,Mvo,Evo,Nj,Cvo,wvo,Avo,vp,Cfe,Lvo,yvo,qj,xvo,$vo,kvo,Fp,wfe,Svo,Rvo,jj,Pvo,Bvo,Ivo,Tp,Afe,Nvo,qvo,Dj,jvo,Dvo,Gvo,Mp,Lfe,Ovo,Vvo,Gj,Xvo,zvo,Wvo,Ep,yfe,Qvo,Uvo,Oj,Hvo,Jvo,Yvo,Cp,xfe,Kvo,Zvo,Vj,eFo,oFo,rFo,wp,$fe,tFo,aFo,Xj,nFo,sFo,lFo,Ap,kfe,iFo,dFo,zj,cFo,fFo,mFo,Lp,Sfe,gFo,hFo,Wj,pFo,_Fo,uFo,yp,Rfe,bFo,vFo,Qj,FFo,TFo,MFo,xp,Pfe,EFo,CFo,Uj,wFo,AFo,LFo,$p,Bfe,yFo,xFo,Hj,$Fo,kFo,SFo,kp,Ife,RFo,PFo,Jj,BFo,IFo,NFo,Sp,Nfe,qFo,jFo,Yj,DFo,GFo,OFo,Rp,qfe,VFo,XFo,Kj,zFo,WFo,QFo,Pp,jfe,UFo,HFo,Zj,JFo,YFo,KFo,Bp,Dfe,ZFo,eTo,eD,oTo,rTo,tTo,Ip,Gfe,aTo,nTo,oD,sTo,lTo,iTo,Np,Ofe,dTo,cTo,rD,fTo,mTo,gTo,qp,Vfe,hTo,pTo,tD,_To,uTo,bTo,jp,Xfe,vTo,FTo,aD,TTo,MTo,ETo,Dp,zfe,CTo,wTo,nD,ATo,LTo,yTo,Gp,Wfe,xTo,$To,sD,kTo,STo,RTo,Op,Qfe,PTo,BTo,lD,ITo,NTo,qTo,Vp,Ufe,jTo,DTo,iD,GTo,OTo,VTo,Xp,XTo,zp,zTo,Wp,Sy,WTo,Hfe,QTo,YQe,ed,Qp,Jfe,Ry,UTo,Yfe,HTo,KQe,ko,Py,JTo,By,YTo,dD,KTo,ZTo,eMo,Iy,oMo,Kfe,rMo,tMo,aMo,Je,Ny,nMo,Zfe,sMo,lMo,od,iMo,eme,dMo,cMo,ome,fMo,mMo,gMo,ie,Up,rme,hMo,pMo,cD,_Mo,uMo,bMo,Hp,tme,vMo,FMo,fD,TMo,MMo,EMo,Jp,ame,CMo,wMo,mD,AMo,LMo,yMo,Yp,nme,xMo,$Mo,gD,kMo,SMo,RMo,Kp,sme,PMo,BMo,hD,IMo,NMo,qMo,Zp,lme,jMo,DMo,pD,GMo,OMo,VMo,e_,ime,XMo,zMo,_D,WMo,QMo,UMo,o_,dme,HMo,JMo,uD,YMo,KMo,ZMo,r_,cme,eEo,oEo,bD,rEo,tEo,aEo,t_,fme,nEo,sEo,vD,lEo,iEo,dEo,a_,mme,cEo,fEo,FD,mEo,gEo,hEo,n_,gme,pEo,_Eo,TD,uEo,bEo,vEo,s_,hme,FEo,TEo,MD,MEo,EEo,CEo,l_,pme,wEo,AEo,ED,LEo,yEo,xEo,i_,_me,$Eo,kEo,CD,SEo,REo,PEo,d_,ume,BEo,IEo,wD,NEo,qEo,jEo,c_,bme,DEo,GEo,AD,OEo,VEo,XEo,f_,vme,zEo,WEo,LD,QEo,UEo,HEo,m_,Fme,JEo,YEo,yD,KEo,ZEo,e4o,g_,Tme,o4o,r4o,xD,t4o,a4o,n4o,h_,s4o,p_,l4o,__,qy,i4o,Mme,d4o,ZQe,rd,u_,Eme,jy,c4o,Cme,f4o,eUe,So,Dy,m4o,td,g4o,$D,h4o,p4o,kD,_4o,u4o,b4o,Gy,v4o,wme,F4o,T4o,M4o,mt,Oy,E4o,Ame,C4o,w4o,ad,A4o,Lme,L4o,y4o,SD,x4o,$4o,k4o,b_,S4o,Ye,Vy,R4o,yme,P4o,B4o,Va,I4o,xme,N4o,q4o,$me,j4o,D4o,kme,G4o,O4o,V4o,y,v_,Sme,X4o,z4o,RD,W4o,Q4o,U4o,F_,Rme,H4o,J4o,PD,Y4o,K4o,Z4o,T_,Pme,eCo,oCo,BD,rCo,tCo,aCo,M_,Bme,nCo,sCo,ID,lCo,iCo,dCo,E_,Ime,cCo,fCo,ND,mCo,gCo,hCo,C_,Nme,pCo,_Co,qD,uCo,bCo,vCo,w_,qme,FCo,TCo,jD,MCo,ECo,CCo,A_,jme,wCo,ACo,DD,LCo,yCo,xCo,L_,Dme,$Co,kCo,GD,SCo,RCo,PCo,y_,Gme,BCo,ICo,OD,NCo,qCo,jCo,x_,Ome,DCo,GCo,VD,OCo,VCo,XCo,$_,Vme,zCo,WCo,XD,QCo,UCo,HCo,k_,Xme,JCo,YCo,zD,KCo,ZCo,e3o,S_,zme,o3o,r3o,WD,t3o,a3o,n3o,R_,Wme,s3o,l3o,QD,i3o,d3o,c3o,P_,Qme,f3o,m3o,UD,g3o,h3o,p3o,B_,Ume,_3o,u3o,HD,b3o,v3o,F3o,I_,Hme,T3o,M3o,JD,E3o,C3o,w3o,N_,Jme,A3o,L3o,YD,y3o,x3o,$3o,q_,Yme,k3o,S3o,KD,R3o,P3o,B3o,j_,Kme,I3o,N3o,ZD,q3o,j3o,D3o,D_,Zme,G3o,O3o,eG,V3o,X3o,z3o,G_,ege,W3o,Q3o,oG,U3o,H3o,J3o,O_,oge,Y3o,K3o,rG,Z3o,e5o,o5o,V_,rge,r5o,t5o,tG,a5o,n5o,s5o,X_,tge,l5o,i5o,aG,d5o,c5o,f5o,z_,age,m5o,g5o,nG,h5o,p5o,_5o,W_,nge,u5o,b5o,sG,v5o,F5o,T5o,Q_,sge,M5o,E5o,lG,C5o,w5o,A5o,U_,lge,L5o,y5o,iG,x5o,$5o,k5o,H_,ige,S5o,R5o,dG,P5o,B5o,I5o,J_,dge,N5o,q5o,cG,j5o,D5o,G5o,Y_,cge,O5o,V5o,fG,X5o,z5o,W5o,K_,fge,Q5o,U5o,mG,H5o,J5o,Y5o,Z_,mge,K5o,Z5o,gG,e0o,o0o,r0o,nl,gge,t0o,a0o,hG,n0o,s0o,pG,l0o,i0o,d0o,eu,hge,c0o,f0o,_G,m0o,g0o,h0o,ou,pge,p0o,_0o,uG,u0o,b0o,v0o,ru,_ge,F0o,T0o,bG,M0o,E0o,C0o,tu,uge,w0o,A0o,vG,L0o,y0o,x0o,au,bge,$0o,k0o,FG,S0o,R0o,P0o,nu,vge,B0o,I0o,TG,N0o,q0o,j0o,su,Fge,D0o,G0o,MG,O0o,V0o,X0o,lu,Tge,z0o,W0o,EG,Q0o,U0o,H0o,iu,Mge,J0o,Y0o,CG,K0o,Z0o,ewo,du,Ege,owo,rwo,wG,two,awo,nwo,cu,Cge,swo,lwo,AG,iwo,dwo,cwo,fu,wge,fwo,mwo,LG,gwo,hwo,pwo,mu,Age,_wo,uwo,yG,bwo,vwo,Fwo,gu,Lge,Two,Mwo,xG,Ewo,Cwo,wwo,hu,yge,Awo,Lwo,$G,ywo,xwo,$wo,pu,xge,kwo,Swo,kG,Rwo,Pwo,Bwo,_u,$ge,Iwo,Nwo,SG,qwo,jwo,Dwo,uu,kge,Gwo,Owo,RG,Vwo,Xwo,zwo,bu,Sge,Wwo,Qwo,PG,Uwo,Hwo,Jwo,vu,Rge,Ywo,Kwo,BG,Zwo,eAo,oAo,Fu,Pge,rAo,tAo,IG,aAo,nAo,sAo,Tu,Bge,lAo,iAo,NG,dAo,cAo,fAo,Mu,Ige,mAo,gAo,qG,hAo,pAo,_Ao,Eu,Nge,uAo,bAo,jG,vAo,FAo,TAo,Cu,qge,MAo,EAo,DG,CAo,wAo,AAo,wu,jge,LAo,yAo,GG,xAo,$Ao,kAo,Au,Dge,SAo,RAo,OG,PAo,BAo,IAo,Lu,Gge,NAo,qAo,VG,jAo,DAo,GAo,yu,Oge,OAo,VAo,XG,XAo,zAo,WAo,xu,Vge,QAo,UAo,zG,HAo,JAo,YAo,$u,Xge,KAo,ZAo,WG,e7o,o7o,r7o,ku,zge,t7o,a7o,QG,n7o,s7o,l7o,Su,Wge,i7o,d7o,UG,c7o,f7o,m7o,Ru,Qge,g7o,h7o,HG,p7o,_7o,u7o,Pu,Uge,b7o,v7o,JG,F7o,T7o,M7o,Bu,Hge,E7o,C7o,YG,w7o,A7o,L7o,Iu,Jge,y7o,x7o,KG,$7o,k7o,S7o,Nu,Yge,R7o,P7o,ZG,B7o,I7o,N7o,qu,Kge,q7o,j7o,eO,D7o,G7o,O7o,ju,Zge,V7o,X7o,oO,z7o,W7o,Q7o,Du,ehe,U7o,H7o,rO,J7o,Y7o,K7o,Gu,ohe,Z7o,eLo,tO,oLo,rLo,tLo,Ou,rhe,aLo,nLo,aO,sLo,lLo,iLo,Vu,the,dLo,cLo,nO,fLo,mLo,gLo,Xu,ahe,hLo,pLo,sO,_Lo,uLo,bLo,zu,nhe,vLo,FLo,lO,TLo,MLo,ELo,Wu,she,CLo,wLo,iO,ALo,LLo,yLo,Qu,lhe,xLo,$Lo,dO,kLo,SLo,RLo,Uu,ihe,PLo,BLo,cO,ILo,NLo,qLo,Hu,dhe,jLo,DLo,fO,GLo,OLo,VLo,Ju,che,XLo,zLo,mO,WLo,QLo,ULo,Yu,fhe,HLo,JLo,gO,YLo,KLo,ZLo,Ku,mhe,eyo,oyo,hO,ryo,tyo,ayo,Zu,ghe,nyo,syo,pO,lyo,iyo,dyo,e1,hhe,cyo,fyo,_O,myo,gyo,hyo,o1,phe,pyo,_yo,uO,uyo,byo,vyo,r1,_he,Fyo,Tyo,bO,Myo,Eyo,Cyo,t1,uhe,wyo,Ayo,vO,Lyo,yyo,xyo,a1,bhe,$yo,kyo,FO,Syo,Ryo,Pyo,n1,vhe,Byo,Iyo,TO,Nyo,qyo,jyo,s1,Fhe,Dyo,Gyo,MO,Oyo,Vyo,Xyo,l1,The,zyo,Wyo,EO,Qyo,Uyo,Hyo,i1,Mhe,Jyo,Yyo,CO,Kyo,Zyo,e9o,d1,Ehe,o9o,r9o,wO,t9o,a9o,n9o,c1,Che,s9o,l9o,AO,i9o,d9o,c9o,f1,whe,f9o,m9o,LO,g9o,h9o,p9o,m1,Ahe,_9o,u9o,yO,b9o,v9o,F9o,g1,Lhe,T9o,M9o,xO,E9o,C9o,w9o,h1,yhe,A9o,L9o,$O,y9o,x9o,$9o,p1,xhe,k9o,S9o,kO,R9o,P9o,B9o,_1,$he,I9o,N9o,SO,q9o,j9o,D9o,u1,khe,G9o,O9o,RO,V9o,X9o,z9o,b1,She,W9o,Q9o,PO,U9o,H9o,J9o,v1,Rhe,Y9o,K9o,BO,Z9o,exo,oxo,F1,Phe,rxo,txo,IO,axo,nxo,sxo,T1,Bhe,lxo,ixo,NO,dxo,cxo,fxo,M1,Ihe,mxo,gxo,qO,hxo,pxo,_xo,E1,Nhe,uxo,bxo,jO,vxo,Fxo,Txo,C1,qhe,Mxo,Exo,DO,Cxo,wxo,Axo,w1,jhe,Lxo,yxo,GO,xxo,$xo,kxo,A1,Sxo,Dhe,Rxo,Pxo,Ghe,Bxo,Ixo,L1,oUe,nd,y1,Ohe,Xy,Nxo,Vhe,qxo,rUe,Ro,zy,jxo,sd,Dxo,OO,Gxo,Oxo,VO,Vxo,Xxo,zxo,Wy,Wxo,Xhe,Qxo,Uxo,Hxo,gt,Qy,Jxo,zhe,Yxo,Kxo,ld,Zxo,Whe,e$o,o$o,XO,r$o,t$o,a$o,x1,n$o,Ke,Uy,s$o,Qhe,l$o,i$o,Xa,d$o,Uhe,c$o,f$o,Hhe,m$o,g$o,Jhe,h$o,p$o,_$o,G,$1,Yhe,u$o,b$o,zO,v$o,F$o,T$o,k1,Khe,M$o,E$o,WO,C$o,w$o,A$o,S1,Zhe,L$o,y$o,QO,x$o,$$o,k$o,R1,epe,S$o,R$o,UO,P$o,B$o,I$o,P1,ope,N$o,q$o,HO,j$o,D$o,G$o,B1,rpe,O$o,V$o,JO,X$o,z$o,W$o,I1,tpe,Q$o,U$o,YO,H$o,J$o,Y$o,N1,ape,K$o,Z$o,KO,eko,oko,rko,q1,npe,tko,ako,ZO,nko,sko,lko,j1,spe,iko,dko,eV,cko,fko,mko,D1,lpe,gko,hko,oV,pko,_ko,uko,G1,ipe,bko,vko,rV,Fko,Tko,Mko,O1,dpe,Eko,Cko,tV,wko,Ako,Lko,V1,cpe,yko,xko,aV,$ko,kko,Sko,X1,fpe,Rko,Pko,nV,Bko,Iko,Nko,z1,mpe,qko,jko,sV,Dko,Gko,Oko,W1,gpe,Vko,Xko,lV,zko,Wko,Qko,Q1,hpe,Uko,Hko,iV,Jko,Yko,Kko,U1,ppe,Zko,eSo,dV,oSo,rSo,tSo,H1,_pe,aSo,nSo,cV,sSo,lSo,iSo,J1,upe,dSo,cSo,fV,fSo,mSo,gSo,Y1,bpe,hSo,pSo,mV,_So,uSo,bSo,K1,vpe,vSo,FSo,gV,TSo,MSo,ESo,Z1,Fpe,CSo,wSo,hV,ASo,LSo,ySo,e6,Tpe,xSo,$So,pV,kSo,SSo,RSo,o6,Mpe,PSo,BSo,_V,ISo,NSo,qSo,r6,Epe,jSo,DSo,uV,GSo,OSo,VSo,t6,Cpe,XSo,zSo,bV,WSo,QSo,USo,a6,wpe,HSo,JSo,vV,YSo,KSo,ZSo,n6,Ape,eRo,oRo,FV,rRo,tRo,aRo,s6,Lpe,nRo,sRo,TV,lRo,iRo,dRo,l6,ype,cRo,fRo,MV,mRo,gRo,hRo,i6,xpe,pRo,_Ro,EV,uRo,bRo,vRo,d6,$pe,FRo,TRo,CV,MRo,ERo,CRo,c6,kpe,wRo,ARo,wV,LRo,yRo,xRo,f6,Spe,$Ro,kRo,AV,SRo,RRo,PRo,m6,Rpe,BRo,IRo,LV,NRo,qRo,jRo,g6,Ppe,DRo,GRo,yV,ORo,VRo,XRo,h6,Bpe,zRo,WRo,xV,QRo,URo,HRo,p6,Ipe,JRo,YRo,$V,KRo,ZRo,ePo,_6,Npe,oPo,rPo,kV,tPo,aPo,nPo,u6,qpe,sPo,lPo,SV,iPo,dPo,cPo,b6,jpe,fPo,mPo,RV,gPo,hPo,pPo,v6,Dpe,_Po,uPo,PV,bPo,vPo,FPo,F6,Gpe,TPo,MPo,BV,EPo,CPo,wPo,T6,Ope,APo,LPo,IV,yPo,xPo,$Po,M6,Vpe,kPo,SPo,NV,RPo,PPo,BPo,E6,IPo,Xpe,NPo,qPo,zpe,jPo,DPo,C6,tUe,id,w6,Wpe,Hy,GPo,Qpe,OPo,aUe,Po,Jy,VPo,dd,XPo,qV,zPo,WPo,jV,QPo,UPo,HPo,Yy,JPo,Upe,YPo,KPo,ZPo,ht,Ky,eBo,Hpe,oBo,rBo,cd,tBo,Jpe,aBo,nBo,DV,sBo,lBo,iBo,A6,dBo,Ze,Zy,cBo,Ype,fBo,mBo,za,gBo,Kpe,hBo,pBo,Zpe,_Bo,uBo,e_e,bBo,vBo,FBo,z,L6,o_e,TBo,MBo,GV,EBo,CBo,wBo,y6,r_e,ABo,LBo,OV,yBo,xBo,$Bo,x6,t_e,kBo,SBo,VV,RBo,PBo,BBo,$6,a_e,IBo,NBo,XV,qBo,jBo,DBo,k6,n_e,GBo,OBo,zV,VBo,XBo,zBo,S6,s_e,WBo,QBo,WV,UBo,HBo,JBo,R6,l_e,YBo,KBo,QV,ZBo,eIo,oIo,P6,i_e,rIo,tIo,UV,aIo,nIo,sIo,B6,d_e,lIo,iIo,HV,dIo,cIo,fIo,I6,c_e,mIo,gIo,JV,hIo,pIo,_Io,N6,f_e,uIo,bIo,YV,vIo,FIo,TIo,q6,m_e,MIo,EIo,KV,CIo,wIo,AIo,j6,g_e,LIo,yIo,ZV,xIo,$Io,kIo,D6,h_e,SIo,RIo,eX,PIo,BIo,IIo,G6,p_e,NIo,qIo,oX,jIo,DIo,GIo,O6,__e,OIo,VIo,rX,XIo,zIo,WIo,V6,u_e,QIo,UIo,tX,HIo,JIo,YIo,X6,b_e,KIo,ZIo,aX,eNo,oNo,rNo,z6,v_e,tNo,aNo,nX,nNo,sNo,lNo,W6,F_e,iNo,dNo,sX,cNo,fNo,mNo,Q6,T_e,gNo,hNo,lX,pNo,_No,uNo,U6,M_e,bNo,vNo,iX,FNo,TNo,MNo,H6,E_e,ENo,CNo,dX,wNo,ANo,LNo,J6,C_e,yNo,xNo,cX,$No,kNo,SNo,Y6,w_e,RNo,PNo,fX,BNo,INo,NNo,K6,A_e,qNo,jNo,mX,DNo,GNo,ONo,Z6,L_e,VNo,XNo,gX,zNo,WNo,QNo,e8,y_e,UNo,HNo,hX,JNo,YNo,KNo,o8,x_e,ZNo,eqo,pX,oqo,rqo,tqo,r8,$_e,aqo,nqo,_X,sqo,lqo,iqo,t8,k_e,dqo,cqo,uX,fqo,mqo,gqo,a8,S_e,hqo,pqo,bX,_qo,uqo,bqo,n8,R_e,vqo,Fqo,vX,Tqo,Mqo,Eqo,s8,P_e,Cqo,wqo,FX,Aqo,Lqo,yqo,l8,B_e,xqo,$qo,TX,kqo,Sqo,Rqo,i8,I_e,Pqo,Bqo,MX,Iqo,Nqo,qqo,d8,N_e,jqo,Dqo,EX,Gqo,Oqo,Vqo,c8,q_e,Xqo,zqo,CX,Wqo,Qqo,Uqo,f8,j_e,Hqo,Jqo,wX,Yqo,Kqo,Zqo,m8,D_e,ejo,ojo,AX,rjo,tjo,ajo,g8,njo,G_e,sjo,ljo,O_e,ijo,djo,h8,nUe,fd,p8,V_e,e9,cjo,X_e,fjo,sUe,Bo,o9,mjo,md,gjo,LX,hjo,pjo,yX,_jo,ujo,bjo,r9,vjo,z_e,Fjo,Tjo,Mjo,pt,t9,Ejo,W_e,Cjo,wjo,gd,Ajo,Q_e,Ljo,yjo,xX,xjo,$jo,kjo,_8,Sjo,eo,a9,Rjo,U_e,Pjo,Bjo,Wa,Ijo,H_e,Njo,qjo,J_e,jjo,Djo,Y_e,Gjo,Ojo,Vjo,U,u8,K_e,Xjo,zjo,$X,Wjo,Qjo,Ujo,b8,Z_e,Hjo,Jjo,kX,Yjo,Kjo,Zjo,v8,eue,eDo,oDo,SX,rDo,tDo,aDo,F8,oue,nDo,sDo,RX,lDo,iDo,dDo,T8,rue,cDo,fDo,PX,mDo,gDo,hDo,M8,tue,pDo,_Do,BX,uDo,bDo,vDo,E8,aue,FDo,TDo,IX,MDo,EDo,CDo,C8,nue,wDo,ADo,NX,LDo,yDo,xDo,w8,sue,$Do,kDo,qX,SDo,RDo,PDo,A8,lue,BDo,IDo,jX,NDo,qDo,jDo,L8,iue,DDo,GDo,DX,ODo,VDo,XDo,y8,due,zDo,WDo,GX,QDo,UDo,HDo,x8,cue,JDo,YDo,OX,KDo,ZDo,eGo,$8,fue,oGo,rGo,VX,tGo,aGo,nGo,k8,mue,sGo,lGo,XX,iGo,dGo,cGo,S8,gue,fGo,mGo,zX,gGo,hGo,pGo,R8,hue,_Go,uGo,WX,bGo,vGo,FGo,P8,pue,TGo,MGo,QX,EGo,CGo,wGo,B8,_ue,AGo,LGo,UX,yGo,xGo,$Go,I8,uue,kGo,SGo,HX,RGo,PGo,BGo,N8,bue,IGo,NGo,JX,qGo,jGo,DGo,q8,vue,GGo,OGo,YX,VGo,XGo,zGo,j8,Fue,WGo,QGo,KX,UGo,HGo,JGo,D8,Tue,YGo,KGo,ZX,ZGo,eOo,oOo,G8,Mue,rOo,tOo,ez,aOo,nOo,sOo,O8,Eue,lOo,iOo,oz,dOo,cOo,fOo,V8,Cue,mOo,gOo,rz,hOo,pOo,_Oo,X8,wue,uOo,bOo,tz,vOo,FOo,TOo,z8,Aue,MOo,EOo,az,COo,wOo,AOo,W8,Lue,LOo,yOo,nz,xOo,$Oo,kOo,Q8,yue,SOo,ROo,sz,POo,BOo,IOo,U8,xue,NOo,qOo,lz,jOo,DOo,GOo,H8,$ue,OOo,VOo,iz,XOo,zOo,WOo,J8,kue,QOo,UOo,Sue,HOo,JOo,YOo,Y8,Rue,KOo,ZOo,dz,eVo,oVo,rVo,K8,Pue,tVo,aVo,cz,nVo,sVo,lVo,Z8,Bue,iVo,dVo,fz,cVo,fVo,mVo,e2,Iue,gVo,hVo,mz,pVo,_Vo,uVo,o2,bVo,Nue,vVo,FVo,que,TVo,MVo,r2,lUe,hd,t2,jue,n9,EVo,Due,CVo,iUe,Io,s9,wVo,pd,AVo,gz,LVo,yVo,hz,xVo,$Vo,kVo,l9,SVo,Gue,RVo,PVo,BVo,_t,i9,IVo,Oue,NVo,qVo,_d,jVo,Vue,DVo,GVo,pz,OVo,VVo,XVo,a2,zVo,oo,d9,WVo,Xue,QVo,UVo,Qa,HVo,zue,JVo,YVo,Wue,KVo,ZVo,Que,eXo,oXo,rXo,me,n2,Uue,tXo,aXo,_z,nXo,sXo,lXo,s2,Hue,iXo,dXo,uz,cXo,fXo,mXo,l2,Jue,gXo,hXo,bz,pXo,_Xo,uXo,i2,Yue,bXo,vXo,vz,FXo,TXo,MXo,d2,Kue,EXo,CXo,Fz,wXo,AXo,LXo,c2,Zue,yXo,xXo,Tz,$Xo,kXo,SXo,f2,e1e,RXo,PXo,Mz,BXo,IXo,NXo,m2,o1e,qXo,jXo,Ez,DXo,GXo,OXo,g2,r1e,VXo,XXo,Cz,zXo,WXo,QXo,h2,t1e,UXo,HXo,wz,JXo,YXo,KXo,p2,a1e,ZXo,ezo,Az,ozo,rzo,tzo,_2,n1e,azo,nzo,Lz,szo,lzo,izo,u2,s1e,dzo,czo,yz,fzo,mzo,gzo,b2,l1e,hzo,pzo,xz,_zo,uzo,bzo,v2,i1e,vzo,Fzo,$z,Tzo,Mzo,Ezo,F2,d1e,Czo,wzo,kz,Azo,Lzo,yzo,T2,c1e,xzo,$zo,Sz,kzo,Szo,Rzo,M2,f1e,Pzo,Bzo,Rz,Izo,Nzo,qzo,E2,m1e,jzo,Dzo,Pz,Gzo,Ozo,Vzo,C2,Xzo,g1e,zzo,Wzo,h1e,Qzo,Uzo,w2,dUe,ud,A2,p1e,c9,Hzo,_1e,Jzo,cUe,No,f9,Yzo,bd,Kzo,Bz,Zzo,eWo,Iz,oWo,rWo,tWo,m9,aWo,u1e,nWo,sWo,lWo,ut,g9,iWo,b1e,dWo,cWo,vd,fWo,v1e,mWo,gWo,Nz,hWo,pWo,_Wo,L2,uWo,ro,h9,bWo,F1e,vWo,FWo,Ua,TWo,T1e,MWo,EWo,M1e,CWo,wWo,E1e,AWo,LWo,yWo,N,y2,C1e,xWo,$Wo,qz,kWo,SWo,RWo,x2,w1e,PWo,BWo,jz,IWo,NWo,qWo,$2,A1e,jWo,DWo,Dz,GWo,OWo,VWo,k2,L1e,XWo,zWo,Gz,WWo,QWo,UWo,S2,y1e,HWo,JWo,Oz,YWo,KWo,ZWo,R2,x1e,eQo,oQo,Vz,rQo,tQo,aQo,P2,$1e,nQo,sQo,Xz,lQo,iQo,dQo,B2,k1e,cQo,fQo,zz,mQo,gQo,hQo,I2,S1e,pQo,_Qo,Wz,uQo,bQo,vQo,N2,R1e,FQo,TQo,Qz,MQo,EQo,CQo,q2,P1e,wQo,AQo,Uz,LQo,yQo,xQo,j2,B1e,$Qo,kQo,Hz,SQo,RQo,PQo,D2,I1e,BQo,IQo,Jz,NQo,qQo,jQo,G2,N1e,DQo,GQo,Yz,OQo,VQo,XQo,O2,q1e,zQo,WQo,Kz,QQo,UQo,HQo,V2,j1e,JQo,YQo,Zz,KQo,ZQo,eUo,X2,D1e,oUo,rUo,eW,tUo,aUo,nUo,z2,G1e,sUo,lUo,oW,iUo,dUo,cUo,W2,O1e,fUo,mUo,rW,gUo,hUo,pUo,Q2,V1e,_Uo,uUo,tW,bUo,vUo,FUo,U2,X1e,TUo,MUo,aW,EUo,CUo,wUo,H2,z1e,AUo,LUo,nW,yUo,xUo,$Uo,J2,W1e,kUo,SUo,sW,RUo,PUo,BUo,Y2,Q1e,IUo,NUo,lW,qUo,jUo,DUo,K2,U1e,GUo,OUo,iW,VUo,XUo,zUo,Z2,H1e,WUo,QUo,dW,UUo,HUo,JUo,eb,J1e,YUo,KUo,cW,ZUo,eHo,oHo,ob,Y1e,rHo,tHo,fW,aHo,nHo,sHo,rb,K1e,lHo,iHo,mW,dHo,cHo,fHo,tb,Z1e,mHo,gHo,gW,hHo,pHo,_Ho,ab,e6e,uHo,bHo,hW,vHo,FHo,THo,nb,o6e,MHo,EHo,pW,CHo,wHo,AHo,sb,r6e,LHo,yHo,_W,xHo,$Ho,kHo,lb,t6e,SHo,RHo,uW,PHo,BHo,IHo,ib,a6e,NHo,qHo,bW,jHo,DHo,GHo,db,n6e,OHo,VHo,vW,XHo,zHo,WHo,cb,s6e,QHo,UHo,FW,HHo,JHo,YHo,fb,l6e,KHo,ZHo,TW,eJo,oJo,rJo,mb,i6e,tJo,aJo,MW,nJo,sJo,lJo,gb,d6e,iJo,dJo,EW,cJo,fJo,mJo,hb,c6e,gJo,hJo,CW,pJo,_Jo,uJo,pb,f6e,bJo,vJo,wW,FJo,TJo,MJo,_b,m6e,EJo,CJo,AW,wJo,AJo,LJo,ub,g6e,yJo,xJo,LW,$Jo,kJo,SJo,bb,h6e,RJo,PJo,yW,BJo,IJo,NJo,vb,p6e,qJo,jJo,xW,DJo,GJo,OJo,Fb,_6e,VJo,XJo,$W,zJo,WJo,QJo,Tb,u6e,UJo,HJo,kW,JJo,YJo,KJo,Mb,b6e,ZJo,eYo,SW,oYo,rYo,tYo,Eb,v6e,aYo,nYo,RW,sYo,lYo,iYo,Cb,F6e,dYo,cYo,PW,fYo,mYo,gYo,wb,T6e,hYo,pYo,BW,_Yo,uYo,bYo,Ab,vYo,M6e,FYo,TYo,E6e,MYo,EYo,Lb,fUe,Fd,yb,C6e,p9,CYo,w6e,wYo,mUe,qo,_9,AYo,Td,LYo,IW,yYo,xYo,NW,$Yo,kYo,SYo,u9,RYo,A6e,PYo,BYo,IYo,bt,b9,NYo,L6e,qYo,jYo,Md,DYo,y6e,GYo,OYo,qW,VYo,XYo,zYo,xb,WYo,to,v9,QYo,x6e,UYo,HYo,Ha,JYo,$6e,YYo,KYo,k6e,ZYo,eKo,S6e,oKo,rKo,tKo,Z,$b,R6e,aKo,nKo,jW,sKo,lKo,iKo,kb,P6e,dKo,cKo,DW,fKo,mKo,gKo,Sb,B6e,hKo,pKo,GW,_Ko,uKo,bKo,Rb,I6e,vKo,FKo,OW,TKo,MKo,EKo,Pb,N6e,CKo,wKo,VW,AKo,LKo,yKo,Bb,q6e,xKo,$Ko,XW,kKo,SKo,RKo,Ib,j6e,PKo,BKo,zW,IKo,NKo,qKo,Nb,D6e,jKo,DKo,WW,GKo,OKo,VKo,qb,G6e,XKo,zKo,QW,WKo,QKo,UKo,jb,O6e,HKo,JKo,UW,YKo,KKo,ZKo,Db,V6e,eZo,oZo,HW,rZo,tZo,aZo,Gb,X6e,nZo,sZo,JW,lZo,iZo,dZo,Ob,z6e,cZo,fZo,YW,mZo,gZo,hZo,Vb,W6e,pZo,_Zo,KW,uZo,bZo,vZo,Xb,Q6e,FZo,TZo,ZW,MZo,EZo,CZo,zb,U6e,wZo,AZo,eQ,LZo,yZo,xZo,Wb,H6e,$Zo,kZo,oQ,SZo,RZo,PZo,Qb,J6e,BZo,IZo,rQ,NZo,qZo,jZo,Ub,Y6e,DZo,GZo,tQ,OZo,VZo,XZo,Hb,K6e,zZo,WZo,aQ,QZo,UZo,HZo,Jb,Z6e,JZo,YZo,nQ,KZo,ZZo,eer,Yb,e8e,oer,rer,sQ,ter,aer,ner,Kb,o8e,ser,ler,lQ,ier,der,cer,Zb,r8e,fer,mer,iQ,ger,her,per,ev,t8e,_er,uer,dQ,ber,ver,Fer,ov,a8e,Ter,Mer,cQ,Eer,Cer,wer,rv,n8e,Aer,Ler,fQ,yer,xer,$er,tv,s8e,ker,Ser,mQ,Rer,Per,Ber,av,l8e,Ier,Ner,gQ,qer,jer,Der,nv,i8e,Ger,Oer,hQ,Ver,Xer,zer,sv,d8e,Wer,Qer,pQ,Uer,Her,Jer,lv,Yer,c8e,Ker,Zer,f8e,eor,oor,iv,gUe,Ed,dv,m8e,F9,ror,g8e,tor,hUe,jo,T9,aor,Cd,nor,_Q,sor,lor,uQ,ior,dor,cor,M9,mor,h8e,gor,hor,por,vt,E9,_or,p8e,uor,bor,wd,vor,_8e,For,Tor,bQ,Mor,Eor,Cor,cv,wor,ao,C9,Aor,u8e,Lor,yor,Ja,xor,b8e,$or,kor,v8e,Sor,Ror,F8e,Por,Bor,Ior,Do,fv,T8e,Nor,qor,vQ,jor,Dor,Gor,mv,M8e,Oor,Vor,FQ,Xor,zor,Wor,gv,E8e,Qor,Uor,TQ,Hor,Jor,Yor,hv,C8e,Kor,Zor,MQ,err,orr,rrr,pv,w8e,trr,arr,EQ,nrr,srr,lrr,_v,A8e,irr,drr,CQ,crr,frr,mrr,uv,grr,L8e,hrr,prr,y8e,_rr,urr,bv,pUe,Ad,vv,x8e,w9,brr,$8e,vrr,_Ue,Go,A9,Frr,Ld,Trr,wQ,Mrr,Err,AQ,Crr,wrr,Arr,L9,Lrr,k8e,yrr,xrr,$rr,Ft,y9,krr,S8e,Srr,Rrr,yd,Prr,R8e,Brr,Irr,LQ,Nrr,qrr,jrr,Fv,Drr,no,x9,Grr,P8e,Orr,Vrr,Ya,Xrr,B8e,zrr,Wrr,I8e,Qrr,Urr,N8e,Hrr,Jrr,Yrr,H,Tv,q8e,Krr,Zrr,yQ,etr,otr,rtr,Mv,j8e,ttr,atr,xQ,ntr,str,ltr,Ev,D8e,itr,dtr,$Q,ctr,ftr,mtr,Cv,G8e,gtr,htr,kQ,ptr,_tr,utr,wv,O8e,btr,vtr,SQ,Ftr,Ttr,Mtr,Av,V8e,Etr,Ctr,RQ,wtr,Atr,Ltr,Lv,X8e,ytr,xtr,PQ,$tr,ktr,Str,yv,z8e,Rtr,Ptr,BQ,Btr,Itr,Ntr,xv,W8e,qtr,jtr,IQ,Dtr,Gtr,Otr,$v,Q8e,Vtr,Xtr,NQ,ztr,Wtr,Qtr,kv,U8e,Utr,Htr,qQ,Jtr,Ytr,Ktr,Sv,H8e,Ztr,ear,jQ,oar,rar,tar,Rv,J8e,aar,nar,DQ,sar,lar,iar,Pv,Y8e,dar,car,GQ,far,mar,gar,Bv,K8e,har,par,OQ,_ar,uar,bar,Iv,Z8e,Far,Tar,VQ,Mar,Ear,Car,Nv,e2e,war,Aar,XQ,Lar,yar,xar,qv,o2e,$ar,kar,zQ,Sar,Rar,Par,jv,r2e,Bar,Iar,WQ,Nar,qar,jar,Dv,t2e,Dar,Gar,QQ,Oar,Var,Xar,Gv,a2e,zar,War,UQ,Qar,Uar,Har,Ov,n2e,Jar,Yar,HQ,Kar,Zar,enr,Vv,s2e,onr,rnr,JQ,tnr,anr,nnr,Xv,l2e,snr,lnr,YQ,inr,dnr,cnr,zv,i2e,fnr,mnr,KQ,gnr,hnr,pnr,Wv,d2e,_nr,unr,ZQ,bnr,vnr,Fnr,Qv,c2e,Tnr,Mnr,eU,Enr,Cnr,wnr,Uv,f2e,Anr,Lnr,oU,ynr,xnr,$nr,Hv,m2e,knr,Snr,rU,Rnr,Pnr,Bnr,Jv,g2e,Inr,Nnr,tU,qnr,jnr,Dnr,Yv,h2e,Gnr,Onr,aU,Vnr,Xnr,znr,Kv,p2e,Wnr,Qnr,nU,Unr,Hnr,Jnr,Zv,_2e,Ynr,Knr,sU,Znr,esr,osr,eF,u2e,rsr,tsr,lU,asr,nsr,ssr,oF,b2e,lsr,isr,iU,dsr,csr,fsr,rF,v2e,msr,gsr,dU,hsr,psr,_sr,tF,F2e,usr,bsr,cU,vsr,Fsr,Tsr,aF,Msr,T2e,Esr,Csr,M2e,wsr,Asr,nF,uUe,xd,sF,E2e,$9,Lsr,C2e,ysr,bUe,Oo,k9,xsr,$d,$sr,fU,ksr,Ssr,mU,Rsr,Psr,Bsr,S9,Isr,w2e,Nsr,qsr,jsr,Tt,R9,Dsr,A2e,Gsr,Osr,kd,Vsr,L2e,Xsr,zsr,gU,Wsr,Qsr,Usr,lF,Hsr,so,P9,Jsr,y2e,Ysr,Ksr,Ka,Zsr,x2e,elr,olr,$2e,rlr,tlr,k2e,alr,nlr,slr,V,iF,S2e,llr,ilr,hU,dlr,clr,flr,dF,R2e,mlr,glr,pU,hlr,plr,_lr,cF,P2e,ulr,blr,_U,vlr,Flr,Tlr,fF,B2e,Mlr,Elr,uU,Clr,wlr,Alr,mF,I2e,Llr,ylr,bU,xlr,$lr,klr,gF,N2e,Slr,Rlr,vU,Plr,Blr,Ilr,hF,q2e,Nlr,qlr,FU,jlr,Dlr,Glr,pF,j2e,Olr,Vlr,TU,Xlr,zlr,Wlr,_F,D2e,Qlr,Ulr,MU,Hlr,Jlr,Ylr,uF,G2e,Klr,Zlr,EU,eir,oir,rir,bF,O2e,tir,air,CU,nir,sir,lir,vF,V2e,iir,dir,wU,cir,fir,mir,FF,X2e,gir,hir,AU,pir,_ir,uir,TF,z2e,bir,vir,LU,Fir,Tir,Mir,MF,W2e,Eir,Cir,yU,wir,Air,Lir,EF,Q2e,yir,xir,xU,$ir,kir,Sir,CF,U2e,Rir,Pir,$U,Bir,Iir,Nir,wF,H2e,qir,jir,kU,Dir,Gir,Oir,AF,J2e,Vir,Xir,SU,zir,Wir,Qir,LF,Y2e,Uir,Hir,RU,Jir,Yir,Kir,yF,K2e,Zir,edr,PU,odr,rdr,tdr,xF,Z2e,adr,ndr,BU,sdr,ldr,idr,$F,ebe,ddr,cdr,IU,fdr,mdr,gdr,kF,obe,hdr,pdr,NU,_dr,udr,bdr,SF,rbe,vdr,Fdr,qU,Tdr,Mdr,Edr,RF,tbe,Cdr,wdr,jU,Adr,Ldr,ydr,PF,abe,xdr,$dr,DU,kdr,Sdr,Rdr,BF,nbe,Pdr,Bdr,GU,Idr,Ndr,qdr,IF,sbe,jdr,Ddr,OU,Gdr,Odr,Vdr,NF,lbe,Xdr,zdr,VU,Wdr,Qdr,Udr,qF,ibe,Hdr,Jdr,XU,Ydr,Kdr,Zdr,jF,dbe,ecr,ocr,zU,rcr,tcr,acr,DF,cbe,ncr,scr,WU,lcr,icr,dcr,GF,fbe,ccr,fcr,QU,mcr,gcr,hcr,OF,mbe,pcr,_cr,UU,ucr,bcr,vcr,VF,gbe,Fcr,Tcr,HU,Mcr,Ecr,Ccr,XF,hbe,wcr,Acr,JU,Lcr,ycr,xcr,zF,pbe,$cr,kcr,YU,Scr,Rcr,Pcr,WF,_be,Bcr,Icr,KU,Ncr,qcr,jcr,QF,ube,Dcr,Gcr,ZU,Ocr,Vcr,Xcr,UF,bbe,zcr,Wcr,eH,Qcr,Ucr,Hcr,HF,vbe,Jcr,Ycr,oH,Kcr,Zcr,efr,JF,Fbe,ofr,rfr,rH,tfr,afr,nfr,YF,sfr,Tbe,lfr,ifr,Mbe,dfr,cfr,KF,vUe,Sd,ZF,Ebe,B9,ffr,Cbe,mfr,FUe,Vo,I9,gfr,Rd,hfr,tH,pfr,_fr,aH,ufr,bfr,vfr,N9,Ffr,wbe,Tfr,Mfr,Efr,Mt,q9,Cfr,Abe,wfr,Afr,Pd,Lfr,Lbe,yfr,xfr,nH,$fr,kfr,Sfr,eT,Rfr,lo,j9,Pfr,ybe,Bfr,Ifr,Za,Nfr,xbe,qfr,jfr,$be,Dfr,Gfr,kbe,Ofr,Vfr,Xfr,Sbe,oT,Rbe,zfr,Wfr,sH,Qfr,Ufr,Hfr,rT,Jfr,Pbe,Yfr,Kfr,Bbe,Zfr,emr,tT,TUe,Bd,aT,Ibe,D9,omr,Nbe,rmr,MUe,Xo,G9,tmr,Id,amr,lH,nmr,smr,iH,lmr,imr,dmr,O9,cmr,qbe,fmr,mmr,gmr,Et,V9,hmr,jbe,pmr,_mr,Nd,umr,Dbe,bmr,vmr,dH,Fmr,Tmr,Mmr,nT,Emr,io,X9,Cmr,Gbe,wmr,Amr,en,Lmr,Obe,ymr,xmr,Vbe,$mr,kmr,Xbe,Smr,Rmr,Pmr,be,sT,zbe,Bmr,Imr,cH,Nmr,qmr,jmr,lT,Wbe,Dmr,Gmr,fH,Omr,Vmr,Xmr,iT,Qbe,zmr,Wmr,mH,Qmr,Umr,Hmr,dT,Ube,Jmr,Ymr,gH,Kmr,Zmr,egr,sl,Hbe,ogr,rgr,hH,tgr,agr,pH,ngr,sgr,lgr,cT,Jbe,igr,dgr,_H,cgr,fgr,mgr,ll,Ybe,ggr,hgr,uH,pgr,_gr,bH,ugr,bgr,vgr,fT,Kbe,Fgr,Tgr,vH,Mgr,Egr,Cgr,Ct,Zbe,wgr,Agr,FH,Lgr,ygr,TH,xgr,$gr,MH,kgr,Sgr,Rgr,mT,eve,Pgr,Bgr,EH,Igr,Ngr,qgr,gT,ove,jgr,Dgr,CH,Ggr,Ogr,Vgr,hT,rve,Xgr,zgr,wH,Wgr,Qgr,Ugr,pT,tve,Hgr,Jgr,AH,Ygr,Kgr,Zgr,_T,ave,ehr,ohr,LH,rhr,thr,ahr,uT,nve,nhr,shr,yH,lhr,ihr,dhr,bT,sve,chr,fhr,xH,mhr,ghr,hhr,vT,lve,phr,_hr,$H,uhr,bhr,vhr,FT,Fhr,ive,Thr,Mhr,dve,Ehr,Chr,TT,EUe,qd,MT,cve,z9,whr,fve,Ahr,CUe,zo,W9,Lhr,jd,yhr,kH,xhr,$hr,SH,khr,Shr,Rhr,Q9,Phr,mve,Bhr,Ihr,Nhr,wt,U9,qhr,gve,jhr,Dhr,Dd,Ghr,hve,Ohr,Vhr,RH,Xhr,zhr,Whr,ET,Qhr,co,H9,Uhr,pve,Hhr,Jhr,on,Yhr,_ve,Khr,Zhr,uve,epr,opr,bve,rpr,tpr,apr,vve,CT,Fve,npr,spr,PH,lpr,ipr,dpr,wT,cpr,Tve,fpr,mpr,Mve,gpr,hpr,AT,wUe,Gd,LT,Eve,J9,ppr,Cve,_pr,AUe,Wo,Y9,upr,Od,bpr,BH,vpr,Fpr,IH,Tpr,Mpr,Epr,K9,Cpr,wve,wpr,Apr,Lpr,At,Z9,ypr,Ave,xpr,$pr,Vd,kpr,Lve,Spr,Rpr,NH,Ppr,Bpr,Ipr,yT,Npr,fo,ex,qpr,yve,jpr,Dpr,rn,Gpr,xve,Opr,Vpr,$ve,Xpr,zpr,kve,Wpr,Qpr,Upr,Sve,xT,Rve,Hpr,Jpr,qH,Ypr,Kpr,Zpr,$T,e_r,Pve,o_r,r_r,Bve,t_r,a_r,kT,LUe,Xd,ST,Ive,ox,n_r,Nve,s_r,yUe,Qo,rx,l_r,zd,i_r,jH,d_r,c_r,DH,f_r,m_r,g_r,tx,h_r,qve,p_r,__r,u_r,Lt,ax,b_r,jve,v_r,F_r,Wd,T_r,Dve,M_r,E_r,GH,C_r,w_r,A_r,RT,L_r,mo,nx,y_r,Gve,x_r,$_r,tn,k_r,Ove,S_r,R_r,Vve,P_r,B_r,Xve,I_r,N_r,q_r,zve,PT,Wve,j_r,D_r,OH,G_r,O_r,V_r,BT,X_r,Qve,z_r,W_r,Uve,Q_r,U_r,IT,xUe,Qd,NT,Hve,sx,H_r,Jve,J_r,$Ue,Uo,lx,Y_r,Ud,K_r,VH,Z_r,eur,XH,our,rur,tur,ix,aur,Yve,nur,sur,lur,yt,dx,iur,Kve,dur,cur,Hd,fur,Zve,mur,gur,zH,hur,pur,_ur,qT,uur,go,cx,bur,eFe,vur,Fur,an,Tur,oFe,Mur,Eur,rFe,Cur,wur,tFe,Aur,Lur,yur,Pe,jT,aFe,xur,$ur,WH,kur,Sur,Rur,DT,nFe,Pur,Bur,QH,Iur,Nur,qur,GT,sFe,jur,Dur,UH,Gur,Our,Vur,OT,lFe,Xur,zur,HH,Wur,Qur,Uur,VT,iFe,Hur,Jur,JH,Yur,Kur,Zur,XT,dFe,e1r,o1r,YH,r1r,t1r,a1r,zT,cFe,n1r,s1r,KH,l1r,i1r,d1r,WT,fFe,c1r,f1r,ZH,m1r,g1r,h1r,QT,mFe,p1r,_1r,eJ,u1r,b1r,v1r,UT,F1r,gFe,T1r,M1r,hFe,E1r,C1r,HT,kUe,Jd,JT,pFe,fx,w1r,_Fe,A1r,SUe,Ho,mx,L1r,Yd,y1r,oJ,x1r,$1r,rJ,k1r,S1r,R1r,gx,P1r,uFe,B1r,I1r,N1r,xt,hx,q1r,bFe,j1r,D1r,Kd,G1r,vFe,O1r,V1r,tJ,X1r,z1r,W1r,YT,Q1r,ho,px,U1r,FFe,H1r,J1r,nn,Y1r,TFe,K1r,Z1r,MFe,e6r,o6r,EFe,r6r,t6r,a6r,st,KT,CFe,n6r,s6r,aJ,l6r,i6r,d6r,ZT,wFe,c6r,f6r,nJ,m6r,g6r,h6r,eM,AFe,p6r,_6r,sJ,u6r,b6r,v6r,oM,LFe,F6r,T6r,lJ,M6r,E6r,C6r,rM,yFe,w6r,A6r,iJ,L6r,y6r,x6r,tM,$6r,xFe,k6r,S6r,$Fe,R6r,P6r,aM,RUe,Zd,nM,kFe,_x,B6r,SFe,I6r,PUe,Jo,ux,N6r,ec,q6r,dJ,j6r,D6r,cJ,G6r,O6r,V6r,bx,X6r,RFe,z6r,W6r,Q6r,$t,vx,U6r,PFe,H6r,J6r,oc,Y6r,BFe,K6r,Z6r,fJ,e8r,o8r,r8r,sM,t8r,po,Fx,a8r,IFe,n8r,s8r,sn,l8r,NFe,i8r,d8r,qFe,c8r,f8r,jFe,m8r,g8r,h8r,Le,lM,DFe,p8r,_8r,mJ,u8r,b8r,v8r,iM,GFe,F8r,T8r,gJ,M8r,E8r,C8r,dM,OFe,w8r,A8r,hJ,L8r,y8r,x8r,cM,VFe,$8r,k8r,pJ,S8r,R8r,P8r,fM,XFe,B8r,I8r,_J,N8r,q8r,j8r,mM,zFe,D8r,G8r,uJ,O8r,V8r,X8r,gM,WFe,z8r,W8r,bJ,Q8r,U8r,H8r,hM,QFe,J8r,Y8r,vJ,K8r,Z8r,e2r,pM,UFe,o2r,r2r,FJ,t2r,a2r,n2r,_M,HFe,s2r,l2r,TJ,i2r,d2r,c2r,uM,f2r,JFe,m2r,g2r,YFe,h2r,p2r,bM,BUe,rc,vM,KFe,Tx,_2r,ZFe,u2r,IUe,Yo,Mx,b2r,tc,v2r,MJ,F2r,T2r,EJ,M2r,E2r,C2r,Ex,w2r,eTe,A2r,L2r,y2r,kt,Cx,x2r,oTe,$2r,k2r,ac,S2r,rTe,R2r,P2r,CJ,B2r,I2r,N2r,FM,q2r,_o,wx,j2r,tTe,D2r,G2r,ln,O2r,aTe,V2r,X2r,nTe,z2r,W2r,sTe,Q2r,U2r,H2r,Ax,TM,lTe,J2r,Y2r,wJ,K2r,Z2r,ebr,MM,iTe,obr,rbr,AJ,tbr,abr,nbr,EM,sbr,dTe,lbr,ibr,cTe,dbr,cbr,CM,NUe,nc,wM,fTe,Lx,fbr,mTe,mbr,qUe,Ko,yx,gbr,sc,hbr,LJ,pbr,_br,yJ,ubr,bbr,vbr,xx,Fbr,gTe,Tbr,Mbr,Ebr,St,$x,Cbr,hTe,wbr,Abr,lc,Lbr,pTe,ybr,xbr,xJ,$br,kbr,Sbr,AM,Rbr,uo,kx,Pbr,_Te,Bbr,Ibr,dn,Nbr,uTe,qbr,jbr,bTe,Dbr,Gbr,vTe,Obr,Vbr,Xbr,lt,LM,FTe,zbr,Wbr,$J,Qbr,Ubr,Hbr,yM,TTe,Jbr,Ybr,kJ,Kbr,Zbr,evr,xM,MTe,ovr,rvr,SJ,tvr,avr,nvr,$M,ETe,svr,lvr,RJ,ivr,dvr,cvr,kM,CTe,fvr,mvr,PJ,gvr,hvr,pvr,SM,_vr,wTe,uvr,bvr,ATe,vvr,Fvr,RM,jUe,ic,PM,LTe,Sx,Tvr,yTe,Mvr,DUe,Zo,Rx,Evr,dc,Cvr,BJ,wvr,Avr,IJ,Lvr,yvr,xvr,Px,$vr,xTe,kvr,Svr,Rvr,Rt,Bx,Pvr,$Te,Bvr,Ivr,cc,Nvr,kTe,qvr,jvr,NJ,Dvr,Gvr,Ovr,BM,Vvr,bo,Ix,Xvr,STe,zvr,Wvr,cn,Qvr,RTe,Uvr,Hvr,PTe,Jvr,Yvr,BTe,Kvr,Zvr,eFr,fn,IM,ITe,oFr,rFr,qJ,tFr,aFr,nFr,NM,NTe,sFr,lFr,jJ,iFr,dFr,cFr,qM,qTe,fFr,mFr,DJ,gFr,hFr,pFr,jM,jTe,_Fr,uFr,GJ,bFr,vFr,FFr,DM,TFr,DTe,MFr,EFr,GTe,CFr,wFr,GM,GUe,fc,OM,OTe,Nx,AFr,VTe,LFr,OUe,er,qx,yFr,mc,xFr,OJ,$Fr,kFr,VJ,SFr,RFr,PFr,jx,BFr,XTe,IFr,NFr,qFr,Pt,Dx,jFr,zTe,DFr,GFr,gc,OFr,WTe,VFr,XFr,XJ,zFr,WFr,QFr,VM,UFr,vo,Gx,HFr,QTe,JFr,YFr,mn,KFr,UTe,ZFr,eTr,HTe,oTr,rTr,JTe,tTr,aTr,nTr,Ox,XM,YTe,sTr,lTr,zJ,iTr,dTr,cTr,zM,KTe,fTr,mTr,WJ,gTr,hTr,pTr,WM,_Tr,ZTe,uTr,bTr,eMe,vTr,FTr,QM,VUe,hc,UM,oMe,Vx,TTr,rMe,MTr,XUe,or,Xx,ETr,pc,CTr,QJ,wTr,ATr,UJ,LTr,yTr,xTr,zx,$Tr,tMe,kTr,STr,RTr,Bt,Wx,PTr,aMe,BTr,ITr,_c,NTr,nMe,qTr,jTr,HJ,DTr,GTr,OTr,HM,VTr,Fo,Qx,XTr,sMe,zTr,WTr,gn,QTr,lMe,UTr,HTr,iMe,JTr,YTr,dMe,KTr,ZTr,eMr,cMe,JM,fMe,oMr,rMr,JJ,tMr,aMr,nMr,YM,sMr,mMe,lMr,iMr,gMe,dMr,cMr,KM,zUe,uc,ZM,hMe,Ux,fMr,pMe,mMr,WUe,rr,Hx,gMr,bc,hMr,YJ,pMr,_Mr,KJ,uMr,bMr,vMr,Jx,FMr,_Me,TMr,MMr,EMr,It,Yx,CMr,uMe,wMr,AMr,vc,LMr,bMe,yMr,xMr,ZJ,$Mr,kMr,SMr,eE,RMr,To,Kx,PMr,vMe,BMr,IMr,hn,NMr,FMe,qMr,jMr,TMe,DMr,GMr,MMe,OMr,VMr,XMr,it,oE,EMe,zMr,WMr,eY,QMr,UMr,HMr,rE,CMe,JMr,YMr,oY,KMr,ZMr,eEr,tE,wMe,oEr,rEr,rY,tEr,aEr,nEr,aE,AMe,sEr,lEr,tY,iEr,dEr,cEr,nE,LMe,fEr,mEr,aY,gEr,hEr,pEr,sE,_Er,yMe,uEr,bEr,xMe,vEr,FEr,lE,QUe,Fc,iE,$Me,Zx,TEr,kMe,MEr,UUe,tr,e$,EEr,Tc,CEr,nY,wEr,AEr,sY,LEr,yEr,xEr,o$,$Er,SMe,kEr,SEr,REr,Nt,r$,PEr,RMe,BEr,IEr,Mc,NEr,PMe,qEr,jEr,lY,DEr,GEr,OEr,dE,VEr,Mo,t$,XEr,BMe,zEr,WEr,pn,QEr,IMe,UEr,HEr,NMe,JEr,YEr,qMe,KEr,ZEr,e4r,jMe,cE,DMe,o4r,r4r,iY,t4r,a4r,n4r,fE,s4r,GMe,l4r,i4r,OMe,d4r,c4r,mE,HUe,Ec,gE,VMe,a$,f4r,XMe,m4r,JUe,ar,n$,g4r,Cc,h4r,dY,p4r,_4r,cY,u4r,b4r,v4r,s$,F4r,zMe,T4r,M4r,E4r,qt,l$,C4r,WMe,w4r,A4r,wc,L4r,QMe,y4r,x4r,fY,$4r,k4r,S4r,hE,R4r,Rr,i$,P4r,UMe,B4r,I4r,_n,N4r,HMe,q4r,j4r,JMe,D4r,G4r,YMe,O4r,V4r,X4r,q,pE,KMe,z4r,W4r,mY,Q4r,U4r,H4r,_E,ZMe,J4r,Y4r,gY,K4r,Z4r,eCr,uE,eEe,oCr,rCr,hY,tCr,aCr,nCr,bE,oEe,sCr,lCr,pY,iCr,dCr,cCr,vE,rEe,fCr,mCr,_Y,gCr,hCr,pCr,FE,tEe,_Cr,uCr,uY,bCr,vCr,FCr,TE,aEe,TCr,MCr,bY,ECr,CCr,wCr,ME,nEe,ACr,LCr,vY,yCr,xCr,$Cr,EE,sEe,kCr,SCr,FY,RCr,PCr,BCr,CE,lEe,ICr,NCr,TY,qCr,jCr,DCr,wE,iEe,GCr,OCr,MY,VCr,XCr,zCr,AE,dEe,WCr,QCr,EY,UCr,HCr,JCr,LE,cEe,YCr,KCr,CY,ZCr,e3r,o3r,yE,fEe,r3r,t3r,wY,a3r,n3r,s3r,xE,mEe,l3r,i3r,AY,d3r,c3r,f3r,$E,gEe,m3r,g3r,LY,h3r,p3r,_3r,kE,hEe,u3r,b3r,yY,v3r,F3r,T3r,SE,pEe,M3r,E3r,xY,C3r,w3r,A3r,il,_Ee,L3r,y3r,$Y,x3r,$3r,kY,k3r,S3r,R3r,RE,uEe,P3r,B3r,SY,I3r,N3r,q3r,PE,bEe,j3r,D3r,RY,G3r,O3r,V3r,BE,vEe,X3r,z3r,PY,W3r,Q3r,U3r,IE,FEe,H3r,J3r,BY,Y3r,K3r,Z3r,NE,TEe,e5r,o5r,IY,r5r,t5r,a5r,qE,MEe,n5r,s5r,NY,l5r,i5r,d5r,jE,EEe,c5r,f5r,qY,m5r,g5r,h5r,DE,CEe,p5r,_5r,jY,u5r,b5r,v5r,GE,wEe,F5r,T5r,DY,M5r,E5r,C5r,OE,AEe,w5r,A5r,GY,L5r,y5r,x5r,VE,LEe,$5r,k5r,OY,S5r,R5r,P5r,XE,yEe,B5r,I5r,VY,N5r,q5r,j5r,zE,xEe,D5r,G5r,XY,O5r,V5r,X5r,WE,$Ee,z5r,W5r,zY,Q5r,U5r,H5r,QE,kEe,J5r,Y5r,WY,K5r,Z5r,e0r,UE,SEe,o0r,r0r,QY,t0r,a0r,n0r,HE,REe,s0r,l0r,UY,i0r,d0r,c0r,JE,PEe,f0r,m0r,HY,g0r,h0r,p0r,YE,BEe,_0r,u0r,JY,b0r,v0r,F0r,KE,IEe,T0r,M0r,YY,E0r,C0r,w0r,ZE,NEe,A0r,L0r,KY,y0r,x0r,$0r,e4,qEe,k0r,S0r,ZY,R0r,P0r,B0r,o4,jEe,I0r,N0r,eK,q0r,j0r,D0r,r4,DEe,G0r,O0r,oK,V0r,X0r,z0r,t4,GEe,W0r,Q0r,rK,U0r,H0r,J0r,a4,OEe,Y0r,K0r,tK,Z0r,ewr,owr,n4,VEe,rwr,twr,aK,awr,nwr,swr,s4,XEe,lwr,iwr,nK,dwr,cwr,fwr,l4,zEe,mwr,gwr,sK,hwr,pwr,_wr,i4,WEe,uwr,bwr,lK,vwr,Fwr,Twr,d4,QEe,Mwr,Ewr,iK,Cwr,wwr,Awr,c4,UEe,Lwr,ywr,dK,xwr,$wr,kwr,f4,YUe,Ac,m4,HEe,d$,Swr,JEe,Rwr,KUe,nr,c$,Pwr,Lc,Bwr,cK,Iwr,Nwr,fK,qwr,jwr,Dwr,f$,Gwr,YEe,Owr,Vwr,Xwr,jt,m$,zwr,KEe,Wwr,Qwr,yc,Uwr,ZEe,Hwr,Jwr,mK,Ywr,Kwr,Zwr,g4,eAr,Pr,g$,oAr,e4e,rAr,tAr,un,aAr,o4e,nAr,sAr,r4e,lAr,iAr,t4e,dAr,cAr,fAr,se,h4,a4e,mAr,gAr,gK,hAr,pAr,_Ar,p4,n4e,uAr,bAr,hK,vAr,FAr,TAr,_4,s4e,MAr,EAr,pK,CAr,wAr,AAr,u4,l4e,LAr,yAr,_K,xAr,$Ar,kAr,b4,i4e,SAr,RAr,uK,PAr,BAr,IAr,v4,d4e,NAr,qAr,bK,jAr,DAr,GAr,F4,c4e,OAr,VAr,vK,XAr,zAr,WAr,T4,f4e,QAr,UAr,FK,HAr,JAr,YAr,M4,m4e,KAr,ZAr,TK,e7r,o7r,r7r,E4,g4e,t7r,a7r,MK,n7r,s7r,l7r,C4,h4e,i7r,d7r,EK,c7r,f7r,m7r,w4,p4e,g7r,h7r,CK,p7r,_7r,u7r,A4,_4e,b7r,v7r,wK,F7r,T7r,M7r,L4,u4e,E7r,C7r,AK,w7r,A7r,L7r,y4,b4e,y7r,x7r,LK,$7r,k7r,S7r,x4,v4e,R7r,P7r,yK,B7r,I7r,N7r,$4,F4e,q7r,j7r,xK,D7r,G7r,O7r,k4,T4e,V7r,X7r,$K,z7r,W7r,Q7r,S4,M4e,U7r,H7r,kK,J7r,Y7r,K7r,R4,E4e,Z7r,eLr,SK,oLr,rLr,tLr,P4,C4e,aLr,nLr,RK,sLr,lLr,iLr,B4,w4e,dLr,cLr,PK,fLr,mLr,gLr,I4,A4e,hLr,pLr,BK,_Lr,uLr,bLr,N4,ZUe,xc,q4,L4e,h$,vLr,y4e,FLr,eHe,sr,p$,TLr,$c,MLr,IK,ELr,CLr,NK,wLr,ALr,LLr,_$,yLr,x4e,xLr,$Lr,kLr,Dt,u$,SLr,$4e,RLr,PLr,kc,BLr,k4e,ILr,NLr,qK,qLr,jLr,DLr,j4,GLr,Br,b$,OLr,S4e,VLr,XLr,bn,zLr,R4e,WLr,QLr,P4e,ULr,HLr,B4e,JLr,YLr,KLr,Me,D4,I4e,ZLr,eyr,jK,oyr,ryr,tyr,G4,N4e,ayr,nyr,DK,syr,lyr,iyr,O4,q4e,dyr,cyr,GK,fyr,myr,gyr,V4,j4e,hyr,pyr,OK,_yr,uyr,byr,X4,D4e,vyr,Fyr,VK,Tyr,Myr,Eyr,z4,G4e,Cyr,wyr,XK,Ayr,Lyr,yyr,W4,O4e,xyr,$yr,zK,kyr,Syr,Ryr,Q4,V4e,Pyr,Byr,WK,Iyr,Nyr,qyr,U4,X4e,jyr,Dyr,QK,Gyr,Oyr,Vyr,H4,z4e,Xyr,zyr,UK,Wyr,Qyr,Uyr,J4,W4e,Hyr,Jyr,HK,Yyr,Kyr,Zyr,Y4,Q4e,e9r,o9r,JK,r9r,t9r,a9r,K4,U4e,n9r,s9r,YK,l9r,i9r,d9r,Z4,oHe,Sc,eC,H4e,v$,c9r,J4e,f9r,rHe,lr,F$,m9r,Rc,g9r,KK,h9r,p9r,ZK,_9r,u9r,b9r,T$,v9r,Y4e,F9r,T9r,M9r,Gt,M$,E9r,K4e,C9r,w9r,Pc,A9r,Z4e,L9r,y9r,eZ,x9r,$9r,k9r,oC,S9r,Ir,E$,R9r,eCe,P9r,B9r,vn,I9r,oCe,N9r,q9r,rCe,j9r,D9r,tCe,G9r,O9r,V9r,Ve,rC,aCe,X9r,z9r,oZ,W9r,Q9r,U9r,tC,nCe,H9r,J9r,rZ,Y9r,K9r,Z9r,dl,sCe,exr,oxr,tZ,rxr,txr,aZ,axr,nxr,sxr,aC,lCe,lxr,ixr,nZ,dxr,cxr,fxr,nC,iCe,mxr,gxr,sZ,hxr,pxr,_xr,sC,dCe,uxr,bxr,lZ,vxr,Fxr,Txr,lC,cCe,Mxr,Exr,iZ,Cxr,wxr,Axr,iC,fCe,Lxr,yxr,dZ,xxr,$xr,kxr,dC,tHe,Bc,cC,mCe,C$,Sxr,gCe,Rxr,aHe,ir,w$,Pxr,Ic,Bxr,cZ,Ixr,Nxr,fZ,qxr,jxr,Dxr,A$,Gxr,hCe,Oxr,Vxr,Xxr,Ot,L$,zxr,pCe,Wxr,Qxr,Nc,Uxr,_Ce,Hxr,Jxr,mZ,Yxr,Kxr,Zxr,fC,e$r,Nr,y$,o$r,uCe,r$r,t$r,Fn,a$r,bCe,n$r,s$r,vCe,l$r,i$r,FCe,d$r,c$r,f$r,x$,mC,TCe,m$r,g$r,gZ,h$r,p$r,_$r,gC,MCe,u$r,b$r,hZ,v$r,F$r,T$r,hC,nHe,qc,pC,ECe,$$,M$r,CCe,E$r,sHe,dr,k$,C$r,jc,w$r,pZ,A$r,L$r,_Z,y$r,x$r,$$r,S$,k$r,wCe,S$r,R$r,P$r,Vt,R$,B$r,ACe,I$r,N$r,Dc,q$r,LCe,j$r,D$r,uZ,G$r,O$r,V$r,_C,X$r,qr,P$,z$r,yCe,W$r,Q$r,Tn,U$r,xCe,H$r,J$r,$Ce,Y$r,K$r,kCe,Z$r,ekr,okr,de,uC,SCe,rkr,tkr,bZ,akr,nkr,skr,bC,RCe,lkr,ikr,vZ,dkr,ckr,fkr,vC,PCe,mkr,gkr,FZ,hkr,pkr,_kr,FC,BCe,ukr,bkr,TZ,vkr,Fkr,Tkr,TC,ICe,Mkr,Ekr,MZ,Ckr,wkr,Akr,MC,NCe,Lkr,ykr,EZ,xkr,$kr,kkr,EC,qCe,Skr,Rkr,CZ,Pkr,Bkr,Ikr,CC,jCe,Nkr,qkr,wZ,jkr,Dkr,Gkr,wC,DCe,Okr,Vkr,AZ,Xkr,zkr,Wkr,AC,GCe,Qkr,Ukr,LZ,Hkr,Jkr,Ykr,LC,OCe,Kkr,Zkr,yZ,eSr,oSr,rSr,yC,VCe,tSr,aSr,xZ,nSr,sSr,lSr,xC,XCe,iSr,dSr,$Z,cSr,fSr,mSr,$C,zCe,gSr,hSr,kZ,pSr,_Sr,uSr,kC,WCe,bSr,vSr,SZ,FSr,TSr,MSr,SC,QCe,ESr,CSr,RZ,wSr,ASr,LSr,RC,UCe,ySr,xSr,PZ,$Sr,kSr,SSr,PC,HCe,RSr,PSr,BZ,BSr,ISr,NSr,BC,JCe,qSr,jSr,IZ,DSr,GSr,OSr,IC,YCe,VSr,XSr,NZ,zSr,WSr,QSr,NC,lHe,Gc,qC,KCe,B$,USr,ZCe,HSr,iHe,cr,I$,JSr,Oc,YSr,qZ,KSr,ZSr,jZ,eRr,oRr,rRr,N$,tRr,e3e,aRr,nRr,sRr,Xt,q$,lRr,o3e,iRr,dRr,Vc,cRr,r3e,fRr,mRr,DZ,gRr,hRr,pRr,jC,_Rr,jr,j$,uRr,t3e,bRr,vRr,Mn,FRr,a3e,TRr,MRr,n3e,ERr,CRr,s3e,wRr,ARr,LRr,ye,DC,l3e,yRr,xRr,GZ,$Rr,kRr,SRr,GC,i3e,RRr,PRr,OZ,BRr,IRr,NRr,OC,d3e,qRr,jRr,VZ,DRr,GRr,ORr,VC,c3e,VRr,XRr,XZ,zRr,WRr,QRr,XC,f3e,URr,HRr,zZ,JRr,YRr,KRr,zC,m3e,ZRr,ePr,WZ,oPr,rPr,tPr,WC,g3e,aPr,nPr,QZ,sPr,lPr,iPr,QC,h3e,dPr,cPr,UZ,fPr,mPr,gPr,UC,p3e,hPr,pPr,HZ,_Pr,uPr,bPr,HC,_3e,vPr,FPr,JZ,TPr,MPr,EPr,JC,dHe,Xc,YC,u3e,D$,CPr,b3e,wPr,cHe,fr,G$,APr,zc,LPr,YZ,yPr,xPr,KZ,$Pr,kPr,SPr,O$,RPr,v3e,PPr,BPr,IPr,zt,V$,NPr,F3e,qPr,jPr,Wc,DPr,T3e,GPr,OPr,ZZ,VPr,XPr,zPr,KC,WPr,Dr,X$,QPr,M3e,UPr,HPr,En,JPr,E3e,YPr,KPr,C3e,ZPr,eBr,w3e,oBr,rBr,tBr,te,ZC,A3e,aBr,nBr,eee,sBr,lBr,iBr,e3,L3e,dBr,cBr,oee,fBr,mBr,gBr,o3,y3e,hBr,pBr,ree,_Br,uBr,bBr,r3,x3e,vBr,FBr,tee,TBr,MBr,EBr,t3,$3e,CBr,wBr,aee,ABr,LBr,yBr,a3,k3e,xBr,$Br,nee,kBr,SBr,RBr,n3,S3e,PBr,BBr,see,IBr,NBr,qBr,s3,R3e,jBr,DBr,lee,GBr,OBr,VBr,l3,P3e,XBr,zBr,iee,WBr,QBr,UBr,i3,B3e,HBr,JBr,dee,YBr,KBr,ZBr,d3,I3e,eIr,oIr,cee,rIr,tIr,aIr,c3,N3e,nIr,sIr,fee,lIr,iIr,dIr,f3,q3e,cIr,fIr,mee,mIr,gIr,hIr,m3,j3e,pIr,_Ir,gee,uIr,bIr,vIr,g3,D3e,FIr,TIr,hee,MIr,EIr,CIr,h3,G3e,wIr,AIr,pee,LIr,yIr,xIr,p3,O3e,$Ir,kIr,_ee,SIr,RIr,PIr,_3,V3e,BIr,IIr,uee,NIr,qIr,jIr,u3,X3e,DIr,GIr,bee,OIr,VIr,XIr,b3,z3e,zIr,WIr,vee,QIr,UIr,HIr,v3,W3e,JIr,YIr,Fee,KIr,ZIr,eNr,F3,Q3e,oNr,rNr,Tee,tNr,aNr,nNr,T3,U3e,sNr,lNr,Mee,iNr,dNr,cNr,M3,H3e,fNr,mNr,Eee,gNr,hNr,pNr,E3,J3e,_Nr,uNr,Cee,bNr,vNr,FNr,C3,Y3e,TNr,MNr,wee,ENr,CNr,wNr,w3,fHe,Qc,A3,K3e,z$,ANr,Z3e,LNr,mHe,mr,W$,yNr,Uc,xNr,Aee,$Nr,kNr,Lee,SNr,RNr,PNr,Q$,BNr,e5e,INr,NNr,qNr,Wt,U$,jNr,o5e,DNr,GNr,Hc,ONr,r5e,VNr,XNr,yee,zNr,WNr,QNr,L3,UNr,Gr,H$,HNr,t5e,JNr,YNr,Cn,KNr,a5e,ZNr,eqr,n5e,oqr,rqr,s5e,tqr,aqr,nqr,ve,y3,l5e,sqr,lqr,xee,iqr,dqr,cqr,x3,i5e,fqr,mqr,$ee,gqr,hqr,pqr,$3,d5e,_qr,uqr,kee,bqr,vqr,Fqr,k3,c5e,Tqr,Mqr,See,Eqr,Cqr,wqr,S3,f5e,Aqr,Lqr,Ree,yqr,xqr,$qr,R3,m5e,kqr,Sqr,Pee,Rqr,Pqr,Bqr,P3,g5e,Iqr,Nqr,Bee,qqr,jqr,Dqr,B3,h5e,Gqr,Oqr,Iee,Vqr,Xqr,zqr,I3,p5e,Wqr,Qqr,Nee,Uqr,Hqr,Jqr,N3,_5e,Yqr,Kqr,qee,Zqr,ejr,ojr,q3,u5e,rjr,tjr,jee,ajr,njr,sjr,j3,b5e,ljr,ijr,Dee,djr,cjr,fjr,D3,v5e,mjr,gjr,Gee,hjr,pjr,_jr,G3,F5e,ujr,bjr,Oee,vjr,Fjr,Tjr,O3,T5e,Mjr,Ejr,Vee,Cjr,wjr,Ajr,V3,M5e,Ljr,yjr,Xee,xjr,$jr,kjr,X3,E5e,Sjr,Rjr,zee,Pjr,Bjr,Ijr,z3,gHe,Jc,W3,C5e,J$,Njr,w5e,qjr,hHe,gr,Y$,jjr,Yc,Djr,Wee,Gjr,Ojr,Qee,Vjr,Xjr,zjr,K$,Wjr,A5e,Qjr,Ujr,Hjr,Qt,Z$,Jjr,L5e,Yjr,Kjr,Kc,Zjr,y5e,eDr,oDr,Uee,rDr,tDr,aDr,Q3,nDr,Or,ek,sDr,x5e,lDr,iDr,wn,dDr,$5e,cDr,fDr,k5e,mDr,gDr,S5e,hDr,pDr,_Dr,ok,U3,R5e,uDr,bDr,Hee,vDr,FDr,TDr,H3,P5e,MDr,EDr,Jee,CDr,wDr,ADr,J3,pHe,Zc,Y3,B5e,rk,LDr,I5e,yDr,_He,hr,tk,xDr,ef,$Dr,Yee,kDr,SDr,Kee,RDr,PDr,BDr,ak,IDr,N5e,NDr,qDr,jDr,Ut,nk,DDr,q5e,GDr,ODr,of,VDr,j5e,XDr,zDr,Zee,WDr,QDr,UDr,K3,HDr,Vr,sk,JDr,D5e,YDr,KDr,An,ZDr,G5e,eGr,oGr,O5e,rGr,tGr,V5e,aGr,nGr,sGr,X5e,Z3,z5e,lGr,iGr,eoe,dGr,cGr,fGr,e5,uHe,rf,o5,W5e,lk,mGr,Q5e,gGr,bHe,pr,ik,hGr,tf,pGr,ooe,_Gr,uGr,roe,bGr,vGr,FGr,dk,TGr,U5e,MGr,EGr,CGr,Ht,ck,wGr,H5e,AGr,LGr,af,yGr,J5e,xGr,$Gr,toe,kGr,SGr,RGr,r5,PGr,Xr,fk,BGr,Y5e,IGr,NGr,Ln,qGr,K5e,jGr,DGr,Z5e,GGr,OGr,e0e,VGr,XGr,zGr,ce,t5,o0e,WGr,QGr,aoe,UGr,HGr,JGr,a5,r0e,YGr,KGr,noe,ZGr,eOr,oOr,n5,t0e,rOr,tOr,soe,aOr,nOr,sOr,s5,a0e,lOr,iOr,loe,dOr,cOr,fOr,l5,n0e,mOr,gOr,ioe,hOr,pOr,_Or,i5,s0e,uOr,bOr,doe,vOr,FOr,TOr,d5,l0e,MOr,EOr,coe,COr,wOr,AOr,c5,i0e,LOr,yOr,foe,xOr,$Or,kOr,f5,d0e,SOr,ROr,moe,POr,BOr,IOr,m5,c0e,NOr,qOr,goe,jOr,DOr,GOr,g5,f0e,OOr,VOr,hoe,XOr,zOr,WOr,h5,m0e,QOr,UOr,poe,HOr,JOr,YOr,p5,g0e,KOr,ZOr,_oe,eVr,oVr,rVr,_5,h0e,tVr,aVr,uoe,nVr,sVr,lVr,u5,p0e,iVr,dVr,boe,cVr,fVr,mVr,b5,_0e,gVr,hVr,voe,pVr,_Vr,uVr,v5,u0e,bVr,vVr,Foe,FVr,TVr,MVr,F5,b0e,EVr,CVr,Toe,wVr,AVr,LVr,T5,v0e,yVr,xVr,Moe,$Vr,kVr,SVr,M5,F0e,RVr,PVr,Eoe,BVr,IVr,NVr,E5,vHe,nf,C5,T0e,mk,qVr,M0e,jVr,FHe,_r,gk,DVr,sf,GVr,Coe,OVr,VVr,woe,XVr,zVr,WVr,hk,QVr,E0e,UVr,HVr,JVr,Jt,pk,YVr,C0e,KVr,ZVr,lf,eXr,w0e,oXr,rXr,Aoe,tXr,aXr,nXr,w5,sXr,zr,_k,lXr,A0e,iXr,dXr,yn,cXr,L0e,fXr,mXr,y0e,gXr,hXr,x0e,pXr,_Xr,uXr,fe,A5,$0e,bXr,vXr,Loe,FXr,TXr,MXr,L5,k0e,EXr,CXr,yoe,wXr,AXr,LXr,y5,S0e,yXr,xXr,xoe,$Xr,kXr,SXr,x5,R0e,RXr,PXr,$oe,BXr,IXr,NXr,$5,P0e,qXr,jXr,koe,DXr,GXr,OXr,k5,B0e,VXr,XXr,Soe,zXr,WXr,QXr,S5,I0e,UXr,HXr,Roe,JXr,YXr,KXr,R5,N0e,ZXr,ezr,Poe,ozr,rzr,tzr,P5,q0e,azr,nzr,Boe,szr,lzr,izr,B5,j0e,dzr,czr,Ioe,fzr,mzr,gzr,I5,D0e,hzr,pzr,Noe,_zr,uzr,bzr,N5,G0e,vzr,Fzr,qoe,Tzr,Mzr,Ezr,q5,O0e,Czr,wzr,joe,Azr,Lzr,yzr,j5,V0e,xzr,$zr,Doe,kzr,Szr,Rzr,D5,X0e,Pzr,Bzr,Goe,Izr,Nzr,qzr,G5,z0e,jzr,Dzr,Ooe,Gzr,Ozr,Vzr,O5,W0e,Xzr,zzr,Voe,Wzr,Qzr,Uzr,V5,Q0e,Hzr,Jzr,Xoe,Yzr,Kzr,Zzr,X5,U0e,eWr,oWr,zoe,rWr,tWr,aWr,z5,H0e,nWr,sWr,Woe,lWr,iWr,dWr,W5,THe,df,Q5,J0e,uk,cWr,Y0e,fWr,MHe,ur,bk,mWr,cf,gWr,Qoe,hWr,pWr,Uoe,_Wr,uWr,bWr,vk,vWr,K0e,FWr,TWr,MWr,Yt,Fk,EWr,Z0e,CWr,wWr,ff,AWr,ewe,LWr,yWr,Hoe,xWr,$Wr,kWr,U5,SWr,Wr,Tk,RWr,owe,PWr,BWr,xn,IWr,rwe,NWr,qWr,twe,jWr,DWr,awe,GWr,OWr,VWr,nwe,H5,swe,XWr,zWr,Joe,WWr,QWr,UWr,J5,EHe,mf,Y5,lwe,Mk,HWr,iwe,JWr,CHe,br,Ek,YWr,gf,KWr,Yoe,ZWr,eQr,Koe,oQr,rQr,tQr,Ck,aQr,dwe,nQr,sQr,lQr,Kt,wk,iQr,cwe,dQr,cQr,hf,fQr,fwe,mQr,gQr,Zoe,hQr,pQr,_Qr,K5,uQr,Qr,Ak,bQr,mwe,vQr,FQr,$n,TQr,gwe,MQr,EQr,hwe,CQr,wQr,pwe,AQr,LQr,yQr,_we,Z5,uwe,xQr,$Qr,ere,kQr,SQr,RQr,e0,wHe,pf,o0,bwe,Lk,PQr,vwe,BQr,AHe,vr,yk,IQr,_f,NQr,ore,qQr,jQr,rre,DQr,GQr,OQr,xk,VQr,Fwe,XQr,zQr,WQr,Zt,$k,QQr,Twe,UQr,HQr,uf,JQr,Mwe,YQr,KQr,tre,ZQr,eUr,oUr,r0,rUr,Ur,kk,tUr,Ewe,aUr,nUr,kn,sUr,Cwe,lUr,iUr,wwe,dUr,cUr,Awe,fUr,mUr,gUr,re,t0,Lwe,hUr,pUr,are,_Ur,uUr,bUr,a0,ywe,vUr,FUr,nre,TUr,MUr,EUr,n0,xwe,CUr,wUr,sre,AUr,LUr,yUr,s0,$we,xUr,$Ur,lre,kUr,SUr,RUr,l0,kwe,PUr,BUr,ire,IUr,NUr,qUr,i0,Swe,jUr,DUr,dre,GUr,OUr,VUr,d0,Rwe,XUr,zUr,cre,WUr,QUr,UUr,c0,Pwe,HUr,JUr,fre,YUr,KUr,ZUr,f0,Bwe,eHr,oHr,mre,rHr,tHr,aHr,m0,Iwe,nHr,sHr,gre,lHr,iHr,dHr,g0,Nwe,cHr,fHr,hre,mHr,gHr,hHr,h0,qwe,pHr,_Hr,pre,uHr,bHr,vHr,p0,jwe,FHr,THr,_re,MHr,EHr,CHr,_0,Dwe,wHr,AHr,ure,LHr,yHr,xHr,u0,Gwe,$Hr,kHr,bre,SHr,RHr,PHr,b0,Owe,BHr,IHr,vre,NHr,qHr,jHr,v0,Vwe,DHr,GHr,Fre,OHr,VHr,XHr,F0,Xwe,zHr,WHr,Tre,QHr,UHr,HHr,T0,zwe,JHr,YHr,Mre,KHr,ZHr,eJr,M0,Wwe,oJr,rJr,Ere,tJr,aJr,nJr,E0,Qwe,sJr,lJr,Cre,iJr,dJr,cJr,C0,Uwe,fJr,mJr,wre,gJr,hJr,pJr,w0,Hwe,_Jr,uJr,Are,bJr,vJr,FJr,A0,Jwe,TJr,MJr,Lre,EJr,CJr,wJr,L0,Ywe,AJr,LJr,yre,yJr,xJr,$Jr,y0,Kwe,kJr,SJr,xre,RJr,PJr,BJr,x0,Zwe,IJr,NJr,$re,qJr,jJr,DJr,$0,LHe,bf,k0,eAe,Sk,GJr,oAe,OJr,yHe,Fr,Rk,VJr,vf,XJr,kre,zJr,WJr,Sre,QJr,UJr,HJr,Pk,JJr,rAe,YJr,KJr,ZJr,ea,Bk,eYr,tAe,oYr,rYr,Ff,tYr,aAe,aYr,nYr,Rre,sYr,lYr,iYr,S0,dYr,Hr,Ik,cYr,nAe,fYr,mYr,Sn,gYr,sAe,hYr,pYr,lAe,_Yr,uYr,iAe,bYr,vYr,FYr,xe,R0,dAe,TYr,MYr,Pre,EYr,CYr,wYr,P0,cAe,AYr,LYr,Bre,yYr,xYr,$Yr,B0,fAe,kYr,SYr,Ire,RYr,PYr,BYr,I0,mAe,IYr,NYr,Nre,qYr,jYr,DYr,N0,gAe,GYr,OYr,qre,VYr,XYr,zYr,q0,hAe,WYr,QYr,jre,UYr,HYr,JYr,j0,pAe,YYr,KYr,Dre,ZYr,eKr,oKr,D0,_Ae,rKr,tKr,Gre,aKr,nKr,sKr,G0,uAe,lKr,iKr,Ore,dKr,cKr,fKr,O0,bAe,mKr,gKr,Vre,hKr,pKr,_Kr,V0,xHe,Tf,X0,vAe,Nk,uKr,FAe,bKr,$He,Tr,qk,vKr,Mf,FKr,Xre,TKr,MKr,zre,EKr,CKr,wKr,jk,AKr,TAe,LKr,yKr,xKr,oa,Dk,$Kr,MAe,kKr,SKr,Ef,RKr,EAe,PKr,BKr,Wre,IKr,NKr,qKr,z0,jKr,Jr,Gk,DKr,CAe,GKr,OKr,Rn,VKr,wAe,XKr,zKr,AAe,WKr,QKr,LAe,UKr,HKr,JKr,Ee,W0,yAe,YKr,KKr,Qre,ZKr,eZr,oZr,Q0,xAe,rZr,tZr,Ure,aZr,nZr,sZr,U0,$Ae,lZr,iZr,Hre,dZr,cZr,fZr,H0,kAe,mZr,gZr,Jre,hZr,pZr,_Zr,J0,SAe,uZr,bZr,Yre,vZr,FZr,TZr,Y0,RAe,MZr,EZr,Kre,CZr,wZr,AZr,K0,PAe,LZr,yZr,Zre,xZr,$Zr,kZr,Z0,BAe,SZr,RZr,ete,PZr,BZr,IZr,ew,IAe,NZr,qZr,ote,jZr,DZr,GZr,ow,NAe,OZr,VZr,rte,XZr,zZr,WZr,rw,qAe,QZr,UZr,tte,HZr,JZr,YZr,tw,jAe,KZr,ZZr,ate,eet,oet,ret,aw,DAe,tet,aet,nte,net,set,iet,nw,kHe,Cf,sw,GAe,Ok,det,OAe,cet,SHe,Mr,Vk,fet,wf,met,ste,get,het,lte,pet,_et,uet,Xk,bet,VAe,vet,Fet,Tet,ra,zk,Met,XAe,Eet,Cet,Af,wet,zAe,Aet,Let,ite,yet,xet,$et,lw,ket,Yr,Wk,Set,WAe,Ret,Pet,Pn,Bet,QAe,Iet,Net,UAe,qet,jet,HAe,Det,Get,Oet,$e,iw,JAe,Vet,Xet,dte,zet,Wet,Qet,dw,YAe,Uet,Het,cte,Jet,Yet,Ket,cw,KAe,Zet,eot,fte,oot,rot,tot,fw,ZAe,aot,not,mte,sot,lot,iot,mw,e7e,dot,cot,gte,fot,mot,got,gw,o7e,hot,pot,hte,_ot,uot,bot,hw,r7e,vot,Fot,pte,Tot,Mot,Eot,pw,t7e,Cot,wot,_te,Aot,Lot,yot,_w,a7e,xot,$ot,ute,kot,Sot,Rot,uw,n7e,Pot,Bot,bte,Iot,Not,qot,bw,RHe,Lf,vw,s7e,Qk,jot,l7e,Dot,PHe,Er,Uk,Got,yf,Oot,vte,Vot,Xot,Fte,zot,Wot,Qot,Hk,Uot,i7e,Hot,Jot,Yot,ta,Jk,Kot,d7e,Zot,ert,xf,ort,c7e,rrt,trt,Tte,art,nrt,srt,Fw,lrt,Kr,Yk,irt,f7e,drt,crt,Bn,frt,m7e,mrt,grt,g7e,hrt,prt,h7e,_rt,urt,brt,ke,Tw,p7e,vrt,Frt,Mte,Trt,Mrt,Ert,Mw,_7e,Crt,wrt,Ete,Art,Lrt,yrt,Ew,u7e,xrt,$rt,Cte,krt,Srt,Rrt,Cw,b7e,Prt,Brt,wte,Irt,Nrt,qrt,ww,v7e,jrt,Drt,Ate,Grt,Ort,Vrt,Aw,F7e,Xrt,zrt,Lte,Wrt,Qrt,Urt,Lw,T7e,Hrt,Jrt,yte,Yrt,Krt,Zrt,yw,M7e,ett,ott,xte,rtt,ttt,att,xw,E7e,ntt,stt,$te,ltt,itt,dtt,$w,C7e,ctt,ftt,kte,mtt,gtt,htt,kw,BHe,$f,Sw,w7e,Kk,ptt,A7e,_tt,IHe,Cr,Zk,utt,kf,btt,Ste,vtt,Ftt,Rte,Ttt,Mtt,Ett,eS,Ctt,L7e,wtt,Att,Ltt,aa,oS,ytt,y7e,xtt,$tt,Sf,ktt,x7e,Stt,Rtt,Pte,Ptt,Btt,Itt,Rw,Ntt,Zr,rS,qtt,$7e,jtt,Dtt,In,Gtt,k7e,Ott,Vtt,S7e,Xtt,ztt,R7e,Wtt,Qtt,Utt,Se,Pw,P7e,Htt,Jtt,Bte,Ytt,Ktt,Ztt,Bw,B7e,eat,oat,Ite,rat,tat,aat,Iw,I7e,nat,sat,Nte,lat,iat,dat,Nw,N7e,cat,fat,qte,mat,gat,hat,qw,q7e,pat,_at,jte,uat,bat,vat,jw,j7e,Fat,Tat,Dte,Mat,Eat,Cat,Dw,D7e,wat,Aat,Gte,Lat,yat,xat,Gw,G7e,$at,kat,Ote,Sat,Rat,Pat,Ow,O7e,Bat,Iat,Vte,Nat,qat,jat,Vw,V7e,Dat,Gat,Xte,Oat,Vat,Xat,Xw,NHe,Rf,zw,X7e,tS,zat,z7e,Wat,qHe,wr,aS,Qat,Pf,Uat,zte,Hat,Jat,Wte,Yat,Kat,Zat,nS,ent,W7e,ont,rnt,tnt,na,sS,ant,Q7e,nnt,snt,Bf,lnt,U7e,int,dnt,Qte,cnt,fnt,mnt,Ww,gnt,et,lS,hnt,H7e,pnt,_nt,Nn,unt,J7e,bnt,vnt,Y7e,Fnt,Tnt,K7e,Mnt,Ent,Cnt,Re,Qw,Z7e,wnt,Ant,Ute,Lnt,ynt,xnt,Uw,eLe,$nt,knt,Hte,Snt,Rnt,Pnt,Hw,oLe,Bnt,Int,Jte,Nnt,qnt,jnt,Jw,rLe,Dnt,Gnt,Yte,Ont,Vnt,Xnt,Yw,tLe,znt,Wnt,Kte,Qnt,Unt,Hnt,Kw,aLe,Jnt,Ynt,Zte,Knt,Znt,est,Zw,nLe,ost,rst,eae,tst,ast,nst,eA,sLe,sst,lst,oae,ist,dst,cst,oA,lLe,fst,mst,rae,gst,hst,pst,rA,iLe,_st,ust,tae,bst,vst,Fst,tA,jHe,If,aA,dLe,iS,Tst,cLe,Mst,DHe,Ar,dS,Est,Nf,Cst,aae,wst,Ast,nae,Lst,yst,xst,cS,$st,fLe,kst,Sst,Rst,sa,fS,Pst,mLe,Bst,Ist,qf,Nst,gLe,qst,jst,sae,Dst,Gst,Ost,nA,Vst,ot,mS,Xst,hLe,zst,Wst,qn,Qst,pLe,Ust,Hst,_Le,Jst,Yst,uLe,Kst,Zst,elt,Xe,sA,bLe,olt,rlt,lae,tlt,alt,nlt,lA,vLe,slt,llt,iae,ilt,dlt,clt,iA,FLe,flt,mlt,dae,glt,hlt,plt,dA,TLe,_lt,ult,cae,blt,vlt,Flt,cA,MLe,Tlt,Mlt,fae,Elt,Clt,wlt,fA,ELe,Alt,Llt,mae,ylt,xlt,$lt,mA,CLe,klt,Slt,gae,Rlt,Plt,Blt,gA,wLe,Ilt,Nlt,hae,qlt,jlt,Dlt,hA,GHe,jf,pA,ALe,gS,Glt,LLe,Olt,OHe,Lr,hS,Vlt,Df,Xlt,pae,zlt,Wlt,_ae,Qlt,Ult,Hlt,pS,Jlt,yLe,Ylt,Klt,Zlt,la,_S,eit,xLe,oit,rit,Gf,tit,$Le,ait,nit,uae,sit,lit,iit,_A,dit,rt,uS,cit,kLe,fit,mit,jn,git,SLe,hit,pit,RLe,_it,uit,PLe,bit,vit,Fit,ze,uA,BLe,Tit,Mit,bae,Eit,Cit,wit,bA,ILe,Ait,Lit,vae,yit,xit,$it,vA,NLe,kit,Sit,Fae,Rit,Pit,Bit,FA,qLe,Iit,Nit,Tae,qit,jit,Dit,TA,jLe,Git,Oit,Mae,Vit,Xit,zit,MA,DLe,Wit,Qit,Eae,Uit,Hit,Jit,EA,GLe,Yit,Kit,Cae,Zit,edt,odt,CA,OLe,rdt,tdt,wae,adt,ndt,sdt,wA,VHe,Of,AA,VLe,bS,ldt,XLe,idt,XHe,yr,vS,ddt,Vf,cdt,Aae,fdt,mdt,Lae,gdt,hdt,pdt,FS,_dt,zLe,udt,bdt,vdt,ia,TS,Fdt,WLe,Tdt,Mdt,Xf,Edt,QLe,Cdt,wdt,yae,Adt,Ldt,ydt,LA,xdt,tt,MS,$dt,ULe,kdt,Sdt,Dn,Rdt,HLe,Pdt,Bdt,JLe,Idt,Ndt,YLe,qdt,jdt,Ddt,KLe,yA,ZLe,Gdt,Odt,xae,Vdt,Xdt,zdt,xA,zHe,zf,$A,eye,ES,Wdt,oye,Qdt,WHe,xr,CS,Udt,Wf,Hdt,$ae,Jdt,Ydt,kae,Kdt,Zdt,ect,wS,oct,rye,rct,tct,act,da,AS,nct,tye,sct,lct,Qf,ict,aye,dct,cct,Sae,fct,mct,gct,kA,hct,at,LS,pct,nye,_ct,uct,Gn,bct,sye,vct,Fct,lye,Tct,Mct,iye,Ect,Cct,wct,yS,SA,dye,Act,Lct,Rae,yct,xct,$ct,RA,cye,kct,Sct,Pae,Rct,Pct,Bct,PA,QHe,Uf,BA,fye,xS,Ict,mye,Nct,UHe,$r,$S,qct,Hf,jct,Bae,Dct,Gct,Iae,Oct,Vct,Xct,kS,zct,gye,Wct,Qct,Uct,ca,SS,Hct,hye,Jct,Yct,Jf,Kct,pye,Zct,eft,Nae,oft,rft,tft,IA,aft,nt,RS,nft,_ye,sft,lft,On,ift,uye,dft,cft,bye,fft,mft,vye,gft,hft,pft,Fye,NA,Tye,_ft,uft,qae,bft,vft,Fft,qA,HHe;return d=new oe({}),ja=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),gy=new oe({}),hy=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),nm=new Tft({props:{warning:!0,$$slots:{default:[qra]},$$scope:{ctx:$}}}),py=new oe({}),_y=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/configuration_auto.py#L625"}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/configuration_auto.py#L648"}}),Th=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[jra]},$$scope:{ctx:$}}}),Fy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/configuration_auto.py#L771"}}),Ty=new oe({}),My=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/tokenization_auto.py#L418"}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18686/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/tokenization_auto.py#L432"}}),tp=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Dra]},$$scope:{ctx:$}}}),Ay=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/tokenization_auto.py#L633"}}),Ly=new oe({}),yy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/feature_extraction_auto.py#L199"}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18686/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/feature_extraction_auto.py#L213"}}),Xp=new Tft({props:{$$slots:{default:[Gra]},$$scope:{ctx:$}}}),zp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Ora]},$$scope:{ctx:$}}}),Sy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/feature_extraction_auto.py#L340"}}),Ry=new oe({}),Py=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/processing_auto.py#L91"}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/processing_auto.py#L105"}}),h_=new Tft({props:{$$slots:{default:[Vra]},$$scope:{ctx:$}}}),p_=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Xra]},$$scope:{ctx:$}}}),qy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/processing_auto.py#L258"}}),jy=new oe({}),Dy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L808"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),b_=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[zra]},$$scope:{ctx:$}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),L1=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Wra]},$$scope:{ctx:$}}}),Xy=new oe({}),zy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L815"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),x1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Qra]},$$scope:{ctx:$}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),C6=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Ura]},$$scope:{ctx:$}}}),Hy=new oe({}),Jy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L830"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),A6=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Hra]},$$scope:{ctx:$}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),h8=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Jra]},$$scope:{ctx:$}}}),e9=new oe({}),o9=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L837"}}),t9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),_8=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Yra]},$$scope:{ctx:$}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),r2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Kra]},$$scope:{ctx:$}}}),n9=new oe({}),s9=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L844"}}),i9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),a2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Zra]},$$scope:{ctx:$}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),w2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[eta]},$$scope:{ctx:$}}}),c9=new oe({}),f9=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L853"}}),g9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),L2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[ota]},$$scope:{ctx:$}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),Lb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[rta]},$$scope:{ctx:$}}}),p9=new oe({}),_9=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L898"}}),b9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),xb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[tta]},$$scope:{ctx:$}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),iv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ata]},$$scope:{ctx:$}}}),F9=new oe({}),T9=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L905"}}),E9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),cv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[nta]},$$scope:{ctx:$}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),bv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[sta]},$$scope:{ctx:$}}}),w9=new oe({}),A9=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L891"}}),y9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),Fv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[lta]},$$scope:{ctx:$}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),nF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ita]},$$scope:{ctx:$}}}),$9=new oe({}),k9=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L862"}}),R9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),lF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[dta]},$$scope:{ctx:$}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[cta]},$$scope:{ctx:$}}}),B9=new oe({}),I9=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L869"}}),q9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[fta]},$$scope:{ctx:$}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),tT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[mta]},$$scope:{ctx:$}}}),D9=new oe({}),G9=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L914"}}),V9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18686/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18686/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18686/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18686/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),nT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[gta]},$$scope:{ctx:$}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),TT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[hta]},$$scope:{ctx:$}}}),z9=new oe({}),W9=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L953"}}),U9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),ET=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[pta]},$$scope:{ctx:$}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[_ta]},$$scope:{ctx:$}}}),J9=new oe({}),Y9=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L960"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),yT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[uta]},$$scope:{ctx:$}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[bta]},$$scope:{ctx:$}}}),ox=new oe({}),rx=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L880"}}),ax=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[vta]},$$scope:{ctx:$}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),IT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Fta]},$$scope:{ctx:$}}}),sx=new oe({}),lx=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L967"}}),dx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),qT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Tta]},$$scope:{ctx:$}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Mta]},$$scope:{ctx:$}}}),fx=new oe({}),mx=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L990"}}),hx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),YT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Eta]},$$scope:{ctx:$}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),aM=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Cta]},$$scope:{ctx:$}}}),_x=new oe({}),ux=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L974"}}),vx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),sM=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[wta]},$$scope:{ctx:$}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),bM=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Ata]},$$scope:{ctx:$}}}),Tx=new oe({}),Mx=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L981"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),FM=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Lta]},$$scope:{ctx:$}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),CM=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[yta]},$$scope:{ctx:$}}}),Lx=new oe({}),yx=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L999"}}),$x=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),AM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[xta]},$$scope:{ctx:$}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),RM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[$ta]},$$scope:{ctx:$}}}),Sx=new oe({}),Rx=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L1006"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),BM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[kta]},$$scope:{ctx:$}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),GM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Sta]},$$scope:{ctx:$}}}),Nx=new oe({}),qx=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L946"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),VM=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Rta]},$$scope:{ctx:$}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),QM=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Pta]},$$scope:{ctx:$}}}),Vx=new oe({}),Xx=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L921"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),HM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Bta]},$$scope:{ctx:$}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),KM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Ita]},$$scope:{ctx:$}}}),Ux=new oe({}),Hx=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L928"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),eE=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Nta]},$$scope:{ctx:$}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),lE=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[qta]},$$scope:{ctx:$}}}),Zx=new oe({}),e$=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_auto.py#L937"}}),r$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),dE=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[jta]},$$scope:{ctx:$}}}),t$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),mE=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Dta]},$$scope:{ctx:$}}}),a$=new oe({}),n$=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),l$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),hE=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Gta]},$$scope:{ctx:$}}}),i$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),f4=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Ota]},$$scope:{ctx:$}}}),d$=new oe({}),c$=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),m$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),g4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Vta]},$$scope:{ctx:$}}}),g$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),N4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Xta]},$$scope:{ctx:$}}}),h$=new oe({}),p$=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),u$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),j4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[zta]},$$scope:{ctx:$}}}),b$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),Z4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Wta]},$$scope:{ctx:$}}}),v$=new oe({}),F$=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),M$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_18686/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Qta]},$$scope:{ctx:$}}}),E$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),dC=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Uta]},$$scope:{ctx:$}}}),C$=new oe({}),w$=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_tf_auto.py#L463"}}),L$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),fC=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Hta]},$$scope:{ctx:$}}}),y$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Jta]},$$scope:{ctx:$}}}),$$=new oe({}),k$=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),R$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Yta]},$$scope:{ctx:$}}}),P$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Kta]},$$scope:{ctx:$}}}),B$=new oe({}),I$=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),q$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),jC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Zta]},$$scope:{ctx:$}}}),j$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),JC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[eaa]},$$scope:{ctx:$}}}),D$=new oe({}),G$=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_tf_auto.py#L495"}}),V$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),KC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[oaa]},$$scope:{ctx:$}}}),X$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),w3=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[raa]},$$scope:{ctx:$}}}),z$=new oe({}),W$=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),U$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),L3=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[taa]},$$scope:{ctx:$}}}),H$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),z3=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[aaa]},$$scope:{ctx:$}}}),J$=new oe({}),Y$=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_tf_auto.py#L538"}}),Z$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),Q3=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[naa]},$$scope:{ctx:$}}}),ek=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[saa]},$$scope:{ctx:$}}}),rk=new oe({}),tk=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),nk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),K3=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[laa]},$$scope:{ctx:$}}}),sk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[iaa]},$$scope:{ctx:$}}}),lk=new oe({}),ik=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),ck=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[daa]},$$scope:{ctx:$}}}),fk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),E5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[caa]},$$scope:{ctx:$}}}),mk=new oe({}),gk=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),pk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),w5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[faa]},$$scope:{ctx:$}}}),_k=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),W5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[maa]},$$scope:{ctx:$}}}),uk=new oe({}),bk=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),Fk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),U5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[gaa]},$$scope:{ctx:$}}}),Tk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),J5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[haa]},$$scope:{ctx:$}}}),Mk=new oe({}),Ek=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_tf_auto.py#L547"}}),wk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),K5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[paa]},$$scope:{ctx:$}}}),Ak=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),e0=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[_aa]},$$scope:{ctx:$}}}),Lk=new oe({}),yk=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),$k=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),r0=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[uaa]},$$scope:{ctx:$}}}),kk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),$0=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[baa]},$$scope:{ctx:$}}}),Sk=new oe({}),Rk=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Bk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),S0=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[vaa]},$$scope:{ctx:$}}}),Ik=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),V0=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Faa]},$$scope:{ctx:$}}}),Nk=new oe({}),qk=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Dk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),z0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Taa]},$$scope:{ctx:$}}}),Gk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),nw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Maa]},$$scope:{ctx:$}}}),Ok=new oe({}),Vk=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),zk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),lw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Eaa]},$$scope:{ctx:$}}}),Wk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),bw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Caa]},$$scope:{ctx:$}}}),Qk=new oe({}),Uk=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Jk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),Fw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[waa]},$$scope:{ctx:$}}}),Yk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),kw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Aaa]},$$scope:{ctx:$}}}),Kk=new oe({}),Zk=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),oS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),Rw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Laa]},$$scope:{ctx:$}}}),rS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),Xw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[yaa]},$$scope:{ctx:$}}}),tS=new oe({}),aS=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),sS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),Ww=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[xaa]},$$scope:{ctx:$}}}),lS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),tA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[$aa]},$$scope:{ctx:$}}}),iS=new oe({}),dS=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),fS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),nA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[kaa]},$$scope:{ctx:$}}}),mS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),hA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Saa]},$$scope:{ctx:$}}}),gS=new oe({}),hS=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),_S=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),_A=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Raa]},$$scope:{ctx:$}}}),uS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),wA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Paa]},$$scope:{ctx:$}}}),bS=new oe({}),vS=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),TS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),LA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Baa]},$$scope:{ctx:$}}}),MS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),xA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Iaa]},$$scope:{ctx:$}}}),ES=new oe({}),CS=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),AS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18686/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),kA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Naa]},$$scope:{ctx:$}}}),LS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),PA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[qaa]},$$scope:{ctx:$}}}),xS=new oe({}),$S=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),SS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18686/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18686/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L389"}}),IA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[jaa]},$$scope:{ctx:$}}}),RS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18686/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18686/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18686/src/transformers/models/auto/auto_factory.py#L417"}}),qA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Daa]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Ao=a("span"),Oi=o("Auto Classes"),em=l(),ft=a("p"),Vi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=a("code"),dy=o("from_pretrained()"),om=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),zi=o("Instantiating one of "),Xn=a("a"),cy=o("AutoConfig"),zn=o(", "),Wn=a("a"),fy=o("AutoModel"),Wi=o(`, and
`),Qn=a("a"),my=o("AutoTokenizer"),Qi=o(" will directly create a class of the relevant architecture. For instance"),rm=l(),F(ja.$$.fragment),Ue=l(),Ae=a("p"),tP=o("will create a model that is an instance of "),Ui=a("a"),aP=o("BertModel"),nP=o("."),Lo=l(),Da=a("p"),sP=o("There is one class of "),tm=a("code"),lP=o("AutoModel"),cKe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),DQe=l(),Hi=a("h2"),am=a("a"),Ise=a("span"),F(gy.$$.fragment),fKe=l(),Nse=a("span"),mKe=o("Extending the Auto Classes"),GQe=l(),Un=a("p"),gKe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qse=a("code"),hKe=o("NewModel"),pKe=o(", make sure you have a "),jse=a("code"),_Ke=o("NewModelConfig"),uKe=o(` then you can add those to the auto
classes like this:`),OQe=l(),F(hy.$$.fragment),VQe=l(),iP=a("p"),bKe=o("You will then be able to use the auto classes like you would usually do!"),XQe=l(),F(nm.$$.fragment),zQe=l(),Ji=a("h2"),sm=a("a"),Dse=a("span"),F(py.$$.fragment),vKe=l(),Gse=a("span"),FKe=o("AutoConfig"),WQe=l(),yo=a("div"),F(_y.$$.fragment),TKe=l(),uy=a("p"),MKe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),dP=a("a"),EKe=o("from_pretrained()"),CKe=o(" class method."),wKe=l(),by=a("p"),AKe=o("This class cannot be instantiated directly using "),Ose=a("code"),LKe=o("__init__()"),yKe=o(" (throws an error)."),xKe=l(),kr=a("div"),F(vy.$$.fragment),$Ke=l(),Vse=a("p"),kKe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),SKe=l(),Yi=a("p"),RKe=o("The configuration class to instantiate is selected based on the "),Xse=a("code"),PKe=o("model_type"),BKe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zse=a("code"),IKe=o("pretrained_model_name_or_path"),NKe=o(":"),qKe=l(),A=a("ul"),lm=a("li"),Wse=a("strong"),jKe=o("albert"),DKe=o(" \u2014 "),cP=a("a"),GKe=o("AlbertConfig"),OKe=o(" (ALBERT model)"),VKe=l(),im=a("li"),Qse=a("strong"),XKe=o("bart"),zKe=o(" \u2014 "),fP=a("a"),WKe=o("BartConfig"),QKe=o(" (BART model)"),UKe=l(),dm=a("li"),Use=a("strong"),HKe=o("beit"),JKe=o(" \u2014 "),mP=a("a"),YKe=o("BeitConfig"),KKe=o(" (BEiT model)"),ZKe=l(),cm=a("li"),Hse=a("strong"),eZe=o("bert"),oZe=o(" \u2014 "),gP=a("a"),rZe=o("BertConfig"),tZe=o(" (BERT model)"),aZe=l(),fm=a("li"),Jse=a("strong"),nZe=o("bert-generation"),sZe=o(" \u2014 "),hP=a("a"),lZe=o("BertGenerationConfig"),iZe=o(" (Bert Generation model)"),dZe=l(),mm=a("li"),Yse=a("strong"),cZe=o("big_bird"),fZe=o(" \u2014 "),pP=a("a"),mZe=o("BigBirdConfig"),gZe=o(" (BigBird model)"),hZe=l(),gm=a("li"),Kse=a("strong"),pZe=o("bigbird_pegasus"),_Ze=o(" \u2014 "),_P=a("a"),uZe=o("BigBirdPegasusConfig"),bZe=o(" (BigBird-Pegasus model)"),vZe=l(),hm=a("li"),Zse=a("strong"),FZe=o("blenderbot"),TZe=o(" \u2014 "),uP=a("a"),MZe=o("BlenderbotConfig"),EZe=o(" (Blenderbot model)"),CZe=l(),pm=a("li"),ele=a("strong"),wZe=o("blenderbot-small"),AZe=o(" \u2014 "),bP=a("a"),LZe=o("BlenderbotSmallConfig"),yZe=o(" (BlenderbotSmall model)"),xZe=l(),_m=a("li"),ole=a("strong"),$Ze=o("bloom"),kZe=o(" \u2014 "),vP=a("a"),SZe=o("BloomConfig"),RZe=o(" (BLOOM model)"),PZe=l(),um=a("li"),rle=a("strong"),BZe=o("camembert"),IZe=o(" \u2014 "),FP=a("a"),NZe=o("CamembertConfig"),qZe=o(" (CamemBERT model)"),jZe=l(),bm=a("li"),tle=a("strong"),DZe=o("canine"),GZe=o(" \u2014 "),TP=a("a"),OZe=o("CanineConfig"),VZe=o(" (CANINE model)"),XZe=l(),vm=a("li"),ale=a("strong"),zZe=o("clip"),WZe=o(" \u2014 "),MP=a("a"),QZe=o("CLIPConfig"),UZe=o(" (CLIP model)"),HZe=l(),Fm=a("li"),nle=a("strong"),JZe=o("codegen"),YZe=o(" \u2014 "),EP=a("a"),KZe=o("CodeGenConfig"),ZZe=o(" (CodeGen model)"),eeo=l(),Tm=a("li"),sle=a("strong"),oeo=o("convbert"),reo=o(" \u2014 "),CP=a("a"),teo=o("ConvBertConfig"),aeo=o(" (ConvBERT model)"),neo=l(),Mm=a("li"),lle=a("strong"),seo=o("convnext"),leo=o(" \u2014 "),wP=a("a"),ieo=o("ConvNextConfig"),deo=o(" (ConvNeXT model)"),ceo=l(),Em=a("li"),ile=a("strong"),feo=o("ctrl"),meo=o(" \u2014 "),AP=a("a"),geo=o("CTRLConfig"),heo=o(" (CTRL model)"),peo=l(),Cm=a("li"),dle=a("strong"),_eo=o("cvt"),ueo=o(" \u2014 "),LP=a("a"),beo=o("CvtConfig"),veo=o(" (CvT model)"),Feo=l(),wm=a("li"),cle=a("strong"),Teo=o("data2vec-audio"),Meo=o(" \u2014 "),yP=a("a"),Eeo=o("Data2VecAudioConfig"),Ceo=o(" (Data2VecAudio model)"),weo=l(),Am=a("li"),fle=a("strong"),Aeo=o("data2vec-text"),Leo=o(" \u2014 "),xP=a("a"),yeo=o("Data2VecTextConfig"),xeo=o(" (Data2VecText model)"),$eo=l(),Lm=a("li"),mle=a("strong"),keo=o("data2vec-vision"),Seo=o(" \u2014 "),$P=a("a"),Reo=o("Data2VecVisionConfig"),Peo=o(" (Data2VecVision model)"),Beo=l(),ym=a("li"),gle=a("strong"),Ieo=o("deberta"),Neo=o(" \u2014 "),kP=a("a"),qeo=o("DebertaConfig"),jeo=o(" (DeBERTa model)"),Deo=l(),xm=a("li"),hle=a("strong"),Geo=o("deberta-v2"),Oeo=o(" \u2014 "),SP=a("a"),Veo=o("DebertaV2Config"),Xeo=o(" (DeBERTa-v2 model)"),zeo=l(),$m=a("li"),ple=a("strong"),Weo=o("decision_transformer"),Qeo=o(" \u2014 "),RP=a("a"),Ueo=o("DecisionTransformerConfig"),Heo=o(" (Decision Transformer model)"),Jeo=l(),km=a("li"),_le=a("strong"),Yeo=o("deit"),Keo=o(" \u2014 "),PP=a("a"),Zeo=o("DeiTConfig"),eoo=o(" (DeiT model)"),ooo=l(),Sm=a("li"),ule=a("strong"),roo=o("detr"),too=o(" \u2014 "),BP=a("a"),aoo=o("DetrConfig"),noo=o(" (DETR model)"),soo=l(),Rm=a("li"),ble=a("strong"),loo=o("distilbert"),ioo=o(" \u2014 "),IP=a("a"),doo=o("DistilBertConfig"),coo=o(" (DistilBERT model)"),foo=l(),Pm=a("li"),vle=a("strong"),moo=o("donut-swin"),goo=o(" \u2014 "),NP=a("a"),hoo=o("DonutSwinConfig"),poo=o(" (DonutSwin model)"),_oo=l(),Bm=a("li"),Fle=a("strong"),uoo=o("dpr"),boo=o(" \u2014 "),qP=a("a"),voo=o("DPRConfig"),Foo=o(" (DPR model)"),Too=l(),Im=a("li"),Tle=a("strong"),Moo=o("dpt"),Eoo=o(" \u2014 "),jP=a("a"),Coo=o("DPTConfig"),woo=o(" (DPT model)"),Aoo=l(),Nm=a("li"),Mle=a("strong"),Loo=o("electra"),yoo=o(" \u2014 "),DP=a("a"),xoo=o("ElectraConfig"),$oo=o(" (ELECTRA model)"),koo=l(),qm=a("li"),Ele=a("strong"),Soo=o("encoder-decoder"),Roo=o(" \u2014 "),GP=a("a"),Poo=o("EncoderDecoderConfig"),Boo=o(" (Encoder decoder model)"),Ioo=l(),jm=a("li"),Cle=a("strong"),Noo=o("flaubert"),qoo=o(" \u2014 "),OP=a("a"),joo=o("FlaubertConfig"),Doo=o(" (FlauBERT model)"),Goo=l(),Dm=a("li"),wle=a("strong"),Ooo=o("flava"),Voo=o(" \u2014 "),VP=a("a"),Xoo=o("FlavaConfig"),zoo=o(" (FLAVA model)"),Woo=l(),Gm=a("li"),Ale=a("strong"),Qoo=o("fnet"),Uoo=o(" \u2014 "),XP=a("a"),Hoo=o("FNetConfig"),Joo=o(" (FNet model)"),Yoo=l(),Om=a("li"),Lle=a("strong"),Koo=o("fsmt"),Zoo=o(" \u2014 "),zP=a("a"),ero=o("FSMTConfig"),oro=o(" (FairSeq Machine-Translation model)"),rro=l(),Vm=a("li"),yle=a("strong"),tro=o("funnel"),aro=o(" \u2014 "),WP=a("a"),nro=o("FunnelConfig"),sro=o(" (Funnel Transformer model)"),lro=l(),Xm=a("li"),xle=a("strong"),iro=o("glpn"),dro=o(" \u2014 "),QP=a("a"),cro=o("GLPNConfig"),fro=o(" (GLPN model)"),mro=l(),zm=a("li"),$le=a("strong"),gro=o("gpt2"),hro=o(" \u2014 "),UP=a("a"),pro=o("GPT2Config"),_ro=o(" (OpenAI GPT-2 model)"),uro=l(),Wm=a("li"),kle=a("strong"),bro=o("gpt_neo"),vro=o(" \u2014 "),HP=a("a"),Fro=o("GPTNeoConfig"),Tro=o(" (GPT Neo model)"),Mro=l(),Qm=a("li"),Sle=a("strong"),Ero=o("gpt_neox"),Cro=o(" \u2014 "),JP=a("a"),wro=o("GPTNeoXConfig"),Aro=o(" (GPT NeoX model)"),Lro=l(),Um=a("li"),Rle=a("strong"),yro=o("gptj"),xro=o(" \u2014 "),YP=a("a"),$ro=o("GPTJConfig"),kro=o(" (GPT-J model)"),Sro=l(),Hm=a("li"),Ple=a("strong"),Rro=o("groupvit"),Pro=o(" \u2014 "),KP=a("a"),Bro=o("GroupViTConfig"),Iro=o(" (GroupViT model)"),Nro=l(),Jm=a("li"),Ble=a("strong"),qro=o("hubert"),jro=o(" \u2014 "),ZP=a("a"),Dro=o("HubertConfig"),Gro=o(" (Hubert model)"),Oro=l(),Ym=a("li"),Ile=a("strong"),Vro=o("ibert"),Xro=o(" \u2014 "),eB=a("a"),zro=o("IBertConfig"),Wro=o(" (I-BERT model)"),Qro=l(),Km=a("li"),Nle=a("strong"),Uro=o("imagegpt"),Hro=o(" \u2014 "),oB=a("a"),Jro=o("ImageGPTConfig"),Yro=o(" (ImageGPT model)"),Kro=l(),Zm=a("li"),qle=a("strong"),Zro=o("layoutlm"),eto=o(" \u2014 "),rB=a("a"),oto=o("LayoutLMConfig"),rto=o(" (LayoutLM model)"),tto=l(),eg=a("li"),jle=a("strong"),ato=o("layoutlmv2"),nto=o(" \u2014 "),tB=a("a"),sto=o("LayoutLMv2Config"),lto=o(" (LayoutLMv2 model)"),ito=l(),og=a("li"),Dle=a("strong"),dto=o("layoutlmv3"),cto=o(" \u2014 "),aB=a("a"),fto=o("LayoutLMv3Config"),mto=o(" (LayoutLMv3 model)"),gto=l(),rg=a("li"),Gle=a("strong"),hto=o("led"),pto=o(" \u2014 "),nB=a("a"),_to=o("LEDConfig"),uto=o(" (LED model)"),bto=l(),tg=a("li"),Ole=a("strong"),vto=o("levit"),Fto=o(" \u2014 "),sB=a("a"),Tto=o("LevitConfig"),Mto=o(" (LeViT model)"),Eto=l(),ag=a("li"),Vle=a("strong"),Cto=o("longformer"),wto=o(" \u2014 "),lB=a("a"),Ato=o("LongformerConfig"),Lto=o(" (Longformer model)"),yto=l(),ng=a("li"),Xle=a("strong"),xto=o("longt5"),$to=o(" \u2014 "),iB=a("a"),kto=o("LongT5Config"),Sto=o(" (LongT5 model)"),Rto=l(),sg=a("li"),zle=a("strong"),Pto=o("luke"),Bto=o(" \u2014 "),dB=a("a"),Ito=o("LukeConfig"),Nto=o(" (LUKE model)"),qto=l(),lg=a("li"),Wle=a("strong"),jto=o("lxmert"),Dto=o(" \u2014 "),cB=a("a"),Gto=o("LxmertConfig"),Oto=o(" (LXMERT model)"),Vto=l(),ig=a("li"),Qle=a("strong"),Xto=o("m2m_100"),zto=o(" \u2014 "),fB=a("a"),Wto=o("M2M100Config"),Qto=o(" (M2M100 model)"),Uto=l(),dg=a("li"),Ule=a("strong"),Hto=o("marian"),Jto=o(" \u2014 "),mB=a("a"),Yto=o("MarianConfig"),Kto=o(" (Marian model)"),Zto=l(),cg=a("li"),Hle=a("strong"),eao=o("maskformer"),oao=o(" \u2014 "),gB=a("a"),rao=o("MaskFormerConfig"),tao=o(" (MaskFormer model)"),aao=l(),fg=a("li"),Jle=a("strong"),nao=o("mbart"),sao=o(" \u2014 "),hB=a("a"),lao=o("MBartConfig"),iao=o(" (mBART model)"),dao=l(),mg=a("li"),Yle=a("strong"),cao=o("mctct"),fao=o(" \u2014 "),pB=a("a"),mao=o("MCTCTConfig"),gao=o(" (M-CTC-T model)"),hao=l(),gg=a("li"),Kle=a("strong"),pao=o("megatron-bert"),_ao=o(" \u2014 "),_B=a("a"),uao=o("MegatronBertConfig"),bao=o(" (Megatron-BERT model)"),vao=l(),hg=a("li"),Zle=a("strong"),Fao=o("mobilebert"),Tao=o(" \u2014 "),uB=a("a"),Mao=o("MobileBertConfig"),Eao=o(" (MobileBERT model)"),Cao=l(),pg=a("li"),eie=a("strong"),wao=o("mobilevit"),Aao=o(" \u2014 "),bB=a("a"),Lao=o("MobileViTConfig"),yao=o(" (MobileViT model)"),xao=l(),_g=a("li"),oie=a("strong"),$ao=o("mpnet"),kao=o(" \u2014 "),vB=a("a"),Sao=o("MPNetConfig"),Rao=o(" (MPNet model)"),Pao=l(),ug=a("li"),rie=a("strong"),Bao=o("mt5"),Iao=o(" \u2014 "),FB=a("a"),Nao=o("MT5Config"),qao=o(" (MT5 model)"),jao=l(),bg=a("li"),tie=a("strong"),Dao=o("mvp"),Gao=o(" \u2014 "),TB=a("a"),Oao=o("MvpConfig"),Vao=o(" (MVP model)"),Xao=l(),vg=a("li"),aie=a("strong"),zao=o("nezha"),Wao=o(" \u2014 "),MB=a("a"),Qao=o("NezhaConfig"),Uao=o(" (Nezha model)"),Hao=l(),Fg=a("li"),nie=a("strong"),Jao=o("nystromformer"),Yao=o(" \u2014 "),EB=a("a"),Kao=o("NystromformerConfig"),Zao=o(" (Nystr\xF6mformer model)"),eno=l(),Tg=a("li"),sie=a("strong"),ono=o("openai-gpt"),rno=o(" \u2014 "),CB=a("a"),tno=o("OpenAIGPTConfig"),ano=o(" (OpenAI GPT model)"),nno=l(),Mg=a("li"),lie=a("strong"),sno=o("opt"),lno=o(" \u2014 "),wB=a("a"),ino=o("OPTConfig"),dno=o(" (OPT model)"),cno=l(),Eg=a("li"),iie=a("strong"),fno=o("owlvit"),mno=o(" \u2014 "),AB=a("a"),gno=o("OwlViTConfig"),hno=o(" (OWL-ViT model)"),pno=l(),Cg=a("li"),die=a("strong"),_no=o("pegasus"),uno=o(" \u2014 "),LB=a("a"),bno=o("PegasusConfig"),vno=o(" (Pegasus model)"),Fno=l(),wg=a("li"),cie=a("strong"),Tno=o("perceiver"),Mno=o(" \u2014 "),yB=a("a"),Eno=o("PerceiverConfig"),Cno=o(" (Perceiver model)"),wno=l(),Ag=a("li"),fie=a("strong"),Ano=o("plbart"),Lno=o(" \u2014 "),xB=a("a"),yno=o("PLBartConfig"),xno=o(" (PLBart model)"),$no=l(),Lg=a("li"),mie=a("strong"),kno=o("poolformer"),Sno=o(" \u2014 "),$B=a("a"),Rno=o("PoolFormerConfig"),Pno=o(" (PoolFormer model)"),Bno=l(),yg=a("li"),gie=a("strong"),Ino=o("prophetnet"),Nno=o(" \u2014 "),kB=a("a"),qno=o("ProphetNetConfig"),jno=o(" (ProphetNet model)"),Dno=l(),xg=a("li"),hie=a("strong"),Gno=o("qdqbert"),Ono=o(" \u2014 "),SB=a("a"),Vno=o("QDQBertConfig"),Xno=o(" (QDQBert model)"),zno=l(),$g=a("li"),pie=a("strong"),Wno=o("rag"),Qno=o(" \u2014 "),RB=a("a"),Uno=o("RagConfig"),Hno=o(" (RAG model)"),Jno=l(),kg=a("li"),_ie=a("strong"),Yno=o("realm"),Kno=o(" \u2014 "),PB=a("a"),Zno=o("RealmConfig"),eso=o(" (REALM model)"),oso=l(),Sg=a("li"),uie=a("strong"),rso=o("reformer"),tso=o(" \u2014 "),BB=a("a"),aso=o("ReformerConfig"),nso=o(" (Reformer model)"),sso=l(),Rg=a("li"),bie=a("strong"),lso=o("regnet"),iso=o(" \u2014 "),IB=a("a"),dso=o("RegNetConfig"),cso=o(" (RegNet model)"),fso=l(),Pg=a("li"),vie=a("strong"),mso=o("rembert"),gso=o(" \u2014 "),NB=a("a"),hso=o("RemBertConfig"),pso=o(" (RemBERT model)"),_so=l(),Bg=a("li"),Fie=a("strong"),uso=o("resnet"),bso=o(" \u2014 "),qB=a("a"),vso=o("ResNetConfig"),Fso=o(" (ResNet model)"),Tso=l(),Ig=a("li"),Tie=a("strong"),Mso=o("retribert"),Eso=o(" \u2014 "),jB=a("a"),Cso=o("RetriBertConfig"),wso=o(" (RetriBERT model)"),Aso=l(),Ng=a("li"),Mie=a("strong"),Lso=o("roberta"),yso=o(" \u2014 "),DB=a("a"),xso=o("RobertaConfig"),$so=o(" (RoBERTa model)"),kso=l(),qg=a("li"),Eie=a("strong"),Sso=o("roformer"),Rso=o(" \u2014 "),GB=a("a"),Pso=o("RoFormerConfig"),Bso=o(" (RoFormer model)"),Iso=l(),jg=a("li"),Cie=a("strong"),Nso=o("segformer"),qso=o(" \u2014 "),OB=a("a"),jso=o("SegformerConfig"),Dso=o(" (SegFormer model)"),Gso=l(),Dg=a("li"),wie=a("strong"),Oso=o("sew"),Vso=o(" \u2014 "),VB=a("a"),Xso=o("SEWConfig"),zso=o(" (SEW model)"),Wso=l(),Gg=a("li"),Aie=a("strong"),Qso=o("sew-d"),Uso=o(" \u2014 "),XB=a("a"),Hso=o("SEWDConfig"),Jso=o(" (SEW-D model)"),Yso=l(),Og=a("li"),Lie=a("strong"),Kso=o("speech-encoder-decoder"),Zso=o(" \u2014 "),zB=a("a"),elo=o("SpeechEncoderDecoderConfig"),olo=o(" (Speech Encoder decoder model)"),rlo=l(),Vg=a("li"),yie=a("strong"),tlo=o("speech_to_text"),alo=o(" \u2014 "),WB=a("a"),nlo=o("Speech2TextConfig"),slo=o(" (Speech2Text model)"),llo=l(),Xg=a("li"),xie=a("strong"),ilo=o("speech_to_text_2"),dlo=o(" \u2014 "),QB=a("a"),clo=o("Speech2Text2Config"),flo=o(" (Speech2Text2 model)"),mlo=l(),zg=a("li"),$ie=a("strong"),glo=o("splinter"),hlo=o(" \u2014 "),UB=a("a"),plo=o("SplinterConfig"),_lo=o(" (Splinter model)"),ulo=l(),Wg=a("li"),kie=a("strong"),blo=o("squeezebert"),vlo=o(" \u2014 "),HB=a("a"),Flo=o("SqueezeBertConfig"),Tlo=o(" (SqueezeBERT model)"),Mlo=l(),Qg=a("li"),Sie=a("strong"),Elo=o("swin"),Clo=o(" \u2014 "),JB=a("a"),wlo=o("SwinConfig"),Alo=o(" (Swin Transformer model)"),Llo=l(),Ug=a("li"),Rie=a("strong"),ylo=o("swinv2"),xlo=o(" \u2014 "),YB=a("a"),$lo=o("Swinv2Config"),klo=o(" (Swin Transformer V2 model)"),Slo=l(),Hg=a("li"),Pie=a("strong"),Rlo=o("t5"),Plo=o(" \u2014 "),KB=a("a"),Blo=o("T5Config"),Ilo=o(" (T5 model)"),Nlo=l(),Jg=a("li"),Bie=a("strong"),qlo=o("tapas"),jlo=o(" \u2014 "),ZB=a("a"),Dlo=o("TapasConfig"),Glo=o(" (TAPAS model)"),Olo=l(),Yg=a("li"),Iie=a("strong"),Vlo=o("trajectory_transformer"),Xlo=o(" \u2014 "),eI=a("a"),zlo=o("TrajectoryTransformerConfig"),Wlo=o(" (Trajectory Transformer model)"),Qlo=l(),Kg=a("li"),Nie=a("strong"),Ulo=o("transfo-xl"),Hlo=o(" \u2014 "),oI=a("a"),Jlo=o("TransfoXLConfig"),Ylo=o(" (Transformer-XL model)"),Klo=l(),Zg=a("li"),qie=a("strong"),Zlo=o("trocr"),eio=o(" \u2014 "),rI=a("a"),oio=o("TrOCRConfig"),rio=o(" (TrOCR model)"),tio=l(),eh=a("li"),jie=a("strong"),aio=o("unispeech"),nio=o(" \u2014 "),tI=a("a"),sio=o("UniSpeechConfig"),lio=o(" (UniSpeech model)"),iio=l(),oh=a("li"),Die=a("strong"),dio=o("unispeech-sat"),cio=o(" \u2014 "),aI=a("a"),fio=o("UniSpeechSatConfig"),mio=o(" (UniSpeechSat model)"),gio=l(),rh=a("li"),Gie=a("strong"),hio=o("van"),pio=o(" \u2014 "),nI=a("a"),_io=o("VanConfig"),uio=o(" (VAN model)"),bio=l(),th=a("li"),Oie=a("strong"),vio=o("videomae"),Fio=o(" \u2014 "),sI=a("a"),Tio=o("VideoMAEConfig"),Mio=o(" (VideoMAE model)"),Eio=l(),ah=a("li"),Vie=a("strong"),Cio=o("vilt"),wio=o(" \u2014 "),lI=a("a"),Aio=o("ViltConfig"),Lio=o(" (ViLT model)"),yio=l(),nh=a("li"),Xie=a("strong"),xio=o("vision-encoder-decoder"),$io=o(" \u2014 "),iI=a("a"),kio=o("VisionEncoderDecoderConfig"),Sio=o(" (Vision Encoder decoder model)"),Rio=l(),sh=a("li"),zie=a("strong"),Pio=o("vision-text-dual-encoder"),Bio=o(" \u2014 "),dI=a("a"),Iio=o("VisionTextDualEncoderConfig"),Nio=o(" (VisionTextDualEncoder model)"),qio=l(),lh=a("li"),Wie=a("strong"),jio=o("visual_bert"),Dio=o(" \u2014 "),cI=a("a"),Gio=o("VisualBertConfig"),Oio=o(" (VisualBERT model)"),Vio=l(),ih=a("li"),Qie=a("strong"),Xio=o("vit"),zio=o(" \u2014 "),fI=a("a"),Wio=o("ViTConfig"),Qio=o(" (ViT model)"),Uio=l(),dh=a("li"),Uie=a("strong"),Hio=o("vit_mae"),Jio=o(" \u2014 "),mI=a("a"),Yio=o("ViTMAEConfig"),Kio=o(" (ViTMAE model)"),Zio=l(),ch=a("li"),Hie=a("strong"),edo=o("wav2vec2"),odo=o(" \u2014 "),gI=a("a"),rdo=o("Wav2Vec2Config"),tdo=o(" (Wav2Vec2 model)"),ado=l(),fh=a("li"),Jie=a("strong"),ndo=o("wav2vec2-conformer"),sdo=o(" \u2014 "),hI=a("a"),ldo=o("Wav2Vec2ConformerConfig"),ido=o(" (Wav2Vec2-Conformer model)"),ddo=l(),mh=a("li"),Yie=a("strong"),cdo=o("wavlm"),fdo=o(" \u2014 "),pI=a("a"),mdo=o("WavLMConfig"),gdo=o(" (WavLM model)"),hdo=l(),gh=a("li"),Kie=a("strong"),pdo=o("xglm"),_do=o(" \u2014 "),_I=a("a"),udo=o("XGLMConfig"),bdo=o(" (XGLM model)"),vdo=l(),hh=a("li"),Zie=a("strong"),Fdo=o("xlm"),Tdo=o(" \u2014 "),uI=a("a"),Mdo=o("XLMConfig"),Edo=o(" (XLM model)"),Cdo=l(),ph=a("li"),ede=a("strong"),wdo=o("xlm-prophetnet"),Ado=o(" \u2014 "),bI=a("a"),Ldo=o("XLMProphetNetConfig"),ydo=o(" (XLM-ProphetNet model)"),xdo=l(),_h=a("li"),ode=a("strong"),$do=o("xlm-roberta"),kdo=o(" \u2014 "),vI=a("a"),Sdo=o("XLMRobertaConfig"),Rdo=o(" (XLM-RoBERTa model)"),Pdo=l(),uh=a("li"),rde=a("strong"),Bdo=o("xlm-roberta-xl"),Ido=o(" \u2014 "),FI=a("a"),Ndo=o("XLMRobertaXLConfig"),qdo=o(" (XLM-RoBERTa-XL model)"),jdo=l(),bh=a("li"),tde=a("strong"),Ddo=o("xlnet"),Gdo=o(" \u2014 "),TI=a("a"),Odo=o("XLNetConfig"),Vdo=o(" (XLNet model)"),Xdo=l(),vh=a("li"),ade=a("strong"),zdo=o("yolos"),Wdo=o(" \u2014 "),MI=a("a"),Qdo=o("YolosConfig"),Udo=o(" (YOLOS model)"),Hdo=l(),Fh=a("li"),nde=a("strong"),Jdo=o("yoso"),Ydo=o(" \u2014 "),EI=a("a"),Kdo=o("YosoConfig"),Zdo=o(" (YOSO model)"),eco=l(),F(Th.$$.fragment),oco=l(),Mh=a("div"),F(Fy.$$.fragment),rco=l(),sde=a("p"),tco=o("Register a new configuration for this class."),QQe=l(),Ki=a("h2"),Eh=a("a"),lde=a("span"),F(Ty.$$.fragment),aco=l(),ide=a("span"),nco=o("AutoTokenizer"),UQe=l(),xo=a("div"),F(My.$$.fragment),sco=l(),Ey=a("p"),lco=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),CI=a("a"),ico=o("AutoTokenizer.from_pretrained()"),dco=o(" class method."),cco=l(),Cy=a("p"),fco=o("This class cannot be instantiated directly using "),dde=a("code"),mco=o("__init__()"),gco=o(" (throws an error)."),hco=l(),Sr=a("div"),F(wy.$$.fragment),pco=l(),cde=a("p"),_co=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),uco=l(),Ga=a("p"),bco=o("The tokenizer class to instantiate is selected based on the "),fde=a("code"),vco=o("model_type"),Fco=o(` property of the config object (either
passed as an argument or loaded from `),mde=a("code"),Tco=o("pretrained_model_name_or_path"),Mco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gde=a("code"),Eco=o("pretrained_model_name_or_path"),Cco=o(":"),wco=l(),k=a("ul"),Hn=a("li"),hde=a("strong"),Aco=o("albert"),Lco=o(" \u2014 "),wI=a("a"),yco=o("AlbertTokenizer"),xco=o(" or "),AI=a("a"),$co=o("AlbertTokenizerFast"),kco=o(" (ALBERT model)"),Sco=l(),Jn=a("li"),pde=a("strong"),Rco=o("bart"),Pco=o(" \u2014 "),LI=a("a"),Bco=o("BartTokenizer"),Ico=o(" or "),yI=a("a"),Nco=o("BartTokenizerFast"),qco=o(" (BART model)"),jco=l(),Yn=a("li"),_de=a("strong"),Dco=o("barthez"),Gco=o(" \u2014 "),xI=a("a"),Oco=o("BarthezTokenizer"),Vco=o(" or "),$I=a("a"),Xco=o("BarthezTokenizerFast"),zco=o(" (BARThez model)"),Wco=l(),Ch=a("li"),ude=a("strong"),Qco=o("bartpho"),Uco=o(" \u2014 "),kI=a("a"),Hco=o("BartphoTokenizer"),Jco=o(" (BARTpho model)"),Yco=l(),Kn=a("li"),bde=a("strong"),Kco=o("bert"),Zco=o(" \u2014 "),SI=a("a"),efo=o("BertTokenizer"),ofo=o(" or "),RI=a("a"),rfo=o("BertTokenizerFast"),tfo=o(" (BERT model)"),afo=l(),wh=a("li"),vde=a("strong"),nfo=o("bert-generation"),sfo=o(" \u2014 "),PI=a("a"),lfo=o("BertGenerationTokenizer"),ifo=o(" (Bert Generation model)"),dfo=l(),Ah=a("li"),Fde=a("strong"),cfo=o("bert-japanese"),ffo=o(" \u2014 "),BI=a("a"),mfo=o("BertJapaneseTokenizer"),gfo=o(" (BertJapanese model)"),hfo=l(),Lh=a("li"),Tde=a("strong"),pfo=o("bertweet"),_fo=o(" \u2014 "),II=a("a"),ufo=o("BertweetTokenizer"),bfo=o(" (BERTweet model)"),vfo=l(),Zn=a("li"),Mde=a("strong"),Ffo=o("big_bird"),Tfo=o(" \u2014 "),NI=a("a"),Mfo=o("BigBirdTokenizer"),Efo=o(" or "),qI=a("a"),Cfo=o("BigBirdTokenizerFast"),wfo=o(" (BigBird model)"),Afo=l(),es=a("li"),Ede=a("strong"),Lfo=o("bigbird_pegasus"),yfo=o(" \u2014 "),jI=a("a"),xfo=o("PegasusTokenizer"),$fo=o(" or "),DI=a("a"),kfo=o("PegasusTokenizerFast"),Sfo=o(" (BigBird-Pegasus model)"),Rfo=l(),os=a("li"),Cde=a("strong"),Pfo=o("blenderbot"),Bfo=o(" \u2014 "),GI=a("a"),Ifo=o("BlenderbotTokenizer"),Nfo=o(" or "),OI=a("a"),qfo=o("BlenderbotTokenizerFast"),jfo=o(" (Blenderbot model)"),Dfo=l(),yh=a("li"),wde=a("strong"),Gfo=o("blenderbot-small"),Ofo=o(" \u2014 "),VI=a("a"),Vfo=o("BlenderbotSmallTokenizer"),Xfo=o(" (BlenderbotSmall model)"),zfo=l(),xh=a("li"),Ade=a("strong"),Wfo=o("bloom"),Qfo=o(" \u2014 "),XI=a("a"),Ufo=o("BloomTokenizerFast"),Hfo=o(" (BLOOM model)"),Jfo=l(),$h=a("li"),Lde=a("strong"),Yfo=o("byt5"),Kfo=o(" \u2014 "),zI=a("a"),Zfo=o("ByT5Tokenizer"),emo=o(" (ByT5 model)"),omo=l(),rs=a("li"),yde=a("strong"),rmo=o("camembert"),tmo=o(" \u2014 "),WI=a("a"),amo=o("CamembertTokenizer"),nmo=o(" or "),QI=a("a"),smo=o("CamembertTokenizerFast"),lmo=o(" (CamemBERT model)"),imo=l(),kh=a("li"),xde=a("strong"),dmo=o("canine"),cmo=o(" \u2014 "),UI=a("a"),fmo=o("CanineTokenizer"),mmo=o(" (CANINE model)"),gmo=l(),ts=a("li"),$de=a("strong"),hmo=o("clip"),pmo=o(" \u2014 "),HI=a("a"),_mo=o("CLIPTokenizer"),umo=o(" or "),JI=a("a"),bmo=o("CLIPTokenizerFast"),vmo=o(" (CLIP model)"),Fmo=l(),as=a("li"),kde=a("strong"),Tmo=o("codegen"),Mmo=o(" \u2014 "),YI=a("a"),Emo=o("CodeGenTokenizer"),Cmo=o(" or "),KI=a("a"),wmo=o("CodeGenTokenizerFast"),Amo=o(" (CodeGen model)"),Lmo=l(),ns=a("li"),Sde=a("strong"),ymo=o("convbert"),xmo=o(" \u2014 "),ZI=a("a"),$mo=o("ConvBertTokenizer"),kmo=o(" or "),eN=a("a"),Smo=o("ConvBertTokenizerFast"),Rmo=o(" (ConvBERT model)"),Pmo=l(),ss=a("li"),Rde=a("strong"),Bmo=o("cpm"),Imo=o(" \u2014 "),oN=a("a"),Nmo=o("CpmTokenizer"),qmo=o(" or "),rN=a("a"),jmo=o("CpmTokenizerFast"),Dmo=o(" (CPM model)"),Gmo=l(),Sh=a("li"),Pde=a("strong"),Omo=o("ctrl"),Vmo=o(" \u2014 "),tN=a("a"),Xmo=o("CTRLTokenizer"),zmo=o(" (CTRL model)"),Wmo=l(),ls=a("li"),Bde=a("strong"),Qmo=o("data2vec-text"),Umo=o(" \u2014 "),aN=a("a"),Hmo=o("RobertaTokenizer"),Jmo=o(" or "),nN=a("a"),Ymo=o("RobertaTokenizerFast"),Kmo=o(" (Data2VecText model)"),Zmo=l(),is=a("li"),Ide=a("strong"),ego=o("deberta"),ogo=o(" \u2014 "),sN=a("a"),rgo=o("DebertaTokenizer"),tgo=o(" or "),lN=a("a"),ago=o("DebertaTokenizerFast"),ngo=o(" (DeBERTa model)"),sgo=l(),ds=a("li"),Nde=a("strong"),lgo=o("deberta-v2"),igo=o(" \u2014 "),iN=a("a"),dgo=o("DebertaV2Tokenizer"),cgo=o(" or "),dN=a("a"),fgo=o("DebertaV2TokenizerFast"),mgo=o(" (DeBERTa-v2 model)"),ggo=l(),cs=a("li"),qde=a("strong"),hgo=o("distilbert"),pgo=o(" \u2014 "),cN=a("a"),_go=o("DistilBertTokenizer"),ugo=o(" or "),fN=a("a"),bgo=o("DistilBertTokenizerFast"),vgo=o(" (DistilBERT model)"),Fgo=l(),fs=a("li"),jde=a("strong"),Tgo=o("dpr"),Mgo=o(" \u2014 "),mN=a("a"),Ego=o("DPRQuestionEncoderTokenizer"),Cgo=o(" or "),gN=a("a"),wgo=o("DPRQuestionEncoderTokenizerFast"),Ago=o(" (DPR model)"),Lgo=l(),ms=a("li"),Dde=a("strong"),ygo=o("electra"),xgo=o(" \u2014 "),hN=a("a"),$go=o("ElectraTokenizer"),kgo=o(" or "),pN=a("a"),Sgo=o("ElectraTokenizerFast"),Rgo=o(" (ELECTRA model)"),Pgo=l(),Rh=a("li"),Gde=a("strong"),Bgo=o("flaubert"),Igo=o(" \u2014 "),_N=a("a"),Ngo=o("FlaubertTokenizer"),qgo=o(" (FlauBERT model)"),jgo=l(),gs=a("li"),Ode=a("strong"),Dgo=o("fnet"),Ggo=o(" \u2014 "),uN=a("a"),Ogo=o("FNetTokenizer"),Vgo=o(" or "),bN=a("a"),Xgo=o("FNetTokenizerFast"),zgo=o(" (FNet model)"),Wgo=l(),Ph=a("li"),Vde=a("strong"),Qgo=o("fsmt"),Ugo=o(" \u2014 "),vN=a("a"),Hgo=o("FSMTTokenizer"),Jgo=o(" (FairSeq Machine-Translation model)"),Ygo=l(),hs=a("li"),Xde=a("strong"),Kgo=o("funnel"),Zgo=o(" \u2014 "),FN=a("a"),eho=o("FunnelTokenizer"),oho=o(" or "),TN=a("a"),rho=o("FunnelTokenizerFast"),tho=o(" (Funnel Transformer model)"),aho=l(),ps=a("li"),zde=a("strong"),nho=o("gpt2"),sho=o(" \u2014 "),MN=a("a"),lho=o("GPT2Tokenizer"),iho=o(" or "),EN=a("a"),dho=o("GPT2TokenizerFast"),cho=o(" (OpenAI GPT-2 model)"),fho=l(),_s=a("li"),Wde=a("strong"),mho=o("gpt_neo"),gho=o(" \u2014 "),CN=a("a"),hho=o("GPT2Tokenizer"),pho=o(" or "),wN=a("a"),_ho=o("GPT2TokenizerFast"),uho=o(" (GPT Neo model)"),bho=l(),Bh=a("li"),Qde=a("strong"),vho=o("gpt_neox"),Fho=o(" \u2014 "),AN=a("a"),Tho=o("GPTNeoXTokenizerFast"),Mho=o(" (GPT NeoX model)"),Eho=l(),us=a("li"),Ude=a("strong"),Cho=o("gptj"),who=o(" \u2014 "),LN=a("a"),Aho=o("GPT2Tokenizer"),Lho=o(" or "),yN=a("a"),yho=o("GPT2TokenizerFast"),xho=o(" (GPT-J model)"),$ho=l(),bs=a("li"),Hde=a("strong"),kho=o("groupvit"),Sho=o(" \u2014 "),xN=a("a"),Rho=o("CLIPTokenizer"),Pho=o(" or "),$N=a("a"),Bho=o("CLIPTokenizerFast"),Iho=o(" (GroupViT model)"),Nho=l(),vs=a("li"),Jde=a("strong"),qho=o("herbert"),jho=o(" \u2014 "),kN=a("a"),Dho=o("HerbertTokenizer"),Gho=o(" or "),SN=a("a"),Oho=o("HerbertTokenizerFast"),Vho=o(" (HerBERT model)"),Xho=l(),Ih=a("li"),Yde=a("strong"),zho=o("hubert"),Who=o(" \u2014 "),RN=a("a"),Qho=o("Wav2Vec2CTCTokenizer"),Uho=o(" (Hubert model)"),Hho=l(),Fs=a("li"),Kde=a("strong"),Jho=o("ibert"),Yho=o(" \u2014 "),PN=a("a"),Kho=o("RobertaTokenizer"),Zho=o(" or "),BN=a("a"),epo=o("RobertaTokenizerFast"),opo=o(" (I-BERT model)"),rpo=l(),Ts=a("li"),Zde=a("strong"),tpo=o("layoutlm"),apo=o(" \u2014 "),IN=a("a"),npo=o("LayoutLMTokenizer"),spo=o(" or "),NN=a("a"),lpo=o("LayoutLMTokenizerFast"),ipo=o(" (LayoutLM model)"),dpo=l(),Ms=a("li"),ece=a("strong"),cpo=o("layoutlmv2"),fpo=o(" \u2014 "),qN=a("a"),mpo=o("LayoutLMv2Tokenizer"),gpo=o(" or "),jN=a("a"),hpo=o("LayoutLMv2TokenizerFast"),ppo=o(" (LayoutLMv2 model)"),_po=l(),Es=a("li"),oce=a("strong"),upo=o("layoutlmv3"),bpo=o(" \u2014 "),DN=a("a"),vpo=o("LayoutLMv3Tokenizer"),Fpo=o(" or "),GN=a("a"),Tpo=o("LayoutLMv3TokenizerFast"),Mpo=o(" (LayoutLMv3 model)"),Epo=l(),Cs=a("li"),rce=a("strong"),Cpo=o("layoutxlm"),wpo=o(" \u2014 "),ON=a("a"),Apo=o("LayoutXLMTokenizer"),Lpo=o(" or "),VN=a("a"),ypo=o("LayoutXLMTokenizerFast"),xpo=o(" (LayoutXLM model)"),$po=l(),ws=a("li"),tce=a("strong"),kpo=o("led"),Spo=o(" \u2014 "),XN=a("a"),Rpo=o("LEDTokenizer"),Ppo=o(" or "),zN=a("a"),Bpo=o("LEDTokenizerFast"),Ipo=o(" (LED model)"),Npo=l(),As=a("li"),ace=a("strong"),qpo=o("longformer"),jpo=o(" \u2014 "),WN=a("a"),Dpo=o("LongformerTokenizer"),Gpo=o(" or "),QN=a("a"),Opo=o("LongformerTokenizerFast"),Vpo=o(" (Longformer model)"),Xpo=l(),Ls=a("li"),nce=a("strong"),zpo=o("longt5"),Wpo=o(" \u2014 "),UN=a("a"),Qpo=o("T5Tokenizer"),Upo=o(" or "),HN=a("a"),Hpo=o("T5TokenizerFast"),Jpo=o(" (LongT5 model)"),Ypo=l(),Nh=a("li"),sce=a("strong"),Kpo=o("luke"),Zpo=o(" \u2014 "),JN=a("a"),e_o=o("LukeTokenizer"),o_o=o(" (LUKE model)"),r_o=l(),ys=a("li"),lce=a("strong"),t_o=o("lxmert"),a_o=o(" \u2014 "),YN=a("a"),n_o=o("LxmertTokenizer"),s_o=o(" or "),KN=a("a"),l_o=o("LxmertTokenizerFast"),i_o=o(" (LXMERT model)"),d_o=l(),qh=a("li"),ice=a("strong"),c_o=o("m2m_100"),f_o=o(" \u2014 "),ZN=a("a"),m_o=o("M2M100Tokenizer"),g_o=o(" (M2M100 model)"),h_o=l(),jh=a("li"),dce=a("strong"),p_o=o("marian"),__o=o(" \u2014 "),eq=a("a"),u_o=o("MarianTokenizer"),b_o=o(" (Marian model)"),v_o=l(),xs=a("li"),cce=a("strong"),F_o=o("mbart"),T_o=o(" \u2014 "),oq=a("a"),M_o=o("MBartTokenizer"),E_o=o(" or "),rq=a("a"),C_o=o("MBartTokenizerFast"),w_o=o(" (mBART model)"),A_o=l(),$s=a("li"),fce=a("strong"),L_o=o("mbart50"),y_o=o(" \u2014 "),tq=a("a"),x_o=o("MBart50Tokenizer"),$_o=o(" or "),aq=a("a"),k_o=o("MBart50TokenizerFast"),S_o=o(" (mBART-50 model)"),R_o=l(),ks=a("li"),mce=a("strong"),P_o=o("megatron-bert"),B_o=o(" \u2014 "),nq=a("a"),I_o=o("BertTokenizer"),N_o=o(" or "),sq=a("a"),q_o=o("BertTokenizerFast"),j_o=o(" (Megatron-BERT model)"),D_o=l(),Dh=a("li"),gce=a("strong"),G_o=o("mluke"),O_o=o(" \u2014 "),lq=a("a"),V_o=o("MLukeTokenizer"),X_o=o(" (mLUKE model)"),z_o=l(),Ss=a("li"),hce=a("strong"),W_o=o("mobilebert"),Q_o=o(" \u2014 "),iq=a("a"),U_o=o("MobileBertTokenizer"),H_o=o(" or "),dq=a("a"),J_o=o("MobileBertTokenizerFast"),Y_o=o(" (MobileBERT model)"),K_o=l(),Rs=a("li"),pce=a("strong"),Z_o=o("mpnet"),euo=o(" \u2014 "),cq=a("a"),ouo=o("MPNetTokenizer"),ruo=o(" or "),fq=a("a"),tuo=o("MPNetTokenizerFast"),auo=o(" (MPNet model)"),nuo=l(),Ps=a("li"),_ce=a("strong"),suo=o("mt5"),luo=o(" \u2014 "),mq=a("a"),iuo=o("MT5Tokenizer"),duo=o(" or "),gq=a("a"),cuo=o("MT5TokenizerFast"),fuo=o(" (MT5 model)"),muo=l(),Bs=a("li"),uce=a("strong"),guo=o("mvp"),huo=o(" \u2014 "),hq=a("a"),puo=o("MvpTokenizer"),_uo=o(" or "),pq=a("a"),uuo=o("MvpTokenizerFast"),buo=o(" (MVP model)"),vuo=l(),Is=a("li"),bce=a("strong"),Fuo=o("nezha"),Tuo=o(" \u2014 "),_q=a("a"),Muo=o("BertTokenizer"),Euo=o(" or "),uq=a("a"),Cuo=o("BertTokenizerFast"),wuo=o(" (Nezha model)"),Auo=l(),Ns=a("li"),vce=a("strong"),Luo=o("nllb"),yuo=o(" \u2014 "),bq=a("a"),xuo=o("NllbTokenizer"),$uo=o(" or "),vq=a("a"),kuo=o("NllbTokenizerFast"),Suo=o(" (NLLB model)"),Ruo=l(),qs=a("li"),Fce=a("strong"),Puo=o("nystromformer"),Buo=o(" \u2014 "),Fq=a("a"),Iuo=o("AlbertTokenizer"),Nuo=o(" or "),Tq=a("a"),quo=o("AlbertTokenizerFast"),juo=o(" (Nystr\xF6mformer model)"),Duo=l(),js=a("li"),Tce=a("strong"),Guo=o("openai-gpt"),Ouo=o(" \u2014 "),Mq=a("a"),Vuo=o("OpenAIGPTTokenizer"),Xuo=o(" or "),Eq=a("a"),zuo=o("OpenAIGPTTokenizerFast"),Wuo=o(" (OpenAI GPT model)"),Quo=l(),Gh=a("li"),Mce=a("strong"),Uuo=o("opt"),Huo=o(" \u2014 "),Cq=a("a"),Juo=o("GPT2Tokenizer"),Yuo=o(" (OPT model)"),Kuo=l(),Ds=a("li"),Ece=a("strong"),Zuo=o("owlvit"),e1o=o(" \u2014 "),wq=a("a"),o1o=o("CLIPTokenizer"),r1o=o(" or "),Aq=a("a"),t1o=o("CLIPTokenizerFast"),a1o=o(" (OWL-ViT model)"),n1o=l(),Gs=a("li"),Cce=a("strong"),s1o=o("pegasus"),l1o=o(" \u2014 "),Lq=a("a"),i1o=o("PegasusTokenizer"),d1o=o(" or "),yq=a("a"),c1o=o("PegasusTokenizerFast"),f1o=o(" (Pegasus model)"),m1o=l(),Oh=a("li"),wce=a("strong"),g1o=o("perceiver"),h1o=o(" \u2014 "),xq=a("a"),p1o=o("PerceiverTokenizer"),_1o=o(" (Perceiver model)"),u1o=l(),Vh=a("li"),Ace=a("strong"),b1o=o("phobert"),v1o=o(" \u2014 "),$q=a("a"),F1o=o("PhobertTokenizer"),T1o=o(" (PhoBERT model)"),M1o=l(),Xh=a("li"),Lce=a("strong"),E1o=o("plbart"),C1o=o(" \u2014 "),kq=a("a"),w1o=o("PLBartTokenizer"),A1o=o(" (PLBart model)"),L1o=l(),zh=a("li"),yce=a("strong"),y1o=o("prophetnet"),x1o=o(" \u2014 "),Sq=a("a"),$1o=o("ProphetNetTokenizer"),k1o=o(" (ProphetNet model)"),S1o=l(),Os=a("li"),xce=a("strong"),R1o=o("qdqbert"),P1o=o(" \u2014 "),Rq=a("a"),B1o=o("BertTokenizer"),I1o=o(" or "),Pq=a("a"),N1o=o("BertTokenizerFast"),q1o=o(" (QDQBert model)"),j1o=l(),Wh=a("li"),$ce=a("strong"),D1o=o("rag"),G1o=o(" \u2014 "),Bq=a("a"),O1o=o("RagTokenizer"),V1o=o(" (RAG model)"),X1o=l(),Vs=a("li"),kce=a("strong"),z1o=o("realm"),W1o=o(" \u2014 "),Iq=a("a"),Q1o=o("RealmTokenizer"),U1o=o(" or "),Nq=a("a"),H1o=o("RealmTokenizerFast"),J1o=o(" (REALM model)"),Y1o=l(),Xs=a("li"),Sce=a("strong"),K1o=o("reformer"),Z1o=o(" \u2014 "),qq=a("a"),e6o=o("ReformerTokenizer"),o6o=o(" or "),jq=a("a"),r6o=o("ReformerTokenizerFast"),t6o=o(" (Reformer model)"),a6o=l(),zs=a("li"),Rce=a("strong"),n6o=o("rembert"),s6o=o(" \u2014 "),Dq=a("a"),l6o=o("RemBertTokenizer"),i6o=o(" or "),Gq=a("a"),d6o=o("RemBertTokenizerFast"),c6o=o(" (RemBERT model)"),f6o=l(),Ws=a("li"),Pce=a("strong"),m6o=o("retribert"),g6o=o(" \u2014 "),Oq=a("a"),h6o=o("RetriBertTokenizer"),p6o=o(" or "),Vq=a("a"),_6o=o("RetriBertTokenizerFast"),u6o=o(" (RetriBERT model)"),b6o=l(),Qs=a("li"),Bce=a("strong"),v6o=o("roberta"),F6o=o(" \u2014 "),Xq=a("a"),T6o=o("RobertaTokenizer"),M6o=o(" or "),zq=a("a"),E6o=o("RobertaTokenizerFast"),C6o=o(" (RoBERTa model)"),w6o=l(),Us=a("li"),Ice=a("strong"),A6o=o("roformer"),L6o=o(" \u2014 "),Wq=a("a"),y6o=o("RoFormerTokenizer"),x6o=o(" or "),Qq=a("a"),$6o=o("RoFormerTokenizerFast"),k6o=o(" (RoFormer model)"),S6o=l(),Qh=a("li"),Nce=a("strong"),R6o=o("speech_to_text"),P6o=o(" \u2014 "),Uq=a("a"),B6o=o("Speech2TextTokenizer"),I6o=o(" (Speech2Text model)"),N6o=l(),Uh=a("li"),qce=a("strong"),q6o=o("speech_to_text_2"),j6o=o(" \u2014 "),Hq=a("a"),D6o=o("Speech2Text2Tokenizer"),G6o=o(" (Speech2Text2 model)"),O6o=l(),Hs=a("li"),jce=a("strong"),V6o=o("splinter"),X6o=o(" \u2014 "),Jq=a("a"),z6o=o("SplinterTokenizer"),W6o=o(" or "),Yq=a("a"),Q6o=o("SplinterTokenizerFast"),U6o=o(" (Splinter model)"),H6o=l(),Js=a("li"),Dce=a("strong"),J6o=o("squeezebert"),Y6o=o(" \u2014 "),Kq=a("a"),K6o=o("SqueezeBertTokenizer"),Z6o=o(" or "),Zq=a("a"),e8o=o("SqueezeBertTokenizerFast"),o8o=o(" (SqueezeBERT model)"),r8o=l(),Ys=a("li"),Gce=a("strong"),t8o=o("t5"),a8o=o(" \u2014 "),ej=a("a"),n8o=o("T5Tokenizer"),s8o=o(" or "),oj=a("a"),l8o=o("T5TokenizerFast"),i8o=o(" (T5 model)"),d8o=l(),Hh=a("li"),Oce=a("strong"),c8o=o("tapas"),f8o=o(" \u2014 "),rj=a("a"),m8o=o("TapasTokenizer"),g8o=o(" (TAPAS model)"),h8o=l(),Jh=a("li"),Vce=a("strong"),p8o=o("tapex"),_8o=o(" \u2014 "),tj=a("a"),u8o=o("TapexTokenizer"),b8o=o(" (TAPEX model)"),v8o=l(),Yh=a("li"),Xce=a("strong"),F8o=o("transfo-xl"),T8o=o(" \u2014 "),aj=a("a"),M8o=o("TransfoXLTokenizer"),E8o=o(" (Transformer-XL model)"),C8o=l(),Ks=a("li"),zce=a("strong"),w8o=o("vilt"),A8o=o(" \u2014 "),nj=a("a"),L8o=o("BertTokenizer"),y8o=o(" or "),sj=a("a"),x8o=o("BertTokenizerFast"),$8o=o(" (ViLT model)"),k8o=l(),Zs=a("li"),Wce=a("strong"),S8o=o("visual_bert"),R8o=o(" \u2014 "),lj=a("a"),P8o=o("BertTokenizer"),B8o=o(" or "),ij=a("a"),I8o=o("BertTokenizerFast"),N8o=o(" (VisualBERT model)"),q8o=l(),Kh=a("li"),Qce=a("strong"),j8o=o("wav2vec2"),D8o=o(" \u2014 "),dj=a("a"),G8o=o("Wav2Vec2CTCTokenizer"),O8o=o(" (Wav2Vec2 model)"),V8o=l(),Zh=a("li"),Uce=a("strong"),X8o=o("wav2vec2-conformer"),z8o=o(" \u2014 "),cj=a("a"),W8o=o("Wav2Vec2CTCTokenizer"),Q8o=o(" (Wav2Vec2-Conformer model)"),U8o=l(),ep=a("li"),Hce=a("strong"),H8o=o("wav2vec2_phoneme"),J8o=o(" \u2014 "),fj=a("a"),Y8o=o("Wav2Vec2PhonemeCTCTokenizer"),K8o=o(" (Wav2Vec2Phoneme model)"),Z8o=l(),el=a("li"),Jce=a("strong"),e2o=o("xglm"),o2o=o(" \u2014 "),mj=a("a"),r2o=o("XGLMTokenizer"),t2o=o(" or "),gj=a("a"),a2o=o("XGLMTokenizerFast"),n2o=o(" (XGLM model)"),s2o=l(),op=a("li"),Yce=a("strong"),l2o=o("xlm"),i2o=o(" \u2014 "),hj=a("a"),d2o=o("XLMTokenizer"),c2o=o(" (XLM model)"),f2o=l(),rp=a("li"),Kce=a("strong"),m2o=o("xlm-prophetnet"),g2o=o(" \u2014 "),pj=a("a"),h2o=o("XLMProphetNetTokenizer"),p2o=o(" (XLM-ProphetNet model)"),_2o=l(),ol=a("li"),Zce=a("strong"),u2o=o("xlm-roberta"),b2o=o(" \u2014 "),_j=a("a"),v2o=o("XLMRobertaTokenizer"),F2o=o(" or "),uj=a("a"),T2o=o("XLMRobertaTokenizerFast"),M2o=o(" (XLM-RoBERTa model)"),E2o=l(),rl=a("li"),efe=a("strong"),C2o=o("xlm-roberta-xl"),w2o=o(" \u2014 "),bj=a("a"),A2o=o("RobertaTokenizer"),L2o=o(" or "),vj=a("a"),y2o=o("RobertaTokenizerFast"),x2o=o(" (XLM-RoBERTa-XL model)"),$2o=l(),tl=a("li"),ofe=a("strong"),k2o=o("xlnet"),S2o=o(" \u2014 "),Fj=a("a"),R2o=o("XLNetTokenizer"),P2o=o(" or "),Tj=a("a"),B2o=o("XLNetTokenizerFast"),I2o=o(" (XLNet model)"),N2o=l(),al=a("li"),rfe=a("strong"),q2o=o("yoso"),j2o=o(" \u2014 "),Mj=a("a"),D2o=o("AlbertTokenizer"),G2o=o(" or "),Ej=a("a"),O2o=o("AlbertTokenizerFast"),V2o=o(" (YOSO model)"),X2o=l(),F(tp.$$.fragment),z2o=l(),ap=a("div"),F(Ay.$$.fragment),W2o=l(),tfe=a("p"),Q2o=o("Register a new tokenizer in this mapping."),HQe=l(),Zi=a("h2"),np=a("a"),afe=a("span"),F(Ly.$$.fragment),U2o=l(),nfe=a("span"),H2o=o("AutoFeatureExtractor"),JQe=l(),$o=a("div"),F(yy.$$.fragment),J2o=l(),xy=a("p"),Y2o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Cj=a("a"),K2o=o("AutoFeatureExtractor.from_pretrained()"),Z2o=o(" class method."),ebo=l(),$y=a("p"),obo=o("This class cannot be instantiated directly using "),sfe=a("code"),rbo=o("__init__()"),tbo=o(" (throws an error)."),abo=l(),He=a("div"),F(ky.$$.fragment),nbo=l(),lfe=a("p"),sbo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),lbo=l(),Oa=a("p"),ibo=o("The feature extractor class to instantiate is selected based on the "),ife=a("code"),dbo=o("model_type"),cbo=o(` property of the config object
(either passed as an argument or loaded from `),dfe=a("code"),fbo=o("pretrained_model_name_or_path"),mbo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),cfe=a("code"),gbo=o("pretrained_model_name_or_path"),hbo=o(":"),pbo=l(),Q=a("ul"),sp=a("li"),ffe=a("strong"),_bo=o("beit"),ubo=o(" \u2014 "),wj=a("a"),bbo=o("BeitFeatureExtractor"),vbo=o(" (BEiT model)"),Fbo=l(),lp=a("li"),mfe=a("strong"),Tbo=o("clip"),Mbo=o(" \u2014 "),Aj=a("a"),Ebo=o("CLIPFeatureExtractor"),Cbo=o(" (CLIP model)"),wbo=l(),ip=a("li"),gfe=a("strong"),Abo=o("convnext"),Lbo=o(" \u2014 "),Lj=a("a"),ybo=o("ConvNextFeatureExtractor"),xbo=o(" (ConvNeXT model)"),$bo=l(),dp=a("li"),hfe=a("strong"),kbo=o("cvt"),Sbo=o(" \u2014 "),yj=a("a"),Rbo=o("ConvNextFeatureExtractor"),Pbo=o(" (CvT model)"),Bbo=l(),cp=a("li"),pfe=a("strong"),Ibo=o("data2vec-audio"),Nbo=o(" \u2014 "),xj=a("a"),qbo=o("Wav2Vec2FeatureExtractor"),jbo=o(" (Data2VecAudio model)"),Dbo=l(),fp=a("li"),_fe=a("strong"),Gbo=o("data2vec-vision"),Obo=o(" \u2014 "),$j=a("a"),Vbo=o("BeitFeatureExtractor"),Xbo=o(" (Data2VecVision model)"),zbo=l(),mp=a("li"),ufe=a("strong"),Wbo=o("deit"),Qbo=o(" \u2014 "),kj=a("a"),Ubo=o("DeiTFeatureExtractor"),Hbo=o(" (DeiT model)"),Jbo=l(),gp=a("li"),bfe=a("strong"),Ybo=o("detr"),Kbo=o(" \u2014 "),Sj=a("a"),Zbo=o("DetrFeatureExtractor"),evo=o(" (DETR model)"),ovo=l(),hp=a("li"),vfe=a("strong"),rvo=o("donut"),tvo=o(" \u2014 "),Rj=a("a"),avo=o("DonutFeatureExtractor"),nvo=o(" (Donut model)"),svo=l(),pp=a("li"),Ffe=a("strong"),lvo=o("dpt"),ivo=o(" \u2014 "),Pj=a("a"),dvo=o("DPTFeatureExtractor"),cvo=o(" (DPT model)"),fvo=l(),_p=a("li"),Tfe=a("strong"),mvo=o("flava"),gvo=o(" \u2014 "),Bj=a("a"),hvo=o("FlavaFeatureExtractor"),pvo=o(" (FLAVA model)"),_vo=l(),up=a("li"),Mfe=a("strong"),uvo=o("glpn"),bvo=o(" \u2014 "),Ij=a("a"),vvo=o("GLPNFeatureExtractor"),Fvo=o(" (GLPN model)"),Tvo=l(),bp=a("li"),Efe=a("strong"),Mvo=o("groupvit"),Evo=o(" \u2014 "),Nj=a("a"),Cvo=o("CLIPFeatureExtractor"),wvo=o(" (GroupViT model)"),Avo=l(),vp=a("li"),Cfe=a("strong"),Lvo=o("hubert"),yvo=o(" \u2014 "),qj=a("a"),xvo=o("Wav2Vec2FeatureExtractor"),$vo=o(" (Hubert model)"),kvo=l(),Fp=a("li"),wfe=a("strong"),Svo=o("imagegpt"),Rvo=o(" \u2014 "),jj=a("a"),Pvo=o("ImageGPTFeatureExtractor"),Bvo=o(" (ImageGPT model)"),Ivo=l(),Tp=a("li"),Afe=a("strong"),Nvo=o("layoutlmv2"),qvo=o(" \u2014 "),Dj=a("a"),jvo=o("LayoutLMv2FeatureExtractor"),Dvo=o(" (LayoutLMv2 model)"),Gvo=l(),Mp=a("li"),Lfe=a("strong"),Ovo=o("layoutlmv3"),Vvo=o(" \u2014 "),Gj=a("a"),Xvo=o("LayoutLMv3FeatureExtractor"),zvo=o(" (LayoutLMv3 model)"),Wvo=l(),Ep=a("li"),yfe=a("strong"),Qvo=o("levit"),Uvo=o(" \u2014 "),Oj=a("a"),Hvo=o("LevitFeatureExtractor"),Jvo=o(" (LeViT model)"),Yvo=l(),Cp=a("li"),xfe=a("strong"),Kvo=o("maskformer"),Zvo=o(" \u2014 "),Vj=a("a"),eFo=o("MaskFormerFeatureExtractor"),oFo=o(" (MaskFormer model)"),rFo=l(),wp=a("li"),$fe=a("strong"),tFo=o("mctct"),aFo=o(" \u2014 "),Xj=a("a"),nFo=o("MCTCTFeatureExtractor"),sFo=o(" (M-CTC-T model)"),lFo=l(),Ap=a("li"),kfe=a("strong"),iFo=o("mobilevit"),dFo=o(" \u2014 "),zj=a("a"),cFo=o("MobileViTFeatureExtractor"),fFo=o(" (MobileViT model)"),mFo=l(),Lp=a("li"),Sfe=a("strong"),gFo=o("owlvit"),hFo=o(" \u2014 "),Wj=a("a"),pFo=o("OwlViTFeatureExtractor"),_Fo=o(" (OWL-ViT model)"),uFo=l(),yp=a("li"),Rfe=a("strong"),bFo=o("perceiver"),vFo=o(" \u2014 "),Qj=a("a"),FFo=o("PerceiverFeatureExtractor"),TFo=o(" (Perceiver model)"),MFo=l(),xp=a("li"),Pfe=a("strong"),EFo=o("poolformer"),CFo=o(" \u2014 "),Uj=a("a"),wFo=o("PoolFormerFeatureExtractor"),AFo=o(" (PoolFormer model)"),LFo=l(),$p=a("li"),Bfe=a("strong"),yFo=o("regnet"),xFo=o(" \u2014 "),Hj=a("a"),$Fo=o("ConvNextFeatureExtractor"),kFo=o(" (RegNet model)"),SFo=l(),kp=a("li"),Ife=a("strong"),RFo=o("resnet"),PFo=o(" \u2014 "),Jj=a("a"),BFo=o("ConvNextFeatureExtractor"),IFo=o(" (ResNet model)"),NFo=l(),Sp=a("li"),Nfe=a("strong"),qFo=o("segformer"),jFo=o(" \u2014 "),Yj=a("a"),DFo=o("SegformerFeatureExtractor"),GFo=o(" (SegFormer model)"),OFo=l(),Rp=a("li"),qfe=a("strong"),VFo=o("speech_to_text"),XFo=o(" \u2014 "),Kj=a("a"),zFo=o("Speech2TextFeatureExtractor"),WFo=o(" (Speech2Text model)"),QFo=l(),Pp=a("li"),jfe=a("strong"),UFo=o("swin"),HFo=o(" \u2014 "),Zj=a("a"),JFo=o("ViTFeatureExtractor"),YFo=o(" (Swin Transformer model)"),KFo=l(),Bp=a("li"),Dfe=a("strong"),ZFo=o("swinv2"),eTo=o(" \u2014 "),eD=a("a"),oTo=o("ViTFeatureExtractor"),rTo=o(" (Swin Transformer V2 model)"),tTo=l(),Ip=a("li"),Gfe=a("strong"),aTo=o("van"),nTo=o(" \u2014 "),oD=a("a"),sTo=o("ConvNextFeatureExtractor"),lTo=o(" (VAN model)"),iTo=l(),Np=a("li"),Ofe=a("strong"),dTo=o("videomae"),cTo=o(" \u2014 "),rD=a("a"),fTo=o("ViTFeatureExtractor"),mTo=o(" (VideoMAE model)"),gTo=l(),qp=a("li"),Vfe=a("strong"),hTo=o("vilt"),pTo=o(" \u2014 "),tD=a("a"),_To=o("ViltFeatureExtractor"),uTo=o(" (ViLT model)"),bTo=l(),jp=a("li"),Xfe=a("strong"),vTo=o("vit"),FTo=o(" \u2014 "),aD=a("a"),TTo=o("ViTFeatureExtractor"),MTo=o(" (ViT model)"),ETo=l(),Dp=a("li"),zfe=a("strong"),CTo=o("vit_mae"),wTo=o(" \u2014 "),nD=a("a"),ATo=o("ViTFeatureExtractor"),LTo=o(" (ViTMAE model)"),yTo=l(),Gp=a("li"),Wfe=a("strong"),xTo=o("wav2vec2"),$To=o(" \u2014 "),sD=a("a"),kTo=o("Wav2Vec2FeatureExtractor"),STo=o(" (Wav2Vec2 model)"),RTo=l(),Op=a("li"),Qfe=a("strong"),PTo=o("wav2vec2-conformer"),BTo=o(" \u2014 "),lD=a("a"),ITo=o("Wav2Vec2FeatureExtractor"),NTo=o(" (Wav2Vec2-Conformer model)"),qTo=l(),Vp=a("li"),Ufe=a("strong"),jTo=o("yolos"),DTo=o(" \u2014 "),iD=a("a"),GTo=o("YolosFeatureExtractor"),OTo=o(" (YOLOS model)"),VTo=l(),F(Xp.$$.fragment),XTo=l(),F(zp.$$.fragment),zTo=l(),Wp=a("div"),F(Sy.$$.fragment),WTo=l(),Hfe=a("p"),QTo=o("Register a new feature extractor for this class."),YQe=l(),ed=a("h2"),Qp=a("a"),Jfe=a("span"),F(Ry.$$.fragment),UTo=l(),Yfe=a("span"),HTo=o("AutoProcessor"),KQe=l(),ko=a("div"),F(Py.$$.fragment),JTo=l(),By=a("p"),YTo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dD=a("a"),KTo=o("AutoProcessor.from_pretrained()"),ZTo=o(" class method."),eMo=l(),Iy=a("p"),oMo=o("This class cannot be instantiated directly using "),Kfe=a("code"),rMo=o("__init__()"),tMo=o(" (throws an error)."),aMo=l(),Je=a("div"),F(Ny.$$.fragment),nMo=l(),Zfe=a("p"),sMo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),lMo=l(),od=a("p"),iMo=o("The processor class to instantiate is selected based on the "),eme=a("code"),dMo=o("model_type"),cMo=o(` property of the config object (either
passed as an argument or loaded from `),ome=a("code"),fMo=o("pretrained_model_name_or_path"),mMo=o(" if possible):"),gMo=l(),ie=a("ul"),Up=a("li"),rme=a("strong"),hMo=o("clip"),pMo=o(" \u2014 "),cD=a("a"),_Mo=o("CLIPProcessor"),uMo=o(" (CLIP model)"),bMo=l(),Hp=a("li"),tme=a("strong"),vMo=o("donut"),FMo=o(" \u2014 "),fD=a("a"),TMo=o("DonutProcessor"),MMo=o(" (Donut model)"),EMo=l(),Jp=a("li"),ame=a("strong"),CMo=o("flava"),wMo=o(" \u2014 "),mD=a("a"),AMo=o("FlavaProcessor"),LMo=o(" (FLAVA model)"),yMo=l(),Yp=a("li"),nme=a("strong"),xMo=o("groupvit"),$Mo=o(" \u2014 "),gD=a("a"),kMo=o("CLIPProcessor"),SMo=o(" (GroupViT model)"),RMo=l(),Kp=a("li"),sme=a("strong"),PMo=o("layoutlmv2"),BMo=o(" \u2014 "),hD=a("a"),IMo=o("LayoutLMv2Processor"),NMo=o(" (LayoutLMv2 model)"),qMo=l(),Zp=a("li"),lme=a("strong"),jMo=o("layoutlmv3"),DMo=o(" \u2014 "),pD=a("a"),GMo=o("LayoutLMv3Processor"),OMo=o(" (LayoutLMv3 model)"),VMo=l(),e_=a("li"),ime=a("strong"),XMo=o("layoutxlm"),zMo=o(" \u2014 "),_D=a("a"),WMo=o("LayoutXLMProcessor"),QMo=o(" (LayoutXLM model)"),UMo=l(),o_=a("li"),dme=a("strong"),HMo=o("owlvit"),JMo=o(" \u2014 "),uD=a("a"),YMo=o("OwlViTProcessor"),KMo=o(" (OWL-ViT model)"),ZMo=l(),r_=a("li"),cme=a("strong"),eEo=o("sew"),oEo=o(" \u2014 "),bD=a("a"),rEo=o("Wav2Vec2Processor"),tEo=o(" (SEW model)"),aEo=l(),t_=a("li"),fme=a("strong"),nEo=o("sew-d"),sEo=o(" \u2014 "),vD=a("a"),lEo=o("Wav2Vec2Processor"),iEo=o(" (SEW-D model)"),dEo=l(),a_=a("li"),mme=a("strong"),cEo=o("speech_to_text"),fEo=o(" \u2014 "),FD=a("a"),mEo=o("Speech2TextProcessor"),gEo=o(" (Speech2Text model)"),hEo=l(),n_=a("li"),gme=a("strong"),pEo=o("speech_to_text_2"),_Eo=o(" \u2014 "),TD=a("a"),uEo=o("Speech2Text2Processor"),bEo=o(" (Speech2Text2 model)"),vEo=l(),s_=a("li"),hme=a("strong"),FEo=o("trocr"),TEo=o(" \u2014 "),MD=a("a"),MEo=o("TrOCRProcessor"),EEo=o(" (TrOCR model)"),CEo=l(),l_=a("li"),pme=a("strong"),wEo=o("unispeech"),AEo=o(" \u2014 "),ED=a("a"),LEo=o("Wav2Vec2Processor"),yEo=o(" (UniSpeech model)"),xEo=l(),i_=a("li"),_me=a("strong"),$Eo=o("unispeech-sat"),kEo=o(" \u2014 "),CD=a("a"),SEo=o("Wav2Vec2Processor"),REo=o(" (UniSpeechSat model)"),PEo=l(),d_=a("li"),ume=a("strong"),BEo=o("vilt"),IEo=o(" \u2014 "),wD=a("a"),NEo=o("ViltProcessor"),qEo=o(" (ViLT model)"),jEo=l(),c_=a("li"),bme=a("strong"),DEo=o("vision-text-dual-encoder"),GEo=o(" \u2014 "),AD=a("a"),OEo=o("VisionTextDualEncoderProcessor"),VEo=o(" (VisionTextDualEncoder model)"),XEo=l(),f_=a("li"),vme=a("strong"),zEo=o("wav2vec2"),WEo=o(" \u2014 "),LD=a("a"),QEo=o("Wav2Vec2Processor"),UEo=o(" (Wav2Vec2 model)"),HEo=l(),m_=a("li"),Fme=a("strong"),JEo=o("wav2vec2-conformer"),YEo=o(" \u2014 "),yD=a("a"),KEo=o("Wav2Vec2Processor"),ZEo=o(" (Wav2Vec2-Conformer model)"),e4o=l(),g_=a("li"),Tme=a("strong"),o4o=o("wavlm"),r4o=o(" \u2014 "),xD=a("a"),t4o=o("Wav2Vec2Processor"),a4o=o(" (WavLM model)"),n4o=l(),F(h_.$$.fragment),s4o=l(),F(p_.$$.fragment),l4o=l(),__=a("div"),F(qy.$$.fragment),i4o=l(),Mme=a("p"),d4o=o("Register a new processor for this class."),ZQe=l(),rd=a("h2"),u_=a("a"),Eme=a("span"),F(jy.$$.fragment),c4o=l(),Cme=a("span"),f4o=o("AutoModel"),eUe=l(),So=a("div"),F(Dy.$$.fragment),m4o=l(),td=a("p"),g4o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$D=a("a"),h4o=o("from_pretrained()"),p4o=o(" class method or the "),kD=a("a"),_4o=o("from_config()"),u4o=o(` class
method.`),b4o=l(),Gy=a("p"),v4o=o("This class cannot be instantiated directly using "),wme=a("code"),F4o=o("__init__()"),T4o=o(" (throws an error)."),M4o=l(),mt=a("div"),F(Oy.$$.fragment),E4o=l(),Ame=a("p"),C4o=o("Instantiates one of the base model classes of the library from a configuration."),w4o=l(),ad=a("p"),A4o=o(`Note:
Loading a model from its configuration file does `),Lme=a("strong"),L4o=o("not"),y4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SD=a("a"),x4o=o("from_pretrained()"),$4o=o(" to load the model weights."),k4o=l(),F(b_.$$.fragment),S4o=l(),Ye=a("div"),F(Vy.$$.fragment),R4o=l(),yme=a("p"),P4o=o("Instantiate one of the base model classes of the library from a pretrained model."),B4o=l(),Va=a("p"),I4o=o("The model class to instantiate is selected based on the "),xme=a("code"),N4o=o("model_type"),q4o=o(` property of the config object (either
passed as an argument or loaded from `),$me=a("code"),j4o=o("pretrained_model_name_or_path"),D4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kme=a("code"),G4o=o("pretrained_model_name_or_path"),O4o=o(":"),V4o=l(),y=a("ul"),v_=a("li"),Sme=a("strong"),X4o=o("albert"),z4o=o(" \u2014 "),RD=a("a"),W4o=o("AlbertModel"),Q4o=o(" (ALBERT model)"),U4o=l(),F_=a("li"),Rme=a("strong"),H4o=o("bart"),J4o=o(" \u2014 "),PD=a("a"),Y4o=o("BartModel"),K4o=o(" (BART model)"),Z4o=l(),T_=a("li"),Pme=a("strong"),eCo=o("beit"),oCo=o(" \u2014 "),BD=a("a"),rCo=o("BeitModel"),tCo=o(" (BEiT model)"),aCo=l(),M_=a("li"),Bme=a("strong"),nCo=o("bert"),sCo=o(" \u2014 "),ID=a("a"),lCo=o("BertModel"),iCo=o(" (BERT model)"),dCo=l(),E_=a("li"),Ime=a("strong"),cCo=o("bert-generation"),fCo=o(" \u2014 "),ND=a("a"),mCo=o("BertGenerationEncoder"),gCo=o(" (Bert Generation model)"),hCo=l(),C_=a("li"),Nme=a("strong"),pCo=o("big_bird"),_Co=o(" \u2014 "),qD=a("a"),uCo=o("BigBirdModel"),bCo=o(" (BigBird model)"),vCo=l(),w_=a("li"),qme=a("strong"),FCo=o("bigbird_pegasus"),TCo=o(" \u2014 "),jD=a("a"),MCo=o("BigBirdPegasusModel"),ECo=o(" (BigBird-Pegasus model)"),CCo=l(),A_=a("li"),jme=a("strong"),wCo=o("blenderbot"),ACo=o(" \u2014 "),DD=a("a"),LCo=o("BlenderbotModel"),yCo=o(" (Blenderbot model)"),xCo=l(),L_=a("li"),Dme=a("strong"),$Co=o("blenderbot-small"),kCo=o(" \u2014 "),GD=a("a"),SCo=o("BlenderbotSmallModel"),RCo=o(" (BlenderbotSmall model)"),PCo=l(),y_=a("li"),Gme=a("strong"),BCo=o("bloom"),ICo=o(" \u2014 "),OD=a("a"),NCo=o("BloomModel"),qCo=o(" (BLOOM model)"),jCo=l(),x_=a("li"),Ome=a("strong"),DCo=o("camembert"),GCo=o(" \u2014 "),VD=a("a"),OCo=o("CamembertModel"),VCo=o(" (CamemBERT model)"),XCo=l(),$_=a("li"),Vme=a("strong"),zCo=o("canine"),WCo=o(" \u2014 "),XD=a("a"),QCo=o("CanineModel"),UCo=o(" (CANINE model)"),HCo=l(),k_=a("li"),Xme=a("strong"),JCo=o("clip"),YCo=o(" \u2014 "),zD=a("a"),KCo=o("CLIPModel"),ZCo=o(" (CLIP model)"),e3o=l(),S_=a("li"),zme=a("strong"),o3o=o("codegen"),r3o=o(" \u2014 "),WD=a("a"),t3o=o("CodeGenModel"),a3o=o(" (CodeGen model)"),n3o=l(),R_=a("li"),Wme=a("strong"),s3o=o("convbert"),l3o=o(" \u2014 "),QD=a("a"),i3o=o("ConvBertModel"),d3o=o(" (ConvBERT model)"),c3o=l(),P_=a("li"),Qme=a("strong"),f3o=o("convnext"),m3o=o(" \u2014 "),UD=a("a"),g3o=o("ConvNextModel"),h3o=o(" (ConvNeXT model)"),p3o=l(),B_=a("li"),Ume=a("strong"),_3o=o("ctrl"),u3o=o(" \u2014 "),HD=a("a"),b3o=o("CTRLModel"),v3o=o(" (CTRL model)"),F3o=l(),I_=a("li"),Hme=a("strong"),T3o=o("cvt"),M3o=o(" \u2014 "),JD=a("a"),E3o=o("CvtModel"),C3o=o(" (CvT model)"),w3o=l(),N_=a("li"),Jme=a("strong"),A3o=o("data2vec-audio"),L3o=o(" \u2014 "),YD=a("a"),y3o=o("Data2VecAudioModel"),x3o=o(" (Data2VecAudio model)"),$3o=l(),q_=a("li"),Yme=a("strong"),k3o=o("data2vec-text"),S3o=o(" \u2014 "),KD=a("a"),R3o=o("Data2VecTextModel"),P3o=o(" (Data2VecText model)"),B3o=l(),j_=a("li"),Kme=a("strong"),I3o=o("data2vec-vision"),N3o=o(" \u2014 "),ZD=a("a"),q3o=o("Data2VecVisionModel"),j3o=o(" (Data2VecVision model)"),D3o=l(),D_=a("li"),Zme=a("strong"),G3o=o("deberta"),O3o=o(" \u2014 "),eG=a("a"),V3o=o("DebertaModel"),X3o=o(" (DeBERTa model)"),z3o=l(),G_=a("li"),ege=a("strong"),W3o=o("deberta-v2"),Q3o=o(" \u2014 "),oG=a("a"),U3o=o("DebertaV2Model"),H3o=o(" (DeBERTa-v2 model)"),J3o=l(),O_=a("li"),oge=a("strong"),Y3o=o("decision_transformer"),K3o=o(" \u2014 "),rG=a("a"),Z3o=o("DecisionTransformerModel"),e5o=o(" (Decision Transformer model)"),o5o=l(),V_=a("li"),rge=a("strong"),r5o=o("deit"),t5o=o(" \u2014 "),tG=a("a"),a5o=o("DeiTModel"),n5o=o(" (DeiT model)"),s5o=l(),X_=a("li"),tge=a("strong"),l5o=o("detr"),i5o=o(" \u2014 "),aG=a("a"),d5o=o("DetrModel"),c5o=o(" (DETR model)"),f5o=l(),z_=a("li"),age=a("strong"),m5o=o("distilbert"),g5o=o(" \u2014 "),nG=a("a"),h5o=o("DistilBertModel"),p5o=o(" (DistilBERT model)"),_5o=l(),W_=a("li"),nge=a("strong"),u5o=o("donut-swin"),b5o=o(" \u2014 "),sG=a("a"),v5o=o("DonutSwinModel"),F5o=o(" (DonutSwin model)"),T5o=l(),Q_=a("li"),sge=a("strong"),M5o=o("dpr"),E5o=o(" \u2014 "),lG=a("a"),C5o=o("DPRQuestionEncoder"),w5o=o(" (DPR model)"),A5o=l(),U_=a("li"),lge=a("strong"),L5o=o("dpt"),y5o=o(" \u2014 "),iG=a("a"),x5o=o("DPTModel"),$5o=o(" (DPT model)"),k5o=l(),H_=a("li"),ige=a("strong"),S5o=o("electra"),R5o=o(" \u2014 "),dG=a("a"),P5o=o("ElectraModel"),B5o=o(" (ELECTRA model)"),I5o=l(),J_=a("li"),dge=a("strong"),N5o=o("flaubert"),q5o=o(" \u2014 "),cG=a("a"),j5o=o("FlaubertModel"),D5o=o(" (FlauBERT model)"),G5o=l(),Y_=a("li"),cge=a("strong"),O5o=o("flava"),V5o=o(" \u2014 "),fG=a("a"),X5o=o("FlavaModel"),z5o=o(" (FLAVA model)"),W5o=l(),K_=a("li"),fge=a("strong"),Q5o=o("fnet"),U5o=o(" \u2014 "),mG=a("a"),H5o=o("FNetModel"),J5o=o(" (FNet model)"),Y5o=l(),Z_=a("li"),mge=a("strong"),K5o=o("fsmt"),Z5o=o(" \u2014 "),gG=a("a"),e0o=o("FSMTModel"),o0o=o(" (FairSeq Machine-Translation model)"),r0o=l(),nl=a("li"),gge=a("strong"),t0o=o("funnel"),a0o=o(" \u2014 "),hG=a("a"),n0o=o("FunnelModel"),s0o=o(" or "),pG=a("a"),l0o=o("FunnelBaseModel"),i0o=o(" (Funnel Transformer model)"),d0o=l(),eu=a("li"),hge=a("strong"),c0o=o("glpn"),f0o=o(" \u2014 "),_G=a("a"),m0o=o("GLPNModel"),g0o=o(" (GLPN model)"),h0o=l(),ou=a("li"),pge=a("strong"),p0o=o("gpt2"),_0o=o(" \u2014 "),uG=a("a"),u0o=o("GPT2Model"),b0o=o(" (OpenAI GPT-2 model)"),v0o=l(),ru=a("li"),_ge=a("strong"),F0o=o("gpt_neo"),T0o=o(" \u2014 "),bG=a("a"),M0o=o("GPTNeoModel"),E0o=o(" (GPT Neo model)"),C0o=l(),tu=a("li"),uge=a("strong"),w0o=o("gpt_neox"),A0o=o(" \u2014 "),vG=a("a"),L0o=o("GPTNeoXModel"),y0o=o(" (GPT NeoX model)"),x0o=l(),au=a("li"),bge=a("strong"),$0o=o("gptj"),k0o=o(" \u2014 "),FG=a("a"),S0o=o("GPTJModel"),R0o=o(" (GPT-J model)"),P0o=l(),nu=a("li"),vge=a("strong"),B0o=o("groupvit"),I0o=o(" \u2014 "),TG=a("a"),N0o=o("GroupViTModel"),q0o=o(" (GroupViT model)"),j0o=l(),su=a("li"),Fge=a("strong"),D0o=o("hubert"),G0o=o(" \u2014 "),MG=a("a"),O0o=o("HubertModel"),V0o=o(" (Hubert model)"),X0o=l(),lu=a("li"),Tge=a("strong"),z0o=o("ibert"),W0o=o(" \u2014 "),EG=a("a"),Q0o=o("IBertModel"),U0o=o(" (I-BERT model)"),H0o=l(),iu=a("li"),Mge=a("strong"),J0o=o("imagegpt"),Y0o=o(" \u2014 "),CG=a("a"),K0o=o("ImageGPTModel"),Z0o=o(" (ImageGPT model)"),ewo=l(),du=a("li"),Ege=a("strong"),owo=o("layoutlm"),rwo=o(" \u2014 "),wG=a("a"),two=o("LayoutLMModel"),awo=o(" (LayoutLM model)"),nwo=l(),cu=a("li"),Cge=a("strong"),swo=o("layoutlmv2"),lwo=o(" \u2014 "),AG=a("a"),iwo=o("LayoutLMv2Model"),dwo=o(" (LayoutLMv2 model)"),cwo=l(),fu=a("li"),wge=a("strong"),fwo=o("layoutlmv3"),mwo=o(" \u2014 "),LG=a("a"),gwo=o("LayoutLMv3Model"),hwo=o(" (LayoutLMv3 model)"),pwo=l(),mu=a("li"),Age=a("strong"),_wo=o("led"),uwo=o(" \u2014 "),yG=a("a"),bwo=o("LEDModel"),vwo=o(" (LED model)"),Fwo=l(),gu=a("li"),Lge=a("strong"),Two=o("levit"),Mwo=o(" \u2014 "),xG=a("a"),Ewo=o("LevitModel"),Cwo=o(" (LeViT model)"),wwo=l(),hu=a("li"),yge=a("strong"),Awo=o("longformer"),Lwo=o(" \u2014 "),$G=a("a"),ywo=o("LongformerModel"),xwo=o(" (Longformer model)"),$wo=l(),pu=a("li"),xge=a("strong"),kwo=o("longt5"),Swo=o(" \u2014 "),kG=a("a"),Rwo=o("LongT5Model"),Pwo=o(" (LongT5 model)"),Bwo=l(),_u=a("li"),$ge=a("strong"),Iwo=o("luke"),Nwo=o(" \u2014 "),SG=a("a"),qwo=o("LukeModel"),jwo=o(" (LUKE model)"),Dwo=l(),uu=a("li"),kge=a("strong"),Gwo=o("lxmert"),Owo=o(" \u2014 "),RG=a("a"),Vwo=o("LxmertModel"),Xwo=o(" (LXMERT model)"),zwo=l(),bu=a("li"),Sge=a("strong"),Wwo=o("m2m_100"),Qwo=o(" \u2014 "),PG=a("a"),Uwo=o("M2M100Model"),Hwo=o(" (M2M100 model)"),Jwo=l(),vu=a("li"),Rge=a("strong"),Ywo=o("marian"),Kwo=o(" \u2014 "),BG=a("a"),Zwo=o("MarianModel"),eAo=o(" (Marian model)"),oAo=l(),Fu=a("li"),Pge=a("strong"),rAo=o("maskformer"),tAo=o(" \u2014 "),IG=a("a"),aAo=o("MaskFormerModel"),nAo=o(" (MaskFormer model)"),sAo=l(),Tu=a("li"),Bge=a("strong"),lAo=o("mbart"),iAo=o(" \u2014 "),NG=a("a"),dAo=o("MBartModel"),cAo=o(" (mBART model)"),fAo=l(),Mu=a("li"),Ige=a("strong"),mAo=o("mctct"),gAo=o(" \u2014 "),qG=a("a"),hAo=o("MCTCTModel"),pAo=o(" (M-CTC-T model)"),_Ao=l(),Eu=a("li"),Nge=a("strong"),uAo=o("megatron-bert"),bAo=o(" \u2014 "),jG=a("a"),vAo=o("MegatronBertModel"),FAo=o(" (Megatron-BERT model)"),TAo=l(),Cu=a("li"),qge=a("strong"),MAo=o("mobilebert"),EAo=o(" \u2014 "),DG=a("a"),CAo=o("MobileBertModel"),wAo=o(" (MobileBERT model)"),AAo=l(),wu=a("li"),jge=a("strong"),LAo=o("mobilevit"),yAo=o(" \u2014 "),GG=a("a"),xAo=o("MobileViTModel"),$Ao=o(" (MobileViT model)"),kAo=l(),Au=a("li"),Dge=a("strong"),SAo=o("mpnet"),RAo=o(" \u2014 "),OG=a("a"),PAo=o("MPNetModel"),BAo=o(" (MPNet model)"),IAo=l(),Lu=a("li"),Gge=a("strong"),NAo=o("mt5"),qAo=o(" \u2014 "),VG=a("a"),jAo=o("MT5Model"),DAo=o(" (MT5 model)"),GAo=l(),yu=a("li"),Oge=a("strong"),OAo=o("mvp"),VAo=o(" \u2014 "),XG=a("a"),XAo=o("MvpModel"),zAo=o(" (MVP model)"),WAo=l(),xu=a("li"),Vge=a("strong"),QAo=o("nezha"),UAo=o(" \u2014 "),zG=a("a"),HAo=o("NezhaModel"),JAo=o(" (Nezha model)"),YAo=l(),$u=a("li"),Xge=a("strong"),KAo=o("nllb"),ZAo=o(" \u2014 "),WG=a("a"),e7o=o("M2M100Model"),o7o=o(" (NLLB model)"),r7o=l(),ku=a("li"),zge=a("strong"),t7o=o("nystromformer"),a7o=o(" \u2014 "),QG=a("a"),n7o=o("NystromformerModel"),s7o=o(" (Nystr\xF6mformer model)"),l7o=l(),Su=a("li"),Wge=a("strong"),i7o=o("openai-gpt"),d7o=o(" \u2014 "),UG=a("a"),c7o=o("OpenAIGPTModel"),f7o=o(" (OpenAI GPT model)"),m7o=l(),Ru=a("li"),Qge=a("strong"),g7o=o("opt"),h7o=o(" \u2014 "),HG=a("a"),p7o=o("OPTModel"),_7o=o(" (OPT model)"),u7o=l(),Pu=a("li"),Uge=a("strong"),b7o=o("owlvit"),v7o=o(" \u2014 "),JG=a("a"),F7o=o("OwlViTModel"),T7o=o(" (OWL-ViT model)"),M7o=l(),Bu=a("li"),Hge=a("strong"),E7o=o("pegasus"),C7o=o(" \u2014 "),YG=a("a"),w7o=o("PegasusModel"),A7o=o(" (Pegasus model)"),L7o=l(),Iu=a("li"),Jge=a("strong"),y7o=o("perceiver"),x7o=o(" \u2014 "),KG=a("a"),$7o=o("PerceiverModel"),k7o=o(" (Perceiver model)"),S7o=l(),Nu=a("li"),Yge=a("strong"),R7o=o("plbart"),P7o=o(" \u2014 "),ZG=a("a"),B7o=o("PLBartModel"),I7o=o(" (PLBart model)"),N7o=l(),qu=a("li"),Kge=a("strong"),q7o=o("poolformer"),j7o=o(" \u2014 "),eO=a("a"),D7o=o("PoolFormerModel"),G7o=o(" (PoolFormer model)"),O7o=l(),ju=a("li"),Zge=a("strong"),V7o=o("prophetnet"),X7o=o(" \u2014 "),oO=a("a"),z7o=o("ProphetNetModel"),W7o=o(" (ProphetNet model)"),Q7o=l(),Du=a("li"),ehe=a("strong"),U7o=o("qdqbert"),H7o=o(" \u2014 "),rO=a("a"),J7o=o("QDQBertModel"),Y7o=o(" (QDQBert model)"),K7o=l(),Gu=a("li"),ohe=a("strong"),Z7o=o("reformer"),eLo=o(" \u2014 "),tO=a("a"),oLo=o("ReformerModel"),rLo=o(" (Reformer model)"),tLo=l(),Ou=a("li"),rhe=a("strong"),aLo=o("regnet"),nLo=o(" \u2014 "),aO=a("a"),sLo=o("RegNetModel"),lLo=o(" (RegNet model)"),iLo=l(),Vu=a("li"),the=a("strong"),dLo=o("rembert"),cLo=o(" \u2014 "),nO=a("a"),fLo=o("RemBertModel"),mLo=o(" (RemBERT model)"),gLo=l(),Xu=a("li"),ahe=a("strong"),hLo=o("resnet"),pLo=o(" \u2014 "),sO=a("a"),_Lo=o("ResNetModel"),uLo=o(" (ResNet model)"),bLo=l(),zu=a("li"),nhe=a("strong"),vLo=o("retribert"),FLo=o(" \u2014 "),lO=a("a"),TLo=o("RetriBertModel"),MLo=o(" (RetriBERT model)"),ELo=l(),Wu=a("li"),she=a("strong"),CLo=o("roberta"),wLo=o(" \u2014 "),iO=a("a"),ALo=o("RobertaModel"),LLo=o(" (RoBERTa model)"),yLo=l(),Qu=a("li"),lhe=a("strong"),xLo=o("roformer"),$Lo=o(" \u2014 "),dO=a("a"),kLo=o("RoFormerModel"),SLo=o(" (RoFormer model)"),RLo=l(),Uu=a("li"),ihe=a("strong"),PLo=o("segformer"),BLo=o(" \u2014 "),cO=a("a"),ILo=o("SegformerModel"),NLo=o(" (SegFormer model)"),qLo=l(),Hu=a("li"),dhe=a("strong"),jLo=o("sew"),DLo=o(" \u2014 "),fO=a("a"),GLo=o("SEWModel"),OLo=o(" (SEW model)"),VLo=l(),Ju=a("li"),che=a("strong"),XLo=o("sew-d"),zLo=o(" \u2014 "),mO=a("a"),WLo=o("SEWDModel"),QLo=o(" (SEW-D model)"),ULo=l(),Yu=a("li"),fhe=a("strong"),HLo=o("speech_to_text"),JLo=o(" \u2014 "),gO=a("a"),YLo=o("Speech2TextModel"),KLo=o(" (Speech2Text model)"),ZLo=l(),Ku=a("li"),mhe=a("strong"),eyo=o("splinter"),oyo=o(" \u2014 "),hO=a("a"),ryo=o("SplinterModel"),tyo=o(" (Splinter model)"),ayo=l(),Zu=a("li"),ghe=a("strong"),nyo=o("squeezebert"),syo=o(" \u2014 "),pO=a("a"),lyo=o("SqueezeBertModel"),iyo=o(" (SqueezeBERT model)"),dyo=l(),e1=a("li"),hhe=a("strong"),cyo=o("swin"),fyo=o(" \u2014 "),_O=a("a"),myo=o("SwinModel"),gyo=o(" (Swin Transformer model)"),hyo=l(),o1=a("li"),phe=a("strong"),pyo=o("swinv2"),_yo=o(" \u2014 "),uO=a("a"),uyo=o("Swinv2Model"),byo=o(" (Swin Transformer V2 model)"),vyo=l(),r1=a("li"),_he=a("strong"),Fyo=o("t5"),Tyo=o(" \u2014 "),bO=a("a"),Myo=o("T5Model"),Eyo=o(" (T5 model)"),Cyo=l(),t1=a("li"),uhe=a("strong"),wyo=o("tapas"),Ayo=o(" \u2014 "),vO=a("a"),Lyo=o("TapasModel"),yyo=o(" (TAPAS model)"),xyo=l(),a1=a("li"),bhe=a("strong"),$yo=o("trajectory_transformer"),kyo=o(" \u2014 "),FO=a("a"),Syo=o("TrajectoryTransformerModel"),Ryo=o(" (Trajectory Transformer model)"),Pyo=l(),n1=a("li"),vhe=a("strong"),Byo=o("transfo-xl"),Iyo=o(" \u2014 "),TO=a("a"),Nyo=o("TransfoXLModel"),qyo=o(" (Transformer-XL model)"),jyo=l(),s1=a("li"),Fhe=a("strong"),Dyo=o("unispeech"),Gyo=o(" \u2014 "),MO=a("a"),Oyo=o("UniSpeechModel"),Vyo=o(" (UniSpeech model)"),Xyo=l(),l1=a("li"),The=a("strong"),zyo=o("unispeech-sat"),Wyo=o(" \u2014 "),EO=a("a"),Qyo=o("UniSpeechSatModel"),Uyo=o(" (UniSpeechSat model)"),Hyo=l(),i1=a("li"),Mhe=a("strong"),Jyo=o("van"),Yyo=o(" \u2014 "),CO=a("a"),Kyo=o("VanModel"),Zyo=o(" (VAN model)"),e9o=l(),d1=a("li"),Ehe=a("strong"),o9o=o("videomae"),r9o=o(" \u2014 "),wO=a("a"),t9o=o("VideoMAEModel"),a9o=o(" (VideoMAE model)"),n9o=l(),c1=a("li"),Che=a("strong"),s9o=o("vilt"),l9o=o(" \u2014 "),AO=a("a"),i9o=o("ViltModel"),d9o=o(" (ViLT model)"),c9o=l(),f1=a("li"),whe=a("strong"),f9o=o("vision-text-dual-encoder"),m9o=o(" \u2014 "),LO=a("a"),g9o=o("VisionTextDualEncoderModel"),h9o=o(" (VisionTextDualEncoder model)"),p9o=l(),m1=a("li"),Ahe=a("strong"),_9o=o("visual_bert"),u9o=o(" \u2014 "),yO=a("a"),b9o=o("VisualBertModel"),v9o=o(" (VisualBERT model)"),F9o=l(),g1=a("li"),Lhe=a("strong"),T9o=o("vit"),M9o=o(" \u2014 "),xO=a("a"),E9o=o("ViTModel"),C9o=o(" (ViT model)"),w9o=l(),h1=a("li"),yhe=a("strong"),A9o=o("vit_mae"),L9o=o(" \u2014 "),$O=a("a"),y9o=o("ViTMAEModel"),x9o=o(" (ViTMAE model)"),$9o=l(),p1=a("li"),xhe=a("strong"),k9o=o("wav2vec2"),S9o=o(" \u2014 "),kO=a("a"),R9o=o("Wav2Vec2Model"),P9o=o(" (Wav2Vec2 model)"),B9o=l(),_1=a("li"),$he=a("strong"),I9o=o("wav2vec2-conformer"),N9o=o(" \u2014 "),SO=a("a"),q9o=o("Wav2Vec2ConformerModel"),j9o=o(" (Wav2Vec2-Conformer model)"),D9o=l(),u1=a("li"),khe=a("strong"),G9o=o("wavlm"),O9o=o(" \u2014 "),RO=a("a"),V9o=o("WavLMModel"),X9o=o(" (WavLM model)"),z9o=l(),b1=a("li"),She=a("strong"),W9o=o("xglm"),Q9o=o(" \u2014 "),PO=a("a"),U9o=o("XGLMModel"),H9o=o(" (XGLM model)"),J9o=l(),v1=a("li"),Rhe=a("strong"),Y9o=o("xlm"),K9o=o(" \u2014 "),BO=a("a"),Z9o=o("XLMModel"),exo=o(" (XLM model)"),oxo=l(),F1=a("li"),Phe=a("strong"),rxo=o("xlm-prophetnet"),txo=o(" \u2014 "),IO=a("a"),axo=o("XLMProphetNetModel"),nxo=o(" (XLM-ProphetNet model)"),sxo=l(),T1=a("li"),Bhe=a("strong"),lxo=o("xlm-roberta"),ixo=o(" \u2014 "),NO=a("a"),dxo=o("XLMRobertaModel"),cxo=o(" (XLM-RoBERTa model)"),fxo=l(),M1=a("li"),Ihe=a("strong"),mxo=o("xlm-roberta-xl"),gxo=o(" \u2014 "),qO=a("a"),hxo=o("XLMRobertaXLModel"),pxo=o(" (XLM-RoBERTa-XL model)"),_xo=l(),E1=a("li"),Nhe=a("strong"),uxo=o("xlnet"),bxo=o(" \u2014 "),jO=a("a"),vxo=o("XLNetModel"),Fxo=o(" (XLNet model)"),Txo=l(),C1=a("li"),qhe=a("strong"),Mxo=o("yolos"),Exo=o(" \u2014 "),DO=a("a"),Cxo=o("YolosModel"),wxo=o(" (YOLOS model)"),Axo=l(),w1=a("li"),jhe=a("strong"),Lxo=o("yoso"),yxo=o(" \u2014 "),GO=a("a"),xxo=o("YosoModel"),$xo=o(" (YOSO model)"),kxo=l(),A1=a("p"),Sxo=o("The model is set in evaluation mode by default using "),Dhe=a("code"),Rxo=o("model.eval()"),Pxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ghe=a("code"),Bxo=o("model.train()"),Ixo=l(),F(L1.$$.fragment),oUe=l(),nd=a("h2"),y1=a("a"),Ohe=a("span"),F(Xy.$$.fragment),Nxo=l(),Vhe=a("span"),qxo=o("AutoModelForPreTraining"),rUe=l(),Ro=a("div"),F(zy.$$.fragment),jxo=l(),sd=a("p"),Dxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),OO=a("a"),Gxo=o("from_pretrained()"),Oxo=o(" class method or the "),VO=a("a"),Vxo=o("from_config()"),Xxo=o(` class
method.`),zxo=l(),Wy=a("p"),Wxo=o("This class cannot be instantiated directly using "),Xhe=a("code"),Qxo=o("__init__()"),Uxo=o(" (throws an error)."),Hxo=l(),gt=a("div"),F(Qy.$$.fragment),Jxo=l(),zhe=a("p"),Yxo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Kxo=l(),ld=a("p"),Zxo=o(`Note:
Loading a model from its configuration file does `),Whe=a("strong"),e$o=o("not"),o$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XO=a("a"),r$o=o("from_pretrained()"),t$o=o(" to load the model weights."),a$o=l(),F(x1.$$.fragment),n$o=l(),Ke=a("div"),F(Uy.$$.fragment),s$o=l(),Qhe=a("p"),l$o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),i$o=l(),Xa=a("p"),d$o=o("The model class to instantiate is selected based on the "),Uhe=a("code"),c$o=o("model_type"),f$o=o(` property of the config object (either
passed as an argument or loaded from `),Hhe=a("code"),m$o=o("pretrained_model_name_or_path"),g$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=a("code"),h$o=o("pretrained_model_name_or_path"),p$o=o(":"),_$o=l(),G=a("ul"),$1=a("li"),Yhe=a("strong"),u$o=o("albert"),b$o=o(" \u2014 "),zO=a("a"),v$o=o("AlbertForPreTraining"),F$o=o(" (ALBERT model)"),T$o=l(),k1=a("li"),Khe=a("strong"),M$o=o("bart"),E$o=o(" \u2014 "),WO=a("a"),C$o=o("BartForConditionalGeneration"),w$o=o(" (BART model)"),A$o=l(),S1=a("li"),Zhe=a("strong"),L$o=o("bert"),y$o=o(" \u2014 "),QO=a("a"),x$o=o("BertForPreTraining"),$$o=o(" (BERT model)"),k$o=l(),R1=a("li"),epe=a("strong"),S$o=o("big_bird"),R$o=o(" \u2014 "),UO=a("a"),P$o=o("BigBirdForPreTraining"),B$o=o(" (BigBird model)"),I$o=l(),P1=a("li"),ope=a("strong"),N$o=o("bloom"),q$o=o(" \u2014 "),HO=a("a"),j$o=o("BloomForCausalLM"),D$o=o(" (BLOOM model)"),G$o=l(),B1=a("li"),rpe=a("strong"),O$o=o("camembert"),V$o=o(" \u2014 "),JO=a("a"),X$o=o("CamembertForMaskedLM"),z$o=o(" (CamemBERT model)"),W$o=l(),I1=a("li"),tpe=a("strong"),Q$o=o("ctrl"),U$o=o(" \u2014 "),YO=a("a"),H$o=o("CTRLLMHeadModel"),J$o=o(" (CTRL model)"),Y$o=l(),N1=a("li"),ape=a("strong"),K$o=o("data2vec-text"),Z$o=o(" \u2014 "),KO=a("a"),eko=o("Data2VecTextForMaskedLM"),oko=o(" (Data2VecText model)"),rko=l(),q1=a("li"),npe=a("strong"),tko=o("deberta"),ako=o(" \u2014 "),ZO=a("a"),nko=o("DebertaForMaskedLM"),sko=o(" (DeBERTa model)"),lko=l(),j1=a("li"),spe=a("strong"),iko=o("deberta-v2"),dko=o(" \u2014 "),eV=a("a"),cko=o("DebertaV2ForMaskedLM"),fko=o(" (DeBERTa-v2 model)"),mko=l(),D1=a("li"),lpe=a("strong"),gko=o("distilbert"),hko=o(" \u2014 "),oV=a("a"),pko=o("DistilBertForMaskedLM"),_ko=o(" (DistilBERT model)"),uko=l(),G1=a("li"),ipe=a("strong"),bko=o("electra"),vko=o(" \u2014 "),rV=a("a"),Fko=o("ElectraForPreTraining"),Tko=o(" (ELECTRA model)"),Mko=l(),O1=a("li"),dpe=a("strong"),Eko=o("flaubert"),Cko=o(" \u2014 "),tV=a("a"),wko=o("FlaubertWithLMHeadModel"),Ako=o(" (FlauBERT model)"),Lko=l(),V1=a("li"),cpe=a("strong"),yko=o("flava"),xko=o(" \u2014 "),aV=a("a"),$ko=o("FlavaForPreTraining"),kko=o(" (FLAVA model)"),Sko=l(),X1=a("li"),fpe=a("strong"),Rko=o("fnet"),Pko=o(" \u2014 "),nV=a("a"),Bko=o("FNetForPreTraining"),Iko=o(" (FNet model)"),Nko=l(),z1=a("li"),mpe=a("strong"),qko=o("fsmt"),jko=o(" \u2014 "),sV=a("a"),Dko=o("FSMTForConditionalGeneration"),Gko=o(" (FairSeq Machine-Translation model)"),Oko=l(),W1=a("li"),gpe=a("strong"),Vko=o("funnel"),Xko=o(" \u2014 "),lV=a("a"),zko=o("FunnelForPreTraining"),Wko=o(" (Funnel Transformer model)"),Qko=l(),Q1=a("li"),hpe=a("strong"),Uko=o("gpt2"),Hko=o(" \u2014 "),iV=a("a"),Jko=o("GPT2LMHeadModel"),Yko=o(" (OpenAI GPT-2 model)"),Kko=l(),U1=a("li"),ppe=a("strong"),Zko=o("ibert"),eSo=o(" \u2014 "),dV=a("a"),oSo=o("IBertForMaskedLM"),rSo=o(" (I-BERT model)"),tSo=l(),H1=a("li"),_pe=a("strong"),aSo=o("layoutlm"),nSo=o(" \u2014 "),cV=a("a"),sSo=o("LayoutLMForMaskedLM"),lSo=o(" (LayoutLM model)"),iSo=l(),J1=a("li"),upe=a("strong"),dSo=o("longformer"),cSo=o(" \u2014 "),fV=a("a"),fSo=o("LongformerForMaskedLM"),mSo=o(" (Longformer model)"),gSo=l(),Y1=a("li"),bpe=a("strong"),hSo=o("luke"),pSo=o(" \u2014 "),mV=a("a"),_So=o("LukeForMaskedLM"),uSo=o(" (LUKE model)"),bSo=l(),K1=a("li"),vpe=a("strong"),vSo=o("lxmert"),FSo=o(" \u2014 "),gV=a("a"),TSo=o("LxmertForPreTraining"),MSo=o(" (LXMERT model)"),ESo=l(),Z1=a("li"),Fpe=a("strong"),CSo=o("megatron-bert"),wSo=o(" \u2014 "),hV=a("a"),ASo=o("MegatronBertForPreTraining"),LSo=o(" (Megatron-BERT model)"),ySo=l(),e6=a("li"),Tpe=a("strong"),xSo=o("mobilebert"),$So=o(" \u2014 "),pV=a("a"),kSo=o("MobileBertForPreTraining"),SSo=o(" (MobileBERT model)"),RSo=l(),o6=a("li"),Mpe=a("strong"),PSo=o("mpnet"),BSo=o(" \u2014 "),_V=a("a"),ISo=o("MPNetForMaskedLM"),NSo=o(" (MPNet model)"),qSo=l(),r6=a("li"),Epe=a("strong"),jSo=o("mvp"),DSo=o(" \u2014 "),uV=a("a"),GSo=o("MvpForConditionalGeneration"),OSo=o(" (MVP model)"),VSo=l(),t6=a("li"),Cpe=a("strong"),XSo=o("nezha"),zSo=o(" \u2014 "),bV=a("a"),WSo=o("NezhaForPreTraining"),QSo=o(" (Nezha model)"),USo=l(),a6=a("li"),wpe=a("strong"),HSo=o("openai-gpt"),JSo=o(" \u2014 "),vV=a("a"),YSo=o("OpenAIGPTLMHeadModel"),KSo=o(" (OpenAI GPT model)"),ZSo=l(),n6=a("li"),Ape=a("strong"),eRo=o("retribert"),oRo=o(" \u2014 "),FV=a("a"),rRo=o("RetriBertModel"),tRo=o(" (RetriBERT model)"),aRo=l(),s6=a("li"),Lpe=a("strong"),nRo=o("roberta"),sRo=o(" \u2014 "),TV=a("a"),lRo=o("RobertaForMaskedLM"),iRo=o(" (RoBERTa model)"),dRo=l(),l6=a("li"),ype=a("strong"),cRo=o("splinter"),fRo=o(" \u2014 "),MV=a("a"),mRo=o("SplinterForPreTraining"),gRo=o(" (Splinter model)"),hRo=l(),i6=a("li"),xpe=a("strong"),pRo=o("squeezebert"),_Ro=o(" \u2014 "),EV=a("a"),uRo=o("SqueezeBertForMaskedLM"),bRo=o(" (SqueezeBERT model)"),vRo=l(),d6=a("li"),$pe=a("strong"),FRo=o("t5"),TRo=o(" \u2014 "),CV=a("a"),MRo=o("T5ForConditionalGeneration"),ERo=o(" (T5 model)"),CRo=l(),c6=a("li"),kpe=a("strong"),wRo=o("tapas"),ARo=o(" \u2014 "),wV=a("a"),LRo=o("TapasForMaskedLM"),yRo=o(" (TAPAS model)"),xRo=l(),f6=a("li"),Spe=a("strong"),$Ro=o("transfo-xl"),kRo=o(" \u2014 "),AV=a("a"),SRo=o("TransfoXLLMHeadModel"),RRo=o(" (Transformer-XL model)"),PRo=l(),m6=a("li"),Rpe=a("strong"),BRo=o("unispeech"),IRo=o(" \u2014 "),LV=a("a"),NRo=o("UniSpeechForPreTraining"),qRo=o(" (UniSpeech model)"),jRo=l(),g6=a("li"),Ppe=a("strong"),DRo=o("unispeech-sat"),GRo=o(" \u2014 "),yV=a("a"),ORo=o("UniSpeechSatForPreTraining"),VRo=o(" (UniSpeechSat model)"),XRo=l(),h6=a("li"),Bpe=a("strong"),zRo=o("videomae"),WRo=o(" \u2014 "),xV=a("a"),QRo=o("VideoMAEForPreTraining"),URo=o(" (VideoMAE model)"),HRo=l(),p6=a("li"),Ipe=a("strong"),JRo=o("visual_bert"),YRo=o(" \u2014 "),$V=a("a"),KRo=o("VisualBertForPreTraining"),ZRo=o(" (VisualBERT model)"),ePo=l(),_6=a("li"),Npe=a("strong"),oPo=o("vit_mae"),rPo=o(" \u2014 "),kV=a("a"),tPo=o("ViTMAEForPreTraining"),aPo=o(" (ViTMAE model)"),nPo=l(),u6=a("li"),qpe=a("strong"),sPo=o("wav2vec2"),lPo=o(" \u2014 "),SV=a("a"),iPo=o("Wav2Vec2ForPreTraining"),dPo=o(" (Wav2Vec2 model)"),cPo=l(),b6=a("li"),jpe=a("strong"),fPo=o("wav2vec2-conformer"),mPo=o(" \u2014 "),RV=a("a"),gPo=o("Wav2Vec2ConformerForPreTraining"),hPo=o(" (Wav2Vec2-Conformer model)"),pPo=l(),v6=a("li"),Dpe=a("strong"),_Po=o("xlm"),uPo=o(" \u2014 "),PV=a("a"),bPo=o("XLMWithLMHeadModel"),vPo=o(" (XLM model)"),FPo=l(),F6=a("li"),Gpe=a("strong"),TPo=o("xlm-roberta"),MPo=o(" \u2014 "),BV=a("a"),EPo=o("XLMRobertaForMaskedLM"),CPo=o(" (XLM-RoBERTa model)"),wPo=l(),T6=a("li"),Ope=a("strong"),APo=o("xlm-roberta-xl"),LPo=o(" \u2014 "),IV=a("a"),yPo=o("XLMRobertaXLForMaskedLM"),xPo=o(" (XLM-RoBERTa-XL model)"),$Po=l(),M6=a("li"),Vpe=a("strong"),kPo=o("xlnet"),SPo=o(" \u2014 "),NV=a("a"),RPo=o("XLNetLMHeadModel"),PPo=o(" (XLNet model)"),BPo=l(),E6=a("p"),IPo=o("The model is set in evaluation mode by default using "),Xpe=a("code"),NPo=o("model.eval()"),qPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=a("code"),jPo=o("model.train()"),DPo=l(),F(C6.$$.fragment),tUe=l(),id=a("h2"),w6=a("a"),Wpe=a("span"),F(Hy.$$.fragment),GPo=l(),Qpe=a("span"),OPo=o("AutoModelForCausalLM"),aUe=l(),Po=a("div"),F(Jy.$$.fragment),VPo=l(),dd=a("p"),XPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qV=a("a"),zPo=o("from_pretrained()"),WPo=o(" class method or the "),jV=a("a"),QPo=o("from_config()"),UPo=o(` class
method.`),HPo=l(),Yy=a("p"),JPo=o("This class cannot be instantiated directly using "),Upe=a("code"),YPo=o("__init__()"),KPo=o(" (throws an error)."),ZPo=l(),ht=a("div"),F(Ky.$$.fragment),eBo=l(),Hpe=a("p"),oBo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rBo=l(),cd=a("p"),tBo=o(`Note:
Loading a model from its configuration file does `),Jpe=a("strong"),aBo=o("not"),nBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=a("a"),sBo=o("from_pretrained()"),lBo=o(" to load the model weights."),iBo=l(),F(A6.$$.fragment),dBo=l(),Ze=a("div"),F(Zy.$$.fragment),cBo=l(),Ype=a("p"),fBo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mBo=l(),za=a("p"),gBo=o("The model class to instantiate is selected based on the "),Kpe=a("code"),hBo=o("model_type"),pBo=o(` property of the config object (either
passed as an argument or loaded from `),Zpe=a("code"),_Bo=o("pretrained_model_name_or_path"),uBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=a("code"),bBo=o("pretrained_model_name_or_path"),vBo=o(":"),FBo=l(),z=a("ul"),L6=a("li"),o_e=a("strong"),TBo=o("bart"),MBo=o(" \u2014 "),GV=a("a"),EBo=o("BartForCausalLM"),CBo=o(" (BART model)"),wBo=l(),y6=a("li"),r_e=a("strong"),ABo=o("bert"),LBo=o(" \u2014 "),OV=a("a"),yBo=o("BertLMHeadModel"),xBo=o(" (BERT model)"),$Bo=l(),x6=a("li"),t_e=a("strong"),kBo=o("bert-generation"),SBo=o(" \u2014 "),VV=a("a"),RBo=o("BertGenerationDecoder"),PBo=o(" (Bert Generation model)"),BBo=l(),$6=a("li"),a_e=a("strong"),IBo=o("big_bird"),NBo=o(" \u2014 "),XV=a("a"),qBo=o("BigBirdForCausalLM"),jBo=o(" (BigBird model)"),DBo=l(),k6=a("li"),n_e=a("strong"),GBo=o("bigbird_pegasus"),OBo=o(" \u2014 "),zV=a("a"),VBo=o("BigBirdPegasusForCausalLM"),XBo=o(" (BigBird-Pegasus model)"),zBo=l(),S6=a("li"),s_e=a("strong"),WBo=o("blenderbot"),QBo=o(" \u2014 "),WV=a("a"),UBo=o("BlenderbotForCausalLM"),HBo=o(" (Blenderbot model)"),JBo=l(),R6=a("li"),l_e=a("strong"),YBo=o("blenderbot-small"),KBo=o(" \u2014 "),QV=a("a"),ZBo=o("BlenderbotSmallForCausalLM"),eIo=o(" (BlenderbotSmall model)"),oIo=l(),P6=a("li"),i_e=a("strong"),rIo=o("bloom"),tIo=o(" \u2014 "),UV=a("a"),aIo=o("BloomForCausalLM"),nIo=o(" (BLOOM model)"),sIo=l(),B6=a("li"),d_e=a("strong"),lIo=o("camembert"),iIo=o(" \u2014 "),HV=a("a"),dIo=o("CamembertForCausalLM"),cIo=o(" (CamemBERT model)"),fIo=l(),I6=a("li"),c_e=a("strong"),mIo=o("codegen"),gIo=o(" \u2014 "),JV=a("a"),hIo=o("CodeGenForCausalLM"),pIo=o(" (CodeGen model)"),_Io=l(),N6=a("li"),f_e=a("strong"),uIo=o("ctrl"),bIo=o(" \u2014 "),YV=a("a"),vIo=o("CTRLLMHeadModel"),FIo=o(" (CTRL model)"),TIo=l(),q6=a("li"),m_e=a("strong"),MIo=o("data2vec-text"),EIo=o(" \u2014 "),KV=a("a"),CIo=o("Data2VecTextForCausalLM"),wIo=o(" (Data2VecText model)"),AIo=l(),j6=a("li"),g_e=a("strong"),LIo=o("electra"),yIo=o(" \u2014 "),ZV=a("a"),xIo=o("ElectraForCausalLM"),$Io=o(" (ELECTRA model)"),kIo=l(),D6=a("li"),h_e=a("strong"),SIo=o("gpt2"),RIo=o(" \u2014 "),eX=a("a"),PIo=o("GPT2LMHeadModel"),BIo=o(" (OpenAI GPT-2 model)"),IIo=l(),G6=a("li"),p_e=a("strong"),NIo=o("gpt_neo"),qIo=o(" \u2014 "),oX=a("a"),jIo=o("GPTNeoForCausalLM"),DIo=o(" (GPT Neo model)"),GIo=l(),O6=a("li"),__e=a("strong"),OIo=o("gpt_neox"),VIo=o(" \u2014 "),rX=a("a"),XIo=o("GPTNeoXForCausalLM"),zIo=o(" (GPT NeoX model)"),WIo=l(),V6=a("li"),u_e=a("strong"),QIo=o("gptj"),UIo=o(" \u2014 "),tX=a("a"),HIo=o("GPTJForCausalLM"),JIo=o(" (GPT-J model)"),YIo=l(),X6=a("li"),b_e=a("strong"),KIo=o("marian"),ZIo=o(" \u2014 "),aX=a("a"),eNo=o("MarianForCausalLM"),oNo=o(" (Marian model)"),rNo=l(),z6=a("li"),v_e=a("strong"),tNo=o("mbart"),aNo=o(" \u2014 "),nX=a("a"),nNo=o("MBartForCausalLM"),sNo=o(" (mBART model)"),lNo=l(),W6=a("li"),F_e=a("strong"),iNo=o("megatron-bert"),dNo=o(" \u2014 "),sX=a("a"),cNo=o("MegatronBertForCausalLM"),fNo=o(" (Megatron-BERT model)"),mNo=l(),Q6=a("li"),T_e=a("strong"),gNo=o("mvp"),hNo=o(" \u2014 "),lX=a("a"),pNo=o("MvpForCausalLM"),_No=o(" (MVP model)"),uNo=l(),U6=a("li"),M_e=a("strong"),bNo=o("openai-gpt"),vNo=o(" \u2014 "),iX=a("a"),FNo=o("OpenAIGPTLMHeadModel"),TNo=o(" (OpenAI GPT model)"),MNo=l(),H6=a("li"),E_e=a("strong"),ENo=o("opt"),CNo=o(" \u2014 "),dX=a("a"),wNo=o("OPTForCausalLM"),ANo=o(" (OPT model)"),LNo=l(),J6=a("li"),C_e=a("strong"),yNo=o("pegasus"),xNo=o(" \u2014 "),cX=a("a"),$No=o("PegasusForCausalLM"),kNo=o(" (Pegasus model)"),SNo=l(),Y6=a("li"),w_e=a("strong"),RNo=o("plbart"),PNo=o(" \u2014 "),fX=a("a"),BNo=o("PLBartForCausalLM"),INo=o(" (PLBart model)"),NNo=l(),K6=a("li"),A_e=a("strong"),qNo=o("prophetnet"),jNo=o(" \u2014 "),mX=a("a"),DNo=o("ProphetNetForCausalLM"),GNo=o(" (ProphetNet model)"),ONo=l(),Z6=a("li"),L_e=a("strong"),VNo=o("qdqbert"),XNo=o(" \u2014 "),gX=a("a"),zNo=o("QDQBertLMHeadModel"),WNo=o(" (QDQBert model)"),QNo=l(),e8=a("li"),y_e=a("strong"),UNo=o("reformer"),HNo=o(" \u2014 "),hX=a("a"),JNo=o("ReformerModelWithLMHead"),YNo=o(" (Reformer model)"),KNo=l(),o8=a("li"),x_e=a("strong"),ZNo=o("rembert"),eqo=o(" \u2014 "),pX=a("a"),oqo=o("RemBertForCausalLM"),rqo=o(" (RemBERT model)"),tqo=l(),r8=a("li"),$_e=a("strong"),aqo=o("roberta"),nqo=o(" \u2014 "),_X=a("a"),sqo=o("RobertaForCausalLM"),lqo=o(" (RoBERTa model)"),iqo=l(),t8=a("li"),k_e=a("strong"),dqo=o("roformer"),cqo=o(" \u2014 "),uX=a("a"),fqo=o("RoFormerForCausalLM"),mqo=o(" (RoFormer model)"),gqo=l(),a8=a("li"),S_e=a("strong"),hqo=o("speech_to_text_2"),pqo=o(" \u2014 "),bX=a("a"),_qo=o("Speech2Text2ForCausalLM"),uqo=o(" (Speech2Text2 model)"),bqo=l(),n8=a("li"),R_e=a("strong"),vqo=o("transfo-xl"),Fqo=o(" \u2014 "),vX=a("a"),Tqo=o("TransfoXLLMHeadModel"),Mqo=o(" (Transformer-XL model)"),Eqo=l(),s8=a("li"),P_e=a("strong"),Cqo=o("trocr"),wqo=o(" \u2014 "),FX=a("a"),Aqo=o("TrOCRForCausalLM"),Lqo=o(" (TrOCR model)"),yqo=l(),l8=a("li"),B_e=a("strong"),xqo=o("xglm"),$qo=o(" \u2014 "),TX=a("a"),kqo=o("XGLMForCausalLM"),Sqo=o(" (XGLM model)"),Rqo=l(),i8=a("li"),I_e=a("strong"),Pqo=o("xlm"),Bqo=o(" \u2014 "),MX=a("a"),Iqo=o("XLMWithLMHeadModel"),Nqo=o(" (XLM model)"),qqo=l(),d8=a("li"),N_e=a("strong"),jqo=o("xlm-prophetnet"),Dqo=o(" \u2014 "),EX=a("a"),Gqo=o("XLMProphetNetForCausalLM"),Oqo=o(" (XLM-ProphetNet model)"),Vqo=l(),c8=a("li"),q_e=a("strong"),Xqo=o("xlm-roberta"),zqo=o(" \u2014 "),CX=a("a"),Wqo=o("XLMRobertaForCausalLM"),Qqo=o(" (XLM-RoBERTa model)"),Uqo=l(),f8=a("li"),j_e=a("strong"),Hqo=o("xlm-roberta-xl"),Jqo=o(" \u2014 "),wX=a("a"),Yqo=o("XLMRobertaXLForCausalLM"),Kqo=o(" (XLM-RoBERTa-XL model)"),Zqo=l(),m8=a("li"),D_e=a("strong"),ejo=o("xlnet"),ojo=o(" \u2014 "),AX=a("a"),rjo=o("XLNetLMHeadModel"),tjo=o(" (XLNet model)"),ajo=l(),g8=a("p"),njo=o("The model is set in evaluation mode by default using "),G_e=a("code"),sjo=o("model.eval()"),ljo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=a("code"),ijo=o("model.train()"),djo=l(),F(h8.$$.fragment),nUe=l(),fd=a("h2"),p8=a("a"),V_e=a("span"),F(e9.$$.fragment),cjo=l(),X_e=a("span"),fjo=o("AutoModelForMaskedLM"),sUe=l(),Bo=a("div"),F(o9.$$.fragment),mjo=l(),md=a("p"),gjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LX=a("a"),hjo=o("from_pretrained()"),pjo=o(" class method or the "),yX=a("a"),_jo=o("from_config()"),ujo=o(` class
method.`),bjo=l(),r9=a("p"),vjo=o("This class cannot be instantiated directly using "),z_e=a("code"),Fjo=o("__init__()"),Tjo=o(" (throws an error)."),Mjo=l(),pt=a("div"),F(t9.$$.fragment),Ejo=l(),W_e=a("p"),Cjo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),wjo=l(),gd=a("p"),Ajo=o(`Note:
Loading a model from its configuration file does `),Q_e=a("strong"),Ljo=o("not"),yjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xX=a("a"),xjo=o("from_pretrained()"),$jo=o(" to load the model weights."),kjo=l(),F(_8.$$.fragment),Sjo=l(),eo=a("div"),F(a9.$$.fragment),Rjo=l(),U_e=a("p"),Pjo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Bjo=l(),Wa=a("p"),Ijo=o("The model class to instantiate is selected based on the "),H_e=a("code"),Njo=o("model_type"),qjo=o(` property of the config object (either
passed as an argument or loaded from `),J_e=a("code"),jjo=o("pretrained_model_name_or_path"),Djo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=a("code"),Gjo=o("pretrained_model_name_or_path"),Ojo=o(":"),Vjo=l(),U=a("ul"),u8=a("li"),K_e=a("strong"),Xjo=o("albert"),zjo=o(" \u2014 "),$X=a("a"),Wjo=o("AlbertForMaskedLM"),Qjo=o(" (ALBERT model)"),Ujo=l(),b8=a("li"),Z_e=a("strong"),Hjo=o("bart"),Jjo=o(" \u2014 "),kX=a("a"),Yjo=o("BartForConditionalGeneration"),Kjo=o(" (BART model)"),Zjo=l(),v8=a("li"),eue=a("strong"),eDo=o("bert"),oDo=o(" \u2014 "),SX=a("a"),rDo=o("BertForMaskedLM"),tDo=o(" (BERT model)"),aDo=l(),F8=a("li"),oue=a("strong"),nDo=o("big_bird"),sDo=o(" \u2014 "),RX=a("a"),lDo=o("BigBirdForMaskedLM"),iDo=o(" (BigBird model)"),dDo=l(),T8=a("li"),rue=a("strong"),cDo=o("camembert"),fDo=o(" \u2014 "),PX=a("a"),mDo=o("CamembertForMaskedLM"),gDo=o(" (CamemBERT model)"),hDo=l(),M8=a("li"),tue=a("strong"),pDo=o("convbert"),_Do=o(" \u2014 "),BX=a("a"),uDo=o("ConvBertForMaskedLM"),bDo=o(" (ConvBERT model)"),vDo=l(),E8=a("li"),aue=a("strong"),FDo=o("data2vec-text"),TDo=o(" \u2014 "),IX=a("a"),MDo=o("Data2VecTextForMaskedLM"),EDo=o(" (Data2VecText model)"),CDo=l(),C8=a("li"),nue=a("strong"),wDo=o("deberta"),ADo=o(" \u2014 "),NX=a("a"),LDo=o("DebertaForMaskedLM"),yDo=o(" (DeBERTa model)"),xDo=l(),w8=a("li"),sue=a("strong"),$Do=o("deberta-v2"),kDo=o(" \u2014 "),qX=a("a"),SDo=o("DebertaV2ForMaskedLM"),RDo=o(" (DeBERTa-v2 model)"),PDo=l(),A8=a("li"),lue=a("strong"),BDo=o("distilbert"),IDo=o(" \u2014 "),jX=a("a"),NDo=o("DistilBertForMaskedLM"),qDo=o(" (DistilBERT model)"),jDo=l(),L8=a("li"),iue=a("strong"),DDo=o("electra"),GDo=o(" \u2014 "),DX=a("a"),ODo=o("ElectraForMaskedLM"),VDo=o(" (ELECTRA model)"),XDo=l(),y8=a("li"),due=a("strong"),zDo=o("flaubert"),WDo=o(" \u2014 "),GX=a("a"),QDo=o("FlaubertWithLMHeadModel"),UDo=o(" (FlauBERT model)"),HDo=l(),x8=a("li"),cue=a("strong"),JDo=o("fnet"),YDo=o(" \u2014 "),OX=a("a"),KDo=o("FNetForMaskedLM"),ZDo=o(" (FNet model)"),eGo=l(),$8=a("li"),fue=a("strong"),oGo=o("funnel"),rGo=o(" \u2014 "),VX=a("a"),tGo=o("FunnelForMaskedLM"),aGo=o(" (Funnel Transformer model)"),nGo=l(),k8=a("li"),mue=a("strong"),sGo=o("ibert"),lGo=o(" \u2014 "),XX=a("a"),iGo=o("IBertForMaskedLM"),dGo=o(" (I-BERT model)"),cGo=l(),S8=a("li"),gue=a("strong"),fGo=o("layoutlm"),mGo=o(" \u2014 "),zX=a("a"),gGo=o("LayoutLMForMaskedLM"),hGo=o(" (LayoutLM model)"),pGo=l(),R8=a("li"),hue=a("strong"),_Go=o("longformer"),uGo=o(" \u2014 "),WX=a("a"),bGo=o("LongformerForMaskedLM"),vGo=o(" (Longformer model)"),FGo=l(),P8=a("li"),pue=a("strong"),TGo=o("luke"),MGo=o(" \u2014 "),QX=a("a"),EGo=o("LukeForMaskedLM"),CGo=o(" (LUKE model)"),wGo=l(),B8=a("li"),_ue=a("strong"),AGo=o("mbart"),LGo=o(" \u2014 "),UX=a("a"),yGo=o("MBartForConditionalGeneration"),xGo=o(" (mBART model)"),$Go=l(),I8=a("li"),uue=a("strong"),kGo=o("megatron-bert"),SGo=o(" \u2014 "),HX=a("a"),RGo=o("MegatronBertForMaskedLM"),PGo=o(" (Megatron-BERT model)"),BGo=l(),N8=a("li"),bue=a("strong"),IGo=o("mobilebert"),NGo=o(" \u2014 "),JX=a("a"),qGo=o("MobileBertForMaskedLM"),jGo=o(" (MobileBERT model)"),DGo=l(),q8=a("li"),vue=a("strong"),GGo=o("mpnet"),OGo=o(" \u2014 "),YX=a("a"),VGo=o("MPNetForMaskedLM"),XGo=o(" (MPNet model)"),zGo=l(),j8=a("li"),Fue=a("strong"),WGo=o("mvp"),QGo=o(" \u2014 "),KX=a("a"),UGo=o("MvpForConditionalGeneration"),HGo=o(" (MVP model)"),JGo=l(),D8=a("li"),Tue=a("strong"),YGo=o("nezha"),KGo=o(" \u2014 "),ZX=a("a"),ZGo=o("NezhaForMaskedLM"),eOo=o(" (Nezha model)"),oOo=l(),G8=a("li"),Mue=a("strong"),rOo=o("nystromformer"),tOo=o(" \u2014 "),ez=a("a"),aOo=o("NystromformerForMaskedLM"),nOo=o(" (Nystr\xF6mformer model)"),sOo=l(),O8=a("li"),Eue=a("strong"),lOo=o("perceiver"),iOo=o(" \u2014 "),oz=a("a"),dOo=o("PerceiverForMaskedLM"),cOo=o(" (Perceiver model)"),fOo=l(),V8=a("li"),Cue=a("strong"),mOo=o("qdqbert"),gOo=o(" \u2014 "),rz=a("a"),hOo=o("QDQBertForMaskedLM"),pOo=o(" (QDQBert model)"),_Oo=l(),X8=a("li"),wue=a("strong"),uOo=o("reformer"),bOo=o(" \u2014 "),tz=a("a"),vOo=o("ReformerForMaskedLM"),FOo=o(" (Reformer model)"),TOo=l(),z8=a("li"),Aue=a("strong"),MOo=o("rembert"),EOo=o(" \u2014 "),az=a("a"),COo=o("RemBertForMaskedLM"),wOo=o(" (RemBERT model)"),AOo=l(),W8=a("li"),Lue=a("strong"),LOo=o("roberta"),yOo=o(" \u2014 "),nz=a("a"),xOo=o("RobertaForMaskedLM"),$Oo=o(" (RoBERTa model)"),kOo=l(),Q8=a("li"),yue=a("strong"),SOo=o("roformer"),ROo=o(" \u2014 "),sz=a("a"),POo=o("RoFormerForMaskedLM"),BOo=o(" (RoFormer model)"),IOo=l(),U8=a("li"),xue=a("strong"),NOo=o("squeezebert"),qOo=o(" \u2014 "),lz=a("a"),jOo=o("SqueezeBertForMaskedLM"),DOo=o(" (SqueezeBERT model)"),GOo=l(),H8=a("li"),$ue=a("strong"),OOo=o("tapas"),VOo=o(" \u2014 "),iz=a("a"),XOo=o("TapasForMaskedLM"),zOo=o(" (TAPAS model)"),WOo=l(),J8=a("li"),kue=a("strong"),QOo=o("wav2vec2"),UOo=o(" \u2014 "),Sue=a("code"),HOo=o("Wav2Vec2ForMaskedLM"),JOo=o(" (Wav2Vec2 model)"),YOo=l(),Y8=a("li"),Rue=a("strong"),KOo=o("xlm"),ZOo=o(" \u2014 "),dz=a("a"),eVo=o("XLMWithLMHeadModel"),oVo=o(" (XLM model)"),rVo=l(),K8=a("li"),Pue=a("strong"),tVo=o("xlm-roberta"),aVo=o(" \u2014 "),cz=a("a"),nVo=o("XLMRobertaForMaskedLM"),sVo=o(" (XLM-RoBERTa model)"),lVo=l(),Z8=a("li"),Bue=a("strong"),iVo=o("xlm-roberta-xl"),dVo=o(" \u2014 "),fz=a("a"),cVo=o("XLMRobertaXLForMaskedLM"),fVo=o(" (XLM-RoBERTa-XL model)"),mVo=l(),e2=a("li"),Iue=a("strong"),gVo=o("yoso"),hVo=o(" \u2014 "),mz=a("a"),pVo=o("YosoForMaskedLM"),_Vo=o(" (YOSO model)"),uVo=l(),o2=a("p"),bVo=o("The model is set in evaluation mode by default using "),Nue=a("code"),vVo=o("model.eval()"),FVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),que=a("code"),TVo=o("model.train()"),MVo=l(),F(r2.$$.fragment),lUe=l(),hd=a("h2"),t2=a("a"),jue=a("span"),F(n9.$$.fragment),EVo=l(),Due=a("span"),CVo=o("AutoModelForSeq2SeqLM"),iUe=l(),Io=a("div"),F(s9.$$.fragment),wVo=l(),pd=a("p"),AVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gz=a("a"),LVo=o("from_pretrained()"),yVo=o(" class method or the "),hz=a("a"),xVo=o("from_config()"),$Vo=o(` class
method.`),kVo=l(),l9=a("p"),SVo=o("This class cannot be instantiated directly using "),Gue=a("code"),RVo=o("__init__()"),PVo=o(" (throws an error)."),BVo=l(),_t=a("div"),F(i9.$$.fragment),IVo=l(),Oue=a("p"),NVo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qVo=l(),_d=a("p"),jVo=o(`Note:
Loading a model from its configuration file does `),Vue=a("strong"),DVo=o("not"),GVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=a("a"),OVo=o("from_pretrained()"),VVo=o(" to load the model weights."),XVo=l(),F(a2.$$.fragment),zVo=l(),oo=a("div"),F(d9.$$.fragment),WVo=l(),Xue=a("p"),QVo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),UVo=l(),Qa=a("p"),HVo=o("The model class to instantiate is selected based on the "),zue=a("code"),JVo=o("model_type"),YVo=o(` property of the config object (either
passed as an argument or loaded from `),Wue=a("code"),KVo=o("pretrained_model_name_or_path"),ZVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=a("code"),eXo=o("pretrained_model_name_or_path"),oXo=o(":"),rXo=l(),me=a("ul"),n2=a("li"),Uue=a("strong"),tXo=o("bart"),aXo=o(" \u2014 "),_z=a("a"),nXo=o("BartForConditionalGeneration"),sXo=o(" (BART model)"),lXo=l(),s2=a("li"),Hue=a("strong"),iXo=o("bigbird_pegasus"),dXo=o(" \u2014 "),uz=a("a"),cXo=o("BigBirdPegasusForConditionalGeneration"),fXo=o(" (BigBird-Pegasus model)"),mXo=l(),l2=a("li"),Jue=a("strong"),gXo=o("blenderbot"),hXo=o(" \u2014 "),bz=a("a"),pXo=o("BlenderbotForConditionalGeneration"),_Xo=o(" (Blenderbot model)"),uXo=l(),i2=a("li"),Yue=a("strong"),bXo=o("blenderbot-small"),vXo=o(" \u2014 "),vz=a("a"),FXo=o("BlenderbotSmallForConditionalGeneration"),TXo=o(" (BlenderbotSmall model)"),MXo=l(),d2=a("li"),Kue=a("strong"),EXo=o("encoder-decoder"),CXo=o(" \u2014 "),Fz=a("a"),wXo=o("EncoderDecoderModel"),AXo=o(" (Encoder decoder model)"),LXo=l(),c2=a("li"),Zue=a("strong"),yXo=o("fsmt"),xXo=o(" \u2014 "),Tz=a("a"),$Xo=o("FSMTForConditionalGeneration"),kXo=o(" (FairSeq Machine-Translation model)"),SXo=l(),f2=a("li"),e1e=a("strong"),RXo=o("led"),PXo=o(" \u2014 "),Mz=a("a"),BXo=o("LEDForConditionalGeneration"),IXo=o(" (LED model)"),NXo=l(),m2=a("li"),o1e=a("strong"),qXo=o("longt5"),jXo=o(" \u2014 "),Ez=a("a"),DXo=o("LongT5ForConditionalGeneration"),GXo=o(" (LongT5 model)"),OXo=l(),g2=a("li"),r1e=a("strong"),VXo=o("m2m_100"),XXo=o(" \u2014 "),Cz=a("a"),zXo=o("M2M100ForConditionalGeneration"),WXo=o(" (M2M100 model)"),QXo=l(),h2=a("li"),t1e=a("strong"),UXo=o("marian"),HXo=o(" \u2014 "),wz=a("a"),JXo=o("MarianMTModel"),YXo=o(" (Marian model)"),KXo=l(),p2=a("li"),a1e=a("strong"),ZXo=o("mbart"),ezo=o(" \u2014 "),Az=a("a"),ozo=o("MBartForConditionalGeneration"),rzo=o(" (mBART model)"),tzo=l(),_2=a("li"),n1e=a("strong"),azo=o("mt5"),nzo=o(" \u2014 "),Lz=a("a"),szo=o("MT5ForConditionalGeneration"),lzo=o(" (MT5 model)"),izo=l(),u2=a("li"),s1e=a("strong"),dzo=o("mvp"),czo=o(" \u2014 "),yz=a("a"),fzo=o("MvpForConditionalGeneration"),mzo=o(" (MVP model)"),gzo=l(),b2=a("li"),l1e=a("strong"),hzo=o("nllb"),pzo=o(" \u2014 "),xz=a("a"),_zo=o("M2M100ForConditionalGeneration"),uzo=o(" (NLLB model)"),bzo=l(),v2=a("li"),i1e=a("strong"),vzo=o("pegasus"),Fzo=o(" \u2014 "),$z=a("a"),Tzo=o("PegasusForConditionalGeneration"),Mzo=o(" (Pegasus model)"),Ezo=l(),F2=a("li"),d1e=a("strong"),Czo=o("plbart"),wzo=o(" \u2014 "),kz=a("a"),Azo=o("PLBartForConditionalGeneration"),Lzo=o(" (PLBart model)"),yzo=l(),T2=a("li"),c1e=a("strong"),xzo=o("prophetnet"),$zo=o(" \u2014 "),Sz=a("a"),kzo=o("ProphetNetForConditionalGeneration"),Szo=o(" (ProphetNet model)"),Rzo=l(),M2=a("li"),f1e=a("strong"),Pzo=o("t5"),Bzo=o(" \u2014 "),Rz=a("a"),Izo=o("T5ForConditionalGeneration"),Nzo=o(" (T5 model)"),qzo=l(),E2=a("li"),m1e=a("strong"),jzo=o("xlm-prophetnet"),Dzo=o(" \u2014 "),Pz=a("a"),Gzo=o("XLMProphetNetForConditionalGeneration"),Ozo=o(" (XLM-ProphetNet model)"),Vzo=l(),C2=a("p"),Xzo=o("The model is set in evaluation mode by default using "),g1e=a("code"),zzo=o("model.eval()"),Wzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h1e=a("code"),Qzo=o("model.train()"),Uzo=l(),F(w2.$$.fragment),dUe=l(),ud=a("h2"),A2=a("a"),p1e=a("span"),F(c9.$$.fragment),Hzo=l(),_1e=a("span"),Jzo=o("AutoModelForSequenceClassification"),cUe=l(),No=a("div"),F(f9.$$.fragment),Yzo=l(),bd=a("p"),Kzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Bz=a("a"),Zzo=o("from_pretrained()"),eWo=o(" class method or the "),Iz=a("a"),oWo=o("from_config()"),rWo=o(` class
method.`),tWo=l(),m9=a("p"),aWo=o("This class cannot be instantiated directly using "),u1e=a("code"),nWo=o("__init__()"),sWo=o(" (throws an error)."),lWo=l(),ut=a("div"),F(g9.$$.fragment),iWo=l(),b1e=a("p"),dWo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cWo=l(),vd=a("p"),fWo=o(`Note:
Loading a model from its configuration file does `),v1e=a("strong"),mWo=o("not"),gWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=a("a"),hWo=o("from_pretrained()"),pWo=o(" to load the model weights."),_Wo=l(),F(L2.$$.fragment),uWo=l(),ro=a("div"),F(h9.$$.fragment),bWo=l(),F1e=a("p"),vWo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),FWo=l(),Ua=a("p"),TWo=o("The model class to instantiate is selected based on the "),T1e=a("code"),MWo=o("model_type"),EWo=o(` property of the config object (either
passed as an argument or loaded from `),M1e=a("code"),CWo=o("pretrained_model_name_or_path"),wWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=a("code"),AWo=o("pretrained_model_name_or_path"),LWo=o(":"),yWo=l(),N=a("ul"),y2=a("li"),C1e=a("strong"),xWo=o("albert"),$Wo=o(" \u2014 "),qz=a("a"),kWo=o("AlbertForSequenceClassification"),SWo=o(" (ALBERT model)"),RWo=l(),x2=a("li"),w1e=a("strong"),PWo=o("bart"),BWo=o(" \u2014 "),jz=a("a"),IWo=o("BartForSequenceClassification"),NWo=o(" (BART model)"),qWo=l(),$2=a("li"),A1e=a("strong"),jWo=o("bert"),DWo=o(" \u2014 "),Dz=a("a"),GWo=o("BertForSequenceClassification"),OWo=o(" (BERT model)"),VWo=l(),k2=a("li"),L1e=a("strong"),XWo=o("big_bird"),zWo=o(" \u2014 "),Gz=a("a"),WWo=o("BigBirdForSequenceClassification"),QWo=o(" (BigBird model)"),UWo=l(),S2=a("li"),y1e=a("strong"),HWo=o("bigbird_pegasus"),JWo=o(" \u2014 "),Oz=a("a"),YWo=o("BigBirdPegasusForSequenceClassification"),KWo=o(" (BigBird-Pegasus model)"),ZWo=l(),R2=a("li"),x1e=a("strong"),eQo=o("bloom"),oQo=o(" \u2014 "),Vz=a("a"),rQo=o("BloomForSequenceClassification"),tQo=o(" (BLOOM model)"),aQo=l(),P2=a("li"),$1e=a("strong"),nQo=o("camembert"),sQo=o(" \u2014 "),Xz=a("a"),lQo=o("CamembertForSequenceClassification"),iQo=o(" (CamemBERT model)"),dQo=l(),B2=a("li"),k1e=a("strong"),cQo=o("canine"),fQo=o(" \u2014 "),zz=a("a"),mQo=o("CanineForSequenceClassification"),gQo=o(" (CANINE model)"),hQo=l(),I2=a("li"),S1e=a("strong"),pQo=o("convbert"),_Qo=o(" \u2014 "),Wz=a("a"),uQo=o("ConvBertForSequenceClassification"),bQo=o(" (ConvBERT model)"),vQo=l(),N2=a("li"),R1e=a("strong"),FQo=o("ctrl"),TQo=o(" \u2014 "),Qz=a("a"),MQo=o("CTRLForSequenceClassification"),EQo=o(" (CTRL model)"),CQo=l(),q2=a("li"),P1e=a("strong"),wQo=o("data2vec-text"),AQo=o(" \u2014 "),Uz=a("a"),LQo=o("Data2VecTextForSequenceClassification"),yQo=o(" (Data2VecText model)"),xQo=l(),j2=a("li"),B1e=a("strong"),$Qo=o("deberta"),kQo=o(" \u2014 "),Hz=a("a"),SQo=o("DebertaForSequenceClassification"),RQo=o(" (DeBERTa model)"),PQo=l(),D2=a("li"),I1e=a("strong"),BQo=o("deberta-v2"),IQo=o(" \u2014 "),Jz=a("a"),NQo=o("DebertaV2ForSequenceClassification"),qQo=o(" (DeBERTa-v2 model)"),jQo=l(),G2=a("li"),N1e=a("strong"),DQo=o("distilbert"),GQo=o(" \u2014 "),Yz=a("a"),OQo=o("DistilBertForSequenceClassification"),VQo=o(" (DistilBERT model)"),XQo=l(),O2=a("li"),q1e=a("strong"),zQo=o("electra"),WQo=o(" \u2014 "),Kz=a("a"),QQo=o("ElectraForSequenceClassification"),UQo=o(" (ELECTRA model)"),HQo=l(),V2=a("li"),j1e=a("strong"),JQo=o("flaubert"),YQo=o(" \u2014 "),Zz=a("a"),KQo=o("FlaubertForSequenceClassification"),ZQo=o(" (FlauBERT model)"),eUo=l(),X2=a("li"),D1e=a("strong"),oUo=o("fnet"),rUo=o(" \u2014 "),eW=a("a"),tUo=o("FNetForSequenceClassification"),aUo=o(" (FNet model)"),nUo=l(),z2=a("li"),G1e=a("strong"),sUo=o("funnel"),lUo=o(" \u2014 "),oW=a("a"),iUo=o("FunnelForSequenceClassification"),dUo=o(" (Funnel Transformer model)"),cUo=l(),W2=a("li"),O1e=a("strong"),fUo=o("gpt2"),mUo=o(" \u2014 "),rW=a("a"),gUo=o("GPT2ForSequenceClassification"),hUo=o(" (OpenAI GPT-2 model)"),pUo=l(),Q2=a("li"),V1e=a("strong"),_Uo=o("gpt_neo"),uUo=o(" \u2014 "),tW=a("a"),bUo=o("GPTNeoForSequenceClassification"),vUo=o(" (GPT Neo model)"),FUo=l(),U2=a("li"),X1e=a("strong"),TUo=o("gptj"),MUo=o(" \u2014 "),aW=a("a"),EUo=o("GPTJForSequenceClassification"),CUo=o(" (GPT-J model)"),wUo=l(),H2=a("li"),z1e=a("strong"),AUo=o("ibert"),LUo=o(" \u2014 "),nW=a("a"),yUo=o("IBertForSequenceClassification"),xUo=o(" (I-BERT model)"),$Uo=l(),J2=a("li"),W1e=a("strong"),kUo=o("layoutlm"),SUo=o(" \u2014 "),sW=a("a"),RUo=o("LayoutLMForSequenceClassification"),PUo=o(" (LayoutLM model)"),BUo=l(),Y2=a("li"),Q1e=a("strong"),IUo=o("layoutlmv2"),NUo=o(" \u2014 "),lW=a("a"),qUo=o("LayoutLMv2ForSequenceClassification"),jUo=o(" (LayoutLMv2 model)"),DUo=l(),K2=a("li"),U1e=a("strong"),GUo=o("layoutlmv3"),OUo=o(" \u2014 "),iW=a("a"),VUo=o("LayoutLMv3ForSequenceClassification"),XUo=o(" (LayoutLMv3 model)"),zUo=l(),Z2=a("li"),H1e=a("strong"),WUo=o("led"),QUo=o(" \u2014 "),dW=a("a"),UUo=o("LEDForSequenceClassification"),HUo=o(" (LED model)"),JUo=l(),eb=a("li"),J1e=a("strong"),YUo=o("longformer"),KUo=o(" \u2014 "),cW=a("a"),ZUo=o("LongformerForSequenceClassification"),eHo=o(" (Longformer model)"),oHo=l(),ob=a("li"),Y1e=a("strong"),rHo=o("luke"),tHo=o(" \u2014 "),fW=a("a"),aHo=o("LukeForSequenceClassification"),nHo=o(" (LUKE model)"),sHo=l(),rb=a("li"),K1e=a("strong"),lHo=o("mbart"),iHo=o(" \u2014 "),mW=a("a"),dHo=o("MBartForSequenceClassification"),cHo=o(" (mBART model)"),fHo=l(),tb=a("li"),Z1e=a("strong"),mHo=o("megatron-bert"),gHo=o(" \u2014 "),gW=a("a"),hHo=o("MegatronBertForSequenceClassification"),pHo=o(" (Megatron-BERT model)"),_Ho=l(),ab=a("li"),e6e=a("strong"),uHo=o("mobilebert"),bHo=o(" \u2014 "),hW=a("a"),vHo=o("MobileBertForSequenceClassification"),FHo=o(" (MobileBERT model)"),THo=l(),nb=a("li"),o6e=a("strong"),MHo=o("mpnet"),EHo=o(" \u2014 "),pW=a("a"),CHo=o("MPNetForSequenceClassification"),wHo=o(" (MPNet model)"),AHo=l(),sb=a("li"),r6e=a("strong"),LHo=o("mvp"),yHo=o(" \u2014 "),_W=a("a"),xHo=o("MvpForSequenceClassification"),$Ho=o(" (MVP model)"),kHo=l(),lb=a("li"),t6e=a("strong"),SHo=o("nezha"),RHo=o(" \u2014 "),uW=a("a"),PHo=o("NezhaForSequenceClassification"),BHo=o(" (Nezha model)"),IHo=l(),ib=a("li"),a6e=a("strong"),NHo=o("nystromformer"),qHo=o(" \u2014 "),bW=a("a"),jHo=o("NystromformerForSequenceClassification"),DHo=o(" (Nystr\xF6mformer model)"),GHo=l(),db=a("li"),n6e=a("strong"),OHo=o("openai-gpt"),VHo=o(" \u2014 "),vW=a("a"),XHo=o("OpenAIGPTForSequenceClassification"),zHo=o(" (OpenAI GPT model)"),WHo=l(),cb=a("li"),s6e=a("strong"),QHo=o("opt"),UHo=o(" \u2014 "),FW=a("a"),HHo=o("OPTForSequenceClassification"),JHo=o(" (OPT model)"),YHo=l(),fb=a("li"),l6e=a("strong"),KHo=o("perceiver"),ZHo=o(" \u2014 "),TW=a("a"),eJo=o("PerceiverForSequenceClassification"),oJo=o(" (Perceiver model)"),rJo=l(),mb=a("li"),i6e=a("strong"),tJo=o("plbart"),aJo=o(" \u2014 "),MW=a("a"),nJo=o("PLBartForSequenceClassification"),sJo=o(" (PLBart model)"),lJo=l(),gb=a("li"),d6e=a("strong"),iJo=o("qdqbert"),dJo=o(" \u2014 "),EW=a("a"),cJo=o("QDQBertForSequenceClassification"),fJo=o(" (QDQBert model)"),mJo=l(),hb=a("li"),c6e=a("strong"),gJo=o("reformer"),hJo=o(" \u2014 "),CW=a("a"),pJo=o("ReformerForSequenceClassification"),_Jo=o(" (Reformer model)"),uJo=l(),pb=a("li"),f6e=a("strong"),bJo=o("rembert"),vJo=o(" \u2014 "),wW=a("a"),FJo=o("RemBertForSequenceClassification"),TJo=o(" (RemBERT model)"),MJo=l(),_b=a("li"),m6e=a("strong"),EJo=o("roberta"),CJo=o(" \u2014 "),AW=a("a"),wJo=o("RobertaForSequenceClassification"),AJo=o(" (RoBERTa model)"),LJo=l(),ub=a("li"),g6e=a("strong"),yJo=o("roformer"),xJo=o(" \u2014 "),LW=a("a"),$Jo=o("RoFormerForSequenceClassification"),kJo=o(" (RoFormer model)"),SJo=l(),bb=a("li"),h6e=a("strong"),RJo=o("squeezebert"),PJo=o(" \u2014 "),yW=a("a"),BJo=o("SqueezeBertForSequenceClassification"),IJo=o(" (SqueezeBERT model)"),NJo=l(),vb=a("li"),p6e=a("strong"),qJo=o("tapas"),jJo=o(" \u2014 "),xW=a("a"),DJo=o("TapasForSequenceClassification"),GJo=o(" (TAPAS model)"),OJo=l(),Fb=a("li"),_6e=a("strong"),VJo=o("transfo-xl"),XJo=o(" \u2014 "),$W=a("a"),zJo=o("TransfoXLForSequenceClassification"),WJo=o(" (Transformer-XL model)"),QJo=l(),Tb=a("li"),u6e=a("strong"),UJo=o("xlm"),HJo=o(" \u2014 "),kW=a("a"),JJo=o("XLMForSequenceClassification"),YJo=o(" (XLM model)"),KJo=l(),Mb=a("li"),b6e=a("strong"),ZJo=o("xlm-roberta"),eYo=o(" \u2014 "),SW=a("a"),oYo=o("XLMRobertaForSequenceClassification"),rYo=o(" (XLM-RoBERTa model)"),tYo=l(),Eb=a("li"),v6e=a("strong"),aYo=o("xlm-roberta-xl"),nYo=o(" \u2014 "),RW=a("a"),sYo=o("XLMRobertaXLForSequenceClassification"),lYo=o(" (XLM-RoBERTa-XL model)"),iYo=l(),Cb=a("li"),F6e=a("strong"),dYo=o("xlnet"),cYo=o(" \u2014 "),PW=a("a"),fYo=o("XLNetForSequenceClassification"),mYo=o(" (XLNet model)"),gYo=l(),wb=a("li"),T6e=a("strong"),hYo=o("yoso"),pYo=o(" \u2014 "),BW=a("a"),_Yo=o("YosoForSequenceClassification"),uYo=o(" (YOSO model)"),bYo=l(),Ab=a("p"),vYo=o("The model is set in evaluation mode by default using "),M6e=a("code"),FYo=o("model.eval()"),TYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E6e=a("code"),MYo=o("model.train()"),EYo=l(),F(Lb.$$.fragment),fUe=l(),Fd=a("h2"),yb=a("a"),C6e=a("span"),F(p9.$$.fragment),CYo=l(),w6e=a("span"),wYo=o("AutoModelForMultipleChoice"),mUe=l(),qo=a("div"),F(_9.$$.fragment),AYo=l(),Td=a("p"),LYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IW=a("a"),yYo=o("from_pretrained()"),xYo=o(" class method or the "),NW=a("a"),$Yo=o("from_config()"),kYo=o(` class
method.`),SYo=l(),u9=a("p"),RYo=o("This class cannot be instantiated directly using "),A6e=a("code"),PYo=o("__init__()"),BYo=o(" (throws an error)."),IYo=l(),bt=a("div"),F(b9.$$.fragment),NYo=l(),L6e=a("p"),qYo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),jYo=l(),Md=a("p"),DYo=o(`Note:
Loading a model from its configuration file does `),y6e=a("strong"),GYo=o("not"),OYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=a("a"),VYo=o("from_pretrained()"),XYo=o(" to load the model weights."),zYo=l(),F(xb.$$.fragment),WYo=l(),to=a("div"),F(v9.$$.fragment),QYo=l(),x6e=a("p"),UYo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),HYo=l(),Ha=a("p"),JYo=o("The model class to instantiate is selected based on the "),$6e=a("code"),YYo=o("model_type"),KYo=o(` property of the config object (either
passed as an argument or loaded from `),k6e=a("code"),ZYo=o("pretrained_model_name_or_path"),eKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S6e=a("code"),oKo=o("pretrained_model_name_or_path"),rKo=o(":"),tKo=l(),Z=a("ul"),$b=a("li"),R6e=a("strong"),aKo=o("albert"),nKo=o(" \u2014 "),jW=a("a"),sKo=o("AlbertForMultipleChoice"),lKo=o(" (ALBERT model)"),iKo=l(),kb=a("li"),P6e=a("strong"),dKo=o("bert"),cKo=o(" \u2014 "),DW=a("a"),fKo=o("BertForMultipleChoice"),mKo=o(" (BERT model)"),gKo=l(),Sb=a("li"),B6e=a("strong"),hKo=o("big_bird"),pKo=o(" \u2014 "),GW=a("a"),_Ko=o("BigBirdForMultipleChoice"),uKo=o(" (BigBird model)"),bKo=l(),Rb=a("li"),I6e=a("strong"),vKo=o("camembert"),FKo=o(" \u2014 "),OW=a("a"),TKo=o("CamembertForMultipleChoice"),MKo=o(" (CamemBERT model)"),EKo=l(),Pb=a("li"),N6e=a("strong"),CKo=o("canine"),wKo=o(" \u2014 "),VW=a("a"),AKo=o("CanineForMultipleChoice"),LKo=o(" (CANINE model)"),yKo=l(),Bb=a("li"),q6e=a("strong"),xKo=o("convbert"),$Ko=o(" \u2014 "),XW=a("a"),kKo=o("ConvBertForMultipleChoice"),SKo=o(" (ConvBERT model)"),RKo=l(),Ib=a("li"),j6e=a("strong"),PKo=o("data2vec-text"),BKo=o(" \u2014 "),zW=a("a"),IKo=o("Data2VecTextForMultipleChoice"),NKo=o(" (Data2VecText model)"),qKo=l(),Nb=a("li"),D6e=a("strong"),jKo=o("deberta-v2"),DKo=o(" \u2014 "),WW=a("a"),GKo=o("DebertaV2ForMultipleChoice"),OKo=o(" (DeBERTa-v2 model)"),VKo=l(),qb=a("li"),G6e=a("strong"),XKo=o("distilbert"),zKo=o(" \u2014 "),QW=a("a"),WKo=o("DistilBertForMultipleChoice"),QKo=o(" (DistilBERT model)"),UKo=l(),jb=a("li"),O6e=a("strong"),HKo=o("electra"),JKo=o(" \u2014 "),UW=a("a"),YKo=o("ElectraForMultipleChoice"),KKo=o(" (ELECTRA model)"),ZKo=l(),Db=a("li"),V6e=a("strong"),eZo=o("flaubert"),oZo=o(" \u2014 "),HW=a("a"),rZo=o("FlaubertForMultipleChoice"),tZo=o(" (FlauBERT model)"),aZo=l(),Gb=a("li"),X6e=a("strong"),nZo=o("fnet"),sZo=o(" \u2014 "),JW=a("a"),lZo=o("FNetForMultipleChoice"),iZo=o(" (FNet model)"),dZo=l(),Ob=a("li"),z6e=a("strong"),cZo=o("funnel"),fZo=o(" \u2014 "),YW=a("a"),mZo=o("FunnelForMultipleChoice"),gZo=o(" (Funnel Transformer model)"),hZo=l(),Vb=a("li"),W6e=a("strong"),pZo=o("ibert"),_Zo=o(" \u2014 "),KW=a("a"),uZo=o("IBertForMultipleChoice"),bZo=o(" (I-BERT model)"),vZo=l(),Xb=a("li"),Q6e=a("strong"),FZo=o("longformer"),TZo=o(" \u2014 "),ZW=a("a"),MZo=o("LongformerForMultipleChoice"),EZo=o(" (Longformer model)"),CZo=l(),zb=a("li"),U6e=a("strong"),wZo=o("luke"),AZo=o(" \u2014 "),eQ=a("a"),LZo=o("LukeForMultipleChoice"),yZo=o(" (LUKE model)"),xZo=l(),Wb=a("li"),H6e=a("strong"),$Zo=o("megatron-bert"),kZo=o(" \u2014 "),oQ=a("a"),SZo=o("MegatronBertForMultipleChoice"),RZo=o(" (Megatron-BERT model)"),PZo=l(),Qb=a("li"),J6e=a("strong"),BZo=o("mobilebert"),IZo=o(" \u2014 "),rQ=a("a"),NZo=o("MobileBertForMultipleChoice"),qZo=o(" (MobileBERT model)"),jZo=l(),Ub=a("li"),Y6e=a("strong"),DZo=o("mpnet"),GZo=o(" \u2014 "),tQ=a("a"),OZo=o("MPNetForMultipleChoice"),VZo=o(" (MPNet model)"),XZo=l(),Hb=a("li"),K6e=a("strong"),zZo=o("nezha"),WZo=o(" \u2014 "),aQ=a("a"),QZo=o("NezhaForMultipleChoice"),UZo=o(" (Nezha model)"),HZo=l(),Jb=a("li"),Z6e=a("strong"),JZo=o("nystromformer"),YZo=o(" \u2014 "),nQ=a("a"),KZo=o("NystromformerForMultipleChoice"),ZZo=o(" (Nystr\xF6mformer model)"),eer=l(),Yb=a("li"),e8e=a("strong"),oer=o("qdqbert"),rer=o(" \u2014 "),sQ=a("a"),ter=o("QDQBertForMultipleChoice"),aer=o(" (QDQBert model)"),ner=l(),Kb=a("li"),o8e=a("strong"),ser=o("rembert"),ler=o(" \u2014 "),lQ=a("a"),ier=o("RemBertForMultipleChoice"),der=o(" (RemBERT model)"),cer=l(),Zb=a("li"),r8e=a("strong"),fer=o("roberta"),mer=o(" \u2014 "),iQ=a("a"),ger=o("RobertaForMultipleChoice"),her=o(" (RoBERTa model)"),per=l(),ev=a("li"),t8e=a("strong"),_er=o("roformer"),uer=o(" \u2014 "),dQ=a("a"),ber=o("RoFormerForMultipleChoice"),ver=o(" (RoFormer model)"),Fer=l(),ov=a("li"),a8e=a("strong"),Ter=o("squeezebert"),Mer=o(" \u2014 "),cQ=a("a"),Eer=o("SqueezeBertForMultipleChoice"),Cer=o(" (SqueezeBERT model)"),wer=l(),rv=a("li"),n8e=a("strong"),Aer=o("xlm"),Ler=o(" \u2014 "),fQ=a("a"),yer=o("XLMForMultipleChoice"),xer=o(" (XLM model)"),$er=l(),tv=a("li"),s8e=a("strong"),ker=o("xlm-roberta"),Ser=o(" \u2014 "),mQ=a("a"),Rer=o("XLMRobertaForMultipleChoice"),Per=o(" (XLM-RoBERTa model)"),Ber=l(),av=a("li"),l8e=a("strong"),Ier=o("xlm-roberta-xl"),Ner=o(" \u2014 "),gQ=a("a"),qer=o("XLMRobertaXLForMultipleChoice"),jer=o(" (XLM-RoBERTa-XL model)"),Der=l(),nv=a("li"),i8e=a("strong"),Ger=o("xlnet"),Oer=o(" \u2014 "),hQ=a("a"),Ver=o("XLNetForMultipleChoice"),Xer=o(" (XLNet model)"),zer=l(),sv=a("li"),d8e=a("strong"),Wer=o("yoso"),Qer=o(" \u2014 "),pQ=a("a"),Uer=o("YosoForMultipleChoice"),Her=o(" (YOSO model)"),Jer=l(),lv=a("p"),Yer=o("The model is set in evaluation mode by default using "),c8e=a("code"),Ker=o("model.eval()"),Zer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f8e=a("code"),eor=o("model.train()"),oor=l(),F(iv.$$.fragment),gUe=l(),Ed=a("h2"),dv=a("a"),m8e=a("span"),F(F9.$$.fragment),ror=l(),g8e=a("span"),tor=o("AutoModelForNextSentencePrediction"),hUe=l(),jo=a("div"),F(T9.$$.fragment),aor=l(),Cd=a("p"),nor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_Q=a("a"),sor=o("from_pretrained()"),lor=o(" class method or the "),uQ=a("a"),ior=o("from_config()"),dor=o(` class
method.`),cor=l(),M9=a("p"),mor=o("This class cannot be instantiated directly using "),h8e=a("code"),gor=o("__init__()"),hor=o(" (throws an error)."),por=l(),vt=a("div"),F(E9.$$.fragment),_or=l(),p8e=a("p"),uor=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bor=l(),wd=a("p"),vor=o(`Note:
Loading a model from its configuration file does `),_8e=a("strong"),For=o("not"),Tor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=a("a"),Mor=o("from_pretrained()"),Eor=o(" to load the model weights."),Cor=l(),F(cv.$$.fragment),wor=l(),ao=a("div"),F(C9.$$.fragment),Aor=l(),u8e=a("p"),Lor=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),yor=l(),Ja=a("p"),xor=o("The model class to instantiate is selected based on the "),b8e=a("code"),$or=o("model_type"),kor=o(` property of the config object (either
passed as an argument or loaded from `),v8e=a("code"),Sor=o("pretrained_model_name_or_path"),Ror=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F8e=a("code"),Por=o("pretrained_model_name_or_path"),Bor=o(":"),Ior=l(),Do=a("ul"),fv=a("li"),T8e=a("strong"),Nor=o("bert"),qor=o(" \u2014 "),vQ=a("a"),jor=o("BertForNextSentencePrediction"),Dor=o(" (BERT model)"),Gor=l(),mv=a("li"),M8e=a("strong"),Oor=o("fnet"),Vor=o(" \u2014 "),FQ=a("a"),Xor=o("FNetForNextSentencePrediction"),zor=o(" (FNet model)"),Wor=l(),gv=a("li"),E8e=a("strong"),Qor=o("megatron-bert"),Uor=o(" \u2014 "),TQ=a("a"),Hor=o("MegatronBertForNextSentencePrediction"),Jor=o(" (Megatron-BERT model)"),Yor=l(),hv=a("li"),C8e=a("strong"),Kor=o("mobilebert"),Zor=o(" \u2014 "),MQ=a("a"),err=o("MobileBertForNextSentencePrediction"),orr=o(" (MobileBERT model)"),rrr=l(),pv=a("li"),w8e=a("strong"),trr=o("nezha"),arr=o(" \u2014 "),EQ=a("a"),nrr=o("NezhaForNextSentencePrediction"),srr=o(" (Nezha model)"),lrr=l(),_v=a("li"),A8e=a("strong"),irr=o("qdqbert"),drr=o(" \u2014 "),CQ=a("a"),crr=o("QDQBertForNextSentencePrediction"),frr=o(" (QDQBert model)"),mrr=l(),uv=a("p"),grr=o("The model is set in evaluation mode by default using "),L8e=a("code"),hrr=o("model.eval()"),prr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y8e=a("code"),_rr=o("model.train()"),urr=l(),F(bv.$$.fragment),pUe=l(),Ad=a("h2"),vv=a("a"),x8e=a("span"),F(w9.$$.fragment),brr=l(),$8e=a("span"),vrr=o("AutoModelForTokenClassification"),_Ue=l(),Go=a("div"),F(A9.$$.fragment),Frr=l(),Ld=a("p"),Trr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wQ=a("a"),Mrr=o("from_pretrained()"),Err=o(" class method or the "),AQ=a("a"),Crr=o("from_config()"),wrr=o(` class
method.`),Arr=l(),L9=a("p"),Lrr=o("This class cannot be instantiated directly using "),k8e=a("code"),yrr=o("__init__()"),xrr=o(" (throws an error)."),$rr=l(),Ft=a("div"),F(y9.$$.fragment),krr=l(),S8e=a("p"),Srr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Rrr=l(),yd=a("p"),Prr=o(`Note:
Loading a model from its configuration file does `),R8e=a("strong"),Brr=o("not"),Irr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LQ=a("a"),Nrr=o("from_pretrained()"),qrr=o(" to load the model weights."),jrr=l(),F(Fv.$$.fragment),Drr=l(),no=a("div"),F(x9.$$.fragment),Grr=l(),P8e=a("p"),Orr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Vrr=l(),Ya=a("p"),Xrr=o("The model class to instantiate is selected based on the "),B8e=a("code"),zrr=o("model_type"),Wrr=o(` property of the config object (either
passed as an argument or loaded from `),I8e=a("code"),Qrr=o("pretrained_model_name_or_path"),Urr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N8e=a("code"),Hrr=o("pretrained_model_name_or_path"),Jrr=o(":"),Yrr=l(),H=a("ul"),Tv=a("li"),q8e=a("strong"),Krr=o("albert"),Zrr=o(" \u2014 "),yQ=a("a"),etr=o("AlbertForTokenClassification"),otr=o(" (ALBERT model)"),rtr=l(),Mv=a("li"),j8e=a("strong"),ttr=o("bert"),atr=o(" \u2014 "),xQ=a("a"),ntr=o("BertForTokenClassification"),str=o(" (BERT model)"),ltr=l(),Ev=a("li"),D8e=a("strong"),itr=o("big_bird"),dtr=o(" \u2014 "),$Q=a("a"),ctr=o("BigBirdForTokenClassification"),ftr=o(" (BigBird model)"),mtr=l(),Cv=a("li"),G8e=a("strong"),gtr=o("bloom"),htr=o(" \u2014 "),kQ=a("a"),ptr=o("BloomForTokenClassification"),_tr=o(" (BLOOM model)"),utr=l(),wv=a("li"),O8e=a("strong"),btr=o("camembert"),vtr=o(" \u2014 "),SQ=a("a"),Ftr=o("CamembertForTokenClassification"),Ttr=o(" (CamemBERT model)"),Mtr=l(),Av=a("li"),V8e=a("strong"),Etr=o("canine"),Ctr=o(" \u2014 "),RQ=a("a"),wtr=o("CanineForTokenClassification"),Atr=o(" (CANINE model)"),Ltr=l(),Lv=a("li"),X8e=a("strong"),ytr=o("convbert"),xtr=o(" \u2014 "),PQ=a("a"),$tr=o("ConvBertForTokenClassification"),ktr=o(" (ConvBERT model)"),Str=l(),yv=a("li"),z8e=a("strong"),Rtr=o("data2vec-text"),Ptr=o(" \u2014 "),BQ=a("a"),Btr=o("Data2VecTextForTokenClassification"),Itr=o(" (Data2VecText model)"),Ntr=l(),xv=a("li"),W8e=a("strong"),qtr=o("deberta"),jtr=o(" \u2014 "),IQ=a("a"),Dtr=o("DebertaForTokenClassification"),Gtr=o(" (DeBERTa model)"),Otr=l(),$v=a("li"),Q8e=a("strong"),Vtr=o("deberta-v2"),Xtr=o(" \u2014 "),NQ=a("a"),ztr=o("DebertaV2ForTokenClassification"),Wtr=o(" (DeBERTa-v2 model)"),Qtr=l(),kv=a("li"),U8e=a("strong"),Utr=o("distilbert"),Htr=o(" \u2014 "),qQ=a("a"),Jtr=o("DistilBertForTokenClassification"),Ytr=o(" (DistilBERT model)"),Ktr=l(),Sv=a("li"),H8e=a("strong"),Ztr=o("electra"),ear=o(" \u2014 "),jQ=a("a"),oar=o("ElectraForTokenClassification"),rar=o(" (ELECTRA model)"),tar=l(),Rv=a("li"),J8e=a("strong"),aar=o("flaubert"),nar=o(" \u2014 "),DQ=a("a"),sar=o("FlaubertForTokenClassification"),lar=o(" (FlauBERT model)"),iar=l(),Pv=a("li"),Y8e=a("strong"),dar=o("fnet"),car=o(" \u2014 "),GQ=a("a"),far=o("FNetForTokenClassification"),mar=o(" (FNet model)"),gar=l(),Bv=a("li"),K8e=a("strong"),har=o("funnel"),par=o(" \u2014 "),OQ=a("a"),_ar=o("FunnelForTokenClassification"),uar=o(" (Funnel Transformer model)"),bar=l(),Iv=a("li"),Z8e=a("strong"),Far=o("gpt2"),Tar=o(" \u2014 "),VQ=a("a"),Mar=o("GPT2ForTokenClassification"),Ear=o(" (OpenAI GPT-2 model)"),Car=l(),Nv=a("li"),e2e=a("strong"),war=o("ibert"),Aar=o(" \u2014 "),XQ=a("a"),Lar=o("IBertForTokenClassification"),yar=o(" (I-BERT model)"),xar=l(),qv=a("li"),o2e=a("strong"),$ar=o("layoutlm"),kar=o(" \u2014 "),zQ=a("a"),Sar=o("LayoutLMForTokenClassification"),Rar=o(" (LayoutLM model)"),Par=l(),jv=a("li"),r2e=a("strong"),Bar=o("layoutlmv2"),Iar=o(" \u2014 "),WQ=a("a"),Nar=o("LayoutLMv2ForTokenClassification"),qar=o(" (LayoutLMv2 model)"),jar=l(),Dv=a("li"),t2e=a("strong"),Dar=o("layoutlmv3"),Gar=o(" \u2014 "),QQ=a("a"),Oar=o("LayoutLMv3ForTokenClassification"),Var=o(" (LayoutLMv3 model)"),Xar=l(),Gv=a("li"),a2e=a("strong"),zar=o("longformer"),War=o(" \u2014 "),UQ=a("a"),Qar=o("LongformerForTokenClassification"),Uar=o(" (Longformer model)"),Har=l(),Ov=a("li"),n2e=a("strong"),Jar=o("luke"),Yar=o(" \u2014 "),HQ=a("a"),Kar=o("LukeForTokenClassification"),Zar=o(" (LUKE model)"),enr=l(),Vv=a("li"),s2e=a("strong"),onr=o("megatron-bert"),rnr=o(" \u2014 "),JQ=a("a"),tnr=o("MegatronBertForTokenClassification"),anr=o(" (Megatron-BERT model)"),nnr=l(),Xv=a("li"),l2e=a("strong"),snr=o("mobilebert"),lnr=o(" \u2014 "),YQ=a("a"),inr=o("MobileBertForTokenClassification"),dnr=o(" (MobileBERT model)"),cnr=l(),zv=a("li"),i2e=a("strong"),fnr=o("mpnet"),mnr=o(" \u2014 "),KQ=a("a"),gnr=o("MPNetForTokenClassification"),hnr=o(" (MPNet model)"),pnr=l(),Wv=a("li"),d2e=a("strong"),_nr=o("nezha"),unr=o(" \u2014 "),ZQ=a("a"),bnr=o("NezhaForTokenClassification"),vnr=o(" (Nezha model)"),Fnr=l(),Qv=a("li"),c2e=a("strong"),Tnr=o("nystromformer"),Mnr=o(" \u2014 "),eU=a("a"),Enr=o("NystromformerForTokenClassification"),Cnr=o(" (Nystr\xF6mformer model)"),wnr=l(),Uv=a("li"),f2e=a("strong"),Anr=o("qdqbert"),Lnr=o(" \u2014 "),oU=a("a"),ynr=o("QDQBertForTokenClassification"),xnr=o(" (QDQBert model)"),$nr=l(),Hv=a("li"),m2e=a("strong"),knr=o("rembert"),Snr=o(" \u2014 "),rU=a("a"),Rnr=o("RemBertForTokenClassification"),Pnr=o(" (RemBERT model)"),Bnr=l(),Jv=a("li"),g2e=a("strong"),Inr=o("roberta"),Nnr=o(" \u2014 "),tU=a("a"),qnr=o("RobertaForTokenClassification"),jnr=o(" (RoBERTa model)"),Dnr=l(),Yv=a("li"),h2e=a("strong"),Gnr=o("roformer"),Onr=o(" \u2014 "),aU=a("a"),Vnr=o("RoFormerForTokenClassification"),Xnr=o(" (RoFormer model)"),znr=l(),Kv=a("li"),p2e=a("strong"),Wnr=o("squeezebert"),Qnr=o(" \u2014 "),nU=a("a"),Unr=o("SqueezeBertForTokenClassification"),Hnr=o(" (SqueezeBERT model)"),Jnr=l(),Zv=a("li"),_2e=a("strong"),Ynr=o("xlm"),Knr=o(" \u2014 "),sU=a("a"),Znr=o("XLMForTokenClassification"),esr=o(" (XLM model)"),osr=l(),eF=a("li"),u2e=a("strong"),rsr=o("xlm-roberta"),tsr=o(" \u2014 "),lU=a("a"),asr=o("XLMRobertaForTokenClassification"),nsr=o(" (XLM-RoBERTa model)"),ssr=l(),oF=a("li"),b2e=a("strong"),lsr=o("xlm-roberta-xl"),isr=o(" \u2014 "),iU=a("a"),dsr=o("XLMRobertaXLForTokenClassification"),csr=o(" (XLM-RoBERTa-XL model)"),fsr=l(),rF=a("li"),v2e=a("strong"),msr=o("xlnet"),gsr=o(" \u2014 "),dU=a("a"),hsr=o("XLNetForTokenClassification"),psr=o(" (XLNet model)"),_sr=l(),tF=a("li"),F2e=a("strong"),usr=o("yoso"),bsr=o(" \u2014 "),cU=a("a"),vsr=o("YosoForTokenClassification"),Fsr=o(" (YOSO model)"),Tsr=l(),aF=a("p"),Msr=o("The model is set in evaluation mode by default using "),T2e=a("code"),Esr=o("model.eval()"),Csr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M2e=a("code"),wsr=o("model.train()"),Asr=l(),F(nF.$$.fragment),uUe=l(),xd=a("h2"),sF=a("a"),E2e=a("span"),F($9.$$.fragment),Lsr=l(),C2e=a("span"),ysr=o("AutoModelForQuestionAnswering"),bUe=l(),Oo=a("div"),F(k9.$$.fragment),xsr=l(),$d=a("p"),$sr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fU=a("a"),ksr=o("from_pretrained()"),Ssr=o(" class method or the "),mU=a("a"),Rsr=o("from_config()"),Psr=o(` class
method.`),Bsr=l(),S9=a("p"),Isr=o("This class cannot be instantiated directly using "),w2e=a("code"),Nsr=o("__init__()"),qsr=o(" (throws an error)."),jsr=l(),Tt=a("div"),F(R9.$$.fragment),Dsr=l(),A2e=a("p"),Gsr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Osr=l(),kd=a("p"),Vsr=o(`Note:
Loading a model from its configuration file does `),L2e=a("strong"),Xsr=o("not"),zsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=a("a"),Wsr=o("from_pretrained()"),Qsr=o(" to load the model weights."),Usr=l(),F(lF.$$.fragment),Hsr=l(),so=a("div"),F(P9.$$.fragment),Jsr=l(),y2e=a("p"),Ysr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ksr=l(),Ka=a("p"),Zsr=o("The model class to instantiate is selected based on the "),x2e=a("code"),elr=o("model_type"),olr=o(` property of the config object (either
passed as an argument or loaded from `),$2e=a("code"),rlr=o("pretrained_model_name_or_path"),tlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k2e=a("code"),alr=o("pretrained_model_name_or_path"),nlr=o(":"),slr=l(),V=a("ul"),iF=a("li"),S2e=a("strong"),llr=o("albert"),ilr=o(" \u2014 "),hU=a("a"),dlr=o("AlbertForQuestionAnswering"),clr=o(" (ALBERT model)"),flr=l(),dF=a("li"),R2e=a("strong"),mlr=o("bart"),glr=o(" \u2014 "),pU=a("a"),hlr=o("BartForQuestionAnswering"),plr=o(" (BART model)"),_lr=l(),cF=a("li"),P2e=a("strong"),ulr=o("bert"),blr=o(" \u2014 "),_U=a("a"),vlr=o("BertForQuestionAnswering"),Flr=o(" (BERT model)"),Tlr=l(),fF=a("li"),B2e=a("strong"),Mlr=o("big_bird"),Elr=o(" \u2014 "),uU=a("a"),Clr=o("BigBirdForQuestionAnswering"),wlr=o(" (BigBird model)"),Alr=l(),mF=a("li"),I2e=a("strong"),Llr=o("bigbird_pegasus"),ylr=o(" \u2014 "),bU=a("a"),xlr=o("BigBirdPegasusForQuestionAnswering"),$lr=o(" (BigBird-Pegasus model)"),klr=l(),gF=a("li"),N2e=a("strong"),Slr=o("camembert"),Rlr=o(" \u2014 "),vU=a("a"),Plr=o("CamembertForQuestionAnswering"),Blr=o(" (CamemBERT model)"),Ilr=l(),hF=a("li"),q2e=a("strong"),Nlr=o("canine"),qlr=o(" \u2014 "),FU=a("a"),jlr=o("CanineForQuestionAnswering"),Dlr=o(" (CANINE model)"),Glr=l(),pF=a("li"),j2e=a("strong"),Olr=o("convbert"),Vlr=o(" \u2014 "),TU=a("a"),Xlr=o("ConvBertForQuestionAnswering"),zlr=o(" (ConvBERT model)"),Wlr=l(),_F=a("li"),D2e=a("strong"),Qlr=o("data2vec-text"),Ulr=o(" \u2014 "),MU=a("a"),Hlr=o("Data2VecTextForQuestionAnswering"),Jlr=o(" (Data2VecText model)"),Ylr=l(),uF=a("li"),G2e=a("strong"),Klr=o("deberta"),Zlr=o(" \u2014 "),EU=a("a"),eir=o("DebertaForQuestionAnswering"),oir=o(" (DeBERTa model)"),rir=l(),bF=a("li"),O2e=a("strong"),tir=o("deberta-v2"),air=o(" \u2014 "),CU=a("a"),nir=o("DebertaV2ForQuestionAnswering"),sir=o(" (DeBERTa-v2 model)"),lir=l(),vF=a("li"),V2e=a("strong"),iir=o("distilbert"),dir=o(" \u2014 "),wU=a("a"),cir=o("DistilBertForQuestionAnswering"),fir=o(" (DistilBERT model)"),mir=l(),FF=a("li"),X2e=a("strong"),gir=o("electra"),hir=o(" \u2014 "),AU=a("a"),pir=o("ElectraForQuestionAnswering"),_ir=o(" (ELECTRA model)"),uir=l(),TF=a("li"),z2e=a("strong"),bir=o("flaubert"),vir=o(" \u2014 "),LU=a("a"),Fir=o("FlaubertForQuestionAnsweringSimple"),Tir=o(" (FlauBERT model)"),Mir=l(),MF=a("li"),W2e=a("strong"),Eir=o("fnet"),Cir=o(" \u2014 "),yU=a("a"),wir=o("FNetForQuestionAnswering"),Air=o(" (FNet model)"),Lir=l(),EF=a("li"),Q2e=a("strong"),yir=o("funnel"),xir=o(" \u2014 "),xU=a("a"),$ir=o("FunnelForQuestionAnswering"),kir=o(" (Funnel Transformer model)"),Sir=l(),CF=a("li"),U2e=a("strong"),Rir=o("gptj"),Pir=o(" \u2014 "),$U=a("a"),Bir=o("GPTJForQuestionAnswering"),Iir=o(" (GPT-J model)"),Nir=l(),wF=a("li"),H2e=a("strong"),qir=o("ibert"),jir=o(" \u2014 "),kU=a("a"),Dir=o("IBertForQuestionAnswering"),Gir=o(" (I-BERT model)"),Oir=l(),AF=a("li"),J2e=a("strong"),Vir=o("layoutlmv2"),Xir=o(" \u2014 "),SU=a("a"),zir=o("LayoutLMv2ForQuestionAnswering"),Wir=o(" (LayoutLMv2 model)"),Qir=l(),LF=a("li"),Y2e=a("strong"),Uir=o("layoutlmv3"),Hir=o(" \u2014 "),RU=a("a"),Jir=o("LayoutLMv3ForQuestionAnswering"),Yir=o(" (LayoutLMv3 model)"),Kir=l(),yF=a("li"),K2e=a("strong"),Zir=o("led"),edr=o(" \u2014 "),PU=a("a"),odr=o("LEDForQuestionAnswering"),rdr=o(" (LED model)"),tdr=l(),xF=a("li"),Z2e=a("strong"),adr=o("longformer"),ndr=o(" \u2014 "),BU=a("a"),sdr=o("LongformerForQuestionAnswering"),ldr=o(" (Longformer model)"),idr=l(),$F=a("li"),ebe=a("strong"),ddr=o("luke"),cdr=o(" \u2014 "),IU=a("a"),fdr=o("LukeForQuestionAnswering"),mdr=o(" (LUKE model)"),gdr=l(),kF=a("li"),obe=a("strong"),hdr=o("lxmert"),pdr=o(" \u2014 "),NU=a("a"),_dr=o("LxmertForQuestionAnswering"),udr=o(" (LXMERT model)"),bdr=l(),SF=a("li"),rbe=a("strong"),vdr=o("mbart"),Fdr=o(" \u2014 "),qU=a("a"),Tdr=o("MBartForQuestionAnswering"),Mdr=o(" (mBART model)"),Edr=l(),RF=a("li"),tbe=a("strong"),Cdr=o("megatron-bert"),wdr=o(" \u2014 "),jU=a("a"),Adr=o("MegatronBertForQuestionAnswering"),Ldr=o(" (Megatron-BERT model)"),ydr=l(),PF=a("li"),abe=a("strong"),xdr=o("mobilebert"),$dr=o(" \u2014 "),DU=a("a"),kdr=o("MobileBertForQuestionAnswering"),Sdr=o(" (MobileBERT model)"),Rdr=l(),BF=a("li"),nbe=a("strong"),Pdr=o("mpnet"),Bdr=o(" \u2014 "),GU=a("a"),Idr=o("MPNetForQuestionAnswering"),Ndr=o(" (MPNet model)"),qdr=l(),IF=a("li"),sbe=a("strong"),jdr=o("mvp"),Ddr=o(" \u2014 "),OU=a("a"),Gdr=o("MvpForQuestionAnswering"),Odr=o(" (MVP model)"),Vdr=l(),NF=a("li"),lbe=a("strong"),Xdr=o("nezha"),zdr=o(" \u2014 "),VU=a("a"),Wdr=o("NezhaForQuestionAnswering"),Qdr=o(" (Nezha model)"),Udr=l(),qF=a("li"),ibe=a("strong"),Hdr=o("nystromformer"),Jdr=o(" \u2014 "),XU=a("a"),Ydr=o("NystromformerForQuestionAnswering"),Kdr=o(" (Nystr\xF6mformer model)"),Zdr=l(),jF=a("li"),dbe=a("strong"),ecr=o("qdqbert"),ocr=o(" \u2014 "),zU=a("a"),rcr=o("QDQBertForQuestionAnswering"),tcr=o(" (QDQBert model)"),acr=l(),DF=a("li"),cbe=a("strong"),ncr=o("reformer"),scr=o(" \u2014 "),WU=a("a"),lcr=o("ReformerForQuestionAnswering"),icr=o(" (Reformer model)"),dcr=l(),GF=a("li"),fbe=a("strong"),ccr=o("rembert"),fcr=o(" \u2014 "),QU=a("a"),mcr=o("RemBertForQuestionAnswering"),gcr=o(" (RemBERT model)"),hcr=l(),OF=a("li"),mbe=a("strong"),pcr=o("roberta"),_cr=o(" \u2014 "),UU=a("a"),ucr=o("RobertaForQuestionAnswering"),bcr=o(" (RoBERTa model)"),vcr=l(),VF=a("li"),gbe=a("strong"),Fcr=o("roformer"),Tcr=o(" \u2014 "),HU=a("a"),Mcr=o("RoFormerForQuestionAnswering"),Ecr=o(" (RoFormer model)"),Ccr=l(),XF=a("li"),hbe=a("strong"),wcr=o("splinter"),Acr=o(" \u2014 "),JU=a("a"),Lcr=o("SplinterForQuestionAnswering"),ycr=o(" (Splinter model)"),xcr=l(),zF=a("li"),pbe=a("strong"),$cr=o("squeezebert"),kcr=o(" \u2014 "),YU=a("a"),Scr=o("SqueezeBertForQuestionAnswering"),Rcr=o(" (SqueezeBERT model)"),Pcr=l(),WF=a("li"),_be=a("strong"),Bcr=o("xlm"),Icr=o(" \u2014 "),KU=a("a"),Ncr=o("XLMForQuestionAnsweringSimple"),qcr=o(" (XLM model)"),jcr=l(),QF=a("li"),ube=a("strong"),Dcr=o("xlm-roberta"),Gcr=o(" \u2014 "),ZU=a("a"),Ocr=o("XLMRobertaForQuestionAnswering"),Vcr=o(" (XLM-RoBERTa model)"),Xcr=l(),UF=a("li"),bbe=a("strong"),zcr=o("xlm-roberta-xl"),Wcr=o(" \u2014 "),eH=a("a"),Qcr=o("XLMRobertaXLForQuestionAnswering"),Ucr=o(" (XLM-RoBERTa-XL model)"),Hcr=l(),HF=a("li"),vbe=a("strong"),Jcr=o("xlnet"),Ycr=o(" \u2014 "),oH=a("a"),Kcr=o("XLNetForQuestionAnsweringSimple"),Zcr=o(" (XLNet model)"),efr=l(),JF=a("li"),Fbe=a("strong"),ofr=o("yoso"),rfr=o(" \u2014 "),rH=a("a"),tfr=o("YosoForQuestionAnswering"),afr=o(" (YOSO model)"),nfr=l(),YF=a("p"),sfr=o("The model is set in evaluation mode by default using "),Tbe=a("code"),lfr=o("model.eval()"),ifr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mbe=a("code"),dfr=o("model.train()"),cfr=l(),F(KF.$$.fragment),vUe=l(),Sd=a("h2"),ZF=a("a"),Ebe=a("span"),F(B9.$$.fragment),ffr=l(),Cbe=a("span"),mfr=o("AutoModelForTableQuestionAnswering"),FUe=l(),Vo=a("div"),F(I9.$$.fragment),gfr=l(),Rd=a("p"),hfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),tH=a("a"),pfr=o("from_pretrained()"),_fr=o(" class method or the "),aH=a("a"),ufr=o("from_config()"),bfr=o(` class
method.`),vfr=l(),N9=a("p"),Ffr=o("This class cannot be instantiated directly using "),wbe=a("code"),Tfr=o("__init__()"),Mfr=o(" (throws an error)."),Efr=l(),Mt=a("div"),F(q9.$$.fragment),Cfr=l(),Abe=a("p"),wfr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Afr=l(),Pd=a("p"),Lfr=o(`Note:
Loading a model from its configuration file does `),Lbe=a("strong"),yfr=o("not"),xfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=a("a"),$fr=o("from_pretrained()"),kfr=o(" to load the model weights."),Sfr=l(),F(eT.$$.fragment),Rfr=l(),lo=a("div"),F(j9.$$.fragment),Pfr=l(),ybe=a("p"),Bfr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Ifr=l(),Za=a("p"),Nfr=o("The model class to instantiate is selected based on the "),xbe=a("code"),qfr=o("model_type"),jfr=o(` property of the config object (either
passed as an argument or loaded from `),$be=a("code"),Dfr=o("pretrained_model_name_or_path"),Gfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kbe=a("code"),Ofr=o("pretrained_model_name_or_path"),Vfr=o(":"),Xfr=l(),Sbe=a("ul"),oT=a("li"),Rbe=a("strong"),zfr=o("tapas"),Wfr=o(" \u2014 "),sH=a("a"),Qfr=o("TapasForQuestionAnswering"),Ufr=o(" (TAPAS model)"),Hfr=l(),rT=a("p"),Jfr=o("The model is set in evaluation mode by default using "),Pbe=a("code"),Yfr=o("model.eval()"),Kfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bbe=a("code"),Zfr=o("model.train()"),emr=l(),F(tT.$$.fragment),TUe=l(),Bd=a("h2"),aT=a("a"),Ibe=a("span"),F(D9.$$.fragment),omr=l(),Nbe=a("span"),rmr=o("AutoModelForImageClassification"),MUe=l(),Xo=a("div"),F(G9.$$.fragment),tmr=l(),Id=a("p"),amr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lH=a("a"),nmr=o("from_pretrained()"),smr=o(" class method or the "),iH=a("a"),lmr=o("from_config()"),imr=o(` class
method.`),dmr=l(),O9=a("p"),cmr=o("This class cannot be instantiated directly using "),qbe=a("code"),fmr=o("__init__()"),mmr=o(" (throws an error)."),gmr=l(),Et=a("div"),F(V9.$$.fragment),hmr=l(),jbe=a("p"),pmr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_mr=l(),Nd=a("p"),umr=o(`Note:
Loading a model from its configuration file does `),Dbe=a("strong"),bmr=o("not"),vmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=a("a"),Fmr=o("from_pretrained()"),Tmr=o(" to load the model weights."),Mmr=l(),F(nT.$$.fragment),Emr=l(),io=a("div"),F(X9.$$.fragment),Cmr=l(),Gbe=a("p"),wmr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Amr=l(),en=a("p"),Lmr=o("The model class to instantiate is selected based on the "),Obe=a("code"),ymr=o("model_type"),xmr=o(` property of the config object (either
passed as an argument or loaded from `),Vbe=a("code"),$mr=o("pretrained_model_name_or_path"),kmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xbe=a("code"),Smr=o("pretrained_model_name_or_path"),Rmr=o(":"),Pmr=l(),be=a("ul"),sT=a("li"),zbe=a("strong"),Bmr=o("beit"),Imr=o(" \u2014 "),cH=a("a"),Nmr=o("BeitForImageClassification"),qmr=o(" (BEiT model)"),jmr=l(),lT=a("li"),Wbe=a("strong"),Dmr=o("convnext"),Gmr=o(" \u2014 "),fH=a("a"),Omr=o("ConvNextForImageClassification"),Vmr=o(" (ConvNeXT model)"),Xmr=l(),iT=a("li"),Qbe=a("strong"),zmr=o("cvt"),Wmr=o(" \u2014 "),mH=a("a"),Qmr=o("CvtForImageClassification"),Umr=o(" (CvT model)"),Hmr=l(),dT=a("li"),Ube=a("strong"),Jmr=o("data2vec-vision"),Ymr=o(" \u2014 "),gH=a("a"),Kmr=o("Data2VecVisionForImageClassification"),Zmr=o(" (Data2VecVision model)"),egr=l(),sl=a("li"),Hbe=a("strong"),ogr=o("deit"),rgr=o(" \u2014 "),hH=a("a"),tgr=o("DeiTForImageClassification"),agr=o(" or "),pH=a("a"),ngr=o("DeiTForImageClassificationWithTeacher"),sgr=o(" (DeiT model)"),lgr=l(),cT=a("li"),Jbe=a("strong"),igr=o("imagegpt"),dgr=o(" \u2014 "),_H=a("a"),cgr=o("ImageGPTForImageClassification"),fgr=o(" (ImageGPT model)"),mgr=l(),ll=a("li"),Ybe=a("strong"),ggr=o("levit"),hgr=o(" \u2014 "),uH=a("a"),pgr=o("LevitForImageClassification"),_gr=o(" or "),bH=a("a"),ugr=o("LevitForImageClassificationWithTeacher"),bgr=o(" (LeViT model)"),vgr=l(),fT=a("li"),Kbe=a("strong"),Fgr=o("mobilevit"),Tgr=o(" \u2014 "),vH=a("a"),Mgr=o("MobileViTForImageClassification"),Egr=o(" (MobileViT model)"),Cgr=l(),Ct=a("li"),Zbe=a("strong"),wgr=o("perceiver"),Agr=o(" \u2014 "),FH=a("a"),Lgr=o("PerceiverForImageClassificationLearned"),ygr=o(" or "),TH=a("a"),xgr=o("PerceiverForImageClassificationFourier"),$gr=o(" or "),MH=a("a"),kgr=o("PerceiverForImageClassificationConvProcessing"),Sgr=o(" (Perceiver model)"),Rgr=l(),mT=a("li"),eve=a("strong"),Pgr=o("poolformer"),Bgr=o(" \u2014 "),EH=a("a"),Igr=o("PoolFormerForImageClassification"),Ngr=o(" (PoolFormer model)"),qgr=l(),gT=a("li"),ove=a("strong"),jgr=o("regnet"),Dgr=o(" \u2014 "),CH=a("a"),Ggr=o("RegNetForImageClassification"),Ogr=o(" (RegNet model)"),Vgr=l(),hT=a("li"),rve=a("strong"),Xgr=o("resnet"),zgr=o(" \u2014 "),wH=a("a"),Wgr=o("ResNetForImageClassification"),Qgr=o(" (ResNet model)"),Ugr=l(),pT=a("li"),tve=a("strong"),Hgr=o("segformer"),Jgr=o(" \u2014 "),AH=a("a"),Ygr=o("SegformerForImageClassification"),Kgr=o(" (SegFormer model)"),Zgr=l(),_T=a("li"),ave=a("strong"),ehr=o("swin"),ohr=o(" \u2014 "),LH=a("a"),rhr=o("SwinForImageClassification"),thr=o(" (Swin Transformer model)"),ahr=l(),uT=a("li"),nve=a("strong"),nhr=o("swinv2"),shr=o(" \u2014 "),yH=a("a"),lhr=o("Swinv2ForImageClassification"),ihr=o(" (Swin Transformer V2 model)"),dhr=l(),bT=a("li"),sve=a("strong"),chr=o("van"),fhr=o(" \u2014 "),xH=a("a"),mhr=o("VanForImageClassification"),ghr=o(" (VAN model)"),hhr=l(),vT=a("li"),lve=a("strong"),phr=o("vit"),_hr=o(" \u2014 "),$H=a("a"),uhr=o("ViTForImageClassification"),bhr=o(" (ViT model)"),vhr=l(),FT=a("p"),Fhr=o("The model is set in evaluation mode by default using "),ive=a("code"),Thr=o("model.eval()"),Mhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dve=a("code"),Ehr=o("model.train()"),Chr=l(),F(TT.$$.fragment),EUe=l(),qd=a("h2"),MT=a("a"),cve=a("span"),F(z9.$$.fragment),whr=l(),fve=a("span"),Ahr=o("AutoModelForVideoClassification"),CUe=l(),zo=a("div"),F(W9.$$.fragment),Lhr=l(),jd=a("p"),yhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),kH=a("a"),xhr=o("from_pretrained()"),$hr=o(" class method or the "),SH=a("a"),khr=o("from_config()"),Shr=o(` class
method.`),Rhr=l(),Q9=a("p"),Phr=o("This class cannot be instantiated directly using "),mve=a("code"),Bhr=o("__init__()"),Ihr=o(" (throws an error)."),Nhr=l(),wt=a("div"),F(U9.$$.fragment),qhr=l(),gve=a("p"),jhr=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),Dhr=l(),Dd=a("p"),Ghr=o(`Note:
Loading a model from its configuration file does `),hve=a("strong"),Ohr=o("not"),Vhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),Xhr=o("from_pretrained()"),zhr=o(" to load the model weights."),Whr=l(),F(ET.$$.fragment),Qhr=l(),co=a("div"),F(H9.$$.fragment),Uhr=l(),pve=a("p"),Hhr=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),Jhr=l(),on=a("p"),Yhr=o("The model class to instantiate is selected based on the "),_ve=a("code"),Khr=o("model_type"),Zhr=o(` property of the config object (either
passed as an argument or loaded from `),uve=a("code"),epr=o("pretrained_model_name_or_path"),opr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=a("code"),rpr=o("pretrained_model_name_or_path"),tpr=o(":"),apr=l(),vve=a("ul"),CT=a("li"),Fve=a("strong"),npr=o("videomae"),spr=o(" \u2014 "),PH=a("a"),lpr=o("VideoMAEForVideoClassification"),ipr=o(" (VideoMAE model)"),dpr=l(),wT=a("p"),cpr=o("The model is set in evaluation mode by default using "),Tve=a("code"),fpr=o("model.eval()"),mpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mve=a("code"),gpr=o("model.train()"),hpr=l(),F(AT.$$.fragment),wUe=l(),Gd=a("h2"),LT=a("a"),Eve=a("span"),F(J9.$$.fragment),ppr=l(),Cve=a("span"),_pr=o("AutoModelForVision2Seq"),AUe=l(),Wo=a("div"),F(Y9.$$.fragment),upr=l(),Od=a("p"),bpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BH=a("a"),vpr=o("from_pretrained()"),Fpr=o(" class method or the "),IH=a("a"),Tpr=o("from_config()"),Mpr=o(` class
method.`),Epr=l(),K9=a("p"),Cpr=o("This class cannot be instantiated directly using "),wve=a("code"),wpr=o("__init__()"),Apr=o(" (throws an error)."),Lpr=l(),At=a("div"),F(Z9.$$.fragment),ypr=l(),Ave=a("p"),xpr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$pr=l(),Vd=a("p"),kpr=o(`Note:
Loading a model from its configuration file does `),Lve=a("strong"),Spr=o("not"),Rpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),Ppr=o("from_pretrained()"),Bpr=o(" to load the model weights."),Ipr=l(),F(yT.$$.fragment),Npr=l(),fo=a("div"),F(ex.$$.fragment),qpr=l(),yve=a("p"),jpr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Dpr=l(),rn=a("p"),Gpr=o("The model class to instantiate is selected based on the "),xve=a("code"),Opr=o("model_type"),Vpr=o(` property of the config object (either
passed as an argument or loaded from `),$ve=a("code"),Xpr=o("pretrained_model_name_or_path"),zpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=a("code"),Wpr=o("pretrained_model_name_or_path"),Qpr=o(":"),Upr=l(),Sve=a("ul"),xT=a("li"),Rve=a("strong"),Hpr=o("vision-encoder-decoder"),Jpr=o(" \u2014 "),qH=a("a"),Ypr=o("VisionEncoderDecoderModel"),Kpr=o(" (Vision Encoder decoder model)"),Zpr=l(),$T=a("p"),e_r=o("The model is set in evaluation mode by default using "),Pve=a("code"),o_r=o("model.eval()"),r_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bve=a("code"),t_r=o("model.train()"),a_r=l(),F(kT.$$.fragment),LUe=l(),Xd=a("h2"),ST=a("a"),Ive=a("span"),F(ox.$$.fragment),n_r=l(),Nve=a("span"),s_r=o("AutoModelForVisualQuestionAnswering"),yUe=l(),Qo=a("div"),F(rx.$$.fragment),l_r=l(),zd=a("p"),i_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),jH=a("a"),d_r=o("from_pretrained()"),c_r=o(" class method or the "),DH=a("a"),f_r=o("from_config()"),m_r=o(` class
method.`),g_r=l(),tx=a("p"),h_r=o("This class cannot be instantiated directly using "),qve=a("code"),p_r=o("__init__()"),__r=o(" (throws an error)."),u_r=l(),Lt=a("div"),F(ax.$$.fragment),b_r=l(),jve=a("p"),v_r=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),F_r=l(),Wd=a("p"),T_r=o(`Note:
Loading a model from its configuration file does `),Dve=a("strong"),M_r=o("not"),E_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=a("a"),C_r=o("from_pretrained()"),w_r=o(" to load the model weights."),A_r=l(),F(RT.$$.fragment),L_r=l(),mo=a("div"),F(nx.$$.fragment),y_r=l(),Gve=a("p"),x_r=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),$_r=l(),tn=a("p"),k_r=o("The model class to instantiate is selected based on the "),Ove=a("code"),S_r=o("model_type"),R_r=o(` property of the config object (either
passed as an argument or loaded from `),Vve=a("code"),P_r=o("pretrained_model_name_or_path"),B_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=a("code"),I_r=o("pretrained_model_name_or_path"),N_r=o(":"),q_r=l(),zve=a("ul"),PT=a("li"),Wve=a("strong"),j_r=o("vilt"),D_r=o(" \u2014 "),OH=a("a"),G_r=o("ViltForQuestionAnswering"),O_r=o(" (ViLT model)"),V_r=l(),BT=a("p"),X_r=o("The model is set in evaluation mode by default using "),Qve=a("code"),z_r=o("model.eval()"),W_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uve=a("code"),Q_r=o("model.train()"),U_r=l(),F(IT.$$.fragment),xUe=l(),Qd=a("h2"),NT=a("a"),Hve=a("span"),F(sx.$$.fragment),H_r=l(),Jve=a("span"),J_r=o("AutoModelForAudioClassification"),$Ue=l(),Uo=a("div"),F(lx.$$.fragment),Y_r=l(),Ud=a("p"),K_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),VH=a("a"),Z_r=o("from_pretrained()"),eur=o(" class method or the "),XH=a("a"),our=o("from_config()"),rur=o(` class
method.`),tur=l(),ix=a("p"),aur=o("This class cannot be instantiated directly using "),Yve=a("code"),nur=o("__init__()"),sur=o(" (throws an error)."),lur=l(),yt=a("div"),F(dx.$$.fragment),iur=l(),Kve=a("p"),dur=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),cur=l(),Hd=a("p"),fur=o(`Note:
Loading a model from its configuration file does `),Zve=a("strong"),mur=o("not"),gur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=a("a"),hur=o("from_pretrained()"),pur=o(" to load the model weights."),_ur=l(),F(qT.$$.fragment),uur=l(),go=a("div"),F(cx.$$.fragment),bur=l(),eFe=a("p"),vur=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Fur=l(),an=a("p"),Tur=o("The model class to instantiate is selected based on the "),oFe=a("code"),Mur=o("model_type"),Eur=o(` property of the config object (either
passed as an argument or loaded from `),rFe=a("code"),Cur=o("pretrained_model_name_or_path"),wur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tFe=a("code"),Aur=o("pretrained_model_name_or_path"),Lur=o(":"),yur=l(),Pe=a("ul"),jT=a("li"),aFe=a("strong"),xur=o("data2vec-audio"),$ur=o(" \u2014 "),WH=a("a"),kur=o("Data2VecAudioForSequenceClassification"),Sur=o(" (Data2VecAudio model)"),Rur=l(),DT=a("li"),nFe=a("strong"),Pur=o("hubert"),Bur=o(" \u2014 "),QH=a("a"),Iur=o("HubertForSequenceClassification"),Nur=o(" (Hubert model)"),qur=l(),GT=a("li"),sFe=a("strong"),jur=o("sew"),Dur=o(" \u2014 "),UH=a("a"),Gur=o("SEWForSequenceClassification"),Our=o(" (SEW model)"),Vur=l(),OT=a("li"),lFe=a("strong"),Xur=o("sew-d"),zur=o(" \u2014 "),HH=a("a"),Wur=o("SEWDForSequenceClassification"),Qur=o(" (SEW-D model)"),Uur=l(),VT=a("li"),iFe=a("strong"),Hur=o("unispeech"),Jur=o(" \u2014 "),JH=a("a"),Yur=o("UniSpeechForSequenceClassification"),Kur=o(" (UniSpeech model)"),Zur=l(),XT=a("li"),dFe=a("strong"),e1r=o("unispeech-sat"),o1r=o(" \u2014 "),YH=a("a"),r1r=o("UniSpeechSatForSequenceClassification"),t1r=o(" (UniSpeechSat model)"),a1r=l(),zT=a("li"),cFe=a("strong"),n1r=o("wav2vec2"),s1r=o(" \u2014 "),KH=a("a"),l1r=o("Wav2Vec2ForSequenceClassification"),i1r=o(" (Wav2Vec2 model)"),d1r=l(),WT=a("li"),fFe=a("strong"),c1r=o("wav2vec2-conformer"),f1r=o(" \u2014 "),ZH=a("a"),m1r=o("Wav2Vec2ConformerForSequenceClassification"),g1r=o(" (Wav2Vec2-Conformer model)"),h1r=l(),QT=a("li"),mFe=a("strong"),p1r=o("wavlm"),_1r=o(" \u2014 "),eJ=a("a"),u1r=o("WavLMForSequenceClassification"),b1r=o(" (WavLM model)"),v1r=l(),UT=a("p"),F1r=o("The model is set in evaluation mode by default using "),gFe=a("code"),T1r=o("model.eval()"),M1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hFe=a("code"),E1r=o("model.train()"),C1r=l(),F(HT.$$.fragment),kUe=l(),Jd=a("h2"),JT=a("a"),pFe=a("span"),F(fx.$$.fragment),w1r=l(),_Fe=a("span"),A1r=o("AutoModelForAudioFrameClassification"),SUe=l(),Ho=a("div"),F(mx.$$.fragment),L1r=l(),Yd=a("p"),y1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),oJ=a("a"),x1r=o("from_pretrained()"),$1r=o(" class method or the "),rJ=a("a"),k1r=o("from_config()"),S1r=o(` class
method.`),R1r=l(),gx=a("p"),P1r=o("This class cannot be instantiated directly using "),uFe=a("code"),B1r=o("__init__()"),I1r=o(" (throws an error)."),N1r=l(),xt=a("div"),F(hx.$$.fragment),q1r=l(),bFe=a("p"),j1r=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),D1r=l(),Kd=a("p"),G1r=o(`Note:
Loading a model from its configuration file does `),vFe=a("strong"),O1r=o("not"),V1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=a("a"),X1r=o("from_pretrained()"),z1r=o(" to load the model weights."),W1r=l(),F(YT.$$.fragment),Q1r=l(),ho=a("div"),F(px.$$.fragment),U1r=l(),FFe=a("p"),H1r=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),J1r=l(),nn=a("p"),Y1r=o("The model class to instantiate is selected based on the "),TFe=a("code"),K1r=o("model_type"),Z1r=o(` property of the config object (either
passed as an argument or loaded from `),MFe=a("code"),e6r=o("pretrained_model_name_or_path"),o6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=a("code"),r6r=o("pretrained_model_name_or_path"),t6r=o(":"),a6r=l(),st=a("ul"),KT=a("li"),CFe=a("strong"),n6r=o("data2vec-audio"),s6r=o(" \u2014 "),aJ=a("a"),l6r=o("Data2VecAudioForAudioFrameClassification"),i6r=o(" (Data2VecAudio model)"),d6r=l(),ZT=a("li"),wFe=a("strong"),c6r=o("unispeech-sat"),f6r=o(" \u2014 "),nJ=a("a"),m6r=o("UniSpeechSatForAudioFrameClassification"),g6r=o(" (UniSpeechSat model)"),h6r=l(),eM=a("li"),AFe=a("strong"),p6r=o("wav2vec2"),_6r=o(" \u2014 "),sJ=a("a"),u6r=o("Wav2Vec2ForAudioFrameClassification"),b6r=o(" (Wav2Vec2 model)"),v6r=l(),oM=a("li"),LFe=a("strong"),F6r=o("wav2vec2-conformer"),T6r=o(" \u2014 "),lJ=a("a"),M6r=o("Wav2Vec2ConformerForAudioFrameClassification"),E6r=o(" (Wav2Vec2-Conformer model)"),C6r=l(),rM=a("li"),yFe=a("strong"),w6r=o("wavlm"),A6r=o(" \u2014 "),iJ=a("a"),L6r=o("WavLMForAudioFrameClassification"),y6r=o(" (WavLM model)"),x6r=l(),tM=a("p"),$6r=o("The model is set in evaluation mode by default using "),xFe=a("code"),k6r=o("model.eval()"),S6r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Fe=a("code"),R6r=o("model.train()"),P6r=l(),F(aM.$$.fragment),RUe=l(),Zd=a("h2"),nM=a("a"),kFe=a("span"),F(_x.$$.fragment),B6r=l(),SFe=a("span"),I6r=o("AutoModelForCTC"),PUe=l(),Jo=a("div"),F(ux.$$.fragment),N6r=l(),ec=a("p"),q6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),dJ=a("a"),j6r=o("from_pretrained()"),D6r=o(" class method or the "),cJ=a("a"),G6r=o("from_config()"),O6r=o(` class
method.`),V6r=l(),bx=a("p"),X6r=o("This class cannot be instantiated directly using "),RFe=a("code"),z6r=o("__init__()"),W6r=o(" (throws an error)."),Q6r=l(),$t=a("div"),F(vx.$$.fragment),U6r=l(),PFe=a("p"),H6r=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),J6r=l(),oc=a("p"),Y6r=o(`Note:
Loading a model from its configuration file does `),BFe=a("strong"),K6r=o("not"),Z6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=a("a"),e8r=o("from_pretrained()"),o8r=o(" to load the model weights."),r8r=l(),F(sM.$$.fragment),t8r=l(),po=a("div"),F(Fx.$$.fragment),a8r=l(),IFe=a("p"),n8r=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),s8r=l(),sn=a("p"),l8r=o("The model class to instantiate is selected based on the "),NFe=a("code"),i8r=o("model_type"),d8r=o(` property of the config object (either
passed as an argument or loaded from `),qFe=a("code"),c8r=o("pretrained_model_name_or_path"),f8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jFe=a("code"),m8r=o("pretrained_model_name_or_path"),g8r=o(":"),h8r=l(),Le=a("ul"),lM=a("li"),DFe=a("strong"),p8r=o("data2vec-audio"),_8r=o(" \u2014 "),mJ=a("a"),u8r=o("Data2VecAudioForCTC"),b8r=o(" (Data2VecAudio model)"),v8r=l(),iM=a("li"),GFe=a("strong"),F8r=o("hubert"),T8r=o(" \u2014 "),gJ=a("a"),M8r=o("HubertForCTC"),E8r=o(" (Hubert model)"),C8r=l(),dM=a("li"),OFe=a("strong"),w8r=o("mctct"),A8r=o(" \u2014 "),hJ=a("a"),L8r=o("MCTCTForCTC"),y8r=o(" (M-CTC-T model)"),x8r=l(),cM=a("li"),VFe=a("strong"),$8r=o("sew"),k8r=o(" \u2014 "),pJ=a("a"),S8r=o("SEWForCTC"),R8r=o(" (SEW model)"),P8r=l(),fM=a("li"),XFe=a("strong"),B8r=o("sew-d"),I8r=o(" \u2014 "),_J=a("a"),N8r=o("SEWDForCTC"),q8r=o(" (SEW-D model)"),j8r=l(),mM=a("li"),zFe=a("strong"),D8r=o("unispeech"),G8r=o(" \u2014 "),uJ=a("a"),O8r=o("UniSpeechForCTC"),V8r=o(" (UniSpeech model)"),X8r=l(),gM=a("li"),WFe=a("strong"),z8r=o("unispeech-sat"),W8r=o(" \u2014 "),bJ=a("a"),Q8r=o("UniSpeechSatForCTC"),U8r=o(" (UniSpeechSat model)"),H8r=l(),hM=a("li"),QFe=a("strong"),J8r=o("wav2vec2"),Y8r=o(" \u2014 "),vJ=a("a"),K8r=o("Wav2Vec2ForCTC"),Z8r=o(" (Wav2Vec2 model)"),e2r=l(),pM=a("li"),UFe=a("strong"),o2r=o("wav2vec2-conformer"),r2r=o(" \u2014 "),FJ=a("a"),t2r=o("Wav2Vec2ConformerForCTC"),a2r=o(" (Wav2Vec2-Conformer model)"),n2r=l(),_M=a("li"),HFe=a("strong"),s2r=o("wavlm"),l2r=o(" \u2014 "),TJ=a("a"),i2r=o("WavLMForCTC"),d2r=o(" (WavLM model)"),c2r=l(),uM=a("p"),f2r=o("The model is set in evaluation mode by default using "),JFe=a("code"),m2r=o("model.eval()"),g2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),YFe=a("code"),h2r=o("model.train()"),p2r=l(),F(bM.$$.fragment),BUe=l(),rc=a("h2"),vM=a("a"),KFe=a("span"),F(Tx.$$.fragment),_2r=l(),ZFe=a("span"),u2r=o("AutoModelForSpeechSeq2Seq"),IUe=l(),Yo=a("div"),F(Mx.$$.fragment),b2r=l(),tc=a("p"),v2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),MJ=a("a"),F2r=o("from_pretrained()"),T2r=o(" class method or the "),EJ=a("a"),M2r=o("from_config()"),E2r=o(` class
method.`),C2r=l(),Ex=a("p"),w2r=o("This class cannot be instantiated directly using "),eTe=a("code"),A2r=o("__init__()"),L2r=o(" (throws an error)."),y2r=l(),kt=a("div"),F(Cx.$$.fragment),x2r=l(),oTe=a("p"),$2r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),k2r=l(),ac=a("p"),S2r=o(`Note:
Loading a model from its configuration file does `),rTe=a("strong"),R2r=o("not"),P2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CJ=a("a"),B2r=o("from_pretrained()"),I2r=o(" to load the model weights."),N2r=l(),F(FM.$$.fragment),q2r=l(),_o=a("div"),F(wx.$$.fragment),j2r=l(),tTe=a("p"),D2r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),G2r=l(),ln=a("p"),O2r=o("The model class to instantiate is selected based on the "),aTe=a("code"),V2r=o("model_type"),X2r=o(` property of the config object (either
passed as an argument or loaded from `),nTe=a("code"),z2r=o("pretrained_model_name_or_path"),W2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=a("code"),Q2r=o("pretrained_model_name_or_path"),U2r=o(":"),H2r=l(),Ax=a("ul"),TM=a("li"),lTe=a("strong"),J2r=o("speech-encoder-decoder"),Y2r=o(" \u2014 "),wJ=a("a"),K2r=o("SpeechEncoderDecoderModel"),Z2r=o(" (Speech Encoder decoder model)"),ebr=l(),MM=a("li"),iTe=a("strong"),obr=o("speech_to_text"),rbr=o(" \u2014 "),AJ=a("a"),tbr=o("Speech2TextForConditionalGeneration"),abr=o(" (Speech2Text model)"),nbr=l(),EM=a("p"),sbr=o("The model is set in evaluation mode by default using "),dTe=a("code"),lbr=o("model.eval()"),ibr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cTe=a("code"),dbr=o("model.train()"),cbr=l(),F(CM.$$.fragment),NUe=l(),nc=a("h2"),wM=a("a"),fTe=a("span"),F(Lx.$$.fragment),fbr=l(),mTe=a("span"),mbr=o("AutoModelForAudioXVector"),qUe=l(),Ko=a("div"),F(yx.$$.fragment),gbr=l(),sc=a("p"),hbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),LJ=a("a"),pbr=o("from_pretrained()"),_br=o(" class method or the "),yJ=a("a"),ubr=o("from_config()"),bbr=o(` class
method.`),vbr=l(),xx=a("p"),Fbr=o("This class cannot be instantiated directly using "),gTe=a("code"),Tbr=o("__init__()"),Mbr=o(" (throws an error)."),Ebr=l(),St=a("div"),F($x.$$.fragment),Cbr=l(),hTe=a("p"),wbr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Abr=l(),lc=a("p"),Lbr=o(`Note:
Loading a model from its configuration file does `),pTe=a("strong"),ybr=o("not"),xbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=a("a"),$br=o("from_pretrained()"),kbr=o(" to load the model weights."),Sbr=l(),F(AM.$$.fragment),Rbr=l(),uo=a("div"),F(kx.$$.fragment),Pbr=l(),_Te=a("p"),Bbr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Ibr=l(),dn=a("p"),Nbr=o("The model class to instantiate is selected based on the "),uTe=a("code"),qbr=o("model_type"),jbr=o(` property of the config object (either
passed as an argument or loaded from `),bTe=a("code"),Dbr=o("pretrained_model_name_or_path"),Gbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vTe=a("code"),Obr=o("pretrained_model_name_or_path"),Vbr=o(":"),Xbr=l(),lt=a("ul"),LM=a("li"),FTe=a("strong"),zbr=o("data2vec-audio"),Wbr=o(" \u2014 "),$J=a("a"),Qbr=o("Data2VecAudioForXVector"),Ubr=o(" (Data2VecAudio model)"),Hbr=l(),yM=a("li"),TTe=a("strong"),Jbr=o("unispeech-sat"),Ybr=o(" \u2014 "),kJ=a("a"),Kbr=o("UniSpeechSatForXVector"),Zbr=o(" (UniSpeechSat model)"),evr=l(),xM=a("li"),MTe=a("strong"),ovr=o("wav2vec2"),rvr=o(" \u2014 "),SJ=a("a"),tvr=o("Wav2Vec2ForXVector"),avr=o(" (Wav2Vec2 model)"),nvr=l(),$M=a("li"),ETe=a("strong"),svr=o("wav2vec2-conformer"),lvr=o(" \u2014 "),RJ=a("a"),ivr=o("Wav2Vec2ConformerForXVector"),dvr=o(" (Wav2Vec2-Conformer model)"),cvr=l(),kM=a("li"),CTe=a("strong"),fvr=o("wavlm"),mvr=o(" \u2014 "),PJ=a("a"),gvr=o("WavLMForXVector"),hvr=o(" (WavLM model)"),pvr=l(),SM=a("p"),_vr=o("The model is set in evaluation mode by default using "),wTe=a("code"),uvr=o("model.eval()"),bvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ATe=a("code"),vvr=o("model.train()"),Fvr=l(),F(RM.$$.fragment),jUe=l(),ic=a("h2"),PM=a("a"),LTe=a("span"),F(Sx.$$.fragment),Tvr=l(),yTe=a("span"),Mvr=o("AutoModelForMaskedImageModeling"),DUe=l(),Zo=a("div"),F(Rx.$$.fragment),Evr=l(),dc=a("p"),Cvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),BJ=a("a"),wvr=o("from_pretrained()"),Avr=o(" class method or the "),IJ=a("a"),Lvr=o("from_config()"),yvr=o(` class
method.`),xvr=l(),Px=a("p"),$vr=o("This class cannot be instantiated directly using "),xTe=a("code"),kvr=o("__init__()"),Svr=o(" (throws an error)."),Rvr=l(),Rt=a("div"),F(Bx.$$.fragment),Pvr=l(),$Te=a("p"),Bvr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Ivr=l(),cc=a("p"),Nvr=o(`Note:
Loading a model from its configuration file does `),kTe=a("strong"),qvr=o("not"),jvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=a("a"),Dvr=o("from_pretrained()"),Gvr=o(" to load the model weights."),Ovr=l(),F(BM.$$.fragment),Vvr=l(),bo=a("div"),F(Ix.$$.fragment),Xvr=l(),STe=a("p"),zvr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Wvr=l(),cn=a("p"),Qvr=o("The model class to instantiate is selected based on the "),RTe=a("code"),Uvr=o("model_type"),Hvr=o(` property of the config object (either
passed as an argument or loaded from `),PTe=a("code"),Jvr=o("pretrained_model_name_or_path"),Yvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=a("code"),Kvr=o("pretrained_model_name_or_path"),Zvr=o(":"),eFr=l(),fn=a("ul"),IM=a("li"),ITe=a("strong"),oFr=o("deit"),rFr=o(" \u2014 "),qJ=a("a"),tFr=o("DeiTForMaskedImageModeling"),aFr=o(" (DeiT model)"),nFr=l(),NM=a("li"),NTe=a("strong"),sFr=o("swin"),lFr=o(" \u2014 "),jJ=a("a"),iFr=o("SwinForMaskedImageModeling"),dFr=o(" (Swin Transformer model)"),cFr=l(),qM=a("li"),qTe=a("strong"),fFr=o("swinv2"),mFr=o(" \u2014 "),DJ=a("a"),gFr=o("Swinv2ForMaskedImageModeling"),hFr=o(" (Swin Transformer V2 model)"),pFr=l(),jM=a("li"),jTe=a("strong"),_Fr=o("vit"),uFr=o(" \u2014 "),GJ=a("a"),bFr=o("ViTForMaskedImageModeling"),vFr=o(" (ViT model)"),FFr=l(),DM=a("p"),TFr=o("The model is set in evaluation mode by default using "),DTe=a("code"),MFr=o("model.eval()"),EFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GTe=a("code"),CFr=o("model.train()"),wFr=l(),F(GM.$$.fragment),GUe=l(),fc=a("h2"),OM=a("a"),OTe=a("span"),F(Nx.$$.fragment),AFr=l(),VTe=a("span"),LFr=o("AutoModelForObjectDetection"),OUe=l(),er=a("div"),F(qx.$$.fragment),yFr=l(),mc=a("p"),xFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),OJ=a("a"),$Fr=o("from_pretrained()"),kFr=o(" class method or the "),VJ=a("a"),SFr=o("from_config()"),RFr=o(` class
method.`),PFr=l(),jx=a("p"),BFr=o("This class cannot be instantiated directly using "),XTe=a("code"),IFr=o("__init__()"),NFr=o(" (throws an error)."),qFr=l(),Pt=a("div"),F(Dx.$$.fragment),jFr=l(),zTe=a("p"),DFr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),GFr=l(),gc=a("p"),OFr=o(`Note:
Loading a model from its configuration file does `),WTe=a("strong"),VFr=o("not"),XFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=a("a"),zFr=o("from_pretrained()"),WFr=o(" to load the model weights."),QFr=l(),F(VM.$$.fragment),UFr=l(),vo=a("div"),F(Gx.$$.fragment),HFr=l(),QTe=a("p"),JFr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),YFr=l(),mn=a("p"),KFr=o("The model class to instantiate is selected based on the "),UTe=a("code"),ZFr=o("model_type"),eTr=o(` property of the config object (either
passed as an argument or loaded from `),HTe=a("code"),oTr=o("pretrained_model_name_or_path"),rTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=a("code"),tTr=o("pretrained_model_name_or_path"),aTr=o(":"),nTr=l(),Ox=a("ul"),XM=a("li"),YTe=a("strong"),sTr=o("detr"),lTr=o(" \u2014 "),zJ=a("a"),iTr=o("DetrForObjectDetection"),dTr=o(" (DETR model)"),cTr=l(),zM=a("li"),KTe=a("strong"),fTr=o("yolos"),mTr=o(" \u2014 "),WJ=a("a"),gTr=o("YolosForObjectDetection"),hTr=o(" (YOLOS model)"),pTr=l(),WM=a("p"),_Tr=o("The model is set in evaluation mode by default using "),ZTe=a("code"),uTr=o("model.eval()"),bTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eMe=a("code"),vTr=o("model.train()"),FTr=l(),F(QM.$$.fragment),VUe=l(),hc=a("h2"),UM=a("a"),oMe=a("span"),F(Vx.$$.fragment),TTr=l(),rMe=a("span"),MTr=o("AutoModelForImageSegmentation"),XUe=l(),or=a("div"),F(Xx.$$.fragment),ETr=l(),pc=a("p"),CTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),QJ=a("a"),wTr=o("from_pretrained()"),ATr=o(" class method or the "),UJ=a("a"),LTr=o("from_config()"),yTr=o(` class
method.`),xTr=l(),zx=a("p"),$Tr=o("This class cannot be instantiated directly using "),tMe=a("code"),kTr=o("__init__()"),STr=o(" (throws an error)."),RTr=l(),Bt=a("div"),F(Wx.$$.fragment),PTr=l(),aMe=a("p"),BTr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),ITr=l(),_c=a("p"),NTr=o(`Note:
Loading a model from its configuration file does `),nMe=a("strong"),qTr=o("not"),jTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=a("a"),DTr=o("from_pretrained()"),GTr=o(" to load the model weights."),OTr=l(),F(HM.$$.fragment),VTr=l(),Fo=a("div"),F(Qx.$$.fragment),XTr=l(),sMe=a("p"),zTr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),WTr=l(),gn=a("p"),QTr=o("The model class to instantiate is selected based on the "),lMe=a("code"),UTr=o("model_type"),HTr=o(` property of the config object (either
passed as an argument or loaded from `),iMe=a("code"),JTr=o("pretrained_model_name_or_path"),YTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=a("code"),KTr=o("pretrained_model_name_or_path"),ZTr=o(":"),eMr=l(),cMe=a("ul"),JM=a("li"),fMe=a("strong"),oMr=o("detr"),rMr=o(" \u2014 "),JJ=a("a"),tMr=o("DetrForSegmentation"),aMr=o(" (DETR model)"),nMr=l(),YM=a("p"),sMr=o("The model is set in evaluation mode by default using "),mMe=a("code"),lMr=o("model.eval()"),iMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gMe=a("code"),dMr=o("model.train()"),cMr=l(),F(KM.$$.fragment),zUe=l(),uc=a("h2"),ZM=a("a"),hMe=a("span"),F(Ux.$$.fragment),fMr=l(),pMe=a("span"),mMr=o("AutoModelForSemanticSegmentation"),WUe=l(),rr=a("div"),F(Hx.$$.fragment),gMr=l(),bc=a("p"),hMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),YJ=a("a"),pMr=o("from_pretrained()"),_Mr=o(" class method or the "),KJ=a("a"),uMr=o("from_config()"),bMr=o(` class
method.`),vMr=l(),Jx=a("p"),FMr=o("This class cannot be instantiated directly using "),_Me=a("code"),TMr=o("__init__()"),MMr=o(" (throws an error)."),EMr=l(),It=a("div"),F(Yx.$$.fragment),CMr=l(),uMe=a("p"),wMr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),AMr=l(),vc=a("p"),LMr=o(`Note:
Loading a model from its configuration file does `),bMe=a("strong"),yMr=o("not"),xMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=a("a"),$Mr=o("from_pretrained()"),kMr=o(" to load the model weights."),SMr=l(),F(eE.$$.fragment),RMr=l(),To=a("div"),F(Kx.$$.fragment),PMr=l(),vMe=a("p"),BMr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),IMr=l(),hn=a("p"),NMr=o("The model class to instantiate is selected based on the "),FMe=a("code"),qMr=o("model_type"),jMr=o(` property of the config object (either
passed as an argument or loaded from `),TMe=a("code"),DMr=o("pretrained_model_name_or_path"),GMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=a("code"),OMr=o("pretrained_model_name_or_path"),VMr=o(":"),XMr=l(),it=a("ul"),oE=a("li"),EMe=a("strong"),zMr=o("beit"),WMr=o(" \u2014 "),eY=a("a"),QMr=o("BeitForSemanticSegmentation"),UMr=o(" (BEiT model)"),HMr=l(),rE=a("li"),CMe=a("strong"),JMr=o("data2vec-vision"),YMr=o(" \u2014 "),oY=a("a"),KMr=o("Data2VecVisionForSemanticSegmentation"),ZMr=o(" (Data2VecVision model)"),eEr=l(),tE=a("li"),wMe=a("strong"),oEr=o("dpt"),rEr=o(" \u2014 "),rY=a("a"),tEr=o("DPTForSemanticSegmentation"),aEr=o(" (DPT model)"),nEr=l(),aE=a("li"),AMe=a("strong"),sEr=o("mobilevit"),lEr=o(" \u2014 "),tY=a("a"),iEr=o("MobileViTForSemanticSegmentation"),dEr=o(" (MobileViT model)"),cEr=l(),nE=a("li"),LMe=a("strong"),fEr=o("segformer"),mEr=o(" \u2014 "),aY=a("a"),gEr=o("SegformerForSemanticSegmentation"),hEr=o(" (SegFormer model)"),pEr=l(),sE=a("p"),_Er=o("The model is set in evaluation mode by default using "),yMe=a("code"),uEr=o("model.eval()"),bEr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xMe=a("code"),vEr=o("model.train()"),FEr=l(),F(lE.$$.fragment),QUe=l(),Fc=a("h2"),iE=a("a"),$Me=a("span"),F(Zx.$$.fragment),TEr=l(),kMe=a("span"),MEr=o("AutoModelForInstanceSegmentation"),UUe=l(),tr=a("div"),F(e$.$$.fragment),EEr=l(),Tc=a("p"),CEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),nY=a("a"),wEr=o("from_pretrained()"),AEr=o(" class method or the "),sY=a("a"),LEr=o("from_config()"),yEr=o(` class
method.`),xEr=l(),o$=a("p"),$Er=o("This class cannot be instantiated directly using "),SMe=a("code"),kEr=o("__init__()"),SEr=o(" (throws an error)."),REr=l(),Nt=a("div"),F(r$.$$.fragment),PEr=l(),RMe=a("p"),BEr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),IEr=l(),Mc=a("p"),NEr=o(`Note:
Loading a model from its configuration file does `),PMe=a("strong"),qEr=o("not"),jEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=a("a"),DEr=o("from_pretrained()"),GEr=o(" to load the model weights."),OEr=l(),F(dE.$$.fragment),VEr=l(),Mo=a("div"),F(t$.$$.fragment),XEr=l(),BMe=a("p"),zEr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),WEr=l(),pn=a("p"),QEr=o("The model class to instantiate is selected based on the "),IMe=a("code"),UEr=o("model_type"),HEr=o(` property of the config object (either
passed as an argument or loaded from `),NMe=a("code"),JEr=o("pretrained_model_name_or_path"),YEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qMe=a("code"),KEr=o("pretrained_model_name_or_path"),ZEr=o(":"),e4r=l(),jMe=a("ul"),cE=a("li"),DMe=a("strong"),o4r=o("maskformer"),r4r=o(" \u2014 "),iY=a("a"),t4r=o("MaskFormerForInstanceSegmentation"),a4r=o(" (MaskFormer model)"),n4r=l(),fE=a("p"),s4r=o("The model is set in evaluation mode by default using "),GMe=a("code"),l4r=o("model.eval()"),i4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OMe=a("code"),d4r=o("model.train()"),c4r=l(),F(mE.$$.fragment),HUe=l(),Ec=a("h2"),gE=a("a"),VMe=a("span"),F(a$.$$.fragment),f4r=l(),XMe=a("span"),m4r=o("TFAutoModel"),JUe=l(),ar=a("div"),F(n$.$$.fragment),g4r=l(),Cc=a("p"),h4r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dY=a("a"),p4r=o("from_pretrained()"),_4r=o(" class method or the "),cY=a("a"),u4r=o("from_config()"),b4r=o(` class
method.`),v4r=l(),s$=a("p"),F4r=o("This class cannot be instantiated directly using "),zMe=a("code"),T4r=o("__init__()"),M4r=o(" (throws an error)."),E4r=l(),qt=a("div"),F(l$.$$.fragment),C4r=l(),WMe=a("p"),w4r=o("Instantiates one of the base model classes of the library from a configuration."),A4r=l(),wc=a("p"),L4r=o(`Note:
Loading a model from its configuration file does `),QMe=a("strong"),y4r=o("not"),x4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),$4r=o("from_pretrained()"),k4r=o(" to load the model weights."),S4r=l(),F(hE.$$.fragment),R4r=l(),Rr=a("div"),F(i$.$$.fragment),P4r=l(),UMe=a("p"),B4r=o("Instantiate one of the base model classes of the library from a pretrained model."),I4r=l(),_n=a("p"),N4r=o("The model class to instantiate is selected based on the "),HMe=a("code"),q4r=o("model_type"),j4r=o(` property of the config object (either
passed as an argument or loaded from `),JMe=a("code"),D4r=o("pretrained_model_name_or_path"),G4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=a("code"),O4r=o("pretrained_model_name_or_path"),V4r=o(":"),X4r=l(),q=a("ul"),pE=a("li"),KMe=a("strong"),z4r=o("albert"),W4r=o(" \u2014 "),mY=a("a"),Q4r=o("TFAlbertModel"),U4r=o(" (ALBERT model)"),H4r=l(),_E=a("li"),ZMe=a("strong"),J4r=o("bart"),Y4r=o(" \u2014 "),gY=a("a"),K4r=o("TFBartModel"),Z4r=o(" (BART model)"),eCr=l(),uE=a("li"),eEe=a("strong"),oCr=o("bert"),rCr=o(" \u2014 "),hY=a("a"),tCr=o("TFBertModel"),aCr=o(" (BERT model)"),nCr=l(),bE=a("li"),oEe=a("strong"),sCr=o("blenderbot"),lCr=o(" \u2014 "),pY=a("a"),iCr=o("TFBlenderbotModel"),dCr=o(" (Blenderbot model)"),cCr=l(),vE=a("li"),rEe=a("strong"),fCr=o("blenderbot-small"),mCr=o(" \u2014 "),_Y=a("a"),gCr=o("TFBlenderbotSmallModel"),hCr=o(" (BlenderbotSmall model)"),pCr=l(),FE=a("li"),tEe=a("strong"),_Cr=o("camembert"),uCr=o(" \u2014 "),uY=a("a"),bCr=o("TFCamembertModel"),vCr=o(" (CamemBERT model)"),FCr=l(),TE=a("li"),aEe=a("strong"),TCr=o("clip"),MCr=o(" \u2014 "),bY=a("a"),ECr=o("TFCLIPModel"),CCr=o(" (CLIP model)"),wCr=l(),ME=a("li"),nEe=a("strong"),ACr=o("convbert"),LCr=o(" \u2014 "),vY=a("a"),yCr=o("TFConvBertModel"),xCr=o(" (ConvBERT model)"),$Cr=l(),EE=a("li"),sEe=a("strong"),kCr=o("convnext"),SCr=o(" \u2014 "),FY=a("a"),RCr=o("TFConvNextModel"),PCr=o(" (ConvNeXT model)"),BCr=l(),CE=a("li"),lEe=a("strong"),ICr=o("ctrl"),NCr=o(" \u2014 "),TY=a("a"),qCr=o("TFCTRLModel"),jCr=o(" (CTRL model)"),DCr=l(),wE=a("li"),iEe=a("strong"),GCr=o("data2vec-vision"),OCr=o(" \u2014 "),MY=a("a"),VCr=o("TFData2VecVisionModel"),XCr=o(" (Data2VecVision model)"),zCr=l(),AE=a("li"),dEe=a("strong"),WCr=o("deberta"),QCr=o(" \u2014 "),EY=a("a"),UCr=o("TFDebertaModel"),HCr=o(" (DeBERTa model)"),JCr=l(),LE=a("li"),cEe=a("strong"),YCr=o("deberta-v2"),KCr=o(" \u2014 "),CY=a("a"),ZCr=o("TFDebertaV2Model"),e3r=o(" (DeBERTa-v2 model)"),o3r=l(),yE=a("li"),fEe=a("strong"),r3r=o("deit"),t3r=o(" \u2014 "),wY=a("a"),a3r=o("TFDeiTModel"),n3r=o(" (DeiT model)"),s3r=l(),xE=a("li"),mEe=a("strong"),l3r=o("distilbert"),i3r=o(" \u2014 "),AY=a("a"),d3r=o("TFDistilBertModel"),c3r=o(" (DistilBERT model)"),f3r=l(),$E=a("li"),gEe=a("strong"),m3r=o("dpr"),g3r=o(" \u2014 "),LY=a("a"),h3r=o("TFDPRQuestionEncoder"),p3r=o(" (DPR model)"),_3r=l(),kE=a("li"),hEe=a("strong"),u3r=o("electra"),b3r=o(" \u2014 "),yY=a("a"),v3r=o("TFElectraModel"),F3r=o(" (ELECTRA model)"),T3r=l(),SE=a("li"),pEe=a("strong"),M3r=o("flaubert"),E3r=o(" \u2014 "),xY=a("a"),C3r=o("TFFlaubertModel"),w3r=o(" (FlauBERT model)"),A3r=l(),il=a("li"),_Ee=a("strong"),L3r=o("funnel"),y3r=o(" \u2014 "),$Y=a("a"),x3r=o("TFFunnelModel"),$3r=o(" or "),kY=a("a"),k3r=o("TFFunnelBaseModel"),S3r=o(" (Funnel Transformer model)"),R3r=l(),RE=a("li"),uEe=a("strong"),P3r=o("gpt2"),B3r=o(" \u2014 "),SY=a("a"),I3r=o("TFGPT2Model"),N3r=o(" (OpenAI GPT-2 model)"),q3r=l(),PE=a("li"),bEe=a("strong"),j3r=o("gptj"),D3r=o(" \u2014 "),RY=a("a"),G3r=o("TFGPTJModel"),O3r=o(" (GPT-J model)"),V3r=l(),BE=a("li"),vEe=a("strong"),X3r=o("hubert"),z3r=o(" \u2014 "),PY=a("a"),W3r=o("TFHubertModel"),Q3r=o(" (Hubert model)"),U3r=l(),IE=a("li"),FEe=a("strong"),H3r=o("layoutlm"),J3r=o(" \u2014 "),BY=a("a"),Y3r=o("TFLayoutLMModel"),K3r=o(" (LayoutLM model)"),Z3r=l(),NE=a("li"),TEe=a("strong"),e5r=o("led"),o5r=o(" \u2014 "),IY=a("a"),r5r=o("TFLEDModel"),t5r=o(" (LED model)"),a5r=l(),qE=a("li"),MEe=a("strong"),n5r=o("longformer"),s5r=o(" \u2014 "),NY=a("a"),l5r=o("TFLongformerModel"),i5r=o(" (Longformer model)"),d5r=l(),jE=a("li"),EEe=a("strong"),c5r=o("lxmert"),f5r=o(" \u2014 "),qY=a("a"),m5r=o("TFLxmertModel"),g5r=o(" (LXMERT model)"),h5r=l(),DE=a("li"),CEe=a("strong"),p5r=o("marian"),_5r=o(" \u2014 "),jY=a("a"),u5r=o("TFMarianModel"),b5r=o(" (Marian model)"),v5r=l(),GE=a("li"),wEe=a("strong"),F5r=o("mbart"),T5r=o(" \u2014 "),DY=a("a"),M5r=o("TFMBartModel"),E5r=o(" (mBART model)"),C5r=l(),OE=a("li"),AEe=a("strong"),w5r=o("mobilebert"),A5r=o(" \u2014 "),GY=a("a"),L5r=o("TFMobileBertModel"),y5r=o(" (MobileBERT model)"),x5r=l(),VE=a("li"),LEe=a("strong"),$5r=o("mpnet"),k5r=o(" \u2014 "),OY=a("a"),S5r=o("TFMPNetModel"),R5r=o(" (MPNet model)"),P5r=l(),XE=a("li"),yEe=a("strong"),B5r=o("mt5"),I5r=o(" \u2014 "),VY=a("a"),N5r=o("TFMT5Model"),q5r=o(" (MT5 model)"),j5r=l(),zE=a("li"),xEe=a("strong"),D5r=o("openai-gpt"),G5r=o(" \u2014 "),XY=a("a"),O5r=o("TFOpenAIGPTModel"),V5r=o(" (OpenAI GPT model)"),X5r=l(),WE=a("li"),$Ee=a("strong"),z5r=o("opt"),W5r=o(" \u2014 "),zY=a("a"),Q5r=o("TFOPTModel"),U5r=o(" (OPT model)"),H5r=l(),QE=a("li"),kEe=a("strong"),J5r=o("pegasus"),Y5r=o(" \u2014 "),WY=a("a"),K5r=o("TFPegasusModel"),Z5r=o(" (Pegasus model)"),e0r=l(),UE=a("li"),SEe=a("strong"),o0r=o("regnet"),r0r=o(" \u2014 "),QY=a("a"),t0r=o("TFRegNetModel"),a0r=o(" (RegNet model)"),n0r=l(),HE=a("li"),REe=a("strong"),s0r=o("rembert"),l0r=o(" \u2014 "),UY=a("a"),i0r=o("TFRemBertModel"),d0r=o(" (RemBERT model)"),c0r=l(),JE=a("li"),PEe=a("strong"),f0r=o("resnet"),m0r=o(" \u2014 "),HY=a("a"),g0r=o("TFResNetModel"),h0r=o(" (ResNet model)"),p0r=l(),YE=a("li"),BEe=a("strong"),_0r=o("roberta"),u0r=o(" \u2014 "),JY=a("a"),b0r=o("TFRobertaModel"),v0r=o(" (RoBERTa model)"),F0r=l(),KE=a("li"),IEe=a("strong"),T0r=o("roformer"),M0r=o(" \u2014 "),YY=a("a"),E0r=o("TFRoFormerModel"),C0r=o(" (RoFormer model)"),w0r=l(),ZE=a("li"),NEe=a("strong"),A0r=o("segformer"),L0r=o(" \u2014 "),KY=a("a"),y0r=o("TFSegformerModel"),x0r=o(" (SegFormer model)"),$0r=l(),e4=a("li"),qEe=a("strong"),k0r=o("speech_to_text"),S0r=o(" \u2014 "),ZY=a("a"),R0r=o("TFSpeech2TextModel"),P0r=o(" (Speech2Text model)"),B0r=l(),o4=a("li"),jEe=a("strong"),I0r=o("swin"),N0r=o(" \u2014 "),eK=a("a"),q0r=o("TFSwinModel"),j0r=o(" (Swin Transformer model)"),D0r=l(),r4=a("li"),DEe=a("strong"),G0r=o("t5"),O0r=o(" \u2014 "),oK=a("a"),V0r=o("TFT5Model"),X0r=o(" (T5 model)"),z0r=l(),t4=a("li"),GEe=a("strong"),W0r=o("tapas"),Q0r=o(" \u2014 "),rK=a("a"),U0r=o("TFTapasModel"),H0r=o(" (TAPAS model)"),J0r=l(),a4=a("li"),OEe=a("strong"),Y0r=o("transfo-xl"),K0r=o(" \u2014 "),tK=a("a"),Z0r=o("TFTransfoXLModel"),ewr=o(" (Transformer-XL model)"),owr=l(),n4=a("li"),VEe=a("strong"),rwr=o("vit"),twr=o(" \u2014 "),aK=a("a"),awr=o("TFViTModel"),nwr=o(" (ViT model)"),swr=l(),s4=a("li"),XEe=a("strong"),lwr=o("vit_mae"),iwr=o(" \u2014 "),nK=a("a"),dwr=o("TFViTMAEModel"),cwr=o(" (ViTMAE model)"),fwr=l(),l4=a("li"),zEe=a("strong"),mwr=o("wav2vec2"),gwr=o(" \u2014 "),sK=a("a"),hwr=o("TFWav2Vec2Model"),pwr=o(" (Wav2Vec2 model)"),_wr=l(),i4=a("li"),WEe=a("strong"),uwr=o("xlm"),bwr=o(" \u2014 "),lK=a("a"),vwr=o("TFXLMModel"),Fwr=o(" (XLM model)"),Twr=l(),d4=a("li"),QEe=a("strong"),Mwr=o("xlm-roberta"),Ewr=o(" \u2014 "),iK=a("a"),Cwr=o("TFXLMRobertaModel"),wwr=o(" (XLM-RoBERTa model)"),Awr=l(),c4=a("li"),UEe=a("strong"),Lwr=o("xlnet"),ywr=o(" \u2014 "),dK=a("a"),xwr=o("TFXLNetModel"),$wr=o(" (XLNet model)"),kwr=l(),F(f4.$$.fragment),YUe=l(),Ac=a("h2"),m4=a("a"),HEe=a("span"),F(d$.$$.fragment),Swr=l(),JEe=a("span"),Rwr=o("TFAutoModelForPreTraining"),KUe=l(),nr=a("div"),F(c$.$$.fragment),Pwr=l(),Lc=a("p"),Bwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),cK=a("a"),Iwr=o("from_pretrained()"),Nwr=o(" class method or the "),fK=a("a"),qwr=o("from_config()"),jwr=o(` class
method.`),Dwr=l(),f$=a("p"),Gwr=o("This class cannot be instantiated directly using "),YEe=a("code"),Owr=o("__init__()"),Vwr=o(" (throws an error)."),Xwr=l(),jt=a("div"),F(m$.$$.fragment),zwr=l(),KEe=a("p"),Wwr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Qwr=l(),yc=a("p"),Uwr=o(`Note:
Loading a model from its configuration file does `),ZEe=a("strong"),Hwr=o("not"),Jwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=a("a"),Ywr=o("from_pretrained()"),Kwr=o(" to load the model weights."),Zwr=l(),F(g4.$$.fragment),eAr=l(),Pr=a("div"),F(g$.$$.fragment),oAr=l(),e4e=a("p"),rAr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),tAr=l(),un=a("p"),aAr=o("The model class to instantiate is selected based on the "),o4e=a("code"),nAr=o("model_type"),sAr=o(` property of the config object (either
passed as an argument or loaded from `),r4e=a("code"),lAr=o("pretrained_model_name_or_path"),iAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t4e=a("code"),dAr=o("pretrained_model_name_or_path"),cAr=o(":"),fAr=l(),se=a("ul"),h4=a("li"),a4e=a("strong"),mAr=o("albert"),gAr=o(" \u2014 "),gK=a("a"),hAr=o("TFAlbertForPreTraining"),pAr=o(" (ALBERT model)"),_Ar=l(),p4=a("li"),n4e=a("strong"),uAr=o("bart"),bAr=o(" \u2014 "),hK=a("a"),vAr=o("TFBartForConditionalGeneration"),FAr=o(" (BART model)"),TAr=l(),_4=a("li"),s4e=a("strong"),MAr=o("bert"),EAr=o(" \u2014 "),pK=a("a"),CAr=o("TFBertForPreTraining"),wAr=o(" (BERT model)"),AAr=l(),u4=a("li"),l4e=a("strong"),LAr=o("camembert"),yAr=o(" \u2014 "),_K=a("a"),xAr=o("TFCamembertForMaskedLM"),$Ar=o(" (CamemBERT model)"),kAr=l(),b4=a("li"),i4e=a("strong"),SAr=o("ctrl"),RAr=o(" \u2014 "),uK=a("a"),PAr=o("TFCTRLLMHeadModel"),BAr=o(" (CTRL model)"),IAr=l(),v4=a("li"),d4e=a("strong"),NAr=o("distilbert"),qAr=o(" \u2014 "),bK=a("a"),jAr=o("TFDistilBertForMaskedLM"),DAr=o(" (DistilBERT model)"),GAr=l(),F4=a("li"),c4e=a("strong"),OAr=o("electra"),VAr=o(" \u2014 "),vK=a("a"),XAr=o("TFElectraForPreTraining"),zAr=o(" (ELECTRA model)"),WAr=l(),T4=a("li"),f4e=a("strong"),QAr=o("flaubert"),UAr=o(" \u2014 "),FK=a("a"),HAr=o("TFFlaubertWithLMHeadModel"),JAr=o(" (FlauBERT model)"),YAr=l(),M4=a("li"),m4e=a("strong"),KAr=o("funnel"),ZAr=o(" \u2014 "),TK=a("a"),e7r=o("TFFunnelForPreTraining"),o7r=o(" (Funnel Transformer model)"),r7r=l(),E4=a("li"),g4e=a("strong"),t7r=o("gpt2"),a7r=o(" \u2014 "),MK=a("a"),n7r=o("TFGPT2LMHeadModel"),s7r=o(" (OpenAI GPT-2 model)"),l7r=l(),C4=a("li"),h4e=a("strong"),i7r=o("layoutlm"),d7r=o(" \u2014 "),EK=a("a"),c7r=o("TFLayoutLMForMaskedLM"),f7r=o(" (LayoutLM model)"),m7r=l(),w4=a("li"),p4e=a("strong"),g7r=o("lxmert"),h7r=o(" \u2014 "),CK=a("a"),p7r=o("TFLxmertForPreTraining"),_7r=o(" (LXMERT model)"),u7r=l(),A4=a("li"),_4e=a("strong"),b7r=o("mobilebert"),v7r=o(" \u2014 "),wK=a("a"),F7r=o("TFMobileBertForPreTraining"),T7r=o(" (MobileBERT model)"),M7r=l(),L4=a("li"),u4e=a("strong"),E7r=o("mpnet"),C7r=o(" \u2014 "),AK=a("a"),w7r=o("TFMPNetForMaskedLM"),A7r=o(" (MPNet model)"),L7r=l(),y4=a("li"),b4e=a("strong"),y7r=o("openai-gpt"),x7r=o(" \u2014 "),LK=a("a"),$7r=o("TFOpenAIGPTLMHeadModel"),k7r=o(" (OpenAI GPT model)"),S7r=l(),x4=a("li"),v4e=a("strong"),R7r=o("roberta"),P7r=o(" \u2014 "),yK=a("a"),B7r=o("TFRobertaForMaskedLM"),I7r=o(" (RoBERTa model)"),N7r=l(),$4=a("li"),F4e=a("strong"),q7r=o("t5"),j7r=o(" \u2014 "),xK=a("a"),D7r=o("TFT5ForConditionalGeneration"),G7r=o(" (T5 model)"),O7r=l(),k4=a("li"),T4e=a("strong"),V7r=o("tapas"),X7r=o(" \u2014 "),$K=a("a"),z7r=o("TFTapasForMaskedLM"),W7r=o(" (TAPAS model)"),Q7r=l(),S4=a("li"),M4e=a("strong"),U7r=o("transfo-xl"),H7r=o(" \u2014 "),kK=a("a"),J7r=o("TFTransfoXLLMHeadModel"),Y7r=o(" (Transformer-XL model)"),K7r=l(),R4=a("li"),E4e=a("strong"),Z7r=o("vit_mae"),eLr=o(" \u2014 "),SK=a("a"),oLr=o("TFViTMAEForPreTraining"),rLr=o(" (ViTMAE model)"),tLr=l(),P4=a("li"),C4e=a("strong"),aLr=o("xlm"),nLr=o(" \u2014 "),RK=a("a"),sLr=o("TFXLMWithLMHeadModel"),lLr=o(" (XLM model)"),iLr=l(),B4=a("li"),w4e=a("strong"),dLr=o("xlm-roberta"),cLr=o(" \u2014 "),PK=a("a"),fLr=o("TFXLMRobertaForMaskedLM"),mLr=o(" (XLM-RoBERTa model)"),gLr=l(),I4=a("li"),A4e=a("strong"),hLr=o("xlnet"),pLr=o(" \u2014 "),BK=a("a"),_Lr=o("TFXLNetLMHeadModel"),uLr=o(" (XLNet model)"),bLr=l(),F(N4.$$.fragment),ZUe=l(),xc=a("h2"),q4=a("a"),L4e=a("span"),F(h$.$$.fragment),vLr=l(),y4e=a("span"),FLr=o("TFAutoModelForCausalLM"),eHe=l(),sr=a("div"),F(p$.$$.fragment),TLr=l(),$c=a("p"),MLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),IK=a("a"),ELr=o("from_pretrained()"),CLr=o(" class method or the "),NK=a("a"),wLr=o("from_config()"),ALr=o(` class
method.`),LLr=l(),_$=a("p"),yLr=o("This class cannot be instantiated directly using "),x4e=a("code"),xLr=o("__init__()"),$Lr=o(" (throws an error)."),kLr=l(),Dt=a("div"),F(u$.$$.fragment),SLr=l(),$4e=a("p"),RLr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),PLr=l(),kc=a("p"),BLr=o(`Note:
Loading a model from its configuration file does `),k4e=a("strong"),ILr=o("not"),NLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=a("a"),qLr=o("from_pretrained()"),jLr=o(" to load the model weights."),DLr=l(),F(j4.$$.fragment),GLr=l(),Br=a("div"),F(b$.$$.fragment),OLr=l(),S4e=a("p"),VLr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),XLr=l(),bn=a("p"),zLr=o("The model class to instantiate is selected based on the "),R4e=a("code"),WLr=o("model_type"),QLr=o(` property of the config object (either
passed as an argument or loaded from `),P4e=a("code"),ULr=o("pretrained_model_name_or_path"),HLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B4e=a("code"),JLr=o("pretrained_model_name_or_path"),YLr=o(":"),KLr=l(),Me=a("ul"),D4=a("li"),I4e=a("strong"),ZLr=o("bert"),eyr=o(" \u2014 "),jK=a("a"),oyr=o("TFBertLMHeadModel"),ryr=o(" (BERT model)"),tyr=l(),G4=a("li"),N4e=a("strong"),ayr=o("camembert"),nyr=o(" \u2014 "),DK=a("a"),syr=o("TFCamembertForCausalLM"),lyr=o(" (CamemBERT model)"),iyr=l(),O4=a("li"),q4e=a("strong"),dyr=o("ctrl"),cyr=o(" \u2014 "),GK=a("a"),fyr=o("TFCTRLLMHeadModel"),myr=o(" (CTRL model)"),gyr=l(),V4=a("li"),j4e=a("strong"),hyr=o("gpt2"),pyr=o(" \u2014 "),OK=a("a"),_yr=o("TFGPT2LMHeadModel"),uyr=o(" (OpenAI GPT-2 model)"),byr=l(),X4=a("li"),D4e=a("strong"),vyr=o("gptj"),Fyr=o(" \u2014 "),VK=a("a"),Tyr=o("TFGPTJForCausalLM"),Myr=o(" (GPT-J model)"),Eyr=l(),z4=a("li"),G4e=a("strong"),Cyr=o("openai-gpt"),wyr=o(" \u2014 "),XK=a("a"),Ayr=o("TFOpenAIGPTLMHeadModel"),Lyr=o(" (OpenAI GPT model)"),yyr=l(),W4=a("li"),O4e=a("strong"),xyr=o("opt"),$yr=o(" \u2014 "),zK=a("a"),kyr=o("TFOPTForCausalLM"),Syr=o(" (OPT model)"),Ryr=l(),Q4=a("li"),V4e=a("strong"),Pyr=o("rembert"),Byr=o(" \u2014 "),WK=a("a"),Iyr=o("TFRemBertForCausalLM"),Nyr=o(" (RemBERT model)"),qyr=l(),U4=a("li"),X4e=a("strong"),jyr=o("roberta"),Dyr=o(" \u2014 "),QK=a("a"),Gyr=o("TFRobertaForCausalLM"),Oyr=o(" (RoBERTa model)"),Vyr=l(),H4=a("li"),z4e=a("strong"),Xyr=o("roformer"),zyr=o(" \u2014 "),UK=a("a"),Wyr=o("TFRoFormerForCausalLM"),Qyr=o(" (RoFormer model)"),Uyr=l(),J4=a("li"),W4e=a("strong"),Hyr=o("transfo-xl"),Jyr=o(" \u2014 "),HK=a("a"),Yyr=o("TFTransfoXLLMHeadModel"),Kyr=o(" (Transformer-XL model)"),Zyr=l(),Y4=a("li"),Q4e=a("strong"),e9r=o("xlm"),o9r=o(" \u2014 "),JK=a("a"),r9r=o("TFXLMWithLMHeadModel"),t9r=o(" (XLM model)"),a9r=l(),K4=a("li"),U4e=a("strong"),n9r=o("xlnet"),s9r=o(" \u2014 "),YK=a("a"),l9r=o("TFXLNetLMHeadModel"),i9r=o(" (XLNet model)"),d9r=l(),F(Z4.$$.fragment),oHe=l(),Sc=a("h2"),eC=a("a"),H4e=a("span"),F(v$.$$.fragment),c9r=l(),J4e=a("span"),f9r=o("TFAutoModelForImageClassification"),rHe=l(),lr=a("div"),F(F$.$$.fragment),m9r=l(),Rc=a("p"),g9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KK=a("a"),h9r=o("from_pretrained()"),p9r=o(" class method or the "),ZK=a("a"),_9r=o("from_config()"),u9r=o(` class
method.`),b9r=l(),T$=a("p"),v9r=o("This class cannot be instantiated directly using "),Y4e=a("code"),F9r=o("__init__()"),T9r=o(" (throws an error)."),M9r=l(),Gt=a("div"),F(M$.$$.fragment),E9r=l(),K4e=a("p"),C9r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),w9r=l(),Pc=a("p"),A9r=o(`Note:
Loading a model from its configuration file does `),Z4e=a("strong"),L9r=o("not"),y9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=a("a"),x9r=o("from_pretrained()"),$9r=o(" to load the model weights."),k9r=l(),F(oC.$$.fragment),S9r=l(),Ir=a("div"),F(E$.$$.fragment),R9r=l(),eCe=a("p"),P9r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),B9r=l(),vn=a("p"),I9r=o("The model class to instantiate is selected based on the "),oCe=a("code"),N9r=o("model_type"),q9r=o(` property of the config object (either
passed as an argument or loaded from `),rCe=a("code"),j9r=o("pretrained_model_name_or_path"),D9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tCe=a("code"),G9r=o("pretrained_model_name_or_path"),O9r=o(":"),V9r=l(),Ve=a("ul"),rC=a("li"),aCe=a("strong"),X9r=o("convnext"),z9r=o(" \u2014 "),oZ=a("a"),W9r=o("TFConvNextForImageClassification"),Q9r=o(" (ConvNeXT model)"),U9r=l(),tC=a("li"),nCe=a("strong"),H9r=o("data2vec-vision"),J9r=o(" \u2014 "),rZ=a("a"),Y9r=o("TFData2VecVisionForImageClassification"),K9r=o(" (Data2VecVision model)"),Z9r=l(),dl=a("li"),sCe=a("strong"),exr=o("deit"),oxr=o(" \u2014 "),tZ=a("a"),rxr=o("TFDeiTForImageClassification"),txr=o(" or "),aZ=a("a"),axr=o("TFDeiTForImageClassificationWithTeacher"),nxr=o(" (DeiT model)"),sxr=l(),aC=a("li"),lCe=a("strong"),lxr=o("regnet"),ixr=o(" \u2014 "),nZ=a("a"),dxr=o("TFRegNetForImageClassification"),cxr=o(" (RegNet model)"),fxr=l(),nC=a("li"),iCe=a("strong"),mxr=o("resnet"),gxr=o(" \u2014 "),sZ=a("a"),hxr=o("TFResNetForImageClassification"),pxr=o(" (ResNet model)"),_xr=l(),sC=a("li"),dCe=a("strong"),uxr=o("segformer"),bxr=o(" \u2014 "),lZ=a("a"),vxr=o("TFSegformerForImageClassification"),Fxr=o(" (SegFormer model)"),Txr=l(),lC=a("li"),cCe=a("strong"),Mxr=o("swin"),Exr=o(" \u2014 "),iZ=a("a"),Cxr=o("TFSwinForImageClassification"),wxr=o(" (Swin Transformer model)"),Axr=l(),iC=a("li"),fCe=a("strong"),Lxr=o("vit"),yxr=o(" \u2014 "),dZ=a("a"),xxr=o("TFViTForImageClassification"),$xr=o(" (ViT model)"),kxr=l(),F(dC.$$.fragment),tHe=l(),Bc=a("h2"),cC=a("a"),mCe=a("span"),F(C$.$$.fragment),Sxr=l(),gCe=a("span"),Rxr=o("TFAutoModelForSemanticSegmentation"),aHe=l(),ir=a("div"),F(w$.$$.fragment),Pxr=l(),Ic=a("p"),Bxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),cZ=a("a"),Ixr=o("from_pretrained()"),Nxr=o(" class method or the "),fZ=a("a"),qxr=o("from_config()"),jxr=o(` class
method.`),Dxr=l(),A$=a("p"),Gxr=o("This class cannot be instantiated directly using "),hCe=a("code"),Oxr=o("__init__()"),Vxr=o(" (throws an error)."),Xxr=l(),Ot=a("div"),F(L$.$$.fragment),zxr=l(),pCe=a("p"),Wxr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Qxr=l(),Nc=a("p"),Uxr=o(`Note:
Loading a model from its configuration file does `),_Ce=a("strong"),Hxr=o("not"),Jxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=a("a"),Yxr=o("from_pretrained()"),Kxr=o(" to load the model weights."),Zxr=l(),F(fC.$$.fragment),e$r=l(),Nr=a("div"),F(y$.$$.fragment),o$r=l(),uCe=a("p"),r$r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),t$r=l(),Fn=a("p"),a$r=o("The model class to instantiate is selected based on the "),bCe=a("code"),n$r=o("model_type"),s$r=o(` property of the config object (either
passed as an argument or loaded from `),vCe=a("code"),l$r=o("pretrained_model_name_or_path"),i$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FCe=a("code"),d$r=o("pretrained_model_name_or_path"),c$r=o(":"),f$r=l(),x$=a("ul"),mC=a("li"),TCe=a("strong"),m$r=o("data2vec-vision"),g$r=o(" \u2014 "),gZ=a("a"),h$r=o("TFData2VecVisionForSemanticSegmentation"),p$r=o(" (Data2VecVision model)"),_$r=l(),gC=a("li"),MCe=a("strong"),u$r=o("segformer"),b$r=o(" \u2014 "),hZ=a("a"),v$r=o("TFSegformerForSemanticSegmentation"),F$r=o(" (SegFormer model)"),T$r=l(),F(hC.$$.fragment),nHe=l(),qc=a("h2"),pC=a("a"),ECe=a("span"),F($$.$$.fragment),M$r=l(),CCe=a("span"),E$r=o("TFAutoModelForMaskedLM"),sHe=l(),dr=a("div"),F(k$.$$.fragment),C$r=l(),jc=a("p"),w$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pZ=a("a"),A$r=o("from_pretrained()"),L$r=o(" class method or the "),_Z=a("a"),y$r=o("from_config()"),x$r=o(` class
method.`),$$r=l(),S$=a("p"),k$r=o("This class cannot be instantiated directly using "),wCe=a("code"),S$r=o("__init__()"),R$r=o(" (throws an error)."),P$r=l(),Vt=a("div"),F(R$.$$.fragment),B$r=l(),ACe=a("p"),I$r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),N$r=l(),Dc=a("p"),q$r=o(`Note:
Loading a model from its configuration file does `),LCe=a("strong"),j$r=o("not"),D$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=a("a"),G$r=o("from_pretrained()"),O$r=o(" to load the model weights."),V$r=l(),F(_C.$$.fragment),X$r=l(),qr=a("div"),F(P$.$$.fragment),z$r=l(),yCe=a("p"),W$r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Q$r=l(),Tn=a("p"),U$r=o("The model class to instantiate is selected based on the "),xCe=a("code"),H$r=o("model_type"),J$r=o(` property of the config object (either
passed as an argument or loaded from `),$Ce=a("code"),Y$r=o("pretrained_model_name_or_path"),K$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kCe=a("code"),Z$r=o("pretrained_model_name_or_path"),ekr=o(":"),okr=l(),de=a("ul"),uC=a("li"),SCe=a("strong"),rkr=o("albert"),tkr=o(" \u2014 "),bZ=a("a"),akr=o("TFAlbertForMaskedLM"),nkr=o(" (ALBERT model)"),skr=l(),bC=a("li"),RCe=a("strong"),lkr=o("bert"),ikr=o(" \u2014 "),vZ=a("a"),dkr=o("TFBertForMaskedLM"),ckr=o(" (BERT model)"),fkr=l(),vC=a("li"),PCe=a("strong"),mkr=o("camembert"),gkr=o(" \u2014 "),FZ=a("a"),hkr=o("TFCamembertForMaskedLM"),pkr=o(" (CamemBERT model)"),_kr=l(),FC=a("li"),BCe=a("strong"),ukr=o("convbert"),bkr=o(" \u2014 "),TZ=a("a"),vkr=o("TFConvBertForMaskedLM"),Fkr=o(" (ConvBERT model)"),Tkr=l(),TC=a("li"),ICe=a("strong"),Mkr=o("deberta"),Ekr=o(" \u2014 "),MZ=a("a"),Ckr=o("TFDebertaForMaskedLM"),wkr=o(" (DeBERTa model)"),Akr=l(),MC=a("li"),NCe=a("strong"),Lkr=o("deberta-v2"),ykr=o(" \u2014 "),EZ=a("a"),xkr=o("TFDebertaV2ForMaskedLM"),$kr=o(" (DeBERTa-v2 model)"),kkr=l(),EC=a("li"),qCe=a("strong"),Skr=o("distilbert"),Rkr=o(" \u2014 "),CZ=a("a"),Pkr=o("TFDistilBertForMaskedLM"),Bkr=o(" (DistilBERT model)"),Ikr=l(),CC=a("li"),jCe=a("strong"),Nkr=o("electra"),qkr=o(" \u2014 "),wZ=a("a"),jkr=o("TFElectraForMaskedLM"),Dkr=o(" (ELECTRA model)"),Gkr=l(),wC=a("li"),DCe=a("strong"),Okr=o("flaubert"),Vkr=o(" \u2014 "),AZ=a("a"),Xkr=o("TFFlaubertWithLMHeadModel"),zkr=o(" (FlauBERT model)"),Wkr=l(),AC=a("li"),GCe=a("strong"),Qkr=o("funnel"),Ukr=o(" \u2014 "),LZ=a("a"),Hkr=o("TFFunnelForMaskedLM"),Jkr=o(" (Funnel Transformer model)"),Ykr=l(),LC=a("li"),OCe=a("strong"),Kkr=o("layoutlm"),Zkr=o(" \u2014 "),yZ=a("a"),eSr=o("TFLayoutLMForMaskedLM"),oSr=o(" (LayoutLM model)"),rSr=l(),yC=a("li"),VCe=a("strong"),tSr=o("longformer"),aSr=o(" \u2014 "),xZ=a("a"),nSr=o("TFLongformerForMaskedLM"),sSr=o(" (Longformer model)"),lSr=l(),xC=a("li"),XCe=a("strong"),iSr=o("mobilebert"),dSr=o(" \u2014 "),$Z=a("a"),cSr=o("TFMobileBertForMaskedLM"),fSr=o(" (MobileBERT model)"),mSr=l(),$C=a("li"),zCe=a("strong"),gSr=o("mpnet"),hSr=o(" \u2014 "),kZ=a("a"),pSr=o("TFMPNetForMaskedLM"),_Sr=o(" (MPNet model)"),uSr=l(),kC=a("li"),WCe=a("strong"),bSr=o("rembert"),vSr=o(" \u2014 "),SZ=a("a"),FSr=o("TFRemBertForMaskedLM"),TSr=o(" (RemBERT model)"),MSr=l(),SC=a("li"),QCe=a("strong"),ESr=o("roberta"),CSr=o(" \u2014 "),RZ=a("a"),wSr=o("TFRobertaForMaskedLM"),ASr=o(" (RoBERTa model)"),LSr=l(),RC=a("li"),UCe=a("strong"),ySr=o("roformer"),xSr=o(" \u2014 "),PZ=a("a"),$Sr=o("TFRoFormerForMaskedLM"),kSr=o(" (RoFormer model)"),SSr=l(),PC=a("li"),HCe=a("strong"),RSr=o("tapas"),PSr=o(" \u2014 "),BZ=a("a"),BSr=o("TFTapasForMaskedLM"),ISr=o(" (TAPAS model)"),NSr=l(),BC=a("li"),JCe=a("strong"),qSr=o("xlm"),jSr=o(" \u2014 "),IZ=a("a"),DSr=o("TFXLMWithLMHeadModel"),GSr=o(" (XLM model)"),OSr=l(),IC=a("li"),YCe=a("strong"),VSr=o("xlm-roberta"),XSr=o(" \u2014 "),NZ=a("a"),zSr=o("TFXLMRobertaForMaskedLM"),WSr=o(" (XLM-RoBERTa model)"),QSr=l(),F(NC.$$.fragment),lHe=l(),Gc=a("h2"),qC=a("a"),KCe=a("span"),F(B$.$$.fragment),USr=l(),ZCe=a("span"),HSr=o("TFAutoModelForSeq2SeqLM"),iHe=l(),cr=a("div"),F(I$.$$.fragment),JSr=l(),Oc=a("p"),YSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),qZ=a("a"),KSr=o("from_pretrained()"),ZSr=o(" class method or the "),jZ=a("a"),eRr=o("from_config()"),oRr=o(` class
method.`),rRr=l(),N$=a("p"),tRr=o("This class cannot be instantiated directly using "),e3e=a("code"),aRr=o("__init__()"),nRr=o(" (throws an error)."),sRr=l(),Xt=a("div"),F(q$.$$.fragment),lRr=l(),o3e=a("p"),iRr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),dRr=l(),Vc=a("p"),cRr=o(`Note:
Loading a model from its configuration file does `),r3e=a("strong"),fRr=o("not"),mRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DZ=a("a"),gRr=o("from_pretrained()"),hRr=o(" to load the model weights."),pRr=l(),F(jC.$$.fragment),_Rr=l(),jr=a("div"),F(j$.$$.fragment),uRr=l(),t3e=a("p"),bRr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),vRr=l(),Mn=a("p"),FRr=o("The model class to instantiate is selected based on the "),a3e=a("code"),TRr=o("model_type"),MRr=o(` property of the config object (either
passed as an argument or loaded from `),n3e=a("code"),ERr=o("pretrained_model_name_or_path"),CRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s3e=a("code"),wRr=o("pretrained_model_name_or_path"),ARr=o(":"),LRr=l(),ye=a("ul"),DC=a("li"),l3e=a("strong"),yRr=o("bart"),xRr=o(" \u2014 "),GZ=a("a"),$Rr=o("TFBartForConditionalGeneration"),kRr=o(" (BART model)"),SRr=l(),GC=a("li"),i3e=a("strong"),RRr=o("blenderbot"),PRr=o(" \u2014 "),OZ=a("a"),BRr=o("TFBlenderbotForConditionalGeneration"),IRr=o(" (Blenderbot model)"),NRr=l(),OC=a("li"),d3e=a("strong"),qRr=o("blenderbot-small"),jRr=o(" \u2014 "),VZ=a("a"),DRr=o("TFBlenderbotSmallForConditionalGeneration"),GRr=o(" (BlenderbotSmall model)"),ORr=l(),VC=a("li"),c3e=a("strong"),VRr=o("encoder-decoder"),XRr=o(" \u2014 "),XZ=a("a"),zRr=o("TFEncoderDecoderModel"),WRr=o(" (Encoder decoder model)"),QRr=l(),XC=a("li"),f3e=a("strong"),URr=o("led"),HRr=o(" \u2014 "),zZ=a("a"),JRr=o("TFLEDForConditionalGeneration"),YRr=o(" (LED model)"),KRr=l(),zC=a("li"),m3e=a("strong"),ZRr=o("marian"),ePr=o(" \u2014 "),WZ=a("a"),oPr=o("TFMarianMTModel"),rPr=o(" (Marian model)"),tPr=l(),WC=a("li"),g3e=a("strong"),aPr=o("mbart"),nPr=o(" \u2014 "),QZ=a("a"),sPr=o("TFMBartForConditionalGeneration"),lPr=o(" (mBART model)"),iPr=l(),QC=a("li"),h3e=a("strong"),dPr=o("mt5"),cPr=o(" \u2014 "),UZ=a("a"),fPr=o("TFMT5ForConditionalGeneration"),mPr=o(" (MT5 model)"),gPr=l(),UC=a("li"),p3e=a("strong"),hPr=o("pegasus"),pPr=o(" \u2014 "),HZ=a("a"),_Pr=o("TFPegasusForConditionalGeneration"),uPr=o(" (Pegasus model)"),bPr=l(),HC=a("li"),_3e=a("strong"),vPr=o("t5"),FPr=o(" \u2014 "),JZ=a("a"),TPr=o("TFT5ForConditionalGeneration"),MPr=o(" (T5 model)"),EPr=l(),F(JC.$$.fragment),dHe=l(),Xc=a("h2"),YC=a("a"),u3e=a("span"),F(D$.$$.fragment),CPr=l(),b3e=a("span"),wPr=o("TFAutoModelForSequenceClassification"),cHe=l(),fr=a("div"),F(G$.$$.fragment),APr=l(),zc=a("p"),LPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YZ=a("a"),yPr=o("from_pretrained()"),xPr=o(" class method or the "),KZ=a("a"),$Pr=o("from_config()"),kPr=o(` class
method.`),SPr=l(),O$=a("p"),RPr=o("This class cannot be instantiated directly using "),v3e=a("code"),PPr=o("__init__()"),BPr=o(" (throws an error)."),IPr=l(),zt=a("div"),F(V$.$$.fragment),NPr=l(),F3e=a("p"),qPr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jPr=l(),Wc=a("p"),DPr=o(`Note:
Loading a model from its configuration file does `),T3e=a("strong"),GPr=o("not"),OPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZZ=a("a"),VPr=o("from_pretrained()"),XPr=o(" to load the model weights."),zPr=l(),F(KC.$$.fragment),WPr=l(),Dr=a("div"),F(X$.$$.fragment),QPr=l(),M3e=a("p"),UPr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),HPr=l(),En=a("p"),JPr=o("The model class to instantiate is selected based on the "),E3e=a("code"),YPr=o("model_type"),KPr=o(` property of the config object (either
passed as an argument or loaded from `),C3e=a("code"),ZPr=o("pretrained_model_name_or_path"),eBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w3e=a("code"),oBr=o("pretrained_model_name_or_path"),rBr=o(":"),tBr=l(),te=a("ul"),ZC=a("li"),A3e=a("strong"),aBr=o("albert"),nBr=o(" \u2014 "),eee=a("a"),sBr=o("TFAlbertForSequenceClassification"),lBr=o(" (ALBERT model)"),iBr=l(),e3=a("li"),L3e=a("strong"),dBr=o("bert"),cBr=o(" \u2014 "),oee=a("a"),fBr=o("TFBertForSequenceClassification"),mBr=o(" (BERT model)"),gBr=l(),o3=a("li"),y3e=a("strong"),hBr=o("camembert"),pBr=o(" \u2014 "),ree=a("a"),_Br=o("TFCamembertForSequenceClassification"),uBr=o(" (CamemBERT model)"),bBr=l(),r3=a("li"),x3e=a("strong"),vBr=o("convbert"),FBr=o(" \u2014 "),tee=a("a"),TBr=o("TFConvBertForSequenceClassification"),MBr=o(" (ConvBERT model)"),EBr=l(),t3=a("li"),$3e=a("strong"),CBr=o("ctrl"),wBr=o(" \u2014 "),aee=a("a"),ABr=o("TFCTRLForSequenceClassification"),LBr=o(" (CTRL model)"),yBr=l(),a3=a("li"),k3e=a("strong"),xBr=o("deberta"),$Br=o(" \u2014 "),nee=a("a"),kBr=o("TFDebertaForSequenceClassification"),SBr=o(" (DeBERTa model)"),RBr=l(),n3=a("li"),S3e=a("strong"),PBr=o("deberta-v2"),BBr=o(" \u2014 "),see=a("a"),IBr=o("TFDebertaV2ForSequenceClassification"),NBr=o(" (DeBERTa-v2 model)"),qBr=l(),s3=a("li"),R3e=a("strong"),jBr=o("distilbert"),DBr=o(" \u2014 "),lee=a("a"),GBr=o("TFDistilBertForSequenceClassification"),OBr=o(" (DistilBERT model)"),VBr=l(),l3=a("li"),P3e=a("strong"),XBr=o("electra"),zBr=o(" \u2014 "),iee=a("a"),WBr=o("TFElectraForSequenceClassification"),QBr=o(" (ELECTRA model)"),UBr=l(),i3=a("li"),B3e=a("strong"),HBr=o("flaubert"),JBr=o(" \u2014 "),dee=a("a"),YBr=o("TFFlaubertForSequenceClassification"),KBr=o(" (FlauBERT model)"),ZBr=l(),d3=a("li"),I3e=a("strong"),eIr=o("funnel"),oIr=o(" \u2014 "),cee=a("a"),rIr=o("TFFunnelForSequenceClassification"),tIr=o(" (Funnel Transformer model)"),aIr=l(),c3=a("li"),N3e=a("strong"),nIr=o("gpt2"),sIr=o(" \u2014 "),fee=a("a"),lIr=o("TFGPT2ForSequenceClassification"),iIr=o(" (OpenAI GPT-2 model)"),dIr=l(),f3=a("li"),q3e=a("strong"),cIr=o("gptj"),fIr=o(" \u2014 "),mee=a("a"),mIr=o("TFGPTJForSequenceClassification"),gIr=o(" (GPT-J model)"),hIr=l(),m3=a("li"),j3e=a("strong"),pIr=o("layoutlm"),_Ir=o(" \u2014 "),gee=a("a"),uIr=o("TFLayoutLMForSequenceClassification"),bIr=o(" (LayoutLM model)"),vIr=l(),g3=a("li"),D3e=a("strong"),FIr=o("longformer"),TIr=o(" \u2014 "),hee=a("a"),MIr=o("TFLongformerForSequenceClassification"),EIr=o(" (Longformer model)"),CIr=l(),h3=a("li"),G3e=a("strong"),wIr=o("mobilebert"),AIr=o(" \u2014 "),pee=a("a"),LIr=o("TFMobileBertForSequenceClassification"),yIr=o(" (MobileBERT model)"),xIr=l(),p3=a("li"),O3e=a("strong"),$Ir=o("mpnet"),kIr=o(" \u2014 "),_ee=a("a"),SIr=o("TFMPNetForSequenceClassification"),RIr=o(" (MPNet model)"),PIr=l(),_3=a("li"),V3e=a("strong"),BIr=o("openai-gpt"),IIr=o(" \u2014 "),uee=a("a"),NIr=o("TFOpenAIGPTForSequenceClassification"),qIr=o(" (OpenAI GPT model)"),jIr=l(),u3=a("li"),X3e=a("strong"),DIr=o("rembert"),GIr=o(" \u2014 "),bee=a("a"),OIr=o("TFRemBertForSequenceClassification"),VIr=o(" (RemBERT model)"),XIr=l(),b3=a("li"),z3e=a("strong"),zIr=o("roberta"),WIr=o(" \u2014 "),vee=a("a"),QIr=o("TFRobertaForSequenceClassification"),UIr=o(" (RoBERTa model)"),HIr=l(),v3=a("li"),W3e=a("strong"),JIr=o("roformer"),YIr=o(" \u2014 "),Fee=a("a"),KIr=o("TFRoFormerForSequenceClassification"),ZIr=o(" (RoFormer model)"),eNr=l(),F3=a("li"),Q3e=a("strong"),oNr=o("tapas"),rNr=o(" \u2014 "),Tee=a("a"),tNr=o("TFTapasForSequenceClassification"),aNr=o(" (TAPAS model)"),nNr=l(),T3=a("li"),U3e=a("strong"),sNr=o("transfo-xl"),lNr=o(" \u2014 "),Mee=a("a"),iNr=o("TFTransfoXLForSequenceClassification"),dNr=o(" (Transformer-XL model)"),cNr=l(),M3=a("li"),H3e=a("strong"),fNr=o("xlm"),mNr=o(" \u2014 "),Eee=a("a"),gNr=o("TFXLMForSequenceClassification"),hNr=o(" (XLM model)"),pNr=l(),E3=a("li"),J3e=a("strong"),_Nr=o("xlm-roberta"),uNr=o(" \u2014 "),Cee=a("a"),bNr=o("TFXLMRobertaForSequenceClassification"),vNr=o(" (XLM-RoBERTa model)"),FNr=l(),C3=a("li"),Y3e=a("strong"),TNr=o("xlnet"),MNr=o(" \u2014 "),wee=a("a"),ENr=o("TFXLNetForSequenceClassification"),CNr=o(" (XLNet model)"),wNr=l(),F(w3.$$.fragment),fHe=l(),Qc=a("h2"),A3=a("a"),K3e=a("span"),F(z$.$$.fragment),ANr=l(),Z3e=a("span"),LNr=o("TFAutoModelForMultipleChoice"),mHe=l(),mr=a("div"),F(W$.$$.fragment),yNr=l(),Uc=a("p"),xNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Aee=a("a"),$Nr=o("from_pretrained()"),kNr=o(" class method or the "),Lee=a("a"),SNr=o("from_config()"),RNr=o(` class
method.`),PNr=l(),Q$=a("p"),BNr=o("This class cannot be instantiated directly using "),e5e=a("code"),INr=o("__init__()"),NNr=o(" (throws an error)."),qNr=l(),Wt=a("div"),F(U$.$$.fragment),jNr=l(),o5e=a("p"),DNr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),GNr=l(),Hc=a("p"),ONr=o(`Note:
Loading a model from its configuration file does `),r5e=a("strong"),VNr=o("not"),XNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=a("a"),zNr=o("from_pretrained()"),WNr=o(" to load the model weights."),QNr=l(),F(L3.$$.fragment),UNr=l(),Gr=a("div"),F(H$.$$.fragment),HNr=l(),t5e=a("p"),JNr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),YNr=l(),Cn=a("p"),KNr=o("The model class to instantiate is selected based on the "),a5e=a("code"),ZNr=o("model_type"),eqr=o(` property of the config object (either
passed as an argument or loaded from `),n5e=a("code"),oqr=o("pretrained_model_name_or_path"),rqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=a("code"),tqr=o("pretrained_model_name_or_path"),aqr=o(":"),nqr=l(),ve=a("ul"),y3=a("li"),l5e=a("strong"),sqr=o("albert"),lqr=o(" \u2014 "),xee=a("a"),iqr=o("TFAlbertForMultipleChoice"),dqr=o(" (ALBERT model)"),cqr=l(),x3=a("li"),i5e=a("strong"),fqr=o("bert"),mqr=o(" \u2014 "),$ee=a("a"),gqr=o("TFBertForMultipleChoice"),hqr=o(" (BERT model)"),pqr=l(),$3=a("li"),d5e=a("strong"),_qr=o("camembert"),uqr=o(" \u2014 "),kee=a("a"),bqr=o("TFCamembertForMultipleChoice"),vqr=o(" (CamemBERT model)"),Fqr=l(),k3=a("li"),c5e=a("strong"),Tqr=o("convbert"),Mqr=o(" \u2014 "),See=a("a"),Eqr=o("TFConvBertForMultipleChoice"),Cqr=o(" (ConvBERT model)"),wqr=l(),S3=a("li"),f5e=a("strong"),Aqr=o("distilbert"),Lqr=o(" \u2014 "),Ree=a("a"),yqr=o("TFDistilBertForMultipleChoice"),xqr=o(" (DistilBERT model)"),$qr=l(),R3=a("li"),m5e=a("strong"),kqr=o("electra"),Sqr=o(" \u2014 "),Pee=a("a"),Rqr=o("TFElectraForMultipleChoice"),Pqr=o(" (ELECTRA model)"),Bqr=l(),P3=a("li"),g5e=a("strong"),Iqr=o("flaubert"),Nqr=o(" \u2014 "),Bee=a("a"),qqr=o("TFFlaubertForMultipleChoice"),jqr=o(" (FlauBERT model)"),Dqr=l(),B3=a("li"),h5e=a("strong"),Gqr=o("funnel"),Oqr=o(" \u2014 "),Iee=a("a"),Vqr=o("TFFunnelForMultipleChoice"),Xqr=o(" (Funnel Transformer model)"),zqr=l(),I3=a("li"),p5e=a("strong"),Wqr=o("longformer"),Qqr=o(" \u2014 "),Nee=a("a"),Uqr=o("TFLongformerForMultipleChoice"),Hqr=o(" (Longformer model)"),Jqr=l(),N3=a("li"),_5e=a("strong"),Yqr=o("mobilebert"),Kqr=o(" \u2014 "),qee=a("a"),Zqr=o("TFMobileBertForMultipleChoice"),ejr=o(" (MobileBERT model)"),ojr=l(),q3=a("li"),u5e=a("strong"),rjr=o("mpnet"),tjr=o(" \u2014 "),jee=a("a"),ajr=o("TFMPNetForMultipleChoice"),njr=o(" (MPNet model)"),sjr=l(),j3=a("li"),b5e=a("strong"),ljr=o("rembert"),ijr=o(" \u2014 "),Dee=a("a"),djr=o("TFRemBertForMultipleChoice"),cjr=o(" (RemBERT model)"),fjr=l(),D3=a("li"),v5e=a("strong"),mjr=o("roberta"),gjr=o(" \u2014 "),Gee=a("a"),hjr=o("TFRobertaForMultipleChoice"),pjr=o(" (RoBERTa model)"),_jr=l(),G3=a("li"),F5e=a("strong"),ujr=o("roformer"),bjr=o(" \u2014 "),Oee=a("a"),vjr=o("TFRoFormerForMultipleChoice"),Fjr=o(" (RoFormer model)"),Tjr=l(),O3=a("li"),T5e=a("strong"),Mjr=o("xlm"),Ejr=o(" \u2014 "),Vee=a("a"),Cjr=o("TFXLMForMultipleChoice"),wjr=o(" (XLM model)"),Ajr=l(),V3=a("li"),M5e=a("strong"),Ljr=o("xlm-roberta"),yjr=o(" \u2014 "),Xee=a("a"),xjr=o("TFXLMRobertaForMultipleChoice"),$jr=o(" (XLM-RoBERTa model)"),kjr=l(),X3=a("li"),E5e=a("strong"),Sjr=o("xlnet"),Rjr=o(" \u2014 "),zee=a("a"),Pjr=o("TFXLNetForMultipleChoice"),Bjr=o(" (XLNet model)"),Ijr=l(),F(z3.$$.fragment),gHe=l(),Jc=a("h2"),W3=a("a"),C5e=a("span"),F(J$.$$.fragment),Njr=l(),w5e=a("span"),qjr=o("TFAutoModelForNextSentencePrediction"),hHe=l(),gr=a("div"),F(Y$.$$.fragment),jjr=l(),Yc=a("p"),Djr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Wee=a("a"),Gjr=o("from_pretrained()"),Ojr=o(" class method or the "),Qee=a("a"),Vjr=o("from_config()"),Xjr=o(` class
method.`),zjr=l(),K$=a("p"),Wjr=o("This class cannot be instantiated directly using "),A5e=a("code"),Qjr=o("__init__()"),Ujr=o(" (throws an error)."),Hjr=l(),Qt=a("div"),F(Z$.$$.fragment),Jjr=l(),L5e=a("p"),Yjr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Kjr=l(),Kc=a("p"),Zjr=o(`Note:
Loading a model from its configuration file does `),y5e=a("strong"),eDr=o("not"),oDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uee=a("a"),rDr=o("from_pretrained()"),tDr=o(" to load the model weights."),aDr=l(),F(Q3.$$.fragment),nDr=l(),Or=a("div"),F(ek.$$.fragment),sDr=l(),x5e=a("p"),lDr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),iDr=l(),wn=a("p"),dDr=o("The model class to instantiate is selected based on the "),$5e=a("code"),cDr=o("model_type"),fDr=o(` property of the config object (either
passed as an argument or loaded from `),k5e=a("code"),mDr=o("pretrained_model_name_or_path"),gDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S5e=a("code"),hDr=o("pretrained_model_name_or_path"),pDr=o(":"),_Dr=l(),ok=a("ul"),U3=a("li"),R5e=a("strong"),uDr=o("bert"),bDr=o(" \u2014 "),Hee=a("a"),vDr=o("TFBertForNextSentencePrediction"),FDr=o(" (BERT model)"),TDr=l(),H3=a("li"),P5e=a("strong"),MDr=o("mobilebert"),EDr=o(" \u2014 "),Jee=a("a"),CDr=o("TFMobileBertForNextSentencePrediction"),wDr=o(" (MobileBERT model)"),ADr=l(),F(J3.$$.fragment),pHe=l(),Zc=a("h2"),Y3=a("a"),B5e=a("span"),F(rk.$$.fragment),LDr=l(),I5e=a("span"),yDr=o("TFAutoModelForTableQuestionAnswering"),_He=l(),hr=a("div"),F(tk.$$.fragment),xDr=l(),ef=a("p"),$Dr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Yee=a("a"),kDr=o("from_pretrained()"),SDr=o(" class method or the "),Kee=a("a"),RDr=o("from_config()"),PDr=o(` class
method.`),BDr=l(),ak=a("p"),IDr=o("This class cannot be instantiated directly using "),N5e=a("code"),NDr=o("__init__()"),qDr=o(" (throws an error)."),jDr=l(),Ut=a("div"),F(nk.$$.fragment),DDr=l(),q5e=a("p"),GDr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ODr=l(),of=a("p"),VDr=o(`Note:
Loading a model from its configuration file does `),j5e=a("strong"),XDr=o("not"),zDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zee=a("a"),WDr=o("from_pretrained()"),QDr=o(" to load the model weights."),UDr=l(),F(K3.$$.fragment),HDr=l(),Vr=a("div"),F(sk.$$.fragment),JDr=l(),D5e=a("p"),YDr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),KDr=l(),An=a("p"),ZDr=o("The model class to instantiate is selected based on the "),G5e=a("code"),eGr=o("model_type"),oGr=o(` property of the config object (either
passed as an argument or loaded from `),O5e=a("code"),rGr=o("pretrained_model_name_or_path"),tGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V5e=a("code"),aGr=o("pretrained_model_name_or_path"),nGr=o(":"),sGr=l(),X5e=a("ul"),Z3=a("li"),z5e=a("strong"),lGr=o("tapas"),iGr=o(" \u2014 "),eoe=a("a"),dGr=o("TFTapasForQuestionAnswering"),cGr=o(" (TAPAS model)"),fGr=l(),F(e5.$$.fragment),uHe=l(),rf=a("h2"),o5=a("a"),W5e=a("span"),F(lk.$$.fragment),mGr=l(),Q5e=a("span"),gGr=o("TFAutoModelForTokenClassification"),bHe=l(),pr=a("div"),F(ik.$$.fragment),hGr=l(),tf=a("p"),pGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ooe=a("a"),_Gr=o("from_pretrained()"),uGr=o(" class method or the "),roe=a("a"),bGr=o("from_config()"),vGr=o(` class
method.`),FGr=l(),dk=a("p"),TGr=o("This class cannot be instantiated directly using "),U5e=a("code"),MGr=o("__init__()"),EGr=o(" (throws an error)."),CGr=l(),Ht=a("div"),F(ck.$$.fragment),wGr=l(),H5e=a("p"),AGr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),LGr=l(),af=a("p"),yGr=o(`Note:
Loading a model from its configuration file does `),J5e=a("strong"),xGr=o("not"),$Gr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),toe=a("a"),kGr=o("from_pretrained()"),SGr=o(" to load the model weights."),RGr=l(),F(r5.$$.fragment),PGr=l(),Xr=a("div"),F(fk.$$.fragment),BGr=l(),Y5e=a("p"),IGr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),NGr=l(),Ln=a("p"),qGr=o("The model class to instantiate is selected based on the "),K5e=a("code"),jGr=o("model_type"),DGr=o(` property of the config object (either
passed as an argument or loaded from `),Z5e=a("code"),GGr=o("pretrained_model_name_or_path"),OGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e0e=a("code"),VGr=o("pretrained_model_name_or_path"),XGr=o(":"),zGr=l(),ce=a("ul"),t5=a("li"),o0e=a("strong"),WGr=o("albert"),QGr=o(" \u2014 "),aoe=a("a"),UGr=o("TFAlbertForTokenClassification"),HGr=o(" (ALBERT model)"),JGr=l(),a5=a("li"),r0e=a("strong"),YGr=o("bert"),KGr=o(" \u2014 "),noe=a("a"),ZGr=o("TFBertForTokenClassification"),eOr=o(" (BERT model)"),oOr=l(),n5=a("li"),t0e=a("strong"),rOr=o("camembert"),tOr=o(" \u2014 "),soe=a("a"),aOr=o("TFCamembertForTokenClassification"),nOr=o(" (CamemBERT model)"),sOr=l(),s5=a("li"),a0e=a("strong"),lOr=o("convbert"),iOr=o(" \u2014 "),loe=a("a"),dOr=o("TFConvBertForTokenClassification"),cOr=o(" (ConvBERT model)"),fOr=l(),l5=a("li"),n0e=a("strong"),mOr=o("deberta"),gOr=o(" \u2014 "),ioe=a("a"),hOr=o("TFDebertaForTokenClassification"),pOr=o(" (DeBERTa model)"),_Or=l(),i5=a("li"),s0e=a("strong"),uOr=o("deberta-v2"),bOr=o(" \u2014 "),doe=a("a"),vOr=o("TFDebertaV2ForTokenClassification"),FOr=o(" (DeBERTa-v2 model)"),TOr=l(),d5=a("li"),l0e=a("strong"),MOr=o("distilbert"),EOr=o(" \u2014 "),coe=a("a"),COr=o("TFDistilBertForTokenClassification"),wOr=o(" (DistilBERT model)"),AOr=l(),c5=a("li"),i0e=a("strong"),LOr=o("electra"),yOr=o(" \u2014 "),foe=a("a"),xOr=o("TFElectraForTokenClassification"),$Or=o(" (ELECTRA model)"),kOr=l(),f5=a("li"),d0e=a("strong"),SOr=o("flaubert"),ROr=o(" \u2014 "),moe=a("a"),POr=o("TFFlaubertForTokenClassification"),BOr=o(" (FlauBERT model)"),IOr=l(),m5=a("li"),c0e=a("strong"),NOr=o("funnel"),qOr=o(" \u2014 "),goe=a("a"),jOr=o("TFFunnelForTokenClassification"),DOr=o(" (Funnel Transformer model)"),GOr=l(),g5=a("li"),f0e=a("strong"),OOr=o("layoutlm"),VOr=o(" \u2014 "),hoe=a("a"),XOr=o("TFLayoutLMForTokenClassification"),zOr=o(" (LayoutLM model)"),WOr=l(),h5=a("li"),m0e=a("strong"),QOr=o("longformer"),UOr=o(" \u2014 "),poe=a("a"),HOr=o("TFLongformerForTokenClassification"),JOr=o(" (Longformer model)"),YOr=l(),p5=a("li"),g0e=a("strong"),KOr=o("mobilebert"),ZOr=o(" \u2014 "),_oe=a("a"),eVr=o("TFMobileBertForTokenClassification"),oVr=o(" (MobileBERT model)"),rVr=l(),_5=a("li"),h0e=a("strong"),tVr=o("mpnet"),aVr=o(" \u2014 "),uoe=a("a"),nVr=o("TFMPNetForTokenClassification"),sVr=o(" (MPNet model)"),lVr=l(),u5=a("li"),p0e=a("strong"),iVr=o("rembert"),dVr=o(" \u2014 "),boe=a("a"),cVr=o("TFRemBertForTokenClassification"),fVr=o(" (RemBERT model)"),mVr=l(),b5=a("li"),_0e=a("strong"),gVr=o("roberta"),hVr=o(" \u2014 "),voe=a("a"),pVr=o("TFRobertaForTokenClassification"),_Vr=o(" (RoBERTa model)"),uVr=l(),v5=a("li"),u0e=a("strong"),bVr=o("roformer"),vVr=o(" \u2014 "),Foe=a("a"),FVr=o("TFRoFormerForTokenClassification"),TVr=o(" (RoFormer model)"),MVr=l(),F5=a("li"),b0e=a("strong"),EVr=o("xlm"),CVr=o(" \u2014 "),Toe=a("a"),wVr=o("TFXLMForTokenClassification"),AVr=o(" (XLM model)"),LVr=l(),T5=a("li"),v0e=a("strong"),yVr=o("xlm-roberta"),xVr=o(" \u2014 "),Moe=a("a"),$Vr=o("TFXLMRobertaForTokenClassification"),kVr=o(" (XLM-RoBERTa model)"),SVr=l(),M5=a("li"),F0e=a("strong"),RVr=o("xlnet"),PVr=o(" \u2014 "),Eoe=a("a"),BVr=o("TFXLNetForTokenClassification"),IVr=o(" (XLNet model)"),NVr=l(),F(E5.$$.fragment),vHe=l(),nf=a("h2"),C5=a("a"),T0e=a("span"),F(mk.$$.fragment),qVr=l(),M0e=a("span"),jVr=o("TFAutoModelForQuestionAnswering"),FHe=l(),_r=a("div"),F(gk.$$.fragment),DVr=l(),sf=a("p"),GVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Coe=a("a"),OVr=o("from_pretrained()"),VVr=o(" class method or the "),woe=a("a"),XVr=o("from_config()"),zVr=o(` class
method.`),WVr=l(),hk=a("p"),QVr=o("This class cannot be instantiated directly using "),E0e=a("code"),UVr=o("__init__()"),HVr=o(" (throws an error)."),JVr=l(),Jt=a("div"),F(pk.$$.fragment),YVr=l(),C0e=a("p"),KVr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ZVr=l(),lf=a("p"),eXr=o(`Note:
Loading a model from its configuration file does `),w0e=a("strong"),oXr=o("not"),rXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aoe=a("a"),tXr=o("from_pretrained()"),aXr=o(" to load the model weights."),nXr=l(),F(w5.$$.fragment),sXr=l(),zr=a("div"),F(_k.$$.fragment),lXr=l(),A0e=a("p"),iXr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),dXr=l(),yn=a("p"),cXr=o("The model class to instantiate is selected based on the "),L0e=a("code"),fXr=o("model_type"),mXr=o(` property of the config object (either
passed as an argument or loaded from `),y0e=a("code"),gXr=o("pretrained_model_name_or_path"),hXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x0e=a("code"),pXr=o("pretrained_model_name_or_path"),_Xr=o(":"),uXr=l(),fe=a("ul"),A5=a("li"),$0e=a("strong"),bXr=o("albert"),vXr=o(" \u2014 "),Loe=a("a"),FXr=o("TFAlbertForQuestionAnswering"),TXr=o(" (ALBERT model)"),MXr=l(),L5=a("li"),k0e=a("strong"),EXr=o("bert"),CXr=o(" \u2014 "),yoe=a("a"),wXr=o("TFBertForQuestionAnswering"),AXr=o(" (BERT model)"),LXr=l(),y5=a("li"),S0e=a("strong"),yXr=o("camembert"),xXr=o(" \u2014 "),xoe=a("a"),$Xr=o("TFCamembertForQuestionAnswering"),kXr=o(" (CamemBERT model)"),SXr=l(),x5=a("li"),R0e=a("strong"),RXr=o("convbert"),PXr=o(" \u2014 "),$oe=a("a"),BXr=o("TFConvBertForQuestionAnswering"),IXr=o(" (ConvBERT model)"),NXr=l(),$5=a("li"),P0e=a("strong"),qXr=o("deberta"),jXr=o(" \u2014 "),koe=a("a"),DXr=o("TFDebertaForQuestionAnswering"),GXr=o(" (DeBERTa model)"),OXr=l(),k5=a("li"),B0e=a("strong"),VXr=o("deberta-v2"),XXr=o(" \u2014 "),Soe=a("a"),zXr=o("TFDebertaV2ForQuestionAnswering"),WXr=o(" (DeBERTa-v2 model)"),QXr=l(),S5=a("li"),I0e=a("strong"),UXr=o("distilbert"),HXr=o(" \u2014 "),Roe=a("a"),JXr=o("TFDistilBertForQuestionAnswering"),YXr=o(" (DistilBERT model)"),KXr=l(),R5=a("li"),N0e=a("strong"),ZXr=o("electra"),ezr=o(" \u2014 "),Poe=a("a"),ozr=o("TFElectraForQuestionAnswering"),rzr=o(" (ELECTRA model)"),tzr=l(),P5=a("li"),q0e=a("strong"),azr=o("flaubert"),nzr=o(" \u2014 "),Boe=a("a"),szr=o("TFFlaubertForQuestionAnsweringSimple"),lzr=o(" (FlauBERT model)"),izr=l(),B5=a("li"),j0e=a("strong"),dzr=o("funnel"),czr=o(" \u2014 "),Ioe=a("a"),fzr=o("TFFunnelForQuestionAnswering"),mzr=o(" (Funnel Transformer model)"),gzr=l(),I5=a("li"),D0e=a("strong"),hzr=o("gptj"),pzr=o(" \u2014 "),Noe=a("a"),_zr=o("TFGPTJForQuestionAnswering"),uzr=o(" (GPT-J model)"),bzr=l(),N5=a("li"),G0e=a("strong"),vzr=o("longformer"),Fzr=o(" \u2014 "),qoe=a("a"),Tzr=o("TFLongformerForQuestionAnswering"),Mzr=o(" (Longformer model)"),Ezr=l(),q5=a("li"),O0e=a("strong"),Czr=o("mobilebert"),wzr=o(" \u2014 "),joe=a("a"),Azr=o("TFMobileBertForQuestionAnswering"),Lzr=o(" (MobileBERT model)"),yzr=l(),j5=a("li"),V0e=a("strong"),xzr=o("mpnet"),$zr=o(" \u2014 "),Doe=a("a"),kzr=o("TFMPNetForQuestionAnswering"),Szr=o(" (MPNet model)"),Rzr=l(),D5=a("li"),X0e=a("strong"),Pzr=o("rembert"),Bzr=o(" \u2014 "),Goe=a("a"),Izr=o("TFRemBertForQuestionAnswering"),Nzr=o(" (RemBERT model)"),qzr=l(),G5=a("li"),z0e=a("strong"),jzr=o("roberta"),Dzr=o(" \u2014 "),Ooe=a("a"),Gzr=o("TFRobertaForQuestionAnswering"),Ozr=o(" (RoBERTa model)"),Vzr=l(),O5=a("li"),W0e=a("strong"),Xzr=o("roformer"),zzr=o(" \u2014 "),Voe=a("a"),Wzr=o("TFRoFormerForQuestionAnswering"),Qzr=o(" (RoFormer model)"),Uzr=l(),V5=a("li"),Q0e=a("strong"),Hzr=o("xlm"),Jzr=o(" \u2014 "),Xoe=a("a"),Yzr=o("TFXLMForQuestionAnsweringSimple"),Kzr=o(" (XLM model)"),Zzr=l(),X5=a("li"),U0e=a("strong"),eWr=o("xlm-roberta"),oWr=o(" \u2014 "),zoe=a("a"),rWr=o("TFXLMRobertaForQuestionAnswering"),tWr=o(" (XLM-RoBERTa model)"),aWr=l(),z5=a("li"),H0e=a("strong"),nWr=o("xlnet"),sWr=o(" \u2014 "),Woe=a("a"),lWr=o("TFXLNetForQuestionAnsweringSimple"),iWr=o(" (XLNet model)"),dWr=l(),F(W5.$$.fragment),THe=l(),df=a("h2"),Q5=a("a"),J0e=a("span"),F(uk.$$.fragment),cWr=l(),Y0e=a("span"),fWr=o("TFAutoModelForVision2Seq"),MHe=l(),ur=a("div"),F(bk.$$.fragment),mWr=l(),cf=a("p"),gWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Qoe=a("a"),hWr=o("from_pretrained()"),pWr=o(" class method or the "),Uoe=a("a"),_Wr=o("from_config()"),uWr=o(` class
method.`),bWr=l(),vk=a("p"),vWr=o("This class cannot be instantiated directly using "),K0e=a("code"),FWr=o("__init__()"),TWr=o(" (throws an error)."),MWr=l(),Yt=a("div"),F(Fk.$$.fragment),EWr=l(),Z0e=a("p"),CWr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wWr=l(),ff=a("p"),AWr=o(`Note:
Loading a model from its configuration file does `),ewe=a("strong"),LWr=o("not"),yWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hoe=a("a"),xWr=o("from_pretrained()"),$Wr=o(" to load the model weights."),kWr=l(),F(U5.$$.fragment),SWr=l(),Wr=a("div"),F(Tk.$$.fragment),RWr=l(),owe=a("p"),PWr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),BWr=l(),xn=a("p"),IWr=o("The model class to instantiate is selected based on the "),rwe=a("code"),NWr=o("model_type"),qWr=o(` property of the config object (either
passed as an argument or loaded from `),twe=a("code"),jWr=o("pretrained_model_name_or_path"),DWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),awe=a("code"),GWr=o("pretrained_model_name_or_path"),OWr=o(":"),VWr=l(),nwe=a("ul"),H5=a("li"),swe=a("strong"),XWr=o("vision-encoder-decoder"),zWr=o(" \u2014 "),Joe=a("a"),WWr=o("TFVisionEncoderDecoderModel"),QWr=o(" (Vision Encoder decoder model)"),UWr=l(),F(J5.$$.fragment),EHe=l(),mf=a("h2"),Y5=a("a"),lwe=a("span"),F(Mk.$$.fragment),HWr=l(),iwe=a("span"),JWr=o("TFAutoModelForSpeechSeq2Seq"),CHe=l(),br=a("div"),F(Ek.$$.fragment),YWr=l(),gf=a("p"),KWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Yoe=a("a"),ZWr=o("from_pretrained()"),eQr=o(" class method or the "),Koe=a("a"),oQr=o("from_config()"),rQr=o(` class
method.`),tQr=l(),Ck=a("p"),aQr=o("This class cannot be instantiated directly using "),dwe=a("code"),nQr=o("__init__()"),sQr=o(" (throws an error)."),lQr=l(),Kt=a("div"),F(wk.$$.fragment),iQr=l(),cwe=a("p"),dQr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),cQr=l(),hf=a("p"),fQr=o(`Note:
Loading a model from its configuration file does `),fwe=a("strong"),mQr=o("not"),gQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=a("a"),hQr=o("from_pretrained()"),pQr=o(" to load the model weights."),_Qr=l(),F(K5.$$.fragment),uQr=l(),Qr=a("div"),F(Ak.$$.fragment),bQr=l(),mwe=a("p"),vQr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),FQr=l(),$n=a("p"),TQr=o("The model class to instantiate is selected based on the "),gwe=a("code"),MQr=o("model_type"),EQr=o(` property of the config object (either
passed as an argument or loaded from `),hwe=a("code"),CQr=o("pretrained_model_name_or_path"),wQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pwe=a("code"),AQr=o("pretrained_model_name_or_path"),LQr=o(":"),yQr=l(),_we=a("ul"),Z5=a("li"),uwe=a("strong"),xQr=o("speech_to_text"),$Qr=o(" \u2014 "),ere=a("a"),kQr=o("TFSpeech2TextForConditionalGeneration"),SQr=o(" (Speech2Text model)"),RQr=l(),F(e0.$$.fragment),wHe=l(),pf=a("h2"),o0=a("a"),bwe=a("span"),F(Lk.$$.fragment),PQr=l(),vwe=a("span"),BQr=o("FlaxAutoModel"),AHe=l(),vr=a("div"),F(yk.$$.fragment),IQr=l(),_f=a("p"),NQr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ore=a("a"),qQr=o("from_pretrained()"),jQr=o(" class method or the "),rre=a("a"),DQr=o("from_config()"),GQr=o(` class
method.`),OQr=l(),xk=a("p"),VQr=o("This class cannot be instantiated directly using "),Fwe=a("code"),XQr=o("__init__()"),zQr=o(" (throws an error)."),WQr=l(),Zt=a("div"),F($k.$$.fragment),QQr=l(),Twe=a("p"),UQr=o("Instantiates one of the base model classes of the library from a configuration."),HQr=l(),uf=a("p"),JQr=o(`Note:
Loading a model from its configuration file does `),Mwe=a("strong"),YQr=o("not"),KQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tre=a("a"),ZQr=o("from_pretrained()"),eUr=o(" to load the model weights."),oUr=l(),F(r0.$$.fragment),rUr=l(),Ur=a("div"),F(kk.$$.fragment),tUr=l(),Ewe=a("p"),aUr=o("Instantiate one of the base model classes of the library from a pretrained model."),nUr=l(),kn=a("p"),sUr=o("The model class to instantiate is selected based on the "),Cwe=a("code"),lUr=o("model_type"),iUr=o(` property of the config object (either
passed as an argument or loaded from `),wwe=a("code"),dUr=o("pretrained_model_name_or_path"),cUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Awe=a("code"),fUr=o("pretrained_model_name_or_path"),mUr=o(":"),gUr=l(),re=a("ul"),t0=a("li"),Lwe=a("strong"),hUr=o("albert"),pUr=o(" \u2014 "),are=a("a"),_Ur=o("FlaxAlbertModel"),uUr=o(" (ALBERT model)"),bUr=l(),a0=a("li"),ywe=a("strong"),vUr=o("bart"),FUr=o(" \u2014 "),nre=a("a"),TUr=o("FlaxBartModel"),MUr=o(" (BART model)"),EUr=l(),n0=a("li"),xwe=a("strong"),CUr=o("beit"),wUr=o(" \u2014 "),sre=a("a"),AUr=o("FlaxBeitModel"),LUr=o(" (BEiT model)"),yUr=l(),s0=a("li"),$we=a("strong"),xUr=o("bert"),$Ur=o(" \u2014 "),lre=a("a"),kUr=o("FlaxBertModel"),SUr=o(" (BERT model)"),RUr=l(),l0=a("li"),kwe=a("strong"),PUr=o("big_bird"),BUr=o(" \u2014 "),ire=a("a"),IUr=o("FlaxBigBirdModel"),NUr=o(" (BigBird model)"),qUr=l(),i0=a("li"),Swe=a("strong"),jUr=o("blenderbot"),DUr=o(" \u2014 "),dre=a("a"),GUr=o("FlaxBlenderbotModel"),OUr=o(" (Blenderbot model)"),VUr=l(),d0=a("li"),Rwe=a("strong"),XUr=o("blenderbot-small"),zUr=o(" \u2014 "),cre=a("a"),WUr=o("FlaxBlenderbotSmallModel"),QUr=o(" (BlenderbotSmall model)"),UUr=l(),c0=a("li"),Pwe=a("strong"),HUr=o("clip"),JUr=o(" \u2014 "),fre=a("a"),YUr=o("FlaxCLIPModel"),KUr=o(" (CLIP model)"),ZUr=l(),f0=a("li"),Bwe=a("strong"),eHr=o("distilbert"),oHr=o(" \u2014 "),mre=a("a"),rHr=o("FlaxDistilBertModel"),tHr=o(" (DistilBERT model)"),aHr=l(),m0=a("li"),Iwe=a("strong"),nHr=o("electra"),sHr=o(" \u2014 "),gre=a("a"),lHr=o("FlaxElectraModel"),iHr=o(" (ELECTRA model)"),dHr=l(),g0=a("li"),Nwe=a("strong"),cHr=o("gpt2"),fHr=o(" \u2014 "),hre=a("a"),mHr=o("FlaxGPT2Model"),gHr=o(" (OpenAI GPT-2 model)"),hHr=l(),h0=a("li"),qwe=a("strong"),pHr=o("gpt_neo"),_Hr=o(" \u2014 "),pre=a("a"),uHr=o("FlaxGPTNeoModel"),bHr=o(" (GPT Neo model)"),vHr=l(),p0=a("li"),jwe=a("strong"),FHr=o("gptj"),THr=o(" \u2014 "),_re=a("a"),MHr=o("FlaxGPTJModel"),EHr=o(" (GPT-J model)"),CHr=l(),_0=a("li"),Dwe=a("strong"),wHr=o("longt5"),AHr=o(" \u2014 "),ure=a("a"),LHr=o("FlaxLongT5Model"),yHr=o(" (LongT5 model)"),xHr=l(),u0=a("li"),Gwe=a("strong"),$Hr=o("marian"),kHr=o(" \u2014 "),bre=a("a"),SHr=o("FlaxMarianModel"),RHr=o(" (Marian model)"),PHr=l(),b0=a("li"),Owe=a("strong"),BHr=o("mbart"),IHr=o(" \u2014 "),vre=a("a"),NHr=o("FlaxMBartModel"),qHr=o(" (mBART model)"),jHr=l(),v0=a("li"),Vwe=a("strong"),DHr=o("mt5"),GHr=o(" \u2014 "),Fre=a("a"),OHr=o("FlaxMT5Model"),VHr=o(" (MT5 model)"),XHr=l(),F0=a("li"),Xwe=a("strong"),zHr=o("opt"),WHr=o(" \u2014 "),Tre=a("a"),QHr=o("FlaxOPTModel"),UHr=o(" (OPT model)"),HHr=l(),T0=a("li"),zwe=a("strong"),JHr=o("pegasus"),YHr=o(" \u2014 "),Mre=a("a"),KHr=o("FlaxPegasusModel"),ZHr=o(" (Pegasus model)"),eJr=l(),M0=a("li"),Wwe=a("strong"),oJr=o("roberta"),rJr=o(" \u2014 "),Ere=a("a"),tJr=o("FlaxRobertaModel"),aJr=o(" (RoBERTa model)"),nJr=l(),E0=a("li"),Qwe=a("strong"),sJr=o("roformer"),lJr=o(" \u2014 "),Cre=a("a"),iJr=o("FlaxRoFormerModel"),dJr=o(" (RoFormer model)"),cJr=l(),C0=a("li"),Uwe=a("strong"),fJr=o("t5"),mJr=o(" \u2014 "),wre=a("a"),gJr=o("FlaxT5Model"),hJr=o(" (T5 model)"),pJr=l(),w0=a("li"),Hwe=a("strong"),_Jr=o("vision-text-dual-encoder"),uJr=o(" \u2014 "),Are=a("a"),bJr=o("FlaxVisionTextDualEncoderModel"),vJr=o(" (VisionTextDualEncoder model)"),FJr=l(),A0=a("li"),Jwe=a("strong"),TJr=o("vit"),MJr=o(" \u2014 "),Lre=a("a"),EJr=o("FlaxViTModel"),CJr=o(" (ViT model)"),wJr=l(),L0=a("li"),Ywe=a("strong"),AJr=o("wav2vec2"),LJr=o(" \u2014 "),yre=a("a"),yJr=o("FlaxWav2Vec2Model"),xJr=o(" (Wav2Vec2 model)"),$Jr=l(),y0=a("li"),Kwe=a("strong"),kJr=o("xglm"),SJr=o(" \u2014 "),xre=a("a"),RJr=o("FlaxXGLMModel"),PJr=o(" (XGLM model)"),BJr=l(),x0=a("li"),Zwe=a("strong"),IJr=o("xlm-roberta"),NJr=o(" \u2014 "),$re=a("a"),qJr=o("FlaxXLMRobertaModel"),jJr=o(" (XLM-RoBERTa model)"),DJr=l(),F($0.$$.fragment),LHe=l(),bf=a("h2"),k0=a("a"),eAe=a("span"),F(Sk.$$.fragment),GJr=l(),oAe=a("span"),OJr=o("FlaxAutoModelForCausalLM"),yHe=l(),Fr=a("div"),F(Rk.$$.fragment),VJr=l(),vf=a("p"),XJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kre=a("a"),zJr=o("from_pretrained()"),WJr=o(" class method or the "),Sre=a("a"),QJr=o("from_config()"),UJr=o(` class
method.`),HJr=l(),Pk=a("p"),JJr=o("This class cannot be instantiated directly using "),rAe=a("code"),YJr=o("__init__()"),KJr=o(" (throws an error)."),ZJr=l(),ea=a("div"),F(Bk.$$.fragment),eYr=l(),tAe=a("p"),oYr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rYr=l(),Ff=a("p"),tYr=o(`Note:
Loading a model from its configuration file does `),aAe=a("strong"),aYr=o("not"),nYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rre=a("a"),sYr=o("from_pretrained()"),lYr=o(" to load the model weights."),iYr=l(),F(S0.$$.fragment),dYr=l(),Hr=a("div"),F(Ik.$$.fragment),cYr=l(),nAe=a("p"),fYr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mYr=l(),Sn=a("p"),gYr=o("The model class to instantiate is selected based on the "),sAe=a("code"),hYr=o("model_type"),pYr=o(` property of the config object (either
passed as an argument or loaded from `),lAe=a("code"),_Yr=o("pretrained_model_name_or_path"),uYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iAe=a("code"),bYr=o("pretrained_model_name_or_path"),vYr=o(":"),FYr=l(),xe=a("ul"),R0=a("li"),dAe=a("strong"),TYr=o("bart"),MYr=o(" \u2014 "),Pre=a("a"),EYr=o("FlaxBartForCausalLM"),CYr=o(" (BART model)"),wYr=l(),P0=a("li"),cAe=a("strong"),AYr=o("bert"),LYr=o(" \u2014 "),Bre=a("a"),yYr=o("FlaxBertForCausalLM"),xYr=o(" (BERT model)"),$Yr=l(),B0=a("li"),fAe=a("strong"),kYr=o("big_bird"),SYr=o(" \u2014 "),Ire=a("a"),RYr=o("FlaxBigBirdForCausalLM"),PYr=o(" (BigBird model)"),BYr=l(),I0=a("li"),mAe=a("strong"),IYr=o("electra"),NYr=o(" \u2014 "),Nre=a("a"),qYr=o("FlaxElectraForCausalLM"),jYr=o(" (ELECTRA model)"),DYr=l(),N0=a("li"),gAe=a("strong"),GYr=o("gpt2"),OYr=o(" \u2014 "),qre=a("a"),VYr=o("FlaxGPT2LMHeadModel"),XYr=o(" (OpenAI GPT-2 model)"),zYr=l(),q0=a("li"),hAe=a("strong"),WYr=o("gpt_neo"),QYr=o(" \u2014 "),jre=a("a"),UYr=o("FlaxGPTNeoForCausalLM"),HYr=o(" (GPT Neo model)"),JYr=l(),j0=a("li"),pAe=a("strong"),YYr=o("gptj"),KYr=o(" \u2014 "),Dre=a("a"),ZYr=o("FlaxGPTJForCausalLM"),eKr=o(" (GPT-J model)"),oKr=l(),D0=a("li"),_Ae=a("strong"),rKr=o("opt"),tKr=o(" \u2014 "),Gre=a("a"),aKr=o("FlaxOPTForCausalLM"),nKr=o(" (OPT model)"),sKr=l(),G0=a("li"),uAe=a("strong"),lKr=o("roberta"),iKr=o(" \u2014 "),Ore=a("a"),dKr=o("FlaxRobertaForCausalLM"),cKr=o(" (RoBERTa model)"),fKr=l(),O0=a("li"),bAe=a("strong"),mKr=o("xglm"),gKr=o(" \u2014 "),Vre=a("a"),hKr=o("FlaxXGLMForCausalLM"),pKr=o(" (XGLM model)"),_Kr=l(),F(V0.$$.fragment),xHe=l(),Tf=a("h2"),X0=a("a"),vAe=a("span"),F(Nk.$$.fragment),uKr=l(),FAe=a("span"),bKr=o("FlaxAutoModelForPreTraining"),$He=l(),Tr=a("div"),F(qk.$$.fragment),vKr=l(),Mf=a("p"),FKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Xre=a("a"),TKr=o("from_pretrained()"),MKr=o(" class method or the "),zre=a("a"),EKr=o("from_config()"),CKr=o(` class
method.`),wKr=l(),jk=a("p"),AKr=o("This class cannot be instantiated directly using "),TAe=a("code"),LKr=o("__init__()"),yKr=o(" (throws an error)."),xKr=l(),oa=a("div"),F(Dk.$$.fragment),$Kr=l(),MAe=a("p"),kKr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),SKr=l(),Ef=a("p"),RKr=o(`Note:
Loading a model from its configuration file does `),EAe=a("strong"),PKr=o("not"),BKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wre=a("a"),IKr=o("from_pretrained()"),NKr=o(" to load the model weights."),qKr=l(),F(z0.$$.fragment),jKr=l(),Jr=a("div"),F(Gk.$$.fragment),DKr=l(),CAe=a("p"),GKr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),OKr=l(),Rn=a("p"),VKr=o("The model class to instantiate is selected based on the "),wAe=a("code"),XKr=o("model_type"),zKr=o(` property of the config object (either
passed as an argument or loaded from `),AAe=a("code"),WKr=o("pretrained_model_name_or_path"),QKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LAe=a("code"),UKr=o("pretrained_model_name_or_path"),HKr=o(":"),JKr=l(),Ee=a("ul"),W0=a("li"),yAe=a("strong"),YKr=o("albert"),KKr=o(" \u2014 "),Qre=a("a"),ZKr=o("FlaxAlbertForPreTraining"),eZr=o(" (ALBERT model)"),oZr=l(),Q0=a("li"),xAe=a("strong"),rZr=o("bart"),tZr=o(" \u2014 "),Ure=a("a"),aZr=o("FlaxBartForConditionalGeneration"),nZr=o(" (BART model)"),sZr=l(),U0=a("li"),$Ae=a("strong"),lZr=o("bert"),iZr=o(" \u2014 "),Hre=a("a"),dZr=o("FlaxBertForPreTraining"),cZr=o(" (BERT model)"),fZr=l(),H0=a("li"),kAe=a("strong"),mZr=o("big_bird"),gZr=o(" \u2014 "),Jre=a("a"),hZr=o("FlaxBigBirdForPreTraining"),pZr=o(" (BigBird model)"),_Zr=l(),J0=a("li"),SAe=a("strong"),uZr=o("electra"),bZr=o(" \u2014 "),Yre=a("a"),vZr=o("FlaxElectraForPreTraining"),FZr=o(" (ELECTRA model)"),TZr=l(),Y0=a("li"),RAe=a("strong"),MZr=o("longt5"),EZr=o(" \u2014 "),Kre=a("a"),CZr=o("FlaxLongT5ForConditionalGeneration"),wZr=o(" (LongT5 model)"),AZr=l(),K0=a("li"),PAe=a("strong"),LZr=o("mbart"),yZr=o(" \u2014 "),Zre=a("a"),xZr=o("FlaxMBartForConditionalGeneration"),$Zr=o(" (mBART model)"),kZr=l(),Z0=a("li"),BAe=a("strong"),SZr=o("mt5"),RZr=o(" \u2014 "),ete=a("a"),PZr=o("FlaxMT5ForConditionalGeneration"),BZr=o(" (MT5 model)"),IZr=l(),ew=a("li"),IAe=a("strong"),NZr=o("roberta"),qZr=o(" \u2014 "),ote=a("a"),jZr=o("FlaxRobertaForMaskedLM"),DZr=o(" (RoBERTa model)"),GZr=l(),ow=a("li"),NAe=a("strong"),OZr=o("roformer"),VZr=o(" \u2014 "),rte=a("a"),XZr=o("FlaxRoFormerForMaskedLM"),zZr=o(" (RoFormer model)"),WZr=l(),rw=a("li"),qAe=a("strong"),QZr=o("t5"),UZr=o(" \u2014 "),tte=a("a"),HZr=o("FlaxT5ForConditionalGeneration"),JZr=o(" (T5 model)"),YZr=l(),tw=a("li"),jAe=a("strong"),KZr=o("wav2vec2"),ZZr=o(" \u2014 "),ate=a("a"),eet=o("FlaxWav2Vec2ForPreTraining"),oet=o(" (Wav2Vec2 model)"),ret=l(),aw=a("li"),DAe=a("strong"),tet=o("xlm-roberta"),aet=o(" \u2014 "),nte=a("a"),net=o("FlaxXLMRobertaForMaskedLM"),set=o(" (XLM-RoBERTa model)"),iet=l(),F(nw.$$.fragment),kHe=l(),Cf=a("h2"),sw=a("a"),GAe=a("span"),F(Ok.$$.fragment),det=l(),OAe=a("span"),cet=o("FlaxAutoModelForMaskedLM"),SHe=l(),Mr=a("div"),F(Vk.$$.fragment),fet=l(),wf=a("p"),met=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ste=a("a"),get=o("from_pretrained()"),het=o(" class method or the "),lte=a("a"),pet=o("from_config()"),_et=o(` class
method.`),uet=l(),Xk=a("p"),bet=o("This class cannot be instantiated directly using "),VAe=a("code"),vet=o("__init__()"),Fet=o(" (throws an error)."),Tet=l(),ra=a("div"),F(zk.$$.fragment),Met=l(),XAe=a("p"),Eet=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Cet=l(),Af=a("p"),wet=o(`Note:
Loading a model from its configuration file does `),zAe=a("strong"),Aet=o("not"),Let=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ite=a("a"),yet=o("from_pretrained()"),xet=o(" to load the model weights."),$et=l(),F(lw.$$.fragment),ket=l(),Yr=a("div"),F(Wk.$$.fragment),Set=l(),WAe=a("p"),Ret=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Pet=l(),Pn=a("p"),Bet=o("The model class to instantiate is selected based on the "),QAe=a("code"),Iet=o("model_type"),Net=o(` property of the config object (either
passed as an argument or loaded from `),UAe=a("code"),qet=o("pretrained_model_name_or_path"),jet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HAe=a("code"),Det=o("pretrained_model_name_or_path"),Get=o(":"),Oet=l(),$e=a("ul"),iw=a("li"),JAe=a("strong"),Vet=o("albert"),Xet=o(" \u2014 "),dte=a("a"),zet=o("FlaxAlbertForMaskedLM"),Wet=o(" (ALBERT model)"),Qet=l(),dw=a("li"),YAe=a("strong"),Uet=o("bart"),Het=o(" \u2014 "),cte=a("a"),Jet=o("FlaxBartForConditionalGeneration"),Yet=o(" (BART model)"),Ket=l(),cw=a("li"),KAe=a("strong"),Zet=o("bert"),eot=o(" \u2014 "),fte=a("a"),oot=o("FlaxBertForMaskedLM"),rot=o(" (BERT model)"),tot=l(),fw=a("li"),ZAe=a("strong"),aot=o("big_bird"),not=o(" \u2014 "),mte=a("a"),sot=o("FlaxBigBirdForMaskedLM"),lot=o(" (BigBird model)"),iot=l(),mw=a("li"),e7e=a("strong"),dot=o("distilbert"),cot=o(" \u2014 "),gte=a("a"),fot=o("FlaxDistilBertForMaskedLM"),mot=o(" (DistilBERT model)"),got=l(),gw=a("li"),o7e=a("strong"),hot=o("electra"),pot=o(" \u2014 "),hte=a("a"),_ot=o("FlaxElectraForMaskedLM"),uot=o(" (ELECTRA model)"),bot=l(),hw=a("li"),r7e=a("strong"),vot=o("mbart"),Fot=o(" \u2014 "),pte=a("a"),Tot=o("FlaxMBartForConditionalGeneration"),Mot=o(" (mBART model)"),Eot=l(),pw=a("li"),t7e=a("strong"),Cot=o("roberta"),wot=o(" \u2014 "),_te=a("a"),Aot=o("FlaxRobertaForMaskedLM"),Lot=o(" (RoBERTa model)"),yot=l(),_w=a("li"),a7e=a("strong"),xot=o("roformer"),$ot=o(" \u2014 "),ute=a("a"),kot=o("FlaxRoFormerForMaskedLM"),Sot=o(" (RoFormer model)"),Rot=l(),uw=a("li"),n7e=a("strong"),Pot=o("xlm-roberta"),Bot=o(" \u2014 "),bte=a("a"),Iot=o("FlaxXLMRobertaForMaskedLM"),Not=o(" (XLM-RoBERTa model)"),qot=l(),F(bw.$$.fragment),RHe=l(),Lf=a("h2"),vw=a("a"),s7e=a("span"),F(Qk.$$.fragment),jot=l(),l7e=a("span"),Dot=o("FlaxAutoModelForSeq2SeqLM"),PHe=l(),Er=a("div"),F(Uk.$$.fragment),Got=l(),yf=a("p"),Oot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vte=a("a"),Vot=o("from_pretrained()"),Xot=o(" class method or the "),Fte=a("a"),zot=o("from_config()"),Wot=o(` class
method.`),Qot=l(),Hk=a("p"),Uot=o("This class cannot be instantiated directly using "),i7e=a("code"),Hot=o("__init__()"),Jot=o(" (throws an error)."),Yot=l(),ta=a("div"),F(Jk.$$.fragment),Kot=l(),d7e=a("p"),Zot=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ert=l(),xf=a("p"),ort=o(`Note:
Loading a model from its configuration file does `),c7e=a("strong"),rrt=o("not"),trt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tte=a("a"),art=o("from_pretrained()"),nrt=o(" to load the model weights."),srt=l(),F(Fw.$$.fragment),lrt=l(),Kr=a("div"),F(Yk.$$.fragment),irt=l(),f7e=a("p"),drt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),crt=l(),Bn=a("p"),frt=o("The model class to instantiate is selected based on the "),m7e=a("code"),mrt=o("model_type"),grt=o(` property of the config object (either
passed as an argument or loaded from `),g7e=a("code"),hrt=o("pretrained_model_name_or_path"),prt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h7e=a("code"),_rt=o("pretrained_model_name_or_path"),urt=o(":"),brt=l(),ke=a("ul"),Tw=a("li"),p7e=a("strong"),vrt=o("bart"),Frt=o(" \u2014 "),Mte=a("a"),Trt=o("FlaxBartForConditionalGeneration"),Mrt=o(" (BART model)"),Ert=l(),Mw=a("li"),_7e=a("strong"),Crt=o("blenderbot"),wrt=o(" \u2014 "),Ete=a("a"),Art=o("FlaxBlenderbotForConditionalGeneration"),Lrt=o(" (Blenderbot model)"),yrt=l(),Ew=a("li"),u7e=a("strong"),xrt=o("blenderbot-small"),$rt=o(" \u2014 "),Cte=a("a"),krt=o("FlaxBlenderbotSmallForConditionalGeneration"),Srt=o(" (BlenderbotSmall model)"),Rrt=l(),Cw=a("li"),b7e=a("strong"),Prt=o("encoder-decoder"),Brt=o(" \u2014 "),wte=a("a"),Irt=o("FlaxEncoderDecoderModel"),Nrt=o(" (Encoder decoder model)"),qrt=l(),ww=a("li"),v7e=a("strong"),jrt=o("longt5"),Drt=o(" \u2014 "),Ate=a("a"),Grt=o("FlaxLongT5ForConditionalGeneration"),Ort=o(" (LongT5 model)"),Vrt=l(),Aw=a("li"),F7e=a("strong"),Xrt=o("marian"),zrt=o(" \u2014 "),Lte=a("a"),Wrt=o("FlaxMarianMTModel"),Qrt=o(" (Marian model)"),Urt=l(),Lw=a("li"),T7e=a("strong"),Hrt=o("mbart"),Jrt=o(" \u2014 "),yte=a("a"),Yrt=o("FlaxMBartForConditionalGeneration"),Krt=o(" (mBART model)"),Zrt=l(),yw=a("li"),M7e=a("strong"),ett=o("mt5"),ott=o(" \u2014 "),xte=a("a"),rtt=o("FlaxMT5ForConditionalGeneration"),ttt=o(" (MT5 model)"),att=l(),xw=a("li"),E7e=a("strong"),ntt=o("pegasus"),stt=o(" \u2014 "),$te=a("a"),ltt=o("FlaxPegasusForConditionalGeneration"),itt=o(" (Pegasus model)"),dtt=l(),$w=a("li"),C7e=a("strong"),ctt=o("t5"),ftt=o(" \u2014 "),kte=a("a"),mtt=o("FlaxT5ForConditionalGeneration"),gtt=o(" (T5 model)"),htt=l(),F(kw.$$.fragment),BHe=l(),$f=a("h2"),Sw=a("a"),w7e=a("span"),F(Kk.$$.fragment),ptt=l(),A7e=a("span"),_tt=o("FlaxAutoModelForSequenceClassification"),IHe=l(),Cr=a("div"),F(Zk.$$.fragment),utt=l(),kf=a("p"),btt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ste=a("a"),vtt=o("from_pretrained()"),Ftt=o(" class method or the "),Rte=a("a"),Ttt=o("from_config()"),Mtt=o(` class
method.`),Ett=l(),eS=a("p"),Ctt=o("This class cannot be instantiated directly using "),L7e=a("code"),wtt=o("__init__()"),Att=o(" (throws an error)."),Ltt=l(),aa=a("div"),F(oS.$$.fragment),ytt=l(),y7e=a("p"),xtt=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$tt=l(),Sf=a("p"),ktt=o(`Note:
Loading a model from its configuration file does `),x7e=a("strong"),Stt=o("not"),Rtt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pte=a("a"),Ptt=o("from_pretrained()"),Btt=o(" to load the model weights."),Itt=l(),F(Rw.$$.fragment),Ntt=l(),Zr=a("div"),F(rS.$$.fragment),qtt=l(),$7e=a("p"),jtt=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Dtt=l(),In=a("p"),Gtt=o("The model class to instantiate is selected based on the "),k7e=a("code"),Ott=o("model_type"),Vtt=o(` property of the config object (either
passed as an argument or loaded from `),S7e=a("code"),Xtt=o("pretrained_model_name_or_path"),ztt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R7e=a("code"),Wtt=o("pretrained_model_name_or_path"),Qtt=o(":"),Utt=l(),Se=a("ul"),Pw=a("li"),P7e=a("strong"),Htt=o("albert"),Jtt=o(" \u2014 "),Bte=a("a"),Ytt=o("FlaxAlbertForSequenceClassification"),Ktt=o(" (ALBERT model)"),Ztt=l(),Bw=a("li"),B7e=a("strong"),eat=o("bart"),oat=o(" \u2014 "),Ite=a("a"),rat=o("FlaxBartForSequenceClassification"),tat=o(" (BART model)"),aat=l(),Iw=a("li"),I7e=a("strong"),nat=o("bert"),sat=o(" \u2014 "),Nte=a("a"),lat=o("FlaxBertForSequenceClassification"),iat=o(" (BERT model)"),dat=l(),Nw=a("li"),N7e=a("strong"),cat=o("big_bird"),fat=o(" \u2014 "),qte=a("a"),mat=o("FlaxBigBirdForSequenceClassification"),gat=o(" (BigBird model)"),hat=l(),qw=a("li"),q7e=a("strong"),pat=o("distilbert"),_at=o(" \u2014 "),jte=a("a"),uat=o("FlaxDistilBertForSequenceClassification"),bat=o(" (DistilBERT model)"),vat=l(),jw=a("li"),j7e=a("strong"),Fat=o("electra"),Tat=o(" \u2014 "),Dte=a("a"),Mat=o("FlaxElectraForSequenceClassification"),Eat=o(" (ELECTRA model)"),Cat=l(),Dw=a("li"),D7e=a("strong"),wat=o("mbart"),Aat=o(" \u2014 "),Gte=a("a"),Lat=o("FlaxMBartForSequenceClassification"),yat=o(" (mBART model)"),xat=l(),Gw=a("li"),G7e=a("strong"),$at=o("roberta"),kat=o(" \u2014 "),Ote=a("a"),Sat=o("FlaxRobertaForSequenceClassification"),Rat=o(" (RoBERTa model)"),Pat=l(),Ow=a("li"),O7e=a("strong"),Bat=o("roformer"),Iat=o(" \u2014 "),Vte=a("a"),Nat=o("FlaxRoFormerForSequenceClassification"),qat=o(" (RoFormer model)"),jat=l(),Vw=a("li"),V7e=a("strong"),Dat=o("xlm-roberta"),Gat=o(" \u2014 "),Xte=a("a"),Oat=o("FlaxXLMRobertaForSequenceClassification"),Vat=o(" (XLM-RoBERTa model)"),Xat=l(),F(Xw.$$.fragment),NHe=l(),Rf=a("h2"),zw=a("a"),X7e=a("span"),F(tS.$$.fragment),zat=l(),z7e=a("span"),Wat=o("FlaxAutoModelForQuestionAnswering"),qHe=l(),wr=a("div"),F(aS.$$.fragment),Qat=l(),Pf=a("p"),Uat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zte=a("a"),Hat=o("from_pretrained()"),Jat=o(" class method or the "),Wte=a("a"),Yat=o("from_config()"),Kat=o(` class
method.`),Zat=l(),nS=a("p"),ent=o("This class cannot be instantiated directly using "),W7e=a("code"),ont=o("__init__()"),rnt=o(" (throws an error)."),tnt=l(),na=a("div"),F(sS.$$.fragment),ant=l(),Q7e=a("p"),nnt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),snt=l(),Bf=a("p"),lnt=o(`Note:
Loading a model from its configuration file does `),U7e=a("strong"),int=o("not"),dnt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qte=a("a"),cnt=o("from_pretrained()"),fnt=o(" to load the model weights."),mnt=l(),F(Ww.$$.fragment),gnt=l(),et=a("div"),F(lS.$$.fragment),hnt=l(),H7e=a("p"),pnt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_nt=l(),Nn=a("p"),unt=o("The model class to instantiate is selected based on the "),J7e=a("code"),bnt=o("model_type"),vnt=o(` property of the config object (either
passed as an argument or loaded from `),Y7e=a("code"),Fnt=o("pretrained_model_name_or_path"),Tnt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=a("code"),Mnt=o("pretrained_model_name_or_path"),Ent=o(":"),Cnt=l(),Re=a("ul"),Qw=a("li"),Z7e=a("strong"),wnt=o("albert"),Ant=o(" \u2014 "),Ute=a("a"),Lnt=o("FlaxAlbertForQuestionAnswering"),ynt=o(" (ALBERT model)"),xnt=l(),Uw=a("li"),eLe=a("strong"),$nt=o("bart"),knt=o(" \u2014 "),Hte=a("a"),Snt=o("FlaxBartForQuestionAnswering"),Rnt=o(" (BART model)"),Pnt=l(),Hw=a("li"),oLe=a("strong"),Bnt=o("bert"),Int=o(" \u2014 "),Jte=a("a"),Nnt=o("FlaxBertForQuestionAnswering"),qnt=o(" (BERT model)"),jnt=l(),Jw=a("li"),rLe=a("strong"),Dnt=o("big_bird"),Gnt=o(" \u2014 "),Yte=a("a"),Ont=o("FlaxBigBirdForQuestionAnswering"),Vnt=o(" (BigBird model)"),Xnt=l(),Yw=a("li"),tLe=a("strong"),znt=o("distilbert"),Wnt=o(" \u2014 "),Kte=a("a"),Qnt=o("FlaxDistilBertForQuestionAnswering"),Unt=o(" (DistilBERT model)"),Hnt=l(),Kw=a("li"),aLe=a("strong"),Jnt=o("electra"),Ynt=o(" \u2014 "),Zte=a("a"),Knt=o("FlaxElectraForQuestionAnswering"),Znt=o(" (ELECTRA model)"),est=l(),Zw=a("li"),nLe=a("strong"),ost=o("mbart"),rst=o(" \u2014 "),eae=a("a"),tst=o("FlaxMBartForQuestionAnswering"),ast=o(" (mBART model)"),nst=l(),eA=a("li"),sLe=a("strong"),sst=o("roberta"),lst=o(" \u2014 "),oae=a("a"),ist=o("FlaxRobertaForQuestionAnswering"),dst=o(" (RoBERTa model)"),cst=l(),oA=a("li"),lLe=a("strong"),fst=o("roformer"),mst=o(" \u2014 "),rae=a("a"),gst=o("FlaxRoFormerForQuestionAnswering"),hst=o(" (RoFormer model)"),pst=l(),rA=a("li"),iLe=a("strong"),_st=o("xlm-roberta"),ust=o(" \u2014 "),tae=a("a"),bst=o("FlaxXLMRobertaForQuestionAnswering"),vst=o(" (XLM-RoBERTa model)"),Fst=l(),F(tA.$$.fragment),jHe=l(),If=a("h2"),aA=a("a"),dLe=a("span"),F(iS.$$.fragment),Tst=l(),cLe=a("span"),Mst=o("FlaxAutoModelForTokenClassification"),DHe=l(),Ar=a("div"),F(dS.$$.fragment),Est=l(),Nf=a("p"),Cst=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),aae=a("a"),wst=o("from_pretrained()"),Ast=o(" class method or the "),nae=a("a"),Lst=o("from_config()"),yst=o(` class
method.`),xst=l(),cS=a("p"),$st=o("This class cannot be instantiated directly using "),fLe=a("code"),kst=o("__init__()"),Sst=o(" (throws an error)."),Rst=l(),sa=a("div"),F(fS.$$.fragment),Pst=l(),mLe=a("p"),Bst=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ist=l(),qf=a("p"),Nst=o(`Note:
Loading a model from its configuration file does `),gLe=a("strong"),qst=o("not"),jst=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sae=a("a"),Dst=o("from_pretrained()"),Gst=o(" to load the model weights."),Ost=l(),F(nA.$$.fragment),Vst=l(),ot=a("div"),F(mS.$$.fragment),Xst=l(),hLe=a("p"),zst=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Wst=l(),qn=a("p"),Qst=o("The model class to instantiate is selected based on the "),pLe=a("code"),Ust=o("model_type"),Hst=o(` property of the config object (either
passed as an argument or loaded from `),_Le=a("code"),Jst=o("pretrained_model_name_or_path"),Yst=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uLe=a("code"),Kst=o("pretrained_model_name_or_path"),Zst=o(":"),elt=l(),Xe=a("ul"),sA=a("li"),bLe=a("strong"),olt=o("albert"),rlt=o(" \u2014 "),lae=a("a"),tlt=o("FlaxAlbertForTokenClassification"),alt=o(" (ALBERT model)"),nlt=l(),lA=a("li"),vLe=a("strong"),slt=o("bert"),llt=o(" \u2014 "),iae=a("a"),ilt=o("FlaxBertForTokenClassification"),dlt=o(" (BERT model)"),clt=l(),iA=a("li"),FLe=a("strong"),flt=o("big_bird"),mlt=o(" \u2014 "),dae=a("a"),glt=o("FlaxBigBirdForTokenClassification"),hlt=o(" (BigBird model)"),plt=l(),dA=a("li"),TLe=a("strong"),_lt=o("distilbert"),ult=o(" \u2014 "),cae=a("a"),blt=o("FlaxDistilBertForTokenClassification"),vlt=o(" (DistilBERT model)"),Flt=l(),cA=a("li"),MLe=a("strong"),Tlt=o("electra"),Mlt=o(" \u2014 "),fae=a("a"),Elt=o("FlaxElectraForTokenClassification"),Clt=o(" (ELECTRA model)"),wlt=l(),fA=a("li"),ELe=a("strong"),Alt=o("roberta"),Llt=o(" \u2014 "),mae=a("a"),ylt=o("FlaxRobertaForTokenClassification"),xlt=o(" (RoBERTa model)"),$lt=l(),mA=a("li"),CLe=a("strong"),klt=o("roformer"),Slt=o(" \u2014 "),gae=a("a"),Rlt=o("FlaxRoFormerForTokenClassification"),Plt=o(" (RoFormer model)"),Blt=l(),gA=a("li"),wLe=a("strong"),Ilt=o("xlm-roberta"),Nlt=o(" \u2014 "),hae=a("a"),qlt=o("FlaxXLMRobertaForTokenClassification"),jlt=o(" (XLM-RoBERTa model)"),Dlt=l(),F(hA.$$.fragment),GHe=l(),jf=a("h2"),pA=a("a"),ALe=a("span"),F(gS.$$.fragment),Glt=l(),LLe=a("span"),Olt=o("FlaxAutoModelForMultipleChoice"),OHe=l(),Lr=a("div"),F(hS.$$.fragment),Vlt=l(),Df=a("p"),Xlt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pae=a("a"),zlt=o("from_pretrained()"),Wlt=o(" class method or the "),_ae=a("a"),Qlt=o("from_config()"),Ult=o(` class
method.`),Hlt=l(),pS=a("p"),Jlt=o("This class cannot be instantiated directly using "),yLe=a("code"),Ylt=o("__init__()"),Klt=o(" (throws an error)."),Zlt=l(),la=a("div"),F(_S.$$.fragment),eit=l(),xLe=a("p"),oit=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rit=l(),Gf=a("p"),tit=o(`Note:
Loading a model from its configuration file does `),$Le=a("strong"),ait=o("not"),nit=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uae=a("a"),sit=o("from_pretrained()"),lit=o(" to load the model weights."),iit=l(),F(_A.$$.fragment),dit=l(),rt=a("div"),F(uS.$$.fragment),cit=l(),kLe=a("p"),fit=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mit=l(),jn=a("p"),git=o("The model class to instantiate is selected based on the "),SLe=a("code"),hit=o("model_type"),pit=o(` property of the config object (either
passed as an argument or loaded from `),RLe=a("code"),_it=o("pretrained_model_name_or_path"),uit=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PLe=a("code"),bit=o("pretrained_model_name_or_path"),vit=o(":"),Fit=l(),ze=a("ul"),uA=a("li"),BLe=a("strong"),Tit=o("albert"),Mit=o(" \u2014 "),bae=a("a"),Eit=o("FlaxAlbertForMultipleChoice"),Cit=o(" (ALBERT model)"),wit=l(),bA=a("li"),ILe=a("strong"),Ait=o("bert"),Lit=o(" \u2014 "),vae=a("a"),yit=o("FlaxBertForMultipleChoice"),xit=o(" (BERT model)"),$it=l(),vA=a("li"),NLe=a("strong"),kit=o("big_bird"),Sit=o(" \u2014 "),Fae=a("a"),Rit=o("FlaxBigBirdForMultipleChoice"),Pit=o(" (BigBird model)"),Bit=l(),FA=a("li"),qLe=a("strong"),Iit=o("distilbert"),Nit=o(" \u2014 "),Tae=a("a"),qit=o("FlaxDistilBertForMultipleChoice"),jit=o(" (DistilBERT model)"),Dit=l(),TA=a("li"),jLe=a("strong"),Git=o("electra"),Oit=o(" \u2014 "),Mae=a("a"),Vit=o("FlaxElectraForMultipleChoice"),Xit=o(" (ELECTRA model)"),zit=l(),MA=a("li"),DLe=a("strong"),Wit=o("roberta"),Qit=o(" \u2014 "),Eae=a("a"),Uit=o("FlaxRobertaForMultipleChoice"),Hit=o(" (RoBERTa model)"),Jit=l(),EA=a("li"),GLe=a("strong"),Yit=o("roformer"),Kit=o(" \u2014 "),Cae=a("a"),Zit=o("FlaxRoFormerForMultipleChoice"),edt=o(" (RoFormer model)"),odt=l(),CA=a("li"),OLe=a("strong"),rdt=o("xlm-roberta"),tdt=o(" \u2014 "),wae=a("a"),adt=o("FlaxXLMRobertaForMultipleChoice"),ndt=o(" (XLM-RoBERTa model)"),sdt=l(),F(wA.$$.fragment),VHe=l(),Of=a("h2"),AA=a("a"),VLe=a("span"),F(bS.$$.fragment),ldt=l(),XLe=a("span"),idt=o("FlaxAutoModelForNextSentencePrediction"),XHe=l(),yr=a("div"),F(vS.$$.fragment),ddt=l(),Vf=a("p"),cdt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Aae=a("a"),fdt=o("from_pretrained()"),mdt=o(" class method or the "),Lae=a("a"),gdt=o("from_config()"),hdt=o(` class
method.`),pdt=l(),FS=a("p"),_dt=o("This class cannot be instantiated directly using "),zLe=a("code"),udt=o("__init__()"),bdt=o(" (throws an error)."),vdt=l(),ia=a("div"),F(TS.$$.fragment),Fdt=l(),WLe=a("p"),Tdt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Mdt=l(),Xf=a("p"),Edt=o(`Note:
Loading a model from its configuration file does `),QLe=a("strong"),Cdt=o("not"),wdt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yae=a("a"),Adt=o("from_pretrained()"),Ldt=o(" to load the model weights."),ydt=l(),F(LA.$$.fragment),xdt=l(),tt=a("div"),F(MS.$$.fragment),$dt=l(),ULe=a("p"),kdt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Sdt=l(),Dn=a("p"),Rdt=o("The model class to instantiate is selected based on the "),HLe=a("code"),Pdt=o("model_type"),Bdt=o(` property of the config object (either
passed as an argument or loaded from `),JLe=a("code"),Idt=o("pretrained_model_name_or_path"),Ndt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YLe=a("code"),qdt=o("pretrained_model_name_or_path"),jdt=o(":"),Ddt=l(),KLe=a("ul"),yA=a("li"),ZLe=a("strong"),Gdt=o("bert"),Odt=o(" \u2014 "),xae=a("a"),Vdt=o("FlaxBertForNextSentencePrediction"),Xdt=o(" (BERT model)"),zdt=l(),F(xA.$$.fragment),zHe=l(),zf=a("h2"),$A=a("a"),eye=a("span"),F(ES.$$.fragment),Wdt=l(),oye=a("span"),Qdt=o("FlaxAutoModelForImageClassification"),WHe=l(),xr=a("div"),F(CS.$$.fragment),Udt=l(),Wf=a("p"),Hdt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$ae=a("a"),Jdt=o("from_pretrained()"),Ydt=o(" class method or the "),kae=a("a"),Kdt=o("from_config()"),Zdt=o(` class
method.`),ect=l(),wS=a("p"),oct=o("This class cannot be instantiated directly using "),rye=a("code"),rct=o("__init__()"),tct=o(" (throws an error)."),act=l(),da=a("div"),F(AS.$$.fragment),nct=l(),tye=a("p"),sct=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lct=l(),Qf=a("p"),ict=o(`Note:
Loading a model from its configuration file does `),aye=a("strong"),dct=o("not"),cct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sae=a("a"),fct=o("from_pretrained()"),mct=o(" to load the model weights."),gct=l(),F(kA.$$.fragment),hct=l(),at=a("div"),F(LS.$$.fragment),pct=l(),nye=a("p"),_ct=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),uct=l(),Gn=a("p"),bct=o("The model class to instantiate is selected based on the "),sye=a("code"),vct=o("model_type"),Fct=o(` property of the config object (either
passed as an argument or loaded from `),lye=a("code"),Tct=o("pretrained_model_name_or_path"),Mct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iye=a("code"),Ect=o("pretrained_model_name_or_path"),Cct=o(":"),wct=l(),yS=a("ul"),SA=a("li"),dye=a("strong"),Act=o("beit"),Lct=o(" \u2014 "),Rae=a("a"),yct=o("FlaxBeitForImageClassification"),xct=o(" (BEiT model)"),$ct=l(),RA=a("li"),cye=a("strong"),kct=o("vit"),Sct=o(" \u2014 "),Pae=a("a"),Rct=o("FlaxViTForImageClassification"),Pct=o(" (ViT model)"),Bct=l(),F(PA.$$.fragment),QHe=l(),Uf=a("h2"),BA=a("a"),fye=a("span"),F(xS.$$.fragment),Ict=l(),mye=a("span"),Nct=o("FlaxAutoModelForVision2Seq"),UHe=l(),$r=a("div"),F($S.$$.fragment),qct=l(),Hf=a("p"),jct=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Bae=a("a"),Dct=o("from_pretrained()"),Gct=o(" class method or the "),Iae=a("a"),Oct=o("from_config()"),Vct=o(` class
method.`),Xct=l(),kS=a("p"),zct=o("This class cannot be instantiated directly using "),gye=a("code"),Wct=o("__init__()"),Qct=o(" (throws an error)."),Uct=l(),ca=a("div"),F(SS.$$.fragment),Hct=l(),hye=a("p"),Jct=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Yct=l(),Jf=a("p"),Kct=o(`Note:
Loading a model from its configuration file does `),pye=a("strong"),Zct=o("not"),eft=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nae=a("a"),oft=o("from_pretrained()"),rft=o(" to load the model weights."),tft=l(),F(IA.$$.fragment),aft=l(),nt=a("div"),F(RS.$$.fragment),nft=l(),_ye=a("p"),sft=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lft=l(),On=a("p"),ift=o("The model class to instantiate is selected based on the "),uye=a("code"),dft=o("model_type"),cft=o(` property of the config object (either
passed as an argument or loaded from `),bye=a("code"),fft=o("pretrained_model_name_or_path"),mft=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vye=a("code"),gft=o("pretrained_model_name_or_path"),hft=o(":"),pft=l(),Fye=a("ul"),NA=a("li"),Tye=a("strong"),_ft=o("vision-encoder-decoder"),uft=o(" \u2014 "),qae=a("a"),bft=o("FlaxVisionEncoderDecoderModel"),vft=o(" (Vision Encoder decoder model)"),Fft=l(),F(qA.$$.fragment),this.h()},l(f){const u=Ira('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var PS=s(p);m=n(PS,"A",{id:!0,class:!0,href:!0});var Mye=s(m);_=n(Mye,"SPAN",{});var Eye=s(_);T(d.$$.fragment,Eye),Eye.forEach(t),Mye.forEach(t),h=i(PS),Ao=n(PS,"SPAN",{});var Cye=s(Ao);Oi=r(Cye,"Auto Classes"),Cye.forEach(t),PS.forEach(t),em=i(f),ft=n(f,"P",{});var BS=s(ft);Vi=r(BS,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=n(BS,"CODE",{});var wye=s(Xi);dy=r(wye,"from_pretrained()"),wye.forEach(t),om=r(BS,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),BS.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Vn=s(Qe);zi=r(Vn,"Instantiating one of "),Xn=n(Vn,"A",{href:!0});var Aye=s(Xn);cy=r(Aye,"AutoConfig"),Aye.forEach(t),zn=r(Vn,", "),Wn=n(Vn,"A",{href:!0});var Lye=s(Wn);fy=r(Lye,"AutoModel"),Lye.forEach(t),Wi=r(Vn,`, and
`),Qn=n(Vn,"A",{href:!0});var yye=s(Qn);my=r(yye,"AutoTokenizer"),yye.forEach(t),Qi=r(Vn," will directly create a class of the relevant architecture. For instance"),Vn.forEach(t),rm=i(f),T(ja.$$.fragment,f),Ue=i(f),Ae=n(f,"P",{});var IS=s(Ae);tP=r(IS,"will create a model that is an instance of "),Ui=n(IS,"A",{href:!0});var xye=s(Ui);aP=r(xye,"BertModel"),xye.forEach(t),nP=r(IS,"."),IS.forEach(t),Lo=i(f),Da=n(f,"P",{});var NS=s(Da);sP=r(NS,"There is one class of "),tm=n(NS,"CODE",{});var $ye=s(tm);lP=r($ye,"AutoModel"),$ye.forEach(t),cKe=r(NS," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),NS.forEach(t),DQe=i(f),Hi=n(f,"H2",{class:!0});var qS=s(Hi);am=n(qS,"A",{id:!0,class:!0,href:!0});var kye=s(am);Ise=n(kye,"SPAN",{});var Sye=s(Ise);T(gy.$$.fragment,Sye),Sye.forEach(t),kye.forEach(t),fKe=i(qS),Nse=n(qS,"SPAN",{});var Rye=s(Nse);mKe=r(Rye,"Extending the Auto Classes"),Rye.forEach(t),qS.forEach(t),GQe=i(f),Un=n(f,"P",{});var Yf=s(Un);gKe=r(Yf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qse=n(Yf,"CODE",{});var Pye=s(qse);hKe=r(Pye,"NewModel"),Pye.forEach(t),pKe=r(Yf,", make sure you have a "),jse=n(Yf,"CODE",{});var Bye=s(jse);_Ke=r(Bye,"NewModelConfig"),Bye.forEach(t),uKe=r(Yf,` then you can add those to the auto
classes like this:`),Yf.forEach(t),OQe=i(f),T(hy.$$.fragment,f),VQe=i(f),iP=n(f,"P",{});var Iye=s(iP);bKe=r(Iye,"You will then be able to use the auto classes like you would usually do!"),Iye.forEach(t),XQe=i(f),T(nm.$$.fragment,f),zQe=i(f),Ji=n(f,"H2",{class:!0});var jS=s(Ji);sm=n(jS,"A",{id:!0,class:!0,href:!0});var Nye=s(sm);Dse=n(Nye,"SPAN",{});var qye=s(Dse);T(py.$$.fragment,qye),qye.forEach(t),Nye.forEach(t),vKe=i(jS),Gse=n(jS,"SPAN",{});var jye=s(Gse);FKe=r(jye,"AutoConfig"),jye.forEach(t),jS.forEach(t),WQe=i(f),yo=n(f,"DIV",{class:!0});var dt=s(yo);T(_y.$$.fragment,dt),TKe=i(dt),uy=n(dt,"P",{});var DS=s(uy);MKe=r(DS,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),dP=n(DS,"A",{href:!0});var Dye=s(dP);EKe=r(Dye,"from_pretrained()"),Dye.forEach(t),CKe=r(DS," class method."),DS.forEach(t),wKe=i(dt),by=n(dt,"P",{});var GS=s(by);AKe=r(GS,"This class cannot be instantiated directly using "),Ose=n(GS,"CODE",{});var Gye=s(Ose);LKe=r(Gye,"__init__()"),Gye.forEach(t),yKe=r(GS," (throws an error)."),GS.forEach(t),xKe=i(dt),kr=n(dt,"DIV",{class:!0});var ct=s(kr);T(vy.$$.fragment,ct),$Ke=i(ct),Vse=n(ct,"P",{});var Oye=s(Vse);kKe=r(Oye,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Oye.forEach(t),SKe=i(ct),Yi=n(ct,"P",{});var Kf=s(Yi);RKe=r(Kf,"The configuration class to instantiate is selected based on the "),Xse=n(Kf,"CODE",{});var Vye=s(Xse);PKe=r(Vye,"model_type"),Vye.forEach(t),BKe=r(Kf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zse=n(Kf,"CODE",{});var Xye=s(zse);IKe=r(Xye,"pretrained_model_name_or_path"),Xye.forEach(t),NKe=r(Kf,":"),Kf.forEach(t),qKe=i(ct),A=n(ct,"UL",{});var L=s(A);lm=n(L,"LI",{});var jA=s(lm);Wse=n(jA,"STRONG",{});var zye=s(Wse);jKe=r(zye,"albert"),zye.forEach(t),DKe=r(jA," \u2014 "),cP=n(jA,"A",{href:!0});var Wye=s(cP);GKe=r(Wye,"AlbertConfig"),Wye.forEach(t),OKe=r(jA," (ALBERT model)"),jA.forEach(t),VKe=i(L),im=n(L,"LI",{});var DA=s(im);Qse=n(DA,"STRONG",{});var Qye=s(Qse);XKe=r(Qye,"bart"),Qye.forEach(t),zKe=r(DA," \u2014 "),fP=n(DA,"A",{href:!0});var Uye=s(fP);WKe=r(Uye,"BartConfig"),Uye.forEach(t),QKe=r(DA," (BART model)"),DA.forEach(t),UKe=i(L),dm=n(L,"LI",{});var GA=s(dm);Use=n(GA,"STRONG",{});var Hye=s(Use);HKe=r(Hye,"beit"),Hye.forEach(t),JKe=r(GA," \u2014 "),mP=n(GA,"A",{href:!0});var Jye=s(mP);YKe=r(Jye,"BeitConfig"),Jye.forEach(t),KKe=r(GA," (BEiT model)"),GA.forEach(t),ZKe=i(L),cm=n(L,"LI",{});var OA=s(cm);Hse=n(OA,"STRONG",{});var Yye=s(Hse);eZe=r(Yye,"bert"),Yye.forEach(t),oZe=r(OA," \u2014 "),gP=n(OA,"A",{href:!0});var Kye=s(gP);rZe=r(Kye,"BertConfig"),Kye.forEach(t),tZe=r(OA," (BERT model)"),OA.forEach(t),aZe=i(L),fm=n(L,"LI",{});var VA=s(fm);Jse=n(VA,"STRONG",{});var Zye=s(Jse);nZe=r(Zye,"bert-generation"),Zye.forEach(t),sZe=r(VA," \u2014 "),hP=n(VA,"A",{href:!0});var e9e=s(hP);lZe=r(e9e,"BertGenerationConfig"),e9e.forEach(t),iZe=r(VA," (Bert Generation model)"),VA.forEach(t),dZe=i(L),mm=n(L,"LI",{});var XA=s(mm);Yse=n(XA,"STRONG",{});var o9e=s(Yse);cZe=r(o9e,"big_bird"),o9e.forEach(t),fZe=r(XA," \u2014 "),pP=n(XA,"A",{href:!0});var r9e=s(pP);mZe=r(r9e,"BigBirdConfig"),r9e.forEach(t),gZe=r(XA," (BigBird model)"),XA.forEach(t),hZe=i(L),gm=n(L,"LI",{});var zA=s(gm);Kse=n(zA,"STRONG",{});var t9e=s(Kse);pZe=r(t9e,"bigbird_pegasus"),t9e.forEach(t),_Ze=r(zA," \u2014 "),_P=n(zA,"A",{href:!0});var a9e=s(_P);uZe=r(a9e,"BigBirdPegasusConfig"),a9e.forEach(t),bZe=r(zA," (BigBird-Pegasus model)"),zA.forEach(t),vZe=i(L),hm=n(L,"LI",{});var WA=s(hm);Zse=n(WA,"STRONG",{});var n9e=s(Zse);FZe=r(n9e,"blenderbot"),n9e.forEach(t),TZe=r(WA," \u2014 "),uP=n(WA,"A",{href:!0});var s9e=s(uP);MZe=r(s9e,"BlenderbotConfig"),s9e.forEach(t),EZe=r(WA," (Blenderbot model)"),WA.forEach(t),CZe=i(L),pm=n(L,"LI",{});var QA=s(pm);ele=n(QA,"STRONG",{});var l9e=s(ele);wZe=r(l9e,"blenderbot-small"),l9e.forEach(t),AZe=r(QA," \u2014 "),bP=n(QA,"A",{href:!0});var i9e=s(bP);LZe=r(i9e,"BlenderbotSmallConfig"),i9e.forEach(t),yZe=r(QA," (BlenderbotSmall model)"),QA.forEach(t),xZe=i(L),_m=n(L,"LI",{});var UA=s(_m);ole=n(UA,"STRONG",{});var d9e=s(ole);$Ze=r(d9e,"bloom"),d9e.forEach(t),kZe=r(UA," \u2014 "),vP=n(UA,"A",{href:!0});var c9e=s(vP);SZe=r(c9e,"BloomConfig"),c9e.forEach(t),RZe=r(UA," (BLOOM model)"),UA.forEach(t),PZe=i(L),um=n(L,"LI",{});var HA=s(um);rle=n(HA,"STRONG",{});var f9e=s(rle);BZe=r(f9e,"camembert"),f9e.forEach(t),IZe=r(HA," \u2014 "),FP=n(HA,"A",{href:!0});var m9e=s(FP);NZe=r(m9e,"CamembertConfig"),m9e.forEach(t),qZe=r(HA," (CamemBERT model)"),HA.forEach(t),jZe=i(L),bm=n(L,"LI",{});var JA=s(bm);tle=n(JA,"STRONG",{});var g9e=s(tle);DZe=r(g9e,"canine"),g9e.forEach(t),GZe=r(JA," \u2014 "),TP=n(JA,"A",{href:!0});var h9e=s(TP);OZe=r(h9e,"CanineConfig"),h9e.forEach(t),VZe=r(JA," (CANINE model)"),JA.forEach(t),XZe=i(L),vm=n(L,"LI",{});var YA=s(vm);ale=n(YA,"STRONG",{});var p9e=s(ale);zZe=r(p9e,"clip"),p9e.forEach(t),WZe=r(YA," \u2014 "),MP=n(YA,"A",{href:!0});var _9e=s(MP);QZe=r(_9e,"CLIPConfig"),_9e.forEach(t),UZe=r(YA," (CLIP model)"),YA.forEach(t),HZe=i(L),Fm=n(L,"LI",{});var KA=s(Fm);nle=n(KA,"STRONG",{});var u9e=s(nle);JZe=r(u9e,"codegen"),u9e.forEach(t),YZe=r(KA," \u2014 "),EP=n(KA,"A",{href:!0});var b9e=s(EP);KZe=r(b9e,"CodeGenConfig"),b9e.forEach(t),ZZe=r(KA," (CodeGen model)"),KA.forEach(t),eeo=i(L),Tm=n(L,"LI",{});var ZA=s(Tm);sle=n(ZA,"STRONG",{});var v9e=s(sle);oeo=r(v9e,"convbert"),v9e.forEach(t),reo=r(ZA," \u2014 "),CP=n(ZA,"A",{href:!0});var F9e=s(CP);teo=r(F9e,"ConvBertConfig"),F9e.forEach(t),aeo=r(ZA," (ConvBERT model)"),ZA.forEach(t),neo=i(L),Mm=n(L,"LI",{});var e7=s(Mm);lle=n(e7,"STRONG",{});var T9e=s(lle);seo=r(T9e,"convnext"),T9e.forEach(t),leo=r(e7," \u2014 "),wP=n(e7,"A",{href:!0});var M9e=s(wP);ieo=r(M9e,"ConvNextConfig"),M9e.forEach(t),deo=r(e7," (ConvNeXT model)"),e7.forEach(t),ceo=i(L),Em=n(L,"LI",{});var o7=s(Em);ile=n(o7,"STRONG",{});var E9e=s(ile);feo=r(E9e,"ctrl"),E9e.forEach(t),meo=r(o7," \u2014 "),AP=n(o7,"A",{href:!0});var C9e=s(AP);geo=r(C9e,"CTRLConfig"),C9e.forEach(t),heo=r(o7," (CTRL model)"),o7.forEach(t),peo=i(L),Cm=n(L,"LI",{});var r7=s(Cm);dle=n(r7,"STRONG",{});var w9e=s(dle);_eo=r(w9e,"cvt"),w9e.forEach(t),ueo=r(r7," \u2014 "),LP=n(r7,"A",{href:!0});var A9e=s(LP);beo=r(A9e,"CvtConfig"),A9e.forEach(t),veo=r(r7," (CvT model)"),r7.forEach(t),Feo=i(L),wm=n(L,"LI",{});var t7=s(wm);cle=n(t7,"STRONG",{});var L9e=s(cle);Teo=r(L9e,"data2vec-audio"),L9e.forEach(t),Meo=r(t7," \u2014 "),yP=n(t7,"A",{href:!0});var y9e=s(yP);Eeo=r(y9e,"Data2VecAudioConfig"),y9e.forEach(t),Ceo=r(t7," (Data2VecAudio model)"),t7.forEach(t),weo=i(L),Am=n(L,"LI",{});var a7=s(Am);fle=n(a7,"STRONG",{});var x9e=s(fle);Aeo=r(x9e,"data2vec-text"),x9e.forEach(t),Leo=r(a7," \u2014 "),xP=n(a7,"A",{href:!0});var $9e=s(xP);yeo=r($9e,"Data2VecTextConfig"),$9e.forEach(t),xeo=r(a7," (Data2VecText model)"),a7.forEach(t),$eo=i(L),Lm=n(L,"LI",{});var n7=s(Lm);mle=n(n7,"STRONG",{});var k9e=s(mle);keo=r(k9e,"data2vec-vision"),k9e.forEach(t),Seo=r(n7," \u2014 "),$P=n(n7,"A",{href:!0});var S9e=s($P);Reo=r(S9e,"Data2VecVisionConfig"),S9e.forEach(t),Peo=r(n7," (Data2VecVision model)"),n7.forEach(t),Beo=i(L),ym=n(L,"LI",{});var s7=s(ym);gle=n(s7,"STRONG",{});var R9e=s(gle);Ieo=r(R9e,"deberta"),R9e.forEach(t),Neo=r(s7," \u2014 "),kP=n(s7,"A",{href:!0});var P9e=s(kP);qeo=r(P9e,"DebertaConfig"),P9e.forEach(t),jeo=r(s7," (DeBERTa model)"),s7.forEach(t),Deo=i(L),xm=n(L,"LI",{});var l7=s(xm);hle=n(l7,"STRONG",{});var B9e=s(hle);Geo=r(B9e,"deberta-v2"),B9e.forEach(t),Oeo=r(l7," \u2014 "),SP=n(l7,"A",{href:!0});var I9e=s(SP);Veo=r(I9e,"DebertaV2Config"),I9e.forEach(t),Xeo=r(l7," (DeBERTa-v2 model)"),l7.forEach(t),zeo=i(L),$m=n(L,"LI",{});var i7=s($m);ple=n(i7,"STRONG",{});var N9e=s(ple);Weo=r(N9e,"decision_transformer"),N9e.forEach(t),Qeo=r(i7," \u2014 "),RP=n(i7,"A",{href:!0});var q9e=s(RP);Ueo=r(q9e,"DecisionTransformerConfig"),q9e.forEach(t),Heo=r(i7," (Decision Transformer model)"),i7.forEach(t),Jeo=i(L),km=n(L,"LI",{});var d7=s(km);_le=n(d7,"STRONG",{});var j9e=s(_le);Yeo=r(j9e,"deit"),j9e.forEach(t),Keo=r(d7," \u2014 "),PP=n(d7,"A",{href:!0});var Mft=s(PP);Zeo=r(Mft,"DeiTConfig"),Mft.forEach(t),eoo=r(d7," (DeiT model)"),d7.forEach(t),ooo=i(L),Sm=n(L,"LI",{});var D9e=s(Sm);ule=n(D9e,"STRONG",{});var Eft=s(ule);roo=r(Eft,"detr"),Eft.forEach(t),too=r(D9e," \u2014 "),BP=n(D9e,"A",{href:!0});var Cft=s(BP);aoo=r(Cft,"DetrConfig"),Cft.forEach(t),noo=r(D9e," (DETR model)"),D9e.forEach(t),soo=i(L),Rm=n(L,"LI",{});var G9e=s(Rm);ble=n(G9e,"STRONG",{});var wft=s(ble);loo=r(wft,"distilbert"),wft.forEach(t),ioo=r(G9e," \u2014 "),IP=n(G9e,"A",{href:!0});var Aft=s(IP);doo=r(Aft,"DistilBertConfig"),Aft.forEach(t),coo=r(G9e," (DistilBERT model)"),G9e.forEach(t),foo=i(L),Pm=n(L,"LI",{});var O9e=s(Pm);vle=n(O9e,"STRONG",{});var Lft=s(vle);moo=r(Lft,"donut-swin"),Lft.forEach(t),goo=r(O9e," \u2014 "),NP=n(O9e,"A",{href:!0});var yft=s(NP);hoo=r(yft,"DonutSwinConfig"),yft.forEach(t),poo=r(O9e," (DonutSwin model)"),O9e.forEach(t),_oo=i(L),Bm=n(L,"LI",{});var V9e=s(Bm);Fle=n(V9e,"STRONG",{});var xft=s(Fle);uoo=r(xft,"dpr"),xft.forEach(t),boo=r(V9e," \u2014 "),qP=n(V9e,"A",{href:!0});var $ft=s(qP);voo=r($ft,"DPRConfig"),$ft.forEach(t),Foo=r(V9e," (DPR model)"),V9e.forEach(t),Too=i(L),Im=n(L,"LI",{});var X9e=s(Im);Tle=n(X9e,"STRONG",{});var kft=s(Tle);Moo=r(kft,"dpt"),kft.forEach(t),Eoo=r(X9e," \u2014 "),jP=n(X9e,"A",{href:!0});var Sft=s(jP);Coo=r(Sft,"DPTConfig"),Sft.forEach(t),woo=r(X9e," (DPT model)"),X9e.forEach(t),Aoo=i(L),Nm=n(L,"LI",{});var z9e=s(Nm);Mle=n(z9e,"STRONG",{});var Rft=s(Mle);Loo=r(Rft,"electra"),Rft.forEach(t),yoo=r(z9e," \u2014 "),DP=n(z9e,"A",{href:!0});var Pft=s(DP);xoo=r(Pft,"ElectraConfig"),Pft.forEach(t),$oo=r(z9e," (ELECTRA model)"),z9e.forEach(t),koo=i(L),qm=n(L,"LI",{});var W9e=s(qm);Ele=n(W9e,"STRONG",{});var Bft=s(Ele);Soo=r(Bft,"encoder-decoder"),Bft.forEach(t),Roo=r(W9e," \u2014 "),GP=n(W9e,"A",{href:!0});var Ift=s(GP);Poo=r(Ift,"EncoderDecoderConfig"),Ift.forEach(t),Boo=r(W9e," (Encoder decoder model)"),W9e.forEach(t),Ioo=i(L),jm=n(L,"LI",{});var Q9e=s(jm);Cle=n(Q9e,"STRONG",{});var Nft=s(Cle);Noo=r(Nft,"flaubert"),Nft.forEach(t),qoo=r(Q9e," \u2014 "),OP=n(Q9e,"A",{href:!0});var qft=s(OP);joo=r(qft,"FlaubertConfig"),qft.forEach(t),Doo=r(Q9e," (FlauBERT model)"),Q9e.forEach(t),Goo=i(L),Dm=n(L,"LI",{});var U9e=s(Dm);wle=n(U9e,"STRONG",{});var jft=s(wle);Ooo=r(jft,"flava"),jft.forEach(t),Voo=r(U9e," \u2014 "),VP=n(U9e,"A",{href:!0});var Dft=s(VP);Xoo=r(Dft,"FlavaConfig"),Dft.forEach(t),zoo=r(U9e," (FLAVA model)"),U9e.forEach(t),Woo=i(L),Gm=n(L,"LI",{});var H9e=s(Gm);Ale=n(H9e,"STRONG",{});var Gft=s(Ale);Qoo=r(Gft,"fnet"),Gft.forEach(t),Uoo=r(H9e," \u2014 "),XP=n(H9e,"A",{href:!0});var Oft=s(XP);Hoo=r(Oft,"FNetConfig"),Oft.forEach(t),Joo=r(H9e," (FNet model)"),H9e.forEach(t),Yoo=i(L),Om=n(L,"LI",{});var J9e=s(Om);Lle=n(J9e,"STRONG",{});var Vft=s(Lle);Koo=r(Vft,"fsmt"),Vft.forEach(t),Zoo=r(J9e," \u2014 "),zP=n(J9e,"A",{href:!0});var Xft=s(zP);ero=r(Xft,"FSMTConfig"),Xft.forEach(t),oro=r(J9e," (FairSeq Machine-Translation model)"),J9e.forEach(t),rro=i(L),Vm=n(L,"LI",{});var Y9e=s(Vm);yle=n(Y9e,"STRONG",{});var zft=s(yle);tro=r(zft,"funnel"),zft.forEach(t),aro=r(Y9e," \u2014 "),WP=n(Y9e,"A",{href:!0});var Wft=s(WP);nro=r(Wft,"FunnelConfig"),Wft.forEach(t),sro=r(Y9e," (Funnel Transformer model)"),Y9e.forEach(t),lro=i(L),Xm=n(L,"LI",{});var K9e=s(Xm);xle=n(K9e,"STRONG",{});var Qft=s(xle);iro=r(Qft,"glpn"),Qft.forEach(t),dro=r(K9e," \u2014 "),QP=n(K9e,"A",{href:!0});var Uft=s(QP);cro=r(Uft,"GLPNConfig"),Uft.forEach(t),fro=r(K9e," (GLPN model)"),K9e.forEach(t),mro=i(L),zm=n(L,"LI",{});var Z9e=s(zm);$le=n(Z9e,"STRONG",{});var Hft=s($le);gro=r(Hft,"gpt2"),Hft.forEach(t),hro=r(Z9e," \u2014 "),UP=n(Z9e,"A",{href:!0});var Jft=s(UP);pro=r(Jft,"GPT2Config"),Jft.forEach(t),_ro=r(Z9e," (OpenAI GPT-2 model)"),Z9e.forEach(t),uro=i(L),Wm=n(L,"LI",{});var exe=s(Wm);kle=n(exe,"STRONG",{});var Yft=s(kle);bro=r(Yft,"gpt_neo"),Yft.forEach(t),vro=r(exe," \u2014 "),HP=n(exe,"A",{href:!0});var Kft=s(HP);Fro=r(Kft,"GPTNeoConfig"),Kft.forEach(t),Tro=r(exe," (GPT Neo model)"),exe.forEach(t),Mro=i(L),Qm=n(L,"LI",{});var oxe=s(Qm);Sle=n(oxe,"STRONG",{});var Zft=s(Sle);Ero=r(Zft,"gpt_neox"),Zft.forEach(t),Cro=r(oxe," \u2014 "),JP=n(oxe,"A",{href:!0});var emt=s(JP);wro=r(emt,"GPTNeoXConfig"),emt.forEach(t),Aro=r(oxe," (GPT NeoX model)"),oxe.forEach(t),Lro=i(L),Um=n(L,"LI",{});var rxe=s(Um);Rle=n(rxe,"STRONG",{});var omt=s(Rle);yro=r(omt,"gptj"),omt.forEach(t),xro=r(rxe," \u2014 "),YP=n(rxe,"A",{href:!0});var rmt=s(YP);$ro=r(rmt,"GPTJConfig"),rmt.forEach(t),kro=r(rxe," (GPT-J model)"),rxe.forEach(t),Sro=i(L),Hm=n(L,"LI",{});var txe=s(Hm);Ple=n(txe,"STRONG",{});var tmt=s(Ple);Rro=r(tmt,"groupvit"),tmt.forEach(t),Pro=r(txe," \u2014 "),KP=n(txe,"A",{href:!0});var amt=s(KP);Bro=r(amt,"GroupViTConfig"),amt.forEach(t),Iro=r(txe," (GroupViT model)"),txe.forEach(t),Nro=i(L),Jm=n(L,"LI",{});var axe=s(Jm);Ble=n(axe,"STRONG",{});var nmt=s(Ble);qro=r(nmt,"hubert"),nmt.forEach(t),jro=r(axe," \u2014 "),ZP=n(axe,"A",{href:!0});var smt=s(ZP);Dro=r(smt,"HubertConfig"),smt.forEach(t),Gro=r(axe," (Hubert model)"),axe.forEach(t),Oro=i(L),Ym=n(L,"LI",{});var nxe=s(Ym);Ile=n(nxe,"STRONG",{});var lmt=s(Ile);Vro=r(lmt,"ibert"),lmt.forEach(t),Xro=r(nxe," \u2014 "),eB=n(nxe,"A",{href:!0});var imt=s(eB);zro=r(imt,"IBertConfig"),imt.forEach(t),Wro=r(nxe," (I-BERT model)"),nxe.forEach(t),Qro=i(L),Km=n(L,"LI",{});var sxe=s(Km);Nle=n(sxe,"STRONG",{});var dmt=s(Nle);Uro=r(dmt,"imagegpt"),dmt.forEach(t),Hro=r(sxe," \u2014 "),oB=n(sxe,"A",{href:!0});var cmt=s(oB);Jro=r(cmt,"ImageGPTConfig"),cmt.forEach(t),Yro=r(sxe," (ImageGPT model)"),sxe.forEach(t),Kro=i(L),Zm=n(L,"LI",{});var lxe=s(Zm);qle=n(lxe,"STRONG",{});var fmt=s(qle);Zro=r(fmt,"layoutlm"),fmt.forEach(t),eto=r(lxe," \u2014 "),rB=n(lxe,"A",{href:!0});var mmt=s(rB);oto=r(mmt,"LayoutLMConfig"),mmt.forEach(t),rto=r(lxe," (LayoutLM model)"),lxe.forEach(t),tto=i(L),eg=n(L,"LI",{});var ixe=s(eg);jle=n(ixe,"STRONG",{});var gmt=s(jle);ato=r(gmt,"layoutlmv2"),gmt.forEach(t),nto=r(ixe," \u2014 "),tB=n(ixe,"A",{href:!0});var hmt=s(tB);sto=r(hmt,"LayoutLMv2Config"),hmt.forEach(t),lto=r(ixe," (LayoutLMv2 model)"),ixe.forEach(t),ito=i(L),og=n(L,"LI",{});var dxe=s(og);Dle=n(dxe,"STRONG",{});var pmt=s(Dle);dto=r(pmt,"layoutlmv3"),pmt.forEach(t),cto=r(dxe," \u2014 "),aB=n(dxe,"A",{href:!0});var _mt=s(aB);fto=r(_mt,"LayoutLMv3Config"),_mt.forEach(t),mto=r(dxe," (LayoutLMv3 model)"),dxe.forEach(t),gto=i(L),rg=n(L,"LI",{});var cxe=s(rg);Gle=n(cxe,"STRONG",{});var umt=s(Gle);hto=r(umt,"led"),umt.forEach(t),pto=r(cxe," \u2014 "),nB=n(cxe,"A",{href:!0});var bmt=s(nB);_to=r(bmt,"LEDConfig"),bmt.forEach(t),uto=r(cxe," (LED model)"),cxe.forEach(t),bto=i(L),tg=n(L,"LI",{});var fxe=s(tg);Ole=n(fxe,"STRONG",{});var vmt=s(Ole);vto=r(vmt,"levit"),vmt.forEach(t),Fto=r(fxe," \u2014 "),sB=n(fxe,"A",{href:!0});var Fmt=s(sB);Tto=r(Fmt,"LevitConfig"),Fmt.forEach(t),Mto=r(fxe," (LeViT model)"),fxe.forEach(t),Eto=i(L),ag=n(L,"LI",{});var mxe=s(ag);Vle=n(mxe,"STRONG",{});var Tmt=s(Vle);Cto=r(Tmt,"longformer"),Tmt.forEach(t),wto=r(mxe," \u2014 "),lB=n(mxe,"A",{href:!0});var Mmt=s(lB);Ato=r(Mmt,"LongformerConfig"),Mmt.forEach(t),Lto=r(mxe," (Longformer model)"),mxe.forEach(t),yto=i(L),ng=n(L,"LI",{});var gxe=s(ng);Xle=n(gxe,"STRONG",{});var Emt=s(Xle);xto=r(Emt,"longt5"),Emt.forEach(t),$to=r(gxe," \u2014 "),iB=n(gxe,"A",{href:!0});var Cmt=s(iB);kto=r(Cmt,"LongT5Config"),Cmt.forEach(t),Sto=r(gxe," (LongT5 model)"),gxe.forEach(t),Rto=i(L),sg=n(L,"LI",{});var hxe=s(sg);zle=n(hxe,"STRONG",{});var wmt=s(zle);Pto=r(wmt,"luke"),wmt.forEach(t),Bto=r(hxe," \u2014 "),dB=n(hxe,"A",{href:!0});var Amt=s(dB);Ito=r(Amt,"LukeConfig"),Amt.forEach(t),Nto=r(hxe," (LUKE model)"),hxe.forEach(t),qto=i(L),lg=n(L,"LI",{});var pxe=s(lg);Wle=n(pxe,"STRONG",{});var Lmt=s(Wle);jto=r(Lmt,"lxmert"),Lmt.forEach(t),Dto=r(pxe," \u2014 "),cB=n(pxe,"A",{href:!0});var ymt=s(cB);Gto=r(ymt,"LxmertConfig"),ymt.forEach(t),Oto=r(pxe," (LXMERT model)"),pxe.forEach(t),Vto=i(L),ig=n(L,"LI",{});var _xe=s(ig);Qle=n(_xe,"STRONG",{});var xmt=s(Qle);Xto=r(xmt,"m2m_100"),xmt.forEach(t),zto=r(_xe," \u2014 "),fB=n(_xe,"A",{href:!0});var $mt=s(fB);Wto=r($mt,"M2M100Config"),$mt.forEach(t),Qto=r(_xe," (M2M100 model)"),_xe.forEach(t),Uto=i(L),dg=n(L,"LI",{});var uxe=s(dg);Ule=n(uxe,"STRONG",{});var kmt=s(Ule);Hto=r(kmt,"marian"),kmt.forEach(t),Jto=r(uxe," \u2014 "),mB=n(uxe,"A",{href:!0});var Smt=s(mB);Yto=r(Smt,"MarianConfig"),Smt.forEach(t),Kto=r(uxe," (Marian model)"),uxe.forEach(t),Zto=i(L),cg=n(L,"LI",{});var bxe=s(cg);Hle=n(bxe,"STRONG",{});var Rmt=s(Hle);eao=r(Rmt,"maskformer"),Rmt.forEach(t),oao=r(bxe," \u2014 "),gB=n(bxe,"A",{href:!0});var Pmt=s(gB);rao=r(Pmt,"MaskFormerConfig"),Pmt.forEach(t),tao=r(bxe," (MaskFormer model)"),bxe.forEach(t),aao=i(L),fg=n(L,"LI",{});var vxe=s(fg);Jle=n(vxe,"STRONG",{});var Bmt=s(Jle);nao=r(Bmt,"mbart"),Bmt.forEach(t),sao=r(vxe," \u2014 "),hB=n(vxe,"A",{href:!0});var Imt=s(hB);lao=r(Imt,"MBartConfig"),Imt.forEach(t),iao=r(vxe," (mBART model)"),vxe.forEach(t),dao=i(L),mg=n(L,"LI",{});var Fxe=s(mg);Yle=n(Fxe,"STRONG",{});var Nmt=s(Yle);cao=r(Nmt,"mctct"),Nmt.forEach(t),fao=r(Fxe," \u2014 "),pB=n(Fxe,"A",{href:!0});var qmt=s(pB);mao=r(qmt,"MCTCTConfig"),qmt.forEach(t),gao=r(Fxe," (M-CTC-T model)"),Fxe.forEach(t),hao=i(L),gg=n(L,"LI",{});var Txe=s(gg);Kle=n(Txe,"STRONG",{});var jmt=s(Kle);pao=r(jmt,"megatron-bert"),jmt.forEach(t),_ao=r(Txe," \u2014 "),_B=n(Txe,"A",{href:!0});var Dmt=s(_B);uao=r(Dmt,"MegatronBertConfig"),Dmt.forEach(t),bao=r(Txe," (Megatron-BERT model)"),Txe.forEach(t),vao=i(L),hg=n(L,"LI",{});var Mxe=s(hg);Zle=n(Mxe,"STRONG",{});var Gmt=s(Zle);Fao=r(Gmt,"mobilebert"),Gmt.forEach(t),Tao=r(Mxe," \u2014 "),uB=n(Mxe,"A",{href:!0});var Omt=s(uB);Mao=r(Omt,"MobileBertConfig"),Omt.forEach(t),Eao=r(Mxe," (MobileBERT model)"),Mxe.forEach(t),Cao=i(L),pg=n(L,"LI",{});var Exe=s(pg);eie=n(Exe,"STRONG",{});var Vmt=s(eie);wao=r(Vmt,"mobilevit"),Vmt.forEach(t),Aao=r(Exe," \u2014 "),bB=n(Exe,"A",{href:!0});var Xmt=s(bB);Lao=r(Xmt,"MobileViTConfig"),Xmt.forEach(t),yao=r(Exe," (MobileViT model)"),Exe.forEach(t),xao=i(L),_g=n(L,"LI",{});var Cxe=s(_g);oie=n(Cxe,"STRONG",{});var zmt=s(oie);$ao=r(zmt,"mpnet"),zmt.forEach(t),kao=r(Cxe," \u2014 "),vB=n(Cxe,"A",{href:!0});var Wmt=s(vB);Sao=r(Wmt,"MPNetConfig"),Wmt.forEach(t),Rao=r(Cxe," (MPNet model)"),Cxe.forEach(t),Pao=i(L),ug=n(L,"LI",{});var wxe=s(ug);rie=n(wxe,"STRONG",{});var Qmt=s(rie);Bao=r(Qmt,"mt5"),Qmt.forEach(t),Iao=r(wxe," \u2014 "),FB=n(wxe,"A",{href:!0});var Umt=s(FB);Nao=r(Umt,"MT5Config"),Umt.forEach(t),qao=r(wxe," (MT5 model)"),wxe.forEach(t),jao=i(L),bg=n(L,"LI",{});var Axe=s(bg);tie=n(Axe,"STRONG",{});var Hmt=s(tie);Dao=r(Hmt,"mvp"),Hmt.forEach(t),Gao=r(Axe," \u2014 "),TB=n(Axe,"A",{href:!0});var Jmt=s(TB);Oao=r(Jmt,"MvpConfig"),Jmt.forEach(t),Vao=r(Axe," (MVP model)"),Axe.forEach(t),Xao=i(L),vg=n(L,"LI",{});var Lxe=s(vg);aie=n(Lxe,"STRONG",{});var Ymt=s(aie);zao=r(Ymt,"nezha"),Ymt.forEach(t),Wao=r(Lxe," \u2014 "),MB=n(Lxe,"A",{href:!0});var Kmt=s(MB);Qao=r(Kmt,"NezhaConfig"),Kmt.forEach(t),Uao=r(Lxe," (Nezha model)"),Lxe.forEach(t),Hao=i(L),Fg=n(L,"LI",{});var yxe=s(Fg);nie=n(yxe,"STRONG",{});var Zmt=s(nie);Jao=r(Zmt,"nystromformer"),Zmt.forEach(t),Yao=r(yxe," \u2014 "),EB=n(yxe,"A",{href:!0});var egt=s(EB);Kao=r(egt,"NystromformerConfig"),egt.forEach(t),Zao=r(yxe," (Nystr\xF6mformer model)"),yxe.forEach(t),eno=i(L),Tg=n(L,"LI",{});var xxe=s(Tg);sie=n(xxe,"STRONG",{});var ogt=s(sie);ono=r(ogt,"openai-gpt"),ogt.forEach(t),rno=r(xxe," \u2014 "),CB=n(xxe,"A",{href:!0});var rgt=s(CB);tno=r(rgt,"OpenAIGPTConfig"),rgt.forEach(t),ano=r(xxe," (OpenAI GPT model)"),xxe.forEach(t),nno=i(L),Mg=n(L,"LI",{});var $xe=s(Mg);lie=n($xe,"STRONG",{});var tgt=s(lie);sno=r(tgt,"opt"),tgt.forEach(t),lno=r($xe," \u2014 "),wB=n($xe,"A",{href:!0});var agt=s(wB);ino=r(agt,"OPTConfig"),agt.forEach(t),dno=r($xe," (OPT model)"),$xe.forEach(t),cno=i(L),Eg=n(L,"LI",{});var kxe=s(Eg);iie=n(kxe,"STRONG",{});var ngt=s(iie);fno=r(ngt,"owlvit"),ngt.forEach(t),mno=r(kxe," \u2014 "),AB=n(kxe,"A",{href:!0});var sgt=s(AB);gno=r(sgt,"OwlViTConfig"),sgt.forEach(t),hno=r(kxe," (OWL-ViT model)"),kxe.forEach(t),pno=i(L),Cg=n(L,"LI",{});var Sxe=s(Cg);die=n(Sxe,"STRONG",{});var lgt=s(die);_no=r(lgt,"pegasus"),lgt.forEach(t),uno=r(Sxe," \u2014 "),LB=n(Sxe,"A",{href:!0});var igt=s(LB);bno=r(igt,"PegasusConfig"),igt.forEach(t),vno=r(Sxe," (Pegasus model)"),Sxe.forEach(t),Fno=i(L),wg=n(L,"LI",{});var Rxe=s(wg);cie=n(Rxe,"STRONG",{});var dgt=s(cie);Tno=r(dgt,"perceiver"),dgt.forEach(t),Mno=r(Rxe," \u2014 "),yB=n(Rxe,"A",{href:!0});var cgt=s(yB);Eno=r(cgt,"PerceiverConfig"),cgt.forEach(t),Cno=r(Rxe," (Perceiver model)"),Rxe.forEach(t),wno=i(L),Ag=n(L,"LI",{});var Pxe=s(Ag);fie=n(Pxe,"STRONG",{});var fgt=s(fie);Ano=r(fgt,"plbart"),fgt.forEach(t),Lno=r(Pxe," \u2014 "),xB=n(Pxe,"A",{href:!0});var mgt=s(xB);yno=r(mgt,"PLBartConfig"),mgt.forEach(t),xno=r(Pxe," (PLBart model)"),Pxe.forEach(t),$no=i(L),Lg=n(L,"LI",{});var Bxe=s(Lg);mie=n(Bxe,"STRONG",{});var ggt=s(mie);kno=r(ggt,"poolformer"),ggt.forEach(t),Sno=r(Bxe," \u2014 "),$B=n(Bxe,"A",{href:!0});var hgt=s($B);Rno=r(hgt,"PoolFormerConfig"),hgt.forEach(t),Pno=r(Bxe," (PoolFormer model)"),Bxe.forEach(t),Bno=i(L),yg=n(L,"LI",{});var Ixe=s(yg);gie=n(Ixe,"STRONG",{});var pgt=s(gie);Ino=r(pgt,"prophetnet"),pgt.forEach(t),Nno=r(Ixe," \u2014 "),kB=n(Ixe,"A",{href:!0});var _gt=s(kB);qno=r(_gt,"ProphetNetConfig"),_gt.forEach(t),jno=r(Ixe," (ProphetNet model)"),Ixe.forEach(t),Dno=i(L),xg=n(L,"LI",{});var Nxe=s(xg);hie=n(Nxe,"STRONG",{});var ugt=s(hie);Gno=r(ugt,"qdqbert"),ugt.forEach(t),Ono=r(Nxe," \u2014 "),SB=n(Nxe,"A",{href:!0});var bgt=s(SB);Vno=r(bgt,"QDQBertConfig"),bgt.forEach(t),Xno=r(Nxe," (QDQBert model)"),Nxe.forEach(t),zno=i(L),$g=n(L,"LI",{});var qxe=s($g);pie=n(qxe,"STRONG",{});var vgt=s(pie);Wno=r(vgt,"rag"),vgt.forEach(t),Qno=r(qxe," \u2014 "),RB=n(qxe,"A",{href:!0});var Fgt=s(RB);Uno=r(Fgt,"RagConfig"),Fgt.forEach(t),Hno=r(qxe," (RAG model)"),qxe.forEach(t),Jno=i(L),kg=n(L,"LI",{});var jxe=s(kg);_ie=n(jxe,"STRONG",{});var Tgt=s(_ie);Yno=r(Tgt,"realm"),Tgt.forEach(t),Kno=r(jxe," \u2014 "),PB=n(jxe,"A",{href:!0});var Mgt=s(PB);Zno=r(Mgt,"RealmConfig"),Mgt.forEach(t),eso=r(jxe," (REALM model)"),jxe.forEach(t),oso=i(L),Sg=n(L,"LI",{});var Dxe=s(Sg);uie=n(Dxe,"STRONG",{});var Egt=s(uie);rso=r(Egt,"reformer"),Egt.forEach(t),tso=r(Dxe," \u2014 "),BB=n(Dxe,"A",{href:!0});var Cgt=s(BB);aso=r(Cgt,"ReformerConfig"),Cgt.forEach(t),nso=r(Dxe," (Reformer model)"),Dxe.forEach(t),sso=i(L),Rg=n(L,"LI",{});var Gxe=s(Rg);bie=n(Gxe,"STRONG",{});var wgt=s(bie);lso=r(wgt,"regnet"),wgt.forEach(t),iso=r(Gxe," \u2014 "),IB=n(Gxe,"A",{href:!0});var Agt=s(IB);dso=r(Agt,"RegNetConfig"),Agt.forEach(t),cso=r(Gxe," (RegNet model)"),Gxe.forEach(t),fso=i(L),Pg=n(L,"LI",{});var Oxe=s(Pg);vie=n(Oxe,"STRONG",{});var Lgt=s(vie);mso=r(Lgt,"rembert"),Lgt.forEach(t),gso=r(Oxe," \u2014 "),NB=n(Oxe,"A",{href:!0});var ygt=s(NB);hso=r(ygt,"RemBertConfig"),ygt.forEach(t),pso=r(Oxe," (RemBERT model)"),Oxe.forEach(t),_so=i(L),Bg=n(L,"LI",{});var Vxe=s(Bg);Fie=n(Vxe,"STRONG",{});var xgt=s(Fie);uso=r(xgt,"resnet"),xgt.forEach(t),bso=r(Vxe," \u2014 "),qB=n(Vxe,"A",{href:!0});var $gt=s(qB);vso=r($gt,"ResNetConfig"),$gt.forEach(t),Fso=r(Vxe," (ResNet model)"),Vxe.forEach(t),Tso=i(L),Ig=n(L,"LI",{});var Xxe=s(Ig);Tie=n(Xxe,"STRONG",{});var kgt=s(Tie);Mso=r(kgt,"retribert"),kgt.forEach(t),Eso=r(Xxe," \u2014 "),jB=n(Xxe,"A",{href:!0});var Sgt=s(jB);Cso=r(Sgt,"RetriBertConfig"),Sgt.forEach(t),wso=r(Xxe," (RetriBERT model)"),Xxe.forEach(t),Aso=i(L),Ng=n(L,"LI",{});var zxe=s(Ng);Mie=n(zxe,"STRONG",{});var Rgt=s(Mie);Lso=r(Rgt,"roberta"),Rgt.forEach(t),yso=r(zxe," \u2014 "),DB=n(zxe,"A",{href:!0});var Pgt=s(DB);xso=r(Pgt,"RobertaConfig"),Pgt.forEach(t),$so=r(zxe," (RoBERTa model)"),zxe.forEach(t),kso=i(L),qg=n(L,"LI",{});var Wxe=s(qg);Eie=n(Wxe,"STRONG",{});var Bgt=s(Eie);Sso=r(Bgt,"roformer"),Bgt.forEach(t),Rso=r(Wxe," \u2014 "),GB=n(Wxe,"A",{href:!0});var Igt=s(GB);Pso=r(Igt,"RoFormerConfig"),Igt.forEach(t),Bso=r(Wxe," (RoFormer model)"),Wxe.forEach(t),Iso=i(L),jg=n(L,"LI",{});var Qxe=s(jg);Cie=n(Qxe,"STRONG",{});var Ngt=s(Cie);Nso=r(Ngt,"segformer"),Ngt.forEach(t),qso=r(Qxe," \u2014 "),OB=n(Qxe,"A",{href:!0});var qgt=s(OB);jso=r(qgt,"SegformerConfig"),qgt.forEach(t),Dso=r(Qxe," (SegFormer model)"),Qxe.forEach(t),Gso=i(L),Dg=n(L,"LI",{});var Uxe=s(Dg);wie=n(Uxe,"STRONG",{});var jgt=s(wie);Oso=r(jgt,"sew"),jgt.forEach(t),Vso=r(Uxe," \u2014 "),VB=n(Uxe,"A",{href:!0});var Dgt=s(VB);Xso=r(Dgt,"SEWConfig"),Dgt.forEach(t),zso=r(Uxe," (SEW model)"),Uxe.forEach(t),Wso=i(L),Gg=n(L,"LI",{});var Hxe=s(Gg);Aie=n(Hxe,"STRONG",{});var Ggt=s(Aie);Qso=r(Ggt,"sew-d"),Ggt.forEach(t),Uso=r(Hxe," \u2014 "),XB=n(Hxe,"A",{href:!0});var Ogt=s(XB);Hso=r(Ogt,"SEWDConfig"),Ogt.forEach(t),Jso=r(Hxe," (SEW-D model)"),Hxe.forEach(t),Yso=i(L),Og=n(L,"LI",{});var Jxe=s(Og);Lie=n(Jxe,"STRONG",{});var Vgt=s(Lie);Kso=r(Vgt,"speech-encoder-decoder"),Vgt.forEach(t),Zso=r(Jxe," \u2014 "),zB=n(Jxe,"A",{href:!0});var Xgt=s(zB);elo=r(Xgt,"SpeechEncoderDecoderConfig"),Xgt.forEach(t),olo=r(Jxe," (Speech Encoder decoder model)"),Jxe.forEach(t),rlo=i(L),Vg=n(L,"LI",{});var Yxe=s(Vg);yie=n(Yxe,"STRONG",{});var zgt=s(yie);tlo=r(zgt,"speech_to_text"),zgt.forEach(t),alo=r(Yxe," \u2014 "),WB=n(Yxe,"A",{href:!0});var Wgt=s(WB);nlo=r(Wgt,"Speech2TextConfig"),Wgt.forEach(t),slo=r(Yxe," (Speech2Text model)"),Yxe.forEach(t),llo=i(L),Xg=n(L,"LI",{});var Kxe=s(Xg);xie=n(Kxe,"STRONG",{});var Qgt=s(xie);ilo=r(Qgt,"speech_to_text_2"),Qgt.forEach(t),dlo=r(Kxe," \u2014 "),QB=n(Kxe,"A",{href:!0});var Ugt=s(QB);clo=r(Ugt,"Speech2Text2Config"),Ugt.forEach(t),flo=r(Kxe," (Speech2Text2 model)"),Kxe.forEach(t),mlo=i(L),zg=n(L,"LI",{});var Zxe=s(zg);$ie=n(Zxe,"STRONG",{});var Hgt=s($ie);glo=r(Hgt,"splinter"),Hgt.forEach(t),hlo=r(Zxe," \u2014 "),UB=n(Zxe,"A",{href:!0});var Jgt=s(UB);plo=r(Jgt,"SplinterConfig"),Jgt.forEach(t),_lo=r(Zxe," (Splinter model)"),Zxe.forEach(t),ulo=i(L),Wg=n(L,"LI",{});var e$e=s(Wg);kie=n(e$e,"STRONG",{});var Ygt=s(kie);blo=r(Ygt,"squeezebert"),Ygt.forEach(t),vlo=r(e$e," \u2014 "),HB=n(e$e,"A",{href:!0});var Kgt=s(HB);Flo=r(Kgt,"SqueezeBertConfig"),Kgt.forEach(t),Tlo=r(e$e," (SqueezeBERT model)"),e$e.forEach(t),Mlo=i(L),Qg=n(L,"LI",{});var o$e=s(Qg);Sie=n(o$e,"STRONG",{});var Zgt=s(Sie);Elo=r(Zgt,"swin"),Zgt.forEach(t),Clo=r(o$e," \u2014 "),JB=n(o$e,"A",{href:!0});var eht=s(JB);wlo=r(eht,"SwinConfig"),eht.forEach(t),Alo=r(o$e," (Swin Transformer model)"),o$e.forEach(t),Llo=i(L),Ug=n(L,"LI",{});var r$e=s(Ug);Rie=n(r$e,"STRONG",{});var oht=s(Rie);ylo=r(oht,"swinv2"),oht.forEach(t),xlo=r(r$e," \u2014 "),YB=n(r$e,"A",{href:!0});var rht=s(YB);$lo=r(rht,"Swinv2Config"),rht.forEach(t),klo=r(r$e," (Swin Transformer V2 model)"),r$e.forEach(t),Slo=i(L),Hg=n(L,"LI",{});var t$e=s(Hg);Pie=n(t$e,"STRONG",{});var tht=s(Pie);Rlo=r(tht,"t5"),tht.forEach(t),Plo=r(t$e," \u2014 "),KB=n(t$e,"A",{href:!0});var aht=s(KB);Blo=r(aht,"T5Config"),aht.forEach(t),Ilo=r(t$e," (T5 model)"),t$e.forEach(t),Nlo=i(L),Jg=n(L,"LI",{});var a$e=s(Jg);Bie=n(a$e,"STRONG",{});var nht=s(Bie);qlo=r(nht,"tapas"),nht.forEach(t),jlo=r(a$e," \u2014 "),ZB=n(a$e,"A",{href:!0});var sht=s(ZB);Dlo=r(sht,"TapasConfig"),sht.forEach(t),Glo=r(a$e," (TAPAS model)"),a$e.forEach(t),Olo=i(L),Yg=n(L,"LI",{});var n$e=s(Yg);Iie=n(n$e,"STRONG",{});var lht=s(Iie);Vlo=r(lht,"trajectory_transformer"),lht.forEach(t),Xlo=r(n$e," \u2014 "),eI=n(n$e,"A",{href:!0});var iht=s(eI);zlo=r(iht,"TrajectoryTransformerConfig"),iht.forEach(t),Wlo=r(n$e," (Trajectory Transformer model)"),n$e.forEach(t),Qlo=i(L),Kg=n(L,"LI",{});var s$e=s(Kg);Nie=n(s$e,"STRONG",{});var dht=s(Nie);Ulo=r(dht,"transfo-xl"),dht.forEach(t),Hlo=r(s$e," \u2014 "),oI=n(s$e,"A",{href:!0});var cht=s(oI);Jlo=r(cht,"TransfoXLConfig"),cht.forEach(t),Ylo=r(s$e," (Transformer-XL model)"),s$e.forEach(t),Klo=i(L),Zg=n(L,"LI",{});var l$e=s(Zg);qie=n(l$e,"STRONG",{});var fht=s(qie);Zlo=r(fht,"trocr"),fht.forEach(t),eio=r(l$e," \u2014 "),rI=n(l$e,"A",{href:!0});var mht=s(rI);oio=r(mht,"TrOCRConfig"),mht.forEach(t),rio=r(l$e," (TrOCR model)"),l$e.forEach(t),tio=i(L),eh=n(L,"LI",{});var i$e=s(eh);jie=n(i$e,"STRONG",{});var ght=s(jie);aio=r(ght,"unispeech"),ght.forEach(t),nio=r(i$e," \u2014 "),tI=n(i$e,"A",{href:!0});var hht=s(tI);sio=r(hht,"UniSpeechConfig"),hht.forEach(t),lio=r(i$e," (UniSpeech model)"),i$e.forEach(t),iio=i(L),oh=n(L,"LI",{});var d$e=s(oh);Die=n(d$e,"STRONG",{});var pht=s(Die);dio=r(pht,"unispeech-sat"),pht.forEach(t),cio=r(d$e," \u2014 "),aI=n(d$e,"A",{href:!0});var _ht=s(aI);fio=r(_ht,"UniSpeechSatConfig"),_ht.forEach(t),mio=r(d$e," (UniSpeechSat model)"),d$e.forEach(t),gio=i(L),rh=n(L,"LI",{});var c$e=s(rh);Gie=n(c$e,"STRONG",{});var uht=s(Gie);hio=r(uht,"van"),uht.forEach(t),pio=r(c$e," \u2014 "),nI=n(c$e,"A",{href:!0});var bht=s(nI);_io=r(bht,"VanConfig"),bht.forEach(t),uio=r(c$e," (VAN model)"),c$e.forEach(t),bio=i(L),th=n(L,"LI",{});var f$e=s(th);Oie=n(f$e,"STRONG",{});var vht=s(Oie);vio=r(vht,"videomae"),vht.forEach(t),Fio=r(f$e," \u2014 "),sI=n(f$e,"A",{href:!0});var Fht=s(sI);Tio=r(Fht,"VideoMAEConfig"),Fht.forEach(t),Mio=r(f$e," (VideoMAE model)"),f$e.forEach(t),Eio=i(L),ah=n(L,"LI",{});var m$e=s(ah);Vie=n(m$e,"STRONG",{});var Tht=s(Vie);Cio=r(Tht,"vilt"),Tht.forEach(t),wio=r(m$e," \u2014 "),lI=n(m$e,"A",{href:!0});var Mht=s(lI);Aio=r(Mht,"ViltConfig"),Mht.forEach(t),Lio=r(m$e," (ViLT model)"),m$e.forEach(t),yio=i(L),nh=n(L,"LI",{});var g$e=s(nh);Xie=n(g$e,"STRONG",{});var Eht=s(Xie);xio=r(Eht,"vision-encoder-decoder"),Eht.forEach(t),$io=r(g$e," \u2014 "),iI=n(g$e,"A",{href:!0});var Cht=s(iI);kio=r(Cht,"VisionEncoderDecoderConfig"),Cht.forEach(t),Sio=r(g$e," (Vision Encoder decoder model)"),g$e.forEach(t),Rio=i(L),sh=n(L,"LI",{});var h$e=s(sh);zie=n(h$e,"STRONG",{});var wht=s(zie);Pio=r(wht,"vision-text-dual-encoder"),wht.forEach(t),Bio=r(h$e," \u2014 "),dI=n(h$e,"A",{href:!0});var Aht=s(dI);Iio=r(Aht,"VisionTextDualEncoderConfig"),Aht.forEach(t),Nio=r(h$e," (VisionTextDualEncoder model)"),h$e.forEach(t),qio=i(L),lh=n(L,"LI",{});var p$e=s(lh);Wie=n(p$e,"STRONG",{});var Lht=s(Wie);jio=r(Lht,"visual_bert"),Lht.forEach(t),Dio=r(p$e," \u2014 "),cI=n(p$e,"A",{href:!0});var yht=s(cI);Gio=r(yht,"VisualBertConfig"),yht.forEach(t),Oio=r(p$e," (VisualBERT model)"),p$e.forEach(t),Vio=i(L),ih=n(L,"LI",{});var _$e=s(ih);Qie=n(_$e,"STRONG",{});var xht=s(Qie);Xio=r(xht,"vit"),xht.forEach(t),zio=r(_$e," \u2014 "),fI=n(_$e,"A",{href:!0});var $ht=s(fI);Wio=r($ht,"ViTConfig"),$ht.forEach(t),Qio=r(_$e," (ViT model)"),_$e.forEach(t),Uio=i(L),dh=n(L,"LI",{});var u$e=s(dh);Uie=n(u$e,"STRONG",{});var kht=s(Uie);Hio=r(kht,"vit_mae"),kht.forEach(t),Jio=r(u$e," \u2014 "),mI=n(u$e,"A",{href:!0});var Sht=s(mI);Yio=r(Sht,"ViTMAEConfig"),Sht.forEach(t),Kio=r(u$e," (ViTMAE model)"),u$e.forEach(t),Zio=i(L),ch=n(L,"LI",{});var b$e=s(ch);Hie=n(b$e,"STRONG",{});var Rht=s(Hie);edo=r(Rht,"wav2vec2"),Rht.forEach(t),odo=r(b$e," \u2014 "),gI=n(b$e,"A",{href:!0});var Pht=s(gI);rdo=r(Pht,"Wav2Vec2Config"),Pht.forEach(t),tdo=r(b$e," (Wav2Vec2 model)"),b$e.forEach(t),ado=i(L),fh=n(L,"LI",{});var v$e=s(fh);Jie=n(v$e,"STRONG",{});var Bht=s(Jie);ndo=r(Bht,"wav2vec2-conformer"),Bht.forEach(t),sdo=r(v$e," \u2014 "),hI=n(v$e,"A",{href:!0});var Iht=s(hI);ldo=r(Iht,"Wav2Vec2ConformerConfig"),Iht.forEach(t),ido=r(v$e," (Wav2Vec2-Conformer model)"),v$e.forEach(t),ddo=i(L),mh=n(L,"LI",{});var F$e=s(mh);Yie=n(F$e,"STRONG",{});var Nht=s(Yie);cdo=r(Nht,"wavlm"),Nht.forEach(t),fdo=r(F$e," \u2014 "),pI=n(F$e,"A",{href:!0});var qht=s(pI);mdo=r(qht,"WavLMConfig"),qht.forEach(t),gdo=r(F$e," (WavLM model)"),F$e.forEach(t),hdo=i(L),gh=n(L,"LI",{});var T$e=s(gh);Kie=n(T$e,"STRONG",{});var jht=s(Kie);pdo=r(jht,"xglm"),jht.forEach(t),_do=r(T$e," \u2014 "),_I=n(T$e,"A",{href:!0});var Dht=s(_I);udo=r(Dht,"XGLMConfig"),Dht.forEach(t),bdo=r(T$e," (XGLM model)"),T$e.forEach(t),vdo=i(L),hh=n(L,"LI",{});var M$e=s(hh);Zie=n(M$e,"STRONG",{});var Ght=s(Zie);Fdo=r(Ght,"xlm"),Ght.forEach(t),Tdo=r(M$e," \u2014 "),uI=n(M$e,"A",{href:!0});var Oht=s(uI);Mdo=r(Oht,"XLMConfig"),Oht.forEach(t),Edo=r(M$e," (XLM model)"),M$e.forEach(t),Cdo=i(L),ph=n(L,"LI",{});var E$e=s(ph);ede=n(E$e,"STRONG",{});var Vht=s(ede);wdo=r(Vht,"xlm-prophetnet"),Vht.forEach(t),Ado=r(E$e," \u2014 "),bI=n(E$e,"A",{href:!0});var Xht=s(bI);Ldo=r(Xht,"XLMProphetNetConfig"),Xht.forEach(t),ydo=r(E$e," (XLM-ProphetNet model)"),E$e.forEach(t),xdo=i(L),_h=n(L,"LI",{});var C$e=s(_h);ode=n(C$e,"STRONG",{});var zht=s(ode);$do=r(zht,"xlm-roberta"),zht.forEach(t),kdo=r(C$e," \u2014 "),vI=n(C$e,"A",{href:!0});var Wht=s(vI);Sdo=r(Wht,"XLMRobertaConfig"),Wht.forEach(t),Rdo=r(C$e," (XLM-RoBERTa model)"),C$e.forEach(t),Pdo=i(L),uh=n(L,"LI",{});var w$e=s(uh);rde=n(w$e,"STRONG",{});var Qht=s(rde);Bdo=r(Qht,"xlm-roberta-xl"),Qht.forEach(t),Ido=r(w$e," \u2014 "),FI=n(w$e,"A",{href:!0});var Uht=s(FI);Ndo=r(Uht,"XLMRobertaXLConfig"),Uht.forEach(t),qdo=r(w$e," (XLM-RoBERTa-XL model)"),w$e.forEach(t),jdo=i(L),bh=n(L,"LI",{});var A$e=s(bh);tde=n(A$e,"STRONG",{});var Hht=s(tde);Ddo=r(Hht,"xlnet"),Hht.forEach(t),Gdo=r(A$e," \u2014 "),TI=n(A$e,"A",{href:!0});var Jht=s(TI);Odo=r(Jht,"XLNetConfig"),Jht.forEach(t),Vdo=r(A$e," (XLNet model)"),A$e.forEach(t),Xdo=i(L),vh=n(L,"LI",{});var L$e=s(vh);ade=n(L$e,"STRONG",{});var Yht=s(ade);zdo=r(Yht,"yolos"),Yht.forEach(t),Wdo=r(L$e," \u2014 "),MI=n(L$e,"A",{href:!0});var Kht=s(MI);Qdo=r(Kht,"YolosConfig"),Kht.forEach(t),Udo=r(L$e," (YOLOS model)"),L$e.forEach(t),Hdo=i(L),Fh=n(L,"LI",{});var y$e=s(Fh);nde=n(y$e,"STRONG",{});var Zht=s(nde);Jdo=r(Zht,"yoso"),Zht.forEach(t),Ydo=r(y$e," \u2014 "),EI=n(y$e,"A",{href:!0});var ept=s(EI);Kdo=r(ept,"YosoConfig"),ept.forEach(t),Zdo=r(y$e," (YOSO model)"),y$e.forEach(t),L.forEach(t),eco=i(ct),T(Th.$$.fragment,ct),ct.forEach(t),oco=i(dt),Mh=n(dt,"DIV",{class:!0});var JHe=s(Mh);T(Fy.$$.fragment,JHe),rco=i(JHe),sde=n(JHe,"P",{});var opt=s(sde);tco=r(opt,"Register a new configuration for this class."),opt.forEach(t),JHe.forEach(t),dt.forEach(t),QQe=i(f),Ki=n(f,"H2",{class:!0});var YHe=s(Ki);Eh=n(YHe,"A",{id:!0,class:!0,href:!0});var rpt=s(Eh);lde=n(rpt,"SPAN",{});var tpt=s(lde);T(Ty.$$.fragment,tpt),tpt.forEach(t),rpt.forEach(t),aco=i(YHe),ide=n(YHe,"SPAN",{});var apt=s(ide);nco=r(apt,"AutoTokenizer"),apt.forEach(t),YHe.forEach(t),UQe=i(f),xo=n(f,"DIV",{class:!0});var cl=s(xo);T(My.$$.fragment,cl),sco=i(cl),Ey=n(cl,"P",{});var KHe=s(Ey);lco=r(KHe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),CI=n(KHe,"A",{href:!0});var npt=s(CI);ico=r(npt,"AutoTokenizer.from_pretrained()"),npt.forEach(t),dco=r(KHe," class method."),KHe.forEach(t),cco=i(cl),Cy=n(cl,"P",{});var ZHe=s(Cy);fco=r(ZHe,"This class cannot be instantiated directly using "),dde=n(ZHe,"CODE",{});var spt=s(dde);mco=r(spt,"__init__()"),spt.forEach(t),gco=r(ZHe," (throws an error)."),ZHe.forEach(t),hco=i(cl),Sr=n(cl,"DIV",{class:!0});var fl=s(Sr);T(wy.$$.fragment,fl),pco=i(fl),cde=n(fl,"P",{});var lpt=s(cde);_co=r(lpt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),lpt.forEach(t),uco=i(fl),Ga=n(fl,"P",{});var c7=s(Ga);bco=r(c7,"The tokenizer class to instantiate is selected based on the "),fde=n(c7,"CODE",{});var ipt=s(fde);vco=r(ipt,"model_type"),ipt.forEach(t),Fco=r(c7,` property of the config object (either
passed as an argument or loaded from `),mde=n(c7,"CODE",{});var dpt=s(mde);Tco=r(dpt,"pretrained_model_name_or_path"),dpt.forEach(t),Mco=r(c7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gde=n(c7,"CODE",{});var cpt=s(gde);Eco=r(cpt,"pretrained_model_name_or_path"),cpt.forEach(t),Cco=r(c7,":"),c7.forEach(t),wco=i(fl),k=n(fl,"UL",{});var S=s(k);Hn=n(S,"LI",{});var OS=s(Hn);hde=n(OS,"STRONG",{});var fpt=s(hde);Aco=r(fpt,"albert"),fpt.forEach(t),Lco=r(OS," \u2014 "),wI=n(OS,"A",{href:!0});var mpt=s(wI);yco=r(mpt,"AlbertTokenizer"),mpt.forEach(t),xco=r(OS," or "),AI=n(OS,"A",{href:!0});var gpt=s(AI);$co=r(gpt,"AlbertTokenizerFast"),gpt.forEach(t),kco=r(OS," (ALBERT model)"),OS.forEach(t),Sco=i(S),Jn=n(S,"LI",{});var VS=s(Jn);pde=n(VS,"STRONG",{});var hpt=s(pde);Rco=r(hpt,"bart"),hpt.forEach(t),Pco=r(VS," \u2014 "),LI=n(VS,"A",{href:!0});var ppt=s(LI);Bco=r(ppt,"BartTokenizer"),ppt.forEach(t),Ico=r(VS," or "),yI=n(VS,"A",{href:!0});var _pt=s(yI);Nco=r(_pt,"BartTokenizerFast"),_pt.forEach(t),qco=r(VS," (BART model)"),VS.forEach(t),jco=i(S),Yn=n(S,"LI",{});var XS=s(Yn);_de=n(XS,"STRONG",{});var upt=s(_de);Dco=r(upt,"barthez"),upt.forEach(t),Gco=r(XS," \u2014 "),xI=n(XS,"A",{href:!0});var bpt=s(xI);Oco=r(bpt,"BarthezTokenizer"),bpt.forEach(t),Vco=r(XS," or "),$I=n(XS,"A",{href:!0});var vpt=s($I);Xco=r(vpt,"BarthezTokenizerFast"),vpt.forEach(t),zco=r(XS," (BARThez model)"),XS.forEach(t),Wco=i(S),Ch=n(S,"LI",{});var x$e=s(Ch);ude=n(x$e,"STRONG",{});var Fpt=s(ude);Qco=r(Fpt,"bartpho"),Fpt.forEach(t),Uco=r(x$e," \u2014 "),kI=n(x$e,"A",{href:!0});var Tpt=s(kI);Hco=r(Tpt,"BartphoTokenizer"),Tpt.forEach(t),Jco=r(x$e," (BARTpho model)"),x$e.forEach(t),Yco=i(S),Kn=n(S,"LI",{});var zS=s(Kn);bde=n(zS,"STRONG",{});var Mpt=s(bde);Kco=r(Mpt,"bert"),Mpt.forEach(t),Zco=r(zS," \u2014 "),SI=n(zS,"A",{href:!0});var Ept=s(SI);efo=r(Ept,"BertTokenizer"),Ept.forEach(t),ofo=r(zS," or "),RI=n(zS,"A",{href:!0});var Cpt=s(RI);rfo=r(Cpt,"BertTokenizerFast"),Cpt.forEach(t),tfo=r(zS," (BERT model)"),zS.forEach(t),afo=i(S),wh=n(S,"LI",{});var $$e=s(wh);vde=n($$e,"STRONG",{});var wpt=s(vde);nfo=r(wpt,"bert-generation"),wpt.forEach(t),sfo=r($$e," \u2014 "),PI=n($$e,"A",{href:!0});var Apt=s(PI);lfo=r(Apt,"BertGenerationTokenizer"),Apt.forEach(t),ifo=r($$e," (Bert Generation model)"),$$e.forEach(t),dfo=i(S),Ah=n(S,"LI",{});var k$e=s(Ah);Fde=n(k$e,"STRONG",{});var Lpt=s(Fde);cfo=r(Lpt,"bert-japanese"),Lpt.forEach(t),ffo=r(k$e," \u2014 "),BI=n(k$e,"A",{href:!0});var ypt=s(BI);mfo=r(ypt,"BertJapaneseTokenizer"),ypt.forEach(t),gfo=r(k$e," (BertJapanese model)"),k$e.forEach(t),hfo=i(S),Lh=n(S,"LI",{});var S$e=s(Lh);Tde=n(S$e,"STRONG",{});var xpt=s(Tde);pfo=r(xpt,"bertweet"),xpt.forEach(t),_fo=r(S$e," \u2014 "),II=n(S$e,"A",{href:!0});var $pt=s(II);ufo=r($pt,"BertweetTokenizer"),$pt.forEach(t),bfo=r(S$e," (BERTweet model)"),S$e.forEach(t),vfo=i(S),Zn=n(S,"LI",{});var WS=s(Zn);Mde=n(WS,"STRONG",{});var kpt=s(Mde);Ffo=r(kpt,"big_bird"),kpt.forEach(t),Tfo=r(WS," \u2014 "),NI=n(WS,"A",{href:!0});var Spt=s(NI);Mfo=r(Spt,"BigBirdTokenizer"),Spt.forEach(t),Efo=r(WS," or "),qI=n(WS,"A",{href:!0});var Rpt=s(qI);Cfo=r(Rpt,"BigBirdTokenizerFast"),Rpt.forEach(t),wfo=r(WS," (BigBird model)"),WS.forEach(t),Afo=i(S),es=n(S,"LI",{});var QS=s(es);Ede=n(QS,"STRONG",{});var Ppt=s(Ede);Lfo=r(Ppt,"bigbird_pegasus"),Ppt.forEach(t),yfo=r(QS," \u2014 "),jI=n(QS,"A",{href:!0});var Bpt=s(jI);xfo=r(Bpt,"PegasusTokenizer"),Bpt.forEach(t),$fo=r(QS," or "),DI=n(QS,"A",{href:!0});var Ipt=s(DI);kfo=r(Ipt,"PegasusTokenizerFast"),Ipt.forEach(t),Sfo=r(QS," (BigBird-Pegasus model)"),QS.forEach(t),Rfo=i(S),os=n(S,"LI",{});var US=s(os);Cde=n(US,"STRONG",{});var Npt=s(Cde);Pfo=r(Npt,"blenderbot"),Npt.forEach(t),Bfo=r(US," \u2014 "),GI=n(US,"A",{href:!0});var qpt=s(GI);Ifo=r(qpt,"BlenderbotTokenizer"),qpt.forEach(t),Nfo=r(US," or "),OI=n(US,"A",{href:!0});var jpt=s(OI);qfo=r(jpt,"BlenderbotTokenizerFast"),jpt.forEach(t),jfo=r(US," (Blenderbot model)"),US.forEach(t),Dfo=i(S),yh=n(S,"LI",{});var R$e=s(yh);wde=n(R$e,"STRONG",{});var Dpt=s(wde);Gfo=r(Dpt,"blenderbot-small"),Dpt.forEach(t),Ofo=r(R$e," \u2014 "),VI=n(R$e,"A",{href:!0});var Gpt=s(VI);Vfo=r(Gpt,"BlenderbotSmallTokenizer"),Gpt.forEach(t),Xfo=r(R$e," (BlenderbotSmall model)"),R$e.forEach(t),zfo=i(S),xh=n(S,"LI",{});var P$e=s(xh);Ade=n(P$e,"STRONG",{});var Opt=s(Ade);Wfo=r(Opt,"bloom"),Opt.forEach(t),Qfo=r(P$e," \u2014 "),XI=n(P$e,"A",{href:!0});var Vpt=s(XI);Ufo=r(Vpt,"BloomTokenizerFast"),Vpt.forEach(t),Hfo=r(P$e," (BLOOM model)"),P$e.forEach(t),Jfo=i(S),$h=n(S,"LI",{});var B$e=s($h);Lde=n(B$e,"STRONG",{});var Xpt=s(Lde);Yfo=r(Xpt,"byt5"),Xpt.forEach(t),Kfo=r(B$e," \u2014 "),zI=n(B$e,"A",{href:!0});var zpt=s(zI);Zfo=r(zpt,"ByT5Tokenizer"),zpt.forEach(t),emo=r(B$e," (ByT5 model)"),B$e.forEach(t),omo=i(S),rs=n(S,"LI",{});var HS=s(rs);yde=n(HS,"STRONG",{});var Wpt=s(yde);rmo=r(Wpt,"camembert"),Wpt.forEach(t),tmo=r(HS," \u2014 "),WI=n(HS,"A",{href:!0});var Qpt=s(WI);amo=r(Qpt,"CamembertTokenizer"),Qpt.forEach(t),nmo=r(HS," or "),QI=n(HS,"A",{href:!0});var Upt=s(QI);smo=r(Upt,"CamembertTokenizerFast"),Upt.forEach(t),lmo=r(HS," (CamemBERT model)"),HS.forEach(t),imo=i(S),kh=n(S,"LI",{});var I$e=s(kh);xde=n(I$e,"STRONG",{});var Hpt=s(xde);dmo=r(Hpt,"canine"),Hpt.forEach(t),cmo=r(I$e," \u2014 "),UI=n(I$e,"A",{href:!0});var Jpt=s(UI);fmo=r(Jpt,"CanineTokenizer"),Jpt.forEach(t),mmo=r(I$e," (CANINE model)"),I$e.forEach(t),gmo=i(S),ts=n(S,"LI",{});var JS=s(ts);$de=n(JS,"STRONG",{});var Ypt=s($de);hmo=r(Ypt,"clip"),Ypt.forEach(t),pmo=r(JS," \u2014 "),HI=n(JS,"A",{href:!0});var Kpt=s(HI);_mo=r(Kpt,"CLIPTokenizer"),Kpt.forEach(t),umo=r(JS," or "),JI=n(JS,"A",{href:!0});var Zpt=s(JI);bmo=r(Zpt,"CLIPTokenizerFast"),Zpt.forEach(t),vmo=r(JS," (CLIP model)"),JS.forEach(t),Fmo=i(S),as=n(S,"LI",{});var YS=s(as);kde=n(YS,"STRONG",{});var e_t=s(kde);Tmo=r(e_t,"codegen"),e_t.forEach(t),Mmo=r(YS," \u2014 "),YI=n(YS,"A",{href:!0});var o_t=s(YI);Emo=r(o_t,"CodeGenTokenizer"),o_t.forEach(t),Cmo=r(YS," or "),KI=n(YS,"A",{href:!0});var r_t=s(KI);wmo=r(r_t,"CodeGenTokenizerFast"),r_t.forEach(t),Amo=r(YS," (CodeGen model)"),YS.forEach(t),Lmo=i(S),ns=n(S,"LI",{});var KS=s(ns);Sde=n(KS,"STRONG",{});var t_t=s(Sde);ymo=r(t_t,"convbert"),t_t.forEach(t),xmo=r(KS," \u2014 "),ZI=n(KS,"A",{href:!0});var a_t=s(ZI);$mo=r(a_t,"ConvBertTokenizer"),a_t.forEach(t),kmo=r(KS," or "),eN=n(KS,"A",{href:!0});var n_t=s(eN);Smo=r(n_t,"ConvBertTokenizerFast"),n_t.forEach(t),Rmo=r(KS," (ConvBERT model)"),KS.forEach(t),Pmo=i(S),ss=n(S,"LI",{});var ZS=s(ss);Rde=n(ZS,"STRONG",{});var s_t=s(Rde);Bmo=r(s_t,"cpm"),s_t.forEach(t),Imo=r(ZS," \u2014 "),oN=n(ZS,"A",{href:!0});var l_t=s(oN);Nmo=r(l_t,"CpmTokenizer"),l_t.forEach(t),qmo=r(ZS," or "),rN=n(ZS,"A",{href:!0});var i_t=s(rN);jmo=r(i_t,"CpmTokenizerFast"),i_t.forEach(t),Dmo=r(ZS," (CPM model)"),ZS.forEach(t),Gmo=i(S),Sh=n(S,"LI",{});var N$e=s(Sh);Pde=n(N$e,"STRONG",{});var d_t=s(Pde);Omo=r(d_t,"ctrl"),d_t.forEach(t),Vmo=r(N$e," \u2014 "),tN=n(N$e,"A",{href:!0});var c_t=s(tN);Xmo=r(c_t,"CTRLTokenizer"),c_t.forEach(t),zmo=r(N$e," (CTRL model)"),N$e.forEach(t),Wmo=i(S),ls=n(S,"LI",{});var eR=s(ls);Bde=n(eR,"STRONG",{});var f_t=s(Bde);Qmo=r(f_t,"data2vec-text"),f_t.forEach(t),Umo=r(eR," \u2014 "),aN=n(eR,"A",{href:!0});var m_t=s(aN);Hmo=r(m_t,"RobertaTokenizer"),m_t.forEach(t),Jmo=r(eR," or "),nN=n(eR,"A",{href:!0});var g_t=s(nN);Ymo=r(g_t,"RobertaTokenizerFast"),g_t.forEach(t),Kmo=r(eR," (Data2VecText model)"),eR.forEach(t),Zmo=i(S),is=n(S,"LI",{});var oR=s(is);Ide=n(oR,"STRONG",{});var h_t=s(Ide);ego=r(h_t,"deberta"),h_t.forEach(t),ogo=r(oR," \u2014 "),sN=n(oR,"A",{href:!0});var p_t=s(sN);rgo=r(p_t,"DebertaTokenizer"),p_t.forEach(t),tgo=r(oR," or "),lN=n(oR,"A",{href:!0});var __t=s(lN);ago=r(__t,"DebertaTokenizerFast"),__t.forEach(t),ngo=r(oR," (DeBERTa model)"),oR.forEach(t),sgo=i(S),ds=n(S,"LI",{});var rR=s(ds);Nde=n(rR,"STRONG",{});var u_t=s(Nde);lgo=r(u_t,"deberta-v2"),u_t.forEach(t),igo=r(rR," \u2014 "),iN=n(rR,"A",{href:!0});var b_t=s(iN);dgo=r(b_t,"DebertaV2Tokenizer"),b_t.forEach(t),cgo=r(rR," or "),dN=n(rR,"A",{href:!0});var v_t=s(dN);fgo=r(v_t,"DebertaV2TokenizerFast"),v_t.forEach(t),mgo=r(rR," (DeBERTa-v2 model)"),rR.forEach(t),ggo=i(S),cs=n(S,"LI",{});var tR=s(cs);qde=n(tR,"STRONG",{});var F_t=s(qde);hgo=r(F_t,"distilbert"),F_t.forEach(t),pgo=r(tR," \u2014 "),cN=n(tR,"A",{href:!0});var T_t=s(cN);_go=r(T_t,"DistilBertTokenizer"),T_t.forEach(t),ugo=r(tR," or "),fN=n(tR,"A",{href:!0});var M_t=s(fN);bgo=r(M_t,"DistilBertTokenizerFast"),M_t.forEach(t),vgo=r(tR," (DistilBERT model)"),tR.forEach(t),Fgo=i(S),fs=n(S,"LI",{});var aR=s(fs);jde=n(aR,"STRONG",{});var E_t=s(jde);Tgo=r(E_t,"dpr"),E_t.forEach(t),Mgo=r(aR," \u2014 "),mN=n(aR,"A",{href:!0});var C_t=s(mN);Ego=r(C_t,"DPRQuestionEncoderTokenizer"),C_t.forEach(t),Cgo=r(aR," or "),gN=n(aR,"A",{href:!0});var w_t=s(gN);wgo=r(w_t,"DPRQuestionEncoderTokenizerFast"),w_t.forEach(t),Ago=r(aR," (DPR model)"),aR.forEach(t),Lgo=i(S),ms=n(S,"LI",{});var nR=s(ms);Dde=n(nR,"STRONG",{});var A_t=s(Dde);ygo=r(A_t,"electra"),A_t.forEach(t),xgo=r(nR," \u2014 "),hN=n(nR,"A",{href:!0});var L_t=s(hN);$go=r(L_t,"ElectraTokenizer"),L_t.forEach(t),kgo=r(nR," or "),pN=n(nR,"A",{href:!0});var y_t=s(pN);Sgo=r(y_t,"ElectraTokenizerFast"),y_t.forEach(t),Rgo=r(nR," (ELECTRA model)"),nR.forEach(t),Pgo=i(S),Rh=n(S,"LI",{});var q$e=s(Rh);Gde=n(q$e,"STRONG",{});var x_t=s(Gde);Bgo=r(x_t,"flaubert"),x_t.forEach(t),Igo=r(q$e," \u2014 "),_N=n(q$e,"A",{href:!0});var $_t=s(_N);Ngo=r($_t,"FlaubertTokenizer"),$_t.forEach(t),qgo=r(q$e," (FlauBERT model)"),q$e.forEach(t),jgo=i(S),gs=n(S,"LI",{});var sR=s(gs);Ode=n(sR,"STRONG",{});var k_t=s(Ode);Dgo=r(k_t,"fnet"),k_t.forEach(t),Ggo=r(sR," \u2014 "),uN=n(sR,"A",{href:!0});var S_t=s(uN);Ogo=r(S_t,"FNetTokenizer"),S_t.forEach(t),Vgo=r(sR," or "),bN=n(sR,"A",{href:!0});var R_t=s(bN);Xgo=r(R_t,"FNetTokenizerFast"),R_t.forEach(t),zgo=r(sR," (FNet model)"),sR.forEach(t),Wgo=i(S),Ph=n(S,"LI",{});var j$e=s(Ph);Vde=n(j$e,"STRONG",{});var P_t=s(Vde);Qgo=r(P_t,"fsmt"),P_t.forEach(t),Ugo=r(j$e," \u2014 "),vN=n(j$e,"A",{href:!0});var B_t=s(vN);Hgo=r(B_t,"FSMTTokenizer"),B_t.forEach(t),Jgo=r(j$e," (FairSeq Machine-Translation model)"),j$e.forEach(t),Ygo=i(S),hs=n(S,"LI",{});var lR=s(hs);Xde=n(lR,"STRONG",{});var I_t=s(Xde);Kgo=r(I_t,"funnel"),I_t.forEach(t),Zgo=r(lR," \u2014 "),FN=n(lR,"A",{href:!0});var N_t=s(FN);eho=r(N_t,"FunnelTokenizer"),N_t.forEach(t),oho=r(lR," or "),TN=n(lR,"A",{href:!0});var q_t=s(TN);rho=r(q_t,"FunnelTokenizerFast"),q_t.forEach(t),tho=r(lR," (Funnel Transformer model)"),lR.forEach(t),aho=i(S),ps=n(S,"LI",{});var iR=s(ps);zde=n(iR,"STRONG",{});var j_t=s(zde);nho=r(j_t,"gpt2"),j_t.forEach(t),sho=r(iR," \u2014 "),MN=n(iR,"A",{href:!0});var D_t=s(MN);lho=r(D_t,"GPT2Tokenizer"),D_t.forEach(t),iho=r(iR," or "),EN=n(iR,"A",{href:!0});var G_t=s(EN);dho=r(G_t,"GPT2TokenizerFast"),G_t.forEach(t),cho=r(iR," (OpenAI GPT-2 model)"),iR.forEach(t),fho=i(S),_s=n(S,"LI",{});var dR=s(_s);Wde=n(dR,"STRONG",{});var O_t=s(Wde);mho=r(O_t,"gpt_neo"),O_t.forEach(t),gho=r(dR," \u2014 "),CN=n(dR,"A",{href:!0});var V_t=s(CN);hho=r(V_t,"GPT2Tokenizer"),V_t.forEach(t),pho=r(dR," or "),wN=n(dR,"A",{href:!0});var X_t=s(wN);_ho=r(X_t,"GPT2TokenizerFast"),X_t.forEach(t),uho=r(dR," (GPT Neo model)"),dR.forEach(t),bho=i(S),Bh=n(S,"LI",{});var D$e=s(Bh);Qde=n(D$e,"STRONG",{});var z_t=s(Qde);vho=r(z_t,"gpt_neox"),z_t.forEach(t),Fho=r(D$e," \u2014 "),AN=n(D$e,"A",{href:!0});var W_t=s(AN);Tho=r(W_t,"GPTNeoXTokenizerFast"),W_t.forEach(t),Mho=r(D$e," (GPT NeoX model)"),D$e.forEach(t),Eho=i(S),us=n(S,"LI",{});var cR=s(us);Ude=n(cR,"STRONG",{});var Q_t=s(Ude);Cho=r(Q_t,"gptj"),Q_t.forEach(t),who=r(cR," \u2014 "),LN=n(cR,"A",{href:!0});var U_t=s(LN);Aho=r(U_t,"GPT2Tokenizer"),U_t.forEach(t),Lho=r(cR," or "),yN=n(cR,"A",{href:!0});var H_t=s(yN);yho=r(H_t,"GPT2TokenizerFast"),H_t.forEach(t),xho=r(cR," (GPT-J model)"),cR.forEach(t),$ho=i(S),bs=n(S,"LI",{});var fR=s(bs);Hde=n(fR,"STRONG",{});var J_t=s(Hde);kho=r(J_t,"groupvit"),J_t.forEach(t),Sho=r(fR," \u2014 "),xN=n(fR,"A",{href:!0});var Y_t=s(xN);Rho=r(Y_t,"CLIPTokenizer"),Y_t.forEach(t),Pho=r(fR," or "),$N=n(fR,"A",{href:!0});var K_t=s($N);Bho=r(K_t,"CLIPTokenizerFast"),K_t.forEach(t),Iho=r(fR," (GroupViT model)"),fR.forEach(t),Nho=i(S),vs=n(S,"LI",{});var mR=s(vs);Jde=n(mR,"STRONG",{});var Z_t=s(Jde);qho=r(Z_t,"herbert"),Z_t.forEach(t),jho=r(mR," \u2014 "),kN=n(mR,"A",{href:!0});var eut=s(kN);Dho=r(eut,"HerbertTokenizer"),eut.forEach(t),Gho=r(mR," or "),SN=n(mR,"A",{href:!0});var out=s(SN);Oho=r(out,"HerbertTokenizerFast"),out.forEach(t),Vho=r(mR," (HerBERT model)"),mR.forEach(t),Xho=i(S),Ih=n(S,"LI",{});var G$e=s(Ih);Yde=n(G$e,"STRONG",{});var rut=s(Yde);zho=r(rut,"hubert"),rut.forEach(t),Who=r(G$e," \u2014 "),RN=n(G$e,"A",{href:!0});var tut=s(RN);Qho=r(tut,"Wav2Vec2CTCTokenizer"),tut.forEach(t),Uho=r(G$e," (Hubert model)"),G$e.forEach(t),Hho=i(S),Fs=n(S,"LI",{});var gR=s(Fs);Kde=n(gR,"STRONG",{});var aut=s(Kde);Jho=r(aut,"ibert"),aut.forEach(t),Yho=r(gR," \u2014 "),PN=n(gR,"A",{href:!0});var nut=s(PN);Kho=r(nut,"RobertaTokenizer"),nut.forEach(t),Zho=r(gR," or "),BN=n(gR,"A",{href:!0});var sut=s(BN);epo=r(sut,"RobertaTokenizerFast"),sut.forEach(t),opo=r(gR," (I-BERT model)"),gR.forEach(t),rpo=i(S),Ts=n(S,"LI",{});var hR=s(Ts);Zde=n(hR,"STRONG",{});var lut=s(Zde);tpo=r(lut,"layoutlm"),lut.forEach(t),apo=r(hR," \u2014 "),IN=n(hR,"A",{href:!0});var iut=s(IN);npo=r(iut,"LayoutLMTokenizer"),iut.forEach(t),spo=r(hR," or "),NN=n(hR,"A",{href:!0});var dut=s(NN);lpo=r(dut,"LayoutLMTokenizerFast"),dut.forEach(t),ipo=r(hR," (LayoutLM model)"),hR.forEach(t),dpo=i(S),Ms=n(S,"LI",{});var pR=s(Ms);ece=n(pR,"STRONG",{});var cut=s(ece);cpo=r(cut,"layoutlmv2"),cut.forEach(t),fpo=r(pR," \u2014 "),qN=n(pR,"A",{href:!0});var fut=s(qN);mpo=r(fut,"LayoutLMv2Tokenizer"),fut.forEach(t),gpo=r(pR," or "),jN=n(pR,"A",{href:!0});var mut=s(jN);hpo=r(mut,"LayoutLMv2TokenizerFast"),mut.forEach(t),ppo=r(pR," (LayoutLMv2 model)"),pR.forEach(t),_po=i(S),Es=n(S,"LI",{});var _R=s(Es);oce=n(_R,"STRONG",{});var gut=s(oce);upo=r(gut,"layoutlmv3"),gut.forEach(t),bpo=r(_R," \u2014 "),DN=n(_R,"A",{href:!0});var hut=s(DN);vpo=r(hut,"LayoutLMv3Tokenizer"),hut.forEach(t),Fpo=r(_R," or "),GN=n(_R,"A",{href:!0});var put=s(GN);Tpo=r(put,"LayoutLMv3TokenizerFast"),put.forEach(t),Mpo=r(_R," (LayoutLMv3 model)"),_R.forEach(t),Epo=i(S),Cs=n(S,"LI",{});var uR=s(Cs);rce=n(uR,"STRONG",{});var _ut=s(rce);Cpo=r(_ut,"layoutxlm"),_ut.forEach(t),wpo=r(uR," \u2014 "),ON=n(uR,"A",{href:!0});var uut=s(ON);Apo=r(uut,"LayoutXLMTokenizer"),uut.forEach(t),Lpo=r(uR," or "),VN=n(uR,"A",{href:!0});var but=s(VN);ypo=r(but,"LayoutXLMTokenizerFast"),but.forEach(t),xpo=r(uR," (LayoutXLM model)"),uR.forEach(t),$po=i(S),ws=n(S,"LI",{});var bR=s(ws);tce=n(bR,"STRONG",{});var vut=s(tce);kpo=r(vut,"led"),vut.forEach(t),Spo=r(bR," \u2014 "),XN=n(bR,"A",{href:!0});var Fut=s(XN);Rpo=r(Fut,"LEDTokenizer"),Fut.forEach(t),Ppo=r(bR," or "),zN=n(bR,"A",{href:!0});var Tut=s(zN);Bpo=r(Tut,"LEDTokenizerFast"),Tut.forEach(t),Ipo=r(bR," (LED model)"),bR.forEach(t),Npo=i(S),As=n(S,"LI",{});var vR=s(As);ace=n(vR,"STRONG",{});var Mut=s(ace);qpo=r(Mut,"longformer"),Mut.forEach(t),jpo=r(vR," \u2014 "),WN=n(vR,"A",{href:!0});var Eut=s(WN);Dpo=r(Eut,"LongformerTokenizer"),Eut.forEach(t),Gpo=r(vR," or "),QN=n(vR,"A",{href:!0});var Cut=s(QN);Opo=r(Cut,"LongformerTokenizerFast"),Cut.forEach(t),Vpo=r(vR," (Longformer model)"),vR.forEach(t),Xpo=i(S),Ls=n(S,"LI",{});var FR=s(Ls);nce=n(FR,"STRONG",{});var wut=s(nce);zpo=r(wut,"longt5"),wut.forEach(t),Wpo=r(FR," \u2014 "),UN=n(FR,"A",{href:!0});var Aut=s(UN);Qpo=r(Aut,"T5Tokenizer"),Aut.forEach(t),Upo=r(FR," or "),HN=n(FR,"A",{href:!0});var Lut=s(HN);Hpo=r(Lut,"T5TokenizerFast"),Lut.forEach(t),Jpo=r(FR," (LongT5 model)"),FR.forEach(t),Ypo=i(S),Nh=n(S,"LI",{});var O$e=s(Nh);sce=n(O$e,"STRONG",{});var yut=s(sce);Kpo=r(yut,"luke"),yut.forEach(t),Zpo=r(O$e," \u2014 "),JN=n(O$e,"A",{href:!0});var xut=s(JN);e_o=r(xut,"LukeTokenizer"),xut.forEach(t),o_o=r(O$e," (LUKE model)"),O$e.forEach(t),r_o=i(S),ys=n(S,"LI",{});var TR=s(ys);lce=n(TR,"STRONG",{});var $ut=s(lce);t_o=r($ut,"lxmert"),$ut.forEach(t),a_o=r(TR," \u2014 "),YN=n(TR,"A",{href:!0});var kut=s(YN);n_o=r(kut,"LxmertTokenizer"),kut.forEach(t),s_o=r(TR," or "),KN=n(TR,"A",{href:!0});var Sut=s(KN);l_o=r(Sut,"LxmertTokenizerFast"),Sut.forEach(t),i_o=r(TR," (LXMERT model)"),TR.forEach(t),d_o=i(S),qh=n(S,"LI",{});var V$e=s(qh);ice=n(V$e,"STRONG",{});var Rut=s(ice);c_o=r(Rut,"m2m_100"),Rut.forEach(t),f_o=r(V$e," \u2014 "),ZN=n(V$e,"A",{href:!0});var Put=s(ZN);m_o=r(Put,"M2M100Tokenizer"),Put.forEach(t),g_o=r(V$e," (M2M100 model)"),V$e.forEach(t),h_o=i(S),jh=n(S,"LI",{});var X$e=s(jh);dce=n(X$e,"STRONG",{});var But=s(dce);p_o=r(But,"marian"),But.forEach(t),__o=r(X$e," \u2014 "),eq=n(X$e,"A",{href:!0});var Iut=s(eq);u_o=r(Iut,"MarianTokenizer"),Iut.forEach(t),b_o=r(X$e," (Marian model)"),X$e.forEach(t),v_o=i(S),xs=n(S,"LI",{});var MR=s(xs);cce=n(MR,"STRONG",{});var Nut=s(cce);F_o=r(Nut,"mbart"),Nut.forEach(t),T_o=r(MR," \u2014 "),oq=n(MR,"A",{href:!0});var qut=s(oq);M_o=r(qut,"MBartTokenizer"),qut.forEach(t),E_o=r(MR," or "),rq=n(MR,"A",{href:!0});var jut=s(rq);C_o=r(jut,"MBartTokenizerFast"),jut.forEach(t),w_o=r(MR," (mBART model)"),MR.forEach(t),A_o=i(S),$s=n(S,"LI",{});var ER=s($s);fce=n(ER,"STRONG",{});var Dut=s(fce);L_o=r(Dut,"mbart50"),Dut.forEach(t),y_o=r(ER," \u2014 "),tq=n(ER,"A",{href:!0});var Gut=s(tq);x_o=r(Gut,"MBart50Tokenizer"),Gut.forEach(t),$_o=r(ER," or "),aq=n(ER,"A",{href:!0});var Out=s(aq);k_o=r(Out,"MBart50TokenizerFast"),Out.forEach(t),S_o=r(ER," (mBART-50 model)"),ER.forEach(t),R_o=i(S),ks=n(S,"LI",{});var CR=s(ks);mce=n(CR,"STRONG",{});var Vut=s(mce);P_o=r(Vut,"megatron-bert"),Vut.forEach(t),B_o=r(CR," \u2014 "),nq=n(CR,"A",{href:!0});var Xut=s(nq);I_o=r(Xut,"BertTokenizer"),Xut.forEach(t),N_o=r(CR," or "),sq=n(CR,"A",{href:!0});var zut=s(sq);q_o=r(zut,"BertTokenizerFast"),zut.forEach(t),j_o=r(CR," (Megatron-BERT model)"),CR.forEach(t),D_o=i(S),Dh=n(S,"LI",{});var z$e=s(Dh);gce=n(z$e,"STRONG",{});var Wut=s(gce);G_o=r(Wut,"mluke"),Wut.forEach(t),O_o=r(z$e," \u2014 "),lq=n(z$e,"A",{href:!0});var Qut=s(lq);V_o=r(Qut,"MLukeTokenizer"),Qut.forEach(t),X_o=r(z$e," (mLUKE model)"),z$e.forEach(t),z_o=i(S),Ss=n(S,"LI",{});var wR=s(Ss);hce=n(wR,"STRONG",{});var Uut=s(hce);W_o=r(Uut,"mobilebert"),Uut.forEach(t),Q_o=r(wR," \u2014 "),iq=n(wR,"A",{href:!0});var Hut=s(iq);U_o=r(Hut,"MobileBertTokenizer"),Hut.forEach(t),H_o=r(wR," or "),dq=n(wR,"A",{href:!0});var Jut=s(dq);J_o=r(Jut,"MobileBertTokenizerFast"),Jut.forEach(t),Y_o=r(wR," (MobileBERT model)"),wR.forEach(t),K_o=i(S),Rs=n(S,"LI",{});var AR=s(Rs);pce=n(AR,"STRONG",{});var Yut=s(pce);Z_o=r(Yut,"mpnet"),Yut.forEach(t),euo=r(AR," \u2014 "),cq=n(AR,"A",{href:!0});var Kut=s(cq);ouo=r(Kut,"MPNetTokenizer"),Kut.forEach(t),ruo=r(AR," or "),fq=n(AR,"A",{href:!0});var Zut=s(fq);tuo=r(Zut,"MPNetTokenizerFast"),Zut.forEach(t),auo=r(AR," (MPNet model)"),AR.forEach(t),nuo=i(S),Ps=n(S,"LI",{});var LR=s(Ps);_ce=n(LR,"STRONG",{});var e1t=s(_ce);suo=r(e1t,"mt5"),e1t.forEach(t),luo=r(LR," \u2014 "),mq=n(LR,"A",{href:!0});var o1t=s(mq);iuo=r(o1t,"MT5Tokenizer"),o1t.forEach(t),duo=r(LR," or "),gq=n(LR,"A",{href:!0});var r1t=s(gq);cuo=r(r1t,"MT5TokenizerFast"),r1t.forEach(t),fuo=r(LR," (MT5 model)"),LR.forEach(t),muo=i(S),Bs=n(S,"LI",{});var yR=s(Bs);uce=n(yR,"STRONG",{});var t1t=s(uce);guo=r(t1t,"mvp"),t1t.forEach(t),huo=r(yR," \u2014 "),hq=n(yR,"A",{href:!0});var a1t=s(hq);puo=r(a1t,"MvpTokenizer"),a1t.forEach(t),_uo=r(yR," or "),pq=n(yR,"A",{href:!0});var n1t=s(pq);uuo=r(n1t,"MvpTokenizerFast"),n1t.forEach(t),buo=r(yR," (MVP model)"),yR.forEach(t),vuo=i(S),Is=n(S,"LI",{});var xR=s(Is);bce=n(xR,"STRONG",{});var s1t=s(bce);Fuo=r(s1t,"nezha"),s1t.forEach(t),Tuo=r(xR," \u2014 "),_q=n(xR,"A",{href:!0});var l1t=s(_q);Muo=r(l1t,"BertTokenizer"),l1t.forEach(t),Euo=r(xR," or "),uq=n(xR,"A",{href:!0});var i1t=s(uq);Cuo=r(i1t,"BertTokenizerFast"),i1t.forEach(t),wuo=r(xR," (Nezha model)"),xR.forEach(t),Auo=i(S),Ns=n(S,"LI",{});var $R=s(Ns);vce=n($R,"STRONG",{});var d1t=s(vce);Luo=r(d1t,"nllb"),d1t.forEach(t),yuo=r($R," \u2014 "),bq=n($R,"A",{href:!0});var c1t=s(bq);xuo=r(c1t,"NllbTokenizer"),c1t.forEach(t),$uo=r($R," or "),vq=n($R,"A",{href:!0});var f1t=s(vq);kuo=r(f1t,"NllbTokenizerFast"),f1t.forEach(t),Suo=r($R," (NLLB model)"),$R.forEach(t),Ruo=i(S),qs=n(S,"LI",{});var kR=s(qs);Fce=n(kR,"STRONG",{});var m1t=s(Fce);Puo=r(m1t,"nystromformer"),m1t.forEach(t),Buo=r(kR," \u2014 "),Fq=n(kR,"A",{href:!0});var g1t=s(Fq);Iuo=r(g1t,"AlbertTokenizer"),g1t.forEach(t),Nuo=r(kR," or "),Tq=n(kR,"A",{href:!0});var h1t=s(Tq);quo=r(h1t,"AlbertTokenizerFast"),h1t.forEach(t),juo=r(kR," (Nystr\xF6mformer model)"),kR.forEach(t),Duo=i(S),js=n(S,"LI",{});var SR=s(js);Tce=n(SR,"STRONG",{});var p1t=s(Tce);Guo=r(p1t,"openai-gpt"),p1t.forEach(t),Ouo=r(SR," \u2014 "),Mq=n(SR,"A",{href:!0});var _1t=s(Mq);Vuo=r(_1t,"OpenAIGPTTokenizer"),_1t.forEach(t),Xuo=r(SR," or "),Eq=n(SR,"A",{href:!0});var u1t=s(Eq);zuo=r(u1t,"OpenAIGPTTokenizerFast"),u1t.forEach(t),Wuo=r(SR," (OpenAI GPT model)"),SR.forEach(t),Quo=i(S),Gh=n(S,"LI",{});var W$e=s(Gh);Mce=n(W$e,"STRONG",{});var b1t=s(Mce);Uuo=r(b1t,"opt"),b1t.forEach(t),Huo=r(W$e," \u2014 "),Cq=n(W$e,"A",{href:!0});var v1t=s(Cq);Juo=r(v1t,"GPT2Tokenizer"),v1t.forEach(t),Yuo=r(W$e," (OPT model)"),W$e.forEach(t),Kuo=i(S),Ds=n(S,"LI",{});var RR=s(Ds);Ece=n(RR,"STRONG",{});var F1t=s(Ece);Zuo=r(F1t,"owlvit"),F1t.forEach(t),e1o=r(RR," \u2014 "),wq=n(RR,"A",{href:!0});var T1t=s(wq);o1o=r(T1t,"CLIPTokenizer"),T1t.forEach(t),r1o=r(RR," or "),Aq=n(RR,"A",{href:!0});var M1t=s(Aq);t1o=r(M1t,"CLIPTokenizerFast"),M1t.forEach(t),a1o=r(RR," (OWL-ViT model)"),RR.forEach(t),n1o=i(S),Gs=n(S,"LI",{});var PR=s(Gs);Cce=n(PR,"STRONG",{});var E1t=s(Cce);s1o=r(E1t,"pegasus"),E1t.forEach(t),l1o=r(PR," \u2014 "),Lq=n(PR,"A",{href:!0});var C1t=s(Lq);i1o=r(C1t,"PegasusTokenizer"),C1t.forEach(t),d1o=r(PR," or "),yq=n(PR,"A",{href:!0});var w1t=s(yq);c1o=r(w1t,"PegasusTokenizerFast"),w1t.forEach(t),f1o=r(PR," (Pegasus model)"),PR.forEach(t),m1o=i(S),Oh=n(S,"LI",{});var Q$e=s(Oh);wce=n(Q$e,"STRONG",{});var A1t=s(wce);g1o=r(A1t,"perceiver"),A1t.forEach(t),h1o=r(Q$e," \u2014 "),xq=n(Q$e,"A",{href:!0});var L1t=s(xq);p1o=r(L1t,"PerceiverTokenizer"),L1t.forEach(t),_1o=r(Q$e," (Perceiver model)"),Q$e.forEach(t),u1o=i(S),Vh=n(S,"LI",{});var U$e=s(Vh);Ace=n(U$e,"STRONG",{});var y1t=s(Ace);b1o=r(y1t,"phobert"),y1t.forEach(t),v1o=r(U$e," \u2014 "),$q=n(U$e,"A",{href:!0});var x1t=s($q);F1o=r(x1t,"PhobertTokenizer"),x1t.forEach(t),T1o=r(U$e," (PhoBERT model)"),U$e.forEach(t),M1o=i(S),Xh=n(S,"LI",{});var H$e=s(Xh);Lce=n(H$e,"STRONG",{});var $1t=s(Lce);E1o=r($1t,"plbart"),$1t.forEach(t),C1o=r(H$e," \u2014 "),kq=n(H$e,"A",{href:!0});var k1t=s(kq);w1o=r(k1t,"PLBartTokenizer"),k1t.forEach(t),A1o=r(H$e," (PLBart model)"),H$e.forEach(t),L1o=i(S),zh=n(S,"LI",{});var J$e=s(zh);yce=n(J$e,"STRONG",{});var S1t=s(yce);y1o=r(S1t,"prophetnet"),S1t.forEach(t),x1o=r(J$e," \u2014 "),Sq=n(J$e,"A",{href:!0});var R1t=s(Sq);$1o=r(R1t,"ProphetNetTokenizer"),R1t.forEach(t),k1o=r(J$e," (ProphetNet model)"),J$e.forEach(t),S1o=i(S),Os=n(S,"LI",{});var BR=s(Os);xce=n(BR,"STRONG",{});var P1t=s(xce);R1o=r(P1t,"qdqbert"),P1t.forEach(t),P1o=r(BR," \u2014 "),Rq=n(BR,"A",{href:!0});var B1t=s(Rq);B1o=r(B1t,"BertTokenizer"),B1t.forEach(t),I1o=r(BR," or "),Pq=n(BR,"A",{href:!0});var I1t=s(Pq);N1o=r(I1t,"BertTokenizerFast"),I1t.forEach(t),q1o=r(BR," (QDQBert model)"),BR.forEach(t),j1o=i(S),Wh=n(S,"LI",{});var Y$e=s(Wh);$ce=n(Y$e,"STRONG",{});var N1t=s($ce);D1o=r(N1t,"rag"),N1t.forEach(t),G1o=r(Y$e," \u2014 "),Bq=n(Y$e,"A",{href:!0});var q1t=s(Bq);O1o=r(q1t,"RagTokenizer"),q1t.forEach(t),V1o=r(Y$e," (RAG model)"),Y$e.forEach(t),X1o=i(S),Vs=n(S,"LI",{});var IR=s(Vs);kce=n(IR,"STRONG",{});var j1t=s(kce);z1o=r(j1t,"realm"),j1t.forEach(t),W1o=r(IR," \u2014 "),Iq=n(IR,"A",{href:!0});var D1t=s(Iq);Q1o=r(D1t,"RealmTokenizer"),D1t.forEach(t),U1o=r(IR," or "),Nq=n(IR,"A",{href:!0});var G1t=s(Nq);H1o=r(G1t,"RealmTokenizerFast"),G1t.forEach(t),J1o=r(IR," (REALM model)"),IR.forEach(t),Y1o=i(S),Xs=n(S,"LI",{});var NR=s(Xs);Sce=n(NR,"STRONG",{});var O1t=s(Sce);K1o=r(O1t,"reformer"),O1t.forEach(t),Z1o=r(NR," \u2014 "),qq=n(NR,"A",{href:!0});var V1t=s(qq);e6o=r(V1t,"ReformerTokenizer"),V1t.forEach(t),o6o=r(NR," or "),jq=n(NR,"A",{href:!0});var X1t=s(jq);r6o=r(X1t,"ReformerTokenizerFast"),X1t.forEach(t),t6o=r(NR," (Reformer model)"),NR.forEach(t),a6o=i(S),zs=n(S,"LI",{});var qR=s(zs);Rce=n(qR,"STRONG",{});var z1t=s(Rce);n6o=r(z1t,"rembert"),z1t.forEach(t),s6o=r(qR," \u2014 "),Dq=n(qR,"A",{href:!0});var W1t=s(Dq);l6o=r(W1t,"RemBertTokenizer"),W1t.forEach(t),i6o=r(qR," or "),Gq=n(qR,"A",{href:!0});var Q1t=s(Gq);d6o=r(Q1t,"RemBertTokenizerFast"),Q1t.forEach(t),c6o=r(qR," (RemBERT model)"),qR.forEach(t),f6o=i(S),Ws=n(S,"LI",{});var jR=s(Ws);Pce=n(jR,"STRONG",{});var U1t=s(Pce);m6o=r(U1t,"retribert"),U1t.forEach(t),g6o=r(jR," \u2014 "),Oq=n(jR,"A",{href:!0});var H1t=s(Oq);h6o=r(H1t,"RetriBertTokenizer"),H1t.forEach(t),p6o=r(jR," or "),Vq=n(jR,"A",{href:!0});var J1t=s(Vq);_6o=r(J1t,"RetriBertTokenizerFast"),J1t.forEach(t),u6o=r(jR," (RetriBERT model)"),jR.forEach(t),b6o=i(S),Qs=n(S,"LI",{});var DR=s(Qs);Bce=n(DR,"STRONG",{});var Y1t=s(Bce);v6o=r(Y1t,"roberta"),Y1t.forEach(t),F6o=r(DR," \u2014 "),Xq=n(DR,"A",{href:!0});var K1t=s(Xq);T6o=r(K1t,"RobertaTokenizer"),K1t.forEach(t),M6o=r(DR," or "),zq=n(DR,"A",{href:!0});var Z1t=s(zq);E6o=r(Z1t,"RobertaTokenizerFast"),Z1t.forEach(t),C6o=r(DR," (RoBERTa model)"),DR.forEach(t),w6o=i(S),Us=n(S,"LI",{});var GR=s(Us);Ice=n(GR,"STRONG",{});var e6t=s(Ice);A6o=r(e6t,"roformer"),e6t.forEach(t),L6o=r(GR," \u2014 "),Wq=n(GR,"A",{href:!0});var o6t=s(Wq);y6o=r(o6t,"RoFormerTokenizer"),o6t.forEach(t),x6o=r(GR," or "),Qq=n(GR,"A",{href:!0});var r6t=s(Qq);$6o=r(r6t,"RoFormerTokenizerFast"),r6t.forEach(t),k6o=r(GR," (RoFormer model)"),GR.forEach(t),S6o=i(S),Qh=n(S,"LI",{});var K$e=s(Qh);Nce=n(K$e,"STRONG",{});var t6t=s(Nce);R6o=r(t6t,"speech_to_text"),t6t.forEach(t),P6o=r(K$e," \u2014 "),Uq=n(K$e,"A",{href:!0});var a6t=s(Uq);B6o=r(a6t,"Speech2TextTokenizer"),a6t.forEach(t),I6o=r(K$e," (Speech2Text model)"),K$e.forEach(t),N6o=i(S),Uh=n(S,"LI",{});var Z$e=s(Uh);qce=n(Z$e,"STRONG",{});var n6t=s(qce);q6o=r(n6t,"speech_to_text_2"),n6t.forEach(t),j6o=r(Z$e," \u2014 "),Hq=n(Z$e,"A",{href:!0});var s6t=s(Hq);D6o=r(s6t,"Speech2Text2Tokenizer"),s6t.forEach(t),G6o=r(Z$e," (Speech2Text2 model)"),Z$e.forEach(t),O6o=i(S),Hs=n(S,"LI",{});var OR=s(Hs);jce=n(OR,"STRONG",{});var l6t=s(jce);V6o=r(l6t,"splinter"),l6t.forEach(t),X6o=r(OR," \u2014 "),Jq=n(OR,"A",{href:!0});var i6t=s(Jq);z6o=r(i6t,"SplinterTokenizer"),i6t.forEach(t),W6o=r(OR," or "),Yq=n(OR,"A",{href:!0});var d6t=s(Yq);Q6o=r(d6t,"SplinterTokenizerFast"),d6t.forEach(t),U6o=r(OR," (Splinter model)"),OR.forEach(t),H6o=i(S),Js=n(S,"LI",{});var VR=s(Js);Dce=n(VR,"STRONG",{});var c6t=s(Dce);J6o=r(c6t,"squeezebert"),c6t.forEach(t),Y6o=r(VR," \u2014 "),Kq=n(VR,"A",{href:!0});var f6t=s(Kq);K6o=r(f6t,"SqueezeBertTokenizer"),f6t.forEach(t),Z6o=r(VR," or "),Zq=n(VR,"A",{href:!0});var m6t=s(Zq);e8o=r(m6t,"SqueezeBertTokenizerFast"),m6t.forEach(t),o8o=r(VR," (SqueezeBERT model)"),VR.forEach(t),r8o=i(S),Ys=n(S,"LI",{});var XR=s(Ys);Gce=n(XR,"STRONG",{});var g6t=s(Gce);t8o=r(g6t,"t5"),g6t.forEach(t),a8o=r(XR," \u2014 "),ej=n(XR,"A",{href:!0});var h6t=s(ej);n8o=r(h6t,"T5Tokenizer"),h6t.forEach(t),s8o=r(XR," or "),oj=n(XR,"A",{href:!0});var p6t=s(oj);l8o=r(p6t,"T5TokenizerFast"),p6t.forEach(t),i8o=r(XR," (T5 model)"),XR.forEach(t),d8o=i(S),Hh=n(S,"LI",{});var eke=s(Hh);Oce=n(eke,"STRONG",{});var _6t=s(Oce);c8o=r(_6t,"tapas"),_6t.forEach(t),f8o=r(eke," \u2014 "),rj=n(eke,"A",{href:!0});var u6t=s(rj);m8o=r(u6t,"TapasTokenizer"),u6t.forEach(t),g8o=r(eke," (TAPAS model)"),eke.forEach(t),h8o=i(S),Jh=n(S,"LI",{});var oke=s(Jh);Vce=n(oke,"STRONG",{});var b6t=s(Vce);p8o=r(b6t,"tapex"),b6t.forEach(t),_8o=r(oke," \u2014 "),tj=n(oke,"A",{href:!0});var v6t=s(tj);u8o=r(v6t,"TapexTokenizer"),v6t.forEach(t),b8o=r(oke," (TAPEX model)"),oke.forEach(t),v8o=i(S),Yh=n(S,"LI",{});var rke=s(Yh);Xce=n(rke,"STRONG",{});var F6t=s(Xce);F8o=r(F6t,"transfo-xl"),F6t.forEach(t),T8o=r(rke," \u2014 "),aj=n(rke,"A",{href:!0});var T6t=s(aj);M8o=r(T6t,"TransfoXLTokenizer"),T6t.forEach(t),E8o=r(rke," (Transformer-XL model)"),rke.forEach(t),C8o=i(S),Ks=n(S,"LI",{});var zR=s(Ks);zce=n(zR,"STRONG",{});var M6t=s(zce);w8o=r(M6t,"vilt"),M6t.forEach(t),A8o=r(zR," \u2014 "),nj=n(zR,"A",{href:!0});var E6t=s(nj);L8o=r(E6t,"BertTokenizer"),E6t.forEach(t),y8o=r(zR," or "),sj=n(zR,"A",{href:!0});var C6t=s(sj);x8o=r(C6t,"BertTokenizerFast"),C6t.forEach(t),$8o=r(zR," (ViLT model)"),zR.forEach(t),k8o=i(S),Zs=n(S,"LI",{});var WR=s(Zs);Wce=n(WR,"STRONG",{});var w6t=s(Wce);S8o=r(w6t,"visual_bert"),w6t.forEach(t),R8o=r(WR," \u2014 "),lj=n(WR,"A",{href:!0});var A6t=s(lj);P8o=r(A6t,"BertTokenizer"),A6t.forEach(t),B8o=r(WR," or "),ij=n(WR,"A",{href:!0});var L6t=s(ij);I8o=r(L6t,"BertTokenizerFast"),L6t.forEach(t),N8o=r(WR," (VisualBERT model)"),WR.forEach(t),q8o=i(S),Kh=n(S,"LI",{});var tke=s(Kh);Qce=n(tke,"STRONG",{});var y6t=s(Qce);j8o=r(y6t,"wav2vec2"),y6t.forEach(t),D8o=r(tke," \u2014 "),dj=n(tke,"A",{href:!0});var x6t=s(dj);G8o=r(x6t,"Wav2Vec2CTCTokenizer"),x6t.forEach(t),O8o=r(tke," (Wav2Vec2 model)"),tke.forEach(t),V8o=i(S),Zh=n(S,"LI",{});var ake=s(Zh);Uce=n(ake,"STRONG",{});var $6t=s(Uce);X8o=r($6t,"wav2vec2-conformer"),$6t.forEach(t),z8o=r(ake," \u2014 "),cj=n(ake,"A",{href:!0});var k6t=s(cj);W8o=r(k6t,"Wav2Vec2CTCTokenizer"),k6t.forEach(t),Q8o=r(ake," (Wav2Vec2-Conformer model)"),ake.forEach(t),U8o=i(S),ep=n(S,"LI",{});var nke=s(ep);Hce=n(nke,"STRONG",{});var S6t=s(Hce);H8o=r(S6t,"wav2vec2_phoneme"),S6t.forEach(t),J8o=r(nke," \u2014 "),fj=n(nke,"A",{href:!0});var R6t=s(fj);Y8o=r(R6t,"Wav2Vec2PhonemeCTCTokenizer"),R6t.forEach(t),K8o=r(nke," (Wav2Vec2Phoneme model)"),nke.forEach(t),Z8o=i(S),el=n(S,"LI",{});var QR=s(el);Jce=n(QR,"STRONG",{});var P6t=s(Jce);e2o=r(P6t,"xglm"),P6t.forEach(t),o2o=r(QR," \u2014 "),mj=n(QR,"A",{href:!0});var B6t=s(mj);r2o=r(B6t,"XGLMTokenizer"),B6t.forEach(t),t2o=r(QR," or "),gj=n(QR,"A",{href:!0});var I6t=s(gj);a2o=r(I6t,"XGLMTokenizerFast"),I6t.forEach(t),n2o=r(QR," (XGLM model)"),QR.forEach(t),s2o=i(S),op=n(S,"LI",{});var ske=s(op);Yce=n(ske,"STRONG",{});var N6t=s(Yce);l2o=r(N6t,"xlm"),N6t.forEach(t),i2o=r(ske," \u2014 "),hj=n(ske,"A",{href:!0});var q6t=s(hj);d2o=r(q6t,"XLMTokenizer"),q6t.forEach(t),c2o=r(ske," (XLM model)"),ske.forEach(t),f2o=i(S),rp=n(S,"LI",{});var lke=s(rp);Kce=n(lke,"STRONG",{});var j6t=s(Kce);m2o=r(j6t,"xlm-prophetnet"),j6t.forEach(t),g2o=r(lke," \u2014 "),pj=n(lke,"A",{href:!0});var D6t=s(pj);h2o=r(D6t,"XLMProphetNetTokenizer"),D6t.forEach(t),p2o=r(lke," (XLM-ProphetNet model)"),lke.forEach(t),_2o=i(S),ol=n(S,"LI",{});var UR=s(ol);Zce=n(UR,"STRONG",{});var G6t=s(Zce);u2o=r(G6t,"xlm-roberta"),G6t.forEach(t),b2o=r(UR," \u2014 "),_j=n(UR,"A",{href:!0});var O6t=s(_j);v2o=r(O6t,"XLMRobertaTokenizer"),O6t.forEach(t),F2o=r(UR," or "),uj=n(UR,"A",{href:!0});var V6t=s(uj);T2o=r(V6t,"XLMRobertaTokenizerFast"),V6t.forEach(t),M2o=r(UR," (XLM-RoBERTa model)"),UR.forEach(t),E2o=i(S),rl=n(S,"LI",{});var HR=s(rl);efe=n(HR,"STRONG",{});var X6t=s(efe);C2o=r(X6t,"xlm-roberta-xl"),X6t.forEach(t),w2o=r(HR," \u2014 "),bj=n(HR,"A",{href:!0});var z6t=s(bj);A2o=r(z6t,"RobertaTokenizer"),z6t.forEach(t),L2o=r(HR," or "),vj=n(HR,"A",{href:!0});var W6t=s(vj);y2o=r(W6t,"RobertaTokenizerFast"),W6t.forEach(t),x2o=r(HR," (XLM-RoBERTa-XL model)"),HR.forEach(t),$2o=i(S),tl=n(S,"LI",{});var JR=s(tl);ofe=n(JR,"STRONG",{});var Q6t=s(ofe);k2o=r(Q6t,"xlnet"),Q6t.forEach(t),S2o=r(JR," \u2014 "),Fj=n(JR,"A",{href:!0});var U6t=s(Fj);R2o=r(U6t,"XLNetTokenizer"),U6t.forEach(t),P2o=r(JR," or "),Tj=n(JR,"A",{href:!0});var H6t=s(Tj);B2o=r(H6t,"XLNetTokenizerFast"),H6t.forEach(t),I2o=r(JR," (XLNet model)"),JR.forEach(t),N2o=i(S),al=n(S,"LI",{});var YR=s(al);rfe=n(YR,"STRONG",{});var J6t=s(rfe);q2o=r(J6t,"yoso"),J6t.forEach(t),j2o=r(YR," \u2014 "),Mj=n(YR,"A",{href:!0});var Y6t=s(Mj);D2o=r(Y6t,"AlbertTokenizer"),Y6t.forEach(t),G2o=r(YR," or "),Ej=n(YR,"A",{href:!0});var K6t=s(Ej);O2o=r(K6t,"AlbertTokenizerFast"),K6t.forEach(t),V2o=r(YR," (YOSO model)"),YR.forEach(t),S.forEach(t),X2o=i(fl),T(tp.$$.fragment,fl),fl.forEach(t),z2o=i(cl),ap=n(cl,"DIV",{class:!0});var eJe=s(ap);T(Ay.$$.fragment,eJe),W2o=i(eJe),tfe=n(eJe,"P",{});var Z6t=s(tfe);Q2o=r(Z6t,"Register a new tokenizer in this mapping."),Z6t.forEach(t),eJe.forEach(t),cl.forEach(t),HQe=i(f),Zi=n(f,"H2",{class:!0});var oJe=s(Zi);np=n(oJe,"A",{id:!0,class:!0,href:!0});var e8t=s(np);afe=n(e8t,"SPAN",{});var o8t=s(afe);T(Ly.$$.fragment,o8t),o8t.forEach(t),e8t.forEach(t),U2o=i(oJe),nfe=n(oJe,"SPAN",{});var r8t=s(nfe);H2o=r(r8t,"AutoFeatureExtractor"),r8t.forEach(t),oJe.forEach(t),JQe=i(f),$o=n(f,"DIV",{class:!0});var ml=s($o);T(yy.$$.fragment,ml),J2o=i(ml),xy=n(ml,"P",{});var rJe=s(xy);Y2o=r(rJe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Cj=n(rJe,"A",{href:!0});var t8t=s(Cj);K2o=r(t8t,"AutoFeatureExtractor.from_pretrained()"),t8t.forEach(t),Z2o=r(rJe," class method."),rJe.forEach(t),ebo=i(ml),$y=n(ml,"P",{});var tJe=s($y);obo=r(tJe,"This class cannot be instantiated directly using "),sfe=n(tJe,"CODE",{});var a8t=s(sfe);rbo=r(a8t,"__init__()"),a8t.forEach(t),tbo=r(tJe," (throws an error)."),tJe.forEach(t),abo=i(ml),He=n(ml,"DIV",{class:!0});var fa=s(He);T(ky.$$.fragment,fa),nbo=i(fa),lfe=n(fa,"P",{});var n8t=s(lfe);sbo=r(n8t,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),n8t.forEach(t),lbo=i(fa),Oa=n(fa,"P",{});var f7=s(Oa);ibo=r(f7,"The feature extractor class to instantiate is selected based on the "),ife=n(f7,"CODE",{});var s8t=s(ife);dbo=r(s8t,"model_type"),s8t.forEach(t),cbo=r(f7,` property of the config object
(either passed as an argument or loaded from `),dfe=n(f7,"CODE",{});var l8t=s(dfe);fbo=r(l8t,"pretrained_model_name_or_path"),l8t.forEach(t),mbo=r(f7,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),cfe=n(f7,"CODE",{});var i8t=s(cfe);gbo=r(i8t,"pretrained_model_name_or_path"),i8t.forEach(t),hbo=r(f7,":"),f7.forEach(t),pbo=i(fa),Q=n(fa,"UL",{});var J=s(Q);sp=n(J,"LI",{});var ike=s(sp);ffe=n(ike,"STRONG",{});var d8t=s(ffe);_bo=r(d8t,"beit"),d8t.forEach(t),ubo=r(ike," \u2014 "),wj=n(ike,"A",{href:!0});var c8t=s(wj);bbo=r(c8t,"BeitFeatureExtractor"),c8t.forEach(t),vbo=r(ike," (BEiT model)"),ike.forEach(t),Fbo=i(J),lp=n(J,"LI",{});var dke=s(lp);mfe=n(dke,"STRONG",{});var f8t=s(mfe);Tbo=r(f8t,"clip"),f8t.forEach(t),Mbo=r(dke," \u2014 "),Aj=n(dke,"A",{href:!0});var m8t=s(Aj);Ebo=r(m8t,"CLIPFeatureExtractor"),m8t.forEach(t),Cbo=r(dke," (CLIP model)"),dke.forEach(t),wbo=i(J),ip=n(J,"LI",{});var cke=s(ip);gfe=n(cke,"STRONG",{});var g8t=s(gfe);Abo=r(g8t,"convnext"),g8t.forEach(t),Lbo=r(cke," \u2014 "),Lj=n(cke,"A",{href:!0});var h8t=s(Lj);ybo=r(h8t,"ConvNextFeatureExtractor"),h8t.forEach(t),xbo=r(cke," (ConvNeXT model)"),cke.forEach(t),$bo=i(J),dp=n(J,"LI",{});var fke=s(dp);hfe=n(fke,"STRONG",{});var p8t=s(hfe);kbo=r(p8t,"cvt"),p8t.forEach(t),Sbo=r(fke," \u2014 "),yj=n(fke,"A",{href:!0});var _8t=s(yj);Rbo=r(_8t,"ConvNextFeatureExtractor"),_8t.forEach(t),Pbo=r(fke," (CvT model)"),fke.forEach(t),Bbo=i(J),cp=n(J,"LI",{});var mke=s(cp);pfe=n(mke,"STRONG",{});var u8t=s(pfe);Ibo=r(u8t,"data2vec-audio"),u8t.forEach(t),Nbo=r(mke," \u2014 "),xj=n(mke,"A",{href:!0});var b8t=s(xj);qbo=r(b8t,"Wav2Vec2FeatureExtractor"),b8t.forEach(t),jbo=r(mke," (Data2VecAudio model)"),mke.forEach(t),Dbo=i(J),fp=n(J,"LI",{});var gke=s(fp);_fe=n(gke,"STRONG",{});var v8t=s(_fe);Gbo=r(v8t,"data2vec-vision"),v8t.forEach(t),Obo=r(gke," \u2014 "),$j=n(gke,"A",{href:!0});var F8t=s($j);Vbo=r(F8t,"BeitFeatureExtractor"),F8t.forEach(t),Xbo=r(gke," (Data2VecVision model)"),gke.forEach(t),zbo=i(J),mp=n(J,"LI",{});var hke=s(mp);ufe=n(hke,"STRONG",{});var T8t=s(ufe);Wbo=r(T8t,"deit"),T8t.forEach(t),Qbo=r(hke," \u2014 "),kj=n(hke,"A",{href:!0});var M8t=s(kj);Ubo=r(M8t,"DeiTFeatureExtractor"),M8t.forEach(t),Hbo=r(hke," (DeiT model)"),hke.forEach(t),Jbo=i(J),gp=n(J,"LI",{});var pke=s(gp);bfe=n(pke,"STRONG",{});var E8t=s(bfe);Ybo=r(E8t,"detr"),E8t.forEach(t),Kbo=r(pke," \u2014 "),Sj=n(pke,"A",{href:!0});var C8t=s(Sj);Zbo=r(C8t,"DetrFeatureExtractor"),C8t.forEach(t),evo=r(pke," (DETR model)"),pke.forEach(t),ovo=i(J),hp=n(J,"LI",{});var _ke=s(hp);vfe=n(_ke,"STRONG",{});var w8t=s(vfe);rvo=r(w8t,"donut"),w8t.forEach(t),tvo=r(_ke," \u2014 "),Rj=n(_ke,"A",{href:!0});var A8t=s(Rj);avo=r(A8t,"DonutFeatureExtractor"),A8t.forEach(t),nvo=r(_ke," (Donut model)"),_ke.forEach(t),svo=i(J),pp=n(J,"LI",{});var uke=s(pp);Ffe=n(uke,"STRONG",{});var L8t=s(Ffe);lvo=r(L8t,"dpt"),L8t.forEach(t),ivo=r(uke," \u2014 "),Pj=n(uke,"A",{href:!0});var y8t=s(Pj);dvo=r(y8t,"DPTFeatureExtractor"),y8t.forEach(t),cvo=r(uke," (DPT model)"),uke.forEach(t),fvo=i(J),_p=n(J,"LI",{});var bke=s(_p);Tfe=n(bke,"STRONG",{});var x8t=s(Tfe);mvo=r(x8t,"flava"),x8t.forEach(t),gvo=r(bke," \u2014 "),Bj=n(bke,"A",{href:!0});var $8t=s(Bj);hvo=r($8t,"FlavaFeatureExtractor"),$8t.forEach(t),pvo=r(bke," (FLAVA model)"),bke.forEach(t),_vo=i(J),up=n(J,"LI",{});var vke=s(up);Mfe=n(vke,"STRONG",{});var k8t=s(Mfe);uvo=r(k8t,"glpn"),k8t.forEach(t),bvo=r(vke," \u2014 "),Ij=n(vke,"A",{href:!0});var S8t=s(Ij);vvo=r(S8t,"GLPNFeatureExtractor"),S8t.forEach(t),Fvo=r(vke," (GLPN model)"),vke.forEach(t),Tvo=i(J),bp=n(J,"LI",{});var Fke=s(bp);Efe=n(Fke,"STRONG",{});var R8t=s(Efe);Mvo=r(R8t,"groupvit"),R8t.forEach(t),Evo=r(Fke," \u2014 "),Nj=n(Fke,"A",{href:!0});var P8t=s(Nj);Cvo=r(P8t,"CLIPFeatureExtractor"),P8t.forEach(t),wvo=r(Fke," (GroupViT model)"),Fke.forEach(t),Avo=i(J),vp=n(J,"LI",{});var Tke=s(vp);Cfe=n(Tke,"STRONG",{});var B8t=s(Cfe);Lvo=r(B8t,"hubert"),B8t.forEach(t),yvo=r(Tke," \u2014 "),qj=n(Tke,"A",{href:!0});var I8t=s(qj);xvo=r(I8t,"Wav2Vec2FeatureExtractor"),I8t.forEach(t),$vo=r(Tke," (Hubert model)"),Tke.forEach(t),kvo=i(J),Fp=n(J,"LI",{});var Mke=s(Fp);wfe=n(Mke,"STRONG",{});var N8t=s(wfe);Svo=r(N8t,"imagegpt"),N8t.forEach(t),Rvo=r(Mke," \u2014 "),jj=n(Mke,"A",{href:!0});var q8t=s(jj);Pvo=r(q8t,"ImageGPTFeatureExtractor"),q8t.forEach(t),Bvo=r(Mke," (ImageGPT model)"),Mke.forEach(t),Ivo=i(J),Tp=n(J,"LI",{});var Eke=s(Tp);Afe=n(Eke,"STRONG",{});var j8t=s(Afe);Nvo=r(j8t,"layoutlmv2"),j8t.forEach(t),qvo=r(Eke," \u2014 "),Dj=n(Eke,"A",{href:!0});var D8t=s(Dj);jvo=r(D8t,"LayoutLMv2FeatureExtractor"),D8t.forEach(t),Dvo=r(Eke," (LayoutLMv2 model)"),Eke.forEach(t),Gvo=i(J),Mp=n(J,"LI",{});var Cke=s(Mp);Lfe=n(Cke,"STRONG",{});var G8t=s(Lfe);Ovo=r(G8t,"layoutlmv3"),G8t.forEach(t),Vvo=r(Cke," \u2014 "),Gj=n(Cke,"A",{href:!0});var O8t=s(Gj);Xvo=r(O8t,"LayoutLMv3FeatureExtractor"),O8t.forEach(t),zvo=r(Cke," (LayoutLMv3 model)"),Cke.forEach(t),Wvo=i(J),Ep=n(J,"LI",{});var wke=s(Ep);yfe=n(wke,"STRONG",{});var V8t=s(yfe);Qvo=r(V8t,"levit"),V8t.forEach(t),Uvo=r(wke," \u2014 "),Oj=n(wke,"A",{href:!0});var X8t=s(Oj);Hvo=r(X8t,"LevitFeatureExtractor"),X8t.forEach(t),Jvo=r(wke," (LeViT model)"),wke.forEach(t),Yvo=i(J),Cp=n(J,"LI",{});var Ake=s(Cp);xfe=n(Ake,"STRONG",{});var z8t=s(xfe);Kvo=r(z8t,"maskformer"),z8t.forEach(t),Zvo=r(Ake," \u2014 "),Vj=n(Ake,"A",{href:!0});var W8t=s(Vj);eFo=r(W8t,"MaskFormerFeatureExtractor"),W8t.forEach(t),oFo=r(Ake," (MaskFormer model)"),Ake.forEach(t),rFo=i(J),wp=n(J,"LI",{});var Lke=s(wp);$fe=n(Lke,"STRONG",{});var Q8t=s($fe);tFo=r(Q8t,"mctct"),Q8t.forEach(t),aFo=r(Lke," \u2014 "),Xj=n(Lke,"A",{href:!0});var U8t=s(Xj);nFo=r(U8t,"MCTCTFeatureExtractor"),U8t.forEach(t),sFo=r(Lke," (M-CTC-T model)"),Lke.forEach(t),lFo=i(J),Ap=n(J,"LI",{});var yke=s(Ap);kfe=n(yke,"STRONG",{});var H8t=s(kfe);iFo=r(H8t,"mobilevit"),H8t.forEach(t),dFo=r(yke," \u2014 "),zj=n(yke,"A",{href:!0});var J8t=s(zj);cFo=r(J8t,"MobileViTFeatureExtractor"),J8t.forEach(t),fFo=r(yke," (MobileViT model)"),yke.forEach(t),mFo=i(J),Lp=n(J,"LI",{});var xke=s(Lp);Sfe=n(xke,"STRONG",{});var Y8t=s(Sfe);gFo=r(Y8t,"owlvit"),Y8t.forEach(t),hFo=r(xke," \u2014 "),Wj=n(xke,"A",{href:!0});var K8t=s(Wj);pFo=r(K8t,"OwlViTFeatureExtractor"),K8t.forEach(t),_Fo=r(xke," (OWL-ViT model)"),xke.forEach(t),uFo=i(J),yp=n(J,"LI",{});var $ke=s(yp);Rfe=n($ke,"STRONG",{});var Z8t=s(Rfe);bFo=r(Z8t,"perceiver"),Z8t.forEach(t),vFo=r($ke," \u2014 "),Qj=n($ke,"A",{href:!0});var e2t=s(Qj);FFo=r(e2t,"PerceiverFeatureExtractor"),e2t.forEach(t),TFo=r($ke," (Perceiver model)"),$ke.forEach(t),MFo=i(J),xp=n(J,"LI",{});var kke=s(xp);Pfe=n(kke,"STRONG",{});var o2t=s(Pfe);EFo=r(o2t,"poolformer"),o2t.forEach(t),CFo=r(kke," \u2014 "),Uj=n(kke,"A",{href:!0});var r2t=s(Uj);wFo=r(r2t,"PoolFormerFeatureExtractor"),r2t.forEach(t),AFo=r(kke," (PoolFormer model)"),kke.forEach(t),LFo=i(J),$p=n(J,"LI",{});var Ske=s($p);Bfe=n(Ske,"STRONG",{});var t2t=s(Bfe);yFo=r(t2t,"regnet"),t2t.forEach(t),xFo=r(Ske," \u2014 "),Hj=n(Ske,"A",{href:!0});var a2t=s(Hj);$Fo=r(a2t,"ConvNextFeatureExtractor"),a2t.forEach(t),kFo=r(Ske," (RegNet model)"),Ske.forEach(t),SFo=i(J),kp=n(J,"LI",{});var Rke=s(kp);Ife=n(Rke,"STRONG",{});var n2t=s(Ife);RFo=r(n2t,"resnet"),n2t.forEach(t),PFo=r(Rke," \u2014 "),Jj=n(Rke,"A",{href:!0});var s2t=s(Jj);BFo=r(s2t,"ConvNextFeatureExtractor"),s2t.forEach(t),IFo=r(Rke," (ResNet model)"),Rke.forEach(t),NFo=i(J),Sp=n(J,"LI",{});var Pke=s(Sp);Nfe=n(Pke,"STRONG",{});var l2t=s(Nfe);qFo=r(l2t,"segformer"),l2t.forEach(t),jFo=r(Pke," \u2014 "),Yj=n(Pke,"A",{href:!0});var i2t=s(Yj);DFo=r(i2t,"SegformerFeatureExtractor"),i2t.forEach(t),GFo=r(Pke," (SegFormer model)"),Pke.forEach(t),OFo=i(J),Rp=n(J,"LI",{});var Bke=s(Rp);qfe=n(Bke,"STRONG",{});var d2t=s(qfe);VFo=r(d2t,"speech_to_text"),d2t.forEach(t),XFo=r(Bke," \u2014 "),Kj=n(Bke,"A",{href:!0});var c2t=s(Kj);zFo=r(c2t,"Speech2TextFeatureExtractor"),c2t.forEach(t),WFo=r(Bke," (Speech2Text model)"),Bke.forEach(t),QFo=i(J),Pp=n(J,"LI",{});var Ike=s(Pp);jfe=n(Ike,"STRONG",{});var f2t=s(jfe);UFo=r(f2t,"swin"),f2t.forEach(t),HFo=r(Ike," \u2014 "),Zj=n(Ike,"A",{href:!0});var m2t=s(Zj);JFo=r(m2t,"ViTFeatureExtractor"),m2t.forEach(t),YFo=r(Ike," (Swin Transformer model)"),Ike.forEach(t),KFo=i(J),Bp=n(J,"LI",{});var Nke=s(Bp);Dfe=n(Nke,"STRONG",{});var g2t=s(Dfe);ZFo=r(g2t,"swinv2"),g2t.forEach(t),eTo=r(Nke," \u2014 "),eD=n(Nke,"A",{href:!0});var h2t=s(eD);oTo=r(h2t,"ViTFeatureExtractor"),h2t.forEach(t),rTo=r(Nke," (Swin Transformer V2 model)"),Nke.forEach(t),tTo=i(J),Ip=n(J,"LI",{});var qke=s(Ip);Gfe=n(qke,"STRONG",{});var p2t=s(Gfe);aTo=r(p2t,"van"),p2t.forEach(t),nTo=r(qke," \u2014 "),oD=n(qke,"A",{href:!0});var _2t=s(oD);sTo=r(_2t,"ConvNextFeatureExtractor"),_2t.forEach(t),lTo=r(qke," (VAN model)"),qke.forEach(t),iTo=i(J),Np=n(J,"LI",{});var jke=s(Np);Ofe=n(jke,"STRONG",{});var u2t=s(Ofe);dTo=r(u2t,"videomae"),u2t.forEach(t),cTo=r(jke," \u2014 "),rD=n(jke,"A",{href:!0});var b2t=s(rD);fTo=r(b2t,"ViTFeatureExtractor"),b2t.forEach(t),mTo=r(jke," (VideoMAE model)"),jke.forEach(t),gTo=i(J),qp=n(J,"LI",{});var Dke=s(qp);Vfe=n(Dke,"STRONG",{});var v2t=s(Vfe);hTo=r(v2t,"vilt"),v2t.forEach(t),pTo=r(Dke," \u2014 "),tD=n(Dke,"A",{href:!0});var F2t=s(tD);_To=r(F2t,"ViltFeatureExtractor"),F2t.forEach(t),uTo=r(Dke," (ViLT model)"),Dke.forEach(t),bTo=i(J),jp=n(J,"LI",{});var Gke=s(jp);Xfe=n(Gke,"STRONG",{});var T2t=s(Xfe);vTo=r(T2t,"vit"),T2t.forEach(t),FTo=r(Gke," \u2014 "),aD=n(Gke,"A",{href:!0});var M2t=s(aD);TTo=r(M2t,"ViTFeatureExtractor"),M2t.forEach(t),MTo=r(Gke," (ViT model)"),Gke.forEach(t),ETo=i(J),Dp=n(J,"LI",{});var Oke=s(Dp);zfe=n(Oke,"STRONG",{});var E2t=s(zfe);CTo=r(E2t,"vit_mae"),E2t.forEach(t),wTo=r(Oke," \u2014 "),nD=n(Oke,"A",{href:!0});var C2t=s(nD);ATo=r(C2t,"ViTFeatureExtractor"),C2t.forEach(t),LTo=r(Oke," (ViTMAE model)"),Oke.forEach(t),yTo=i(J),Gp=n(J,"LI",{});var Vke=s(Gp);Wfe=n(Vke,"STRONG",{});var w2t=s(Wfe);xTo=r(w2t,"wav2vec2"),w2t.forEach(t),$To=r(Vke," \u2014 "),sD=n(Vke,"A",{href:!0});var A2t=s(sD);kTo=r(A2t,"Wav2Vec2FeatureExtractor"),A2t.forEach(t),STo=r(Vke," (Wav2Vec2 model)"),Vke.forEach(t),RTo=i(J),Op=n(J,"LI",{});var Xke=s(Op);Qfe=n(Xke,"STRONG",{});var L2t=s(Qfe);PTo=r(L2t,"wav2vec2-conformer"),L2t.forEach(t),BTo=r(Xke," \u2014 "),lD=n(Xke,"A",{href:!0});var y2t=s(lD);ITo=r(y2t,"Wav2Vec2FeatureExtractor"),y2t.forEach(t),NTo=r(Xke," (Wav2Vec2-Conformer model)"),Xke.forEach(t),qTo=i(J),Vp=n(J,"LI",{});var zke=s(Vp);Ufe=n(zke,"STRONG",{});var x2t=s(Ufe);jTo=r(x2t,"yolos"),x2t.forEach(t),DTo=r(zke," \u2014 "),iD=n(zke,"A",{href:!0});var $2t=s(iD);GTo=r($2t,"YolosFeatureExtractor"),$2t.forEach(t),OTo=r(zke," (YOLOS model)"),zke.forEach(t),J.forEach(t),VTo=i(fa),T(Xp.$$.fragment,fa),XTo=i(fa),T(zp.$$.fragment,fa),fa.forEach(t),zTo=i(ml),Wp=n(ml,"DIV",{class:!0});var aJe=s(Wp);T(Sy.$$.fragment,aJe),WTo=i(aJe),Hfe=n(aJe,"P",{});var k2t=s(Hfe);QTo=r(k2t,"Register a new feature extractor for this class."),k2t.forEach(t),aJe.forEach(t),ml.forEach(t),YQe=i(f),ed=n(f,"H2",{class:!0});var nJe=s(ed);Qp=n(nJe,"A",{id:!0,class:!0,href:!0});var S2t=s(Qp);Jfe=n(S2t,"SPAN",{});var R2t=s(Jfe);T(Ry.$$.fragment,R2t),R2t.forEach(t),S2t.forEach(t),UTo=i(nJe),Yfe=n(nJe,"SPAN",{});var P2t=s(Yfe);HTo=r(P2t,"AutoProcessor"),P2t.forEach(t),nJe.forEach(t),KQe=i(f),ko=n(f,"DIV",{class:!0});var gl=s(ko);T(Py.$$.fragment,gl),JTo=i(gl),By=n(gl,"P",{});var sJe=s(By);YTo=r(sJe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dD=n(sJe,"A",{href:!0});var B2t=s(dD);KTo=r(B2t,"AutoProcessor.from_pretrained()"),B2t.forEach(t),ZTo=r(sJe," class method."),sJe.forEach(t),eMo=i(gl),Iy=n(gl,"P",{});var lJe=s(Iy);oMo=r(lJe,"This class cannot be instantiated directly using "),Kfe=n(lJe,"CODE",{});var I2t=s(Kfe);rMo=r(I2t,"__init__()"),I2t.forEach(t),tMo=r(lJe," (throws an error)."),lJe.forEach(t),aMo=i(gl),Je=n(gl,"DIV",{class:!0});var ma=s(Je);T(Ny.$$.fragment,ma),nMo=i(ma),Zfe=n(ma,"P",{});var N2t=s(Zfe);sMo=r(N2t,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),N2t.forEach(t),lMo=i(ma),od=n(ma,"P",{});var jae=s(od);iMo=r(jae,"The processor class to instantiate is selected based on the "),eme=n(jae,"CODE",{});var q2t=s(eme);dMo=r(q2t,"model_type"),q2t.forEach(t),cMo=r(jae,` property of the config object (either
passed as an argument or loaded from `),ome=n(jae,"CODE",{});var j2t=s(ome);fMo=r(j2t,"pretrained_model_name_or_path"),j2t.forEach(t),mMo=r(jae," if possible):"),jae.forEach(t),gMo=i(ma),ie=n(ma,"UL",{});var ge=s(ie);Up=n(ge,"LI",{});var Wke=s(Up);rme=n(Wke,"STRONG",{});var D2t=s(rme);hMo=r(D2t,"clip"),D2t.forEach(t),pMo=r(Wke," \u2014 "),cD=n(Wke,"A",{href:!0});var G2t=s(cD);_Mo=r(G2t,"CLIPProcessor"),G2t.forEach(t),uMo=r(Wke," (CLIP model)"),Wke.forEach(t),bMo=i(ge),Hp=n(ge,"LI",{});var Qke=s(Hp);tme=n(Qke,"STRONG",{});var O2t=s(tme);vMo=r(O2t,"donut"),O2t.forEach(t),FMo=r(Qke," \u2014 "),fD=n(Qke,"A",{href:!0});var V2t=s(fD);TMo=r(V2t,"DonutProcessor"),V2t.forEach(t),MMo=r(Qke," (Donut model)"),Qke.forEach(t),EMo=i(ge),Jp=n(ge,"LI",{});var Uke=s(Jp);ame=n(Uke,"STRONG",{});var X2t=s(ame);CMo=r(X2t,"flava"),X2t.forEach(t),wMo=r(Uke," \u2014 "),mD=n(Uke,"A",{href:!0});var z2t=s(mD);AMo=r(z2t,"FlavaProcessor"),z2t.forEach(t),LMo=r(Uke," (FLAVA model)"),Uke.forEach(t),yMo=i(ge),Yp=n(ge,"LI",{});var Hke=s(Yp);nme=n(Hke,"STRONG",{});var W2t=s(nme);xMo=r(W2t,"groupvit"),W2t.forEach(t),$Mo=r(Hke," \u2014 "),gD=n(Hke,"A",{href:!0});var Q2t=s(gD);kMo=r(Q2t,"CLIPProcessor"),Q2t.forEach(t),SMo=r(Hke," (GroupViT model)"),Hke.forEach(t),RMo=i(ge),Kp=n(ge,"LI",{});var Jke=s(Kp);sme=n(Jke,"STRONG",{});var U2t=s(sme);PMo=r(U2t,"layoutlmv2"),U2t.forEach(t),BMo=r(Jke," \u2014 "),hD=n(Jke,"A",{href:!0});var H2t=s(hD);IMo=r(H2t,"LayoutLMv2Processor"),H2t.forEach(t),NMo=r(Jke," (LayoutLMv2 model)"),Jke.forEach(t),qMo=i(ge),Zp=n(ge,"LI",{});var Yke=s(Zp);lme=n(Yke,"STRONG",{});var J2t=s(lme);jMo=r(J2t,"layoutlmv3"),J2t.forEach(t),DMo=r(Yke," \u2014 "),pD=n(Yke,"A",{href:!0});var Y2t=s(pD);GMo=r(Y2t,"LayoutLMv3Processor"),Y2t.forEach(t),OMo=r(Yke," (LayoutLMv3 model)"),Yke.forEach(t),VMo=i(ge),e_=n(ge,"LI",{});var Kke=s(e_);ime=n(Kke,"STRONG",{});var K2t=s(ime);XMo=r(K2t,"layoutxlm"),K2t.forEach(t),zMo=r(Kke," \u2014 "),_D=n(Kke,"A",{href:!0});var Z2t=s(_D);WMo=r(Z2t,"LayoutXLMProcessor"),Z2t.forEach(t),QMo=r(Kke," (LayoutXLM model)"),Kke.forEach(t),UMo=i(ge),o_=n(ge,"LI",{});var Zke=s(o_);dme=n(Zke,"STRONG",{});var ebt=s(dme);HMo=r(ebt,"owlvit"),ebt.forEach(t),JMo=r(Zke," \u2014 "),uD=n(Zke,"A",{href:!0});var obt=s(uD);YMo=r(obt,"OwlViTProcessor"),obt.forEach(t),KMo=r(Zke," (OWL-ViT model)"),Zke.forEach(t),ZMo=i(ge),r_=n(ge,"LI",{});var eSe=s(r_);cme=n(eSe,"STRONG",{});var rbt=s(cme);eEo=r(rbt,"sew"),rbt.forEach(t),oEo=r(eSe," \u2014 "),bD=n(eSe,"A",{href:!0});var tbt=s(bD);rEo=r(tbt,"Wav2Vec2Processor"),tbt.forEach(t),tEo=r(eSe," (SEW model)"),eSe.forEach(t),aEo=i(ge),t_=n(ge,"LI",{});var oSe=s(t_);fme=n(oSe,"STRONG",{});var abt=s(fme);nEo=r(abt,"sew-d"),abt.forEach(t),sEo=r(oSe," \u2014 "),vD=n(oSe,"A",{href:!0});var nbt=s(vD);lEo=r(nbt,"Wav2Vec2Processor"),nbt.forEach(t),iEo=r(oSe," (SEW-D model)"),oSe.forEach(t),dEo=i(ge),a_=n(ge,"LI",{});var rSe=s(a_);mme=n(rSe,"STRONG",{});var sbt=s(mme);cEo=r(sbt,"speech_to_text"),sbt.forEach(t),fEo=r(rSe," \u2014 "),FD=n(rSe,"A",{href:!0});var lbt=s(FD);mEo=r(lbt,"Speech2TextProcessor"),lbt.forEach(t),gEo=r(rSe," (Speech2Text model)"),rSe.forEach(t),hEo=i(ge),n_=n(ge,"LI",{});var tSe=s(n_);gme=n(tSe,"STRONG",{});var ibt=s(gme);pEo=r(ibt,"speech_to_text_2"),ibt.forEach(t),_Eo=r(tSe," \u2014 "),TD=n(tSe,"A",{href:!0});var dbt=s(TD);uEo=r(dbt,"Speech2Text2Processor"),dbt.forEach(t),bEo=r(tSe," (Speech2Text2 model)"),tSe.forEach(t),vEo=i(ge),s_=n(ge,"LI",{});var aSe=s(s_);hme=n(aSe,"STRONG",{});var cbt=s(hme);FEo=r(cbt,"trocr"),cbt.forEach(t),TEo=r(aSe," \u2014 "),MD=n(aSe,"A",{href:!0});var fbt=s(MD);MEo=r(fbt,"TrOCRProcessor"),fbt.forEach(t),EEo=r(aSe," (TrOCR model)"),aSe.forEach(t),CEo=i(ge),l_=n(ge,"LI",{});var nSe=s(l_);pme=n(nSe,"STRONG",{});var mbt=s(pme);wEo=r(mbt,"unispeech"),mbt.forEach(t),AEo=r(nSe," \u2014 "),ED=n(nSe,"A",{href:!0});var gbt=s(ED);LEo=r(gbt,"Wav2Vec2Processor"),gbt.forEach(t),yEo=r(nSe," (UniSpeech model)"),nSe.forEach(t),xEo=i(ge),i_=n(ge,"LI",{});var sSe=s(i_);_me=n(sSe,"STRONG",{});var hbt=s(_me);$Eo=r(hbt,"unispeech-sat"),hbt.forEach(t),kEo=r(sSe," \u2014 "),CD=n(sSe,"A",{href:!0});var pbt=s(CD);SEo=r(pbt,"Wav2Vec2Processor"),pbt.forEach(t),REo=r(sSe," (UniSpeechSat model)"),sSe.forEach(t),PEo=i(ge),d_=n(ge,"LI",{});var lSe=s(d_);ume=n(lSe,"STRONG",{});var _bt=s(ume);BEo=r(_bt,"vilt"),_bt.forEach(t),IEo=r(lSe," \u2014 "),wD=n(lSe,"A",{href:!0});var ubt=s(wD);NEo=r(ubt,"ViltProcessor"),ubt.forEach(t),qEo=r(lSe," (ViLT model)"),lSe.forEach(t),jEo=i(ge),c_=n(ge,"LI",{});var iSe=s(c_);bme=n(iSe,"STRONG",{});var bbt=s(bme);DEo=r(bbt,"vision-text-dual-encoder"),bbt.forEach(t),GEo=r(iSe," \u2014 "),AD=n(iSe,"A",{href:!0});var vbt=s(AD);OEo=r(vbt,"VisionTextDualEncoderProcessor"),vbt.forEach(t),VEo=r(iSe," (VisionTextDualEncoder model)"),iSe.forEach(t),XEo=i(ge),f_=n(ge,"LI",{});var dSe=s(f_);vme=n(dSe,"STRONG",{});var Fbt=s(vme);zEo=r(Fbt,"wav2vec2"),Fbt.forEach(t),WEo=r(dSe," \u2014 "),LD=n(dSe,"A",{href:!0});var Tbt=s(LD);QEo=r(Tbt,"Wav2Vec2Processor"),Tbt.forEach(t),UEo=r(dSe," (Wav2Vec2 model)"),dSe.forEach(t),HEo=i(ge),m_=n(ge,"LI",{});var cSe=s(m_);Fme=n(cSe,"STRONG",{});var Mbt=s(Fme);JEo=r(Mbt,"wav2vec2-conformer"),Mbt.forEach(t),YEo=r(cSe," \u2014 "),yD=n(cSe,"A",{href:!0});var Ebt=s(yD);KEo=r(Ebt,"Wav2Vec2Processor"),Ebt.forEach(t),ZEo=r(cSe," (Wav2Vec2-Conformer model)"),cSe.forEach(t),e4o=i(ge),g_=n(ge,"LI",{});var fSe=s(g_);Tme=n(fSe,"STRONG",{});var Cbt=s(Tme);o4o=r(Cbt,"wavlm"),Cbt.forEach(t),r4o=r(fSe," \u2014 "),xD=n(fSe,"A",{href:!0});var wbt=s(xD);t4o=r(wbt,"Wav2Vec2Processor"),wbt.forEach(t),a4o=r(fSe," (WavLM model)"),fSe.forEach(t),ge.forEach(t),n4o=i(ma),T(h_.$$.fragment,ma),s4o=i(ma),T(p_.$$.fragment,ma),ma.forEach(t),l4o=i(gl),__=n(gl,"DIV",{class:!0});var iJe=s(__);T(qy.$$.fragment,iJe),i4o=i(iJe),Mme=n(iJe,"P",{});var Abt=s(Mme);d4o=r(Abt,"Register a new processor for this class."),Abt.forEach(t),iJe.forEach(t),gl.forEach(t),ZQe=i(f),rd=n(f,"H2",{class:!0});var dJe=s(rd);u_=n(dJe,"A",{id:!0,class:!0,href:!0});var Lbt=s(u_);Eme=n(Lbt,"SPAN",{});var ybt=s(Eme);T(jy.$$.fragment,ybt),ybt.forEach(t),Lbt.forEach(t),c4o=i(dJe),Cme=n(dJe,"SPAN",{});var xbt=s(Cme);f4o=r(xbt,"AutoModel"),xbt.forEach(t),dJe.forEach(t),eUe=i(f),So=n(f,"DIV",{class:!0});var hl=s(So);T(Dy.$$.fragment,hl),m4o=i(hl),td=n(hl,"P",{});var Dae=s(td);g4o=r(Dae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$D=n(Dae,"A",{href:!0});var $bt=s($D);h4o=r($bt,"from_pretrained()"),$bt.forEach(t),p4o=r(Dae," class method or the "),kD=n(Dae,"A",{href:!0});var kbt=s(kD);_4o=r(kbt,"from_config()"),kbt.forEach(t),u4o=r(Dae,` class
method.`),Dae.forEach(t),b4o=i(hl),Gy=n(hl,"P",{});var cJe=s(Gy);v4o=r(cJe,"This class cannot be instantiated directly using "),wme=n(cJe,"CODE",{});var Sbt=s(wme);F4o=r(Sbt,"__init__()"),Sbt.forEach(t),T4o=r(cJe," (throws an error)."),cJe.forEach(t),M4o=i(hl),mt=n(hl,"DIV",{class:!0});var m7=s(mt);T(Oy.$$.fragment,m7),E4o=i(m7),Ame=n(m7,"P",{});var Rbt=s(Ame);C4o=r(Rbt,"Instantiates one of the base model classes of the library from a configuration."),Rbt.forEach(t),w4o=i(m7),ad=n(m7,"P",{});var Gae=s(ad);A4o=r(Gae,`Note:
Loading a model from its configuration file does `),Lme=n(Gae,"STRONG",{});var Pbt=s(Lme);L4o=r(Pbt,"not"),Pbt.forEach(t),y4o=r(Gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),SD=n(Gae,"A",{href:!0});var Bbt=s(SD);x4o=r(Bbt,"from_pretrained()"),Bbt.forEach(t),$4o=r(Gae," to load the model weights."),Gae.forEach(t),k4o=i(m7),T(b_.$$.fragment,m7),m7.forEach(t),S4o=i(hl),Ye=n(hl,"DIV",{class:!0});var ga=s(Ye);T(Vy.$$.fragment,ga),R4o=i(ga),yme=n(ga,"P",{});var Ibt=s(yme);P4o=r(Ibt,"Instantiate one of the base model classes of the library from a pretrained model."),Ibt.forEach(t),B4o=i(ga),Va=n(ga,"P",{});var g7=s(Va);I4o=r(g7,"The model class to instantiate is selected based on the "),xme=n(g7,"CODE",{});var Nbt=s(xme);N4o=r(Nbt,"model_type"),Nbt.forEach(t),q4o=r(g7,` property of the config object (either
passed as an argument or loaded from `),$me=n(g7,"CODE",{});var qbt=s($me);j4o=r(qbt,"pretrained_model_name_or_path"),qbt.forEach(t),D4o=r(g7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kme=n(g7,"CODE",{});var jbt=s(kme);G4o=r(jbt,"pretrained_model_name_or_path"),jbt.forEach(t),O4o=r(g7,":"),g7.forEach(t),V4o=i(ga),y=n(ga,"UL",{});var x=s(y);v_=n(x,"LI",{});var mSe=s(v_);Sme=n(mSe,"STRONG",{});var Dbt=s(Sme);X4o=r(Dbt,"albert"),Dbt.forEach(t),z4o=r(mSe," \u2014 "),RD=n(mSe,"A",{href:!0});var Gbt=s(RD);W4o=r(Gbt,"AlbertModel"),Gbt.forEach(t),Q4o=r(mSe," (ALBERT model)"),mSe.forEach(t),U4o=i(x),F_=n(x,"LI",{});var gSe=s(F_);Rme=n(gSe,"STRONG",{});var Obt=s(Rme);H4o=r(Obt,"bart"),Obt.forEach(t),J4o=r(gSe," \u2014 "),PD=n(gSe,"A",{href:!0});var Vbt=s(PD);Y4o=r(Vbt,"BartModel"),Vbt.forEach(t),K4o=r(gSe," (BART model)"),gSe.forEach(t),Z4o=i(x),T_=n(x,"LI",{});var hSe=s(T_);Pme=n(hSe,"STRONG",{});var Xbt=s(Pme);eCo=r(Xbt,"beit"),Xbt.forEach(t),oCo=r(hSe," \u2014 "),BD=n(hSe,"A",{href:!0});var zbt=s(BD);rCo=r(zbt,"BeitModel"),zbt.forEach(t),tCo=r(hSe," (BEiT model)"),hSe.forEach(t),aCo=i(x),M_=n(x,"LI",{});var pSe=s(M_);Bme=n(pSe,"STRONG",{});var Wbt=s(Bme);nCo=r(Wbt,"bert"),Wbt.forEach(t),sCo=r(pSe," \u2014 "),ID=n(pSe,"A",{href:!0});var Qbt=s(ID);lCo=r(Qbt,"BertModel"),Qbt.forEach(t),iCo=r(pSe," (BERT model)"),pSe.forEach(t),dCo=i(x),E_=n(x,"LI",{});var _Se=s(E_);Ime=n(_Se,"STRONG",{});var Ubt=s(Ime);cCo=r(Ubt,"bert-generation"),Ubt.forEach(t),fCo=r(_Se," \u2014 "),ND=n(_Se,"A",{href:!0});var Hbt=s(ND);mCo=r(Hbt,"BertGenerationEncoder"),Hbt.forEach(t),gCo=r(_Se," (Bert Generation model)"),_Se.forEach(t),hCo=i(x),C_=n(x,"LI",{});var uSe=s(C_);Nme=n(uSe,"STRONG",{});var Jbt=s(Nme);pCo=r(Jbt,"big_bird"),Jbt.forEach(t),_Co=r(uSe," \u2014 "),qD=n(uSe,"A",{href:!0});var Ybt=s(qD);uCo=r(Ybt,"BigBirdModel"),Ybt.forEach(t),bCo=r(uSe," (BigBird model)"),uSe.forEach(t),vCo=i(x),w_=n(x,"LI",{});var bSe=s(w_);qme=n(bSe,"STRONG",{});var Kbt=s(qme);FCo=r(Kbt,"bigbird_pegasus"),Kbt.forEach(t),TCo=r(bSe," \u2014 "),jD=n(bSe,"A",{href:!0});var Zbt=s(jD);MCo=r(Zbt,"BigBirdPegasusModel"),Zbt.forEach(t),ECo=r(bSe," (BigBird-Pegasus model)"),bSe.forEach(t),CCo=i(x),A_=n(x,"LI",{});var vSe=s(A_);jme=n(vSe,"STRONG",{});var evt=s(jme);wCo=r(evt,"blenderbot"),evt.forEach(t),ACo=r(vSe," \u2014 "),DD=n(vSe,"A",{href:!0});var ovt=s(DD);LCo=r(ovt,"BlenderbotModel"),ovt.forEach(t),yCo=r(vSe," (Blenderbot model)"),vSe.forEach(t),xCo=i(x),L_=n(x,"LI",{});var FSe=s(L_);Dme=n(FSe,"STRONG",{});var rvt=s(Dme);$Co=r(rvt,"blenderbot-small"),rvt.forEach(t),kCo=r(FSe," \u2014 "),GD=n(FSe,"A",{href:!0});var tvt=s(GD);SCo=r(tvt,"BlenderbotSmallModel"),tvt.forEach(t),RCo=r(FSe," (BlenderbotSmall model)"),FSe.forEach(t),PCo=i(x),y_=n(x,"LI",{});var TSe=s(y_);Gme=n(TSe,"STRONG",{});var avt=s(Gme);BCo=r(avt,"bloom"),avt.forEach(t),ICo=r(TSe," \u2014 "),OD=n(TSe,"A",{href:!0});var nvt=s(OD);NCo=r(nvt,"BloomModel"),nvt.forEach(t),qCo=r(TSe," (BLOOM model)"),TSe.forEach(t),jCo=i(x),x_=n(x,"LI",{});var MSe=s(x_);Ome=n(MSe,"STRONG",{});var svt=s(Ome);DCo=r(svt,"camembert"),svt.forEach(t),GCo=r(MSe," \u2014 "),VD=n(MSe,"A",{href:!0});var lvt=s(VD);OCo=r(lvt,"CamembertModel"),lvt.forEach(t),VCo=r(MSe," (CamemBERT model)"),MSe.forEach(t),XCo=i(x),$_=n(x,"LI",{});var ESe=s($_);Vme=n(ESe,"STRONG",{});var ivt=s(Vme);zCo=r(ivt,"canine"),ivt.forEach(t),WCo=r(ESe," \u2014 "),XD=n(ESe,"A",{href:!0});var dvt=s(XD);QCo=r(dvt,"CanineModel"),dvt.forEach(t),UCo=r(ESe," (CANINE model)"),ESe.forEach(t),HCo=i(x),k_=n(x,"LI",{});var CSe=s(k_);Xme=n(CSe,"STRONG",{});var cvt=s(Xme);JCo=r(cvt,"clip"),cvt.forEach(t),YCo=r(CSe," \u2014 "),zD=n(CSe,"A",{href:!0});var fvt=s(zD);KCo=r(fvt,"CLIPModel"),fvt.forEach(t),ZCo=r(CSe," (CLIP model)"),CSe.forEach(t),e3o=i(x),S_=n(x,"LI",{});var wSe=s(S_);zme=n(wSe,"STRONG",{});var mvt=s(zme);o3o=r(mvt,"codegen"),mvt.forEach(t),r3o=r(wSe," \u2014 "),WD=n(wSe,"A",{href:!0});var gvt=s(WD);t3o=r(gvt,"CodeGenModel"),gvt.forEach(t),a3o=r(wSe," (CodeGen model)"),wSe.forEach(t),n3o=i(x),R_=n(x,"LI",{});var ASe=s(R_);Wme=n(ASe,"STRONG",{});var hvt=s(Wme);s3o=r(hvt,"convbert"),hvt.forEach(t),l3o=r(ASe," \u2014 "),QD=n(ASe,"A",{href:!0});var pvt=s(QD);i3o=r(pvt,"ConvBertModel"),pvt.forEach(t),d3o=r(ASe," (ConvBERT model)"),ASe.forEach(t),c3o=i(x),P_=n(x,"LI",{});var LSe=s(P_);Qme=n(LSe,"STRONG",{});var _vt=s(Qme);f3o=r(_vt,"convnext"),_vt.forEach(t),m3o=r(LSe," \u2014 "),UD=n(LSe,"A",{href:!0});var uvt=s(UD);g3o=r(uvt,"ConvNextModel"),uvt.forEach(t),h3o=r(LSe," (ConvNeXT model)"),LSe.forEach(t),p3o=i(x),B_=n(x,"LI",{});var ySe=s(B_);Ume=n(ySe,"STRONG",{});var bvt=s(Ume);_3o=r(bvt,"ctrl"),bvt.forEach(t),u3o=r(ySe," \u2014 "),HD=n(ySe,"A",{href:!0});var vvt=s(HD);b3o=r(vvt,"CTRLModel"),vvt.forEach(t),v3o=r(ySe," (CTRL model)"),ySe.forEach(t),F3o=i(x),I_=n(x,"LI",{});var xSe=s(I_);Hme=n(xSe,"STRONG",{});var Fvt=s(Hme);T3o=r(Fvt,"cvt"),Fvt.forEach(t),M3o=r(xSe," \u2014 "),JD=n(xSe,"A",{href:!0});var Tvt=s(JD);E3o=r(Tvt,"CvtModel"),Tvt.forEach(t),C3o=r(xSe," (CvT model)"),xSe.forEach(t),w3o=i(x),N_=n(x,"LI",{});var $Se=s(N_);Jme=n($Se,"STRONG",{});var Mvt=s(Jme);A3o=r(Mvt,"data2vec-audio"),Mvt.forEach(t),L3o=r($Se," \u2014 "),YD=n($Se,"A",{href:!0});var Evt=s(YD);y3o=r(Evt,"Data2VecAudioModel"),Evt.forEach(t),x3o=r($Se," (Data2VecAudio model)"),$Se.forEach(t),$3o=i(x),q_=n(x,"LI",{});var kSe=s(q_);Yme=n(kSe,"STRONG",{});var Cvt=s(Yme);k3o=r(Cvt,"data2vec-text"),Cvt.forEach(t),S3o=r(kSe," \u2014 "),KD=n(kSe,"A",{href:!0});var wvt=s(KD);R3o=r(wvt,"Data2VecTextModel"),wvt.forEach(t),P3o=r(kSe," (Data2VecText model)"),kSe.forEach(t),B3o=i(x),j_=n(x,"LI",{});var SSe=s(j_);Kme=n(SSe,"STRONG",{});var Avt=s(Kme);I3o=r(Avt,"data2vec-vision"),Avt.forEach(t),N3o=r(SSe," \u2014 "),ZD=n(SSe,"A",{href:!0});var Lvt=s(ZD);q3o=r(Lvt,"Data2VecVisionModel"),Lvt.forEach(t),j3o=r(SSe," (Data2VecVision model)"),SSe.forEach(t),D3o=i(x),D_=n(x,"LI",{});var RSe=s(D_);Zme=n(RSe,"STRONG",{});var yvt=s(Zme);G3o=r(yvt,"deberta"),yvt.forEach(t),O3o=r(RSe," \u2014 "),eG=n(RSe,"A",{href:!0});var xvt=s(eG);V3o=r(xvt,"DebertaModel"),xvt.forEach(t),X3o=r(RSe," (DeBERTa model)"),RSe.forEach(t),z3o=i(x),G_=n(x,"LI",{});var PSe=s(G_);ege=n(PSe,"STRONG",{});var $vt=s(ege);W3o=r($vt,"deberta-v2"),$vt.forEach(t),Q3o=r(PSe," \u2014 "),oG=n(PSe,"A",{href:!0});var kvt=s(oG);U3o=r(kvt,"DebertaV2Model"),kvt.forEach(t),H3o=r(PSe," (DeBERTa-v2 model)"),PSe.forEach(t),J3o=i(x),O_=n(x,"LI",{});var BSe=s(O_);oge=n(BSe,"STRONG",{});var Svt=s(oge);Y3o=r(Svt,"decision_transformer"),Svt.forEach(t),K3o=r(BSe," \u2014 "),rG=n(BSe,"A",{href:!0});var Rvt=s(rG);Z3o=r(Rvt,"DecisionTransformerModel"),Rvt.forEach(t),e5o=r(BSe," (Decision Transformer model)"),BSe.forEach(t),o5o=i(x),V_=n(x,"LI",{});var ISe=s(V_);rge=n(ISe,"STRONG",{});var Pvt=s(rge);r5o=r(Pvt,"deit"),Pvt.forEach(t),t5o=r(ISe," \u2014 "),tG=n(ISe,"A",{href:!0});var Bvt=s(tG);a5o=r(Bvt,"DeiTModel"),Bvt.forEach(t),n5o=r(ISe," (DeiT model)"),ISe.forEach(t),s5o=i(x),X_=n(x,"LI",{});var NSe=s(X_);tge=n(NSe,"STRONG",{});var Ivt=s(tge);l5o=r(Ivt,"detr"),Ivt.forEach(t),i5o=r(NSe," \u2014 "),aG=n(NSe,"A",{href:!0});var Nvt=s(aG);d5o=r(Nvt,"DetrModel"),Nvt.forEach(t),c5o=r(NSe," (DETR model)"),NSe.forEach(t),f5o=i(x),z_=n(x,"LI",{});var qSe=s(z_);age=n(qSe,"STRONG",{});var qvt=s(age);m5o=r(qvt,"distilbert"),qvt.forEach(t),g5o=r(qSe," \u2014 "),nG=n(qSe,"A",{href:!0});var jvt=s(nG);h5o=r(jvt,"DistilBertModel"),jvt.forEach(t),p5o=r(qSe," (DistilBERT model)"),qSe.forEach(t),_5o=i(x),W_=n(x,"LI",{});var jSe=s(W_);nge=n(jSe,"STRONG",{});var Dvt=s(nge);u5o=r(Dvt,"donut-swin"),Dvt.forEach(t),b5o=r(jSe," \u2014 "),sG=n(jSe,"A",{href:!0});var Gvt=s(sG);v5o=r(Gvt,"DonutSwinModel"),Gvt.forEach(t),F5o=r(jSe," (DonutSwin model)"),jSe.forEach(t),T5o=i(x),Q_=n(x,"LI",{});var DSe=s(Q_);sge=n(DSe,"STRONG",{});var Ovt=s(sge);M5o=r(Ovt,"dpr"),Ovt.forEach(t),E5o=r(DSe," \u2014 "),lG=n(DSe,"A",{href:!0});var Vvt=s(lG);C5o=r(Vvt,"DPRQuestionEncoder"),Vvt.forEach(t),w5o=r(DSe," (DPR model)"),DSe.forEach(t),A5o=i(x),U_=n(x,"LI",{});var GSe=s(U_);lge=n(GSe,"STRONG",{});var Xvt=s(lge);L5o=r(Xvt,"dpt"),Xvt.forEach(t),y5o=r(GSe," \u2014 "),iG=n(GSe,"A",{href:!0});var zvt=s(iG);x5o=r(zvt,"DPTModel"),zvt.forEach(t),$5o=r(GSe," (DPT model)"),GSe.forEach(t),k5o=i(x),H_=n(x,"LI",{});var OSe=s(H_);ige=n(OSe,"STRONG",{});var Wvt=s(ige);S5o=r(Wvt,"electra"),Wvt.forEach(t),R5o=r(OSe," \u2014 "),dG=n(OSe,"A",{href:!0});var Qvt=s(dG);P5o=r(Qvt,"ElectraModel"),Qvt.forEach(t),B5o=r(OSe," (ELECTRA model)"),OSe.forEach(t),I5o=i(x),J_=n(x,"LI",{});var VSe=s(J_);dge=n(VSe,"STRONG",{});var Uvt=s(dge);N5o=r(Uvt,"flaubert"),Uvt.forEach(t),q5o=r(VSe," \u2014 "),cG=n(VSe,"A",{href:!0});var Hvt=s(cG);j5o=r(Hvt,"FlaubertModel"),Hvt.forEach(t),D5o=r(VSe," (FlauBERT model)"),VSe.forEach(t),G5o=i(x),Y_=n(x,"LI",{});var XSe=s(Y_);cge=n(XSe,"STRONG",{});var Jvt=s(cge);O5o=r(Jvt,"flava"),Jvt.forEach(t),V5o=r(XSe," \u2014 "),fG=n(XSe,"A",{href:!0});var Yvt=s(fG);X5o=r(Yvt,"FlavaModel"),Yvt.forEach(t),z5o=r(XSe," (FLAVA model)"),XSe.forEach(t),W5o=i(x),K_=n(x,"LI",{});var zSe=s(K_);fge=n(zSe,"STRONG",{});var Kvt=s(fge);Q5o=r(Kvt,"fnet"),Kvt.forEach(t),U5o=r(zSe," \u2014 "),mG=n(zSe,"A",{href:!0});var Zvt=s(mG);H5o=r(Zvt,"FNetModel"),Zvt.forEach(t),J5o=r(zSe," (FNet model)"),zSe.forEach(t),Y5o=i(x),Z_=n(x,"LI",{});var WSe=s(Z_);mge=n(WSe,"STRONG",{});var eFt=s(mge);K5o=r(eFt,"fsmt"),eFt.forEach(t),Z5o=r(WSe," \u2014 "),gG=n(WSe,"A",{href:!0});var oFt=s(gG);e0o=r(oFt,"FSMTModel"),oFt.forEach(t),o0o=r(WSe," (FairSeq Machine-Translation model)"),WSe.forEach(t),r0o=i(x),nl=n(x,"LI",{});var KR=s(nl);gge=n(KR,"STRONG",{});var rFt=s(gge);t0o=r(rFt,"funnel"),rFt.forEach(t),a0o=r(KR," \u2014 "),hG=n(KR,"A",{href:!0});var tFt=s(hG);n0o=r(tFt,"FunnelModel"),tFt.forEach(t),s0o=r(KR," or "),pG=n(KR,"A",{href:!0});var aFt=s(pG);l0o=r(aFt,"FunnelBaseModel"),aFt.forEach(t),i0o=r(KR," (Funnel Transformer model)"),KR.forEach(t),d0o=i(x),eu=n(x,"LI",{});var QSe=s(eu);hge=n(QSe,"STRONG",{});var nFt=s(hge);c0o=r(nFt,"glpn"),nFt.forEach(t),f0o=r(QSe," \u2014 "),_G=n(QSe,"A",{href:!0});var sFt=s(_G);m0o=r(sFt,"GLPNModel"),sFt.forEach(t),g0o=r(QSe," (GLPN model)"),QSe.forEach(t),h0o=i(x),ou=n(x,"LI",{});var USe=s(ou);pge=n(USe,"STRONG",{});var lFt=s(pge);p0o=r(lFt,"gpt2"),lFt.forEach(t),_0o=r(USe," \u2014 "),uG=n(USe,"A",{href:!0});var iFt=s(uG);u0o=r(iFt,"GPT2Model"),iFt.forEach(t),b0o=r(USe," (OpenAI GPT-2 model)"),USe.forEach(t),v0o=i(x),ru=n(x,"LI",{});var HSe=s(ru);_ge=n(HSe,"STRONG",{});var dFt=s(_ge);F0o=r(dFt,"gpt_neo"),dFt.forEach(t),T0o=r(HSe," \u2014 "),bG=n(HSe,"A",{href:!0});var cFt=s(bG);M0o=r(cFt,"GPTNeoModel"),cFt.forEach(t),E0o=r(HSe," (GPT Neo model)"),HSe.forEach(t),C0o=i(x),tu=n(x,"LI",{});var JSe=s(tu);uge=n(JSe,"STRONG",{});var fFt=s(uge);w0o=r(fFt,"gpt_neox"),fFt.forEach(t),A0o=r(JSe," \u2014 "),vG=n(JSe,"A",{href:!0});var mFt=s(vG);L0o=r(mFt,"GPTNeoXModel"),mFt.forEach(t),y0o=r(JSe," (GPT NeoX model)"),JSe.forEach(t),x0o=i(x),au=n(x,"LI",{});var YSe=s(au);bge=n(YSe,"STRONG",{});var gFt=s(bge);$0o=r(gFt,"gptj"),gFt.forEach(t),k0o=r(YSe," \u2014 "),FG=n(YSe,"A",{href:!0});var hFt=s(FG);S0o=r(hFt,"GPTJModel"),hFt.forEach(t),R0o=r(YSe," (GPT-J model)"),YSe.forEach(t),P0o=i(x),nu=n(x,"LI",{});var KSe=s(nu);vge=n(KSe,"STRONG",{});var pFt=s(vge);B0o=r(pFt,"groupvit"),pFt.forEach(t),I0o=r(KSe," \u2014 "),TG=n(KSe,"A",{href:!0});var _Ft=s(TG);N0o=r(_Ft,"GroupViTModel"),_Ft.forEach(t),q0o=r(KSe," (GroupViT model)"),KSe.forEach(t),j0o=i(x),su=n(x,"LI",{});var ZSe=s(su);Fge=n(ZSe,"STRONG",{});var uFt=s(Fge);D0o=r(uFt,"hubert"),uFt.forEach(t),G0o=r(ZSe," \u2014 "),MG=n(ZSe,"A",{href:!0});var bFt=s(MG);O0o=r(bFt,"HubertModel"),bFt.forEach(t),V0o=r(ZSe," (Hubert model)"),ZSe.forEach(t),X0o=i(x),lu=n(x,"LI",{});var eRe=s(lu);Tge=n(eRe,"STRONG",{});var vFt=s(Tge);z0o=r(vFt,"ibert"),vFt.forEach(t),W0o=r(eRe," \u2014 "),EG=n(eRe,"A",{href:!0});var FFt=s(EG);Q0o=r(FFt,"IBertModel"),FFt.forEach(t),U0o=r(eRe," (I-BERT model)"),eRe.forEach(t),H0o=i(x),iu=n(x,"LI",{});var oRe=s(iu);Mge=n(oRe,"STRONG",{});var TFt=s(Mge);J0o=r(TFt,"imagegpt"),TFt.forEach(t),Y0o=r(oRe," \u2014 "),CG=n(oRe,"A",{href:!0});var MFt=s(CG);K0o=r(MFt,"ImageGPTModel"),MFt.forEach(t),Z0o=r(oRe," (ImageGPT model)"),oRe.forEach(t),ewo=i(x),du=n(x,"LI",{});var rRe=s(du);Ege=n(rRe,"STRONG",{});var EFt=s(Ege);owo=r(EFt,"layoutlm"),EFt.forEach(t),rwo=r(rRe," \u2014 "),wG=n(rRe,"A",{href:!0});var CFt=s(wG);two=r(CFt,"LayoutLMModel"),CFt.forEach(t),awo=r(rRe," (LayoutLM model)"),rRe.forEach(t),nwo=i(x),cu=n(x,"LI",{});var tRe=s(cu);Cge=n(tRe,"STRONG",{});var wFt=s(Cge);swo=r(wFt,"layoutlmv2"),wFt.forEach(t),lwo=r(tRe," \u2014 "),AG=n(tRe,"A",{href:!0});var AFt=s(AG);iwo=r(AFt,"LayoutLMv2Model"),AFt.forEach(t),dwo=r(tRe," (LayoutLMv2 model)"),tRe.forEach(t),cwo=i(x),fu=n(x,"LI",{});var aRe=s(fu);wge=n(aRe,"STRONG",{});var LFt=s(wge);fwo=r(LFt,"layoutlmv3"),LFt.forEach(t),mwo=r(aRe," \u2014 "),LG=n(aRe,"A",{href:!0});var yFt=s(LG);gwo=r(yFt,"LayoutLMv3Model"),yFt.forEach(t),hwo=r(aRe," (LayoutLMv3 model)"),aRe.forEach(t),pwo=i(x),mu=n(x,"LI",{});var nRe=s(mu);Age=n(nRe,"STRONG",{});var xFt=s(Age);_wo=r(xFt,"led"),xFt.forEach(t),uwo=r(nRe," \u2014 "),yG=n(nRe,"A",{href:!0});var $Ft=s(yG);bwo=r($Ft,"LEDModel"),$Ft.forEach(t),vwo=r(nRe," (LED model)"),nRe.forEach(t),Fwo=i(x),gu=n(x,"LI",{});var sRe=s(gu);Lge=n(sRe,"STRONG",{});var kFt=s(Lge);Two=r(kFt,"levit"),kFt.forEach(t),Mwo=r(sRe," \u2014 "),xG=n(sRe,"A",{href:!0});var SFt=s(xG);Ewo=r(SFt,"LevitModel"),SFt.forEach(t),Cwo=r(sRe," (LeViT model)"),sRe.forEach(t),wwo=i(x),hu=n(x,"LI",{});var lRe=s(hu);yge=n(lRe,"STRONG",{});var RFt=s(yge);Awo=r(RFt,"longformer"),RFt.forEach(t),Lwo=r(lRe," \u2014 "),$G=n(lRe,"A",{href:!0});var PFt=s($G);ywo=r(PFt,"LongformerModel"),PFt.forEach(t),xwo=r(lRe," (Longformer model)"),lRe.forEach(t),$wo=i(x),pu=n(x,"LI",{});var iRe=s(pu);xge=n(iRe,"STRONG",{});var BFt=s(xge);kwo=r(BFt,"longt5"),BFt.forEach(t),Swo=r(iRe," \u2014 "),kG=n(iRe,"A",{href:!0});var IFt=s(kG);Rwo=r(IFt,"LongT5Model"),IFt.forEach(t),Pwo=r(iRe," (LongT5 model)"),iRe.forEach(t),Bwo=i(x),_u=n(x,"LI",{});var dRe=s(_u);$ge=n(dRe,"STRONG",{});var NFt=s($ge);Iwo=r(NFt,"luke"),NFt.forEach(t),Nwo=r(dRe," \u2014 "),SG=n(dRe,"A",{href:!0});var qFt=s(SG);qwo=r(qFt,"LukeModel"),qFt.forEach(t),jwo=r(dRe," (LUKE model)"),dRe.forEach(t),Dwo=i(x),uu=n(x,"LI",{});var cRe=s(uu);kge=n(cRe,"STRONG",{});var jFt=s(kge);Gwo=r(jFt,"lxmert"),jFt.forEach(t),Owo=r(cRe," \u2014 "),RG=n(cRe,"A",{href:!0});var DFt=s(RG);Vwo=r(DFt,"LxmertModel"),DFt.forEach(t),Xwo=r(cRe," (LXMERT model)"),cRe.forEach(t),zwo=i(x),bu=n(x,"LI",{});var fRe=s(bu);Sge=n(fRe,"STRONG",{});var GFt=s(Sge);Wwo=r(GFt,"m2m_100"),GFt.forEach(t),Qwo=r(fRe," \u2014 "),PG=n(fRe,"A",{href:!0});var OFt=s(PG);Uwo=r(OFt,"M2M100Model"),OFt.forEach(t),Hwo=r(fRe," (M2M100 model)"),fRe.forEach(t),Jwo=i(x),vu=n(x,"LI",{});var mRe=s(vu);Rge=n(mRe,"STRONG",{});var VFt=s(Rge);Ywo=r(VFt,"marian"),VFt.forEach(t),Kwo=r(mRe," \u2014 "),BG=n(mRe,"A",{href:!0});var XFt=s(BG);Zwo=r(XFt,"MarianModel"),XFt.forEach(t),eAo=r(mRe," (Marian model)"),mRe.forEach(t),oAo=i(x),Fu=n(x,"LI",{});var gRe=s(Fu);Pge=n(gRe,"STRONG",{});var zFt=s(Pge);rAo=r(zFt,"maskformer"),zFt.forEach(t),tAo=r(gRe," \u2014 "),IG=n(gRe,"A",{href:!0});var WFt=s(IG);aAo=r(WFt,"MaskFormerModel"),WFt.forEach(t),nAo=r(gRe," (MaskFormer model)"),gRe.forEach(t),sAo=i(x),Tu=n(x,"LI",{});var hRe=s(Tu);Bge=n(hRe,"STRONG",{});var QFt=s(Bge);lAo=r(QFt,"mbart"),QFt.forEach(t),iAo=r(hRe," \u2014 "),NG=n(hRe,"A",{href:!0});var UFt=s(NG);dAo=r(UFt,"MBartModel"),UFt.forEach(t),cAo=r(hRe," (mBART model)"),hRe.forEach(t),fAo=i(x),Mu=n(x,"LI",{});var pRe=s(Mu);Ige=n(pRe,"STRONG",{});var HFt=s(Ige);mAo=r(HFt,"mctct"),HFt.forEach(t),gAo=r(pRe," \u2014 "),qG=n(pRe,"A",{href:!0});var JFt=s(qG);hAo=r(JFt,"MCTCTModel"),JFt.forEach(t),pAo=r(pRe," (M-CTC-T model)"),pRe.forEach(t),_Ao=i(x),Eu=n(x,"LI",{});var _Re=s(Eu);Nge=n(_Re,"STRONG",{});var YFt=s(Nge);uAo=r(YFt,"megatron-bert"),YFt.forEach(t),bAo=r(_Re," \u2014 "),jG=n(_Re,"A",{href:!0});var KFt=s(jG);vAo=r(KFt,"MegatronBertModel"),KFt.forEach(t),FAo=r(_Re," (Megatron-BERT model)"),_Re.forEach(t),TAo=i(x),Cu=n(x,"LI",{});var uRe=s(Cu);qge=n(uRe,"STRONG",{});var ZFt=s(qge);MAo=r(ZFt,"mobilebert"),ZFt.forEach(t),EAo=r(uRe," \u2014 "),DG=n(uRe,"A",{href:!0});var eTt=s(DG);CAo=r(eTt,"MobileBertModel"),eTt.forEach(t),wAo=r(uRe," (MobileBERT model)"),uRe.forEach(t),AAo=i(x),wu=n(x,"LI",{});var bRe=s(wu);jge=n(bRe,"STRONG",{});var oTt=s(jge);LAo=r(oTt,"mobilevit"),oTt.forEach(t),yAo=r(bRe," \u2014 "),GG=n(bRe,"A",{href:!0});var rTt=s(GG);xAo=r(rTt,"MobileViTModel"),rTt.forEach(t),$Ao=r(bRe," (MobileViT model)"),bRe.forEach(t),kAo=i(x),Au=n(x,"LI",{});var vRe=s(Au);Dge=n(vRe,"STRONG",{});var tTt=s(Dge);SAo=r(tTt,"mpnet"),tTt.forEach(t),RAo=r(vRe," \u2014 "),OG=n(vRe,"A",{href:!0});var aTt=s(OG);PAo=r(aTt,"MPNetModel"),aTt.forEach(t),BAo=r(vRe," (MPNet model)"),vRe.forEach(t),IAo=i(x),Lu=n(x,"LI",{});var FRe=s(Lu);Gge=n(FRe,"STRONG",{});var nTt=s(Gge);NAo=r(nTt,"mt5"),nTt.forEach(t),qAo=r(FRe," \u2014 "),VG=n(FRe,"A",{href:!0});var sTt=s(VG);jAo=r(sTt,"MT5Model"),sTt.forEach(t),DAo=r(FRe," (MT5 model)"),FRe.forEach(t),GAo=i(x),yu=n(x,"LI",{});var TRe=s(yu);Oge=n(TRe,"STRONG",{});var lTt=s(Oge);OAo=r(lTt,"mvp"),lTt.forEach(t),VAo=r(TRe," \u2014 "),XG=n(TRe,"A",{href:!0});var iTt=s(XG);XAo=r(iTt,"MvpModel"),iTt.forEach(t),zAo=r(TRe," (MVP model)"),TRe.forEach(t),WAo=i(x),xu=n(x,"LI",{});var MRe=s(xu);Vge=n(MRe,"STRONG",{});var dTt=s(Vge);QAo=r(dTt,"nezha"),dTt.forEach(t),UAo=r(MRe," \u2014 "),zG=n(MRe,"A",{href:!0});var cTt=s(zG);HAo=r(cTt,"NezhaModel"),cTt.forEach(t),JAo=r(MRe," (Nezha model)"),MRe.forEach(t),YAo=i(x),$u=n(x,"LI",{});var ERe=s($u);Xge=n(ERe,"STRONG",{});var fTt=s(Xge);KAo=r(fTt,"nllb"),fTt.forEach(t),ZAo=r(ERe," \u2014 "),WG=n(ERe,"A",{href:!0});var mTt=s(WG);e7o=r(mTt,"M2M100Model"),mTt.forEach(t),o7o=r(ERe," (NLLB model)"),ERe.forEach(t),r7o=i(x),ku=n(x,"LI",{});var CRe=s(ku);zge=n(CRe,"STRONG",{});var gTt=s(zge);t7o=r(gTt,"nystromformer"),gTt.forEach(t),a7o=r(CRe," \u2014 "),QG=n(CRe,"A",{href:!0});var hTt=s(QG);n7o=r(hTt,"NystromformerModel"),hTt.forEach(t),s7o=r(CRe," (Nystr\xF6mformer model)"),CRe.forEach(t),l7o=i(x),Su=n(x,"LI",{});var wRe=s(Su);Wge=n(wRe,"STRONG",{});var pTt=s(Wge);i7o=r(pTt,"openai-gpt"),pTt.forEach(t),d7o=r(wRe," \u2014 "),UG=n(wRe,"A",{href:!0});var _Tt=s(UG);c7o=r(_Tt,"OpenAIGPTModel"),_Tt.forEach(t),f7o=r(wRe," (OpenAI GPT model)"),wRe.forEach(t),m7o=i(x),Ru=n(x,"LI",{});var ARe=s(Ru);Qge=n(ARe,"STRONG",{});var uTt=s(Qge);g7o=r(uTt,"opt"),uTt.forEach(t),h7o=r(ARe," \u2014 "),HG=n(ARe,"A",{href:!0});var bTt=s(HG);p7o=r(bTt,"OPTModel"),bTt.forEach(t),_7o=r(ARe," (OPT model)"),ARe.forEach(t),u7o=i(x),Pu=n(x,"LI",{});var LRe=s(Pu);Uge=n(LRe,"STRONG",{});var vTt=s(Uge);b7o=r(vTt,"owlvit"),vTt.forEach(t),v7o=r(LRe," \u2014 "),JG=n(LRe,"A",{href:!0});var FTt=s(JG);F7o=r(FTt,"OwlViTModel"),FTt.forEach(t),T7o=r(LRe," (OWL-ViT model)"),LRe.forEach(t),M7o=i(x),Bu=n(x,"LI",{});var yRe=s(Bu);Hge=n(yRe,"STRONG",{});var TTt=s(Hge);E7o=r(TTt,"pegasus"),TTt.forEach(t),C7o=r(yRe," \u2014 "),YG=n(yRe,"A",{href:!0});var MTt=s(YG);w7o=r(MTt,"PegasusModel"),MTt.forEach(t),A7o=r(yRe," (Pegasus model)"),yRe.forEach(t),L7o=i(x),Iu=n(x,"LI",{});var xRe=s(Iu);Jge=n(xRe,"STRONG",{});var ETt=s(Jge);y7o=r(ETt,"perceiver"),ETt.forEach(t),x7o=r(xRe," \u2014 "),KG=n(xRe,"A",{href:!0});var CTt=s(KG);$7o=r(CTt,"PerceiverModel"),CTt.forEach(t),k7o=r(xRe," (Perceiver model)"),xRe.forEach(t),S7o=i(x),Nu=n(x,"LI",{});var $Re=s(Nu);Yge=n($Re,"STRONG",{});var wTt=s(Yge);R7o=r(wTt,"plbart"),wTt.forEach(t),P7o=r($Re," \u2014 "),ZG=n($Re,"A",{href:!0});var ATt=s(ZG);B7o=r(ATt,"PLBartModel"),ATt.forEach(t),I7o=r($Re," (PLBart model)"),$Re.forEach(t),N7o=i(x),qu=n(x,"LI",{});var kRe=s(qu);Kge=n(kRe,"STRONG",{});var LTt=s(Kge);q7o=r(LTt,"poolformer"),LTt.forEach(t),j7o=r(kRe," \u2014 "),eO=n(kRe,"A",{href:!0});var yTt=s(eO);D7o=r(yTt,"PoolFormerModel"),yTt.forEach(t),G7o=r(kRe," (PoolFormer model)"),kRe.forEach(t),O7o=i(x),ju=n(x,"LI",{});var SRe=s(ju);Zge=n(SRe,"STRONG",{});var xTt=s(Zge);V7o=r(xTt,"prophetnet"),xTt.forEach(t),X7o=r(SRe," \u2014 "),oO=n(SRe,"A",{href:!0});var $Tt=s(oO);z7o=r($Tt,"ProphetNetModel"),$Tt.forEach(t),W7o=r(SRe," (ProphetNet model)"),SRe.forEach(t),Q7o=i(x),Du=n(x,"LI",{});var RRe=s(Du);ehe=n(RRe,"STRONG",{});var kTt=s(ehe);U7o=r(kTt,"qdqbert"),kTt.forEach(t),H7o=r(RRe," \u2014 "),rO=n(RRe,"A",{href:!0});var STt=s(rO);J7o=r(STt,"QDQBertModel"),STt.forEach(t),Y7o=r(RRe," (QDQBert model)"),RRe.forEach(t),K7o=i(x),Gu=n(x,"LI",{});var PRe=s(Gu);ohe=n(PRe,"STRONG",{});var RTt=s(ohe);Z7o=r(RTt,"reformer"),RTt.forEach(t),eLo=r(PRe," \u2014 "),tO=n(PRe,"A",{href:!0});var PTt=s(tO);oLo=r(PTt,"ReformerModel"),PTt.forEach(t),rLo=r(PRe," (Reformer model)"),PRe.forEach(t),tLo=i(x),Ou=n(x,"LI",{});var BRe=s(Ou);rhe=n(BRe,"STRONG",{});var BTt=s(rhe);aLo=r(BTt,"regnet"),BTt.forEach(t),nLo=r(BRe," \u2014 "),aO=n(BRe,"A",{href:!0});var ITt=s(aO);sLo=r(ITt,"RegNetModel"),ITt.forEach(t),lLo=r(BRe," (RegNet model)"),BRe.forEach(t),iLo=i(x),Vu=n(x,"LI",{});var IRe=s(Vu);the=n(IRe,"STRONG",{});var NTt=s(the);dLo=r(NTt,"rembert"),NTt.forEach(t),cLo=r(IRe," \u2014 "),nO=n(IRe,"A",{href:!0});var qTt=s(nO);fLo=r(qTt,"RemBertModel"),qTt.forEach(t),mLo=r(IRe," (RemBERT model)"),IRe.forEach(t),gLo=i(x),Xu=n(x,"LI",{});var NRe=s(Xu);ahe=n(NRe,"STRONG",{});var jTt=s(ahe);hLo=r(jTt,"resnet"),jTt.forEach(t),pLo=r(NRe," \u2014 "),sO=n(NRe,"A",{href:!0});var DTt=s(sO);_Lo=r(DTt,"ResNetModel"),DTt.forEach(t),uLo=r(NRe," (ResNet model)"),NRe.forEach(t),bLo=i(x),zu=n(x,"LI",{});var qRe=s(zu);nhe=n(qRe,"STRONG",{});var GTt=s(nhe);vLo=r(GTt,"retribert"),GTt.forEach(t),FLo=r(qRe," \u2014 "),lO=n(qRe,"A",{href:!0});var OTt=s(lO);TLo=r(OTt,"RetriBertModel"),OTt.forEach(t),MLo=r(qRe," (RetriBERT model)"),qRe.forEach(t),ELo=i(x),Wu=n(x,"LI",{});var jRe=s(Wu);she=n(jRe,"STRONG",{});var VTt=s(she);CLo=r(VTt,"roberta"),VTt.forEach(t),wLo=r(jRe," \u2014 "),iO=n(jRe,"A",{href:!0});var XTt=s(iO);ALo=r(XTt,"RobertaModel"),XTt.forEach(t),LLo=r(jRe," (RoBERTa model)"),jRe.forEach(t),yLo=i(x),Qu=n(x,"LI",{});var DRe=s(Qu);lhe=n(DRe,"STRONG",{});var zTt=s(lhe);xLo=r(zTt,"roformer"),zTt.forEach(t),$Lo=r(DRe," \u2014 "),dO=n(DRe,"A",{href:!0});var WTt=s(dO);kLo=r(WTt,"RoFormerModel"),WTt.forEach(t),SLo=r(DRe," (RoFormer model)"),DRe.forEach(t),RLo=i(x),Uu=n(x,"LI",{});var GRe=s(Uu);ihe=n(GRe,"STRONG",{});var QTt=s(ihe);PLo=r(QTt,"segformer"),QTt.forEach(t),BLo=r(GRe," \u2014 "),cO=n(GRe,"A",{href:!0});var UTt=s(cO);ILo=r(UTt,"SegformerModel"),UTt.forEach(t),NLo=r(GRe," (SegFormer model)"),GRe.forEach(t),qLo=i(x),Hu=n(x,"LI",{});var ORe=s(Hu);dhe=n(ORe,"STRONG",{});var HTt=s(dhe);jLo=r(HTt,"sew"),HTt.forEach(t),DLo=r(ORe," \u2014 "),fO=n(ORe,"A",{href:!0});var JTt=s(fO);GLo=r(JTt,"SEWModel"),JTt.forEach(t),OLo=r(ORe," (SEW model)"),ORe.forEach(t),VLo=i(x),Ju=n(x,"LI",{});var VRe=s(Ju);che=n(VRe,"STRONG",{});var YTt=s(che);XLo=r(YTt,"sew-d"),YTt.forEach(t),zLo=r(VRe," \u2014 "),mO=n(VRe,"A",{href:!0});var KTt=s(mO);WLo=r(KTt,"SEWDModel"),KTt.forEach(t),QLo=r(VRe," (SEW-D model)"),VRe.forEach(t),ULo=i(x),Yu=n(x,"LI",{});var XRe=s(Yu);fhe=n(XRe,"STRONG",{});var ZTt=s(fhe);HLo=r(ZTt,"speech_to_text"),ZTt.forEach(t),JLo=r(XRe," \u2014 "),gO=n(XRe,"A",{href:!0});var eMt=s(gO);YLo=r(eMt,"Speech2TextModel"),eMt.forEach(t),KLo=r(XRe," (Speech2Text model)"),XRe.forEach(t),ZLo=i(x),Ku=n(x,"LI",{});var zRe=s(Ku);mhe=n(zRe,"STRONG",{});var oMt=s(mhe);eyo=r(oMt,"splinter"),oMt.forEach(t),oyo=r(zRe," \u2014 "),hO=n(zRe,"A",{href:!0});var rMt=s(hO);ryo=r(rMt,"SplinterModel"),rMt.forEach(t),tyo=r(zRe," (Splinter model)"),zRe.forEach(t),ayo=i(x),Zu=n(x,"LI",{});var WRe=s(Zu);ghe=n(WRe,"STRONG",{});var tMt=s(ghe);nyo=r(tMt,"squeezebert"),tMt.forEach(t),syo=r(WRe," \u2014 "),pO=n(WRe,"A",{href:!0});var aMt=s(pO);lyo=r(aMt,"SqueezeBertModel"),aMt.forEach(t),iyo=r(WRe," (SqueezeBERT model)"),WRe.forEach(t),dyo=i(x),e1=n(x,"LI",{});var QRe=s(e1);hhe=n(QRe,"STRONG",{});var nMt=s(hhe);cyo=r(nMt,"swin"),nMt.forEach(t),fyo=r(QRe," \u2014 "),_O=n(QRe,"A",{href:!0});var sMt=s(_O);myo=r(sMt,"SwinModel"),sMt.forEach(t),gyo=r(QRe," (Swin Transformer model)"),QRe.forEach(t),hyo=i(x),o1=n(x,"LI",{});var URe=s(o1);phe=n(URe,"STRONG",{});var lMt=s(phe);pyo=r(lMt,"swinv2"),lMt.forEach(t),_yo=r(URe," \u2014 "),uO=n(URe,"A",{href:!0});var iMt=s(uO);uyo=r(iMt,"Swinv2Model"),iMt.forEach(t),byo=r(URe," (Swin Transformer V2 model)"),URe.forEach(t),vyo=i(x),r1=n(x,"LI",{});var HRe=s(r1);_he=n(HRe,"STRONG",{});var dMt=s(_he);Fyo=r(dMt,"t5"),dMt.forEach(t),Tyo=r(HRe," \u2014 "),bO=n(HRe,"A",{href:!0});var cMt=s(bO);Myo=r(cMt,"T5Model"),cMt.forEach(t),Eyo=r(HRe," (T5 model)"),HRe.forEach(t),Cyo=i(x),t1=n(x,"LI",{});var JRe=s(t1);uhe=n(JRe,"STRONG",{});var fMt=s(uhe);wyo=r(fMt,"tapas"),fMt.forEach(t),Ayo=r(JRe," \u2014 "),vO=n(JRe,"A",{href:!0});var mMt=s(vO);Lyo=r(mMt,"TapasModel"),mMt.forEach(t),yyo=r(JRe," (TAPAS model)"),JRe.forEach(t),xyo=i(x),a1=n(x,"LI",{});var YRe=s(a1);bhe=n(YRe,"STRONG",{});var gMt=s(bhe);$yo=r(gMt,"trajectory_transformer"),gMt.forEach(t),kyo=r(YRe," \u2014 "),FO=n(YRe,"A",{href:!0});var hMt=s(FO);Syo=r(hMt,"TrajectoryTransformerModel"),hMt.forEach(t),Ryo=r(YRe," (Trajectory Transformer model)"),YRe.forEach(t),Pyo=i(x),n1=n(x,"LI",{});var KRe=s(n1);vhe=n(KRe,"STRONG",{});var pMt=s(vhe);Byo=r(pMt,"transfo-xl"),pMt.forEach(t),Iyo=r(KRe," \u2014 "),TO=n(KRe,"A",{href:!0});var _Mt=s(TO);Nyo=r(_Mt,"TransfoXLModel"),_Mt.forEach(t),qyo=r(KRe," (Transformer-XL model)"),KRe.forEach(t),jyo=i(x),s1=n(x,"LI",{});var ZRe=s(s1);Fhe=n(ZRe,"STRONG",{});var uMt=s(Fhe);Dyo=r(uMt,"unispeech"),uMt.forEach(t),Gyo=r(ZRe," \u2014 "),MO=n(ZRe,"A",{href:!0});var bMt=s(MO);Oyo=r(bMt,"UniSpeechModel"),bMt.forEach(t),Vyo=r(ZRe," (UniSpeech model)"),ZRe.forEach(t),Xyo=i(x),l1=n(x,"LI",{});var ePe=s(l1);The=n(ePe,"STRONG",{});var vMt=s(The);zyo=r(vMt,"unispeech-sat"),vMt.forEach(t),Wyo=r(ePe," \u2014 "),EO=n(ePe,"A",{href:!0});var FMt=s(EO);Qyo=r(FMt,"UniSpeechSatModel"),FMt.forEach(t),Uyo=r(ePe," (UniSpeechSat model)"),ePe.forEach(t),Hyo=i(x),i1=n(x,"LI",{});var oPe=s(i1);Mhe=n(oPe,"STRONG",{});var TMt=s(Mhe);Jyo=r(TMt,"van"),TMt.forEach(t),Yyo=r(oPe," \u2014 "),CO=n(oPe,"A",{href:!0});var MMt=s(CO);Kyo=r(MMt,"VanModel"),MMt.forEach(t),Zyo=r(oPe," (VAN model)"),oPe.forEach(t),e9o=i(x),d1=n(x,"LI",{});var rPe=s(d1);Ehe=n(rPe,"STRONG",{});var EMt=s(Ehe);o9o=r(EMt,"videomae"),EMt.forEach(t),r9o=r(rPe," \u2014 "),wO=n(rPe,"A",{href:!0});var CMt=s(wO);t9o=r(CMt,"VideoMAEModel"),CMt.forEach(t),a9o=r(rPe," (VideoMAE model)"),rPe.forEach(t),n9o=i(x),c1=n(x,"LI",{});var tPe=s(c1);Che=n(tPe,"STRONG",{});var wMt=s(Che);s9o=r(wMt,"vilt"),wMt.forEach(t),l9o=r(tPe," \u2014 "),AO=n(tPe,"A",{href:!0});var AMt=s(AO);i9o=r(AMt,"ViltModel"),AMt.forEach(t),d9o=r(tPe," (ViLT model)"),tPe.forEach(t),c9o=i(x),f1=n(x,"LI",{});var aPe=s(f1);whe=n(aPe,"STRONG",{});var LMt=s(whe);f9o=r(LMt,"vision-text-dual-encoder"),LMt.forEach(t),m9o=r(aPe," \u2014 "),LO=n(aPe,"A",{href:!0});var yMt=s(LO);g9o=r(yMt,"VisionTextDualEncoderModel"),yMt.forEach(t),h9o=r(aPe," (VisionTextDualEncoder model)"),aPe.forEach(t),p9o=i(x),m1=n(x,"LI",{});var nPe=s(m1);Ahe=n(nPe,"STRONG",{});var xMt=s(Ahe);_9o=r(xMt,"visual_bert"),xMt.forEach(t),u9o=r(nPe," \u2014 "),yO=n(nPe,"A",{href:!0});var $Mt=s(yO);b9o=r($Mt,"VisualBertModel"),$Mt.forEach(t),v9o=r(nPe," (VisualBERT model)"),nPe.forEach(t),F9o=i(x),g1=n(x,"LI",{});var sPe=s(g1);Lhe=n(sPe,"STRONG",{});var kMt=s(Lhe);T9o=r(kMt,"vit"),kMt.forEach(t),M9o=r(sPe," \u2014 "),xO=n(sPe,"A",{href:!0});var SMt=s(xO);E9o=r(SMt,"ViTModel"),SMt.forEach(t),C9o=r(sPe," (ViT model)"),sPe.forEach(t),w9o=i(x),h1=n(x,"LI",{});var lPe=s(h1);yhe=n(lPe,"STRONG",{});var RMt=s(yhe);A9o=r(RMt,"vit_mae"),RMt.forEach(t),L9o=r(lPe," \u2014 "),$O=n(lPe,"A",{href:!0});var PMt=s($O);y9o=r(PMt,"ViTMAEModel"),PMt.forEach(t),x9o=r(lPe," (ViTMAE model)"),lPe.forEach(t),$9o=i(x),p1=n(x,"LI",{});var iPe=s(p1);xhe=n(iPe,"STRONG",{});var BMt=s(xhe);k9o=r(BMt,"wav2vec2"),BMt.forEach(t),S9o=r(iPe," \u2014 "),kO=n(iPe,"A",{href:!0});var IMt=s(kO);R9o=r(IMt,"Wav2Vec2Model"),IMt.forEach(t),P9o=r(iPe," (Wav2Vec2 model)"),iPe.forEach(t),B9o=i(x),_1=n(x,"LI",{});var dPe=s(_1);$he=n(dPe,"STRONG",{});var NMt=s($he);I9o=r(NMt,"wav2vec2-conformer"),NMt.forEach(t),N9o=r(dPe," \u2014 "),SO=n(dPe,"A",{href:!0});var qMt=s(SO);q9o=r(qMt,"Wav2Vec2ConformerModel"),qMt.forEach(t),j9o=r(dPe," (Wav2Vec2-Conformer model)"),dPe.forEach(t),D9o=i(x),u1=n(x,"LI",{});var cPe=s(u1);khe=n(cPe,"STRONG",{});var jMt=s(khe);G9o=r(jMt,"wavlm"),jMt.forEach(t),O9o=r(cPe," \u2014 "),RO=n(cPe,"A",{href:!0});var DMt=s(RO);V9o=r(DMt,"WavLMModel"),DMt.forEach(t),X9o=r(cPe," (WavLM model)"),cPe.forEach(t),z9o=i(x),b1=n(x,"LI",{});var fPe=s(b1);She=n(fPe,"STRONG",{});var GMt=s(She);W9o=r(GMt,"xglm"),GMt.forEach(t),Q9o=r(fPe," \u2014 "),PO=n(fPe,"A",{href:!0});var OMt=s(PO);U9o=r(OMt,"XGLMModel"),OMt.forEach(t),H9o=r(fPe," (XGLM model)"),fPe.forEach(t),J9o=i(x),v1=n(x,"LI",{});var mPe=s(v1);Rhe=n(mPe,"STRONG",{});var VMt=s(Rhe);Y9o=r(VMt,"xlm"),VMt.forEach(t),K9o=r(mPe," \u2014 "),BO=n(mPe,"A",{href:!0});var XMt=s(BO);Z9o=r(XMt,"XLMModel"),XMt.forEach(t),exo=r(mPe," (XLM model)"),mPe.forEach(t),oxo=i(x),F1=n(x,"LI",{});var gPe=s(F1);Phe=n(gPe,"STRONG",{});var zMt=s(Phe);rxo=r(zMt,"xlm-prophetnet"),zMt.forEach(t),txo=r(gPe," \u2014 "),IO=n(gPe,"A",{href:!0});var WMt=s(IO);axo=r(WMt,"XLMProphetNetModel"),WMt.forEach(t),nxo=r(gPe," (XLM-ProphetNet model)"),gPe.forEach(t),sxo=i(x),T1=n(x,"LI",{});var hPe=s(T1);Bhe=n(hPe,"STRONG",{});var QMt=s(Bhe);lxo=r(QMt,"xlm-roberta"),QMt.forEach(t),ixo=r(hPe," \u2014 "),NO=n(hPe,"A",{href:!0});var UMt=s(NO);dxo=r(UMt,"XLMRobertaModel"),UMt.forEach(t),cxo=r(hPe," (XLM-RoBERTa model)"),hPe.forEach(t),fxo=i(x),M1=n(x,"LI",{});var pPe=s(M1);Ihe=n(pPe,"STRONG",{});var HMt=s(Ihe);mxo=r(HMt,"xlm-roberta-xl"),HMt.forEach(t),gxo=r(pPe," \u2014 "),qO=n(pPe,"A",{href:!0});var JMt=s(qO);hxo=r(JMt,"XLMRobertaXLModel"),JMt.forEach(t),pxo=r(pPe," (XLM-RoBERTa-XL model)"),pPe.forEach(t),_xo=i(x),E1=n(x,"LI",{});var _Pe=s(E1);Nhe=n(_Pe,"STRONG",{});var YMt=s(Nhe);uxo=r(YMt,"xlnet"),YMt.forEach(t),bxo=r(_Pe," \u2014 "),jO=n(_Pe,"A",{href:!0});var KMt=s(jO);vxo=r(KMt,"XLNetModel"),KMt.forEach(t),Fxo=r(_Pe," (XLNet model)"),_Pe.forEach(t),Txo=i(x),C1=n(x,"LI",{});var uPe=s(C1);qhe=n(uPe,"STRONG",{});var ZMt=s(qhe);Mxo=r(ZMt,"yolos"),ZMt.forEach(t),Exo=r(uPe," \u2014 "),DO=n(uPe,"A",{href:!0});var eEt=s(DO);Cxo=r(eEt,"YolosModel"),eEt.forEach(t),wxo=r(uPe," (YOLOS model)"),uPe.forEach(t),Axo=i(x),w1=n(x,"LI",{});var bPe=s(w1);jhe=n(bPe,"STRONG",{});var oEt=s(jhe);Lxo=r(oEt,"yoso"),oEt.forEach(t),yxo=r(bPe," \u2014 "),GO=n(bPe,"A",{href:!0});var rEt=s(GO);xxo=r(rEt,"YosoModel"),rEt.forEach(t),$xo=r(bPe," (YOSO model)"),bPe.forEach(t),x.forEach(t),kxo=i(ga),A1=n(ga,"P",{});var vPe=s(A1);Sxo=r(vPe,"The model is set in evaluation mode by default using "),Dhe=n(vPe,"CODE",{});var tEt=s(Dhe);Rxo=r(tEt,"model.eval()"),tEt.forEach(t),Pxo=r(vPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ghe=n(vPe,"CODE",{});var aEt=s(Ghe);Bxo=r(aEt,"model.train()"),aEt.forEach(t),vPe.forEach(t),Ixo=i(ga),T(L1.$$.fragment,ga),ga.forEach(t),hl.forEach(t),oUe=i(f),nd=n(f,"H2",{class:!0});var fJe=s(nd);y1=n(fJe,"A",{id:!0,class:!0,href:!0});var nEt=s(y1);Ohe=n(nEt,"SPAN",{});var sEt=s(Ohe);T(Xy.$$.fragment,sEt),sEt.forEach(t),nEt.forEach(t),Nxo=i(fJe),Vhe=n(fJe,"SPAN",{});var lEt=s(Vhe);qxo=r(lEt,"AutoModelForPreTraining"),lEt.forEach(t),fJe.forEach(t),rUe=i(f),Ro=n(f,"DIV",{class:!0});var pl=s(Ro);T(zy.$$.fragment,pl),jxo=i(pl),sd=n(pl,"P",{});var Oae=s(sd);Dxo=r(Oae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),OO=n(Oae,"A",{href:!0});var iEt=s(OO);Gxo=r(iEt,"from_pretrained()"),iEt.forEach(t),Oxo=r(Oae," class method or the "),VO=n(Oae,"A",{href:!0});var dEt=s(VO);Vxo=r(dEt,"from_config()"),dEt.forEach(t),Xxo=r(Oae,` class
method.`),Oae.forEach(t),zxo=i(pl),Wy=n(pl,"P",{});var mJe=s(Wy);Wxo=r(mJe,"This class cannot be instantiated directly using "),Xhe=n(mJe,"CODE",{});var cEt=s(Xhe);Qxo=r(cEt,"__init__()"),cEt.forEach(t),Uxo=r(mJe," (throws an error)."),mJe.forEach(t),Hxo=i(pl),gt=n(pl,"DIV",{class:!0});var h7=s(gt);T(Qy.$$.fragment,h7),Jxo=i(h7),zhe=n(h7,"P",{});var fEt=s(zhe);Yxo=r(fEt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fEt.forEach(t),Kxo=i(h7),ld=n(h7,"P",{});var Vae=s(ld);Zxo=r(Vae,`Note:
Loading a model from its configuration file does `),Whe=n(Vae,"STRONG",{});var mEt=s(Whe);e$o=r(mEt,"not"),mEt.forEach(t),o$o=r(Vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),XO=n(Vae,"A",{href:!0});var gEt=s(XO);r$o=r(gEt,"from_pretrained()"),gEt.forEach(t),t$o=r(Vae," to load the model weights."),Vae.forEach(t),a$o=i(h7),T(x1.$$.fragment,h7),h7.forEach(t),n$o=i(pl),Ke=n(pl,"DIV",{class:!0});var ha=s(Ke);T(Uy.$$.fragment,ha),s$o=i(ha),Qhe=n(ha,"P",{});var hEt=s(Qhe);l$o=r(hEt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hEt.forEach(t),i$o=i(ha),Xa=n(ha,"P",{});var p7=s(Xa);d$o=r(p7,"The model class to instantiate is selected based on the "),Uhe=n(p7,"CODE",{});var pEt=s(Uhe);c$o=r(pEt,"model_type"),pEt.forEach(t),f$o=r(p7,` property of the config object (either
passed as an argument or loaded from `),Hhe=n(p7,"CODE",{});var _Et=s(Hhe);m$o=r(_Et,"pretrained_model_name_or_path"),_Et.forEach(t),g$o=r(p7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=n(p7,"CODE",{});var uEt=s(Jhe);h$o=r(uEt,"pretrained_model_name_or_path"),uEt.forEach(t),p$o=r(p7,":"),p7.forEach(t),_$o=i(ha),G=n(ha,"UL",{});var O=s(G);$1=n(O,"LI",{});var FPe=s($1);Yhe=n(FPe,"STRONG",{});var bEt=s(Yhe);u$o=r(bEt,"albert"),bEt.forEach(t),b$o=r(FPe," \u2014 "),zO=n(FPe,"A",{href:!0});var vEt=s(zO);v$o=r(vEt,"AlbertForPreTraining"),vEt.forEach(t),F$o=r(FPe," (ALBERT model)"),FPe.forEach(t),T$o=i(O),k1=n(O,"LI",{});var TPe=s(k1);Khe=n(TPe,"STRONG",{});var FEt=s(Khe);M$o=r(FEt,"bart"),FEt.forEach(t),E$o=r(TPe," \u2014 "),WO=n(TPe,"A",{href:!0});var TEt=s(WO);C$o=r(TEt,"BartForConditionalGeneration"),TEt.forEach(t),w$o=r(TPe," (BART model)"),TPe.forEach(t),A$o=i(O),S1=n(O,"LI",{});var MPe=s(S1);Zhe=n(MPe,"STRONG",{});var MEt=s(Zhe);L$o=r(MEt,"bert"),MEt.forEach(t),y$o=r(MPe," \u2014 "),QO=n(MPe,"A",{href:!0});var EEt=s(QO);x$o=r(EEt,"BertForPreTraining"),EEt.forEach(t),$$o=r(MPe," (BERT model)"),MPe.forEach(t),k$o=i(O),R1=n(O,"LI",{});var EPe=s(R1);epe=n(EPe,"STRONG",{});var CEt=s(epe);S$o=r(CEt,"big_bird"),CEt.forEach(t),R$o=r(EPe," \u2014 "),UO=n(EPe,"A",{href:!0});var wEt=s(UO);P$o=r(wEt,"BigBirdForPreTraining"),wEt.forEach(t),B$o=r(EPe," (BigBird model)"),EPe.forEach(t),I$o=i(O),P1=n(O,"LI",{});var CPe=s(P1);ope=n(CPe,"STRONG",{});var AEt=s(ope);N$o=r(AEt,"bloom"),AEt.forEach(t),q$o=r(CPe," \u2014 "),HO=n(CPe,"A",{href:!0});var LEt=s(HO);j$o=r(LEt,"BloomForCausalLM"),LEt.forEach(t),D$o=r(CPe," (BLOOM model)"),CPe.forEach(t),G$o=i(O),B1=n(O,"LI",{});var wPe=s(B1);rpe=n(wPe,"STRONG",{});var yEt=s(rpe);O$o=r(yEt,"camembert"),yEt.forEach(t),V$o=r(wPe," \u2014 "),JO=n(wPe,"A",{href:!0});var xEt=s(JO);X$o=r(xEt,"CamembertForMaskedLM"),xEt.forEach(t),z$o=r(wPe," (CamemBERT model)"),wPe.forEach(t),W$o=i(O),I1=n(O,"LI",{});var APe=s(I1);tpe=n(APe,"STRONG",{});var $Et=s(tpe);Q$o=r($Et,"ctrl"),$Et.forEach(t),U$o=r(APe," \u2014 "),YO=n(APe,"A",{href:!0});var kEt=s(YO);H$o=r(kEt,"CTRLLMHeadModel"),kEt.forEach(t),J$o=r(APe," (CTRL model)"),APe.forEach(t),Y$o=i(O),N1=n(O,"LI",{});var LPe=s(N1);ape=n(LPe,"STRONG",{});var SEt=s(ape);K$o=r(SEt,"data2vec-text"),SEt.forEach(t),Z$o=r(LPe," \u2014 "),KO=n(LPe,"A",{href:!0});var REt=s(KO);eko=r(REt,"Data2VecTextForMaskedLM"),REt.forEach(t),oko=r(LPe," (Data2VecText model)"),LPe.forEach(t),rko=i(O),q1=n(O,"LI",{});var yPe=s(q1);npe=n(yPe,"STRONG",{});var PEt=s(npe);tko=r(PEt,"deberta"),PEt.forEach(t),ako=r(yPe," \u2014 "),ZO=n(yPe,"A",{href:!0});var BEt=s(ZO);nko=r(BEt,"DebertaForMaskedLM"),BEt.forEach(t),sko=r(yPe," (DeBERTa model)"),yPe.forEach(t),lko=i(O),j1=n(O,"LI",{});var xPe=s(j1);spe=n(xPe,"STRONG",{});var IEt=s(spe);iko=r(IEt,"deberta-v2"),IEt.forEach(t),dko=r(xPe," \u2014 "),eV=n(xPe,"A",{href:!0});var NEt=s(eV);cko=r(NEt,"DebertaV2ForMaskedLM"),NEt.forEach(t),fko=r(xPe," (DeBERTa-v2 model)"),xPe.forEach(t),mko=i(O),D1=n(O,"LI",{});var $Pe=s(D1);lpe=n($Pe,"STRONG",{});var qEt=s(lpe);gko=r(qEt,"distilbert"),qEt.forEach(t),hko=r($Pe," \u2014 "),oV=n($Pe,"A",{href:!0});var jEt=s(oV);pko=r(jEt,"DistilBertForMaskedLM"),jEt.forEach(t),_ko=r($Pe," (DistilBERT model)"),$Pe.forEach(t),uko=i(O),G1=n(O,"LI",{});var kPe=s(G1);ipe=n(kPe,"STRONG",{});var DEt=s(ipe);bko=r(DEt,"electra"),DEt.forEach(t),vko=r(kPe," \u2014 "),rV=n(kPe,"A",{href:!0});var GEt=s(rV);Fko=r(GEt,"ElectraForPreTraining"),GEt.forEach(t),Tko=r(kPe," (ELECTRA model)"),kPe.forEach(t),Mko=i(O),O1=n(O,"LI",{});var SPe=s(O1);dpe=n(SPe,"STRONG",{});var OEt=s(dpe);Eko=r(OEt,"flaubert"),OEt.forEach(t),Cko=r(SPe," \u2014 "),tV=n(SPe,"A",{href:!0});var VEt=s(tV);wko=r(VEt,"FlaubertWithLMHeadModel"),VEt.forEach(t),Ako=r(SPe," (FlauBERT model)"),SPe.forEach(t),Lko=i(O),V1=n(O,"LI",{});var RPe=s(V1);cpe=n(RPe,"STRONG",{});var XEt=s(cpe);yko=r(XEt,"flava"),XEt.forEach(t),xko=r(RPe," \u2014 "),aV=n(RPe,"A",{href:!0});var zEt=s(aV);$ko=r(zEt,"FlavaForPreTraining"),zEt.forEach(t),kko=r(RPe," (FLAVA model)"),RPe.forEach(t),Sko=i(O),X1=n(O,"LI",{});var PPe=s(X1);fpe=n(PPe,"STRONG",{});var WEt=s(fpe);Rko=r(WEt,"fnet"),WEt.forEach(t),Pko=r(PPe," \u2014 "),nV=n(PPe,"A",{href:!0});var QEt=s(nV);Bko=r(QEt,"FNetForPreTraining"),QEt.forEach(t),Iko=r(PPe," (FNet model)"),PPe.forEach(t),Nko=i(O),z1=n(O,"LI",{});var BPe=s(z1);mpe=n(BPe,"STRONG",{});var UEt=s(mpe);qko=r(UEt,"fsmt"),UEt.forEach(t),jko=r(BPe," \u2014 "),sV=n(BPe,"A",{href:!0});var HEt=s(sV);Dko=r(HEt,"FSMTForConditionalGeneration"),HEt.forEach(t),Gko=r(BPe," (FairSeq Machine-Translation model)"),BPe.forEach(t),Oko=i(O),W1=n(O,"LI",{});var IPe=s(W1);gpe=n(IPe,"STRONG",{});var JEt=s(gpe);Vko=r(JEt,"funnel"),JEt.forEach(t),Xko=r(IPe," \u2014 "),lV=n(IPe,"A",{href:!0});var YEt=s(lV);zko=r(YEt,"FunnelForPreTraining"),YEt.forEach(t),Wko=r(IPe," (Funnel Transformer model)"),IPe.forEach(t),Qko=i(O),Q1=n(O,"LI",{});var NPe=s(Q1);hpe=n(NPe,"STRONG",{});var KEt=s(hpe);Uko=r(KEt,"gpt2"),KEt.forEach(t),Hko=r(NPe," \u2014 "),iV=n(NPe,"A",{href:!0});var ZEt=s(iV);Jko=r(ZEt,"GPT2LMHeadModel"),ZEt.forEach(t),Yko=r(NPe," (OpenAI GPT-2 model)"),NPe.forEach(t),Kko=i(O),U1=n(O,"LI",{});var qPe=s(U1);ppe=n(qPe,"STRONG",{});var e4t=s(ppe);Zko=r(e4t,"ibert"),e4t.forEach(t),eSo=r(qPe," \u2014 "),dV=n(qPe,"A",{href:!0});var o4t=s(dV);oSo=r(o4t,"IBertForMaskedLM"),o4t.forEach(t),rSo=r(qPe," (I-BERT model)"),qPe.forEach(t),tSo=i(O),H1=n(O,"LI",{});var jPe=s(H1);_pe=n(jPe,"STRONG",{});var r4t=s(_pe);aSo=r(r4t,"layoutlm"),r4t.forEach(t),nSo=r(jPe," \u2014 "),cV=n(jPe,"A",{href:!0});var t4t=s(cV);sSo=r(t4t,"LayoutLMForMaskedLM"),t4t.forEach(t),lSo=r(jPe," (LayoutLM model)"),jPe.forEach(t),iSo=i(O),J1=n(O,"LI",{});var DPe=s(J1);upe=n(DPe,"STRONG",{});var a4t=s(upe);dSo=r(a4t,"longformer"),a4t.forEach(t),cSo=r(DPe," \u2014 "),fV=n(DPe,"A",{href:!0});var n4t=s(fV);fSo=r(n4t,"LongformerForMaskedLM"),n4t.forEach(t),mSo=r(DPe," (Longformer model)"),DPe.forEach(t),gSo=i(O),Y1=n(O,"LI",{});var GPe=s(Y1);bpe=n(GPe,"STRONG",{});var s4t=s(bpe);hSo=r(s4t,"luke"),s4t.forEach(t),pSo=r(GPe," \u2014 "),mV=n(GPe,"A",{href:!0});var l4t=s(mV);_So=r(l4t,"LukeForMaskedLM"),l4t.forEach(t),uSo=r(GPe," (LUKE model)"),GPe.forEach(t),bSo=i(O),K1=n(O,"LI",{});var OPe=s(K1);vpe=n(OPe,"STRONG",{});var i4t=s(vpe);vSo=r(i4t,"lxmert"),i4t.forEach(t),FSo=r(OPe," \u2014 "),gV=n(OPe,"A",{href:!0});var d4t=s(gV);TSo=r(d4t,"LxmertForPreTraining"),d4t.forEach(t),MSo=r(OPe," (LXMERT model)"),OPe.forEach(t),ESo=i(O),Z1=n(O,"LI",{});var VPe=s(Z1);Fpe=n(VPe,"STRONG",{});var c4t=s(Fpe);CSo=r(c4t,"megatron-bert"),c4t.forEach(t),wSo=r(VPe," \u2014 "),hV=n(VPe,"A",{href:!0});var f4t=s(hV);ASo=r(f4t,"MegatronBertForPreTraining"),f4t.forEach(t),LSo=r(VPe," (Megatron-BERT model)"),VPe.forEach(t),ySo=i(O),e6=n(O,"LI",{});var XPe=s(e6);Tpe=n(XPe,"STRONG",{});var m4t=s(Tpe);xSo=r(m4t,"mobilebert"),m4t.forEach(t),$So=r(XPe," \u2014 "),pV=n(XPe,"A",{href:!0});var g4t=s(pV);kSo=r(g4t,"MobileBertForPreTraining"),g4t.forEach(t),SSo=r(XPe," (MobileBERT model)"),XPe.forEach(t),RSo=i(O),o6=n(O,"LI",{});var zPe=s(o6);Mpe=n(zPe,"STRONG",{});var h4t=s(Mpe);PSo=r(h4t,"mpnet"),h4t.forEach(t),BSo=r(zPe," \u2014 "),_V=n(zPe,"A",{href:!0});var p4t=s(_V);ISo=r(p4t,"MPNetForMaskedLM"),p4t.forEach(t),NSo=r(zPe," (MPNet model)"),zPe.forEach(t),qSo=i(O),r6=n(O,"LI",{});var WPe=s(r6);Epe=n(WPe,"STRONG",{});var _4t=s(Epe);jSo=r(_4t,"mvp"),_4t.forEach(t),DSo=r(WPe," \u2014 "),uV=n(WPe,"A",{href:!0});var u4t=s(uV);GSo=r(u4t,"MvpForConditionalGeneration"),u4t.forEach(t),OSo=r(WPe," (MVP model)"),WPe.forEach(t),VSo=i(O),t6=n(O,"LI",{});var QPe=s(t6);Cpe=n(QPe,"STRONG",{});var b4t=s(Cpe);XSo=r(b4t,"nezha"),b4t.forEach(t),zSo=r(QPe," \u2014 "),bV=n(QPe,"A",{href:!0});var v4t=s(bV);WSo=r(v4t,"NezhaForPreTraining"),v4t.forEach(t),QSo=r(QPe," (Nezha model)"),QPe.forEach(t),USo=i(O),a6=n(O,"LI",{});var UPe=s(a6);wpe=n(UPe,"STRONG",{});var F4t=s(wpe);HSo=r(F4t,"openai-gpt"),F4t.forEach(t),JSo=r(UPe," \u2014 "),vV=n(UPe,"A",{href:!0});var T4t=s(vV);YSo=r(T4t,"OpenAIGPTLMHeadModel"),T4t.forEach(t),KSo=r(UPe," (OpenAI GPT model)"),UPe.forEach(t),ZSo=i(O),n6=n(O,"LI",{});var HPe=s(n6);Ape=n(HPe,"STRONG",{});var M4t=s(Ape);eRo=r(M4t,"retribert"),M4t.forEach(t),oRo=r(HPe," \u2014 "),FV=n(HPe,"A",{href:!0});var E4t=s(FV);rRo=r(E4t,"RetriBertModel"),E4t.forEach(t),tRo=r(HPe," (RetriBERT model)"),HPe.forEach(t),aRo=i(O),s6=n(O,"LI",{});var JPe=s(s6);Lpe=n(JPe,"STRONG",{});var C4t=s(Lpe);nRo=r(C4t,"roberta"),C4t.forEach(t),sRo=r(JPe," \u2014 "),TV=n(JPe,"A",{href:!0});var w4t=s(TV);lRo=r(w4t,"RobertaForMaskedLM"),w4t.forEach(t),iRo=r(JPe," (RoBERTa model)"),JPe.forEach(t),dRo=i(O),l6=n(O,"LI",{});var YPe=s(l6);ype=n(YPe,"STRONG",{});var A4t=s(ype);cRo=r(A4t,"splinter"),A4t.forEach(t),fRo=r(YPe," \u2014 "),MV=n(YPe,"A",{href:!0});var L4t=s(MV);mRo=r(L4t,"SplinterForPreTraining"),L4t.forEach(t),gRo=r(YPe," (Splinter model)"),YPe.forEach(t),hRo=i(O),i6=n(O,"LI",{});var KPe=s(i6);xpe=n(KPe,"STRONG",{});var y4t=s(xpe);pRo=r(y4t,"squeezebert"),y4t.forEach(t),_Ro=r(KPe," \u2014 "),EV=n(KPe,"A",{href:!0});var x4t=s(EV);uRo=r(x4t,"SqueezeBertForMaskedLM"),x4t.forEach(t),bRo=r(KPe," (SqueezeBERT model)"),KPe.forEach(t),vRo=i(O),d6=n(O,"LI",{});var ZPe=s(d6);$pe=n(ZPe,"STRONG",{});var $4t=s($pe);FRo=r($4t,"t5"),$4t.forEach(t),TRo=r(ZPe," \u2014 "),CV=n(ZPe,"A",{href:!0});var k4t=s(CV);MRo=r(k4t,"T5ForConditionalGeneration"),k4t.forEach(t),ERo=r(ZPe," (T5 model)"),ZPe.forEach(t),CRo=i(O),c6=n(O,"LI",{});var eBe=s(c6);kpe=n(eBe,"STRONG",{});var S4t=s(kpe);wRo=r(S4t,"tapas"),S4t.forEach(t),ARo=r(eBe," \u2014 "),wV=n(eBe,"A",{href:!0});var R4t=s(wV);LRo=r(R4t,"TapasForMaskedLM"),R4t.forEach(t),yRo=r(eBe," (TAPAS model)"),eBe.forEach(t),xRo=i(O),f6=n(O,"LI",{});var oBe=s(f6);Spe=n(oBe,"STRONG",{});var P4t=s(Spe);$Ro=r(P4t,"transfo-xl"),P4t.forEach(t),kRo=r(oBe," \u2014 "),AV=n(oBe,"A",{href:!0});var B4t=s(AV);SRo=r(B4t,"TransfoXLLMHeadModel"),B4t.forEach(t),RRo=r(oBe," (Transformer-XL model)"),oBe.forEach(t),PRo=i(O),m6=n(O,"LI",{});var rBe=s(m6);Rpe=n(rBe,"STRONG",{});var I4t=s(Rpe);BRo=r(I4t,"unispeech"),I4t.forEach(t),IRo=r(rBe," \u2014 "),LV=n(rBe,"A",{href:!0});var N4t=s(LV);NRo=r(N4t,"UniSpeechForPreTraining"),N4t.forEach(t),qRo=r(rBe," (UniSpeech model)"),rBe.forEach(t),jRo=i(O),g6=n(O,"LI",{});var tBe=s(g6);Ppe=n(tBe,"STRONG",{});var q4t=s(Ppe);DRo=r(q4t,"unispeech-sat"),q4t.forEach(t),GRo=r(tBe," \u2014 "),yV=n(tBe,"A",{href:!0});var j4t=s(yV);ORo=r(j4t,"UniSpeechSatForPreTraining"),j4t.forEach(t),VRo=r(tBe," (UniSpeechSat model)"),tBe.forEach(t),XRo=i(O),h6=n(O,"LI",{});var aBe=s(h6);Bpe=n(aBe,"STRONG",{});var D4t=s(Bpe);zRo=r(D4t,"videomae"),D4t.forEach(t),WRo=r(aBe," \u2014 "),xV=n(aBe,"A",{href:!0});var G4t=s(xV);QRo=r(G4t,"VideoMAEForPreTraining"),G4t.forEach(t),URo=r(aBe," (VideoMAE model)"),aBe.forEach(t),HRo=i(O),p6=n(O,"LI",{});var nBe=s(p6);Ipe=n(nBe,"STRONG",{});var O4t=s(Ipe);JRo=r(O4t,"visual_bert"),O4t.forEach(t),YRo=r(nBe," \u2014 "),$V=n(nBe,"A",{href:!0});var V4t=s($V);KRo=r(V4t,"VisualBertForPreTraining"),V4t.forEach(t),ZRo=r(nBe," (VisualBERT model)"),nBe.forEach(t),ePo=i(O),_6=n(O,"LI",{});var sBe=s(_6);Npe=n(sBe,"STRONG",{});var X4t=s(Npe);oPo=r(X4t,"vit_mae"),X4t.forEach(t),rPo=r(sBe," \u2014 "),kV=n(sBe,"A",{href:!0});var z4t=s(kV);tPo=r(z4t,"ViTMAEForPreTraining"),z4t.forEach(t),aPo=r(sBe," (ViTMAE model)"),sBe.forEach(t),nPo=i(O),u6=n(O,"LI",{});var lBe=s(u6);qpe=n(lBe,"STRONG",{});var W4t=s(qpe);sPo=r(W4t,"wav2vec2"),W4t.forEach(t),lPo=r(lBe," \u2014 "),SV=n(lBe,"A",{href:!0});var Q4t=s(SV);iPo=r(Q4t,"Wav2Vec2ForPreTraining"),Q4t.forEach(t),dPo=r(lBe," (Wav2Vec2 model)"),lBe.forEach(t),cPo=i(O),b6=n(O,"LI",{});var iBe=s(b6);jpe=n(iBe,"STRONG",{});var U4t=s(jpe);fPo=r(U4t,"wav2vec2-conformer"),U4t.forEach(t),mPo=r(iBe," \u2014 "),RV=n(iBe,"A",{href:!0});var H4t=s(RV);gPo=r(H4t,"Wav2Vec2ConformerForPreTraining"),H4t.forEach(t),hPo=r(iBe," (Wav2Vec2-Conformer model)"),iBe.forEach(t),pPo=i(O),v6=n(O,"LI",{});var dBe=s(v6);Dpe=n(dBe,"STRONG",{});var J4t=s(Dpe);_Po=r(J4t,"xlm"),J4t.forEach(t),uPo=r(dBe," \u2014 "),PV=n(dBe,"A",{href:!0});var Y4t=s(PV);bPo=r(Y4t,"XLMWithLMHeadModel"),Y4t.forEach(t),vPo=r(dBe," (XLM model)"),dBe.forEach(t),FPo=i(O),F6=n(O,"LI",{});var cBe=s(F6);Gpe=n(cBe,"STRONG",{});var K4t=s(Gpe);TPo=r(K4t,"xlm-roberta"),K4t.forEach(t),MPo=r(cBe," \u2014 "),BV=n(cBe,"A",{href:!0});var Z4t=s(BV);EPo=r(Z4t,"XLMRobertaForMaskedLM"),Z4t.forEach(t),CPo=r(cBe," (XLM-RoBERTa model)"),cBe.forEach(t),wPo=i(O),T6=n(O,"LI",{});var fBe=s(T6);Ope=n(fBe,"STRONG",{});var eCt=s(Ope);APo=r(eCt,"xlm-roberta-xl"),eCt.forEach(t),LPo=r(fBe," \u2014 "),IV=n(fBe,"A",{href:!0});var oCt=s(IV);yPo=r(oCt,"XLMRobertaXLForMaskedLM"),oCt.forEach(t),xPo=r(fBe," (XLM-RoBERTa-XL model)"),fBe.forEach(t),$Po=i(O),M6=n(O,"LI",{});var mBe=s(M6);Vpe=n(mBe,"STRONG",{});var rCt=s(Vpe);kPo=r(rCt,"xlnet"),rCt.forEach(t),SPo=r(mBe," \u2014 "),NV=n(mBe,"A",{href:!0});var tCt=s(NV);RPo=r(tCt,"XLNetLMHeadModel"),tCt.forEach(t),PPo=r(mBe," (XLNet model)"),mBe.forEach(t),O.forEach(t),BPo=i(ha),E6=n(ha,"P",{});var gBe=s(E6);IPo=r(gBe,"The model is set in evaluation mode by default using "),Xpe=n(gBe,"CODE",{});var aCt=s(Xpe);NPo=r(aCt,"model.eval()"),aCt.forEach(t),qPo=r(gBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=n(gBe,"CODE",{});var nCt=s(zpe);jPo=r(nCt,"model.train()"),nCt.forEach(t),gBe.forEach(t),DPo=i(ha),T(C6.$$.fragment,ha),ha.forEach(t),pl.forEach(t),tUe=i(f),id=n(f,"H2",{class:!0});var gJe=s(id);w6=n(gJe,"A",{id:!0,class:!0,href:!0});var sCt=s(w6);Wpe=n(sCt,"SPAN",{});var lCt=s(Wpe);T(Hy.$$.fragment,lCt),lCt.forEach(t),sCt.forEach(t),GPo=i(gJe),Qpe=n(gJe,"SPAN",{});var iCt=s(Qpe);OPo=r(iCt,"AutoModelForCausalLM"),iCt.forEach(t),gJe.forEach(t),aUe=i(f),Po=n(f,"DIV",{class:!0});var _l=s(Po);T(Jy.$$.fragment,_l),VPo=i(_l),dd=n(_l,"P",{});var Xae=s(dd);XPo=r(Xae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qV=n(Xae,"A",{href:!0});var dCt=s(qV);zPo=r(dCt,"from_pretrained()"),dCt.forEach(t),WPo=r(Xae," class method or the "),jV=n(Xae,"A",{href:!0});var cCt=s(jV);QPo=r(cCt,"from_config()"),cCt.forEach(t),UPo=r(Xae,` class
method.`),Xae.forEach(t),HPo=i(_l),Yy=n(_l,"P",{});var hJe=s(Yy);JPo=r(hJe,"This class cannot be instantiated directly using "),Upe=n(hJe,"CODE",{});var fCt=s(Upe);YPo=r(fCt,"__init__()"),fCt.forEach(t),KPo=r(hJe," (throws an error)."),hJe.forEach(t),ZPo=i(_l),ht=n(_l,"DIV",{class:!0});var _7=s(ht);T(Ky.$$.fragment,_7),eBo=i(_7),Hpe=n(_7,"P",{});var mCt=s(Hpe);oBo=r(mCt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),mCt.forEach(t),rBo=i(_7),cd=n(_7,"P",{});var zae=s(cd);tBo=r(zae,`Note:
Loading a model from its configuration file does `),Jpe=n(zae,"STRONG",{});var gCt=s(Jpe);aBo=r(gCt,"not"),gCt.forEach(t),nBo=r(zae,` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=n(zae,"A",{href:!0});var hCt=s(DV);sBo=r(hCt,"from_pretrained()"),hCt.forEach(t),lBo=r(zae," to load the model weights."),zae.forEach(t),iBo=i(_7),T(A6.$$.fragment,_7),_7.forEach(t),dBo=i(_l),Ze=n(_l,"DIV",{class:!0});var pa=s(Ze);T(Zy.$$.fragment,pa),cBo=i(pa),Ype=n(pa,"P",{});var pCt=s(Ype);fBo=r(pCt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pCt.forEach(t),mBo=i(pa),za=n(pa,"P",{});var u7=s(za);gBo=r(u7,"The model class to instantiate is selected based on the "),Kpe=n(u7,"CODE",{});var _Ct=s(Kpe);hBo=r(_Ct,"model_type"),_Ct.forEach(t),pBo=r(u7,` property of the config object (either
passed as an argument or loaded from `),Zpe=n(u7,"CODE",{});var uCt=s(Zpe);_Bo=r(uCt,"pretrained_model_name_or_path"),uCt.forEach(t),uBo=r(u7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=n(u7,"CODE",{});var bCt=s(e_e);bBo=r(bCt,"pretrained_model_name_or_path"),bCt.forEach(t),vBo=r(u7,":"),u7.forEach(t),FBo=i(pa),z=n(pa,"UL",{});var W=s(z);L6=n(W,"LI",{});var hBe=s(L6);o_e=n(hBe,"STRONG",{});var vCt=s(o_e);TBo=r(vCt,"bart"),vCt.forEach(t),MBo=r(hBe," \u2014 "),GV=n(hBe,"A",{href:!0});var FCt=s(GV);EBo=r(FCt,"BartForCausalLM"),FCt.forEach(t),CBo=r(hBe," (BART model)"),hBe.forEach(t),wBo=i(W),y6=n(W,"LI",{});var pBe=s(y6);r_e=n(pBe,"STRONG",{});var TCt=s(r_e);ABo=r(TCt,"bert"),TCt.forEach(t),LBo=r(pBe," \u2014 "),OV=n(pBe,"A",{href:!0});var MCt=s(OV);yBo=r(MCt,"BertLMHeadModel"),MCt.forEach(t),xBo=r(pBe," (BERT model)"),pBe.forEach(t),$Bo=i(W),x6=n(W,"LI",{});var _Be=s(x6);t_e=n(_Be,"STRONG",{});var ECt=s(t_e);kBo=r(ECt,"bert-generation"),ECt.forEach(t),SBo=r(_Be," \u2014 "),VV=n(_Be,"A",{href:!0});var CCt=s(VV);RBo=r(CCt,"BertGenerationDecoder"),CCt.forEach(t),PBo=r(_Be," (Bert Generation model)"),_Be.forEach(t),BBo=i(W),$6=n(W,"LI",{});var uBe=s($6);a_e=n(uBe,"STRONG",{});var wCt=s(a_e);IBo=r(wCt,"big_bird"),wCt.forEach(t),NBo=r(uBe," \u2014 "),XV=n(uBe,"A",{href:!0});var ACt=s(XV);qBo=r(ACt,"BigBirdForCausalLM"),ACt.forEach(t),jBo=r(uBe," (BigBird model)"),uBe.forEach(t),DBo=i(W),k6=n(W,"LI",{});var bBe=s(k6);n_e=n(bBe,"STRONG",{});var LCt=s(n_e);GBo=r(LCt,"bigbird_pegasus"),LCt.forEach(t),OBo=r(bBe," \u2014 "),zV=n(bBe,"A",{href:!0});var yCt=s(zV);VBo=r(yCt,"BigBirdPegasusForCausalLM"),yCt.forEach(t),XBo=r(bBe," (BigBird-Pegasus model)"),bBe.forEach(t),zBo=i(W),S6=n(W,"LI",{});var vBe=s(S6);s_e=n(vBe,"STRONG",{});var xCt=s(s_e);WBo=r(xCt,"blenderbot"),xCt.forEach(t),QBo=r(vBe," \u2014 "),WV=n(vBe,"A",{href:!0});var $Ct=s(WV);UBo=r($Ct,"BlenderbotForCausalLM"),$Ct.forEach(t),HBo=r(vBe," (Blenderbot model)"),vBe.forEach(t),JBo=i(W),R6=n(W,"LI",{});var FBe=s(R6);l_e=n(FBe,"STRONG",{});var kCt=s(l_e);YBo=r(kCt,"blenderbot-small"),kCt.forEach(t),KBo=r(FBe," \u2014 "),QV=n(FBe,"A",{href:!0});var SCt=s(QV);ZBo=r(SCt,"BlenderbotSmallForCausalLM"),SCt.forEach(t),eIo=r(FBe," (BlenderbotSmall model)"),FBe.forEach(t),oIo=i(W),P6=n(W,"LI",{});var TBe=s(P6);i_e=n(TBe,"STRONG",{});var RCt=s(i_e);rIo=r(RCt,"bloom"),RCt.forEach(t),tIo=r(TBe," \u2014 "),UV=n(TBe,"A",{href:!0});var PCt=s(UV);aIo=r(PCt,"BloomForCausalLM"),PCt.forEach(t),nIo=r(TBe," (BLOOM model)"),TBe.forEach(t),sIo=i(W),B6=n(W,"LI",{});var MBe=s(B6);d_e=n(MBe,"STRONG",{});var BCt=s(d_e);lIo=r(BCt,"camembert"),BCt.forEach(t),iIo=r(MBe," \u2014 "),HV=n(MBe,"A",{href:!0});var ICt=s(HV);dIo=r(ICt,"CamembertForCausalLM"),ICt.forEach(t),cIo=r(MBe," (CamemBERT model)"),MBe.forEach(t),fIo=i(W),I6=n(W,"LI",{});var EBe=s(I6);c_e=n(EBe,"STRONG",{});var NCt=s(c_e);mIo=r(NCt,"codegen"),NCt.forEach(t),gIo=r(EBe," \u2014 "),JV=n(EBe,"A",{href:!0});var qCt=s(JV);hIo=r(qCt,"CodeGenForCausalLM"),qCt.forEach(t),pIo=r(EBe," (CodeGen model)"),EBe.forEach(t),_Io=i(W),N6=n(W,"LI",{});var CBe=s(N6);f_e=n(CBe,"STRONG",{});var jCt=s(f_e);uIo=r(jCt,"ctrl"),jCt.forEach(t),bIo=r(CBe," \u2014 "),YV=n(CBe,"A",{href:!0});var DCt=s(YV);vIo=r(DCt,"CTRLLMHeadModel"),DCt.forEach(t),FIo=r(CBe," (CTRL model)"),CBe.forEach(t),TIo=i(W),q6=n(W,"LI",{});var wBe=s(q6);m_e=n(wBe,"STRONG",{});var GCt=s(m_e);MIo=r(GCt,"data2vec-text"),GCt.forEach(t),EIo=r(wBe," \u2014 "),KV=n(wBe,"A",{href:!0});var OCt=s(KV);CIo=r(OCt,"Data2VecTextForCausalLM"),OCt.forEach(t),wIo=r(wBe," (Data2VecText model)"),wBe.forEach(t),AIo=i(W),j6=n(W,"LI",{});var ABe=s(j6);g_e=n(ABe,"STRONG",{});var VCt=s(g_e);LIo=r(VCt,"electra"),VCt.forEach(t),yIo=r(ABe," \u2014 "),ZV=n(ABe,"A",{href:!0});var XCt=s(ZV);xIo=r(XCt,"ElectraForCausalLM"),XCt.forEach(t),$Io=r(ABe," (ELECTRA model)"),ABe.forEach(t),kIo=i(W),D6=n(W,"LI",{});var LBe=s(D6);h_e=n(LBe,"STRONG",{});var zCt=s(h_e);SIo=r(zCt,"gpt2"),zCt.forEach(t),RIo=r(LBe," \u2014 "),eX=n(LBe,"A",{href:!0});var WCt=s(eX);PIo=r(WCt,"GPT2LMHeadModel"),WCt.forEach(t),BIo=r(LBe," (OpenAI GPT-2 model)"),LBe.forEach(t),IIo=i(W),G6=n(W,"LI",{});var yBe=s(G6);p_e=n(yBe,"STRONG",{});var QCt=s(p_e);NIo=r(QCt,"gpt_neo"),QCt.forEach(t),qIo=r(yBe," \u2014 "),oX=n(yBe,"A",{href:!0});var UCt=s(oX);jIo=r(UCt,"GPTNeoForCausalLM"),UCt.forEach(t),DIo=r(yBe," (GPT Neo model)"),yBe.forEach(t),GIo=i(W),O6=n(W,"LI",{});var xBe=s(O6);__e=n(xBe,"STRONG",{});var HCt=s(__e);OIo=r(HCt,"gpt_neox"),HCt.forEach(t),VIo=r(xBe," \u2014 "),rX=n(xBe,"A",{href:!0});var JCt=s(rX);XIo=r(JCt,"GPTNeoXForCausalLM"),JCt.forEach(t),zIo=r(xBe," (GPT NeoX model)"),xBe.forEach(t),WIo=i(W),V6=n(W,"LI",{});var $Be=s(V6);u_e=n($Be,"STRONG",{});var YCt=s(u_e);QIo=r(YCt,"gptj"),YCt.forEach(t),UIo=r($Be," \u2014 "),tX=n($Be,"A",{href:!0});var KCt=s(tX);HIo=r(KCt,"GPTJForCausalLM"),KCt.forEach(t),JIo=r($Be," (GPT-J model)"),$Be.forEach(t),YIo=i(W),X6=n(W,"LI",{});var kBe=s(X6);b_e=n(kBe,"STRONG",{});var ZCt=s(b_e);KIo=r(ZCt,"marian"),ZCt.forEach(t),ZIo=r(kBe," \u2014 "),aX=n(kBe,"A",{href:!0});var e3t=s(aX);eNo=r(e3t,"MarianForCausalLM"),e3t.forEach(t),oNo=r(kBe," (Marian model)"),kBe.forEach(t),rNo=i(W),z6=n(W,"LI",{});var SBe=s(z6);v_e=n(SBe,"STRONG",{});var o3t=s(v_e);tNo=r(o3t,"mbart"),o3t.forEach(t),aNo=r(SBe," \u2014 "),nX=n(SBe,"A",{href:!0});var r3t=s(nX);nNo=r(r3t,"MBartForCausalLM"),r3t.forEach(t),sNo=r(SBe," (mBART model)"),SBe.forEach(t),lNo=i(W),W6=n(W,"LI",{});var RBe=s(W6);F_e=n(RBe,"STRONG",{});var t3t=s(F_e);iNo=r(t3t,"megatron-bert"),t3t.forEach(t),dNo=r(RBe," \u2014 "),sX=n(RBe,"A",{href:!0});var a3t=s(sX);cNo=r(a3t,"MegatronBertForCausalLM"),a3t.forEach(t),fNo=r(RBe," (Megatron-BERT model)"),RBe.forEach(t),mNo=i(W),Q6=n(W,"LI",{});var PBe=s(Q6);T_e=n(PBe,"STRONG",{});var n3t=s(T_e);gNo=r(n3t,"mvp"),n3t.forEach(t),hNo=r(PBe," \u2014 "),lX=n(PBe,"A",{href:!0});var s3t=s(lX);pNo=r(s3t,"MvpForCausalLM"),s3t.forEach(t),_No=r(PBe," (MVP model)"),PBe.forEach(t),uNo=i(W),U6=n(W,"LI",{});var BBe=s(U6);M_e=n(BBe,"STRONG",{});var l3t=s(M_e);bNo=r(l3t,"openai-gpt"),l3t.forEach(t),vNo=r(BBe," \u2014 "),iX=n(BBe,"A",{href:!0});var i3t=s(iX);FNo=r(i3t,"OpenAIGPTLMHeadModel"),i3t.forEach(t),TNo=r(BBe," (OpenAI GPT model)"),BBe.forEach(t),MNo=i(W),H6=n(W,"LI",{});var IBe=s(H6);E_e=n(IBe,"STRONG",{});var d3t=s(E_e);ENo=r(d3t,"opt"),d3t.forEach(t),CNo=r(IBe," \u2014 "),dX=n(IBe,"A",{href:!0});var c3t=s(dX);wNo=r(c3t,"OPTForCausalLM"),c3t.forEach(t),ANo=r(IBe," (OPT model)"),IBe.forEach(t),LNo=i(W),J6=n(W,"LI",{});var NBe=s(J6);C_e=n(NBe,"STRONG",{});var f3t=s(C_e);yNo=r(f3t,"pegasus"),f3t.forEach(t),xNo=r(NBe," \u2014 "),cX=n(NBe,"A",{href:!0});var m3t=s(cX);$No=r(m3t,"PegasusForCausalLM"),m3t.forEach(t),kNo=r(NBe," (Pegasus model)"),NBe.forEach(t),SNo=i(W),Y6=n(W,"LI",{});var qBe=s(Y6);w_e=n(qBe,"STRONG",{});var g3t=s(w_e);RNo=r(g3t,"plbart"),g3t.forEach(t),PNo=r(qBe," \u2014 "),fX=n(qBe,"A",{href:!0});var h3t=s(fX);BNo=r(h3t,"PLBartForCausalLM"),h3t.forEach(t),INo=r(qBe," (PLBart model)"),qBe.forEach(t),NNo=i(W),K6=n(W,"LI",{});var jBe=s(K6);A_e=n(jBe,"STRONG",{});var p3t=s(A_e);qNo=r(p3t,"prophetnet"),p3t.forEach(t),jNo=r(jBe," \u2014 "),mX=n(jBe,"A",{href:!0});var _3t=s(mX);DNo=r(_3t,"ProphetNetForCausalLM"),_3t.forEach(t),GNo=r(jBe," (ProphetNet model)"),jBe.forEach(t),ONo=i(W),Z6=n(W,"LI",{});var DBe=s(Z6);L_e=n(DBe,"STRONG",{});var u3t=s(L_e);VNo=r(u3t,"qdqbert"),u3t.forEach(t),XNo=r(DBe," \u2014 "),gX=n(DBe,"A",{href:!0});var b3t=s(gX);zNo=r(b3t,"QDQBertLMHeadModel"),b3t.forEach(t),WNo=r(DBe," (QDQBert model)"),DBe.forEach(t),QNo=i(W),e8=n(W,"LI",{});var GBe=s(e8);y_e=n(GBe,"STRONG",{});var v3t=s(y_e);UNo=r(v3t,"reformer"),v3t.forEach(t),HNo=r(GBe," \u2014 "),hX=n(GBe,"A",{href:!0});var F3t=s(hX);JNo=r(F3t,"ReformerModelWithLMHead"),F3t.forEach(t),YNo=r(GBe," (Reformer model)"),GBe.forEach(t),KNo=i(W),o8=n(W,"LI",{});var OBe=s(o8);x_e=n(OBe,"STRONG",{});var T3t=s(x_e);ZNo=r(T3t,"rembert"),T3t.forEach(t),eqo=r(OBe," \u2014 "),pX=n(OBe,"A",{href:!0});var M3t=s(pX);oqo=r(M3t,"RemBertForCausalLM"),M3t.forEach(t),rqo=r(OBe," (RemBERT model)"),OBe.forEach(t),tqo=i(W),r8=n(W,"LI",{});var VBe=s(r8);$_e=n(VBe,"STRONG",{});var E3t=s($_e);aqo=r(E3t,"roberta"),E3t.forEach(t),nqo=r(VBe," \u2014 "),_X=n(VBe,"A",{href:!0});var C3t=s(_X);sqo=r(C3t,"RobertaForCausalLM"),C3t.forEach(t),lqo=r(VBe," (RoBERTa model)"),VBe.forEach(t),iqo=i(W),t8=n(W,"LI",{});var XBe=s(t8);k_e=n(XBe,"STRONG",{});var w3t=s(k_e);dqo=r(w3t,"roformer"),w3t.forEach(t),cqo=r(XBe," \u2014 "),uX=n(XBe,"A",{href:!0});var A3t=s(uX);fqo=r(A3t,"RoFormerForCausalLM"),A3t.forEach(t),mqo=r(XBe," (RoFormer model)"),XBe.forEach(t),gqo=i(W),a8=n(W,"LI",{});var zBe=s(a8);S_e=n(zBe,"STRONG",{});var L3t=s(S_e);hqo=r(L3t,"speech_to_text_2"),L3t.forEach(t),pqo=r(zBe," \u2014 "),bX=n(zBe,"A",{href:!0});var y3t=s(bX);_qo=r(y3t,"Speech2Text2ForCausalLM"),y3t.forEach(t),uqo=r(zBe," (Speech2Text2 model)"),zBe.forEach(t),bqo=i(W),n8=n(W,"LI",{});var WBe=s(n8);R_e=n(WBe,"STRONG",{});var x3t=s(R_e);vqo=r(x3t,"transfo-xl"),x3t.forEach(t),Fqo=r(WBe," \u2014 "),vX=n(WBe,"A",{href:!0});var $3t=s(vX);Tqo=r($3t,"TransfoXLLMHeadModel"),$3t.forEach(t),Mqo=r(WBe," (Transformer-XL model)"),WBe.forEach(t),Eqo=i(W),s8=n(W,"LI",{});var QBe=s(s8);P_e=n(QBe,"STRONG",{});var k3t=s(P_e);Cqo=r(k3t,"trocr"),k3t.forEach(t),wqo=r(QBe," \u2014 "),FX=n(QBe,"A",{href:!0});var S3t=s(FX);Aqo=r(S3t,"TrOCRForCausalLM"),S3t.forEach(t),Lqo=r(QBe," (TrOCR model)"),QBe.forEach(t),yqo=i(W),l8=n(W,"LI",{});var UBe=s(l8);B_e=n(UBe,"STRONG",{});var R3t=s(B_e);xqo=r(R3t,"xglm"),R3t.forEach(t),$qo=r(UBe," \u2014 "),TX=n(UBe,"A",{href:!0});var P3t=s(TX);kqo=r(P3t,"XGLMForCausalLM"),P3t.forEach(t),Sqo=r(UBe," (XGLM model)"),UBe.forEach(t),Rqo=i(W),i8=n(W,"LI",{});var HBe=s(i8);I_e=n(HBe,"STRONG",{});var B3t=s(I_e);Pqo=r(B3t,"xlm"),B3t.forEach(t),Bqo=r(HBe," \u2014 "),MX=n(HBe,"A",{href:!0});var I3t=s(MX);Iqo=r(I3t,"XLMWithLMHeadModel"),I3t.forEach(t),Nqo=r(HBe," (XLM model)"),HBe.forEach(t),qqo=i(W),d8=n(W,"LI",{});var JBe=s(d8);N_e=n(JBe,"STRONG",{});var N3t=s(N_e);jqo=r(N3t,"xlm-prophetnet"),N3t.forEach(t),Dqo=r(JBe," \u2014 "),EX=n(JBe,"A",{href:!0});var q3t=s(EX);Gqo=r(q3t,"XLMProphetNetForCausalLM"),q3t.forEach(t),Oqo=r(JBe," (XLM-ProphetNet model)"),JBe.forEach(t),Vqo=i(W),c8=n(W,"LI",{});var YBe=s(c8);q_e=n(YBe,"STRONG",{});var j3t=s(q_e);Xqo=r(j3t,"xlm-roberta"),j3t.forEach(t),zqo=r(YBe," \u2014 "),CX=n(YBe,"A",{href:!0});var D3t=s(CX);Wqo=r(D3t,"XLMRobertaForCausalLM"),D3t.forEach(t),Qqo=r(YBe," (XLM-RoBERTa model)"),YBe.forEach(t),Uqo=i(W),f8=n(W,"LI",{});var KBe=s(f8);j_e=n(KBe,"STRONG",{});var G3t=s(j_e);Hqo=r(G3t,"xlm-roberta-xl"),G3t.forEach(t),Jqo=r(KBe," \u2014 "),wX=n(KBe,"A",{href:!0});var O3t=s(wX);Yqo=r(O3t,"XLMRobertaXLForCausalLM"),O3t.forEach(t),Kqo=r(KBe," (XLM-RoBERTa-XL model)"),KBe.forEach(t),Zqo=i(W),m8=n(W,"LI",{});var ZBe=s(m8);D_e=n(ZBe,"STRONG",{});var V3t=s(D_e);ejo=r(V3t,"xlnet"),V3t.forEach(t),ojo=r(ZBe," \u2014 "),AX=n(ZBe,"A",{href:!0});var X3t=s(AX);rjo=r(X3t,"XLNetLMHeadModel"),X3t.forEach(t),tjo=r(ZBe," (XLNet model)"),ZBe.forEach(t),W.forEach(t),ajo=i(pa),g8=n(pa,"P",{});var eIe=s(g8);njo=r(eIe,"The model is set in evaluation mode by default using "),G_e=n(eIe,"CODE",{});var z3t=s(G_e);sjo=r(z3t,"model.eval()"),z3t.forEach(t),ljo=r(eIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=n(eIe,"CODE",{});var W3t=s(O_e);ijo=r(W3t,"model.train()"),W3t.forEach(t),eIe.forEach(t),djo=i(pa),T(h8.$$.fragment,pa),pa.forEach(t),_l.forEach(t),nUe=i(f),fd=n(f,"H2",{class:!0});var pJe=s(fd);p8=n(pJe,"A",{id:!0,class:!0,href:!0});var Q3t=s(p8);V_e=n(Q3t,"SPAN",{});var U3t=s(V_e);T(e9.$$.fragment,U3t),U3t.forEach(t),Q3t.forEach(t),cjo=i(pJe),X_e=n(pJe,"SPAN",{});var H3t=s(X_e);fjo=r(H3t,"AutoModelForMaskedLM"),H3t.forEach(t),pJe.forEach(t),sUe=i(f),Bo=n(f,"DIV",{class:!0});var ul=s(Bo);T(o9.$$.fragment,ul),mjo=i(ul),md=n(ul,"P",{});var Wae=s(md);gjo=r(Wae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LX=n(Wae,"A",{href:!0});var J3t=s(LX);hjo=r(J3t,"from_pretrained()"),J3t.forEach(t),pjo=r(Wae," class method or the "),yX=n(Wae,"A",{href:!0});var Y3t=s(yX);_jo=r(Y3t,"from_config()"),Y3t.forEach(t),ujo=r(Wae,` class
method.`),Wae.forEach(t),bjo=i(ul),r9=n(ul,"P",{});var _Je=s(r9);vjo=r(_Je,"This class cannot be instantiated directly using "),z_e=n(_Je,"CODE",{});var K3t=s(z_e);Fjo=r(K3t,"__init__()"),K3t.forEach(t),Tjo=r(_Je," (throws an error)."),_Je.forEach(t),Mjo=i(ul),pt=n(ul,"DIV",{class:!0});var b7=s(pt);T(t9.$$.fragment,b7),Ejo=i(b7),W_e=n(b7,"P",{});var Z3t=s(W_e);Cjo=r(Z3t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Z3t.forEach(t),wjo=i(b7),gd=n(b7,"P",{});var Qae=s(gd);Ajo=r(Qae,`Note:
Loading a model from its configuration file does `),Q_e=n(Qae,"STRONG",{});var e5t=s(Q_e);Ljo=r(e5t,"not"),e5t.forEach(t),yjo=r(Qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),xX=n(Qae,"A",{href:!0});var o5t=s(xX);xjo=r(o5t,"from_pretrained()"),o5t.forEach(t),$jo=r(Qae," to load the model weights."),Qae.forEach(t),kjo=i(b7),T(_8.$$.fragment,b7),b7.forEach(t),Sjo=i(ul),eo=n(ul,"DIV",{class:!0});var _a=s(eo);T(a9.$$.fragment,_a),Rjo=i(_a),U_e=n(_a,"P",{});var r5t=s(U_e);Pjo=r(r5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),r5t.forEach(t),Bjo=i(_a),Wa=n(_a,"P",{});var v7=s(Wa);Ijo=r(v7,"The model class to instantiate is selected based on the "),H_e=n(v7,"CODE",{});var t5t=s(H_e);Njo=r(t5t,"model_type"),t5t.forEach(t),qjo=r(v7,` property of the config object (either
passed as an argument or loaded from `),J_e=n(v7,"CODE",{});var a5t=s(J_e);jjo=r(a5t,"pretrained_model_name_or_path"),a5t.forEach(t),Djo=r(v7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=n(v7,"CODE",{});var n5t=s(Y_e);Gjo=r(n5t,"pretrained_model_name_or_path"),n5t.forEach(t),Ojo=r(v7,":"),v7.forEach(t),Vjo=i(_a),U=n(_a,"UL",{});var Y=s(U);u8=n(Y,"LI",{});var oIe=s(u8);K_e=n(oIe,"STRONG",{});var s5t=s(K_e);Xjo=r(s5t,"albert"),s5t.forEach(t),zjo=r(oIe," \u2014 "),$X=n(oIe,"A",{href:!0});var l5t=s($X);Wjo=r(l5t,"AlbertForMaskedLM"),l5t.forEach(t),Qjo=r(oIe," (ALBERT model)"),oIe.forEach(t),Ujo=i(Y),b8=n(Y,"LI",{});var rIe=s(b8);Z_e=n(rIe,"STRONG",{});var i5t=s(Z_e);Hjo=r(i5t,"bart"),i5t.forEach(t),Jjo=r(rIe," \u2014 "),kX=n(rIe,"A",{href:!0});var d5t=s(kX);Yjo=r(d5t,"BartForConditionalGeneration"),d5t.forEach(t),Kjo=r(rIe," (BART model)"),rIe.forEach(t),Zjo=i(Y),v8=n(Y,"LI",{});var tIe=s(v8);eue=n(tIe,"STRONG",{});var c5t=s(eue);eDo=r(c5t,"bert"),c5t.forEach(t),oDo=r(tIe," \u2014 "),SX=n(tIe,"A",{href:!0});var f5t=s(SX);rDo=r(f5t,"BertForMaskedLM"),f5t.forEach(t),tDo=r(tIe," (BERT model)"),tIe.forEach(t),aDo=i(Y),F8=n(Y,"LI",{});var aIe=s(F8);oue=n(aIe,"STRONG",{});var m5t=s(oue);nDo=r(m5t,"big_bird"),m5t.forEach(t),sDo=r(aIe," \u2014 "),RX=n(aIe,"A",{href:!0});var g5t=s(RX);lDo=r(g5t,"BigBirdForMaskedLM"),g5t.forEach(t),iDo=r(aIe," (BigBird model)"),aIe.forEach(t),dDo=i(Y),T8=n(Y,"LI",{});var nIe=s(T8);rue=n(nIe,"STRONG",{});var h5t=s(rue);cDo=r(h5t,"camembert"),h5t.forEach(t),fDo=r(nIe," \u2014 "),PX=n(nIe,"A",{href:!0});var p5t=s(PX);mDo=r(p5t,"CamembertForMaskedLM"),p5t.forEach(t),gDo=r(nIe," (CamemBERT model)"),nIe.forEach(t),hDo=i(Y),M8=n(Y,"LI",{});var sIe=s(M8);tue=n(sIe,"STRONG",{});var _5t=s(tue);pDo=r(_5t,"convbert"),_5t.forEach(t),_Do=r(sIe," \u2014 "),BX=n(sIe,"A",{href:!0});var u5t=s(BX);uDo=r(u5t,"ConvBertForMaskedLM"),u5t.forEach(t),bDo=r(sIe," (ConvBERT model)"),sIe.forEach(t),vDo=i(Y),E8=n(Y,"LI",{});var lIe=s(E8);aue=n(lIe,"STRONG",{});var b5t=s(aue);FDo=r(b5t,"data2vec-text"),b5t.forEach(t),TDo=r(lIe," \u2014 "),IX=n(lIe,"A",{href:!0});var v5t=s(IX);MDo=r(v5t,"Data2VecTextForMaskedLM"),v5t.forEach(t),EDo=r(lIe," (Data2VecText model)"),lIe.forEach(t),CDo=i(Y),C8=n(Y,"LI",{});var iIe=s(C8);nue=n(iIe,"STRONG",{});var F5t=s(nue);wDo=r(F5t,"deberta"),F5t.forEach(t),ADo=r(iIe," \u2014 "),NX=n(iIe,"A",{href:!0});var T5t=s(NX);LDo=r(T5t,"DebertaForMaskedLM"),T5t.forEach(t),yDo=r(iIe," (DeBERTa model)"),iIe.forEach(t),xDo=i(Y),w8=n(Y,"LI",{});var dIe=s(w8);sue=n(dIe,"STRONG",{});var M5t=s(sue);$Do=r(M5t,"deberta-v2"),M5t.forEach(t),kDo=r(dIe," \u2014 "),qX=n(dIe,"A",{href:!0});var E5t=s(qX);SDo=r(E5t,"DebertaV2ForMaskedLM"),E5t.forEach(t),RDo=r(dIe," (DeBERTa-v2 model)"),dIe.forEach(t),PDo=i(Y),A8=n(Y,"LI",{});var cIe=s(A8);lue=n(cIe,"STRONG",{});var C5t=s(lue);BDo=r(C5t,"distilbert"),C5t.forEach(t),IDo=r(cIe," \u2014 "),jX=n(cIe,"A",{href:!0});var w5t=s(jX);NDo=r(w5t,"DistilBertForMaskedLM"),w5t.forEach(t),qDo=r(cIe," (DistilBERT model)"),cIe.forEach(t),jDo=i(Y),L8=n(Y,"LI",{});var fIe=s(L8);iue=n(fIe,"STRONG",{});var A5t=s(iue);DDo=r(A5t,"electra"),A5t.forEach(t),GDo=r(fIe," \u2014 "),DX=n(fIe,"A",{href:!0});var L5t=s(DX);ODo=r(L5t,"ElectraForMaskedLM"),L5t.forEach(t),VDo=r(fIe," (ELECTRA model)"),fIe.forEach(t),XDo=i(Y),y8=n(Y,"LI",{});var mIe=s(y8);due=n(mIe,"STRONG",{});var y5t=s(due);zDo=r(y5t,"flaubert"),y5t.forEach(t),WDo=r(mIe," \u2014 "),GX=n(mIe,"A",{href:!0});var x5t=s(GX);QDo=r(x5t,"FlaubertWithLMHeadModel"),x5t.forEach(t),UDo=r(mIe," (FlauBERT model)"),mIe.forEach(t),HDo=i(Y),x8=n(Y,"LI",{});var gIe=s(x8);cue=n(gIe,"STRONG",{});var $5t=s(cue);JDo=r($5t,"fnet"),$5t.forEach(t),YDo=r(gIe," \u2014 "),OX=n(gIe,"A",{href:!0});var k5t=s(OX);KDo=r(k5t,"FNetForMaskedLM"),k5t.forEach(t),ZDo=r(gIe," (FNet model)"),gIe.forEach(t),eGo=i(Y),$8=n(Y,"LI",{});var hIe=s($8);fue=n(hIe,"STRONG",{});var S5t=s(fue);oGo=r(S5t,"funnel"),S5t.forEach(t),rGo=r(hIe," \u2014 "),VX=n(hIe,"A",{href:!0});var R5t=s(VX);tGo=r(R5t,"FunnelForMaskedLM"),R5t.forEach(t),aGo=r(hIe," (Funnel Transformer model)"),hIe.forEach(t),nGo=i(Y),k8=n(Y,"LI",{});var pIe=s(k8);mue=n(pIe,"STRONG",{});var P5t=s(mue);sGo=r(P5t,"ibert"),P5t.forEach(t),lGo=r(pIe," \u2014 "),XX=n(pIe,"A",{href:!0});var B5t=s(XX);iGo=r(B5t,"IBertForMaskedLM"),B5t.forEach(t),dGo=r(pIe," (I-BERT model)"),pIe.forEach(t),cGo=i(Y),S8=n(Y,"LI",{});var _Ie=s(S8);gue=n(_Ie,"STRONG",{});var I5t=s(gue);fGo=r(I5t,"layoutlm"),I5t.forEach(t),mGo=r(_Ie," \u2014 "),zX=n(_Ie,"A",{href:!0});var N5t=s(zX);gGo=r(N5t,"LayoutLMForMaskedLM"),N5t.forEach(t),hGo=r(_Ie," (LayoutLM model)"),_Ie.forEach(t),pGo=i(Y),R8=n(Y,"LI",{});var uIe=s(R8);hue=n(uIe,"STRONG",{});var q5t=s(hue);_Go=r(q5t,"longformer"),q5t.forEach(t),uGo=r(uIe," \u2014 "),WX=n(uIe,"A",{href:!0});var j5t=s(WX);bGo=r(j5t,"LongformerForMaskedLM"),j5t.forEach(t),vGo=r(uIe," (Longformer model)"),uIe.forEach(t),FGo=i(Y),P8=n(Y,"LI",{});var bIe=s(P8);pue=n(bIe,"STRONG",{});var D5t=s(pue);TGo=r(D5t,"luke"),D5t.forEach(t),MGo=r(bIe," \u2014 "),QX=n(bIe,"A",{href:!0});var G5t=s(QX);EGo=r(G5t,"LukeForMaskedLM"),G5t.forEach(t),CGo=r(bIe," (LUKE model)"),bIe.forEach(t),wGo=i(Y),B8=n(Y,"LI",{});var vIe=s(B8);_ue=n(vIe,"STRONG",{});var O5t=s(_ue);AGo=r(O5t,"mbart"),O5t.forEach(t),LGo=r(vIe," \u2014 "),UX=n(vIe,"A",{href:!0});var V5t=s(UX);yGo=r(V5t,"MBartForConditionalGeneration"),V5t.forEach(t),xGo=r(vIe," (mBART model)"),vIe.forEach(t),$Go=i(Y),I8=n(Y,"LI",{});var FIe=s(I8);uue=n(FIe,"STRONG",{});var X5t=s(uue);kGo=r(X5t,"megatron-bert"),X5t.forEach(t),SGo=r(FIe," \u2014 "),HX=n(FIe,"A",{href:!0});var z5t=s(HX);RGo=r(z5t,"MegatronBertForMaskedLM"),z5t.forEach(t),PGo=r(FIe," (Megatron-BERT model)"),FIe.forEach(t),BGo=i(Y),N8=n(Y,"LI",{});var TIe=s(N8);bue=n(TIe,"STRONG",{});var W5t=s(bue);IGo=r(W5t,"mobilebert"),W5t.forEach(t),NGo=r(TIe," \u2014 "),JX=n(TIe,"A",{href:!0});var Q5t=s(JX);qGo=r(Q5t,"MobileBertForMaskedLM"),Q5t.forEach(t),jGo=r(TIe," (MobileBERT model)"),TIe.forEach(t),DGo=i(Y),q8=n(Y,"LI",{});var MIe=s(q8);vue=n(MIe,"STRONG",{});var U5t=s(vue);GGo=r(U5t,"mpnet"),U5t.forEach(t),OGo=r(MIe," \u2014 "),YX=n(MIe,"A",{href:!0});var H5t=s(YX);VGo=r(H5t,"MPNetForMaskedLM"),H5t.forEach(t),XGo=r(MIe," (MPNet model)"),MIe.forEach(t),zGo=i(Y),j8=n(Y,"LI",{});var EIe=s(j8);Fue=n(EIe,"STRONG",{});var J5t=s(Fue);WGo=r(J5t,"mvp"),J5t.forEach(t),QGo=r(EIe," \u2014 "),KX=n(EIe,"A",{href:!0});var Y5t=s(KX);UGo=r(Y5t,"MvpForConditionalGeneration"),Y5t.forEach(t),HGo=r(EIe," (MVP model)"),EIe.forEach(t),JGo=i(Y),D8=n(Y,"LI",{});var CIe=s(D8);Tue=n(CIe,"STRONG",{});var K5t=s(Tue);YGo=r(K5t,"nezha"),K5t.forEach(t),KGo=r(CIe," \u2014 "),ZX=n(CIe,"A",{href:!0});var Z5t=s(ZX);ZGo=r(Z5t,"NezhaForMaskedLM"),Z5t.forEach(t),eOo=r(CIe," (Nezha model)"),CIe.forEach(t),oOo=i(Y),G8=n(Y,"LI",{});var wIe=s(G8);Mue=n(wIe,"STRONG",{});var e0t=s(Mue);rOo=r(e0t,"nystromformer"),e0t.forEach(t),tOo=r(wIe," \u2014 "),ez=n(wIe,"A",{href:!0});var o0t=s(ez);aOo=r(o0t,"NystromformerForMaskedLM"),o0t.forEach(t),nOo=r(wIe," (Nystr\xF6mformer model)"),wIe.forEach(t),sOo=i(Y),O8=n(Y,"LI",{});var AIe=s(O8);Eue=n(AIe,"STRONG",{});var r0t=s(Eue);lOo=r(r0t,"perceiver"),r0t.forEach(t),iOo=r(AIe," \u2014 "),oz=n(AIe,"A",{href:!0});var t0t=s(oz);dOo=r(t0t,"PerceiverForMaskedLM"),t0t.forEach(t),cOo=r(AIe," (Perceiver model)"),AIe.forEach(t),fOo=i(Y),V8=n(Y,"LI",{});var LIe=s(V8);Cue=n(LIe,"STRONG",{});var a0t=s(Cue);mOo=r(a0t,"qdqbert"),a0t.forEach(t),gOo=r(LIe," \u2014 "),rz=n(LIe,"A",{href:!0});var n0t=s(rz);hOo=r(n0t,"QDQBertForMaskedLM"),n0t.forEach(t),pOo=r(LIe," (QDQBert model)"),LIe.forEach(t),_Oo=i(Y),X8=n(Y,"LI",{});var yIe=s(X8);wue=n(yIe,"STRONG",{});var s0t=s(wue);uOo=r(s0t,"reformer"),s0t.forEach(t),bOo=r(yIe," \u2014 "),tz=n(yIe,"A",{href:!0});var l0t=s(tz);vOo=r(l0t,"ReformerForMaskedLM"),l0t.forEach(t),FOo=r(yIe," (Reformer model)"),yIe.forEach(t),TOo=i(Y),z8=n(Y,"LI",{});var xIe=s(z8);Aue=n(xIe,"STRONG",{});var i0t=s(Aue);MOo=r(i0t,"rembert"),i0t.forEach(t),EOo=r(xIe," \u2014 "),az=n(xIe,"A",{href:!0});var d0t=s(az);COo=r(d0t,"RemBertForMaskedLM"),d0t.forEach(t),wOo=r(xIe," (RemBERT model)"),xIe.forEach(t),AOo=i(Y),W8=n(Y,"LI",{});var $Ie=s(W8);Lue=n($Ie,"STRONG",{});var c0t=s(Lue);LOo=r(c0t,"roberta"),c0t.forEach(t),yOo=r($Ie," \u2014 "),nz=n($Ie,"A",{href:!0});var f0t=s(nz);xOo=r(f0t,"RobertaForMaskedLM"),f0t.forEach(t),$Oo=r($Ie," (RoBERTa model)"),$Ie.forEach(t),kOo=i(Y),Q8=n(Y,"LI",{});var kIe=s(Q8);yue=n(kIe,"STRONG",{});var m0t=s(yue);SOo=r(m0t,"roformer"),m0t.forEach(t),ROo=r(kIe," \u2014 "),sz=n(kIe,"A",{href:!0});var g0t=s(sz);POo=r(g0t,"RoFormerForMaskedLM"),g0t.forEach(t),BOo=r(kIe," (RoFormer model)"),kIe.forEach(t),IOo=i(Y),U8=n(Y,"LI",{});var SIe=s(U8);xue=n(SIe,"STRONG",{});var h0t=s(xue);NOo=r(h0t,"squeezebert"),h0t.forEach(t),qOo=r(SIe," \u2014 "),lz=n(SIe,"A",{href:!0});var p0t=s(lz);jOo=r(p0t,"SqueezeBertForMaskedLM"),p0t.forEach(t),DOo=r(SIe," (SqueezeBERT model)"),SIe.forEach(t),GOo=i(Y),H8=n(Y,"LI",{});var RIe=s(H8);$ue=n(RIe,"STRONG",{});var _0t=s($ue);OOo=r(_0t,"tapas"),_0t.forEach(t),VOo=r(RIe," \u2014 "),iz=n(RIe,"A",{href:!0});var u0t=s(iz);XOo=r(u0t,"TapasForMaskedLM"),u0t.forEach(t),zOo=r(RIe," (TAPAS model)"),RIe.forEach(t),WOo=i(Y),J8=n(Y,"LI",{});var PIe=s(J8);kue=n(PIe,"STRONG",{});var b0t=s(kue);QOo=r(b0t,"wav2vec2"),b0t.forEach(t),UOo=r(PIe," \u2014 "),Sue=n(PIe,"CODE",{});var v0t=s(Sue);HOo=r(v0t,"Wav2Vec2ForMaskedLM"),v0t.forEach(t),JOo=r(PIe," (Wav2Vec2 model)"),PIe.forEach(t),YOo=i(Y),Y8=n(Y,"LI",{});var BIe=s(Y8);Rue=n(BIe,"STRONG",{});var F0t=s(Rue);KOo=r(F0t,"xlm"),F0t.forEach(t),ZOo=r(BIe," \u2014 "),dz=n(BIe,"A",{href:!0});var T0t=s(dz);eVo=r(T0t,"XLMWithLMHeadModel"),T0t.forEach(t),oVo=r(BIe," (XLM model)"),BIe.forEach(t),rVo=i(Y),K8=n(Y,"LI",{});var IIe=s(K8);Pue=n(IIe,"STRONG",{});var M0t=s(Pue);tVo=r(M0t,"xlm-roberta"),M0t.forEach(t),aVo=r(IIe," \u2014 "),cz=n(IIe,"A",{href:!0});var E0t=s(cz);nVo=r(E0t,"XLMRobertaForMaskedLM"),E0t.forEach(t),sVo=r(IIe," (XLM-RoBERTa model)"),IIe.forEach(t),lVo=i(Y),Z8=n(Y,"LI",{});var NIe=s(Z8);Bue=n(NIe,"STRONG",{});var C0t=s(Bue);iVo=r(C0t,"xlm-roberta-xl"),C0t.forEach(t),dVo=r(NIe," \u2014 "),fz=n(NIe,"A",{href:!0});var w0t=s(fz);cVo=r(w0t,"XLMRobertaXLForMaskedLM"),w0t.forEach(t),fVo=r(NIe," (XLM-RoBERTa-XL model)"),NIe.forEach(t),mVo=i(Y),e2=n(Y,"LI",{});var qIe=s(e2);Iue=n(qIe,"STRONG",{});var A0t=s(Iue);gVo=r(A0t,"yoso"),A0t.forEach(t),hVo=r(qIe," \u2014 "),mz=n(qIe,"A",{href:!0});var L0t=s(mz);pVo=r(L0t,"YosoForMaskedLM"),L0t.forEach(t),_Vo=r(qIe," (YOSO model)"),qIe.forEach(t),Y.forEach(t),uVo=i(_a),o2=n(_a,"P",{});var jIe=s(o2);bVo=r(jIe,"The model is set in evaluation mode by default using "),Nue=n(jIe,"CODE",{});var y0t=s(Nue);vVo=r(y0t,"model.eval()"),y0t.forEach(t),FVo=r(jIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),que=n(jIe,"CODE",{});var x0t=s(que);TVo=r(x0t,"model.train()"),x0t.forEach(t),jIe.forEach(t),MVo=i(_a),T(r2.$$.fragment,_a),_a.forEach(t),ul.forEach(t),lUe=i(f),hd=n(f,"H2",{class:!0});var uJe=s(hd);t2=n(uJe,"A",{id:!0,class:!0,href:!0});var $0t=s(t2);jue=n($0t,"SPAN",{});var k0t=s(jue);T(n9.$$.fragment,k0t),k0t.forEach(t),$0t.forEach(t),EVo=i(uJe),Due=n(uJe,"SPAN",{});var S0t=s(Due);CVo=r(S0t,"AutoModelForSeq2SeqLM"),S0t.forEach(t),uJe.forEach(t),iUe=i(f),Io=n(f,"DIV",{class:!0});var bl=s(Io);T(s9.$$.fragment,bl),wVo=i(bl),pd=n(bl,"P",{});var Uae=s(pd);AVo=r(Uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gz=n(Uae,"A",{href:!0});var R0t=s(gz);LVo=r(R0t,"from_pretrained()"),R0t.forEach(t),yVo=r(Uae," class method or the "),hz=n(Uae,"A",{href:!0});var P0t=s(hz);xVo=r(P0t,"from_config()"),P0t.forEach(t),$Vo=r(Uae,` class
method.`),Uae.forEach(t),kVo=i(bl),l9=n(bl,"P",{});var bJe=s(l9);SVo=r(bJe,"This class cannot be instantiated directly using "),Gue=n(bJe,"CODE",{});var B0t=s(Gue);RVo=r(B0t,"__init__()"),B0t.forEach(t),PVo=r(bJe," (throws an error)."),bJe.forEach(t),BVo=i(bl),_t=n(bl,"DIV",{class:!0});var F7=s(_t);T(i9.$$.fragment,F7),IVo=i(F7),Oue=n(F7,"P",{});var I0t=s(Oue);NVo=r(I0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),I0t.forEach(t),qVo=i(F7),_d=n(F7,"P",{});var Hae=s(_d);jVo=r(Hae,`Note:
Loading a model from its configuration file does `),Vue=n(Hae,"STRONG",{});var N0t=s(Vue);DVo=r(N0t,"not"),N0t.forEach(t),GVo=r(Hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=n(Hae,"A",{href:!0});var q0t=s(pz);OVo=r(q0t,"from_pretrained()"),q0t.forEach(t),VVo=r(Hae," to load the model weights."),Hae.forEach(t),XVo=i(F7),T(a2.$$.fragment,F7),F7.forEach(t),zVo=i(bl),oo=n(bl,"DIV",{class:!0});var ua=s(oo);T(d9.$$.fragment,ua),WVo=i(ua),Xue=n(ua,"P",{});var j0t=s(Xue);QVo=r(j0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),j0t.forEach(t),UVo=i(ua),Qa=n(ua,"P",{});var T7=s(Qa);HVo=r(T7,"The model class to instantiate is selected based on the "),zue=n(T7,"CODE",{});var D0t=s(zue);JVo=r(D0t,"model_type"),D0t.forEach(t),YVo=r(T7,` property of the config object (either
passed as an argument or loaded from `),Wue=n(T7,"CODE",{});var G0t=s(Wue);KVo=r(G0t,"pretrained_model_name_or_path"),G0t.forEach(t),ZVo=r(T7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=n(T7,"CODE",{});var O0t=s(Que);eXo=r(O0t,"pretrained_model_name_or_path"),O0t.forEach(t),oXo=r(T7,":"),T7.forEach(t),rXo=i(ua),me=n(ua,"UL",{});var ue=s(me);n2=n(ue,"LI",{});var DIe=s(n2);Uue=n(DIe,"STRONG",{});var V0t=s(Uue);tXo=r(V0t,"bart"),V0t.forEach(t),aXo=r(DIe," \u2014 "),_z=n(DIe,"A",{href:!0});var X0t=s(_z);nXo=r(X0t,"BartForConditionalGeneration"),X0t.forEach(t),sXo=r(DIe," (BART model)"),DIe.forEach(t),lXo=i(ue),s2=n(ue,"LI",{});var GIe=s(s2);Hue=n(GIe,"STRONG",{});var z0t=s(Hue);iXo=r(z0t,"bigbird_pegasus"),z0t.forEach(t),dXo=r(GIe," \u2014 "),uz=n(GIe,"A",{href:!0});var W0t=s(uz);cXo=r(W0t,"BigBirdPegasusForConditionalGeneration"),W0t.forEach(t),fXo=r(GIe," (BigBird-Pegasus model)"),GIe.forEach(t),mXo=i(ue),l2=n(ue,"LI",{});var OIe=s(l2);Jue=n(OIe,"STRONG",{});var Q0t=s(Jue);gXo=r(Q0t,"blenderbot"),Q0t.forEach(t),hXo=r(OIe," \u2014 "),bz=n(OIe,"A",{href:!0});var U0t=s(bz);pXo=r(U0t,"BlenderbotForConditionalGeneration"),U0t.forEach(t),_Xo=r(OIe," (Blenderbot model)"),OIe.forEach(t),uXo=i(ue),i2=n(ue,"LI",{});var VIe=s(i2);Yue=n(VIe,"STRONG",{});var H0t=s(Yue);bXo=r(H0t,"blenderbot-small"),H0t.forEach(t),vXo=r(VIe," \u2014 "),vz=n(VIe,"A",{href:!0});var J0t=s(vz);FXo=r(J0t,"BlenderbotSmallForConditionalGeneration"),J0t.forEach(t),TXo=r(VIe," (BlenderbotSmall model)"),VIe.forEach(t),MXo=i(ue),d2=n(ue,"LI",{});var XIe=s(d2);Kue=n(XIe,"STRONG",{});var Y0t=s(Kue);EXo=r(Y0t,"encoder-decoder"),Y0t.forEach(t),CXo=r(XIe," \u2014 "),Fz=n(XIe,"A",{href:!0});var K0t=s(Fz);wXo=r(K0t,"EncoderDecoderModel"),K0t.forEach(t),AXo=r(XIe," (Encoder decoder model)"),XIe.forEach(t),LXo=i(ue),c2=n(ue,"LI",{});var zIe=s(c2);Zue=n(zIe,"STRONG",{});var Z0t=s(Zue);yXo=r(Z0t,"fsmt"),Z0t.forEach(t),xXo=r(zIe," \u2014 "),Tz=n(zIe,"A",{href:!0});var ewt=s(Tz);$Xo=r(ewt,"FSMTForConditionalGeneration"),ewt.forEach(t),kXo=r(zIe," (FairSeq Machine-Translation model)"),zIe.forEach(t),SXo=i(ue),f2=n(ue,"LI",{});var WIe=s(f2);e1e=n(WIe,"STRONG",{});var owt=s(e1e);RXo=r(owt,"led"),owt.forEach(t),PXo=r(WIe," \u2014 "),Mz=n(WIe,"A",{href:!0});var rwt=s(Mz);BXo=r(rwt,"LEDForConditionalGeneration"),rwt.forEach(t),IXo=r(WIe," (LED model)"),WIe.forEach(t),NXo=i(ue),m2=n(ue,"LI",{});var QIe=s(m2);o1e=n(QIe,"STRONG",{});var twt=s(o1e);qXo=r(twt,"longt5"),twt.forEach(t),jXo=r(QIe," \u2014 "),Ez=n(QIe,"A",{href:!0});var awt=s(Ez);DXo=r(awt,"LongT5ForConditionalGeneration"),awt.forEach(t),GXo=r(QIe," (LongT5 model)"),QIe.forEach(t),OXo=i(ue),g2=n(ue,"LI",{});var UIe=s(g2);r1e=n(UIe,"STRONG",{});var nwt=s(r1e);VXo=r(nwt,"m2m_100"),nwt.forEach(t),XXo=r(UIe," \u2014 "),Cz=n(UIe,"A",{href:!0});var swt=s(Cz);zXo=r(swt,"M2M100ForConditionalGeneration"),swt.forEach(t),WXo=r(UIe," (M2M100 model)"),UIe.forEach(t),QXo=i(ue),h2=n(ue,"LI",{});var HIe=s(h2);t1e=n(HIe,"STRONG",{});var lwt=s(t1e);UXo=r(lwt,"marian"),lwt.forEach(t),HXo=r(HIe," \u2014 "),wz=n(HIe,"A",{href:!0});var iwt=s(wz);JXo=r(iwt,"MarianMTModel"),iwt.forEach(t),YXo=r(HIe," (Marian model)"),HIe.forEach(t),KXo=i(ue),p2=n(ue,"LI",{});var JIe=s(p2);a1e=n(JIe,"STRONG",{});var dwt=s(a1e);ZXo=r(dwt,"mbart"),dwt.forEach(t),ezo=r(JIe," \u2014 "),Az=n(JIe,"A",{href:!0});var cwt=s(Az);ozo=r(cwt,"MBartForConditionalGeneration"),cwt.forEach(t),rzo=r(JIe," (mBART model)"),JIe.forEach(t),tzo=i(ue),_2=n(ue,"LI",{});var YIe=s(_2);n1e=n(YIe,"STRONG",{});var fwt=s(n1e);azo=r(fwt,"mt5"),fwt.forEach(t),nzo=r(YIe," \u2014 "),Lz=n(YIe,"A",{href:!0});var mwt=s(Lz);szo=r(mwt,"MT5ForConditionalGeneration"),mwt.forEach(t),lzo=r(YIe," (MT5 model)"),YIe.forEach(t),izo=i(ue),u2=n(ue,"LI",{});var KIe=s(u2);s1e=n(KIe,"STRONG",{});var gwt=s(s1e);dzo=r(gwt,"mvp"),gwt.forEach(t),czo=r(KIe," \u2014 "),yz=n(KIe,"A",{href:!0});var hwt=s(yz);fzo=r(hwt,"MvpForConditionalGeneration"),hwt.forEach(t),mzo=r(KIe," (MVP model)"),KIe.forEach(t),gzo=i(ue),b2=n(ue,"LI",{});var ZIe=s(b2);l1e=n(ZIe,"STRONG",{});var pwt=s(l1e);hzo=r(pwt,"nllb"),pwt.forEach(t),pzo=r(ZIe," \u2014 "),xz=n(ZIe,"A",{href:!0});var _wt=s(xz);_zo=r(_wt,"M2M100ForConditionalGeneration"),_wt.forEach(t),uzo=r(ZIe," (NLLB model)"),ZIe.forEach(t),bzo=i(ue),v2=n(ue,"LI",{});var eNe=s(v2);i1e=n(eNe,"STRONG",{});var uwt=s(i1e);vzo=r(uwt,"pegasus"),uwt.forEach(t),Fzo=r(eNe," \u2014 "),$z=n(eNe,"A",{href:!0});var bwt=s($z);Tzo=r(bwt,"PegasusForConditionalGeneration"),bwt.forEach(t),Mzo=r(eNe," (Pegasus model)"),eNe.forEach(t),Ezo=i(ue),F2=n(ue,"LI",{});var oNe=s(F2);d1e=n(oNe,"STRONG",{});var vwt=s(d1e);Czo=r(vwt,"plbart"),vwt.forEach(t),wzo=r(oNe," \u2014 "),kz=n(oNe,"A",{href:!0});var Fwt=s(kz);Azo=r(Fwt,"PLBartForConditionalGeneration"),Fwt.forEach(t),Lzo=r(oNe," (PLBart model)"),oNe.forEach(t),yzo=i(ue),T2=n(ue,"LI",{});var rNe=s(T2);c1e=n(rNe,"STRONG",{});var Twt=s(c1e);xzo=r(Twt,"prophetnet"),Twt.forEach(t),$zo=r(rNe," \u2014 "),Sz=n(rNe,"A",{href:!0});var Mwt=s(Sz);kzo=r(Mwt,"ProphetNetForConditionalGeneration"),Mwt.forEach(t),Szo=r(rNe," (ProphetNet model)"),rNe.forEach(t),Rzo=i(ue),M2=n(ue,"LI",{});var tNe=s(M2);f1e=n(tNe,"STRONG",{});var Ewt=s(f1e);Pzo=r(Ewt,"t5"),Ewt.forEach(t),Bzo=r(tNe," \u2014 "),Rz=n(tNe,"A",{href:!0});var Cwt=s(Rz);Izo=r(Cwt,"T5ForConditionalGeneration"),Cwt.forEach(t),Nzo=r(tNe," (T5 model)"),tNe.forEach(t),qzo=i(ue),E2=n(ue,"LI",{});var aNe=s(E2);m1e=n(aNe,"STRONG",{});var wwt=s(m1e);jzo=r(wwt,"xlm-prophetnet"),wwt.forEach(t),Dzo=r(aNe," \u2014 "),Pz=n(aNe,"A",{href:!0});var Awt=s(Pz);Gzo=r(Awt,"XLMProphetNetForConditionalGeneration"),Awt.forEach(t),Ozo=r(aNe," (XLM-ProphetNet model)"),aNe.forEach(t),ue.forEach(t),Vzo=i(ua),C2=n(ua,"P",{});var nNe=s(C2);Xzo=r(nNe,"The model is set in evaluation mode by default using "),g1e=n(nNe,"CODE",{});var Lwt=s(g1e);zzo=r(Lwt,"model.eval()"),Lwt.forEach(t),Wzo=r(nNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h1e=n(nNe,"CODE",{});var ywt=s(h1e);Qzo=r(ywt,"model.train()"),ywt.forEach(t),nNe.forEach(t),Uzo=i(ua),T(w2.$$.fragment,ua),ua.forEach(t),bl.forEach(t),dUe=i(f),ud=n(f,"H2",{class:!0});var vJe=s(ud);A2=n(vJe,"A",{id:!0,class:!0,href:!0});var xwt=s(A2);p1e=n(xwt,"SPAN",{});var $wt=s(p1e);T(c9.$$.fragment,$wt),$wt.forEach(t),xwt.forEach(t),Hzo=i(vJe),_1e=n(vJe,"SPAN",{});var kwt=s(_1e);Jzo=r(kwt,"AutoModelForSequenceClassification"),kwt.forEach(t),vJe.forEach(t),cUe=i(f),No=n(f,"DIV",{class:!0});var vl=s(No);T(f9.$$.fragment,vl),Yzo=i(vl),bd=n(vl,"P",{});var Jae=s(bd);Kzo=r(Jae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Bz=n(Jae,"A",{href:!0});var Swt=s(Bz);Zzo=r(Swt,"from_pretrained()"),Swt.forEach(t),eWo=r(Jae," class method or the "),Iz=n(Jae,"A",{href:!0});var Rwt=s(Iz);oWo=r(Rwt,"from_config()"),Rwt.forEach(t),rWo=r(Jae,` class
method.`),Jae.forEach(t),tWo=i(vl),m9=n(vl,"P",{});var FJe=s(m9);aWo=r(FJe,"This class cannot be instantiated directly using "),u1e=n(FJe,"CODE",{});var Pwt=s(u1e);nWo=r(Pwt,"__init__()"),Pwt.forEach(t),sWo=r(FJe," (throws an error)."),FJe.forEach(t),lWo=i(vl),ut=n(vl,"DIV",{class:!0});var M7=s(ut);T(g9.$$.fragment,M7),iWo=i(M7),b1e=n(M7,"P",{});var Bwt=s(b1e);dWo=r(Bwt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Bwt.forEach(t),cWo=i(M7),vd=n(M7,"P",{});var Yae=s(vd);fWo=r(Yae,`Note:
Loading a model from its configuration file does `),v1e=n(Yae,"STRONG",{});var Iwt=s(v1e);mWo=r(Iwt,"not"),Iwt.forEach(t),gWo=r(Yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=n(Yae,"A",{href:!0});var Nwt=s(Nz);hWo=r(Nwt,"from_pretrained()"),Nwt.forEach(t),pWo=r(Yae," to load the model weights."),Yae.forEach(t),_Wo=i(M7),T(L2.$$.fragment,M7),M7.forEach(t),uWo=i(vl),ro=n(vl,"DIV",{class:!0});var ba=s(ro);T(h9.$$.fragment,ba),bWo=i(ba),F1e=n(ba,"P",{});var qwt=s(F1e);vWo=r(qwt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qwt.forEach(t),FWo=i(ba),Ua=n(ba,"P",{});var E7=s(Ua);TWo=r(E7,"The model class to instantiate is selected based on the "),T1e=n(E7,"CODE",{});var jwt=s(T1e);MWo=r(jwt,"model_type"),jwt.forEach(t),EWo=r(E7,` property of the config object (either
passed as an argument or loaded from `),M1e=n(E7,"CODE",{});var Dwt=s(M1e);CWo=r(Dwt,"pretrained_model_name_or_path"),Dwt.forEach(t),wWo=r(E7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=n(E7,"CODE",{});var Gwt=s(E1e);AWo=r(Gwt,"pretrained_model_name_or_path"),Gwt.forEach(t),LWo=r(E7,":"),E7.forEach(t),yWo=i(ba),N=n(ba,"UL",{});var j=s(N);y2=n(j,"LI",{});var sNe=s(y2);C1e=n(sNe,"STRONG",{});var Owt=s(C1e);xWo=r(Owt,"albert"),Owt.forEach(t),$Wo=r(sNe," \u2014 "),qz=n(sNe,"A",{href:!0});var Vwt=s(qz);kWo=r(Vwt,"AlbertForSequenceClassification"),Vwt.forEach(t),SWo=r(sNe," (ALBERT model)"),sNe.forEach(t),RWo=i(j),x2=n(j,"LI",{});var lNe=s(x2);w1e=n(lNe,"STRONG",{});var Xwt=s(w1e);PWo=r(Xwt,"bart"),Xwt.forEach(t),BWo=r(lNe," \u2014 "),jz=n(lNe,"A",{href:!0});var zwt=s(jz);IWo=r(zwt,"BartForSequenceClassification"),zwt.forEach(t),NWo=r(lNe," (BART model)"),lNe.forEach(t),qWo=i(j),$2=n(j,"LI",{});var iNe=s($2);A1e=n(iNe,"STRONG",{});var Wwt=s(A1e);jWo=r(Wwt,"bert"),Wwt.forEach(t),DWo=r(iNe," \u2014 "),Dz=n(iNe,"A",{href:!0});var Qwt=s(Dz);GWo=r(Qwt,"BertForSequenceClassification"),Qwt.forEach(t),OWo=r(iNe," (BERT model)"),iNe.forEach(t),VWo=i(j),k2=n(j,"LI",{});var dNe=s(k2);L1e=n(dNe,"STRONG",{});var Uwt=s(L1e);XWo=r(Uwt,"big_bird"),Uwt.forEach(t),zWo=r(dNe," \u2014 "),Gz=n(dNe,"A",{href:!0});var Hwt=s(Gz);WWo=r(Hwt,"BigBirdForSequenceClassification"),Hwt.forEach(t),QWo=r(dNe," (BigBird model)"),dNe.forEach(t),UWo=i(j),S2=n(j,"LI",{});var cNe=s(S2);y1e=n(cNe,"STRONG",{});var Jwt=s(y1e);HWo=r(Jwt,"bigbird_pegasus"),Jwt.forEach(t),JWo=r(cNe," \u2014 "),Oz=n(cNe,"A",{href:!0});var Ywt=s(Oz);YWo=r(Ywt,"BigBirdPegasusForSequenceClassification"),Ywt.forEach(t),KWo=r(cNe," (BigBird-Pegasus model)"),cNe.forEach(t),ZWo=i(j),R2=n(j,"LI",{});var fNe=s(R2);x1e=n(fNe,"STRONG",{});var Kwt=s(x1e);eQo=r(Kwt,"bloom"),Kwt.forEach(t),oQo=r(fNe," \u2014 "),Vz=n(fNe,"A",{href:!0});var Zwt=s(Vz);rQo=r(Zwt,"BloomForSequenceClassification"),Zwt.forEach(t),tQo=r(fNe," (BLOOM model)"),fNe.forEach(t),aQo=i(j),P2=n(j,"LI",{});var mNe=s(P2);$1e=n(mNe,"STRONG",{});var eAt=s($1e);nQo=r(eAt,"camembert"),eAt.forEach(t),sQo=r(mNe," \u2014 "),Xz=n(mNe,"A",{href:!0});var oAt=s(Xz);lQo=r(oAt,"CamembertForSequenceClassification"),oAt.forEach(t),iQo=r(mNe," (CamemBERT model)"),mNe.forEach(t),dQo=i(j),B2=n(j,"LI",{});var gNe=s(B2);k1e=n(gNe,"STRONG",{});var rAt=s(k1e);cQo=r(rAt,"canine"),rAt.forEach(t),fQo=r(gNe," \u2014 "),zz=n(gNe,"A",{href:!0});var tAt=s(zz);mQo=r(tAt,"CanineForSequenceClassification"),tAt.forEach(t),gQo=r(gNe," (CANINE model)"),gNe.forEach(t),hQo=i(j),I2=n(j,"LI",{});var hNe=s(I2);S1e=n(hNe,"STRONG",{});var aAt=s(S1e);pQo=r(aAt,"convbert"),aAt.forEach(t),_Qo=r(hNe," \u2014 "),Wz=n(hNe,"A",{href:!0});var nAt=s(Wz);uQo=r(nAt,"ConvBertForSequenceClassification"),nAt.forEach(t),bQo=r(hNe," (ConvBERT model)"),hNe.forEach(t),vQo=i(j),N2=n(j,"LI",{});var pNe=s(N2);R1e=n(pNe,"STRONG",{});var sAt=s(R1e);FQo=r(sAt,"ctrl"),sAt.forEach(t),TQo=r(pNe," \u2014 "),Qz=n(pNe,"A",{href:!0});var lAt=s(Qz);MQo=r(lAt,"CTRLForSequenceClassification"),lAt.forEach(t),EQo=r(pNe," (CTRL model)"),pNe.forEach(t),CQo=i(j),q2=n(j,"LI",{});var _Ne=s(q2);P1e=n(_Ne,"STRONG",{});var iAt=s(P1e);wQo=r(iAt,"data2vec-text"),iAt.forEach(t),AQo=r(_Ne," \u2014 "),Uz=n(_Ne,"A",{href:!0});var dAt=s(Uz);LQo=r(dAt,"Data2VecTextForSequenceClassification"),dAt.forEach(t),yQo=r(_Ne," (Data2VecText model)"),_Ne.forEach(t),xQo=i(j),j2=n(j,"LI",{});var uNe=s(j2);B1e=n(uNe,"STRONG",{});var cAt=s(B1e);$Qo=r(cAt,"deberta"),cAt.forEach(t),kQo=r(uNe," \u2014 "),Hz=n(uNe,"A",{href:!0});var fAt=s(Hz);SQo=r(fAt,"DebertaForSequenceClassification"),fAt.forEach(t),RQo=r(uNe," (DeBERTa model)"),uNe.forEach(t),PQo=i(j),D2=n(j,"LI",{});var bNe=s(D2);I1e=n(bNe,"STRONG",{});var mAt=s(I1e);BQo=r(mAt,"deberta-v2"),mAt.forEach(t),IQo=r(bNe," \u2014 "),Jz=n(bNe,"A",{href:!0});var gAt=s(Jz);NQo=r(gAt,"DebertaV2ForSequenceClassification"),gAt.forEach(t),qQo=r(bNe," (DeBERTa-v2 model)"),bNe.forEach(t),jQo=i(j),G2=n(j,"LI",{});var vNe=s(G2);N1e=n(vNe,"STRONG",{});var hAt=s(N1e);DQo=r(hAt,"distilbert"),hAt.forEach(t),GQo=r(vNe," \u2014 "),Yz=n(vNe,"A",{href:!0});var pAt=s(Yz);OQo=r(pAt,"DistilBertForSequenceClassification"),pAt.forEach(t),VQo=r(vNe," (DistilBERT model)"),vNe.forEach(t),XQo=i(j),O2=n(j,"LI",{});var FNe=s(O2);q1e=n(FNe,"STRONG",{});var _At=s(q1e);zQo=r(_At,"electra"),_At.forEach(t),WQo=r(FNe," \u2014 "),Kz=n(FNe,"A",{href:!0});var uAt=s(Kz);QQo=r(uAt,"ElectraForSequenceClassification"),uAt.forEach(t),UQo=r(FNe," (ELECTRA model)"),FNe.forEach(t),HQo=i(j),V2=n(j,"LI",{});var TNe=s(V2);j1e=n(TNe,"STRONG",{});var bAt=s(j1e);JQo=r(bAt,"flaubert"),bAt.forEach(t),YQo=r(TNe," \u2014 "),Zz=n(TNe,"A",{href:!0});var vAt=s(Zz);KQo=r(vAt,"FlaubertForSequenceClassification"),vAt.forEach(t),ZQo=r(TNe," (FlauBERT model)"),TNe.forEach(t),eUo=i(j),X2=n(j,"LI",{});var MNe=s(X2);D1e=n(MNe,"STRONG",{});var FAt=s(D1e);oUo=r(FAt,"fnet"),FAt.forEach(t),rUo=r(MNe," \u2014 "),eW=n(MNe,"A",{href:!0});var TAt=s(eW);tUo=r(TAt,"FNetForSequenceClassification"),TAt.forEach(t),aUo=r(MNe," (FNet model)"),MNe.forEach(t),nUo=i(j),z2=n(j,"LI",{});var ENe=s(z2);G1e=n(ENe,"STRONG",{});var MAt=s(G1e);sUo=r(MAt,"funnel"),MAt.forEach(t),lUo=r(ENe," \u2014 "),oW=n(ENe,"A",{href:!0});var EAt=s(oW);iUo=r(EAt,"FunnelForSequenceClassification"),EAt.forEach(t),dUo=r(ENe," (Funnel Transformer model)"),ENe.forEach(t),cUo=i(j),W2=n(j,"LI",{});var CNe=s(W2);O1e=n(CNe,"STRONG",{});var CAt=s(O1e);fUo=r(CAt,"gpt2"),CAt.forEach(t),mUo=r(CNe," \u2014 "),rW=n(CNe,"A",{href:!0});var wAt=s(rW);gUo=r(wAt,"GPT2ForSequenceClassification"),wAt.forEach(t),hUo=r(CNe," (OpenAI GPT-2 model)"),CNe.forEach(t),pUo=i(j),Q2=n(j,"LI",{});var wNe=s(Q2);V1e=n(wNe,"STRONG",{});var AAt=s(V1e);_Uo=r(AAt,"gpt_neo"),AAt.forEach(t),uUo=r(wNe," \u2014 "),tW=n(wNe,"A",{href:!0});var LAt=s(tW);bUo=r(LAt,"GPTNeoForSequenceClassification"),LAt.forEach(t),vUo=r(wNe," (GPT Neo model)"),wNe.forEach(t),FUo=i(j),U2=n(j,"LI",{});var ANe=s(U2);X1e=n(ANe,"STRONG",{});var yAt=s(X1e);TUo=r(yAt,"gptj"),yAt.forEach(t),MUo=r(ANe," \u2014 "),aW=n(ANe,"A",{href:!0});var xAt=s(aW);EUo=r(xAt,"GPTJForSequenceClassification"),xAt.forEach(t),CUo=r(ANe," (GPT-J model)"),ANe.forEach(t),wUo=i(j),H2=n(j,"LI",{});var LNe=s(H2);z1e=n(LNe,"STRONG",{});var $At=s(z1e);AUo=r($At,"ibert"),$At.forEach(t),LUo=r(LNe," \u2014 "),nW=n(LNe,"A",{href:!0});var kAt=s(nW);yUo=r(kAt,"IBertForSequenceClassification"),kAt.forEach(t),xUo=r(LNe," (I-BERT model)"),LNe.forEach(t),$Uo=i(j),J2=n(j,"LI",{});var yNe=s(J2);W1e=n(yNe,"STRONG",{});var SAt=s(W1e);kUo=r(SAt,"layoutlm"),SAt.forEach(t),SUo=r(yNe," \u2014 "),sW=n(yNe,"A",{href:!0});var RAt=s(sW);RUo=r(RAt,"LayoutLMForSequenceClassification"),RAt.forEach(t),PUo=r(yNe," (LayoutLM model)"),yNe.forEach(t),BUo=i(j),Y2=n(j,"LI",{});var xNe=s(Y2);Q1e=n(xNe,"STRONG",{});var PAt=s(Q1e);IUo=r(PAt,"layoutlmv2"),PAt.forEach(t),NUo=r(xNe," \u2014 "),lW=n(xNe,"A",{href:!0});var BAt=s(lW);qUo=r(BAt,"LayoutLMv2ForSequenceClassification"),BAt.forEach(t),jUo=r(xNe," (LayoutLMv2 model)"),xNe.forEach(t),DUo=i(j),K2=n(j,"LI",{});var $Ne=s(K2);U1e=n($Ne,"STRONG",{});var IAt=s(U1e);GUo=r(IAt,"layoutlmv3"),IAt.forEach(t),OUo=r($Ne," \u2014 "),iW=n($Ne,"A",{href:!0});var NAt=s(iW);VUo=r(NAt,"LayoutLMv3ForSequenceClassification"),NAt.forEach(t),XUo=r($Ne," (LayoutLMv3 model)"),$Ne.forEach(t),zUo=i(j),Z2=n(j,"LI",{});var kNe=s(Z2);H1e=n(kNe,"STRONG",{});var qAt=s(H1e);WUo=r(qAt,"led"),qAt.forEach(t),QUo=r(kNe," \u2014 "),dW=n(kNe,"A",{href:!0});var jAt=s(dW);UUo=r(jAt,"LEDForSequenceClassification"),jAt.forEach(t),HUo=r(kNe," (LED model)"),kNe.forEach(t),JUo=i(j),eb=n(j,"LI",{});var SNe=s(eb);J1e=n(SNe,"STRONG",{});var DAt=s(J1e);YUo=r(DAt,"longformer"),DAt.forEach(t),KUo=r(SNe," \u2014 "),cW=n(SNe,"A",{href:!0});var GAt=s(cW);ZUo=r(GAt,"LongformerForSequenceClassification"),GAt.forEach(t),eHo=r(SNe," (Longformer model)"),SNe.forEach(t),oHo=i(j),ob=n(j,"LI",{});var RNe=s(ob);Y1e=n(RNe,"STRONG",{});var OAt=s(Y1e);rHo=r(OAt,"luke"),OAt.forEach(t),tHo=r(RNe," \u2014 "),fW=n(RNe,"A",{href:!0});var VAt=s(fW);aHo=r(VAt,"LukeForSequenceClassification"),VAt.forEach(t),nHo=r(RNe," (LUKE model)"),RNe.forEach(t),sHo=i(j),rb=n(j,"LI",{});var PNe=s(rb);K1e=n(PNe,"STRONG",{});var XAt=s(K1e);lHo=r(XAt,"mbart"),XAt.forEach(t),iHo=r(PNe," \u2014 "),mW=n(PNe,"A",{href:!0});var zAt=s(mW);dHo=r(zAt,"MBartForSequenceClassification"),zAt.forEach(t),cHo=r(PNe," (mBART model)"),PNe.forEach(t),fHo=i(j),tb=n(j,"LI",{});var BNe=s(tb);Z1e=n(BNe,"STRONG",{});var WAt=s(Z1e);mHo=r(WAt,"megatron-bert"),WAt.forEach(t),gHo=r(BNe," \u2014 "),gW=n(BNe,"A",{href:!0});var QAt=s(gW);hHo=r(QAt,"MegatronBertForSequenceClassification"),QAt.forEach(t),pHo=r(BNe," (Megatron-BERT model)"),BNe.forEach(t),_Ho=i(j),ab=n(j,"LI",{});var INe=s(ab);e6e=n(INe,"STRONG",{});var UAt=s(e6e);uHo=r(UAt,"mobilebert"),UAt.forEach(t),bHo=r(INe," \u2014 "),hW=n(INe,"A",{href:!0});var HAt=s(hW);vHo=r(HAt,"MobileBertForSequenceClassification"),HAt.forEach(t),FHo=r(INe," (MobileBERT model)"),INe.forEach(t),THo=i(j),nb=n(j,"LI",{});var NNe=s(nb);o6e=n(NNe,"STRONG",{});var JAt=s(o6e);MHo=r(JAt,"mpnet"),JAt.forEach(t),EHo=r(NNe," \u2014 "),pW=n(NNe,"A",{href:!0});var YAt=s(pW);CHo=r(YAt,"MPNetForSequenceClassification"),YAt.forEach(t),wHo=r(NNe," (MPNet model)"),NNe.forEach(t),AHo=i(j),sb=n(j,"LI",{});var qNe=s(sb);r6e=n(qNe,"STRONG",{});var KAt=s(r6e);LHo=r(KAt,"mvp"),KAt.forEach(t),yHo=r(qNe," \u2014 "),_W=n(qNe,"A",{href:!0});var ZAt=s(_W);xHo=r(ZAt,"MvpForSequenceClassification"),ZAt.forEach(t),$Ho=r(qNe," (MVP model)"),qNe.forEach(t),kHo=i(j),lb=n(j,"LI",{});var jNe=s(lb);t6e=n(jNe,"STRONG",{});var e7t=s(t6e);SHo=r(e7t,"nezha"),e7t.forEach(t),RHo=r(jNe," \u2014 "),uW=n(jNe,"A",{href:!0});var o7t=s(uW);PHo=r(o7t,"NezhaForSequenceClassification"),o7t.forEach(t),BHo=r(jNe," (Nezha model)"),jNe.forEach(t),IHo=i(j),ib=n(j,"LI",{});var DNe=s(ib);a6e=n(DNe,"STRONG",{});var r7t=s(a6e);NHo=r(r7t,"nystromformer"),r7t.forEach(t),qHo=r(DNe," \u2014 "),bW=n(DNe,"A",{href:!0});var t7t=s(bW);jHo=r(t7t,"NystromformerForSequenceClassification"),t7t.forEach(t),DHo=r(DNe," (Nystr\xF6mformer model)"),DNe.forEach(t),GHo=i(j),db=n(j,"LI",{});var GNe=s(db);n6e=n(GNe,"STRONG",{});var a7t=s(n6e);OHo=r(a7t,"openai-gpt"),a7t.forEach(t),VHo=r(GNe," \u2014 "),vW=n(GNe,"A",{href:!0});var n7t=s(vW);XHo=r(n7t,"OpenAIGPTForSequenceClassification"),n7t.forEach(t),zHo=r(GNe," (OpenAI GPT model)"),GNe.forEach(t),WHo=i(j),cb=n(j,"LI",{});var ONe=s(cb);s6e=n(ONe,"STRONG",{});var s7t=s(s6e);QHo=r(s7t,"opt"),s7t.forEach(t),UHo=r(ONe," \u2014 "),FW=n(ONe,"A",{href:!0});var l7t=s(FW);HHo=r(l7t,"OPTForSequenceClassification"),l7t.forEach(t),JHo=r(ONe," (OPT model)"),ONe.forEach(t),YHo=i(j),fb=n(j,"LI",{});var VNe=s(fb);l6e=n(VNe,"STRONG",{});var i7t=s(l6e);KHo=r(i7t,"perceiver"),i7t.forEach(t),ZHo=r(VNe," \u2014 "),TW=n(VNe,"A",{href:!0});var d7t=s(TW);eJo=r(d7t,"PerceiverForSequenceClassification"),d7t.forEach(t),oJo=r(VNe," (Perceiver model)"),VNe.forEach(t),rJo=i(j),mb=n(j,"LI",{});var XNe=s(mb);i6e=n(XNe,"STRONG",{});var c7t=s(i6e);tJo=r(c7t,"plbart"),c7t.forEach(t),aJo=r(XNe," \u2014 "),MW=n(XNe,"A",{href:!0});var f7t=s(MW);nJo=r(f7t,"PLBartForSequenceClassification"),f7t.forEach(t),sJo=r(XNe," (PLBart model)"),XNe.forEach(t),lJo=i(j),gb=n(j,"LI",{});var zNe=s(gb);d6e=n(zNe,"STRONG",{});var m7t=s(d6e);iJo=r(m7t,"qdqbert"),m7t.forEach(t),dJo=r(zNe," \u2014 "),EW=n(zNe,"A",{href:!0});var g7t=s(EW);cJo=r(g7t,"QDQBertForSequenceClassification"),g7t.forEach(t),fJo=r(zNe," (QDQBert model)"),zNe.forEach(t),mJo=i(j),hb=n(j,"LI",{});var WNe=s(hb);c6e=n(WNe,"STRONG",{});var h7t=s(c6e);gJo=r(h7t,"reformer"),h7t.forEach(t),hJo=r(WNe," \u2014 "),CW=n(WNe,"A",{href:!0});var p7t=s(CW);pJo=r(p7t,"ReformerForSequenceClassification"),p7t.forEach(t),_Jo=r(WNe," (Reformer model)"),WNe.forEach(t),uJo=i(j),pb=n(j,"LI",{});var QNe=s(pb);f6e=n(QNe,"STRONG",{});var _7t=s(f6e);bJo=r(_7t,"rembert"),_7t.forEach(t),vJo=r(QNe," \u2014 "),wW=n(QNe,"A",{href:!0});var u7t=s(wW);FJo=r(u7t,"RemBertForSequenceClassification"),u7t.forEach(t),TJo=r(QNe," (RemBERT model)"),QNe.forEach(t),MJo=i(j),_b=n(j,"LI",{});var UNe=s(_b);m6e=n(UNe,"STRONG",{});var b7t=s(m6e);EJo=r(b7t,"roberta"),b7t.forEach(t),CJo=r(UNe," \u2014 "),AW=n(UNe,"A",{href:!0});var v7t=s(AW);wJo=r(v7t,"RobertaForSequenceClassification"),v7t.forEach(t),AJo=r(UNe," (RoBERTa model)"),UNe.forEach(t),LJo=i(j),ub=n(j,"LI",{});var HNe=s(ub);g6e=n(HNe,"STRONG",{});var F7t=s(g6e);yJo=r(F7t,"roformer"),F7t.forEach(t),xJo=r(HNe," \u2014 "),LW=n(HNe,"A",{href:!0});var T7t=s(LW);$Jo=r(T7t,"RoFormerForSequenceClassification"),T7t.forEach(t),kJo=r(HNe," (RoFormer model)"),HNe.forEach(t),SJo=i(j),bb=n(j,"LI",{});var JNe=s(bb);h6e=n(JNe,"STRONG",{});var M7t=s(h6e);RJo=r(M7t,"squeezebert"),M7t.forEach(t),PJo=r(JNe," \u2014 "),yW=n(JNe,"A",{href:!0});var E7t=s(yW);BJo=r(E7t,"SqueezeBertForSequenceClassification"),E7t.forEach(t),IJo=r(JNe," (SqueezeBERT model)"),JNe.forEach(t),NJo=i(j),vb=n(j,"LI",{});var YNe=s(vb);p6e=n(YNe,"STRONG",{});var C7t=s(p6e);qJo=r(C7t,"tapas"),C7t.forEach(t),jJo=r(YNe," \u2014 "),xW=n(YNe,"A",{href:!0});var w7t=s(xW);DJo=r(w7t,"TapasForSequenceClassification"),w7t.forEach(t),GJo=r(YNe," (TAPAS model)"),YNe.forEach(t),OJo=i(j),Fb=n(j,"LI",{});var KNe=s(Fb);_6e=n(KNe,"STRONG",{});var A7t=s(_6e);VJo=r(A7t,"transfo-xl"),A7t.forEach(t),XJo=r(KNe," \u2014 "),$W=n(KNe,"A",{href:!0});var L7t=s($W);zJo=r(L7t,"TransfoXLForSequenceClassification"),L7t.forEach(t),WJo=r(KNe," (Transformer-XL model)"),KNe.forEach(t),QJo=i(j),Tb=n(j,"LI",{});var ZNe=s(Tb);u6e=n(ZNe,"STRONG",{});var y7t=s(u6e);UJo=r(y7t,"xlm"),y7t.forEach(t),HJo=r(ZNe," \u2014 "),kW=n(ZNe,"A",{href:!0});var x7t=s(kW);JJo=r(x7t,"XLMForSequenceClassification"),x7t.forEach(t),YJo=r(ZNe," (XLM model)"),ZNe.forEach(t),KJo=i(j),Mb=n(j,"LI",{});var eqe=s(Mb);b6e=n(eqe,"STRONG",{});var $7t=s(b6e);ZJo=r($7t,"xlm-roberta"),$7t.forEach(t),eYo=r(eqe," \u2014 "),SW=n(eqe,"A",{href:!0});var k7t=s(SW);oYo=r(k7t,"XLMRobertaForSequenceClassification"),k7t.forEach(t),rYo=r(eqe," (XLM-RoBERTa model)"),eqe.forEach(t),tYo=i(j),Eb=n(j,"LI",{});var oqe=s(Eb);v6e=n(oqe,"STRONG",{});var S7t=s(v6e);aYo=r(S7t,"xlm-roberta-xl"),S7t.forEach(t),nYo=r(oqe," \u2014 "),RW=n(oqe,"A",{href:!0});var R7t=s(RW);sYo=r(R7t,"XLMRobertaXLForSequenceClassification"),R7t.forEach(t),lYo=r(oqe," (XLM-RoBERTa-XL model)"),oqe.forEach(t),iYo=i(j),Cb=n(j,"LI",{});var rqe=s(Cb);F6e=n(rqe,"STRONG",{});var P7t=s(F6e);dYo=r(P7t,"xlnet"),P7t.forEach(t),cYo=r(rqe," \u2014 "),PW=n(rqe,"A",{href:!0});var B7t=s(PW);fYo=r(B7t,"XLNetForSequenceClassification"),B7t.forEach(t),mYo=r(rqe," (XLNet model)"),rqe.forEach(t),gYo=i(j),wb=n(j,"LI",{});var tqe=s(wb);T6e=n(tqe,"STRONG",{});var I7t=s(T6e);hYo=r(I7t,"yoso"),I7t.forEach(t),pYo=r(tqe," \u2014 "),BW=n(tqe,"A",{href:!0});var N7t=s(BW);_Yo=r(N7t,"YosoForSequenceClassification"),N7t.forEach(t),uYo=r(tqe," (YOSO model)"),tqe.forEach(t),j.forEach(t),bYo=i(ba),Ab=n(ba,"P",{});var aqe=s(Ab);vYo=r(aqe,"The model is set in evaluation mode by default using "),M6e=n(aqe,"CODE",{});var q7t=s(M6e);FYo=r(q7t,"model.eval()"),q7t.forEach(t),TYo=r(aqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E6e=n(aqe,"CODE",{});var j7t=s(E6e);MYo=r(j7t,"model.train()"),j7t.forEach(t),aqe.forEach(t),EYo=i(ba),T(Lb.$$.fragment,ba),ba.forEach(t),vl.forEach(t),fUe=i(f),Fd=n(f,"H2",{class:!0});var TJe=s(Fd);yb=n(TJe,"A",{id:!0,class:!0,href:!0});var D7t=s(yb);C6e=n(D7t,"SPAN",{});var G7t=s(C6e);T(p9.$$.fragment,G7t),G7t.forEach(t),D7t.forEach(t),CYo=i(TJe),w6e=n(TJe,"SPAN",{});var O7t=s(w6e);wYo=r(O7t,"AutoModelForMultipleChoice"),O7t.forEach(t),TJe.forEach(t),mUe=i(f),qo=n(f,"DIV",{class:!0});var Fl=s(qo);T(_9.$$.fragment,Fl),AYo=i(Fl),Td=n(Fl,"P",{});var Kae=s(Td);LYo=r(Kae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IW=n(Kae,"A",{href:!0});var V7t=s(IW);yYo=r(V7t,"from_pretrained()"),V7t.forEach(t),xYo=r(Kae," class method or the "),NW=n(Kae,"A",{href:!0});var X7t=s(NW);$Yo=r(X7t,"from_config()"),X7t.forEach(t),kYo=r(Kae,` class
method.`),Kae.forEach(t),SYo=i(Fl),u9=n(Fl,"P",{});var MJe=s(u9);RYo=r(MJe,"This class cannot be instantiated directly using "),A6e=n(MJe,"CODE",{});var z7t=s(A6e);PYo=r(z7t,"__init__()"),z7t.forEach(t),BYo=r(MJe," (throws an error)."),MJe.forEach(t),IYo=i(Fl),bt=n(Fl,"DIV",{class:!0});var C7=s(bt);T(b9.$$.fragment,C7),NYo=i(C7),L6e=n(C7,"P",{});var W7t=s(L6e);qYo=r(W7t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),W7t.forEach(t),jYo=i(C7),Md=n(C7,"P",{});var Zae=s(Md);DYo=r(Zae,`Note:
Loading a model from its configuration file does `),y6e=n(Zae,"STRONG",{});var Q7t=s(y6e);GYo=r(Q7t,"not"),Q7t.forEach(t),OYo=r(Zae,` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=n(Zae,"A",{href:!0});var U7t=s(qW);VYo=r(U7t,"from_pretrained()"),U7t.forEach(t),XYo=r(Zae," to load the model weights."),Zae.forEach(t),zYo=i(C7),T(xb.$$.fragment,C7),C7.forEach(t),WYo=i(Fl),to=n(Fl,"DIV",{class:!0});var va=s(to);T(v9.$$.fragment,va),QYo=i(va),x6e=n(va,"P",{});var H7t=s(x6e);UYo=r(H7t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),H7t.forEach(t),HYo=i(va),Ha=n(va,"P",{});var w7=s(Ha);JYo=r(w7,"The model class to instantiate is selected based on the "),$6e=n(w7,"CODE",{});var J7t=s($6e);YYo=r(J7t,"model_type"),J7t.forEach(t),KYo=r(w7,` property of the config object (either
passed as an argument or loaded from `),k6e=n(w7,"CODE",{});var Y7t=s(k6e);ZYo=r(Y7t,"pretrained_model_name_or_path"),Y7t.forEach(t),eKo=r(w7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S6e=n(w7,"CODE",{});var K7t=s(S6e);oKo=r(K7t,"pretrained_model_name_or_path"),K7t.forEach(t),rKo=r(w7,":"),w7.forEach(t),tKo=i(va),Z=n(va,"UL",{});var ee=s(Z);$b=n(ee,"LI",{});var nqe=s($b);R6e=n(nqe,"STRONG",{});var Z7t=s(R6e);aKo=r(Z7t,"albert"),Z7t.forEach(t),nKo=r(nqe," \u2014 "),jW=n(nqe,"A",{href:!0});var eLt=s(jW);sKo=r(eLt,"AlbertForMultipleChoice"),eLt.forEach(t),lKo=r(nqe," (ALBERT model)"),nqe.forEach(t),iKo=i(ee),kb=n(ee,"LI",{});var sqe=s(kb);P6e=n(sqe,"STRONG",{});var oLt=s(P6e);dKo=r(oLt,"bert"),oLt.forEach(t),cKo=r(sqe," \u2014 "),DW=n(sqe,"A",{href:!0});var rLt=s(DW);fKo=r(rLt,"BertForMultipleChoice"),rLt.forEach(t),mKo=r(sqe," (BERT model)"),sqe.forEach(t),gKo=i(ee),Sb=n(ee,"LI",{});var lqe=s(Sb);B6e=n(lqe,"STRONG",{});var tLt=s(B6e);hKo=r(tLt,"big_bird"),tLt.forEach(t),pKo=r(lqe," \u2014 "),GW=n(lqe,"A",{href:!0});var aLt=s(GW);_Ko=r(aLt,"BigBirdForMultipleChoice"),aLt.forEach(t),uKo=r(lqe," (BigBird model)"),lqe.forEach(t),bKo=i(ee),Rb=n(ee,"LI",{});var iqe=s(Rb);I6e=n(iqe,"STRONG",{});var nLt=s(I6e);vKo=r(nLt,"camembert"),nLt.forEach(t),FKo=r(iqe," \u2014 "),OW=n(iqe,"A",{href:!0});var sLt=s(OW);TKo=r(sLt,"CamembertForMultipleChoice"),sLt.forEach(t),MKo=r(iqe," (CamemBERT model)"),iqe.forEach(t),EKo=i(ee),Pb=n(ee,"LI",{});var dqe=s(Pb);N6e=n(dqe,"STRONG",{});var lLt=s(N6e);CKo=r(lLt,"canine"),lLt.forEach(t),wKo=r(dqe," \u2014 "),VW=n(dqe,"A",{href:!0});var iLt=s(VW);AKo=r(iLt,"CanineForMultipleChoice"),iLt.forEach(t),LKo=r(dqe," (CANINE model)"),dqe.forEach(t),yKo=i(ee),Bb=n(ee,"LI",{});var cqe=s(Bb);q6e=n(cqe,"STRONG",{});var dLt=s(q6e);xKo=r(dLt,"convbert"),dLt.forEach(t),$Ko=r(cqe," \u2014 "),XW=n(cqe,"A",{href:!0});var cLt=s(XW);kKo=r(cLt,"ConvBertForMultipleChoice"),cLt.forEach(t),SKo=r(cqe," (ConvBERT model)"),cqe.forEach(t),RKo=i(ee),Ib=n(ee,"LI",{});var fqe=s(Ib);j6e=n(fqe,"STRONG",{});var fLt=s(j6e);PKo=r(fLt,"data2vec-text"),fLt.forEach(t),BKo=r(fqe," \u2014 "),zW=n(fqe,"A",{href:!0});var mLt=s(zW);IKo=r(mLt,"Data2VecTextForMultipleChoice"),mLt.forEach(t),NKo=r(fqe," (Data2VecText model)"),fqe.forEach(t),qKo=i(ee),Nb=n(ee,"LI",{});var mqe=s(Nb);D6e=n(mqe,"STRONG",{});var gLt=s(D6e);jKo=r(gLt,"deberta-v2"),gLt.forEach(t),DKo=r(mqe," \u2014 "),WW=n(mqe,"A",{href:!0});var hLt=s(WW);GKo=r(hLt,"DebertaV2ForMultipleChoice"),hLt.forEach(t),OKo=r(mqe," (DeBERTa-v2 model)"),mqe.forEach(t),VKo=i(ee),qb=n(ee,"LI",{});var gqe=s(qb);G6e=n(gqe,"STRONG",{});var pLt=s(G6e);XKo=r(pLt,"distilbert"),pLt.forEach(t),zKo=r(gqe," \u2014 "),QW=n(gqe,"A",{href:!0});var _Lt=s(QW);WKo=r(_Lt,"DistilBertForMultipleChoice"),_Lt.forEach(t),QKo=r(gqe," (DistilBERT model)"),gqe.forEach(t),UKo=i(ee),jb=n(ee,"LI",{});var hqe=s(jb);O6e=n(hqe,"STRONG",{});var uLt=s(O6e);HKo=r(uLt,"electra"),uLt.forEach(t),JKo=r(hqe," \u2014 "),UW=n(hqe,"A",{href:!0});var bLt=s(UW);YKo=r(bLt,"ElectraForMultipleChoice"),bLt.forEach(t),KKo=r(hqe," (ELECTRA model)"),hqe.forEach(t),ZKo=i(ee),Db=n(ee,"LI",{});var pqe=s(Db);V6e=n(pqe,"STRONG",{});var vLt=s(V6e);eZo=r(vLt,"flaubert"),vLt.forEach(t),oZo=r(pqe," \u2014 "),HW=n(pqe,"A",{href:!0});var FLt=s(HW);rZo=r(FLt,"FlaubertForMultipleChoice"),FLt.forEach(t),tZo=r(pqe," (FlauBERT model)"),pqe.forEach(t),aZo=i(ee),Gb=n(ee,"LI",{});var _qe=s(Gb);X6e=n(_qe,"STRONG",{});var TLt=s(X6e);nZo=r(TLt,"fnet"),TLt.forEach(t),sZo=r(_qe," \u2014 "),JW=n(_qe,"A",{href:!0});var MLt=s(JW);lZo=r(MLt,"FNetForMultipleChoice"),MLt.forEach(t),iZo=r(_qe," (FNet model)"),_qe.forEach(t),dZo=i(ee),Ob=n(ee,"LI",{});var uqe=s(Ob);z6e=n(uqe,"STRONG",{});var ELt=s(z6e);cZo=r(ELt,"funnel"),ELt.forEach(t),fZo=r(uqe," \u2014 "),YW=n(uqe,"A",{href:!0});var CLt=s(YW);mZo=r(CLt,"FunnelForMultipleChoice"),CLt.forEach(t),gZo=r(uqe," (Funnel Transformer model)"),uqe.forEach(t),hZo=i(ee),Vb=n(ee,"LI",{});var bqe=s(Vb);W6e=n(bqe,"STRONG",{});var wLt=s(W6e);pZo=r(wLt,"ibert"),wLt.forEach(t),_Zo=r(bqe," \u2014 "),KW=n(bqe,"A",{href:!0});var ALt=s(KW);uZo=r(ALt,"IBertForMultipleChoice"),ALt.forEach(t),bZo=r(bqe," (I-BERT model)"),bqe.forEach(t),vZo=i(ee),Xb=n(ee,"LI",{});var vqe=s(Xb);Q6e=n(vqe,"STRONG",{});var LLt=s(Q6e);FZo=r(LLt,"longformer"),LLt.forEach(t),TZo=r(vqe," \u2014 "),ZW=n(vqe,"A",{href:!0});var yLt=s(ZW);MZo=r(yLt,"LongformerForMultipleChoice"),yLt.forEach(t),EZo=r(vqe," (Longformer model)"),vqe.forEach(t),CZo=i(ee),zb=n(ee,"LI",{});var Fqe=s(zb);U6e=n(Fqe,"STRONG",{});var xLt=s(U6e);wZo=r(xLt,"luke"),xLt.forEach(t),AZo=r(Fqe," \u2014 "),eQ=n(Fqe,"A",{href:!0});var $Lt=s(eQ);LZo=r($Lt,"LukeForMultipleChoice"),$Lt.forEach(t),yZo=r(Fqe," (LUKE model)"),Fqe.forEach(t),xZo=i(ee),Wb=n(ee,"LI",{});var Tqe=s(Wb);H6e=n(Tqe,"STRONG",{});var kLt=s(H6e);$Zo=r(kLt,"megatron-bert"),kLt.forEach(t),kZo=r(Tqe," \u2014 "),oQ=n(Tqe,"A",{href:!0});var SLt=s(oQ);SZo=r(SLt,"MegatronBertForMultipleChoice"),SLt.forEach(t),RZo=r(Tqe," (Megatron-BERT model)"),Tqe.forEach(t),PZo=i(ee),Qb=n(ee,"LI",{});var Mqe=s(Qb);J6e=n(Mqe,"STRONG",{});var RLt=s(J6e);BZo=r(RLt,"mobilebert"),RLt.forEach(t),IZo=r(Mqe," \u2014 "),rQ=n(Mqe,"A",{href:!0});var PLt=s(rQ);NZo=r(PLt,"MobileBertForMultipleChoice"),PLt.forEach(t),qZo=r(Mqe," (MobileBERT model)"),Mqe.forEach(t),jZo=i(ee),Ub=n(ee,"LI",{});var Eqe=s(Ub);Y6e=n(Eqe,"STRONG",{});var BLt=s(Y6e);DZo=r(BLt,"mpnet"),BLt.forEach(t),GZo=r(Eqe," \u2014 "),tQ=n(Eqe,"A",{href:!0});var ILt=s(tQ);OZo=r(ILt,"MPNetForMultipleChoice"),ILt.forEach(t),VZo=r(Eqe," (MPNet model)"),Eqe.forEach(t),XZo=i(ee),Hb=n(ee,"LI",{});var Cqe=s(Hb);K6e=n(Cqe,"STRONG",{});var NLt=s(K6e);zZo=r(NLt,"nezha"),NLt.forEach(t),WZo=r(Cqe," \u2014 "),aQ=n(Cqe,"A",{href:!0});var qLt=s(aQ);QZo=r(qLt,"NezhaForMultipleChoice"),qLt.forEach(t),UZo=r(Cqe," (Nezha model)"),Cqe.forEach(t),HZo=i(ee),Jb=n(ee,"LI",{});var wqe=s(Jb);Z6e=n(wqe,"STRONG",{});var jLt=s(Z6e);JZo=r(jLt,"nystromformer"),jLt.forEach(t),YZo=r(wqe," \u2014 "),nQ=n(wqe,"A",{href:!0});var DLt=s(nQ);KZo=r(DLt,"NystromformerForMultipleChoice"),DLt.forEach(t),ZZo=r(wqe," (Nystr\xF6mformer model)"),wqe.forEach(t),eer=i(ee),Yb=n(ee,"LI",{});var Aqe=s(Yb);e8e=n(Aqe,"STRONG",{});var GLt=s(e8e);oer=r(GLt,"qdqbert"),GLt.forEach(t),rer=r(Aqe," \u2014 "),sQ=n(Aqe,"A",{href:!0});var OLt=s(sQ);ter=r(OLt,"QDQBertForMultipleChoice"),OLt.forEach(t),aer=r(Aqe," (QDQBert model)"),Aqe.forEach(t),ner=i(ee),Kb=n(ee,"LI",{});var Lqe=s(Kb);o8e=n(Lqe,"STRONG",{});var VLt=s(o8e);ser=r(VLt,"rembert"),VLt.forEach(t),ler=r(Lqe," \u2014 "),lQ=n(Lqe,"A",{href:!0});var XLt=s(lQ);ier=r(XLt,"RemBertForMultipleChoice"),XLt.forEach(t),der=r(Lqe," (RemBERT model)"),Lqe.forEach(t),cer=i(ee),Zb=n(ee,"LI",{});var yqe=s(Zb);r8e=n(yqe,"STRONG",{});var zLt=s(r8e);fer=r(zLt,"roberta"),zLt.forEach(t),mer=r(yqe," \u2014 "),iQ=n(yqe,"A",{href:!0});var WLt=s(iQ);ger=r(WLt,"RobertaForMultipleChoice"),WLt.forEach(t),her=r(yqe," (RoBERTa model)"),yqe.forEach(t),per=i(ee),ev=n(ee,"LI",{});var xqe=s(ev);t8e=n(xqe,"STRONG",{});var QLt=s(t8e);_er=r(QLt,"roformer"),QLt.forEach(t),uer=r(xqe," \u2014 "),dQ=n(xqe,"A",{href:!0});var ULt=s(dQ);ber=r(ULt,"RoFormerForMultipleChoice"),ULt.forEach(t),ver=r(xqe," (RoFormer model)"),xqe.forEach(t),Fer=i(ee),ov=n(ee,"LI",{});var $qe=s(ov);a8e=n($qe,"STRONG",{});var HLt=s(a8e);Ter=r(HLt,"squeezebert"),HLt.forEach(t),Mer=r($qe," \u2014 "),cQ=n($qe,"A",{href:!0});var JLt=s(cQ);Eer=r(JLt,"SqueezeBertForMultipleChoice"),JLt.forEach(t),Cer=r($qe," (SqueezeBERT model)"),$qe.forEach(t),wer=i(ee),rv=n(ee,"LI",{});var kqe=s(rv);n8e=n(kqe,"STRONG",{});var YLt=s(n8e);Aer=r(YLt,"xlm"),YLt.forEach(t),Ler=r(kqe," \u2014 "),fQ=n(kqe,"A",{href:!0});var KLt=s(fQ);yer=r(KLt,"XLMForMultipleChoice"),KLt.forEach(t),xer=r(kqe," (XLM model)"),kqe.forEach(t),$er=i(ee),tv=n(ee,"LI",{});var Sqe=s(tv);s8e=n(Sqe,"STRONG",{});var ZLt=s(s8e);ker=r(ZLt,"xlm-roberta"),ZLt.forEach(t),Ser=r(Sqe," \u2014 "),mQ=n(Sqe,"A",{href:!0});var eyt=s(mQ);Rer=r(eyt,"XLMRobertaForMultipleChoice"),eyt.forEach(t),Per=r(Sqe," (XLM-RoBERTa model)"),Sqe.forEach(t),Ber=i(ee),av=n(ee,"LI",{});var Rqe=s(av);l8e=n(Rqe,"STRONG",{});var oyt=s(l8e);Ier=r(oyt,"xlm-roberta-xl"),oyt.forEach(t),Ner=r(Rqe," \u2014 "),gQ=n(Rqe,"A",{href:!0});var ryt=s(gQ);qer=r(ryt,"XLMRobertaXLForMultipleChoice"),ryt.forEach(t),jer=r(Rqe," (XLM-RoBERTa-XL model)"),Rqe.forEach(t),Der=i(ee),nv=n(ee,"LI",{});var Pqe=s(nv);i8e=n(Pqe,"STRONG",{});var tyt=s(i8e);Ger=r(tyt,"xlnet"),tyt.forEach(t),Oer=r(Pqe," \u2014 "),hQ=n(Pqe,"A",{href:!0});var ayt=s(hQ);Ver=r(ayt,"XLNetForMultipleChoice"),ayt.forEach(t),Xer=r(Pqe," (XLNet model)"),Pqe.forEach(t),zer=i(ee),sv=n(ee,"LI",{});var Bqe=s(sv);d8e=n(Bqe,"STRONG",{});var nyt=s(d8e);Wer=r(nyt,"yoso"),nyt.forEach(t),Qer=r(Bqe," \u2014 "),pQ=n(Bqe,"A",{href:!0});var syt=s(pQ);Uer=r(syt,"YosoForMultipleChoice"),syt.forEach(t),Her=r(Bqe," (YOSO model)"),Bqe.forEach(t),ee.forEach(t),Jer=i(va),lv=n(va,"P",{});var Iqe=s(lv);Yer=r(Iqe,"The model is set in evaluation mode by default using "),c8e=n(Iqe,"CODE",{});var lyt=s(c8e);Ker=r(lyt,"model.eval()"),lyt.forEach(t),Zer=r(Iqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f8e=n(Iqe,"CODE",{});var iyt=s(f8e);eor=r(iyt,"model.train()"),iyt.forEach(t),Iqe.forEach(t),oor=i(va),T(iv.$$.fragment,va),va.forEach(t),Fl.forEach(t),gUe=i(f),Ed=n(f,"H2",{class:!0});var EJe=s(Ed);dv=n(EJe,"A",{id:!0,class:!0,href:!0});var dyt=s(dv);m8e=n(dyt,"SPAN",{});var cyt=s(m8e);T(F9.$$.fragment,cyt),cyt.forEach(t),dyt.forEach(t),ror=i(EJe),g8e=n(EJe,"SPAN",{});var fyt=s(g8e);tor=r(fyt,"AutoModelForNextSentencePrediction"),fyt.forEach(t),EJe.forEach(t),hUe=i(f),jo=n(f,"DIV",{class:!0});var Tl=s(jo);T(T9.$$.fragment,Tl),aor=i(Tl),Cd=n(Tl,"P",{});var ene=s(Cd);nor=r(ene,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_Q=n(ene,"A",{href:!0});var myt=s(_Q);sor=r(myt,"from_pretrained()"),myt.forEach(t),lor=r(ene," class method or the "),uQ=n(ene,"A",{href:!0});var gyt=s(uQ);ior=r(gyt,"from_config()"),gyt.forEach(t),dor=r(ene,` class
method.`),ene.forEach(t),cor=i(Tl),M9=n(Tl,"P",{});var CJe=s(M9);mor=r(CJe,"This class cannot be instantiated directly using "),h8e=n(CJe,"CODE",{});var hyt=s(h8e);gor=r(hyt,"__init__()"),hyt.forEach(t),hor=r(CJe," (throws an error)."),CJe.forEach(t),por=i(Tl),vt=n(Tl,"DIV",{class:!0});var A7=s(vt);T(E9.$$.fragment,A7),_or=i(A7),p8e=n(A7,"P",{});var pyt=s(p8e);uor=r(pyt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),pyt.forEach(t),bor=i(A7),wd=n(A7,"P",{});var one=s(wd);vor=r(one,`Note:
Loading a model from its configuration file does `),_8e=n(one,"STRONG",{});var _yt=s(_8e);For=r(_yt,"not"),_yt.forEach(t),Tor=r(one,` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=n(one,"A",{href:!0});var uyt=s(bQ);Mor=r(uyt,"from_pretrained()"),uyt.forEach(t),Eor=r(one," to load the model weights."),one.forEach(t),Cor=i(A7),T(cv.$$.fragment,A7),A7.forEach(t),wor=i(Tl),ao=n(Tl,"DIV",{class:!0});var Fa=s(ao);T(C9.$$.fragment,Fa),Aor=i(Fa),u8e=n(Fa,"P",{});var byt=s(u8e);Lor=r(byt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),byt.forEach(t),yor=i(Fa),Ja=n(Fa,"P",{});var L7=s(Ja);xor=r(L7,"The model class to instantiate is selected based on the "),b8e=n(L7,"CODE",{});var vyt=s(b8e);$or=r(vyt,"model_type"),vyt.forEach(t),kor=r(L7,` property of the config object (either
passed as an argument or loaded from `),v8e=n(L7,"CODE",{});var Fyt=s(v8e);Sor=r(Fyt,"pretrained_model_name_or_path"),Fyt.forEach(t),Ror=r(L7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F8e=n(L7,"CODE",{});var Tyt=s(F8e);Por=r(Tyt,"pretrained_model_name_or_path"),Tyt.forEach(t),Bor=r(L7,":"),L7.forEach(t),Ior=i(Fa),Do=n(Fa,"UL",{});var Ta=s(Do);fv=n(Ta,"LI",{});var Nqe=s(fv);T8e=n(Nqe,"STRONG",{});var Myt=s(T8e);Nor=r(Myt,"bert"),Myt.forEach(t),qor=r(Nqe," \u2014 "),vQ=n(Nqe,"A",{href:!0});var Eyt=s(vQ);jor=r(Eyt,"BertForNextSentencePrediction"),Eyt.forEach(t),Dor=r(Nqe," (BERT model)"),Nqe.forEach(t),Gor=i(Ta),mv=n(Ta,"LI",{});var qqe=s(mv);M8e=n(qqe,"STRONG",{});var Cyt=s(M8e);Oor=r(Cyt,"fnet"),Cyt.forEach(t),Vor=r(qqe," \u2014 "),FQ=n(qqe,"A",{href:!0});var wyt=s(FQ);Xor=r(wyt,"FNetForNextSentencePrediction"),wyt.forEach(t),zor=r(qqe," (FNet model)"),qqe.forEach(t),Wor=i(Ta),gv=n(Ta,"LI",{});var jqe=s(gv);E8e=n(jqe,"STRONG",{});var Ayt=s(E8e);Qor=r(Ayt,"megatron-bert"),Ayt.forEach(t),Uor=r(jqe," \u2014 "),TQ=n(jqe,"A",{href:!0});var Lyt=s(TQ);Hor=r(Lyt,"MegatronBertForNextSentencePrediction"),Lyt.forEach(t),Jor=r(jqe," (Megatron-BERT model)"),jqe.forEach(t),Yor=i(Ta),hv=n(Ta,"LI",{});var Dqe=s(hv);C8e=n(Dqe,"STRONG",{});var yyt=s(C8e);Kor=r(yyt,"mobilebert"),yyt.forEach(t),Zor=r(Dqe," \u2014 "),MQ=n(Dqe,"A",{href:!0});var xyt=s(MQ);err=r(xyt,"MobileBertForNextSentencePrediction"),xyt.forEach(t),orr=r(Dqe," (MobileBERT model)"),Dqe.forEach(t),rrr=i(Ta),pv=n(Ta,"LI",{});var Gqe=s(pv);w8e=n(Gqe,"STRONG",{});var $yt=s(w8e);trr=r($yt,"nezha"),$yt.forEach(t),arr=r(Gqe," \u2014 "),EQ=n(Gqe,"A",{href:!0});var kyt=s(EQ);nrr=r(kyt,"NezhaForNextSentencePrediction"),kyt.forEach(t),srr=r(Gqe," (Nezha model)"),Gqe.forEach(t),lrr=i(Ta),_v=n(Ta,"LI",{});var Oqe=s(_v);A8e=n(Oqe,"STRONG",{});var Syt=s(A8e);irr=r(Syt,"qdqbert"),Syt.forEach(t),drr=r(Oqe," \u2014 "),CQ=n(Oqe,"A",{href:!0});var Ryt=s(CQ);crr=r(Ryt,"QDQBertForNextSentencePrediction"),Ryt.forEach(t),frr=r(Oqe," (QDQBert model)"),Oqe.forEach(t),Ta.forEach(t),mrr=i(Fa),uv=n(Fa,"P",{});var Vqe=s(uv);grr=r(Vqe,"The model is set in evaluation mode by default using "),L8e=n(Vqe,"CODE",{});var Pyt=s(L8e);hrr=r(Pyt,"model.eval()"),Pyt.forEach(t),prr=r(Vqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y8e=n(Vqe,"CODE",{});var Byt=s(y8e);_rr=r(Byt,"model.train()"),Byt.forEach(t),Vqe.forEach(t),urr=i(Fa),T(bv.$$.fragment,Fa),Fa.forEach(t),Tl.forEach(t),pUe=i(f),Ad=n(f,"H2",{class:!0});var wJe=s(Ad);vv=n(wJe,"A",{id:!0,class:!0,href:!0});var Iyt=s(vv);x8e=n(Iyt,"SPAN",{});var Nyt=s(x8e);T(w9.$$.fragment,Nyt),Nyt.forEach(t),Iyt.forEach(t),brr=i(wJe),$8e=n(wJe,"SPAN",{});var qyt=s($8e);vrr=r(qyt,"AutoModelForTokenClassification"),qyt.forEach(t),wJe.forEach(t),_Ue=i(f),Go=n(f,"DIV",{class:!0});var Ml=s(Go);T(A9.$$.fragment,Ml),Frr=i(Ml),Ld=n(Ml,"P",{});var rne=s(Ld);Trr=r(rne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wQ=n(rne,"A",{href:!0});var jyt=s(wQ);Mrr=r(jyt,"from_pretrained()"),jyt.forEach(t),Err=r(rne," class method or the "),AQ=n(rne,"A",{href:!0});var Dyt=s(AQ);Crr=r(Dyt,"from_config()"),Dyt.forEach(t),wrr=r(rne,` class
method.`),rne.forEach(t),Arr=i(Ml),L9=n(Ml,"P",{});var AJe=s(L9);Lrr=r(AJe,"This class cannot be instantiated directly using "),k8e=n(AJe,"CODE",{});var Gyt=s(k8e);yrr=r(Gyt,"__init__()"),Gyt.forEach(t),xrr=r(AJe," (throws an error)."),AJe.forEach(t),$rr=i(Ml),Ft=n(Ml,"DIV",{class:!0});var y7=s(Ft);T(y9.$$.fragment,y7),krr=i(y7),S8e=n(y7,"P",{});var Oyt=s(S8e);Srr=r(Oyt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Oyt.forEach(t),Rrr=i(y7),yd=n(y7,"P",{});var tne=s(yd);Prr=r(tne,`Note:
Loading a model from its configuration file does `),R8e=n(tne,"STRONG",{});var Vyt=s(R8e);Brr=r(Vyt,"not"),Vyt.forEach(t),Irr=r(tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),LQ=n(tne,"A",{href:!0});var Xyt=s(LQ);Nrr=r(Xyt,"from_pretrained()"),Xyt.forEach(t),qrr=r(tne," to load the model weights."),tne.forEach(t),jrr=i(y7),T(Fv.$$.fragment,y7),y7.forEach(t),Drr=i(Ml),no=n(Ml,"DIV",{class:!0});var Ma=s(no);T(x9.$$.fragment,Ma),Grr=i(Ma),P8e=n(Ma,"P",{});var zyt=s(P8e);Orr=r(zyt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zyt.forEach(t),Vrr=i(Ma),Ya=n(Ma,"P",{});var x7=s(Ya);Xrr=r(x7,"The model class to instantiate is selected based on the "),B8e=n(x7,"CODE",{});var Wyt=s(B8e);zrr=r(Wyt,"model_type"),Wyt.forEach(t),Wrr=r(x7,` property of the config object (either
passed as an argument or loaded from `),I8e=n(x7,"CODE",{});var Qyt=s(I8e);Qrr=r(Qyt,"pretrained_model_name_or_path"),Qyt.forEach(t),Urr=r(x7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N8e=n(x7,"CODE",{});var Uyt=s(N8e);Hrr=r(Uyt,"pretrained_model_name_or_path"),Uyt.forEach(t),Jrr=r(x7,":"),x7.forEach(t),Yrr=i(Ma),H=n(Ma,"UL",{});var K=s(H);Tv=n(K,"LI",{});var Xqe=s(Tv);q8e=n(Xqe,"STRONG",{});var Hyt=s(q8e);Krr=r(Hyt,"albert"),Hyt.forEach(t),Zrr=r(Xqe," \u2014 "),yQ=n(Xqe,"A",{href:!0});var Jyt=s(yQ);etr=r(Jyt,"AlbertForTokenClassification"),Jyt.forEach(t),otr=r(Xqe," (ALBERT model)"),Xqe.forEach(t),rtr=i(K),Mv=n(K,"LI",{});var zqe=s(Mv);j8e=n(zqe,"STRONG",{});var Yyt=s(j8e);ttr=r(Yyt,"bert"),Yyt.forEach(t),atr=r(zqe," \u2014 "),xQ=n(zqe,"A",{href:!0});var Kyt=s(xQ);ntr=r(Kyt,"BertForTokenClassification"),Kyt.forEach(t),str=r(zqe," (BERT model)"),zqe.forEach(t),ltr=i(K),Ev=n(K,"LI",{});var Wqe=s(Ev);D8e=n(Wqe,"STRONG",{});var Zyt=s(D8e);itr=r(Zyt,"big_bird"),Zyt.forEach(t),dtr=r(Wqe," \u2014 "),$Q=n(Wqe,"A",{href:!0});var e9t=s($Q);ctr=r(e9t,"BigBirdForTokenClassification"),e9t.forEach(t),ftr=r(Wqe," (BigBird model)"),Wqe.forEach(t),mtr=i(K),Cv=n(K,"LI",{});var Qqe=s(Cv);G8e=n(Qqe,"STRONG",{});var o9t=s(G8e);gtr=r(o9t,"bloom"),o9t.forEach(t),htr=r(Qqe," \u2014 "),kQ=n(Qqe,"A",{href:!0});var r9t=s(kQ);ptr=r(r9t,"BloomForTokenClassification"),r9t.forEach(t),_tr=r(Qqe," (BLOOM model)"),Qqe.forEach(t),utr=i(K),wv=n(K,"LI",{});var Uqe=s(wv);O8e=n(Uqe,"STRONG",{});var t9t=s(O8e);btr=r(t9t,"camembert"),t9t.forEach(t),vtr=r(Uqe," \u2014 "),SQ=n(Uqe,"A",{href:!0});var a9t=s(SQ);Ftr=r(a9t,"CamembertForTokenClassification"),a9t.forEach(t),Ttr=r(Uqe," (CamemBERT model)"),Uqe.forEach(t),Mtr=i(K),Av=n(K,"LI",{});var Hqe=s(Av);V8e=n(Hqe,"STRONG",{});var n9t=s(V8e);Etr=r(n9t,"canine"),n9t.forEach(t),Ctr=r(Hqe," \u2014 "),RQ=n(Hqe,"A",{href:!0});var s9t=s(RQ);wtr=r(s9t,"CanineForTokenClassification"),s9t.forEach(t),Atr=r(Hqe," (CANINE model)"),Hqe.forEach(t),Ltr=i(K),Lv=n(K,"LI",{});var Jqe=s(Lv);X8e=n(Jqe,"STRONG",{});var l9t=s(X8e);ytr=r(l9t,"convbert"),l9t.forEach(t),xtr=r(Jqe," \u2014 "),PQ=n(Jqe,"A",{href:!0});var i9t=s(PQ);$tr=r(i9t,"ConvBertForTokenClassification"),i9t.forEach(t),ktr=r(Jqe," (ConvBERT model)"),Jqe.forEach(t),Str=i(K),yv=n(K,"LI",{});var Yqe=s(yv);z8e=n(Yqe,"STRONG",{});var d9t=s(z8e);Rtr=r(d9t,"data2vec-text"),d9t.forEach(t),Ptr=r(Yqe," \u2014 "),BQ=n(Yqe,"A",{href:!0});var c9t=s(BQ);Btr=r(c9t,"Data2VecTextForTokenClassification"),c9t.forEach(t),Itr=r(Yqe," (Data2VecText model)"),Yqe.forEach(t),Ntr=i(K),xv=n(K,"LI",{});var Kqe=s(xv);W8e=n(Kqe,"STRONG",{});var f9t=s(W8e);qtr=r(f9t,"deberta"),f9t.forEach(t),jtr=r(Kqe," \u2014 "),IQ=n(Kqe,"A",{href:!0});var m9t=s(IQ);Dtr=r(m9t,"DebertaForTokenClassification"),m9t.forEach(t),Gtr=r(Kqe," (DeBERTa model)"),Kqe.forEach(t),Otr=i(K),$v=n(K,"LI",{});var Zqe=s($v);Q8e=n(Zqe,"STRONG",{});var g9t=s(Q8e);Vtr=r(g9t,"deberta-v2"),g9t.forEach(t),Xtr=r(Zqe," \u2014 "),NQ=n(Zqe,"A",{href:!0});var h9t=s(NQ);ztr=r(h9t,"DebertaV2ForTokenClassification"),h9t.forEach(t),Wtr=r(Zqe," (DeBERTa-v2 model)"),Zqe.forEach(t),Qtr=i(K),kv=n(K,"LI",{});var eje=s(kv);U8e=n(eje,"STRONG",{});var p9t=s(U8e);Utr=r(p9t,"distilbert"),p9t.forEach(t),Htr=r(eje," \u2014 "),qQ=n(eje,"A",{href:!0});var _9t=s(qQ);Jtr=r(_9t,"DistilBertForTokenClassification"),_9t.forEach(t),Ytr=r(eje," (DistilBERT model)"),eje.forEach(t),Ktr=i(K),Sv=n(K,"LI",{});var oje=s(Sv);H8e=n(oje,"STRONG",{});var u9t=s(H8e);Ztr=r(u9t,"electra"),u9t.forEach(t),ear=r(oje," \u2014 "),jQ=n(oje,"A",{href:!0});var b9t=s(jQ);oar=r(b9t,"ElectraForTokenClassification"),b9t.forEach(t),rar=r(oje," (ELECTRA model)"),oje.forEach(t),tar=i(K),Rv=n(K,"LI",{});var rje=s(Rv);J8e=n(rje,"STRONG",{});var v9t=s(J8e);aar=r(v9t,"flaubert"),v9t.forEach(t),nar=r(rje," \u2014 "),DQ=n(rje,"A",{href:!0});var F9t=s(DQ);sar=r(F9t,"FlaubertForTokenClassification"),F9t.forEach(t),lar=r(rje," (FlauBERT model)"),rje.forEach(t),iar=i(K),Pv=n(K,"LI",{});var tje=s(Pv);Y8e=n(tje,"STRONG",{});var T9t=s(Y8e);dar=r(T9t,"fnet"),T9t.forEach(t),car=r(tje," \u2014 "),GQ=n(tje,"A",{href:!0});var M9t=s(GQ);far=r(M9t,"FNetForTokenClassification"),M9t.forEach(t),mar=r(tje," (FNet model)"),tje.forEach(t),gar=i(K),Bv=n(K,"LI",{});var aje=s(Bv);K8e=n(aje,"STRONG",{});var E9t=s(K8e);har=r(E9t,"funnel"),E9t.forEach(t),par=r(aje," \u2014 "),OQ=n(aje,"A",{href:!0});var C9t=s(OQ);_ar=r(C9t,"FunnelForTokenClassification"),C9t.forEach(t),uar=r(aje," (Funnel Transformer model)"),aje.forEach(t),bar=i(K),Iv=n(K,"LI",{});var nje=s(Iv);Z8e=n(nje,"STRONG",{});var w9t=s(Z8e);Far=r(w9t,"gpt2"),w9t.forEach(t),Tar=r(nje," \u2014 "),VQ=n(nje,"A",{href:!0});var A9t=s(VQ);Mar=r(A9t,"GPT2ForTokenClassification"),A9t.forEach(t),Ear=r(nje," (OpenAI GPT-2 model)"),nje.forEach(t),Car=i(K),Nv=n(K,"LI",{});var sje=s(Nv);e2e=n(sje,"STRONG",{});var L9t=s(e2e);war=r(L9t,"ibert"),L9t.forEach(t),Aar=r(sje," \u2014 "),XQ=n(sje,"A",{href:!0});var y9t=s(XQ);Lar=r(y9t,"IBertForTokenClassification"),y9t.forEach(t),yar=r(sje," (I-BERT model)"),sje.forEach(t),xar=i(K),qv=n(K,"LI",{});var lje=s(qv);o2e=n(lje,"STRONG",{});var x9t=s(o2e);$ar=r(x9t,"layoutlm"),x9t.forEach(t),kar=r(lje," \u2014 "),zQ=n(lje,"A",{href:!0});var $9t=s(zQ);Sar=r($9t,"LayoutLMForTokenClassification"),$9t.forEach(t),Rar=r(lje," (LayoutLM model)"),lje.forEach(t),Par=i(K),jv=n(K,"LI",{});var ije=s(jv);r2e=n(ije,"STRONG",{});var k9t=s(r2e);Bar=r(k9t,"layoutlmv2"),k9t.forEach(t),Iar=r(ije," \u2014 "),WQ=n(ije,"A",{href:!0});var S9t=s(WQ);Nar=r(S9t,"LayoutLMv2ForTokenClassification"),S9t.forEach(t),qar=r(ije," (LayoutLMv2 model)"),ije.forEach(t),jar=i(K),Dv=n(K,"LI",{});var dje=s(Dv);t2e=n(dje,"STRONG",{});var R9t=s(t2e);Dar=r(R9t,"layoutlmv3"),R9t.forEach(t),Gar=r(dje," \u2014 "),QQ=n(dje,"A",{href:!0});var P9t=s(QQ);Oar=r(P9t,"LayoutLMv3ForTokenClassification"),P9t.forEach(t),Var=r(dje," (LayoutLMv3 model)"),dje.forEach(t),Xar=i(K),Gv=n(K,"LI",{});var cje=s(Gv);a2e=n(cje,"STRONG",{});var B9t=s(a2e);zar=r(B9t,"longformer"),B9t.forEach(t),War=r(cje," \u2014 "),UQ=n(cje,"A",{href:!0});var I9t=s(UQ);Qar=r(I9t,"LongformerForTokenClassification"),I9t.forEach(t),Uar=r(cje," (Longformer model)"),cje.forEach(t),Har=i(K),Ov=n(K,"LI",{});var fje=s(Ov);n2e=n(fje,"STRONG",{});var N9t=s(n2e);Jar=r(N9t,"luke"),N9t.forEach(t),Yar=r(fje," \u2014 "),HQ=n(fje,"A",{href:!0});var q9t=s(HQ);Kar=r(q9t,"LukeForTokenClassification"),q9t.forEach(t),Zar=r(fje," (LUKE model)"),fje.forEach(t),enr=i(K),Vv=n(K,"LI",{});var mje=s(Vv);s2e=n(mje,"STRONG",{});var j9t=s(s2e);onr=r(j9t,"megatron-bert"),j9t.forEach(t),rnr=r(mje," \u2014 "),JQ=n(mje,"A",{href:!0});var D9t=s(JQ);tnr=r(D9t,"MegatronBertForTokenClassification"),D9t.forEach(t),anr=r(mje," (Megatron-BERT model)"),mje.forEach(t),nnr=i(K),Xv=n(K,"LI",{});var gje=s(Xv);l2e=n(gje,"STRONG",{});var G9t=s(l2e);snr=r(G9t,"mobilebert"),G9t.forEach(t),lnr=r(gje," \u2014 "),YQ=n(gje,"A",{href:!0});var O9t=s(YQ);inr=r(O9t,"MobileBertForTokenClassification"),O9t.forEach(t),dnr=r(gje," (MobileBERT model)"),gje.forEach(t),cnr=i(K),zv=n(K,"LI",{});var hje=s(zv);i2e=n(hje,"STRONG",{});var V9t=s(i2e);fnr=r(V9t,"mpnet"),V9t.forEach(t),mnr=r(hje," \u2014 "),KQ=n(hje,"A",{href:!0});var X9t=s(KQ);gnr=r(X9t,"MPNetForTokenClassification"),X9t.forEach(t),hnr=r(hje," (MPNet model)"),hje.forEach(t),pnr=i(K),Wv=n(K,"LI",{});var pje=s(Wv);d2e=n(pje,"STRONG",{});var z9t=s(d2e);_nr=r(z9t,"nezha"),z9t.forEach(t),unr=r(pje," \u2014 "),ZQ=n(pje,"A",{href:!0});var W9t=s(ZQ);bnr=r(W9t,"NezhaForTokenClassification"),W9t.forEach(t),vnr=r(pje," (Nezha model)"),pje.forEach(t),Fnr=i(K),Qv=n(K,"LI",{});var _je=s(Qv);c2e=n(_je,"STRONG",{});var Q9t=s(c2e);Tnr=r(Q9t,"nystromformer"),Q9t.forEach(t),Mnr=r(_je," \u2014 "),eU=n(_je,"A",{href:!0});var U9t=s(eU);Enr=r(U9t,"NystromformerForTokenClassification"),U9t.forEach(t),Cnr=r(_je," (Nystr\xF6mformer model)"),_je.forEach(t),wnr=i(K),Uv=n(K,"LI",{});var uje=s(Uv);f2e=n(uje,"STRONG",{});var H9t=s(f2e);Anr=r(H9t,"qdqbert"),H9t.forEach(t),Lnr=r(uje," \u2014 "),oU=n(uje,"A",{href:!0});var J9t=s(oU);ynr=r(J9t,"QDQBertForTokenClassification"),J9t.forEach(t),xnr=r(uje," (QDQBert model)"),uje.forEach(t),$nr=i(K),Hv=n(K,"LI",{});var bje=s(Hv);m2e=n(bje,"STRONG",{});var Y9t=s(m2e);knr=r(Y9t,"rembert"),Y9t.forEach(t),Snr=r(bje," \u2014 "),rU=n(bje,"A",{href:!0});var K9t=s(rU);Rnr=r(K9t,"RemBertForTokenClassification"),K9t.forEach(t),Pnr=r(bje," (RemBERT model)"),bje.forEach(t),Bnr=i(K),Jv=n(K,"LI",{});var vje=s(Jv);g2e=n(vje,"STRONG",{});var Z9t=s(g2e);Inr=r(Z9t,"roberta"),Z9t.forEach(t),Nnr=r(vje," \u2014 "),tU=n(vje,"A",{href:!0});var ext=s(tU);qnr=r(ext,"RobertaForTokenClassification"),ext.forEach(t),jnr=r(vje," (RoBERTa model)"),vje.forEach(t),Dnr=i(K),Yv=n(K,"LI",{});var Fje=s(Yv);h2e=n(Fje,"STRONG",{});var oxt=s(h2e);Gnr=r(oxt,"roformer"),oxt.forEach(t),Onr=r(Fje," \u2014 "),aU=n(Fje,"A",{href:!0});var rxt=s(aU);Vnr=r(rxt,"RoFormerForTokenClassification"),rxt.forEach(t),Xnr=r(Fje," (RoFormer model)"),Fje.forEach(t),znr=i(K),Kv=n(K,"LI",{});var Tje=s(Kv);p2e=n(Tje,"STRONG",{});var txt=s(p2e);Wnr=r(txt,"squeezebert"),txt.forEach(t),Qnr=r(Tje," \u2014 "),nU=n(Tje,"A",{href:!0});var axt=s(nU);Unr=r(axt,"SqueezeBertForTokenClassification"),axt.forEach(t),Hnr=r(Tje," (SqueezeBERT model)"),Tje.forEach(t),Jnr=i(K),Zv=n(K,"LI",{});var Mje=s(Zv);_2e=n(Mje,"STRONG",{});var nxt=s(_2e);Ynr=r(nxt,"xlm"),nxt.forEach(t),Knr=r(Mje," \u2014 "),sU=n(Mje,"A",{href:!0});var sxt=s(sU);Znr=r(sxt,"XLMForTokenClassification"),sxt.forEach(t),esr=r(Mje," (XLM model)"),Mje.forEach(t),osr=i(K),eF=n(K,"LI",{});var Eje=s(eF);u2e=n(Eje,"STRONG",{});var lxt=s(u2e);rsr=r(lxt,"xlm-roberta"),lxt.forEach(t),tsr=r(Eje," \u2014 "),lU=n(Eje,"A",{href:!0});var ixt=s(lU);asr=r(ixt,"XLMRobertaForTokenClassification"),ixt.forEach(t),nsr=r(Eje," (XLM-RoBERTa model)"),Eje.forEach(t),ssr=i(K),oF=n(K,"LI",{});var Cje=s(oF);b2e=n(Cje,"STRONG",{});var dxt=s(b2e);lsr=r(dxt,"xlm-roberta-xl"),dxt.forEach(t),isr=r(Cje," \u2014 "),iU=n(Cje,"A",{href:!0});var cxt=s(iU);dsr=r(cxt,"XLMRobertaXLForTokenClassification"),cxt.forEach(t),csr=r(Cje," (XLM-RoBERTa-XL model)"),Cje.forEach(t),fsr=i(K),rF=n(K,"LI",{});var wje=s(rF);v2e=n(wje,"STRONG",{});var fxt=s(v2e);msr=r(fxt,"xlnet"),fxt.forEach(t),gsr=r(wje," \u2014 "),dU=n(wje,"A",{href:!0});var mxt=s(dU);hsr=r(mxt,"XLNetForTokenClassification"),mxt.forEach(t),psr=r(wje," (XLNet model)"),wje.forEach(t),_sr=i(K),tF=n(K,"LI",{});var Aje=s(tF);F2e=n(Aje,"STRONG",{});var gxt=s(F2e);usr=r(gxt,"yoso"),gxt.forEach(t),bsr=r(Aje," \u2014 "),cU=n(Aje,"A",{href:!0});var hxt=s(cU);vsr=r(hxt,"YosoForTokenClassification"),hxt.forEach(t),Fsr=r(Aje," (YOSO model)"),Aje.forEach(t),K.forEach(t),Tsr=i(Ma),aF=n(Ma,"P",{});var Lje=s(aF);Msr=r(Lje,"The model is set in evaluation mode by default using "),T2e=n(Lje,"CODE",{});var pxt=s(T2e);Esr=r(pxt,"model.eval()"),pxt.forEach(t),Csr=r(Lje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M2e=n(Lje,"CODE",{});var _xt=s(M2e);wsr=r(_xt,"model.train()"),_xt.forEach(t),Lje.forEach(t),Asr=i(Ma),T(nF.$$.fragment,Ma),Ma.forEach(t),Ml.forEach(t),uUe=i(f),xd=n(f,"H2",{class:!0});var LJe=s(xd);sF=n(LJe,"A",{id:!0,class:!0,href:!0});var uxt=s(sF);E2e=n(uxt,"SPAN",{});var bxt=s(E2e);T($9.$$.fragment,bxt),bxt.forEach(t),uxt.forEach(t),Lsr=i(LJe),C2e=n(LJe,"SPAN",{});var vxt=s(C2e);ysr=r(vxt,"AutoModelForQuestionAnswering"),vxt.forEach(t),LJe.forEach(t),bUe=i(f),Oo=n(f,"DIV",{class:!0});var El=s(Oo);T(k9.$$.fragment,El),xsr=i(El),$d=n(El,"P",{});var ane=s($d);$sr=r(ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fU=n(ane,"A",{href:!0});var Fxt=s(fU);ksr=r(Fxt,"from_pretrained()"),Fxt.forEach(t),Ssr=r(ane," class method or the "),mU=n(ane,"A",{href:!0});var Txt=s(mU);Rsr=r(Txt,"from_config()"),Txt.forEach(t),Psr=r(ane,` class
method.`),ane.forEach(t),Bsr=i(El),S9=n(El,"P",{});var yJe=s(S9);Isr=r(yJe,"This class cannot be instantiated directly using "),w2e=n(yJe,"CODE",{});var Mxt=s(w2e);Nsr=r(Mxt,"__init__()"),Mxt.forEach(t),qsr=r(yJe," (throws an error)."),yJe.forEach(t),jsr=i(El),Tt=n(El,"DIV",{class:!0});var $7=s(Tt);T(R9.$$.fragment,$7),Dsr=i($7),A2e=n($7,"P",{});var Ext=s(A2e);Gsr=r(Ext,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ext.forEach(t),Osr=i($7),kd=n($7,"P",{});var nne=s(kd);Vsr=r(nne,`Note:
Loading a model from its configuration file does `),L2e=n(nne,"STRONG",{});var Cxt=s(L2e);Xsr=r(Cxt,"not"),Cxt.forEach(t),zsr=r(nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=n(nne,"A",{href:!0});var wxt=s(gU);Wsr=r(wxt,"from_pretrained()"),wxt.forEach(t),Qsr=r(nne," to load the model weights."),nne.forEach(t),Usr=i($7),T(lF.$$.fragment,$7),$7.forEach(t),Hsr=i(El),so=n(El,"DIV",{class:!0});var Ea=s(so);T(P9.$$.fragment,Ea),Jsr=i(Ea),y2e=n(Ea,"P",{});var Axt=s(y2e);Ysr=r(Axt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Axt.forEach(t),Ksr=i(Ea),Ka=n(Ea,"P",{});var k7=s(Ka);Zsr=r(k7,"The model class to instantiate is selected based on the "),x2e=n(k7,"CODE",{});var Lxt=s(x2e);elr=r(Lxt,"model_type"),Lxt.forEach(t),olr=r(k7,` property of the config object (either
passed as an argument or loaded from `),$2e=n(k7,"CODE",{});var yxt=s($2e);rlr=r(yxt,"pretrained_model_name_or_path"),yxt.forEach(t),tlr=r(k7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k2e=n(k7,"CODE",{});var xxt=s(k2e);alr=r(xxt,"pretrained_model_name_or_path"),xxt.forEach(t),nlr=r(k7,":"),k7.forEach(t),slr=i(Ea),V=n(Ea,"UL",{});var X=s(V);iF=n(X,"LI",{});var yje=s(iF);S2e=n(yje,"STRONG",{});var $xt=s(S2e);llr=r($xt,"albert"),$xt.forEach(t),ilr=r(yje," \u2014 "),hU=n(yje,"A",{href:!0});var kxt=s(hU);dlr=r(kxt,"AlbertForQuestionAnswering"),kxt.forEach(t),clr=r(yje," (ALBERT model)"),yje.forEach(t),flr=i(X),dF=n(X,"LI",{});var xje=s(dF);R2e=n(xje,"STRONG",{});var Sxt=s(R2e);mlr=r(Sxt,"bart"),Sxt.forEach(t),glr=r(xje," \u2014 "),pU=n(xje,"A",{href:!0});var Rxt=s(pU);hlr=r(Rxt,"BartForQuestionAnswering"),Rxt.forEach(t),plr=r(xje," (BART model)"),xje.forEach(t),_lr=i(X),cF=n(X,"LI",{});var $je=s(cF);P2e=n($je,"STRONG",{});var Pxt=s(P2e);ulr=r(Pxt,"bert"),Pxt.forEach(t),blr=r($je," \u2014 "),_U=n($je,"A",{href:!0});var Bxt=s(_U);vlr=r(Bxt,"BertForQuestionAnswering"),Bxt.forEach(t),Flr=r($je," (BERT model)"),$je.forEach(t),Tlr=i(X),fF=n(X,"LI",{});var kje=s(fF);B2e=n(kje,"STRONG",{});var Ixt=s(B2e);Mlr=r(Ixt,"big_bird"),Ixt.forEach(t),Elr=r(kje," \u2014 "),uU=n(kje,"A",{href:!0});var Nxt=s(uU);Clr=r(Nxt,"BigBirdForQuestionAnswering"),Nxt.forEach(t),wlr=r(kje," (BigBird model)"),kje.forEach(t),Alr=i(X),mF=n(X,"LI",{});var Sje=s(mF);I2e=n(Sje,"STRONG",{});var qxt=s(I2e);Llr=r(qxt,"bigbird_pegasus"),qxt.forEach(t),ylr=r(Sje," \u2014 "),bU=n(Sje,"A",{href:!0});var jxt=s(bU);xlr=r(jxt,"BigBirdPegasusForQuestionAnswering"),jxt.forEach(t),$lr=r(Sje," (BigBird-Pegasus model)"),Sje.forEach(t),klr=i(X),gF=n(X,"LI",{});var Rje=s(gF);N2e=n(Rje,"STRONG",{});var Dxt=s(N2e);Slr=r(Dxt,"camembert"),Dxt.forEach(t),Rlr=r(Rje," \u2014 "),vU=n(Rje,"A",{href:!0});var Gxt=s(vU);Plr=r(Gxt,"CamembertForQuestionAnswering"),Gxt.forEach(t),Blr=r(Rje," (CamemBERT model)"),Rje.forEach(t),Ilr=i(X),hF=n(X,"LI",{});var Pje=s(hF);q2e=n(Pje,"STRONG",{});var Oxt=s(q2e);Nlr=r(Oxt,"canine"),Oxt.forEach(t),qlr=r(Pje," \u2014 "),FU=n(Pje,"A",{href:!0});var Vxt=s(FU);jlr=r(Vxt,"CanineForQuestionAnswering"),Vxt.forEach(t),Dlr=r(Pje," (CANINE model)"),Pje.forEach(t),Glr=i(X),pF=n(X,"LI",{});var Bje=s(pF);j2e=n(Bje,"STRONG",{});var Xxt=s(j2e);Olr=r(Xxt,"convbert"),Xxt.forEach(t),Vlr=r(Bje," \u2014 "),TU=n(Bje,"A",{href:!0});var zxt=s(TU);Xlr=r(zxt,"ConvBertForQuestionAnswering"),zxt.forEach(t),zlr=r(Bje," (ConvBERT model)"),Bje.forEach(t),Wlr=i(X),_F=n(X,"LI",{});var Ije=s(_F);D2e=n(Ije,"STRONG",{});var Wxt=s(D2e);Qlr=r(Wxt,"data2vec-text"),Wxt.forEach(t),Ulr=r(Ije," \u2014 "),MU=n(Ije,"A",{href:!0});var Qxt=s(MU);Hlr=r(Qxt,"Data2VecTextForQuestionAnswering"),Qxt.forEach(t),Jlr=r(Ije," (Data2VecText model)"),Ije.forEach(t),Ylr=i(X),uF=n(X,"LI",{});var Nje=s(uF);G2e=n(Nje,"STRONG",{});var Uxt=s(G2e);Klr=r(Uxt,"deberta"),Uxt.forEach(t),Zlr=r(Nje," \u2014 "),EU=n(Nje,"A",{href:!0});var Hxt=s(EU);eir=r(Hxt,"DebertaForQuestionAnswering"),Hxt.forEach(t),oir=r(Nje," (DeBERTa model)"),Nje.forEach(t),rir=i(X),bF=n(X,"LI",{});var qje=s(bF);O2e=n(qje,"STRONG",{});var Jxt=s(O2e);tir=r(Jxt,"deberta-v2"),Jxt.forEach(t),air=r(qje," \u2014 "),CU=n(qje,"A",{href:!0});var Yxt=s(CU);nir=r(Yxt,"DebertaV2ForQuestionAnswering"),Yxt.forEach(t),sir=r(qje," (DeBERTa-v2 model)"),qje.forEach(t),lir=i(X),vF=n(X,"LI",{});var jje=s(vF);V2e=n(jje,"STRONG",{});var Kxt=s(V2e);iir=r(Kxt,"distilbert"),Kxt.forEach(t),dir=r(jje," \u2014 "),wU=n(jje,"A",{href:!0});var Zxt=s(wU);cir=r(Zxt,"DistilBertForQuestionAnswering"),Zxt.forEach(t),fir=r(jje," (DistilBERT model)"),jje.forEach(t),mir=i(X),FF=n(X,"LI",{});var Dje=s(FF);X2e=n(Dje,"STRONG",{});var e$t=s(X2e);gir=r(e$t,"electra"),e$t.forEach(t),hir=r(Dje," \u2014 "),AU=n(Dje,"A",{href:!0});var o$t=s(AU);pir=r(o$t,"ElectraForQuestionAnswering"),o$t.forEach(t),_ir=r(Dje," (ELECTRA model)"),Dje.forEach(t),uir=i(X),TF=n(X,"LI",{});var Gje=s(TF);z2e=n(Gje,"STRONG",{});var r$t=s(z2e);bir=r(r$t,"flaubert"),r$t.forEach(t),vir=r(Gje," \u2014 "),LU=n(Gje,"A",{href:!0});var t$t=s(LU);Fir=r(t$t,"FlaubertForQuestionAnsweringSimple"),t$t.forEach(t),Tir=r(Gje," (FlauBERT model)"),Gje.forEach(t),Mir=i(X),MF=n(X,"LI",{});var Oje=s(MF);W2e=n(Oje,"STRONG",{});var a$t=s(W2e);Eir=r(a$t,"fnet"),a$t.forEach(t),Cir=r(Oje," \u2014 "),yU=n(Oje,"A",{href:!0});var n$t=s(yU);wir=r(n$t,"FNetForQuestionAnswering"),n$t.forEach(t),Air=r(Oje," (FNet model)"),Oje.forEach(t),Lir=i(X),EF=n(X,"LI",{});var Vje=s(EF);Q2e=n(Vje,"STRONG",{});var s$t=s(Q2e);yir=r(s$t,"funnel"),s$t.forEach(t),xir=r(Vje," \u2014 "),xU=n(Vje,"A",{href:!0});var l$t=s(xU);$ir=r(l$t,"FunnelForQuestionAnswering"),l$t.forEach(t),kir=r(Vje," (Funnel Transformer model)"),Vje.forEach(t),Sir=i(X),CF=n(X,"LI",{});var Xje=s(CF);U2e=n(Xje,"STRONG",{});var i$t=s(U2e);Rir=r(i$t,"gptj"),i$t.forEach(t),Pir=r(Xje," \u2014 "),$U=n(Xje,"A",{href:!0});var d$t=s($U);Bir=r(d$t,"GPTJForQuestionAnswering"),d$t.forEach(t),Iir=r(Xje," (GPT-J model)"),Xje.forEach(t),Nir=i(X),wF=n(X,"LI",{});var zje=s(wF);H2e=n(zje,"STRONG",{});var c$t=s(H2e);qir=r(c$t,"ibert"),c$t.forEach(t),jir=r(zje," \u2014 "),kU=n(zje,"A",{href:!0});var f$t=s(kU);Dir=r(f$t,"IBertForQuestionAnswering"),f$t.forEach(t),Gir=r(zje," (I-BERT model)"),zje.forEach(t),Oir=i(X),AF=n(X,"LI",{});var Wje=s(AF);J2e=n(Wje,"STRONG",{});var m$t=s(J2e);Vir=r(m$t,"layoutlmv2"),m$t.forEach(t),Xir=r(Wje," \u2014 "),SU=n(Wje,"A",{href:!0});var g$t=s(SU);zir=r(g$t,"LayoutLMv2ForQuestionAnswering"),g$t.forEach(t),Wir=r(Wje," (LayoutLMv2 model)"),Wje.forEach(t),Qir=i(X),LF=n(X,"LI",{});var Qje=s(LF);Y2e=n(Qje,"STRONG",{});var h$t=s(Y2e);Uir=r(h$t,"layoutlmv3"),h$t.forEach(t),Hir=r(Qje," \u2014 "),RU=n(Qje,"A",{href:!0});var p$t=s(RU);Jir=r(p$t,"LayoutLMv3ForQuestionAnswering"),p$t.forEach(t),Yir=r(Qje," (LayoutLMv3 model)"),Qje.forEach(t),Kir=i(X),yF=n(X,"LI",{});var Uje=s(yF);K2e=n(Uje,"STRONG",{});var _$t=s(K2e);Zir=r(_$t,"led"),_$t.forEach(t),edr=r(Uje," \u2014 "),PU=n(Uje,"A",{href:!0});var u$t=s(PU);odr=r(u$t,"LEDForQuestionAnswering"),u$t.forEach(t),rdr=r(Uje," (LED model)"),Uje.forEach(t),tdr=i(X),xF=n(X,"LI",{});var Hje=s(xF);Z2e=n(Hje,"STRONG",{});var b$t=s(Z2e);adr=r(b$t,"longformer"),b$t.forEach(t),ndr=r(Hje," \u2014 "),BU=n(Hje,"A",{href:!0});var v$t=s(BU);sdr=r(v$t,"LongformerForQuestionAnswering"),v$t.forEach(t),ldr=r(Hje," (Longformer model)"),Hje.forEach(t),idr=i(X),$F=n(X,"LI",{});var Jje=s($F);ebe=n(Jje,"STRONG",{});var F$t=s(ebe);ddr=r(F$t,"luke"),F$t.forEach(t),cdr=r(Jje," \u2014 "),IU=n(Jje,"A",{href:!0});var T$t=s(IU);fdr=r(T$t,"LukeForQuestionAnswering"),T$t.forEach(t),mdr=r(Jje," (LUKE model)"),Jje.forEach(t),gdr=i(X),kF=n(X,"LI",{});var Yje=s(kF);obe=n(Yje,"STRONG",{});var M$t=s(obe);hdr=r(M$t,"lxmert"),M$t.forEach(t),pdr=r(Yje," \u2014 "),NU=n(Yje,"A",{href:!0});var E$t=s(NU);_dr=r(E$t,"LxmertForQuestionAnswering"),E$t.forEach(t),udr=r(Yje," (LXMERT model)"),Yje.forEach(t),bdr=i(X),SF=n(X,"LI",{});var Kje=s(SF);rbe=n(Kje,"STRONG",{});var C$t=s(rbe);vdr=r(C$t,"mbart"),C$t.forEach(t),Fdr=r(Kje," \u2014 "),qU=n(Kje,"A",{href:!0});var w$t=s(qU);Tdr=r(w$t,"MBartForQuestionAnswering"),w$t.forEach(t),Mdr=r(Kje," (mBART model)"),Kje.forEach(t),Edr=i(X),RF=n(X,"LI",{});var Zje=s(RF);tbe=n(Zje,"STRONG",{});var A$t=s(tbe);Cdr=r(A$t,"megatron-bert"),A$t.forEach(t),wdr=r(Zje," \u2014 "),jU=n(Zje,"A",{href:!0});var L$t=s(jU);Adr=r(L$t,"MegatronBertForQuestionAnswering"),L$t.forEach(t),Ldr=r(Zje," (Megatron-BERT model)"),Zje.forEach(t),ydr=i(X),PF=n(X,"LI",{});var eDe=s(PF);abe=n(eDe,"STRONG",{});var y$t=s(abe);xdr=r(y$t,"mobilebert"),y$t.forEach(t),$dr=r(eDe," \u2014 "),DU=n(eDe,"A",{href:!0});var x$t=s(DU);kdr=r(x$t,"MobileBertForQuestionAnswering"),x$t.forEach(t),Sdr=r(eDe," (MobileBERT model)"),eDe.forEach(t),Rdr=i(X),BF=n(X,"LI",{});var oDe=s(BF);nbe=n(oDe,"STRONG",{});var $$t=s(nbe);Pdr=r($$t,"mpnet"),$$t.forEach(t),Bdr=r(oDe," \u2014 "),GU=n(oDe,"A",{href:!0});var k$t=s(GU);Idr=r(k$t,"MPNetForQuestionAnswering"),k$t.forEach(t),Ndr=r(oDe," (MPNet model)"),oDe.forEach(t),qdr=i(X),IF=n(X,"LI",{});var rDe=s(IF);sbe=n(rDe,"STRONG",{});var S$t=s(sbe);jdr=r(S$t,"mvp"),S$t.forEach(t),Ddr=r(rDe," \u2014 "),OU=n(rDe,"A",{href:!0});var R$t=s(OU);Gdr=r(R$t,"MvpForQuestionAnswering"),R$t.forEach(t),Odr=r(rDe," (MVP model)"),rDe.forEach(t),Vdr=i(X),NF=n(X,"LI",{});var tDe=s(NF);lbe=n(tDe,"STRONG",{});var P$t=s(lbe);Xdr=r(P$t,"nezha"),P$t.forEach(t),zdr=r(tDe," \u2014 "),VU=n(tDe,"A",{href:!0});var B$t=s(VU);Wdr=r(B$t,"NezhaForQuestionAnswering"),B$t.forEach(t),Qdr=r(tDe," (Nezha model)"),tDe.forEach(t),Udr=i(X),qF=n(X,"LI",{});var aDe=s(qF);ibe=n(aDe,"STRONG",{});var I$t=s(ibe);Hdr=r(I$t,"nystromformer"),I$t.forEach(t),Jdr=r(aDe," \u2014 "),XU=n(aDe,"A",{href:!0});var N$t=s(XU);Ydr=r(N$t,"NystromformerForQuestionAnswering"),N$t.forEach(t),Kdr=r(aDe," (Nystr\xF6mformer model)"),aDe.forEach(t),Zdr=i(X),jF=n(X,"LI",{});var nDe=s(jF);dbe=n(nDe,"STRONG",{});var q$t=s(dbe);ecr=r(q$t,"qdqbert"),q$t.forEach(t),ocr=r(nDe," \u2014 "),zU=n(nDe,"A",{href:!0});var j$t=s(zU);rcr=r(j$t,"QDQBertForQuestionAnswering"),j$t.forEach(t),tcr=r(nDe," (QDQBert model)"),nDe.forEach(t),acr=i(X),DF=n(X,"LI",{});var sDe=s(DF);cbe=n(sDe,"STRONG",{});var D$t=s(cbe);ncr=r(D$t,"reformer"),D$t.forEach(t),scr=r(sDe," \u2014 "),WU=n(sDe,"A",{href:!0});var G$t=s(WU);lcr=r(G$t,"ReformerForQuestionAnswering"),G$t.forEach(t),icr=r(sDe," (Reformer model)"),sDe.forEach(t),dcr=i(X),GF=n(X,"LI",{});var lDe=s(GF);fbe=n(lDe,"STRONG",{});var O$t=s(fbe);ccr=r(O$t,"rembert"),O$t.forEach(t),fcr=r(lDe," \u2014 "),QU=n(lDe,"A",{href:!0});var V$t=s(QU);mcr=r(V$t,"RemBertForQuestionAnswering"),V$t.forEach(t),gcr=r(lDe," (RemBERT model)"),lDe.forEach(t),hcr=i(X),OF=n(X,"LI",{});var iDe=s(OF);mbe=n(iDe,"STRONG",{});var X$t=s(mbe);pcr=r(X$t,"roberta"),X$t.forEach(t),_cr=r(iDe," \u2014 "),UU=n(iDe,"A",{href:!0});var z$t=s(UU);ucr=r(z$t,"RobertaForQuestionAnswering"),z$t.forEach(t),bcr=r(iDe," (RoBERTa model)"),iDe.forEach(t),vcr=i(X),VF=n(X,"LI",{});var dDe=s(VF);gbe=n(dDe,"STRONG",{});var W$t=s(gbe);Fcr=r(W$t,"roformer"),W$t.forEach(t),Tcr=r(dDe," \u2014 "),HU=n(dDe,"A",{href:!0});var Q$t=s(HU);Mcr=r(Q$t,"RoFormerForQuestionAnswering"),Q$t.forEach(t),Ecr=r(dDe," (RoFormer model)"),dDe.forEach(t),Ccr=i(X),XF=n(X,"LI",{});var cDe=s(XF);hbe=n(cDe,"STRONG",{});var U$t=s(hbe);wcr=r(U$t,"splinter"),U$t.forEach(t),Acr=r(cDe," \u2014 "),JU=n(cDe,"A",{href:!0});var H$t=s(JU);Lcr=r(H$t,"SplinterForQuestionAnswering"),H$t.forEach(t),ycr=r(cDe," (Splinter model)"),cDe.forEach(t),xcr=i(X),zF=n(X,"LI",{});var fDe=s(zF);pbe=n(fDe,"STRONG",{});var J$t=s(pbe);$cr=r(J$t,"squeezebert"),J$t.forEach(t),kcr=r(fDe," \u2014 "),YU=n(fDe,"A",{href:!0});var Y$t=s(YU);Scr=r(Y$t,"SqueezeBertForQuestionAnswering"),Y$t.forEach(t),Rcr=r(fDe," (SqueezeBERT model)"),fDe.forEach(t),Pcr=i(X),WF=n(X,"LI",{});var mDe=s(WF);_be=n(mDe,"STRONG",{});var K$t=s(_be);Bcr=r(K$t,"xlm"),K$t.forEach(t),Icr=r(mDe," \u2014 "),KU=n(mDe,"A",{href:!0});var Z$t=s(KU);Ncr=r(Z$t,"XLMForQuestionAnsweringSimple"),Z$t.forEach(t),qcr=r(mDe," (XLM model)"),mDe.forEach(t),jcr=i(X),QF=n(X,"LI",{});var gDe=s(QF);ube=n(gDe,"STRONG",{});var ekt=s(ube);Dcr=r(ekt,"xlm-roberta"),ekt.forEach(t),Gcr=r(gDe," \u2014 "),ZU=n(gDe,"A",{href:!0});var okt=s(ZU);Ocr=r(okt,"XLMRobertaForQuestionAnswering"),okt.forEach(t),Vcr=r(gDe," (XLM-RoBERTa model)"),gDe.forEach(t),Xcr=i(X),UF=n(X,"LI",{});var hDe=s(UF);bbe=n(hDe,"STRONG",{});var rkt=s(bbe);zcr=r(rkt,"xlm-roberta-xl"),rkt.forEach(t),Wcr=r(hDe," \u2014 "),eH=n(hDe,"A",{href:!0});var tkt=s(eH);Qcr=r(tkt,"XLMRobertaXLForQuestionAnswering"),tkt.forEach(t),Ucr=r(hDe," (XLM-RoBERTa-XL model)"),hDe.forEach(t),Hcr=i(X),HF=n(X,"LI",{});var pDe=s(HF);vbe=n(pDe,"STRONG",{});var akt=s(vbe);Jcr=r(akt,"xlnet"),akt.forEach(t),Ycr=r(pDe," \u2014 "),oH=n(pDe,"A",{href:!0});var nkt=s(oH);Kcr=r(nkt,"XLNetForQuestionAnsweringSimple"),nkt.forEach(t),Zcr=r(pDe," (XLNet model)"),pDe.forEach(t),efr=i(X),JF=n(X,"LI",{});var _De=s(JF);Fbe=n(_De,"STRONG",{});var skt=s(Fbe);ofr=r(skt,"yoso"),skt.forEach(t),rfr=r(_De," \u2014 "),rH=n(_De,"A",{href:!0});var lkt=s(rH);tfr=r(lkt,"YosoForQuestionAnswering"),lkt.forEach(t),afr=r(_De," (YOSO model)"),_De.forEach(t),X.forEach(t),nfr=i(Ea),YF=n(Ea,"P",{});var uDe=s(YF);sfr=r(uDe,"The model is set in evaluation mode by default using "),Tbe=n(uDe,"CODE",{});var ikt=s(Tbe);lfr=r(ikt,"model.eval()"),ikt.forEach(t),ifr=r(uDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mbe=n(uDe,"CODE",{});var dkt=s(Mbe);dfr=r(dkt,"model.train()"),dkt.forEach(t),uDe.forEach(t),cfr=i(Ea),T(KF.$$.fragment,Ea),Ea.forEach(t),El.forEach(t),vUe=i(f),Sd=n(f,"H2",{class:!0});var xJe=s(Sd);ZF=n(xJe,"A",{id:!0,class:!0,href:!0});var ckt=s(ZF);Ebe=n(ckt,"SPAN",{});var fkt=s(Ebe);T(B9.$$.fragment,fkt),fkt.forEach(t),ckt.forEach(t),ffr=i(xJe),Cbe=n(xJe,"SPAN",{});var mkt=s(Cbe);mfr=r(mkt,"AutoModelForTableQuestionAnswering"),mkt.forEach(t),xJe.forEach(t),FUe=i(f),Vo=n(f,"DIV",{class:!0});var Cl=s(Vo);T(I9.$$.fragment,Cl),gfr=i(Cl),Rd=n(Cl,"P",{});var sne=s(Rd);hfr=r(sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),tH=n(sne,"A",{href:!0});var gkt=s(tH);pfr=r(gkt,"from_pretrained()"),gkt.forEach(t),_fr=r(sne," class method or the "),aH=n(sne,"A",{href:!0});var hkt=s(aH);ufr=r(hkt,"from_config()"),hkt.forEach(t),bfr=r(sne,` class
method.`),sne.forEach(t),vfr=i(Cl),N9=n(Cl,"P",{});var $Je=s(N9);Ffr=r($Je,"This class cannot be instantiated directly using "),wbe=n($Je,"CODE",{});var pkt=s(wbe);Tfr=r(pkt,"__init__()"),pkt.forEach(t),Mfr=r($Je," (throws an error)."),$Je.forEach(t),Efr=i(Cl),Mt=n(Cl,"DIV",{class:!0});var S7=s(Mt);T(q9.$$.fragment,S7),Cfr=i(S7),Abe=n(S7,"P",{});var _kt=s(Abe);wfr=r(_kt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_kt.forEach(t),Afr=i(S7),Pd=n(S7,"P",{});var lne=s(Pd);Lfr=r(lne,`Note:
Loading a model from its configuration file does `),Lbe=n(lne,"STRONG",{});var ukt=s(Lbe);yfr=r(ukt,"not"),ukt.forEach(t),xfr=r(lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=n(lne,"A",{href:!0});var bkt=s(nH);$fr=r(bkt,"from_pretrained()"),bkt.forEach(t),kfr=r(lne," to load the model weights."),lne.forEach(t),Sfr=i(S7),T(eT.$$.fragment,S7),S7.forEach(t),Rfr=i(Cl),lo=n(Cl,"DIV",{class:!0});var Ca=s(lo);T(j9.$$.fragment,Ca),Pfr=i(Ca),ybe=n(Ca,"P",{});var vkt=s(ybe);Bfr=r(vkt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),vkt.forEach(t),Ifr=i(Ca),Za=n(Ca,"P",{});var R7=s(Za);Nfr=r(R7,"The model class to instantiate is selected based on the "),xbe=n(R7,"CODE",{});var Fkt=s(xbe);qfr=r(Fkt,"model_type"),Fkt.forEach(t),jfr=r(R7,` property of the config object (either
passed as an argument or loaded from `),$be=n(R7,"CODE",{});var Tkt=s($be);Dfr=r(Tkt,"pretrained_model_name_or_path"),Tkt.forEach(t),Gfr=r(R7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kbe=n(R7,"CODE",{});var Mkt=s(kbe);Ofr=r(Mkt,"pretrained_model_name_or_path"),Mkt.forEach(t),Vfr=r(R7,":"),R7.forEach(t),Xfr=i(Ca),Sbe=n(Ca,"UL",{});var Ekt=s(Sbe);oT=n(Ekt,"LI",{});var bDe=s(oT);Rbe=n(bDe,"STRONG",{});var Ckt=s(Rbe);zfr=r(Ckt,"tapas"),Ckt.forEach(t),Wfr=r(bDe," \u2014 "),sH=n(bDe,"A",{href:!0});var wkt=s(sH);Qfr=r(wkt,"TapasForQuestionAnswering"),wkt.forEach(t),Ufr=r(bDe," (TAPAS model)"),bDe.forEach(t),Ekt.forEach(t),Hfr=i(Ca),rT=n(Ca,"P",{});var vDe=s(rT);Jfr=r(vDe,"The model is set in evaluation mode by default using "),Pbe=n(vDe,"CODE",{});var Akt=s(Pbe);Yfr=r(Akt,"model.eval()"),Akt.forEach(t),Kfr=r(vDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bbe=n(vDe,"CODE",{});var Lkt=s(Bbe);Zfr=r(Lkt,"model.train()"),Lkt.forEach(t),vDe.forEach(t),emr=i(Ca),T(tT.$$.fragment,Ca),Ca.forEach(t),Cl.forEach(t),TUe=i(f),Bd=n(f,"H2",{class:!0});var kJe=s(Bd);aT=n(kJe,"A",{id:!0,class:!0,href:!0});var ykt=s(aT);Ibe=n(ykt,"SPAN",{});var xkt=s(Ibe);T(D9.$$.fragment,xkt),xkt.forEach(t),ykt.forEach(t),omr=i(kJe),Nbe=n(kJe,"SPAN",{});var $kt=s(Nbe);rmr=r($kt,"AutoModelForImageClassification"),$kt.forEach(t),kJe.forEach(t),MUe=i(f),Xo=n(f,"DIV",{class:!0});var wl=s(Xo);T(G9.$$.fragment,wl),tmr=i(wl),Id=n(wl,"P",{});var ine=s(Id);amr=r(ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lH=n(ine,"A",{href:!0});var kkt=s(lH);nmr=r(kkt,"from_pretrained()"),kkt.forEach(t),smr=r(ine," class method or the "),iH=n(ine,"A",{href:!0});var Skt=s(iH);lmr=r(Skt,"from_config()"),Skt.forEach(t),imr=r(ine,` class
method.`),ine.forEach(t),dmr=i(wl),O9=n(wl,"P",{});var SJe=s(O9);cmr=r(SJe,"This class cannot be instantiated directly using "),qbe=n(SJe,"CODE",{});var Rkt=s(qbe);fmr=r(Rkt,"__init__()"),Rkt.forEach(t),mmr=r(SJe," (throws an error)."),SJe.forEach(t),gmr=i(wl),Et=n(wl,"DIV",{class:!0});var P7=s(Et);T(V9.$$.fragment,P7),hmr=i(P7),jbe=n(P7,"P",{});var Pkt=s(jbe);pmr=r(Pkt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Pkt.forEach(t),_mr=i(P7),Nd=n(P7,"P",{});var dne=s(Nd);umr=r(dne,`Note:
Loading a model from its configuration file does `),Dbe=n(dne,"STRONG",{});var Bkt=s(Dbe);bmr=r(Bkt,"not"),Bkt.forEach(t),vmr=r(dne,` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=n(dne,"A",{href:!0});var Ikt=s(dH);Fmr=r(Ikt,"from_pretrained()"),Ikt.forEach(t),Tmr=r(dne," to load the model weights."),dne.forEach(t),Mmr=i(P7),T(nT.$$.fragment,P7),P7.forEach(t),Emr=i(wl),io=n(wl,"DIV",{class:!0});var wa=s(io);T(X9.$$.fragment,wa),Cmr=i(wa),Gbe=n(wa,"P",{});var Nkt=s(Gbe);wmr=r(Nkt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Nkt.forEach(t),Amr=i(wa),en=n(wa,"P",{});var B7=s(en);Lmr=r(B7,"The model class to instantiate is selected based on the "),Obe=n(B7,"CODE",{});var qkt=s(Obe);ymr=r(qkt,"model_type"),qkt.forEach(t),xmr=r(B7,` property of the config object (either
passed as an argument or loaded from `),Vbe=n(B7,"CODE",{});var jkt=s(Vbe);$mr=r(jkt,"pretrained_model_name_or_path"),jkt.forEach(t),kmr=r(B7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xbe=n(B7,"CODE",{});var Dkt=s(Xbe);Smr=r(Dkt,"pretrained_model_name_or_path"),Dkt.forEach(t),Rmr=r(B7,":"),B7.forEach(t),Pmr=i(wa),be=n(wa,"UL",{});var Fe=s(be);sT=n(Fe,"LI",{});var FDe=s(sT);zbe=n(FDe,"STRONG",{});var Gkt=s(zbe);Bmr=r(Gkt,"beit"),Gkt.forEach(t),Imr=r(FDe," \u2014 "),cH=n(FDe,"A",{href:!0});var Okt=s(cH);Nmr=r(Okt,"BeitForImageClassification"),Okt.forEach(t),qmr=r(FDe," (BEiT model)"),FDe.forEach(t),jmr=i(Fe),lT=n(Fe,"LI",{});var TDe=s(lT);Wbe=n(TDe,"STRONG",{});var Vkt=s(Wbe);Dmr=r(Vkt,"convnext"),Vkt.forEach(t),Gmr=r(TDe," \u2014 "),fH=n(TDe,"A",{href:!0});var Xkt=s(fH);Omr=r(Xkt,"ConvNextForImageClassification"),Xkt.forEach(t),Vmr=r(TDe," (ConvNeXT model)"),TDe.forEach(t),Xmr=i(Fe),iT=n(Fe,"LI",{});var MDe=s(iT);Qbe=n(MDe,"STRONG",{});var zkt=s(Qbe);zmr=r(zkt,"cvt"),zkt.forEach(t),Wmr=r(MDe," \u2014 "),mH=n(MDe,"A",{href:!0});var Wkt=s(mH);Qmr=r(Wkt,"CvtForImageClassification"),Wkt.forEach(t),Umr=r(MDe," (CvT model)"),MDe.forEach(t),Hmr=i(Fe),dT=n(Fe,"LI",{});var EDe=s(dT);Ube=n(EDe,"STRONG",{});var Qkt=s(Ube);Jmr=r(Qkt,"data2vec-vision"),Qkt.forEach(t),Ymr=r(EDe," \u2014 "),gH=n(EDe,"A",{href:!0});var Ukt=s(gH);Kmr=r(Ukt,"Data2VecVisionForImageClassification"),Ukt.forEach(t),Zmr=r(EDe," (Data2VecVision model)"),EDe.forEach(t),egr=i(Fe),sl=n(Fe,"LI",{});var ZR=s(sl);Hbe=n(ZR,"STRONG",{});var Hkt=s(Hbe);ogr=r(Hkt,"deit"),Hkt.forEach(t),rgr=r(ZR," \u2014 "),hH=n(ZR,"A",{href:!0});var Jkt=s(hH);tgr=r(Jkt,"DeiTForImageClassification"),Jkt.forEach(t),agr=r(ZR," or "),pH=n(ZR,"A",{href:!0});var Ykt=s(pH);ngr=r(Ykt,"DeiTForImageClassificationWithTeacher"),Ykt.forEach(t),sgr=r(ZR," (DeiT model)"),ZR.forEach(t),lgr=i(Fe),cT=n(Fe,"LI",{});var CDe=s(cT);Jbe=n(CDe,"STRONG",{});var Kkt=s(Jbe);igr=r(Kkt,"imagegpt"),Kkt.forEach(t),dgr=r(CDe," \u2014 "),_H=n(CDe,"A",{href:!0});var Zkt=s(_H);cgr=r(Zkt,"ImageGPTForImageClassification"),Zkt.forEach(t),fgr=r(CDe," (ImageGPT model)"),CDe.forEach(t),mgr=i(Fe),ll=n(Fe,"LI",{});var eP=s(ll);Ybe=n(eP,"STRONG",{});var eSt=s(Ybe);ggr=r(eSt,"levit"),eSt.forEach(t),hgr=r(eP," \u2014 "),uH=n(eP,"A",{href:!0});var oSt=s(uH);pgr=r(oSt,"LevitForImageClassification"),oSt.forEach(t),_gr=r(eP," or "),bH=n(eP,"A",{href:!0});var rSt=s(bH);ugr=r(rSt,"LevitForImageClassificationWithTeacher"),rSt.forEach(t),bgr=r(eP," (LeViT model)"),eP.forEach(t),vgr=i(Fe),fT=n(Fe,"LI",{});var wDe=s(fT);Kbe=n(wDe,"STRONG",{});var tSt=s(Kbe);Fgr=r(tSt,"mobilevit"),tSt.forEach(t),Tgr=r(wDe," \u2014 "),vH=n(wDe,"A",{href:!0});var aSt=s(vH);Mgr=r(aSt,"MobileViTForImageClassification"),aSt.forEach(t),Egr=r(wDe," (MobileViT model)"),wDe.forEach(t),Cgr=i(Fe),Ct=n(Fe,"LI",{});var Zf=s(Ct);Zbe=n(Zf,"STRONG",{});var nSt=s(Zbe);wgr=r(nSt,"perceiver"),nSt.forEach(t),Agr=r(Zf," \u2014 "),FH=n(Zf,"A",{href:!0});var sSt=s(FH);Lgr=r(sSt,"PerceiverForImageClassificationLearned"),sSt.forEach(t),ygr=r(Zf," or "),TH=n(Zf,"A",{href:!0});var lSt=s(TH);xgr=r(lSt,"PerceiverForImageClassificationFourier"),lSt.forEach(t),$gr=r(Zf," or "),MH=n(Zf,"A",{href:!0});var iSt=s(MH);kgr=r(iSt,"PerceiverForImageClassificationConvProcessing"),iSt.forEach(t),Sgr=r(Zf," (Perceiver model)"),Zf.forEach(t),Rgr=i(Fe),mT=n(Fe,"LI",{});var ADe=s(mT);eve=n(ADe,"STRONG",{});var dSt=s(eve);Pgr=r(dSt,"poolformer"),dSt.forEach(t),Bgr=r(ADe," \u2014 "),EH=n(ADe,"A",{href:!0});var cSt=s(EH);Igr=r(cSt,"PoolFormerForImageClassification"),cSt.forEach(t),Ngr=r(ADe," (PoolFormer model)"),ADe.forEach(t),qgr=i(Fe),gT=n(Fe,"LI",{});var LDe=s(gT);ove=n(LDe,"STRONG",{});var fSt=s(ove);jgr=r(fSt,"regnet"),fSt.forEach(t),Dgr=r(LDe," \u2014 "),CH=n(LDe,"A",{href:!0});var mSt=s(CH);Ggr=r(mSt,"RegNetForImageClassification"),mSt.forEach(t),Ogr=r(LDe," (RegNet model)"),LDe.forEach(t),Vgr=i(Fe),hT=n(Fe,"LI",{});var yDe=s(hT);rve=n(yDe,"STRONG",{});var gSt=s(rve);Xgr=r(gSt,"resnet"),gSt.forEach(t),zgr=r(yDe," \u2014 "),wH=n(yDe,"A",{href:!0});var hSt=s(wH);Wgr=r(hSt,"ResNetForImageClassification"),hSt.forEach(t),Qgr=r(yDe," (ResNet model)"),yDe.forEach(t),Ugr=i(Fe),pT=n(Fe,"LI",{});var xDe=s(pT);tve=n(xDe,"STRONG",{});var pSt=s(tve);Hgr=r(pSt,"segformer"),pSt.forEach(t),Jgr=r(xDe," \u2014 "),AH=n(xDe,"A",{href:!0});var _St=s(AH);Ygr=r(_St,"SegformerForImageClassification"),_St.forEach(t),Kgr=r(xDe," (SegFormer model)"),xDe.forEach(t),Zgr=i(Fe),_T=n(Fe,"LI",{});var $De=s(_T);ave=n($De,"STRONG",{});var uSt=s(ave);ehr=r(uSt,"swin"),uSt.forEach(t),ohr=r($De," \u2014 "),LH=n($De,"A",{href:!0});var bSt=s(LH);rhr=r(bSt,"SwinForImageClassification"),bSt.forEach(t),thr=r($De," (Swin Transformer model)"),$De.forEach(t),ahr=i(Fe),uT=n(Fe,"LI",{});var kDe=s(uT);nve=n(kDe,"STRONG",{});var vSt=s(nve);nhr=r(vSt,"swinv2"),vSt.forEach(t),shr=r(kDe," \u2014 "),yH=n(kDe,"A",{href:!0});var FSt=s(yH);lhr=r(FSt,"Swinv2ForImageClassification"),FSt.forEach(t),ihr=r(kDe," (Swin Transformer V2 model)"),kDe.forEach(t),dhr=i(Fe),bT=n(Fe,"LI",{});var SDe=s(bT);sve=n(SDe,"STRONG",{});var TSt=s(sve);chr=r(TSt,"van"),TSt.forEach(t),fhr=r(SDe," \u2014 "),xH=n(SDe,"A",{href:!0});var MSt=s(xH);mhr=r(MSt,"VanForImageClassification"),MSt.forEach(t),ghr=r(SDe," (VAN model)"),SDe.forEach(t),hhr=i(Fe),vT=n(Fe,"LI",{});var RDe=s(vT);lve=n(RDe,"STRONG",{});var ESt=s(lve);phr=r(ESt,"vit"),ESt.forEach(t),_hr=r(RDe," \u2014 "),$H=n(RDe,"A",{href:!0});var CSt=s($H);uhr=r(CSt,"ViTForImageClassification"),CSt.forEach(t),bhr=r(RDe," (ViT model)"),RDe.forEach(t),Fe.forEach(t),vhr=i(wa),FT=n(wa,"P",{});var PDe=s(FT);Fhr=r(PDe,"The model is set in evaluation mode by default using "),ive=n(PDe,"CODE",{});var wSt=s(ive);Thr=r(wSt,"model.eval()"),wSt.forEach(t),Mhr=r(PDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dve=n(PDe,"CODE",{});var ASt=s(dve);Ehr=r(ASt,"model.train()"),ASt.forEach(t),PDe.forEach(t),Chr=i(wa),T(TT.$$.fragment,wa),wa.forEach(t),wl.forEach(t),EUe=i(f),qd=n(f,"H2",{class:!0});var RJe=s(qd);MT=n(RJe,"A",{id:!0,class:!0,href:!0});var LSt=s(MT);cve=n(LSt,"SPAN",{});var ySt=s(cve);T(z9.$$.fragment,ySt),ySt.forEach(t),LSt.forEach(t),whr=i(RJe),fve=n(RJe,"SPAN",{});var xSt=s(fve);Ahr=r(xSt,"AutoModelForVideoClassification"),xSt.forEach(t),RJe.forEach(t),CUe=i(f),zo=n(f,"DIV",{class:!0});var Al=s(zo);T(W9.$$.fragment,Al),Lhr=i(Al),jd=n(Al,"P",{});var cne=s(jd);yhr=r(cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),kH=n(cne,"A",{href:!0});var $St=s(kH);xhr=r($St,"from_pretrained()"),$St.forEach(t),$hr=r(cne," class method or the "),SH=n(cne,"A",{href:!0});var kSt=s(SH);khr=r(kSt,"from_config()"),kSt.forEach(t),Shr=r(cne,` class
method.`),cne.forEach(t),Rhr=i(Al),Q9=n(Al,"P",{});var PJe=s(Q9);Phr=r(PJe,"This class cannot be instantiated directly using "),mve=n(PJe,"CODE",{});var SSt=s(mve);Bhr=r(SSt,"__init__()"),SSt.forEach(t),Ihr=r(PJe," (throws an error)."),PJe.forEach(t),Nhr=i(Al),wt=n(Al,"DIV",{class:!0});var I7=s(wt);T(U9.$$.fragment,I7),qhr=i(I7),gve=n(I7,"P",{});var RSt=s(gve);jhr=r(RSt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),RSt.forEach(t),Dhr=i(I7),Dd=n(I7,"P",{});var fne=s(Dd);Ghr=r(fne,`Note:
Loading a model from its configuration file does `),hve=n(fne,"STRONG",{});var PSt=s(hve);Ohr=r(PSt,"not"),PSt.forEach(t),Vhr=r(fne,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(fne,"A",{href:!0});var BSt=s(RH);Xhr=r(BSt,"from_pretrained()"),BSt.forEach(t),zhr=r(fne," to load the model weights."),fne.forEach(t),Whr=i(I7),T(ET.$$.fragment,I7),I7.forEach(t),Qhr=i(Al),co=n(Al,"DIV",{class:!0});var Aa=s(co);T(H9.$$.fragment,Aa),Uhr=i(Aa),pve=n(Aa,"P",{});var ISt=s(pve);Hhr=r(ISt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),ISt.forEach(t),Jhr=i(Aa),on=n(Aa,"P",{});var N7=s(on);Yhr=r(N7,"The model class to instantiate is selected based on the "),_ve=n(N7,"CODE",{});var NSt=s(_ve);Khr=r(NSt,"model_type"),NSt.forEach(t),Zhr=r(N7,` property of the config object (either
passed as an argument or loaded from `),uve=n(N7,"CODE",{});var qSt=s(uve);epr=r(qSt,"pretrained_model_name_or_path"),qSt.forEach(t),opr=r(N7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=n(N7,"CODE",{});var jSt=s(bve);rpr=r(jSt,"pretrained_model_name_or_path"),jSt.forEach(t),tpr=r(N7,":"),N7.forEach(t),apr=i(Aa),vve=n(Aa,"UL",{});var DSt=s(vve);CT=n(DSt,"LI",{});var BDe=s(CT);Fve=n(BDe,"STRONG",{});var GSt=s(Fve);npr=r(GSt,"videomae"),GSt.forEach(t),spr=r(BDe," \u2014 "),PH=n(BDe,"A",{href:!0});var OSt=s(PH);lpr=r(OSt,"VideoMAEForVideoClassification"),OSt.forEach(t),ipr=r(BDe," (VideoMAE model)"),BDe.forEach(t),DSt.forEach(t),dpr=i(Aa),wT=n(Aa,"P",{});var IDe=s(wT);cpr=r(IDe,"The model is set in evaluation mode by default using "),Tve=n(IDe,"CODE",{});var VSt=s(Tve);fpr=r(VSt,"model.eval()"),VSt.forEach(t),mpr=r(IDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mve=n(IDe,"CODE",{});var XSt=s(Mve);gpr=r(XSt,"model.train()"),XSt.forEach(t),IDe.forEach(t),hpr=i(Aa),T(AT.$$.fragment,Aa),Aa.forEach(t),Al.forEach(t),wUe=i(f),Gd=n(f,"H2",{class:!0});var BJe=s(Gd);LT=n(BJe,"A",{id:!0,class:!0,href:!0});var zSt=s(LT);Eve=n(zSt,"SPAN",{});var WSt=s(Eve);T(J9.$$.fragment,WSt),WSt.forEach(t),zSt.forEach(t),ppr=i(BJe),Cve=n(BJe,"SPAN",{});var QSt=s(Cve);_pr=r(QSt,"AutoModelForVision2Seq"),QSt.forEach(t),BJe.forEach(t),AUe=i(f),Wo=n(f,"DIV",{class:!0});var Ll=s(Wo);T(Y9.$$.fragment,Ll),upr=i(Ll),Od=n(Ll,"P",{});var mne=s(Od);bpr=r(mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BH=n(mne,"A",{href:!0});var USt=s(BH);vpr=r(USt,"from_pretrained()"),USt.forEach(t),Fpr=r(mne," class method or the "),IH=n(mne,"A",{href:!0});var HSt=s(IH);Tpr=r(HSt,"from_config()"),HSt.forEach(t),Mpr=r(mne,` class
method.`),mne.forEach(t),Epr=i(Ll),K9=n(Ll,"P",{});var IJe=s(K9);Cpr=r(IJe,"This class cannot be instantiated directly using "),wve=n(IJe,"CODE",{});var JSt=s(wve);wpr=r(JSt,"__init__()"),JSt.forEach(t),Apr=r(IJe," (throws an error)."),IJe.forEach(t),Lpr=i(Ll),At=n(Ll,"DIV",{class:!0});var q7=s(At);T(Z9.$$.fragment,q7),ypr=i(q7),Ave=n(q7,"P",{});var YSt=s(Ave);xpr=r(YSt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),YSt.forEach(t),$pr=i(q7),Vd=n(q7,"P",{});var gne=s(Vd);kpr=r(gne,`Note:
Loading a model from its configuration file does `),Lve=n(gne,"STRONG",{});var KSt=s(Lve);Spr=r(KSt,"not"),KSt.forEach(t),Rpr=r(gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(gne,"A",{href:!0});var ZSt=s(NH);Ppr=r(ZSt,"from_pretrained()"),ZSt.forEach(t),Bpr=r(gne," to load the model weights."),gne.forEach(t),Ipr=i(q7),T(yT.$$.fragment,q7),q7.forEach(t),Npr=i(Ll),fo=n(Ll,"DIV",{class:!0});var La=s(fo);T(ex.$$.fragment,La),qpr=i(La),yve=n(La,"P",{});var eRt=s(yve);jpr=r(eRt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),eRt.forEach(t),Dpr=i(La),rn=n(La,"P",{});var j7=s(rn);Gpr=r(j7,"The model class to instantiate is selected based on the "),xve=n(j7,"CODE",{});var oRt=s(xve);Opr=r(oRt,"model_type"),oRt.forEach(t),Vpr=r(j7,` property of the config object (either
passed as an argument or loaded from `),$ve=n(j7,"CODE",{});var rRt=s($ve);Xpr=r(rRt,"pretrained_model_name_or_path"),rRt.forEach(t),zpr=r(j7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=n(j7,"CODE",{});var tRt=s(kve);Wpr=r(tRt,"pretrained_model_name_or_path"),tRt.forEach(t),Qpr=r(j7,":"),j7.forEach(t),Upr=i(La),Sve=n(La,"UL",{});var aRt=s(Sve);xT=n(aRt,"LI",{});var NDe=s(xT);Rve=n(NDe,"STRONG",{});var nRt=s(Rve);Hpr=r(nRt,"vision-encoder-decoder"),nRt.forEach(t),Jpr=r(NDe," \u2014 "),qH=n(NDe,"A",{href:!0});var sRt=s(qH);Ypr=r(sRt,"VisionEncoderDecoderModel"),sRt.forEach(t),Kpr=r(NDe," (Vision Encoder decoder model)"),NDe.forEach(t),aRt.forEach(t),Zpr=i(La),$T=n(La,"P",{});var qDe=s($T);e_r=r(qDe,"The model is set in evaluation mode by default using "),Pve=n(qDe,"CODE",{});var lRt=s(Pve);o_r=r(lRt,"model.eval()"),lRt.forEach(t),r_r=r(qDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bve=n(qDe,"CODE",{});var iRt=s(Bve);t_r=r(iRt,"model.train()"),iRt.forEach(t),qDe.forEach(t),a_r=i(La),T(kT.$$.fragment,La),La.forEach(t),Ll.forEach(t),LUe=i(f),Xd=n(f,"H2",{class:!0});var NJe=s(Xd);ST=n(NJe,"A",{id:!0,class:!0,href:!0});var dRt=s(ST);Ive=n(dRt,"SPAN",{});var cRt=s(Ive);T(ox.$$.fragment,cRt),cRt.forEach(t),dRt.forEach(t),n_r=i(NJe),Nve=n(NJe,"SPAN",{});var fRt=s(Nve);s_r=r(fRt,"AutoModelForVisualQuestionAnswering"),fRt.forEach(t),NJe.forEach(t),yUe=i(f),Qo=n(f,"DIV",{class:!0});var yl=s(Qo);T(rx.$$.fragment,yl),l_r=i(yl),zd=n(yl,"P",{});var hne=s(zd);i_r=r(hne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),jH=n(hne,"A",{href:!0});var mRt=s(jH);d_r=r(mRt,"from_pretrained()"),mRt.forEach(t),c_r=r(hne," class method or the "),DH=n(hne,"A",{href:!0});var gRt=s(DH);f_r=r(gRt,"from_config()"),gRt.forEach(t),m_r=r(hne,` class
method.`),hne.forEach(t),g_r=i(yl),tx=n(yl,"P",{});var qJe=s(tx);h_r=r(qJe,"This class cannot be instantiated directly using "),qve=n(qJe,"CODE",{});var hRt=s(qve);p_r=r(hRt,"__init__()"),hRt.forEach(t),__r=r(qJe," (throws an error)."),qJe.forEach(t),u_r=i(yl),Lt=n(yl,"DIV",{class:!0});var D7=s(Lt);T(ax.$$.fragment,D7),b_r=i(D7),jve=n(D7,"P",{});var pRt=s(jve);v_r=r(pRt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),pRt.forEach(t),F_r=i(D7),Wd=n(D7,"P",{});var pne=s(Wd);T_r=r(pne,`Note:
Loading a model from its configuration file does `),Dve=n(pne,"STRONG",{});var _Rt=s(Dve);M_r=r(_Rt,"not"),_Rt.forEach(t),E_r=r(pne,` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=n(pne,"A",{href:!0});var uRt=s(GH);C_r=r(uRt,"from_pretrained()"),uRt.forEach(t),w_r=r(pne," to load the model weights."),pne.forEach(t),A_r=i(D7),T(RT.$$.fragment,D7),D7.forEach(t),L_r=i(yl),mo=n(yl,"DIV",{class:!0});var ya=s(mo);T(nx.$$.fragment,ya),y_r=i(ya),Gve=n(ya,"P",{});var bRt=s(Gve);x_r=r(bRt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),bRt.forEach(t),$_r=i(ya),tn=n(ya,"P",{});var G7=s(tn);k_r=r(G7,"The model class to instantiate is selected based on the "),Ove=n(G7,"CODE",{});var vRt=s(Ove);S_r=r(vRt,"model_type"),vRt.forEach(t),R_r=r(G7,` property of the config object (either
passed as an argument or loaded from `),Vve=n(G7,"CODE",{});var FRt=s(Vve);P_r=r(FRt,"pretrained_model_name_or_path"),FRt.forEach(t),B_r=r(G7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=n(G7,"CODE",{});var TRt=s(Xve);I_r=r(TRt,"pretrained_model_name_or_path"),TRt.forEach(t),N_r=r(G7,":"),G7.forEach(t),q_r=i(ya),zve=n(ya,"UL",{});var MRt=s(zve);PT=n(MRt,"LI",{});var jDe=s(PT);Wve=n(jDe,"STRONG",{});var ERt=s(Wve);j_r=r(ERt,"vilt"),ERt.forEach(t),D_r=r(jDe," \u2014 "),OH=n(jDe,"A",{href:!0});var CRt=s(OH);G_r=r(CRt,"ViltForQuestionAnswering"),CRt.forEach(t),O_r=r(jDe," (ViLT model)"),jDe.forEach(t),MRt.forEach(t),V_r=i(ya),BT=n(ya,"P",{});var DDe=s(BT);X_r=r(DDe,"The model is set in evaluation mode by default using "),Qve=n(DDe,"CODE",{});var wRt=s(Qve);z_r=r(wRt,"model.eval()"),wRt.forEach(t),W_r=r(DDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uve=n(DDe,"CODE",{});var ARt=s(Uve);Q_r=r(ARt,"model.train()"),ARt.forEach(t),DDe.forEach(t),U_r=i(ya),T(IT.$$.fragment,ya),ya.forEach(t),yl.forEach(t),xUe=i(f),Qd=n(f,"H2",{class:!0});var jJe=s(Qd);NT=n(jJe,"A",{id:!0,class:!0,href:!0});var LRt=s(NT);Hve=n(LRt,"SPAN",{});var yRt=s(Hve);T(sx.$$.fragment,yRt),yRt.forEach(t),LRt.forEach(t),H_r=i(jJe),Jve=n(jJe,"SPAN",{});var xRt=s(Jve);J_r=r(xRt,"AutoModelForAudioClassification"),xRt.forEach(t),jJe.forEach(t),$Ue=i(f),Uo=n(f,"DIV",{class:!0});var xl=s(Uo);T(lx.$$.fragment,xl),Y_r=i(xl),Ud=n(xl,"P",{});var _ne=s(Ud);K_r=r(_ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),VH=n(_ne,"A",{href:!0});var $Rt=s(VH);Z_r=r($Rt,"from_pretrained()"),$Rt.forEach(t),eur=r(_ne," class method or the "),XH=n(_ne,"A",{href:!0});var kRt=s(XH);our=r(kRt,"from_config()"),kRt.forEach(t),rur=r(_ne,` class
method.`),_ne.forEach(t),tur=i(xl),ix=n(xl,"P",{});var DJe=s(ix);aur=r(DJe,"This class cannot be instantiated directly using "),Yve=n(DJe,"CODE",{});var SRt=s(Yve);nur=r(SRt,"__init__()"),SRt.forEach(t),sur=r(DJe," (throws an error)."),DJe.forEach(t),lur=i(xl),yt=n(xl,"DIV",{class:!0});var O7=s(yt);T(dx.$$.fragment,O7),iur=i(O7),Kve=n(O7,"P",{});var RRt=s(Kve);dur=r(RRt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),RRt.forEach(t),cur=i(O7),Hd=n(O7,"P",{});var une=s(Hd);fur=r(une,`Note:
Loading a model from its configuration file does `),Zve=n(une,"STRONG",{});var PRt=s(Zve);mur=r(PRt,"not"),PRt.forEach(t),gur=r(une,` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=n(une,"A",{href:!0});var BRt=s(zH);hur=r(BRt,"from_pretrained()"),BRt.forEach(t),pur=r(une," to load the model weights."),une.forEach(t),_ur=i(O7),T(qT.$$.fragment,O7),O7.forEach(t),uur=i(xl),go=n(xl,"DIV",{class:!0});var xa=s(go);T(cx.$$.fragment,xa),bur=i(xa),eFe=n(xa,"P",{});var IRt=s(eFe);vur=r(IRt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),IRt.forEach(t),Fur=i(xa),an=n(xa,"P",{});var V7=s(an);Tur=r(V7,"The model class to instantiate is selected based on the "),oFe=n(V7,"CODE",{});var NRt=s(oFe);Mur=r(NRt,"model_type"),NRt.forEach(t),Eur=r(V7,` property of the config object (either
passed as an argument or loaded from `),rFe=n(V7,"CODE",{});var qRt=s(rFe);Cur=r(qRt,"pretrained_model_name_or_path"),qRt.forEach(t),wur=r(V7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tFe=n(V7,"CODE",{});var jRt=s(tFe);Aur=r(jRt,"pretrained_model_name_or_path"),jRt.forEach(t),Lur=r(V7,":"),V7.forEach(t),yur=i(xa),Pe=n(xa,"UL",{});var We=s(Pe);jT=n(We,"LI",{});var GDe=s(jT);aFe=n(GDe,"STRONG",{});var DRt=s(aFe);xur=r(DRt,"data2vec-audio"),DRt.forEach(t),$ur=r(GDe," \u2014 "),WH=n(GDe,"A",{href:!0});var GRt=s(WH);kur=r(GRt,"Data2VecAudioForSequenceClassification"),GRt.forEach(t),Sur=r(GDe," (Data2VecAudio model)"),GDe.forEach(t),Rur=i(We),DT=n(We,"LI",{});var ODe=s(DT);nFe=n(ODe,"STRONG",{});var ORt=s(nFe);Pur=r(ORt,"hubert"),ORt.forEach(t),Bur=r(ODe," \u2014 "),QH=n(ODe,"A",{href:!0});var VRt=s(QH);Iur=r(VRt,"HubertForSequenceClassification"),VRt.forEach(t),Nur=r(ODe," (Hubert model)"),ODe.forEach(t),qur=i(We),GT=n(We,"LI",{});var VDe=s(GT);sFe=n(VDe,"STRONG",{});var XRt=s(sFe);jur=r(XRt,"sew"),XRt.forEach(t),Dur=r(VDe," \u2014 "),UH=n(VDe,"A",{href:!0});var zRt=s(UH);Gur=r(zRt,"SEWForSequenceClassification"),zRt.forEach(t),Our=r(VDe," (SEW model)"),VDe.forEach(t),Vur=i(We),OT=n(We,"LI",{});var XDe=s(OT);lFe=n(XDe,"STRONG",{});var WRt=s(lFe);Xur=r(WRt,"sew-d"),WRt.forEach(t),zur=r(XDe," \u2014 "),HH=n(XDe,"A",{href:!0});var QRt=s(HH);Wur=r(QRt,"SEWDForSequenceClassification"),QRt.forEach(t),Qur=r(XDe," (SEW-D model)"),XDe.forEach(t),Uur=i(We),VT=n(We,"LI",{});var zDe=s(VT);iFe=n(zDe,"STRONG",{});var URt=s(iFe);Hur=r(URt,"unispeech"),URt.forEach(t),Jur=r(zDe," \u2014 "),JH=n(zDe,"A",{href:!0});var HRt=s(JH);Yur=r(HRt,"UniSpeechForSequenceClassification"),HRt.forEach(t),Kur=r(zDe," (UniSpeech model)"),zDe.forEach(t),Zur=i(We),XT=n(We,"LI",{});var WDe=s(XT);dFe=n(WDe,"STRONG",{});var JRt=s(dFe);e1r=r(JRt,"unispeech-sat"),JRt.forEach(t),o1r=r(WDe," \u2014 "),YH=n(WDe,"A",{href:!0});var YRt=s(YH);r1r=r(YRt,"UniSpeechSatForSequenceClassification"),YRt.forEach(t),t1r=r(WDe," (UniSpeechSat model)"),WDe.forEach(t),a1r=i(We),zT=n(We,"LI",{});var QDe=s(zT);cFe=n(QDe,"STRONG",{});var KRt=s(cFe);n1r=r(KRt,"wav2vec2"),KRt.forEach(t),s1r=r(QDe," \u2014 "),KH=n(QDe,"A",{href:!0});var ZRt=s(KH);l1r=r(ZRt,"Wav2Vec2ForSequenceClassification"),ZRt.forEach(t),i1r=r(QDe," (Wav2Vec2 model)"),QDe.forEach(t),d1r=i(We),WT=n(We,"LI",{});var UDe=s(WT);fFe=n(UDe,"STRONG",{});var ePt=s(fFe);c1r=r(ePt,"wav2vec2-conformer"),ePt.forEach(t),f1r=r(UDe," \u2014 "),ZH=n(UDe,"A",{href:!0});var oPt=s(ZH);m1r=r(oPt,"Wav2Vec2ConformerForSequenceClassification"),oPt.forEach(t),g1r=r(UDe," (Wav2Vec2-Conformer model)"),UDe.forEach(t),h1r=i(We),QT=n(We,"LI",{});var HDe=s(QT);mFe=n(HDe,"STRONG",{});var rPt=s(mFe);p1r=r(rPt,"wavlm"),rPt.forEach(t),_1r=r(HDe," \u2014 "),eJ=n(HDe,"A",{href:!0});var tPt=s(eJ);u1r=r(tPt,"WavLMForSequenceClassification"),tPt.forEach(t),b1r=r(HDe," (WavLM model)"),HDe.forEach(t),We.forEach(t),v1r=i(xa),UT=n(xa,"P",{});var JDe=s(UT);F1r=r(JDe,"The model is set in evaluation mode by default using "),gFe=n(JDe,"CODE",{});var aPt=s(gFe);T1r=r(aPt,"model.eval()"),aPt.forEach(t),M1r=r(JDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hFe=n(JDe,"CODE",{});var nPt=s(hFe);E1r=r(nPt,"model.train()"),nPt.forEach(t),JDe.forEach(t),C1r=i(xa),T(HT.$$.fragment,xa),xa.forEach(t),xl.forEach(t),kUe=i(f),Jd=n(f,"H2",{class:!0});var GJe=s(Jd);JT=n(GJe,"A",{id:!0,class:!0,href:!0});var sPt=s(JT);pFe=n(sPt,"SPAN",{});var lPt=s(pFe);T(fx.$$.fragment,lPt),lPt.forEach(t),sPt.forEach(t),w1r=i(GJe),_Fe=n(GJe,"SPAN",{});var iPt=s(_Fe);A1r=r(iPt,"AutoModelForAudioFrameClassification"),iPt.forEach(t),GJe.forEach(t),SUe=i(f),Ho=n(f,"DIV",{class:!0});var $l=s(Ho);T(mx.$$.fragment,$l),L1r=i($l),Yd=n($l,"P",{});var bne=s(Yd);y1r=r(bne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),oJ=n(bne,"A",{href:!0});var dPt=s(oJ);x1r=r(dPt,"from_pretrained()"),dPt.forEach(t),$1r=r(bne," class method or the "),rJ=n(bne,"A",{href:!0});var cPt=s(rJ);k1r=r(cPt,"from_config()"),cPt.forEach(t),S1r=r(bne,` class
method.`),bne.forEach(t),R1r=i($l),gx=n($l,"P",{});var OJe=s(gx);P1r=r(OJe,"This class cannot be instantiated directly using "),uFe=n(OJe,"CODE",{});var fPt=s(uFe);B1r=r(fPt,"__init__()"),fPt.forEach(t),I1r=r(OJe," (throws an error)."),OJe.forEach(t),N1r=i($l),xt=n($l,"DIV",{class:!0});var X7=s(xt);T(hx.$$.fragment,X7),q1r=i(X7),bFe=n(X7,"P",{});var mPt=s(bFe);j1r=r(mPt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),mPt.forEach(t),D1r=i(X7),Kd=n(X7,"P",{});var vne=s(Kd);G1r=r(vne,`Note:
Loading a model from its configuration file does `),vFe=n(vne,"STRONG",{});var gPt=s(vFe);O1r=r(gPt,"not"),gPt.forEach(t),V1r=r(vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=n(vne,"A",{href:!0});var hPt=s(tJ);X1r=r(hPt,"from_pretrained()"),hPt.forEach(t),z1r=r(vne," to load the model weights."),vne.forEach(t),W1r=i(X7),T(YT.$$.fragment,X7),X7.forEach(t),Q1r=i($l),ho=n($l,"DIV",{class:!0});var $a=s(ho);T(px.$$.fragment,$a),U1r=i($a),FFe=n($a,"P",{});var pPt=s(FFe);H1r=r(pPt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),pPt.forEach(t),J1r=i($a),nn=n($a,"P",{});var z7=s(nn);Y1r=r(z7,"The model class to instantiate is selected based on the "),TFe=n(z7,"CODE",{});var _Pt=s(TFe);K1r=r(_Pt,"model_type"),_Pt.forEach(t),Z1r=r(z7,` property of the config object (either
passed as an argument or loaded from `),MFe=n(z7,"CODE",{});var uPt=s(MFe);e6r=r(uPt,"pretrained_model_name_or_path"),uPt.forEach(t),o6r=r(z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=n(z7,"CODE",{});var bPt=s(EFe);r6r=r(bPt,"pretrained_model_name_or_path"),bPt.forEach(t),t6r=r(z7,":"),z7.forEach(t),a6r=i($a),st=n($a,"UL",{});var kl=s(st);KT=n(kl,"LI",{});var YDe=s(KT);CFe=n(YDe,"STRONG",{});var vPt=s(CFe);n6r=r(vPt,"data2vec-audio"),vPt.forEach(t),s6r=r(YDe," \u2014 "),aJ=n(YDe,"A",{href:!0});var FPt=s(aJ);l6r=r(FPt,"Data2VecAudioForAudioFrameClassification"),FPt.forEach(t),i6r=r(YDe," (Data2VecAudio model)"),YDe.forEach(t),d6r=i(kl),ZT=n(kl,"LI",{});var KDe=s(ZT);wFe=n(KDe,"STRONG",{});var TPt=s(wFe);c6r=r(TPt,"unispeech-sat"),TPt.forEach(t),f6r=r(KDe," \u2014 "),nJ=n(KDe,"A",{href:!0});var MPt=s(nJ);m6r=r(MPt,"UniSpeechSatForAudioFrameClassification"),MPt.forEach(t),g6r=r(KDe," (UniSpeechSat model)"),KDe.forEach(t),h6r=i(kl),eM=n(kl,"LI",{});var ZDe=s(eM);AFe=n(ZDe,"STRONG",{});var EPt=s(AFe);p6r=r(EPt,"wav2vec2"),EPt.forEach(t),_6r=r(ZDe," \u2014 "),sJ=n(ZDe,"A",{href:!0});var CPt=s(sJ);u6r=r(CPt,"Wav2Vec2ForAudioFrameClassification"),CPt.forEach(t),b6r=r(ZDe," (Wav2Vec2 model)"),ZDe.forEach(t),v6r=i(kl),oM=n(kl,"LI",{});var eGe=s(oM);LFe=n(eGe,"STRONG",{});var wPt=s(LFe);F6r=r(wPt,"wav2vec2-conformer"),wPt.forEach(t),T6r=r(eGe," \u2014 "),lJ=n(eGe,"A",{href:!0});var APt=s(lJ);M6r=r(APt,"Wav2Vec2ConformerForAudioFrameClassification"),APt.forEach(t),E6r=r(eGe," (Wav2Vec2-Conformer model)"),eGe.forEach(t),C6r=i(kl),rM=n(kl,"LI",{});var oGe=s(rM);yFe=n(oGe,"STRONG",{});var LPt=s(yFe);w6r=r(LPt,"wavlm"),LPt.forEach(t),A6r=r(oGe," \u2014 "),iJ=n(oGe,"A",{href:!0});var yPt=s(iJ);L6r=r(yPt,"WavLMForAudioFrameClassification"),yPt.forEach(t),y6r=r(oGe," (WavLM model)"),oGe.forEach(t),kl.forEach(t),x6r=i($a),tM=n($a,"P",{});var rGe=s(tM);$6r=r(rGe,"The model is set in evaluation mode by default using "),xFe=n(rGe,"CODE",{});var xPt=s(xFe);k6r=r(xPt,"model.eval()"),xPt.forEach(t),S6r=r(rGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Fe=n(rGe,"CODE",{});var $Pt=s($Fe);R6r=r($Pt,"model.train()"),$Pt.forEach(t),rGe.forEach(t),P6r=i($a),T(aM.$$.fragment,$a),$a.forEach(t),$l.forEach(t),RUe=i(f),Zd=n(f,"H2",{class:!0});var VJe=s(Zd);nM=n(VJe,"A",{id:!0,class:!0,href:!0});var kPt=s(nM);kFe=n(kPt,"SPAN",{});var SPt=s(kFe);T(_x.$$.fragment,SPt),SPt.forEach(t),kPt.forEach(t),B6r=i(VJe),SFe=n(VJe,"SPAN",{});var RPt=s(SFe);I6r=r(RPt,"AutoModelForCTC"),RPt.forEach(t),VJe.forEach(t),PUe=i(f),Jo=n(f,"DIV",{class:!0});var Sl=s(Jo);T(ux.$$.fragment,Sl),N6r=i(Sl),ec=n(Sl,"P",{});var Fne=s(ec);q6r=r(Fne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),dJ=n(Fne,"A",{href:!0});var PPt=s(dJ);j6r=r(PPt,"from_pretrained()"),PPt.forEach(t),D6r=r(Fne," class method or the "),cJ=n(Fne,"A",{href:!0});var BPt=s(cJ);G6r=r(BPt,"from_config()"),BPt.forEach(t),O6r=r(Fne,` class
method.`),Fne.forEach(t),V6r=i(Sl),bx=n(Sl,"P",{});var XJe=s(bx);X6r=r(XJe,"This class cannot be instantiated directly using "),RFe=n(XJe,"CODE",{});var IPt=s(RFe);z6r=r(IPt,"__init__()"),IPt.forEach(t),W6r=r(XJe," (throws an error)."),XJe.forEach(t),Q6r=i(Sl),$t=n(Sl,"DIV",{class:!0});var W7=s($t);T(vx.$$.fragment,W7),U6r=i(W7),PFe=n(W7,"P",{});var NPt=s(PFe);H6r=r(NPt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),NPt.forEach(t),J6r=i(W7),oc=n(W7,"P",{});var Tne=s(oc);Y6r=r(Tne,`Note:
Loading a model from its configuration file does `),BFe=n(Tne,"STRONG",{});var qPt=s(BFe);K6r=r(qPt,"not"),qPt.forEach(t),Z6r=r(Tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=n(Tne,"A",{href:!0});var jPt=s(fJ);e8r=r(jPt,"from_pretrained()"),jPt.forEach(t),o8r=r(Tne," to load the model weights."),Tne.forEach(t),r8r=i(W7),T(sM.$$.fragment,W7),W7.forEach(t),t8r=i(Sl),po=n(Sl,"DIV",{class:!0});var ka=s(po);T(Fx.$$.fragment,ka),a8r=i(ka),IFe=n(ka,"P",{});var DPt=s(IFe);n8r=r(DPt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),DPt.forEach(t),s8r=i(ka),sn=n(ka,"P",{});var Q7=s(sn);l8r=r(Q7,"The model class to instantiate is selected based on the "),NFe=n(Q7,"CODE",{});var GPt=s(NFe);i8r=r(GPt,"model_type"),GPt.forEach(t),d8r=r(Q7,` property of the config object (either
passed as an argument or loaded from `),qFe=n(Q7,"CODE",{});var OPt=s(qFe);c8r=r(OPt,"pretrained_model_name_or_path"),OPt.forEach(t),f8r=r(Q7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jFe=n(Q7,"CODE",{});var VPt=s(jFe);m8r=r(VPt,"pretrained_model_name_or_path"),VPt.forEach(t),g8r=r(Q7,":"),Q7.forEach(t),h8r=i(ka),Le=n(ka,"UL",{});var Be=s(Le);lM=n(Be,"LI",{});var tGe=s(lM);DFe=n(tGe,"STRONG",{});var XPt=s(DFe);p8r=r(XPt,"data2vec-audio"),XPt.forEach(t),_8r=r(tGe," \u2014 "),mJ=n(tGe,"A",{href:!0});var zPt=s(mJ);u8r=r(zPt,"Data2VecAudioForCTC"),zPt.forEach(t),b8r=r(tGe," (Data2VecAudio model)"),tGe.forEach(t),v8r=i(Be),iM=n(Be,"LI",{});var aGe=s(iM);GFe=n(aGe,"STRONG",{});var WPt=s(GFe);F8r=r(WPt,"hubert"),WPt.forEach(t),T8r=r(aGe," \u2014 "),gJ=n(aGe,"A",{href:!0});var QPt=s(gJ);M8r=r(QPt,"HubertForCTC"),QPt.forEach(t),E8r=r(aGe," (Hubert model)"),aGe.forEach(t),C8r=i(Be),dM=n(Be,"LI",{});var nGe=s(dM);OFe=n(nGe,"STRONG",{});var UPt=s(OFe);w8r=r(UPt,"mctct"),UPt.forEach(t),A8r=r(nGe," \u2014 "),hJ=n(nGe,"A",{href:!0});var HPt=s(hJ);L8r=r(HPt,"MCTCTForCTC"),HPt.forEach(t),y8r=r(nGe," (M-CTC-T model)"),nGe.forEach(t),x8r=i(Be),cM=n(Be,"LI",{});var sGe=s(cM);VFe=n(sGe,"STRONG",{});var JPt=s(VFe);$8r=r(JPt,"sew"),JPt.forEach(t),k8r=r(sGe," \u2014 "),pJ=n(sGe,"A",{href:!0});var YPt=s(pJ);S8r=r(YPt,"SEWForCTC"),YPt.forEach(t),R8r=r(sGe," (SEW model)"),sGe.forEach(t),P8r=i(Be),fM=n(Be,"LI",{});var lGe=s(fM);XFe=n(lGe,"STRONG",{});var KPt=s(XFe);B8r=r(KPt,"sew-d"),KPt.forEach(t),I8r=r(lGe," \u2014 "),_J=n(lGe,"A",{href:!0});var ZPt=s(_J);N8r=r(ZPt,"SEWDForCTC"),ZPt.forEach(t),q8r=r(lGe," (SEW-D model)"),lGe.forEach(t),j8r=i(Be),mM=n(Be,"LI",{});var iGe=s(mM);zFe=n(iGe,"STRONG",{});var eBt=s(zFe);D8r=r(eBt,"unispeech"),eBt.forEach(t),G8r=r(iGe," \u2014 "),uJ=n(iGe,"A",{href:!0});var oBt=s(uJ);O8r=r(oBt,"UniSpeechForCTC"),oBt.forEach(t),V8r=r(iGe," (UniSpeech model)"),iGe.forEach(t),X8r=i(Be),gM=n(Be,"LI",{});var dGe=s(gM);WFe=n(dGe,"STRONG",{});var rBt=s(WFe);z8r=r(rBt,"unispeech-sat"),rBt.forEach(t),W8r=r(dGe," \u2014 "),bJ=n(dGe,"A",{href:!0});var tBt=s(bJ);Q8r=r(tBt,"UniSpeechSatForCTC"),tBt.forEach(t),U8r=r(dGe," (UniSpeechSat model)"),dGe.forEach(t),H8r=i(Be),hM=n(Be,"LI",{});var cGe=s(hM);QFe=n(cGe,"STRONG",{});var aBt=s(QFe);J8r=r(aBt,"wav2vec2"),aBt.forEach(t),Y8r=r(cGe," \u2014 "),vJ=n(cGe,"A",{href:!0});var nBt=s(vJ);K8r=r(nBt,"Wav2Vec2ForCTC"),nBt.forEach(t),Z8r=r(cGe," (Wav2Vec2 model)"),cGe.forEach(t),e2r=i(Be),pM=n(Be,"LI",{});var fGe=s(pM);UFe=n(fGe,"STRONG",{});var sBt=s(UFe);o2r=r(sBt,"wav2vec2-conformer"),sBt.forEach(t),r2r=r(fGe," \u2014 "),FJ=n(fGe,"A",{href:!0});var lBt=s(FJ);t2r=r(lBt,"Wav2Vec2ConformerForCTC"),lBt.forEach(t),a2r=r(fGe," (Wav2Vec2-Conformer model)"),fGe.forEach(t),n2r=i(Be),_M=n(Be,"LI",{});var mGe=s(_M);HFe=n(mGe,"STRONG",{});var iBt=s(HFe);s2r=r(iBt,"wavlm"),iBt.forEach(t),l2r=r(mGe," \u2014 "),TJ=n(mGe,"A",{href:!0});var dBt=s(TJ);i2r=r(dBt,"WavLMForCTC"),dBt.forEach(t),d2r=r(mGe," (WavLM model)"),mGe.forEach(t),Be.forEach(t),c2r=i(ka),uM=n(ka,"P",{});var gGe=s(uM);f2r=r(gGe,"The model is set in evaluation mode by default using "),JFe=n(gGe,"CODE",{});var cBt=s(JFe);m2r=r(cBt,"model.eval()"),cBt.forEach(t),g2r=r(gGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),YFe=n(gGe,"CODE",{});var fBt=s(YFe);h2r=r(fBt,"model.train()"),fBt.forEach(t),gGe.forEach(t),p2r=i(ka),T(bM.$$.fragment,ka),ka.forEach(t),Sl.forEach(t),BUe=i(f),rc=n(f,"H2",{class:!0});var zJe=s(rc);vM=n(zJe,"A",{id:!0,class:!0,href:!0});var mBt=s(vM);KFe=n(mBt,"SPAN",{});var gBt=s(KFe);T(Tx.$$.fragment,gBt),gBt.forEach(t),mBt.forEach(t),_2r=i(zJe),ZFe=n(zJe,"SPAN",{});var hBt=s(ZFe);u2r=r(hBt,"AutoModelForSpeechSeq2Seq"),hBt.forEach(t),zJe.forEach(t),IUe=i(f),Yo=n(f,"DIV",{class:!0});var Rl=s(Yo);T(Mx.$$.fragment,Rl),b2r=i(Rl),tc=n(Rl,"P",{});var Mne=s(tc);v2r=r(Mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),MJ=n(Mne,"A",{href:!0});var pBt=s(MJ);F2r=r(pBt,"from_pretrained()"),pBt.forEach(t),T2r=r(Mne," class method or the "),EJ=n(Mne,"A",{href:!0});var _Bt=s(EJ);M2r=r(_Bt,"from_config()"),_Bt.forEach(t),E2r=r(Mne,` class
method.`),Mne.forEach(t),C2r=i(Rl),Ex=n(Rl,"P",{});var WJe=s(Ex);w2r=r(WJe,"This class cannot be instantiated directly using "),eTe=n(WJe,"CODE",{});var uBt=s(eTe);A2r=r(uBt,"__init__()"),uBt.forEach(t),L2r=r(WJe," (throws an error)."),WJe.forEach(t),y2r=i(Rl),kt=n(Rl,"DIV",{class:!0});var U7=s(kt);T(Cx.$$.fragment,U7),x2r=i(U7),oTe=n(U7,"P",{});var bBt=s(oTe);$2r=r(bBt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bBt.forEach(t),k2r=i(U7),ac=n(U7,"P",{});var Ene=s(ac);S2r=r(Ene,`Note:
Loading a model from its configuration file does `),rTe=n(Ene,"STRONG",{});var vBt=s(rTe);R2r=r(vBt,"not"),vBt.forEach(t),P2r=r(Ene,` load the model weights. It only affects the
model\u2019s configuration. Use `),CJ=n(Ene,"A",{href:!0});var FBt=s(CJ);B2r=r(FBt,"from_pretrained()"),FBt.forEach(t),I2r=r(Ene," to load the model weights."),Ene.forEach(t),N2r=i(U7),T(FM.$$.fragment,U7),U7.forEach(t),q2r=i(Rl),_o=n(Rl,"DIV",{class:!0});var Sa=s(_o);T(wx.$$.fragment,Sa),j2r=i(Sa),tTe=n(Sa,"P",{});var TBt=s(tTe);D2r=r(TBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),TBt.forEach(t),G2r=i(Sa),ln=n(Sa,"P",{});var H7=s(ln);O2r=r(H7,"The model class to instantiate is selected based on the "),aTe=n(H7,"CODE",{});var MBt=s(aTe);V2r=r(MBt,"model_type"),MBt.forEach(t),X2r=r(H7,` property of the config object (either
passed as an argument or loaded from `),nTe=n(H7,"CODE",{});var EBt=s(nTe);z2r=r(EBt,"pretrained_model_name_or_path"),EBt.forEach(t),W2r=r(H7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=n(H7,"CODE",{});var CBt=s(sTe);Q2r=r(CBt,"pretrained_model_name_or_path"),CBt.forEach(t),U2r=r(H7,":"),H7.forEach(t),H2r=i(Sa),Ax=n(Sa,"UL",{});var QJe=s(Ax);TM=n(QJe,"LI",{});var hGe=s(TM);lTe=n(hGe,"STRONG",{});var wBt=s(lTe);J2r=r(wBt,"speech-encoder-decoder"),wBt.forEach(t),Y2r=r(hGe," \u2014 "),wJ=n(hGe,"A",{href:!0});var ABt=s(wJ);K2r=r(ABt,"SpeechEncoderDecoderModel"),ABt.forEach(t),Z2r=r(hGe," (Speech Encoder decoder model)"),hGe.forEach(t),ebr=i(QJe),MM=n(QJe,"LI",{});var pGe=s(MM);iTe=n(pGe,"STRONG",{});var LBt=s(iTe);obr=r(LBt,"speech_to_text"),LBt.forEach(t),rbr=r(pGe," \u2014 "),AJ=n(pGe,"A",{href:!0});var yBt=s(AJ);tbr=r(yBt,"Speech2TextForConditionalGeneration"),yBt.forEach(t),abr=r(pGe," (Speech2Text model)"),pGe.forEach(t),QJe.forEach(t),nbr=i(Sa),EM=n(Sa,"P",{});var _Ge=s(EM);sbr=r(_Ge,"The model is set in evaluation mode by default using "),dTe=n(_Ge,"CODE",{});var xBt=s(dTe);lbr=r(xBt,"model.eval()"),xBt.forEach(t),ibr=r(_Ge,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cTe=n(_Ge,"CODE",{});var $Bt=s(cTe);dbr=r($Bt,"model.train()"),$Bt.forEach(t),_Ge.forEach(t),cbr=i(Sa),T(CM.$$.fragment,Sa),Sa.forEach(t),Rl.forEach(t),NUe=i(f),nc=n(f,"H2",{class:!0});var UJe=s(nc);wM=n(UJe,"A",{id:!0,class:!0,href:!0});var kBt=s(wM);fTe=n(kBt,"SPAN",{});var SBt=s(fTe);T(Lx.$$.fragment,SBt),SBt.forEach(t),kBt.forEach(t),fbr=i(UJe),mTe=n(UJe,"SPAN",{});var RBt=s(mTe);mbr=r(RBt,"AutoModelForAudioXVector"),RBt.forEach(t),UJe.forEach(t),qUe=i(f),Ko=n(f,"DIV",{class:!0});var Pl=s(Ko);T(yx.$$.fragment,Pl),gbr=i(Pl),sc=n(Pl,"P",{});var Cne=s(sc);hbr=r(Cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),LJ=n(Cne,"A",{href:!0});var PBt=s(LJ);pbr=r(PBt,"from_pretrained()"),PBt.forEach(t),_br=r(Cne," class method or the "),yJ=n(Cne,"A",{href:!0});var BBt=s(yJ);ubr=r(BBt,"from_config()"),BBt.forEach(t),bbr=r(Cne,` class
method.`),Cne.forEach(t),vbr=i(Pl),xx=n(Pl,"P",{});var HJe=s(xx);Fbr=r(HJe,"This class cannot be instantiated directly using "),gTe=n(HJe,"CODE",{});var IBt=s(gTe);Tbr=r(IBt,"__init__()"),IBt.forEach(t),Mbr=r(HJe," (throws an error)."),HJe.forEach(t),Ebr=i(Pl),St=n(Pl,"DIV",{class:!0});var J7=s(St);T($x.$$.fragment,J7),Cbr=i(J7),hTe=n(J7,"P",{});var NBt=s(hTe);wbr=r(NBt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),NBt.forEach(t),Abr=i(J7),lc=n(J7,"P",{});var wne=s(lc);Lbr=r(wne,`Note:
Loading a model from its configuration file does `),pTe=n(wne,"STRONG",{});var qBt=s(pTe);ybr=r(qBt,"not"),qBt.forEach(t),xbr=r(wne,` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=n(wne,"A",{href:!0});var jBt=s(xJ);$br=r(jBt,"from_pretrained()"),jBt.forEach(t),kbr=r(wne," to load the model weights."),wne.forEach(t),Sbr=i(J7),T(AM.$$.fragment,J7),J7.forEach(t),Rbr=i(Pl),uo=n(Pl,"DIV",{class:!0});var Ra=s(uo);T(kx.$$.fragment,Ra),Pbr=i(Ra),_Te=n(Ra,"P",{});var DBt=s(_Te);Bbr=r(DBt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),DBt.forEach(t),Ibr=i(Ra),dn=n(Ra,"P",{});var Y7=s(dn);Nbr=r(Y7,"The model class to instantiate is selected based on the "),uTe=n(Y7,"CODE",{});var GBt=s(uTe);qbr=r(GBt,"model_type"),GBt.forEach(t),jbr=r(Y7,` property of the config object (either
passed as an argument or loaded from `),bTe=n(Y7,"CODE",{});var OBt=s(bTe);Dbr=r(OBt,"pretrained_model_name_or_path"),OBt.forEach(t),Gbr=r(Y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vTe=n(Y7,"CODE",{});var VBt=s(vTe);Obr=r(VBt,"pretrained_model_name_or_path"),VBt.forEach(t),Vbr=r(Y7,":"),Y7.forEach(t),Xbr=i(Ra),lt=n(Ra,"UL",{});var Bl=s(lt);LM=n(Bl,"LI",{});var uGe=s(LM);FTe=n(uGe,"STRONG",{});var XBt=s(FTe);zbr=r(XBt,"data2vec-audio"),XBt.forEach(t),Wbr=r(uGe," \u2014 "),$J=n(uGe,"A",{href:!0});var zBt=s($J);Qbr=r(zBt,"Data2VecAudioForXVector"),zBt.forEach(t),Ubr=r(uGe," (Data2VecAudio model)"),uGe.forEach(t),Hbr=i(Bl),yM=n(Bl,"LI",{});var bGe=s(yM);TTe=n(bGe,"STRONG",{});var WBt=s(TTe);Jbr=r(WBt,"unispeech-sat"),WBt.forEach(t),Ybr=r(bGe," \u2014 "),kJ=n(bGe,"A",{href:!0});var QBt=s(kJ);Kbr=r(QBt,"UniSpeechSatForXVector"),QBt.forEach(t),Zbr=r(bGe," (UniSpeechSat model)"),bGe.forEach(t),evr=i(Bl),xM=n(Bl,"LI",{});var vGe=s(xM);MTe=n(vGe,"STRONG",{});var UBt=s(MTe);ovr=r(UBt,"wav2vec2"),UBt.forEach(t),rvr=r(vGe," \u2014 "),SJ=n(vGe,"A",{href:!0});var HBt=s(SJ);tvr=r(HBt,"Wav2Vec2ForXVector"),HBt.forEach(t),avr=r(vGe," (Wav2Vec2 model)"),vGe.forEach(t),nvr=i(Bl),$M=n(Bl,"LI",{});var FGe=s($M);ETe=n(FGe,"STRONG",{});var JBt=s(ETe);svr=r(JBt,"wav2vec2-conformer"),JBt.forEach(t),lvr=r(FGe," \u2014 "),RJ=n(FGe,"A",{href:!0});var YBt=s(RJ);ivr=r(YBt,"Wav2Vec2ConformerForXVector"),YBt.forEach(t),dvr=r(FGe," (Wav2Vec2-Conformer model)"),FGe.forEach(t),cvr=i(Bl),kM=n(Bl,"LI",{});var TGe=s(kM);CTe=n(TGe,"STRONG",{});var KBt=s(CTe);fvr=r(KBt,"wavlm"),KBt.forEach(t),mvr=r(TGe," \u2014 "),PJ=n(TGe,"A",{href:!0});var ZBt=s(PJ);gvr=r(ZBt,"WavLMForXVector"),ZBt.forEach(t),hvr=r(TGe," (WavLM model)"),TGe.forEach(t),Bl.forEach(t),pvr=i(Ra),SM=n(Ra,"P",{});var MGe=s(SM);_vr=r(MGe,"The model is set in evaluation mode by default using "),wTe=n(MGe,"CODE",{});var eIt=s(wTe);uvr=r(eIt,"model.eval()"),eIt.forEach(t),bvr=r(MGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ATe=n(MGe,"CODE",{});var oIt=s(ATe);vvr=r(oIt,"model.train()"),oIt.forEach(t),MGe.forEach(t),Fvr=i(Ra),T(RM.$$.fragment,Ra),Ra.forEach(t),Pl.forEach(t),jUe=i(f),ic=n(f,"H2",{class:!0});var JJe=s(ic);PM=n(JJe,"A",{id:!0,class:!0,href:!0});var rIt=s(PM);LTe=n(rIt,"SPAN",{});var tIt=s(LTe);T(Sx.$$.fragment,tIt),tIt.forEach(t),rIt.forEach(t),Tvr=i(JJe),yTe=n(JJe,"SPAN",{});var aIt=s(yTe);Mvr=r(aIt,"AutoModelForMaskedImageModeling"),aIt.forEach(t),JJe.forEach(t),DUe=i(f),Zo=n(f,"DIV",{class:!0});var Il=s(Zo);T(Rx.$$.fragment,Il),Evr=i(Il),dc=n(Il,"P",{});var Ane=s(dc);Cvr=r(Ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),BJ=n(Ane,"A",{href:!0});var nIt=s(BJ);wvr=r(nIt,"from_pretrained()"),nIt.forEach(t),Avr=r(Ane," class method or the "),IJ=n(Ane,"A",{href:!0});var sIt=s(IJ);Lvr=r(sIt,"from_config()"),sIt.forEach(t),yvr=r(Ane,` class
method.`),Ane.forEach(t),xvr=i(Il),Px=n(Il,"P",{});var YJe=s(Px);$vr=r(YJe,"This class cannot be instantiated directly using "),xTe=n(YJe,"CODE",{});var lIt=s(xTe);kvr=r(lIt,"__init__()"),lIt.forEach(t),Svr=r(YJe," (throws an error)."),YJe.forEach(t),Rvr=i(Il),Rt=n(Il,"DIV",{class:!0});var K7=s(Rt);T(Bx.$$.fragment,K7),Pvr=i(K7),$Te=n(K7,"P",{});var iIt=s($Te);Bvr=r(iIt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),iIt.forEach(t),Ivr=i(K7),cc=n(K7,"P",{});var Lne=s(cc);Nvr=r(Lne,`Note:
Loading a model from its configuration file does `),kTe=n(Lne,"STRONG",{});var dIt=s(kTe);qvr=r(dIt,"not"),dIt.forEach(t),jvr=r(Lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=n(Lne,"A",{href:!0});var cIt=s(NJ);Dvr=r(cIt,"from_pretrained()"),cIt.forEach(t),Gvr=r(Lne," to load the model weights."),Lne.forEach(t),Ovr=i(K7),T(BM.$$.fragment,K7),K7.forEach(t),Vvr=i(Il),bo=n(Il,"DIV",{class:!0});var Pa=s(bo);T(Ix.$$.fragment,Pa),Xvr=i(Pa),STe=n(Pa,"P",{});var fIt=s(STe);zvr=r(fIt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),fIt.forEach(t),Wvr=i(Pa),cn=n(Pa,"P",{});var Z7=s(cn);Qvr=r(Z7,"The model class to instantiate is selected based on the "),RTe=n(Z7,"CODE",{});var mIt=s(RTe);Uvr=r(mIt,"model_type"),mIt.forEach(t),Hvr=r(Z7,` property of the config object (either
passed as an argument or loaded from `),PTe=n(Z7,"CODE",{});var gIt=s(PTe);Jvr=r(gIt,"pretrained_model_name_or_path"),gIt.forEach(t),Yvr=r(Z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=n(Z7,"CODE",{});var hIt=s(BTe);Kvr=r(hIt,"pretrained_model_name_or_path"),hIt.forEach(t),Zvr=r(Z7,":"),Z7.forEach(t),eFr=i(Pa),fn=n(Pa,"UL",{});var eL=s(fn);IM=n(eL,"LI",{});var EGe=s(IM);ITe=n(EGe,"STRONG",{});var pIt=s(ITe);oFr=r(pIt,"deit"),pIt.forEach(t),rFr=r(EGe," \u2014 "),qJ=n(EGe,"A",{href:!0});var _It=s(qJ);tFr=r(_It,"DeiTForMaskedImageModeling"),_It.forEach(t),aFr=r(EGe," (DeiT model)"),EGe.forEach(t),nFr=i(eL),NM=n(eL,"LI",{});var CGe=s(NM);NTe=n(CGe,"STRONG",{});var uIt=s(NTe);sFr=r(uIt,"swin"),uIt.forEach(t),lFr=r(CGe," \u2014 "),jJ=n(CGe,"A",{href:!0});var bIt=s(jJ);iFr=r(bIt,"SwinForMaskedImageModeling"),bIt.forEach(t),dFr=r(CGe," (Swin Transformer model)"),CGe.forEach(t),cFr=i(eL),qM=n(eL,"LI",{});var wGe=s(qM);qTe=n(wGe,"STRONG",{});var vIt=s(qTe);fFr=r(vIt,"swinv2"),vIt.forEach(t),mFr=r(wGe," \u2014 "),DJ=n(wGe,"A",{href:!0});var FIt=s(DJ);gFr=r(FIt,"Swinv2ForMaskedImageModeling"),FIt.forEach(t),hFr=r(wGe," (Swin Transformer V2 model)"),wGe.forEach(t),pFr=i(eL),jM=n(eL,"LI",{});var AGe=s(jM);jTe=n(AGe,"STRONG",{});var TIt=s(jTe);_Fr=r(TIt,"vit"),TIt.forEach(t),uFr=r(AGe," \u2014 "),GJ=n(AGe,"A",{href:!0});var MIt=s(GJ);bFr=r(MIt,"ViTForMaskedImageModeling"),MIt.forEach(t),vFr=r(AGe," (ViT model)"),AGe.forEach(t),eL.forEach(t),FFr=i(Pa),DM=n(Pa,"P",{});var LGe=s(DM);TFr=r(LGe,"The model is set in evaluation mode by default using "),DTe=n(LGe,"CODE",{});var EIt=s(DTe);MFr=r(EIt,"model.eval()"),EIt.forEach(t),EFr=r(LGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GTe=n(LGe,"CODE",{});var CIt=s(GTe);CFr=r(CIt,"model.train()"),CIt.forEach(t),LGe.forEach(t),wFr=i(Pa),T(GM.$$.fragment,Pa),Pa.forEach(t),Il.forEach(t),GUe=i(f),fc=n(f,"H2",{class:!0});var KJe=s(fc);OM=n(KJe,"A",{id:!0,class:!0,href:!0});var wIt=s(OM);OTe=n(wIt,"SPAN",{});var AIt=s(OTe);T(Nx.$$.fragment,AIt),AIt.forEach(t),wIt.forEach(t),AFr=i(KJe),VTe=n(KJe,"SPAN",{});var LIt=s(VTe);LFr=r(LIt,"AutoModelForObjectDetection"),LIt.forEach(t),KJe.forEach(t),OUe=i(f),er=n(f,"DIV",{class:!0});var Nl=s(er);T(qx.$$.fragment,Nl),yFr=i(Nl),mc=n(Nl,"P",{});var yne=s(mc);xFr=r(yne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),OJ=n(yne,"A",{href:!0});var yIt=s(OJ);$Fr=r(yIt,"from_pretrained()"),yIt.forEach(t),kFr=r(yne," class method or the "),VJ=n(yne,"A",{href:!0});var xIt=s(VJ);SFr=r(xIt,"from_config()"),xIt.forEach(t),RFr=r(yne,` class
method.`),yne.forEach(t),PFr=i(Nl),jx=n(Nl,"P",{});var ZJe=s(jx);BFr=r(ZJe,"This class cannot be instantiated directly using "),XTe=n(ZJe,"CODE",{});var $It=s(XTe);IFr=r($It,"__init__()"),$It.forEach(t),NFr=r(ZJe," (throws an error)."),ZJe.forEach(t),qFr=i(Nl),Pt=n(Nl,"DIV",{class:!0});var oL=s(Pt);T(Dx.$$.fragment,oL),jFr=i(oL),zTe=n(oL,"P",{});var kIt=s(zTe);DFr=r(kIt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),kIt.forEach(t),GFr=i(oL),gc=n(oL,"P",{});var xne=s(gc);OFr=r(xne,`Note:
Loading a model from its configuration file does `),WTe=n(xne,"STRONG",{});var SIt=s(WTe);VFr=r(SIt,"not"),SIt.forEach(t),XFr=r(xne,` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=n(xne,"A",{href:!0});var RIt=s(XJ);zFr=r(RIt,"from_pretrained()"),RIt.forEach(t),WFr=r(xne," to load the model weights."),xne.forEach(t),QFr=i(oL),T(VM.$$.fragment,oL),oL.forEach(t),UFr=i(Nl),vo=n(Nl,"DIV",{class:!0});var Ba=s(vo);T(Gx.$$.fragment,Ba),HFr=i(Ba),QTe=n(Ba,"P",{});var PIt=s(QTe);JFr=r(PIt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),PIt.forEach(t),YFr=i(Ba),mn=n(Ba,"P",{});var rL=s(mn);KFr=r(rL,"The model class to instantiate is selected based on the "),UTe=n(rL,"CODE",{});var BIt=s(UTe);ZFr=r(BIt,"model_type"),BIt.forEach(t),eTr=r(rL,` property of the config object (either
passed as an argument or loaded from `),HTe=n(rL,"CODE",{});var IIt=s(HTe);oTr=r(IIt,"pretrained_model_name_or_path"),IIt.forEach(t),rTr=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=n(rL,"CODE",{});var NIt=s(JTe);tTr=r(NIt,"pretrained_model_name_or_path"),NIt.forEach(t),aTr=r(rL,":"),rL.forEach(t),nTr=i(Ba),Ox=n(Ba,"UL",{});var eYe=s(Ox);XM=n(eYe,"LI",{});var yGe=s(XM);YTe=n(yGe,"STRONG",{});var qIt=s(YTe);sTr=r(qIt,"detr"),qIt.forEach(t),lTr=r(yGe," \u2014 "),zJ=n(yGe,"A",{href:!0});var jIt=s(zJ);iTr=r(jIt,"DetrForObjectDetection"),jIt.forEach(t),dTr=r(yGe," (DETR model)"),yGe.forEach(t),cTr=i(eYe),zM=n(eYe,"LI",{});var xGe=s(zM);KTe=n(xGe,"STRONG",{});var DIt=s(KTe);fTr=r(DIt,"yolos"),DIt.forEach(t),mTr=r(xGe," \u2014 "),WJ=n(xGe,"A",{href:!0});var GIt=s(WJ);gTr=r(GIt,"YolosForObjectDetection"),GIt.forEach(t),hTr=r(xGe," (YOLOS model)"),xGe.forEach(t),eYe.forEach(t),pTr=i(Ba),WM=n(Ba,"P",{});var $Ge=s(WM);_Tr=r($Ge,"The model is set in evaluation mode by default using "),ZTe=n($Ge,"CODE",{});var OIt=s(ZTe);uTr=r(OIt,"model.eval()"),OIt.forEach(t),bTr=r($Ge,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eMe=n($Ge,"CODE",{});var VIt=s(eMe);vTr=r(VIt,"model.train()"),VIt.forEach(t),$Ge.forEach(t),FTr=i(Ba),T(QM.$$.fragment,Ba),Ba.forEach(t),Nl.forEach(t),VUe=i(f),hc=n(f,"H2",{class:!0});var oYe=s(hc);UM=n(oYe,"A",{id:!0,class:!0,href:!0});var XIt=s(UM);oMe=n(XIt,"SPAN",{});var zIt=s(oMe);T(Vx.$$.fragment,zIt),zIt.forEach(t),XIt.forEach(t),TTr=i(oYe),rMe=n(oYe,"SPAN",{});var WIt=s(rMe);MTr=r(WIt,"AutoModelForImageSegmentation"),WIt.forEach(t),oYe.forEach(t),XUe=i(f),or=n(f,"DIV",{class:!0});var ql=s(or);T(Xx.$$.fragment,ql),ETr=i(ql),pc=n(ql,"P",{});var $ne=s(pc);CTr=r($ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),QJ=n($ne,"A",{href:!0});var QIt=s(QJ);wTr=r(QIt,"from_pretrained()"),QIt.forEach(t),ATr=r($ne," class method or the "),UJ=n($ne,"A",{href:!0});var UIt=s(UJ);LTr=r(UIt,"from_config()"),UIt.forEach(t),yTr=r($ne,` class
method.`),$ne.forEach(t),xTr=i(ql),zx=n(ql,"P",{});var rYe=s(zx);$Tr=r(rYe,"This class cannot be instantiated directly using "),tMe=n(rYe,"CODE",{});var HIt=s(tMe);kTr=r(HIt,"__init__()"),HIt.forEach(t),STr=r(rYe," (throws an error)."),rYe.forEach(t),RTr=i(ql),Bt=n(ql,"DIV",{class:!0});var tL=s(Bt);T(Wx.$$.fragment,tL),PTr=i(tL),aMe=n(tL,"P",{});var JIt=s(aMe);BTr=r(JIt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),JIt.forEach(t),ITr=i(tL),_c=n(tL,"P",{});var kne=s(_c);NTr=r(kne,`Note:
Loading a model from its configuration file does `),nMe=n(kne,"STRONG",{});var YIt=s(nMe);qTr=r(YIt,"not"),YIt.forEach(t),jTr=r(kne,` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=n(kne,"A",{href:!0});var KIt=s(HJ);DTr=r(KIt,"from_pretrained()"),KIt.forEach(t),GTr=r(kne," to load the model weights."),kne.forEach(t),OTr=i(tL),T(HM.$$.fragment,tL),tL.forEach(t),VTr=i(ql),Fo=n(ql,"DIV",{class:!0});var Ia=s(Fo);T(Qx.$$.fragment,Ia),XTr=i(Ia),sMe=n(Ia,"P",{});var ZIt=s(sMe);zTr=r(ZIt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ZIt.forEach(t),WTr=i(Ia),gn=n(Ia,"P",{});var aL=s(gn);QTr=r(aL,"The model class to instantiate is selected based on the "),lMe=n(aL,"CODE",{});var eNt=s(lMe);UTr=r(eNt,"model_type"),eNt.forEach(t),HTr=r(aL,` property of the config object (either
passed as an argument or loaded from `),iMe=n(aL,"CODE",{});var oNt=s(iMe);JTr=r(oNt,"pretrained_model_name_or_path"),oNt.forEach(t),YTr=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=n(aL,"CODE",{});var rNt=s(dMe);KTr=r(rNt,"pretrained_model_name_or_path"),rNt.forEach(t),ZTr=r(aL,":"),aL.forEach(t),eMr=i(Ia),cMe=n(Ia,"UL",{});var tNt=s(cMe);JM=n(tNt,"LI",{});var kGe=s(JM);fMe=n(kGe,"STRONG",{});var aNt=s(fMe);oMr=r(aNt,"detr"),aNt.forEach(t),rMr=r(kGe," \u2014 "),JJ=n(kGe,"A",{href:!0});var nNt=s(JJ);tMr=r(nNt,"DetrForSegmentation"),nNt.forEach(t),aMr=r(kGe," (DETR model)"),kGe.forEach(t),tNt.forEach(t),nMr=i(Ia),YM=n(Ia,"P",{});var SGe=s(YM);sMr=r(SGe,"The model is set in evaluation mode by default using "),mMe=n(SGe,"CODE",{});var sNt=s(mMe);lMr=r(sNt,"model.eval()"),sNt.forEach(t),iMr=r(SGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gMe=n(SGe,"CODE",{});var lNt=s(gMe);dMr=r(lNt,"model.train()"),lNt.forEach(t),SGe.forEach(t),cMr=i(Ia),T(KM.$$.fragment,Ia),Ia.forEach(t),ql.forEach(t),zUe=i(f),uc=n(f,"H2",{class:!0});var tYe=s(uc);ZM=n(tYe,"A",{id:!0,class:!0,href:!0});var iNt=s(ZM);hMe=n(iNt,"SPAN",{});var dNt=s(hMe);T(Ux.$$.fragment,dNt),dNt.forEach(t),iNt.forEach(t),fMr=i(tYe),pMe=n(tYe,"SPAN",{});var cNt=s(pMe);mMr=r(cNt,"AutoModelForSemanticSegmentation"),cNt.forEach(t),tYe.forEach(t),WUe=i(f),rr=n(f,"DIV",{class:!0});var jl=s(rr);T(Hx.$$.fragment,jl),gMr=i(jl),bc=n(jl,"P",{});var Sne=s(bc);hMr=r(Sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),YJ=n(Sne,"A",{href:!0});var fNt=s(YJ);pMr=r(fNt,"from_pretrained()"),fNt.forEach(t),_Mr=r(Sne," class method or the "),KJ=n(Sne,"A",{href:!0});var mNt=s(KJ);uMr=r(mNt,"from_config()"),mNt.forEach(t),bMr=r(Sne,` class
method.`),Sne.forEach(t),vMr=i(jl),Jx=n(jl,"P",{});var aYe=s(Jx);FMr=r(aYe,"This class cannot be instantiated directly using "),_Me=n(aYe,"CODE",{});var gNt=s(_Me);TMr=r(gNt,"__init__()"),gNt.forEach(t),MMr=r(aYe," (throws an error)."),aYe.forEach(t),EMr=i(jl),It=n(jl,"DIV",{class:!0});var nL=s(It);T(Yx.$$.fragment,nL),CMr=i(nL),uMe=n(nL,"P",{});var hNt=s(uMe);wMr=r(hNt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),hNt.forEach(t),AMr=i(nL),vc=n(nL,"P",{});var Rne=s(vc);LMr=r(Rne,`Note:
Loading a model from its configuration file does `),bMe=n(Rne,"STRONG",{});var pNt=s(bMe);yMr=r(pNt,"not"),pNt.forEach(t),xMr=r(Rne,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=n(Rne,"A",{href:!0});var _Nt=s(ZJ);$Mr=r(_Nt,"from_pretrained()"),_Nt.forEach(t),kMr=r(Rne," to load the model weights."),Rne.forEach(t),SMr=i(nL),T(eE.$$.fragment,nL),nL.forEach(t),RMr=i(jl),To=n(jl,"DIV",{class:!0});var Na=s(To);T(Kx.$$.fragment,Na),PMr=i(Na),vMe=n(Na,"P",{});var uNt=s(vMe);BMr=r(uNt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),uNt.forEach(t),IMr=i(Na),hn=n(Na,"P",{});var sL=s(hn);NMr=r(sL,"The model class to instantiate is selected based on the "),FMe=n(sL,"CODE",{});var bNt=s(FMe);qMr=r(bNt,"model_type"),bNt.forEach(t),jMr=r(sL,` property of the config object (either
passed as an argument or loaded from `),TMe=n(sL,"CODE",{});var vNt=s(TMe);DMr=r(vNt,"pretrained_model_name_or_path"),vNt.forEach(t),GMr=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=n(sL,"CODE",{});var FNt=s(MMe);OMr=r(FNt,"pretrained_model_name_or_path"),FNt.forEach(t),VMr=r(sL,":"),sL.forEach(t),XMr=i(Na),it=n(Na,"UL",{});var Dl=s(it);oE=n(Dl,"LI",{});var RGe=s(oE);EMe=n(RGe,"STRONG",{});var TNt=s(EMe);zMr=r(TNt,"beit"),TNt.forEach(t),WMr=r(RGe," \u2014 "),eY=n(RGe,"A",{href:!0});var MNt=s(eY);QMr=r(MNt,"BeitForSemanticSegmentation"),MNt.forEach(t),UMr=r(RGe," (BEiT model)"),RGe.forEach(t),HMr=i(Dl),rE=n(Dl,"LI",{});var PGe=s(rE);CMe=n(PGe,"STRONG",{});var ENt=s(CMe);JMr=r(ENt,"data2vec-vision"),ENt.forEach(t),YMr=r(PGe," \u2014 "),oY=n(PGe,"A",{href:!0});var CNt=s(oY);KMr=r(CNt,"Data2VecVisionForSemanticSegmentation"),CNt.forEach(t),ZMr=r(PGe," (Data2VecVision model)"),PGe.forEach(t),eEr=i(Dl),tE=n(Dl,"LI",{});var BGe=s(tE);wMe=n(BGe,"STRONG",{});var wNt=s(wMe);oEr=r(wNt,"dpt"),wNt.forEach(t),rEr=r(BGe," \u2014 "),rY=n(BGe,"A",{href:!0});var ANt=s(rY);tEr=r(ANt,"DPTForSemanticSegmentation"),ANt.forEach(t),aEr=r(BGe," (DPT model)"),BGe.forEach(t),nEr=i(Dl),aE=n(Dl,"LI",{});var IGe=s(aE);AMe=n(IGe,"STRONG",{});var LNt=s(AMe);sEr=r(LNt,"mobilevit"),LNt.forEach(t),lEr=r(IGe," \u2014 "),tY=n(IGe,"A",{href:!0});var yNt=s(tY);iEr=r(yNt,"MobileViTForSemanticSegmentation"),yNt.forEach(t),dEr=r(IGe," (MobileViT model)"),IGe.forEach(t),cEr=i(Dl),nE=n(Dl,"LI",{});var NGe=s(nE);LMe=n(NGe,"STRONG",{});var xNt=s(LMe);fEr=r(xNt,"segformer"),xNt.forEach(t),mEr=r(NGe," \u2014 "),aY=n(NGe,"A",{href:!0});var $Nt=s(aY);gEr=r($Nt,"SegformerForSemanticSegmentation"),$Nt.forEach(t),hEr=r(NGe," (SegFormer model)"),NGe.forEach(t),Dl.forEach(t),pEr=i(Na),sE=n(Na,"P",{});var qGe=s(sE);_Er=r(qGe,"The model is set in evaluation mode by default using "),yMe=n(qGe,"CODE",{});var kNt=s(yMe);uEr=r(kNt,"model.eval()"),kNt.forEach(t),bEr=r(qGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xMe=n(qGe,"CODE",{});var SNt=s(xMe);vEr=r(SNt,"model.train()"),SNt.forEach(t),qGe.forEach(t),FEr=i(Na),T(lE.$$.fragment,Na),Na.forEach(t),jl.forEach(t),QUe=i(f),Fc=n(f,"H2",{class:!0});var nYe=s(Fc);iE=n(nYe,"A",{id:!0,class:!0,href:!0});var RNt=s(iE);$Me=n(RNt,"SPAN",{});var PNt=s($Me);T(Zx.$$.fragment,PNt),PNt.forEach(t),RNt.forEach(t),TEr=i(nYe),kMe=n(nYe,"SPAN",{});var BNt=s(kMe);MEr=r(BNt,"AutoModelForInstanceSegmentation"),BNt.forEach(t),nYe.forEach(t),UUe=i(f),tr=n(f,"DIV",{class:!0});var Gl=s(tr);T(e$.$$.fragment,Gl),EEr=i(Gl),Tc=n(Gl,"P",{});var Pne=s(Tc);CEr=r(Pne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),nY=n(Pne,"A",{href:!0});var INt=s(nY);wEr=r(INt,"from_pretrained()"),INt.forEach(t),AEr=r(Pne," class method or the "),sY=n(Pne,"A",{href:!0});var NNt=s(sY);LEr=r(NNt,"from_config()"),NNt.forEach(t),yEr=r(Pne,` class
method.`),Pne.forEach(t),xEr=i(Gl),o$=n(Gl,"P",{});var sYe=s(o$);$Er=r(sYe,"This class cannot be instantiated directly using "),SMe=n(sYe,"CODE",{});var qNt=s(SMe);kEr=r(qNt,"__init__()"),qNt.forEach(t),SEr=r(sYe," (throws an error)."),sYe.forEach(t),REr=i(Gl),Nt=n(Gl,"DIV",{class:!0});var lL=s(Nt);T(r$.$$.fragment,lL),PEr=i(lL),RMe=n(lL,"P",{});var jNt=s(RMe);BEr=r(jNt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),jNt.forEach(t),IEr=i(lL),Mc=n(lL,"P",{});var Bne=s(Mc);NEr=r(Bne,`Note:
Loading a model from its configuration file does `),PMe=n(Bne,"STRONG",{});var DNt=s(PMe);qEr=r(DNt,"not"),DNt.forEach(t),jEr=r(Bne,` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=n(Bne,"A",{href:!0});var GNt=s(lY);DEr=r(GNt,"from_pretrained()"),GNt.forEach(t),GEr=r(Bne," to load the model weights."),Bne.forEach(t),OEr=i(lL),T(dE.$$.fragment,lL),lL.forEach(t),VEr=i(Gl),Mo=n(Gl,"DIV",{class:!0});var qa=s(Mo);T(t$.$$.fragment,qa),XEr=i(qa),BMe=n(qa,"P",{});var ONt=s(BMe);zEr=r(ONt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ONt.forEach(t),WEr=i(qa),pn=n(qa,"P",{});var iL=s(pn);QEr=r(iL,"The model class to instantiate is selected based on the "),IMe=n(iL,"CODE",{});var VNt=s(IMe);UEr=r(VNt,"model_type"),VNt.forEach(t),HEr=r(iL,` property of the config object (either
passed as an argument or loaded from `),NMe=n(iL,"CODE",{});var XNt=s(NMe);JEr=r(XNt,"pretrained_model_name_or_path"),XNt.forEach(t),YEr=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qMe=n(iL,"CODE",{});var zNt=s(qMe);KEr=r(zNt,"pretrained_model_name_or_path"),zNt.forEach(t),ZEr=r(iL,":"),iL.forEach(t),e4r=i(qa),jMe=n(qa,"UL",{});var WNt=s(jMe);cE=n(WNt,"LI",{});var jGe=s(cE);DMe=n(jGe,"STRONG",{});var QNt=s(DMe);o4r=r(QNt,"maskformer"),QNt.forEach(t),r4r=r(jGe," \u2014 "),iY=n(jGe,"A",{href:!0});var UNt=s(iY);t4r=r(UNt,"MaskFormerForInstanceSegmentation"),UNt.forEach(t),a4r=r(jGe," (MaskFormer model)"),jGe.forEach(t),WNt.forEach(t),n4r=i(qa),fE=n(qa,"P",{});var DGe=s(fE);s4r=r(DGe,"The model is set in evaluation mode by default using "),GMe=n(DGe,"CODE",{});var HNt=s(GMe);l4r=r(HNt,"model.eval()"),HNt.forEach(t),i4r=r(DGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OMe=n(DGe,"CODE",{});var JNt=s(OMe);d4r=r(JNt,"model.train()"),JNt.forEach(t),DGe.forEach(t),c4r=i(qa),T(mE.$$.fragment,qa),qa.forEach(t),Gl.forEach(t),HUe=i(f),Ec=n(f,"H2",{class:!0});var lYe=s(Ec);gE=n(lYe,"A",{id:!0,class:!0,href:!0});var YNt=s(gE);VMe=n(YNt,"SPAN",{});var KNt=s(VMe);T(a$.$$.fragment,KNt),KNt.forEach(t),YNt.forEach(t),f4r=i(lYe),XMe=n(lYe,"SPAN",{});var ZNt=s(XMe);m4r=r(ZNt,"TFAutoModel"),ZNt.forEach(t),lYe.forEach(t),JUe=i(f),ar=n(f,"DIV",{class:!0});var Ol=s(ar);T(n$.$$.fragment,Ol),g4r=i(Ol),Cc=n(Ol,"P",{});var Ine=s(Cc);h4r=r(Ine,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dY=n(Ine,"A",{href:!0});var eqt=s(dY);p4r=r(eqt,"from_pretrained()"),eqt.forEach(t),_4r=r(Ine," class method or the "),cY=n(Ine,"A",{href:!0});var oqt=s(cY);u4r=r(oqt,"from_config()"),oqt.forEach(t),b4r=r(Ine,` class
method.`),Ine.forEach(t),v4r=i(Ol),s$=n(Ol,"P",{});var iYe=s(s$);F4r=r(iYe,"This class cannot be instantiated directly using "),zMe=n(iYe,"CODE",{});var rqt=s(zMe);T4r=r(rqt,"__init__()"),rqt.forEach(t),M4r=r(iYe," (throws an error)."),iYe.forEach(t),E4r=i(Ol),qt=n(Ol,"DIV",{class:!0});var dL=s(qt);T(l$.$$.fragment,dL),C4r=i(dL),WMe=n(dL,"P",{});var tqt=s(WMe);w4r=r(tqt,"Instantiates one of the base model classes of the library from a configuration."),tqt.forEach(t),A4r=i(dL),wc=n(dL,"P",{});var Nne=s(wc);L4r=r(Nne,`Note:
Loading a model from its configuration file does `),QMe=n(Nne,"STRONG",{});var aqt=s(QMe);y4r=r(aqt,"not"),aqt.forEach(t),x4r=r(Nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(Nne,"A",{href:!0});var nqt=s(fY);$4r=r(nqt,"from_pretrained()"),nqt.forEach(t),k4r=r(Nne," to load the model weights."),Nne.forEach(t),S4r=i(dL),T(hE.$$.fragment,dL),dL.forEach(t),R4r=i(Ol),Rr=n(Ol,"DIV",{class:!0});var Vl=s(Rr);T(i$.$$.fragment,Vl),P4r=i(Vl),UMe=n(Vl,"P",{});var sqt=s(UMe);B4r=r(sqt,"Instantiate one of the base model classes of the library from a pretrained model."),sqt.forEach(t),I4r=i(Vl),_n=n(Vl,"P",{});var cL=s(_n);N4r=r(cL,"The model class to instantiate is selected based on the "),HMe=n(cL,"CODE",{});var lqt=s(HMe);q4r=r(lqt,"model_type"),lqt.forEach(t),j4r=r(cL,` property of the config object (either
passed as an argument or loaded from `),JMe=n(cL,"CODE",{});var iqt=s(JMe);D4r=r(iqt,"pretrained_model_name_or_path"),iqt.forEach(t),G4r=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=n(cL,"CODE",{});var dqt=s(YMe);O4r=r(dqt,"pretrained_model_name_or_path"),dqt.forEach(t),V4r=r(cL,":"),cL.forEach(t),X4r=i(Vl),q=n(Vl,"UL",{});var D=s(q);pE=n(D,"LI",{});var GGe=s(pE);KMe=n(GGe,"STRONG",{});var cqt=s(KMe);z4r=r(cqt,"albert"),cqt.forEach(t),W4r=r(GGe," \u2014 "),mY=n(GGe,"A",{href:!0});var fqt=s(mY);Q4r=r(fqt,"TFAlbertModel"),fqt.forEach(t),U4r=r(GGe," (ALBERT model)"),GGe.forEach(t),H4r=i(D),_E=n(D,"LI",{});var OGe=s(_E);ZMe=n(OGe,"STRONG",{});var mqt=s(ZMe);J4r=r(mqt,"bart"),mqt.forEach(t),Y4r=r(OGe," \u2014 "),gY=n(OGe,"A",{href:!0});var gqt=s(gY);K4r=r(gqt,"TFBartModel"),gqt.forEach(t),Z4r=r(OGe," (BART model)"),OGe.forEach(t),eCr=i(D),uE=n(D,"LI",{});var VGe=s(uE);eEe=n(VGe,"STRONG",{});var hqt=s(eEe);oCr=r(hqt,"bert"),hqt.forEach(t),rCr=r(VGe," \u2014 "),hY=n(VGe,"A",{href:!0});var pqt=s(hY);tCr=r(pqt,"TFBertModel"),pqt.forEach(t),aCr=r(VGe," (BERT model)"),VGe.forEach(t),nCr=i(D),bE=n(D,"LI",{});var XGe=s(bE);oEe=n(XGe,"STRONG",{});var _qt=s(oEe);sCr=r(_qt,"blenderbot"),_qt.forEach(t),lCr=r(XGe," \u2014 "),pY=n(XGe,"A",{href:!0});var uqt=s(pY);iCr=r(uqt,"TFBlenderbotModel"),uqt.forEach(t),dCr=r(XGe," (Blenderbot model)"),XGe.forEach(t),cCr=i(D),vE=n(D,"LI",{});var zGe=s(vE);rEe=n(zGe,"STRONG",{});var bqt=s(rEe);fCr=r(bqt,"blenderbot-small"),bqt.forEach(t),mCr=r(zGe," \u2014 "),_Y=n(zGe,"A",{href:!0});var vqt=s(_Y);gCr=r(vqt,"TFBlenderbotSmallModel"),vqt.forEach(t),hCr=r(zGe," (BlenderbotSmall model)"),zGe.forEach(t),pCr=i(D),FE=n(D,"LI",{});var WGe=s(FE);tEe=n(WGe,"STRONG",{});var Fqt=s(tEe);_Cr=r(Fqt,"camembert"),Fqt.forEach(t),uCr=r(WGe," \u2014 "),uY=n(WGe,"A",{href:!0});var Tqt=s(uY);bCr=r(Tqt,"TFCamembertModel"),Tqt.forEach(t),vCr=r(WGe," (CamemBERT model)"),WGe.forEach(t),FCr=i(D),TE=n(D,"LI",{});var QGe=s(TE);aEe=n(QGe,"STRONG",{});var Mqt=s(aEe);TCr=r(Mqt,"clip"),Mqt.forEach(t),MCr=r(QGe," \u2014 "),bY=n(QGe,"A",{href:!0});var Eqt=s(bY);ECr=r(Eqt,"TFCLIPModel"),Eqt.forEach(t),CCr=r(QGe," (CLIP model)"),QGe.forEach(t),wCr=i(D),ME=n(D,"LI",{});var UGe=s(ME);nEe=n(UGe,"STRONG",{});var Cqt=s(nEe);ACr=r(Cqt,"convbert"),Cqt.forEach(t),LCr=r(UGe," \u2014 "),vY=n(UGe,"A",{href:!0});var wqt=s(vY);yCr=r(wqt,"TFConvBertModel"),wqt.forEach(t),xCr=r(UGe," (ConvBERT model)"),UGe.forEach(t),$Cr=i(D),EE=n(D,"LI",{});var HGe=s(EE);sEe=n(HGe,"STRONG",{});var Aqt=s(sEe);kCr=r(Aqt,"convnext"),Aqt.forEach(t),SCr=r(HGe," \u2014 "),FY=n(HGe,"A",{href:!0});var Lqt=s(FY);RCr=r(Lqt,"TFConvNextModel"),Lqt.forEach(t),PCr=r(HGe," (ConvNeXT model)"),HGe.forEach(t),BCr=i(D),CE=n(D,"LI",{});var JGe=s(CE);lEe=n(JGe,"STRONG",{});var yqt=s(lEe);ICr=r(yqt,"ctrl"),yqt.forEach(t),NCr=r(JGe," \u2014 "),TY=n(JGe,"A",{href:!0});var xqt=s(TY);qCr=r(xqt,"TFCTRLModel"),xqt.forEach(t),jCr=r(JGe," (CTRL model)"),JGe.forEach(t),DCr=i(D),wE=n(D,"LI",{});var YGe=s(wE);iEe=n(YGe,"STRONG",{});var $qt=s(iEe);GCr=r($qt,"data2vec-vision"),$qt.forEach(t),OCr=r(YGe," \u2014 "),MY=n(YGe,"A",{href:!0});var kqt=s(MY);VCr=r(kqt,"TFData2VecVisionModel"),kqt.forEach(t),XCr=r(YGe," (Data2VecVision model)"),YGe.forEach(t),zCr=i(D),AE=n(D,"LI",{});var KGe=s(AE);dEe=n(KGe,"STRONG",{});var Sqt=s(dEe);WCr=r(Sqt,"deberta"),Sqt.forEach(t),QCr=r(KGe," \u2014 "),EY=n(KGe,"A",{href:!0});var Rqt=s(EY);UCr=r(Rqt,"TFDebertaModel"),Rqt.forEach(t),HCr=r(KGe," (DeBERTa model)"),KGe.forEach(t),JCr=i(D),LE=n(D,"LI",{});var ZGe=s(LE);cEe=n(ZGe,"STRONG",{});var Pqt=s(cEe);YCr=r(Pqt,"deberta-v2"),Pqt.forEach(t),KCr=r(ZGe," \u2014 "),CY=n(ZGe,"A",{href:!0});var Bqt=s(CY);ZCr=r(Bqt,"TFDebertaV2Model"),Bqt.forEach(t),e3r=r(ZGe," (DeBERTa-v2 model)"),ZGe.forEach(t),o3r=i(D),yE=n(D,"LI",{});var eOe=s(yE);fEe=n(eOe,"STRONG",{});var Iqt=s(fEe);r3r=r(Iqt,"deit"),Iqt.forEach(t),t3r=r(eOe," \u2014 "),wY=n(eOe,"A",{href:!0});var Nqt=s(wY);a3r=r(Nqt,"TFDeiTModel"),Nqt.forEach(t),n3r=r(eOe," (DeiT model)"),eOe.forEach(t),s3r=i(D),xE=n(D,"LI",{});var oOe=s(xE);mEe=n(oOe,"STRONG",{});var qqt=s(mEe);l3r=r(qqt,"distilbert"),qqt.forEach(t),i3r=r(oOe," \u2014 "),AY=n(oOe,"A",{href:!0});var jqt=s(AY);d3r=r(jqt,"TFDistilBertModel"),jqt.forEach(t),c3r=r(oOe," (DistilBERT model)"),oOe.forEach(t),f3r=i(D),$E=n(D,"LI",{});var rOe=s($E);gEe=n(rOe,"STRONG",{});var Dqt=s(gEe);m3r=r(Dqt,"dpr"),Dqt.forEach(t),g3r=r(rOe," \u2014 "),LY=n(rOe,"A",{href:!0});var Gqt=s(LY);h3r=r(Gqt,"TFDPRQuestionEncoder"),Gqt.forEach(t),p3r=r(rOe," (DPR model)"),rOe.forEach(t),_3r=i(D),kE=n(D,"LI",{});var tOe=s(kE);hEe=n(tOe,"STRONG",{});var Oqt=s(hEe);u3r=r(Oqt,"electra"),Oqt.forEach(t),b3r=r(tOe," \u2014 "),yY=n(tOe,"A",{href:!0});var Vqt=s(yY);v3r=r(Vqt,"TFElectraModel"),Vqt.forEach(t),F3r=r(tOe," (ELECTRA model)"),tOe.forEach(t),T3r=i(D),SE=n(D,"LI",{});var aOe=s(SE);pEe=n(aOe,"STRONG",{});var Xqt=s(pEe);M3r=r(Xqt,"flaubert"),Xqt.forEach(t),E3r=r(aOe," \u2014 "),xY=n(aOe,"A",{href:!0});var zqt=s(xY);C3r=r(zqt,"TFFlaubertModel"),zqt.forEach(t),w3r=r(aOe," (FlauBERT model)"),aOe.forEach(t),A3r=i(D),il=n(D,"LI",{});var oP=s(il);_Ee=n(oP,"STRONG",{});var Wqt=s(_Ee);L3r=r(Wqt,"funnel"),Wqt.forEach(t),y3r=r(oP," \u2014 "),$Y=n(oP,"A",{href:!0});var Qqt=s($Y);x3r=r(Qqt,"TFFunnelModel"),Qqt.forEach(t),$3r=r(oP," or "),kY=n(oP,"A",{href:!0});var Uqt=s(kY);k3r=r(Uqt,"TFFunnelBaseModel"),Uqt.forEach(t),S3r=r(oP," (Funnel Transformer model)"),oP.forEach(t),R3r=i(D),RE=n(D,"LI",{});var nOe=s(RE);uEe=n(nOe,"STRONG",{});var Hqt=s(uEe);P3r=r(Hqt,"gpt2"),Hqt.forEach(t),B3r=r(nOe," \u2014 "),SY=n(nOe,"A",{href:!0});var Jqt=s(SY);I3r=r(Jqt,"TFGPT2Model"),Jqt.forEach(t),N3r=r(nOe," (OpenAI GPT-2 model)"),nOe.forEach(t),q3r=i(D),PE=n(D,"LI",{});var sOe=s(PE);bEe=n(sOe,"STRONG",{});var Yqt=s(bEe);j3r=r(Yqt,"gptj"),Yqt.forEach(t),D3r=r(sOe," \u2014 "),RY=n(sOe,"A",{href:!0});var Kqt=s(RY);G3r=r(Kqt,"TFGPTJModel"),Kqt.forEach(t),O3r=r(sOe," (GPT-J model)"),sOe.forEach(t),V3r=i(D),BE=n(D,"LI",{});var lOe=s(BE);vEe=n(lOe,"STRONG",{});var Zqt=s(vEe);X3r=r(Zqt,"hubert"),Zqt.forEach(t),z3r=r(lOe," \u2014 "),PY=n(lOe,"A",{href:!0});var ejt=s(PY);W3r=r(ejt,"TFHubertModel"),ejt.forEach(t),Q3r=r(lOe," (Hubert model)"),lOe.forEach(t),U3r=i(D),IE=n(D,"LI",{});var iOe=s(IE);FEe=n(iOe,"STRONG",{});var ojt=s(FEe);H3r=r(ojt,"layoutlm"),ojt.forEach(t),J3r=r(iOe," \u2014 "),BY=n(iOe,"A",{href:!0});var rjt=s(BY);Y3r=r(rjt,"TFLayoutLMModel"),rjt.forEach(t),K3r=r(iOe," (LayoutLM model)"),iOe.forEach(t),Z3r=i(D),NE=n(D,"LI",{});var dOe=s(NE);TEe=n(dOe,"STRONG",{});var tjt=s(TEe);e5r=r(tjt,"led"),tjt.forEach(t),o5r=r(dOe," \u2014 "),IY=n(dOe,"A",{href:!0});var ajt=s(IY);r5r=r(ajt,"TFLEDModel"),ajt.forEach(t),t5r=r(dOe," (LED model)"),dOe.forEach(t),a5r=i(D),qE=n(D,"LI",{});var cOe=s(qE);MEe=n(cOe,"STRONG",{});var njt=s(MEe);n5r=r(njt,"longformer"),njt.forEach(t),s5r=r(cOe," \u2014 "),NY=n(cOe,"A",{href:!0});var sjt=s(NY);l5r=r(sjt,"TFLongformerModel"),sjt.forEach(t),i5r=r(cOe," (Longformer model)"),cOe.forEach(t),d5r=i(D),jE=n(D,"LI",{});var fOe=s(jE);EEe=n(fOe,"STRONG",{});var ljt=s(EEe);c5r=r(ljt,"lxmert"),ljt.forEach(t),f5r=r(fOe," \u2014 "),qY=n(fOe,"A",{href:!0});var ijt=s(qY);m5r=r(ijt,"TFLxmertModel"),ijt.forEach(t),g5r=r(fOe," (LXMERT model)"),fOe.forEach(t),h5r=i(D),DE=n(D,"LI",{});var mOe=s(DE);CEe=n(mOe,"STRONG",{});var djt=s(CEe);p5r=r(djt,"marian"),djt.forEach(t),_5r=r(mOe," \u2014 "),jY=n(mOe,"A",{href:!0});var cjt=s(jY);u5r=r(cjt,"TFMarianModel"),cjt.forEach(t),b5r=r(mOe," (Marian model)"),mOe.forEach(t),v5r=i(D),GE=n(D,"LI",{});var gOe=s(GE);wEe=n(gOe,"STRONG",{});var fjt=s(wEe);F5r=r(fjt,"mbart"),fjt.forEach(t),T5r=r(gOe," \u2014 "),DY=n(gOe,"A",{href:!0});var mjt=s(DY);M5r=r(mjt,"TFMBartModel"),mjt.forEach(t),E5r=r(gOe," (mBART model)"),gOe.forEach(t),C5r=i(D),OE=n(D,"LI",{});var hOe=s(OE);AEe=n(hOe,"STRONG",{});var gjt=s(AEe);w5r=r(gjt,"mobilebert"),gjt.forEach(t),A5r=r(hOe," \u2014 "),GY=n(hOe,"A",{href:!0});var hjt=s(GY);L5r=r(hjt,"TFMobileBertModel"),hjt.forEach(t),y5r=r(hOe," (MobileBERT model)"),hOe.forEach(t),x5r=i(D),VE=n(D,"LI",{});var pOe=s(VE);LEe=n(pOe,"STRONG",{});var pjt=s(LEe);$5r=r(pjt,"mpnet"),pjt.forEach(t),k5r=r(pOe," \u2014 "),OY=n(pOe,"A",{href:!0});var _jt=s(OY);S5r=r(_jt,"TFMPNetModel"),_jt.forEach(t),R5r=r(pOe," (MPNet model)"),pOe.forEach(t),P5r=i(D),XE=n(D,"LI",{});var _Oe=s(XE);yEe=n(_Oe,"STRONG",{});var ujt=s(yEe);B5r=r(ujt,"mt5"),ujt.forEach(t),I5r=r(_Oe," \u2014 "),VY=n(_Oe,"A",{href:!0});var bjt=s(VY);N5r=r(bjt,"TFMT5Model"),bjt.forEach(t),q5r=r(_Oe," (MT5 model)"),_Oe.forEach(t),j5r=i(D),zE=n(D,"LI",{});var uOe=s(zE);xEe=n(uOe,"STRONG",{});var vjt=s(xEe);D5r=r(vjt,"openai-gpt"),vjt.forEach(t),G5r=r(uOe," \u2014 "),XY=n(uOe,"A",{href:!0});var Fjt=s(XY);O5r=r(Fjt,"TFOpenAIGPTModel"),Fjt.forEach(t),V5r=r(uOe," (OpenAI GPT model)"),uOe.forEach(t),X5r=i(D),WE=n(D,"LI",{});var bOe=s(WE);$Ee=n(bOe,"STRONG",{});var Tjt=s($Ee);z5r=r(Tjt,"opt"),Tjt.forEach(t),W5r=r(bOe," \u2014 "),zY=n(bOe,"A",{href:!0});var Mjt=s(zY);Q5r=r(Mjt,"TFOPTModel"),Mjt.forEach(t),U5r=r(bOe," (OPT model)"),bOe.forEach(t),H5r=i(D),QE=n(D,"LI",{});var vOe=s(QE);kEe=n(vOe,"STRONG",{});var Ejt=s(kEe);J5r=r(Ejt,"pegasus"),Ejt.forEach(t),Y5r=r(vOe," \u2014 "),WY=n(vOe,"A",{href:!0});var Cjt=s(WY);K5r=r(Cjt,"TFPegasusModel"),Cjt.forEach(t),Z5r=r(vOe," (Pegasus model)"),vOe.forEach(t),e0r=i(D),UE=n(D,"LI",{});var FOe=s(UE);SEe=n(FOe,"STRONG",{});var wjt=s(SEe);o0r=r(wjt,"regnet"),wjt.forEach(t),r0r=r(FOe," \u2014 "),QY=n(FOe,"A",{href:!0});var Ajt=s(QY);t0r=r(Ajt,"TFRegNetModel"),Ajt.forEach(t),a0r=r(FOe," (RegNet model)"),FOe.forEach(t),n0r=i(D),HE=n(D,"LI",{});var TOe=s(HE);REe=n(TOe,"STRONG",{});var Ljt=s(REe);s0r=r(Ljt,"rembert"),Ljt.forEach(t),l0r=r(TOe," \u2014 "),UY=n(TOe,"A",{href:!0});var yjt=s(UY);i0r=r(yjt,"TFRemBertModel"),yjt.forEach(t),d0r=r(TOe," (RemBERT model)"),TOe.forEach(t),c0r=i(D),JE=n(D,"LI",{});var MOe=s(JE);PEe=n(MOe,"STRONG",{});var xjt=s(PEe);f0r=r(xjt,"resnet"),xjt.forEach(t),m0r=r(MOe," \u2014 "),HY=n(MOe,"A",{href:!0});var $jt=s(HY);g0r=r($jt,"TFResNetModel"),$jt.forEach(t),h0r=r(MOe," (ResNet model)"),MOe.forEach(t),p0r=i(D),YE=n(D,"LI",{});var EOe=s(YE);BEe=n(EOe,"STRONG",{});var kjt=s(BEe);_0r=r(kjt,"roberta"),kjt.forEach(t),u0r=r(EOe," \u2014 "),JY=n(EOe,"A",{href:!0});var Sjt=s(JY);b0r=r(Sjt,"TFRobertaModel"),Sjt.forEach(t),v0r=r(EOe," (RoBERTa model)"),EOe.forEach(t),F0r=i(D),KE=n(D,"LI",{});var COe=s(KE);IEe=n(COe,"STRONG",{});var Rjt=s(IEe);T0r=r(Rjt,"roformer"),Rjt.forEach(t),M0r=r(COe," \u2014 "),YY=n(COe,"A",{href:!0});var Pjt=s(YY);E0r=r(Pjt,"TFRoFormerModel"),Pjt.forEach(t),C0r=r(COe," (RoFormer model)"),COe.forEach(t),w0r=i(D),ZE=n(D,"LI",{});var wOe=s(ZE);NEe=n(wOe,"STRONG",{});var Bjt=s(NEe);A0r=r(Bjt,"segformer"),Bjt.forEach(t),L0r=r(wOe," \u2014 "),KY=n(wOe,"A",{href:!0});var Ijt=s(KY);y0r=r(Ijt,"TFSegformerModel"),Ijt.forEach(t),x0r=r(wOe," (SegFormer model)"),wOe.forEach(t),$0r=i(D),e4=n(D,"LI",{});var AOe=s(e4);qEe=n(AOe,"STRONG",{});var Njt=s(qEe);k0r=r(Njt,"speech_to_text"),Njt.forEach(t),S0r=r(AOe," \u2014 "),ZY=n(AOe,"A",{href:!0});var qjt=s(ZY);R0r=r(qjt,"TFSpeech2TextModel"),qjt.forEach(t),P0r=r(AOe," (Speech2Text model)"),AOe.forEach(t),B0r=i(D),o4=n(D,"LI",{});var LOe=s(o4);jEe=n(LOe,"STRONG",{});var jjt=s(jEe);I0r=r(jjt,"swin"),jjt.forEach(t),N0r=r(LOe," \u2014 "),eK=n(LOe,"A",{href:!0});var Djt=s(eK);q0r=r(Djt,"TFSwinModel"),Djt.forEach(t),j0r=r(LOe," (Swin Transformer model)"),LOe.forEach(t),D0r=i(D),r4=n(D,"LI",{});var yOe=s(r4);DEe=n(yOe,"STRONG",{});var Gjt=s(DEe);G0r=r(Gjt,"t5"),Gjt.forEach(t),O0r=r(yOe," \u2014 "),oK=n(yOe,"A",{href:!0});var Ojt=s(oK);V0r=r(Ojt,"TFT5Model"),Ojt.forEach(t),X0r=r(yOe," (T5 model)"),yOe.forEach(t),z0r=i(D),t4=n(D,"LI",{});var xOe=s(t4);GEe=n(xOe,"STRONG",{});var Vjt=s(GEe);W0r=r(Vjt,"tapas"),Vjt.forEach(t),Q0r=r(xOe," \u2014 "),rK=n(xOe,"A",{href:!0});var Xjt=s(rK);U0r=r(Xjt,"TFTapasModel"),Xjt.forEach(t),H0r=r(xOe," (TAPAS model)"),xOe.forEach(t),J0r=i(D),a4=n(D,"LI",{});var $Oe=s(a4);OEe=n($Oe,"STRONG",{});var zjt=s(OEe);Y0r=r(zjt,"transfo-xl"),zjt.forEach(t),K0r=r($Oe," \u2014 "),tK=n($Oe,"A",{href:!0});var Wjt=s(tK);Z0r=r(Wjt,"TFTransfoXLModel"),Wjt.forEach(t),ewr=r($Oe," (Transformer-XL model)"),$Oe.forEach(t),owr=i(D),n4=n(D,"LI",{});var kOe=s(n4);VEe=n(kOe,"STRONG",{});var Qjt=s(VEe);rwr=r(Qjt,"vit"),Qjt.forEach(t),twr=r(kOe," \u2014 "),aK=n(kOe,"A",{href:!0});var Ujt=s(aK);awr=r(Ujt,"TFViTModel"),Ujt.forEach(t),nwr=r(kOe," (ViT model)"),kOe.forEach(t),swr=i(D),s4=n(D,"LI",{});var SOe=s(s4);XEe=n(SOe,"STRONG",{});var Hjt=s(XEe);lwr=r(Hjt,"vit_mae"),Hjt.forEach(t),iwr=r(SOe," \u2014 "),nK=n(SOe,"A",{href:!0});var Jjt=s(nK);dwr=r(Jjt,"TFViTMAEModel"),Jjt.forEach(t),cwr=r(SOe," (ViTMAE model)"),SOe.forEach(t),fwr=i(D),l4=n(D,"LI",{});var ROe=s(l4);zEe=n(ROe,"STRONG",{});var Yjt=s(zEe);mwr=r(Yjt,"wav2vec2"),Yjt.forEach(t),gwr=r(ROe," \u2014 "),sK=n(ROe,"A",{href:!0});var Kjt=s(sK);hwr=r(Kjt,"TFWav2Vec2Model"),Kjt.forEach(t),pwr=r(ROe," (Wav2Vec2 model)"),ROe.forEach(t),_wr=i(D),i4=n(D,"LI",{});var POe=s(i4);WEe=n(POe,"STRONG",{});var Zjt=s(WEe);uwr=r(Zjt,"xlm"),Zjt.forEach(t),bwr=r(POe," \u2014 "),lK=n(POe,"A",{href:!0});var eDt=s(lK);vwr=r(eDt,"TFXLMModel"),eDt.forEach(t),Fwr=r(POe," (XLM model)"),POe.forEach(t),Twr=i(D),d4=n(D,"LI",{});var BOe=s(d4);QEe=n(BOe,"STRONG",{});var oDt=s(QEe);Mwr=r(oDt,"xlm-roberta"),oDt.forEach(t),Ewr=r(BOe," \u2014 "),iK=n(BOe,"A",{href:!0});var rDt=s(iK);Cwr=r(rDt,"TFXLMRobertaModel"),rDt.forEach(t),wwr=r(BOe," (XLM-RoBERTa model)"),BOe.forEach(t),Awr=i(D),c4=n(D,"LI",{});var IOe=s(c4);UEe=n(IOe,"STRONG",{});var tDt=s(UEe);Lwr=r(tDt,"xlnet"),tDt.forEach(t),ywr=r(IOe," \u2014 "),dK=n(IOe,"A",{href:!0});var aDt=s(dK);xwr=r(aDt,"TFXLNetModel"),aDt.forEach(t),$wr=r(IOe," (XLNet model)"),IOe.forEach(t),D.forEach(t),kwr=i(Vl),T(f4.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),YUe=i(f),Ac=n(f,"H2",{class:!0});var dYe=s(Ac);m4=n(dYe,"A",{id:!0,class:!0,href:!0});var nDt=s(m4);HEe=n(nDt,"SPAN",{});var sDt=s(HEe);T(d$.$$.fragment,sDt),sDt.forEach(t),nDt.forEach(t),Swr=i(dYe),JEe=n(dYe,"SPAN",{});var lDt=s(JEe);Rwr=r(lDt,"TFAutoModelForPreTraining"),lDt.forEach(t),dYe.forEach(t),KUe=i(f),nr=n(f,"DIV",{class:!0});var Xl=s(nr);T(c$.$$.fragment,Xl),Pwr=i(Xl),Lc=n(Xl,"P",{});var qne=s(Lc);Bwr=r(qne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),cK=n(qne,"A",{href:!0});var iDt=s(cK);Iwr=r(iDt,"from_pretrained()"),iDt.forEach(t),Nwr=r(qne," class method or the "),fK=n(qne,"A",{href:!0});var dDt=s(fK);qwr=r(dDt,"from_config()"),dDt.forEach(t),jwr=r(qne,` class
method.`),qne.forEach(t),Dwr=i(Xl),f$=n(Xl,"P",{});var cYe=s(f$);Gwr=r(cYe,"This class cannot be instantiated directly using "),YEe=n(cYe,"CODE",{});var cDt=s(YEe);Owr=r(cDt,"__init__()"),cDt.forEach(t),Vwr=r(cYe," (throws an error)."),cYe.forEach(t),Xwr=i(Xl),jt=n(Xl,"DIV",{class:!0});var fL=s(jt);T(m$.$$.fragment,fL),zwr=i(fL),KEe=n(fL,"P",{});var fDt=s(KEe);Wwr=r(fDt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fDt.forEach(t),Qwr=i(fL),yc=n(fL,"P",{});var jne=s(yc);Uwr=r(jne,`Note:
Loading a model from its configuration file does `),ZEe=n(jne,"STRONG",{});var mDt=s(ZEe);Hwr=r(mDt,"not"),mDt.forEach(t),Jwr=r(jne,` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=n(jne,"A",{href:!0});var gDt=s(mK);Ywr=r(gDt,"from_pretrained()"),gDt.forEach(t),Kwr=r(jne," to load the model weights."),jne.forEach(t),Zwr=i(fL),T(g4.$$.fragment,fL),fL.forEach(t),eAr=i(Xl),Pr=n(Xl,"DIV",{class:!0});var zl=s(Pr);T(g$.$$.fragment,zl),oAr=i(zl),e4e=n(zl,"P",{});var hDt=s(e4e);rAr=r(hDt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hDt.forEach(t),tAr=i(zl),un=n(zl,"P",{});var mL=s(un);aAr=r(mL,"The model class to instantiate is selected based on the "),o4e=n(mL,"CODE",{});var pDt=s(o4e);nAr=r(pDt,"model_type"),pDt.forEach(t),sAr=r(mL,` property of the config object (either
passed as an argument or loaded from `),r4e=n(mL,"CODE",{});var _Dt=s(r4e);lAr=r(_Dt,"pretrained_model_name_or_path"),_Dt.forEach(t),iAr=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t4e=n(mL,"CODE",{});var uDt=s(t4e);dAr=r(uDt,"pretrained_model_name_or_path"),uDt.forEach(t),cAr=r(mL,":"),mL.forEach(t),fAr=i(zl),se=n(zl,"UL",{});var le=s(se);h4=n(le,"LI",{});var NOe=s(h4);a4e=n(NOe,"STRONG",{});var bDt=s(a4e);mAr=r(bDt,"albert"),bDt.forEach(t),gAr=r(NOe," \u2014 "),gK=n(NOe,"A",{href:!0});var vDt=s(gK);hAr=r(vDt,"TFAlbertForPreTraining"),vDt.forEach(t),pAr=r(NOe," (ALBERT model)"),NOe.forEach(t),_Ar=i(le),p4=n(le,"LI",{});var qOe=s(p4);n4e=n(qOe,"STRONG",{});var FDt=s(n4e);uAr=r(FDt,"bart"),FDt.forEach(t),bAr=r(qOe," \u2014 "),hK=n(qOe,"A",{href:!0});var TDt=s(hK);vAr=r(TDt,"TFBartForConditionalGeneration"),TDt.forEach(t),FAr=r(qOe," (BART model)"),qOe.forEach(t),TAr=i(le),_4=n(le,"LI",{});var jOe=s(_4);s4e=n(jOe,"STRONG",{});var MDt=s(s4e);MAr=r(MDt,"bert"),MDt.forEach(t),EAr=r(jOe," \u2014 "),pK=n(jOe,"A",{href:!0});var EDt=s(pK);CAr=r(EDt,"TFBertForPreTraining"),EDt.forEach(t),wAr=r(jOe," (BERT model)"),jOe.forEach(t),AAr=i(le),u4=n(le,"LI",{});var DOe=s(u4);l4e=n(DOe,"STRONG",{});var CDt=s(l4e);LAr=r(CDt,"camembert"),CDt.forEach(t),yAr=r(DOe," \u2014 "),_K=n(DOe,"A",{href:!0});var wDt=s(_K);xAr=r(wDt,"TFCamembertForMaskedLM"),wDt.forEach(t),$Ar=r(DOe," (CamemBERT model)"),DOe.forEach(t),kAr=i(le),b4=n(le,"LI",{});var GOe=s(b4);i4e=n(GOe,"STRONG",{});var ADt=s(i4e);SAr=r(ADt,"ctrl"),ADt.forEach(t),RAr=r(GOe," \u2014 "),uK=n(GOe,"A",{href:!0});var LDt=s(uK);PAr=r(LDt,"TFCTRLLMHeadModel"),LDt.forEach(t),BAr=r(GOe," (CTRL model)"),GOe.forEach(t),IAr=i(le),v4=n(le,"LI",{});var OOe=s(v4);d4e=n(OOe,"STRONG",{});var yDt=s(d4e);NAr=r(yDt,"distilbert"),yDt.forEach(t),qAr=r(OOe," \u2014 "),bK=n(OOe,"A",{href:!0});var xDt=s(bK);jAr=r(xDt,"TFDistilBertForMaskedLM"),xDt.forEach(t),DAr=r(OOe," (DistilBERT model)"),OOe.forEach(t),GAr=i(le),F4=n(le,"LI",{});var VOe=s(F4);c4e=n(VOe,"STRONG",{});var $Dt=s(c4e);OAr=r($Dt,"electra"),$Dt.forEach(t),VAr=r(VOe," \u2014 "),vK=n(VOe,"A",{href:!0});var kDt=s(vK);XAr=r(kDt,"TFElectraForPreTraining"),kDt.forEach(t),zAr=r(VOe," (ELECTRA model)"),VOe.forEach(t),WAr=i(le),T4=n(le,"LI",{});var XOe=s(T4);f4e=n(XOe,"STRONG",{});var SDt=s(f4e);QAr=r(SDt,"flaubert"),SDt.forEach(t),UAr=r(XOe," \u2014 "),FK=n(XOe,"A",{href:!0});var RDt=s(FK);HAr=r(RDt,"TFFlaubertWithLMHeadModel"),RDt.forEach(t),JAr=r(XOe," (FlauBERT model)"),XOe.forEach(t),YAr=i(le),M4=n(le,"LI",{});var zOe=s(M4);m4e=n(zOe,"STRONG",{});var PDt=s(m4e);KAr=r(PDt,"funnel"),PDt.forEach(t),ZAr=r(zOe," \u2014 "),TK=n(zOe,"A",{href:!0});var BDt=s(TK);e7r=r(BDt,"TFFunnelForPreTraining"),BDt.forEach(t),o7r=r(zOe," (Funnel Transformer model)"),zOe.forEach(t),r7r=i(le),E4=n(le,"LI",{});var WOe=s(E4);g4e=n(WOe,"STRONG",{});var IDt=s(g4e);t7r=r(IDt,"gpt2"),IDt.forEach(t),a7r=r(WOe," \u2014 "),MK=n(WOe,"A",{href:!0});var NDt=s(MK);n7r=r(NDt,"TFGPT2LMHeadModel"),NDt.forEach(t),s7r=r(WOe," (OpenAI GPT-2 model)"),WOe.forEach(t),l7r=i(le),C4=n(le,"LI",{});var QOe=s(C4);h4e=n(QOe,"STRONG",{});var qDt=s(h4e);i7r=r(qDt,"layoutlm"),qDt.forEach(t),d7r=r(QOe," \u2014 "),EK=n(QOe,"A",{href:!0});var jDt=s(EK);c7r=r(jDt,"TFLayoutLMForMaskedLM"),jDt.forEach(t),f7r=r(QOe," (LayoutLM model)"),QOe.forEach(t),m7r=i(le),w4=n(le,"LI",{});var UOe=s(w4);p4e=n(UOe,"STRONG",{});var DDt=s(p4e);g7r=r(DDt,"lxmert"),DDt.forEach(t),h7r=r(UOe," \u2014 "),CK=n(UOe,"A",{href:!0});var GDt=s(CK);p7r=r(GDt,"TFLxmertForPreTraining"),GDt.forEach(t),_7r=r(UOe," (LXMERT model)"),UOe.forEach(t),u7r=i(le),A4=n(le,"LI",{});var HOe=s(A4);_4e=n(HOe,"STRONG",{});var ODt=s(_4e);b7r=r(ODt,"mobilebert"),ODt.forEach(t),v7r=r(HOe," \u2014 "),wK=n(HOe,"A",{href:!0});var VDt=s(wK);F7r=r(VDt,"TFMobileBertForPreTraining"),VDt.forEach(t),T7r=r(HOe," (MobileBERT model)"),HOe.forEach(t),M7r=i(le),L4=n(le,"LI",{});var JOe=s(L4);u4e=n(JOe,"STRONG",{});var XDt=s(u4e);E7r=r(XDt,"mpnet"),XDt.forEach(t),C7r=r(JOe," \u2014 "),AK=n(JOe,"A",{href:!0});var zDt=s(AK);w7r=r(zDt,"TFMPNetForMaskedLM"),zDt.forEach(t),A7r=r(JOe," (MPNet model)"),JOe.forEach(t),L7r=i(le),y4=n(le,"LI",{});var YOe=s(y4);b4e=n(YOe,"STRONG",{});var WDt=s(b4e);y7r=r(WDt,"openai-gpt"),WDt.forEach(t),x7r=r(YOe," \u2014 "),LK=n(YOe,"A",{href:!0});var QDt=s(LK);$7r=r(QDt,"TFOpenAIGPTLMHeadModel"),QDt.forEach(t),k7r=r(YOe," (OpenAI GPT model)"),YOe.forEach(t),S7r=i(le),x4=n(le,"LI",{});var KOe=s(x4);v4e=n(KOe,"STRONG",{});var UDt=s(v4e);R7r=r(UDt,"roberta"),UDt.forEach(t),P7r=r(KOe," \u2014 "),yK=n(KOe,"A",{href:!0});var HDt=s(yK);B7r=r(HDt,"TFRobertaForMaskedLM"),HDt.forEach(t),I7r=r(KOe," (RoBERTa model)"),KOe.forEach(t),N7r=i(le),$4=n(le,"LI",{});var ZOe=s($4);F4e=n(ZOe,"STRONG",{});var JDt=s(F4e);q7r=r(JDt,"t5"),JDt.forEach(t),j7r=r(ZOe," \u2014 "),xK=n(ZOe,"A",{href:!0});var YDt=s(xK);D7r=r(YDt,"TFT5ForConditionalGeneration"),YDt.forEach(t),G7r=r(ZOe," (T5 model)"),ZOe.forEach(t),O7r=i(le),k4=n(le,"LI",{});var eVe=s(k4);T4e=n(eVe,"STRONG",{});var KDt=s(T4e);V7r=r(KDt,"tapas"),KDt.forEach(t),X7r=r(eVe," \u2014 "),$K=n(eVe,"A",{href:!0});var ZDt=s($K);z7r=r(ZDt,"TFTapasForMaskedLM"),ZDt.forEach(t),W7r=r(eVe," (TAPAS model)"),eVe.forEach(t),Q7r=i(le),S4=n(le,"LI",{});var oVe=s(S4);M4e=n(oVe,"STRONG",{});var eGt=s(M4e);U7r=r(eGt,"transfo-xl"),eGt.forEach(t),H7r=r(oVe," \u2014 "),kK=n(oVe,"A",{href:!0});var oGt=s(kK);J7r=r(oGt,"TFTransfoXLLMHeadModel"),oGt.forEach(t),Y7r=r(oVe," (Transformer-XL model)"),oVe.forEach(t),K7r=i(le),R4=n(le,"LI",{});var rVe=s(R4);E4e=n(rVe,"STRONG",{});var rGt=s(E4e);Z7r=r(rGt,"vit_mae"),rGt.forEach(t),eLr=r(rVe," \u2014 "),SK=n(rVe,"A",{href:!0});var tGt=s(SK);oLr=r(tGt,"TFViTMAEForPreTraining"),tGt.forEach(t),rLr=r(rVe," (ViTMAE model)"),rVe.forEach(t),tLr=i(le),P4=n(le,"LI",{});var tVe=s(P4);C4e=n(tVe,"STRONG",{});var aGt=s(C4e);aLr=r(aGt,"xlm"),aGt.forEach(t),nLr=r(tVe," \u2014 "),RK=n(tVe,"A",{href:!0});var nGt=s(RK);sLr=r(nGt,"TFXLMWithLMHeadModel"),nGt.forEach(t),lLr=r(tVe," (XLM model)"),tVe.forEach(t),iLr=i(le),B4=n(le,"LI",{});var aVe=s(B4);w4e=n(aVe,"STRONG",{});var sGt=s(w4e);dLr=r(sGt,"xlm-roberta"),sGt.forEach(t),cLr=r(aVe," \u2014 "),PK=n(aVe,"A",{href:!0});var lGt=s(PK);fLr=r(lGt,"TFXLMRobertaForMaskedLM"),lGt.forEach(t),mLr=r(aVe," (XLM-RoBERTa model)"),aVe.forEach(t),gLr=i(le),I4=n(le,"LI",{});var nVe=s(I4);A4e=n(nVe,"STRONG",{});var iGt=s(A4e);hLr=r(iGt,"xlnet"),iGt.forEach(t),pLr=r(nVe," \u2014 "),BK=n(nVe,"A",{href:!0});var dGt=s(BK);_Lr=r(dGt,"TFXLNetLMHeadModel"),dGt.forEach(t),uLr=r(nVe," (XLNet model)"),nVe.forEach(t),le.forEach(t),bLr=i(zl),T(N4.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),ZUe=i(f),xc=n(f,"H2",{class:!0});var fYe=s(xc);q4=n(fYe,"A",{id:!0,class:!0,href:!0});var cGt=s(q4);L4e=n(cGt,"SPAN",{});var fGt=s(L4e);T(h$.$$.fragment,fGt),fGt.forEach(t),cGt.forEach(t),vLr=i(fYe),y4e=n(fYe,"SPAN",{});var mGt=s(y4e);FLr=r(mGt,"TFAutoModelForCausalLM"),mGt.forEach(t),fYe.forEach(t),eHe=i(f),sr=n(f,"DIV",{class:!0});var Wl=s(sr);T(p$.$$.fragment,Wl),TLr=i(Wl),$c=n(Wl,"P",{});var Dne=s($c);MLr=r(Dne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),IK=n(Dne,"A",{href:!0});var gGt=s(IK);ELr=r(gGt,"from_pretrained()"),gGt.forEach(t),CLr=r(Dne," class method or the "),NK=n(Dne,"A",{href:!0});var hGt=s(NK);wLr=r(hGt,"from_config()"),hGt.forEach(t),ALr=r(Dne,` class
method.`),Dne.forEach(t),LLr=i(Wl),_$=n(Wl,"P",{});var mYe=s(_$);yLr=r(mYe,"This class cannot be instantiated directly using "),x4e=n(mYe,"CODE",{});var pGt=s(x4e);xLr=r(pGt,"__init__()"),pGt.forEach(t),$Lr=r(mYe," (throws an error)."),mYe.forEach(t),kLr=i(Wl),Dt=n(Wl,"DIV",{class:!0});var gL=s(Dt);T(u$.$$.fragment,gL),SLr=i(gL),$4e=n(gL,"P",{});var _Gt=s($4e);RLr=r(_Gt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_Gt.forEach(t),PLr=i(gL),kc=n(gL,"P",{});var Gne=s(kc);BLr=r(Gne,`Note:
Loading a model from its configuration file does `),k4e=n(Gne,"STRONG",{});var uGt=s(k4e);ILr=r(uGt,"not"),uGt.forEach(t),NLr=r(Gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=n(Gne,"A",{href:!0});var bGt=s(qK);qLr=r(bGt,"from_pretrained()"),bGt.forEach(t),jLr=r(Gne," to load the model weights."),Gne.forEach(t),DLr=i(gL),T(j4.$$.fragment,gL),gL.forEach(t),GLr=i(Wl),Br=n(Wl,"DIV",{class:!0});var Ql=s(Br);T(b$.$$.fragment,Ql),OLr=i(Ql),S4e=n(Ql,"P",{});var vGt=s(S4e);VLr=r(vGt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vGt.forEach(t),XLr=i(Ql),bn=n(Ql,"P",{});var hL=s(bn);zLr=r(hL,"The model class to instantiate is selected based on the "),R4e=n(hL,"CODE",{});var FGt=s(R4e);WLr=r(FGt,"model_type"),FGt.forEach(t),QLr=r(hL,` property of the config object (either
passed as an argument or loaded from `),P4e=n(hL,"CODE",{});var TGt=s(P4e);ULr=r(TGt,"pretrained_model_name_or_path"),TGt.forEach(t),HLr=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B4e=n(hL,"CODE",{});var MGt=s(B4e);JLr=r(MGt,"pretrained_model_name_or_path"),MGt.forEach(t),YLr=r(hL,":"),hL.forEach(t),KLr=i(Ql),Me=n(Ql,"UL",{});var Ce=s(Me);D4=n(Ce,"LI",{});var sVe=s(D4);I4e=n(sVe,"STRONG",{});var EGt=s(I4e);ZLr=r(EGt,"bert"),EGt.forEach(t),eyr=r(sVe," \u2014 "),jK=n(sVe,"A",{href:!0});var CGt=s(jK);oyr=r(CGt,"TFBertLMHeadModel"),CGt.forEach(t),ryr=r(sVe," (BERT model)"),sVe.forEach(t),tyr=i(Ce),G4=n(Ce,"LI",{});var lVe=s(G4);N4e=n(lVe,"STRONG",{});var wGt=s(N4e);ayr=r(wGt,"camembert"),wGt.forEach(t),nyr=r(lVe," \u2014 "),DK=n(lVe,"A",{href:!0});var AGt=s(DK);syr=r(AGt,"TFCamembertForCausalLM"),AGt.forEach(t),lyr=r(lVe," (CamemBERT model)"),lVe.forEach(t),iyr=i(Ce),O4=n(Ce,"LI",{});var iVe=s(O4);q4e=n(iVe,"STRONG",{});var LGt=s(q4e);dyr=r(LGt,"ctrl"),LGt.forEach(t),cyr=r(iVe," \u2014 "),GK=n(iVe,"A",{href:!0});var yGt=s(GK);fyr=r(yGt,"TFCTRLLMHeadModel"),yGt.forEach(t),myr=r(iVe," (CTRL model)"),iVe.forEach(t),gyr=i(Ce),V4=n(Ce,"LI",{});var dVe=s(V4);j4e=n(dVe,"STRONG",{});var xGt=s(j4e);hyr=r(xGt,"gpt2"),xGt.forEach(t),pyr=r(dVe," \u2014 "),OK=n(dVe,"A",{href:!0});var $Gt=s(OK);_yr=r($Gt,"TFGPT2LMHeadModel"),$Gt.forEach(t),uyr=r(dVe," (OpenAI GPT-2 model)"),dVe.forEach(t),byr=i(Ce),X4=n(Ce,"LI",{});var cVe=s(X4);D4e=n(cVe,"STRONG",{});var kGt=s(D4e);vyr=r(kGt,"gptj"),kGt.forEach(t),Fyr=r(cVe," \u2014 "),VK=n(cVe,"A",{href:!0});var SGt=s(VK);Tyr=r(SGt,"TFGPTJForCausalLM"),SGt.forEach(t),Myr=r(cVe," (GPT-J model)"),cVe.forEach(t),Eyr=i(Ce),z4=n(Ce,"LI",{});var fVe=s(z4);G4e=n(fVe,"STRONG",{});var RGt=s(G4e);Cyr=r(RGt,"openai-gpt"),RGt.forEach(t),wyr=r(fVe," \u2014 "),XK=n(fVe,"A",{href:!0});var PGt=s(XK);Ayr=r(PGt,"TFOpenAIGPTLMHeadModel"),PGt.forEach(t),Lyr=r(fVe," (OpenAI GPT model)"),fVe.forEach(t),yyr=i(Ce),W4=n(Ce,"LI",{});var mVe=s(W4);O4e=n(mVe,"STRONG",{});var BGt=s(O4e);xyr=r(BGt,"opt"),BGt.forEach(t),$yr=r(mVe," \u2014 "),zK=n(mVe,"A",{href:!0});var IGt=s(zK);kyr=r(IGt,"TFOPTForCausalLM"),IGt.forEach(t),Syr=r(mVe," (OPT model)"),mVe.forEach(t),Ryr=i(Ce),Q4=n(Ce,"LI",{});var gVe=s(Q4);V4e=n(gVe,"STRONG",{});var NGt=s(V4e);Pyr=r(NGt,"rembert"),NGt.forEach(t),Byr=r(gVe," \u2014 "),WK=n(gVe,"A",{href:!0});var qGt=s(WK);Iyr=r(qGt,"TFRemBertForCausalLM"),qGt.forEach(t),Nyr=r(gVe," (RemBERT model)"),gVe.forEach(t),qyr=i(Ce),U4=n(Ce,"LI",{});var hVe=s(U4);X4e=n(hVe,"STRONG",{});var jGt=s(X4e);jyr=r(jGt,"roberta"),jGt.forEach(t),Dyr=r(hVe," \u2014 "),QK=n(hVe,"A",{href:!0});var DGt=s(QK);Gyr=r(DGt,"TFRobertaForCausalLM"),DGt.forEach(t),Oyr=r(hVe," (RoBERTa model)"),hVe.forEach(t),Vyr=i(Ce),H4=n(Ce,"LI",{});var pVe=s(H4);z4e=n(pVe,"STRONG",{});var GGt=s(z4e);Xyr=r(GGt,"roformer"),GGt.forEach(t),zyr=r(pVe," \u2014 "),UK=n(pVe,"A",{href:!0});var OGt=s(UK);Wyr=r(OGt,"TFRoFormerForCausalLM"),OGt.forEach(t),Qyr=r(pVe," (RoFormer model)"),pVe.forEach(t),Uyr=i(Ce),J4=n(Ce,"LI",{});var _Ve=s(J4);W4e=n(_Ve,"STRONG",{});var VGt=s(W4e);Hyr=r(VGt,"transfo-xl"),VGt.forEach(t),Jyr=r(_Ve," \u2014 "),HK=n(_Ve,"A",{href:!0});var XGt=s(HK);Yyr=r(XGt,"TFTransfoXLLMHeadModel"),XGt.forEach(t),Kyr=r(_Ve," (Transformer-XL model)"),_Ve.forEach(t),Zyr=i(Ce),Y4=n(Ce,"LI",{});var uVe=s(Y4);Q4e=n(uVe,"STRONG",{});var zGt=s(Q4e);e9r=r(zGt,"xlm"),zGt.forEach(t),o9r=r(uVe," \u2014 "),JK=n(uVe,"A",{href:!0});var WGt=s(JK);r9r=r(WGt,"TFXLMWithLMHeadModel"),WGt.forEach(t),t9r=r(uVe," (XLM model)"),uVe.forEach(t),a9r=i(Ce),K4=n(Ce,"LI",{});var bVe=s(K4);U4e=n(bVe,"STRONG",{});var QGt=s(U4e);n9r=r(QGt,"xlnet"),QGt.forEach(t),s9r=r(bVe," \u2014 "),YK=n(bVe,"A",{href:!0});var UGt=s(YK);l9r=r(UGt,"TFXLNetLMHeadModel"),UGt.forEach(t),i9r=r(bVe," (XLNet model)"),bVe.forEach(t),Ce.forEach(t),d9r=i(Ql),T(Z4.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),oHe=i(f),Sc=n(f,"H2",{class:!0});var gYe=s(Sc);eC=n(gYe,"A",{id:!0,class:!0,href:!0});var HGt=s(eC);H4e=n(HGt,"SPAN",{});var JGt=s(H4e);T(v$.$$.fragment,JGt),JGt.forEach(t),HGt.forEach(t),c9r=i(gYe),J4e=n(gYe,"SPAN",{});var YGt=s(J4e);f9r=r(YGt,"TFAutoModelForImageClassification"),YGt.forEach(t),gYe.forEach(t),rHe=i(f),lr=n(f,"DIV",{class:!0});var Ul=s(lr);T(F$.$$.fragment,Ul),m9r=i(Ul),Rc=n(Ul,"P",{});var One=s(Rc);g9r=r(One,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KK=n(One,"A",{href:!0});var KGt=s(KK);h9r=r(KGt,"from_pretrained()"),KGt.forEach(t),p9r=r(One," class method or the "),ZK=n(One,"A",{href:!0});var ZGt=s(ZK);_9r=r(ZGt,"from_config()"),ZGt.forEach(t),u9r=r(One,` class
method.`),One.forEach(t),b9r=i(Ul),T$=n(Ul,"P",{});var hYe=s(T$);v9r=r(hYe,"This class cannot be instantiated directly using "),Y4e=n(hYe,"CODE",{});var eOt=s(Y4e);F9r=r(eOt,"__init__()"),eOt.forEach(t),T9r=r(hYe," (throws an error)."),hYe.forEach(t),M9r=i(Ul),Gt=n(Ul,"DIV",{class:!0});var pL=s(Gt);T(M$.$$.fragment,pL),E9r=i(pL),K4e=n(pL,"P",{});var oOt=s(K4e);C9r=r(oOt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),oOt.forEach(t),w9r=i(pL),Pc=n(pL,"P",{});var Vne=s(Pc);A9r=r(Vne,`Note:
Loading a model from its configuration file does `),Z4e=n(Vne,"STRONG",{});var rOt=s(Z4e);L9r=r(rOt,"not"),rOt.forEach(t),y9r=r(Vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=n(Vne,"A",{href:!0});var tOt=s(eZ);x9r=r(tOt,"from_pretrained()"),tOt.forEach(t),$9r=r(Vne," to load the model weights."),Vne.forEach(t),k9r=i(pL),T(oC.$$.fragment,pL),pL.forEach(t),S9r=i(Ul),Ir=n(Ul,"DIV",{class:!0});var Hl=s(Ir);T(E$.$$.fragment,Hl),R9r=i(Hl),eCe=n(Hl,"P",{});var aOt=s(eCe);P9r=r(aOt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),aOt.forEach(t),B9r=i(Hl),vn=n(Hl,"P",{});var _L=s(vn);I9r=r(_L,"The model class to instantiate is selected based on the "),oCe=n(_L,"CODE",{});var nOt=s(oCe);N9r=r(nOt,"model_type"),nOt.forEach(t),q9r=r(_L,` property of the config object (either
passed as an argument or loaded from `),rCe=n(_L,"CODE",{});var sOt=s(rCe);j9r=r(sOt,"pretrained_model_name_or_path"),sOt.forEach(t),D9r=r(_L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tCe=n(_L,"CODE",{});var lOt=s(tCe);G9r=r(lOt,"pretrained_model_name_or_path"),lOt.forEach(t),O9r=r(_L,":"),_L.forEach(t),V9r=i(Hl),Ve=n(Hl,"UL",{});var Eo=s(Ve);rC=n(Eo,"LI",{});var vVe=s(rC);aCe=n(vVe,"STRONG",{});var iOt=s(aCe);X9r=r(iOt,"convnext"),iOt.forEach(t),z9r=r(vVe," \u2014 "),oZ=n(vVe,"A",{href:!0});var dOt=s(oZ);W9r=r(dOt,"TFConvNextForImageClassification"),dOt.forEach(t),Q9r=r(vVe," (ConvNeXT model)"),vVe.forEach(t),U9r=i(Eo),tC=n(Eo,"LI",{});var FVe=s(tC);nCe=n(FVe,"STRONG",{});var cOt=s(nCe);H9r=r(cOt,"data2vec-vision"),cOt.forEach(t),J9r=r(FVe," \u2014 "),rZ=n(FVe,"A",{href:!0});var fOt=s(rZ);Y9r=r(fOt,"TFData2VecVisionForImageClassification"),fOt.forEach(t),K9r=r(FVe," (Data2VecVision model)"),FVe.forEach(t),Z9r=i(Eo),dl=n(Eo,"LI",{});var rP=s(dl);sCe=n(rP,"STRONG",{});var mOt=s(sCe);exr=r(mOt,"deit"),mOt.forEach(t),oxr=r(rP," \u2014 "),tZ=n(rP,"A",{href:!0});var gOt=s(tZ);rxr=r(gOt,"TFDeiTForImageClassification"),gOt.forEach(t),txr=r(rP," or "),aZ=n(rP,"A",{href:!0});var hOt=s(aZ);axr=r(hOt,"TFDeiTForImageClassificationWithTeacher"),hOt.forEach(t),nxr=r(rP," (DeiT model)"),rP.forEach(t),sxr=i(Eo),aC=n(Eo,"LI",{});var TVe=s(aC);lCe=n(TVe,"STRONG",{});var pOt=s(lCe);lxr=r(pOt,"regnet"),pOt.forEach(t),ixr=r(TVe," \u2014 "),nZ=n(TVe,"A",{href:!0});var _Ot=s(nZ);dxr=r(_Ot,"TFRegNetForImageClassification"),_Ot.forEach(t),cxr=r(TVe," (RegNet model)"),TVe.forEach(t),fxr=i(Eo),nC=n(Eo,"LI",{});var MVe=s(nC);iCe=n(MVe,"STRONG",{});var uOt=s(iCe);mxr=r(uOt,"resnet"),uOt.forEach(t),gxr=r(MVe," \u2014 "),sZ=n(MVe,"A",{href:!0});var bOt=s(sZ);hxr=r(bOt,"TFResNetForImageClassification"),bOt.forEach(t),pxr=r(MVe," (ResNet model)"),MVe.forEach(t),_xr=i(Eo),sC=n(Eo,"LI",{});var EVe=s(sC);dCe=n(EVe,"STRONG",{});var vOt=s(dCe);uxr=r(vOt,"segformer"),vOt.forEach(t),bxr=r(EVe," \u2014 "),lZ=n(EVe,"A",{href:!0});var FOt=s(lZ);vxr=r(FOt,"TFSegformerForImageClassification"),FOt.forEach(t),Fxr=r(EVe," (SegFormer model)"),EVe.forEach(t),Txr=i(Eo),lC=n(Eo,"LI",{});var CVe=s(lC);cCe=n(CVe,"STRONG",{});var TOt=s(cCe);Mxr=r(TOt,"swin"),TOt.forEach(t),Exr=r(CVe," \u2014 "),iZ=n(CVe,"A",{href:!0});var MOt=s(iZ);Cxr=r(MOt,"TFSwinForImageClassification"),MOt.forEach(t),wxr=r(CVe," (Swin Transformer model)"),CVe.forEach(t),Axr=i(Eo),iC=n(Eo,"LI",{});var wVe=s(iC);fCe=n(wVe,"STRONG",{});var EOt=s(fCe);Lxr=r(EOt,"vit"),EOt.forEach(t),yxr=r(wVe," \u2014 "),dZ=n(wVe,"A",{href:!0});var COt=s(dZ);xxr=r(COt,"TFViTForImageClassification"),COt.forEach(t),$xr=r(wVe," (ViT model)"),wVe.forEach(t),Eo.forEach(t),kxr=i(Hl),T(dC.$$.fragment,Hl),Hl.forEach(t),Ul.forEach(t),tHe=i(f),Bc=n(f,"H2",{class:!0});var pYe=s(Bc);cC=n(pYe,"A",{id:!0,class:!0,href:!0});var wOt=s(cC);mCe=n(wOt,"SPAN",{});var AOt=s(mCe);T(C$.$$.fragment,AOt),AOt.forEach(t),wOt.forEach(t),Sxr=i(pYe),gCe=n(pYe,"SPAN",{});var LOt=s(gCe);Rxr=r(LOt,"TFAutoModelForSemanticSegmentation"),LOt.forEach(t),pYe.forEach(t),aHe=i(f),ir=n(f,"DIV",{class:!0});var Jl=s(ir);T(w$.$$.fragment,Jl),Pxr=i(Jl),Ic=n(Jl,"P",{});var Xne=s(Ic);Bxr=r(Xne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),cZ=n(Xne,"A",{href:!0});var yOt=s(cZ);Ixr=r(yOt,"from_pretrained()"),yOt.forEach(t),Nxr=r(Xne," class method or the "),fZ=n(Xne,"A",{href:!0});var xOt=s(fZ);qxr=r(xOt,"from_config()"),xOt.forEach(t),jxr=r(Xne,` class
method.`),Xne.forEach(t),Dxr=i(Jl),A$=n(Jl,"P",{});var _Ye=s(A$);Gxr=r(_Ye,"This class cannot be instantiated directly using "),hCe=n(_Ye,"CODE",{});var $Ot=s(hCe);Oxr=r($Ot,"__init__()"),$Ot.forEach(t),Vxr=r(_Ye," (throws an error)."),_Ye.forEach(t),Xxr=i(Jl),Ot=n(Jl,"DIV",{class:!0});var uL=s(Ot);T(L$.$$.fragment,uL),zxr=i(uL),pCe=n(uL,"P",{});var kOt=s(pCe);Wxr=r(kOt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),kOt.forEach(t),Qxr=i(uL),Nc=n(uL,"P",{});var zne=s(Nc);Uxr=r(zne,`Note:
Loading a model from its configuration file does `),_Ce=n(zne,"STRONG",{});var SOt=s(_Ce);Hxr=r(SOt,"not"),SOt.forEach(t),Jxr=r(zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=n(zne,"A",{href:!0});var ROt=s(mZ);Yxr=r(ROt,"from_pretrained()"),ROt.forEach(t),Kxr=r(zne," to load the model weights."),zne.forEach(t),Zxr=i(uL),T(fC.$$.fragment,uL),uL.forEach(t),e$r=i(Jl),Nr=n(Jl,"DIV",{class:!0});var Yl=s(Nr);T(y$.$$.fragment,Yl),o$r=i(Yl),uCe=n(Yl,"P",{});var POt=s(uCe);r$r=r(POt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),POt.forEach(t),t$r=i(Yl),Fn=n(Yl,"P",{});var bL=s(Fn);a$r=r(bL,"The model class to instantiate is selected based on the "),bCe=n(bL,"CODE",{});var BOt=s(bCe);n$r=r(BOt,"model_type"),BOt.forEach(t),s$r=r(bL,` property of the config object (either
passed as an argument or loaded from `),vCe=n(bL,"CODE",{});var IOt=s(vCe);l$r=r(IOt,"pretrained_model_name_or_path"),IOt.forEach(t),i$r=r(bL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FCe=n(bL,"CODE",{});var NOt=s(FCe);d$r=r(NOt,"pretrained_model_name_or_path"),NOt.forEach(t),c$r=r(bL,":"),bL.forEach(t),f$r=i(Yl),x$=n(Yl,"UL",{});var uYe=s(x$);mC=n(uYe,"LI",{});var AVe=s(mC);TCe=n(AVe,"STRONG",{});var qOt=s(TCe);m$r=r(qOt,"data2vec-vision"),qOt.forEach(t),g$r=r(AVe," \u2014 "),gZ=n(AVe,"A",{href:!0});var jOt=s(gZ);h$r=r(jOt,"TFData2VecVisionForSemanticSegmentation"),jOt.forEach(t),p$r=r(AVe," (Data2VecVision model)"),AVe.forEach(t),_$r=i(uYe),gC=n(uYe,"LI",{});var LVe=s(gC);MCe=n(LVe,"STRONG",{});var DOt=s(MCe);u$r=r(DOt,"segformer"),DOt.forEach(t),b$r=r(LVe," \u2014 "),hZ=n(LVe,"A",{href:!0});var GOt=s(hZ);v$r=r(GOt,"TFSegformerForSemanticSegmentation"),GOt.forEach(t),F$r=r(LVe," (SegFormer model)"),LVe.forEach(t),uYe.forEach(t),T$r=i(Yl),T(hC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),nHe=i(f),qc=n(f,"H2",{class:!0});var bYe=s(qc);pC=n(bYe,"A",{id:!0,class:!0,href:!0});var OOt=s(pC);ECe=n(OOt,"SPAN",{});var VOt=s(ECe);T($$.$$.fragment,VOt),VOt.forEach(t),OOt.forEach(t),M$r=i(bYe),CCe=n(bYe,"SPAN",{});var XOt=s(CCe);E$r=r(XOt,"TFAutoModelForMaskedLM"),XOt.forEach(t),bYe.forEach(t),sHe=i(f),dr=n(f,"DIV",{class:!0});var Kl=s(dr);T(k$.$$.fragment,Kl),C$r=i(Kl),jc=n(Kl,"P",{});var Wne=s(jc);w$r=r(Wne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pZ=n(Wne,"A",{href:!0});var zOt=s(pZ);A$r=r(zOt,"from_pretrained()"),zOt.forEach(t),L$r=r(Wne," class method or the "),_Z=n(Wne,"A",{href:!0});var WOt=s(_Z);y$r=r(WOt,"from_config()"),WOt.forEach(t),x$r=r(Wne,` class
method.`),Wne.forEach(t),$$r=i(Kl),S$=n(Kl,"P",{});var vYe=s(S$);k$r=r(vYe,"This class cannot be instantiated directly using "),wCe=n(vYe,"CODE",{});var QOt=s(wCe);S$r=r(QOt,"__init__()"),QOt.forEach(t),R$r=r(vYe," (throws an error)."),vYe.forEach(t),P$r=i(Kl),Vt=n(Kl,"DIV",{class:!0});var vL=s(Vt);T(R$.$$.fragment,vL),B$r=i(vL),ACe=n(vL,"P",{});var UOt=s(ACe);I$r=r(UOt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),UOt.forEach(t),N$r=i(vL),Dc=n(vL,"P",{});var Qne=s(Dc);q$r=r(Qne,`Note:
Loading a model from its configuration file does `),LCe=n(Qne,"STRONG",{});var HOt=s(LCe);j$r=r(HOt,"not"),HOt.forEach(t),D$r=r(Qne,` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=n(Qne,"A",{href:!0});var JOt=s(uZ);G$r=r(JOt,"from_pretrained()"),JOt.forEach(t),O$r=r(Qne," to load the model weights."),Qne.forEach(t),V$r=i(vL),T(_C.$$.fragment,vL),vL.forEach(t),X$r=i(Kl),qr=n(Kl,"DIV",{class:!0});var Zl=s(qr);T(P$.$$.fragment,Zl),z$r=i(Zl),yCe=n(Zl,"P",{});var YOt=s(yCe);W$r=r(YOt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),YOt.forEach(t),Q$r=i(Zl),Tn=n(Zl,"P",{});var FL=s(Tn);U$r=r(FL,"The model class to instantiate is selected based on the "),xCe=n(FL,"CODE",{});var KOt=s(xCe);H$r=r(KOt,"model_type"),KOt.forEach(t),J$r=r(FL,` property of the config object (either
passed as an argument or loaded from `),$Ce=n(FL,"CODE",{});var ZOt=s($Ce);Y$r=r(ZOt,"pretrained_model_name_or_path"),ZOt.forEach(t),K$r=r(FL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kCe=n(FL,"CODE",{});var eVt=s(kCe);Z$r=r(eVt,"pretrained_model_name_or_path"),eVt.forEach(t),ekr=r(FL,":"),FL.forEach(t),okr=i(Zl),de=n(Zl,"UL",{});var he=s(de);uC=n(he,"LI",{});var yVe=s(uC);SCe=n(yVe,"STRONG",{});var oVt=s(SCe);rkr=r(oVt,"albert"),oVt.forEach(t),tkr=r(yVe," \u2014 "),bZ=n(yVe,"A",{href:!0});var rVt=s(bZ);akr=r(rVt,"TFAlbertForMaskedLM"),rVt.forEach(t),nkr=r(yVe," (ALBERT model)"),yVe.forEach(t),skr=i(he),bC=n(he,"LI",{});var xVe=s(bC);RCe=n(xVe,"STRONG",{});var tVt=s(RCe);lkr=r(tVt,"bert"),tVt.forEach(t),ikr=r(xVe," \u2014 "),vZ=n(xVe,"A",{href:!0});var aVt=s(vZ);dkr=r(aVt,"TFBertForMaskedLM"),aVt.forEach(t),ckr=r(xVe," (BERT model)"),xVe.forEach(t),fkr=i(he),vC=n(he,"LI",{});var $Ve=s(vC);PCe=n($Ve,"STRONG",{});var nVt=s(PCe);mkr=r(nVt,"camembert"),nVt.forEach(t),gkr=r($Ve," \u2014 "),FZ=n($Ve,"A",{href:!0});var sVt=s(FZ);hkr=r(sVt,"TFCamembertForMaskedLM"),sVt.forEach(t),pkr=r($Ve," (CamemBERT model)"),$Ve.forEach(t),_kr=i(he),FC=n(he,"LI",{});var kVe=s(FC);BCe=n(kVe,"STRONG",{});var lVt=s(BCe);ukr=r(lVt,"convbert"),lVt.forEach(t),bkr=r(kVe," \u2014 "),TZ=n(kVe,"A",{href:!0});var iVt=s(TZ);vkr=r(iVt,"TFConvBertForMaskedLM"),iVt.forEach(t),Fkr=r(kVe," (ConvBERT model)"),kVe.forEach(t),Tkr=i(he),TC=n(he,"LI",{});var SVe=s(TC);ICe=n(SVe,"STRONG",{});var dVt=s(ICe);Mkr=r(dVt,"deberta"),dVt.forEach(t),Ekr=r(SVe," \u2014 "),MZ=n(SVe,"A",{href:!0});var cVt=s(MZ);Ckr=r(cVt,"TFDebertaForMaskedLM"),cVt.forEach(t),wkr=r(SVe," (DeBERTa model)"),SVe.forEach(t),Akr=i(he),MC=n(he,"LI",{});var RVe=s(MC);NCe=n(RVe,"STRONG",{});var fVt=s(NCe);Lkr=r(fVt,"deberta-v2"),fVt.forEach(t),ykr=r(RVe," \u2014 "),EZ=n(RVe,"A",{href:!0});var mVt=s(EZ);xkr=r(mVt,"TFDebertaV2ForMaskedLM"),mVt.forEach(t),$kr=r(RVe," (DeBERTa-v2 model)"),RVe.forEach(t),kkr=i(he),EC=n(he,"LI",{});var PVe=s(EC);qCe=n(PVe,"STRONG",{});var gVt=s(qCe);Skr=r(gVt,"distilbert"),gVt.forEach(t),Rkr=r(PVe," \u2014 "),CZ=n(PVe,"A",{href:!0});var hVt=s(CZ);Pkr=r(hVt,"TFDistilBertForMaskedLM"),hVt.forEach(t),Bkr=r(PVe," (DistilBERT model)"),PVe.forEach(t),Ikr=i(he),CC=n(he,"LI",{});var BVe=s(CC);jCe=n(BVe,"STRONG",{});var pVt=s(jCe);Nkr=r(pVt,"electra"),pVt.forEach(t),qkr=r(BVe," \u2014 "),wZ=n(BVe,"A",{href:!0});var _Vt=s(wZ);jkr=r(_Vt,"TFElectraForMaskedLM"),_Vt.forEach(t),Dkr=r(BVe," (ELECTRA model)"),BVe.forEach(t),Gkr=i(he),wC=n(he,"LI",{});var IVe=s(wC);DCe=n(IVe,"STRONG",{});var uVt=s(DCe);Okr=r(uVt,"flaubert"),uVt.forEach(t),Vkr=r(IVe," \u2014 "),AZ=n(IVe,"A",{href:!0});var bVt=s(AZ);Xkr=r(bVt,"TFFlaubertWithLMHeadModel"),bVt.forEach(t),zkr=r(IVe," (FlauBERT model)"),IVe.forEach(t),Wkr=i(he),AC=n(he,"LI",{});var NVe=s(AC);GCe=n(NVe,"STRONG",{});var vVt=s(GCe);Qkr=r(vVt,"funnel"),vVt.forEach(t),Ukr=r(NVe," \u2014 "),LZ=n(NVe,"A",{href:!0});var FVt=s(LZ);Hkr=r(FVt,"TFFunnelForMaskedLM"),FVt.forEach(t),Jkr=r(NVe," (Funnel Transformer model)"),NVe.forEach(t),Ykr=i(he),LC=n(he,"LI",{});var qVe=s(LC);OCe=n(qVe,"STRONG",{});var TVt=s(OCe);Kkr=r(TVt,"layoutlm"),TVt.forEach(t),Zkr=r(qVe," \u2014 "),yZ=n(qVe,"A",{href:!0});var MVt=s(yZ);eSr=r(MVt,"TFLayoutLMForMaskedLM"),MVt.forEach(t),oSr=r(qVe," (LayoutLM model)"),qVe.forEach(t),rSr=i(he),yC=n(he,"LI",{});var jVe=s(yC);VCe=n(jVe,"STRONG",{});var EVt=s(VCe);tSr=r(EVt,"longformer"),EVt.forEach(t),aSr=r(jVe," \u2014 "),xZ=n(jVe,"A",{href:!0});var CVt=s(xZ);nSr=r(CVt,"TFLongformerForMaskedLM"),CVt.forEach(t),sSr=r(jVe," (Longformer model)"),jVe.forEach(t),lSr=i(he),xC=n(he,"LI",{});var DVe=s(xC);XCe=n(DVe,"STRONG",{});var wVt=s(XCe);iSr=r(wVt,"mobilebert"),wVt.forEach(t),dSr=r(DVe," \u2014 "),$Z=n(DVe,"A",{href:!0});var AVt=s($Z);cSr=r(AVt,"TFMobileBertForMaskedLM"),AVt.forEach(t),fSr=r(DVe," (MobileBERT model)"),DVe.forEach(t),mSr=i(he),$C=n(he,"LI",{});var GVe=s($C);zCe=n(GVe,"STRONG",{});var LVt=s(zCe);gSr=r(LVt,"mpnet"),LVt.forEach(t),hSr=r(GVe," \u2014 "),kZ=n(GVe,"A",{href:!0});var yVt=s(kZ);pSr=r(yVt,"TFMPNetForMaskedLM"),yVt.forEach(t),_Sr=r(GVe," (MPNet model)"),GVe.forEach(t),uSr=i(he),kC=n(he,"LI",{});var OVe=s(kC);WCe=n(OVe,"STRONG",{});var xVt=s(WCe);bSr=r(xVt,"rembert"),xVt.forEach(t),vSr=r(OVe," \u2014 "),SZ=n(OVe,"A",{href:!0});var $Vt=s(SZ);FSr=r($Vt,"TFRemBertForMaskedLM"),$Vt.forEach(t),TSr=r(OVe," (RemBERT model)"),OVe.forEach(t),MSr=i(he),SC=n(he,"LI",{});var VVe=s(SC);QCe=n(VVe,"STRONG",{});var kVt=s(QCe);ESr=r(kVt,"roberta"),kVt.forEach(t),CSr=r(VVe," \u2014 "),RZ=n(VVe,"A",{href:!0});var SVt=s(RZ);wSr=r(SVt,"TFRobertaForMaskedLM"),SVt.forEach(t),ASr=r(VVe," (RoBERTa model)"),VVe.forEach(t),LSr=i(he),RC=n(he,"LI",{});var XVe=s(RC);UCe=n(XVe,"STRONG",{});var RVt=s(UCe);ySr=r(RVt,"roformer"),RVt.forEach(t),xSr=r(XVe," \u2014 "),PZ=n(XVe,"A",{href:!0});var PVt=s(PZ);$Sr=r(PVt,"TFRoFormerForMaskedLM"),PVt.forEach(t),kSr=r(XVe," (RoFormer model)"),XVe.forEach(t),SSr=i(he),PC=n(he,"LI",{});var zVe=s(PC);HCe=n(zVe,"STRONG",{});var BVt=s(HCe);RSr=r(BVt,"tapas"),BVt.forEach(t),PSr=r(zVe," \u2014 "),BZ=n(zVe,"A",{href:!0});var IVt=s(BZ);BSr=r(IVt,"TFTapasForMaskedLM"),IVt.forEach(t),ISr=r(zVe," (TAPAS model)"),zVe.forEach(t),NSr=i(he),BC=n(he,"LI",{});var WVe=s(BC);JCe=n(WVe,"STRONG",{});var NVt=s(JCe);qSr=r(NVt,"xlm"),NVt.forEach(t),jSr=r(WVe," \u2014 "),IZ=n(WVe,"A",{href:!0});var qVt=s(IZ);DSr=r(qVt,"TFXLMWithLMHeadModel"),qVt.forEach(t),GSr=r(WVe," (XLM model)"),WVe.forEach(t),OSr=i(he),IC=n(he,"LI",{});var QVe=s(IC);YCe=n(QVe,"STRONG",{});var jVt=s(YCe);VSr=r(jVt,"xlm-roberta"),jVt.forEach(t),XSr=r(QVe," \u2014 "),NZ=n(QVe,"A",{href:!0});var DVt=s(NZ);zSr=r(DVt,"TFXLMRobertaForMaskedLM"),DVt.forEach(t),WSr=r(QVe," (XLM-RoBERTa model)"),QVe.forEach(t),he.forEach(t),QSr=i(Zl),T(NC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),lHe=i(f),Gc=n(f,"H2",{class:!0});var FYe=s(Gc);qC=n(FYe,"A",{id:!0,class:!0,href:!0});var GVt=s(qC);KCe=n(GVt,"SPAN",{});var OVt=s(KCe);T(B$.$$.fragment,OVt),OVt.forEach(t),GVt.forEach(t),USr=i(FYe),ZCe=n(FYe,"SPAN",{});var VVt=s(ZCe);HSr=r(VVt,"TFAutoModelForSeq2SeqLM"),VVt.forEach(t),FYe.forEach(t),iHe=i(f),cr=n(f,"DIV",{class:!0});var ei=s(cr);T(I$.$$.fragment,ei),JSr=i(ei),Oc=n(ei,"P",{});var Une=s(Oc);YSr=r(Une,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),qZ=n(Une,"A",{href:!0});var XVt=s(qZ);KSr=r(XVt,"from_pretrained()"),XVt.forEach(t),ZSr=r(Une," class method or the "),jZ=n(Une,"A",{href:!0});var zVt=s(jZ);eRr=r(zVt,"from_config()"),zVt.forEach(t),oRr=r(Une,` class
method.`),Une.forEach(t),rRr=i(ei),N$=n(ei,"P",{});var TYe=s(N$);tRr=r(TYe,"This class cannot be instantiated directly using "),e3e=n(TYe,"CODE",{});var WVt=s(e3e);aRr=r(WVt,"__init__()"),WVt.forEach(t),nRr=r(TYe," (throws an error)."),TYe.forEach(t),sRr=i(ei),Xt=n(ei,"DIV",{class:!0});var TL=s(Xt);T(q$.$$.fragment,TL),lRr=i(TL),o3e=n(TL,"P",{});var QVt=s(o3e);iRr=r(QVt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),QVt.forEach(t),dRr=i(TL),Vc=n(TL,"P",{});var Hne=s(Vc);cRr=r(Hne,`Note:
Loading a model from its configuration file does `),r3e=n(Hne,"STRONG",{});var UVt=s(r3e);fRr=r(UVt,"not"),UVt.forEach(t),mRr=r(Hne,` load the model weights. It only affects the
model\u2019s configuration. Use `),DZ=n(Hne,"A",{href:!0});var HVt=s(DZ);gRr=r(HVt,"from_pretrained()"),HVt.forEach(t),hRr=r(Hne," to load the model weights."),Hne.forEach(t),pRr=i(TL),T(jC.$$.fragment,TL),TL.forEach(t),_Rr=i(ei),jr=n(ei,"DIV",{class:!0});var oi=s(jr);T(j$.$$.fragment,oi),uRr=i(oi),t3e=n(oi,"P",{});var JVt=s(t3e);bRr=r(JVt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),JVt.forEach(t),vRr=i(oi),Mn=n(oi,"P",{});var ML=s(Mn);FRr=r(ML,"The model class to instantiate is selected based on the "),a3e=n(ML,"CODE",{});var YVt=s(a3e);TRr=r(YVt,"model_type"),YVt.forEach(t),MRr=r(ML,` property of the config object (either
passed as an argument or loaded from `),n3e=n(ML,"CODE",{});var KVt=s(n3e);ERr=r(KVt,"pretrained_model_name_or_path"),KVt.forEach(t),CRr=r(ML,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s3e=n(ML,"CODE",{});var ZVt=s(s3e);wRr=r(ZVt,"pretrained_model_name_or_path"),ZVt.forEach(t),ARr=r(ML,":"),ML.forEach(t),LRr=i(oi),ye=n(oi,"UL",{});var Ie=s(ye);DC=n(Ie,"LI",{});var UVe=s(DC);l3e=n(UVe,"STRONG",{});var eXt=s(l3e);yRr=r(eXt,"bart"),eXt.forEach(t),xRr=r(UVe," \u2014 "),GZ=n(UVe,"A",{href:!0});var oXt=s(GZ);$Rr=r(oXt,"TFBartForConditionalGeneration"),oXt.forEach(t),kRr=r(UVe," (BART model)"),UVe.forEach(t),SRr=i(Ie),GC=n(Ie,"LI",{});var HVe=s(GC);i3e=n(HVe,"STRONG",{});var rXt=s(i3e);RRr=r(rXt,"blenderbot"),rXt.forEach(t),PRr=r(HVe," \u2014 "),OZ=n(HVe,"A",{href:!0});var tXt=s(OZ);BRr=r(tXt,"TFBlenderbotForConditionalGeneration"),tXt.forEach(t),IRr=r(HVe," (Blenderbot model)"),HVe.forEach(t),NRr=i(Ie),OC=n(Ie,"LI",{});var JVe=s(OC);d3e=n(JVe,"STRONG",{});var aXt=s(d3e);qRr=r(aXt,"blenderbot-small"),aXt.forEach(t),jRr=r(JVe," \u2014 "),VZ=n(JVe,"A",{href:!0});var nXt=s(VZ);DRr=r(nXt,"TFBlenderbotSmallForConditionalGeneration"),nXt.forEach(t),GRr=r(JVe," (BlenderbotSmall model)"),JVe.forEach(t),ORr=i(Ie),VC=n(Ie,"LI",{});var YVe=s(VC);c3e=n(YVe,"STRONG",{});var sXt=s(c3e);VRr=r(sXt,"encoder-decoder"),sXt.forEach(t),XRr=r(YVe," \u2014 "),XZ=n(YVe,"A",{href:!0});var lXt=s(XZ);zRr=r(lXt,"TFEncoderDecoderModel"),lXt.forEach(t),WRr=r(YVe," (Encoder decoder model)"),YVe.forEach(t),QRr=i(Ie),XC=n(Ie,"LI",{});var KVe=s(XC);f3e=n(KVe,"STRONG",{});var iXt=s(f3e);URr=r(iXt,"led"),iXt.forEach(t),HRr=r(KVe," \u2014 "),zZ=n(KVe,"A",{href:!0});var dXt=s(zZ);JRr=r(dXt,"TFLEDForConditionalGeneration"),dXt.forEach(t),YRr=r(KVe," (LED model)"),KVe.forEach(t),KRr=i(Ie),zC=n(Ie,"LI",{});var ZVe=s(zC);m3e=n(ZVe,"STRONG",{});var cXt=s(m3e);ZRr=r(cXt,"marian"),cXt.forEach(t),ePr=r(ZVe," \u2014 "),WZ=n(ZVe,"A",{href:!0});var fXt=s(WZ);oPr=r(fXt,"TFMarianMTModel"),fXt.forEach(t),rPr=r(ZVe," (Marian model)"),ZVe.forEach(t),tPr=i(Ie),WC=n(Ie,"LI",{});var eXe=s(WC);g3e=n(eXe,"STRONG",{});var mXt=s(g3e);aPr=r(mXt,"mbart"),mXt.forEach(t),nPr=r(eXe," \u2014 "),QZ=n(eXe,"A",{href:!0});var gXt=s(QZ);sPr=r(gXt,"TFMBartForConditionalGeneration"),gXt.forEach(t),lPr=r(eXe," (mBART model)"),eXe.forEach(t),iPr=i(Ie),QC=n(Ie,"LI",{});var oXe=s(QC);h3e=n(oXe,"STRONG",{});var hXt=s(h3e);dPr=r(hXt,"mt5"),hXt.forEach(t),cPr=r(oXe," \u2014 "),UZ=n(oXe,"A",{href:!0});var pXt=s(UZ);fPr=r(pXt,"TFMT5ForConditionalGeneration"),pXt.forEach(t),mPr=r(oXe," (MT5 model)"),oXe.forEach(t),gPr=i(Ie),UC=n(Ie,"LI",{});var rXe=s(UC);p3e=n(rXe,"STRONG",{});var _Xt=s(p3e);hPr=r(_Xt,"pegasus"),_Xt.forEach(t),pPr=r(rXe," \u2014 "),HZ=n(rXe,"A",{href:!0});var uXt=s(HZ);_Pr=r(uXt,"TFPegasusForConditionalGeneration"),uXt.forEach(t),uPr=r(rXe," (Pegasus model)"),rXe.forEach(t),bPr=i(Ie),HC=n(Ie,"LI",{});var tXe=s(HC);_3e=n(tXe,"STRONG",{});var bXt=s(_3e);vPr=r(bXt,"t5"),bXt.forEach(t),FPr=r(tXe," \u2014 "),JZ=n(tXe,"A",{href:!0});var vXt=s(JZ);TPr=r(vXt,"TFT5ForConditionalGeneration"),vXt.forEach(t),MPr=r(tXe," (T5 model)"),tXe.forEach(t),Ie.forEach(t),EPr=i(oi),T(JC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),dHe=i(f),Xc=n(f,"H2",{class:!0});var MYe=s(Xc);YC=n(MYe,"A",{id:!0,class:!0,href:!0});var FXt=s(YC);u3e=n(FXt,"SPAN",{});var TXt=s(u3e);T(D$.$$.fragment,TXt),TXt.forEach(t),FXt.forEach(t),CPr=i(MYe),b3e=n(MYe,"SPAN",{});var MXt=s(b3e);wPr=r(MXt,"TFAutoModelForSequenceClassification"),MXt.forEach(t),MYe.forEach(t),cHe=i(f),fr=n(f,"DIV",{class:!0});var ri=s(fr);T(G$.$$.fragment,ri),APr=i(ri),zc=n(ri,"P",{});var Jne=s(zc);LPr=r(Jne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YZ=n(Jne,"A",{href:!0});var EXt=s(YZ);yPr=r(EXt,"from_pretrained()"),EXt.forEach(t),xPr=r(Jne," class method or the "),KZ=n(Jne,"A",{href:!0});var CXt=s(KZ);$Pr=r(CXt,"from_config()"),CXt.forEach(t),kPr=r(Jne,` class
method.`),Jne.forEach(t),SPr=i(ri),O$=n(ri,"P",{});var EYe=s(O$);RPr=r(EYe,"This class cannot be instantiated directly using "),v3e=n(EYe,"CODE",{});var wXt=s(v3e);PPr=r(wXt,"__init__()"),wXt.forEach(t),BPr=r(EYe," (throws an error)."),EYe.forEach(t),IPr=i(ri),zt=n(ri,"DIV",{class:!0});var EL=s(zt);T(V$.$$.fragment,EL),NPr=i(EL),F3e=n(EL,"P",{});var AXt=s(F3e);qPr=r(AXt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),AXt.forEach(t),jPr=i(EL),Wc=n(EL,"P",{});var Yne=s(Wc);DPr=r(Yne,`Note:
Loading a model from its configuration file does `),T3e=n(Yne,"STRONG",{});var LXt=s(T3e);GPr=r(LXt,"not"),LXt.forEach(t),OPr=r(Yne,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZZ=n(Yne,"A",{href:!0});var yXt=s(ZZ);VPr=r(yXt,"from_pretrained()"),yXt.forEach(t),XPr=r(Yne," to load the model weights."),Yne.forEach(t),zPr=i(EL),T(KC.$$.fragment,EL),EL.forEach(t),WPr=i(ri),Dr=n(ri,"DIV",{class:!0});var ti=s(Dr);T(X$.$$.fragment,ti),QPr=i(ti),M3e=n(ti,"P",{});var xXt=s(M3e);UPr=r(xXt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),xXt.forEach(t),HPr=i(ti),En=n(ti,"P",{});var CL=s(En);JPr=r(CL,"The model class to instantiate is selected based on the "),E3e=n(CL,"CODE",{});var $Xt=s(E3e);YPr=r($Xt,"model_type"),$Xt.forEach(t),KPr=r(CL,` property of the config object (either
passed as an argument or loaded from `),C3e=n(CL,"CODE",{});var kXt=s(C3e);ZPr=r(kXt,"pretrained_model_name_or_path"),kXt.forEach(t),eBr=r(CL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w3e=n(CL,"CODE",{});var SXt=s(w3e);oBr=r(SXt,"pretrained_model_name_or_path"),SXt.forEach(t),rBr=r(CL,":"),CL.forEach(t),tBr=i(ti),te=n(ti,"UL",{});var ne=s(te);ZC=n(ne,"LI",{});var aXe=s(ZC);A3e=n(aXe,"STRONG",{});var RXt=s(A3e);aBr=r(RXt,"albert"),RXt.forEach(t),nBr=r(aXe," \u2014 "),eee=n(aXe,"A",{href:!0});var PXt=s(eee);sBr=r(PXt,"TFAlbertForSequenceClassification"),PXt.forEach(t),lBr=r(aXe," (ALBERT model)"),aXe.forEach(t),iBr=i(ne),e3=n(ne,"LI",{});var nXe=s(e3);L3e=n(nXe,"STRONG",{});var BXt=s(L3e);dBr=r(BXt,"bert"),BXt.forEach(t),cBr=r(nXe," \u2014 "),oee=n(nXe,"A",{href:!0});var IXt=s(oee);fBr=r(IXt,"TFBertForSequenceClassification"),IXt.forEach(t),mBr=r(nXe," (BERT model)"),nXe.forEach(t),gBr=i(ne),o3=n(ne,"LI",{});var sXe=s(o3);y3e=n(sXe,"STRONG",{});var NXt=s(y3e);hBr=r(NXt,"camembert"),NXt.forEach(t),pBr=r(sXe," \u2014 "),ree=n(sXe,"A",{href:!0});var qXt=s(ree);_Br=r(qXt,"TFCamembertForSequenceClassification"),qXt.forEach(t),uBr=r(sXe," (CamemBERT model)"),sXe.forEach(t),bBr=i(ne),r3=n(ne,"LI",{});var lXe=s(r3);x3e=n(lXe,"STRONG",{});var jXt=s(x3e);vBr=r(jXt,"convbert"),jXt.forEach(t),FBr=r(lXe," \u2014 "),tee=n(lXe,"A",{href:!0});var DXt=s(tee);TBr=r(DXt,"TFConvBertForSequenceClassification"),DXt.forEach(t),MBr=r(lXe," (ConvBERT model)"),lXe.forEach(t),EBr=i(ne),t3=n(ne,"LI",{});var iXe=s(t3);$3e=n(iXe,"STRONG",{});var GXt=s($3e);CBr=r(GXt,"ctrl"),GXt.forEach(t),wBr=r(iXe," \u2014 "),aee=n(iXe,"A",{href:!0});var OXt=s(aee);ABr=r(OXt,"TFCTRLForSequenceClassification"),OXt.forEach(t),LBr=r(iXe," (CTRL model)"),iXe.forEach(t),yBr=i(ne),a3=n(ne,"LI",{});var dXe=s(a3);k3e=n(dXe,"STRONG",{});var VXt=s(k3e);xBr=r(VXt,"deberta"),VXt.forEach(t),$Br=r(dXe," \u2014 "),nee=n(dXe,"A",{href:!0});var XXt=s(nee);kBr=r(XXt,"TFDebertaForSequenceClassification"),XXt.forEach(t),SBr=r(dXe," (DeBERTa model)"),dXe.forEach(t),RBr=i(ne),n3=n(ne,"LI",{});var cXe=s(n3);S3e=n(cXe,"STRONG",{});var zXt=s(S3e);PBr=r(zXt,"deberta-v2"),zXt.forEach(t),BBr=r(cXe," \u2014 "),see=n(cXe,"A",{href:!0});var WXt=s(see);IBr=r(WXt,"TFDebertaV2ForSequenceClassification"),WXt.forEach(t),NBr=r(cXe," (DeBERTa-v2 model)"),cXe.forEach(t),qBr=i(ne),s3=n(ne,"LI",{});var fXe=s(s3);R3e=n(fXe,"STRONG",{});var QXt=s(R3e);jBr=r(QXt,"distilbert"),QXt.forEach(t),DBr=r(fXe," \u2014 "),lee=n(fXe,"A",{href:!0});var UXt=s(lee);GBr=r(UXt,"TFDistilBertForSequenceClassification"),UXt.forEach(t),OBr=r(fXe," (DistilBERT model)"),fXe.forEach(t),VBr=i(ne),l3=n(ne,"LI",{});var mXe=s(l3);P3e=n(mXe,"STRONG",{});var HXt=s(P3e);XBr=r(HXt,"electra"),HXt.forEach(t),zBr=r(mXe," \u2014 "),iee=n(mXe,"A",{href:!0});var JXt=s(iee);WBr=r(JXt,"TFElectraForSequenceClassification"),JXt.forEach(t),QBr=r(mXe," (ELECTRA model)"),mXe.forEach(t),UBr=i(ne),i3=n(ne,"LI",{});var gXe=s(i3);B3e=n(gXe,"STRONG",{});var YXt=s(B3e);HBr=r(YXt,"flaubert"),YXt.forEach(t),JBr=r(gXe," \u2014 "),dee=n(gXe,"A",{href:!0});var KXt=s(dee);YBr=r(KXt,"TFFlaubertForSequenceClassification"),KXt.forEach(t),KBr=r(gXe," (FlauBERT model)"),gXe.forEach(t),ZBr=i(ne),d3=n(ne,"LI",{});var hXe=s(d3);I3e=n(hXe,"STRONG",{});var ZXt=s(I3e);eIr=r(ZXt,"funnel"),ZXt.forEach(t),oIr=r(hXe," \u2014 "),cee=n(hXe,"A",{href:!0});var ezt=s(cee);rIr=r(ezt,"TFFunnelForSequenceClassification"),ezt.forEach(t),tIr=r(hXe," (Funnel Transformer model)"),hXe.forEach(t),aIr=i(ne),c3=n(ne,"LI",{});var pXe=s(c3);N3e=n(pXe,"STRONG",{});var ozt=s(N3e);nIr=r(ozt,"gpt2"),ozt.forEach(t),sIr=r(pXe," \u2014 "),fee=n(pXe,"A",{href:!0});var rzt=s(fee);lIr=r(rzt,"TFGPT2ForSequenceClassification"),rzt.forEach(t),iIr=r(pXe," (OpenAI GPT-2 model)"),pXe.forEach(t),dIr=i(ne),f3=n(ne,"LI",{});var _Xe=s(f3);q3e=n(_Xe,"STRONG",{});var tzt=s(q3e);cIr=r(tzt,"gptj"),tzt.forEach(t),fIr=r(_Xe," \u2014 "),mee=n(_Xe,"A",{href:!0});var azt=s(mee);mIr=r(azt,"TFGPTJForSequenceClassification"),azt.forEach(t),gIr=r(_Xe," (GPT-J model)"),_Xe.forEach(t),hIr=i(ne),m3=n(ne,"LI",{});var uXe=s(m3);j3e=n(uXe,"STRONG",{});var nzt=s(j3e);pIr=r(nzt,"layoutlm"),nzt.forEach(t),_Ir=r(uXe," \u2014 "),gee=n(uXe,"A",{href:!0});var szt=s(gee);uIr=r(szt,"TFLayoutLMForSequenceClassification"),szt.forEach(t),bIr=r(uXe," (LayoutLM model)"),uXe.forEach(t),vIr=i(ne),g3=n(ne,"LI",{});var bXe=s(g3);D3e=n(bXe,"STRONG",{});var lzt=s(D3e);FIr=r(lzt,"longformer"),lzt.forEach(t),TIr=r(bXe," \u2014 "),hee=n(bXe,"A",{href:!0});var izt=s(hee);MIr=r(izt,"TFLongformerForSequenceClassification"),izt.forEach(t),EIr=r(bXe," (Longformer model)"),bXe.forEach(t),CIr=i(ne),h3=n(ne,"LI",{});var vXe=s(h3);G3e=n(vXe,"STRONG",{});var dzt=s(G3e);wIr=r(dzt,"mobilebert"),dzt.forEach(t),AIr=r(vXe," \u2014 "),pee=n(vXe,"A",{href:!0});var czt=s(pee);LIr=r(czt,"TFMobileBertForSequenceClassification"),czt.forEach(t),yIr=r(vXe," (MobileBERT model)"),vXe.forEach(t),xIr=i(ne),p3=n(ne,"LI",{});var FXe=s(p3);O3e=n(FXe,"STRONG",{});var fzt=s(O3e);$Ir=r(fzt,"mpnet"),fzt.forEach(t),kIr=r(FXe," \u2014 "),_ee=n(FXe,"A",{href:!0});var mzt=s(_ee);SIr=r(mzt,"TFMPNetForSequenceClassification"),mzt.forEach(t),RIr=r(FXe," (MPNet model)"),FXe.forEach(t),PIr=i(ne),_3=n(ne,"LI",{});var TXe=s(_3);V3e=n(TXe,"STRONG",{});var gzt=s(V3e);BIr=r(gzt,"openai-gpt"),gzt.forEach(t),IIr=r(TXe," \u2014 "),uee=n(TXe,"A",{href:!0});var hzt=s(uee);NIr=r(hzt,"TFOpenAIGPTForSequenceClassification"),hzt.forEach(t),qIr=r(TXe," (OpenAI GPT model)"),TXe.forEach(t),jIr=i(ne),u3=n(ne,"LI",{});var MXe=s(u3);X3e=n(MXe,"STRONG",{});var pzt=s(X3e);DIr=r(pzt,"rembert"),pzt.forEach(t),GIr=r(MXe," \u2014 "),bee=n(MXe,"A",{href:!0});var _zt=s(bee);OIr=r(_zt,"TFRemBertForSequenceClassification"),_zt.forEach(t),VIr=r(MXe," (RemBERT model)"),MXe.forEach(t),XIr=i(ne),b3=n(ne,"LI",{});var EXe=s(b3);z3e=n(EXe,"STRONG",{});var uzt=s(z3e);zIr=r(uzt,"roberta"),uzt.forEach(t),WIr=r(EXe," \u2014 "),vee=n(EXe,"A",{href:!0});var bzt=s(vee);QIr=r(bzt,"TFRobertaForSequenceClassification"),bzt.forEach(t),UIr=r(EXe," (RoBERTa model)"),EXe.forEach(t),HIr=i(ne),v3=n(ne,"LI",{});var CXe=s(v3);W3e=n(CXe,"STRONG",{});var vzt=s(W3e);JIr=r(vzt,"roformer"),vzt.forEach(t),YIr=r(CXe," \u2014 "),Fee=n(CXe,"A",{href:!0});var Fzt=s(Fee);KIr=r(Fzt,"TFRoFormerForSequenceClassification"),Fzt.forEach(t),ZIr=r(CXe," (RoFormer model)"),CXe.forEach(t),eNr=i(ne),F3=n(ne,"LI",{});var wXe=s(F3);Q3e=n(wXe,"STRONG",{});var Tzt=s(Q3e);oNr=r(Tzt,"tapas"),Tzt.forEach(t),rNr=r(wXe," \u2014 "),Tee=n(wXe,"A",{href:!0});var Mzt=s(Tee);tNr=r(Mzt,"TFTapasForSequenceClassification"),Mzt.forEach(t),aNr=r(wXe," (TAPAS model)"),wXe.forEach(t),nNr=i(ne),T3=n(ne,"LI",{});var AXe=s(T3);U3e=n(AXe,"STRONG",{});var Ezt=s(U3e);sNr=r(Ezt,"transfo-xl"),Ezt.forEach(t),lNr=r(AXe," \u2014 "),Mee=n(AXe,"A",{href:!0});var Czt=s(Mee);iNr=r(Czt,"TFTransfoXLForSequenceClassification"),Czt.forEach(t),dNr=r(AXe," (Transformer-XL model)"),AXe.forEach(t),cNr=i(ne),M3=n(ne,"LI",{});var LXe=s(M3);H3e=n(LXe,"STRONG",{});var wzt=s(H3e);fNr=r(wzt,"xlm"),wzt.forEach(t),mNr=r(LXe," \u2014 "),Eee=n(LXe,"A",{href:!0});var Azt=s(Eee);gNr=r(Azt,"TFXLMForSequenceClassification"),Azt.forEach(t),hNr=r(LXe," (XLM model)"),LXe.forEach(t),pNr=i(ne),E3=n(ne,"LI",{});var yXe=s(E3);J3e=n(yXe,"STRONG",{});var Lzt=s(J3e);_Nr=r(Lzt,"xlm-roberta"),Lzt.forEach(t),uNr=r(yXe," \u2014 "),Cee=n(yXe,"A",{href:!0});var yzt=s(Cee);bNr=r(yzt,"TFXLMRobertaForSequenceClassification"),yzt.forEach(t),vNr=r(yXe," (XLM-RoBERTa model)"),yXe.forEach(t),FNr=i(ne),C3=n(ne,"LI",{});var xXe=s(C3);Y3e=n(xXe,"STRONG",{});var xzt=s(Y3e);TNr=r(xzt,"xlnet"),xzt.forEach(t),MNr=r(xXe," \u2014 "),wee=n(xXe,"A",{href:!0});var $zt=s(wee);ENr=r($zt,"TFXLNetForSequenceClassification"),$zt.forEach(t),CNr=r(xXe," (XLNet model)"),xXe.forEach(t),ne.forEach(t),wNr=i(ti),T(w3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),fHe=i(f),Qc=n(f,"H2",{class:!0});var CYe=s(Qc);A3=n(CYe,"A",{id:!0,class:!0,href:!0});var kzt=s(A3);K3e=n(kzt,"SPAN",{});var Szt=s(K3e);T(z$.$$.fragment,Szt),Szt.forEach(t),kzt.forEach(t),ANr=i(CYe),Z3e=n(CYe,"SPAN",{});var Rzt=s(Z3e);LNr=r(Rzt,"TFAutoModelForMultipleChoice"),Rzt.forEach(t),CYe.forEach(t),mHe=i(f),mr=n(f,"DIV",{class:!0});var ai=s(mr);T(W$.$$.fragment,ai),yNr=i(ai),Uc=n(ai,"P",{});var Kne=s(Uc);xNr=r(Kne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Aee=n(Kne,"A",{href:!0});var Pzt=s(Aee);$Nr=r(Pzt,"from_pretrained()"),Pzt.forEach(t),kNr=r(Kne," class method or the "),Lee=n(Kne,"A",{href:!0});var Bzt=s(Lee);SNr=r(Bzt,"from_config()"),Bzt.forEach(t),RNr=r(Kne,` class
method.`),Kne.forEach(t),PNr=i(ai),Q$=n(ai,"P",{});var wYe=s(Q$);BNr=r(wYe,"This class cannot be instantiated directly using "),e5e=n(wYe,"CODE",{});var Izt=s(e5e);INr=r(Izt,"__init__()"),Izt.forEach(t),NNr=r(wYe," (throws an error)."),wYe.forEach(t),qNr=i(ai),Wt=n(ai,"DIV",{class:!0});var wL=s(Wt);T(U$.$$.fragment,wL),jNr=i(wL),o5e=n(wL,"P",{});var Nzt=s(o5e);DNr=r(Nzt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Nzt.forEach(t),GNr=i(wL),Hc=n(wL,"P",{});var Zne=s(Hc);ONr=r(Zne,`Note:
Loading a model from its configuration file does `),r5e=n(Zne,"STRONG",{});var qzt=s(r5e);VNr=r(qzt,"not"),qzt.forEach(t),XNr=r(Zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=n(Zne,"A",{href:!0});var jzt=s(yee);zNr=r(jzt,"from_pretrained()"),jzt.forEach(t),WNr=r(Zne," to load the model weights."),Zne.forEach(t),QNr=i(wL),T(L3.$$.fragment,wL),wL.forEach(t),UNr=i(ai),Gr=n(ai,"DIV",{class:!0});var ni=s(Gr);T(H$.$$.fragment,ni),HNr=i(ni),t5e=n(ni,"P",{});var Dzt=s(t5e);JNr=r(Dzt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Dzt.forEach(t),YNr=i(ni),Cn=n(ni,"P",{});var AL=s(Cn);KNr=r(AL,"The model class to instantiate is selected based on the "),a5e=n(AL,"CODE",{});var Gzt=s(a5e);ZNr=r(Gzt,"model_type"),Gzt.forEach(t),eqr=r(AL,` property of the config object (either
passed as an argument or loaded from `),n5e=n(AL,"CODE",{});var Ozt=s(n5e);oqr=r(Ozt,"pretrained_model_name_or_path"),Ozt.forEach(t),rqr=r(AL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=n(AL,"CODE",{});var Vzt=s(s5e);tqr=r(Vzt,"pretrained_model_name_or_path"),Vzt.forEach(t),aqr=r(AL,":"),AL.forEach(t),nqr=i(ni),ve=n(ni,"UL",{});var Te=s(ve);y3=n(Te,"LI",{});var $Xe=s(y3);l5e=n($Xe,"STRONG",{});var Xzt=s(l5e);sqr=r(Xzt,"albert"),Xzt.forEach(t),lqr=r($Xe," \u2014 "),xee=n($Xe,"A",{href:!0});var zzt=s(xee);iqr=r(zzt,"TFAlbertForMultipleChoice"),zzt.forEach(t),dqr=r($Xe," (ALBERT model)"),$Xe.forEach(t),cqr=i(Te),x3=n(Te,"LI",{});var kXe=s(x3);i5e=n(kXe,"STRONG",{});var Wzt=s(i5e);fqr=r(Wzt,"bert"),Wzt.forEach(t),mqr=r(kXe," \u2014 "),$ee=n(kXe,"A",{href:!0});var Qzt=s($ee);gqr=r(Qzt,"TFBertForMultipleChoice"),Qzt.forEach(t),hqr=r(kXe," (BERT model)"),kXe.forEach(t),pqr=i(Te),$3=n(Te,"LI",{});var SXe=s($3);d5e=n(SXe,"STRONG",{});var Uzt=s(d5e);_qr=r(Uzt,"camembert"),Uzt.forEach(t),uqr=r(SXe," \u2014 "),kee=n(SXe,"A",{href:!0});var Hzt=s(kee);bqr=r(Hzt,"TFCamembertForMultipleChoice"),Hzt.forEach(t),vqr=r(SXe," (CamemBERT model)"),SXe.forEach(t),Fqr=i(Te),k3=n(Te,"LI",{});var RXe=s(k3);c5e=n(RXe,"STRONG",{});var Jzt=s(c5e);Tqr=r(Jzt,"convbert"),Jzt.forEach(t),Mqr=r(RXe," \u2014 "),See=n(RXe,"A",{href:!0});var Yzt=s(See);Eqr=r(Yzt,"TFConvBertForMultipleChoice"),Yzt.forEach(t),Cqr=r(RXe," (ConvBERT model)"),RXe.forEach(t),wqr=i(Te),S3=n(Te,"LI",{});var PXe=s(S3);f5e=n(PXe,"STRONG",{});var Kzt=s(f5e);Aqr=r(Kzt,"distilbert"),Kzt.forEach(t),Lqr=r(PXe," \u2014 "),Ree=n(PXe,"A",{href:!0});var Zzt=s(Ree);yqr=r(Zzt,"TFDistilBertForMultipleChoice"),Zzt.forEach(t),xqr=r(PXe," (DistilBERT model)"),PXe.forEach(t),$qr=i(Te),R3=n(Te,"LI",{});var BXe=s(R3);m5e=n(BXe,"STRONG",{});var eWt=s(m5e);kqr=r(eWt,"electra"),eWt.forEach(t),Sqr=r(BXe," \u2014 "),Pee=n(BXe,"A",{href:!0});var oWt=s(Pee);Rqr=r(oWt,"TFElectraForMultipleChoice"),oWt.forEach(t),Pqr=r(BXe," (ELECTRA model)"),BXe.forEach(t),Bqr=i(Te),P3=n(Te,"LI",{});var IXe=s(P3);g5e=n(IXe,"STRONG",{});var rWt=s(g5e);Iqr=r(rWt,"flaubert"),rWt.forEach(t),Nqr=r(IXe," \u2014 "),Bee=n(IXe,"A",{href:!0});var tWt=s(Bee);qqr=r(tWt,"TFFlaubertForMultipleChoice"),tWt.forEach(t),jqr=r(IXe," (FlauBERT model)"),IXe.forEach(t),Dqr=i(Te),B3=n(Te,"LI",{});var NXe=s(B3);h5e=n(NXe,"STRONG",{});var aWt=s(h5e);Gqr=r(aWt,"funnel"),aWt.forEach(t),Oqr=r(NXe," \u2014 "),Iee=n(NXe,"A",{href:!0});var nWt=s(Iee);Vqr=r(nWt,"TFFunnelForMultipleChoice"),nWt.forEach(t),Xqr=r(NXe," (Funnel Transformer model)"),NXe.forEach(t),zqr=i(Te),I3=n(Te,"LI",{});var qXe=s(I3);p5e=n(qXe,"STRONG",{});var sWt=s(p5e);Wqr=r(sWt,"longformer"),sWt.forEach(t),Qqr=r(qXe," \u2014 "),Nee=n(qXe,"A",{href:!0});var lWt=s(Nee);Uqr=r(lWt,"TFLongformerForMultipleChoice"),lWt.forEach(t),Hqr=r(qXe," (Longformer model)"),qXe.forEach(t),Jqr=i(Te),N3=n(Te,"LI",{});var jXe=s(N3);_5e=n(jXe,"STRONG",{});var iWt=s(_5e);Yqr=r(iWt,"mobilebert"),iWt.forEach(t),Kqr=r(jXe," \u2014 "),qee=n(jXe,"A",{href:!0});var dWt=s(qee);Zqr=r(dWt,"TFMobileBertForMultipleChoice"),dWt.forEach(t),ejr=r(jXe," (MobileBERT model)"),jXe.forEach(t),ojr=i(Te),q3=n(Te,"LI",{});var DXe=s(q3);u5e=n(DXe,"STRONG",{});var cWt=s(u5e);rjr=r(cWt,"mpnet"),cWt.forEach(t),tjr=r(DXe," \u2014 "),jee=n(DXe,"A",{href:!0});var fWt=s(jee);ajr=r(fWt,"TFMPNetForMultipleChoice"),fWt.forEach(t),njr=r(DXe," (MPNet model)"),DXe.forEach(t),sjr=i(Te),j3=n(Te,"LI",{});var GXe=s(j3);b5e=n(GXe,"STRONG",{});var mWt=s(b5e);ljr=r(mWt,"rembert"),mWt.forEach(t),ijr=r(GXe," \u2014 "),Dee=n(GXe,"A",{href:!0});var gWt=s(Dee);djr=r(gWt,"TFRemBertForMultipleChoice"),gWt.forEach(t),cjr=r(GXe," (RemBERT model)"),GXe.forEach(t),fjr=i(Te),D3=n(Te,"LI",{});var OXe=s(D3);v5e=n(OXe,"STRONG",{});var hWt=s(v5e);mjr=r(hWt,"roberta"),hWt.forEach(t),gjr=r(OXe," \u2014 "),Gee=n(OXe,"A",{href:!0});var pWt=s(Gee);hjr=r(pWt,"TFRobertaForMultipleChoice"),pWt.forEach(t),pjr=r(OXe," (RoBERTa model)"),OXe.forEach(t),_jr=i(Te),G3=n(Te,"LI",{});var VXe=s(G3);F5e=n(VXe,"STRONG",{});var _Wt=s(F5e);ujr=r(_Wt,"roformer"),_Wt.forEach(t),bjr=r(VXe," \u2014 "),Oee=n(VXe,"A",{href:!0});var uWt=s(Oee);vjr=r(uWt,"TFRoFormerForMultipleChoice"),uWt.forEach(t),Fjr=r(VXe," (RoFormer model)"),VXe.forEach(t),Tjr=i(Te),O3=n(Te,"LI",{});var XXe=s(O3);T5e=n(XXe,"STRONG",{});var bWt=s(T5e);Mjr=r(bWt,"xlm"),bWt.forEach(t),Ejr=r(XXe," \u2014 "),Vee=n(XXe,"A",{href:!0});var vWt=s(Vee);Cjr=r(vWt,"TFXLMForMultipleChoice"),vWt.forEach(t),wjr=r(XXe," (XLM model)"),XXe.forEach(t),Ajr=i(Te),V3=n(Te,"LI",{});var zXe=s(V3);M5e=n(zXe,"STRONG",{});var FWt=s(M5e);Ljr=r(FWt,"xlm-roberta"),FWt.forEach(t),yjr=r(zXe," \u2014 "),Xee=n(zXe,"A",{href:!0});var TWt=s(Xee);xjr=r(TWt,"TFXLMRobertaForMultipleChoice"),TWt.forEach(t),$jr=r(zXe," (XLM-RoBERTa model)"),zXe.forEach(t),kjr=i(Te),X3=n(Te,"LI",{});var WXe=s(X3);E5e=n(WXe,"STRONG",{});var MWt=s(E5e);Sjr=r(MWt,"xlnet"),MWt.forEach(t),Rjr=r(WXe," \u2014 "),zee=n(WXe,"A",{href:!0});var EWt=s(zee);Pjr=r(EWt,"TFXLNetForMultipleChoice"),EWt.forEach(t),Bjr=r(WXe," (XLNet model)"),WXe.forEach(t),Te.forEach(t),Ijr=i(ni),T(z3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),gHe=i(f),Jc=n(f,"H2",{class:!0});var AYe=s(Jc);W3=n(AYe,"A",{id:!0,class:!0,href:!0});var CWt=s(W3);C5e=n(CWt,"SPAN",{});var wWt=s(C5e);T(J$.$$.fragment,wWt),wWt.forEach(t),CWt.forEach(t),Njr=i(AYe),w5e=n(AYe,"SPAN",{});var AWt=s(w5e);qjr=r(AWt,"TFAutoModelForNextSentencePrediction"),AWt.forEach(t),AYe.forEach(t),hHe=i(f),gr=n(f,"DIV",{class:!0});var si=s(gr);T(Y$.$$.fragment,si),jjr=i(si),Yc=n(si,"P",{});var ese=s(Yc);Djr=r(ese,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Wee=n(ese,"A",{href:!0});var LWt=s(Wee);Gjr=r(LWt,"from_pretrained()"),LWt.forEach(t),Ojr=r(ese," class method or the "),Qee=n(ese,"A",{href:!0});var yWt=s(Qee);Vjr=r(yWt,"from_config()"),yWt.forEach(t),Xjr=r(ese,` class
method.`),ese.forEach(t),zjr=i(si),K$=n(si,"P",{});var LYe=s(K$);Wjr=r(LYe,"This class cannot be instantiated directly using "),A5e=n(LYe,"CODE",{});var xWt=s(A5e);Qjr=r(xWt,"__init__()"),xWt.forEach(t),Ujr=r(LYe," (throws an error)."),LYe.forEach(t),Hjr=i(si),Qt=n(si,"DIV",{class:!0});var LL=s(Qt);T(Z$.$$.fragment,LL),Jjr=i(LL),L5e=n(LL,"P",{});var $Wt=s(L5e);Yjr=r($Wt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Wt.forEach(t),Kjr=i(LL),Kc=n(LL,"P",{});var ose=s(Kc);Zjr=r(ose,`Note:
Loading a model from its configuration file does `),y5e=n(ose,"STRONG",{});var kWt=s(y5e);eDr=r(kWt,"not"),kWt.forEach(t),oDr=r(ose,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uee=n(ose,"A",{href:!0});var SWt=s(Uee);rDr=r(SWt,"from_pretrained()"),SWt.forEach(t),tDr=r(ose," to load the model weights."),ose.forEach(t),aDr=i(LL),T(Q3.$$.fragment,LL),LL.forEach(t),nDr=i(si),Or=n(si,"DIV",{class:!0});var li=s(Or);T(ek.$$.fragment,li),sDr=i(li),x5e=n(li,"P",{});var RWt=s(x5e);lDr=r(RWt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),RWt.forEach(t),iDr=i(li),wn=n(li,"P",{});var yL=s(wn);dDr=r(yL,"The model class to instantiate is selected based on the "),$5e=n(yL,"CODE",{});var PWt=s($5e);cDr=r(PWt,"model_type"),PWt.forEach(t),fDr=r(yL,` property of the config object (either
passed as an argument or loaded from `),k5e=n(yL,"CODE",{});var BWt=s(k5e);mDr=r(BWt,"pretrained_model_name_or_path"),BWt.forEach(t),gDr=r(yL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S5e=n(yL,"CODE",{});var IWt=s(S5e);hDr=r(IWt,"pretrained_model_name_or_path"),IWt.forEach(t),pDr=r(yL,":"),yL.forEach(t),_Dr=i(li),ok=n(li,"UL",{});var yYe=s(ok);U3=n(yYe,"LI",{});var QXe=s(U3);R5e=n(QXe,"STRONG",{});var NWt=s(R5e);uDr=r(NWt,"bert"),NWt.forEach(t),bDr=r(QXe," \u2014 "),Hee=n(QXe,"A",{href:!0});var qWt=s(Hee);vDr=r(qWt,"TFBertForNextSentencePrediction"),qWt.forEach(t),FDr=r(QXe," (BERT model)"),QXe.forEach(t),TDr=i(yYe),H3=n(yYe,"LI",{});var UXe=s(H3);P5e=n(UXe,"STRONG",{});var jWt=s(P5e);MDr=r(jWt,"mobilebert"),jWt.forEach(t),EDr=r(UXe," \u2014 "),Jee=n(UXe,"A",{href:!0});var DWt=s(Jee);CDr=r(DWt,"TFMobileBertForNextSentencePrediction"),DWt.forEach(t),wDr=r(UXe," (MobileBERT model)"),UXe.forEach(t),yYe.forEach(t),ADr=i(li),T(J3.$$.fragment,li),li.forEach(t),si.forEach(t),pHe=i(f),Zc=n(f,"H2",{class:!0});var xYe=s(Zc);Y3=n(xYe,"A",{id:!0,class:!0,href:!0});var GWt=s(Y3);B5e=n(GWt,"SPAN",{});var OWt=s(B5e);T(rk.$$.fragment,OWt),OWt.forEach(t),GWt.forEach(t),LDr=i(xYe),I5e=n(xYe,"SPAN",{});var VWt=s(I5e);yDr=r(VWt,"TFAutoModelForTableQuestionAnswering"),VWt.forEach(t),xYe.forEach(t),_He=i(f),hr=n(f,"DIV",{class:!0});var ii=s(hr);T(tk.$$.fragment,ii),xDr=i(ii),ef=n(ii,"P",{});var rse=s(ef);$Dr=r(rse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Yee=n(rse,"A",{href:!0});var XWt=s(Yee);kDr=r(XWt,"from_pretrained()"),XWt.forEach(t),SDr=r(rse," class method or the "),Kee=n(rse,"A",{href:!0});var zWt=s(Kee);RDr=r(zWt,"from_config()"),zWt.forEach(t),PDr=r(rse,` class
method.`),rse.forEach(t),BDr=i(ii),ak=n(ii,"P",{});var $Ye=s(ak);IDr=r($Ye,"This class cannot be instantiated directly using "),N5e=n($Ye,"CODE",{});var WWt=s(N5e);NDr=r(WWt,"__init__()"),WWt.forEach(t),qDr=r($Ye," (throws an error)."),$Ye.forEach(t),jDr=i(ii),Ut=n(ii,"DIV",{class:!0});var xL=s(Ut);T(nk.$$.fragment,xL),DDr=i(xL),q5e=n(xL,"P",{});var QWt=s(q5e);GDr=r(QWt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),QWt.forEach(t),ODr=i(xL),of=n(xL,"P",{});var tse=s(of);VDr=r(tse,`Note:
Loading a model from its configuration file does `),j5e=n(tse,"STRONG",{});var UWt=s(j5e);XDr=r(UWt,"not"),UWt.forEach(t),zDr=r(tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zee=n(tse,"A",{href:!0});var HWt=s(Zee);WDr=r(HWt,"from_pretrained()"),HWt.forEach(t),QDr=r(tse," to load the model weights."),tse.forEach(t),UDr=i(xL),T(K3.$$.fragment,xL),xL.forEach(t),HDr=i(ii),Vr=n(ii,"DIV",{class:!0});var di=s(Vr);T(sk.$$.fragment,di),JDr=i(di),D5e=n(di,"P",{});var JWt=s(D5e);YDr=r(JWt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),JWt.forEach(t),KDr=i(di),An=n(di,"P",{});var $L=s(An);ZDr=r($L,"The model class to instantiate is selected based on the "),G5e=n($L,"CODE",{});var YWt=s(G5e);eGr=r(YWt,"model_type"),YWt.forEach(t),oGr=r($L,` property of the config object (either
passed as an argument or loaded from `),O5e=n($L,"CODE",{});var KWt=s(O5e);rGr=r(KWt,"pretrained_model_name_or_path"),KWt.forEach(t),tGr=r($L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V5e=n($L,"CODE",{});var ZWt=s(V5e);aGr=r(ZWt,"pretrained_model_name_or_path"),ZWt.forEach(t),nGr=r($L,":"),$L.forEach(t),sGr=i(di),X5e=n(di,"UL",{});var eQt=s(X5e);Z3=n(eQt,"LI",{});var HXe=s(Z3);z5e=n(HXe,"STRONG",{});var oQt=s(z5e);lGr=r(oQt,"tapas"),oQt.forEach(t),iGr=r(HXe," \u2014 "),eoe=n(HXe,"A",{href:!0});var rQt=s(eoe);dGr=r(rQt,"TFTapasForQuestionAnswering"),rQt.forEach(t),cGr=r(HXe," (TAPAS model)"),HXe.forEach(t),eQt.forEach(t),fGr=i(di),T(e5.$$.fragment,di),di.forEach(t),ii.forEach(t),uHe=i(f),rf=n(f,"H2",{class:!0});var kYe=s(rf);o5=n(kYe,"A",{id:!0,class:!0,href:!0});var tQt=s(o5);W5e=n(tQt,"SPAN",{});var aQt=s(W5e);T(lk.$$.fragment,aQt),aQt.forEach(t),tQt.forEach(t),mGr=i(kYe),Q5e=n(kYe,"SPAN",{});var nQt=s(Q5e);gGr=r(nQt,"TFAutoModelForTokenClassification"),nQt.forEach(t),kYe.forEach(t),bHe=i(f),pr=n(f,"DIV",{class:!0});var ci=s(pr);T(ik.$$.fragment,ci),hGr=i(ci),tf=n(ci,"P",{});var ase=s(tf);pGr=r(ase,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ooe=n(ase,"A",{href:!0});var sQt=s(ooe);_Gr=r(sQt,"from_pretrained()"),sQt.forEach(t),uGr=r(ase," class method or the "),roe=n(ase,"A",{href:!0});var lQt=s(roe);bGr=r(lQt,"from_config()"),lQt.forEach(t),vGr=r(ase,` class
method.`),ase.forEach(t),FGr=i(ci),dk=n(ci,"P",{});var SYe=s(dk);TGr=r(SYe,"This class cannot be instantiated directly using "),U5e=n(SYe,"CODE",{});var iQt=s(U5e);MGr=r(iQt,"__init__()"),iQt.forEach(t),EGr=r(SYe," (throws an error)."),SYe.forEach(t),CGr=i(ci),Ht=n(ci,"DIV",{class:!0});var kL=s(Ht);T(ck.$$.fragment,kL),wGr=i(kL),H5e=n(kL,"P",{});var dQt=s(H5e);AGr=r(dQt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),dQt.forEach(t),LGr=i(kL),af=n(kL,"P",{});var nse=s(af);yGr=r(nse,`Note:
Loading a model from its configuration file does `),J5e=n(nse,"STRONG",{});var cQt=s(J5e);xGr=r(cQt,"not"),cQt.forEach(t),$Gr=r(nse,` load the model weights. It only affects the
model\u2019s configuration. Use `),toe=n(nse,"A",{href:!0});var fQt=s(toe);kGr=r(fQt,"from_pretrained()"),fQt.forEach(t),SGr=r(nse," to load the model weights."),nse.forEach(t),RGr=i(kL),T(r5.$$.fragment,kL),kL.forEach(t),PGr=i(ci),Xr=n(ci,"DIV",{class:!0});var fi=s(Xr);T(fk.$$.fragment,fi),BGr=i(fi),Y5e=n(fi,"P",{});var mQt=s(Y5e);IGr=r(mQt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),mQt.forEach(t),NGr=i(fi),Ln=n(fi,"P",{});var SL=s(Ln);qGr=r(SL,"The model class to instantiate is selected based on the "),K5e=n(SL,"CODE",{});var gQt=s(K5e);jGr=r(gQt,"model_type"),gQt.forEach(t),DGr=r(SL,` property of the config object (either
passed as an argument or loaded from `),Z5e=n(SL,"CODE",{});var hQt=s(Z5e);GGr=r(hQt,"pretrained_model_name_or_path"),hQt.forEach(t),OGr=r(SL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e0e=n(SL,"CODE",{});var pQt=s(e0e);VGr=r(pQt,"pretrained_model_name_or_path"),pQt.forEach(t),XGr=r(SL,":"),SL.forEach(t),zGr=i(fi),ce=n(fi,"UL",{});var pe=s(ce);t5=n(pe,"LI",{});var JXe=s(t5);o0e=n(JXe,"STRONG",{});var _Qt=s(o0e);WGr=r(_Qt,"albert"),_Qt.forEach(t),QGr=r(JXe," \u2014 "),aoe=n(JXe,"A",{href:!0});var uQt=s(aoe);UGr=r(uQt,"TFAlbertForTokenClassification"),uQt.forEach(t),HGr=r(JXe," (ALBERT model)"),JXe.forEach(t),JGr=i(pe),a5=n(pe,"LI",{});var YXe=s(a5);r0e=n(YXe,"STRONG",{});var bQt=s(r0e);YGr=r(bQt,"bert"),bQt.forEach(t),KGr=r(YXe," \u2014 "),noe=n(YXe,"A",{href:!0});var vQt=s(noe);ZGr=r(vQt,"TFBertForTokenClassification"),vQt.forEach(t),eOr=r(YXe," (BERT model)"),YXe.forEach(t),oOr=i(pe),n5=n(pe,"LI",{});var KXe=s(n5);t0e=n(KXe,"STRONG",{});var FQt=s(t0e);rOr=r(FQt,"camembert"),FQt.forEach(t),tOr=r(KXe," \u2014 "),soe=n(KXe,"A",{href:!0});var TQt=s(soe);aOr=r(TQt,"TFCamembertForTokenClassification"),TQt.forEach(t),nOr=r(KXe," (CamemBERT model)"),KXe.forEach(t),sOr=i(pe),s5=n(pe,"LI",{});var ZXe=s(s5);a0e=n(ZXe,"STRONG",{});var MQt=s(a0e);lOr=r(MQt,"convbert"),MQt.forEach(t),iOr=r(ZXe," \u2014 "),loe=n(ZXe,"A",{href:!0});var EQt=s(loe);dOr=r(EQt,"TFConvBertForTokenClassification"),EQt.forEach(t),cOr=r(ZXe," (ConvBERT model)"),ZXe.forEach(t),fOr=i(pe),l5=n(pe,"LI",{});var eze=s(l5);n0e=n(eze,"STRONG",{});var CQt=s(n0e);mOr=r(CQt,"deberta"),CQt.forEach(t),gOr=r(eze," \u2014 "),ioe=n(eze,"A",{href:!0});var wQt=s(ioe);hOr=r(wQt,"TFDebertaForTokenClassification"),wQt.forEach(t),pOr=r(eze," (DeBERTa model)"),eze.forEach(t),_Or=i(pe),i5=n(pe,"LI",{});var oze=s(i5);s0e=n(oze,"STRONG",{});var AQt=s(s0e);uOr=r(AQt,"deberta-v2"),AQt.forEach(t),bOr=r(oze," \u2014 "),doe=n(oze,"A",{href:!0});var LQt=s(doe);vOr=r(LQt,"TFDebertaV2ForTokenClassification"),LQt.forEach(t),FOr=r(oze," (DeBERTa-v2 model)"),oze.forEach(t),TOr=i(pe),d5=n(pe,"LI",{});var rze=s(d5);l0e=n(rze,"STRONG",{});var yQt=s(l0e);MOr=r(yQt,"distilbert"),yQt.forEach(t),EOr=r(rze," \u2014 "),coe=n(rze,"A",{href:!0});var xQt=s(coe);COr=r(xQt,"TFDistilBertForTokenClassification"),xQt.forEach(t),wOr=r(rze," (DistilBERT model)"),rze.forEach(t),AOr=i(pe),c5=n(pe,"LI",{});var tze=s(c5);i0e=n(tze,"STRONG",{});var $Qt=s(i0e);LOr=r($Qt,"electra"),$Qt.forEach(t),yOr=r(tze," \u2014 "),foe=n(tze,"A",{href:!0});var kQt=s(foe);xOr=r(kQt,"TFElectraForTokenClassification"),kQt.forEach(t),$Or=r(tze," (ELECTRA model)"),tze.forEach(t),kOr=i(pe),f5=n(pe,"LI",{});var aze=s(f5);d0e=n(aze,"STRONG",{});var SQt=s(d0e);SOr=r(SQt,"flaubert"),SQt.forEach(t),ROr=r(aze," \u2014 "),moe=n(aze,"A",{href:!0});var RQt=s(moe);POr=r(RQt,"TFFlaubertForTokenClassification"),RQt.forEach(t),BOr=r(aze," (FlauBERT model)"),aze.forEach(t),IOr=i(pe),m5=n(pe,"LI",{});var nze=s(m5);c0e=n(nze,"STRONG",{});var PQt=s(c0e);NOr=r(PQt,"funnel"),PQt.forEach(t),qOr=r(nze," \u2014 "),goe=n(nze,"A",{href:!0});var BQt=s(goe);jOr=r(BQt,"TFFunnelForTokenClassification"),BQt.forEach(t),DOr=r(nze," (Funnel Transformer model)"),nze.forEach(t),GOr=i(pe),g5=n(pe,"LI",{});var sze=s(g5);f0e=n(sze,"STRONG",{});var IQt=s(f0e);OOr=r(IQt,"layoutlm"),IQt.forEach(t),VOr=r(sze," \u2014 "),hoe=n(sze,"A",{href:!0});var NQt=s(hoe);XOr=r(NQt,"TFLayoutLMForTokenClassification"),NQt.forEach(t),zOr=r(sze," (LayoutLM model)"),sze.forEach(t),WOr=i(pe),h5=n(pe,"LI",{});var lze=s(h5);m0e=n(lze,"STRONG",{});var qQt=s(m0e);QOr=r(qQt,"longformer"),qQt.forEach(t),UOr=r(lze," \u2014 "),poe=n(lze,"A",{href:!0});var jQt=s(poe);HOr=r(jQt,"TFLongformerForTokenClassification"),jQt.forEach(t),JOr=r(lze," (Longformer model)"),lze.forEach(t),YOr=i(pe),p5=n(pe,"LI",{});var ize=s(p5);g0e=n(ize,"STRONG",{});var DQt=s(g0e);KOr=r(DQt,"mobilebert"),DQt.forEach(t),ZOr=r(ize," \u2014 "),_oe=n(ize,"A",{href:!0});var GQt=s(_oe);eVr=r(GQt,"TFMobileBertForTokenClassification"),GQt.forEach(t),oVr=r(ize," (MobileBERT model)"),ize.forEach(t),rVr=i(pe),_5=n(pe,"LI",{});var dze=s(_5);h0e=n(dze,"STRONG",{});var OQt=s(h0e);tVr=r(OQt,"mpnet"),OQt.forEach(t),aVr=r(dze," \u2014 "),uoe=n(dze,"A",{href:!0});var VQt=s(uoe);nVr=r(VQt,"TFMPNetForTokenClassification"),VQt.forEach(t),sVr=r(dze," (MPNet model)"),dze.forEach(t),lVr=i(pe),u5=n(pe,"LI",{});var cze=s(u5);p0e=n(cze,"STRONG",{});var XQt=s(p0e);iVr=r(XQt,"rembert"),XQt.forEach(t),dVr=r(cze," \u2014 "),boe=n(cze,"A",{href:!0});var zQt=s(boe);cVr=r(zQt,"TFRemBertForTokenClassification"),zQt.forEach(t),fVr=r(cze," (RemBERT model)"),cze.forEach(t),mVr=i(pe),b5=n(pe,"LI",{});var fze=s(b5);_0e=n(fze,"STRONG",{});var WQt=s(_0e);gVr=r(WQt,"roberta"),WQt.forEach(t),hVr=r(fze," \u2014 "),voe=n(fze,"A",{href:!0});var QQt=s(voe);pVr=r(QQt,"TFRobertaForTokenClassification"),QQt.forEach(t),_Vr=r(fze," (RoBERTa model)"),fze.forEach(t),uVr=i(pe),v5=n(pe,"LI",{});var mze=s(v5);u0e=n(mze,"STRONG",{});var UQt=s(u0e);bVr=r(UQt,"roformer"),UQt.forEach(t),vVr=r(mze," \u2014 "),Foe=n(mze,"A",{href:!0});var HQt=s(Foe);FVr=r(HQt,"TFRoFormerForTokenClassification"),HQt.forEach(t),TVr=r(mze," (RoFormer model)"),mze.forEach(t),MVr=i(pe),F5=n(pe,"LI",{});var gze=s(F5);b0e=n(gze,"STRONG",{});var JQt=s(b0e);EVr=r(JQt,"xlm"),JQt.forEach(t),CVr=r(gze," \u2014 "),Toe=n(gze,"A",{href:!0});var YQt=s(Toe);wVr=r(YQt,"TFXLMForTokenClassification"),YQt.forEach(t),AVr=r(gze," (XLM model)"),gze.forEach(t),LVr=i(pe),T5=n(pe,"LI",{});var hze=s(T5);v0e=n(hze,"STRONG",{});var KQt=s(v0e);yVr=r(KQt,"xlm-roberta"),KQt.forEach(t),xVr=r(hze," \u2014 "),Moe=n(hze,"A",{href:!0});var ZQt=s(Moe);$Vr=r(ZQt,"TFXLMRobertaForTokenClassification"),ZQt.forEach(t),kVr=r(hze," (XLM-RoBERTa model)"),hze.forEach(t),SVr=i(pe),M5=n(pe,"LI",{});var pze=s(M5);F0e=n(pze,"STRONG",{});var eUt=s(F0e);RVr=r(eUt,"xlnet"),eUt.forEach(t),PVr=r(pze," \u2014 "),Eoe=n(pze,"A",{href:!0});var oUt=s(Eoe);BVr=r(oUt,"TFXLNetForTokenClassification"),oUt.forEach(t),IVr=r(pze," (XLNet model)"),pze.forEach(t),pe.forEach(t),NVr=i(fi),T(E5.$$.fragment,fi),fi.forEach(t),ci.forEach(t),vHe=i(f),nf=n(f,"H2",{class:!0});var RYe=s(nf);C5=n(RYe,"A",{id:!0,class:!0,href:!0});var rUt=s(C5);T0e=n(rUt,"SPAN",{});var tUt=s(T0e);T(mk.$$.fragment,tUt),tUt.forEach(t),rUt.forEach(t),qVr=i(RYe),M0e=n(RYe,"SPAN",{});var aUt=s(M0e);jVr=r(aUt,"TFAutoModelForQuestionAnswering"),aUt.forEach(t),RYe.forEach(t),FHe=i(f),_r=n(f,"DIV",{class:!0});var mi=s(_r);T(gk.$$.fragment,mi),DVr=i(mi),sf=n(mi,"P",{});var sse=s(sf);GVr=r(sse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Coe=n(sse,"A",{href:!0});var nUt=s(Coe);OVr=r(nUt,"from_pretrained()"),nUt.forEach(t),VVr=r(sse," class method or the "),woe=n(sse,"A",{href:!0});var sUt=s(woe);XVr=r(sUt,"from_config()"),sUt.forEach(t),zVr=r(sse,` class
method.`),sse.forEach(t),WVr=i(mi),hk=n(mi,"P",{});var PYe=s(hk);QVr=r(PYe,"This class cannot be instantiated directly using "),E0e=n(PYe,"CODE",{});var lUt=s(E0e);UVr=r(lUt,"__init__()"),lUt.forEach(t),HVr=r(PYe," (throws an error)."),PYe.forEach(t),JVr=i(mi),Jt=n(mi,"DIV",{class:!0});var RL=s(Jt);T(pk.$$.fragment,RL),YVr=i(RL),C0e=n(RL,"P",{});var iUt=s(C0e);KVr=r(iUt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),iUt.forEach(t),ZVr=i(RL),lf=n(RL,"P",{});var lse=s(lf);eXr=r(lse,`Note:
Loading a model from its configuration file does `),w0e=n(lse,"STRONG",{});var dUt=s(w0e);oXr=r(dUt,"not"),dUt.forEach(t),rXr=r(lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aoe=n(lse,"A",{href:!0});var cUt=s(Aoe);tXr=r(cUt,"from_pretrained()"),cUt.forEach(t),aXr=r(lse," to load the model weights."),lse.forEach(t),nXr=i(RL),T(w5.$$.fragment,RL),RL.forEach(t),sXr=i(mi),zr=n(mi,"DIV",{class:!0});var gi=s(zr);T(_k.$$.fragment,gi),lXr=i(gi),A0e=n(gi,"P",{});var fUt=s(A0e);iXr=r(fUt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fUt.forEach(t),dXr=i(gi),yn=n(gi,"P",{});var PL=s(yn);cXr=r(PL,"The model class to instantiate is selected based on the "),L0e=n(PL,"CODE",{});var mUt=s(L0e);fXr=r(mUt,"model_type"),mUt.forEach(t),mXr=r(PL,` property of the config object (either
passed as an argument or loaded from `),y0e=n(PL,"CODE",{});var gUt=s(y0e);gXr=r(gUt,"pretrained_model_name_or_path"),gUt.forEach(t),hXr=r(PL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x0e=n(PL,"CODE",{});var hUt=s(x0e);pXr=r(hUt,"pretrained_model_name_or_path"),hUt.forEach(t),_Xr=r(PL,":"),PL.forEach(t),uXr=i(gi),fe=n(gi,"UL",{});var _e=s(fe);A5=n(_e,"LI",{});var _ze=s(A5);$0e=n(_ze,"STRONG",{});var pUt=s($0e);bXr=r(pUt,"albert"),pUt.forEach(t),vXr=r(_ze," \u2014 "),Loe=n(_ze,"A",{href:!0});var _Ut=s(Loe);FXr=r(_Ut,"TFAlbertForQuestionAnswering"),_Ut.forEach(t),TXr=r(_ze," (ALBERT model)"),_ze.forEach(t),MXr=i(_e),L5=n(_e,"LI",{});var uze=s(L5);k0e=n(uze,"STRONG",{});var uUt=s(k0e);EXr=r(uUt,"bert"),uUt.forEach(t),CXr=r(uze," \u2014 "),yoe=n(uze,"A",{href:!0});var bUt=s(yoe);wXr=r(bUt,"TFBertForQuestionAnswering"),bUt.forEach(t),AXr=r(uze," (BERT model)"),uze.forEach(t),LXr=i(_e),y5=n(_e,"LI",{});var bze=s(y5);S0e=n(bze,"STRONG",{});var vUt=s(S0e);yXr=r(vUt,"camembert"),vUt.forEach(t),xXr=r(bze," \u2014 "),xoe=n(bze,"A",{href:!0});var FUt=s(xoe);$Xr=r(FUt,"TFCamembertForQuestionAnswering"),FUt.forEach(t),kXr=r(bze," (CamemBERT model)"),bze.forEach(t),SXr=i(_e),x5=n(_e,"LI",{});var vze=s(x5);R0e=n(vze,"STRONG",{});var TUt=s(R0e);RXr=r(TUt,"convbert"),TUt.forEach(t),PXr=r(vze," \u2014 "),$oe=n(vze,"A",{href:!0});var MUt=s($oe);BXr=r(MUt,"TFConvBertForQuestionAnswering"),MUt.forEach(t),IXr=r(vze," (ConvBERT model)"),vze.forEach(t),NXr=i(_e),$5=n(_e,"LI",{});var Fze=s($5);P0e=n(Fze,"STRONG",{});var EUt=s(P0e);qXr=r(EUt,"deberta"),EUt.forEach(t),jXr=r(Fze," \u2014 "),koe=n(Fze,"A",{href:!0});var CUt=s(koe);DXr=r(CUt,"TFDebertaForQuestionAnswering"),CUt.forEach(t),GXr=r(Fze," (DeBERTa model)"),Fze.forEach(t),OXr=i(_e),k5=n(_e,"LI",{});var Tze=s(k5);B0e=n(Tze,"STRONG",{});var wUt=s(B0e);VXr=r(wUt,"deberta-v2"),wUt.forEach(t),XXr=r(Tze," \u2014 "),Soe=n(Tze,"A",{href:!0});var AUt=s(Soe);zXr=r(AUt,"TFDebertaV2ForQuestionAnswering"),AUt.forEach(t),WXr=r(Tze," (DeBERTa-v2 model)"),Tze.forEach(t),QXr=i(_e),S5=n(_e,"LI",{});var Mze=s(S5);I0e=n(Mze,"STRONG",{});var LUt=s(I0e);UXr=r(LUt,"distilbert"),LUt.forEach(t),HXr=r(Mze," \u2014 "),Roe=n(Mze,"A",{href:!0});var yUt=s(Roe);JXr=r(yUt,"TFDistilBertForQuestionAnswering"),yUt.forEach(t),YXr=r(Mze," (DistilBERT model)"),Mze.forEach(t),KXr=i(_e),R5=n(_e,"LI",{});var Eze=s(R5);N0e=n(Eze,"STRONG",{});var xUt=s(N0e);ZXr=r(xUt,"electra"),xUt.forEach(t),ezr=r(Eze," \u2014 "),Poe=n(Eze,"A",{href:!0});var $Ut=s(Poe);ozr=r($Ut,"TFElectraForQuestionAnswering"),$Ut.forEach(t),rzr=r(Eze," (ELECTRA model)"),Eze.forEach(t),tzr=i(_e),P5=n(_e,"LI",{});var Cze=s(P5);q0e=n(Cze,"STRONG",{});var kUt=s(q0e);azr=r(kUt,"flaubert"),kUt.forEach(t),nzr=r(Cze," \u2014 "),Boe=n(Cze,"A",{href:!0});var SUt=s(Boe);szr=r(SUt,"TFFlaubertForQuestionAnsweringSimple"),SUt.forEach(t),lzr=r(Cze," (FlauBERT model)"),Cze.forEach(t),izr=i(_e),B5=n(_e,"LI",{});var wze=s(B5);j0e=n(wze,"STRONG",{});var RUt=s(j0e);dzr=r(RUt,"funnel"),RUt.forEach(t),czr=r(wze," \u2014 "),Ioe=n(wze,"A",{href:!0});var PUt=s(Ioe);fzr=r(PUt,"TFFunnelForQuestionAnswering"),PUt.forEach(t),mzr=r(wze," (Funnel Transformer model)"),wze.forEach(t),gzr=i(_e),I5=n(_e,"LI",{});var Aze=s(I5);D0e=n(Aze,"STRONG",{});var BUt=s(D0e);hzr=r(BUt,"gptj"),BUt.forEach(t),pzr=r(Aze," \u2014 "),Noe=n(Aze,"A",{href:!0});var IUt=s(Noe);_zr=r(IUt,"TFGPTJForQuestionAnswering"),IUt.forEach(t),uzr=r(Aze," (GPT-J model)"),Aze.forEach(t),bzr=i(_e),N5=n(_e,"LI",{});var Lze=s(N5);G0e=n(Lze,"STRONG",{});var NUt=s(G0e);vzr=r(NUt,"longformer"),NUt.forEach(t),Fzr=r(Lze," \u2014 "),qoe=n(Lze,"A",{href:!0});var qUt=s(qoe);Tzr=r(qUt,"TFLongformerForQuestionAnswering"),qUt.forEach(t),Mzr=r(Lze," (Longformer model)"),Lze.forEach(t),Ezr=i(_e),q5=n(_e,"LI",{});var yze=s(q5);O0e=n(yze,"STRONG",{});var jUt=s(O0e);Czr=r(jUt,"mobilebert"),jUt.forEach(t),wzr=r(yze," \u2014 "),joe=n(yze,"A",{href:!0});var DUt=s(joe);Azr=r(DUt,"TFMobileBertForQuestionAnswering"),DUt.forEach(t),Lzr=r(yze," (MobileBERT model)"),yze.forEach(t),yzr=i(_e),j5=n(_e,"LI",{});var xze=s(j5);V0e=n(xze,"STRONG",{});var GUt=s(V0e);xzr=r(GUt,"mpnet"),GUt.forEach(t),$zr=r(xze," \u2014 "),Doe=n(xze,"A",{href:!0});var OUt=s(Doe);kzr=r(OUt,"TFMPNetForQuestionAnswering"),OUt.forEach(t),Szr=r(xze," (MPNet model)"),xze.forEach(t),Rzr=i(_e),D5=n(_e,"LI",{});var $ze=s(D5);X0e=n($ze,"STRONG",{});var VUt=s(X0e);Pzr=r(VUt,"rembert"),VUt.forEach(t),Bzr=r($ze," \u2014 "),Goe=n($ze,"A",{href:!0});var XUt=s(Goe);Izr=r(XUt,"TFRemBertForQuestionAnswering"),XUt.forEach(t),Nzr=r($ze," (RemBERT model)"),$ze.forEach(t),qzr=i(_e),G5=n(_e,"LI",{});var kze=s(G5);z0e=n(kze,"STRONG",{});var zUt=s(z0e);jzr=r(zUt,"roberta"),zUt.forEach(t),Dzr=r(kze," \u2014 "),Ooe=n(kze,"A",{href:!0});var WUt=s(Ooe);Gzr=r(WUt,"TFRobertaForQuestionAnswering"),WUt.forEach(t),Ozr=r(kze," (RoBERTa model)"),kze.forEach(t),Vzr=i(_e),O5=n(_e,"LI",{});var Sze=s(O5);W0e=n(Sze,"STRONG",{});var QUt=s(W0e);Xzr=r(QUt,"roformer"),QUt.forEach(t),zzr=r(Sze," \u2014 "),Voe=n(Sze,"A",{href:!0});var UUt=s(Voe);Wzr=r(UUt,"TFRoFormerForQuestionAnswering"),UUt.forEach(t),Qzr=r(Sze," (RoFormer model)"),Sze.forEach(t),Uzr=i(_e),V5=n(_e,"LI",{});var Rze=s(V5);Q0e=n(Rze,"STRONG",{});var HUt=s(Q0e);Hzr=r(HUt,"xlm"),HUt.forEach(t),Jzr=r(Rze," \u2014 "),Xoe=n(Rze,"A",{href:!0});var JUt=s(Xoe);Yzr=r(JUt,"TFXLMForQuestionAnsweringSimple"),JUt.forEach(t),Kzr=r(Rze," (XLM model)"),Rze.forEach(t),Zzr=i(_e),X5=n(_e,"LI",{});var Pze=s(X5);U0e=n(Pze,"STRONG",{});var YUt=s(U0e);eWr=r(YUt,"xlm-roberta"),YUt.forEach(t),oWr=r(Pze," \u2014 "),zoe=n(Pze,"A",{href:!0});var KUt=s(zoe);rWr=r(KUt,"TFXLMRobertaForQuestionAnswering"),KUt.forEach(t),tWr=r(Pze," (XLM-RoBERTa model)"),Pze.forEach(t),aWr=i(_e),z5=n(_e,"LI",{});var Bze=s(z5);H0e=n(Bze,"STRONG",{});var ZUt=s(H0e);nWr=r(ZUt,"xlnet"),ZUt.forEach(t),sWr=r(Bze," \u2014 "),Woe=n(Bze,"A",{href:!0});var eHt=s(Woe);lWr=r(eHt,"TFXLNetForQuestionAnsweringSimple"),eHt.forEach(t),iWr=r(Bze," (XLNet model)"),Bze.forEach(t),_e.forEach(t),dWr=i(gi),T(W5.$$.fragment,gi),gi.forEach(t),mi.forEach(t),THe=i(f),df=n(f,"H2",{class:!0});var BYe=s(df);Q5=n(BYe,"A",{id:!0,class:!0,href:!0});var oHt=s(Q5);J0e=n(oHt,"SPAN",{});var rHt=s(J0e);T(uk.$$.fragment,rHt),rHt.forEach(t),oHt.forEach(t),cWr=i(BYe),Y0e=n(BYe,"SPAN",{});var tHt=s(Y0e);fWr=r(tHt,"TFAutoModelForVision2Seq"),tHt.forEach(t),BYe.forEach(t),MHe=i(f),ur=n(f,"DIV",{class:!0});var hi=s(ur);T(bk.$$.fragment,hi),mWr=i(hi),cf=n(hi,"P",{});var ise=s(cf);gWr=r(ise,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Qoe=n(ise,"A",{href:!0});var aHt=s(Qoe);hWr=r(aHt,"from_pretrained()"),aHt.forEach(t),pWr=r(ise," class method or the "),Uoe=n(ise,"A",{href:!0});var nHt=s(Uoe);_Wr=r(nHt,"from_config()"),nHt.forEach(t),uWr=r(ise,` class
method.`),ise.forEach(t),bWr=i(hi),vk=n(hi,"P",{});var IYe=s(vk);vWr=r(IYe,"This class cannot be instantiated directly using "),K0e=n(IYe,"CODE",{});var sHt=s(K0e);FWr=r(sHt,"__init__()"),sHt.forEach(t),TWr=r(IYe," (throws an error)."),IYe.forEach(t),MWr=i(hi),Yt=n(hi,"DIV",{class:!0});var BL=s(Yt);T(Fk.$$.fragment,BL),EWr=i(BL),Z0e=n(BL,"P",{});var lHt=s(Z0e);CWr=r(lHt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lHt.forEach(t),wWr=i(BL),ff=n(BL,"P",{});var dse=s(ff);AWr=r(dse,`Note:
Loading a model from its configuration file does `),ewe=n(dse,"STRONG",{});var iHt=s(ewe);LWr=r(iHt,"not"),iHt.forEach(t),yWr=r(dse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hoe=n(dse,"A",{href:!0});var dHt=s(Hoe);xWr=r(dHt,"from_pretrained()"),dHt.forEach(t),$Wr=r(dse," to load the model weights."),dse.forEach(t),kWr=i(BL),T(U5.$$.fragment,BL),BL.forEach(t),SWr=i(hi),Wr=n(hi,"DIV",{class:!0});var pi=s(Wr);T(Tk.$$.fragment,pi),RWr=i(pi),owe=n(pi,"P",{});var cHt=s(owe);PWr=r(cHt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cHt.forEach(t),BWr=i(pi),xn=n(pi,"P",{});var IL=s(xn);IWr=r(IL,"The model class to instantiate is selected based on the "),rwe=n(IL,"CODE",{});var fHt=s(rwe);NWr=r(fHt,"model_type"),fHt.forEach(t),qWr=r(IL,` property of the config object (either
passed as an argument or loaded from `),twe=n(IL,"CODE",{});var mHt=s(twe);jWr=r(mHt,"pretrained_model_name_or_path"),mHt.forEach(t),DWr=r(IL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),awe=n(IL,"CODE",{});var gHt=s(awe);GWr=r(gHt,"pretrained_model_name_or_path"),gHt.forEach(t),OWr=r(IL,":"),IL.forEach(t),VWr=i(pi),nwe=n(pi,"UL",{});var hHt=s(nwe);H5=n(hHt,"LI",{});var Ize=s(H5);swe=n(Ize,"STRONG",{});var pHt=s(swe);XWr=r(pHt,"vision-encoder-decoder"),pHt.forEach(t),zWr=r(Ize," \u2014 "),Joe=n(Ize,"A",{href:!0});var _Ht=s(Joe);WWr=r(_Ht,"TFVisionEncoderDecoderModel"),_Ht.forEach(t),QWr=r(Ize," (Vision Encoder decoder model)"),Ize.forEach(t),hHt.forEach(t),UWr=i(pi),T(J5.$$.fragment,pi),pi.forEach(t),hi.forEach(t),EHe=i(f),mf=n(f,"H2",{class:!0});var NYe=s(mf);Y5=n(NYe,"A",{id:!0,class:!0,href:!0});var uHt=s(Y5);lwe=n(uHt,"SPAN",{});var bHt=s(lwe);T(Mk.$$.fragment,bHt),bHt.forEach(t),uHt.forEach(t),HWr=i(NYe),iwe=n(NYe,"SPAN",{});var vHt=s(iwe);JWr=r(vHt,"TFAutoModelForSpeechSeq2Seq"),vHt.forEach(t),NYe.forEach(t),CHe=i(f),br=n(f,"DIV",{class:!0});var _i=s(br);T(Ek.$$.fragment,_i),YWr=i(_i),gf=n(_i,"P",{});var cse=s(gf);KWr=r(cse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Yoe=n(cse,"A",{href:!0});var FHt=s(Yoe);ZWr=r(FHt,"from_pretrained()"),FHt.forEach(t),eQr=r(cse," class method or the "),Koe=n(cse,"A",{href:!0});var THt=s(Koe);oQr=r(THt,"from_config()"),THt.forEach(t),rQr=r(cse,` class
method.`),cse.forEach(t),tQr=i(_i),Ck=n(_i,"P",{});var qYe=s(Ck);aQr=r(qYe,"This class cannot be instantiated directly using "),dwe=n(qYe,"CODE",{});var MHt=s(dwe);nQr=r(MHt,"__init__()"),MHt.forEach(t),sQr=r(qYe," (throws an error)."),qYe.forEach(t),lQr=i(_i),Kt=n(_i,"DIV",{class:!0});var NL=s(Kt);T(wk.$$.fragment,NL),iQr=i(NL),cwe=n(NL,"P",{});var EHt=s(cwe);dQr=r(EHt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),EHt.forEach(t),cQr=i(NL),hf=n(NL,"P",{});var fse=s(hf);fQr=r(fse,`Note:
Loading a model from its configuration file does `),fwe=n(fse,"STRONG",{});var CHt=s(fwe);mQr=r(CHt,"not"),CHt.forEach(t),gQr=r(fse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=n(fse,"A",{href:!0});var wHt=s(Zoe);hQr=r(wHt,"from_pretrained()"),wHt.forEach(t),pQr=r(fse," to load the model weights."),fse.forEach(t),_Qr=i(NL),T(K5.$$.fragment,NL),NL.forEach(t),uQr=i(_i),Qr=n(_i,"DIV",{class:!0});var ui=s(Qr);T(Ak.$$.fragment,ui),bQr=i(ui),mwe=n(ui,"P",{});var AHt=s(mwe);vQr=r(AHt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),AHt.forEach(t),FQr=i(ui),$n=n(ui,"P",{});var qL=s($n);TQr=r(qL,"The model class to instantiate is selected based on the "),gwe=n(qL,"CODE",{});var LHt=s(gwe);MQr=r(LHt,"model_type"),LHt.forEach(t),EQr=r(qL,` property of the config object (either
passed as an argument or loaded from `),hwe=n(qL,"CODE",{});var yHt=s(hwe);CQr=r(yHt,"pretrained_model_name_or_path"),yHt.forEach(t),wQr=r(qL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pwe=n(qL,"CODE",{});var xHt=s(pwe);AQr=r(xHt,"pretrained_model_name_or_path"),xHt.forEach(t),LQr=r(qL,":"),qL.forEach(t),yQr=i(ui),_we=n(ui,"UL",{});var $Ht=s(_we);Z5=n($Ht,"LI",{});var Nze=s(Z5);uwe=n(Nze,"STRONG",{});var kHt=s(uwe);xQr=r(kHt,"speech_to_text"),kHt.forEach(t),$Qr=r(Nze," \u2014 "),ere=n(Nze,"A",{href:!0});var SHt=s(ere);kQr=r(SHt,"TFSpeech2TextForConditionalGeneration"),SHt.forEach(t),SQr=r(Nze," (Speech2Text model)"),Nze.forEach(t),$Ht.forEach(t),RQr=i(ui),T(e0.$$.fragment,ui),ui.forEach(t),_i.forEach(t),wHe=i(f),pf=n(f,"H2",{class:!0});var jYe=s(pf);o0=n(jYe,"A",{id:!0,class:!0,href:!0});var RHt=s(o0);bwe=n(RHt,"SPAN",{});var PHt=s(bwe);T(Lk.$$.fragment,PHt),PHt.forEach(t),RHt.forEach(t),PQr=i(jYe),vwe=n(jYe,"SPAN",{});var BHt=s(vwe);BQr=r(BHt,"FlaxAutoModel"),BHt.forEach(t),jYe.forEach(t),AHe=i(f),vr=n(f,"DIV",{class:!0});var bi=s(vr);T(yk.$$.fragment,bi),IQr=i(bi),_f=n(bi,"P",{});var mse=s(_f);NQr=r(mse,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ore=n(mse,"A",{href:!0});var IHt=s(ore);qQr=r(IHt,"from_pretrained()"),IHt.forEach(t),jQr=r(mse," class method or the "),rre=n(mse,"A",{href:!0});var NHt=s(rre);DQr=r(NHt,"from_config()"),NHt.forEach(t),GQr=r(mse,` class
method.`),mse.forEach(t),OQr=i(bi),xk=n(bi,"P",{});var DYe=s(xk);VQr=r(DYe,"This class cannot be instantiated directly using "),Fwe=n(DYe,"CODE",{});var qHt=s(Fwe);XQr=r(qHt,"__init__()"),qHt.forEach(t),zQr=r(DYe," (throws an error)."),DYe.forEach(t),WQr=i(bi),Zt=n(bi,"DIV",{class:!0});var jL=s(Zt);T($k.$$.fragment,jL),QQr=i(jL),Twe=n(jL,"P",{});var jHt=s(Twe);UQr=r(jHt,"Instantiates one of the base model classes of the library from a configuration."),jHt.forEach(t),HQr=i(jL),uf=n(jL,"P",{});var gse=s(uf);JQr=r(gse,`Note:
Loading a model from its configuration file does `),Mwe=n(gse,"STRONG",{});var DHt=s(Mwe);YQr=r(DHt,"not"),DHt.forEach(t),KQr=r(gse,` load the model weights. It only affects the
model\u2019s configuration. Use `),tre=n(gse,"A",{href:!0});var GHt=s(tre);ZQr=r(GHt,"from_pretrained()"),GHt.forEach(t),eUr=r(gse," to load the model weights."),gse.forEach(t),oUr=i(jL),T(r0.$$.fragment,jL),jL.forEach(t),rUr=i(bi),Ur=n(bi,"DIV",{class:!0});var vi=s(Ur);T(kk.$$.fragment,vi),tUr=i(vi),Ewe=n(vi,"P",{});var OHt=s(Ewe);aUr=r(OHt,"Instantiate one of the base model classes of the library from a pretrained model."),OHt.forEach(t),nUr=i(vi),kn=n(vi,"P",{});var DL=s(kn);sUr=r(DL,"The model class to instantiate is selected based on the "),Cwe=n(DL,"CODE",{});var VHt=s(Cwe);lUr=r(VHt,"model_type"),VHt.forEach(t),iUr=r(DL,` property of the config object (either
passed as an argument or loaded from `),wwe=n(DL,"CODE",{});var XHt=s(wwe);dUr=r(XHt,"pretrained_model_name_or_path"),XHt.forEach(t),cUr=r(DL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Awe=n(DL,"CODE",{});var zHt=s(Awe);fUr=r(zHt,"pretrained_model_name_or_path"),zHt.forEach(t),mUr=r(DL,":"),DL.forEach(t),gUr=i(vi),re=n(vi,"UL",{});var ae=s(re);t0=n(ae,"LI",{});var qze=s(t0);Lwe=n(qze,"STRONG",{});var WHt=s(Lwe);hUr=r(WHt,"albert"),WHt.forEach(t),pUr=r(qze," \u2014 "),are=n(qze,"A",{href:!0});var QHt=s(are);_Ur=r(QHt,"FlaxAlbertModel"),QHt.forEach(t),uUr=r(qze," (ALBERT model)"),qze.forEach(t),bUr=i(ae),a0=n(ae,"LI",{});var jze=s(a0);ywe=n(jze,"STRONG",{});var UHt=s(ywe);vUr=r(UHt,"bart"),UHt.forEach(t),FUr=r(jze," \u2014 "),nre=n(jze,"A",{href:!0});var HHt=s(nre);TUr=r(HHt,"FlaxBartModel"),HHt.forEach(t),MUr=r(jze," (BART model)"),jze.forEach(t),EUr=i(ae),n0=n(ae,"LI",{});var Dze=s(n0);xwe=n(Dze,"STRONG",{});var JHt=s(xwe);CUr=r(JHt,"beit"),JHt.forEach(t),wUr=r(Dze," \u2014 "),sre=n(Dze,"A",{href:!0});var YHt=s(sre);AUr=r(YHt,"FlaxBeitModel"),YHt.forEach(t),LUr=r(Dze," (BEiT model)"),Dze.forEach(t),yUr=i(ae),s0=n(ae,"LI",{});var Gze=s(s0);$we=n(Gze,"STRONG",{});var KHt=s($we);xUr=r(KHt,"bert"),KHt.forEach(t),$Ur=r(Gze," \u2014 "),lre=n(Gze,"A",{href:!0});var ZHt=s(lre);kUr=r(ZHt,"FlaxBertModel"),ZHt.forEach(t),SUr=r(Gze," (BERT model)"),Gze.forEach(t),RUr=i(ae),l0=n(ae,"LI",{});var Oze=s(l0);kwe=n(Oze,"STRONG",{});var eJt=s(kwe);PUr=r(eJt,"big_bird"),eJt.forEach(t),BUr=r(Oze," \u2014 "),ire=n(Oze,"A",{href:!0});var oJt=s(ire);IUr=r(oJt,"FlaxBigBirdModel"),oJt.forEach(t),NUr=r(Oze," (BigBird model)"),Oze.forEach(t),qUr=i(ae),i0=n(ae,"LI",{});var Vze=s(i0);Swe=n(Vze,"STRONG",{});var rJt=s(Swe);jUr=r(rJt,"blenderbot"),rJt.forEach(t),DUr=r(Vze," \u2014 "),dre=n(Vze,"A",{href:!0});var tJt=s(dre);GUr=r(tJt,"FlaxBlenderbotModel"),tJt.forEach(t),OUr=r(Vze," (Blenderbot model)"),Vze.forEach(t),VUr=i(ae),d0=n(ae,"LI",{});var Xze=s(d0);Rwe=n(Xze,"STRONG",{});var aJt=s(Rwe);XUr=r(aJt,"blenderbot-small"),aJt.forEach(t),zUr=r(Xze," \u2014 "),cre=n(Xze,"A",{href:!0});var nJt=s(cre);WUr=r(nJt,"FlaxBlenderbotSmallModel"),nJt.forEach(t),QUr=r(Xze," (BlenderbotSmall model)"),Xze.forEach(t),UUr=i(ae),c0=n(ae,"LI",{});var zze=s(c0);Pwe=n(zze,"STRONG",{});var sJt=s(Pwe);HUr=r(sJt,"clip"),sJt.forEach(t),JUr=r(zze," \u2014 "),fre=n(zze,"A",{href:!0});var lJt=s(fre);YUr=r(lJt,"FlaxCLIPModel"),lJt.forEach(t),KUr=r(zze," (CLIP model)"),zze.forEach(t),ZUr=i(ae),f0=n(ae,"LI",{});var Wze=s(f0);Bwe=n(Wze,"STRONG",{});var iJt=s(Bwe);eHr=r(iJt,"distilbert"),iJt.forEach(t),oHr=r(Wze," \u2014 "),mre=n(Wze,"A",{href:!0});var dJt=s(mre);rHr=r(dJt,"FlaxDistilBertModel"),dJt.forEach(t),tHr=r(Wze," (DistilBERT model)"),Wze.forEach(t),aHr=i(ae),m0=n(ae,"LI",{});var Qze=s(m0);Iwe=n(Qze,"STRONG",{});var cJt=s(Iwe);nHr=r(cJt,"electra"),cJt.forEach(t),sHr=r(Qze," \u2014 "),gre=n(Qze,"A",{href:!0});var fJt=s(gre);lHr=r(fJt,"FlaxElectraModel"),fJt.forEach(t),iHr=r(Qze," (ELECTRA model)"),Qze.forEach(t),dHr=i(ae),g0=n(ae,"LI",{});var Uze=s(g0);Nwe=n(Uze,"STRONG",{});var mJt=s(Nwe);cHr=r(mJt,"gpt2"),mJt.forEach(t),fHr=r(Uze," \u2014 "),hre=n(Uze,"A",{href:!0});var gJt=s(hre);mHr=r(gJt,"FlaxGPT2Model"),gJt.forEach(t),gHr=r(Uze," (OpenAI GPT-2 model)"),Uze.forEach(t),hHr=i(ae),h0=n(ae,"LI",{});var Hze=s(h0);qwe=n(Hze,"STRONG",{});var hJt=s(qwe);pHr=r(hJt,"gpt_neo"),hJt.forEach(t),_Hr=r(Hze," \u2014 "),pre=n(Hze,"A",{href:!0});var pJt=s(pre);uHr=r(pJt,"FlaxGPTNeoModel"),pJt.forEach(t),bHr=r(Hze," (GPT Neo model)"),Hze.forEach(t),vHr=i(ae),p0=n(ae,"LI",{});var Jze=s(p0);jwe=n(Jze,"STRONG",{});var _Jt=s(jwe);FHr=r(_Jt,"gptj"),_Jt.forEach(t),THr=r(Jze," \u2014 "),_re=n(Jze,"A",{href:!0});var uJt=s(_re);MHr=r(uJt,"FlaxGPTJModel"),uJt.forEach(t),EHr=r(Jze," (GPT-J model)"),Jze.forEach(t),CHr=i(ae),_0=n(ae,"LI",{});var Yze=s(_0);Dwe=n(Yze,"STRONG",{});var bJt=s(Dwe);wHr=r(bJt,"longt5"),bJt.forEach(t),AHr=r(Yze," \u2014 "),ure=n(Yze,"A",{href:!0});var vJt=s(ure);LHr=r(vJt,"FlaxLongT5Model"),vJt.forEach(t),yHr=r(Yze," (LongT5 model)"),Yze.forEach(t),xHr=i(ae),u0=n(ae,"LI",{});var Kze=s(u0);Gwe=n(Kze,"STRONG",{});var FJt=s(Gwe);$Hr=r(FJt,"marian"),FJt.forEach(t),kHr=r(Kze," \u2014 "),bre=n(Kze,"A",{href:!0});var TJt=s(bre);SHr=r(TJt,"FlaxMarianModel"),TJt.forEach(t),RHr=r(Kze," (Marian model)"),Kze.forEach(t),PHr=i(ae),b0=n(ae,"LI",{});var Zze=s(b0);Owe=n(Zze,"STRONG",{});var MJt=s(Owe);BHr=r(MJt,"mbart"),MJt.forEach(t),IHr=r(Zze," \u2014 "),vre=n(Zze,"A",{href:!0});var EJt=s(vre);NHr=r(EJt,"FlaxMBartModel"),EJt.forEach(t),qHr=r(Zze," (mBART model)"),Zze.forEach(t),jHr=i(ae),v0=n(ae,"LI",{});var eWe=s(v0);Vwe=n(eWe,"STRONG",{});var CJt=s(Vwe);DHr=r(CJt,"mt5"),CJt.forEach(t),GHr=r(eWe," \u2014 "),Fre=n(eWe,"A",{href:!0});var wJt=s(Fre);OHr=r(wJt,"FlaxMT5Model"),wJt.forEach(t),VHr=r(eWe," (MT5 model)"),eWe.forEach(t),XHr=i(ae),F0=n(ae,"LI",{});var oWe=s(F0);Xwe=n(oWe,"STRONG",{});var AJt=s(Xwe);zHr=r(AJt,"opt"),AJt.forEach(t),WHr=r(oWe," \u2014 "),Tre=n(oWe,"A",{href:!0});var LJt=s(Tre);QHr=r(LJt,"FlaxOPTModel"),LJt.forEach(t),UHr=r(oWe," (OPT model)"),oWe.forEach(t),HHr=i(ae),T0=n(ae,"LI",{});var rWe=s(T0);zwe=n(rWe,"STRONG",{});var yJt=s(zwe);JHr=r(yJt,"pegasus"),yJt.forEach(t),YHr=r(rWe," \u2014 "),Mre=n(rWe,"A",{href:!0});var xJt=s(Mre);KHr=r(xJt,"FlaxPegasusModel"),xJt.forEach(t),ZHr=r(rWe," (Pegasus model)"),rWe.forEach(t),eJr=i(ae),M0=n(ae,"LI",{});var tWe=s(M0);Wwe=n(tWe,"STRONG",{});var $Jt=s(Wwe);oJr=r($Jt,"roberta"),$Jt.forEach(t),rJr=r(tWe," \u2014 "),Ere=n(tWe,"A",{href:!0});var kJt=s(Ere);tJr=r(kJt,"FlaxRobertaModel"),kJt.forEach(t),aJr=r(tWe," (RoBERTa model)"),tWe.forEach(t),nJr=i(ae),E0=n(ae,"LI",{});var aWe=s(E0);Qwe=n(aWe,"STRONG",{});var SJt=s(Qwe);sJr=r(SJt,"roformer"),SJt.forEach(t),lJr=r(aWe," \u2014 "),Cre=n(aWe,"A",{href:!0});var RJt=s(Cre);iJr=r(RJt,"FlaxRoFormerModel"),RJt.forEach(t),dJr=r(aWe," (RoFormer model)"),aWe.forEach(t),cJr=i(ae),C0=n(ae,"LI",{});var nWe=s(C0);Uwe=n(nWe,"STRONG",{});var PJt=s(Uwe);fJr=r(PJt,"t5"),PJt.forEach(t),mJr=r(nWe," \u2014 "),wre=n(nWe,"A",{href:!0});var BJt=s(wre);gJr=r(BJt,"FlaxT5Model"),BJt.forEach(t),hJr=r(nWe," (T5 model)"),nWe.forEach(t),pJr=i(ae),w0=n(ae,"LI",{});var sWe=s(w0);Hwe=n(sWe,"STRONG",{});var IJt=s(Hwe);_Jr=r(IJt,"vision-text-dual-encoder"),IJt.forEach(t),uJr=r(sWe," \u2014 "),Are=n(sWe,"A",{href:!0});var NJt=s(Are);bJr=r(NJt,"FlaxVisionTextDualEncoderModel"),NJt.forEach(t),vJr=r(sWe," (VisionTextDualEncoder model)"),sWe.forEach(t),FJr=i(ae),A0=n(ae,"LI",{});var lWe=s(A0);Jwe=n(lWe,"STRONG",{});var qJt=s(Jwe);TJr=r(qJt,"vit"),qJt.forEach(t),MJr=r(lWe," \u2014 "),Lre=n(lWe,"A",{href:!0});var jJt=s(Lre);EJr=r(jJt,"FlaxViTModel"),jJt.forEach(t),CJr=r(lWe," (ViT model)"),lWe.forEach(t),wJr=i(ae),L0=n(ae,"LI",{});var iWe=s(L0);Ywe=n(iWe,"STRONG",{});var DJt=s(Ywe);AJr=r(DJt,"wav2vec2"),DJt.forEach(t),LJr=r(iWe," \u2014 "),yre=n(iWe,"A",{href:!0});var GJt=s(yre);yJr=r(GJt,"FlaxWav2Vec2Model"),GJt.forEach(t),xJr=r(iWe," (Wav2Vec2 model)"),iWe.forEach(t),$Jr=i(ae),y0=n(ae,"LI",{});var dWe=s(y0);Kwe=n(dWe,"STRONG",{});var OJt=s(Kwe);kJr=r(OJt,"xglm"),OJt.forEach(t),SJr=r(dWe," \u2014 "),xre=n(dWe,"A",{href:!0});var VJt=s(xre);RJr=r(VJt,"FlaxXGLMModel"),VJt.forEach(t),PJr=r(dWe," (XGLM model)"),dWe.forEach(t),BJr=i(ae),x0=n(ae,"LI",{});var cWe=s(x0);Zwe=n(cWe,"STRONG",{});var XJt=s(Zwe);IJr=r(XJt,"xlm-roberta"),XJt.forEach(t),NJr=r(cWe," \u2014 "),$re=n(cWe,"A",{href:!0});var zJt=s($re);qJr=r(zJt,"FlaxXLMRobertaModel"),zJt.forEach(t),jJr=r(cWe," (XLM-RoBERTa model)"),cWe.forEach(t),ae.forEach(t),DJr=i(vi),T($0.$$.fragment,vi),vi.forEach(t),bi.forEach(t),LHe=i(f),bf=n(f,"H2",{class:!0});var GYe=s(bf);k0=n(GYe,"A",{id:!0,class:!0,href:!0});var WJt=s(k0);eAe=n(WJt,"SPAN",{});var QJt=s(eAe);T(Sk.$$.fragment,QJt),QJt.forEach(t),WJt.forEach(t),GJr=i(GYe),oAe=n(GYe,"SPAN",{});var UJt=s(oAe);OJr=r(UJt,"FlaxAutoModelForCausalLM"),UJt.forEach(t),GYe.forEach(t),yHe=i(f),Fr=n(f,"DIV",{class:!0});var Fi=s(Fr);T(Rk.$$.fragment,Fi),VJr=i(Fi),vf=n(Fi,"P",{});var hse=s(vf);XJr=r(hse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kre=n(hse,"A",{href:!0});var HJt=s(kre);zJr=r(HJt,"from_pretrained()"),HJt.forEach(t),WJr=r(hse," class method or the "),Sre=n(hse,"A",{href:!0});var JJt=s(Sre);QJr=r(JJt,"from_config()"),JJt.forEach(t),UJr=r(hse,` class
method.`),hse.forEach(t),HJr=i(Fi),Pk=n(Fi,"P",{});var OYe=s(Pk);JJr=r(OYe,"This class cannot be instantiated directly using "),rAe=n(OYe,"CODE",{});var YJt=s(rAe);YJr=r(YJt,"__init__()"),YJt.forEach(t),KJr=r(OYe," (throws an error)."),OYe.forEach(t),ZJr=i(Fi),ea=n(Fi,"DIV",{class:!0});var GL=s(ea);T(Bk.$$.fragment,GL),eYr=i(GL),tAe=n(GL,"P",{});var KJt=s(tAe);oYr=r(KJt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),KJt.forEach(t),rYr=i(GL),Ff=n(GL,"P",{});var pse=s(Ff);tYr=r(pse,`Note:
Loading a model from its configuration file does `),aAe=n(pse,"STRONG",{});var ZJt=s(aAe);aYr=r(ZJt,"not"),ZJt.forEach(t),nYr=r(pse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rre=n(pse,"A",{href:!0});var eYt=s(Rre);sYr=r(eYt,"from_pretrained()"),eYt.forEach(t),lYr=r(pse," to load the model weights."),pse.forEach(t),iYr=i(GL),T(S0.$$.fragment,GL),GL.forEach(t),dYr=i(Fi),Hr=n(Fi,"DIV",{class:!0});var Ti=s(Hr);T(Ik.$$.fragment,Ti),cYr=i(Ti),nAe=n(Ti,"P",{});var oYt=s(nAe);fYr=r(oYt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),oYt.forEach(t),mYr=i(Ti),Sn=n(Ti,"P",{});var OL=s(Sn);gYr=r(OL,"The model class to instantiate is selected based on the "),sAe=n(OL,"CODE",{});var rYt=s(sAe);hYr=r(rYt,"model_type"),rYt.forEach(t),pYr=r(OL,` property of the config object (either
passed as an argument or loaded from `),lAe=n(OL,"CODE",{});var tYt=s(lAe);_Yr=r(tYt,"pretrained_model_name_or_path"),tYt.forEach(t),uYr=r(OL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iAe=n(OL,"CODE",{});var aYt=s(iAe);bYr=r(aYt,"pretrained_model_name_or_path"),aYt.forEach(t),vYr=r(OL,":"),OL.forEach(t),FYr=i(Ti),xe=n(Ti,"UL",{});var Ne=s(xe);R0=n(Ne,"LI",{});var fWe=s(R0);dAe=n(fWe,"STRONG",{});var nYt=s(dAe);TYr=r(nYt,"bart"),nYt.forEach(t),MYr=r(fWe," \u2014 "),Pre=n(fWe,"A",{href:!0});var sYt=s(Pre);EYr=r(sYt,"FlaxBartForCausalLM"),sYt.forEach(t),CYr=r(fWe," (BART model)"),fWe.forEach(t),wYr=i(Ne),P0=n(Ne,"LI",{});var mWe=s(P0);cAe=n(mWe,"STRONG",{});var lYt=s(cAe);AYr=r(lYt,"bert"),lYt.forEach(t),LYr=r(mWe," \u2014 "),Bre=n(mWe,"A",{href:!0});var iYt=s(Bre);yYr=r(iYt,"FlaxBertForCausalLM"),iYt.forEach(t),xYr=r(mWe," (BERT model)"),mWe.forEach(t),$Yr=i(Ne),B0=n(Ne,"LI",{});var gWe=s(B0);fAe=n(gWe,"STRONG",{});var dYt=s(fAe);kYr=r(dYt,"big_bird"),dYt.forEach(t),SYr=r(gWe," \u2014 "),Ire=n(gWe,"A",{href:!0});var cYt=s(Ire);RYr=r(cYt,"FlaxBigBirdForCausalLM"),cYt.forEach(t),PYr=r(gWe," (BigBird model)"),gWe.forEach(t),BYr=i(Ne),I0=n(Ne,"LI",{});var hWe=s(I0);mAe=n(hWe,"STRONG",{});var fYt=s(mAe);IYr=r(fYt,"electra"),fYt.forEach(t),NYr=r(hWe," \u2014 "),Nre=n(hWe,"A",{href:!0});var mYt=s(Nre);qYr=r(mYt,"FlaxElectraForCausalLM"),mYt.forEach(t),jYr=r(hWe," (ELECTRA model)"),hWe.forEach(t),DYr=i(Ne),N0=n(Ne,"LI",{});var pWe=s(N0);gAe=n(pWe,"STRONG",{});var gYt=s(gAe);GYr=r(gYt,"gpt2"),gYt.forEach(t),OYr=r(pWe," \u2014 "),qre=n(pWe,"A",{href:!0});var hYt=s(qre);VYr=r(hYt,"FlaxGPT2LMHeadModel"),hYt.forEach(t),XYr=r(pWe," (OpenAI GPT-2 model)"),pWe.forEach(t),zYr=i(Ne),q0=n(Ne,"LI",{});var _We=s(q0);hAe=n(_We,"STRONG",{});var pYt=s(hAe);WYr=r(pYt,"gpt_neo"),pYt.forEach(t),QYr=r(_We," \u2014 "),jre=n(_We,"A",{href:!0});var _Yt=s(jre);UYr=r(_Yt,"FlaxGPTNeoForCausalLM"),_Yt.forEach(t),HYr=r(_We," (GPT Neo model)"),_We.forEach(t),JYr=i(Ne),j0=n(Ne,"LI",{});var uWe=s(j0);pAe=n(uWe,"STRONG",{});var uYt=s(pAe);YYr=r(uYt,"gptj"),uYt.forEach(t),KYr=r(uWe," \u2014 "),Dre=n(uWe,"A",{href:!0});var bYt=s(Dre);ZYr=r(bYt,"FlaxGPTJForCausalLM"),bYt.forEach(t),eKr=r(uWe," (GPT-J model)"),uWe.forEach(t),oKr=i(Ne),D0=n(Ne,"LI",{});var bWe=s(D0);_Ae=n(bWe,"STRONG",{});var vYt=s(_Ae);rKr=r(vYt,"opt"),vYt.forEach(t),tKr=r(bWe," \u2014 "),Gre=n(bWe,"A",{href:!0});var FYt=s(Gre);aKr=r(FYt,"FlaxOPTForCausalLM"),FYt.forEach(t),nKr=r(bWe," (OPT model)"),bWe.forEach(t),sKr=i(Ne),G0=n(Ne,"LI",{});var vWe=s(G0);uAe=n(vWe,"STRONG",{});var TYt=s(uAe);lKr=r(TYt,"roberta"),TYt.forEach(t),iKr=r(vWe," \u2014 "),Ore=n(vWe,"A",{href:!0});var MYt=s(Ore);dKr=r(MYt,"FlaxRobertaForCausalLM"),MYt.forEach(t),cKr=r(vWe," (RoBERTa model)"),vWe.forEach(t),fKr=i(Ne),O0=n(Ne,"LI",{});var FWe=s(O0);bAe=n(FWe,"STRONG",{});var EYt=s(bAe);mKr=r(EYt,"xglm"),EYt.forEach(t),gKr=r(FWe," \u2014 "),Vre=n(FWe,"A",{href:!0});var CYt=s(Vre);hKr=r(CYt,"FlaxXGLMForCausalLM"),CYt.forEach(t),pKr=r(FWe," (XGLM model)"),FWe.forEach(t),Ne.forEach(t),_Kr=i(Ti),T(V0.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),xHe=i(f),Tf=n(f,"H2",{class:!0});var VYe=s(Tf);X0=n(VYe,"A",{id:!0,class:!0,href:!0});var wYt=s(X0);vAe=n(wYt,"SPAN",{});var AYt=s(vAe);T(Nk.$$.fragment,AYt),AYt.forEach(t),wYt.forEach(t),uKr=i(VYe),FAe=n(VYe,"SPAN",{});var LYt=s(FAe);bKr=r(LYt,"FlaxAutoModelForPreTraining"),LYt.forEach(t),VYe.forEach(t),$He=i(f),Tr=n(f,"DIV",{class:!0});var Mi=s(Tr);T(qk.$$.fragment,Mi),vKr=i(Mi),Mf=n(Mi,"P",{});var _se=s(Mf);FKr=r(_se,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Xre=n(_se,"A",{href:!0});var yYt=s(Xre);TKr=r(yYt,"from_pretrained()"),yYt.forEach(t),MKr=r(_se," class method or the "),zre=n(_se,"A",{href:!0});var xYt=s(zre);EKr=r(xYt,"from_config()"),xYt.forEach(t),CKr=r(_se,` class
method.`),_se.forEach(t),wKr=i(Mi),jk=n(Mi,"P",{});var XYe=s(jk);AKr=r(XYe,"This class cannot be instantiated directly using "),TAe=n(XYe,"CODE",{});var $Yt=s(TAe);LKr=r($Yt,"__init__()"),$Yt.forEach(t),yKr=r(XYe," (throws an error)."),XYe.forEach(t),xKr=i(Mi),oa=n(Mi,"DIV",{class:!0});var VL=s(oa);T(Dk.$$.fragment,VL),$Kr=i(VL),MAe=n(VL,"P",{});var kYt=s(MAe);kKr=r(kYt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kYt.forEach(t),SKr=i(VL),Ef=n(VL,"P",{});var use=s(Ef);RKr=r(use,`Note:
Loading a model from its configuration file does `),EAe=n(use,"STRONG",{});var SYt=s(EAe);PKr=r(SYt,"not"),SYt.forEach(t),BKr=r(use,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wre=n(use,"A",{href:!0});var RYt=s(Wre);IKr=r(RYt,"from_pretrained()"),RYt.forEach(t),NKr=r(use," to load the model weights."),use.forEach(t),qKr=i(VL),T(z0.$$.fragment,VL),VL.forEach(t),jKr=i(Mi),Jr=n(Mi,"DIV",{class:!0});var Ei=s(Jr);T(Gk.$$.fragment,Ei),DKr=i(Ei),CAe=n(Ei,"P",{});var PYt=s(CAe);GKr=r(PYt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),PYt.forEach(t),OKr=i(Ei),Rn=n(Ei,"P",{});var XL=s(Rn);VKr=r(XL,"The model class to instantiate is selected based on the "),wAe=n(XL,"CODE",{});var BYt=s(wAe);XKr=r(BYt,"model_type"),BYt.forEach(t),zKr=r(XL,` property of the config object (either
passed as an argument or loaded from `),AAe=n(XL,"CODE",{});var IYt=s(AAe);WKr=r(IYt,"pretrained_model_name_or_path"),IYt.forEach(t),QKr=r(XL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LAe=n(XL,"CODE",{});var NYt=s(LAe);UKr=r(NYt,"pretrained_model_name_or_path"),NYt.forEach(t),HKr=r(XL,":"),XL.forEach(t),JKr=i(Ei),Ee=n(Ei,"UL",{});var we=s(Ee);W0=n(we,"LI",{});var TWe=s(W0);yAe=n(TWe,"STRONG",{});var qYt=s(yAe);YKr=r(qYt,"albert"),qYt.forEach(t),KKr=r(TWe," \u2014 "),Qre=n(TWe,"A",{href:!0});var jYt=s(Qre);ZKr=r(jYt,"FlaxAlbertForPreTraining"),jYt.forEach(t),eZr=r(TWe," (ALBERT model)"),TWe.forEach(t),oZr=i(we),Q0=n(we,"LI",{});var MWe=s(Q0);xAe=n(MWe,"STRONG",{});var DYt=s(xAe);rZr=r(DYt,"bart"),DYt.forEach(t),tZr=r(MWe," \u2014 "),Ure=n(MWe,"A",{href:!0});var GYt=s(Ure);aZr=r(GYt,"FlaxBartForConditionalGeneration"),GYt.forEach(t),nZr=r(MWe," (BART model)"),MWe.forEach(t),sZr=i(we),U0=n(we,"LI",{});var EWe=s(U0);$Ae=n(EWe,"STRONG",{});var OYt=s($Ae);lZr=r(OYt,"bert"),OYt.forEach(t),iZr=r(EWe," \u2014 "),Hre=n(EWe,"A",{href:!0});var VYt=s(Hre);dZr=r(VYt,"FlaxBertForPreTraining"),VYt.forEach(t),cZr=r(EWe," (BERT model)"),EWe.forEach(t),fZr=i(we),H0=n(we,"LI",{});var CWe=s(H0);kAe=n(CWe,"STRONG",{});var XYt=s(kAe);mZr=r(XYt,"big_bird"),XYt.forEach(t),gZr=r(CWe," \u2014 "),Jre=n(CWe,"A",{href:!0});var zYt=s(Jre);hZr=r(zYt,"FlaxBigBirdForPreTraining"),zYt.forEach(t),pZr=r(CWe," (BigBird model)"),CWe.forEach(t),_Zr=i(we),J0=n(we,"LI",{});var wWe=s(J0);SAe=n(wWe,"STRONG",{});var WYt=s(SAe);uZr=r(WYt,"electra"),WYt.forEach(t),bZr=r(wWe," \u2014 "),Yre=n(wWe,"A",{href:!0});var QYt=s(Yre);vZr=r(QYt,"FlaxElectraForPreTraining"),QYt.forEach(t),FZr=r(wWe," (ELECTRA model)"),wWe.forEach(t),TZr=i(we),Y0=n(we,"LI",{});var AWe=s(Y0);RAe=n(AWe,"STRONG",{});var UYt=s(RAe);MZr=r(UYt,"longt5"),UYt.forEach(t),EZr=r(AWe," \u2014 "),Kre=n(AWe,"A",{href:!0});var HYt=s(Kre);CZr=r(HYt,"FlaxLongT5ForConditionalGeneration"),HYt.forEach(t),wZr=r(AWe," (LongT5 model)"),AWe.forEach(t),AZr=i(we),K0=n(we,"LI",{});var LWe=s(K0);PAe=n(LWe,"STRONG",{});var JYt=s(PAe);LZr=r(JYt,"mbart"),JYt.forEach(t),yZr=r(LWe," \u2014 "),Zre=n(LWe,"A",{href:!0});var YYt=s(Zre);xZr=r(YYt,"FlaxMBartForConditionalGeneration"),YYt.forEach(t),$Zr=r(LWe," (mBART model)"),LWe.forEach(t),kZr=i(we),Z0=n(we,"LI",{});var yWe=s(Z0);BAe=n(yWe,"STRONG",{});var KYt=s(BAe);SZr=r(KYt,"mt5"),KYt.forEach(t),RZr=r(yWe," \u2014 "),ete=n(yWe,"A",{href:!0});var ZYt=s(ete);PZr=r(ZYt,"FlaxMT5ForConditionalGeneration"),ZYt.forEach(t),BZr=r(yWe," (MT5 model)"),yWe.forEach(t),IZr=i(we),ew=n(we,"LI",{});var xWe=s(ew);IAe=n(xWe,"STRONG",{});var eKt=s(IAe);NZr=r(eKt,"roberta"),eKt.forEach(t),qZr=r(xWe," \u2014 "),ote=n(xWe,"A",{href:!0});var oKt=s(ote);jZr=r(oKt,"FlaxRobertaForMaskedLM"),oKt.forEach(t),DZr=r(xWe," (RoBERTa model)"),xWe.forEach(t),GZr=i(we),ow=n(we,"LI",{});var $We=s(ow);NAe=n($We,"STRONG",{});var rKt=s(NAe);OZr=r(rKt,"roformer"),rKt.forEach(t),VZr=r($We," \u2014 "),rte=n($We,"A",{href:!0});var tKt=s(rte);XZr=r(tKt,"FlaxRoFormerForMaskedLM"),tKt.forEach(t),zZr=r($We," (RoFormer model)"),$We.forEach(t),WZr=i(we),rw=n(we,"LI",{});var kWe=s(rw);qAe=n(kWe,"STRONG",{});var aKt=s(qAe);QZr=r(aKt,"t5"),aKt.forEach(t),UZr=r(kWe," \u2014 "),tte=n(kWe,"A",{href:!0});var nKt=s(tte);HZr=r(nKt,"FlaxT5ForConditionalGeneration"),nKt.forEach(t),JZr=r(kWe," (T5 model)"),kWe.forEach(t),YZr=i(we),tw=n(we,"LI",{});var SWe=s(tw);jAe=n(SWe,"STRONG",{});var sKt=s(jAe);KZr=r(sKt,"wav2vec2"),sKt.forEach(t),ZZr=r(SWe," \u2014 "),ate=n(SWe,"A",{href:!0});var lKt=s(ate);eet=r(lKt,"FlaxWav2Vec2ForPreTraining"),lKt.forEach(t),oet=r(SWe," (Wav2Vec2 model)"),SWe.forEach(t),ret=i(we),aw=n(we,"LI",{});var RWe=s(aw);DAe=n(RWe,"STRONG",{});var iKt=s(DAe);tet=r(iKt,"xlm-roberta"),iKt.forEach(t),aet=r(RWe," \u2014 "),nte=n(RWe,"A",{href:!0});var dKt=s(nte);net=r(dKt,"FlaxXLMRobertaForMaskedLM"),dKt.forEach(t),set=r(RWe," (XLM-RoBERTa model)"),RWe.forEach(t),we.forEach(t),iet=i(Ei),T(nw.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),kHe=i(f),Cf=n(f,"H2",{class:!0});var zYe=s(Cf);sw=n(zYe,"A",{id:!0,class:!0,href:!0});var cKt=s(sw);GAe=n(cKt,"SPAN",{});var fKt=s(GAe);T(Ok.$$.fragment,fKt),fKt.forEach(t),cKt.forEach(t),det=i(zYe),OAe=n(zYe,"SPAN",{});var mKt=s(OAe);cet=r(mKt,"FlaxAutoModelForMaskedLM"),mKt.forEach(t),zYe.forEach(t),SHe=i(f),Mr=n(f,"DIV",{class:!0});var Ci=s(Mr);T(Vk.$$.fragment,Ci),fet=i(Ci),wf=n(Ci,"P",{});var bse=s(wf);met=r(bse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ste=n(bse,"A",{href:!0});var gKt=s(ste);get=r(gKt,"from_pretrained()"),gKt.forEach(t),het=r(bse," class method or the "),lte=n(bse,"A",{href:!0});var hKt=s(lte);pet=r(hKt,"from_config()"),hKt.forEach(t),_et=r(bse,` class
method.`),bse.forEach(t),uet=i(Ci),Xk=n(Ci,"P",{});var WYe=s(Xk);bet=r(WYe,"This class cannot be instantiated directly using "),VAe=n(WYe,"CODE",{});var pKt=s(VAe);vet=r(pKt,"__init__()"),pKt.forEach(t),Fet=r(WYe," (throws an error)."),WYe.forEach(t),Tet=i(Ci),ra=n(Ci,"DIV",{class:!0});var zL=s(ra);T(zk.$$.fragment,zL),Met=i(zL),XAe=n(zL,"P",{});var _Kt=s(XAe);Eet=r(_Kt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Kt.forEach(t),Cet=i(zL),Af=n(zL,"P",{});var vse=s(Af);wet=r(vse,`Note:
Loading a model from its configuration file does `),zAe=n(vse,"STRONG",{});var uKt=s(zAe);Aet=r(uKt,"not"),uKt.forEach(t),Let=r(vse,` load the model weights. It only affects the
model\u2019s configuration. Use `),ite=n(vse,"A",{href:!0});var bKt=s(ite);yet=r(bKt,"from_pretrained()"),bKt.forEach(t),xet=r(vse," to load the model weights."),vse.forEach(t),$et=i(zL),T(lw.$$.fragment,zL),zL.forEach(t),ket=i(Ci),Yr=n(Ci,"DIV",{class:!0});var wi=s(Yr);T(Wk.$$.fragment,wi),Set=i(wi),WAe=n(wi,"P",{});var vKt=s(WAe);Ret=r(vKt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vKt.forEach(t),Pet=i(wi),Pn=n(wi,"P",{});var WL=s(Pn);Bet=r(WL,"The model class to instantiate is selected based on the "),QAe=n(WL,"CODE",{});var FKt=s(QAe);Iet=r(FKt,"model_type"),FKt.forEach(t),Net=r(WL,` property of the config object (either
passed as an argument or loaded from `),UAe=n(WL,"CODE",{});var TKt=s(UAe);qet=r(TKt,"pretrained_model_name_or_path"),TKt.forEach(t),jet=r(WL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HAe=n(WL,"CODE",{});var MKt=s(HAe);Det=r(MKt,"pretrained_model_name_or_path"),MKt.forEach(t),Get=r(WL,":"),WL.forEach(t),Oet=i(wi),$e=n(wi,"UL",{});var qe=s($e);iw=n(qe,"LI",{});var PWe=s(iw);JAe=n(PWe,"STRONG",{});var EKt=s(JAe);Vet=r(EKt,"albert"),EKt.forEach(t),Xet=r(PWe," \u2014 "),dte=n(PWe,"A",{href:!0});var CKt=s(dte);zet=r(CKt,"FlaxAlbertForMaskedLM"),CKt.forEach(t),Wet=r(PWe," (ALBERT model)"),PWe.forEach(t),Qet=i(qe),dw=n(qe,"LI",{});var BWe=s(dw);YAe=n(BWe,"STRONG",{});var wKt=s(YAe);Uet=r(wKt,"bart"),wKt.forEach(t),Het=r(BWe," \u2014 "),cte=n(BWe,"A",{href:!0});var AKt=s(cte);Jet=r(AKt,"FlaxBartForConditionalGeneration"),AKt.forEach(t),Yet=r(BWe," (BART model)"),BWe.forEach(t),Ket=i(qe),cw=n(qe,"LI",{});var IWe=s(cw);KAe=n(IWe,"STRONG",{});var LKt=s(KAe);Zet=r(LKt,"bert"),LKt.forEach(t),eot=r(IWe," \u2014 "),fte=n(IWe,"A",{href:!0});var yKt=s(fte);oot=r(yKt,"FlaxBertForMaskedLM"),yKt.forEach(t),rot=r(IWe," (BERT model)"),IWe.forEach(t),tot=i(qe),fw=n(qe,"LI",{});var NWe=s(fw);ZAe=n(NWe,"STRONG",{});var xKt=s(ZAe);aot=r(xKt,"big_bird"),xKt.forEach(t),not=r(NWe," \u2014 "),mte=n(NWe,"A",{href:!0});var $Kt=s(mte);sot=r($Kt,"FlaxBigBirdForMaskedLM"),$Kt.forEach(t),lot=r(NWe," (BigBird model)"),NWe.forEach(t),iot=i(qe),mw=n(qe,"LI",{});var qWe=s(mw);e7e=n(qWe,"STRONG",{});var kKt=s(e7e);dot=r(kKt,"distilbert"),kKt.forEach(t),cot=r(qWe," \u2014 "),gte=n(qWe,"A",{href:!0});var SKt=s(gte);fot=r(SKt,"FlaxDistilBertForMaskedLM"),SKt.forEach(t),mot=r(qWe," (DistilBERT model)"),qWe.forEach(t),got=i(qe),gw=n(qe,"LI",{});var jWe=s(gw);o7e=n(jWe,"STRONG",{});var RKt=s(o7e);hot=r(RKt,"electra"),RKt.forEach(t),pot=r(jWe," \u2014 "),hte=n(jWe,"A",{href:!0});var PKt=s(hte);_ot=r(PKt,"FlaxElectraForMaskedLM"),PKt.forEach(t),uot=r(jWe," (ELECTRA model)"),jWe.forEach(t),bot=i(qe),hw=n(qe,"LI",{});var DWe=s(hw);r7e=n(DWe,"STRONG",{});var BKt=s(r7e);vot=r(BKt,"mbart"),BKt.forEach(t),Fot=r(DWe," \u2014 "),pte=n(DWe,"A",{href:!0});var IKt=s(pte);Tot=r(IKt,"FlaxMBartForConditionalGeneration"),IKt.forEach(t),Mot=r(DWe," (mBART model)"),DWe.forEach(t),Eot=i(qe),pw=n(qe,"LI",{});var GWe=s(pw);t7e=n(GWe,"STRONG",{});var NKt=s(t7e);Cot=r(NKt,"roberta"),NKt.forEach(t),wot=r(GWe," \u2014 "),_te=n(GWe,"A",{href:!0});var qKt=s(_te);Aot=r(qKt,"FlaxRobertaForMaskedLM"),qKt.forEach(t),Lot=r(GWe," (RoBERTa model)"),GWe.forEach(t),yot=i(qe),_w=n(qe,"LI",{});var OWe=s(_w);a7e=n(OWe,"STRONG",{});var jKt=s(a7e);xot=r(jKt,"roformer"),jKt.forEach(t),$ot=r(OWe," \u2014 "),ute=n(OWe,"A",{href:!0});var DKt=s(ute);kot=r(DKt,"FlaxRoFormerForMaskedLM"),DKt.forEach(t),Sot=r(OWe," (RoFormer model)"),OWe.forEach(t),Rot=i(qe),uw=n(qe,"LI",{});var VWe=s(uw);n7e=n(VWe,"STRONG",{});var GKt=s(n7e);Pot=r(GKt,"xlm-roberta"),GKt.forEach(t),Bot=r(VWe," \u2014 "),bte=n(VWe,"A",{href:!0});var OKt=s(bte);Iot=r(OKt,"FlaxXLMRobertaForMaskedLM"),OKt.forEach(t),Not=r(VWe," (XLM-RoBERTa model)"),VWe.forEach(t),qe.forEach(t),qot=i(wi),T(bw.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),RHe=i(f),Lf=n(f,"H2",{class:!0});var QYe=s(Lf);vw=n(QYe,"A",{id:!0,class:!0,href:!0});var VKt=s(vw);s7e=n(VKt,"SPAN",{});var XKt=s(s7e);T(Qk.$$.fragment,XKt),XKt.forEach(t),VKt.forEach(t),jot=i(QYe),l7e=n(QYe,"SPAN",{});var zKt=s(l7e);Dot=r(zKt,"FlaxAutoModelForSeq2SeqLM"),zKt.forEach(t),QYe.forEach(t),PHe=i(f),Er=n(f,"DIV",{class:!0});var Ai=s(Er);T(Uk.$$.fragment,Ai),Got=i(Ai),yf=n(Ai,"P",{});var Fse=s(yf);Oot=r(Fse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vte=n(Fse,"A",{href:!0});var WKt=s(vte);Vot=r(WKt,"from_pretrained()"),WKt.forEach(t),Xot=r(Fse," class method or the "),Fte=n(Fse,"A",{href:!0});var QKt=s(Fte);zot=r(QKt,"from_config()"),QKt.forEach(t),Wot=r(Fse,` class
method.`),Fse.forEach(t),Qot=i(Ai),Hk=n(Ai,"P",{});var UYe=s(Hk);Uot=r(UYe,"This class cannot be instantiated directly using "),i7e=n(UYe,"CODE",{});var UKt=s(i7e);Hot=r(UKt,"__init__()"),UKt.forEach(t),Jot=r(UYe," (throws an error)."),UYe.forEach(t),Yot=i(Ai),ta=n(Ai,"DIV",{class:!0});var QL=s(ta);T(Jk.$$.fragment,QL),Kot=i(QL),d7e=n(QL,"P",{});var HKt=s(d7e);Zot=r(HKt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),HKt.forEach(t),ert=i(QL),xf=n(QL,"P",{});var Tse=s(xf);ort=r(Tse,`Note:
Loading a model from its configuration file does `),c7e=n(Tse,"STRONG",{});var JKt=s(c7e);rrt=r(JKt,"not"),JKt.forEach(t),trt=r(Tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tte=n(Tse,"A",{href:!0});var YKt=s(Tte);art=r(YKt,"from_pretrained()"),YKt.forEach(t),nrt=r(Tse," to load the model weights."),Tse.forEach(t),srt=i(QL),T(Fw.$$.fragment,QL),QL.forEach(t),lrt=i(Ai),Kr=n(Ai,"DIV",{class:!0});var Li=s(Kr);T(Yk.$$.fragment,Li),irt=i(Li),f7e=n(Li,"P",{});var KKt=s(f7e);drt=r(KKt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),KKt.forEach(t),crt=i(Li),Bn=n(Li,"P",{});var UL=s(Bn);frt=r(UL,"The model class to instantiate is selected based on the "),m7e=n(UL,"CODE",{});var ZKt=s(m7e);mrt=r(ZKt,"model_type"),ZKt.forEach(t),grt=r(UL,` property of the config object (either
passed as an argument or loaded from `),g7e=n(UL,"CODE",{});var eZt=s(g7e);hrt=r(eZt,"pretrained_model_name_or_path"),eZt.forEach(t),prt=r(UL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h7e=n(UL,"CODE",{});var oZt=s(h7e);_rt=r(oZt,"pretrained_model_name_or_path"),oZt.forEach(t),urt=r(UL,":"),UL.forEach(t),brt=i(Li),ke=n(Li,"UL",{});var je=s(ke);Tw=n(je,"LI",{});var XWe=s(Tw);p7e=n(XWe,"STRONG",{});var rZt=s(p7e);vrt=r(rZt,"bart"),rZt.forEach(t),Frt=r(XWe," \u2014 "),Mte=n(XWe,"A",{href:!0});var tZt=s(Mte);Trt=r(tZt,"FlaxBartForConditionalGeneration"),tZt.forEach(t),Mrt=r(XWe," (BART model)"),XWe.forEach(t),Ert=i(je),Mw=n(je,"LI",{});var zWe=s(Mw);_7e=n(zWe,"STRONG",{});var aZt=s(_7e);Crt=r(aZt,"blenderbot"),aZt.forEach(t),wrt=r(zWe," \u2014 "),Ete=n(zWe,"A",{href:!0});var nZt=s(Ete);Art=r(nZt,"FlaxBlenderbotForConditionalGeneration"),nZt.forEach(t),Lrt=r(zWe," (Blenderbot model)"),zWe.forEach(t),yrt=i(je),Ew=n(je,"LI",{});var WWe=s(Ew);u7e=n(WWe,"STRONG",{});var sZt=s(u7e);xrt=r(sZt,"blenderbot-small"),sZt.forEach(t),$rt=r(WWe," \u2014 "),Cte=n(WWe,"A",{href:!0});var lZt=s(Cte);krt=r(lZt,"FlaxBlenderbotSmallForConditionalGeneration"),lZt.forEach(t),Srt=r(WWe," (BlenderbotSmall model)"),WWe.forEach(t),Rrt=i(je),Cw=n(je,"LI",{});var QWe=s(Cw);b7e=n(QWe,"STRONG",{});var iZt=s(b7e);Prt=r(iZt,"encoder-decoder"),iZt.forEach(t),Brt=r(QWe," \u2014 "),wte=n(QWe,"A",{href:!0});var dZt=s(wte);Irt=r(dZt,"FlaxEncoderDecoderModel"),dZt.forEach(t),Nrt=r(QWe," (Encoder decoder model)"),QWe.forEach(t),qrt=i(je),ww=n(je,"LI",{});var UWe=s(ww);v7e=n(UWe,"STRONG",{});var cZt=s(v7e);jrt=r(cZt,"longt5"),cZt.forEach(t),Drt=r(UWe," \u2014 "),Ate=n(UWe,"A",{href:!0});var fZt=s(Ate);Grt=r(fZt,"FlaxLongT5ForConditionalGeneration"),fZt.forEach(t),Ort=r(UWe," (LongT5 model)"),UWe.forEach(t),Vrt=i(je),Aw=n(je,"LI",{});var HWe=s(Aw);F7e=n(HWe,"STRONG",{});var mZt=s(F7e);Xrt=r(mZt,"marian"),mZt.forEach(t),zrt=r(HWe," \u2014 "),Lte=n(HWe,"A",{href:!0});var gZt=s(Lte);Wrt=r(gZt,"FlaxMarianMTModel"),gZt.forEach(t),Qrt=r(HWe," (Marian model)"),HWe.forEach(t),Urt=i(je),Lw=n(je,"LI",{});var JWe=s(Lw);T7e=n(JWe,"STRONG",{});var hZt=s(T7e);Hrt=r(hZt,"mbart"),hZt.forEach(t),Jrt=r(JWe," \u2014 "),yte=n(JWe,"A",{href:!0});var pZt=s(yte);Yrt=r(pZt,"FlaxMBartForConditionalGeneration"),pZt.forEach(t),Krt=r(JWe," (mBART model)"),JWe.forEach(t),Zrt=i(je),yw=n(je,"LI",{});var YWe=s(yw);M7e=n(YWe,"STRONG",{});var _Zt=s(M7e);ett=r(_Zt,"mt5"),_Zt.forEach(t),ott=r(YWe," \u2014 "),xte=n(YWe,"A",{href:!0});var uZt=s(xte);rtt=r(uZt,"FlaxMT5ForConditionalGeneration"),uZt.forEach(t),ttt=r(YWe," (MT5 model)"),YWe.forEach(t),att=i(je),xw=n(je,"LI",{});var KWe=s(xw);E7e=n(KWe,"STRONG",{});var bZt=s(E7e);ntt=r(bZt,"pegasus"),bZt.forEach(t),stt=r(KWe," \u2014 "),$te=n(KWe,"A",{href:!0});var vZt=s($te);ltt=r(vZt,"FlaxPegasusForConditionalGeneration"),vZt.forEach(t),itt=r(KWe," (Pegasus model)"),KWe.forEach(t),dtt=i(je),$w=n(je,"LI",{});var ZWe=s($w);C7e=n(ZWe,"STRONG",{});var FZt=s(C7e);ctt=r(FZt,"t5"),FZt.forEach(t),ftt=r(ZWe," \u2014 "),kte=n(ZWe,"A",{href:!0});var TZt=s(kte);mtt=r(TZt,"FlaxT5ForConditionalGeneration"),TZt.forEach(t),gtt=r(ZWe," (T5 model)"),ZWe.forEach(t),je.forEach(t),htt=i(Li),T(kw.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),BHe=i(f),$f=n(f,"H2",{class:!0});var HYe=s($f);Sw=n(HYe,"A",{id:!0,class:!0,href:!0});var MZt=s(Sw);w7e=n(MZt,"SPAN",{});var EZt=s(w7e);T(Kk.$$.fragment,EZt),EZt.forEach(t),MZt.forEach(t),ptt=i(HYe),A7e=n(HYe,"SPAN",{});var CZt=s(A7e);_tt=r(CZt,"FlaxAutoModelForSequenceClassification"),CZt.forEach(t),HYe.forEach(t),IHe=i(f),Cr=n(f,"DIV",{class:!0});var yi=s(Cr);T(Zk.$$.fragment,yi),utt=i(yi),kf=n(yi,"P",{});var Mse=s(kf);btt=r(Mse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ste=n(Mse,"A",{href:!0});var wZt=s(Ste);vtt=r(wZt,"from_pretrained()"),wZt.forEach(t),Ftt=r(Mse," class method or the "),Rte=n(Mse,"A",{href:!0});var AZt=s(Rte);Ttt=r(AZt,"from_config()"),AZt.forEach(t),Mtt=r(Mse,` class
method.`),Mse.forEach(t),Ett=i(yi),eS=n(yi,"P",{});var JYe=s(eS);Ctt=r(JYe,"This class cannot be instantiated directly using "),L7e=n(JYe,"CODE",{});var LZt=s(L7e);wtt=r(LZt,"__init__()"),LZt.forEach(t),Att=r(JYe," (throws an error)."),JYe.forEach(t),Ltt=i(yi),aa=n(yi,"DIV",{class:!0});var HL=s(aa);T(oS.$$.fragment,HL),ytt=i(HL),y7e=n(HL,"P",{});var yZt=s(y7e);xtt=r(yZt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yZt.forEach(t),$tt=i(HL),Sf=n(HL,"P",{});var Ese=s(Sf);ktt=r(Ese,`Note:
Loading a model from its configuration file does `),x7e=n(Ese,"STRONG",{});var xZt=s(x7e);Stt=r(xZt,"not"),xZt.forEach(t),Rtt=r(Ese,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pte=n(Ese,"A",{href:!0});var $Zt=s(Pte);Ptt=r($Zt,"from_pretrained()"),$Zt.forEach(t),Btt=r(Ese," to load the model weights."),Ese.forEach(t),Itt=i(HL),T(Rw.$$.fragment,HL),HL.forEach(t),Ntt=i(yi),Zr=n(yi,"DIV",{class:!0});var xi=s(Zr);T(rS.$$.fragment,xi),qtt=i(xi),$7e=n(xi,"P",{});var kZt=s($7e);jtt=r(kZt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),kZt.forEach(t),Dtt=i(xi),In=n(xi,"P",{});var JL=s(In);Gtt=r(JL,"The model class to instantiate is selected based on the "),k7e=n(JL,"CODE",{});var SZt=s(k7e);Ott=r(SZt,"model_type"),SZt.forEach(t),Vtt=r(JL,` property of the config object (either
passed as an argument or loaded from `),S7e=n(JL,"CODE",{});var RZt=s(S7e);Xtt=r(RZt,"pretrained_model_name_or_path"),RZt.forEach(t),ztt=r(JL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R7e=n(JL,"CODE",{});var PZt=s(R7e);Wtt=r(PZt,"pretrained_model_name_or_path"),PZt.forEach(t),Qtt=r(JL,":"),JL.forEach(t),Utt=i(xi),Se=n(xi,"UL",{});var De=s(Se);Pw=n(De,"LI",{});var eQe=s(Pw);P7e=n(eQe,"STRONG",{});var BZt=s(P7e);Htt=r(BZt,"albert"),BZt.forEach(t),Jtt=r(eQe," \u2014 "),Bte=n(eQe,"A",{href:!0});var IZt=s(Bte);Ytt=r(IZt,"FlaxAlbertForSequenceClassification"),IZt.forEach(t),Ktt=r(eQe," (ALBERT model)"),eQe.forEach(t),Ztt=i(De),Bw=n(De,"LI",{});var oQe=s(Bw);B7e=n(oQe,"STRONG",{});var NZt=s(B7e);eat=r(NZt,"bart"),NZt.forEach(t),oat=r(oQe," \u2014 "),Ite=n(oQe,"A",{href:!0});var qZt=s(Ite);rat=r(qZt,"FlaxBartForSequenceClassification"),qZt.forEach(t),tat=r(oQe," (BART model)"),oQe.forEach(t),aat=i(De),Iw=n(De,"LI",{});var rQe=s(Iw);I7e=n(rQe,"STRONG",{});var jZt=s(I7e);nat=r(jZt,"bert"),jZt.forEach(t),sat=r(rQe," \u2014 "),Nte=n(rQe,"A",{href:!0});var DZt=s(Nte);lat=r(DZt,"FlaxBertForSequenceClassification"),DZt.forEach(t),iat=r(rQe," (BERT model)"),rQe.forEach(t),dat=i(De),Nw=n(De,"LI",{});var tQe=s(Nw);N7e=n(tQe,"STRONG",{});var GZt=s(N7e);cat=r(GZt,"big_bird"),GZt.forEach(t),fat=r(tQe," \u2014 "),qte=n(tQe,"A",{href:!0});var OZt=s(qte);mat=r(OZt,"FlaxBigBirdForSequenceClassification"),OZt.forEach(t),gat=r(tQe," (BigBird model)"),tQe.forEach(t),hat=i(De),qw=n(De,"LI",{});var aQe=s(qw);q7e=n(aQe,"STRONG",{});var VZt=s(q7e);pat=r(VZt,"distilbert"),VZt.forEach(t),_at=r(aQe," \u2014 "),jte=n(aQe,"A",{href:!0});var XZt=s(jte);uat=r(XZt,"FlaxDistilBertForSequenceClassification"),XZt.forEach(t),bat=r(aQe," (DistilBERT model)"),aQe.forEach(t),vat=i(De),jw=n(De,"LI",{});var nQe=s(jw);j7e=n(nQe,"STRONG",{});var zZt=s(j7e);Fat=r(zZt,"electra"),zZt.forEach(t),Tat=r(nQe," \u2014 "),Dte=n(nQe,"A",{href:!0});var WZt=s(Dte);Mat=r(WZt,"FlaxElectraForSequenceClassification"),WZt.forEach(t),Eat=r(nQe," (ELECTRA model)"),nQe.forEach(t),Cat=i(De),Dw=n(De,"LI",{});var sQe=s(Dw);D7e=n(sQe,"STRONG",{});var QZt=s(D7e);wat=r(QZt,"mbart"),QZt.forEach(t),Aat=r(sQe," \u2014 "),Gte=n(sQe,"A",{href:!0});var UZt=s(Gte);Lat=r(UZt,"FlaxMBartForSequenceClassification"),UZt.forEach(t),yat=r(sQe," (mBART model)"),sQe.forEach(t),xat=i(De),Gw=n(De,"LI",{});var lQe=s(Gw);G7e=n(lQe,"STRONG",{});var HZt=s(G7e);$at=r(HZt,"roberta"),HZt.forEach(t),kat=r(lQe," \u2014 "),Ote=n(lQe,"A",{href:!0});var JZt=s(Ote);Sat=r(JZt,"FlaxRobertaForSequenceClassification"),JZt.forEach(t),Rat=r(lQe," (RoBERTa model)"),lQe.forEach(t),Pat=i(De),Ow=n(De,"LI",{});var iQe=s(Ow);O7e=n(iQe,"STRONG",{});var YZt=s(O7e);Bat=r(YZt,"roformer"),YZt.forEach(t),Iat=r(iQe," \u2014 "),Vte=n(iQe,"A",{href:!0});var KZt=s(Vte);Nat=r(KZt,"FlaxRoFormerForSequenceClassification"),KZt.forEach(t),qat=r(iQe," (RoFormer model)"),iQe.forEach(t),jat=i(De),Vw=n(De,"LI",{});var dQe=s(Vw);V7e=n(dQe,"STRONG",{});var ZZt=s(V7e);Dat=r(ZZt,"xlm-roberta"),ZZt.forEach(t),Gat=r(dQe," \u2014 "),Xte=n(dQe,"A",{href:!0});var eea=s(Xte);Oat=r(eea,"FlaxXLMRobertaForSequenceClassification"),eea.forEach(t),Vat=r(dQe," (XLM-RoBERTa model)"),dQe.forEach(t),De.forEach(t),Xat=i(xi),T(Xw.$$.fragment,xi),xi.forEach(t),yi.forEach(t),NHe=i(f),Rf=n(f,"H2",{class:!0});var YYe=s(Rf);zw=n(YYe,"A",{id:!0,class:!0,href:!0});var oea=s(zw);X7e=n(oea,"SPAN",{});var rea=s(X7e);T(tS.$$.fragment,rea),rea.forEach(t),oea.forEach(t),zat=i(YYe),z7e=n(YYe,"SPAN",{});var tea=s(z7e);Wat=r(tea,"FlaxAutoModelForQuestionAnswering"),tea.forEach(t),YYe.forEach(t),qHe=i(f),wr=n(f,"DIV",{class:!0});var $i=s(wr);T(aS.$$.fragment,$i),Qat=i($i),Pf=n($i,"P",{});var Cse=s(Pf);Uat=r(Cse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zte=n(Cse,"A",{href:!0});var aea=s(zte);Hat=r(aea,"from_pretrained()"),aea.forEach(t),Jat=r(Cse," class method or the "),Wte=n(Cse,"A",{href:!0});var nea=s(Wte);Yat=r(nea,"from_config()"),nea.forEach(t),Kat=r(Cse,` class
method.`),Cse.forEach(t),Zat=i($i),nS=n($i,"P",{});var KYe=s(nS);ent=r(KYe,"This class cannot be instantiated directly using "),W7e=n(KYe,"CODE",{});var sea=s(W7e);ont=r(sea,"__init__()"),sea.forEach(t),rnt=r(KYe," (throws an error)."),KYe.forEach(t),tnt=i($i),na=n($i,"DIV",{class:!0});var YL=s(na);T(sS.$$.fragment,YL),ant=i(YL),Q7e=n(YL,"P",{});var lea=s(Q7e);nnt=r(lea,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lea.forEach(t),snt=i(YL),Bf=n(YL,"P",{});var wse=s(Bf);lnt=r(wse,`Note:
Loading a model from its configuration file does `),U7e=n(wse,"STRONG",{});var iea=s(U7e);int=r(iea,"not"),iea.forEach(t),dnt=r(wse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qte=n(wse,"A",{href:!0});var dea=s(Qte);cnt=r(dea,"from_pretrained()"),dea.forEach(t),fnt=r(wse," to load the model weights."),wse.forEach(t),mnt=i(YL),T(Ww.$$.fragment,YL),YL.forEach(t),gnt=i($i),et=n($i,"DIV",{class:!0});var ki=s(et);T(lS.$$.fragment,ki),hnt=i(ki),H7e=n(ki,"P",{});var cea=s(H7e);pnt=r(cea,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),cea.forEach(t),_nt=i(ki),Nn=n(ki,"P",{});var KL=s(Nn);unt=r(KL,"The model class to instantiate is selected based on the "),J7e=n(KL,"CODE",{});var fea=s(J7e);bnt=r(fea,"model_type"),fea.forEach(t),vnt=r(KL,` property of the config object (either
passed as an argument or loaded from `),Y7e=n(KL,"CODE",{});var mea=s(Y7e);Fnt=r(mea,"pretrained_model_name_or_path"),mea.forEach(t),Tnt=r(KL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=n(KL,"CODE",{});var gea=s(K7e);Mnt=r(gea,"pretrained_model_name_or_path"),gea.forEach(t),Ent=r(KL,":"),KL.forEach(t),Cnt=i(ki),Re=n(ki,"UL",{});var Ge=s(Re);Qw=n(Ge,"LI",{});var cQe=s(Qw);Z7e=n(cQe,"STRONG",{});var hea=s(Z7e);wnt=r(hea,"albert"),hea.forEach(t),Ant=r(cQe," \u2014 "),Ute=n(cQe,"A",{href:!0});var pea=s(Ute);Lnt=r(pea,"FlaxAlbertForQuestionAnswering"),pea.forEach(t),ynt=r(cQe," (ALBERT model)"),cQe.forEach(t),xnt=i(Ge),Uw=n(Ge,"LI",{});var fQe=s(Uw);eLe=n(fQe,"STRONG",{});var _ea=s(eLe);$nt=r(_ea,"bart"),_ea.forEach(t),knt=r(fQe," \u2014 "),Hte=n(fQe,"A",{href:!0});var uea=s(Hte);Snt=r(uea,"FlaxBartForQuestionAnswering"),uea.forEach(t),Rnt=r(fQe," (BART model)"),fQe.forEach(t),Pnt=i(Ge),Hw=n(Ge,"LI",{});var mQe=s(Hw);oLe=n(mQe,"STRONG",{});var bea=s(oLe);Bnt=r(bea,"bert"),bea.forEach(t),Int=r(mQe," \u2014 "),Jte=n(mQe,"A",{href:!0});var vea=s(Jte);Nnt=r(vea,"FlaxBertForQuestionAnswering"),vea.forEach(t),qnt=r(mQe," (BERT model)"),mQe.forEach(t),jnt=i(Ge),Jw=n(Ge,"LI",{});var gQe=s(Jw);rLe=n(gQe,"STRONG",{});var Fea=s(rLe);Dnt=r(Fea,"big_bird"),Fea.forEach(t),Gnt=r(gQe," \u2014 "),Yte=n(gQe,"A",{href:!0});var Tea=s(Yte);Ont=r(Tea,"FlaxBigBirdForQuestionAnswering"),Tea.forEach(t),Vnt=r(gQe," (BigBird model)"),gQe.forEach(t),Xnt=i(Ge),Yw=n(Ge,"LI",{});var hQe=s(Yw);tLe=n(hQe,"STRONG",{});var Mea=s(tLe);znt=r(Mea,"distilbert"),Mea.forEach(t),Wnt=r(hQe," \u2014 "),Kte=n(hQe,"A",{href:!0});var Eea=s(Kte);Qnt=r(Eea,"FlaxDistilBertForQuestionAnswering"),Eea.forEach(t),Unt=r(hQe," (DistilBERT model)"),hQe.forEach(t),Hnt=i(Ge),Kw=n(Ge,"LI",{});var pQe=s(Kw);aLe=n(pQe,"STRONG",{});var Cea=s(aLe);Jnt=r(Cea,"electra"),Cea.forEach(t),Ynt=r(pQe," \u2014 "),Zte=n(pQe,"A",{href:!0});var wea=s(Zte);Knt=r(wea,"FlaxElectraForQuestionAnswering"),wea.forEach(t),Znt=r(pQe," (ELECTRA model)"),pQe.forEach(t),est=i(Ge),Zw=n(Ge,"LI",{});var _Qe=s(Zw);nLe=n(_Qe,"STRONG",{});var Aea=s(nLe);ost=r(Aea,"mbart"),Aea.forEach(t),rst=r(_Qe," \u2014 "),eae=n(_Qe,"A",{href:!0});var Lea=s(eae);tst=r(Lea,"FlaxMBartForQuestionAnswering"),Lea.forEach(t),ast=r(_Qe," (mBART model)"),_Qe.forEach(t),nst=i(Ge),eA=n(Ge,"LI",{});var uQe=s(eA);sLe=n(uQe,"STRONG",{});var yea=s(sLe);sst=r(yea,"roberta"),yea.forEach(t),lst=r(uQe," \u2014 "),oae=n(uQe,"A",{href:!0});var xea=s(oae);ist=r(xea,"FlaxRobertaForQuestionAnswering"),xea.forEach(t),dst=r(uQe," (RoBERTa model)"),uQe.forEach(t),cst=i(Ge),oA=n(Ge,"LI",{});var bQe=s(oA);lLe=n(bQe,"STRONG",{});var $ea=s(lLe);fst=r($ea,"roformer"),$ea.forEach(t),mst=r(bQe," \u2014 "),rae=n(bQe,"A",{href:!0});var kea=s(rae);gst=r(kea,"FlaxRoFormerForQuestionAnswering"),kea.forEach(t),hst=r(bQe," (RoFormer model)"),bQe.forEach(t),pst=i(Ge),rA=n(Ge,"LI",{});var vQe=s(rA);iLe=n(vQe,"STRONG",{});var Sea=s(iLe);_st=r(Sea,"xlm-roberta"),Sea.forEach(t),ust=r(vQe," \u2014 "),tae=n(vQe,"A",{href:!0});var Rea=s(tae);bst=r(Rea,"FlaxXLMRobertaForQuestionAnswering"),Rea.forEach(t),vst=r(vQe," (XLM-RoBERTa model)"),vQe.forEach(t),Ge.forEach(t),Fst=i(ki),T(tA.$$.fragment,ki),ki.forEach(t),$i.forEach(t),jHe=i(f),If=n(f,"H2",{class:!0});var ZYe=s(If);aA=n(ZYe,"A",{id:!0,class:!0,href:!0});var Pea=s(aA);dLe=n(Pea,"SPAN",{});var Bea=s(dLe);T(iS.$$.fragment,Bea),Bea.forEach(t),Pea.forEach(t),Tst=i(ZYe),cLe=n(ZYe,"SPAN",{});var Iea=s(cLe);Mst=r(Iea,"FlaxAutoModelForTokenClassification"),Iea.forEach(t),ZYe.forEach(t),DHe=i(f),Ar=n(f,"DIV",{class:!0});var Si=s(Ar);T(dS.$$.fragment,Si),Est=i(Si),Nf=n(Si,"P",{});var Ase=s(Nf);Cst=r(Ase,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),aae=n(Ase,"A",{href:!0});var Nea=s(aae);wst=r(Nea,"from_pretrained()"),Nea.forEach(t),Ast=r(Ase," class method or the "),nae=n(Ase,"A",{href:!0});var qea=s(nae);Lst=r(qea,"from_config()"),qea.forEach(t),yst=r(Ase,` class
method.`),Ase.forEach(t),xst=i(Si),cS=n(Si,"P",{});var eKe=s(cS);$st=r(eKe,"This class cannot be instantiated directly using "),fLe=n(eKe,"CODE",{});var jea=s(fLe);kst=r(jea,"__init__()"),jea.forEach(t),Sst=r(eKe," (throws an error)."),eKe.forEach(t),Rst=i(Si),sa=n(Si,"DIV",{class:!0});var ZL=s(sa);T(fS.$$.fragment,ZL),Pst=i(ZL),mLe=n(ZL,"P",{});var Dea=s(mLe);Bst=r(Dea,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Dea.forEach(t),Ist=i(ZL),qf=n(ZL,"P",{});var Lse=s(qf);Nst=r(Lse,`Note:
Loading a model from its configuration file does `),gLe=n(Lse,"STRONG",{});var Gea=s(gLe);qst=r(Gea,"not"),Gea.forEach(t),jst=r(Lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),sae=n(Lse,"A",{href:!0});var Oea=s(sae);Dst=r(Oea,"from_pretrained()"),Oea.forEach(t),Gst=r(Lse," to load the model weights."),Lse.forEach(t),Ost=i(ZL),T(nA.$$.fragment,ZL),ZL.forEach(t),Vst=i(Si),ot=n(Si,"DIV",{class:!0});var Ri=s(ot);T(mS.$$.fragment,Ri),Xst=i(Ri),hLe=n(Ri,"P",{});var Vea=s(hLe);zst=r(Vea,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Vea.forEach(t),Wst=i(Ri),qn=n(Ri,"P",{});var ey=s(qn);Qst=r(ey,"The model class to instantiate is selected based on the "),pLe=n(ey,"CODE",{});var Xea=s(pLe);Ust=r(Xea,"model_type"),Xea.forEach(t),Hst=r(ey,` property of the config object (either
passed as an argument or loaded from `),_Le=n(ey,"CODE",{});var zea=s(_Le);Jst=r(zea,"pretrained_model_name_or_path"),zea.forEach(t),Yst=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uLe=n(ey,"CODE",{});var Wea=s(uLe);Kst=r(Wea,"pretrained_model_name_or_path"),Wea.forEach(t),Zst=r(ey,":"),ey.forEach(t),elt=i(Ri),Xe=n(Ri,"UL",{});var Co=s(Xe);sA=n(Co,"LI",{});var FQe=s(sA);bLe=n(FQe,"STRONG",{});var Qea=s(bLe);olt=r(Qea,"albert"),Qea.forEach(t),rlt=r(FQe," \u2014 "),lae=n(FQe,"A",{href:!0});var Uea=s(lae);tlt=r(Uea,"FlaxAlbertForTokenClassification"),Uea.forEach(t),alt=r(FQe," (ALBERT model)"),FQe.forEach(t),nlt=i(Co),lA=n(Co,"LI",{});var TQe=s(lA);vLe=n(TQe,"STRONG",{});var Hea=s(vLe);slt=r(Hea,"bert"),Hea.forEach(t),llt=r(TQe," \u2014 "),iae=n(TQe,"A",{href:!0});var Jea=s(iae);ilt=r(Jea,"FlaxBertForTokenClassification"),Jea.forEach(t),dlt=r(TQe," (BERT model)"),TQe.forEach(t),clt=i(Co),iA=n(Co,"LI",{});var MQe=s(iA);FLe=n(MQe,"STRONG",{});var Yea=s(FLe);flt=r(Yea,"big_bird"),Yea.forEach(t),mlt=r(MQe," \u2014 "),dae=n(MQe,"A",{href:!0});var Kea=s(dae);glt=r(Kea,"FlaxBigBirdForTokenClassification"),Kea.forEach(t),hlt=r(MQe," (BigBird model)"),MQe.forEach(t),plt=i(Co),dA=n(Co,"LI",{});var EQe=s(dA);TLe=n(EQe,"STRONG",{});var Zea=s(TLe);_lt=r(Zea,"distilbert"),Zea.forEach(t),ult=r(EQe," \u2014 "),cae=n(EQe,"A",{href:!0});var eoa=s(cae);blt=r(eoa,"FlaxDistilBertForTokenClassification"),eoa.forEach(t),vlt=r(EQe," (DistilBERT model)"),EQe.forEach(t),Flt=i(Co),cA=n(Co,"LI",{});var CQe=s(cA);MLe=n(CQe,"STRONG",{});var ooa=s(MLe);Tlt=r(ooa,"electra"),ooa.forEach(t),Mlt=r(CQe," \u2014 "),fae=n(CQe,"A",{href:!0});var roa=s(fae);Elt=r(roa,"FlaxElectraForTokenClassification"),roa.forEach(t),Clt=r(CQe," (ELECTRA model)"),CQe.forEach(t),wlt=i(Co),fA=n(Co,"LI",{});var wQe=s(fA);ELe=n(wQe,"STRONG",{});var toa=s(ELe);Alt=r(toa,"roberta"),toa.forEach(t),Llt=r(wQe," \u2014 "),mae=n(wQe,"A",{href:!0});var aoa=s(mae);ylt=r(aoa,"FlaxRobertaForTokenClassification"),aoa.forEach(t),xlt=r(wQe," (RoBERTa model)"),wQe.forEach(t),$lt=i(Co),mA=n(Co,"LI",{});var AQe=s(mA);CLe=n(AQe,"STRONG",{});var noa=s(CLe);klt=r(noa,"roformer"),noa.forEach(t),Slt=r(AQe," \u2014 "),gae=n(AQe,"A",{href:!0});var soa=s(gae);Rlt=r(soa,"FlaxRoFormerForTokenClassification"),soa.forEach(t),Plt=r(AQe," (RoFormer model)"),AQe.forEach(t),Blt=i(Co),gA=n(Co,"LI",{});var LQe=s(gA);wLe=n(LQe,"STRONG",{});var loa=s(wLe);Ilt=r(loa,"xlm-roberta"),loa.forEach(t),Nlt=r(LQe," \u2014 "),hae=n(LQe,"A",{href:!0});var ioa=s(hae);qlt=r(ioa,"FlaxXLMRobertaForTokenClassification"),ioa.forEach(t),jlt=r(LQe," (XLM-RoBERTa model)"),LQe.forEach(t),Co.forEach(t),Dlt=i(Ri),T(hA.$$.fragment,Ri),Ri.forEach(t),Si.forEach(t),GHe=i(f),jf=n(f,"H2",{class:!0});var oKe=s(jf);pA=n(oKe,"A",{id:!0,class:!0,href:!0});var doa=s(pA);ALe=n(doa,"SPAN",{});var coa=s(ALe);T(gS.$$.fragment,coa),coa.forEach(t),doa.forEach(t),Glt=i(oKe),LLe=n(oKe,"SPAN",{});var foa=s(LLe);Olt=r(foa,"FlaxAutoModelForMultipleChoice"),foa.forEach(t),oKe.forEach(t),OHe=i(f),Lr=n(f,"DIV",{class:!0});var Pi=s(Lr);T(hS.$$.fragment,Pi),Vlt=i(Pi),Df=n(Pi,"P",{});var yse=s(Df);Xlt=r(yse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pae=n(yse,"A",{href:!0});var moa=s(pae);zlt=r(moa,"from_pretrained()"),moa.forEach(t),Wlt=r(yse," class method or the "),_ae=n(yse,"A",{href:!0});var goa=s(_ae);Qlt=r(goa,"from_config()"),goa.forEach(t),Ult=r(yse,` class
method.`),yse.forEach(t),Hlt=i(Pi),pS=n(Pi,"P",{});var rKe=s(pS);Jlt=r(rKe,"This class cannot be instantiated directly using "),yLe=n(rKe,"CODE",{});var hoa=s(yLe);Ylt=r(hoa,"__init__()"),hoa.forEach(t),Klt=r(rKe," (throws an error)."),rKe.forEach(t),Zlt=i(Pi),la=n(Pi,"DIV",{class:!0});var oy=s(la);T(_S.$$.fragment,oy),eit=i(oy),xLe=n(oy,"P",{});var poa=s(xLe);oit=r(poa,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),poa.forEach(t),rit=i(oy),Gf=n(oy,"P",{});var xse=s(Gf);tit=r(xse,`Note:
Loading a model from its configuration file does `),$Le=n(xse,"STRONG",{});var _oa=s($Le);ait=r(_oa,"not"),_oa.forEach(t),nit=r(xse,` load the model weights. It only affects the
model\u2019s configuration. Use `),uae=n(xse,"A",{href:!0});var uoa=s(uae);sit=r(uoa,"from_pretrained()"),uoa.forEach(t),lit=r(xse," to load the model weights."),xse.forEach(t),iit=i(oy),T(_A.$$.fragment,oy),oy.forEach(t),dit=i(Pi),rt=n(Pi,"DIV",{class:!0});var Bi=s(rt);T(uS.$$.fragment,Bi),cit=i(Bi),kLe=n(Bi,"P",{});var boa=s(kLe);fit=r(boa,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),boa.forEach(t),mit=i(Bi),jn=n(Bi,"P",{});var ry=s(jn);git=r(ry,"The model class to instantiate is selected based on the "),SLe=n(ry,"CODE",{});var voa=s(SLe);hit=r(voa,"model_type"),voa.forEach(t),pit=r(ry,` property of the config object (either
passed as an argument or loaded from `),RLe=n(ry,"CODE",{});var Foa=s(RLe);_it=r(Foa,"pretrained_model_name_or_path"),Foa.forEach(t),uit=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PLe=n(ry,"CODE",{});var Toa=s(PLe);bit=r(Toa,"pretrained_model_name_or_path"),Toa.forEach(t),vit=r(ry,":"),ry.forEach(t),Fit=i(Bi),ze=n(Bi,"UL",{});var wo=s(ze);uA=n(wo,"LI",{});var yQe=s(uA);BLe=n(yQe,"STRONG",{});var Moa=s(BLe);Tit=r(Moa,"albert"),Moa.forEach(t),Mit=r(yQe," \u2014 "),bae=n(yQe,"A",{href:!0});var Eoa=s(bae);Eit=r(Eoa,"FlaxAlbertForMultipleChoice"),Eoa.forEach(t),Cit=r(yQe," (ALBERT model)"),yQe.forEach(t),wit=i(wo),bA=n(wo,"LI",{});var xQe=s(bA);ILe=n(xQe,"STRONG",{});var Coa=s(ILe);Ait=r(Coa,"bert"),Coa.forEach(t),Lit=r(xQe," \u2014 "),vae=n(xQe,"A",{href:!0});var woa=s(vae);yit=r(woa,"FlaxBertForMultipleChoice"),woa.forEach(t),xit=r(xQe," (BERT model)"),xQe.forEach(t),$it=i(wo),vA=n(wo,"LI",{});var $Qe=s(vA);NLe=n($Qe,"STRONG",{});var Aoa=s(NLe);kit=r(Aoa,"big_bird"),Aoa.forEach(t),Sit=r($Qe," \u2014 "),Fae=n($Qe,"A",{href:!0});var Loa=s(Fae);Rit=r(Loa,"FlaxBigBirdForMultipleChoice"),Loa.forEach(t),Pit=r($Qe," (BigBird model)"),$Qe.forEach(t),Bit=i(wo),FA=n(wo,"LI",{});var kQe=s(FA);qLe=n(kQe,"STRONG",{});var yoa=s(qLe);Iit=r(yoa,"distilbert"),yoa.forEach(t),Nit=r(kQe," \u2014 "),Tae=n(kQe,"A",{href:!0});var xoa=s(Tae);qit=r(xoa,"FlaxDistilBertForMultipleChoice"),xoa.forEach(t),jit=r(kQe," (DistilBERT model)"),kQe.forEach(t),Dit=i(wo),TA=n(wo,"LI",{});var SQe=s(TA);jLe=n(SQe,"STRONG",{});var $oa=s(jLe);Git=r($oa,"electra"),$oa.forEach(t),Oit=r(SQe," \u2014 "),Mae=n(SQe,"A",{href:!0});var koa=s(Mae);Vit=r(koa,"FlaxElectraForMultipleChoice"),koa.forEach(t),Xit=r(SQe," (ELECTRA model)"),SQe.forEach(t),zit=i(wo),MA=n(wo,"LI",{});var RQe=s(MA);DLe=n(RQe,"STRONG",{});var Soa=s(DLe);Wit=r(Soa,"roberta"),Soa.forEach(t),Qit=r(RQe," \u2014 "),Eae=n(RQe,"A",{href:!0});var Roa=s(Eae);Uit=r(Roa,"FlaxRobertaForMultipleChoice"),Roa.forEach(t),Hit=r(RQe," (RoBERTa model)"),RQe.forEach(t),Jit=i(wo),EA=n(wo,"LI",{});var PQe=s(EA);GLe=n(PQe,"STRONG",{});var Poa=s(GLe);Yit=r(Poa,"roformer"),Poa.forEach(t),Kit=r(PQe," \u2014 "),Cae=n(PQe,"A",{href:!0});var Boa=s(Cae);Zit=r(Boa,"FlaxRoFormerForMultipleChoice"),Boa.forEach(t),edt=r(PQe," (RoFormer model)"),PQe.forEach(t),odt=i(wo),CA=n(wo,"LI",{});var BQe=s(CA);OLe=n(BQe,"STRONG",{});var Ioa=s(OLe);rdt=r(Ioa,"xlm-roberta"),Ioa.forEach(t),tdt=r(BQe," \u2014 "),wae=n(BQe,"A",{href:!0});var Noa=s(wae);adt=r(Noa,"FlaxXLMRobertaForMultipleChoice"),Noa.forEach(t),ndt=r(BQe," (XLM-RoBERTa model)"),BQe.forEach(t),wo.forEach(t),sdt=i(Bi),T(wA.$$.fragment,Bi),Bi.forEach(t),Pi.forEach(t),VHe=i(f),Of=n(f,"H2",{class:!0});var tKe=s(Of);AA=n(tKe,"A",{id:!0,class:!0,href:!0});var qoa=s(AA);VLe=n(qoa,"SPAN",{});var joa=s(VLe);T(bS.$$.fragment,joa),joa.forEach(t),qoa.forEach(t),ldt=i(tKe),XLe=n(tKe,"SPAN",{});var Doa=s(XLe);idt=r(Doa,"FlaxAutoModelForNextSentencePrediction"),Doa.forEach(t),tKe.forEach(t),XHe=i(f),yr=n(f,"DIV",{class:!0});var Ii=s(yr);T(vS.$$.fragment,Ii),ddt=i(Ii),Vf=n(Ii,"P",{});var $se=s(Vf);cdt=r($se,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Aae=n($se,"A",{href:!0});var Goa=s(Aae);fdt=r(Goa,"from_pretrained()"),Goa.forEach(t),mdt=r($se," class method or the "),Lae=n($se,"A",{href:!0});var Ooa=s(Lae);gdt=r(Ooa,"from_config()"),Ooa.forEach(t),hdt=r($se,` class
method.`),$se.forEach(t),pdt=i(Ii),FS=n(Ii,"P",{});var aKe=s(FS);_dt=r(aKe,"This class cannot be instantiated directly using "),zLe=n(aKe,"CODE",{});var Voa=s(zLe);udt=r(Voa,"__init__()"),Voa.forEach(t),bdt=r(aKe," (throws an error)."),aKe.forEach(t),vdt=i(Ii),ia=n(Ii,"DIV",{class:!0});var ty=s(ia);T(TS.$$.fragment,ty),Fdt=i(ty),WLe=n(ty,"P",{});var Xoa=s(WLe);Tdt=r(Xoa,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Xoa.forEach(t),Mdt=i(ty),Xf=n(ty,"P",{});var kse=s(Xf);Edt=r(kse,`Note:
Loading a model from its configuration file does `),QLe=n(kse,"STRONG",{});var zoa=s(QLe);Cdt=r(zoa,"not"),zoa.forEach(t),wdt=r(kse,` load the model weights. It only affects the
model\u2019s configuration. Use `),yae=n(kse,"A",{href:!0});var Woa=s(yae);Adt=r(Woa,"from_pretrained()"),Woa.forEach(t),Ldt=r(kse," to load the model weights."),kse.forEach(t),ydt=i(ty),T(LA.$$.fragment,ty),ty.forEach(t),xdt=i(Ii),tt=n(Ii,"DIV",{class:!0});var Ni=s(tt);T(MS.$$.fragment,Ni),$dt=i(Ni),ULe=n(Ni,"P",{});var Qoa=s(ULe);kdt=r(Qoa,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Qoa.forEach(t),Sdt=i(Ni),Dn=n(Ni,"P",{});var ay=s(Dn);Rdt=r(ay,"The model class to instantiate is selected based on the "),HLe=n(ay,"CODE",{});var Uoa=s(HLe);Pdt=r(Uoa,"model_type"),Uoa.forEach(t),Bdt=r(ay,` property of the config object (either
passed as an argument or loaded from `),JLe=n(ay,"CODE",{});var Hoa=s(JLe);Idt=r(Hoa,"pretrained_model_name_or_path"),Hoa.forEach(t),Ndt=r(ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YLe=n(ay,"CODE",{});var Joa=s(YLe);qdt=r(Joa,"pretrained_model_name_or_path"),Joa.forEach(t),jdt=r(ay,":"),ay.forEach(t),Ddt=i(Ni),KLe=n(Ni,"UL",{});var Yoa=s(KLe);yA=n(Yoa,"LI",{});var IQe=s(yA);ZLe=n(IQe,"STRONG",{});var Koa=s(ZLe);Gdt=r(Koa,"bert"),Koa.forEach(t),Odt=r(IQe," \u2014 "),xae=n(IQe,"A",{href:!0});var Zoa=s(xae);Vdt=r(Zoa,"FlaxBertForNextSentencePrediction"),Zoa.forEach(t),Xdt=r(IQe," (BERT model)"),IQe.forEach(t),Yoa.forEach(t),zdt=i(Ni),T(xA.$$.fragment,Ni),Ni.forEach(t),Ii.forEach(t),zHe=i(f),zf=n(f,"H2",{class:!0});var nKe=s(zf);$A=n(nKe,"A",{id:!0,class:!0,href:!0});var era=s($A);eye=n(era,"SPAN",{});var ora=s(eye);T(ES.$$.fragment,ora),ora.forEach(t),era.forEach(t),Wdt=i(nKe),oye=n(nKe,"SPAN",{});var rra=s(oye);Qdt=r(rra,"FlaxAutoModelForImageClassification"),rra.forEach(t),nKe.forEach(t),WHe=i(f),xr=n(f,"DIV",{class:!0});var qi=s(xr);T(CS.$$.fragment,qi),Udt=i(qi),Wf=n(qi,"P",{});var Sse=s(Wf);Hdt=r(Sse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$ae=n(Sse,"A",{href:!0});var tra=s($ae);Jdt=r(tra,"from_pretrained()"),tra.forEach(t),Ydt=r(Sse," class method or the "),kae=n(Sse,"A",{href:!0});var ara=s(kae);Kdt=r(ara,"from_config()"),ara.forEach(t),Zdt=r(Sse,` class
method.`),Sse.forEach(t),ect=i(qi),wS=n(qi,"P",{});var sKe=s(wS);oct=r(sKe,"This class cannot be instantiated directly using "),rye=n(sKe,"CODE",{});var nra=s(rye);rct=r(nra,"__init__()"),nra.forEach(t),tct=r(sKe," (throws an error)."),sKe.forEach(t),act=i(qi),da=n(qi,"DIV",{class:!0});var ny=s(da);T(AS.$$.fragment,ny),nct=i(ny),tye=n(ny,"P",{});var sra=s(tye);sct=r(sra,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),sra.forEach(t),lct=i(ny),Qf=n(ny,"P",{});var Rse=s(Qf);ict=r(Rse,`Note:
Loading a model from its configuration file does `),aye=n(Rse,"STRONG",{});var lra=s(aye);dct=r(lra,"not"),lra.forEach(t),cct=r(Rse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sae=n(Rse,"A",{href:!0});var ira=s(Sae);fct=r(ira,"from_pretrained()"),ira.forEach(t),mct=r(Rse," to load the model weights."),Rse.forEach(t),gct=i(ny),T(kA.$$.fragment,ny),ny.forEach(t),hct=i(qi),at=n(qi,"DIV",{class:!0});var ji=s(at);T(LS.$$.fragment,ji),pct=i(ji),nye=n(ji,"P",{});var dra=s(nye);_ct=r(dra,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),dra.forEach(t),uct=i(ji),Gn=n(ji,"P",{});var sy=s(Gn);bct=r(sy,"The model class to instantiate is selected based on the "),sye=n(sy,"CODE",{});var cra=s(sye);vct=r(cra,"model_type"),cra.forEach(t),Fct=r(sy,` property of the config object (either
passed as an argument or loaded from `),lye=n(sy,"CODE",{});var fra=s(lye);Tct=r(fra,"pretrained_model_name_or_path"),fra.forEach(t),Mct=r(sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iye=n(sy,"CODE",{});var mra=s(iye);Ect=r(mra,"pretrained_model_name_or_path"),mra.forEach(t),Cct=r(sy,":"),sy.forEach(t),wct=i(ji),yS=n(ji,"UL",{});var lKe=s(yS);SA=n(lKe,"LI",{});var NQe=s(SA);dye=n(NQe,"STRONG",{});var gra=s(dye);Act=r(gra,"beit"),gra.forEach(t),Lct=r(NQe," \u2014 "),Rae=n(NQe,"A",{href:!0});var hra=s(Rae);yct=r(hra,"FlaxBeitForImageClassification"),hra.forEach(t),xct=r(NQe," (BEiT model)"),NQe.forEach(t),$ct=i(lKe),RA=n(lKe,"LI",{});var qQe=s(RA);cye=n(qQe,"STRONG",{});var pra=s(cye);kct=r(pra,"vit"),pra.forEach(t),Sct=r(qQe," \u2014 "),Pae=n(qQe,"A",{href:!0});var _ra=s(Pae);Rct=r(_ra,"FlaxViTForImageClassification"),_ra.forEach(t),Pct=r(qQe," (ViT model)"),qQe.forEach(t),lKe.forEach(t),Bct=i(ji),T(PA.$$.fragment,ji),ji.forEach(t),qi.forEach(t),QHe=i(f),Uf=n(f,"H2",{class:!0});var iKe=s(Uf);BA=n(iKe,"A",{id:!0,class:!0,href:!0});var ura=s(BA);fye=n(ura,"SPAN",{});var bra=s(fye);T(xS.$$.fragment,bra),bra.forEach(t),ura.forEach(t),Ict=i(iKe),mye=n(iKe,"SPAN",{});var vra=s(mye);Nct=r(vra,"FlaxAutoModelForVision2Seq"),vra.forEach(t),iKe.forEach(t),UHe=i(f),$r=n(f,"DIV",{class:!0});var Di=s($r);T($S.$$.fragment,Di),qct=i(Di),Hf=n(Di,"P",{});var Pse=s(Hf);jct=r(Pse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Bae=n(Pse,"A",{href:!0});var Fra=s(Bae);Dct=r(Fra,"from_pretrained()"),Fra.forEach(t),Gct=r(Pse," class method or the "),Iae=n(Pse,"A",{href:!0});var Tra=s(Iae);Oct=r(Tra,"from_config()"),Tra.forEach(t),Vct=r(Pse,` class
method.`),Pse.forEach(t),Xct=i(Di),kS=n(Di,"P",{});var dKe=s(kS);zct=r(dKe,"This class cannot be instantiated directly using "),gye=n(dKe,"CODE",{});var Mra=s(gye);Wct=r(Mra,"__init__()"),Mra.forEach(t),Qct=r(dKe," (throws an error)."),dKe.forEach(t),Uct=i(Di),ca=n(Di,"DIV",{class:!0});var ly=s(ca);T(SS.$$.fragment,ly),Hct=i(ly),hye=n(ly,"P",{});var Era=s(hye);Jct=r(Era,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Era.forEach(t),Yct=i(ly),Jf=n(ly,"P",{});var Bse=s(Jf);Kct=r(Bse,`Note:
Loading a model from its configuration file does `),pye=n(Bse,"STRONG",{});var Cra=s(pye);Zct=r(Cra,"not"),Cra.forEach(t),eft=r(Bse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nae=n(Bse,"A",{href:!0});var wra=s(Nae);oft=r(wra,"from_pretrained()"),wra.forEach(t),rft=r(Bse," to load the model weights."),Bse.forEach(t),tft=i(ly),T(IA.$$.fragment,ly),ly.forEach(t),aft=i(Di),nt=n(Di,"DIV",{class:!0});var Gi=s(nt);T(RS.$$.fragment,Gi),nft=i(Gi),_ye=n(Gi,"P",{});var Ara=s(_ye);sft=r(Ara,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ara.forEach(t),lft=i(Gi),On=n(Gi,"P",{});var iy=s(On);ift=r(iy,"The model class to instantiate is selected based on the "),uye=n(iy,"CODE",{});var Lra=s(uye);dft=r(Lra,"model_type"),Lra.forEach(t),cft=r(iy,` property of the config object (either
passed as an argument or loaded from `),bye=n(iy,"CODE",{});var yra=s(bye);fft=r(yra,"pretrained_model_name_or_path"),yra.forEach(t),mft=r(iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vye=n(iy,"CODE",{});var xra=s(vye);gft=r(xra,"pretrained_model_name_or_path"),xra.forEach(t),hft=r(iy,":"),iy.forEach(t),pft=i(Gi),Fye=n(Gi,"UL",{});var $ra=s(Fye);NA=n($ra,"LI",{});var jQe=s(NA);Tye=n(jQe,"STRONG",{});var kra=s(Tye);_ft=r(kra,"vision-encoder-decoder"),kra.forEach(t),uft=r(jQe," \u2014 "),qae=n(jQe,"A",{href:!0});var Sra=s(qae);bft=r(Sra,"FlaxVisionEncoderDecoderModel"),Sra.forEach(t),vft=r(jQe," (Vision Encoder decoder model)"),jQe.forEach(t),$ra.forEach(t),Fft=i(Gi),T(qA.$$.fragment,Gi),Gi.forEach(t),Di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Oaa)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Xn,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.AutoConfig"),c(Wn,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.AutoModel"),c(Qn,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.AutoTokenizer"),c(Ui,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertModel"),c(am,"id","extending-the-auto-classes"),c(am,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(am,"href","#extending-the-auto-classes"),c(Hi,"class","relative group"),c(sm,"id","transformers.AutoConfig"),c(sm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sm,"href","#transformers.AutoConfig"),c(Ji,"class","relative group"),c(dP,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(cP,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertConfig"),c(fP,"href","/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartConfig"),c(mP,"href","/docs/transformers/pr_18686/en/model_doc/beit#transformers.BeitConfig"),c(gP,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertConfig"),c(hP,"href","/docs/transformers/pr_18686/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(pP,"href","/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdConfig"),c(_P,"href","/docs/transformers/pr_18686/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(uP,"href","/docs/transformers/pr_18686/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(bP,"href","/docs/transformers/pr_18686/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(vP,"href","/docs/transformers/pr_18686/en/model_doc/bloom#transformers.BloomConfig"),c(FP,"href","/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertConfig"),c(TP,"href","/docs/transformers/pr_18686/en/model_doc/canine#transformers.CanineConfig"),c(MP,"href","/docs/transformers/pr_18686/en/model_doc/clip#transformers.CLIPConfig"),c(EP,"href","/docs/transformers/pr_18686/en/model_doc/codegen#transformers.CodeGenConfig"),c(CP,"href","/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertConfig"),c(wP,"href","/docs/transformers/pr_18686/en/model_doc/convnext#transformers.ConvNextConfig"),c(AP,"href","/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.CTRLConfig"),c(LP,"href","/docs/transformers/pr_18686/en/model_doc/cvt#transformers.CvtConfig"),c(yP,"href","/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(xP,"href","/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c($P,"href","/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(kP,"href","/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaConfig"),c(SP,"href","/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(RP,"href","/docs/transformers/pr_18686/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(PP,"href","/docs/transformers/pr_18686/en/model_doc/deit#transformers.DeiTConfig"),c(BP,"href","/docs/transformers/pr_18686/en/model_doc/detr#transformers.DetrConfig"),c(IP,"href","/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertConfig"),c(NP,"href","/docs/transformers/pr_18686/en/model_doc/donut#transformers.DonutSwinConfig"),c(qP,"href","/docs/transformers/pr_18686/en/model_doc/dpr#transformers.DPRConfig"),c(jP,"href","/docs/transformers/pr_18686/en/model_doc/dpt#transformers.DPTConfig"),c(DP,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraConfig"),c(GP,"href","/docs/transformers/pr_18686/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(OP,"href","/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertConfig"),c(VP,"href","/docs/transformers/pr_18686/en/model_doc/flava#transformers.FlavaConfig"),c(XP,"href","/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetConfig"),c(zP,"href","/docs/transformers/pr_18686/en/model_doc/fsmt#transformers.FSMTConfig"),c(WP,"href","/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelConfig"),c(QP,"href","/docs/transformers/pr_18686/en/model_doc/glpn#transformers.GLPNConfig"),c(UP,"href","/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2Config"),c(HP,"href","/docs/transformers/pr_18686/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(JP,"href","/docs/transformers/pr_18686/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(YP,"href","/docs/transformers/pr_18686/en/model_doc/gptj#transformers.GPTJConfig"),c(KP,"href","/docs/transformers/pr_18686/en/model_doc/groupvit#transformers.GroupViTConfig"),c(ZP,"href","/docs/transformers/pr_18686/en/model_doc/hubert#transformers.HubertConfig"),c(eB,"href","/docs/transformers/pr_18686/en/model_doc/ibert#transformers.IBertConfig"),c(oB,"href","/docs/transformers/pr_18686/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(rB,"href","/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(tB,"href","/docs/transformers/pr_18686/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(aB,"href","/docs/transformers/pr_18686/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(nB,"href","/docs/transformers/pr_18686/en/model_doc/led#transformers.LEDConfig"),c(sB,"href","/docs/transformers/pr_18686/en/model_doc/levit#transformers.LevitConfig"),c(lB,"href","/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerConfig"),c(iB,"href","/docs/transformers/pr_18686/en/model_doc/longt5#transformers.LongT5Config"),c(dB,"href","/docs/transformers/pr_18686/en/model_doc/luke#transformers.LukeConfig"),c(cB,"href","/docs/transformers/pr_18686/en/model_doc/lxmert#transformers.LxmertConfig"),c(fB,"href","/docs/transformers/pr_18686/en/model_doc/m2m_100#transformers.M2M100Config"),c(mB,"href","/docs/transformers/pr_18686/en/model_doc/marian#transformers.MarianConfig"),c(gB,"href","/docs/transformers/pr_18686/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(hB,"href","/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartConfig"),c(pB,"href","/docs/transformers/pr_18686/en/model_doc/mctct#transformers.MCTCTConfig"),c(_B,"href","/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(uB,"href","/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(bB,"href","/docs/transformers/pr_18686/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(vB,"href","/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetConfig"),c(FB,"href","/docs/transformers/pr_18686/en/model_doc/mt5#transformers.MT5Config"),c(TB,"href","/docs/transformers/pr_18686/en/model_doc/mvp#transformers.MvpConfig"),c(MB,"href","/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaConfig"),c(EB,"href","/docs/transformers/pr_18686/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(CB,"href","/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(wB,"href","/docs/transformers/pr_18686/en/model_doc/opt#transformers.OPTConfig"),c(AB,"href","/docs/transformers/pr_18686/en/model_doc/owlvit#transformers.OwlViTConfig"),c(LB,"href","/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.PegasusConfig"),c(yB,"href","/docs/transformers/pr_18686/en/model_doc/perceiver#transformers.PerceiverConfig"),c(xB,"href","/docs/transformers/pr_18686/en/model_doc/plbart#transformers.PLBartConfig"),c($B,"href","/docs/transformers/pr_18686/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(kB,"href","/docs/transformers/pr_18686/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(SB,"href","/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(RB,"href","/docs/transformers/pr_18686/en/model_doc/rag#transformers.RagConfig"),c(PB,"href","/docs/transformers/pr_18686/en/model_doc/realm#transformers.RealmConfig"),c(BB,"href","/docs/transformers/pr_18686/en/model_doc/reformer#transformers.ReformerConfig"),c(IB,"href","/docs/transformers/pr_18686/en/model_doc/regnet#transformers.RegNetConfig"),c(NB,"href","/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertConfig"),c(qB,"href","/docs/transformers/pr_18686/en/model_doc/resnet#transformers.ResNetConfig"),c(jB,"href","/docs/transformers/pr_18686/en/model_doc/retribert#transformers.RetriBertConfig"),c(DB,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaConfig"),c(GB,"href","/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerConfig"),c(OB,"href","/docs/transformers/pr_18686/en/model_doc/segformer#transformers.SegformerConfig"),c(VB,"href","/docs/transformers/pr_18686/en/model_doc/sew#transformers.SEWConfig"),c(XB,"href","/docs/transformers/pr_18686/en/model_doc/sew-d#transformers.SEWDConfig"),c(zB,"href","/docs/transformers/pr_18686/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(WB,"href","/docs/transformers/pr_18686/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(QB,"href","/docs/transformers/pr_18686/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(UB,"href","/docs/transformers/pr_18686/en/model_doc/splinter#transformers.SplinterConfig"),c(HB,"href","/docs/transformers/pr_18686/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(JB,"href","/docs/transformers/pr_18686/en/model_doc/swin#transformers.SwinConfig"),c(YB,"href","/docs/transformers/pr_18686/en/model_doc/swinv2#transformers.Swinv2Config"),c(KB,"href","/docs/transformers/pr_18686/en/model_doc/t5#transformers.T5Config"),c(ZB,"href","/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TapasConfig"),c(eI,"href","/docs/transformers/pr_18686/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(oI,"href","/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(rI,"href","/docs/transformers/pr_18686/en/model_doc/trocr#transformers.TrOCRConfig"),c(tI,"href","/docs/transformers/pr_18686/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(aI,"href","/docs/transformers/pr_18686/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(nI,"href","/docs/transformers/pr_18686/en/model_doc/van#transformers.VanConfig"),c(sI,"href","/docs/transformers/pr_18686/en/model_doc/videomae#transformers.VideoMAEConfig"),c(lI,"href","/docs/transformers/pr_18686/en/model_doc/vilt#transformers.ViltConfig"),c(iI,"href","/docs/transformers/pr_18686/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(dI,"href","/docs/transformers/pr_18686/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(cI,"href","/docs/transformers/pr_18686/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(fI,"href","/docs/transformers/pr_18686/en/model_doc/vit#transformers.ViTConfig"),c(mI,"href","/docs/transformers/pr_18686/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(gI,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(hI,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(pI,"href","/docs/transformers/pr_18686/en/model_doc/wavlm#transformers.WavLMConfig"),c(_I,"href","/docs/transformers/pr_18686/en/model_doc/xglm#transformers.XGLMConfig"),c(uI,"href","/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMConfig"),c(bI,"href","/docs/transformers/pr_18686/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(vI,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(FI,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(TI,"href","/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetConfig"),c(MI,"href","/docs/transformers/pr_18686/en/model_doc/yolos#transformers.YolosConfig"),c(EI,"href","/docs/transformers/pr_18686/en/model_doc/yoso#transformers.YosoConfig"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"id","transformers.AutoTokenizer"),c(Eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eh,"href","#transformers.AutoTokenizer"),c(Ki,"class","relative group"),c(CI,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(wI,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertTokenizer"),c(AI,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(LI,"href","/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartTokenizer"),c(yI,"href","/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartTokenizerFast"),c(xI,"href","/docs/transformers/pr_18686/en/model_doc/barthez#transformers.BarthezTokenizer"),c($I,"href","/docs/transformers/pr_18686/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(kI,"href","/docs/transformers/pr_18686/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(SI,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertTokenizer"),c(RI,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertTokenizerFast"),c(PI,"href","/docs/transformers/pr_18686/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(BI,"href","/docs/transformers/pr_18686/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(II,"href","/docs/transformers/pr_18686/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(NI,"href","/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(qI,"href","/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(jI,"href","/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(DI,"href","/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(GI,"href","/docs/transformers/pr_18686/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(OI,"href","/docs/transformers/pr_18686/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(VI,"href","/docs/transformers/pr_18686/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(XI,"href","/docs/transformers/pr_18686/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(zI,"href","/docs/transformers/pr_18686/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(WI,"href","/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertTokenizer"),c(QI,"href","/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(UI,"href","/docs/transformers/pr_18686/en/model_doc/canine#transformers.CanineTokenizer"),c(HI,"href","/docs/transformers/pr_18686/en/model_doc/clip#transformers.CLIPTokenizer"),c(JI,"href","/docs/transformers/pr_18686/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(YI,"href","/docs/transformers/pr_18686/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(KI,"href","/docs/transformers/pr_18686/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(ZI,"href","/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(eN,"href","/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(oN,"href","/docs/transformers/pr_18686/en/model_doc/cpm#transformers.CpmTokenizer"),c(rN,"href","/docs/transformers/pr_18686/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(tN,"href","/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(aN,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaTokenizer"),c(nN,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(sN,"href","/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaTokenizer"),c(lN,"href","/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(iN,"href","/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(dN,"href","/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(cN,"href","/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(fN,"href","/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(mN,"href","/docs/transformers/pr_18686/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(gN,"href","/docs/transformers/pr_18686/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(hN,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraTokenizer"),c(pN,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(_N,"href","/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(uN,"href","/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetTokenizer"),c(bN,"href","/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(vN,"href","/docs/transformers/pr_18686/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(FN,"href","/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelTokenizer"),c(TN,"href","/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(MN,"href","/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(EN,"href","/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(CN,"href","/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wN,"href","/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(AN,"href","/docs/transformers/pr_18686/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(LN,"href","/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yN,"href","/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(xN,"href","/docs/transformers/pr_18686/en/model_doc/clip#transformers.CLIPTokenizer"),c($N,"href","/docs/transformers/pr_18686/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(kN,"href","/docs/transformers/pr_18686/en/model_doc/herbert#transformers.HerbertTokenizer"),c(SN,"href","/docs/transformers/pr_18686/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(RN,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(PN,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaTokenizer"),c(BN,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(IN,"href","/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(NN,"href","/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(qN,"href","/docs/transformers/pr_18686/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(jN,"href","/docs/transformers/pr_18686/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(DN,"href","/docs/transformers/pr_18686/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(GN,"href","/docs/transformers/pr_18686/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(ON,"href","/docs/transformers/pr_18686/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(VN,"href","/docs/transformers/pr_18686/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(XN,"href","/docs/transformers/pr_18686/en/model_doc/led#transformers.LEDTokenizer"),c(zN,"href","/docs/transformers/pr_18686/en/model_doc/led#transformers.LEDTokenizerFast"),c(WN,"href","/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerTokenizer"),c(QN,"href","/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(UN,"href","/docs/transformers/pr_18686/en/model_doc/t5#transformers.T5Tokenizer"),c(HN,"href","/docs/transformers/pr_18686/en/model_doc/t5#transformers.T5TokenizerFast"),c(JN,"href","/docs/transformers/pr_18686/en/model_doc/luke#transformers.LukeTokenizer"),c(YN,"href","/docs/transformers/pr_18686/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(KN,"href","/docs/transformers/pr_18686/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(ZN,"href","/docs/transformers/pr_18686/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(eq,"href","/docs/transformers/pr_18686/en/model_doc/marian#transformers.MarianTokenizer"),c(oq,"href","/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartTokenizer"),c(rq,"href","/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(tq,"href","/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(aq,"href","/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(nq,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertTokenizer"),c(sq,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertTokenizerFast"),c(lq,"href","/docs/transformers/pr_18686/en/model_doc/mluke#transformers.MLukeTokenizer"),c(iq,"href","/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(dq,"href","/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(cq,"href","/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(fq,"href","/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(mq,"href","/docs/transformers/pr_18686/en/model_doc/t5#transformers.T5Tokenizer"),c(gq,"href","/docs/transformers/pr_18686/en/model_doc/t5#transformers.T5TokenizerFast"),c(hq,"href","/docs/transformers/pr_18686/en/model_doc/mvp#transformers.MvpTokenizer"),c(pq,"href","/docs/transformers/pr_18686/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(_q,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertTokenizer"),c(uq,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertTokenizerFast"),c(bq,"href","/docs/transformers/pr_18686/en/model_doc/nllb#transformers.NllbTokenizer"),c(vq,"href","/docs/transformers/pr_18686/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(Fq,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertTokenizer"),c(Tq,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Mq,"href","/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(Eq,"href","/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(Cq,"href","/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wq,"href","/docs/transformers/pr_18686/en/model_doc/clip#transformers.CLIPTokenizer"),c(Aq,"href","/docs/transformers/pr_18686/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Lq,"href","/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(yq,"href","/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(xq,"href","/docs/transformers/pr_18686/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c($q,"href","/docs/transformers/pr_18686/en/model_doc/phobert#transformers.PhobertTokenizer"),c(kq,"href","/docs/transformers/pr_18686/en/model_doc/plbart#transformers.PLBartTokenizer"),c(Sq,"href","/docs/transformers/pr_18686/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(Rq,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertTokenizer"),c(Pq,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertTokenizerFast"),c(Bq,"href","/docs/transformers/pr_18686/en/model_doc/rag#transformers.RagTokenizer"),c(Iq,"href","/docs/transformers/pr_18686/en/model_doc/realm#transformers.RealmTokenizer"),c(Nq,"href","/docs/transformers/pr_18686/en/model_doc/realm#transformers.RealmTokenizerFast"),c(qq,"href","/docs/transformers/pr_18686/en/model_doc/reformer#transformers.ReformerTokenizer"),c(jq,"href","/docs/transformers/pr_18686/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(Dq,"href","/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertTokenizer"),c(Gq,"href","/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(Oq,"href","/docs/transformers/pr_18686/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(Vq,"href","/docs/transformers/pr_18686/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(Xq,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaTokenizer"),c(zq,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Wq,"href","/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(Qq,"href","/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(Uq,"href","/docs/transformers/pr_18686/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Hq,"href","/docs/transformers/pr_18686/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(Jq,"href","/docs/transformers/pr_18686/en/model_doc/splinter#transformers.SplinterTokenizer"),c(Yq,"href","/docs/transformers/pr_18686/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(Kq,"href","/docs/transformers/pr_18686/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(Zq,"href","/docs/transformers/pr_18686/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(ej,"href","/docs/transformers/pr_18686/en/model_doc/t5#transformers.T5Tokenizer"),c(oj,"href","/docs/transformers/pr_18686/en/model_doc/t5#transformers.T5TokenizerFast"),c(rj,"href","/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TapasTokenizer"),c(tj,"href","/docs/transformers/pr_18686/en/model_doc/tapex#transformers.TapexTokenizer"),c(aj,"href","/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(nj,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertTokenizer"),c(sj,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertTokenizerFast"),c(lj,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertTokenizer"),c(ij,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertTokenizerFast"),c(dj,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(cj,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(fj,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(mj,"href","/docs/transformers/pr_18686/en/model_doc/xglm#transformers.XGLMTokenizer"),c(gj,"href","/docs/transformers/pr_18686/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(hj,"href","/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMTokenizer"),c(pj,"href","/docs/transformers/pr_18686/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(_j,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(uj,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(bj,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaTokenizer"),c(vj,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Fj,"href","/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(Tj,"href","/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(Mj,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertTokenizer"),c(Ej,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ap,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"id","transformers.AutoFeatureExtractor"),c(np,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(np,"href","#transformers.AutoFeatureExtractor"),c(Zi,"class","relative group"),c(Cj,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(wj,"href","/docs/transformers/pr_18686/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Aj,"href","/docs/transformers/pr_18686/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Lj,"href","/docs/transformers/pr_18686/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(yj,"href","/docs/transformers/pr_18686/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(xj,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($j,"href","/docs/transformers/pr_18686/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(kj,"href","/docs/transformers/pr_18686/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Sj,"href","/docs/transformers/pr_18686/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(Rj,"href","/docs/transformers/pr_18686/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(Pj,"href","/docs/transformers/pr_18686/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(Bj,"href","/docs/transformers/pr_18686/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(Ij,"href","/docs/transformers/pr_18686/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(Nj,"href","/docs/transformers/pr_18686/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(qj,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(jj,"href","/docs/transformers/pr_18686/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(Dj,"href","/docs/transformers/pr_18686/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(Gj,"href","/docs/transformers/pr_18686/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(Oj,"href","/docs/transformers/pr_18686/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(Vj,"href","/docs/transformers/pr_18686/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(Xj,"href","/docs/transformers/pr_18686/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(zj,"href","/docs/transformers/pr_18686/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(Wj,"href","/docs/transformers/pr_18686/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(Qj,"href","/docs/transformers/pr_18686/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Uj,"href","/docs/transformers/pr_18686/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Hj,"href","/docs/transformers/pr_18686/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Jj,"href","/docs/transformers/pr_18686/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Yj,"href","/docs/transformers/pr_18686/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Kj,"href","/docs/transformers/pr_18686/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Zj,"href","/docs/transformers/pr_18686/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(eD,"href","/docs/transformers/pr_18686/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(oD,"href","/docs/transformers/pr_18686/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(rD,"href","/docs/transformers/pr_18686/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(tD,"href","/docs/transformers/pr_18686/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(aD,"href","/docs/transformers/pr_18686/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(nD,"href","/docs/transformers/pr_18686/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(sD,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(lD,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(iD,"href","/docs/transformers/pr_18686/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qp,"id","transformers.AutoProcessor"),c(Qp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qp,"href","#transformers.AutoProcessor"),c(ed,"class","relative group"),c(dD,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(cD,"href","/docs/transformers/pr_18686/en/model_doc/clip#transformers.CLIPProcessor"),c(fD,"href","/docs/transformers/pr_18686/en/model_doc/donut#transformers.DonutProcessor"),c(mD,"href","/docs/transformers/pr_18686/en/model_doc/flava#transformers.FlavaProcessor"),c(gD,"href","/docs/transformers/pr_18686/en/model_doc/clip#transformers.CLIPProcessor"),c(hD,"href","/docs/transformers/pr_18686/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(pD,"href","/docs/transformers/pr_18686/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(_D,"href","/docs/transformers/pr_18686/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(uD,"href","/docs/transformers/pr_18686/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(bD,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(vD,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(FD,"href","/docs/transformers/pr_18686/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(TD,"href","/docs/transformers/pr_18686/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(MD,"href","/docs/transformers/pr_18686/en/model_doc/trocr#transformers.TrOCRProcessor"),c(ED,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CD,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wD,"href","/docs/transformers/pr_18686/en/model_doc/vilt#transformers.ViltProcessor"),c(AD,"href","/docs/transformers/pr_18686/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(LD,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yD,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xD,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(__,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u_,"id","transformers.AutoModel"),c(u_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u_,"href","#transformers.AutoModel"),c(rd,"class","relative group"),c($D,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kD,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SD,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RD,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertModel"),c(PD,"href","/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartModel"),c(BD,"href","/docs/transformers/pr_18686/en/model_doc/beit#transformers.BeitModel"),c(ID,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertModel"),c(ND,"href","/docs/transformers/pr_18686/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(qD,"href","/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdModel"),c(jD,"href","/docs/transformers/pr_18686/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(DD,"href","/docs/transformers/pr_18686/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(GD,"href","/docs/transformers/pr_18686/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(OD,"href","/docs/transformers/pr_18686/en/model_doc/bloom#transformers.BloomModel"),c(VD,"href","/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertModel"),c(XD,"href","/docs/transformers/pr_18686/en/model_doc/canine#transformers.CanineModel"),c(zD,"href","/docs/transformers/pr_18686/en/model_doc/clip#transformers.CLIPModel"),c(WD,"href","/docs/transformers/pr_18686/en/model_doc/codegen#transformers.CodeGenModel"),c(QD,"href","/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertModel"),c(UD,"href","/docs/transformers/pr_18686/en/model_doc/convnext#transformers.ConvNextModel"),c(HD,"href","/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.CTRLModel"),c(JD,"href","/docs/transformers/pr_18686/en/model_doc/cvt#transformers.CvtModel"),c(YD,"href","/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(KD,"href","/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(ZD,"href","/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(eG,"href","/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaModel"),c(oG,"href","/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(rG,"href","/docs/transformers/pr_18686/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(tG,"href","/docs/transformers/pr_18686/en/model_doc/deit#transformers.DeiTModel"),c(aG,"href","/docs/transformers/pr_18686/en/model_doc/detr#transformers.DetrModel"),c(nG,"href","/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertModel"),c(sG,"href","/docs/transformers/pr_18686/en/model_doc/donut#transformers.DonutSwinModel"),c(lG,"href","/docs/transformers/pr_18686/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(iG,"href","/docs/transformers/pr_18686/en/model_doc/dpt#transformers.DPTModel"),c(dG,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraModel"),c(cG,"href","/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertModel"),c(fG,"href","/docs/transformers/pr_18686/en/model_doc/flava#transformers.FlavaModel"),c(mG,"href","/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetModel"),c(gG,"href","/docs/transformers/pr_18686/en/model_doc/fsmt#transformers.FSMTModel"),c(hG,"href","/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelModel"),c(pG,"href","/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelBaseModel"),c(_G,"href","/docs/transformers/pr_18686/en/model_doc/glpn#transformers.GLPNModel"),c(uG,"href","/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2Model"),c(bG,"href","/docs/transformers/pr_18686/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(vG,"href","/docs/transformers/pr_18686/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(FG,"href","/docs/transformers/pr_18686/en/model_doc/gptj#transformers.GPTJModel"),c(TG,"href","/docs/transformers/pr_18686/en/model_doc/groupvit#transformers.GroupViTModel"),c(MG,"href","/docs/transformers/pr_18686/en/model_doc/hubert#transformers.HubertModel"),c(EG,"href","/docs/transformers/pr_18686/en/model_doc/ibert#transformers.IBertModel"),c(CG,"href","/docs/transformers/pr_18686/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(wG,"href","/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(AG,"href","/docs/transformers/pr_18686/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(LG,"href","/docs/transformers/pr_18686/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(yG,"href","/docs/transformers/pr_18686/en/model_doc/led#transformers.LEDModel"),c(xG,"href","/docs/transformers/pr_18686/en/model_doc/levit#transformers.LevitModel"),c($G,"href","/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerModel"),c(kG,"href","/docs/transformers/pr_18686/en/model_doc/longt5#transformers.LongT5Model"),c(SG,"href","/docs/transformers/pr_18686/en/model_doc/luke#transformers.LukeModel"),c(RG,"href","/docs/transformers/pr_18686/en/model_doc/lxmert#transformers.LxmertModel"),c(PG,"href","/docs/transformers/pr_18686/en/model_doc/m2m_100#transformers.M2M100Model"),c(BG,"href","/docs/transformers/pr_18686/en/model_doc/marian#transformers.MarianModel"),c(IG,"href","/docs/transformers/pr_18686/en/model_doc/maskformer#transformers.MaskFormerModel"),c(NG,"href","/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartModel"),c(qG,"href","/docs/transformers/pr_18686/en/model_doc/mctct#transformers.MCTCTModel"),c(jG,"href","/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(DG,"href","/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertModel"),c(GG,"href","/docs/transformers/pr_18686/en/model_doc/mobilevit#transformers.MobileViTModel"),c(OG,"href","/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetModel"),c(VG,"href","/docs/transformers/pr_18686/en/model_doc/mt5#transformers.MT5Model"),c(XG,"href","/docs/transformers/pr_18686/en/model_doc/mvp#transformers.MvpModel"),c(zG,"href","/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaModel"),c(WG,"href","/docs/transformers/pr_18686/en/model_doc/m2m_100#transformers.M2M100Model"),c(QG,"href","/docs/transformers/pr_18686/en/model_doc/nystromformer#transformers.NystromformerModel"),c(UG,"href","/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(HG,"href","/docs/transformers/pr_18686/en/model_doc/opt#transformers.OPTModel"),c(JG,"href","/docs/transformers/pr_18686/en/model_doc/owlvit#transformers.OwlViTModel"),c(YG,"href","/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.PegasusModel"),c(KG,"href","/docs/transformers/pr_18686/en/model_doc/perceiver#transformers.PerceiverModel"),c(ZG,"href","/docs/transformers/pr_18686/en/model_doc/plbart#transformers.PLBartModel"),c(eO,"href","/docs/transformers/pr_18686/en/model_doc/poolformer#transformers.PoolFormerModel"),c(oO,"href","/docs/transformers/pr_18686/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(rO,"href","/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertModel"),c(tO,"href","/docs/transformers/pr_18686/en/model_doc/reformer#transformers.ReformerModel"),c(aO,"href","/docs/transformers/pr_18686/en/model_doc/regnet#transformers.RegNetModel"),c(nO,"href","/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertModel"),c(sO,"href","/docs/transformers/pr_18686/en/model_doc/resnet#transformers.ResNetModel"),c(lO,"href","/docs/transformers/pr_18686/en/model_doc/retribert#transformers.RetriBertModel"),c(iO,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaModel"),c(dO,"href","/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerModel"),c(cO,"href","/docs/transformers/pr_18686/en/model_doc/segformer#transformers.SegformerModel"),c(fO,"href","/docs/transformers/pr_18686/en/model_doc/sew#transformers.SEWModel"),c(mO,"href","/docs/transformers/pr_18686/en/model_doc/sew-d#transformers.SEWDModel"),c(gO,"href","/docs/transformers/pr_18686/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(hO,"href","/docs/transformers/pr_18686/en/model_doc/splinter#transformers.SplinterModel"),c(pO,"href","/docs/transformers/pr_18686/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(_O,"href","/docs/transformers/pr_18686/en/model_doc/swin#transformers.SwinModel"),c(uO,"href","/docs/transformers/pr_18686/en/model_doc/swinv2#transformers.Swinv2Model"),c(bO,"href","/docs/transformers/pr_18686/en/model_doc/t5#transformers.T5Model"),c(vO,"href","/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TapasModel"),c(FO,"href","/docs/transformers/pr_18686/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(TO,"href","/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(MO,"href","/docs/transformers/pr_18686/en/model_doc/unispeech#transformers.UniSpeechModel"),c(EO,"href","/docs/transformers/pr_18686/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(CO,"href","/docs/transformers/pr_18686/en/model_doc/van#transformers.VanModel"),c(wO,"href","/docs/transformers/pr_18686/en/model_doc/videomae#transformers.VideoMAEModel"),c(AO,"href","/docs/transformers/pr_18686/en/model_doc/vilt#transformers.ViltModel"),c(LO,"href","/docs/transformers/pr_18686/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(yO,"href","/docs/transformers/pr_18686/en/model_doc/visual_bert#transformers.VisualBertModel"),c(xO,"href","/docs/transformers/pr_18686/en/model_doc/vit#transformers.ViTModel"),c($O,"href","/docs/transformers/pr_18686/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(kO,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(SO,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(RO,"href","/docs/transformers/pr_18686/en/model_doc/wavlm#transformers.WavLMModel"),c(PO,"href","/docs/transformers/pr_18686/en/model_doc/xglm#transformers.XGLMModel"),c(BO,"href","/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMModel"),c(IO,"href","/docs/transformers/pr_18686/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(NO,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(qO,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(jO,"href","/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetModel"),c(DO,"href","/docs/transformers/pr_18686/en/model_doc/yolos#transformers.YolosModel"),c(GO,"href","/docs/transformers/pr_18686/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y1,"id","transformers.AutoModelForPreTraining"),c(y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y1,"href","#transformers.AutoModelForPreTraining"),c(nd,"class","relative group"),c(OO,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VO,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XO,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zO,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertForPreTraining"),c(WO,"href","/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(QO,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertForPreTraining"),c(UO,"href","/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(HO,"href","/docs/transformers/pr_18686/en/model_doc/bloom#transformers.BloomForCausalLM"),c(JO,"href","/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(YO,"href","/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(KO,"href","/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(ZO,"href","/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(eV,"href","/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(oV,"href","/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(rV,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraForPreTraining"),c(tV,"href","/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(aV,"href","/docs/transformers/pr_18686/en/model_doc/flava#transformers.FlavaForPreTraining"),c(nV,"href","/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetForPreTraining"),c(sV,"href","/docs/transformers/pr_18686/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(lV,"href","/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(iV,"href","/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(dV,"href","/docs/transformers/pr_18686/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(cV,"href","/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(fV,"href","/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(mV,"href","/docs/transformers/pr_18686/en/model_doc/luke#transformers.LukeForMaskedLM"),c(gV,"href","/docs/transformers/pr_18686/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(hV,"href","/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(pV,"href","/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(_V,"href","/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(uV,"href","/docs/transformers/pr_18686/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(bV,"href","/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(vV,"href","/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(FV,"href","/docs/transformers/pr_18686/en/model_doc/retribert#transformers.RetriBertModel"),c(TV,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(MV,"href","/docs/transformers/pr_18686/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(EV,"href","/docs/transformers/pr_18686/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(CV,"href","/docs/transformers/pr_18686/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(wV,"href","/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(AV,"href","/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(LV,"href","/docs/transformers/pr_18686/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(yV,"href","/docs/transformers/pr_18686/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(xV,"href","/docs/transformers/pr_18686/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c($V,"href","/docs/transformers/pr_18686/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(kV,"href","/docs/transformers/pr_18686/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(SV,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(RV,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(PV,"href","/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(BV,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(IV,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(NV,"href","/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w6,"id","transformers.AutoModelForCausalLM"),c(w6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w6,"href","#transformers.AutoModelForCausalLM"),c(id,"class","relative group"),c(qV,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jV,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DV,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GV,"href","/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartForCausalLM"),c(OV,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertLMHeadModel"),c(VV,"href","/docs/transformers/pr_18686/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(XV,"href","/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(zV,"href","/docs/transformers/pr_18686/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(WV,"href","/docs/transformers/pr_18686/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(QV,"href","/docs/transformers/pr_18686/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(UV,"href","/docs/transformers/pr_18686/en/model_doc/bloom#transformers.BloomForCausalLM"),c(HV,"href","/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(JV,"href","/docs/transformers/pr_18686/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(YV,"href","/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(KV,"href","/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(ZV,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraForCausalLM"),c(eX,"href","/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(oX,"href","/docs/transformers/pr_18686/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(rX,"href","/docs/transformers/pr_18686/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(tX,"href","/docs/transformers/pr_18686/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(aX,"href","/docs/transformers/pr_18686/en/model_doc/marian#transformers.MarianForCausalLM"),c(nX,"href","/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartForCausalLM"),c(sX,"href","/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(lX,"href","/docs/transformers/pr_18686/en/model_doc/mvp#transformers.MvpForCausalLM"),c(iX,"href","/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(dX,"href","/docs/transformers/pr_18686/en/model_doc/opt#transformers.OPTForCausalLM"),c(cX,"href","/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(fX,"href","/docs/transformers/pr_18686/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(mX,"href","/docs/transformers/pr_18686/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(gX,"href","/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(hX,"href","/docs/transformers/pr_18686/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(pX,"href","/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(_X,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(uX,"href","/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(bX,"href","/docs/transformers/pr_18686/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(vX,"href","/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(FX,"href","/docs/transformers/pr_18686/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(TX,"href","/docs/transformers/pr_18686/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(MX,"href","/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(EX,"href","/docs/transformers/pr_18686/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(CX,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(wX,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(AX,"href","/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p8,"id","transformers.AutoModelForMaskedLM"),c(p8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p8,"href","#transformers.AutoModelForMaskedLM"),c(fd,"class","relative group"),c(LX,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yX,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xX,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($X,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(kX,"href","/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(SX,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertForMaskedLM"),c(RX,"href","/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(PX,"href","/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(BX,"href","/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(IX,"href","/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(NX,"href","/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(qX,"href","/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(jX,"href","/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(DX,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(GX,"href","/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(OX,"href","/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(VX,"href","/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(XX,"href","/docs/transformers/pr_18686/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(zX,"href","/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(WX,"href","/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(QX,"href","/docs/transformers/pr_18686/en/model_doc/luke#transformers.LukeForMaskedLM"),c(UX,"href","/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(HX,"href","/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(JX,"href","/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(YX,"href","/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(KX,"href","/docs/transformers/pr_18686/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(ZX,"href","/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(ez,"href","/docs/transformers/pr_18686/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(oz,"href","/docs/transformers/pr_18686/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(rz,"href","/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(tz,"href","/docs/transformers/pr_18686/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(az,"href","/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(nz,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(sz,"href","/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(lz,"href","/docs/transformers/pr_18686/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(iz,"href","/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(dz,"href","/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(cz,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(fz,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(mz,"href","/docs/transformers/pr_18686/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t2,"id","transformers.AutoModelForSeq2SeqLM"),c(t2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t2,"href","#transformers.AutoModelForSeq2SeqLM"),c(hd,"class","relative group"),c(gz,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hz,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pz,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_z,"href","/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(uz,"href","/docs/transformers/pr_18686/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(bz,"href","/docs/transformers/pr_18686/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(vz,"href","/docs/transformers/pr_18686/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Fz,"href","/docs/transformers/pr_18686/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Tz,"href","/docs/transformers/pr_18686/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Mz,"href","/docs/transformers/pr_18686/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Ez,"href","/docs/transformers/pr_18686/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(Cz,"href","/docs/transformers/pr_18686/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(wz,"href","/docs/transformers/pr_18686/en/model_doc/marian#transformers.MarianMTModel"),c(Az,"href","/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Lz,"href","/docs/transformers/pr_18686/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(yz,"href","/docs/transformers/pr_18686/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(xz,"href","/docs/transformers/pr_18686/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c($z,"href","/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(kz,"href","/docs/transformers/pr_18686/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Sz,"href","/docs/transformers/pr_18686/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Rz,"href","/docs/transformers/pr_18686/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Pz,"href","/docs/transformers/pr_18686/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A2,"id","transformers.AutoModelForSequenceClassification"),c(A2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A2,"href","#transformers.AutoModelForSequenceClassification"),c(ud,"class","relative group"),c(Bz,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iz,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nz,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qz,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(jz,"href","/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Dz,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Gz,"href","/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Oz,"href","/docs/transformers/pr_18686/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Vz,"href","/docs/transformers/pr_18686/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(Xz,"href","/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(zz,"href","/docs/transformers/pr_18686/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Wz,"href","/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Qz,"href","/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Uz,"href","/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Hz,"href","/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Jz,"href","/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Yz,"href","/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(Kz,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(Zz,"href","/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(eW,"href","/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(oW,"href","/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(rW,"href","/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(tW,"href","/docs/transformers/pr_18686/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(aW,"href","/docs/transformers/pr_18686/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(nW,"href","/docs/transformers/pr_18686/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(sW,"href","/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(lW,"href","/docs/transformers/pr_18686/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(iW,"href","/docs/transformers/pr_18686/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(dW,"href","/docs/transformers/pr_18686/en/model_doc/led#transformers.LEDForSequenceClassification"),c(cW,"href","/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(fW,"href","/docs/transformers/pr_18686/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(mW,"href","/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(gW,"href","/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(hW,"href","/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(pW,"href","/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(_W,"href","/docs/transformers/pr_18686/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(uW,"href","/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(bW,"href","/docs/transformers/pr_18686/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(vW,"href","/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(FW,"href","/docs/transformers/pr_18686/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(TW,"href","/docs/transformers/pr_18686/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(MW,"href","/docs/transformers/pr_18686/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(EW,"href","/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(CW,"href","/docs/transformers/pr_18686/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(wW,"href","/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(AW,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(LW,"href","/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(yW,"href","/docs/transformers/pr_18686/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(xW,"href","/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c($W,"href","/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(kW,"href","/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(SW,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(RW,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(PW,"href","/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(BW,"href","/docs/transformers/pr_18686/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yb,"id","transformers.AutoModelForMultipleChoice"),c(yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yb,"href","#transformers.AutoModelForMultipleChoice"),c(Fd,"class","relative group"),c(IW,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NW,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qW,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jW,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(DW,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertForMultipleChoice"),c(GW,"href","/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(OW,"href","/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(VW,"href","/docs/transformers/pr_18686/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(XW,"href","/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(zW,"href","/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(WW,"href","/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(QW,"href","/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(UW,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(HW,"href","/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(JW,"href","/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(YW,"href","/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(KW,"href","/docs/transformers/pr_18686/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(ZW,"href","/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(eQ,"href","/docs/transformers/pr_18686/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(oQ,"href","/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(rQ,"href","/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(tQ,"href","/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(aQ,"href","/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(nQ,"href","/docs/transformers/pr_18686/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(sQ,"href","/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(lQ,"href","/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(iQ,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(dQ,"href","/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(cQ,"href","/docs/transformers/pr_18686/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(fQ,"href","/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(mQ,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(gQ,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(hQ,"href","/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(pQ,"href","/docs/transformers/pr_18686/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dv,"id","transformers.AutoModelForNextSentencePrediction"),c(dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dv,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ed,"class","relative group"),c(_Q,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uQ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bQ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vQ,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(FQ,"href","/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(TQ,"href","/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(MQ,"href","/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(EQ,"href","/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(CQ,"href","/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vv,"id","transformers.AutoModelForTokenClassification"),c(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vv,"href","#transformers.AutoModelForTokenClassification"),c(Ad,"class","relative group"),c(wQ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AQ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LQ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yQ,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(xQ,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertForTokenClassification"),c($Q,"href","/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(kQ,"href","/docs/transformers/pr_18686/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(SQ,"href","/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(RQ,"href","/docs/transformers/pr_18686/en/model_doc/canine#transformers.CanineForTokenClassification"),c(PQ,"href","/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(BQ,"href","/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(IQ,"href","/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(NQ,"href","/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(qQ,"href","/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(jQ,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(DQ,"href","/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(GQ,"href","/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(OQ,"href","/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(VQ,"href","/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(XQ,"href","/docs/transformers/pr_18686/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(zQ,"href","/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(WQ,"href","/docs/transformers/pr_18686/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(QQ,"href","/docs/transformers/pr_18686/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(UQ,"href","/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(HQ,"href","/docs/transformers/pr_18686/en/model_doc/luke#transformers.LukeForTokenClassification"),c(JQ,"href","/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(YQ,"href","/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(KQ,"href","/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(ZQ,"href","/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(eU,"href","/docs/transformers/pr_18686/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(oU,"href","/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(rU,"href","/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(tU,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(aU,"href","/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(nU,"href","/docs/transformers/pr_18686/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(sU,"href","/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(lU,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(iU,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(dU,"href","/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(cU,"href","/docs/transformers/pr_18686/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sF,"id","transformers.AutoModelForQuestionAnswering"),c(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sF,"href","#transformers.AutoModelForQuestionAnswering"),c(xd,"class","relative group"),c(fU,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mU,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gU,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hU,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(pU,"href","/docs/transformers/pr_18686/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(_U,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(uU,"href","/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(bU,"href","/docs/transformers/pr_18686/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(vU,"href","/docs/transformers/pr_18686/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(FU,"href","/docs/transformers/pr_18686/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(TU,"href","/docs/transformers/pr_18686/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(MU,"href","/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(EU,"href","/docs/transformers/pr_18686/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(CU,"href","/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(wU,"href","/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(AU,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(LU,"href","/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(yU,"href","/docs/transformers/pr_18686/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(xU,"href","/docs/transformers/pr_18686/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c($U,"href","/docs/transformers/pr_18686/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(kU,"href","/docs/transformers/pr_18686/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(SU,"href","/docs/transformers/pr_18686/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(RU,"href","/docs/transformers/pr_18686/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(PU,"href","/docs/transformers/pr_18686/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(BU,"href","/docs/transformers/pr_18686/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(IU,"href","/docs/transformers/pr_18686/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_18686/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(qU,"href","/docs/transformers/pr_18686/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(jU,"href","/docs/transformers/pr_18686/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_18686/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_18686/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_18686/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_18686/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_18686/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_18686/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_18686/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_18686/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_18686/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(KU,"href","/docs/transformers/pr_18686/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(ZU,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(eH,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(oH,"href","/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(rH,"href","/docs/transformers/pr_18686/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.AutoModelForTableQuestionAnswering"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Sd,"class","relative group"),c(tH,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aH,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nH,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sH,"href","/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aT,"id","transformers.AutoModelForImageClassification"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.AutoModelForImageClassification"),c(Bd,"class","relative group"),c(lH,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iH,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dH,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cH,"href","/docs/transformers/pr_18686/en/model_doc/beit#transformers.BeitForImageClassification"),c(fH,"href","/docs/transformers/pr_18686/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(mH,"href","/docs/transformers/pr_18686/en/model_doc/cvt#transformers.CvtForImageClassification"),c(gH,"href","/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(hH,"href","/docs/transformers/pr_18686/en/model_doc/deit#transformers.DeiTForImageClassification"),c(pH,"href","/docs/transformers/pr_18686/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(_H,"href","/docs/transformers/pr_18686/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(uH,"href","/docs/transformers/pr_18686/en/model_doc/levit#transformers.LevitForImageClassification"),c(bH,"href","/docs/transformers/pr_18686/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(vH,"href","/docs/transformers/pr_18686/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(FH,"href","/docs/transformers/pr_18686/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(TH,"href","/docs/transformers/pr_18686/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(MH,"href","/docs/transformers/pr_18686/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(EH,"href","/docs/transformers/pr_18686/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(CH,"href","/docs/transformers/pr_18686/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(wH,"href","/docs/transformers/pr_18686/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(AH,"href","/docs/transformers/pr_18686/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(LH,"href","/docs/transformers/pr_18686/en/model_doc/swin#transformers.SwinForImageClassification"),c(yH,"href","/docs/transformers/pr_18686/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(xH,"href","/docs/transformers/pr_18686/en/model_doc/van#transformers.VanForImageClassification"),c($H,"href","/docs/transformers/pr_18686/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MT,"id","transformers.AutoModelForVideoClassification"),c(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MT,"href","#transformers.AutoModelForVideoClassification"),c(qd,"class","relative group"),c(kH,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/pr_18686/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LT,"id","transformers.AutoModelForVision2Seq"),c(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LT,"href","#transformers.AutoModelForVision2Seq"),c(Gd,"class","relative group"),c(BH,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_18686/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ST,"id","transformers.AutoModelForVisualQuestionAnswering"),c(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ST,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Xd,"class","relative group"),c(jH,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DH,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GH,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OH,"href","/docs/transformers/pr_18686/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.AutoModelForAudioClassification"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.AutoModelForAudioClassification"),c(Qd,"class","relative group"),c(VH,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XH,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zH,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WH,"href","/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(QH,"href","/docs/transformers/pr_18686/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(UH,"href","/docs/transformers/pr_18686/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(HH,"href","/docs/transformers/pr_18686/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(JH,"href","/docs/transformers/pr_18686/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(YH,"href","/docs/transformers/pr_18686/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(KH,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(eJ,"href","/docs/transformers/pr_18686/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JT,"id","transformers.AutoModelForAudioFrameClassification"),c(JT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JT,"href","#transformers.AutoModelForAudioFrameClassification"),c(Jd,"class","relative group"),c(oJ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rJ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tJ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aJ,"href","/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(nJ,"href","/docs/transformers/pr_18686/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(sJ,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(lJ,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(iJ,"href","/docs/transformers/pr_18686/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nM,"id","transformers.AutoModelForCTC"),c(nM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nM,"href","#transformers.AutoModelForCTC"),c(Zd,"class","relative group"),c(dJ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cJ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fJ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mJ,"href","/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(gJ,"href","/docs/transformers/pr_18686/en/model_doc/hubert#transformers.HubertForCTC"),c(hJ,"href","/docs/transformers/pr_18686/en/model_doc/mctct#transformers.MCTCTForCTC"),c(pJ,"href","/docs/transformers/pr_18686/en/model_doc/sew#transformers.SEWForCTC"),c(_J,"href","/docs/transformers/pr_18686/en/model_doc/sew-d#transformers.SEWDForCTC"),c(uJ,"href","/docs/transformers/pr_18686/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(bJ,"href","/docs/transformers/pr_18686/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(vJ,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(FJ,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(TJ,"href","/docs/transformers/pr_18686/en/model_doc/wavlm#transformers.WavLMForCTC"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vM,"id","transformers.AutoModelForSpeechSeq2Seq"),c(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vM,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(rc,"class","relative group"),c(MJ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EJ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CJ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wJ,"href","/docs/transformers/pr_18686/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(AJ,"href","/docs/transformers/pr_18686/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wM,"id","transformers.AutoModelForAudioXVector"),c(wM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wM,"href","#transformers.AutoModelForAudioXVector"),c(nc,"class","relative group"),c(LJ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yJ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xJ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($J,"href","/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(kJ,"href","/docs/transformers/pr_18686/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(SJ,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(RJ,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(PJ,"href","/docs/transformers/pr_18686/en/model_doc/wavlm#transformers.WavLMForXVector"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PM,"id","transformers.AutoModelForMaskedImageModeling"),c(PM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PM,"href","#transformers.AutoModelForMaskedImageModeling"),c(ic,"class","relative group"),c(BJ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NJ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qJ,"href","/docs/transformers/pr_18686/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(jJ,"href","/docs/transformers/pr_18686/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(DJ,"href","/docs/transformers/pr_18686/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(GJ,"href","/docs/transformers/pr_18686/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OM,"id","transformers.AutoModelForObjectDetection"),c(OM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OM,"href","#transformers.AutoModelForObjectDetection"),c(fc,"class","relative group"),c(OJ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VJ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XJ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zJ,"href","/docs/transformers/pr_18686/en/model_doc/detr#transformers.DetrForObjectDetection"),c(WJ,"href","/docs/transformers/pr_18686/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UM,"id","transformers.AutoModelForImageSegmentation"),c(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UM,"href","#transformers.AutoModelForImageSegmentation"),c(hc,"class","relative group"),c(QJ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UJ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HJ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JJ,"href","/docs/transformers/pr_18686/en/model_doc/detr#transformers.DetrForSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZM,"id","transformers.AutoModelForSemanticSegmentation"),c(ZM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZM,"href","#transformers.AutoModelForSemanticSegmentation"),c(uc,"class","relative group"),c(YJ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KJ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZJ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eY,"href","/docs/transformers/pr_18686/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(oY,"href","/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(rY,"href","/docs/transformers/pr_18686/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(tY,"href","/docs/transformers/pr_18686/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(aY,"href","/docs/transformers/pr_18686/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iE,"id","transformers.AutoModelForInstanceSegmentation"),c(iE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iE,"href","#transformers.AutoModelForInstanceSegmentation"),c(Fc,"class","relative group"),c(nY,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sY,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lY,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iY,"href","/docs/transformers/pr_18686/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gE,"id","transformers.TFAutoModel"),c(gE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gE,"href","#transformers.TFAutoModel"),c(Ec,"class","relative group"),c(dY,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.TFAlbertModel"),c(gY,"href","/docs/transformers/pr_18686/en/model_doc/bart#transformers.TFBartModel"),c(hY,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.TFBertModel"),c(pY,"href","/docs/transformers/pr_18686/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(_Y,"href","/docs/transformers/pr_18686/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(uY,"href","/docs/transformers/pr_18686/en/model_doc/camembert#transformers.TFCamembertModel"),c(bY,"href","/docs/transformers/pr_18686/en/model_doc/clip#transformers.TFCLIPModel"),c(vY,"href","/docs/transformers/pr_18686/en/model_doc/convbert#transformers.TFConvBertModel"),c(FY,"href","/docs/transformers/pr_18686/en/model_doc/convnext#transformers.TFConvNextModel"),c(TY,"href","/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.TFCTRLModel"),c(MY,"href","/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(EY,"href","/docs/transformers/pr_18686/en/model_doc/deberta#transformers.TFDebertaModel"),c(CY,"href","/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(wY,"href","/docs/transformers/pr_18686/en/model_doc/deit#transformers.TFDeiTModel"),c(AY,"href","/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(LY,"href","/docs/transformers/pr_18686/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(yY,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.TFElectraModel"),c(xY,"href","/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.TFFlaubertModel"),c($Y,"href","/docs/transformers/pr_18686/en/model_doc/funnel#transformers.TFFunnelModel"),c(kY,"href","/docs/transformers/pr_18686/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(SY,"href","/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.TFGPT2Model"),c(RY,"href","/docs/transformers/pr_18686/en/model_doc/gptj#transformers.TFGPTJModel"),c(PY,"href","/docs/transformers/pr_18686/en/model_doc/hubert#transformers.TFHubertModel"),c(BY,"href","/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(IY,"href","/docs/transformers/pr_18686/en/model_doc/led#transformers.TFLEDModel"),c(NY,"href","/docs/transformers/pr_18686/en/model_doc/longformer#transformers.TFLongformerModel"),c(qY,"href","/docs/transformers/pr_18686/en/model_doc/lxmert#transformers.TFLxmertModel"),c(jY,"href","/docs/transformers/pr_18686/en/model_doc/marian#transformers.TFMarianModel"),c(DY,"href","/docs/transformers/pr_18686/en/model_doc/mbart#transformers.TFMBartModel"),c(GY,"href","/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(OY,"href","/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.TFMPNetModel"),c(VY,"href","/docs/transformers/pr_18686/en/model_doc/mt5#transformers.TFMT5Model"),c(XY,"href","/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(zY,"href","/docs/transformers/pr_18686/en/model_doc/opt#transformers.TFOPTModel"),c(WY,"href","/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.TFPegasusModel"),c(QY,"href","/docs/transformers/pr_18686/en/model_doc/regnet#transformers.TFRegNetModel"),c(UY,"href","/docs/transformers/pr_18686/en/model_doc/rembert#transformers.TFRemBertModel"),c(HY,"href","/docs/transformers/pr_18686/en/model_doc/resnet#transformers.TFResNetModel"),c(JY,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.TFRobertaModel"),c(YY,"href","/docs/transformers/pr_18686/en/model_doc/roformer#transformers.TFRoFormerModel"),c(KY,"href","/docs/transformers/pr_18686/en/model_doc/segformer#transformers.TFSegformerModel"),c(ZY,"href","/docs/transformers/pr_18686/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(eK,"href","/docs/transformers/pr_18686/en/model_doc/swin#transformers.TFSwinModel"),c(oK,"href","/docs/transformers/pr_18686/en/model_doc/t5#transformers.TFT5Model"),c(rK,"href","/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TFTapasModel"),c(tK,"href","/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(aK,"href","/docs/transformers/pr_18686/en/model_doc/vit#transformers.TFViTModel"),c(nK,"href","/docs/transformers/pr_18686/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(sK,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(lK,"href","/docs/transformers/pr_18686/en/model_doc/xlm#transformers.TFXLMModel"),c(iK,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(dK,"href","/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m4,"id","transformers.TFAutoModelForPreTraining"),c(m4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m4,"href","#transformers.TFAutoModelForPreTraining"),c(Ac,"class","relative group"),c(cK,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fK,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mK,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gK,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(hK,"href","/docs/transformers/pr_18686/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(pK,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.TFBertForPreTraining"),c(_K,"href","/docs/transformers/pr_18686/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(uK,"href","/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(bK,"href","/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(vK,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(FK,"href","/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(TK,"href","/docs/transformers/pr_18686/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(MK,"href","/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(EK,"href","/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(CK,"href","/docs/transformers/pr_18686/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(wK,"href","/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(AK,"href","/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(LK,"href","/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(yK,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(xK,"href","/docs/transformers/pr_18686/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($K,"href","/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(kK,"href","/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(SK,"href","/docs/transformers/pr_18686/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(RK,"href","/docs/transformers/pr_18686/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(PK,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(BK,"href","/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q4,"id","transformers.TFAutoModelForCausalLM"),c(q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q4,"href","#transformers.TFAutoModelForCausalLM"),c(xc,"class","relative group"),c(IK,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NK,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qK,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jK,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(DK,"href","/docs/transformers/pr_18686/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(GK,"href","/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(OK,"href","/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(VK,"href","/docs/transformers/pr_18686/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(XK,"href","/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(zK,"href","/docs/transformers/pr_18686/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(WK,"href","/docs/transformers/pr_18686/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(QK,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(UK,"href","/docs/transformers/pr_18686/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(HK,"href","/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(JK,"href","/docs/transformers/pr_18686/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(YK,"href","/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eC,"id","transformers.TFAutoModelForImageClassification"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.TFAutoModelForImageClassification"),c(Sc,"class","relative group"),c(KK,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZK,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eZ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oZ,"href","/docs/transformers/pr_18686/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(rZ,"href","/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(tZ,"href","/docs/transformers/pr_18686/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(aZ,"href","/docs/transformers/pr_18686/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(nZ,"href","/docs/transformers/pr_18686/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(sZ,"href","/docs/transformers/pr_18686/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(lZ,"href","/docs/transformers/pr_18686/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(iZ,"href","/docs/transformers/pr_18686/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(dZ,"href","/docs/transformers/pr_18686/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cC,"id","transformers.TFAutoModelForSemanticSegmentation"),c(cC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cC,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(Bc,"class","relative group"),c(cZ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fZ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mZ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gZ,"href","/docs/transformers/pr_18686/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(hZ,"href","/docs/transformers/pr_18686/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.TFAutoModelForMaskedLM"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.TFAutoModelForMaskedLM"),c(qc,"class","relative group"),c(pZ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Z,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uZ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bZ,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(vZ,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(FZ,"href","/docs/transformers/pr_18686/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(TZ,"href","/docs/transformers/pr_18686/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(MZ,"href","/docs/transformers/pr_18686/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(EZ,"href","/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(CZ,"href","/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(wZ,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(AZ,"href","/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(LZ,"href","/docs/transformers/pr_18686/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(yZ,"href","/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(xZ,"href","/docs/transformers/pr_18686/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c($Z,"href","/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(kZ,"href","/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(SZ,"href","/docs/transformers/pr_18686/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(RZ,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(PZ,"href","/docs/transformers/pr_18686/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(BZ,"href","/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(IZ,"href","/docs/transformers/pr_18686/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(NZ,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qC,"id","transformers.TFAutoModelForSeq2SeqLM"),c(qC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qC,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(qZ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jZ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DZ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GZ,"href","/docs/transformers/pr_18686/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(OZ,"href","/docs/transformers/pr_18686/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(VZ,"href","/docs/transformers/pr_18686/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(XZ,"href","/docs/transformers/pr_18686/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(zZ,"href","/docs/transformers/pr_18686/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(WZ,"href","/docs/transformers/pr_18686/en/model_doc/marian#transformers.TFMarianMTModel"),c(QZ,"href","/docs/transformers/pr_18686/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(UZ,"href","/docs/transformers/pr_18686/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(HZ,"href","/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(JZ,"href","/docs/transformers/pr_18686/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YC,"id","transformers.TFAutoModelForSequenceClassification"),c(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YC,"href","#transformers.TFAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(YZ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KZ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZZ,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eee,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(oee,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(ree,"href","/docs/transformers/pr_18686/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(tee,"href","/docs/transformers/pr_18686/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(aee,"href","/docs/transformers/pr_18686/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(nee,"href","/docs/transformers/pr_18686/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(see,"href","/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(lee,"href","/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(iee,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(dee,"href","/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(cee,"href","/docs/transformers/pr_18686/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(fee,"href","/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(mee,"href","/docs/transformers/pr_18686/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(gee,"href","/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(hee,"href","/docs/transformers/pr_18686/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(pee,"href","/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(_ee,"href","/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(uee,"href","/docs/transformers/pr_18686/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(bee,"href","/docs/transformers/pr_18686/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(vee,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Fee,"href","/docs/transformers/pr_18686/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(Tee,"href","/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(Mee,"href","/docs/transformers/pr_18686/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(Eee,"href","/docs/transformers/pr_18686/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(Cee,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(wee,"href","/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A3,"id","transformers.TFAutoModelForMultipleChoice"),c(A3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A3,"href","#transformers.TFAutoModelForMultipleChoice"),c(Qc,"class","relative group"),c(Aee,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lee,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yee,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xee,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c($ee,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(kee,"href","/docs/transformers/pr_18686/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(See,"href","/docs/transformers/pr_18686/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(Ree,"href","/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(Pee,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(Bee,"href","/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(Iee,"href","/docs/transformers/pr_18686/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(Nee,"href","/docs/transformers/pr_18686/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(qee,"href","/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(jee,"href","/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(Dee,"href","/docs/transformers/pr_18686/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(Gee,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(Oee,"href","/docs/transformers/pr_18686/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(Vee,"href","/docs/transformers/pr_18686/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(Xee,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(zee,"href","/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W3,"id","transformers.TFAutoModelForNextSentencePrediction"),c(W3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W3,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Jc,"class","relative group"),c(Wee,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qee,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uee,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hee,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(Jee,"href","/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y3,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y3,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Zc,"class","relative group"),c(Yee,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kee,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zee,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eoe,"href","/docs/transformers/pr_18686/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o5,"id","transformers.TFAutoModelForTokenClassification"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.TFAutoModelForTokenClassification"),c(rf,"class","relative group"),c(ooe,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(roe,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(toe,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aoe,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(noe,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(soe,"href","/docs/transformers/pr_18686/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(loe,"href","/docs/transformers/pr_18686/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(ioe,"href","/docs/transformers/pr_18686/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(doe,"href","/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(coe,"href","/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(foe,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(moe,"href","/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(goe,"href","/docs/transformers/pr_18686/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(hoe,"href","/docs/transformers/pr_18686/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(poe,"href","/docs/transformers/pr_18686/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(_oe,"href","/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(uoe,"href","/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(boe,"href","/docs/transformers/pr_18686/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(voe,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Foe,"href","/docs/transformers/pr_18686/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(Toe,"href","/docs/transformers/pr_18686/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(Moe,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(Eoe,"href","/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C5,"id","transformers.TFAutoModelForQuestionAnswering"),c(C5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(nf,"class","relative group"),c(Coe,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(woe,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Aoe,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Loe,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(yoe,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(xoe,"href","/docs/transformers/pr_18686/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c($oe,"href","/docs/transformers/pr_18686/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(koe,"href","/docs/transformers/pr_18686/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(Soe,"href","/docs/transformers/pr_18686/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(Roe,"href","/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(Poe,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(Boe,"href","/docs/transformers/pr_18686/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(Ioe,"href","/docs/transformers/pr_18686/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(Noe,"href","/docs/transformers/pr_18686/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(qoe,"href","/docs/transformers/pr_18686/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(joe,"href","/docs/transformers/pr_18686/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(Doe,"href","/docs/transformers/pr_18686/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(Goe,"href","/docs/transformers/pr_18686/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(Ooe,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(Voe,"href","/docs/transformers/pr_18686/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(Xoe,"href","/docs/transformers/pr_18686/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(zoe,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(Woe,"href","/docs/transformers/pr_18686/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q5,"id","transformers.TFAutoModelForVision2Seq"),c(Q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q5,"href","#transformers.TFAutoModelForVision2Seq"),c(df,"class","relative group"),c(Qoe,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uoe,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hoe,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Joe,"href","/docs/transformers/pr_18686/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(Y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(mf,"class","relative group"),c(Yoe,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Koe,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zoe,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ere,"href","/docs/transformers/pr_18686/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o0,"id","transformers.FlaxAutoModel"),c(o0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o0,"href","#transformers.FlaxAutoModel"),c(pf,"class","relative group"),c(ore,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rre,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tre,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(are,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.FlaxAlbertModel"),c(nre,"href","/docs/transformers/pr_18686/en/model_doc/bart#transformers.FlaxBartModel"),c(sre,"href","/docs/transformers/pr_18686/en/model_doc/beit#transformers.FlaxBeitModel"),c(lre,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.FlaxBertModel"),c(ire,"href","/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(dre,"href","/docs/transformers/pr_18686/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(cre,"href","/docs/transformers/pr_18686/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(fre,"href","/docs/transformers/pr_18686/en/model_doc/clip#transformers.FlaxCLIPModel"),c(mre,"href","/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(gre,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.FlaxElectraModel"),c(hre,"href","/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(pre,"href","/docs/transformers/pr_18686/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(_re,"href","/docs/transformers/pr_18686/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(ure,"href","/docs/transformers/pr_18686/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(bre,"href","/docs/transformers/pr_18686/en/model_doc/marian#transformers.FlaxMarianModel"),c(vre,"href","/docs/transformers/pr_18686/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Fre,"href","/docs/transformers/pr_18686/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Tre,"href","/docs/transformers/pr_18686/en/model_doc/opt#transformers.FlaxOPTModel"),c(Mre,"href","/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Ere,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Cre,"href","/docs/transformers/pr_18686/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(wre,"href","/docs/transformers/pr_18686/en/model_doc/t5#transformers.FlaxT5Model"),c(Are,"href","/docs/transformers/pr_18686/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Lre,"href","/docs/transformers/pr_18686/en/model_doc/vit#transformers.FlaxViTModel"),c(yre,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(xre,"href","/docs/transformers/pr_18686/en/model_doc/xglm#transformers.FlaxXGLMModel"),c($re,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k0,"id","transformers.FlaxAutoModelForCausalLM"),c(k0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k0,"href","#transformers.FlaxAutoModelForCausalLM"),c(bf,"class","relative group"),c(kre,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sre,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rre,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pre,"href","/docs/transformers/pr_18686/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Bre,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Ire,"href","/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Nre,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(qre,"href","/docs/transformers/pr_18686/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(jre,"href","/docs/transformers/pr_18686/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Dre,"href","/docs/transformers/pr_18686/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Gre,"href","/docs/transformers/pr_18686/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Ore,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Vre,"href","/docs/transformers/pr_18686/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X0,"id","transformers.FlaxAutoModelForPreTraining"),c(X0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X0,"href","#transformers.FlaxAutoModelForPreTraining"),c(Tf,"class","relative group"),c(Xre,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zre,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wre,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qre,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Ure,"href","/docs/transformers/pr_18686/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Hre,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Jre,"href","/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Yre,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Kre,"href","/docs/transformers/pr_18686/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Zre,"href","/docs/transformers/pr_18686/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(ete,"href","/docs/transformers/pr_18686/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(ote,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(rte,"href","/docs/transformers/pr_18686/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(tte,"href","/docs/transformers/pr_18686/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(ate,"href","/docs/transformers/pr_18686/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(nte,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sw,"id","transformers.FlaxAutoModelForMaskedLM"),c(sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sw,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Cf,"class","relative group"),c(ste,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lte,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ite,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dte,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(cte,"href","/docs/transformers/pr_18686/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(fte,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(mte,"href","/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(gte,"href","/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(hte,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(pte,"href","/docs/transformers/pr_18686/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(_te,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(ute,"href","/docs/transformers/pr_18686/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(bte,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(vw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Lf,"class","relative group"),c(vte,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fte,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tte,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mte,"href","/docs/transformers/pr_18686/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Ete,"href","/docs/transformers/pr_18686/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Cte,"href","/docs/transformers/pr_18686/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(wte,"href","/docs/transformers/pr_18686/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Ate,"href","/docs/transformers/pr_18686/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Lte,"href","/docs/transformers/pr_18686/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(yte,"href","/docs/transformers/pr_18686/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(xte,"href","/docs/transformers/pr_18686/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c($te,"href","/docs/transformers/pr_18686/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(kte,"href","/docs/transformers/pr_18686/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(Sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c($f,"class","relative group"),c(Ste,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rte,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pte,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bte,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Ite,"href","/docs/transformers/pr_18686/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Nte,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(qte,"href","/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(jte,"href","/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Dte,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Gte,"href","/docs/transformers/pr_18686/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Ote,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Vte,"href","/docs/transformers/pr_18686/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Xte,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(zw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Rf,"class","relative group"),c(zte,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wte,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qte,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ute,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Hte,"href","/docs/transformers/pr_18686/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Jte,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Yte,"href","/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Kte,"href","/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Zte,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(eae,"href","/docs/transformers/pr_18686/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(oae,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(rae,"href","/docs/transformers/pr_18686/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(tae,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aA,"id","transformers.FlaxAutoModelForTokenClassification"),c(aA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(If,"class","relative group"),c(aae,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nae,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sae,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lae,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(iae,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(dae,"href","/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(cae,"href","/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(fae,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(mae,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(gae,"href","/docs/transformers/pr_18686/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(hae,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(pA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(jf,"class","relative group"),c(pae,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_ae,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uae,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bae,"href","/docs/transformers/pr_18686/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(vae,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Fae,"href","/docs/transformers/pr_18686/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Tae,"href","/docs/transformers/pr_18686/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Mae,"href","/docs/transformers/pr_18686/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Eae,"href","/docs/transformers/pr_18686/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Cae,"href","/docs/transformers/pr_18686/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(wae,"href","/docs/transformers/pr_18686/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(AA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Of,"class","relative group"),c(Aae,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lae,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yae,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xae,"href","/docs/transformers/pr_18686/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($A,"id","transformers.FlaxAutoModelForImageClassification"),c($A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($A,"href","#transformers.FlaxAutoModelForImageClassification"),c(zf,"class","relative group"),c($ae,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kae,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sae,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rae,"href","/docs/transformers/pr_18686/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Pae,"href","/docs/transformers/pr_18686/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BA,"id","transformers.FlaxAutoModelForVision2Seq"),c(BA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Uf,"class","relative group"),c(Bae,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iae,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nae,"href","/docs/transformers/pr_18686/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qae,"href","/docs/transformers/pr_18686/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Ao),e(Ao,Oi),b(f,em,u),b(f,ft,u),e(ft,Vi),e(ft,Xi),e(Xi,dy),e(ft,om),b(f,Oe,u),b(f,Qe,u),e(Qe,zi),e(Qe,Xn),e(Xn,cy),e(Qe,zn),e(Qe,Wn),e(Wn,fy),e(Qe,Wi),e(Qe,Qn),e(Qn,my),e(Qe,Qi),b(f,rm,u),M(ja,f,u),b(f,Ue,u),b(f,Ae,u),e(Ae,tP),e(Ae,Ui),e(Ui,aP),e(Ae,nP),b(f,Lo,u),b(f,Da,u),e(Da,sP),e(Da,tm),e(tm,lP),e(Da,cKe),b(f,DQe,u),b(f,Hi,u),e(Hi,am),e(am,Ise),M(gy,Ise,null),e(Hi,fKe),e(Hi,Nse),e(Nse,mKe),b(f,GQe,u),b(f,Un,u),e(Un,gKe),e(Un,qse),e(qse,hKe),e(Un,pKe),e(Un,jse),e(jse,_Ke),e(Un,uKe),b(f,OQe,u),M(hy,f,u),b(f,VQe,u),b(f,iP,u),e(iP,bKe),b(f,XQe,u),M(nm,f,u),b(f,zQe,u),b(f,Ji,u),e(Ji,sm),e(sm,Dse),M(py,Dse,null),e(Ji,vKe),e(Ji,Gse),e(Gse,FKe),b(f,WQe,u),b(f,yo,u),M(_y,yo,null),e(yo,TKe),e(yo,uy),e(uy,MKe),e(uy,dP),e(dP,EKe),e(uy,CKe),e(yo,wKe),e(yo,by),e(by,AKe),e(by,Ose),e(Ose,LKe),e(by,yKe),e(yo,xKe),e(yo,kr),M(vy,kr,null),e(kr,$Ke),e(kr,Vse),e(Vse,kKe),e(kr,SKe),e(kr,Yi),e(Yi,RKe),e(Yi,Xse),e(Xse,PKe),e(Yi,BKe),e(Yi,zse),e(zse,IKe),e(Yi,NKe),e(kr,qKe),e(kr,A),e(A,lm),e(lm,Wse),e(Wse,jKe),e(lm,DKe),e(lm,cP),e(cP,GKe),e(lm,OKe),e(A,VKe),e(A,im),e(im,Qse),e(Qse,XKe),e(im,zKe),e(im,fP),e(fP,WKe),e(im,QKe),e(A,UKe),e(A,dm),e(dm,Use),e(Use,HKe),e(dm,JKe),e(dm,mP),e(mP,YKe),e(dm,KKe),e(A,ZKe),e(A,cm),e(cm,Hse),e(Hse,eZe),e(cm,oZe),e(cm,gP),e(gP,rZe),e(cm,tZe),e(A,aZe),e(A,fm),e(fm,Jse),e(Jse,nZe),e(fm,sZe),e(fm,hP),e(hP,lZe),e(fm,iZe),e(A,dZe),e(A,mm),e(mm,Yse),e(Yse,cZe),e(mm,fZe),e(mm,pP),e(pP,mZe),e(mm,gZe),e(A,hZe),e(A,gm),e(gm,Kse),e(Kse,pZe),e(gm,_Ze),e(gm,_P),e(_P,uZe),e(gm,bZe),e(A,vZe),e(A,hm),e(hm,Zse),e(Zse,FZe),e(hm,TZe),e(hm,uP),e(uP,MZe),e(hm,EZe),e(A,CZe),e(A,pm),e(pm,ele),e(ele,wZe),e(pm,AZe),e(pm,bP),e(bP,LZe),e(pm,yZe),e(A,xZe),e(A,_m),e(_m,ole),e(ole,$Ze),e(_m,kZe),e(_m,vP),e(vP,SZe),e(_m,RZe),e(A,PZe),e(A,um),e(um,rle),e(rle,BZe),e(um,IZe),e(um,FP),e(FP,NZe),e(um,qZe),e(A,jZe),e(A,bm),e(bm,tle),e(tle,DZe),e(bm,GZe),e(bm,TP),e(TP,OZe),e(bm,VZe),e(A,XZe),e(A,vm),e(vm,ale),e(ale,zZe),e(vm,WZe),e(vm,MP),e(MP,QZe),e(vm,UZe),e(A,HZe),e(A,Fm),e(Fm,nle),e(nle,JZe),e(Fm,YZe),e(Fm,EP),e(EP,KZe),e(Fm,ZZe),e(A,eeo),e(A,Tm),e(Tm,sle),e(sle,oeo),e(Tm,reo),e(Tm,CP),e(CP,teo),e(Tm,aeo),e(A,neo),e(A,Mm),e(Mm,lle),e(lle,seo),e(Mm,leo),e(Mm,wP),e(wP,ieo),e(Mm,deo),e(A,ceo),e(A,Em),e(Em,ile),e(ile,feo),e(Em,meo),e(Em,AP),e(AP,geo),e(Em,heo),e(A,peo),e(A,Cm),e(Cm,dle),e(dle,_eo),e(Cm,ueo),e(Cm,LP),e(LP,beo),e(Cm,veo),e(A,Feo),e(A,wm),e(wm,cle),e(cle,Teo),e(wm,Meo),e(wm,yP),e(yP,Eeo),e(wm,Ceo),e(A,weo),e(A,Am),e(Am,fle),e(fle,Aeo),e(Am,Leo),e(Am,xP),e(xP,yeo),e(Am,xeo),e(A,$eo),e(A,Lm),e(Lm,mle),e(mle,keo),e(Lm,Seo),e(Lm,$P),e($P,Reo),e(Lm,Peo),e(A,Beo),e(A,ym),e(ym,gle),e(gle,Ieo),e(ym,Neo),e(ym,kP),e(kP,qeo),e(ym,jeo),e(A,Deo),e(A,xm),e(xm,hle),e(hle,Geo),e(xm,Oeo),e(xm,SP),e(SP,Veo),e(xm,Xeo),e(A,zeo),e(A,$m),e($m,ple),e(ple,Weo),e($m,Qeo),e($m,RP),e(RP,Ueo),e($m,Heo),e(A,Jeo),e(A,km),e(km,_le),e(_le,Yeo),e(km,Keo),e(km,PP),e(PP,Zeo),e(km,eoo),e(A,ooo),e(A,Sm),e(Sm,ule),e(ule,roo),e(Sm,too),e(Sm,BP),e(BP,aoo),e(Sm,noo),e(A,soo),e(A,Rm),e(Rm,ble),e(ble,loo),e(Rm,ioo),e(Rm,IP),e(IP,doo),e(Rm,coo),e(A,foo),e(A,Pm),e(Pm,vle),e(vle,moo),e(Pm,goo),e(Pm,NP),e(NP,hoo),e(Pm,poo),e(A,_oo),e(A,Bm),e(Bm,Fle),e(Fle,uoo),e(Bm,boo),e(Bm,qP),e(qP,voo),e(Bm,Foo),e(A,Too),e(A,Im),e(Im,Tle),e(Tle,Moo),e(Im,Eoo),e(Im,jP),e(jP,Coo),e(Im,woo),e(A,Aoo),e(A,Nm),e(Nm,Mle),e(Mle,Loo),e(Nm,yoo),e(Nm,DP),e(DP,xoo),e(Nm,$oo),e(A,koo),e(A,qm),e(qm,Ele),e(Ele,Soo),e(qm,Roo),e(qm,GP),e(GP,Poo),e(qm,Boo),e(A,Ioo),e(A,jm),e(jm,Cle),e(Cle,Noo),e(jm,qoo),e(jm,OP),e(OP,joo),e(jm,Doo),e(A,Goo),e(A,Dm),e(Dm,wle),e(wle,Ooo),e(Dm,Voo),e(Dm,VP),e(VP,Xoo),e(Dm,zoo),e(A,Woo),e(A,Gm),e(Gm,Ale),e(Ale,Qoo),e(Gm,Uoo),e(Gm,XP),e(XP,Hoo),e(Gm,Joo),e(A,Yoo),e(A,Om),e(Om,Lle),e(Lle,Koo),e(Om,Zoo),e(Om,zP),e(zP,ero),e(Om,oro),e(A,rro),e(A,Vm),e(Vm,yle),e(yle,tro),e(Vm,aro),e(Vm,WP),e(WP,nro),e(Vm,sro),e(A,lro),e(A,Xm),e(Xm,xle),e(xle,iro),e(Xm,dro),e(Xm,QP),e(QP,cro),e(Xm,fro),e(A,mro),e(A,zm),e(zm,$le),e($le,gro),e(zm,hro),e(zm,UP),e(UP,pro),e(zm,_ro),e(A,uro),e(A,Wm),e(Wm,kle),e(kle,bro),e(Wm,vro),e(Wm,HP),e(HP,Fro),e(Wm,Tro),e(A,Mro),e(A,Qm),e(Qm,Sle),e(Sle,Ero),e(Qm,Cro),e(Qm,JP),e(JP,wro),e(Qm,Aro),e(A,Lro),e(A,Um),e(Um,Rle),e(Rle,yro),e(Um,xro),e(Um,YP),e(YP,$ro),e(Um,kro),e(A,Sro),e(A,Hm),e(Hm,Ple),e(Ple,Rro),e(Hm,Pro),e(Hm,KP),e(KP,Bro),e(Hm,Iro),e(A,Nro),e(A,Jm),e(Jm,Ble),e(Ble,qro),e(Jm,jro),e(Jm,ZP),e(ZP,Dro),e(Jm,Gro),e(A,Oro),e(A,Ym),e(Ym,Ile),e(Ile,Vro),e(Ym,Xro),e(Ym,eB),e(eB,zro),e(Ym,Wro),e(A,Qro),e(A,Km),e(Km,Nle),e(Nle,Uro),e(Km,Hro),e(Km,oB),e(oB,Jro),e(Km,Yro),e(A,Kro),e(A,Zm),e(Zm,qle),e(qle,Zro),e(Zm,eto),e(Zm,rB),e(rB,oto),e(Zm,rto),e(A,tto),e(A,eg),e(eg,jle),e(jle,ato),e(eg,nto),e(eg,tB),e(tB,sto),e(eg,lto),e(A,ito),e(A,og),e(og,Dle),e(Dle,dto),e(og,cto),e(og,aB),e(aB,fto),e(og,mto),e(A,gto),e(A,rg),e(rg,Gle),e(Gle,hto),e(rg,pto),e(rg,nB),e(nB,_to),e(rg,uto),e(A,bto),e(A,tg),e(tg,Ole),e(Ole,vto),e(tg,Fto),e(tg,sB),e(sB,Tto),e(tg,Mto),e(A,Eto),e(A,ag),e(ag,Vle),e(Vle,Cto),e(ag,wto),e(ag,lB),e(lB,Ato),e(ag,Lto),e(A,yto),e(A,ng),e(ng,Xle),e(Xle,xto),e(ng,$to),e(ng,iB),e(iB,kto),e(ng,Sto),e(A,Rto),e(A,sg),e(sg,zle),e(zle,Pto),e(sg,Bto),e(sg,dB),e(dB,Ito),e(sg,Nto),e(A,qto),e(A,lg),e(lg,Wle),e(Wle,jto),e(lg,Dto),e(lg,cB),e(cB,Gto),e(lg,Oto),e(A,Vto),e(A,ig),e(ig,Qle),e(Qle,Xto),e(ig,zto),e(ig,fB),e(fB,Wto),e(ig,Qto),e(A,Uto),e(A,dg),e(dg,Ule),e(Ule,Hto),e(dg,Jto),e(dg,mB),e(mB,Yto),e(dg,Kto),e(A,Zto),e(A,cg),e(cg,Hle),e(Hle,eao),e(cg,oao),e(cg,gB),e(gB,rao),e(cg,tao),e(A,aao),e(A,fg),e(fg,Jle),e(Jle,nao),e(fg,sao),e(fg,hB),e(hB,lao),e(fg,iao),e(A,dao),e(A,mg),e(mg,Yle),e(Yle,cao),e(mg,fao),e(mg,pB),e(pB,mao),e(mg,gao),e(A,hao),e(A,gg),e(gg,Kle),e(Kle,pao),e(gg,_ao),e(gg,_B),e(_B,uao),e(gg,bao),e(A,vao),e(A,hg),e(hg,Zle),e(Zle,Fao),e(hg,Tao),e(hg,uB),e(uB,Mao),e(hg,Eao),e(A,Cao),e(A,pg),e(pg,eie),e(eie,wao),e(pg,Aao),e(pg,bB),e(bB,Lao),e(pg,yao),e(A,xao),e(A,_g),e(_g,oie),e(oie,$ao),e(_g,kao),e(_g,vB),e(vB,Sao),e(_g,Rao),e(A,Pao),e(A,ug),e(ug,rie),e(rie,Bao),e(ug,Iao),e(ug,FB),e(FB,Nao),e(ug,qao),e(A,jao),e(A,bg),e(bg,tie),e(tie,Dao),e(bg,Gao),e(bg,TB),e(TB,Oao),e(bg,Vao),e(A,Xao),e(A,vg),e(vg,aie),e(aie,zao),e(vg,Wao),e(vg,MB),e(MB,Qao),e(vg,Uao),e(A,Hao),e(A,Fg),e(Fg,nie),e(nie,Jao),e(Fg,Yao),e(Fg,EB),e(EB,Kao),e(Fg,Zao),e(A,eno),e(A,Tg),e(Tg,sie),e(sie,ono),e(Tg,rno),e(Tg,CB),e(CB,tno),e(Tg,ano),e(A,nno),e(A,Mg),e(Mg,lie),e(lie,sno),e(Mg,lno),e(Mg,wB),e(wB,ino),e(Mg,dno),e(A,cno),e(A,Eg),e(Eg,iie),e(iie,fno),e(Eg,mno),e(Eg,AB),e(AB,gno),e(Eg,hno),e(A,pno),e(A,Cg),e(Cg,die),e(die,_no),e(Cg,uno),e(Cg,LB),e(LB,bno),e(Cg,vno),e(A,Fno),e(A,wg),e(wg,cie),e(cie,Tno),e(wg,Mno),e(wg,yB),e(yB,Eno),e(wg,Cno),e(A,wno),e(A,Ag),e(Ag,fie),e(fie,Ano),e(Ag,Lno),e(Ag,xB),e(xB,yno),e(Ag,xno),e(A,$no),e(A,Lg),e(Lg,mie),e(mie,kno),e(Lg,Sno),e(Lg,$B),e($B,Rno),e(Lg,Pno),e(A,Bno),e(A,yg),e(yg,gie),e(gie,Ino),e(yg,Nno),e(yg,kB),e(kB,qno),e(yg,jno),e(A,Dno),e(A,xg),e(xg,hie),e(hie,Gno),e(xg,Ono),e(xg,SB),e(SB,Vno),e(xg,Xno),e(A,zno),e(A,$g),e($g,pie),e(pie,Wno),e($g,Qno),e($g,RB),e(RB,Uno),e($g,Hno),e(A,Jno),e(A,kg),e(kg,_ie),e(_ie,Yno),e(kg,Kno),e(kg,PB),e(PB,Zno),e(kg,eso),e(A,oso),e(A,Sg),e(Sg,uie),e(uie,rso),e(Sg,tso),e(Sg,BB),e(BB,aso),e(Sg,nso),e(A,sso),e(A,Rg),e(Rg,bie),e(bie,lso),e(Rg,iso),e(Rg,IB),e(IB,dso),e(Rg,cso),e(A,fso),e(A,Pg),e(Pg,vie),e(vie,mso),e(Pg,gso),e(Pg,NB),e(NB,hso),e(Pg,pso),e(A,_so),e(A,Bg),e(Bg,Fie),e(Fie,uso),e(Bg,bso),e(Bg,qB),e(qB,vso),e(Bg,Fso),e(A,Tso),e(A,Ig),e(Ig,Tie),e(Tie,Mso),e(Ig,Eso),e(Ig,jB),e(jB,Cso),e(Ig,wso),e(A,Aso),e(A,Ng),e(Ng,Mie),e(Mie,Lso),e(Ng,yso),e(Ng,DB),e(DB,xso),e(Ng,$so),e(A,kso),e(A,qg),e(qg,Eie),e(Eie,Sso),e(qg,Rso),e(qg,GB),e(GB,Pso),e(qg,Bso),e(A,Iso),e(A,jg),e(jg,Cie),e(Cie,Nso),e(jg,qso),e(jg,OB),e(OB,jso),e(jg,Dso),e(A,Gso),e(A,Dg),e(Dg,wie),e(wie,Oso),e(Dg,Vso),e(Dg,VB),e(VB,Xso),e(Dg,zso),e(A,Wso),e(A,Gg),e(Gg,Aie),e(Aie,Qso),e(Gg,Uso),e(Gg,XB),e(XB,Hso),e(Gg,Jso),e(A,Yso),e(A,Og),e(Og,Lie),e(Lie,Kso),e(Og,Zso),e(Og,zB),e(zB,elo),e(Og,olo),e(A,rlo),e(A,Vg),e(Vg,yie),e(yie,tlo),e(Vg,alo),e(Vg,WB),e(WB,nlo),e(Vg,slo),e(A,llo),e(A,Xg),e(Xg,xie),e(xie,ilo),e(Xg,dlo),e(Xg,QB),e(QB,clo),e(Xg,flo),e(A,mlo),e(A,zg),e(zg,$ie),e($ie,glo),e(zg,hlo),e(zg,UB),e(UB,plo),e(zg,_lo),e(A,ulo),e(A,Wg),e(Wg,kie),e(kie,blo),e(Wg,vlo),e(Wg,HB),e(HB,Flo),e(Wg,Tlo),e(A,Mlo),e(A,Qg),e(Qg,Sie),e(Sie,Elo),e(Qg,Clo),e(Qg,JB),e(JB,wlo),e(Qg,Alo),e(A,Llo),e(A,Ug),e(Ug,Rie),e(Rie,ylo),e(Ug,xlo),e(Ug,YB),e(YB,$lo),e(Ug,klo),e(A,Slo),e(A,Hg),e(Hg,Pie),e(Pie,Rlo),e(Hg,Plo),e(Hg,KB),e(KB,Blo),e(Hg,Ilo),e(A,Nlo),e(A,Jg),e(Jg,Bie),e(Bie,qlo),e(Jg,jlo),e(Jg,ZB),e(ZB,Dlo),e(Jg,Glo),e(A,Olo),e(A,Yg),e(Yg,Iie),e(Iie,Vlo),e(Yg,Xlo),e(Yg,eI),e(eI,zlo),e(Yg,Wlo),e(A,Qlo),e(A,Kg),e(Kg,Nie),e(Nie,Ulo),e(Kg,Hlo),e(Kg,oI),e(oI,Jlo),e(Kg,Ylo),e(A,Klo),e(A,Zg),e(Zg,qie),e(qie,Zlo),e(Zg,eio),e(Zg,rI),e(rI,oio),e(Zg,rio),e(A,tio),e(A,eh),e(eh,jie),e(jie,aio),e(eh,nio),e(eh,tI),e(tI,sio),e(eh,lio),e(A,iio),e(A,oh),e(oh,Die),e(Die,dio),e(oh,cio),e(oh,aI),e(aI,fio),e(oh,mio),e(A,gio),e(A,rh),e(rh,Gie),e(Gie,hio),e(rh,pio),e(rh,nI),e(nI,_io),e(rh,uio),e(A,bio),e(A,th),e(th,Oie),e(Oie,vio),e(th,Fio),e(th,sI),e(sI,Tio),e(th,Mio),e(A,Eio),e(A,ah),e(ah,Vie),e(Vie,Cio),e(ah,wio),e(ah,lI),e(lI,Aio),e(ah,Lio),e(A,yio),e(A,nh),e(nh,Xie),e(Xie,xio),e(nh,$io),e(nh,iI),e(iI,kio),e(nh,Sio),e(A,Rio),e(A,sh),e(sh,zie),e(zie,Pio),e(sh,Bio),e(sh,dI),e(dI,Iio),e(sh,Nio),e(A,qio),e(A,lh),e(lh,Wie),e(Wie,jio),e(lh,Dio),e(lh,cI),e(cI,Gio),e(lh,Oio),e(A,Vio),e(A,ih),e(ih,Qie),e(Qie,Xio),e(ih,zio),e(ih,fI),e(fI,Wio),e(ih,Qio),e(A,Uio),e(A,dh),e(dh,Uie),e(Uie,Hio),e(dh,Jio),e(dh,mI),e(mI,Yio),e(dh,Kio),e(A,Zio),e(A,ch),e(ch,Hie),e(Hie,edo),e(ch,odo),e(ch,gI),e(gI,rdo),e(ch,tdo),e(A,ado),e(A,fh),e(fh,Jie),e(Jie,ndo),e(fh,sdo),e(fh,hI),e(hI,ldo),e(fh,ido),e(A,ddo),e(A,mh),e(mh,Yie),e(Yie,cdo),e(mh,fdo),e(mh,pI),e(pI,mdo),e(mh,gdo),e(A,hdo),e(A,gh),e(gh,Kie),e(Kie,pdo),e(gh,_do),e(gh,_I),e(_I,udo),e(gh,bdo),e(A,vdo),e(A,hh),e(hh,Zie),e(Zie,Fdo),e(hh,Tdo),e(hh,uI),e(uI,Mdo),e(hh,Edo),e(A,Cdo),e(A,ph),e(ph,ede),e(ede,wdo),e(ph,Ado),e(ph,bI),e(bI,Ldo),e(ph,ydo),e(A,xdo),e(A,_h),e(_h,ode),e(ode,$do),e(_h,kdo),e(_h,vI),e(vI,Sdo),e(_h,Rdo),e(A,Pdo),e(A,uh),e(uh,rde),e(rde,Bdo),e(uh,Ido),e(uh,FI),e(FI,Ndo),e(uh,qdo),e(A,jdo),e(A,bh),e(bh,tde),e(tde,Ddo),e(bh,Gdo),e(bh,TI),e(TI,Odo),e(bh,Vdo),e(A,Xdo),e(A,vh),e(vh,ade),e(ade,zdo),e(vh,Wdo),e(vh,MI),e(MI,Qdo),e(vh,Udo),e(A,Hdo),e(A,Fh),e(Fh,nde),e(nde,Jdo),e(Fh,Ydo),e(Fh,EI),e(EI,Kdo),e(Fh,Zdo),e(kr,eco),M(Th,kr,null),e(yo,oco),e(yo,Mh),M(Fy,Mh,null),e(Mh,rco),e(Mh,sde),e(sde,tco),b(f,QQe,u),b(f,Ki,u),e(Ki,Eh),e(Eh,lde),M(Ty,lde,null),e(Ki,aco),e(Ki,ide),e(ide,nco),b(f,UQe,u),b(f,xo,u),M(My,xo,null),e(xo,sco),e(xo,Ey),e(Ey,lco),e(Ey,CI),e(CI,ico),e(Ey,dco),e(xo,cco),e(xo,Cy),e(Cy,fco),e(Cy,dde),e(dde,mco),e(Cy,gco),e(xo,hco),e(xo,Sr),M(wy,Sr,null),e(Sr,pco),e(Sr,cde),e(cde,_co),e(Sr,uco),e(Sr,Ga),e(Ga,bco),e(Ga,fde),e(fde,vco),e(Ga,Fco),e(Ga,mde),e(mde,Tco),e(Ga,Mco),e(Ga,gde),e(gde,Eco),e(Ga,Cco),e(Sr,wco),e(Sr,k),e(k,Hn),e(Hn,hde),e(hde,Aco),e(Hn,Lco),e(Hn,wI),e(wI,yco),e(Hn,xco),e(Hn,AI),e(AI,$co),e(Hn,kco),e(k,Sco),e(k,Jn),e(Jn,pde),e(pde,Rco),e(Jn,Pco),e(Jn,LI),e(LI,Bco),e(Jn,Ico),e(Jn,yI),e(yI,Nco),e(Jn,qco),e(k,jco),e(k,Yn),e(Yn,_de),e(_de,Dco),e(Yn,Gco),e(Yn,xI),e(xI,Oco),e(Yn,Vco),e(Yn,$I),e($I,Xco),e(Yn,zco),e(k,Wco),e(k,Ch),e(Ch,ude),e(ude,Qco),e(Ch,Uco),e(Ch,kI),e(kI,Hco),e(Ch,Jco),e(k,Yco),e(k,Kn),e(Kn,bde),e(bde,Kco),e(Kn,Zco),e(Kn,SI),e(SI,efo),e(Kn,ofo),e(Kn,RI),e(RI,rfo),e(Kn,tfo),e(k,afo),e(k,wh),e(wh,vde),e(vde,nfo),e(wh,sfo),e(wh,PI),e(PI,lfo),e(wh,ifo),e(k,dfo),e(k,Ah),e(Ah,Fde),e(Fde,cfo),e(Ah,ffo),e(Ah,BI),e(BI,mfo),e(Ah,gfo),e(k,hfo),e(k,Lh),e(Lh,Tde),e(Tde,pfo),e(Lh,_fo),e(Lh,II),e(II,ufo),e(Lh,bfo),e(k,vfo),e(k,Zn),e(Zn,Mde),e(Mde,Ffo),e(Zn,Tfo),e(Zn,NI),e(NI,Mfo),e(Zn,Efo),e(Zn,qI),e(qI,Cfo),e(Zn,wfo),e(k,Afo),e(k,es),e(es,Ede),e(Ede,Lfo),e(es,yfo),e(es,jI),e(jI,xfo),e(es,$fo),e(es,DI),e(DI,kfo),e(es,Sfo),e(k,Rfo),e(k,os),e(os,Cde),e(Cde,Pfo),e(os,Bfo),e(os,GI),e(GI,Ifo),e(os,Nfo),e(os,OI),e(OI,qfo),e(os,jfo),e(k,Dfo),e(k,yh),e(yh,wde),e(wde,Gfo),e(yh,Ofo),e(yh,VI),e(VI,Vfo),e(yh,Xfo),e(k,zfo),e(k,xh),e(xh,Ade),e(Ade,Wfo),e(xh,Qfo),e(xh,XI),e(XI,Ufo),e(xh,Hfo),e(k,Jfo),e(k,$h),e($h,Lde),e(Lde,Yfo),e($h,Kfo),e($h,zI),e(zI,Zfo),e($h,emo),e(k,omo),e(k,rs),e(rs,yde),e(yde,rmo),e(rs,tmo),e(rs,WI),e(WI,amo),e(rs,nmo),e(rs,QI),e(QI,smo),e(rs,lmo),e(k,imo),e(k,kh),e(kh,xde),e(xde,dmo),e(kh,cmo),e(kh,UI),e(UI,fmo),e(kh,mmo),e(k,gmo),e(k,ts),e(ts,$de),e($de,hmo),e(ts,pmo),e(ts,HI),e(HI,_mo),e(ts,umo),e(ts,JI),e(JI,bmo),e(ts,vmo),e(k,Fmo),e(k,as),e(as,kde),e(kde,Tmo),e(as,Mmo),e(as,YI),e(YI,Emo),e(as,Cmo),e(as,KI),e(KI,wmo),e(as,Amo),e(k,Lmo),e(k,ns),e(ns,Sde),e(Sde,ymo),e(ns,xmo),e(ns,ZI),e(ZI,$mo),e(ns,kmo),e(ns,eN),e(eN,Smo),e(ns,Rmo),e(k,Pmo),e(k,ss),e(ss,Rde),e(Rde,Bmo),e(ss,Imo),e(ss,oN),e(oN,Nmo),e(ss,qmo),e(ss,rN),e(rN,jmo),e(ss,Dmo),e(k,Gmo),e(k,Sh),e(Sh,Pde),e(Pde,Omo),e(Sh,Vmo),e(Sh,tN),e(tN,Xmo),e(Sh,zmo),e(k,Wmo),e(k,ls),e(ls,Bde),e(Bde,Qmo),e(ls,Umo),e(ls,aN),e(aN,Hmo),e(ls,Jmo),e(ls,nN),e(nN,Ymo),e(ls,Kmo),e(k,Zmo),e(k,is),e(is,Ide),e(Ide,ego),e(is,ogo),e(is,sN),e(sN,rgo),e(is,tgo),e(is,lN),e(lN,ago),e(is,ngo),e(k,sgo),e(k,ds),e(ds,Nde),e(Nde,lgo),e(ds,igo),e(ds,iN),e(iN,dgo),e(ds,cgo),e(ds,dN),e(dN,fgo),e(ds,mgo),e(k,ggo),e(k,cs),e(cs,qde),e(qde,hgo),e(cs,pgo),e(cs,cN),e(cN,_go),e(cs,ugo),e(cs,fN),e(fN,bgo),e(cs,vgo),e(k,Fgo),e(k,fs),e(fs,jde),e(jde,Tgo),e(fs,Mgo),e(fs,mN),e(mN,Ego),e(fs,Cgo),e(fs,gN),e(gN,wgo),e(fs,Ago),e(k,Lgo),e(k,ms),e(ms,Dde),e(Dde,ygo),e(ms,xgo),e(ms,hN),e(hN,$go),e(ms,kgo),e(ms,pN),e(pN,Sgo),e(ms,Rgo),e(k,Pgo),e(k,Rh),e(Rh,Gde),e(Gde,Bgo),e(Rh,Igo),e(Rh,_N),e(_N,Ngo),e(Rh,qgo),e(k,jgo),e(k,gs),e(gs,Ode),e(Ode,Dgo),e(gs,Ggo),e(gs,uN),e(uN,Ogo),e(gs,Vgo),e(gs,bN),e(bN,Xgo),e(gs,zgo),e(k,Wgo),e(k,Ph),e(Ph,Vde),e(Vde,Qgo),e(Ph,Ugo),e(Ph,vN),e(vN,Hgo),e(Ph,Jgo),e(k,Ygo),e(k,hs),e(hs,Xde),e(Xde,Kgo),e(hs,Zgo),e(hs,FN),e(FN,eho),e(hs,oho),e(hs,TN),e(TN,rho),e(hs,tho),e(k,aho),e(k,ps),e(ps,zde),e(zde,nho),e(ps,sho),e(ps,MN),e(MN,lho),e(ps,iho),e(ps,EN),e(EN,dho),e(ps,cho),e(k,fho),e(k,_s),e(_s,Wde),e(Wde,mho),e(_s,gho),e(_s,CN),e(CN,hho),e(_s,pho),e(_s,wN),e(wN,_ho),e(_s,uho),e(k,bho),e(k,Bh),e(Bh,Qde),e(Qde,vho),e(Bh,Fho),e(Bh,AN),e(AN,Tho),e(Bh,Mho),e(k,Eho),e(k,us),e(us,Ude),e(Ude,Cho),e(us,who),e(us,LN),e(LN,Aho),e(us,Lho),e(us,yN),e(yN,yho),e(us,xho),e(k,$ho),e(k,bs),e(bs,Hde),e(Hde,kho),e(bs,Sho),e(bs,xN),e(xN,Rho),e(bs,Pho),e(bs,$N),e($N,Bho),e(bs,Iho),e(k,Nho),e(k,vs),e(vs,Jde),e(Jde,qho),e(vs,jho),e(vs,kN),e(kN,Dho),e(vs,Gho),e(vs,SN),e(SN,Oho),e(vs,Vho),e(k,Xho),e(k,Ih),e(Ih,Yde),e(Yde,zho),e(Ih,Who),e(Ih,RN),e(RN,Qho),e(Ih,Uho),e(k,Hho),e(k,Fs),e(Fs,Kde),e(Kde,Jho),e(Fs,Yho),e(Fs,PN),e(PN,Kho),e(Fs,Zho),e(Fs,BN),e(BN,epo),e(Fs,opo),e(k,rpo),e(k,Ts),e(Ts,Zde),e(Zde,tpo),e(Ts,apo),e(Ts,IN),e(IN,npo),e(Ts,spo),e(Ts,NN),e(NN,lpo),e(Ts,ipo),e(k,dpo),e(k,Ms),e(Ms,ece),e(ece,cpo),e(Ms,fpo),e(Ms,qN),e(qN,mpo),e(Ms,gpo),e(Ms,jN),e(jN,hpo),e(Ms,ppo),e(k,_po),e(k,Es),e(Es,oce),e(oce,upo),e(Es,bpo),e(Es,DN),e(DN,vpo),e(Es,Fpo),e(Es,GN),e(GN,Tpo),e(Es,Mpo),e(k,Epo),e(k,Cs),e(Cs,rce),e(rce,Cpo),e(Cs,wpo),e(Cs,ON),e(ON,Apo),e(Cs,Lpo),e(Cs,VN),e(VN,ypo),e(Cs,xpo),e(k,$po),e(k,ws),e(ws,tce),e(tce,kpo),e(ws,Spo),e(ws,XN),e(XN,Rpo),e(ws,Ppo),e(ws,zN),e(zN,Bpo),e(ws,Ipo),e(k,Npo),e(k,As),e(As,ace),e(ace,qpo),e(As,jpo),e(As,WN),e(WN,Dpo),e(As,Gpo),e(As,QN),e(QN,Opo),e(As,Vpo),e(k,Xpo),e(k,Ls),e(Ls,nce),e(nce,zpo),e(Ls,Wpo),e(Ls,UN),e(UN,Qpo),e(Ls,Upo),e(Ls,HN),e(HN,Hpo),e(Ls,Jpo),e(k,Ypo),e(k,Nh),e(Nh,sce),e(sce,Kpo),e(Nh,Zpo),e(Nh,JN),e(JN,e_o),e(Nh,o_o),e(k,r_o),e(k,ys),e(ys,lce),e(lce,t_o),e(ys,a_o),e(ys,YN),e(YN,n_o),e(ys,s_o),e(ys,KN),e(KN,l_o),e(ys,i_o),e(k,d_o),e(k,qh),e(qh,ice),e(ice,c_o),e(qh,f_o),e(qh,ZN),e(ZN,m_o),e(qh,g_o),e(k,h_o),e(k,jh),e(jh,dce),e(dce,p_o),e(jh,__o),e(jh,eq),e(eq,u_o),e(jh,b_o),e(k,v_o),e(k,xs),e(xs,cce),e(cce,F_o),e(xs,T_o),e(xs,oq),e(oq,M_o),e(xs,E_o),e(xs,rq),e(rq,C_o),e(xs,w_o),e(k,A_o),e(k,$s),e($s,fce),e(fce,L_o),e($s,y_o),e($s,tq),e(tq,x_o),e($s,$_o),e($s,aq),e(aq,k_o),e($s,S_o),e(k,R_o),e(k,ks),e(ks,mce),e(mce,P_o),e(ks,B_o),e(ks,nq),e(nq,I_o),e(ks,N_o),e(ks,sq),e(sq,q_o),e(ks,j_o),e(k,D_o),e(k,Dh),e(Dh,gce),e(gce,G_o),e(Dh,O_o),e(Dh,lq),e(lq,V_o),e(Dh,X_o),e(k,z_o),e(k,Ss),e(Ss,hce),e(hce,W_o),e(Ss,Q_o),e(Ss,iq),e(iq,U_o),e(Ss,H_o),e(Ss,dq),e(dq,J_o),e(Ss,Y_o),e(k,K_o),e(k,Rs),e(Rs,pce),e(pce,Z_o),e(Rs,euo),e(Rs,cq),e(cq,ouo),e(Rs,ruo),e(Rs,fq),e(fq,tuo),e(Rs,auo),e(k,nuo),e(k,Ps),e(Ps,_ce),e(_ce,suo),e(Ps,luo),e(Ps,mq),e(mq,iuo),e(Ps,duo),e(Ps,gq),e(gq,cuo),e(Ps,fuo),e(k,muo),e(k,Bs),e(Bs,uce),e(uce,guo),e(Bs,huo),e(Bs,hq),e(hq,puo),e(Bs,_uo),e(Bs,pq),e(pq,uuo),e(Bs,buo),e(k,vuo),e(k,Is),e(Is,bce),e(bce,Fuo),e(Is,Tuo),e(Is,_q),e(_q,Muo),e(Is,Euo),e(Is,uq),e(uq,Cuo),e(Is,wuo),e(k,Auo),e(k,Ns),e(Ns,vce),e(vce,Luo),e(Ns,yuo),e(Ns,bq),e(bq,xuo),e(Ns,$uo),e(Ns,vq),e(vq,kuo),e(Ns,Suo),e(k,Ruo),e(k,qs),e(qs,Fce),e(Fce,Puo),e(qs,Buo),e(qs,Fq),e(Fq,Iuo),e(qs,Nuo),e(qs,Tq),e(Tq,quo),e(qs,juo),e(k,Duo),e(k,js),e(js,Tce),e(Tce,Guo),e(js,Ouo),e(js,Mq),e(Mq,Vuo),e(js,Xuo),e(js,Eq),e(Eq,zuo),e(js,Wuo),e(k,Quo),e(k,Gh),e(Gh,Mce),e(Mce,Uuo),e(Gh,Huo),e(Gh,Cq),e(Cq,Juo),e(Gh,Yuo),e(k,Kuo),e(k,Ds),e(Ds,Ece),e(Ece,Zuo),e(Ds,e1o),e(Ds,wq),e(wq,o1o),e(Ds,r1o),e(Ds,Aq),e(Aq,t1o),e(Ds,a1o),e(k,n1o),e(k,Gs),e(Gs,Cce),e(Cce,s1o),e(Gs,l1o),e(Gs,Lq),e(Lq,i1o),e(Gs,d1o),e(Gs,yq),e(yq,c1o),e(Gs,f1o),e(k,m1o),e(k,Oh),e(Oh,wce),e(wce,g1o),e(Oh,h1o),e(Oh,xq),e(xq,p1o),e(Oh,_1o),e(k,u1o),e(k,Vh),e(Vh,Ace),e(Ace,b1o),e(Vh,v1o),e(Vh,$q),e($q,F1o),e(Vh,T1o),e(k,M1o),e(k,Xh),e(Xh,Lce),e(Lce,E1o),e(Xh,C1o),e(Xh,kq),e(kq,w1o),e(Xh,A1o),e(k,L1o),e(k,zh),e(zh,yce),e(yce,y1o),e(zh,x1o),e(zh,Sq),e(Sq,$1o),e(zh,k1o),e(k,S1o),e(k,Os),e(Os,xce),e(xce,R1o),e(Os,P1o),e(Os,Rq),e(Rq,B1o),e(Os,I1o),e(Os,Pq),e(Pq,N1o),e(Os,q1o),e(k,j1o),e(k,Wh),e(Wh,$ce),e($ce,D1o),e(Wh,G1o),e(Wh,Bq),e(Bq,O1o),e(Wh,V1o),e(k,X1o),e(k,Vs),e(Vs,kce),e(kce,z1o),e(Vs,W1o),e(Vs,Iq),e(Iq,Q1o),e(Vs,U1o),e(Vs,Nq),e(Nq,H1o),e(Vs,J1o),e(k,Y1o),e(k,Xs),e(Xs,Sce),e(Sce,K1o),e(Xs,Z1o),e(Xs,qq),e(qq,e6o),e(Xs,o6o),e(Xs,jq),e(jq,r6o),e(Xs,t6o),e(k,a6o),e(k,zs),e(zs,Rce),e(Rce,n6o),e(zs,s6o),e(zs,Dq),e(Dq,l6o),e(zs,i6o),e(zs,Gq),e(Gq,d6o),e(zs,c6o),e(k,f6o),e(k,Ws),e(Ws,Pce),e(Pce,m6o),e(Ws,g6o),e(Ws,Oq),e(Oq,h6o),e(Ws,p6o),e(Ws,Vq),e(Vq,_6o),e(Ws,u6o),e(k,b6o),e(k,Qs),e(Qs,Bce),e(Bce,v6o),e(Qs,F6o),e(Qs,Xq),e(Xq,T6o),e(Qs,M6o),e(Qs,zq),e(zq,E6o),e(Qs,C6o),e(k,w6o),e(k,Us),e(Us,Ice),e(Ice,A6o),e(Us,L6o),e(Us,Wq),e(Wq,y6o),e(Us,x6o),e(Us,Qq),e(Qq,$6o),e(Us,k6o),e(k,S6o),e(k,Qh),e(Qh,Nce),e(Nce,R6o),e(Qh,P6o),e(Qh,Uq),e(Uq,B6o),e(Qh,I6o),e(k,N6o),e(k,Uh),e(Uh,qce),e(qce,q6o),e(Uh,j6o),e(Uh,Hq),e(Hq,D6o),e(Uh,G6o),e(k,O6o),e(k,Hs),e(Hs,jce),e(jce,V6o),e(Hs,X6o),e(Hs,Jq),e(Jq,z6o),e(Hs,W6o),e(Hs,Yq),e(Yq,Q6o),e(Hs,U6o),e(k,H6o),e(k,Js),e(Js,Dce),e(Dce,J6o),e(Js,Y6o),e(Js,Kq),e(Kq,K6o),e(Js,Z6o),e(Js,Zq),e(Zq,e8o),e(Js,o8o),e(k,r8o),e(k,Ys),e(Ys,Gce),e(Gce,t8o),e(Ys,a8o),e(Ys,ej),e(ej,n8o),e(Ys,s8o),e(Ys,oj),e(oj,l8o),e(Ys,i8o),e(k,d8o),e(k,Hh),e(Hh,Oce),e(Oce,c8o),e(Hh,f8o),e(Hh,rj),e(rj,m8o),e(Hh,g8o),e(k,h8o),e(k,Jh),e(Jh,Vce),e(Vce,p8o),e(Jh,_8o),e(Jh,tj),e(tj,u8o),e(Jh,b8o),e(k,v8o),e(k,Yh),e(Yh,Xce),e(Xce,F8o),e(Yh,T8o),e(Yh,aj),e(aj,M8o),e(Yh,E8o),e(k,C8o),e(k,Ks),e(Ks,zce),e(zce,w8o),e(Ks,A8o),e(Ks,nj),e(nj,L8o),e(Ks,y8o),e(Ks,sj),e(sj,x8o),e(Ks,$8o),e(k,k8o),e(k,Zs),e(Zs,Wce),e(Wce,S8o),e(Zs,R8o),e(Zs,lj),e(lj,P8o),e(Zs,B8o),e(Zs,ij),e(ij,I8o),e(Zs,N8o),e(k,q8o),e(k,Kh),e(Kh,Qce),e(Qce,j8o),e(Kh,D8o),e(Kh,dj),e(dj,G8o),e(Kh,O8o),e(k,V8o),e(k,Zh),e(Zh,Uce),e(Uce,X8o),e(Zh,z8o),e(Zh,cj),e(cj,W8o),e(Zh,Q8o),e(k,U8o),e(k,ep),e(ep,Hce),e(Hce,H8o),e(ep,J8o),e(ep,fj),e(fj,Y8o),e(ep,K8o),e(k,Z8o),e(k,el),e(el,Jce),e(Jce,e2o),e(el,o2o),e(el,mj),e(mj,r2o),e(el,t2o),e(el,gj),e(gj,a2o),e(el,n2o),e(k,s2o),e(k,op),e(op,Yce),e(Yce,l2o),e(op,i2o),e(op,hj),e(hj,d2o),e(op,c2o),e(k,f2o),e(k,rp),e(rp,Kce),e(Kce,m2o),e(rp,g2o),e(rp,pj),e(pj,h2o),e(rp,p2o),e(k,_2o),e(k,ol),e(ol,Zce),e(Zce,u2o),e(ol,b2o),e(ol,_j),e(_j,v2o),e(ol,F2o),e(ol,uj),e(uj,T2o),e(ol,M2o),e(k,E2o),e(k,rl),e(rl,efe),e(efe,C2o),e(rl,w2o),e(rl,bj),e(bj,A2o),e(rl,L2o),e(rl,vj),e(vj,y2o),e(rl,x2o),e(k,$2o),e(k,tl),e(tl,ofe),e(ofe,k2o),e(tl,S2o),e(tl,Fj),e(Fj,R2o),e(tl,P2o),e(tl,Tj),e(Tj,B2o),e(tl,I2o),e(k,N2o),e(k,al),e(al,rfe),e(rfe,q2o),e(al,j2o),e(al,Mj),e(Mj,D2o),e(al,G2o),e(al,Ej),e(Ej,O2o),e(al,V2o),e(Sr,X2o),M(tp,Sr,null),e(xo,z2o),e(xo,ap),M(Ay,ap,null),e(ap,W2o),e(ap,tfe),e(tfe,Q2o),b(f,HQe,u),b(f,Zi,u),e(Zi,np),e(np,afe),M(Ly,afe,null),e(Zi,U2o),e(Zi,nfe),e(nfe,H2o),b(f,JQe,u),b(f,$o,u),M(yy,$o,null),e($o,J2o),e($o,xy),e(xy,Y2o),e(xy,Cj),e(Cj,K2o),e(xy,Z2o),e($o,ebo),e($o,$y),e($y,obo),e($y,sfe),e(sfe,rbo),e($y,tbo),e($o,abo),e($o,He),M(ky,He,null),e(He,nbo),e(He,lfe),e(lfe,sbo),e(He,lbo),e(He,Oa),e(Oa,ibo),e(Oa,ife),e(ife,dbo),e(Oa,cbo),e(Oa,dfe),e(dfe,fbo),e(Oa,mbo),e(Oa,cfe),e(cfe,gbo),e(Oa,hbo),e(He,pbo),e(He,Q),e(Q,sp),e(sp,ffe),e(ffe,_bo),e(sp,ubo),e(sp,wj),e(wj,bbo),e(sp,vbo),e(Q,Fbo),e(Q,lp),e(lp,mfe),e(mfe,Tbo),e(lp,Mbo),e(lp,Aj),e(Aj,Ebo),e(lp,Cbo),e(Q,wbo),e(Q,ip),e(ip,gfe),e(gfe,Abo),e(ip,Lbo),e(ip,Lj),e(Lj,ybo),e(ip,xbo),e(Q,$bo),e(Q,dp),e(dp,hfe),e(hfe,kbo),e(dp,Sbo),e(dp,yj),e(yj,Rbo),e(dp,Pbo),e(Q,Bbo),e(Q,cp),e(cp,pfe),e(pfe,Ibo),e(cp,Nbo),e(cp,xj),e(xj,qbo),e(cp,jbo),e(Q,Dbo),e(Q,fp),e(fp,_fe),e(_fe,Gbo),e(fp,Obo),e(fp,$j),e($j,Vbo),e(fp,Xbo),e(Q,zbo),e(Q,mp),e(mp,ufe),e(ufe,Wbo),e(mp,Qbo),e(mp,kj),e(kj,Ubo),e(mp,Hbo),e(Q,Jbo),e(Q,gp),e(gp,bfe),e(bfe,Ybo),e(gp,Kbo),e(gp,Sj),e(Sj,Zbo),e(gp,evo),e(Q,ovo),e(Q,hp),e(hp,vfe),e(vfe,rvo),e(hp,tvo),e(hp,Rj),e(Rj,avo),e(hp,nvo),e(Q,svo),e(Q,pp),e(pp,Ffe),e(Ffe,lvo),e(pp,ivo),e(pp,Pj),e(Pj,dvo),e(pp,cvo),e(Q,fvo),e(Q,_p),e(_p,Tfe),e(Tfe,mvo),e(_p,gvo),e(_p,Bj),e(Bj,hvo),e(_p,pvo),e(Q,_vo),e(Q,up),e(up,Mfe),e(Mfe,uvo),e(up,bvo),e(up,Ij),e(Ij,vvo),e(up,Fvo),e(Q,Tvo),e(Q,bp),e(bp,Efe),e(Efe,Mvo),e(bp,Evo),e(bp,Nj),e(Nj,Cvo),e(bp,wvo),e(Q,Avo),e(Q,vp),e(vp,Cfe),e(Cfe,Lvo),e(vp,yvo),e(vp,qj),e(qj,xvo),e(vp,$vo),e(Q,kvo),e(Q,Fp),e(Fp,wfe),e(wfe,Svo),e(Fp,Rvo),e(Fp,jj),e(jj,Pvo),e(Fp,Bvo),e(Q,Ivo),e(Q,Tp),e(Tp,Afe),e(Afe,Nvo),e(Tp,qvo),e(Tp,Dj),e(Dj,jvo),e(Tp,Dvo),e(Q,Gvo),e(Q,Mp),e(Mp,Lfe),e(Lfe,Ovo),e(Mp,Vvo),e(Mp,Gj),e(Gj,Xvo),e(Mp,zvo),e(Q,Wvo),e(Q,Ep),e(Ep,yfe),e(yfe,Qvo),e(Ep,Uvo),e(Ep,Oj),e(Oj,Hvo),e(Ep,Jvo),e(Q,Yvo),e(Q,Cp),e(Cp,xfe),e(xfe,Kvo),e(Cp,Zvo),e(Cp,Vj),e(Vj,eFo),e(Cp,oFo),e(Q,rFo),e(Q,wp),e(wp,$fe),e($fe,tFo),e(wp,aFo),e(wp,Xj),e(Xj,nFo),e(wp,sFo),e(Q,lFo),e(Q,Ap),e(Ap,kfe),e(kfe,iFo),e(Ap,dFo),e(Ap,zj),e(zj,cFo),e(Ap,fFo),e(Q,mFo),e(Q,Lp),e(Lp,Sfe),e(Sfe,gFo),e(Lp,hFo),e(Lp,Wj),e(Wj,pFo),e(Lp,_Fo),e(Q,uFo),e(Q,yp),e(yp,Rfe),e(Rfe,bFo),e(yp,vFo),e(yp,Qj),e(Qj,FFo),e(yp,TFo),e(Q,MFo),e(Q,xp),e(xp,Pfe),e(Pfe,EFo),e(xp,CFo),e(xp,Uj),e(Uj,wFo),e(xp,AFo),e(Q,LFo),e(Q,$p),e($p,Bfe),e(Bfe,yFo),e($p,xFo),e($p,Hj),e(Hj,$Fo),e($p,kFo),e(Q,SFo),e(Q,kp),e(kp,Ife),e(Ife,RFo),e(kp,PFo),e(kp,Jj),e(Jj,BFo),e(kp,IFo),e(Q,NFo),e(Q,Sp),e(Sp,Nfe),e(Nfe,qFo),e(Sp,jFo),e(Sp,Yj),e(Yj,DFo),e(Sp,GFo),e(Q,OFo),e(Q,Rp),e(Rp,qfe),e(qfe,VFo),e(Rp,XFo),e(Rp,Kj),e(Kj,zFo),e(Rp,WFo),e(Q,QFo),e(Q,Pp),e(Pp,jfe),e(jfe,UFo),e(Pp,HFo),e(Pp,Zj),e(Zj,JFo),e(Pp,YFo),e(Q,KFo),e(Q,Bp),e(Bp,Dfe),e(Dfe,ZFo),e(Bp,eTo),e(Bp,eD),e(eD,oTo),e(Bp,rTo),e(Q,tTo),e(Q,Ip),e(Ip,Gfe),e(Gfe,aTo),e(Ip,nTo),e(Ip,oD),e(oD,sTo),e(Ip,lTo),e(Q,iTo),e(Q,Np),e(Np,Ofe),e(Ofe,dTo),e(Np,cTo),e(Np,rD),e(rD,fTo),e(Np,mTo),e(Q,gTo),e(Q,qp),e(qp,Vfe),e(Vfe,hTo),e(qp,pTo),e(qp,tD),e(tD,_To),e(qp,uTo),e(Q,bTo),e(Q,jp),e(jp,Xfe),e(Xfe,vTo),e(jp,FTo),e(jp,aD),e(aD,TTo),e(jp,MTo),e(Q,ETo),e(Q,Dp),e(Dp,zfe),e(zfe,CTo),e(Dp,wTo),e(Dp,nD),e(nD,ATo),e(Dp,LTo),e(Q,yTo),e(Q,Gp),e(Gp,Wfe),e(Wfe,xTo),e(Gp,$To),e(Gp,sD),e(sD,kTo),e(Gp,STo),e(Q,RTo),e(Q,Op),e(Op,Qfe),e(Qfe,PTo),e(Op,BTo),e(Op,lD),e(lD,ITo),e(Op,NTo),e(Q,qTo),e(Q,Vp),e(Vp,Ufe),e(Ufe,jTo),e(Vp,DTo),e(Vp,iD),e(iD,GTo),e(Vp,OTo),e(He,VTo),M(Xp,He,null),e(He,XTo),M(zp,He,null),e($o,zTo),e($o,Wp),M(Sy,Wp,null),e(Wp,WTo),e(Wp,Hfe),e(Hfe,QTo),b(f,YQe,u),b(f,ed,u),e(ed,Qp),e(Qp,Jfe),M(Ry,Jfe,null),e(ed,UTo),e(ed,Yfe),e(Yfe,HTo),b(f,KQe,u),b(f,ko,u),M(Py,ko,null),e(ko,JTo),e(ko,By),e(By,YTo),e(By,dD),e(dD,KTo),e(By,ZTo),e(ko,eMo),e(ko,Iy),e(Iy,oMo),e(Iy,Kfe),e(Kfe,rMo),e(Iy,tMo),e(ko,aMo),e(ko,Je),M(Ny,Je,null),e(Je,nMo),e(Je,Zfe),e(Zfe,sMo),e(Je,lMo),e(Je,od),e(od,iMo),e(od,eme),e(eme,dMo),e(od,cMo),e(od,ome),e(ome,fMo),e(od,mMo),e(Je,gMo),e(Je,ie),e(ie,Up),e(Up,rme),e(rme,hMo),e(Up,pMo),e(Up,cD),e(cD,_Mo),e(Up,uMo),e(ie,bMo),e(ie,Hp),e(Hp,tme),e(tme,vMo),e(Hp,FMo),e(Hp,fD),e(fD,TMo),e(Hp,MMo),e(ie,EMo),e(ie,Jp),e(Jp,ame),e(ame,CMo),e(Jp,wMo),e(Jp,mD),e(mD,AMo),e(Jp,LMo),e(ie,yMo),e(ie,Yp),e(Yp,nme),e(nme,xMo),e(Yp,$Mo),e(Yp,gD),e(gD,kMo),e(Yp,SMo),e(ie,RMo),e(ie,Kp),e(Kp,sme),e(sme,PMo),e(Kp,BMo),e(Kp,hD),e(hD,IMo),e(Kp,NMo),e(ie,qMo),e(ie,Zp),e(Zp,lme),e(lme,jMo),e(Zp,DMo),e(Zp,pD),e(pD,GMo),e(Zp,OMo),e(ie,VMo),e(ie,e_),e(e_,ime),e(ime,XMo),e(e_,zMo),e(e_,_D),e(_D,WMo),e(e_,QMo),e(ie,UMo),e(ie,o_),e(o_,dme),e(dme,HMo),e(o_,JMo),e(o_,uD),e(uD,YMo),e(o_,KMo),e(ie,ZMo),e(ie,r_),e(r_,cme),e(cme,eEo),e(r_,oEo),e(r_,bD),e(bD,rEo),e(r_,tEo),e(ie,aEo),e(ie,t_),e(t_,fme),e(fme,nEo),e(t_,sEo),e(t_,vD),e(vD,lEo),e(t_,iEo),e(ie,dEo),e(ie,a_),e(a_,mme),e(mme,cEo),e(a_,fEo),e(a_,FD),e(FD,mEo),e(a_,gEo),e(ie,hEo),e(ie,n_),e(n_,gme),e(gme,pEo),e(n_,_Eo),e(n_,TD),e(TD,uEo),e(n_,bEo),e(ie,vEo),e(ie,s_),e(s_,hme),e(hme,FEo),e(s_,TEo),e(s_,MD),e(MD,MEo),e(s_,EEo),e(ie,CEo),e(ie,l_),e(l_,pme),e(pme,wEo),e(l_,AEo),e(l_,ED),e(ED,LEo),e(l_,yEo),e(ie,xEo),e(ie,i_),e(i_,_me),e(_me,$Eo),e(i_,kEo),e(i_,CD),e(CD,SEo),e(i_,REo),e(ie,PEo),e(ie,d_),e(d_,ume),e(ume,BEo),e(d_,IEo),e(d_,wD),e(wD,NEo),e(d_,qEo),e(ie,jEo),e(ie,c_),e(c_,bme),e(bme,DEo),e(c_,GEo),e(c_,AD),e(AD,OEo),e(c_,VEo),e(ie,XEo),e(ie,f_),e(f_,vme),e(vme,zEo),e(f_,WEo),e(f_,LD),e(LD,QEo),e(f_,UEo),e(ie,HEo),e(ie,m_),e(m_,Fme),e(Fme,JEo),e(m_,YEo),e(m_,yD),e(yD,KEo),e(m_,ZEo),e(ie,e4o),e(ie,g_),e(g_,Tme),e(Tme,o4o),e(g_,r4o),e(g_,xD),e(xD,t4o),e(g_,a4o),e(Je,n4o),M(h_,Je,null),e(Je,s4o),M(p_,Je,null),e(ko,l4o),e(ko,__),M(qy,__,null),e(__,i4o),e(__,Mme),e(Mme,d4o),b(f,ZQe,u),b(f,rd,u),e(rd,u_),e(u_,Eme),M(jy,Eme,null),e(rd,c4o),e(rd,Cme),e(Cme,f4o),b(f,eUe,u),b(f,So,u),M(Dy,So,null),e(So,m4o),e(So,td),e(td,g4o),e(td,$D),e($D,h4o),e(td,p4o),e(td,kD),e(kD,_4o),e(td,u4o),e(So,b4o),e(So,Gy),e(Gy,v4o),e(Gy,wme),e(wme,F4o),e(Gy,T4o),e(So,M4o),e(So,mt),M(Oy,mt,null),e(mt,E4o),e(mt,Ame),e(Ame,C4o),e(mt,w4o),e(mt,ad),e(ad,A4o),e(ad,Lme),e(Lme,L4o),e(ad,y4o),e(ad,SD),e(SD,x4o),e(ad,$4o),e(mt,k4o),M(b_,mt,null),e(So,S4o),e(So,Ye),M(Vy,Ye,null),e(Ye,R4o),e(Ye,yme),e(yme,P4o),e(Ye,B4o),e(Ye,Va),e(Va,I4o),e(Va,xme),e(xme,N4o),e(Va,q4o),e(Va,$me),e($me,j4o),e(Va,D4o),e(Va,kme),e(kme,G4o),e(Va,O4o),e(Ye,V4o),e(Ye,y),e(y,v_),e(v_,Sme),e(Sme,X4o),e(v_,z4o),e(v_,RD),e(RD,W4o),e(v_,Q4o),e(y,U4o),e(y,F_),e(F_,Rme),e(Rme,H4o),e(F_,J4o),e(F_,PD),e(PD,Y4o),e(F_,K4o),e(y,Z4o),e(y,T_),e(T_,Pme),e(Pme,eCo),e(T_,oCo),e(T_,BD),e(BD,rCo),e(T_,tCo),e(y,aCo),e(y,M_),e(M_,Bme),e(Bme,nCo),e(M_,sCo),e(M_,ID),e(ID,lCo),e(M_,iCo),e(y,dCo),e(y,E_),e(E_,Ime),e(Ime,cCo),e(E_,fCo),e(E_,ND),e(ND,mCo),e(E_,gCo),e(y,hCo),e(y,C_),e(C_,Nme),e(Nme,pCo),e(C_,_Co),e(C_,qD),e(qD,uCo),e(C_,bCo),e(y,vCo),e(y,w_),e(w_,qme),e(qme,FCo),e(w_,TCo),e(w_,jD),e(jD,MCo),e(w_,ECo),e(y,CCo),e(y,A_),e(A_,jme),e(jme,wCo),e(A_,ACo),e(A_,DD),e(DD,LCo),e(A_,yCo),e(y,xCo),e(y,L_),e(L_,Dme),e(Dme,$Co),e(L_,kCo),e(L_,GD),e(GD,SCo),e(L_,RCo),e(y,PCo),e(y,y_),e(y_,Gme),e(Gme,BCo),e(y_,ICo),e(y_,OD),e(OD,NCo),e(y_,qCo),e(y,jCo),e(y,x_),e(x_,Ome),e(Ome,DCo),e(x_,GCo),e(x_,VD),e(VD,OCo),e(x_,VCo),e(y,XCo),e(y,$_),e($_,Vme),e(Vme,zCo),e($_,WCo),e($_,XD),e(XD,QCo),e($_,UCo),e(y,HCo),e(y,k_),e(k_,Xme),e(Xme,JCo),e(k_,YCo),e(k_,zD),e(zD,KCo),e(k_,ZCo),e(y,e3o),e(y,S_),e(S_,zme),e(zme,o3o),e(S_,r3o),e(S_,WD),e(WD,t3o),e(S_,a3o),e(y,n3o),e(y,R_),e(R_,Wme),e(Wme,s3o),e(R_,l3o),e(R_,QD),e(QD,i3o),e(R_,d3o),e(y,c3o),e(y,P_),e(P_,Qme),e(Qme,f3o),e(P_,m3o),e(P_,UD),e(UD,g3o),e(P_,h3o),e(y,p3o),e(y,B_),e(B_,Ume),e(Ume,_3o),e(B_,u3o),e(B_,HD),e(HD,b3o),e(B_,v3o),e(y,F3o),e(y,I_),e(I_,Hme),e(Hme,T3o),e(I_,M3o),e(I_,JD),e(JD,E3o),e(I_,C3o),e(y,w3o),e(y,N_),e(N_,Jme),e(Jme,A3o),e(N_,L3o),e(N_,YD),e(YD,y3o),e(N_,x3o),e(y,$3o),e(y,q_),e(q_,Yme),e(Yme,k3o),e(q_,S3o),e(q_,KD),e(KD,R3o),e(q_,P3o),e(y,B3o),e(y,j_),e(j_,Kme),e(Kme,I3o),e(j_,N3o),e(j_,ZD),e(ZD,q3o),e(j_,j3o),e(y,D3o),e(y,D_),e(D_,Zme),e(Zme,G3o),e(D_,O3o),e(D_,eG),e(eG,V3o),e(D_,X3o),e(y,z3o),e(y,G_),e(G_,ege),e(ege,W3o),e(G_,Q3o),e(G_,oG),e(oG,U3o),e(G_,H3o),e(y,J3o),e(y,O_),e(O_,oge),e(oge,Y3o),e(O_,K3o),e(O_,rG),e(rG,Z3o),e(O_,e5o),e(y,o5o),e(y,V_),e(V_,rge),e(rge,r5o),e(V_,t5o),e(V_,tG),e(tG,a5o),e(V_,n5o),e(y,s5o),e(y,X_),e(X_,tge),e(tge,l5o),e(X_,i5o),e(X_,aG),e(aG,d5o),e(X_,c5o),e(y,f5o),e(y,z_),e(z_,age),e(age,m5o),e(z_,g5o),e(z_,nG),e(nG,h5o),e(z_,p5o),e(y,_5o),e(y,W_),e(W_,nge),e(nge,u5o),e(W_,b5o),e(W_,sG),e(sG,v5o),e(W_,F5o),e(y,T5o),e(y,Q_),e(Q_,sge),e(sge,M5o),e(Q_,E5o),e(Q_,lG),e(lG,C5o),e(Q_,w5o),e(y,A5o),e(y,U_),e(U_,lge),e(lge,L5o),e(U_,y5o),e(U_,iG),e(iG,x5o),e(U_,$5o),e(y,k5o),e(y,H_),e(H_,ige),e(ige,S5o),e(H_,R5o),e(H_,dG),e(dG,P5o),e(H_,B5o),e(y,I5o),e(y,J_),e(J_,dge),e(dge,N5o),e(J_,q5o),e(J_,cG),e(cG,j5o),e(J_,D5o),e(y,G5o),e(y,Y_),e(Y_,cge),e(cge,O5o),e(Y_,V5o),e(Y_,fG),e(fG,X5o),e(Y_,z5o),e(y,W5o),e(y,K_),e(K_,fge),e(fge,Q5o),e(K_,U5o),e(K_,mG),e(mG,H5o),e(K_,J5o),e(y,Y5o),e(y,Z_),e(Z_,mge),e(mge,K5o),e(Z_,Z5o),e(Z_,gG),e(gG,e0o),e(Z_,o0o),e(y,r0o),e(y,nl),e(nl,gge),e(gge,t0o),e(nl,a0o),e(nl,hG),e(hG,n0o),e(nl,s0o),e(nl,pG),e(pG,l0o),e(nl,i0o),e(y,d0o),e(y,eu),e(eu,hge),e(hge,c0o),e(eu,f0o),e(eu,_G),e(_G,m0o),e(eu,g0o),e(y,h0o),e(y,ou),e(ou,pge),e(pge,p0o),e(ou,_0o),e(ou,uG),e(uG,u0o),e(ou,b0o),e(y,v0o),e(y,ru),e(ru,_ge),e(_ge,F0o),e(ru,T0o),e(ru,bG),e(bG,M0o),e(ru,E0o),e(y,C0o),e(y,tu),e(tu,uge),e(uge,w0o),e(tu,A0o),e(tu,vG),e(vG,L0o),e(tu,y0o),e(y,x0o),e(y,au),e(au,bge),e(bge,$0o),e(au,k0o),e(au,FG),e(FG,S0o),e(au,R0o),e(y,P0o),e(y,nu),e(nu,vge),e(vge,B0o),e(nu,I0o),e(nu,TG),e(TG,N0o),e(nu,q0o),e(y,j0o),e(y,su),e(su,Fge),e(Fge,D0o),e(su,G0o),e(su,MG),e(MG,O0o),e(su,V0o),e(y,X0o),e(y,lu),e(lu,Tge),e(Tge,z0o),e(lu,W0o),e(lu,EG),e(EG,Q0o),e(lu,U0o),e(y,H0o),e(y,iu),e(iu,Mge),e(Mge,J0o),e(iu,Y0o),e(iu,CG),e(CG,K0o),e(iu,Z0o),e(y,ewo),e(y,du),e(du,Ege),e(Ege,owo),e(du,rwo),e(du,wG),e(wG,two),e(du,awo),e(y,nwo),e(y,cu),e(cu,Cge),e(Cge,swo),e(cu,lwo),e(cu,AG),e(AG,iwo),e(cu,dwo),e(y,cwo),e(y,fu),e(fu,wge),e(wge,fwo),e(fu,mwo),e(fu,LG),e(LG,gwo),e(fu,hwo),e(y,pwo),e(y,mu),e(mu,Age),e(Age,_wo),e(mu,uwo),e(mu,yG),e(yG,bwo),e(mu,vwo),e(y,Fwo),e(y,gu),e(gu,Lge),e(Lge,Two),e(gu,Mwo),e(gu,xG),e(xG,Ewo),e(gu,Cwo),e(y,wwo),e(y,hu),e(hu,yge),e(yge,Awo),e(hu,Lwo),e(hu,$G),e($G,ywo),e(hu,xwo),e(y,$wo),e(y,pu),e(pu,xge),e(xge,kwo),e(pu,Swo),e(pu,kG),e(kG,Rwo),e(pu,Pwo),e(y,Bwo),e(y,_u),e(_u,$ge),e($ge,Iwo),e(_u,Nwo),e(_u,SG),e(SG,qwo),e(_u,jwo),e(y,Dwo),e(y,uu),e(uu,kge),e(kge,Gwo),e(uu,Owo),e(uu,RG),e(RG,Vwo),e(uu,Xwo),e(y,zwo),e(y,bu),e(bu,Sge),e(Sge,Wwo),e(bu,Qwo),e(bu,PG),e(PG,Uwo),e(bu,Hwo),e(y,Jwo),e(y,vu),e(vu,Rge),e(Rge,Ywo),e(vu,Kwo),e(vu,BG),e(BG,Zwo),e(vu,eAo),e(y,oAo),e(y,Fu),e(Fu,Pge),e(Pge,rAo),e(Fu,tAo),e(Fu,IG),e(IG,aAo),e(Fu,nAo),e(y,sAo),e(y,Tu),e(Tu,Bge),e(Bge,lAo),e(Tu,iAo),e(Tu,NG),e(NG,dAo),e(Tu,cAo),e(y,fAo),e(y,Mu),e(Mu,Ige),e(Ige,mAo),e(Mu,gAo),e(Mu,qG),e(qG,hAo),e(Mu,pAo),e(y,_Ao),e(y,Eu),e(Eu,Nge),e(Nge,uAo),e(Eu,bAo),e(Eu,jG),e(jG,vAo),e(Eu,FAo),e(y,TAo),e(y,Cu),e(Cu,qge),e(qge,MAo),e(Cu,EAo),e(Cu,DG),e(DG,CAo),e(Cu,wAo),e(y,AAo),e(y,wu),e(wu,jge),e(jge,LAo),e(wu,yAo),e(wu,GG),e(GG,xAo),e(wu,$Ao),e(y,kAo),e(y,Au),e(Au,Dge),e(Dge,SAo),e(Au,RAo),e(Au,OG),e(OG,PAo),e(Au,BAo),e(y,IAo),e(y,Lu),e(Lu,Gge),e(Gge,NAo),e(Lu,qAo),e(Lu,VG),e(VG,jAo),e(Lu,DAo),e(y,GAo),e(y,yu),e(yu,Oge),e(Oge,OAo),e(yu,VAo),e(yu,XG),e(XG,XAo),e(yu,zAo),e(y,WAo),e(y,xu),e(xu,Vge),e(Vge,QAo),e(xu,UAo),e(xu,zG),e(zG,HAo),e(xu,JAo),e(y,YAo),e(y,$u),e($u,Xge),e(Xge,KAo),e($u,ZAo),e($u,WG),e(WG,e7o),e($u,o7o),e(y,r7o),e(y,ku),e(ku,zge),e(zge,t7o),e(ku,a7o),e(ku,QG),e(QG,n7o),e(ku,s7o),e(y,l7o),e(y,Su),e(Su,Wge),e(Wge,i7o),e(Su,d7o),e(Su,UG),e(UG,c7o),e(Su,f7o),e(y,m7o),e(y,Ru),e(Ru,Qge),e(Qge,g7o),e(Ru,h7o),e(Ru,HG),e(HG,p7o),e(Ru,_7o),e(y,u7o),e(y,Pu),e(Pu,Uge),e(Uge,b7o),e(Pu,v7o),e(Pu,JG),e(JG,F7o),e(Pu,T7o),e(y,M7o),e(y,Bu),e(Bu,Hge),e(Hge,E7o),e(Bu,C7o),e(Bu,YG),e(YG,w7o),e(Bu,A7o),e(y,L7o),e(y,Iu),e(Iu,Jge),e(Jge,y7o),e(Iu,x7o),e(Iu,KG),e(KG,$7o),e(Iu,k7o),e(y,S7o),e(y,Nu),e(Nu,Yge),e(Yge,R7o),e(Nu,P7o),e(Nu,ZG),e(ZG,B7o),e(Nu,I7o),e(y,N7o),e(y,qu),e(qu,Kge),e(Kge,q7o),e(qu,j7o),e(qu,eO),e(eO,D7o),e(qu,G7o),e(y,O7o),e(y,ju),e(ju,Zge),e(Zge,V7o),e(ju,X7o),e(ju,oO),e(oO,z7o),e(ju,W7o),e(y,Q7o),e(y,Du),e(Du,ehe),e(ehe,U7o),e(Du,H7o),e(Du,rO),e(rO,J7o),e(Du,Y7o),e(y,K7o),e(y,Gu),e(Gu,ohe),e(ohe,Z7o),e(Gu,eLo),e(Gu,tO),e(tO,oLo),e(Gu,rLo),e(y,tLo),e(y,Ou),e(Ou,rhe),e(rhe,aLo),e(Ou,nLo),e(Ou,aO),e(aO,sLo),e(Ou,lLo),e(y,iLo),e(y,Vu),e(Vu,the),e(the,dLo),e(Vu,cLo),e(Vu,nO),e(nO,fLo),e(Vu,mLo),e(y,gLo),e(y,Xu),e(Xu,ahe),e(ahe,hLo),e(Xu,pLo),e(Xu,sO),e(sO,_Lo),e(Xu,uLo),e(y,bLo),e(y,zu),e(zu,nhe),e(nhe,vLo),e(zu,FLo),e(zu,lO),e(lO,TLo),e(zu,MLo),e(y,ELo),e(y,Wu),e(Wu,she),e(she,CLo),e(Wu,wLo),e(Wu,iO),e(iO,ALo),e(Wu,LLo),e(y,yLo),e(y,Qu),e(Qu,lhe),e(lhe,xLo),e(Qu,$Lo),e(Qu,dO),e(dO,kLo),e(Qu,SLo),e(y,RLo),e(y,Uu),e(Uu,ihe),e(ihe,PLo),e(Uu,BLo),e(Uu,cO),e(cO,ILo),e(Uu,NLo),e(y,qLo),e(y,Hu),e(Hu,dhe),e(dhe,jLo),e(Hu,DLo),e(Hu,fO),e(fO,GLo),e(Hu,OLo),e(y,VLo),e(y,Ju),e(Ju,che),e(che,XLo),e(Ju,zLo),e(Ju,mO),e(mO,WLo),e(Ju,QLo),e(y,ULo),e(y,Yu),e(Yu,fhe),e(fhe,HLo),e(Yu,JLo),e(Yu,gO),e(gO,YLo),e(Yu,KLo),e(y,ZLo),e(y,Ku),e(Ku,mhe),e(mhe,eyo),e(Ku,oyo),e(Ku,hO),e(hO,ryo),e(Ku,tyo),e(y,ayo),e(y,Zu),e(Zu,ghe),e(ghe,nyo),e(Zu,syo),e(Zu,pO),e(pO,lyo),e(Zu,iyo),e(y,dyo),e(y,e1),e(e1,hhe),e(hhe,cyo),e(e1,fyo),e(e1,_O),e(_O,myo),e(e1,gyo),e(y,hyo),e(y,o1),e(o1,phe),e(phe,pyo),e(o1,_yo),e(o1,uO),e(uO,uyo),e(o1,byo),e(y,vyo),e(y,r1),e(r1,_he),e(_he,Fyo),e(r1,Tyo),e(r1,bO),e(bO,Myo),e(r1,Eyo),e(y,Cyo),e(y,t1),e(t1,uhe),e(uhe,wyo),e(t1,Ayo),e(t1,vO),e(vO,Lyo),e(t1,yyo),e(y,xyo),e(y,a1),e(a1,bhe),e(bhe,$yo),e(a1,kyo),e(a1,FO),e(FO,Syo),e(a1,Ryo),e(y,Pyo),e(y,n1),e(n1,vhe),e(vhe,Byo),e(n1,Iyo),e(n1,TO),e(TO,Nyo),e(n1,qyo),e(y,jyo),e(y,s1),e(s1,Fhe),e(Fhe,Dyo),e(s1,Gyo),e(s1,MO),e(MO,Oyo),e(s1,Vyo),e(y,Xyo),e(y,l1),e(l1,The),e(The,zyo),e(l1,Wyo),e(l1,EO),e(EO,Qyo),e(l1,Uyo),e(y,Hyo),e(y,i1),e(i1,Mhe),e(Mhe,Jyo),e(i1,Yyo),e(i1,CO),e(CO,Kyo),e(i1,Zyo),e(y,e9o),e(y,d1),e(d1,Ehe),e(Ehe,o9o),e(d1,r9o),e(d1,wO),e(wO,t9o),e(d1,a9o),e(y,n9o),e(y,c1),e(c1,Che),e(Che,s9o),e(c1,l9o),e(c1,AO),e(AO,i9o),e(c1,d9o),e(y,c9o),e(y,f1),e(f1,whe),e(whe,f9o),e(f1,m9o),e(f1,LO),e(LO,g9o),e(f1,h9o),e(y,p9o),e(y,m1),e(m1,Ahe),e(Ahe,_9o),e(m1,u9o),e(m1,yO),e(yO,b9o),e(m1,v9o),e(y,F9o),e(y,g1),e(g1,Lhe),e(Lhe,T9o),e(g1,M9o),e(g1,xO),e(xO,E9o),e(g1,C9o),e(y,w9o),e(y,h1),e(h1,yhe),e(yhe,A9o),e(h1,L9o),e(h1,$O),e($O,y9o),e(h1,x9o),e(y,$9o),e(y,p1),e(p1,xhe),e(xhe,k9o),e(p1,S9o),e(p1,kO),e(kO,R9o),e(p1,P9o),e(y,B9o),e(y,_1),e(_1,$he),e($he,I9o),e(_1,N9o),e(_1,SO),e(SO,q9o),e(_1,j9o),e(y,D9o),e(y,u1),e(u1,khe),e(khe,G9o),e(u1,O9o),e(u1,RO),e(RO,V9o),e(u1,X9o),e(y,z9o),e(y,b1),e(b1,She),e(She,W9o),e(b1,Q9o),e(b1,PO),e(PO,U9o),e(b1,H9o),e(y,J9o),e(y,v1),e(v1,Rhe),e(Rhe,Y9o),e(v1,K9o),e(v1,BO),e(BO,Z9o),e(v1,exo),e(y,oxo),e(y,F1),e(F1,Phe),e(Phe,rxo),e(F1,txo),e(F1,IO),e(IO,axo),e(F1,nxo),e(y,sxo),e(y,T1),e(T1,Bhe),e(Bhe,lxo),e(T1,ixo),e(T1,NO),e(NO,dxo),e(T1,cxo),e(y,fxo),e(y,M1),e(M1,Ihe),e(Ihe,mxo),e(M1,gxo),e(M1,qO),e(qO,hxo),e(M1,pxo),e(y,_xo),e(y,E1),e(E1,Nhe),e(Nhe,uxo),e(E1,bxo),e(E1,jO),e(jO,vxo),e(E1,Fxo),e(y,Txo),e(y,C1),e(C1,qhe),e(qhe,Mxo),e(C1,Exo),e(C1,DO),e(DO,Cxo),e(C1,wxo),e(y,Axo),e(y,w1),e(w1,jhe),e(jhe,Lxo),e(w1,yxo),e(w1,GO),e(GO,xxo),e(w1,$xo),e(Ye,kxo),e(Ye,A1),e(A1,Sxo),e(A1,Dhe),e(Dhe,Rxo),e(A1,Pxo),e(A1,Ghe),e(Ghe,Bxo),e(Ye,Ixo),M(L1,Ye,null),b(f,oUe,u),b(f,nd,u),e(nd,y1),e(y1,Ohe),M(Xy,Ohe,null),e(nd,Nxo),e(nd,Vhe),e(Vhe,qxo),b(f,rUe,u),b(f,Ro,u),M(zy,Ro,null),e(Ro,jxo),e(Ro,sd),e(sd,Dxo),e(sd,OO),e(OO,Gxo),e(sd,Oxo),e(sd,VO),e(VO,Vxo),e(sd,Xxo),e(Ro,zxo),e(Ro,Wy),e(Wy,Wxo),e(Wy,Xhe),e(Xhe,Qxo),e(Wy,Uxo),e(Ro,Hxo),e(Ro,gt),M(Qy,gt,null),e(gt,Jxo),e(gt,zhe),e(zhe,Yxo),e(gt,Kxo),e(gt,ld),e(ld,Zxo),e(ld,Whe),e(Whe,e$o),e(ld,o$o),e(ld,XO),e(XO,r$o),e(ld,t$o),e(gt,a$o),M(x1,gt,null),e(Ro,n$o),e(Ro,Ke),M(Uy,Ke,null),e(Ke,s$o),e(Ke,Qhe),e(Qhe,l$o),e(Ke,i$o),e(Ke,Xa),e(Xa,d$o),e(Xa,Uhe),e(Uhe,c$o),e(Xa,f$o),e(Xa,Hhe),e(Hhe,m$o),e(Xa,g$o),e(Xa,Jhe),e(Jhe,h$o),e(Xa,p$o),e(Ke,_$o),e(Ke,G),e(G,$1),e($1,Yhe),e(Yhe,u$o),e($1,b$o),e($1,zO),e(zO,v$o),e($1,F$o),e(G,T$o),e(G,k1),e(k1,Khe),e(Khe,M$o),e(k1,E$o),e(k1,WO),e(WO,C$o),e(k1,w$o),e(G,A$o),e(G,S1),e(S1,Zhe),e(Zhe,L$o),e(S1,y$o),e(S1,QO),e(QO,x$o),e(S1,$$o),e(G,k$o),e(G,R1),e(R1,epe),e(epe,S$o),e(R1,R$o),e(R1,UO),e(UO,P$o),e(R1,B$o),e(G,I$o),e(G,P1),e(P1,ope),e(ope,N$o),e(P1,q$o),e(P1,HO),e(HO,j$o),e(P1,D$o),e(G,G$o),e(G,B1),e(B1,rpe),e(rpe,O$o),e(B1,V$o),e(B1,JO),e(JO,X$o),e(B1,z$o),e(G,W$o),e(G,I1),e(I1,tpe),e(tpe,Q$o),e(I1,U$o),e(I1,YO),e(YO,H$o),e(I1,J$o),e(G,Y$o),e(G,N1),e(N1,ape),e(ape,K$o),e(N1,Z$o),e(N1,KO),e(KO,eko),e(N1,oko),e(G,rko),e(G,q1),e(q1,npe),e(npe,tko),e(q1,ako),e(q1,ZO),e(ZO,nko),e(q1,sko),e(G,lko),e(G,j1),e(j1,spe),e(spe,iko),e(j1,dko),e(j1,eV),e(eV,cko),e(j1,fko),e(G,mko),e(G,D1),e(D1,lpe),e(lpe,gko),e(D1,hko),e(D1,oV),e(oV,pko),e(D1,_ko),e(G,uko),e(G,G1),e(G1,ipe),e(ipe,bko),e(G1,vko),e(G1,rV),e(rV,Fko),e(G1,Tko),e(G,Mko),e(G,O1),e(O1,dpe),e(dpe,Eko),e(O1,Cko),e(O1,tV),e(tV,wko),e(O1,Ako),e(G,Lko),e(G,V1),e(V1,cpe),e(cpe,yko),e(V1,xko),e(V1,aV),e(aV,$ko),e(V1,kko),e(G,Sko),e(G,X1),e(X1,fpe),e(fpe,Rko),e(X1,Pko),e(X1,nV),e(nV,Bko),e(X1,Iko),e(G,Nko),e(G,z1),e(z1,mpe),e(mpe,qko),e(z1,jko),e(z1,sV),e(sV,Dko),e(z1,Gko),e(G,Oko),e(G,W1),e(W1,gpe),e(gpe,Vko),e(W1,Xko),e(W1,lV),e(lV,zko),e(W1,Wko),e(G,Qko),e(G,Q1),e(Q1,hpe),e(hpe,Uko),e(Q1,Hko),e(Q1,iV),e(iV,Jko),e(Q1,Yko),e(G,Kko),e(G,U1),e(U1,ppe),e(ppe,Zko),e(U1,eSo),e(U1,dV),e(dV,oSo),e(U1,rSo),e(G,tSo),e(G,H1),e(H1,_pe),e(_pe,aSo),e(H1,nSo),e(H1,cV),e(cV,sSo),e(H1,lSo),e(G,iSo),e(G,J1),e(J1,upe),e(upe,dSo),e(J1,cSo),e(J1,fV),e(fV,fSo),e(J1,mSo),e(G,gSo),e(G,Y1),e(Y1,bpe),e(bpe,hSo),e(Y1,pSo),e(Y1,mV),e(mV,_So),e(Y1,uSo),e(G,bSo),e(G,K1),e(K1,vpe),e(vpe,vSo),e(K1,FSo),e(K1,gV),e(gV,TSo),e(K1,MSo),e(G,ESo),e(G,Z1),e(Z1,Fpe),e(Fpe,CSo),e(Z1,wSo),e(Z1,hV),e(hV,ASo),e(Z1,LSo),e(G,ySo),e(G,e6),e(e6,Tpe),e(Tpe,xSo),e(e6,$So),e(e6,pV),e(pV,kSo),e(e6,SSo),e(G,RSo),e(G,o6),e(o6,Mpe),e(Mpe,PSo),e(o6,BSo),e(o6,_V),e(_V,ISo),e(o6,NSo),e(G,qSo),e(G,r6),e(r6,Epe),e(Epe,jSo),e(r6,DSo),e(r6,uV),e(uV,GSo),e(r6,OSo),e(G,VSo),e(G,t6),e(t6,Cpe),e(Cpe,XSo),e(t6,zSo),e(t6,bV),e(bV,WSo),e(t6,QSo),e(G,USo),e(G,a6),e(a6,wpe),e(wpe,HSo),e(a6,JSo),e(a6,vV),e(vV,YSo),e(a6,KSo),e(G,ZSo),e(G,n6),e(n6,Ape),e(Ape,eRo),e(n6,oRo),e(n6,FV),e(FV,rRo),e(n6,tRo),e(G,aRo),e(G,s6),e(s6,Lpe),e(Lpe,nRo),e(s6,sRo),e(s6,TV),e(TV,lRo),e(s6,iRo),e(G,dRo),e(G,l6),e(l6,ype),e(ype,cRo),e(l6,fRo),e(l6,MV),e(MV,mRo),e(l6,gRo),e(G,hRo),e(G,i6),e(i6,xpe),e(xpe,pRo),e(i6,_Ro),e(i6,EV),e(EV,uRo),e(i6,bRo),e(G,vRo),e(G,d6),e(d6,$pe),e($pe,FRo),e(d6,TRo),e(d6,CV),e(CV,MRo),e(d6,ERo),e(G,CRo),e(G,c6),e(c6,kpe),e(kpe,wRo),e(c6,ARo),e(c6,wV),e(wV,LRo),e(c6,yRo),e(G,xRo),e(G,f6),e(f6,Spe),e(Spe,$Ro),e(f6,kRo),e(f6,AV),e(AV,SRo),e(f6,RRo),e(G,PRo),e(G,m6),e(m6,Rpe),e(Rpe,BRo),e(m6,IRo),e(m6,LV),e(LV,NRo),e(m6,qRo),e(G,jRo),e(G,g6),e(g6,Ppe),e(Ppe,DRo),e(g6,GRo),e(g6,yV),e(yV,ORo),e(g6,VRo),e(G,XRo),e(G,h6),e(h6,Bpe),e(Bpe,zRo),e(h6,WRo),e(h6,xV),e(xV,QRo),e(h6,URo),e(G,HRo),e(G,p6),e(p6,Ipe),e(Ipe,JRo),e(p6,YRo),e(p6,$V),e($V,KRo),e(p6,ZRo),e(G,ePo),e(G,_6),e(_6,Npe),e(Npe,oPo),e(_6,rPo),e(_6,kV),e(kV,tPo),e(_6,aPo),e(G,nPo),e(G,u6),e(u6,qpe),e(qpe,sPo),e(u6,lPo),e(u6,SV),e(SV,iPo),e(u6,dPo),e(G,cPo),e(G,b6),e(b6,jpe),e(jpe,fPo),e(b6,mPo),e(b6,RV),e(RV,gPo),e(b6,hPo),e(G,pPo),e(G,v6),e(v6,Dpe),e(Dpe,_Po),e(v6,uPo),e(v6,PV),e(PV,bPo),e(v6,vPo),e(G,FPo),e(G,F6),e(F6,Gpe),e(Gpe,TPo),e(F6,MPo),e(F6,BV),e(BV,EPo),e(F6,CPo),e(G,wPo),e(G,T6),e(T6,Ope),e(Ope,APo),e(T6,LPo),e(T6,IV),e(IV,yPo),e(T6,xPo),e(G,$Po),e(G,M6),e(M6,Vpe),e(Vpe,kPo),e(M6,SPo),e(M6,NV),e(NV,RPo),e(M6,PPo),e(Ke,BPo),e(Ke,E6),e(E6,IPo),e(E6,Xpe),e(Xpe,NPo),e(E6,qPo),e(E6,zpe),e(zpe,jPo),e(Ke,DPo),M(C6,Ke,null),b(f,tUe,u),b(f,id,u),e(id,w6),e(w6,Wpe),M(Hy,Wpe,null),e(id,GPo),e(id,Qpe),e(Qpe,OPo),b(f,aUe,u),b(f,Po,u),M(Jy,Po,null),e(Po,VPo),e(Po,dd),e(dd,XPo),e(dd,qV),e(qV,zPo),e(dd,WPo),e(dd,jV),e(jV,QPo),e(dd,UPo),e(Po,HPo),e(Po,Yy),e(Yy,JPo),e(Yy,Upe),e(Upe,YPo),e(Yy,KPo),e(Po,ZPo),e(Po,ht),M(Ky,ht,null),e(ht,eBo),e(ht,Hpe),e(Hpe,oBo),e(ht,rBo),e(ht,cd),e(cd,tBo),e(cd,Jpe),e(Jpe,aBo),e(cd,nBo),e(cd,DV),e(DV,sBo),e(cd,lBo),e(ht,iBo),M(A6,ht,null),e(Po,dBo),e(Po,Ze),M(Zy,Ze,null),e(Ze,cBo),e(Ze,Ype),e(Ype,fBo),e(Ze,mBo),e(Ze,za),e(za,gBo),e(za,Kpe),e(Kpe,hBo),e(za,pBo),e(za,Zpe),e(Zpe,_Bo),e(za,uBo),e(za,e_e),e(e_e,bBo),e(za,vBo),e(Ze,FBo),e(Ze,z),e(z,L6),e(L6,o_e),e(o_e,TBo),e(L6,MBo),e(L6,GV),e(GV,EBo),e(L6,CBo),e(z,wBo),e(z,y6),e(y6,r_e),e(r_e,ABo),e(y6,LBo),e(y6,OV),e(OV,yBo),e(y6,xBo),e(z,$Bo),e(z,x6),e(x6,t_e),e(t_e,kBo),e(x6,SBo),e(x6,VV),e(VV,RBo),e(x6,PBo),e(z,BBo),e(z,$6),e($6,a_e),e(a_e,IBo),e($6,NBo),e($6,XV),e(XV,qBo),e($6,jBo),e(z,DBo),e(z,k6),e(k6,n_e),e(n_e,GBo),e(k6,OBo),e(k6,zV),e(zV,VBo),e(k6,XBo),e(z,zBo),e(z,S6),e(S6,s_e),e(s_e,WBo),e(S6,QBo),e(S6,WV),e(WV,UBo),e(S6,HBo),e(z,JBo),e(z,R6),e(R6,l_e),e(l_e,YBo),e(R6,KBo),e(R6,QV),e(QV,ZBo),e(R6,eIo),e(z,oIo),e(z,P6),e(P6,i_e),e(i_e,rIo),e(P6,tIo),e(P6,UV),e(UV,aIo),e(P6,nIo),e(z,sIo),e(z,B6),e(B6,d_e),e(d_e,lIo),e(B6,iIo),e(B6,HV),e(HV,dIo),e(B6,cIo),e(z,fIo),e(z,I6),e(I6,c_e),e(c_e,mIo),e(I6,gIo),e(I6,JV),e(JV,hIo),e(I6,pIo),e(z,_Io),e(z,N6),e(N6,f_e),e(f_e,uIo),e(N6,bIo),e(N6,YV),e(YV,vIo),e(N6,FIo),e(z,TIo),e(z,q6),e(q6,m_e),e(m_e,MIo),e(q6,EIo),e(q6,KV),e(KV,CIo),e(q6,wIo),e(z,AIo),e(z,j6),e(j6,g_e),e(g_e,LIo),e(j6,yIo),e(j6,ZV),e(ZV,xIo),e(j6,$Io),e(z,kIo),e(z,D6),e(D6,h_e),e(h_e,SIo),e(D6,RIo),e(D6,eX),e(eX,PIo),e(D6,BIo),e(z,IIo),e(z,G6),e(G6,p_e),e(p_e,NIo),e(G6,qIo),e(G6,oX),e(oX,jIo),e(G6,DIo),e(z,GIo),e(z,O6),e(O6,__e),e(__e,OIo),e(O6,VIo),e(O6,rX),e(rX,XIo),e(O6,zIo),e(z,WIo),e(z,V6),e(V6,u_e),e(u_e,QIo),e(V6,UIo),e(V6,tX),e(tX,HIo),e(V6,JIo),e(z,YIo),e(z,X6),e(X6,b_e),e(b_e,KIo),e(X6,ZIo),e(X6,aX),e(aX,eNo),e(X6,oNo),e(z,rNo),e(z,z6),e(z6,v_e),e(v_e,tNo),e(z6,aNo),e(z6,nX),e(nX,nNo),e(z6,sNo),e(z,lNo),e(z,W6),e(W6,F_e),e(F_e,iNo),e(W6,dNo),e(W6,sX),e(sX,cNo),e(W6,fNo),e(z,mNo),e(z,Q6),e(Q6,T_e),e(T_e,gNo),e(Q6,hNo),e(Q6,lX),e(lX,pNo),e(Q6,_No),e(z,uNo),e(z,U6),e(U6,M_e),e(M_e,bNo),e(U6,vNo),e(U6,iX),e(iX,FNo),e(U6,TNo),e(z,MNo),e(z,H6),e(H6,E_e),e(E_e,ENo),e(H6,CNo),e(H6,dX),e(dX,wNo),e(H6,ANo),e(z,LNo),e(z,J6),e(J6,C_e),e(C_e,yNo),e(J6,xNo),e(J6,cX),e(cX,$No),e(J6,kNo),e(z,SNo),e(z,Y6),e(Y6,w_e),e(w_e,RNo),e(Y6,PNo),e(Y6,fX),e(fX,BNo),e(Y6,INo),e(z,NNo),e(z,K6),e(K6,A_e),e(A_e,qNo),e(K6,jNo),e(K6,mX),e(mX,DNo),e(K6,GNo),e(z,ONo),e(z,Z6),e(Z6,L_e),e(L_e,VNo),e(Z6,XNo),e(Z6,gX),e(gX,zNo),e(Z6,WNo),e(z,QNo),e(z,e8),e(e8,y_e),e(y_e,UNo),e(e8,HNo),e(e8,hX),e(hX,JNo),e(e8,YNo),e(z,KNo),e(z,o8),e(o8,x_e),e(x_e,ZNo),e(o8,eqo),e(o8,pX),e(pX,oqo),e(o8,rqo),e(z,tqo),e(z,r8),e(r8,$_e),e($_e,aqo),e(r8,nqo),e(r8,_X),e(_X,sqo),e(r8,lqo),e(z,iqo),e(z,t8),e(t8,k_e),e(k_e,dqo),e(t8,cqo),e(t8,uX),e(uX,fqo),e(t8,mqo),e(z,gqo),e(z,a8),e(a8,S_e),e(S_e,hqo),e(a8,pqo),e(a8,bX),e(bX,_qo),e(a8,uqo),e(z,bqo),e(z,n8),e(n8,R_e),e(R_e,vqo),e(n8,Fqo),e(n8,vX),e(vX,Tqo),e(n8,Mqo),e(z,Eqo),e(z,s8),e(s8,P_e),e(P_e,Cqo),e(s8,wqo),e(s8,FX),e(FX,Aqo),e(s8,Lqo),e(z,yqo),e(z,l8),e(l8,B_e),e(B_e,xqo),e(l8,$qo),e(l8,TX),e(TX,kqo),e(l8,Sqo),e(z,Rqo),e(z,i8),e(i8,I_e),e(I_e,Pqo),e(i8,Bqo),e(i8,MX),e(MX,Iqo),e(i8,Nqo),e(z,qqo),e(z,d8),e(d8,N_e),e(N_e,jqo),e(d8,Dqo),e(d8,EX),e(EX,Gqo),e(d8,Oqo),e(z,Vqo),e(z,c8),e(c8,q_e),e(q_e,Xqo),e(c8,zqo),e(c8,CX),e(CX,Wqo),e(c8,Qqo),e(z,Uqo),e(z,f8),e(f8,j_e),e(j_e,Hqo),e(f8,Jqo),e(f8,wX),e(wX,Yqo),e(f8,Kqo),e(z,Zqo),e(z,m8),e(m8,D_e),e(D_e,ejo),e(m8,ojo),e(m8,AX),e(AX,rjo),e(m8,tjo),e(Ze,ajo),e(Ze,g8),e(g8,njo),e(g8,G_e),e(G_e,sjo),e(g8,ljo),e(g8,O_e),e(O_e,ijo),e(Ze,djo),M(h8,Ze,null),b(f,nUe,u),b(f,fd,u),e(fd,p8),e(p8,V_e),M(e9,V_e,null),e(fd,cjo),e(fd,X_e),e(X_e,fjo),b(f,sUe,u),b(f,Bo,u),M(o9,Bo,null),e(Bo,mjo),e(Bo,md),e(md,gjo),e(md,LX),e(LX,hjo),e(md,pjo),e(md,yX),e(yX,_jo),e(md,ujo),e(Bo,bjo),e(Bo,r9),e(r9,vjo),e(r9,z_e),e(z_e,Fjo),e(r9,Tjo),e(Bo,Mjo),e(Bo,pt),M(t9,pt,null),e(pt,Ejo),e(pt,W_e),e(W_e,Cjo),e(pt,wjo),e(pt,gd),e(gd,Ajo),e(gd,Q_e),e(Q_e,Ljo),e(gd,yjo),e(gd,xX),e(xX,xjo),e(gd,$jo),e(pt,kjo),M(_8,pt,null),e(Bo,Sjo),e(Bo,eo),M(a9,eo,null),e(eo,Rjo),e(eo,U_e),e(U_e,Pjo),e(eo,Bjo),e(eo,Wa),e(Wa,Ijo),e(Wa,H_e),e(H_e,Njo),e(Wa,qjo),e(Wa,J_e),e(J_e,jjo),e(Wa,Djo),e(Wa,Y_e),e(Y_e,Gjo),e(Wa,Ojo),e(eo,Vjo),e(eo,U),e(U,u8),e(u8,K_e),e(K_e,Xjo),e(u8,zjo),e(u8,$X),e($X,Wjo),e(u8,Qjo),e(U,Ujo),e(U,b8),e(b8,Z_e),e(Z_e,Hjo),e(b8,Jjo),e(b8,kX),e(kX,Yjo),e(b8,Kjo),e(U,Zjo),e(U,v8),e(v8,eue),e(eue,eDo),e(v8,oDo),e(v8,SX),e(SX,rDo),e(v8,tDo),e(U,aDo),e(U,F8),e(F8,oue),e(oue,nDo),e(F8,sDo),e(F8,RX),e(RX,lDo),e(F8,iDo),e(U,dDo),e(U,T8),e(T8,rue),e(rue,cDo),e(T8,fDo),e(T8,PX),e(PX,mDo),e(T8,gDo),e(U,hDo),e(U,M8),e(M8,tue),e(tue,pDo),e(M8,_Do),e(M8,BX),e(BX,uDo),e(M8,bDo),e(U,vDo),e(U,E8),e(E8,aue),e(aue,FDo),e(E8,TDo),e(E8,IX),e(IX,MDo),e(E8,EDo),e(U,CDo),e(U,C8),e(C8,nue),e(nue,wDo),e(C8,ADo),e(C8,NX),e(NX,LDo),e(C8,yDo),e(U,xDo),e(U,w8),e(w8,sue),e(sue,$Do),e(w8,kDo),e(w8,qX),e(qX,SDo),e(w8,RDo),e(U,PDo),e(U,A8),e(A8,lue),e(lue,BDo),e(A8,IDo),e(A8,jX),e(jX,NDo),e(A8,qDo),e(U,jDo),e(U,L8),e(L8,iue),e(iue,DDo),e(L8,GDo),e(L8,DX),e(DX,ODo),e(L8,VDo),e(U,XDo),e(U,y8),e(y8,due),e(due,zDo),e(y8,WDo),e(y8,GX),e(GX,QDo),e(y8,UDo),e(U,HDo),e(U,x8),e(x8,cue),e(cue,JDo),e(x8,YDo),e(x8,OX),e(OX,KDo),e(x8,ZDo),e(U,eGo),e(U,$8),e($8,fue),e(fue,oGo),e($8,rGo),e($8,VX),e(VX,tGo),e($8,aGo),e(U,nGo),e(U,k8),e(k8,mue),e(mue,sGo),e(k8,lGo),e(k8,XX),e(XX,iGo),e(k8,dGo),e(U,cGo),e(U,S8),e(S8,gue),e(gue,fGo),e(S8,mGo),e(S8,zX),e(zX,gGo),e(S8,hGo),e(U,pGo),e(U,R8),e(R8,hue),e(hue,_Go),e(R8,uGo),e(R8,WX),e(WX,bGo),e(R8,vGo),e(U,FGo),e(U,P8),e(P8,pue),e(pue,TGo),e(P8,MGo),e(P8,QX),e(QX,EGo),e(P8,CGo),e(U,wGo),e(U,B8),e(B8,_ue),e(_ue,AGo),e(B8,LGo),e(B8,UX),e(UX,yGo),e(B8,xGo),e(U,$Go),e(U,I8),e(I8,uue),e(uue,kGo),e(I8,SGo),e(I8,HX),e(HX,RGo),e(I8,PGo),e(U,BGo),e(U,N8),e(N8,bue),e(bue,IGo),e(N8,NGo),e(N8,JX),e(JX,qGo),e(N8,jGo),e(U,DGo),e(U,q8),e(q8,vue),e(vue,GGo),e(q8,OGo),e(q8,YX),e(YX,VGo),e(q8,XGo),e(U,zGo),e(U,j8),e(j8,Fue),e(Fue,WGo),e(j8,QGo),e(j8,KX),e(KX,UGo),e(j8,HGo),e(U,JGo),e(U,D8),e(D8,Tue),e(Tue,YGo),e(D8,KGo),e(D8,ZX),e(ZX,ZGo),e(D8,eOo),e(U,oOo),e(U,G8),e(G8,Mue),e(Mue,rOo),e(G8,tOo),e(G8,ez),e(ez,aOo),e(G8,nOo),e(U,sOo),e(U,O8),e(O8,Eue),e(Eue,lOo),e(O8,iOo),e(O8,oz),e(oz,dOo),e(O8,cOo),e(U,fOo),e(U,V8),e(V8,Cue),e(Cue,mOo),e(V8,gOo),e(V8,rz),e(rz,hOo),e(V8,pOo),e(U,_Oo),e(U,X8),e(X8,wue),e(wue,uOo),e(X8,bOo),e(X8,tz),e(tz,vOo),e(X8,FOo),e(U,TOo),e(U,z8),e(z8,Aue),e(Aue,MOo),e(z8,EOo),e(z8,az),e(az,COo),e(z8,wOo),e(U,AOo),e(U,W8),e(W8,Lue),e(Lue,LOo),e(W8,yOo),e(W8,nz),e(nz,xOo),e(W8,$Oo),e(U,kOo),e(U,Q8),e(Q8,yue),e(yue,SOo),e(Q8,ROo),e(Q8,sz),e(sz,POo),e(Q8,BOo),e(U,IOo),e(U,U8),e(U8,xue),e(xue,NOo),e(U8,qOo),e(U8,lz),e(lz,jOo),e(U8,DOo),e(U,GOo),e(U,H8),e(H8,$ue),e($ue,OOo),e(H8,VOo),e(H8,iz),e(iz,XOo),e(H8,zOo),e(U,WOo),e(U,J8),e(J8,kue),e(kue,QOo),e(J8,UOo),e(J8,Sue),e(Sue,HOo),e(J8,JOo),e(U,YOo),e(U,Y8),e(Y8,Rue),e(Rue,KOo),e(Y8,ZOo),e(Y8,dz),e(dz,eVo),e(Y8,oVo),e(U,rVo),e(U,K8),e(K8,Pue),e(Pue,tVo),e(K8,aVo),e(K8,cz),e(cz,nVo),e(K8,sVo),e(U,lVo),e(U,Z8),e(Z8,Bue),e(Bue,iVo),e(Z8,dVo),e(Z8,fz),e(fz,cVo),e(Z8,fVo),e(U,mVo),e(U,e2),e(e2,Iue),e(Iue,gVo),e(e2,hVo),e(e2,mz),e(mz,pVo),e(e2,_Vo),e(eo,uVo),e(eo,o2),e(o2,bVo),e(o2,Nue),e(Nue,vVo),e(o2,FVo),e(o2,que),e(que,TVo),e(eo,MVo),M(r2,eo,null),b(f,lUe,u),b(f,hd,u),e(hd,t2),e(t2,jue),M(n9,jue,null),e(hd,EVo),e(hd,Due),e(Due,CVo),b(f,iUe,u),b(f,Io,u),M(s9,Io,null),e(Io,wVo),e(Io,pd),e(pd,AVo),e(pd,gz),e(gz,LVo),e(pd,yVo),e(pd,hz),e(hz,xVo),e(pd,$Vo),e(Io,kVo),e(Io,l9),e(l9,SVo),e(l9,Gue),e(Gue,RVo),e(l9,PVo),e(Io,BVo),e(Io,_t),M(i9,_t,null),e(_t,IVo),e(_t,Oue),e(Oue,NVo),e(_t,qVo),e(_t,_d),e(_d,jVo),e(_d,Vue),e(Vue,DVo),e(_d,GVo),e(_d,pz),e(pz,OVo),e(_d,VVo),e(_t,XVo),M(a2,_t,null),e(Io,zVo),e(Io,oo),M(d9,oo,null),e(oo,WVo),e(oo,Xue),e(Xue,QVo),e(oo,UVo),e(oo,Qa),e(Qa,HVo),e(Qa,zue),e(zue,JVo),e(Qa,YVo),e(Qa,Wue),e(Wue,KVo),e(Qa,ZVo),e(Qa,Que),e(Que,eXo),e(Qa,oXo),e(oo,rXo),e(oo,me),e(me,n2),e(n2,Uue),e(Uue,tXo),e(n2,aXo),e(n2,_z),e(_z,nXo),e(n2,sXo),e(me,lXo),e(me,s2),e(s2,Hue),e(Hue,iXo),e(s2,dXo),e(s2,uz),e(uz,cXo),e(s2,fXo),e(me,mXo),e(me,l2),e(l2,Jue),e(Jue,gXo),e(l2,hXo),e(l2,bz),e(bz,pXo),e(l2,_Xo),e(me,uXo),e(me,i2),e(i2,Yue),e(Yue,bXo),e(i2,vXo),e(i2,vz),e(vz,FXo),e(i2,TXo),e(me,MXo),e(me,d2),e(d2,Kue),e(Kue,EXo),e(d2,CXo),e(d2,Fz),e(Fz,wXo),e(d2,AXo),e(me,LXo),e(me,c2),e(c2,Zue),e(Zue,yXo),e(c2,xXo),e(c2,Tz),e(Tz,$Xo),e(c2,kXo),e(me,SXo),e(me,f2),e(f2,e1e),e(e1e,RXo),e(f2,PXo),e(f2,Mz),e(Mz,BXo),e(f2,IXo),e(me,NXo),e(me,m2),e(m2,o1e),e(o1e,qXo),e(m2,jXo),e(m2,Ez),e(Ez,DXo),e(m2,GXo),e(me,OXo),e(me,g2),e(g2,r1e),e(r1e,VXo),e(g2,XXo),e(g2,Cz),e(Cz,zXo),e(g2,WXo),e(me,QXo),e(me,h2),e(h2,t1e),e(t1e,UXo),e(h2,HXo),e(h2,wz),e(wz,JXo),e(h2,YXo),e(me,KXo),e(me,p2),e(p2,a1e),e(a1e,ZXo),e(p2,ezo),e(p2,Az),e(Az,ozo),e(p2,rzo),e(me,tzo),e(me,_2),e(_2,n1e),e(n1e,azo),e(_2,nzo),e(_2,Lz),e(Lz,szo),e(_2,lzo),e(me,izo),e(me,u2),e(u2,s1e),e(s1e,dzo),e(u2,czo),e(u2,yz),e(yz,fzo),e(u2,mzo),e(me,gzo),e(me,b2),e(b2,l1e),e(l1e,hzo),e(b2,pzo),e(b2,xz),e(xz,_zo),e(b2,uzo),e(me,bzo),e(me,v2),e(v2,i1e),e(i1e,vzo),e(v2,Fzo),e(v2,$z),e($z,Tzo),e(v2,Mzo),e(me,Ezo),e(me,F2),e(F2,d1e),e(d1e,Czo),e(F2,wzo),e(F2,kz),e(kz,Azo),e(F2,Lzo),e(me,yzo),e(me,T2),e(T2,c1e),e(c1e,xzo),e(T2,$zo),e(T2,Sz),e(Sz,kzo),e(T2,Szo),e(me,Rzo),e(me,M2),e(M2,f1e),e(f1e,Pzo),e(M2,Bzo),e(M2,Rz),e(Rz,Izo),e(M2,Nzo),e(me,qzo),e(me,E2),e(E2,m1e),e(m1e,jzo),e(E2,Dzo),e(E2,Pz),e(Pz,Gzo),e(E2,Ozo),e(oo,Vzo),e(oo,C2),e(C2,Xzo),e(C2,g1e),e(g1e,zzo),e(C2,Wzo),e(C2,h1e),e(h1e,Qzo),e(oo,Uzo),M(w2,oo,null),b(f,dUe,u),b(f,ud,u),e(ud,A2),e(A2,p1e),M(c9,p1e,null),e(ud,Hzo),e(ud,_1e),e(_1e,Jzo),b(f,cUe,u),b(f,No,u),M(f9,No,null),e(No,Yzo),e(No,bd),e(bd,Kzo),e(bd,Bz),e(Bz,Zzo),e(bd,eWo),e(bd,Iz),e(Iz,oWo),e(bd,rWo),e(No,tWo),e(No,m9),e(m9,aWo),e(m9,u1e),e(u1e,nWo),e(m9,sWo),e(No,lWo),e(No,ut),M(g9,ut,null),e(ut,iWo),e(ut,b1e),e(b1e,dWo),e(ut,cWo),e(ut,vd),e(vd,fWo),e(vd,v1e),e(v1e,mWo),e(vd,gWo),e(vd,Nz),e(Nz,hWo),e(vd,pWo),e(ut,_Wo),M(L2,ut,null),e(No,uWo),e(No,ro),M(h9,ro,null),e(ro,bWo),e(ro,F1e),e(F1e,vWo),e(ro,FWo),e(ro,Ua),e(Ua,TWo),e(Ua,T1e),e(T1e,MWo),e(Ua,EWo),e(Ua,M1e),e(M1e,CWo),e(Ua,wWo),e(Ua,E1e),e(E1e,AWo),e(Ua,LWo),e(ro,yWo),e(ro,N),e(N,y2),e(y2,C1e),e(C1e,xWo),e(y2,$Wo),e(y2,qz),e(qz,kWo),e(y2,SWo),e(N,RWo),e(N,x2),e(x2,w1e),e(w1e,PWo),e(x2,BWo),e(x2,jz),e(jz,IWo),e(x2,NWo),e(N,qWo),e(N,$2),e($2,A1e),e(A1e,jWo),e($2,DWo),e($2,Dz),e(Dz,GWo),e($2,OWo),e(N,VWo),e(N,k2),e(k2,L1e),e(L1e,XWo),e(k2,zWo),e(k2,Gz),e(Gz,WWo),e(k2,QWo),e(N,UWo),e(N,S2),e(S2,y1e),e(y1e,HWo),e(S2,JWo),e(S2,Oz),e(Oz,YWo),e(S2,KWo),e(N,ZWo),e(N,R2),e(R2,x1e),e(x1e,eQo),e(R2,oQo),e(R2,Vz),e(Vz,rQo),e(R2,tQo),e(N,aQo),e(N,P2),e(P2,$1e),e($1e,nQo),e(P2,sQo),e(P2,Xz),e(Xz,lQo),e(P2,iQo),e(N,dQo),e(N,B2),e(B2,k1e),e(k1e,cQo),e(B2,fQo),e(B2,zz),e(zz,mQo),e(B2,gQo),e(N,hQo),e(N,I2),e(I2,S1e),e(S1e,pQo),e(I2,_Qo),e(I2,Wz),e(Wz,uQo),e(I2,bQo),e(N,vQo),e(N,N2),e(N2,R1e),e(R1e,FQo),e(N2,TQo),e(N2,Qz),e(Qz,MQo),e(N2,EQo),e(N,CQo),e(N,q2),e(q2,P1e),e(P1e,wQo),e(q2,AQo),e(q2,Uz),e(Uz,LQo),e(q2,yQo),e(N,xQo),e(N,j2),e(j2,B1e),e(B1e,$Qo),e(j2,kQo),e(j2,Hz),e(Hz,SQo),e(j2,RQo),e(N,PQo),e(N,D2),e(D2,I1e),e(I1e,BQo),e(D2,IQo),e(D2,Jz),e(Jz,NQo),e(D2,qQo),e(N,jQo),e(N,G2),e(G2,N1e),e(N1e,DQo),e(G2,GQo),e(G2,Yz),e(Yz,OQo),e(G2,VQo),e(N,XQo),e(N,O2),e(O2,q1e),e(q1e,zQo),e(O2,WQo),e(O2,Kz),e(Kz,QQo),e(O2,UQo),e(N,HQo),e(N,V2),e(V2,j1e),e(j1e,JQo),e(V2,YQo),e(V2,Zz),e(Zz,KQo),e(V2,ZQo),e(N,eUo),e(N,X2),e(X2,D1e),e(D1e,oUo),e(X2,rUo),e(X2,eW),e(eW,tUo),e(X2,aUo),e(N,nUo),e(N,z2),e(z2,G1e),e(G1e,sUo),e(z2,lUo),e(z2,oW),e(oW,iUo),e(z2,dUo),e(N,cUo),e(N,W2),e(W2,O1e),e(O1e,fUo),e(W2,mUo),e(W2,rW),e(rW,gUo),e(W2,hUo),e(N,pUo),e(N,Q2),e(Q2,V1e),e(V1e,_Uo),e(Q2,uUo),e(Q2,tW),e(tW,bUo),e(Q2,vUo),e(N,FUo),e(N,U2),e(U2,X1e),e(X1e,TUo),e(U2,MUo),e(U2,aW),e(aW,EUo),e(U2,CUo),e(N,wUo),e(N,H2),e(H2,z1e),e(z1e,AUo),e(H2,LUo),e(H2,nW),e(nW,yUo),e(H2,xUo),e(N,$Uo),e(N,J2),e(J2,W1e),e(W1e,kUo),e(J2,SUo),e(J2,sW),e(sW,RUo),e(J2,PUo),e(N,BUo),e(N,Y2),e(Y2,Q1e),e(Q1e,IUo),e(Y2,NUo),e(Y2,lW),e(lW,qUo),e(Y2,jUo),e(N,DUo),e(N,K2),e(K2,U1e),e(U1e,GUo),e(K2,OUo),e(K2,iW),e(iW,VUo),e(K2,XUo),e(N,zUo),e(N,Z2),e(Z2,H1e),e(H1e,WUo),e(Z2,QUo),e(Z2,dW),e(dW,UUo),e(Z2,HUo),e(N,JUo),e(N,eb),e(eb,J1e),e(J1e,YUo),e(eb,KUo),e(eb,cW),e(cW,ZUo),e(eb,eHo),e(N,oHo),e(N,ob),e(ob,Y1e),e(Y1e,rHo),e(ob,tHo),e(ob,fW),e(fW,aHo),e(ob,nHo),e(N,sHo),e(N,rb),e(rb,K1e),e(K1e,lHo),e(rb,iHo),e(rb,mW),e(mW,dHo),e(rb,cHo),e(N,fHo),e(N,tb),e(tb,Z1e),e(Z1e,mHo),e(tb,gHo),e(tb,gW),e(gW,hHo),e(tb,pHo),e(N,_Ho),e(N,ab),e(ab,e6e),e(e6e,uHo),e(ab,bHo),e(ab,hW),e(hW,vHo),e(ab,FHo),e(N,THo),e(N,nb),e(nb,o6e),e(o6e,MHo),e(nb,EHo),e(nb,pW),e(pW,CHo),e(nb,wHo),e(N,AHo),e(N,sb),e(sb,r6e),e(r6e,LHo),e(sb,yHo),e(sb,_W),e(_W,xHo),e(sb,$Ho),e(N,kHo),e(N,lb),e(lb,t6e),e(t6e,SHo),e(lb,RHo),e(lb,uW),e(uW,PHo),e(lb,BHo),e(N,IHo),e(N,ib),e(ib,a6e),e(a6e,NHo),e(ib,qHo),e(ib,bW),e(bW,jHo),e(ib,DHo),e(N,GHo),e(N,db),e(db,n6e),e(n6e,OHo),e(db,VHo),e(db,vW),e(vW,XHo),e(db,zHo),e(N,WHo),e(N,cb),e(cb,s6e),e(s6e,QHo),e(cb,UHo),e(cb,FW),e(FW,HHo),e(cb,JHo),e(N,YHo),e(N,fb),e(fb,l6e),e(l6e,KHo),e(fb,ZHo),e(fb,TW),e(TW,eJo),e(fb,oJo),e(N,rJo),e(N,mb),e(mb,i6e),e(i6e,tJo),e(mb,aJo),e(mb,MW),e(MW,nJo),e(mb,sJo),e(N,lJo),e(N,gb),e(gb,d6e),e(d6e,iJo),e(gb,dJo),e(gb,EW),e(EW,cJo),e(gb,fJo),e(N,mJo),e(N,hb),e(hb,c6e),e(c6e,gJo),e(hb,hJo),e(hb,CW),e(CW,pJo),e(hb,_Jo),e(N,uJo),e(N,pb),e(pb,f6e),e(f6e,bJo),e(pb,vJo),e(pb,wW),e(wW,FJo),e(pb,TJo),e(N,MJo),e(N,_b),e(_b,m6e),e(m6e,EJo),e(_b,CJo),e(_b,AW),e(AW,wJo),e(_b,AJo),e(N,LJo),e(N,ub),e(ub,g6e),e(g6e,yJo),e(ub,xJo),e(ub,LW),e(LW,$Jo),e(ub,kJo),e(N,SJo),e(N,bb),e(bb,h6e),e(h6e,RJo),e(bb,PJo),e(bb,yW),e(yW,BJo),e(bb,IJo),e(N,NJo),e(N,vb),e(vb,p6e),e(p6e,qJo),e(vb,jJo),e(vb,xW),e(xW,DJo),e(vb,GJo),e(N,OJo),e(N,Fb),e(Fb,_6e),e(_6e,VJo),e(Fb,XJo),e(Fb,$W),e($W,zJo),e(Fb,WJo),e(N,QJo),e(N,Tb),e(Tb,u6e),e(u6e,UJo),e(Tb,HJo),e(Tb,kW),e(kW,JJo),e(Tb,YJo),e(N,KJo),e(N,Mb),e(Mb,b6e),e(b6e,ZJo),e(Mb,eYo),e(Mb,SW),e(SW,oYo),e(Mb,rYo),e(N,tYo),e(N,Eb),e(Eb,v6e),e(v6e,aYo),e(Eb,nYo),e(Eb,RW),e(RW,sYo),e(Eb,lYo),e(N,iYo),e(N,Cb),e(Cb,F6e),e(F6e,dYo),e(Cb,cYo),e(Cb,PW),e(PW,fYo),e(Cb,mYo),e(N,gYo),e(N,wb),e(wb,T6e),e(T6e,hYo),e(wb,pYo),e(wb,BW),e(BW,_Yo),e(wb,uYo),e(ro,bYo),e(ro,Ab),e(Ab,vYo),e(Ab,M6e),e(M6e,FYo),e(Ab,TYo),e(Ab,E6e),e(E6e,MYo),e(ro,EYo),M(Lb,ro,null),b(f,fUe,u),b(f,Fd,u),e(Fd,yb),e(yb,C6e),M(p9,C6e,null),e(Fd,CYo),e(Fd,w6e),e(w6e,wYo),b(f,mUe,u),b(f,qo,u),M(_9,qo,null),e(qo,AYo),e(qo,Td),e(Td,LYo),e(Td,IW),e(IW,yYo),e(Td,xYo),e(Td,NW),e(NW,$Yo),e(Td,kYo),e(qo,SYo),e(qo,u9),e(u9,RYo),e(u9,A6e),e(A6e,PYo),e(u9,BYo),e(qo,IYo),e(qo,bt),M(b9,bt,null),e(bt,NYo),e(bt,L6e),e(L6e,qYo),e(bt,jYo),e(bt,Md),e(Md,DYo),e(Md,y6e),e(y6e,GYo),e(Md,OYo),e(Md,qW),e(qW,VYo),e(Md,XYo),e(bt,zYo),M(xb,bt,null),e(qo,WYo),e(qo,to),M(v9,to,null),e(to,QYo),e(to,x6e),e(x6e,UYo),e(to,HYo),e(to,Ha),e(Ha,JYo),e(Ha,$6e),e($6e,YYo),e(Ha,KYo),e(Ha,k6e),e(k6e,ZYo),e(Ha,eKo),e(Ha,S6e),e(S6e,oKo),e(Ha,rKo),e(to,tKo),e(to,Z),e(Z,$b),e($b,R6e),e(R6e,aKo),e($b,nKo),e($b,jW),e(jW,sKo),e($b,lKo),e(Z,iKo),e(Z,kb),e(kb,P6e),e(P6e,dKo),e(kb,cKo),e(kb,DW),e(DW,fKo),e(kb,mKo),e(Z,gKo),e(Z,Sb),e(Sb,B6e),e(B6e,hKo),e(Sb,pKo),e(Sb,GW),e(GW,_Ko),e(Sb,uKo),e(Z,bKo),e(Z,Rb),e(Rb,I6e),e(I6e,vKo),e(Rb,FKo),e(Rb,OW),e(OW,TKo),e(Rb,MKo),e(Z,EKo),e(Z,Pb),e(Pb,N6e),e(N6e,CKo),e(Pb,wKo),e(Pb,VW),e(VW,AKo),e(Pb,LKo),e(Z,yKo),e(Z,Bb),e(Bb,q6e),e(q6e,xKo),e(Bb,$Ko),e(Bb,XW),e(XW,kKo),e(Bb,SKo),e(Z,RKo),e(Z,Ib),e(Ib,j6e),e(j6e,PKo),e(Ib,BKo),e(Ib,zW),e(zW,IKo),e(Ib,NKo),e(Z,qKo),e(Z,Nb),e(Nb,D6e),e(D6e,jKo),e(Nb,DKo),e(Nb,WW),e(WW,GKo),e(Nb,OKo),e(Z,VKo),e(Z,qb),e(qb,G6e),e(G6e,XKo),e(qb,zKo),e(qb,QW),e(QW,WKo),e(qb,QKo),e(Z,UKo),e(Z,jb),e(jb,O6e),e(O6e,HKo),e(jb,JKo),e(jb,UW),e(UW,YKo),e(jb,KKo),e(Z,ZKo),e(Z,Db),e(Db,V6e),e(V6e,eZo),e(Db,oZo),e(Db,HW),e(HW,rZo),e(Db,tZo),e(Z,aZo),e(Z,Gb),e(Gb,X6e),e(X6e,nZo),e(Gb,sZo),e(Gb,JW),e(JW,lZo),e(Gb,iZo),e(Z,dZo),e(Z,Ob),e(Ob,z6e),e(z6e,cZo),e(Ob,fZo),e(Ob,YW),e(YW,mZo),e(Ob,gZo),e(Z,hZo),e(Z,Vb),e(Vb,W6e),e(W6e,pZo),e(Vb,_Zo),e(Vb,KW),e(KW,uZo),e(Vb,bZo),e(Z,vZo),e(Z,Xb),e(Xb,Q6e),e(Q6e,FZo),e(Xb,TZo),e(Xb,ZW),e(ZW,MZo),e(Xb,EZo),e(Z,CZo),e(Z,zb),e(zb,U6e),e(U6e,wZo),e(zb,AZo),e(zb,eQ),e(eQ,LZo),e(zb,yZo),e(Z,xZo),e(Z,Wb),e(Wb,H6e),e(H6e,$Zo),e(Wb,kZo),e(Wb,oQ),e(oQ,SZo),e(Wb,RZo),e(Z,PZo),e(Z,Qb),e(Qb,J6e),e(J6e,BZo),e(Qb,IZo),e(Qb,rQ),e(rQ,NZo),e(Qb,qZo),e(Z,jZo),e(Z,Ub),e(Ub,Y6e),e(Y6e,DZo),e(Ub,GZo),e(Ub,tQ),e(tQ,OZo),e(Ub,VZo),e(Z,XZo),e(Z,Hb),e(Hb,K6e),e(K6e,zZo),e(Hb,WZo),e(Hb,aQ),e(aQ,QZo),e(Hb,UZo),e(Z,HZo),e(Z,Jb),e(Jb,Z6e),e(Z6e,JZo),e(Jb,YZo),e(Jb,nQ),e(nQ,KZo),e(Jb,ZZo),e(Z,eer),e(Z,Yb),e(Yb,e8e),e(e8e,oer),e(Yb,rer),e(Yb,sQ),e(sQ,ter),e(Yb,aer),e(Z,ner),e(Z,Kb),e(Kb,o8e),e(o8e,ser),e(Kb,ler),e(Kb,lQ),e(lQ,ier),e(Kb,der),e(Z,cer),e(Z,Zb),e(Zb,r8e),e(r8e,fer),e(Zb,mer),e(Zb,iQ),e(iQ,ger),e(Zb,her),e(Z,per),e(Z,ev),e(ev,t8e),e(t8e,_er),e(ev,uer),e(ev,dQ),e(dQ,ber),e(ev,ver),e(Z,Fer),e(Z,ov),e(ov,a8e),e(a8e,Ter),e(ov,Mer),e(ov,cQ),e(cQ,Eer),e(ov,Cer),e(Z,wer),e(Z,rv),e(rv,n8e),e(n8e,Aer),e(rv,Ler),e(rv,fQ),e(fQ,yer),e(rv,xer),e(Z,$er),e(Z,tv),e(tv,s8e),e(s8e,ker),e(tv,Ser),e(tv,mQ),e(mQ,Rer),e(tv,Per),e(Z,Ber),e(Z,av),e(av,l8e),e(l8e,Ier),e(av,Ner),e(av,gQ),e(gQ,qer),e(av,jer),e(Z,Der),e(Z,nv),e(nv,i8e),e(i8e,Ger),e(nv,Oer),e(nv,hQ),e(hQ,Ver),e(nv,Xer),e(Z,zer),e(Z,sv),e(sv,d8e),e(d8e,Wer),e(sv,Qer),e(sv,pQ),e(pQ,Uer),e(sv,Her),e(to,Jer),e(to,lv),e(lv,Yer),e(lv,c8e),e(c8e,Ker),e(lv,Zer),e(lv,f8e),e(f8e,eor),e(to,oor),M(iv,to,null),b(f,gUe,u),b(f,Ed,u),e(Ed,dv),e(dv,m8e),M(F9,m8e,null),e(Ed,ror),e(Ed,g8e),e(g8e,tor),b(f,hUe,u),b(f,jo,u),M(T9,jo,null),e(jo,aor),e(jo,Cd),e(Cd,nor),e(Cd,_Q),e(_Q,sor),e(Cd,lor),e(Cd,uQ),e(uQ,ior),e(Cd,dor),e(jo,cor),e(jo,M9),e(M9,mor),e(M9,h8e),e(h8e,gor),e(M9,hor),e(jo,por),e(jo,vt),M(E9,vt,null),e(vt,_or),e(vt,p8e),e(p8e,uor),e(vt,bor),e(vt,wd),e(wd,vor),e(wd,_8e),e(_8e,For),e(wd,Tor),e(wd,bQ),e(bQ,Mor),e(wd,Eor),e(vt,Cor),M(cv,vt,null),e(jo,wor),e(jo,ao),M(C9,ao,null),e(ao,Aor),e(ao,u8e),e(u8e,Lor),e(ao,yor),e(ao,Ja),e(Ja,xor),e(Ja,b8e),e(b8e,$or),e(Ja,kor),e(Ja,v8e),e(v8e,Sor),e(Ja,Ror),e(Ja,F8e),e(F8e,Por),e(Ja,Bor),e(ao,Ior),e(ao,Do),e(Do,fv),e(fv,T8e),e(T8e,Nor),e(fv,qor),e(fv,vQ),e(vQ,jor),e(fv,Dor),e(Do,Gor),e(Do,mv),e(mv,M8e),e(M8e,Oor),e(mv,Vor),e(mv,FQ),e(FQ,Xor),e(mv,zor),e(Do,Wor),e(Do,gv),e(gv,E8e),e(E8e,Qor),e(gv,Uor),e(gv,TQ),e(TQ,Hor),e(gv,Jor),e(Do,Yor),e(Do,hv),e(hv,C8e),e(C8e,Kor),e(hv,Zor),e(hv,MQ),e(MQ,err),e(hv,orr),e(Do,rrr),e(Do,pv),e(pv,w8e),e(w8e,trr),e(pv,arr),e(pv,EQ),e(EQ,nrr),e(pv,srr),e(Do,lrr),e(Do,_v),e(_v,A8e),e(A8e,irr),e(_v,drr),e(_v,CQ),e(CQ,crr),e(_v,frr),e(ao,mrr),e(ao,uv),e(uv,grr),e(uv,L8e),e(L8e,hrr),e(uv,prr),e(uv,y8e),e(y8e,_rr),e(ao,urr),M(bv,ao,null),b(f,pUe,u),b(f,Ad,u),e(Ad,vv),e(vv,x8e),M(w9,x8e,null),e(Ad,brr),e(Ad,$8e),e($8e,vrr),b(f,_Ue,u),b(f,Go,u),M(A9,Go,null),e(Go,Frr),e(Go,Ld),e(Ld,Trr),e(Ld,wQ),e(wQ,Mrr),e(Ld,Err),e(Ld,AQ),e(AQ,Crr),e(Ld,wrr),e(Go,Arr),e(Go,L9),e(L9,Lrr),e(L9,k8e),e(k8e,yrr),e(L9,xrr),e(Go,$rr),e(Go,Ft),M(y9,Ft,null),e(Ft,krr),e(Ft,S8e),e(S8e,Srr),e(Ft,Rrr),e(Ft,yd),e(yd,Prr),e(yd,R8e),e(R8e,Brr),e(yd,Irr),e(yd,LQ),e(LQ,Nrr),e(yd,qrr),e(Ft,jrr),M(Fv,Ft,null),e(Go,Drr),e(Go,no),M(x9,no,null),e(no,Grr),e(no,P8e),e(P8e,Orr),e(no,Vrr),e(no,Ya),e(Ya,Xrr),e(Ya,B8e),e(B8e,zrr),e(Ya,Wrr),e(Ya,I8e),e(I8e,Qrr),e(Ya,Urr),e(Ya,N8e),e(N8e,Hrr),e(Ya,Jrr),e(no,Yrr),e(no,H),e(H,Tv),e(Tv,q8e),e(q8e,Krr),e(Tv,Zrr),e(Tv,yQ),e(yQ,etr),e(Tv,otr),e(H,rtr),e(H,Mv),e(Mv,j8e),e(j8e,ttr),e(Mv,atr),e(Mv,xQ),e(xQ,ntr),e(Mv,str),e(H,ltr),e(H,Ev),e(Ev,D8e),e(D8e,itr),e(Ev,dtr),e(Ev,$Q),e($Q,ctr),e(Ev,ftr),e(H,mtr),e(H,Cv),e(Cv,G8e),e(G8e,gtr),e(Cv,htr),e(Cv,kQ),e(kQ,ptr),e(Cv,_tr),e(H,utr),e(H,wv),e(wv,O8e),e(O8e,btr),e(wv,vtr),e(wv,SQ),e(SQ,Ftr),e(wv,Ttr),e(H,Mtr),e(H,Av),e(Av,V8e),e(V8e,Etr),e(Av,Ctr),e(Av,RQ),e(RQ,wtr),e(Av,Atr),e(H,Ltr),e(H,Lv),e(Lv,X8e),e(X8e,ytr),e(Lv,xtr),e(Lv,PQ),e(PQ,$tr),e(Lv,ktr),e(H,Str),e(H,yv),e(yv,z8e),e(z8e,Rtr),e(yv,Ptr),e(yv,BQ),e(BQ,Btr),e(yv,Itr),e(H,Ntr),e(H,xv),e(xv,W8e),e(W8e,qtr),e(xv,jtr),e(xv,IQ),e(IQ,Dtr),e(xv,Gtr),e(H,Otr),e(H,$v),e($v,Q8e),e(Q8e,Vtr),e($v,Xtr),e($v,NQ),e(NQ,ztr),e($v,Wtr),e(H,Qtr),e(H,kv),e(kv,U8e),e(U8e,Utr),e(kv,Htr),e(kv,qQ),e(qQ,Jtr),e(kv,Ytr),e(H,Ktr),e(H,Sv),e(Sv,H8e),e(H8e,Ztr),e(Sv,ear),e(Sv,jQ),e(jQ,oar),e(Sv,rar),e(H,tar),e(H,Rv),e(Rv,J8e),e(J8e,aar),e(Rv,nar),e(Rv,DQ),e(DQ,sar),e(Rv,lar),e(H,iar),e(H,Pv),e(Pv,Y8e),e(Y8e,dar),e(Pv,car),e(Pv,GQ),e(GQ,far),e(Pv,mar),e(H,gar),e(H,Bv),e(Bv,K8e),e(K8e,har),e(Bv,par),e(Bv,OQ),e(OQ,_ar),e(Bv,uar),e(H,bar),e(H,Iv),e(Iv,Z8e),e(Z8e,Far),e(Iv,Tar),e(Iv,VQ),e(VQ,Mar),e(Iv,Ear),e(H,Car),e(H,Nv),e(Nv,e2e),e(e2e,war),e(Nv,Aar),e(Nv,XQ),e(XQ,Lar),e(Nv,yar),e(H,xar),e(H,qv),e(qv,o2e),e(o2e,$ar),e(qv,kar),e(qv,zQ),e(zQ,Sar),e(qv,Rar),e(H,Par),e(H,jv),e(jv,r2e),e(r2e,Bar),e(jv,Iar),e(jv,WQ),e(WQ,Nar),e(jv,qar),e(H,jar),e(H,Dv),e(Dv,t2e),e(t2e,Dar),e(Dv,Gar),e(Dv,QQ),e(QQ,Oar),e(Dv,Var),e(H,Xar),e(H,Gv),e(Gv,a2e),e(a2e,zar),e(Gv,War),e(Gv,UQ),e(UQ,Qar),e(Gv,Uar),e(H,Har),e(H,Ov),e(Ov,n2e),e(n2e,Jar),e(Ov,Yar),e(Ov,HQ),e(HQ,Kar),e(Ov,Zar),e(H,enr),e(H,Vv),e(Vv,s2e),e(s2e,onr),e(Vv,rnr),e(Vv,JQ),e(JQ,tnr),e(Vv,anr),e(H,nnr),e(H,Xv),e(Xv,l2e),e(l2e,snr),e(Xv,lnr),e(Xv,YQ),e(YQ,inr),e(Xv,dnr),e(H,cnr),e(H,zv),e(zv,i2e),e(i2e,fnr),e(zv,mnr),e(zv,KQ),e(KQ,gnr),e(zv,hnr),e(H,pnr),e(H,Wv),e(Wv,d2e),e(d2e,_nr),e(Wv,unr),e(Wv,ZQ),e(ZQ,bnr),e(Wv,vnr),e(H,Fnr),e(H,Qv),e(Qv,c2e),e(c2e,Tnr),e(Qv,Mnr),e(Qv,eU),e(eU,Enr),e(Qv,Cnr),e(H,wnr),e(H,Uv),e(Uv,f2e),e(f2e,Anr),e(Uv,Lnr),e(Uv,oU),e(oU,ynr),e(Uv,xnr),e(H,$nr),e(H,Hv),e(Hv,m2e),e(m2e,knr),e(Hv,Snr),e(Hv,rU),e(rU,Rnr),e(Hv,Pnr),e(H,Bnr),e(H,Jv),e(Jv,g2e),e(g2e,Inr),e(Jv,Nnr),e(Jv,tU),e(tU,qnr),e(Jv,jnr),e(H,Dnr),e(H,Yv),e(Yv,h2e),e(h2e,Gnr),e(Yv,Onr),e(Yv,aU),e(aU,Vnr),e(Yv,Xnr),e(H,znr),e(H,Kv),e(Kv,p2e),e(p2e,Wnr),e(Kv,Qnr),e(Kv,nU),e(nU,Unr),e(Kv,Hnr),e(H,Jnr),e(H,Zv),e(Zv,_2e),e(_2e,Ynr),e(Zv,Knr),e(Zv,sU),e(sU,Znr),e(Zv,esr),e(H,osr),e(H,eF),e(eF,u2e),e(u2e,rsr),e(eF,tsr),e(eF,lU),e(lU,asr),e(eF,nsr),e(H,ssr),e(H,oF),e(oF,b2e),e(b2e,lsr),e(oF,isr),e(oF,iU),e(iU,dsr),e(oF,csr),e(H,fsr),e(H,rF),e(rF,v2e),e(v2e,msr),e(rF,gsr),e(rF,dU),e(dU,hsr),e(rF,psr),e(H,_sr),e(H,tF),e(tF,F2e),e(F2e,usr),e(tF,bsr),e(tF,cU),e(cU,vsr),e(tF,Fsr),e(no,Tsr),e(no,aF),e(aF,Msr),e(aF,T2e),e(T2e,Esr),e(aF,Csr),e(aF,M2e),e(M2e,wsr),e(no,Asr),M(nF,no,null),b(f,uUe,u),b(f,xd,u),e(xd,sF),e(sF,E2e),M($9,E2e,null),e(xd,Lsr),e(xd,C2e),e(C2e,ysr),b(f,bUe,u),b(f,Oo,u),M(k9,Oo,null),e(Oo,xsr),e(Oo,$d),e($d,$sr),e($d,fU),e(fU,ksr),e($d,Ssr),e($d,mU),e(mU,Rsr),e($d,Psr),e(Oo,Bsr),e(Oo,S9),e(S9,Isr),e(S9,w2e),e(w2e,Nsr),e(S9,qsr),e(Oo,jsr),e(Oo,Tt),M(R9,Tt,null),e(Tt,Dsr),e(Tt,A2e),e(A2e,Gsr),e(Tt,Osr),e(Tt,kd),e(kd,Vsr),e(kd,L2e),e(L2e,Xsr),e(kd,zsr),e(kd,gU),e(gU,Wsr),e(kd,Qsr),e(Tt,Usr),M(lF,Tt,null),e(Oo,Hsr),e(Oo,so),M(P9,so,null),e(so,Jsr),e(so,y2e),e(y2e,Ysr),e(so,Ksr),e(so,Ka),e(Ka,Zsr),e(Ka,x2e),e(x2e,elr),e(Ka,olr),e(Ka,$2e),e($2e,rlr),e(Ka,tlr),e(Ka,k2e),e(k2e,alr),e(Ka,nlr),e(so,slr),e(so,V),e(V,iF),e(iF,S2e),e(S2e,llr),e(iF,ilr),e(iF,hU),e(hU,dlr),e(iF,clr),e(V,flr),e(V,dF),e(dF,R2e),e(R2e,mlr),e(dF,glr),e(dF,pU),e(pU,hlr),e(dF,plr),e(V,_lr),e(V,cF),e(cF,P2e),e(P2e,ulr),e(cF,blr),e(cF,_U),e(_U,vlr),e(cF,Flr),e(V,Tlr),e(V,fF),e(fF,B2e),e(B2e,Mlr),e(fF,Elr),e(fF,uU),e(uU,Clr),e(fF,wlr),e(V,Alr),e(V,mF),e(mF,I2e),e(I2e,Llr),e(mF,ylr),e(mF,bU),e(bU,xlr),e(mF,$lr),e(V,klr),e(V,gF),e(gF,N2e),e(N2e,Slr),e(gF,Rlr),e(gF,vU),e(vU,Plr),e(gF,Blr),e(V,Ilr),e(V,hF),e(hF,q2e),e(q2e,Nlr),e(hF,qlr),e(hF,FU),e(FU,jlr),e(hF,Dlr),e(V,Glr),e(V,pF),e(pF,j2e),e(j2e,Olr),e(pF,Vlr),e(pF,TU),e(TU,Xlr),e(pF,zlr),e(V,Wlr),e(V,_F),e(_F,D2e),e(D2e,Qlr),e(_F,Ulr),e(_F,MU),e(MU,Hlr),e(_F,Jlr),e(V,Ylr),e(V,uF),e(uF,G2e),e(G2e,Klr),e(uF,Zlr),e(uF,EU),e(EU,eir),e(uF,oir),e(V,rir),e(V,bF),e(bF,O2e),e(O2e,tir),e(bF,air),e(bF,CU),e(CU,nir),e(bF,sir),e(V,lir),e(V,vF),e(vF,V2e),e(V2e,iir),e(vF,dir),e(vF,wU),e(wU,cir),e(vF,fir),e(V,mir),e(V,FF),e(FF,X2e),e(X2e,gir),e(FF,hir),e(FF,AU),e(AU,pir),e(FF,_ir),e(V,uir),e(V,TF),e(TF,z2e),e(z2e,bir),e(TF,vir),e(TF,LU),e(LU,Fir),e(TF,Tir),e(V,Mir),e(V,MF),e(MF,W2e),e(W2e,Eir),e(MF,Cir),e(MF,yU),e(yU,wir),e(MF,Air),e(V,Lir),e(V,EF),e(EF,Q2e),e(Q2e,yir),e(EF,xir),e(EF,xU),e(xU,$ir),e(EF,kir),e(V,Sir),e(V,CF),e(CF,U2e),e(U2e,Rir),e(CF,Pir),e(CF,$U),e($U,Bir),e(CF,Iir),e(V,Nir),e(V,wF),e(wF,H2e),e(H2e,qir),e(wF,jir),e(wF,kU),e(kU,Dir),e(wF,Gir),e(V,Oir),e(V,AF),e(AF,J2e),e(J2e,Vir),e(AF,Xir),e(AF,SU),e(SU,zir),e(AF,Wir),e(V,Qir),e(V,LF),e(LF,Y2e),e(Y2e,Uir),e(LF,Hir),e(LF,RU),e(RU,Jir),e(LF,Yir),e(V,Kir),e(V,yF),e(yF,K2e),e(K2e,Zir),e(yF,edr),e(yF,PU),e(PU,odr),e(yF,rdr),e(V,tdr),e(V,xF),e(xF,Z2e),e(Z2e,adr),e(xF,ndr),e(xF,BU),e(BU,sdr),e(xF,ldr),e(V,idr),e(V,$F),e($F,ebe),e(ebe,ddr),e($F,cdr),e($F,IU),e(IU,fdr),e($F,mdr),e(V,gdr),e(V,kF),e(kF,obe),e(obe,hdr),e(kF,pdr),e(kF,NU),e(NU,_dr),e(kF,udr),e(V,bdr),e(V,SF),e(SF,rbe),e(rbe,vdr),e(SF,Fdr),e(SF,qU),e(qU,Tdr),e(SF,Mdr),e(V,Edr),e(V,RF),e(RF,tbe),e(tbe,Cdr),e(RF,wdr),e(RF,jU),e(jU,Adr),e(RF,Ldr),e(V,ydr),e(V,PF),e(PF,abe),e(abe,xdr),e(PF,$dr),e(PF,DU),e(DU,kdr),e(PF,Sdr),e(V,Rdr),e(V,BF),e(BF,nbe),e(nbe,Pdr),e(BF,Bdr),e(BF,GU),e(GU,Idr),e(BF,Ndr),e(V,qdr),e(V,IF),e(IF,sbe),e(sbe,jdr),e(IF,Ddr),e(IF,OU),e(OU,Gdr),e(IF,Odr),e(V,Vdr),e(V,NF),e(NF,lbe),e(lbe,Xdr),e(NF,zdr),e(NF,VU),e(VU,Wdr),e(NF,Qdr),e(V,Udr),e(V,qF),e(qF,ibe),e(ibe,Hdr),e(qF,Jdr),e(qF,XU),e(XU,Ydr),e(qF,Kdr),e(V,Zdr),e(V,jF),e(jF,dbe),e(dbe,ecr),e(jF,ocr),e(jF,zU),e(zU,rcr),e(jF,tcr),e(V,acr),e(V,DF),e(DF,cbe),e(cbe,ncr),e(DF,scr),e(DF,WU),e(WU,lcr),e(DF,icr),e(V,dcr),e(V,GF),e(GF,fbe),e(fbe,ccr),e(GF,fcr),e(GF,QU),e(QU,mcr),e(GF,gcr),e(V,hcr),e(V,OF),e(OF,mbe),e(mbe,pcr),e(OF,_cr),e(OF,UU),e(UU,ucr),e(OF,bcr),e(V,vcr),e(V,VF),e(VF,gbe),e(gbe,Fcr),e(VF,Tcr),e(VF,HU),e(HU,Mcr),e(VF,Ecr),e(V,Ccr),e(V,XF),e(XF,hbe),e(hbe,wcr),e(XF,Acr),e(XF,JU),e(JU,Lcr),e(XF,ycr),e(V,xcr),e(V,zF),e(zF,pbe),e(pbe,$cr),e(zF,kcr),e(zF,YU),e(YU,Scr),e(zF,Rcr),e(V,Pcr),e(V,WF),e(WF,_be),e(_be,Bcr),e(WF,Icr),e(WF,KU),e(KU,Ncr),e(WF,qcr),e(V,jcr),e(V,QF),e(QF,ube),e(ube,Dcr),e(QF,Gcr),e(QF,ZU),e(ZU,Ocr),e(QF,Vcr),e(V,Xcr),e(V,UF),e(UF,bbe),e(bbe,zcr),e(UF,Wcr),e(UF,eH),e(eH,Qcr),e(UF,Ucr),e(V,Hcr),e(V,HF),e(HF,vbe),e(vbe,Jcr),e(HF,Ycr),e(HF,oH),e(oH,Kcr),e(HF,Zcr),e(V,efr),e(V,JF),e(JF,Fbe),e(Fbe,ofr),e(JF,rfr),e(JF,rH),e(rH,tfr),e(JF,afr),e(so,nfr),e(so,YF),e(YF,sfr),e(YF,Tbe),e(Tbe,lfr),e(YF,ifr),e(YF,Mbe),e(Mbe,dfr),e(so,cfr),M(KF,so,null),b(f,vUe,u),b(f,Sd,u),e(Sd,ZF),e(ZF,Ebe),M(B9,Ebe,null),e(Sd,ffr),e(Sd,Cbe),e(Cbe,mfr),b(f,FUe,u),b(f,Vo,u),M(I9,Vo,null),e(Vo,gfr),e(Vo,Rd),e(Rd,hfr),e(Rd,tH),e(tH,pfr),e(Rd,_fr),e(Rd,aH),e(aH,ufr),e(Rd,bfr),e(Vo,vfr),e(Vo,N9),e(N9,Ffr),e(N9,wbe),e(wbe,Tfr),e(N9,Mfr),e(Vo,Efr),e(Vo,Mt),M(q9,Mt,null),e(Mt,Cfr),e(Mt,Abe),e(Abe,wfr),e(Mt,Afr),e(Mt,Pd),e(Pd,Lfr),e(Pd,Lbe),e(Lbe,yfr),e(Pd,xfr),e(Pd,nH),e(nH,$fr),e(Pd,kfr),e(Mt,Sfr),M(eT,Mt,null),e(Vo,Rfr),e(Vo,lo),M(j9,lo,null),e(lo,Pfr),e(lo,ybe),e(ybe,Bfr),e(lo,Ifr),e(lo,Za),e(Za,Nfr),e(Za,xbe),e(xbe,qfr),e(Za,jfr),e(Za,$be),e($be,Dfr),e(Za,Gfr),e(Za,kbe),e(kbe,Ofr),e(Za,Vfr),e(lo,Xfr),e(lo,Sbe),e(Sbe,oT),e(oT,Rbe),e(Rbe,zfr),e(oT,Wfr),e(oT,sH),e(sH,Qfr),e(oT,Ufr),e(lo,Hfr),e(lo,rT),e(rT,Jfr),e(rT,Pbe),e(Pbe,Yfr),e(rT,Kfr),e(rT,Bbe),e(Bbe,Zfr),e(lo,emr),M(tT,lo,null),b(f,TUe,u),b(f,Bd,u),e(Bd,aT),e(aT,Ibe),M(D9,Ibe,null),e(Bd,omr),e(Bd,Nbe),e(Nbe,rmr),b(f,MUe,u),b(f,Xo,u),M(G9,Xo,null),e(Xo,tmr),e(Xo,Id),e(Id,amr),e(Id,lH),e(lH,nmr),e(Id,smr),e(Id,iH),e(iH,lmr),e(Id,imr),e(Xo,dmr),e(Xo,O9),e(O9,cmr),e(O9,qbe),e(qbe,fmr),e(O9,mmr),e(Xo,gmr),e(Xo,Et),M(V9,Et,null),e(Et,hmr),e(Et,jbe),e(jbe,pmr),e(Et,_mr),e(Et,Nd),e(Nd,umr),e(Nd,Dbe),e(Dbe,bmr),e(Nd,vmr),e(Nd,dH),e(dH,Fmr),e(Nd,Tmr),e(Et,Mmr),M(nT,Et,null),e(Xo,Emr),e(Xo,io),M(X9,io,null),e(io,Cmr),e(io,Gbe),e(Gbe,wmr),e(io,Amr),e(io,en),e(en,Lmr),e(en,Obe),e(Obe,ymr),e(en,xmr),e(en,Vbe),e(Vbe,$mr),e(en,kmr),e(en,Xbe),e(Xbe,Smr),e(en,Rmr),e(io,Pmr),e(io,be),e(be,sT),e(sT,zbe),e(zbe,Bmr),e(sT,Imr),e(sT,cH),e(cH,Nmr),e(sT,qmr),e(be,jmr),e(be,lT),e(lT,Wbe),e(Wbe,Dmr),e(lT,Gmr),e(lT,fH),e(fH,Omr),e(lT,Vmr),e(be,Xmr),e(be,iT),e(iT,Qbe),e(Qbe,zmr),e(iT,Wmr),e(iT,mH),e(mH,Qmr),e(iT,Umr),e(be,Hmr),e(be,dT),e(dT,Ube),e(Ube,Jmr),e(dT,Ymr),e(dT,gH),e(gH,Kmr),e(dT,Zmr),e(be,egr),e(be,sl),e(sl,Hbe),e(Hbe,ogr),e(sl,rgr),e(sl,hH),e(hH,tgr),e(sl,agr),e(sl,pH),e(pH,ngr),e(sl,sgr),e(be,lgr),e(be,cT),e(cT,Jbe),e(Jbe,igr),e(cT,dgr),e(cT,_H),e(_H,cgr),e(cT,fgr),e(be,mgr),e(be,ll),e(ll,Ybe),e(Ybe,ggr),e(ll,hgr),e(ll,uH),e(uH,pgr),e(ll,_gr),e(ll,bH),e(bH,ugr),e(ll,bgr),e(be,vgr),e(be,fT),e(fT,Kbe),e(Kbe,Fgr),e(fT,Tgr),e(fT,vH),e(vH,Mgr),e(fT,Egr),e(be,Cgr),e(be,Ct),e(Ct,Zbe),e(Zbe,wgr),e(Ct,Agr),e(Ct,FH),e(FH,Lgr),e(Ct,ygr),e(Ct,TH),e(TH,xgr),e(Ct,$gr),e(Ct,MH),e(MH,kgr),e(Ct,Sgr),e(be,Rgr),e(be,mT),e(mT,eve),e(eve,Pgr),e(mT,Bgr),e(mT,EH),e(EH,Igr),e(mT,Ngr),e(be,qgr),e(be,gT),e(gT,ove),e(ove,jgr),e(gT,Dgr),e(gT,CH),e(CH,Ggr),e(gT,Ogr),e(be,Vgr),e(be,hT),e(hT,rve),e(rve,Xgr),e(hT,zgr),e(hT,wH),e(wH,Wgr),e(hT,Qgr),e(be,Ugr),e(be,pT),e(pT,tve),e(tve,Hgr),e(pT,Jgr),e(pT,AH),e(AH,Ygr),e(pT,Kgr),e(be,Zgr),e(be,_T),e(_T,ave),e(ave,ehr),e(_T,ohr),e(_T,LH),e(LH,rhr),e(_T,thr),e(be,ahr),e(be,uT),e(uT,nve),e(nve,nhr),e(uT,shr),e(uT,yH),e(yH,lhr),e(uT,ihr),e(be,dhr),e(be,bT),e(bT,sve),e(sve,chr),e(bT,fhr),e(bT,xH),e(xH,mhr),e(bT,ghr),e(be,hhr),e(be,vT),e(vT,lve),e(lve,phr),e(vT,_hr),e(vT,$H),e($H,uhr),e(vT,bhr),e(io,vhr),e(io,FT),e(FT,Fhr),e(FT,ive),e(ive,Thr),e(FT,Mhr),e(FT,dve),e(dve,Ehr),e(io,Chr),M(TT,io,null),b(f,EUe,u),b(f,qd,u),e(qd,MT),e(MT,cve),M(z9,cve,null),e(qd,whr),e(qd,fve),e(fve,Ahr),b(f,CUe,u),b(f,zo,u),M(W9,zo,null),e(zo,Lhr),e(zo,jd),e(jd,yhr),e(jd,kH),e(kH,xhr),e(jd,$hr),e(jd,SH),e(SH,khr),e(jd,Shr),e(zo,Rhr),e(zo,Q9),e(Q9,Phr),e(Q9,mve),e(mve,Bhr),e(Q9,Ihr),e(zo,Nhr),e(zo,wt),M(U9,wt,null),e(wt,qhr),e(wt,gve),e(gve,jhr),e(wt,Dhr),e(wt,Dd),e(Dd,Ghr),e(Dd,hve),e(hve,Ohr),e(Dd,Vhr),e(Dd,RH),e(RH,Xhr),e(Dd,zhr),e(wt,Whr),M(ET,wt,null),e(zo,Qhr),e(zo,co),M(H9,co,null),e(co,Uhr),e(co,pve),e(pve,Hhr),e(co,Jhr),e(co,on),e(on,Yhr),e(on,_ve),e(_ve,Khr),e(on,Zhr),e(on,uve),e(uve,epr),e(on,opr),e(on,bve),e(bve,rpr),e(on,tpr),e(co,apr),e(co,vve),e(vve,CT),e(CT,Fve),e(Fve,npr),e(CT,spr),e(CT,PH),e(PH,lpr),e(CT,ipr),e(co,dpr),e(co,wT),e(wT,cpr),e(wT,Tve),e(Tve,fpr),e(wT,mpr),e(wT,Mve),e(Mve,gpr),e(co,hpr),M(AT,co,null),b(f,wUe,u),b(f,Gd,u),e(Gd,LT),e(LT,Eve),M(J9,Eve,null),e(Gd,ppr),e(Gd,Cve),e(Cve,_pr),b(f,AUe,u),b(f,Wo,u),M(Y9,Wo,null),e(Wo,upr),e(Wo,Od),e(Od,bpr),e(Od,BH),e(BH,vpr),e(Od,Fpr),e(Od,IH),e(IH,Tpr),e(Od,Mpr),e(Wo,Epr),e(Wo,K9),e(K9,Cpr),e(K9,wve),e(wve,wpr),e(K9,Apr),e(Wo,Lpr),e(Wo,At),M(Z9,At,null),e(At,ypr),e(At,Ave),e(Ave,xpr),e(At,$pr),e(At,Vd),e(Vd,kpr),e(Vd,Lve),e(Lve,Spr),e(Vd,Rpr),e(Vd,NH),e(NH,Ppr),e(Vd,Bpr),e(At,Ipr),M(yT,At,null),e(Wo,Npr),e(Wo,fo),M(ex,fo,null),e(fo,qpr),e(fo,yve),e(yve,jpr),e(fo,Dpr),e(fo,rn),e(rn,Gpr),e(rn,xve),e(xve,Opr),e(rn,Vpr),e(rn,$ve),e($ve,Xpr),e(rn,zpr),e(rn,kve),e(kve,Wpr),e(rn,Qpr),e(fo,Upr),e(fo,Sve),e(Sve,xT),e(xT,Rve),e(Rve,Hpr),e(xT,Jpr),e(xT,qH),e(qH,Ypr),e(xT,Kpr),e(fo,Zpr),e(fo,$T),e($T,e_r),e($T,Pve),e(Pve,o_r),e($T,r_r),e($T,Bve),e(Bve,t_r),e(fo,a_r),M(kT,fo,null),b(f,LUe,u),b(f,Xd,u),e(Xd,ST),e(ST,Ive),M(ox,Ive,null),e(Xd,n_r),e(Xd,Nve),e(Nve,s_r),b(f,yUe,u),b(f,Qo,u),M(rx,Qo,null),e(Qo,l_r),e(Qo,zd),e(zd,i_r),e(zd,jH),e(jH,d_r),e(zd,c_r),e(zd,DH),e(DH,f_r),e(zd,m_r),e(Qo,g_r),e(Qo,tx),e(tx,h_r),e(tx,qve),e(qve,p_r),e(tx,__r),e(Qo,u_r),e(Qo,Lt),M(ax,Lt,null),e(Lt,b_r),e(Lt,jve),e(jve,v_r),e(Lt,F_r),e(Lt,Wd),e(Wd,T_r),e(Wd,Dve),e(Dve,M_r),e(Wd,E_r),e(Wd,GH),e(GH,C_r),e(Wd,w_r),e(Lt,A_r),M(RT,Lt,null),e(Qo,L_r),e(Qo,mo),M(nx,mo,null),e(mo,y_r),e(mo,Gve),e(Gve,x_r),e(mo,$_r),e(mo,tn),e(tn,k_r),e(tn,Ove),e(Ove,S_r),e(tn,R_r),e(tn,Vve),e(Vve,P_r),e(tn,B_r),e(tn,Xve),e(Xve,I_r),e(tn,N_r),e(mo,q_r),e(mo,zve),e(zve,PT),e(PT,Wve),e(Wve,j_r),e(PT,D_r),e(PT,OH),e(OH,G_r),e(PT,O_r),e(mo,V_r),e(mo,BT),e(BT,X_r),e(BT,Qve),e(Qve,z_r),e(BT,W_r),e(BT,Uve),e(Uve,Q_r),e(mo,U_r),M(IT,mo,null),b(f,xUe,u),b(f,Qd,u),e(Qd,NT),e(NT,Hve),M(sx,Hve,null),e(Qd,H_r),e(Qd,Jve),e(Jve,J_r),b(f,$Ue,u),b(f,Uo,u),M(lx,Uo,null),e(Uo,Y_r),e(Uo,Ud),e(Ud,K_r),e(Ud,VH),e(VH,Z_r),e(Ud,eur),e(Ud,XH),e(XH,our),e(Ud,rur),e(Uo,tur),e(Uo,ix),e(ix,aur),e(ix,Yve),e(Yve,nur),e(ix,sur),e(Uo,lur),e(Uo,yt),M(dx,yt,null),e(yt,iur),e(yt,Kve),e(Kve,dur),e(yt,cur),e(yt,Hd),e(Hd,fur),e(Hd,Zve),e(Zve,mur),e(Hd,gur),e(Hd,zH),e(zH,hur),e(Hd,pur),e(yt,_ur),M(qT,yt,null),e(Uo,uur),e(Uo,go),M(cx,go,null),e(go,bur),e(go,eFe),e(eFe,vur),e(go,Fur),e(go,an),e(an,Tur),e(an,oFe),e(oFe,Mur),e(an,Eur),e(an,rFe),e(rFe,Cur),e(an,wur),e(an,tFe),e(tFe,Aur),e(an,Lur),e(go,yur),e(go,Pe),e(Pe,jT),e(jT,aFe),e(aFe,xur),e(jT,$ur),e(jT,WH),e(WH,kur),e(jT,Sur),e(Pe,Rur),e(Pe,DT),e(DT,nFe),e(nFe,Pur),e(DT,Bur),e(DT,QH),e(QH,Iur),e(DT,Nur),e(Pe,qur),e(Pe,GT),e(GT,sFe),e(sFe,jur),e(GT,Dur),e(GT,UH),e(UH,Gur),e(GT,Our),e(Pe,Vur),e(Pe,OT),e(OT,lFe),e(lFe,Xur),e(OT,zur),e(OT,HH),e(HH,Wur),e(OT,Qur),e(Pe,Uur),e(Pe,VT),e(VT,iFe),e(iFe,Hur),e(VT,Jur),e(VT,JH),e(JH,Yur),e(VT,Kur),e(Pe,Zur),e(Pe,XT),e(XT,dFe),e(dFe,e1r),e(XT,o1r),e(XT,YH),e(YH,r1r),e(XT,t1r),e(Pe,a1r),e(Pe,zT),e(zT,cFe),e(cFe,n1r),e(zT,s1r),e(zT,KH),e(KH,l1r),e(zT,i1r),e(Pe,d1r),e(Pe,WT),e(WT,fFe),e(fFe,c1r),e(WT,f1r),e(WT,ZH),e(ZH,m1r),e(WT,g1r),e(Pe,h1r),e(Pe,QT),e(QT,mFe),e(mFe,p1r),e(QT,_1r),e(QT,eJ),e(eJ,u1r),e(QT,b1r),e(go,v1r),e(go,UT),e(UT,F1r),e(UT,gFe),e(gFe,T1r),e(UT,M1r),e(UT,hFe),e(hFe,E1r),e(go,C1r),M(HT,go,null),b(f,kUe,u),b(f,Jd,u),e(Jd,JT),e(JT,pFe),M(fx,pFe,null),e(Jd,w1r),e(Jd,_Fe),e(_Fe,A1r),b(f,SUe,u),b(f,Ho,u),M(mx,Ho,null),e(Ho,L1r),e(Ho,Yd),e(Yd,y1r),e(Yd,oJ),e(oJ,x1r),e(Yd,$1r),e(Yd,rJ),e(rJ,k1r),e(Yd,S1r),e(Ho,R1r),e(Ho,gx),e(gx,P1r),e(gx,uFe),e(uFe,B1r),e(gx,I1r),e(Ho,N1r),e(Ho,xt),M(hx,xt,null),e(xt,q1r),e(xt,bFe),e(bFe,j1r),e(xt,D1r),e(xt,Kd),e(Kd,G1r),e(Kd,vFe),e(vFe,O1r),e(Kd,V1r),e(Kd,tJ),e(tJ,X1r),e(Kd,z1r),e(xt,W1r),M(YT,xt,null),e(Ho,Q1r),e(Ho,ho),M(px,ho,null),e(ho,U1r),e(ho,FFe),e(FFe,H1r),e(ho,J1r),e(ho,nn),e(nn,Y1r),e(nn,TFe),e(TFe,K1r),e(nn,Z1r),e(nn,MFe),e(MFe,e6r),e(nn,o6r),e(nn,EFe),e(EFe,r6r),e(nn,t6r),e(ho,a6r),e(ho,st),e(st,KT),e(KT,CFe),e(CFe,n6r),e(KT,s6r),e(KT,aJ),e(aJ,l6r),e(KT,i6r),e(st,d6r),e(st,ZT),e(ZT,wFe),e(wFe,c6r),e(ZT,f6r),e(ZT,nJ),e(nJ,m6r),e(ZT,g6r),e(st,h6r),e(st,eM),e(eM,AFe),e(AFe,p6r),e(eM,_6r),e(eM,sJ),e(sJ,u6r),e(eM,b6r),e(st,v6r),e(st,oM),e(oM,LFe),e(LFe,F6r),e(oM,T6r),e(oM,lJ),e(lJ,M6r),e(oM,E6r),e(st,C6r),e(st,rM),e(rM,yFe),e(yFe,w6r),e(rM,A6r),e(rM,iJ),e(iJ,L6r),e(rM,y6r),e(ho,x6r),e(ho,tM),e(tM,$6r),e(tM,xFe),e(xFe,k6r),e(tM,S6r),e(tM,$Fe),e($Fe,R6r),e(ho,P6r),M(aM,ho,null),b(f,RUe,u),b(f,Zd,u),e(Zd,nM),e(nM,kFe),M(_x,kFe,null),e(Zd,B6r),e(Zd,SFe),e(SFe,I6r),b(f,PUe,u),b(f,Jo,u),M(ux,Jo,null),e(Jo,N6r),e(Jo,ec),e(ec,q6r),e(ec,dJ),e(dJ,j6r),e(ec,D6r),e(ec,cJ),e(cJ,G6r),e(ec,O6r),e(Jo,V6r),e(Jo,bx),e(bx,X6r),e(bx,RFe),e(RFe,z6r),e(bx,W6r),e(Jo,Q6r),e(Jo,$t),M(vx,$t,null),e($t,U6r),e($t,PFe),e(PFe,H6r),e($t,J6r),e($t,oc),e(oc,Y6r),e(oc,BFe),e(BFe,K6r),e(oc,Z6r),e(oc,fJ),e(fJ,e8r),e(oc,o8r),e($t,r8r),M(sM,$t,null),e(Jo,t8r),e(Jo,po),M(Fx,po,null),e(po,a8r),e(po,IFe),e(IFe,n8r),e(po,s8r),e(po,sn),e(sn,l8r),e(sn,NFe),e(NFe,i8r),e(sn,d8r),e(sn,qFe),e(qFe,c8r),e(sn,f8r),e(sn,jFe),e(jFe,m8r),e(sn,g8r),e(po,h8r),e(po,Le),e(Le,lM),e(lM,DFe),e(DFe,p8r),e(lM,_8r),e(lM,mJ),e(mJ,u8r),e(lM,b8r),e(Le,v8r),e(Le,iM),e(iM,GFe),e(GFe,F8r),e(iM,T8r),e(iM,gJ),e(gJ,M8r),e(iM,E8r),e(Le,C8r),e(Le,dM),e(dM,OFe),e(OFe,w8r),e(dM,A8r),e(dM,hJ),e(hJ,L8r),e(dM,y8r),e(Le,x8r),e(Le,cM),e(cM,VFe),e(VFe,$8r),e(cM,k8r),e(cM,pJ),e(pJ,S8r),e(cM,R8r),e(Le,P8r),e(Le,fM),e(fM,XFe),e(XFe,B8r),e(fM,I8r),e(fM,_J),e(_J,N8r),e(fM,q8r),e(Le,j8r),e(Le,mM),e(mM,zFe),e(zFe,D8r),e(mM,G8r),e(mM,uJ),e(uJ,O8r),e(mM,V8r),e(Le,X8r),e(Le,gM),e(gM,WFe),e(WFe,z8r),e(gM,W8r),e(gM,bJ),e(bJ,Q8r),e(gM,U8r),e(Le,H8r),e(Le,hM),e(hM,QFe),e(QFe,J8r),e(hM,Y8r),e(hM,vJ),e(vJ,K8r),e(hM,Z8r),e(Le,e2r),e(Le,pM),e(pM,UFe),e(UFe,o2r),e(pM,r2r),e(pM,FJ),e(FJ,t2r),e(pM,a2r),e(Le,n2r),e(Le,_M),e(_M,HFe),e(HFe,s2r),e(_M,l2r),e(_M,TJ),e(TJ,i2r),e(_M,d2r),e(po,c2r),e(po,uM),e(uM,f2r),e(uM,JFe),e(JFe,m2r),e(uM,g2r),e(uM,YFe),e(YFe,h2r),e(po,p2r),M(bM,po,null),b(f,BUe,u),b(f,rc,u),e(rc,vM),e(vM,KFe),M(Tx,KFe,null),e(rc,_2r),e(rc,ZFe),e(ZFe,u2r),b(f,IUe,u),b(f,Yo,u),M(Mx,Yo,null),e(Yo,b2r),e(Yo,tc),e(tc,v2r),e(tc,MJ),e(MJ,F2r),e(tc,T2r),e(tc,EJ),e(EJ,M2r),e(tc,E2r),e(Yo,C2r),e(Yo,Ex),e(Ex,w2r),e(Ex,eTe),e(eTe,A2r),e(Ex,L2r),e(Yo,y2r),e(Yo,kt),M(Cx,kt,null),e(kt,x2r),e(kt,oTe),e(oTe,$2r),e(kt,k2r),e(kt,ac),e(ac,S2r),e(ac,rTe),e(rTe,R2r),e(ac,P2r),e(ac,CJ),e(CJ,B2r),e(ac,I2r),e(kt,N2r),M(FM,kt,null),e(Yo,q2r),e(Yo,_o),M(wx,_o,null),e(_o,j2r),e(_o,tTe),e(tTe,D2r),e(_o,G2r),e(_o,ln),e(ln,O2r),e(ln,aTe),e(aTe,V2r),e(ln,X2r),e(ln,nTe),e(nTe,z2r),e(ln,W2r),e(ln,sTe),e(sTe,Q2r),e(ln,U2r),e(_o,H2r),e(_o,Ax),e(Ax,TM),e(TM,lTe),e(lTe,J2r),e(TM,Y2r),e(TM,wJ),e(wJ,K2r),e(TM,Z2r),e(Ax,ebr),e(Ax,MM),e(MM,iTe),e(iTe,obr),e(MM,rbr),e(MM,AJ),e(AJ,tbr),e(MM,abr),e(_o,nbr),e(_o,EM),e(EM,sbr),e(EM,dTe),e(dTe,lbr),e(EM,ibr),e(EM,cTe),e(cTe,dbr),e(_o,cbr),M(CM,_o,null),b(f,NUe,u),b(f,nc,u),e(nc,wM),e(wM,fTe),M(Lx,fTe,null),e(nc,fbr),e(nc,mTe),e(mTe,mbr),b(f,qUe,u),b(f,Ko,u),M(yx,Ko,null),e(Ko,gbr),e(Ko,sc),e(sc,hbr),e(sc,LJ),e(LJ,pbr),e(sc,_br),e(sc,yJ),e(yJ,ubr),e(sc,bbr),e(Ko,vbr),e(Ko,xx),e(xx,Fbr),e(xx,gTe),e(gTe,Tbr),e(xx,Mbr),e(Ko,Ebr),e(Ko,St),M($x,St,null),e(St,Cbr),e(St,hTe),e(hTe,wbr),e(St,Abr),e(St,lc),e(lc,Lbr),e(lc,pTe),e(pTe,ybr),e(lc,xbr),e(lc,xJ),e(xJ,$br),e(lc,kbr),e(St,Sbr),M(AM,St,null),e(Ko,Rbr),e(Ko,uo),M(kx,uo,null),e(uo,Pbr),e(uo,_Te),e(_Te,Bbr),e(uo,Ibr),e(uo,dn),e(dn,Nbr),e(dn,uTe),e(uTe,qbr),e(dn,jbr),e(dn,bTe),e(bTe,Dbr),e(dn,Gbr),e(dn,vTe),e(vTe,Obr),e(dn,Vbr),e(uo,Xbr),e(uo,lt),e(lt,LM),e(LM,FTe),e(FTe,zbr),e(LM,Wbr),e(LM,$J),e($J,Qbr),e(LM,Ubr),e(lt,Hbr),e(lt,yM),e(yM,TTe),e(TTe,Jbr),e(yM,Ybr),e(yM,kJ),e(kJ,Kbr),e(yM,Zbr),e(lt,evr),e(lt,xM),e(xM,MTe),e(MTe,ovr),e(xM,rvr),e(xM,SJ),e(SJ,tvr),e(xM,avr),e(lt,nvr),e(lt,$M),e($M,ETe),e(ETe,svr),e($M,lvr),e($M,RJ),e(RJ,ivr),e($M,dvr),e(lt,cvr),e(lt,kM),e(kM,CTe),e(CTe,fvr),e(kM,mvr),e(kM,PJ),e(PJ,gvr),e(kM,hvr),e(uo,pvr),e(uo,SM),e(SM,_vr),e(SM,wTe),e(wTe,uvr),e(SM,bvr),e(SM,ATe),e(ATe,vvr),e(uo,Fvr),M(RM,uo,null),b(f,jUe,u),b(f,ic,u),e(ic,PM),e(PM,LTe),M(Sx,LTe,null),e(ic,Tvr),e(ic,yTe),e(yTe,Mvr),b(f,DUe,u),b(f,Zo,u),M(Rx,Zo,null),e(Zo,Evr),e(Zo,dc),e(dc,Cvr),e(dc,BJ),e(BJ,wvr),e(dc,Avr),e(dc,IJ),e(IJ,Lvr),e(dc,yvr),e(Zo,xvr),e(Zo,Px),e(Px,$vr),e(Px,xTe),e(xTe,kvr),e(Px,Svr),e(Zo,Rvr),e(Zo,Rt),M(Bx,Rt,null),e(Rt,Pvr),e(Rt,$Te),e($Te,Bvr),e(Rt,Ivr),e(Rt,cc),e(cc,Nvr),e(cc,kTe),e(kTe,qvr),e(cc,jvr),e(cc,NJ),e(NJ,Dvr),e(cc,Gvr),e(Rt,Ovr),M(BM,Rt,null),e(Zo,Vvr),e(Zo,bo),M(Ix,bo,null),e(bo,Xvr),e(bo,STe),e(STe,zvr),e(bo,Wvr),e(bo,cn),e(cn,Qvr),e(cn,RTe),e(RTe,Uvr),e(cn,Hvr),e(cn,PTe),e(PTe,Jvr),e(cn,Yvr),e(cn,BTe),e(BTe,Kvr),e(cn,Zvr),e(bo,eFr),e(bo,fn),e(fn,IM),e(IM,ITe),e(ITe,oFr),e(IM,rFr),e(IM,qJ),e(qJ,tFr),e(IM,aFr),e(fn,nFr),e(fn,NM),e(NM,NTe),e(NTe,sFr),e(NM,lFr),e(NM,jJ),e(jJ,iFr),e(NM,dFr),e(fn,cFr),e(fn,qM),e(qM,qTe),e(qTe,fFr),e(qM,mFr),e(qM,DJ),e(DJ,gFr),e(qM,hFr),e(fn,pFr),e(fn,jM),e(jM,jTe),e(jTe,_Fr),e(jM,uFr),e(jM,GJ),e(GJ,bFr),e(jM,vFr),e(bo,FFr),e(bo,DM),e(DM,TFr),e(DM,DTe),e(DTe,MFr),e(DM,EFr),e(DM,GTe),e(GTe,CFr),e(bo,wFr),M(GM,bo,null),b(f,GUe,u),b(f,fc,u),e(fc,OM),e(OM,OTe),M(Nx,OTe,null),e(fc,AFr),e(fc,VTe),e(VTe,LFr),b(f,OUe,u),b(f,er,u),M(qx,er,null),e(er,yFr),e(er,mc),e(mc,xFr),e(mc,OJ),e(OJ,$Fr),e(mc,kFr),e(mc,VJ),e(VJ,SFr),e(mc,RFr),e(er,PFr),e(er,jx),e(jx,BFr),e(jx,XTe),e(XTe,IFr),e(jx,NFr),e(er,qFr),e(er,Pt),M(Dx,Pt,null),e(Pt,jFr),e(Pt,zTe),e(zTe,DFr),e(Pt,GFr),e(Pt,gc),e(gc,OFr),e(gc,WTe),e(WTe,VFr),e(gc,XFr),e(gc,XJ),e(XJ,zFr),e(gc,WFr),e(Pt,QFr),M(VM,Pt,null),e(er,UFr),e(er,vo),M(Gx,vo,null),e(vo,HFr),e(vo,QTe),e(QTe,JFr),e(vo,YFr),e(vo,mn),e(mn,KFr),e(mn,UTe),e(UTe,ZFr),e(mn,eTr),e(mn,HTe),e(HTe,oTr),e(mn,rTr),e(mn,JTe),e(JTe,tTr),e(mn,aTr),e(vo,nTr),e(vo,Ox),e(Ox,XM),e(XM,YTe),e(YTe,sTr),e(XM,lTr),e(XM,zJ),e(zJ,iTr),e(XM,dTr),e(Ox,cTr),e(Ox,zM),e(zM,KTe),e(KTe,fTr),e(zM,mTr),e(zM,WJ),e(WJ,gTr),e(zM,hTr),e(vo,pTr),e(vo,WM),e(WM,_Tr),e(WM,ZTe),e(ZTe,uTr),e(WM,bTr),e(WM,eMe),e(eMe,vTr),e(vo,FTr),M(QM,vo,null),b(f,VUe,u),b(f,hc,u),e(hc,UM),e(UM,oMe),M(Vx,oMe,null),e(hc,TTr),e(hc,rMe),e(rMe,MTr),b(f,XUe,u),b(f,or,u),M(Xx,or,null),e(or,ETr),e(or,pc),e(pc,CTr),e(pc,QJ),e(QJ,wTr),e(pc,ATr),e(pc,UJ),e(UJ,LTr),e(pc,yTr),e(or,xTr),e(or,zx),e(zx,$Tr),e(zx,tMe),e(tMe,kTr),e(zx,STr),e(or,RTr),e(or,Bt),M(Wx,Bt,null),e(Bt,PTr),e(Bt,aMe),e(aMe,BTr),e(Bt,ITr),e(Bt,_c),e(_c,NTr),e(_c,nMe),e(nMe,qTr),e(_c,jTr),e(_c,HJ),e(HJ,DTr),e(_c,GTr),e(Bt,OTr),M(HM,Bt,null),e(or,VTr),e(or,Fo),M(Qx,Fo,null),e(Fo,XTr),e(Fo,sMe),e(sMe,zTr),e(Fo,WTr),e(Fo,gn),e(gn,QTr),e(gn,lMe),e(lMe,UTr),e(gn,HTr),e(gn,iMe),e(iMe,JTr),e(gn,YTr),e(gn,dMe),e(dMe,KTr),e(gn,ZTr),e(Fo,eMr),e(Fo,cMe),e(cMe,JM),e(JM,fMe),e(fMe,oMr),e(JM,rMr),e(JM,JJ),e(JJ,tMr),e(JM,aMr),e(Fo,nMr),e(Fo,YM),e(YM,sMr),e(YM,mMe),e(mMe,lMr),e(YM,iMr),e(YM,gMe),e(gMe,dMr),e(Fo,cMr),M(KM,Fo,null),b(f,zUe,u),b(f,uc,u),e(uc,ZM),e(ZM,hMe),M(Ux,hMe,null),e(uc,fMr),e(uc,pMe),e(pMe,mMr),b(f,WUe,u),b(f,rr,u),M(Hx,rr,null),e(rr,gMr),e(rr,bc),e(bc,hMr),e(bc,YJ),e(YJ,pMr),e(bc,_Mr),e(bc,KJ),e(KJ,uMr),e(bc,bMr),e(rr,vMr),e(rr,Jx),e(Jx,FMr),e(Jx,_Me),e(_Me,TMr),e(Jx,MMr),e(rr,EMr),e(rr,It),M(Yx,It,null),e(It,CMr),e(It,uMe),e(uMe,wMr),e(It,AMr),e(It,vc),e(vc,LMr),e(vc,bMe),e(bMe,yMr),e(vc,xMr),e(vc,ZJ),e(ZJ,$Mr),e(vc,kMr),e(It,SMr),M(eE,It,null),e(rr,RMr),e(rr,To),M(Kx,To,null),e(To,PMr),e(To,vMe),e(vMe,BMr),e(To,IMr),e(To,hn),e(hn,NMr),e(hn,FMe),e(FMe,qMr),e(hn,jMr),e(hn,TMe),e(TMe,DMr),e(hn,GMr),e(hn,MMe),e(MMe,OMr),e(hn,VMr),e(To,XMr),e(To,it),e(it,oE),e(oE,EMe),e(EMe,zMr),e(oE,WMr),e(oE,eY),e(eY,QMr),e(oE,UMr),e(it,HMr),e(it,rE),e(rE,CMe),e(CMe,JMr),e(rE,YMr),e(rE,oY),e(oY,KMr),e(rE,ZMr),e(it,eEr),e(it,tE),e(tE,wMe),e(wMe,oEr),e(tE,rEr),e(tE,rY),e(rY,tEr),e(tE,aEr),e(it,nEr),e(it,aE),e(aE,AMe),e(AMe,sEr),e(aE,lEr),e(aE,tY),e(tY,iEr),e(aE,dEr),e(it,cEr),e(it,nE),e(nE,LMe),e(LMe,fEr),e(nE,mEr),e(nE,aY),e(aY,gEr),e(nE,hEr),e(To,pEr),e(To,sE),e(sE,_Er),e(sE,yMe),e(yMe,uEr),e(sE,bEr),e(sE,xMe),e(xMe,vEr),e(To,FEr),M(lE,To,null),b(f,QUe,u),b(f,Fc,u),e(Fc,iE),e(iE,$Me),M(Zx,$Me,null),e(Fc,TEr),e(Fc,kMe),e(kMe,MEr),b(f,UUe,u),b(f,tr,u),M(e$,tr,null),e(tr,EEr),e(tr,Tc),e(Tc,CEr),e(Tc,nY),e(nY,wEr),e(Tc,AEr),e(Tc,sY),e(sY,LEr),e(Tc,yEr),e(tr,xEr),e(tr,o$),e(o$,$Er),e(o$,SMe),e(SMe,kEr),e(o$,SEr),e(tr,REr),e(tr,Nt),M(r$,Nt,null),e(Nt,PEr),e(Nt,RMe),e(RMe,BEr),e(Nt,IEr),e(Nt,Mc),e(Mc,NEr),e(Mc,PMe),e(PMe,qEr),e(Mc,jEr),e(Mc,lY),e(lY,DEr),e(Mc,GEr),e(Nt,OEr),M(dE,Nt,null),e(tr,VEr),e(tr,Mo),M(t$,Mo,null),e(Mo,XEr),e(Mo,BMe),e(BMe,zEr),e(Mo,WEr),e(Mo,pn),e(pn,QEr),e(pn,IMe),e(IMe,UEr),e(pn,HEr),e(pn,NMe),e(NMe,JEr),e(pn,YEr),e(pn,qMe),e(qMe,KEr),e(pn,ZEr),e(Mo,e4r),e(Mo,jMe),e(jMe,cE),e(cE,DMe),e(DMe,o4r),e(cE,r4r),e(cE,iY),e(iY,t4r),e(cE,a4r),e(Mo,n4r),e(Mo,fE),e(fE,s4r),e(fE,GMe),e(GMe,l4r),e(fE,i4r),e(fE,OMe),e(OMe,d4r),e(Mo,c4r),M(mE,Mo,null),b(f,HUe,u),b(f,Ec,u),e(Ec,gE),e(gE,VMe),M(a$,VMe,null),e(Ec,f4r),e(Ec,XMe),e(XMe,m4r),b(f,JUe,u),b(f,ar,u),M(n$,ar,null),e(ar,g4r),e(ar,Cc),e(Cc,h4r),e(Cc,dY),e(dY,p4r),e(Cc,_4r),e(Cc,cY),e(cY,u4r),e(Cc,b4r),e(ar,v4r),e(ar,s$),e(s$,F4r),e(s$,zMe),e(zMe,T4r),e(s$,M4r),e(ar,E4r),e(ar,qt),M(l$,qt,null),e(qt,C4r),e(qt,WMe),e(WMe,w4r),e(qt,A4r),e(qt,wc),e(wc,L4r),e(wc,QMe),e(QMe,y4r),e(wc,x4r),e(wc,fY),e(fY,$4r),e(wc,k4r),e(qt,S4r),M(hE,qt,null),e(ar,R4r),e(ar,Rr),M(i$,Rr,null),e(Rr,P4r),e(Rr,UMe),e(UMe,B4r),e(Rr,I4r),e(Rr,_n),e(_n,N4r),e(_n,HMe),e(HMe,q4r),e(_n,j4r),e(_n,JMe),e(JMe,D4r),e(_n,G4r),e(_n,YMe),e(YMe,O4r),e(_n,V4r),e(Rr,X4r),e(Rr,q),e(q,pE),e(pE,KMe),e(KMe,z4r),e(pE,W4r),e(pE,mY),e(mY,Q4r),e(pE,U4r),e(q,H4r),e(q,_E),e(_E,ZMe),e(ZMe,J4r),e(_E,Y4r),e(_E,gY),e(gY,K4r),e(_E,Z4r),e(q,eCr),e(q,uE),e(uE,eEe),e(eEe,oCr),e(uE,rCr),e(uE,hY),e(hY,tCr),e(uE,aCr),e(q,nCr),e(q,bE),e(bE,oEe),e(oEe,sCr),e(bE,lCr),e(bE,pY),e(pY,iCr),e(bE,dCr),e(q,cCr),e(q,vE),e(vE,rEe),e(rEe,fCr),e(vE,mCr),e(vE,_Y),e(_Y,gCr),e(vE,hCr),e(q,pCr),e(q,FE),e(FE,tEe),e(tEe,_Cr),e(FE,uCr),e(FE,uY),e(uY,bCr),e(FE,vCr),e(q,FCr),e(q,TE),e(TE,aEe),e(aEe,TCr),e(TE,MCr),e(TE,bY),e(bY,ECr),e(TE,CCr),e(q,wCr),e(q,ME),e(ME,nEe),e(nEe,ACr),e(ME,LCr),e(ME,vY),e(vY,yCr),e(ME,xCr),e(q,$Cr),e(q,EE),e(EE,sEe),e(sEe,kCr),e(EE,SCr),e(EE,FY),e(FY,RCr),e(EE,PCr),e(q,BCr),e(q,CE),e(CE,lEe),e(lEe,ICr),e(CE,NCr),e(CE,TY),e(TY,qCr),e(CE,jCr),e(q,DCr),e(q,wE),e(wE,iEe),e(iEe,GCr),e(wE,OCr),e(wE,MY),e(MY,VCr),e(wE,XCr),e(q,zCr),e(q,AE),e(AE,dEe),e(dEe,WCr),e(AE,QCr),e(AE,EY),e(EY,UCr),e(AE,HCr),e(q,JCr),e(q,LE),e(LE,cEe),e(cEe,YCr),e(LE,KCr),e(LE,CY),e(CY,ZCr),e(LE,e3r),e(q,o3r),e(q,yE),e(yE,fEe),e(fEe,r3r),e(yE,t3r),e(yE,wY),e(wY,a3r),e(yE,n3r),e(q,s3r),e(q,xE),e(xE,mEe),e(mEe,l3r),e(xE,i3r),e(xE,AY),e(AY,d3r),e(xE,c3r),e(q,f3r),e(q,$E),e($E,gEe),e(gEe,m3r),e($E,g3r),e($E,LY),e(LY,h3r),e($E,p3r),e(q,_3r),e(q,kE),e(kE,hEe),e(hEe,u3r),e(kE,b3r),e(kE,yY),e(yY,v3r),e(kE,F3r),e(q,T3r),e(q,SE),e(SE,pEe),e(pEe,M3r),e(SE,E3r),e(SE,xY),e(xY,C3r),e(SE,w3r),e(q,A3r),e(q,il),e(il,_Ee),e(_Ee,L3r),e(il,y3r),e(il,$Y),e($Y,x3r),e(il,$3r),e(il,kY),e(kY,k3r),e(il,S3r),e(q,R3r),e(q,RE),e(RE,uEe),e(uEe,P3r),e(RE,B3r),e(RE,SY),e(SY,I3r),e(RE,N3r),e(q,q3r),e(q,PE),e(PE,bEe),e(bEe,j3r),e(PE,D3r),e(PE,RY),e(RY,G3r),e(PE,O3r),e(q,V3r),e(q,BE),e(BE,vEe),e(vEe,X3r),e(BE,z3r),e(BE,PY),e(PY,W3r),e(BE,Q3r),e(q,U3r),e(q,IE),e(IE,FEe),e(FEe,H3r),e(IE,J3r),e(IE,BY),e(BY,Y3r),e(IE,K3r),e(q,Z3r),e(q,NE),e(NE,TEe),e(TEe,e5r),e(NE,o5r),e(NE,IY),e(IY,r5r),e(NE,t5r),e(q,a5r),e(q,qE),e(qE,MEe),e(MEe,n5r),e(qE,s5r),e(qE,NY),e(NY,l5r),e(qE,i5r),e(q,d5r),e(q,jE),e(jE,EEe),e(EEe,c5r),e(jE,f5r),e(jE,qY),e(qY,m5r),e(jE,g5r),e(q,h5r),e(q,DE),e(DE,CEe),e(CEe,p5r),e(DE,_5r),e(DE,jY),e(jY,u5r),e(DE,b5r),e(q,v5r),e(q,GE),e(GE,wEe),e(wEe,F5r),e(GE,T5r),e(GE,DY),e(DY,M5r),e(GE,E5r),e(q,C5r),e(q,OE),e(OE,AEe),e(AEe,w5r),e(OE,A5r),e(OE,GY),e(GY,L5r),e(OE,y5r),e(q,x5r),e(q,VE),e(VE,LEe),e(LEe,$5r),e(VE,k5r),e(VE,OY),e(OY,S5r),e(VE,R5r),e(q,P5r),e(q,XE),e(XE,yEe),e(yEe,B5r),e(XE,I5r),e(XE,VY),e(VY,N5r),e(XE,q5r),e(q,j5r),e(q,zE),e(zE,xEe),e(xEe,D5r),e(zE,G5r),e(zE,XY),e(XY,O5r),e(zE,V5r),e(q,X5r),e(q,WE),e(WE,$Ee),e($Ee,z5r),e(WE,W5r),e(WE,zY),e(zY,Q5r),e(WE,U5r),e(q,H5r),e(q,QE),e(QE,kEe),e(kEe,J5r),e(QE,Y5r),e(QE,WY),e(WY,K5r),e(QE,Z5r),e(q,e0r),e(q,UE),e(UE,SEe),e(SEe,o0r),e(UE,r0r),e(UE,QY),e(QY,t0r),e(UE,a0r),e(q,n0r),e(q,HE),e(HE,REe),e(REe,s0r),e(HE,l0r),e(HE,UY),e(UY,i0r),e(HE,d0r),e(q,c0r),e(q,JE),e(JE,PEe),e(PEe,f0r),e(JE,m0r),e(JE,HY),e(HY,g0r),e(JE,h0r),e(q,p0r),e(q,YE),e(YE,BEe),e(BEe,_0r),e(YE,u0r),e(YE,JY),e(JY,b0r),e(YE,v0r),e(q,F0r),e(q,KE),e(KE,IEe),e(IEe,T0r),e(KE,M0r),e(KE,YY),e(YY,E0r),e(KE,C0r),e(q,w0r),e(q,ZE),e(ZE,NEe),e(NEe,A0r),e(ZE,L0r),e(ZE,KY),e(KY,y0r),e(ZE,x0r),e(q,$0r),e(q,e4),e(e4,qEe),e(qEe,k0r),e(e4,S0r),e(e4,ZY),e(ZY,R0r),e(e4,P0r),e(q,B0r),e(q,o4),e(o4,jEe),e(jEe,I0r),e(o4,N0r),e(o4,eK),e(eK,q0r),e(o4,j0r),e(q,D0r),e(q,r4),e(r4,DEe),e(DEe,G0r),e(r4,O0r),e(r4,oK),e(oK,V0r),e(r4,X0r),e(q,z0r),e(q,t4),e(t4,GEe),e(GEe,W0r),e(t4,Q0r),e(t4,rK),e(rK,U0r),e(t4,H0r),e(q,J0r),e(q,a4),e(a4,OEe),e(OEe,Y0r),e(a4,K0r),e(a4,tK),e(tK,Z0r),e(a4,ewr),e(q,owr),e(q,n4),e(n4,VEe),e(VEe,rwr),e(n4,twr),e(n4,aK),e(aK,awr),e(n4,nwr),e(q,swr),e(q,s4),e(s4,XEe),e(XEe,lwr),e(s4,iwr),e(s4,nK),e(nK,dwr),e(s4,cwr),e(q,fwr),e(q,l4),e(l4,zEe),e(zEe,mwr),e(l4,gwr),e(l4,sK),e(sK,hwr),e(l4,pwr),e(q,_wr),e(q,i4),e(i4,WEe),e(WEe,uwr),e(i4,bwr),e(i4,lK),e(lK,vwr),e(i4,Fwr),e(q,Twr),e(q,d4),e(d4,QEe),e(QEe,Mwr),e(d4,Ewr),e(d4,iK),e(iK,Cwr),e(d4,wwr),e(q,Awr),e(q,c4),e(c4,UEe),e(UEe,Lwr),e(c4,ywr),e(c4,dK),e(dK,xwr),e(c4,$wr),e(Rr,kwr),M(f4,Rr,null),b(f,YUe,u),b(f,Ac,u),e(Ac,m4),e(m4,HEe),M(d$,HEe,null),e(Ac,Swr),e(Ac,JEe),e(JEe,Rwr),b(f,KUe,u),b(f,nr,u),M(c$,nr,null),e(nr,Pwr),e(nr,Lc),e(Lc,Bwr),e(Lc,cK),e(cK,Iwr),e(Lc,Nwr),e(Lc,fK),e(fK,qwr),e(Lc,jwr),e(nr,Dwr),e(nr,f$),e(f$,Gwr),e(f$,YEe),e(YEe,Owr),e(f$,Vwr),e(nr,Xwr),e(nr,jt),M(m$,jt,null),e(jt,zwr),e(jt,KEe),e(KEe,Wwr),e(jt,Qwr),e(jt,yc),e(yc,Uwr),e(yc,ZEe),e(ZEe,Hwr),e(yc,Jwr),e(yc,mK),e(mK,Ywr),e(yc,Kwr),e(jt,Zwr),M(g4,jt,null),e(nr,eAr),e(nr,Pr),M(g$,Pr,null),e(Pr,oAr),e(Pr,e4e),e(e4e,rAr),e(Pr,tAr),e(Pr,un),e(un,aAr),e(un,o4e),e(o4e,nAr),e(un,sAr),e(un,r4e),e(r4e,lAr),e(un,iAr),e(un,t4e),e(t4e,dAr),e(un,cAr),e(Pr,fAr),e(Pr,se),e(se,h4),e(h4,a4e),e(a4e,mAr),e(h4,gAr),e(h4,gK),e(gK,hAr),e(h4,pAr),e(se,_Ar),e(se,p4),e(p4,n4e),e(n4e,uAr),e(p4,bAr),e(p4,hK),e(hK,vAr),e(p4,FAr),e(se,TAr),e(se,_4),e(_4,s4e),e(s4e,MAr),e(_4,EAr),e(_4,pK),e(pK,CAr),e(_4,wAr),e(se,AAr),e(se,u4),e(u4,l4e),e(l4e,LAr),e(u4,yAr),e(u4,_K),e(_K,xAr),e(u4,$Ar),e(se,kAr),e(se,b4),e(b4,i4e),e(i4e,SAr),e(b4,RAr),e(b4,uK),e(uK,PAr),e(b4,BAr),e(se,IAr),e(se,v4),e(v4,d4e),e(d4e,NAr),e(v4,qAr),e(v4,bK),e(bK,jAr),e(v4,DAr),e(se,GAr),e(se,F4),e(F4,c4e),e(c4e,OAr),e(F4,VAr),e(F4,vK),e(vK,XAr),e(F4,zAr),e(se,WAr),e(se,T4),e(T4,f4e),e(f4e,QAr),e(T4,UAr),e(T4,FK),e(FK,HAr),e(T4,JAr),e(se,YAr),e(se,M4),e(M4,m4e),e(m4e,KAr),e(M4,ZAr),e(M4,TK),e(TK,e7r),e(M4,o7r),e(se,r7r),e(se,E4),e(E4,g4e),e(g4e,t7r),e(E4,a7r),e(E4,MK),e(MK,n7r),e(E4,s7r),e(se,l7r),e(se,C4),e(C4,h4e),e(h4e,i7r),e(C4,d7r),e(C4,EK),e(EK,c7r),e(C4,f7r),e(se,m7r),e(se,w4),e(w4,p4e),e(p4e,g7r),e(w4,h7r),e(w4,CK),e(CK,p7r),e(w4,_7r),e(se,u7r),e(se,A4),e(A4,_4e),e(_4e,b7r),e(A4,v7r),e(A4,wK),e(wK,F7r),e(A4,T7r),e(se,M7r),e(se,L4),e(L4,u4e),e(u4e,E7r),e(L4,C7r),e(L4,AK),e(AK,w7r),e(L4,A7r),e(se,L7r),e(se,y4),e(y4,b4e),e(b4e,y7r),e(y4,x7r),e(y4,LK),e(LK,$7r),e(y4,k7r),e(se,S7r),e(se,x4),e(x4,v4e),e(v4e,R7r),e(x4,P7r),e(x4,yK),e(yK,B7r),e(x4,I7r),e(se,N7r),e(se,$4),e($4,F4e),e(F4e,q7r),e($4,j7r),e($4,xK),e(xK,D7r),e($4,G7r),e(se,O7r),e(se,k4),e(k4,T4e),e(T4e,V7r),e(k4,X7r),e(k4,$K),e($K,z7r),e(k4,W7r),e(se,Q7r),e(se,S4),e(S4,M4e),e(M4e,U7r),e(S4,H7r),e(S4,kK),e(kK,J7r),e(S4,Y7r),e(se,K7r),e(se,R4),e(R4,E4e),e(E4e,Z7r),e(R4,eLr),e(R4,SK),e(SK,oLr),e(R4,rLr),e(se,tLr),e(se,P4),e(P4,C4e),e(C4e,aLr),e(P4,nLr),e(P4,RK),e(RK,sLr),e(P4,lLr),e(se,iLr),e(se,B4),e(B4,w4e),e(w4e,dLr),e(B4,cLr),e(B4,PK),e(PK,fLr),e(B4,mLr),e(se,gLr),e(se,I4),e(I4,A4e),e(A4e,hLr),e(I4,pLr),e(I4,BK),e(BK,_Lr),e(I4,uLr),e(Pr,bLr),M(N4,Pr,null),b(f,ZUe,u),b(f,xc,u),e(xc,q4),e(q4,L4e),M(h$,L4e,null),e(xc,vLr),e(xc,y4e),e(y4e,FLr),b(f,eHe,u),b(f,sr,u),M(p$,sr,null),e(sr,TLr),e(sr,$c),e($c,MLr),e($c,IK),e(IK,ELr),e($c,CLr),e($c,NK),e(NK,wLr),e($c,ALr),e(sr,LLr),e(sr,_$),e(_$,yLr),e(_$,x4e),e(x4e,xLr),e(_$,$Lr),e(sr,kLr),e(sr,Dt),M(u$,Dt,null),e(Dt,SLr),e(Dt,$4e),e($4e,RLr),e(Dt,PLr),e(Dt,kc),e(kc,BLr),e(kc,k4e),e(k4e,ILr),e(kc,NLr),e(kc,qK),e(qK,qLr),e(kc,jLr),e(Dt,DLr),M(j4,Dt,null),e(sr,GLr),e(sr,Br),M(b$,Br,null),e(Br,OLr),e(Br,S4e),e(S4e,VLr),e(Br,XLr),e(Br,bn),e(bn,zLr),e(bn,R4e),e(R4e,WLr),e(bn,QLr),e(bn,P4e),e(P4e,ULr),e(bn,HLr),e(bn,B4e),e(B4e,JLr),e(bn,YLr),e(Br,KLr),e(Br,Me),e(Me,D4),e(D4,I4e),e(I4e,ZLr),e(D4,eyr),e(D4,jK),e(jK,oyr),e(D4,ryr),e(Me,tyr),e(Me,G4),e(G4,N4e),e(N4e,ayr),e(G4,nyr),e(G4,DK),e(DK,syr),e(G4,lyr),e(Me,iyr),e(Me,O4),e(O4,q4e),e(q4e,dyr),e(O4,cyr),e(O4,GK),e(GK,fyr),e(O4,myr),e(Me,gyr),e(Me,V4),e(V4,j4e),e(j4e,hyr),e(V4,pyr),e(V4,OK),e(OK,_yr),e(V4,uyr),e(Me,byr),e(Me,X4),e(X4,D4e),e(D4e,vyr),e(X4,Fyr),e(X4,VK),e(VK,Tyr),e(X4,Myr),e(Me,Eyr),e(Me,z4),e(z4,G4e),e(G4e,Cyr),e(z4,wyr),e(z4,XK),e(XK,Ayr),e(z4,Lyr),e(Me,yyr),e(Me,W4),e(W4,O4e),e(O4e,xyr),e(W4,$yr),e(W4,zK),e(zK,kyr),e(W4,Syr),e(Me,Ryr),e(Me,Q4),e(Q4,V4e),e(V4e,Pyr),e(Q4,Byr),e(Q4,WK),e(WK,Iyr),e(Q4,Nyr),e(Me,qyr),e(Me,U4),e(U4,X4e),e(X4e,jyr),e(U4,Dyr),e(U4,QK),e(QK,Gyr),e(U4,Oyr),e(Me,Vyr),e(Me,H4),e(H4,z4e),e(z4e,Xyr),e(H4,zyr),e(H4,UK),e(UK,Wyr),e(H4,Qyr),e(Me,Uyr),e(Me,J4),e(J4,W4e),e(W4e,Hyr),e(J4,Jyr),e(J4,HK),e(HK,Yyr),e(J4,Kyr),e(Me,Zyr),e(Me,Y4),e(Y4,Q4e),e(Q4e,e9r),e(Y4,o9r),e(Y4,JK),e(JK,r9r),e(Y4,t9r),e(Me,a9r),e(Me,K4),e(K4,U4e),e(U4e,n9r),e(K4,s9r),e(K4,YK),e(YK,l9r),e(K4,i9r),e(Br,d9r),M(Z4,Br,null),b(f,oHe,u),b(f,Sc,u),e(Sc,eC),e(eC,H4e),M(v$,H4e,null),e(Sc,c9r),e(Sc,J4e),e(J4e,f9r),b(f,rHe,u),b(f,lr,u),M(F$,lr,null),e(lr,m9r),e(lr,Rc),e(Rc,g9r),e(Rc,KK),e(KK,h9r),e(Rc,p9r),e(Rc,ZK),e(ZK,_9r),e(Rc,u9r),e(lr,b9r),e(lr,T$),e(T$,v9r),e(T$,Y4e),e(Y4e,F9r),e(T$,T9r),e(lr,M9r),e(lr,Gt),M(M$,Gt,null),e(Gt,E9r),e(Gt,K4e),e(K4e,C9r),e(Gt,w9r),e(Gt,Pc),e(Pc,A9r),e(Pc,Z4e),e(Z4e,L9r),e(Pc,y9r),e(Pc,eZ),e(eZ,x9r),e(Pc,$9r),e(Gt,k9r),M(oC,Gt,null),e(lr,S9r),e(lr,Ir),M(E$,Ir,null),e(Ir,R9r),e(Ir,eCe),e(eCe,P9r),e(Ir,B9r),e(Ir,vn),e(vn,I9r),e(vn,oCe),e(oCe,N9r),e(vn,q9r),e(vn,rCe),e(rCe,j9r),e(vn,D9r),e(vn,tCe),e(tCe,G9r),e(vn,O9r),e(Ir,V9r),e(Ir,Ve),e(Ve,rC),e(rC,aCe),e(aCe,X9r),e(rC,z9r),e(rC,oZ),e(oZ,W9r),e(rC,Q9r),e(Ve,U9r),e(Ve,tC),e(tC,nCe),e(nCe,H9r),e(tC,J9r),e(tC,rZ),e(rZ,Y9r),e(tC,K9r),e(Ve,Z9r),e(Ve,dl),e(dl,sCe),e(sCe,exr),e(dl,oxr),e(dl,tZ),e(tZ,rxr),e(dl,txr),e(dl,aZ),e(aZ,axr),e(dl,nxr),e(Ve,sxr),e(Ve,aC),e(aC,lCe),e(lCe,lxr),e(aC,ixr),e(aC,nZ),e(nZ,dxr),e(aC,cxr),e(Ve,fxr),e(Ve,nC),e(nC,iCe),e(iCe,mxr),e(nC,gxr),e(nC,sZ),e(sZ,hxr),e(nC,pxr),e(Ve,_xr),e(Ve,sC),e(sC,dCe),e(dCe,uxr),e(sC,bxr),e(sC,lZ),e(lZ,vxr),e(sC,Fxr),e(Ve,Txr),e(Ve,lC),e(lC,cCe),e(cCe,Mxr),e(lC,Exr),e(lC,iZ),e(iZ,Cxr),e(lC,wxr),e(Ve,Axr),e(Ve,iC),e(iC,fCe),e(fCe,Lxr),e(iC,yxr),e(iC,dZ),e(dZ,xxr),e(iC,$xr),e(Ir,kxr),M(dC,Ir,null),b(f,tHe,u),b(f,Bc,u),e(Bc,cC),e(cC,mCe),M(C$,mCe,null),e(Bc,Sxr),e(Bc,gCe),e(gCe,Rxr),b(f,aHe,u),b(f,ir,u),M(w$,ir,null),e(ir,Pxr),e(ir,Ic),e(Ic,Bxr),e(Ic,cZ),e(cZ,Ixr),e(Ic,Nxr),e(Ic,fZ),e(fZ,qxr),e(Ic,jxr),e(ir,Dxr),e(ir,A$),e(A$,Gxr),e(A$,hCe),e(hCe,Oxr),e(A$,Vxr),e(ir,Xxr),e(ir,Ot),M(L$,Ot,null),e(Ot,zxr),e(Ot,pCe),e(pCe,Wxr),e(Ot,Qxr),e(Ot,Nc),e(Nc,Uxr),e(Nc,_Ce),e(_Ce,Hxr),e(Nc,Jxr),e(Nc,mZ),e(mZ,Yxr),e(Nc,Kxr),e(Ot,Zxr),M(fC,Ot,null),e(ir,e$r),e(ir,Nr),M(y$,Nr,null),e(Nr,o$r),e(Nr,uCe),e(uCe,r$r),e(Nr,t$r),e(Nr,Fn),e(Fn,a$r),e(Fn,bCe),e(bCe,n$r),e(Fn,s$r),e(Fn,vCe),e(vCe,l$r),e(Fn,i$r),e(Fn,FCe),e(FCe,d$r),e(Fn,c$r),e(Nr,f$r),e(Nr,x$),e(x$,mC),e(mC,TCe),e(TCe,m$r),e(mC,g$r),e(mC,gZ),e(gZ,h$r),e(mC,p$r),e(x$,_$r),e(x$,gC),e(gC,MCe),e(MCe,u$r),e(gC,b$r),e(gC,hZ),e(hZ,v$r),e(gC,F$r),e(Nr,T$r),M(hC,Nr,null),b(f,nHe,u),b(f,qc,u),e(qc,pC),e(pC,ECe),M($$,ECe,null),e(qc,M$r),e(qc,CCe),e(CCe,E$r),b(f,sHe,u),b(f,dr,u),M(k$,dr,null),e(dr,C$r),e(dr,jc),e(jc,w$r),e(jc,pZ),e(pZ,A$r),e(jc,L$r),e(jc,_Z),e(_Z,y$r),e(jc,x$r),e(dr,$$r),e(dr,S$),e(S$,k$r),e(S$,wCe),e(wCe,S$r),e(S$,R$r),e(dr,P$r),e(dr,Vt),M(R$,Vt,null),e(Vt,B$r),e(Vt,ACe),e(ACe,I$r),e(Vt,N$r),e(Vt,Dc),e(Dc,q$r),e(Dc,LCe),e(LCe,j$r),e(Dc,D$r),e(Dc,uZ),e(uZ,G$r),e(Dc,O$r),e(Vt,V$r),M(_C,Vt,null),e(dr,X$r),e(dr,qr),M(P$,qr,null),e(qr,z$r),e(qr,yCe),e(yCe,W$r),e(qr,Q$r),e(qr,Tn),e(Tn,U$r),e(Tn,xCe),e(xCe,H$r),e(Tn,J$r),e(Tn,$Ce),e($Ce,Y$r),e(Tn,K$r),e(Tn,kCe),e(kCe,Z$r),e(Tn,ekr),e(qr,okr),e(qr,de),e(de,uC),e(uC,SCe),e(SCe,rkr),e(uC,tkr),e(uC,bZ),e(bZ,akr),e(uC,nkr),e(de,skr),e(de,bC),e(bC,RCe),e(RCe,lkr),e(bC,ikr),e(bC,vZ),e(vZ,dkr),e(bC,ckr),e(de,fkr),e(de,vC),e(vC,PCe),e(PCe,mkr),e(vC,gkr),e(vC,FZ),e(FZ,hkr),e(vC,pkr),e(de,_kr),e(de,FC),e(FC,BCe),e(BCe,ukr),e(FC,bkr),e(FC,TZ),e(TZ,vkr),e(FC,Fkr),e(de,Tkr),e(de,TC),e(TC,ICe),e(ICe,Mkr),e(TC,Ekr),e(TC,MZ),e(MZ,Ckr),e(TC,wkr),e(de,Akr),e(de,MC),e(MC,NCe),e(NCe,Lkr),e(MC,ykr),e(MC,EZ),e(EZ,xkr),e(MC,$kr),e(de,kkr),e(de,EC),e(EC,qCe),e(qCe,Skr),e(EC,Rkr),e(EC,CZ),e(CZ,Pkr),e(EC,Bkr),e(de,Ikr),e(de,CC),e(CC,jCe),e(jCe,Nkr),e(CC,qkr),e(CC,wZ),e(wZ,jkr),e(CC,Dkr),e(de,Gkr),e(de,wC),e(wC,DCe),e(DCe,Okr),e(wC,Vkr),e(wC,AZ),e(AZ,Xkr),e(wC,zkr),e(de,Wkr),e(de,AC),e(AC,GCe),e(GCe,Qkr),e(AC,Ukr),e(AC,LZ),e(LZ,Hkr),e(AC,Jkr),e(de,Ykr),e(de,LC),e(LC,OCe),e(OCe,Kkr),e(LC,Zkr),e(LC,yZ),e(yZ,eSr),e(LC,oSr),e(de,rSr),e(de,yC),e(yC,VCe),e(VCe,tSr),e(yC,aSr),e(yC,xZ),e(xZ,nSr),e(yC,sSr),e(de,lSr),e(de,xC),e(xC,XCe),e(XCe,iSr),e(xC,dSr),e(xC,$Z),e($Z,cSr),e(xC,fSr),e(de,mSr),e(de,$C),e($C,zCe),e(zCe,gSr),e($C,hSr),e($C,kZ),e(kZ,pSr),e($C,_Sr),e(de,uSr),e(de,kC),e(kC,WCe),e(WCe,bSr),e(kC,vSr),e(kC,SZ),e(SZ,FSr),e(kC,TSr),e(de,MSr),e(de,SC),e(SC,QCe),e(QCe,ESr),e(SC,CSr),e(SC,RZ),e(RZ,wSr),e(SC,ASr),e(de,LSr),e(de,RC),e(RC,UCe),e(UCe,ySr),e(RC,xSr),e(RC,PZ),e(PZ,$Sr),e(RC,kSr),e(de,SSr),e(de,PC),e(PC,HCe),e(HCe,RSr),e(PC,PSr),e(PC,BZ),e(BZ,BSr),e(PC,ISr),e(de,NSr),e(de,BC),e(BC,JCe),e(JCe,qSr),e(BC,jSr),e(BC,IZ),e(IZ,DSr),e(BC,GSr),e(de,OSr),e(de,IC),e(IC,YCe),e(YCe,VSr),e(IC,XSr),e(IC,NZ),e(NZ,zSr),e(IC,WSr),e(qr,QSr),M(NC,qr,null),b(f,lHe,u),b(f,Gc,u),e(Gc,qC),e(qC,KCe),M(B$,KCe,null),e(Gc,USr),e(Gc,ZCe),e(ZCe,HSr),b(f,iHe,u),b(f,cr,u),M(I$,cr,null),e(cr,JSr),e(cr,Oc),e(Oc,YSr),e(Oc,qZ),e(qZ,KSr),e(Oc,ZSr),e(Oc,jZ),e(jZ,eRr),e(Oc,oRr),e(cr,rRr),e(cr,N$),e(N$,tRr),e(N$,e3e),e(e3e,aRr),e(N$,nRr),e(cr,sRr),e(cr,Xt),M(q$,Xt,null),e(Xt,lRr),e(Xt,o3e),e(o3e,iRr),e(Xt,dRr),e(Xt,Vc),e(Vc,cRr),e(Vc,r3e),e(r3e,fRr),e(Vc,mRr),e(Vc,DZ),e(DZ,gRr),e(Vc,hRr),e(Xt,pRr),M(jC,Xt,null),e(cr,_Rr),e(cr,jr),M(j$,jr,null),e(jr,uRr),e(jr,t3e),e(t3e,bRr),e(jr,vRr),e(jr,Mn),e(Mn,FRr),e(Mn,a3e),e(a3e,TRr),e(Mn,MRr),e(Mn,n3e),e(n3e,ERr),e(Mn,CRr),e(Mn,s3e),e(s3e,wRr),e(Mn,ARr),e(jr,LRr),e(jr,ye),e(ye,DC),e(DC,l3e),e(l3e,yRr),e(DC,xRr),e(DC,GZ),e(GZ,$Rr),e(DC,kRr),e(ye,SRr),e(ye,GC),e(GC,i3e),e(i3e,RRr),e(GC,PRr),e(GC,OZ),e(OZ,BRr),e(GC,IRr),e(ye,NRr),e(ye,OC),e(OC,d3e),e(d3e,qRr),e(OC,jRr),e(OC,VZ),e(VZ,DRr),e(OC,GRr),e(ye,ORr),e(ye,VC),e(VC,c3e),e(c3e,VRr),e(VC,XRr),e(VC,XZ),e(XZ,zRr),e(VC,WRr),e(ye,QRr),e(ye,XC),e(XC,f3e),e(f3e,URr),e(XC,HRr),e(XC,zZ),e(zZ,JRr),e(XC,YRr),e(ye,KRr),e(ye,zC),e(zC,m3e),e(m3e,ZRr),e(zC,ePr),e(zC,WZ),e(WZ,oPr),e(zC,rPr),e(ye,tPr),e(ye,WC),e(WC,g3e),e(g3e,aPr),e(WC,nPr),e(WC,QZ),e(QZ,sPr),e(WC,lPr),e(ye,iPr),e(ye,QC),e(QC,h3e),e(h3e,dPr),e(QC,cPr),e(QC,UZ),e(UZ,fPr),e(QC,mPr),e(ye,gPr),e(ye,UC),e(UC,p3e),e(p3e,hPr),e(UC,pPr),e(UC,HZ),e(HZ,_Pr),e(UC,uPr),e(ye,bPr),e(ye,HC),e(HC,_3e),e(_3e,vPr),e(HC,FPr),e(HC,JZ),e(JZ,TPr),e(HC,MPr),e(jr,EPr),M(JC,jr,null),b(f,dHe,u),b(f,Xc,u),e(Xc,YC),e(YC,u3e),M(D$,u3e,null),e(Xc,CPr),e(Xc,b3e),e(b3e,wPr),b(f,cHe,u),b(f,fr,u),M(G$,fr,null),e(fr,APr),e(fr,zc),e(zc,LPr),e(zc,YZ),e(YZ,yPr),e(zc,xPr),e(zc,KZ),e(KZ,$Pr),e(zc,kPr),e(fr,SPr),e(fr,O$),e(O$,RPr),e(O$,v3e),e(v3e,PPr),e(O$,BPr),e(fr,IPr),e(fr,zt),M(V$,zt,null),e(zt,NPr),e(zt,F3e),e(F3e,qPr),e(zt,jPr),e(zt,Wc),e(Wc,DPr),e(Wc,T3e),e(T3e,GPr),e(Wc,OPr),e(Wc,ZZ),e(ZZ,VPr),e(Wc,XPr),e(zt,zPr),M(KC,zt,null),e(fr,WPr),e(fr,Dr),M(X$,Dr,null),e(Dr,QPr),e(Dr,M3e),e(M3e,UPr),e(Dr,HPr),e(Dr,En),e(En,JPr),e(En,E3e),e(E3e,YPr),e(En,KPr),e(En,C3e),e(C3e,ZPr),e(En,eBr),e(En,w3e),e(w3e,oBr),e(En,rBr),e(Dr,tBr),e(Dr,te),e(te,ZC),e(ZC,A3e),e(A3e,aBr),e(ZC,nBr),e(ZC,eee),e(eee,sBr),e(ZC,lBr),e(te,iBr),e(te,e3),e(e3,L3e),e(L3e,dBr),e(e3,cBr),e(e3,oee),e(oee,fBr),e(e3,mBr),e(te,gBr),e(te,o3),e(o3,y3e),e(y3e,hBr),e(o3,pBr),e(o3,ree),e(ree,_Br),e(o3,uBr),e(te,bBr),e(te,r3),e(r3,x3e),e(x3e,vBr),e(r3,FBr),e(r3,tee),e(tee,TBr),e(r3,MBr),e(te,EBr),e(te,t3),e(t3,$3e),e($3e,CBr),e(t3,wBr),e(t3,aee),e(aee,ABr),e(t3,LBr),e(te,yBr),e(te,a3),e(a3,k3e),e(k3e,xBr),e(a3,$Br),e(a3,nee),e(nee,kBr),e(a3,SBr),e(te,RBr),e(te,n3),e(n3,S3e),e(S3e,PBr),e(n3,BBr),e(n3,see),e(see,IBr),e(n3,NBr),e(te,qBr),e(te,s3),e(s3,R3e),e(R3e,jBr),e(s3,DBr),e(s3,lee),e(lee,GBr),e(s3,OBr),e(te,VBr),e(te,l3),e(l3,P3e),e(P3e,XBr),e(l3,zBr),e(l3,iee),e(iee,WBr),e(l3,QBr),e(te,UBr),e(te,i3),e(i3,B3e),e(B3e,HBr),e(i3,JBr),e(i3,dee),e(dee,YBr),e(i3,KBr),e(te,ZBr),e(te,d3),e(d3,I3e),e(I3e,eIr),e(d3,oIr),e(d3,cee),e(cee,rIr),e(d3,tIr),e(te,aIr),e(te,c3),e(c3,N3e),e(N3e,nIr),e(c3,sIr),e(c3,fee),e(fee,lIr),e(c3,iIr),e(te,dIr),e(te,f3),e(f3,q3e),e(q3e,cIr),e(f3,fIr),e(f3,mee),e(mee,mIr),e(f3,gIr),e(te,hIr),e(te,m3),e(m3,j3e),e(j3e,pIr),e(m3,_Ir),e(m3,gee),e(gee,uIr),e(m3,bIr),e(te,vIr),e(te,g3),e(g3,D3e),e(D3e,FIr),e(g3,TIr),e(g3,hee),e(hee,MIr),e(g3,EIr),e(te,CIr),e(te,h3),e(h3,G3e),e(G3e,wIr),e(h3,AIr),e(h3,pee),e(pee,LIr),e(h3,yIr),e(te,xIr),e(te,p3),e(p3,O3e),e(O3e,$Ir),e(p3,kIr),e(p3,_ee),e(_ee,SIr),e(p3,RIr),e(te,PIr),e(te,_3),e(_3,V3e),e(V3e,BIr),e(_3,IIr),e(_3,uee),e(uee,NIr),e(_3,qIr),e(te,jIr),e(te,u3),e(u3,X3e),e(X3e,DIr),e(u3,GIr),e(u3,bee),e(bee,OIr),e(u3,VIr),e(te,XIr),e(te,b3),e(b3,z3e),e(z3e,zIr),e(b3,WIr),e(b3,vee),e(vee,QIr),e(b3,UIr),e(te,HIr),e(te,v3),e(v3,W3e),e(W3e,JIr),e(v3,YIr),e(v3,Fee),e(Fee,KIr),e(v3,ZIr),e(te,eNr),e(te,F3),e(F3,Q3e),e(Q3e,oNr),e(F3,rNr),e(F3,Tee),e(Tee,tNr),e(F3,aNr),e(te,nNr),e(te,T3),e(T3,U3e),e(U3e,sNr),e(T3,lNr),e(T3,Mee),e(Mee,iNr),e(T3,dNr),e(te,cNr),e(te,M3),e(M3,H3e),e(H3e,fNr),e(M3,mNr),e(M3,Eee),e(Eee,gNr),e(M3,hNr),e(te,pNr),e(te,E3),e(E3,J3e),e(J3e,_Nr),e(E3,uNr),e(E3,Cee),e(Cee,bNr),e(E3,vNr),e(te,FNr),e(te,C3),e(C3,Y3e),e(Y3e,TNr),e(C3,MNr),e(C3,wee),e(wee,ENr),e(C3,CNr),e(Dr,wNr),M(w3,Dr,null),b(f,fHe,u),b(f,Qc,u),e(Qc,A3),e(A3,K3e),M(z$,K3e,null),e(Qc,ANr),e(Qc,Z3e),e(Z3e,LNr),b(f,mHe,u),b(f,mr,u),M(W$,mr,null),e(mr,yNr),e(mr,Uc),e(Uc,xNr),e(Uc,Aee),e(Aee,$Nr),e(Uc,kNr),e(Uc,Lee),e(Lee,SNr),e(Uc,RNr),e(mr,PNr),e(mr,Q$),e(Q$,BNr),e(Q$,e5e),e(e5e,INr),e(Q$,NNr),e(mr,qNr),e(mr,Wt),M(U$,Wt,null),e(Wt,jNr),e(Wt,o5e),e(o5e,DNr),e(Wt,GNr),e(Wt,Hc),e(Hc,ONr),e(Hc,r5e),e(r5e,VNr),e(Hc,XNr),e(Hc,yee),e(yee,zNr),e(Hc,WNr),e(Wt,QNr),M(L3,Wt,null),e(mr,UNr),e(mr,Gr),M(H$,Gr,null),e(Gr,HNr),e(Gr,t5e),e(t5e,JNr),e(Gr,YNr),e(Gr,Cn),e(Cn,KNr),e(Cn,a5e),e(a5e,ZNr),e(Cn,eqr),e(Cn,n5e),e(n5e,oqr),e(Cn,rqr),e(Cn,s5e),e(s5e,tqr),e(Cn,aqr),e(Gr,nqr),e(Gr,ve),e(ve,y3),e(y3,l5e),e(l5e,sqr),e(y3,lqr),e(y3,xee),e(xee,iqr),e(y3,dqr),e(ve,cqr),e(ve,x3),e(x3,i5e),e(i5e,fqr),e(x3,mqr),e(x3,$ee),e($ee,gqr),e(x3,hqr),e(ve,pqr),e(ve,$3),e($3,d5e),e(d5e,_qr),e($3,uqr),e($3,kee),e(kee,bqr),e($3,vqr),e(ve,Fqr),e(ve,k3),e(k3,c5e),e(c5e,Tqr),e(k3,Mqr),e(k3,See),e(See,Eqr),e(k3,Cqr),e(ve,wqr),e(ve,S3),e(S3,f5e),e(f5e,Aqr),e(S3,Lqr),e(S3,Ree),e(Ree,yqr),e(S3,xqr),e(ve,$qr),e(ve,R3),e(R3,m5e),e(m5e,kqr),e(R3,Sqr),e(R3,Pee),e(Pee,Rqr),e(R3,Pqr),e(ve,Bqr),e(ve,P3),e(P3,g5e),e(g5e,Iqr),e(P3,Nqr),e(P3,Bee),e(Bee,qqr),e(P3,jqr),e(ve,Dqr),e(ve,B3),e(B3,h5e),e(h5e,Gqr),e(B3,Oqr),e(B3,Iee),e(Iee,Vqr),e(B3,Xqr),e(ve,zqr),e(ve,I3),e(I3,p5e),e(p5e,Wqr),e(I3,Qqr),e(I3,Nee),e(Nee,Uqr),e(I3,Hqr),e(ve,Jqr),e(ve,N3),e(N3,_5e),e(_5e,Yqr),e(N3,Kqr),e(N3,qee),e(qee,Zqr),e(N3,ejr),e(ve,ojr),e(ve,q3),e(q3,u5e),e(u5e,rjr),e(q3,tjr),e(q3,jee),e(jee,ajr),e(q3,njr),e(ve,sjr),e(ve,j3),e(j3,b5e),e(b5e,ljr),e(j3,ijr),e(j3,Dee),e(Dee,djr),e(j3,cjr),e(ve,fjr),e(ve,D3),e(D3,v5e),e(v5e,mjr),e(D3,gjr),e(D3,Gee),e(Gee,hjr),e(D3,pjr),e(ve,_jr),e(ve,G3),e(G3,F5e),e(F5e,ujr),e(G3,bjr),e(G3,Oee),e(Oee,vjr),e(G3,Fjr),e(ve,Tjr),e(ve,O3),e(O3,T5e),e(T5e,Mjr),e(O3,Ejr),e(O3,Vee),e(Vee,Cjr),e(O3,wjr),e(ve,Ajr),e(ve,V3),e(V3,M5e),e(M5e,Ljr),e(V3,yjr),e(V3,Xee),e(Xee,xjr),e(V3,$jr),e(ve,kjr),e(ve,X3),e(X3,E5e),e(E5e,Sjr),e(X3,Rjr),e(X3,zee),e(zee,Pjr),e(X3,Bjr),e(Gr,Ijr),M(z3,Gr,null),b(f,gHe,u),b(f,Jc,u),e(Jc,W3),e(W3,C5e),M(J$,C5e,null),e(Jc,Njr),e(Jc,w5e),e(w5e,qjr),b(f,hHe,u),b(f,gr,u),M(Y$,gr,null),e(gr,jjr),e(gr,Yc),e(Yc,Djr),e(Yc,Wee),e(Wee,Gjr),e(Yc,Ojr),e(Yc,Qee),e(Qee,Vjr),e(Yc,Xjr),e(gr,zjr),e(gr,K$),e(K$,Wjr),e(K$,A5e),e(A5e,Qjr),e(K$,Ujr),e(gr,Hjr),e(gr,Qt),M(Z$,Qt,null),e(Qt,Jjr),e(Qt,L5e),e(L5e,Yjr),e(Qt,Kjr),e(Qt,Kc),e(Kc,Zjr),e(Kc,y5e),e(y5e,eDr),e(Kc,oDr),e(Kc,Uee),e(Uee,rDr),e(Kc,tDr),e(Qt,aDr),M(Q3,Qt,null),e(gr,nDr),e(gr,Or),M(ek,Or,null),e(Or,sDr),e(Or,x5e),e(x5e,lDr),e(Or,iDr),e(Or,wn),e(wn,dDr),e(wn,$5e),e($5e,cDr),e(wn,fDr),e(wn,k5e),e(k5e,mDr),e(wn,gDr),e(wn,S5e),e(S5e,hDr),e(wn,pDr),e(Or,_Dr),e(Or,ok),e(ok,U3),e(U3,R5e),e(R5e,uDr),e(U3,bDr),e(U3,Hee),e(Hee,vDr),e(U3,FDr),e(ok,TDr),e(ok,H3),e(H3,P5e),e(P5e,MDr),e(H3,EDr),e(H3,Jee),e(Jee,CDr),e(H3,wDr),e(Or,ADr),M(J3,Or,null),b(f,pHe,u),b(f,Zc,u),e(Zc,Y3),e(Y3,B5e),M(rk,B5e,null),e(Zc,LDr),e(Zc,I5e),e(I5e,yDr),b(f,_He,u),b(f,hr,u),M(tk,hr,null),e(hr,xDr),e(hr,ef),e(ef,$Dr),e(ef,Yee),e(Yee,kDr),e(ef,SDr),e(ef,Kee),e(Kee,RDr),e(ef,PDr),e(hr,BDr),e(hr,ak),e(ak,IDr),e(ak,N5e),e(N5e,NDr),e(ak,qDr),e(hr,jDr),e(hr,Ut),M(nk,Ut,null),e(Ut,DDr),e(Ut,q5e),e(q5e,GDr),e(Ut,ODr),e(Ut,of),e(of,VDr),e(of,j5e),e(j5e,XDr),e(of,zDr),e(of,Zee),e(Zee,WDr),e(of,QDr),e(Ut,UDr),M(K3,Ut,null),e(hr,HDr),e(hr,Vr),M(sk,Vr,null),e(Vr,JDr),e(Vr,D5e),e(D5e,YDr),e(Vr,KDr),e(Vr,An),e(An,ZDr),e(An,G5e),e(G5e,eGr),e(An,oGr),e(An,O5e),e(O5e,rGr),e(An,tGr),e(An,V5e),e(V5e,aGr),e(An,nGr),e(Vr,sGr),e(Vr,X5e),e(X5e,Z3),e(Z3,z5e),e(z5e,lGr),e(Z3,iGr),e(Z3,eoe),e(eoe,dGr),e(Z3,cGr),e(Vr,fGr),M(e5,Vr,null),b(f,uHe,u),b(f,rf,u),e(rf,o5),e(o5,W5e),M(lk,W5e,null),e(rf,mGr),e(rf,Q5e),e(Q5e,gGr),b(f,bHe,u),b(f,pr,u),M(ik,pr,null),e(pr,hGr),e(pr,tf),e(tf,pGr),e(tf,ooe),e(ooe,_Gr),e(tf,uGr),e(tf,roe),e(roe,bGr),e(tf,vGr),e(pr,FGr),e(pr,dk),e(dk,TGr),e(dk,U5e),e(U5e,MGr),e(dk,EGr),e(pr,CGr),e(pr,Ht),M(ck,Ht,null),e(Ht,wGr),e(Ht,H5e),e(H5e,AGr),e(Ht,LGr),e(Ht,af),e(af,yGr),e(af,J5e),e(J5e,xGr),e(af,$Gr),e(af,toe),e(toe,kGr),e(af,SGr),e(Ht,RGr),M(r5,Ht,null),e(pr,PGr),e(pr,Xr),M(fk,Xr,null),e(Xr,BGr),e(Xr,Y5e),e(Y5e,IGr),e(Xr,NGr),e(Xr,Ln),e(Ln,qGr),e(Ln,K5e),e(K5e,jGr),e(Ln,DGr),e(Ln,Z5e),e(Z5e,GGr),e(Ln,OGr),e(Ln,e0e),e(e0e,VGr),e(Ln,XGr),e(Xr,zGr),e(Xr,ce),e(ce,t5),e(t5,o0e),e(o0e,WGr),e(t5,QGr),e(t5,aoe),e(aoe,UGr),e(t5,HGr),e(ce,JGr),e(ce,a5),e(a5,r0e),e(r0e,YGr),e(a5,KGr),e(a5,noe),e(noe,ZGr),e(a5,eOr),e(ce,oOr),e(ce,n5),e(n5,t0e),e(t0e,rOr),e(n5,tOr),e(n5,soe),e(soe,aOr),e(n5,nOr),e(ce,sOr),e(ce,s5),e(s5,a0e),e(a0e,lOr),e(s5,iOr),e(s5,loe),e(loe,dOr),e(s5,cOr),e(ce,fOr),e(ce,l5),e(l5,n0e),e(n0e,mOr),e(l5,gOr),e(l5,ioe),e(ioe,hOr),e(l5,pOr),e(ce,_Or),e(ce,i5),e(i5,s0e),e(s0e,uOr),e(i5,bOr),e(i5,doe),e(doe,vOr),e(i5,FOr),e(ce,TOr),e(ce,d5),e(d5,l0e),e(l0e,MOr),e(d5,EOr),e(d5,coe),e(coe,COr),e(d5,wOr),e(ce,AOr),e(ce,c5),e(c5,i0e),e(i0e,LOr),e(c5,yOr),e(c5,foe),e(foe,xOr),e(c5,$Or),e(ce,kOr),e(ce,f5),e(f5,d0e),e(d0e,SOr),e(f5,ROr),e(f5,moe),e(moe,POr),e(f5,BOr),e(ce,IOr),e(ce,m5),e(m5,c0e),e(c0e,NOr),e(m5,qOr),e(m5,goe),e(goe,jOr),e(m5,DOr),e(ce,GOr),e(ce,g5),e(g5,f0e),e(f0e,OOr),e(g5,VOr),e(g5,hoe),e(hoe,XOr),e(g5,zOr),e(ce,WOr),e(ce,h5),e(h5,m0e),e(m0e,QOr),e(h5,UOr),e(h5,poe),e(poe,HOr),e(h5,JOr),e(ce,YOr),e(ce,p5),e(p5,g0e),e(g0e,KOr),e(p5,ZOr),e(p5,_oe),e(_oe,eVr),e(p5,oVr),e(ce,rVr),e(ce,_5),e(_5,h0e),e(h0e,tVr),e(_5,aVr),e(_5,uoe),e(uoe,nVr),e(_5,sVr),e(ce,lVr),e(ce,u5),e(u5,p0e),e(p0e,iVr),e(u5,dVr),e(u5,boe),e(boe,cVr),e(u5,fVr),e(ce,mVr),e(ce,b5),e(b5,_0e),e(_0e,gVr),e(b5,hVr),e(b5,voe),e(voe,pVr),e(b5,_Vr),e(ce,uVr),e(ce,v5),e(v5,u0e),e(u0e,bVr),e(v5,vVr),e(v5,Foe),e(Foe,FVr),e(v5,TVr),e(ce,MVr),e(ce,F5),e(F5,b0e),e(b0e,EVr),e(F5,CVr),e(F5,Toe),e(Toe,wVr),e(F5,AVr),e(ce,LVr),e(ce,T5),e(T5,v0e),e(v0e,yVr),e(T5,xVr),e(T5,Moe),e(Moe,$Vr),e(T5,kVr),e(ce,SVr),e(ce,M5),e(M5,F0e),e(F0e,RVr),e(M5,PVr),e(M5,Eoe),e(Eoe,BVr),e(M5,IVr),e(Xr,NVr),M(E5,Xr,null),b(f,vHe,u),b(f,nf,u),e(nf,C5),e(C5,T0e),M(mk,T0e,null),e(nf,qVr),e(nf,M0e),e(M0e,jVr),b(f,FHe,u),b(f,_r,u),M(gk,_r,null),e(_r,DVr),e(_r,sf),e(sf,GVr),e(sf,Coe),e(Coe,OVr),e(sf,VVr),e(sf,woe),e(woe,XVr),e(sf,zVr),e(_r,WVr),e(_r,hk),e(hk,QVr),e(hk,E0e),e(E0e,UVr),e(hk,HVr),e(_r,JVr),e(_r,Jt),M(pk,Jt,null),e(Jt,YVr),e(Jt,C0e),e(C0e,KVr),e(Jt,ZVr),e(Jt,lf),e(lf,eXr),e(lf,w0e),e(w0e,oXr),e(lf,rXr),e(lf,Aoe),e(Aoe,tXr),e(lf,aXr),e(Jt,nXr),M(w5,Jt,null),e(_r,sXr),e(_r,zr),M(_k,zr,null),e(zr,lXr),e(zr,A0e),e(A0e,iXr),e(zr,dXr),e(zr,yn),e(yn,cXr),e(yn,L0e),e(L0e,fXr),e(yn,mXr),e(yn,y0e),e(y0e,gXr),e(yn,hXr),e(yn,x0e),e(x0e,pXr),e(yn,_Xr),e(zr,uXr),e(zr,fe),e(fe,A5),e(A5,$0e),e($0e,bXr),e(A5,vXr),e(A5,Loe),e(Loe,FXr),e(A5,TXr),e(fe,MXr),e(fe,L5),e(L5,k0e),e(k0e,EXr),e(L5,CXr),e(L5,yoe),e(yoe,wXr),e(L5,AXr),e(fe,LXr),e(fe,y5),e(y5,S0e),e(S0e,yXr),e(y5,xXr),e(y5,xoe),e(xoe,$Xr),e(y5,kXr),e(fe,SXr),e(fe,x5),e(x5,R0e),e(R0e,RXr),e(x5,PXr),e(x5,$oe),e($oe,BXr),e(x5,IXr),e(fe,NXr),e(fe,$5),e($5,P0e),e(P0e,qXr),e($5,jXr),e($5,koe),e(koe,DXr),e($5,GXr),e(fe,OXr),e(fe,k5),e(k5,B0e),e(B0e,VXr),e(k5,XXr),e(k5,Soe),e(Soe,zXr),e(k5,WXr),e(fe,QXr),e(fe,S5),e(S5,I0e),e(I0e,UXr),e(S5,HXr),e(S5,Roe),e(Roe,JXr),e(S5,YXr),e(fe,KXr),e(fe,R5),e(R5,N0e),e(N0e,ZXr),e(R5,ezr),e(R5,Poe),e(Poe,ozr),e(R5,rzr),e(fe,tzr),e(fe,P5),e(P5,q0e),e(q0e,azr),e(P5,nzr),e(P5,Boe),e(Boe,szr),e(P5,lzr),e(fe,izr),e(fe,B5),e(B5,j0e),e(j0e,dzr),e(B5,czr),e(B5,Ioe),e(Ioe,fzr),e(B5,mzr),e(fe,gzr),e(fe,I5),e(I5,D0e),e(D0e,hzr),e(I5,pzr),e(I5,Noe),e(Noe,_zr),e(I5,uzr),e(fe,bzr),e(fe,N5),e(N5,G0e),e(G0e,vzr),e(N5,Fzr),e(N5,qoe),e(qoe,Tzr),e(N5,Mzr),e(fe,Ezr),e(fe,q5),e(q5,O0e),e(O0e,Czr),e(q5,wzr),e(q5,joe),e(joe,Azr),e(q5,Lzr),e(fe,yzr),e(fe,j5),e(j5,V0e),e(V0e,xzr),e(j5,$zr),e(j5,Doe),e(Doe,kzr),e(j5,Szr),e(fe,Rzr),e(fe,D5),e(D5,X0e),e(X0e,Pzr),e(D5,Bzr),e(D5,Goe),e(Goe,Izr),e(D5,Nzr),e(fe,qzr),e(fe,G5),e(G5,z0e),e(z0e,jzr),e(G5,Dzr),e(G5,Ooe),e(Ooe,Gzr),e(G5,Ozr),e(fe,Vzr),e(fe,O5),e(O5,W0e),e(W0e,Xzr),e(O5,zzr),e(O5,Voe),e(Voe,Wzr),e(O5,Qzr),e(fe,Uzr),e(fe,V5),e(V5,Q0e),e(Q0e,Hzr),e(V5,Jzr),e(V5,Xoe),e(Xoe,Yzr),e(V5,Kzr),e(fe,Zzr),e(fe,X5),e(X5,U0e),e(U0e,eWr),e(X5,oWr),e(X5,zoe),e(zoe,rWr),e(X5,tWr),e(fe,aWr),e(fe,z5),e(z5,H0e),e(H0e,nWr),e(z5,sWr),e(z5,Woe),e(Woe,lWr),e(z5,iWr),e(zr,dWr),M(W5,zr,null),b(f,THe,u),b(f,df,u),e(df,Q5),e(Q5,J0e),M(uk,J0e,null),e(df,cWr),e(df,Y0e),e(Y0e,fWr),b(f,MHe,u),b(f,ur,u),M(bk,ur,null),e(ur,mWr),e(ur,cf),e(cf,gWr),e(cf,Qoe),e(Qoe,hWr),e(cf,pWr),e(cf,Uoe),e(Uoe,_Wr),e(cf,uWr),e(ur,bWr),e(ur,vk),e(vk,vWr),e(vk,K0e),e(K0e,FWr),e(vk,TWr),e(ur,MWr),e(ur,Yt),M(Fk,Yt,null),e(Yt,EWr),e(Yt,Z0e),e(Z0e,CWr),e(Yt,wWr),e(Yt,ff),e(ff,AWr),e(ff,ewe),e(ewe,LWr),e(ff,yWr),e(ff,Hoe),e(Hoe,xWr),e(ff,$Wr),e(Yt,kWr),M(U5,Yt,null),e(ur,SWr),e(ur,Wr),M(Tk,Wr,null),e(Wr,RWr),e(Wr,owe),e(owe,PWr),e(Wr,BWr),e(Wr,xn),e(xn,IWr),e(xn,rwe),e(rwe,NWr),e(xn,qWr),e(xn,twe),e(twe,jWr),e(xn,DWr),e(xn,awe),e(awe,GWr),e(xn,OWr),e(Wr,VWr),e(Wr,nwe),e(nwe,H5),e(H5,swe),e(swe,XWr),e(H5,zWr),e(H5,Joe),e(Joe,WWr),e(H5,QWr),e(Wr,UWr),M(J5,Wr,null),b(f,EHe,u),b(f,mf,u),e(mf,Y5),e(Y5,lwe),M(Mk,lwe,null),e(mf,HWr),e(mf,iwe),e(iwe,JWr),b(f,CHe,u),b(f,br,u),M(Ek,br,null),e(br,YWr),e(br,gf),e(gf,KWr),e(gf,Yoe),e(Yoe,ZWr),e(gf,eQr),e(gf,Koe),e(Koe,oQr),e(gf,rQr),e(br,tQr),e(br,Ck),e(Ck,aQr),e(Ck,dwe),e(dwe,nQr),e(Ck,sQr),e(br,lQr),e(br,Kt),M(wk,Kt,null),e(Kt,iQr),e(Kt,cwe),e(cwe,dQr),e(Kt,cQr),e(Kt,hf),e(hf,fQr),e(hf,fwe),e(fwe,mQr),e(hf,gQr),e(hf,Zoe),e(Zoe,hQr),e(hf,pQr),e(Kt,_Qr),M(K5,Kt,null),e(br,uQr),e(br,Qr),M(Ak,Qr,null),e(Qr,bQr),e(Qr,mwe),e(mwe,vQr),e(Qr,FQr),e(Qr,$n),e($n,TQr),e($n,gwe),e(gwe,MQr),e($n,EQr),e($n,hwe),e(hwe,CQr),e($n,wQr),e($n,pwe),e(pwe,AQr),e($n,LQr),e(Qr,yQr),e(Qr,_we),e(_we,Z5),e(Z5,uwe),e(uwe,xQr),e(Z5,$Qr),e(Z5,ere),e(ere,kQr),e(Z5,SQr),e(Qr,RQr),M(e0,Qr,null),b(f,wHe,u),b(f,pf,u),e(pf,o0),e(o0,bwe),M(Lk,bwe,null),e(pf,PQr),e(pf,vwe),e(vwe,BQr),b(f,AHe,u),b(f,vr,u),M(yk,vr,null),e(vr,IQr),e(vr,_f),e(_f,NQr),e(_f,ore),e(ore,qQr),e(_f,jQr),e(_f,rre),e(rre,DQr),e(_f,GQr),e(vr,OQr),e(vr,xk),e(xk,VQr),e(xk,Fwe),e(Fwe,XQr),e(xk,zQr),e(vr,WQr),e(vr,Zt),M($k,Zt,null),e(Zt,QQr),e(Zt,Twe),e(Twe,UQr),e(Zt,HQr),e(Zt,uf),e(uf,JQr),e(uf,Mwe),e(Mwe,YQr),e(uf,KQr),e(uf,tre),e(tre,ZQr),e(uf,eUr),e(Zt,oUr),M(r0,Zt,null),e(vr,rUr),e(vr,Ur),M(kk,Ur,null),e(Ur,tUr),e(Ur,Ewe),e(Ewe,aUr),e(Ur,nUr),e(Ur,kn),e(kn,sUr),e(kn,Cwe),e(Cwe,lUr),e(kn,iUr),e(kn,wwe),e(wwe,dUr),e(kn,cUr),e(kn,Awe),e(Awe,fUr),e(kn,mUr),e(Ur,gUr),e(Ur,re),e(re,t0),e(t0,Lwe),e(Lwe,hUr),e(t0,pUr),e(t0,are),e(are,_Ur),e(t0,uUr),e(re,bUr),e(re,a0),e(a0,ywe),e(ywe,vUr),e(a0,FUr),e(a0,nre),e(nre,TUr),e(a0,MUr),e(re,EUr),e(re,n0),e(n0,xwe),e(xwe,CUr),e(n0,wUr),e(n0,sre),e(sre,AUr),e(n0,LUr),e(re,yUr),e(re,s0),e(s0,$we),e($we,xUr),e(s0,$Ur),e(s0,lre),e(lre,kUr),e(s0,SUr),e(re,RUr),e(re,l0),e(l0,kwe),e(kwe,PUr),e(l0,BUr),e(l0,ire),e(ire,IUr),e(l0,NUr),e(re,qUr),e(re,i0),e(i0,Swe),e(Swe,jUr),e(i0,DUr),e(i0,dre),e(dre,GUr),e(i0,OUr),e(re,VUr),e(re,d0),e(d0,Rwe),e(Rwe,XUr),e(d0,zUr),e(d0,cre),e(cre,WUr),e(d0,QUr),e(re,UUr),e(re,c0),e(c0,Pwe),e(Pwe,HUr),e(c0,JUr),e(c0,fre),e(fre,YUr),e(c0,KUr),e(re,ZUr),e(re,f0),e(f0,Bwe),e(Bwe,eHr),e(f0,oHr),e(f0,mre),e(mre,rHr),e(f0,tHr),e(re,aHr),e(re,m0),e(m0,Iwe),e(Iwe,nHr),e(m0,sHr),e(m0,gre),e(gre,lHr),e(m0,iHr),e(re,dHr),e(re,g0),e(g0,Nwe),e(Nwe,cHr),e(g0,fHr),e(g0,hre),e(hre,mHr),e(g0,gHr),e(re,hHr),e(re,h0),e(h0,qwe),e(qwe,pHr),e(h0,_Hr),e(h0,pre),e(pre,uHr),e(h0,bHr),e(re,vHr),e(re,p0),e(p0,jwe),e(jwe,FHr),e(p0,THr),e(p0,_re),e(_re,MHr),e(p0,EHr),e(re,CHr),e(re,_0),e(_0,Dwe),e(Dwe,wHr),e(_0,AHr),e(_0,ure),e(ure,LHr),e(_0,yHr),e(re,xHr),e(re,u0),e(u0,Gwe),e(Gwe,$Hr),e(u0,kHr),e(u0,bre),e(bre,SHr),e(u0,RHr),e(re,PHr),e(re,b0),e(b0,Owe),e(Owe,BHr),e(b0,IHr),e(b0,vre),e(vre,NHr),e(b0,qHr),e(re,jHr),e(re,v0),e(v0,Vwe),e(Vwe,DHr),e(v0,GHr),e(v0,Fre),e(Fre,OHr),e(v0,VHr),e(re,XHr),e(re,F0),e(F0,Xwe),e(Xwe,zHr),e(F0,WHr),e(F0,Tre),e(Tre,QHr),e(F0,UHr),e(re,HHr),e(re,T0),e(T0,zwe),e(zwe,JHr),e(T0,YHr),e(T0,Mre),e(Mre,KHr),e(T0,ZHr),e(re,eJr),e(re,M0),e(M0,Wwe),e(Wwe,oJr),e(M0,rJr),e(M0,Ere),e(Ere,tJr),e(M0,aJr),e(re,nJr),e(re,E0),e(E0,Qwe),e(Qwe,sJr),e(E0,lJr),e(E0,Cre),e(Cre,iJr),e(E0,dJr),e(re,cJr),e(re,C0),e(C0,Uwe),e(Uwe,fJr),e(C0,mJr),e(C0,wre),e(wre,gJr),e(C0,hJr),e(re,pJr),e(re,w0),e(w0,Hwe),e(Hwe,_Jr),e(w0,uJr),e(w0,Are),e(Are,bJr),e(w0,vJr),e(re,FJr),e(re,A0),e(A0,Jwe),e(Jwe,TJr),e(A0,MJr),e(A0,Lre),e(Lre,EJr),e(A0,CJr),e(re,wJr),e(re,L0),e(L0,Ywe),e(Ywe,AJr),e(L0,LJr),e(L0,yre),e(yre,yJr),e(L0,xJr),e(re,$Jr),e(re,y0),e(y0,Kwe),e(Kwe,kJr),e(y0,SJr),e(y0,xre),e(xre,RJr),e(y0,PJr),e(re,BJr),e(re,x0),e(x0,Zwe),e(Zwe,IJr),e(x0,NJr),e(x0,$re),e($re,qJr),e(x0,jJr),e(Ur,DJr),M($0,Ur,null),b(f,LHe,u),b(f,bf,u),e(bf,k0),e(k0,eAe),M(Sk,eAe,null),e(bf,GJr),e(bf,oAe),e(oAe,OJr),b(f,yHe,u),b(f,Fr,u),M(Rk,Fr,null),e(Fr,VJr),e(Fr,vf),e(vf,XJr),e(vf,kre),e(kre,zJr),e(vf,WJr),e(vf,Sre),e(Sre,QJr),e(vf,UJr),e(Fr,HJr),e(Fr,Pk),e(Pk,JJr),e(Pk,rAe),e(rAe,YJr),e(Pk,KJr),e(Fr,ZJr),e(Fr,ea),M(Bk,ea,null),e(ea,eYr),e(ea,tAe),e(tAe,oYr),e(ea,rYr),e(ea,Ff),e(Ff,tYr),e(Ff,aAe),e(aAe,aYr),e(Ff,nYr),e(Ff,Rre),e(Rre,sYr),e(Ff,lYr),e(ea,iYr),M(S0,ea,null),e(Fr,dYr),e(Fr,Hr),M(Ik,Hr,null),e(Hr,cYr),e(Hr,nAe),e(nAe,fYr),e(Hr,mYr),e(Hr,Sn),e(Sn,gYr),e(Sn,sAe),e(sAe,hYr),e(Sn,pYr),e(Sn,lAe),e(lAe,_Yr),e(Sn,uYr),e(Sn,iAe),e(iAe,bYr),e(Sn,vYr),e(Hr,FYr),e(Hr,xe),e(xe,R0),e(R0,dAe),e(dAe,TYr),e(R0,MYr),e(R0,Pre),e(Pre,EYr),e(R0,CYr),e(xe,wYr),e(xe,P0),e(P0,cAe),e(cAe,AYr),e(P0,LYr),e(P0,Bre),e(Bre,yYr),e(P0,xYr),e(xe,$Yr),e(xe,B0),e(B0,fAe),e(fAe,kYr),e(B0,SYr),e(B0,Ire),e(Ire,RYr),e(B0,PYr),e(xe,BYr),e(xe,I0),e(I0,mAe),e(mAe,IYr),e(I0,NYr),e(I0,Nre),e(Nre,qYr),e(I0,jYr),e(xe,DYr),e(xe,N0),e(N0,gAe),e(gAe,GYr),e(N0,OYr),e(N0,qre),e(qre,VYr),e(N0,XYr),e(xe,zYr),e(xe,q0),e(q0,hAe),e(hAe,WYr),e(q0,QYr),e(q0,jre),e(jre,UYr),e(q0,HYr),e(xe,JYr),e(xe,j0),e(j0,pAe),e(pAe,YYr),e(j0,KYr),e(j0,Dre),e(Dre,ZYr),e(j0,eKr),e(xe,oKr),e(xe,D0),e(D0,_Ae),e(_Ae,rKr),e(D0,tKr),e(D0,Gre),e(Gre,aKr),e(D0,nKr),e(xe,sKr),e(xe,G0),e(G0,uAe),e(uAe,lKr),e(G0,iKr),e(G0,Ore),e(Ore,dKr),e(G0,cKr),e(xe,fKr),e(xe,O0),e(O0,bAe),e(bAe,mKr),e(O0,gKr),e(O0,Vre),e(Vre,hKr),e(O0,pKr),e(Hr,_Kr),M(V0,Hr,null),b(f,xHe,u),b(f,Tf,u),e(Tf,X0),e(X0,vAe),M(Nk,vAe,null),e(Tf,uKr),e(Tf,FAe),e(FAe,bKr),b(f,$He,u),b(f,Tr,u),M(qk,Tr,null),e(Tr,vKr),e(Tr,Mf),e(Mf,FKr),e(Mf,Xre),e(Xre,TKr),e(Mf,MKr),e(Mf,zre),e(zre,EKr),e(Mf,CKr),e(Tr,wKr),e(Tr,jk),e(jk,AKr),e(jk,TAe),e(TAe,LKr),e(jk,yKr),e(Tr,xKr),e(Tr,oa),M(Dk,oa,null),e(oa,$Kr),e(oa,MAe),e(MAe,kKr),e(oa,SKr),e(oa,Ef),e(Ef,RKr),e(Ef,EAe),e(EAe,PKr),e(Ef,BKr),e(Ef,Wre),e(Wre,IKr),e(Ef,NKr),e(oa,qKr),M(z0,oa,null),e(Tr,jKr),e(Tr,Jr),M(Gk,Jr,null),e(Jr,DKr),e(Jr,CAe),e(CAe,GKr),e(Jr,OKr),e(Jr,Rn),e(Rn,VKr),e(Rn,wAe),e(wAe,XKr),e(Rn,zKr),e(Rn,AAe),e(AAe,WKr),e(Rn,QKr),e(Rn,LAe),e(LAe,UKr),e(Rn,HKr),e(Jr,JKr),e(Jr,Ee),e(Ee,W0),e(W0,yAe),e(yAe,YKr),e(W0,KKr),e(W0,Qre),e(Qre,ZKr),e(W0,eZr),e(Ee,oZr),e(Ee,Q0),e(Q0,xAe),e(xAe,rZr),e(Q0,tZr),e(Q0,Ure),e(Ure,aZr),e(Q0,nZr),e(Ee,sZr),e(Ee,U0),e(U0,$Ae),e($Ae,lZr),e(U0,iZr),e(U0,Hre),e(Hre,dZr),e(U0,cZr),e(Ee,fZr),e(Ee,H0),e(H0,kAe),e(kAe,mZr),e(H0,gZr),e(H0,Jre),e(Jre,hZr),e(H0,pZr),e(Ee,_Zr),e(Ee,J0),e(J0,SAe),e(SAe,uZr),e(J0,bZr),e(J0,Yre),e(Yre,vZr),e(J0,FZr),e(Ee,TZr),e(Ee,Y0),e(Y0,RAe),e(RAe,MZr),e(Y0,EZr),e(Y0,Kre),e(Kre,CZr),e(Y0,wZr),e(Ee,AZr),e(Ee,K0),e(K0,PAe),e(PAe,LZr),e(K0,yZr),e(K0,Zre),e(Zre,xZr),e(K0,$Zr),e(Ee,kZr),e(Ee,Z0),e(Z0,BAe),e(BAe,SZr),e(Z0,RZr),e(Z0,ete),e(ete,PZr),e(Z0,BZr),e(Ee,IZr),e(Ee,ew),e(ew,IAe),e(IAe,NZr),e(ew,qZr),e(ew,ote),e(ote,jZr),e(ew,DZr),e(Ee,GZr),e(Ee,ow),e(ow,NAe),e(NAe,OZr),e(ow,VZr),e(ow,rte),e(rte,XZr),e(ow,zZr),e(Ee,WZr),e(Ee,rw),e(rw,qAe),e(qAe,QZr),e(rw,UZr),e(rw,tte),e(tte,HZr),e(rw,JZr),e(Ee,YZr),e(Ee,tw),e(tw,jAe),e(jAe,KZr),e(tw,ZZr),e(tw,ate),e(ate,eet),e(tw,oet),e(Ee,ret),e(Ee,aw),e(aw,DAe),e(DAe,tet),e(aw,aet),e(aw,nte),e(nte,net),e(aw,set),e(Jr,iet),M(nw,Jr,null),b(f,kHe,u),b(f,Cf,u),e(Cf,sw),e(sw,GAe),M(Ok,GAe,null),e(Cf,det),e(Cf,OAe),e(OAe,cet),b(f,SHe,u),b(f,Mr,u),M(Vk,Mr,null),e(Mr,fet),e(Mr,wf),e(wf,met),e(wf,ste),e(ste,get),e(wf,het),e(wf,lte),e(lte,pet),e(wf,_et),e(Mr,uet),e(Mr,Xk),e(Xk,bet),e(Xk,VAe),e(VAe,vet),e(Xk,Fet),e(Mr,Tet),e(Mr,ra),M(zk,ra,null),e(ra,Met),e(ra,XAe),e(XAe,Eet),e(ra,Cet),e(ra,Af),e(Af,wet),e(Af,zAe),e(zAe,Aet),e(Af,Let),e(Af,ite),e(ite,yet),e(Af,xet),e(ra,$et),M(lw,ra,null),e(Mr,ket),e(Mr,Yr),M(Wk,Yr,null),e(Yr,Set),e(Yr,WAe),e(WAe,Ret),e(Yr,Pet),e(Yr,Pn),e(Pn,Bet),e(Pn,QAe),e(QAe,Iet),e(Pn,Net),e(Pn,UAe),e(UAe,qet),e(Pn,jet),e(Pn,HAe),e(HAe,Det),e(Pn,Get),e(Yr,Oet),e(Yr,$e),e($e,iw),e(iw,JAe),e(JAe,Vet),e(iw,Xet),e(iw,dte),e(dte,zet),e(iw,Wet),e($e,Qet),e($e,dw),e(dw,YAe),e(YAe,Uet),e(dw,Het),e(dw,cte),e(cte,Jet),e(dw,Yet),e($e,Ket),e($e,cw),e(cw,KAe),e(KAe,Zet),e(cw,eot),e(cw,fte),e(fte,oot),e(cw,rot),e($e,tot),e($e,fw),e(fw,ZAe),e(ZAe,aot),e(fw,not),e(fw,mte),e(mte,sot),e(fw,lot),e($e,iot),e($e,mw),e(mw,e7e),e(e7e,dot),e(mw,cot),e(mw,gte),e(gte,fot),e(mw,mot),e($e,got),e($e,gw),e(gw,o7e),e(o7e,hot),e(gw,pot),e(gw,hte),e(hte,_ot),e(gw,uot),e($e,bot),e($e,hw),e(hw,r7e),e(r7e,vot),e(hw,Fot),e(hw,pte),e(pte,Tot),e(hw,Mot),e($e,Eot),e($e,pw),e(pw,t7e),e(t7e,Cot),e(pw,wot),e(pw,_te),e(_te,Aot),e(pw,Lot),e($e,yot),e($e,_w),e(_w,a7e),e(a7e,xot),e(_w,$ot),e(_w,ute),e(ute,kot),e(_w,Sot),e($e,Rot),e($e,uw),e(uw,n7e),e(n7e,Pot),e(uw,Bot),e(uw,bte),e(bte,Iot),e(uw,Not),e(Yr,qot),M(bw,Yr,null),b(f,RHe,u),b(f,Lf,u),e(Lf,vw),e(vw,s7e),M(Qk,s7e,null),e(Lf,jot),e(Lf,l7e),e(l7e,Dot),b(f,PHe,u),b(f,Er,u),M(Uk,Er,null),e(Er,Got),e(Er,yf),e(yf,Oot),e(yf,vte),e(vte,Vot),e(yf,Xot),e(yf,Fte),e(Fte,zot),e(yf,Wot),e(Er,Qot),e(Er,Hk),e(Hk,Uot),e(Hk,i7e),e(i7e,Hot),e(Hk,Jot),e(Er,Yot),e(Er,ta),M(Jk,ta,null),e(ta,Kot),e(ta,d7e),e(d7e,Zot),e(ta,ert),e(ta,xf),e(xf,ort),e(xf,c7e),e(c7e,rrt),e(xf,trt),e(xf,Tte),e(Tte,art),e(xf,nrt),e(ta,srt),M(Fw,ta,null),e(Er,lrt),e(Er,Kr),M(Yk,Kr,null),e(Kr,irt),e(Kr,f7e),e(f7e,drt),e(Kr,crt),e(Kr,Bn),e(Bn,frt),e(Bn,m7e),e(m7e,mrt),e(Bn,grt),e(Bn,g7e),e(g7e,hrt),e(Bn,prt),e(Bn,h7e),e(h7e,_rt),e(Bn,urt),e(Kr,brt),e(Kr,ke),e(ke,Tw),e(Tw,p7e),e(p7e,vrt),e(Tw,Frt),e(Tw,Mte),e(Mte,Trt),e(Tw,Mrt),e(ke,Ert),e(ke,Mw),e(Mw,_7e),e(_7e,Crt),e(Mw,wrt),e(Mw,Ete),e(Ete,Art),e(Mw,Lrt),e(ke,yrt),e(ke,Ew),e(Ew,u7e),e(u7e,xrt),e(Ew,$rt),e(Ew,Cte),e(Cte,krt),e(Ew,Srt),e(ke,Rrt),e(ke,Cw),e(Cw,b7e),e(b7e,Prt),e(Cw,Brt),e(Cw,wte),e(wte,Irt),e(Cw,Nrt),e(ke,qrt),e(ke,ww),e(ww,v7e),e(v7e,jrt),e(ww,Drt),e(ww,Ate),e(Ate,Grt),e(ww,Ort),e(ke,Vrt),e(ke,Aw),e(Aw,F7e),e(F7e,Xrt),e(Aw,zrt),e(Aw,Lte),e(Lte,Wrt),e(Aw,Qrt),e(ke,Urt),e(ke,Lw),e(Lw,T7e),e(T7e,Hrt),e(Lw,Jrt),e(Lw,yte),e(yte,Yrt),e(Lw,Krt),e(ke,Zrt),e(ke,yw),e(yw,M7e),e(M7e,ett),e(yw,ott),e(yw,xte),e(xte,rtt),e(yw,ttt),e(ke,att),e(ke,xw),e(xw,E7e),e(E7e,ntt),e(xw,stt),e(xw,$te),e($te,ltt),e(xw,itt),e(ke,dtt),e(ke,$w),e($w,C7e),e(C7e,ctt),e($w,ftt),e($w,kte),e(kte,mtt),e($w,gtt),e(Kr,htt),M(kw,Kr,null),b(f,BHe,u),b(f,$f,u),e($f,Sw),e(Sw,w7e),M(Kk,w7e,null),e($f,ptt),e($f,A7e),e(A7e,_tt),b(f,IHe,u),b(f,Cr,u),M(Zk,Cr,null),e(Cr,utt),e(Cr,kf),e(kf,btt),e(kf,Ste),e(Ste,vtt),e(kf,Ftt),e(kf,Rte),e(Rte,Ttt),e(kf,Mtt),e(Cr,Ett),e(Cr,eS),e(eS,Ctt),e(eS,L7e),e(L7e,wtt),e(eS,Att),e(Cr,Ltt),e(Cr,aa),M(oS,aa,null),e(aa,ytt),e(aa,y7e),e(y7e,xtt),e(aa,$tt),e(aa,Sf),e(Sf,ktt),e(Sf,x7e),e(x7e,Stt),e(Sf,Rtt),e(Sf,Pte),e(Pte,Ptt),e(Sf,Btt),e(aa,Itt),M(Rw,aa,null),e(Cr,Ntt),e(Cr,Zr),M(rS,Zr,null),e(Zr,qtt),e(Zr,$7e),e($7e,jtt),e(Zr,Dtt),e(Zr,In),e(In,Gtt),e(In,k7e),e(k7e,Ott),e(In,Vtt),e(In,S7e),e(S7e,Xtt),e(In,ztt),e(In,R7e),e(R7e,Wtt),e(In,Qtt),e(Zr,Utt),e(Zr,Se),e(Se,Pw),e(Pw,P7e),e(P7e,Htt),e(Pw,Jtt),e(Pw,Bte),e(Bte,Ytt),e(Pw,Ktt),e(Se,Ztt),e(Se,Bw),e(Bw,B7e),e(B7e,eat),e(Bw,oat),e(Bw,Ite),e(Ite,rat),e(Bw,tat),e(Se,aat),e(Se,Iw),e(Iw,I7e),e(I7e,nat),e(Iw,sat),e(Iw,Nte),e(Nte,lat),e(Iw,iat),e(Se,dat),e(Se,Nw),e(Nw,N7e),e(N7e,cat),e(Nw,fat),e(Nw,qte),e(qte,mat),e(Nw,gat),e(Se,hat),e(Se,qw),e(qw,q7e),e(q7e,pat),e(qw,_at),e(qw,jte),e(jte,uat),e(qw,bat),e(Se,vat),e(Se,jw),e(jw,j7e),e(j7e,Fat),e(jw,Tat),e(jw,Dte),e(Dte,Mat),e(jw,Eat),e(Se,Cat),e(Se,Dw),e(Dw,D7e),e(D7e,wat),e(Dw,Aat),e(Dw,Gte),e(Gte,Lat),e(Dw,yat),e(Se,xat),e(Se,Gw),e(Gw,G7e),e(G7e,$at),e(Gw,kat),e(Gw,Ote),e(Ote,Sat),e(Gw,Rat),e(Se,Pat),e(Se,Ow),e(Ow,O7e),e(O7e,Bat),e(Ow,Iat),e(Ow,Vte),e(Vte,Nat),e(Ow,qat),e(Se,jat),e(Se,Vw),e(Vw,V7e),e(V7e,Dat),e(Vw,Gat),e(Vw,Xte),e(Xte,Oat),e(Vw,Vat),e(Zr,Xat),M(Xw,Zr,null),b(f,NHe,u),b(f,Rf,u),e(Rf,zw),e(zw,X7e),M(tS,X7e,null),e(Rf,zat),e(Rf,z7e),e(z7e,Wat),b(f,qHe,u),b(f,wr,u),M(aS,wr,null),e(wr,Qat),e(wr,Pf),e(Pf,Uat),e(Pf,zte),e(zte,Hat),e(Pf,Jat),e(Pf,Wte),e(Wte,Yat),e(Pf,Kat),e(wr,Zat),e(wr,nS),e(nS,ent),e(nS,W7e),e(W7e,ont),e(nS,rnt),e(wr,tnt),e(wr,na),M(sS,na,null),e(na,ant),e(na,Q7e),e(Q7e,nnt),e(na,snt),e(na,Bf),e(Bf,lnt),e(Bf,U7e),e(U7e,int),e(Bf,dnt),e(Bf,Qte),e(Qte,cnt),e(Bf,fnt),e(na,mnt),M(Ww,na,null),e(wr,gnt),e(wr,et),M(lS,et,null),e(et,hnt),e(et,H7e),e(H7e,pnt),e(et,_nt),e(et,Nn),e(Nn,unt),e(Nn,J7e),e(J7e,bnt),e(Nn,vnt),e(Nn,Y7e),e(Y7e,Fnt),e(Nn,Tnt),e(Nn,K7e),e(K7e,Mnt),e(Nn,Ent),e(et,Cnt),e(et,Re),e(Re,Qw),e(Qw,Z7e),e(Z7e,wnt),e(Qw,Ant),e(Qw,Ute),e(Ute,Lnt),e(Qw,ynt),e(Re,xnt),e(Re,Uw),e(Uw,eLe),e(eLe,$nt),e(Uw,knt),e(Uw,Hte),e(Hte,Snt),e(Uw,Rnt),e(Re,Pnt),e(Re,Hw),e(Hw,oLe),e(oLe,Bnt),e(Hw,Int),e(Hw,Jte),e(Jte,Nnt),e(Hw,qnt),e(Re,jnt),e(Re,Jw),e(Jw,rLe),e(rLe,Dnt),e(Jw,Gnt),e(Jw,Yte),e(Yte,Ont),e(Jw,Vnt),e(Re,Xnt),e(Re,Yw),e(Yw,tLe),e(tLe,znt),e(Yw,Wnt),e(Yw,Kte),e(Kte,Qnt),e(Yw,Unt),e(Re,Hnt),e(Re,Kw),e(Kw,aLe),e(aLe,Jnt),e(Kw,Ynt),e(Kw,Zte),e(Zte,Knt),e(Kw,Znt),e(Re,est),e(Re,Zw),e(Zw,nLe),e(nLe,ost),e(Zw,rst),e(Zw,eae),e(eae,tst),e(Zw,ast),e(Re,nst),e(Re,eA),e(eA,sLe),e(sLe,sst),e(eA,lst),e(eA,oae),e(oae,ist),e(eA,dst),e(Re,cst),e(Re,oA),e(oA,lLe),e(lLe,fst),e(oA,mst),e(oA,rae),e(rae,gst),e(oA,hst),e(Re,pst),e(Re,rA),e(rA,iLe),e(iLe,_st),e(rA,ust),e(rA,tae),e(tae,bst),e(rA,vst),e(et,Fst),M(tA,et,null),b(f,jHe,u),b(f,If,u),e(If,aA),e(aA,dLe),M(iS,dLe,null),e(If,Tst),e(If,cLe),e(cLe,Mst),b(f,DHe,u),b(f,Ar,u),M(dS,Ar,null),e(Ar,Est),e(Ar,Nf),e(Nf,Cst),e(Nf,aae),e(aae,wst),e(Nf,Ast),e(Nf,nae),e(nae,Lst),e(Nf,yst),e(Ar,xst),e(Ar,cS),e(cS,$st),e(cS,fLe),e(fLe,kst),e(cS,Sst),e(Ar,Rst),e(Ar,sa),M(fS,sa,null),e(sa,Pst),e(sa,mLe),e(mLe,Bst),e(sa,Ist),e(sa,qf),e(qf,Nst),e(qf,gLe),e(gLe,qst),e(qf,jst),e(qf,sae),e(sae,Dst),e(qf,Gst),e(sa,Ost),M(nA,sa,null),e(Ar,Vst),e(Ar,ot),M(mS,ot,null),e(ot,Xst),e(ot,hLe),e(hLe,zst),e(ot,Wst),e(ot,qn),e(qn,Qst),e(qn,pLe),e(pLe,Ust),e(qn,Hst),e(qn,_Le),e(_Le,Jst),e(qn,Yst),e(qn,uLe),e(uLe,Kst),e(qn,Zst),e(ot,elt),e(ot,Xe),e(Xe,sA),e(sA,bLe),e(bLe,olt),e(sA,rlt),e(sA,lae),e(lae,tlt),e(sA,alt),e(Xe,nlt),e(Xe,lA),e(lA,vLe),e(vLe,slt),e(lA,llt),e(lA,iae),e(iae,ilt),e(lA,dlt),e(Xe,clt),e(Xe,iA),e(iA,FLe),e(FLe,flt),e(iA,mlt),e(iA,dae),e(dae,glt),e(iA,hlt),e(Xe,plt),e(Xe,dA),e(dA,TLe),e(TLe,_lt),e(dA,ult),e(dA,cae),e(cae,blt),e(dA,vlt),e(Xe,Flt),e(Xe,cA),e(cA,MLe),e(MLe,Tlt),e(cA,Mlt),e(cA,fae),e(fae,Elt),e(cA,Clt),e(Xe,wlt),e(Xe,fA),e(fA,ELe),e(ELe,Alt),e(fA,Llt),e(fA,mae),e(mae,ylt),e(fA,xlt),e(Xe,$lt),e(Xe,mA),e(mA,CLe),e(CLe,klt),e(mA,Slt),e(mA,gae),e(gae,Rlt),e(mA,Plt),e(Xe,Blt),e(Xe,gA),e(gA,wLe),e(wLe,Ilt),e(gA,Nlt),e(gA,hae),e(hae,qlt),e(gA,jlt),e(ot,Dlt),M(hA,ot,null),b(f,GHe,u),b(f,jf,u),e(jf,pA),e(pA,ALe),M(gS,ALe,null),e(jf,Glt),e(jf,LLe),e(LLe,Olt),b(f,OHe,u),b(f,Lr,u),M(hS,Lr,null),e(Lr,Vlt),e(Lr,Df),e(Df,Xlt),e(Df,pae),e(pae,zlt),e(Df,Wlt),e(Df,_ae),e(_ae,Qlt),e(Df,Ult),e(Lr,Hlt),e(Lr,pS),e(pS,Jlt),e(pS,yLe),e(yLe,Ylt),e(pS,Klt),e(Lr,Zlt),e(Lr,la),M(_S,la,null),e(la,eit),e(la,xLe),e(xLe,oit),e(la,rit),e(la,Gf),e(Gf,tit),e(Gf,$Le),e($Le,ait),e(Gf,nit),e(Gf,uae),e(uae,sit),e(Gf,lit),e(la,iit),M(_A,la,null),e(Lr,dit),e(Lr,rt),M(uS,rt,null),e(rt,cit),e(rt,kLe),e(kLe,fit),e(rt,mit),e(rt,jn),e(jn,git),e(jn,SLe),e(SLe,hit),e(jn,pit),e(jn,RLe),e(RLe,_it),e(jn,uit),e(jn,PLe),e(PLe,bit),e(jn,vit),e(rt,Fit),e(rt,ze),e(ze,uA),e(uA,BLe),e(BLe,Tit),e(uA,Mit),e(uA,bae),e(bae,Eit),e(uA,Cit),e(ze,wit),e(ze,bA),e(bA,ILe),e(ILe,Ait),e(bA,Lit),e(bA,vae),e(vae,yit),e(bA,xit),e(ze,$it),e(ze,vA),e(vA,NLe),e(NLe,kit),e(vA,Sit),e(vA,Fae),e(Fae,Rit),e(vA,Pit),e(ze,Bit),e(ze,FA),e(FA,qLe),e(qLe,Iit),e(FA,Nit),e(FA,Tae),e(Tae,qit),e(FA,jit),e(ze,Dit),e(ze,TA),e(TA,jLe),e(jLe,Git),e(TA,Oit),e(TA,Mae),e(Mae,Vit),e(TA,Xit),e(ze,zit),e(ze,MA),e(MA,DLe),e(DLe,Wit),e(MA,Qit),e(MA,Eae),e(Eae,Uit),e(MA,Hit),e(ze,Jit),e(ze,EA),e(EA,GLe),e(GLe,Yit),e(EA,Kit),e(EA,Cae),e(Cae,Zit),e(EA,edt),e(ze,odt),e(ze,CA),e(CA,OLe),e(OLe,rdt),e(CA,tdt),e(CA,wae),e(wae,adt),e(CA,ndt),e(rt,sdt),M(wA,rt,null),b(f,VHe,u),b(f,Of,u),e(Of,AA),e(AA,VLe),M(bS,VLe,null),e(Of,ldt),e(Of,XLe),e(XLe,idt),b(f,XHe,u),b(f,yr,u),M(vS,yr,null),e(yr,ddt),e(yr,Vf),e(Vf,cdt),e(Vf,Aae),e(Aae,fdt),e(Vf,mdt),e(Vf,Lae),e(Lae,gdt),e(Vf,hdt),e(yr,pdt),e(yr,FS),e(FS,_dt),e(FS,zLe),e(zLe,udt),e(FS,bdt),e(yr,vdt),e(yr,ia),M(TS,ia,null),e(ia,Fdt),e(ia,WLe),e(WLe,Tdt),e(ia,Mdt),e(ia,Xf),e(Xf,Edt),e(Xf,QLe),e(QLe,Cdt),e(Xf,wdt),e(Xf,yae),e(yae,Adt),e(Xf,Ldt),e(ia,ydt),M(LA,ia,null),e(yr,xdt),e(yr,tt),M(MS,tt,null),e(tt,$dt),e(tt,ULe),e(ULe,kdt),e(tt,Sdt),e(tt,Dn),e(Dn,Rdt),e(Dn,HLe),e(HLe,Pdt),e(Dn,Bdt),e(Dn,JLe),e(JLe,Idt),e(Dn,Ndt),e(Dn,YLe),e(YLe,qdt),e(Dn,jdt),e(tt,Ddt),e(tt,KLe),e(KLe,yA),e(yA,ZLe),e(ZLe,Gdt),e(yA,Odt),e(yA,xae),e(xae,Vdt),e(yA,Xdt),e(tt,zdt),M(xA,tt,null),b(f,zHe,u),b(f,zf,u),e(zf,$A),e($A,eye),M(ES,eye,null),e(zf,Wdt),e(zf,oye),e(oye,Qdt),b(f,WHe,u),b(f,xr,u),M(CS,xr,null),e(xr,Udt),e(xr,Wf),e(Wf,Hdt),e(Wf,$ae),e($ae,Jdt),e(Wf,Ydt),e(Wf,kae),e(kae,Kdt),e(Wf,Zdt),e(xr,ect),e(xr,wS),e(wS,oct),e(wS,rye),e(rye,rct),e(wS,tct),e(xr,act),e(xr,da),M(AS,da,null),e(da,nct),e(da,tye),e(tye,sct),e(da,lct),e(da,Qf),e(Qf,ict),e(Qf,aye),e(aye,dct),e(Qf,cct),e(Qf,Sae),e(Sae,fct),e(Qf,mct),e(da,gct),M(kA,da,null),e(xr,hct),e(xr,at),M(LS,at,null),e(at,pct),e(at,nye),e(nye,_ct),e(at,uct),e(at,Gn),e(Gn,bct),e(Gn,sye),e(sye,vct),e(Gn,Fct),e(Gn,lye),e(lye,Tct),e(Gn,Mct),e(Gn,iye),e(iye,Ect),e(Gn,Cct),e(at,wct),e(at,yS),e(yS,SA),e(SA,dye),e(dye,Act),e(SA,Lct),e(SA,Rae),e(Rae,yct),e(SA,xct),e(yS,$ct),e(yS,RA),e(RA,cye),e(cye,kct),e(RA,Sct),e(RA,Pae),e(Pae,Rct),e(RA,Pct),e(at,Bct),M(PA,at,null),b(f,QHe,u),b(f,Uf,u),e(Uf,BA),e(BA,fye),M(xS,fye,null),e(Uf,Ict),e(Uf,mye),e(mye,Nct),b(f,UHe,u),b(f,$r,u),M($S,$r,null),e($r,qct),e($r,Hf),e(Hf,jct),e(Hf,Bae),e(Bae,Dct),e(Hf,Gct),e(Hf,Iae),e(Iae,Oct),e(Hf,Vct),e($r,Xct),e($r,kS),e(kS,zct),e(kS,gye),e(gye,Wct),e(kS,Qct),e($r,Uct),e($r,ca),M(SS,ca,null),e(ca,Hct),e(ca,hye),e(hye,Jct),e(ca,Yct),e(ca,Jf),e(Jf,Kct),e(Jf,pye),e(pye,Zct),e(Jf,eft),e(Jf,Nae),e(Nae,oft),e(Jf,rft),e(ca,tft),M(IA,ca,null),e($r,aft),e($r,nt),M(RS,nt,null),e(nt,nft),e(nt,_ye),e(_ye,sft),e(nt,lft),e(nt,On),e(On,ift),e(On,uye),e(uye,dft),e(On,cft),e(On,bye),e(bye,fft),e(On,mft),e(On,vye),e(vye,gft),e(On,hft),e(nt,pft),e(nt,Fye),e(Fye,NA),e(NA,Tye),e(Tye,_ft),e(NA,uft),e(NA,qae),e(qae,bft),e(NA,vft),e(nt,Fft),M(qA,nt,null),HHe=!0},p(f,[u]){const PS={};u&2&&(PS.$$scope={dirty:u,ctx:f}),nm.$set(PS);const Mye={};u&2&&(Mye.$$scope={dirty:u,ctx:f}),Th.$set(Mye);const Eye={};u&2&&(Eye.$$scope={dirty:u,ctx:f}),tp.$set(Eye);const Cye={};u&2&&(Cye.$$scope={dirty:u,ctx:f}),Xp.$set(Cye);const BS={};u&2&&(BS.$$scope={dirty:u,ctx:f}),zp.$set(BS);const wye={};u&2&&(wye.$$scope={dirty:u,ctx:f}),h_.$set(wye);const Vn={};u&2&&(Vn.$$scope={dirty:u,ctx:f}),p_.$set(Vn);const Aye={};u&2&&(Aye.$$scope={dirty:u,ctx:f}),b_.$set(Aye);const Lye={};u&2&&(Lye.$$scope={dirty:u,ctx:f}),L1.$set(Lye);const yye={};u&2&&(yye.$$scope={dirty:u,ctx:f}),x1.$set(yye);const IS={};u&2&&(IS.$$scope={dirty:u,ctx:f}),C6.$set(IS);const xye={};u&2&&(xye.$$scope={dirty:u,ctx:f}),A6.$set(xye);const NS={};u&2&&(NS.$$scope={dirty:u,ctx:f}),h8.$set(NS);const $ye={};u&2&&($ye.$$scope={dirty:u,ctx:f}),_8.$set($ye);const qS={};u&2&&(qS.$$scope={dirty:u,ctx:f}),r2.$set(qS);const kye={};u&2&&(kye.$$scope={dirty:u,ctx:f}),a2.$set(kye);const Sye={};u&2&&(Sye.$$scope={dirty:u,ctx:f}),w2.$set(Sye);const Rye={};u&2&&(Rye.$$scope={dirty:u,ctx:f}),L2.$set(Rye);const Yf={};u&2&&(Yf.$$scope={dirty:u,ctx:f}),Lb.$set(Yf);const Pye={};u&2&&(Pye.$$scope={dirty:u,ctx:f}),xb.$set(Pye);const Bye={};u&2&&(Bye.$$scope={dirty:u,ctx:f}),iv.$set(Bye);const Iye={};u&2&&(Iye.$$scope={dirty:u,ctx:f}),cv.$set(Iye);const jS={};u&2&&(jS.$$scope={dirty:u,ctx:f}),bv.$set(jS);const Nye={};u&2&&(Nye.$$scope={dirty:u,ctx:f}),Fv.$set(Nye);const qye={};u&2&&(qye.$$scope={dirty:u,ctx:f}),nF.$set(qye);const jye={};u&2&&(jye.$$scope={dirty:u,ctx:f}),lF.$set(jye);const dt={};u&2&&(dt.$$scope={dirty:u,ctx:f}),KF.$set(dt);const DS={};u&2&&(DS.$$scope={dirty:u,ctx:f}),eT.$set(DS);const Dye={};u&2&&(Dye.$$scope={dirty:u,ctx:f}),tT.$set(Dye);const GS={};u&2&&(GS.$$scope={dirty:u,ctx:f}),nT.$set(GS);const Gye={};u&2&&(Gye.$$scope={dirty:u,ctx:f}),TT.$set(Gye);const ct={};u&2&&(ct.$$scope={dirty:u,ctx:f}),ET.$set(ct);const Oye={};u&2&&(Oye.$$scope={dirty:u,ctx:f}),AT.$set(Oye);const Kf={};u&2&&(Kf.$$scope={dirty:u,ctx:f}),yT.$set(Kf);const Vye={};u&2&&(Vye.$$scope={dirty:u,ctx:f}),kT.$set(Vye);const Xye={};u&2&&(Xye.$$scope={dirty:u,ctx:f}),RT.$set(Xye);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),IT.$set(L);const jA={};u&2&&(jA.$$scope={dirty:u,ctx:f}),qT.$set(jA);const zye={};u&2&&(zye.$$scope={dirty:u,ctx:f}),HT.$set(zye);const Wye={};u&2&&(Wye.$$scope={dirty:u,ctx:f}),YT.$set(Wye);const DA={};u&2&&(DA.$$scope={dirty:u,ctx:f}),aM.$set(DA);const Qye={};u&2&&(Qye.$$scope={dirty:u,ctx:f}),sM.$set(Qye);const Uye={};u&2&&(Uye.$$scope={dirty:u,ctx:f}),bM.$set(Uye);const GA={};u&2&&(GA.$$scope={dirty:u,ctx:f}),FM.$set(GA);const Hye={};u&2&&(Hye.$$scope={dirty:u,ctx:f}),CM.$set(Hye);const Jye={};u&2&&(Jye.$$scope={dirty:u,ctx:f}),AM.$set(Jye);const OA={};u&2&&(OA.$$scope={dirty:u,ctx:f}),RM.$set(OA);const Yye={};u&2&&(Yye.$$scope={dirty:u,ctx:f}),BM.$set(Yye);const Kye={};u&2&&(Kye.$$scope={dirty:u,ctx:f}),GM.$set(Kye);const VA={};u&2&&(VA.$$scope={dirty:u,ctx:f}),VM.$set(VA);const Zye={};u&2&&(Zye.$$scope={dirty:u,ctx:f}),QM.$set(Zye);const e9e={};u&2&&(e9e.$$scope={dirty:u,ctx:f}),HM.$set(e9e);const XA={};u&2&&(XA.$$scope={dirty:u,ctx:f}),KM.$set(XA);const o9e={};u&2&&(o9e.$$scope={dirty:u,ctx:f}),eE.$set(o9e);const r9e={};u&2&&(r9e.$$scope={dirty:u,ctx:f}),lE.$set(r9e);const zA={};u&2&&(zA.$$scope={dirty:u,ctx:f}),dE.$set(zA);const t9e={};u&2&&(t9e.$$scope={dirty:u,ctx:f}),mE.$set(t9e);const a9e={};u&2&&(a9e.$$scope={dirty:u,ctx:f}),hE.$set(a9e);const WA={};u&2&&(WA.$$scope={dirty:u,ctx:f}),f4.$set(WA);const n9e={};u&2&&(n9e.$$scope={dirty:u,ctx:f}),g4.$set(n9e);const s9e={};u&2&&(s9e.$$scope={dirty:u,ctx:f}),N4.$set(s9e);const QA={};u&2&&(QA.$$scope={dirty:u,ctx:f}),j4.$set(QA);const l9e={};u&2&&(l9e.$$scope={dirty:u,ctx:f}),Z4.$set(l9e);const i9e={};u&2&&(i9e.$$scope={dirty:u,ctx:f}),oC.$set(i9e);const UA={};u&2&&(UA.$$scope={dirty:u,ctx:f}),dC.$set(UA);const d9e={};u&2&&(d9e.$$scope={dirty:u,ctx:f}),fC.$set(d9e);const c9e={};u&2&&(c9e.$$scope={dirty:u,ctx:f}),hC.$set(c9e);const HA={};u&2&&(HA.$$scope={dirty:u,ctx:f}),_C.$set(HA);const f9e={};u&2&&(f9e.$$scope={dirty:u,ctx:f}),NC.$set(f9e);const m9e={};u&2&&(m9e.$$scope={dirty:u,ctx:f}),jC.$set(m9e);const JA={};u&2&&(JA.$$scope={dirty:u,ctx:f}),JC.$set(JA);const g9e={};u&2&&(g9e.$$scope={dirty:u,ctx:f}),KC.$set(g9e);const h9e={};u&2&&(h9e.$$scope={dirty:u,ctx:f}),w3.$set(h9e);const YA={};u&2&&(YA.$$scope={dirty:u,ctx:f}),L3.$set(YA);const p9e={};u&2&&(p9e.$$scope={dirty:u,ctx:f}),z3.$set(p9e);const _9e={};u&2&&(_9e.$$scope={dirty:u,ctx:f}),Q3.$set(_9e);const KA={};u&2&&(KA.$$scope={dirty:u,ctx:f}),J3.$set(KA);const u9e={};u&2&&(u9e.$$scope={dirty:u,ctx:f}),K3.$set(u9e);const b9e={};u&2&&(b9e.$$scope={dirty:u,ctx:f}),e5.$set(b9e);const ZA={};u&2&&(ZA.$$scope={dirty:u,ctx:f}),r5.$set(ZA);const v9e={};u&2&&(v9e.$$scope={dirty:u,ctx:f}),E5.$set(v9e);const F9e={};u&2&&(F9e.$$scope={dirty:u,ctx:f}),w5.$set(F9e);const e7={};u&2&&(e7.$$scope={dirty:u,ctx:f}),W5.$set(e7);const T9e={};u&2&&(T9e.$$scope={dirty:u,ctx:f}),U5.$set(T9e);const M9e={};u&2&&(M9e.$$scope={dirty:u,ctx:f}),J5.$set(M9e);const o7={};u&2&&(o7.$$scope={dirty:u,ctx:f}),K5.$set(o7);const E9e={};u&2&&(E9e.$$scope={dirty:u,ctx:f}),e0.$set(E9e);const C9e={};u&2&&(C9e.$$scope={dirty:u,ctx:f}),r0.$set(C9e);const r7={};u&2&&(r7.$$scope={dirty:u,ctx:f}),$0.$set(r7);const w9e={};u&2&&(w9e.$$scope={dirty:u,ctx:f}),S0.$set(w9e);const A9e={};u&2&&(A9e.$$scope={dirty:u,ctx:f}),V0.$set(A9e);const t7={};u&2&&(t7.$$scope={dirty:u,ctx:f}),z0.$set(t7);const L9e={};u&2&&(L9e.$$scope={dirty:u,ctx:f}),nw.$set(L9e);const y9e={};u&2&&(y9e.$$scope={dirty:u,ctx:f}),lw.$set(y9e);const a7={};u&2&&(a7.$$scope={dirty:u,ctx:f}),bw.$set(a7);const x9e={};u&2&&(x9e.$$scope={dirty:u,ctx:f}),Fw.$set(x9e);const $9e={};u&2&&($9e.$$scope={dirty:u,ctx:f}),kw.$set($9e);const n7={};u&2&&(n7.$$scope={dirty:u,ctx:f}),Rw.$set(n7);const k9e={};u&2&&(k9e.$$scope={dirty:u,ctx:f}),Xw.$set(k9e);const S9e={};u&2&&(S9e.$$scope={dirty:u,ctx:f}),Ww.$set(S9e);const s7={};u&2&&(s7.$$scope={dirty:u,ctx:f}),tA.$set(s7);const R9e={};u&2&&(R9e.$$scope={dirty:u,ctx:f}),nA.$set(R9e);const P9e={};u&2&&(P9e.$$scope={dirty:u,ctx:f}),hA.$set(P9e);const l7={};u&2&&(l7.$$scope={dirty:u,ctx:f}),_A.$set(l7);const B9e={};u&2&&(B9e.$$scope={dirty:u,ctx:f}),wA.$set(B9e);const I9e={};u&2&&(I9e.$$scope={dirty:u,ctx:f}),LA.$set(I9e);const i7={};u&2&&(i7.$$scope={dirty:u,ctx:f}),xA.$set(i7);const N9e={};u&2&&(N9e.$$scope={dirty:u,ctx:f}),kA.$set(N9e);const q9e={};u&2&&(q9e.$$scope={dirty:u,ctx:f}),PA.$set(q9e);const d7={};u&2&&(d7.$$scope={dirty:u,ctx:f}),IA.$set(d7);const j9e={};u&2&&(j9e.$$scope={dirty:u,ctx:f}),qA.$set(j9e)},i(f){HHe||(E(d.$$.fragment,f),E(ja.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(nm.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(vy.$$.fragment,f),E(Th.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(wy.$$.fragment,f),E(tp.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(yy.$$.fragment,f),E(ky.$$.fragment,f),E(Xp.$$.fragment,f),E(zp.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(Ny.$$.fragment,f),E(h_.$$.fragment,f),E(p_.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(b_.$$.fragment,f),E(Vy.$$.fragment,f),E(L1.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(x1.$$.fragment,f),E(Uy.$$.fragment,f),E(C6.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(A6.$$.fragment,f),E(Zy.$$.fragment,f),E(h8.$$.fragment,f),E(e9.$$.fragment,f),E(o9.$$.fragment,f),E(t9.$$.fragment,f),E(_8.$$.fragment,f),E(a9.$$.fragment,f),E(r2.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(a2.$$.fragment,f),E(d9.$$.fragment,f),E(w2.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(L2.$$.fragment,f),E(h9.$$.fragment,f),E(Lb.$$.fragment,f),E(p9.$$.fragment,f),E(_9.$$.fragment,f),E(b9.$$.fragment,f),E(xb.$$.fragment,f),E(v9.$$.fragment,f),E(iv.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(cv.$$.fragment,f),E(C9.$$.fragment,f),E(bv.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(y9.$$.fragment,f),E(Fv.$$.fragment,f),E(x9.$$.fragment,f),E(nF.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(lF.$$.fragment,f),E(P9.$$.fragment,f),E(KF.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(q9.$$.fragment,f),E(eT.$$.fragment,f),E(j9.$$.fragment,f),E(tT.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(nT.$$.fragment,f),E(X9.$$.fragment,f),E(TT.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(U9.$$.fragment,f),E(ET.$$.fragment,f),E(H9.$$.fragment,f),E(AT.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(yT.$$.fragment,f),E(ex.$$.fragment,f),E(kT.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(RT.$$.fragment,f),E(nx.$$.fragment,f),E(IT.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(qT.$$.fragment,f),E(cx.$$.fragment,f),E(HT.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(YT.$$.fragment,f),E(px.$$.fragment,f),E(aM.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(sM.$$.fragment,f),E(Fx.$$.fragment,f),E(bM.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(FM.$$.fragment,f),E(wx.$$.fragment,f),E(CM.$$.fragment,f),E(Lx.$$.fragment,f),E(yx.$$.fragment,f),E($x.$$.fragment,f),E(AM.$$.fragment,f),E(kx.$$.fragment,f),E(RM.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(BM.$$.fragment,f),E(Ix.$$.fragment,f),E(GM.$$.fragment,f),E(Nx.$$.fragment,f),E(qx.$$.fragment,f),E(Dx.$$.fragment,f),E(VM.$$.fragment,f),E(Gx.$$.fragment,f),E(QM.$$.fragment,f),E(Vx.$$.fragment,f),E(Xx.$$.fragment,f),E(Wx.$$.fragment,f),E(HM.$$.fragment,f),E(Qx.$$.fragment,f),E(KM.$$.fragment,f),E(Ux.$$.fragment,f),E(Hx.$$.fragment,f),E(Yx.$$.fragment,f),E(eE.$$.fragment,f),E(Kx.$$.fragment,f),E(lE.$$.fragment,f),E(Zx.$$.fragment,f),E(e$.$$.fragment,f),E(r$.$$.fragment,f),E(dE.$$.fragment,f),E(t$.$$.fragment,f),E(mE.$$.fragment,f),E(a$.$$.fragment,f),E(n$.$$.fragment,f),E(l$.$$.fragment,f),E(hE.$$.fragment,f),E(i$.$$.fragment,f),E(f4.$$.fragment,f),E(d$.$$.fragment,f),E(c$.$$.fragment,f),E(m$.$$.fragment,f),E(g4.$$.fragment,f),E(g$.$$.fragment,f),E(N4.$$.fragment,f),E(h$.$$.fragment,f),E(p$.$$.fragment,f),E(u$.$$.fragment,f),E(j4.$$.fragment,f),E(b$.$$.fragment,f),E(Z4.$$.fragment,f),E(v$.$$.fragment,f),E(F$.$$.fragment,f),E(M$.$$.fragment,f),E(oC.$$.fragment,f),E(E$.$$.fragment,f),E(dC.$$.fragment,f),E(C$.$$.fragment,f),E(w$.$$.fragment,f),E(L$.$$.fragment,f),E(fC.$$.fragment,f),E(y$.$$.fragment,f),E(hC.$$.fragment,f),E($$.$$.fragment,f),E(k$.$$.fragment,f),E(R$.$$.fragment,f),E(_C.$$.fragment,f),E(P$.$$.fragment,f),E(NC.$$.fragment,f),E(B$.$$.fragment,f),E(I$.$$.fragment,f),E(q$.$$.fragment,f),E(jC.$$.fragment,f),E(j$.$$.fragment,f),E(JC.$$.fragment,f),E(D$.$$.fragment,f),E(G$.$$.fragment,f),E(V$.$$.fragment,f),E(KC.$$.fragment,f),E(X$.$$.fragment,f),E(w3.$$.fragment,f),E(z$.$$.fragment,f),E(W$.$$.fragment,f),E(U$.$$.fragment,f),E(L3.$$.fragment,f),E(H$.$$.fragment,f),E(z3.$$.fragment,f),E(J$.$$.fragment,f),E(Y$.$$.fragment,f),E(Z$.$$.fragment,f),E(Q3.$$.fragment,f),E(ek.$$.fragment,f),E(J3.$$.fragment,f),E(rk.$$.fragment,f),E(tk.$$.fragment,f),E(nk.$$.fragment,f),E(K3.$$.fragment,f),E(sk.$$.fragment,f),E(e5.$$.fragment,f),E(lk.$$.fragment,f),E(ik.$$.fragment,f),E(ck.$$.fragment,f),E(r5.$$.fragment,f),E(fk.$$.fragment,f),E(E5.$$.fragment,f),E(mk.$$.fragment,f),E(gk.$$.fragment,f),E(pk.$$.fragment,f),E(w5.$$.fragment,f),E(_k.$$.fragment,f),E(W5.$$.fragment,f),E(uk.$$.fragment,f),E(bk.$$.fragment,f),E(Fk.$$.fragment,f),E(U5.$$.fragment,f),E(Tk.$$.fragment,f),E(J5.$$.fragment,f),E(Mk.$$.fragment,f),E(Ek.$$.fragment,f),E(wk.$$.fragment,f),E(K5.$$.fragment,f),E(Ak.$$.fragment,f),E(e0.$$.fragment,f),E(Lk.$$.fragment,f),E(yk.$$.fragment,f),E($k.$$.fragment,f),E(r0.$$.fragment,f),E(kk.$$.fragment,f),E($0.$$.fragment,f),E(Sk.$$.fragment,f),E(Rk.$$.fragment,f),E(Bk.$$.fragment,f),E(S0.$$.fragment,f),E(Ik.$$.fragment,f),E(V0.$$.fragment,f),E(Nk.$$.fragment,f),E(qk.$$.fragment,f),E(Dk.$$.fragment,f),E(z0.$$.fragment,f),E(Gk.$$.fragment,f),E(nw.$$.fragment,f),E(Ok.$$.fragment,f),E(Vk.$$.fragment,f),E(zk.$$.fragment,f),E(lw.$$.fragment,f),E(Wk.$$.fragment,f),E(bw.$$.fragment,f),E(Qk.$$.fragment,f),E(Uk.$$.fragment,f),E(Jk.$$.fragment,f),E(Fw.$$.fragment,f),E(Yk.$$.fragment,f),E(kw.$$.fragment,f),E(Kk.$$.fragment,f),E(Zk.$$.fragment,f),E(oS.$$.fragment,f),E(Rw.$$.fragment,f),E(rS.$$.fragment,f),E(Xw.$$.fragment,f),E(tS.$$.fragment,f),E(aS.$$.fragment,f),E(sS.$$.fragment,f),E(Ww.$$.fragment,f),E(lS.$$.fragment,f),E(tA.$$.fragment,f),E(iS.$$.fragment,f),E(dS.$$.fragment,f),E(fS.$$.fragment,f),E(nA.$$.fragment,f),E(mS.$$.fragment,f),E(hA.$$.fragment,f),E(gS.$$.fragment,f),E(hS.$$.fragment,f),E(_S.$$.fragment,f),E(_A.$$.fragment,f),E(uS.$$.fragment,f),E(wA.$$.fragment,f),E(bS.$$.fragment,f),E(vS.$$.fragment,f),E(TS.$$.fragment,f),E(LA.$$.fragment,f),E(MS.$$.fragment,f),E(xA.$$.fragment,f),E(ES.$$.fragment,f),E(CS.$$.fragment,f),E(AS.$$.fragment,f),E(kA.$$.fragment,f),E(LS.$$.fragment,f),E(PA.$$.fragment,f),E(xS.$$.fragment,f),E($S.$$.fragment,f),E(SS.$$.fragment,f),E(IA.$$.fragment,f),E(RS.$$.fragment,f),E(qA.$$.fragment,f),HHe=!0)},o(f){C(d.$$.fragment,f),C(ja.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(nm.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(vy.$$.fragment,f),C(Th.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(wy.$$.fragment,f),C(tp.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(yy.$$.fragment,f),C(ky.$$.fragment,f),C(Xp.$$.fragment,f),C(zp.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(Ny.$$.fragment,f),C(h_.$$.fragment,f),C(p_.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(b_.$$.fragment,f),C(Vy.$$.fragment,f),C(L1.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(x1.$$.fragment,f),C(Uy.$$.fragment,f),C(C6.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(A6.$$.fragment,f),C(Zy.$$.fragment,f),C(h8.$$.fragment,f),C(e9.$$.fragment,f),C(o9.$$.fragment,f),C(t9.$$.fragment,f),C(_8.$$.fragment,f),C(a9.$$.fragment,f),C(r2.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(a2.$$.fragment,f),C(d9.$$.fragment,f),C(w2.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(L2.$$.fragment,f),C(h9.$$.fragment,f),C(Lb.$$.fragment,f),C(p9.$$.fragment,f),C(_9.$$.fragment,f),C(b9.$$.fragment,f),C(xb.$$.fragment,f),C(v9.$$.fragment,f),C(iv.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(cv.$$.fragment,f),C(C9.$$.fragment,f),C(bv.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(y9.$$.fragment,f),C(Fv.$$.fragment,f),C(x9.$$.fragment,f),C(nF.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(lF.$$.fragment,f),C(P9.$$.fragment,f),C(KF.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(q9.$$.fragment,f),C(eT.$$.fragment,f),C(j9.$$.fragment,f),C(tT.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(nT.$$.fragment,f),C(X9.$$.fragment,f),C(TT.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(U9.$$.fragment,f),C(ET.$$.fragment,f),C(H9.$$.fragment,f),C(AT.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(yT.$$.fragment,f),C(ex.$$.fragment,f),C(kT.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(RT.$$.fragment,f),C(nx.$$.fragment,f),C(IT.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(qT.$$.fragment,f),C(cx.$$.fragment,f),C(HT.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(YT.$$.fragment,f),C(px.$$.fragment,f),C(aM.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(sM.$$.fragment,f),C(Fx.$$.fragment,f),C(bM.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(FM.$$.fragment,f),C(wx.$$.fragment,f),C(CM.$$.fragment,f),C(Lx.$$.fragment,f),C(yx.$$.fragment,f),C($x.$$.fragment,f),C(AM.$$.fragment,f),C(kx.$$.fragment,f),C(RM.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(BM.$$.fragment,f),C(Ix.$$.fragment,f),C(GM.$$.fragment,f),C(Nx.$$.fragment,f),C(qx.$$.fragment,f),C(Dx.$$.fragment,f),C(VM.$$.fragment,f),C(Gx.$$.fragment,f),C(QM.$$.fragment,f),C(Vx.$$.fragment,f),C(Xx.$$.fragment,f),C(Wx.$$.fragment,f),C(HM.$$.fragment,f),C(Qx.$$.fragment,f),C(KM.$$.fragment,f),C(Ux.$$.fragment,f),C(Hx.$$.fragment,f),C(Yx.$$.fragment,f),C(eE.$$.fragment,f),C(Kx.$$.fragment,f),C(lE.$$.fragment,f),C(Zx.$$.fragment,f),C(e$.$$.fragment,f),C(r$.$$.fragment,f),C(dE.$$.fragment,f),C(t$.$$.fragment,f),C(mE.$$.fragment,f),C(a$.$$.fragment,f),C(n$.$$.fragment,f),C(l$.$$.fragment,f),C(hE.$$.fragment,f),C(i$.$$.fragment,f),C(f4.$$.fragment,f),C(d$.$$.fragment,f),C(c$.$$.fragment,f),C(m$.$$.fragment,f),C(g4.$$.fragment,f),C(g$.$$.fragment,f),C(N4.$$.fragment,f),C(h$.$$.fragment,f),C(p$.$$.fragment,f),C(u$.$$.fragment,f),C(j4.$$.fragment,f),C(b$.$$.fragment,f),C(Z4.$$.fragment,f),C(v$.$$.fragment,f),C(F$.$$.fragment,f),C(M$.$$.fragment,f),C(oC.$$.fragment,f),C(E$.$$.fragment,f),C(dC.$$.fragment,f),C(C$.$$.fragment,f),C(w$.$$.fragment,f),C(L$.$$.fragment,f),C(fC.$$.fragment,f),C(y$.$$.fragment,f),C(hC.$$.fragment,f),C($$.$$.fragment,f),C(k$.$$.fragment,f),C(R$.$$.fragment,f),C(_C.$$.fragment,f),C(P$.$$.fragment,f),C(NC.$$.fragment,f),C(B$.$$.fragment,f),C(I$.$$.fragment,f),C(q$.$$.fragment,f),C(jC.$$.fragment,f),C(j$.$$.fragment,f),C(JC.$$.fragment,f),C(D$.$$.fragment,f),C(G$.$$.fragment,f),C(V$.$$.fragment,f),C(KC.$$.fragment,f),C(X$.$$.fragment,f),C(w3.$$.fragment,f),C(z$.$$.fragment,f),C(W$.$$.fragment,f),C(U$.$$.fragment,f),C(L3.$$.fragment,f),C(H$.$$.fragment,f),C(z3.$$.fragment,f),C(J$.$$.fragment,f),C(Y$.$$.fragment,f),C(Z$.$$.fragment,f),C(Q3.$$.fragment,f),C(ek.$$.fragment,f),C(J3.$$.fragment,f),C(rk.$$.fragment,f),C(tk.$$.fragment,f),C(nk.$$.fragment,f),C(K3.$$.fragment,f),C(sk.$$.fragment,f),C(e5.$$.fragment,f),C(lk.$$.fragment,f),C(ik.$$.fragment,f),C(ck.$$.fragment,f),C(r5.$$.fragment,f),C(fk.$$.fragment,f),C(E5.$$.fragment,f),C(mk.$$.fragment,f),C(gk.$$.fragment,f),C(pk.$$.fragment,f),C(w5.$$.fragment,f),C(_k.$$.fragment,f),C(W5.$$.fragment,f),C(uk.$$.fragment,f),C(bk.$$.fragment,f),C(Fk.$$.fragment,f),C(U5.$$.fragment,f),C(Tk.$$.fragment,f),C(J5.$$.fragment,f),C(Mk.$$.fragment,f),C(Ek.$$.fragment,f),C(wk.$$.fragment,f),C(K5.$$.fragment,f),C(Ak.$$.fragment,f),C(e0.$$.fragment,f),C(Lk.$$.fragment,f),C(yk.$$.fragment,f),C($k.$$.fragment,f),C(r0.$$.fragment,f),C(kk.$$.fragment,f),C($0.$$.fragment,f),C(Sk.$$.fragment,f),C(Rk.$$.fragment,f),C(Bk.$$.fragment,f),C(S0.$$.fragment,f),C(Ik.$$.fragment,f),C(V0.$$.fragment,f),C(Nk.$$.fragment,f),C(qk.$$.fragment,f),C(Dk.$$.fragment,f),C(z0.$$.fragment,f),C(Gk.$$.fragment,f),C(nw.$$.fragment,f),C(Ok.$$.fragment,f),C(Vk.$$.fragment,f),C(zk.$$.fragment,f),C(lw.$$.fragment,f),C(Wk.$$.fragment,f),C(bw.$$.fragment,f),C(Qk.$$.fragment,f),C(Uk.$$.fragment,f),C(Jk.$$.fragment,f),C(Fw.$$.fragment,f),C(Yk.$$.fragment,f),C(kw.$$.fragment,f),C(Kk.$$.fragment,f),C(Zk.$$.fragment,f),C(oS.$$.fragment,f),C(Rw.$$.fragment,f),C(rS.$$.fragment,f),C(Xw.$$.fragment,f),C(tS.$$.fragment,f),C(aS.$$.fragment,f),C(sS.$$.fragment,f),C(Ww.$$.fragment,f),C(lS.$$.fragment,f),C(tA.$$.fragment,f),C(iS.$$.fragment,f),C(dS.$$.fragment,f),C(fS.$$.fragment,f),C(nA.$$.fragment,f),C(mS.$$.fragment,f),C(hA.$$.fragment,f),C(gS.$$.fragment,f),C(hS.$$.fragment,f),C(_S.$$.fragment,f),C(_A.$$.fragment,f),C(uS.$$.fragment,f),C(wA.$$.fragment,f),C(bS.$$.fragment,f),C(vS.$$.fragment,f),C(TS.$$.fragment,f),C(LA.$$.fragment,f),C(MS.$$.fragment,f),C(xA.$$.fragment,f),C(ES.$$.fragment,f),C(CS.$$.fragment,f),C(AS.$$.fragment,f),C(kA.$$.fragment,f),C(LS.$$.fragment,f),C(PA.$$.fragment,f),C(xS.$$.fragment,f),C($S.$$.fragment,f),C(SS.$$.fragment,f),C(IA.$$.fragment,f),C(RS.$$.fragment,f),C(qA.$$.fragment,f),HHe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(em),f&&t(ft),f&&t(Oe),f&&t(Qe),f&&t(rm),w(ja,f),f&&t(Ue),f&&t(Ae),f&&t(Lo),f&&t(Da),f&&t(DQe),f&&t(Hi),w(gy),f&&t(GQe),f&&t(Un),f&&t(OQe),w(hy,f),f&&t(VQe),f&&t(iP),f&&t(XQe),w(nm,f),f&&t(zQe),f&&t(Ji),w(py),f&&t(WQe),f&&t(yo),w(_y),w(vy),w(Th),w(Fy),f&&t(QQe),f&&t(Ki),w(Ty),f&&t(UQe),f&&t(xo),w(My),w(wy),w(tp),w(Ay),f&&t(HQe),f&&t(Zi),w(Ly),f&&t(JQe),f&&t($o),w(yy),w(ky),w(Xp),w(zp),w(Sy),f&&t(YQe),f&&t(ed),w(Ry),f&&t(KQe),f&&t(ko),w(Py),w(Ny),w(h_),w(p_),w(qy),f&&t(ZQe),f&&t(rd),w(jy),f&&t(eUe),f&&t(So),w(Dy),w(Oy),w(b_),w(Vy),w(L1),f&&t(oUe),f&&t(nd),w(Xy),f&&t(rUe),f&&t(Ro),w(zy),w(Qy),w(x1),w(Uy),w(C6),f&&t(tUe),f&&t(id),w(Hy),f&&t(aUe),f&&t(Po),w(Jy),w(Ky),w(A6),w(Zy),w(h8),f&&t(nUe),f&&t(fd),w(e9),f&&t(sUe),f&&t(Bo),w(o9),w(t9),w(_8),w(a9),w(r2),f&&t(lUe),f&&t(hd),w(n9),f&&t(iUe),f&&t(Io),w(s9),w(i9),w(a2),w(d9),w(w2),f&&t(dUe),f&&t(ud),w(c9),f&&t(cUe),f&&t(No),w(f9),w(g9),w(L2),w(h9),w(Lb),f&&t(fUe),f&&t(Fd),w(p9),f&&t(mUe),f&&t(qo),w(_9),w(b9),w(xb),w(v9),w(iv),f&&t(gUe),f&&t(Ed),w(F9),f&&t(hUe),f&&t(jo),w(T9),w(E9),w(cv),w(C9),w(bv),f&&t(pUe),f&&t(Ad),w(w9),f&&t(_Ue),f&&t(Go),w(A9),w(y9),w(Fv),w(x9),w(nF),f&&t(uUe),f&&t(xd),w($9),f&&t(bUe),f&&t(Oo),w(k9),w(R9),w(lF),w(P9),w(KF),f&&t(vUe),f&&t(Sd),w(B9),f&&t(FUe),f&&t(Vo),w(I9),w(q9),w(eT),w(j9),w(tT),f&&t(TUe),f&&t(Bd),w(D9),f&&t(MUe),f&&t(Xo),w(G9),w(V9),w(nT),w(X9),w(TT),f&&t(EUe),f&&t(qd),w(z9),f&&t(CUe),f&&t(zo),w(W9),w(U9),w(ET),w(H9),w(AT),f&&t(wUe),f&&t(Gd),w(J9),f&&t(AUe),f&&t(Wo),w(Y9),w(Z9),w(yT),w(ex),w(kT),f&&t(LUe),f&&t(Xd),w(ox),f&&t(yUe),f&&t(Qo),w(rx),w(ax),w(RT),w(nx),w(IT),f&&t(xUe),f&&t(Qd),w(sx),f&&t($Ue),f&&t(Uo),w(lx),w(dx),w(qT),w(cx),w(HT),f&&t(kUe),f&&t(Jd),w(fx),f&&t(SUe),f&&t(Ho),w(mx),w(hx),w(YT),w(px),w(aM),f&&t(RUe),f&&t(Zd),w(_x),f&&t(PUe),f&&t(Jo),w(ux),w(vx),w(sM),w(Fx),w(bM),f&&t(BUe),f&&t(rc),w(Tx),f&&t(IUe),f&&t(Yo),w(Mx),w(Cx),w(FM),w(wx),w(CM),f&&t(NUe),f&&t(nc),w(Lx),f&&t(qUe),f&&t(Ko),w(yx),w($x),w(AM),w(kx),w(RM),f&&t(jUe),f&&t(ic),w(Sx),f&&t(DUe),f&&t(Zo),w(Rx),w(Bx),w(BM),w(Ix),w(GM),f&&t(GUe),f&&t(fc),w(Nx),f&&t(OUe),f&&t(er),w(qx),w(Dx),w(VM),w(Gx),w(QM),f&&t(VUe),f&&t(hc),w(Vx),f&&t(XUe),f&&t(or),w(Xx),w(Wx),w(HM),w(Qx),w(KM),f&&t(zUe),f&&t(uc),w(Ux),f&&t(WUe),f&&t(rr),w(Hx),w(Yx),w(eE),w(Kx),w(lE),f&&t(QUe),f&&t(Fc),w(Zx),f&&t(UUe),f&&t(tr),w(e$),w(r$),w(dE),w(t$),w(mE),f&&t(HUe),f&&t(Ec),w(a$),f&&t(JUe),f&&t(ar),w(n$),w(l$),w(hE),w(i$),w(f4),f&&t(YUe),f&&t(Ac),w(d$),f&&t(KUe),f&&t(nr),w(c$),w(m$),w(g4),w(g$),w(N4),f&&t(ZUe),f&&t(xc),w(h$),f&&t(eHe),f&&t(sr),w(p$),w(u$),w(j4),w(b$),w(Z4),f&&t(oHe),f&&t(Sc),w(v$),f&&t(rHe),f&&t(lr),w(F$),w(M$),w(oC),w(E$),w(dC),f&&t(tHe),f&&t(Bc),w(C$),f&&t(aHe),f&&t(ir),w(w$),w(L$),w(fC),w(y$),w(hC),f&&t(nHe),f&&t(qc),w($$),f&&t(sHe),f&&t(dr),w(k$),w(R$),w(_C),w(P$),w(NC),f&&t(lHe),f&&t(Gc),w(B$),f&&t(iHe),f&&t(cr),w(I$),w(q$),w(jC),w(j$),w(JC),f&&t(dHe),f&&t(Xc),w(D$),f&&t(cHe),f&&t(fr),w(G$),w(V$),w(KC),w(X$),w(w3),f&&t(fHe),f&&t(Qc),w(z$),f&&t(mHe),f&&t(mr),w(W$),w(U$),w(L3),w(H$),w(z3),f&&t(gHe),f&&t(Jc),w(J$),f&&t(hHe),f&&t(gr),w(Y$),w(Z$),w(Q3),w(ek),w(J3),f&&t(pHe),f&&t(Zc),w(rk),f&&t(_He),f&&t(hr),w(tk),w(nk),w(K3),w(sk),w(e5),f&&t(uHe),f&&t(rf),w(lk),f&&t(bHe),f&&t(pr),w(ik),w(ck),w(r5),w(fk),w(E5),f&&t(vHe),f&&t(nf),w(mk),f&&t(FHe),f&&t(_r),w(gk),w(pk),w(w5),w(_k),w(W5),f&&t(THe),f&&t(df),w(uk),f&&t(MHe),f&&t(ur),w(bk),w(Fk),w(U5),w(Tk),w(J5),f&&t(EHe),f&&t(mf),w(Mk),f&&t(CHe),f&&t(br),w(Ek),w(wk),w(K5),w(Ak),w(e0),f&&t(wHe),f&&t(pf),w(Lk),f&&t(AHe),f&&t(vr),w(yk),w($k),w(r0),w(kk),w($0),f&&t(LHe),f&&t(bf),w(Sk),f&&t(yHe),f&&t(Fr),w(Rk),w(Bk),w(S0),w(Ik),w(V0),f&&t(xHe),f&&t(Tf),w(Nk),f&&t($He),f&&t(Tr),w(qk),w(Dk),w(z0),w(Gk),w(nw),f&&t(kHe),f&&t(Cf),w(Ok),f&&t(SHe),f&&t(Mr),w(Vk),w(zk),w(lw),w(Wk),w(bw),f&&t(RHe),f&&t(Lf),w(Qk),f&&t(PHe),f&&t(Er),w(Uk),w(Jk),w(Fw),w(Yk),w(kw),f&&t(BHe),f&&t($f),w(Kk),f&&t(IHe),f&&t(Cr),w(Zk),w(oS),w(Rw),w(rS),w(Xw),f&&t(NHe),f&&t(Rf),w(tS),f&&t(qHe),f&&t(wr),w(aS),w(sS),w(Ww),w(lS),w(tA),f&&t(jHe),f&&t(If),w(iS),f&&t(DHe),f&&t(Ar),w(dS),w(fS),w(nA),w(mS),w(hA),f&&t(GHe),f&&t(jf),w(gS),f&&t(OHe),f&&t(Lr),w(hS),w(_S),w(_A),w(uS),w(wA),f&&t(VHe),f&&t(Of),w(bS),f&&t(XHe),f&&t(yr),w(vS),w(TS),w(LA),w(MS),w(xA),f&&t(zHe),f&&t(zf),w(ES),f&&t(WHe),f&&t(xr),w(CS),w(AS),w(kA),w(LS),w(PA),f&&t(QHe),f&&t(Uf),w(xS),f&&t(UHe),f&&t($r),w($S),w(SS),w(IA),w(RS),w(qA)}}}const Oaa={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Vaa($){return Nra(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Jaa extends Rra{constructor(g){super();Pra(this,g,Vaa,Gaa,Bra,{})}}export{Jaa as default,Oaa as metadata};
