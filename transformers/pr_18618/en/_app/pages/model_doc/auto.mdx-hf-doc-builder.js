import{S as Xaa,i as zaa,s as Waa,e as a,k as l,w as F,t as o,M as Qaa,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Uaa,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as hgt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Haa($){let g,v,p,m,_,d,h,Lo,Ui,dm,gt,Hi,Ji,Ly,cm,Oe,Qe,Yi,Hn,yy,Jn,Yn,xy,Ki,Kn,$y,Zi,fm,Va;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Lo=o(`, make sure its
`),Ui=a("code"),dm=o("model_type"),gt=o(" attribute is set to the same key you use when registering the config (here "),Hi=a("code"),Ji=o('"new-model"'),Ly=o(")."),cm=l(),Oe=a("p"),Qe=o("Likewise, if your "),Yi=a("code"),Hn=o("NewModel"),yy=o(" is a subclass of "),Jn=a("a"),Yn=o("PreTrainedModel"),xy=o(`, make sure its
`),Ki=a("code"),Kn=o("config_class"),$y=o(` attribute is set to the same class you use when registering the model (here
`),Zi=a("code"),fm=o("NewModelConfig"),Va=o(")."),this.h()},l(Ue){g=n(Ue,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var LP=s(p);m=r(LP,"NewModelConfig"),LP.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ed=s(d);h=r(ed,"PretrainedConfig"),ed.forEach(t),Lo=r(Ae,`, make sure its
`),Ui=n(Ae,"CODE",{});var yP=s(Ui);dm=r(yP,"model_type"),yP.forEach(t),gt=r(Ae," attribute is set to the same key you use when registering the config (here "),Hi=n(Ae,"CODE",{});var xP=s(Hi);Ji=r(xP,'"new-model"'),xP.forEach(t),Ly=r(Ae,")."),Ae.forEach(t),cm=i(Ue),Oe=n(Ue,"P",{});var yo=s(Oe);Qe=r(yo,"Likewise, if your "),Yi=n(yo,"CODE",{});var Xa=s(Yi);Hn=r(Xa,"NewModel"),Xa.forEach(t),yy=r(yo," is a subclass of "),Jn=n(yo,"A",{href:!0});var $P=s(Jn);Yn=r($P,"PreTrainedModel"),$P.forEach(t),xy=r(yo,`, make sure its
`),Ki=n(yo,"CODE",{});var mm=s(Ki);Kn=r(mm,"config_class"),mm.forEach(t),$y=r(yo,` attribute is set to the same class you use when registering the model (here
`),Zi=n(yo,"CODE",{});var kP=s(Zi);fm=r(kP,"NewModelConfig"),kP.forEach(t),Va=r(yo,")."),yo.forEach(t),this.h()},h(){c(Jn,"href","/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel")},m(Ue,Ae){b(Ue,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Lo),e(g,Ui),e(Ui,dm),e(g,gt),e(g,Hi),e(Hi,Ji),e(g,Ly),b(Ue,cm,Ae),b(Ue,Oe,Ae),e(Oe,Qe),e(Oe,Yi),e(Yi,Hn),e(Oe,yy),e(Oe,Jn),e(Jn,Yn),e(Oe,xy),e(Oe,Ki),e(Ki,Kn),e(Oe,$y),e(Oe,Zi),e(Zi,fm),e(Oe,Va)},d(Ue){Ue&&t(g),Ue&&t(cm),Ue&&t(Oe)}}}function Jaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kaa($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Lo=s(p);m=r(Lo,"use_auth_token=True"),Lo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Zaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ena($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Lo=s(p);m=r(Lo,"use_auth_token=True"),Lo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function ona($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ana($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ina($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForDepthEstimation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForDepthEstimation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDepthEstimation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDepthEstimation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForDepthEstimation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForDepthEstimation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForDepthEstimation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForDepthEstimation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDepthEstimation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDepthEstimation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDepthEstimation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDepthEstimation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _na($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function una($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ena($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ana($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $na($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ina($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ona($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Una($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function esa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function osa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function asa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ssa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function isa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function csa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function msa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function psa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _sa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function usa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Msa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Esa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Csa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Asa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ysa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $sa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ksa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ssa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Psa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Isa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Osa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Usa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ysa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ksa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zsa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ela($){let g,v,p,m,_,d,h,Lo,Ui,dm,gt,Hi,Ji,Ly,cm,Oe,Qe,Yi,Hn,yy,Jn,Yn,xy,Ki,Kn,$y,Zi,fm,Va,Ue,Ae,LP,ed,yP,xP,yo,Xa,$P,mm,kP,iZe,RUe,od,gm,fle,ky,dZe,mle,cZe,PUe,Zn,fZe,gle,mZe,gZe,hle,hZe,pZe,BUe,Sy,IUe,SP,_Ze,NUe,hm,qUe,rd,pm,ple,Ry,uZe,_le,bZe,jUe,xo,Py,vZe,By,FZe,RP,TZe,MZe,EZe,Iy,CZe,ule,wZe,AZe,LZe,Rr,Ny,yZe,ble,xZe,$Ze,td,kZe,vle,SZe,RZe,Fle,PZe,BZe,IZe,A,_m,Tle,NZe,qZe,PP,jZe,DZe,GZe,um,Mle,OZe,VZe,BP,XZe,zZe,WZe,bm,Ele,QZe,UZe,IP,HZe,JZe,YZe,vm,Cle,KZe,ZZe,NP,eeo,oeo,reo,Fm,wle,teo,aeo,qP,neo,seo,leo,Tm,Ale,ieo,deo,jP,ceo,feo,meo,Mm,Lle,geo,heo,DP,peo,_eo,ueo,Em,yle,beo,veo,GP,Feo,Teo,Meo,Cm,xle,Eeo,Ceo,OP,weo,Aeo,Leo,wm,$le,yeo,xeo,VP,$eo,keo,Seo,Am,kle,Reo,Peo,XP,Beo,Ieo,Neo,Lm,Sle,qeo,jeo,zP,Deo,Geo,Oeo,ym,Rle,Veo,Xeo,WP,zeo,Weo,Qeo,xm,Ple,Ueo,Heo,QP,Jeo,Yeo,Keo,$m,Ble,Zeo,eoo,UP,ooo,roo,too,km,Ile,aoo,noo,HP,soo,loo,ioo,Sm,Nle,doo,coo,JP,foo,moo,goo,Rm,qle,hoo,poo,YP,_oo,uoo,boo,Pm,jle,voo,Foo,KP,Too,Moo,Eoo,Bm,Dle,Coo,woo,ZP,Aoo,Loo,yoo,Im,Gle,xoo,$oo,eB,koo,Soo,Roo,Nm,Ole,Poo,Boo,oB,Ioo,Noo,qoo,qm,Vle,joo,Doo,rB,Goo,Ooo,Voo,jm,Xle,Xoo,zoo,tB,Woo,Qoo,Uoo,Dm,zle,Hoo,Joo,aB,Yoo,Koo,Zoo,Gm,Wle,ero,oro,nB,rro,tro,aro,Om,Qle,nro,sro,sB,lro,iro,dro,Vm,Ule,cro,fro,lB,mro,gro,hro,Xm,Hle,pro,_ro,iB,uro,bro,vro,zm,Jle,Fro,Tro,dB,Mro,Ero,Cro,Wm,Yle,wro,Aro,cB,Lro,yro,xro,Qm,Kle,$ro,kro,fB,Sro,Rro,Pro,Um,Zle,Bro,Iro,mB,Nro,qro,jro,Hm,eie,Dro,Gro,gB,Oro,Vro,Xro,Jm,oie,zro,Wro,hB,Qro,Uro,Hro,Ym,rie,Jro,Yro,pB,Kro,Zro,eto,Km,tie,oto,rto,_B,tto,ato,nto,Zm,aie,sto,lto,uB,ito,dto,cto,eg,nie,fto,mto,bB,gto,hto,pto,og,sie,_to,uto,vB,bto,vto,Fto,rg,lie,Tto,Mto,FB,Eto,Cto,wto,tg,iie,Ato,Lto,TB,yto,xto,$to,ag,die,kto,Sto,MB,Rto,Pto,Bto,ng,cie,Ito,Nto,EB,qto,jto,Dto,sg,fie,Gto,Oto,CB,Vto,Xto,zto,lg,mie,Wto,Qto,wB,Uto,Hto,Jto,ig,gie,Yto,Kto,AB,Zto,eao,oao,dg,hie,rao,tao,LB,aao,nao,sao,cg,pie,lao,iao,yB,dao,cao,fao,fg,_ie,mao,gao,xB,hao,pao,_ao,mg,uie,uao,bao,$B,vao,Fao,Tao,gg,bie,Mao,Eao,kB,Cao,wao,Aao,hg,vie,Lao,yao,SB,xao,$ao,kao,pg,Fie,Sao,Rao,RB,Pao,Bao,Iao,_g,Tie,Nao,qao,PB,jao,Dao,Gao,ug,Mie,Oao,Vao,BB,Xao,zao,Wao,bg,Eie,Qao,Uao,IB,Hao,Jao,Yao,vg,Cie,Kao,Zao,NB,eno,ono,rno,Fg,wie,tno,ano,qB,nno,sno,lno,Tg,Aie,ino,dno,jB,cno,fno,mno,Mg,Lie,gno,hno,DB,pno,_no,uno,Eg,yie,bno,vno,GB,Fno,Tno,Mno,Cg,xie,Eno,Cno,OB,wno,Ano,Lno,wg,$ie,yno,xno,VB,$no,kno,Sno,Ag,kie,Rno,Pno,XB,Bno,Ino,Nno,Lg,Sie,qno,jno,zB,Dno,Gno,Ono,yg,Rie,Vno,Xno,WB,zno,Wno,Qno,xg,Pie,Uno,Hno,QB,Jno,Yno,Kno,$g,Bie,Zno,eso,UB,oso,rso,tso,kg,Iie,aso,nso,HB,sso,lso,iso,Sg,Nie,dso,cso,JB,fso,mso,gso,Rg,qie,hso,pso,YB,_so,uso,bso,Pg,jie,vso,Fso,KB,Tso,Mso,Eso,Bg,Die,Cso,wso,ZB,Aso,Lso,yso,Ig,Gie,xso,$so,eI,kso,Sso,Rso,Ng,Oie,Pso,Bso,oI,Iso,Nso,qso,qg,Vie,jso,Dso,rI,Gso,Oso,Vso,jg,Xie,Xso,zso,tI,Wso,Qso,Uso,Dg,zie,Hso,Jso,aI,Yso,Kso,Zso,Gg,Wie,elo,olo,nI,rlo,tlo,alo,Og,Qie,nlo,slo,sI,llo,ilo,dlo,Vg,Uie,clo,flo,lI,mlo,glo,hlo,Xg,Hie,plo,_lo,iI,ulo,blo,vlo,zg,Jie,Flo,Tlo,dI,Mlo,Elo,Clo,Wg,Yie,wlo,Alo,cI,Llo,ylo,xlo,Qg,Kie,$lo,klo,fI,Slo,Rlo,Plo,Ug,Zie,Blo,Ilo,mI,Nlo,qlo,jlo,Hg,ede,Dlo,Glo,gI,Olo,Vlo,Xlo,Jg,ode,zlo,Wlo,hI,Qlo,Ulo,Hlo,Yg,rde,Jlo,Ylo,pI,Klo,Zlo,eio,Kg,tde,oio,rio,_I,tio,aio,nio,Zg,ade,sio,lio,uI,iio,dio,cio,eh,nde,fio,mio,bI,gio,hio,pio,oh,sde,_io,uio,vI,bio,vio,Fio,rh,lde,Tio,Mio,FI,Eio,Cio,wio,th,ide,Aio,Lio,TI,yio,xio,$io,ah,dde,kio,Sio,MI,Rio,Pio,Bio,nh,cde,Iio,Nio,EI,qio,jio,Dio,sh,fde,Gio,Oio,CI,Vio,Xio,zio,lh,mde,Wio,Qio,wI,Uio,Hio,Jio,ih,gde,Yio,Kio,AI,Zio,edo,odo,dh,hde,rdo,tdo,LI,ado,ndo,sdo,ch,pde,ldo,ido,yI,ddo,cdo,fdo,fh,_de,mdo,gdo,xI,hdo,pdo,_do,mh,ude,udo,bdo,$I,vdo,Fdo,Tdo,gh,bde,Mdo,Edo,kI,Cdo,wdo,Ado,hh,vde,Ldo,ydo,SI,xdo,$do,kdo,ph,Fde,Sdo,Rdo,RI,Pdo,Bdo,Ido,_h,Tde,Ndo,qdo,PI,jdo,Ddo,Gdo,uh,Mde,Odo,Vdo,BI,Xdo,zdo,Wdo,bh,Ede,Qdo,Udo,II,Hdo,Jdo,Ydo,vh,Cde,Kdo,Zdo,NI,eco,oco,rco,Fh,wde,tco,aco,qI,nco,sco,lco,Th,Ade,ico,dco,jI,cco,fco,mco,Mh,Lde,gco,hco,DI,pco,_co,uco,Eh,yde,bco,vco,GI,Fco,Tco,Mco,Ch,xde,Eco,Cco,OI,wco,Aco,Lco,wh,$de,yco,xco,VI,$co,kco,Sco,Ah,kde,Rco,Pco,XI,Bco,Ico,Nco,Lh,Sde,qco,jco,zI,Dco,Gco,Oco,yh,Rde,Vco,Xco,WI,zco,Wco,Qco,xh,Pde,Uco,Hco,QI,Jco,Yco,Kco,$h,Zco,kh,qy,efo,Bde,ofo,DUe,ad,Sh,Ide,jy,rfo,Nde,tfo,GUe,$o,Dy,afo,Gy,nfo,UI,sfo,lfo,ifo,Oy,dfo,qde,cfo,ffo,mfo,Pr,Vy,gfo,jde,hfo,pfo,za,_fo,Dde,ufo,bfo,Gde,vfo,Ffo,Ode,Tfo,Mfo,Efo,k,es,Vde,Cfo,wfo,HI,Afo,Lfo,JI,yfo,xfo,$fo,os,Xde,kfo,Sfo,YI,Rfo,Pfo,KI,Bfo,Ifo,Nfo,rs,zde,qfo,jfo,ZI,Dfo,Gfo,eN,Ofo,Vfo,Xfo,Rh,Wde,zfo,Wfo,oN,Qfo,Ufo,Hfo,ts,Qde,Jfo,Yfo,rN,Kfo,Zfo,tN,emo,omo,rmo,Ph,Ude,tmo,amo,aN,nmo,smo,lmo,Bh,Hde,imo,dmo,nN,cmo,fmo,mmo,Ih,Jde,gmo,hmo,sN,pmo,_mo,umo,as,Yde,bmo,vmo,lN,Fmo,Tmo,iN,Mmo,Emo,Cmo,ns,Kde,wmo,Amo,dN,Lmo,ymo,cN,xmo,$mo,kmo,ss,Zde,Smo,Rmo,fN,Pmo,Bmo,mN,Imo,Nmo,qmo,Nh,ece,jmo,Dmo,gN,Gmo,Omo,Vmo,qh,oce,Xmo,zmo,hN,Wmo,Qmo,Umo,jh,rce,Hmo,Jmo,pN,Ymo,Kmo,Zmo,ls,tce,ego,ogo,_N,rgo,tgo,uN,ago,ngo,sgo,Dh,ace,lgo,igo,bN,dgo,cgo,fgo,is,nce,mgo,ggo,vN,hgo,pgo,FN,_go,ugo,bgo,ds,sce,vgo,Fgo,TN,Tgo,Mgo,MN,Ego,Cgo,wgo,cs,lce,Ago,Lgo,EN,ygo,xgo,CN,$go,kgo,Sgo,fs,ice,Rgo,Pgo,wN,Bgo,Igo,AN,Ngo,qgo,jgo,Gh,dce,Dgo,Ggo,LN,Ogo,Vgo,Xgo,ms,cce,zgo,Wgo,yN,Qgo,Ugo,xN,Hgo,Jgo,Ygo,gs,fce,Kgo,Zgo,$N,eho,oho,kN,rho,tho,aho,hs,mce,nho,sho,SN,lho,iho,RN,dho,cho,fho,ps,gce,mho,gho,PN,hho,pho,BN,_ho,uho,bho,_s,hce,vho,Fho,IN,Tho,Mho,NN,Eho,Cho,who,us,pce,Aho,Lho,qN,yho,xho,jN,$ho,kho,Sho,Oh,_ce,Rho,Pho,DN,Bho,Iho,Nho,bs,uce,qho,jho,GN,Dho,Gho,ON,Oho,Vho,Xho,Vh,bce,zho,Who,VN,Qho,Uho,Hho,vs,vce,Jho,Yho,XN,Kho,Zho,zN,epo,opo,rpo,Fs,Fce,tpo,apo,WN,npo,spo,QN,lpo,ipo,dpo,Ts,Tce,cpo,fpo,UN,mpo,gpo,HN,hpo,ppo,_po,Xh,Mce,upo,bpo,JN,vpo,Fpo,Tpo,Ms,Ece,Mpo,Epo,YN,Cpo,wpo,KN,Apo,Lpo,ypo,Es,Cce,xpo,$po,ZN,kpo,Spo,eq,Rpo,Ppo,Bpo,Cs,wce,Ipo,Npo,oq,qpo,jpo,rq,Dpo,Gpo,Opo,zh,Ace,Vpo,Xpo,tq,zpo,Wpo,Qpo,ws,Lce,Upo,Hpo,aq,Jpo,Ypo,nq,Kpo,Zpo,e_o,As,yce,o_o,r_o,sq,t_o,a_o,lq,n_o,s_o,l_o,Ls,xce,i_o,d_o,iq,c_o,f_o,dq,m_o,g_o,h_o,ys,$ce,p_o,__o,cq,u_o,b_o,fq,v_o,F_o,T_o,xs,kce,M_o,E_o,mq,C_o,w_o,gq,A_o,L_o,y_o,$s,Sce,x_o,$_o,hq,k_o,S_o,pq,R_o,P_o,B_o,ks,Rce,I_o,N_o,_q,q_o,j_o,uq,D_o,G_o,O_o,Ss,Pce,V_o,X_o,bq,z_o,W_o,vq,Q_o,U_o,H_o,Wh,Bce,J_o,Y_o,Fq,K_o,Z_o,euo,Rs,Ice,ouo,ruo,Tq,tuo,auo,Mq,nuo,suo,luo,Qh,Nce,iuo,duo,Eq,cuo,fuo,muo,Uh,qce,guo,huo,Cq,puo,_uo,uuo,Ps,jce,buo,vuo,wq,Fuo,Tuo,Aq,Muo,Euo,Cuo,Bs,Dce,wuo,Auo,Lq,Luo,yuo,yq,xuo,$uo,kuo,Is,Gce,Suo,Ruo,xq,Puo,Buo,$q,Iuo,Nuo,quo,Hh,Oce,juo,Duo,kq,Guo,Ouo,Vuo,Ns,Vce,Xuo,zuo,Sq,Wuo,Quo,Rq,Uuo,Huo,Juo,qs,Xce,Yuo,Kuo,Pq,Zuo,e1o,Bq,o1o,r1o,t1o,js,zce,a1o,n1o,Iq,s1o,l1o,Nq,i1o,d1o,c1o,Ds,Wce,f1o,m1o,qq,g1o,h1o,jq,p1o,_1o,u1o,Gs,Qce,b1o,v1o,Dq,F1o,T1o,Gq,M1o,E1o,C1o,Os,Uce,w1o,A1o,Oq,L1o,y1o,Vq,x1o,$1o,k1o,Vs,Hce,S1o,R1o,Xq,P1o,B1o,zq,I1o,N1o,q1o,Xs,Jce,j1o,D1o,Wq,G1o,O1o,Qq,V1o,X1o,z1o,Jh,Yce,W1o,Q1o,Uq,U1o,H1o,J1o,zs,Kce,Y1o,K1o,Hq,Z1o,e8o,Jq,o8o,r8o,t8o,Ws,Zce,a8o,n8o,Yq,s8o,l8o,Kq,i8o,d8o,c8o,Yh,efe,f8o,m8o,Zq,g8o,h8o,p8o,Kh,ofe,_8o,u8o,ej,b8o,v8o,F8o,Zh,rfe,T8o,M8o,oj,E8o,C8o,w8o,ep,tfe,A8o,L8o,rj,y8o,x8o,$8o,Qs,afe,k8o,S8o,tj,R8o,P8o,aj,B8o,I8o,N8o,op,nfe,q8o,j8o,nj,D8o,G8o,O8o,Us,sfe,V8o,X8o,sj,z8o,W8o,lj,Q8o,U8o,H8o,Hs,lfe,J8o,Y8o,ij,K8o,Z8o,dj,ebo,obo,rbo,Js,ife,tbo,abo,cj,nbo,sbo,fj,lbo,ibo,dbo,Ys,dfe,cbo,fbo,mj,mbo,gbo,gj,hbo,pbo,_bo,Ks,cfe,ubo,bbo,hj,vbo,Fbo,pj,Tbo,Mbo,Ebo,Zs,ffe,Cbo,wbo,_j,Abo,Lbo,uj,ybo,xbo,$bo,rp,mfe,kbo,Sbo,bj,Rbo,Pbo,Bbo,tp,gfe,Ibo,Nbo,vj,qbo,jbo,Dbo,el,hfe,Gbo,Obo,Fj,Vbo,Xbo,Tj,zbo,Wbo,Qbo,ol,pfe,Ubo,Hbo,Mj,Jbo,Ybo,Ej,Kbo,Zbo,e2o,rl,_fe,o2o,r2o,Cj,t2o,a2o,wj,n2o,s2o,l2o,ap,ufe,i2o,d2o,Aj,c2o,f2o,m2o,np,bfe,g2o,h2o,Lj,p2o,_2o,u2o,sp,vfe,b2o,v2o,yj,F2o,T2o,M2o,tl,Ffe,E2o,C2o,xj,w2o,A2o,$j,L2o,y2o,x2o,al,Tfe,$2o,k2o,kj,S2o,R2o,Sj,P2o,B2o,I2o,lp,Mfe,N2o,q2o,Rj,j2o,D2o,G2o,ip,Efe,O2o,V2o,Pj,X2o,z2o,W2o,dp,Cfe,Q2o,U2o,Bj,H2o,J2o,Y2o,nl,wfe,K2o,Z2o,Ij,evo,ovo,Nj,rvo,tvo,avo,cp,Afe,nvo,svo,qj,lvo,ivo,dvo,fp,Lfe,cvo,fvo,jj,mvo,gvo,hvo,sl,yfe,pvo,_vo,Dj,uvo,bvo,Gj,vvo,Fvo,Tvo,ll,xfe,Mvo,Evo,Oj,Cvo,wvo,Vj,Avo,Lvo,yvo,il,$fe,xvo,$vo,Xj,kvo,Svo,zj,Rvo,Pvo,Bvo,dl,kfe,Ivo,Nvo,Wj,qvo,jvo,Qj,Dvo,Gvo,Ovo,mp,Vvo,gp,Xy,Xvo,Sfe,zvo,OUe,nd,hp,Rfe,zy,Wvo,Pfe,Qvo,VUe,ko,Wy,Uvo,Qy,Hvo,Uj,Jvo,Yvo,Kvo,Uy,Zvo,Bfe,e6o,o6o,r6o,He,Hy,t6o,Ife,a6o,n6o,Wa,s6o,Nfe,l6o,i6o,qfe,d6o,c6o,jfe,f6o,m6o,g6o,Q,pp,Dfe,h6o,p6o,Hj,_6o,u6o,b6o,_p,Gfe,v6o,F6o,Jj,T6o,M6o,E6o,up,Ofe,C6o,w6o,Yj,A6o,L6o,y6o,bp,Vfe,x6o,$6o,Kj,k6o,S6o,R6o,vp,Xfe,P6o,B6o,Zj,I6o,N6o,q6o,Fp,zfe,j6o,D6o,eD,G6o,O6o,V6o,Tp,Wfe,X6o,z6o,oD,W6o,Q6o,U6o,Mp,Qfe,H6o,J6o,rD,Y6o,K6o,Z6o,Ep,Ufe,eFo,oFo,tD,rFo,tFo,aFo,Cp,Hfe,nFo,sFo,aD,lFo,iFo,dFo,wp,Jfe,cFo,fFo,nD,mFo,gFo,hFo,Ap,Yfe,pFo,_Fo,sD,uFo,bFo,vFo,Lp,Kfe,FFo,TFo,lD,MFo,EFo,CFo,yp,Zfe,wFo,AFo,iD,LFo,yFo,xFo,xp,eme,$Fo,kFo,dD,SFo,RFo,PFo,$p,ome,BFo,IFo,cD,NFo,qFo,jFo,kp,rme,DFo,GFo,fD,OFo,VFo,XFo,Sp,tme,zFo,WFo,mD,QFo,UFo,HFo,Rp,ame,JFo,YFo,gD,KFo,ZFo,eTo,Pp,nme,oTo,rTo,hD,tTo,aTo,nTo,Bp,sme,sTo,lTo,pD,iTo,dTo,cTo,Ip,lme,fTo,mTo,_D,gTo,hTo,pTo,Np,ime,_To,uTo,uD,bTo,vTo,FTo,qp,dme,TTo,MTo,bD,ETo,CTo,wTo,jp,cme,ATo,LTo,vD,yTo,xTo,$To,Dp,fme,kTo,STo,FD,RTo,PTo,BTo,Gp,mme,ITo,NTo,TD,qTo,jTo,DTo,Op,gme,GTo,OTo,MD,VTo,XTo,zTo,Vp,hme,WTo,QTo,ED,UTo,HTo,JTo,Xp,pme,YTo,KTo,CD,ZTo,eMo,oMo,zp,_me,rMo,tMo,wD,aMo,nMo,sMo,Wp,ume,lMo,iMo,AD,dMo,cMo,fMo,Qp,bme,mMo,gMo,LD,hMo,pMo,_Mo,Up,vme,uMo,bMo,yD,vMo,FMo,TMo,Hp,Fme,MMo,EMo,xD,CMo,wMo,AMo,Jp,Tme,LMo,yMo,$D,xMo,$Mo,kMo,Yp,Mme,SMo,RMo,kD,PMo,BMo,IMo,Kp,Eme,NMo,qMo,SD,jMo,DMo,GMo,Zp,OMo,e_,VMo,o_,Jy,XMo,Cme,zMo,XUe,sd,r_,wme,Yy,WMo,Ame,QMo,zUe,So,Ky,UMo,Zy,HMo,RD,JMo,YMo,KMo,e9,ZMo,Lme,eEo,oEo,rEo,Je,o9,tEo,yme,aEo,nEo,ld,sEo,xme,lEo,iEo,$me,dEo,cEo,fEo,ie,t_,kme,mEo,gEo,PD,hEo,pEo,_Eo,a_,Sme,uEo,bEo,BD,vEo,FEo,TEo,n_,Rme,MEo,EEo,ID,CEo,wEo,AEo,s_,Pme,LEo,yEo,ND,xEo,$Eo,kEo,l_,Bme,SEo,REo,qD,PEo,BEo,IEo,i_,Ime,NEo,qEo,jD,jEo,DEo,GEo,d_,Nme,OEo,VEo,DD,XEo,zEo,WEo,c_,qme,QEo,UEo,GD,HEo,JEo,YEo,f_,jme,KEo,ZEo,OD,e4o,o4o,r4o,m_,Dme,t4o,a4o,VD,n4o,s4o,l4o,g_,Gme,i4o,d4o,XD,c4o,f4o,m4o,h_,Ome,g4o,h4o,zD,p4o,_4o,u4o,p_,Vme,b4o,v4o,WD,F4o,T4o,M4o,__,Xme,E4o,C4o,QD,w4o,A4o,L4o,u_,zme,y4o,x4o,UD,$4o,k4o,S4o,b_,Wme,R4o,P4o,HD,B4o,I4o,N4o,v_,Qme,q4o,j4o,JD,D4o,G4o,O4o,F_,Ume,V4o,X4o,YD,z4o,W4o,Q4o,T_,Hme,U4o,H4o,KD,J4o,Y4o,K4o,M_,Jme,Z4o,eCo,ZD,oCo,rCo,tCo,E_,aCo,C_,nCo,w_,r9,sCo,Yme,lCo,WUe,id,A_,Kme,t9,iCo,Zme,dCo,QUe,Ro,a9,cCo,dd,fCo,eG,mCo,gCo,oG,hCo,pCo,_Co,n9,uCo,ege,bCo,vCo,FCo,ht,s9,TCo,oge,MCo,ECo,cd,CCo,rge,wCo,ACo,rG,LCo,yCo,xCo,L_,$Co,Ye,l9,kCo,tge,SCo,RCo,Qa,PCo,age,BCo,ICo,nge,NCo,qCo,sge,jCo,DCo,GCo,y,y_,lge,OCo,VCo,tG,XCo,zCo,WCo,x_,ige,QCo,UCo,aG,HCo,JCo,YCo,$_,dge,KCo,ZCo,nG,e3o,o3o,r3o,k_,cge,t3o,a3o,sG,n3o,s3o,l3o,S_,fge,i3o,d3o,lG,c3o,f3o,m3o,R_,mge,g3o,h3o,iG,p3o,_3o,u3o,P_,gge,b3o,v3o,dG,F3o,T3o,M3o,B_,hge,E3o,C3o,cG,w3o,A3o,L3o,I_,pge,y3o,x3o,fG,$3o,k3o,S3o,N_,_ge,R3o,P3o,mG,B3o,I3o,N3o,q_,uge,q3o,j3o,gG,D3o,G3o,O3o,j_,bge,V3o,X3o,hG,z3o,W3o,Q3o,D_,vge,U3o,H3o,pG,J3o,Y3o,K3o,G_,Fge,Z3o,e5o,_G,o5o,r5o,t5o,O_,Tge,a5o,n5o,uG,s5o,l5o,i5o,V_,Mge,d5o,c5o,bG,f5o,m5o,g5o,X_,Ege,h5o,p5o,vG,_5o,u5o,b5o,z_,Cge,v5o,F5o,FG,T5o,M5o,E5o,W_,wge,C5o,w5o,TG,A5o,L5o,y5o,Q_,Age,x5o,$5o,MG,k5o,S5o,R5o,U_,Lge,P5o,B5o,EG,I5o,N5o,q5o,H_,yge,j5o,D5o,CG,G5o,O5o,V5o,J_,xge,X5o,z5o,wG,W5o,Q5o,U5o,Y_,$ge,H5o,J5o,AG,Y5o,K5o,Z5o,K_,kge,e0o,o0o,LG,r0o,t0o,a0o,Z_,Sge,n0o,s0o,yG,l0o,i0o,d0o,eu,Rge,c0o,f0o,xG,m0o,g0o,h0o,ou,Pge,p0o,_0o,$G,u0o,b0o,v0o,ru,Bge,F0o,T0o,kG,M0o,E0o,C0o,tu,Ige,w0o,A0o,SG,L0o,y0o,x0o,au,Nge,$0o,k0o,RG,S0o,R0o,P0o,nu,qge,B0o,I0o,PG,N0o,q0o,j0o,su,jge,D0o,G0o,BG,O0o,V0o,X0o,lu,Dge,z0o,W0o,IG,Q0o,U0o,H0o,iu,Gge,J0o,Y0o,NG,K0o,Z0o,ewo,cl,Oge,owo,rwo,qG,two,awo,jG,nwo,swo,lwo,du,Vge,iwo,dwo,DG,cwo,fwo,mwo,cu,Xge,gwo,hwo,GG,pwo,_wo,uwo,fu,zge,bwo,vwo,OG,Fwo,Two,Mwo,mu,Wge,Ewo,Cwo,VG,wwo,Awo,Lwo,gu,Qge,ywo,xwo,XG,$wo,kwo,Swo,hu,Uge,Rwo,Pwo,zG,Bwo,Iwo,Nwo,pu,Hge,qwo,jwo,WG,Dwo,Gwo,Owo,_u,Jge,Vwo,Xwo,QG,zwo,Wwo,Qwo,uu,Yge,Uwo,Hwo,UG,Jwo,Ywo,Kwo,bu,Kge,Zwo,eAo,HG,oAo,rAo,tAo,vu,Zge,aAo,nAo,JG,sAo,lAo,iAo,Fu,ehe,dAo,cAo,YG,fAo,mAo,gAo,Tu,ohe,hAo,pAo,KG,_Ao,uAo,bAo,Mu,rhe,vAo,FAo,ZG,TAo,MAo,EAo,Eu,the,CAo,wAo,eO,AAo,LAo,yAo,Cu,ahe,xAo,$Ao,oO,kAo,SAo,RAo,wu,nhe,PAo,BAo,rO,IAo,NAo,qAo,Au,she,jAo,DAo,tO,GAo,OAo,VAo,Lu,lhe,XAo,zAo,aO,WAo,QAo,UAo,yu,ihe,HAo,JAo,nO,YAo,KAo,ZAo,xu,dhe,e7o,o7o,sO,r7o,t7o,a7o,$u,che,n7o,s7o,lO,l7o,i7o,d7o,ku,fhe,c7o,f7o,iO,m7o,g7o,h7o,Su,mhe,p7o,_7o,dO,u7o,b7o,v7o,Ru,ghe,F7o,T7o,cO,M7o,E7o,C7o,Pu,hhe,w7o,A7o,fO,L7o,y7o,x7o,Bu,phe,$7o,k7o,mO,S7o,R7o,P7o,Iu,_he,B7o,I7o,gO,N7o,q7o,j7o,Nu,uhe,D7o,G7o,hO,O7o,V7o,X7o,qu,bhe,z7o,W7o,pO,Q7o,U7o,H7o,ju,vhe,J7o,Y7o,_O,K7o,Z7o,eLo,Du,Fhe,oLo,rLo,uO,tLo,aLo,nLo,Gu,The,sLo,lLo,bO,iLo,dLo,cLo,Ou,Mhe,fLo,mLo,vO,gLo,hLo,pLo,Vu,Ehe,_Lo,uLo,FO,bLo,vLo,FLo,Xu,Che,TLo,MLo,TO,ELo,CLo,wLo,zu,whe,ALo,LLo,MO,yLo,xLo,$Lo,Wu,Ahe,kLo,SLo,EO,RLo,PLo,BLo,Qu,Lhe,ILo,NLo,CO,qLo,jLo,DLo,Uu,yhe,GLo,OLo,wO,VLo,XLo,zLo,Hu,xhe,WLo,QLo,AO,ULo,HLo,JLo,Ju,$he,YLo,KLo,LO,ZLo,eyo,oyo,Yu,khe,ryo,tyo,yO,ayo,nyo,syo,Ku,She,lyo,iyo,xO,dyo,cyo,fyo,Zu,Rhe,myo,gyo,$O,hyo,pyo,_yo,e1,Phe,uyo,byo,kO,vyo,Fyo,Tyo,o1,Bhe,Myo,Eyo,SO,Cyo,wyo,Ayo,r1,Ihe,Lyo,yyo,RO,xyo,$yo,kyo,t1,Nhe,Syo,Ryo,PO,Pyo,Byo,Iyo,a1,qhe,Nyo,qyo,BO,jyo,Dyo,Gyo,n1,jhe,Oyo,Vyo,IO,Xyo,zyo,Wyo,s1,Dhe,Qyo,Uyo,NO,Hyo,Jyo,Yyo,l1,Ghe,Kyo,Zyo,qO,e9o,o9o,r9o,i1,Ohe,t9o,a9o,jO,n9o,s9o,l9o,d1,Vhe,i9o,d9o,DO,c9o,f9o,m9o,c1,Xhe,g9o,h9o,GO,p9o,_9o,u9o,f1,zhe,b9o,v9o,OO,F9o,T9o,M9o,m1,Whe,E9o,C9o,VO,w9o,A9o,L9o,g1,Qhe,y9o,x9o,XO,$9o,k9o,S9o,h1,Uhe,R9o,P9o,zO,B9o,I9o,N9o,p1,Hhe,q9o,j9o,WO,D9o,G9o,O9o,_1,Jhe,V9o,X9o,QO,z9o,W9o,Q9o,u1,Yhe,U9o,H9o,UO,J9o,Y9o,K9o,b1,Khe,Z9o,exo,HO,oxo,rxo,txo,v1,Zhe,axo,nxo,JO,sxo,lxo,ixo,F1,epe,dxo,cxo,YO,fxo,mxo,gxo,T1,ope,hxo,pxo,KO,_xo,uxo,bxo,M1,rpe,vxo,Fxo,ZO,Txo,Mxo,Exo,E1,tpe,Cxo,wxo,eV,Axo,Lxo,yxo,C1,ape,xxo,$xo,oV,kxo,Sxo,Rxo,w1,npe,Pxo,Bxo,rV,Ixo,Nxo,qxo,A1,spe,jxo,Dxo,tV,Gxo,Oxo,Vxo,L1,lpe,Xxo,zxo,aV,Wxo,Qxo,Uxo,y1,ipe,Hxo,Jxo,nV,Yxo,Kxo,Zxo,x1,dpe,e$o,o$o,sV,r$o,t$o,a$o,$1,cpe,n$o,s$o,lV,l$o,i$o,d$o,k1,fpe,c$o,f$o,iV,m$o,g$o,h$o,S1,mpe,p$o,_$o,dV,u$o,b$o,v$o,R1,gpe,F$o,T$o,cV,M$o,E$o,C$o,P1,hpe,w$o,A$o,fV,L$o,y$o,x$o,B1,$$o,ppe,k$o,S$o,_pe,R$o,P$o,I1,UUe,fd,N1,upe,i9,B$o,bpe,I$o,HUe,Po,d9,N$o,md,q$o,mV,j$o,D$o,gV,G$o,O$o,V$o,c9,X$o,vpe,z$o,W$o,Q$o,pt,f9,U$o,Fpe,H$o,J$o,gd,Y$o,Tpe,K$o,Z$o,hV,eko,oko,rko,q1,tko,Ke,m9,ako,Mpe,nko,sko,Ua,lko,Epe,iko,dko,Cpe,cko,fko,wpe,mko,gko,hko,G,j1,Ape,pko,_ko,pV,uko,bko,vko,D1,Lpe,Fko,Tko,_V,Mko,Eko,Cko,G1,ype,wko,Ako,uV,Lko,yko,xko,O1,xpe,$ko,kko,bV,Sko,Rko,Pko,V1,$pe,Bko,Iko,vV,Nko,qko,jko,X1,kpe,Dko,Gko,FV,Oko,Vko,Xko,z1,Spe,zko,Wko,TV,Qko,Uko,Hko,W1,Rpe,Jko,Yko,MV,Kko,Zko,eSo,Q1,Ppe,oSo,rSo,EV,tSo,aSo,nSo,U1,Bpe,sSo,lSo,CV,iSo,dSo,cSo,H1,Ipe,fSo,mSo,wV,gSo,hSo,pSo,J1,Npe,_So,uSo,AV,bSo,vSo,FSo,Y1,qpe,TSo,MSo,LV,ESo,CSo,wSo,K1,jpe,ASo,LSo,yV,ySo,xSo,$So,Z1,Dpe,kSo,SSo,xV,RSo,PSo,BSo,e8,Gpe,ISo,NSo,$V,qSo,jSo,DSo,o8,Ope,GSo,OSo,kV,VSo,XSo,zSo,r8,Vpe,WSo,QSo,SV,USo,HSo,JSo,t8,Xpe,YSo,KSo,RV,ZSo,eRo,oRo,a8,zpe,rRo,tRo,PV,aRo,nRo,sRo,n8,Wpe,lRo,iRo,BV,dRo,cRo,fRo,s8,Qpe,mRo,gRo,IV,hRo,pRo,_Ro,l8,Upe,uRo,bRo,NV,vRo,FRo,TRo,i8,Hpe,MRo,ERo,qV,CRo,wRo,ARo,d8,Jpe,LRo,yRo,jV,xRo,$Ro,kRo,c8,Ype,SRo,RRo,DV,PRo,BRo,IRo,f8,Kpe,NRo,qRo,GV,jRo,DRo,GRo,m8,Zpe,ORo,VRo,OV,XRo,zRo,WRo,g8,e_e,QRo,URo,VV,HRo,JRo,YRo,h8,o_e,KRo,ZRo,XV,ePo,oPo,rPo,p8,r_e,tPo,aPo,zV,nPo,sPo,lPo,_8,t_e,iPo,dPo,WV,cPo,fPo,mPo,u8,a_e,gPo,hPo,QV,pPo,_Po,uPo,b8,n_e,bPo,vPo,UV,FPo,TPo,MPo,v8,s_e,EPo,CPo,HV,wPo,APo,LPo,F8,l_e,yPo,xPo,JV,$Po,kPo,SPo,T8,i_e,RPo,PPo,YV,BPo,IPo,NPo,M8,d_e,qPo,jPo,KV,DPo,GPo,OPo,E8,c_e,VPo,XPo,ZV,zPo,WPo,QPo,C8,f_e,UPo,HPo,eX,JPo,YPo,KPo,w8,m_e,ZPo,eBo,oX,oBo,rBo,tBo,A8,g_e,aBo,nBo,rX,sBo,lBo,iBo,L8,h_e,dBo,cBo,tX,fBo,mBo,gBo,y8,p_e,hBo,pBo,aX,_Bo,uBo,bBo,x8,__e,vBo,FBo,nX,TBo,MBo,EBo,$8,u_e,CBo,wBo,sX,ABo,LBo,yBo,k8,b_e,xBo,$Bo,lX,kBo,SBo,RBo,S8,PBo,v_e,BBo,IBo,F_e,NBo,qBo,R8,JUe,hd,P8,T_e,g9,jBo,M_e,DBo,YUe,Bo,h9,GBo,pd,OBo,iX,VBo,XBo,dX,zBo,WBo,QBo,p9,UBo,E_e,HBo,JBo,YBo,_t,_9,KBo,C_e,ZBo,eIo,_d,oIo,w_e,rIo,tIo,cX,aIo,nIo,sIo,B8,lIo,Ze,u9,iIo,A_e,dIo,cIo,Ha,fIo,L_e,mIo,gIo,y_e,hIo,pIo,x_e,_Io,uIo,bIo,z,I8,$_e,vIo,FIo,fX,TIo,MIo,EIo,N8,k_e,CIo,wIo,mX,AIo,LIo,yIo,q8,S_e,xIo,$Io,gX,kIo,SIo,RIo,j8,R_e,PIo,BIo,hX,IIo,NIo,qIo,D8,P_e,jIo,DIo,pX,GIo,OIo,VIo,G8,B_e,XIo,zIo,_X,WIo,QIo,UIo,O8,I_e,HIo,JIo,uX,YIo,KIo,ZIo,V8,N_e,eNo,oNo,bX,rNo,tNo,aNo,X8,q_e,nNo,sNo,vX,lNo,iNo,dNo,z8,j_e,cNo,fNo,FX,mNo,gNo,hNo,W8,D_e,pNo,_No,TX,uNo,bNo,vNo,Q8,G_e,FNo,TNo,MX,MNo,ENo,CNo,U8,O_e,wNo,ANo,EX,LNo,yNo,xNo,H8,V_e,$No,kNo,CX,SNo,RNo,PNo,J8,X_e,BNo,INo,wX,NNo,qNo,jNo,Y8,z_e,DNo,GNo,AX,ONo,VNo,XNo,K8,W_e,zNo,WNo,LX,QNo,UNo,HNo,Z8,Q_e,JNo,YNo,yX,KNo,ZNo,eqo,eb,U_e,oqo,rqo,xX,tqo,aqo,nqo,ob,H_e,sqo,lqo,$X,iqo,dqo,cqo,rb,J_e,fqo,mqo,kX,gqo,hqo,pqo,tb,Y_e,_qo,uqo,SX,bqo,vqo,Fqo,ab,K_e,Tqo,Mqo,RX,Eqo,Cqo,wqo,nb,Z_e,Aqo,Lqo,PX,yqo,xqo,$qo,sb,eue,kqo,Sqo,BX,Rqo,Pqo,Bqo,lb,oue,Iqo,Nqo,IX,qqo,jqo,Dqo,ib,rue,Gqo,Oqo,NX,Vqo,Xqo,zqo,db,tue,Wqo,Qqo,qX,Uqo,Hqo,Jqo,cb,aue,Yqo,Kqo,jX,Zqo,ejo,ojo,fb,nue,rjo,tjo,DX,ajo,njo,sjo,mb,sue,ljo,ijo,GX,djo,cjo,fjo,gb,lue,mjo,gjo,OX,hjo,pjo,_jo,hb,iue,ujo,bjo,VX,vjo,Fjo,Tjo,pb,due,Mjo,Ejo,XX,Cjo,wjo,Ajo,_b,cue,Ljo,yjo,zX,xjo,$jo,kjo,ub,fue,Sjo,Rjo,WX,Pjo,Bjo,Ijo,bb,mue,Njo,qjo,QX,jjo,Djo,Gjo,vb,gue,Ojo,Vjo,UX,Xjo,zjo,Wjo,Fb,hue,Qjo,Ujo,HX,Hjo,Jjo,Yjo,Tb,pue,Kjo,Zjo,JX,eDo,oDo,rDo,Mb,tDo,_ue,aDo,nDo,uue,sDo,lDo,Eb,KUe,ud,Cb,bue,b9,iDo,vue,dDo,ZUe,Io,v9,cDo,bd,fDo,YX,mDo,gDo,KX,hDo,pDo,_Do,F9,uDo,Fue,bDo,vDo,FDo,ut,T9,TDo,Tue,MDo,EDo,vd,CDo,Mue,wDo,ADo,ZX,LDo,yDo,xDo,wb,$Do,eo,M9,kDo,Eue,SDo,RDo,Ja,PDo,Cue,BDo,IDo,wue,NDo,qDo,Aue,jDo,DDo,GDo,E9,Ab,Lue,ODo,VDo,yue,XDo,zDo,WDo,Lb,xue,QDo,UDo,$ue,HDo,JDo,YDo,yb,KDo,kue,ZDo,eGo,Sue,oGo,rGo,xb,eHe,Fd,$b,Rue,C9,tGo,Pue,aGo,oHe,No,w9,nGo,Td,sGo,ez,lGo,iGo,oz,dGo,cGo,fGo,A9,mGo,Bue,gGo,hGo,pGo,bt,L9,_Go,Iue,uGo,bGo,Md,vGo,Nue,FGo,TGo,rz,MGo,EGo,CGo,kb,wGo,oo,y9,AGo,que,LGo,yGo,Ya,xGo,jue,$Go,kGo,Due,SGo,RGo,Gue,PGo,BGo,IGo,U,Sb,Oue,NGo,qGo,tz,jGo,DGo,GGo,Rb,Vue,OGo,VGo,az,XGo,zGo,WGo,Pb,Xue,QGo,UGo,nz,HGo,JGo,YGo,Bb,zue,KGo,ZGo,sz,eOo,oOo,rOo,Ib,Wue,tOo,aOo,lz,nOo,sOo,lOo,Nb,Que,iOo,dOo,iz,cOo,fOo,mOo,qb,Uue,gOo,hOo,dz,pOo,_Oo,uOo,jb,Hue,bOo,vOo,cz,FOo,TOo,MOo,Db,Jue,EOo,COo,fz,wOo,AOo,LOo,Gb,Yue,yOo,xOo,mz,$Oo,kOo,SOo,Ob,Kue,ROo,POo,gz,BOo,IOo,NOo,Vb,Zue,qOo,jOo,hz,DOo,GOo,OOo,Xb,e1e,VOo,XOo,pz,zOo,WOo,QOo,zb,o1e,UOo,HOo,_z,JOo,YOo,KOo,Wb,r1e,ZOo,eVo,uz,oVo,rVo,tVo,Qb,t1e,aVo,nVo,bz,sVo,lVo,iVo,Ub,a1e,dVo,cVo,vz,fVo,mVo,gVo,Hb,n1e,hVo,pVo,Fz,_Vo,uVo,bVo,Jb,s1e,vVo,FVo,Tz,TVo,MVo,EVo,Yb,l1e,CVo,wVo,Mz,AVo,LVo,yVo,Kb,i1e,xVo,$Vo,Ez,kVo,SVo,RVo,Zb,d1e,PVo,BVo,Cz,IVo,NVo,qVo,e2,c1e,jVo,DVo,wz,GVo,OVo,VVo,o2,f1e,XVo,zVo,Az,WVo,QVo,UVo,r2,m1e,HVo,JVo,Lz,YVo,KVo,ZVo,t2,g1e,eXo,oXo,yz,rXo,tXo,aXo,a2,h1e,nXo,sXo,xz,lXo,iXo,dXo,n2,p1e,cXo,fXo,$z,mXo,gXo,hXo,s2,_1e,pXo,_Xo,kz,uXo,bXo,vXo,l2,u1e,FXo,TXo,Sz,MXo,EXo,CXo,i2,b1e,wXo,AXo,Rz,LXo,yXo,xXo,d2,v1e,$Xo,kXo,Pz,SXo,RXo,PXo,c2,F1e,BXo,IXo,Bz,NXo,qXo,jXo,f2,T1e,DXo,GXo,M1e,OXo,VXo,XXo,m2,E1e,zXo,WXo,Iz,QXo,UXo,HXo,g2,C1e,JXo,YXo,Nz,KXo,ZXo,ezo,h2,w1e,ozo,rzo,qz,tzo,azo,nzo,p2,A1e,szo,lzo,jz,izo,dzo,czo,_2,fzo,L1e,mzo,gzo,y1e,hzo,pzo,u2,rHe,Ed,b2,x1e,x9,_zo,$1e,uzo,tHe,qo,$9,bzo,Cd,vzo,Dz,Fzo,Tzo,Gz,Mzo,Ezo,Czo,k9,wzo,k1e,Azo,Lzo,yzo,vt,S9,xzo,S1e,$zo,kzo,wd,Szo,R1e,Rzo,Pzo,Oz,Bzo,Izo,Nzo,v2,qzo,ro,R9,jzo,P1e,Dzo,Gzo,Ka,Ozo,B1e,Vzo,Xzo,I1e,zzo,Wzo,N1e,Qzo,Uzo,Hzo,me,F2,q1e,Jzo,Yzo,Vz,Kzo,Zzo,eWo,T2,j1e,oWo,rWo,Xz,tWo,aWo,nWo,M2,D1e,sWo,lWo,zz,iWo,dWo,cWo,E2,G1e,fWo,mWo,Wz,gWo,hWo,pWo,C2,O1e,_Wo,uWo,Qz,bWo,vWo,FWo,w2,V1e,TWo,MWo,Uz,EWo,CWo,wWo,A2,X1e,AWo,LWo,Hz,yWo,xWo,$Wo,L2,z1e,kWo,SWo,Jz,RWo,PWo,BWo,y2,W1e,IWo,NWo,Yz,qWo,jWo,DWo,x2,Q1e,GWo,OWo,Kz,VWo,XWo,zWo,$2,U1e,WWo,QWo,Zz,UWo,HWo,JWo,k2,H1e,YWo,KWo,eW,ZWo,eQo,oQo,S2,J1e,rQo,tQo,oW,aQo,nQo,sQo,R2,Y1e,lQo,iQo,rW,dQo,cQo,fQo,P2,K1e,mQo,gQo,tW,hQo,pQo,_Qo,B2,Z1e,uQo,bQo,aW,vQo,FQo,TQo,I2,e8e,MQo,EQo,nW,CQo,wQo,AQo,N2,o8e,LQo,yQo,sW,xQo,$Qo,kQo,q2,r8e,SQo,RQo,lW,PQo,BQo,IQo,j2,NQo,t8e,qQo,jQo,a8e,DQo,GQo,D2,aHe,Ad,G2,n8e,P9,OQo,s8e,VQo,nHe,jo,B9,XQo,Ld,zQo,iW,WQo,QQo,dW,UQo,HQo,JQo,I9,YQo,l8e,KQo,ZQo,eUo,Ft,N9,oUo,i8e,rUo,tUo,yd,aUo,d8e,nUo,sUo,cW,lUo,iUo,dUo,O2,cUo,to,q9,fUo,c8e,mUo,gUo,Za,hUo,f8e,pUo,_Uo,m8e,uUo,bUo,g8e,vUo,FUo,TUo,N,V2,h8e,MUo,EUo,fW,CUo,wUo,AUo,X2,p8e,LUo,yUo,mW,xUo,$Uo,kUo,z2,_8e,SUo,RUo,gW,PUo,BUo,IUo,W2,u8e,NUo,qUo,hW,jUo,DUo,GUo,Q2,b8e,OUo,VUo,pW,XUo,zUo,WUo,U2,v8e,QUo,UUo,_W,HUo,JUo,YUo,H2,F8e,KUo,ZUo,uW,eHo,oHo,rHo,J2,T8e,tHo,aHo,bW,nHo,sHo,lHo,Y2,M8e,iHo,dHo,vW,cHo,fHo,mHo,K2,E8e,gHo,hHo,FW,pHo,_Ho,uHo,Z2,C8e,bHo,vHo,TW,FHo,THo,MHo,ev,w8e,EHo,CHo,MW,wHo,AHo,LHo,ov,A8e,yHo,xHo,EW,$Ho,kHo,SHo,rv,L8e,RHo,PHo,CW,BHo,IHo,NHo,tv,y8e,qHo,jHo,wW,DHo,GHo,OHo,av,x8e,VHo,XHo,AW,zHo,WHo,QHo,nv,$8e,UHo,HHo,LW,JHo,YHo,KHo,sv,k8e,ZHo,eJo,yW,oJo,rJo,tJo,lv,S8e,aJo,nJo,xW,sJo,lJo,iJo,iv,R8e,dJo,cJo,$W,fJo,mJo,gJo,dv,P8e,hJo,pJo,kW,_Jo,uJo,bJo,cv,B8e,vJo,FJo,SW,TJo,MJo,EJo,fv,I8e,CJo,wJo,RW,AJo,LJo,yJo,mv,N8e,xJo,$Jo,PW,kJo,SJo,RJo,gv,q8e,PJo,BJo,BW,IJo,NJo,qJo,hv,j8e,jJo,DJo,IW,GJo,OJo,VJo,pv,D8e,XJo,zJo,NW,WJo,QJo,UJo,_v,G8e,HJo,JJo,qW,YJo,KJo,ZJo,uv,O8e,eYo,oYo,jW,rYo,tYo,aYo,bv,V8e,nYo,sYo,DW,lYo,iYo,dYo,vv,X8e,cYo,fYo,GW,mYo,gYo,hYo,Fv,z8e,pYo,_Yo,OW,uYo,bYo,vYo,Tv,W8e,FYo,TYo,VW,MYo,EYo,CYo,Mv,Q8e,wYo,AYo,XW,LYo,yYo,xYo,Ev,U8e,$Yo,kYo,zW,SYo,RYo,PYo,Cv,H8e,BYo,IYo,WW,NYo,qYo,jYo,wv,J8e,DYo,GYo,QW,OYo,VYo,XYo,Av,Y8e,zYo,WYo,UW,QYo,UYo,HYo,Lv,K8e,JYo,YYo,HW,KYo,ZYo,eKo,yv,Z8e,oKo,rKo,JW,tKo,aKo,nKo,xv,ebe,sKo,lKo,YW,iKo,dKo,cKo,$v,obe,fKo,mKo,KW,gKo,hKo,pKo,kv,rbe,_Ko,uKo,ZW,bKo,vKo,FKo,Sv,tbe,TKo,MKo,eQ,EKo,CKo,wKo,Rv,abe,AKo,LKo,oQ,yKo,xKo,$Ko,Pv,nbe,kKo,SKo,rQ,RKo,PKo,BKo,Bv,sbe,IKo,NKo,tQ,qKo,jKo,DKo,Iv,lbe,GKo,OKo,aQ,VKo,XKo,zKo,Nv,ibe,WKo,QKo,nQ,UKo,HKo,JKo,qv,dbe,YKo,KKo,sQ,ZKo,eZo,oZo,jv,cbe,rZo,tZo,lQ,aZo,nZo,sZo,Dv,fbe,lZo,iZo,iQ,dZo,cZo,fZo,Gv,mZo,mbe,gZo,hZo,gbe,pZo,_Zo,Ov,sHe,xd,Vv,hbe,j9,uZo,pbe,bZo,lHe,Do,D9,vZo,$d,FZo,dQ,TZo,MZo,cQ,EZo,CZo,wZo,G9,AZo,_be,LZo,yZo,xZo,Tt,O9,$Zo,ube,kZo,SZo,kd,RZo,bbe,PZo,BZo,fQ,IZo,NZo,qZo,Xv,jZo,ao,V9,DZo,vbe,GZo,OZo,en,VZo,Fbe,XZo,zZo,Tbe,WZo,QZo,Mbe,UZo,HZo,JZo,Z,zv,Ebe,YZo,KZo,mQ,ZZo,eer,oer,Wv,Cbe,rer,ter,gQ,aer,ner,ser,Qv,wbe,ler,ier,hQ,der,cer,fer,Uv,Abe,mer,ger,pQ,her,per,_er,Hv,Lbe,uer,ber,_Q,ver,Fer,Ter,Jv,ybe,Mer,Eer,uQ,Cer,wer,Aer,Yv,xbe,Ler,yer,bQ,xer,$er,ker,Kv,$be,Ser,Rer,vQ,Per,Ber,Ier,Zv,kbe,Ner,qer,FQ,jer,Der,Ger,e6,Sbe,Oer,Ver,TQ,Xer,zer,Wer,o6,Rbe,Qer,Uer,MQ,Her,Jer,Yer,r6,Pbe,Ker,Zer,EQ,eor,oor,ror,t6,Bbe,tor,aor,CQ,nor,sor,lor,a6,Ibe,ior,dor,wQ,cor,mor,gor,n6,Nbe,hor,por,AQ,_or,uor,bor,s6,qbe,vor,For,LQ,Tor,Mor,Eor,l6,jbe,Cor,wor,yQ,Aor,Lor,yor,i6,Dbe,xor,$or,xQ,kor,Sor,Ror,d6,Gbe,Por,Bor,$Q,Ior,Nor,qor,c6,Obe,jor,Dor,kQ,Gor,Oor,Vor,f6,Vbe,Xor,zor,SQ,Wor,Qor,Uor,m6,Xbe,Hor,Jor,RQ,Yor,Kor,Zor,g6,zbe,err,orr,PQ,rrr,trr,arr,h6,Wbe,nrr,srr,BQ,lrr,irr,drr,p6,Qbe,crr,frr,IQ,mrr,grr,hrr,_6,Ube,prr,_rr,NQ,urr,brr,vrr,u6,Hbe,Frr,Trr,qQ,Mrr,Err,Crr,b6,Jbe,wrr,Arr,jQ,Lrr,yrr,xrr,v6,Ybe,$rr,krr,DQ,Srr,Rrr,Prr,F6,Kbe,Brr,Irr,GQ,Nrr,qrr,jrr,T6,Zbe,Drr,Grr,OQ,Orr,Vrr,Xrr,M6,zrr,e2e,Wrr,Qrr,o2e,Urr,Hrr,E6,iHe,Sd,C6,r2e,X9,Jrr,t2e,Yrr,dHe,Go,z9,Krr,Rd,Zrr,VQ,etr,otr,XQ,rtr,ttr,atr,W9,ntr,a2e,str,ltr,itr,Mt,Q9,dtr,n2e,ctr,ftr,Pd,mtr,s2e,gtr,htr,zQ,ptr,_tr,utr,w6,btr,no,U9,vtr,l2e,Ftr,Ttr,on,Mtr,i2e,Etr,Ctr,d2e,wtr,Atr,c2e,Ltr,ytr,xtr,Oo,A6,f2e,$tr,ktr,WQ,Str,Rtr,Ptr,L6,m2e,Btr,Itr,QQ,Ntr,qtr,jtr,y6,g2e,Dtr,Gtr,UQ,Otr,Vtr,Xtr,x6,h2e,ztr,Wtr,HQ,Qtr,Utr,Htr,$6,p2e,Jtr,Ytr,JQ,Ktr,Ztr,ear,k6,_2e,oar,rar,YQ,tar,aar,nar,S6,sar,u2e,lar,iar,b2e,dar,car,R6,cHe,Bd,P6,v2e,H9,far,F2e,mar,fHe,Vo,J9,gar,Id,har,KQ,par,_ar,ZQ,uar,bar,Far,Y9,Tar,T2e,Mar,Ear,Car,Et,K9,war,M2e,Aar,Lar,Nd,yar,E2e,xar,$ar,eU,kar,Sar,Rar,B6,Par,so,Z9,Bar,C2e,Iar,Nar,rn,qar,w2e,jar,Dar,A2e,Gar,Oar,L2e,Var,Xar,zar,H,I6,y2e,War,Qar,oU,Uar,Har,Jar,N6,x2e,Yar,Kar,rU,Zar,enr,onr,q6,$2e,rnr,tnr,tU,anr,nnr,snr,j6,k2e,lnr,inr,aU,dnr,cnr,fnr,D6,S2e,mnr,gnr,nU,hnr,pnr,_nr,G6,R2e,unr,bnr,sU,vnr,Fnr,Tnr,O6,P2e,Mnr,Enr,lU,Cnr,wnr,Anr,V6,B2e,Lnr,ynr,iU,xnr,$nr,knr,X6,I2e,Snr,Rnr,dU,Pnr,Bnr,Inr,z6,N2e,Nnr,qnr,cU,jnr,Dnr,Gnr,W6,q2e,Onr,Vnr,fU,Xnr,znr,Wnr,Q6,j2e,Qnr,Unr,mU,Hnr,Jnr,Ynr,U6,D2e,Knr,Znr,gU,esr,osr,rsr,H6,G2e,tsr,asr,hU,nsr,ssr,lsr,J6,O2e,isr,dsr,pU,csr,fsr,msr,Y6,V2e,gsr,hsr,_U,psr,_sr,usr,K6,X2e,bsr,vsr,uU,Fsr,Tsr,Msr,Z6,z2e,Esr,Csr,bU,wsr,Asr,Lsr,eF,W2e,ysr,xsr,vU,$sr,ksr,Ssr,oF,Q2e,Rsr,Psr,FU,Bsr,Isr,Nsr,rF,U2e,qsr,jsr,TU,Dsr,Gsr,Osr,tF,H2e,Vsr,Xsr,MU,zsr,Wsr,Qsr,aF,J2e,Usr,Hsr,EU,Jsr,Ysr,Ksr,nF,Y2e,Zsr,elr,CU,olr,rlr,tlr,sF,K2e,alr,nlr,wU,slr,llr,ilr,lF,Z2e,dlr,clr,AU,flr,mlr,glr,iF,eve,hlr,plr,LU,_lr,ulr,blr,dF,ove,vlr,Flr,yU,Tlr,Mlr,Elr,cF,rve,Clr,wlr,xU,Alr,Llr,ylr,fF,tve,xlr,$lr,$U,klr,Slr,Rlr,mF,ave,Plr,Blr,kU,Ilr,Nlr,qlr,gF,nve,jlr,Dlr,SU,Glr,Olr,Vlr,hF,sve,Xlr,zlr,RU,Wlr,Qlr,Ulr,pF,lve,Hlr,Jlr,PU,Ylr,Klr,Zlr,_F,ive,eir,oir,BU,rir,tir,air,uF,dve,nir,sir,IU,lir,iir,dir,bF,cve,cir,fir,NU,mir,gir,hir,vF,pir,fve,_ir,uir,mve,bir,vir,FF,mHe,qd,TF,gve,ex,Fir,hve,Tir,gHe,Xo,ox,Mir,jd,Eir,qU,Cir,wir,jU,Air,Lir,yir,rx,xir,pve,$ir,kir,Sir,Ct,tx,Rir,_ve,Pir,Bir,Dd,Iir,uve,Nir,qir,DU,jir,Dir,Gir,MF,Oir,lo,ax,Vir,bve,Xir,zir,tn,Wir,vve,Qir,Uir,Fve,Hir,Jir,Tve,Yir,Kir,Zir,V,EF,Mve,edr,odr,GU,rdr,tdr,adr,CF,Eve,ndr,sdr,OU,ldr,idr,ddr,wF,Cve,cdr,fdr,VU,mdr,gdr,hdr,AF,wve,pdr,_dr,XU,udr,bdr,vdr,LF,Ave,Fdr,Tdr,zU,Mdr,Edr,Cdr,yF,Lve,wdr,Adr,WU,Ldr,ydr,xdr,xF,yve,$dr,kdr,QU,Sdr,Rdr,Pdr,$F,xve,Bdr,Idr,UU,Ndr,qdr,jdr,kF,$ve,Ddr,Gdr,HU,Odr,Vdr,Xdr,SF,kve,zdr,Wdr,JU,Qdr,Udr,Hdr,RF,Sve,Jdr,Ydr,YU,Kdr,Zdr,ecr,PF,Rve,ocr,rcr,KU,tcr,acr,ncr,BF,Pve,scr,lcr,ZU,icr,dcr,ccr,IF,Bve,fcr,mcr,eH,gcr,hcr,pcr,NF,Ive,_cr,ucr,oH,bcr,vcr,Fcr,qF,Nve,Tcr,Mcr,rH,Ecr,Ccr,wcr,jF,qve,Acr,Lcr,tH,ycr,xcr,$cr,DF,jve,kcr,Scr,aH,Rcr,Pcr,Bcr,GF,Dve,Icr,Ncr,nH,qcr,jcr,Dcr,OF,Gve,Gcr,Ocr,sH,Vcr,Xcr,zcr,VF,Ove,Wcr,Qcr,lH,Ucr,Hcr,Jcr,XF,Vve,Ycr,Kcr,iH,Zcr,efr,ofr,zF,Xve,rfr,tfr,dH,afr,nfr,sfr,WF,zve,lfr,ifr,cH,dfr,cfr,ffr,QF,Wve,mfr,gfr,fH,hfr,pfr,_fr,UF,Qve,ufr,bfr,mH,vfr,Ffr,Tfr,HF,Uve,Mfr,Efr,gH,Cfr,wfr,Afr,JF,Hve,Lfr,yfr,hH,xfr,$fr,kfr,YF,Jve,Sfr,Rfr,pH,Pfr,Bfr,Ifr,KF,Yve,Nfr,qfr,_H,jfr,Dfr,Gfr,ZF,Kve,Ofr,Vfr,uH,Xfr,zfr,Wfr,eT,Zve,Qfr,Ufr,bH,Hfr,Jfr,Yfr,oT,e6e,Kfr,Zfr,vH,emr,omr,rmr,rT,o6e,tmr,amr,FH,nmr,smr,lmr,tT,r6e,imr,dmr,TH,cmr,fmr,mmr,aT,t6e,gmr,hmr,MH,pmr,_mr,umr,nT,a6e,bmr,vmr,EH,Fmr,Tmr,Mmr,sT,n6e,Emr,Cmr,CH,wmr,Amr,Lmr,lT,s6e,ymr,xmr,wH,$mr,kmr,Smr,iT,l6e,Rmr,Pmr,AH,Bmr,Imr,Nmr,dT,i6e,qmr,jmr,LH,Dmr,Gmr,Omr,cT,d6e,Vmr,Xmr,yH,zmr,Wmr,Qmr,fT,c6e,Umr,Hmr,xH,Jmr,Ymr,Kmr,mT,Zmr,f6e,egr,ogr,m6e,rgr,tgr,gT,hHe,Gd,hT,g6e,nx,agr,h6e,ngr,pHe,zo,sx,sgr,Od,lgr,$H,igr,dgr,kH,cgr,fgr,mgr,lx,ggr,p6e,hgr,pgr,_gr,wt,ix,ugr,_6e,bgr,vgr,Vd,Fgr,u6e,Tgr,Mgr,SH,Egr,Cgr,wgr,pT,Agr,io,dx,Lgr,b6e,ygr,xgr,an,$gr,v6e,kgr,Sgr,F6e,Rgr,Pgr,T6e,Bgr,Igr,Ngr,M6e,_T,E6e,qgr,jgr,RH,Dgr,Ggr,Ogr,uT,Vgr,C6e,Xgr,zgr,w6e,Wgr,Qgr,bT,_He,Xd,vT,A6e,cx,Ugr,L6e,Hgr,uHe,Wo,fx,Jgr,zd,Ygr,PH,Kgr,Zgr,BH,ehr,ohr,rhr,mx,thr,y6e,ahr,nhr,shr,At,gx,lhr,x6e,ihr,dhr,Wd,chr,$6e,fhr,mhr,IH,ghr,hhr,phr,FT,_hr,co,hx,uhr,k6e,bhr,vhr,nn,Fhr,S6e,Thr,Mhr,R6e,Ehr,Chr,P6e,whr,Ahr,Lhr,be,TT,B6e,yhr,xhr,NH,$hr,khr,Shr,MT,I6e,Rhr,Phr,qH,Bhr,Ihr,Nhr,ET,N6e,qhr,jhr,jH,Dhr,Ghr,Ohr,CT,q6e,Vhr,Xhr,DH,zhr,Whr,Qhr,fl,j6e,Uhr,Hhr,GH,Jhr,Yhr,OH,Khr,Zhr,epr,wT,D6e,opr,rpr,VH,tpr,apr,npr,ml,G6e,spr,lpr,XH,ipr,dpr,zH,cpr,fpr,mpr,AT,O6e,gpr,hpr,WH,ppr,_pr,upr,Lt,V6e,bpr,vpr,QH,Fpr,Tpr,UH,Mpr,Epr,HH,Cpr,wpr,Apr,LT,X6e,Lpr,ypr,JH,xpr,$pr,kpr,yT,z6e,Spr,Rpr,YH,Ppr,Bpr,Ipr,xT,W6e,Npr,qpr,KH,jpr,Dpr,Gpr,$T,Q6e,Opr,Vpr,ZH,Xpr,zpr,Wpr,kT,U6e,Qpr,Upr,eJ,Hpr,Jpr,Ypr,ST,H6e,Kpr,Zpr,oJ,e_r,o_r,r_r,RT,J6e,t_r,a_r,rJ,n_r,s_r,l_r,PT,Y6e,i_r,d_r,tJ,c_r,f_r,m_r,BT,g_r,K6e,h_r,p_r,Z6e,__r,u_r,IT,bHe,Qd,NT,eFe,px,b_r,oFe,v_r,vHe,Qo,_x,F_r,Ud,T_r,aJ,M_r,E_r,nJ,C_r,w_r,A_r,ux,L_r,rFe,y_r,x_r,$_r,yt,bx,k_r,tFe,S_r,R_r,Hd,P_r,aFe,B_r,I_r,sJ,N_r,q_r,j_r,qT,D_r,fo,vx,G_r,nFe,O_r,V_r,sn,X_r,sFe,z_r,W_r,lFe,Q_r,U_r,iFe,H_r,J_r,Y_r,dFe,jT,cFe,K_r,Z_r,lJ,eur,our,rur,DT,tur,fFe,aur,nur,mFe,sur,lur,GT,FHe,Jd,OT,gFe,Fx,iur,hFe,dur,THe,Uo,Tx,cur,Yd,fur,iJ,mur,gur,dJ,hur,pur,_ur,Mx,uur,pFe,bur,vur,Fur,xt,Ex,Tur,_Fe,Mur,Eur,Kd,Cur,uFe,wur,Aur,cJ,Lur,yur,xur,VT,$ur,mo,Cx,kur,bFe,Sur,Rur,ln,Pur,vFe,Bur,Iur,FFe,Nur,qur,TFe,jur,Dur,Gur,MFe,XT,EFe,Our,Vur,fJ,Xur,zur,Wur,zT,Qur,CFe,Uur,Hur,wFe,Jur,Yur,WT,MHe,Zd,QT,AFe,wx,Kur,LFe,Zur,EHe,Ho,Ax,e1r,ec,o1r,mJ,r1r,t1r,gJ,a1r,n1r,s1r,Lx,l1r,yFe,i1r,d1r,c1r,$t,yx,f1r,xFe,m1r,g1r,oc,h1r,$Fe,p1r,_1r,hJ,u1r,b1r,v1r,UT,F1r,go,xx,T1r,kFe,M1r,E1r,dn,C1r,SFe,w1r,A1r,RFe,L1r,y1r,PFe,x1r,$1r,k1r,BFe,HT,IFe,S1r,R1r,pJ,P1r,B1r,I1r,JT,N1r,NFe,q1r,j1r,qFe,D1r,G1r,YT,CHe,rc,KT,jFe,$x,O1r,DFe,V1r,wHe,Jo,kx,X1r,tc,z1r,_J,W1r,Q1r,uJ,U1r,H1r,J1r,Sx,Y1r,GFe,K1r,Z1r,e8r,kt,Rx,o8r,OFe,r8r,t8r,ac,a8r,VFe,n8r,s8r,bJ,l8r,i8r,d8r,ZT,c8r,ho,Px,f8r,XFe,m8r,g8r,cn,h8r,zFe,p8r,_8r,WFe,u8r,b8r,QFe,v8r,F8r,T8r,Pe,eM,UFe,M8r,E8r,vJ,C8r,w8r,A8r,oM,HFe,L8r,y8r,FJ,x8r,$8r,k8r,rM,JFe,S8r,R8r,TJ,P8r,B8r,I8r,tM,YFe,N8r,q8r,MJ,j8r,D8r,G8r,aM,KFe,O8r,V8r,EJ,X8r,z8r,W8r,nM,ZFe,Q8r,U8r,CJ,H8r,J8r,Y8r,sM,eTe,K8r,Z8r,wJ,ebr,obr,rbr,lM,oTe,tbr,abr,AJ,nbr,sbr,lbr,iM,rTe,ibr,dbr,LJ,cbr,fbr,mbr,dM,gbr,tTe,hbr,pbr,aTe,_br,ubr,cM,AHe,nc,fM,nTe,Bx,bbr,sTe,vbr,LHe,Yo,Ix,Fbr,sc,Tbr,yJ,Mbr,Ebr,xJ,Cbr,wbr,Abr,Nx,Lbr,lTe,ybr,xbr,$br,St,qx,kbr,iTe,Sbr,Rbr,lc,Pbr,dTe,Bbr,Ibr,$J,Nbr,qbr,jbr,mM,Dbr,po,jx,Gbr,cTe,Obr,Vbr,fn,Xbr,fTe,zbr,Wbr,mTe,Qbr,Ubr,gTe,Hbr,Jbr,Ybr,it,gM,hTe,Kbr,Zbr,kJ,e2r,o2r,r2r,hM,pTe,t2r,a2r,SJ,n2r,s2r,l2r,pM,_Te,i2r,d2r,RJ,c2r,f2r,m2r,_M,uTe,g2r,h2r,PJ,p2r,_2r,u2r,uM,bTe,b2r,v2r,BJ,F2r,T2r,M2r,bM,E2r,vTe,C2r,w2r,FTe,A2r,L2r,vM,yHe,ic,FM,TTe,Dx,y2r,MTe,x2r,xHe,Ko,Gx,$2r,dc,k2r,IJ,S2r,R2r,NJ,P2r,B2r,I2r,Ox,N2r,ETe,q2r,j2r,D2r,Rt,Vx,G2r,CTe,O2r,V2r,cc,X2r,wTe,z2r,W2r,qJ,Q2r,U2r,H2r,TM,J2r,_o,Xx,Y2r,ATe,K2r,Z2r,mn,evr,LTe,ovr,rvr,yTe,tvr,avr,xTe,nvr,svr,lvr,Le,MM,$Te,ivr,dvr,jJ,cvr,fvr,mvr,EM,kTe,gvr,hvr,DJ,pvr,_vr,uvr,CM,STe,bvr,vvr,GJ,Fvr,Tvr,Mvr,wM,RTe,Evr,Cvr,OJ,wvr,Avr,Lvr,AM,PTe,yvr,xvr,VJ,$vr,kvr,Svr,LM,BTe,Rvr,Pvr,XJ,Bvr,Ivr,Nvr,yM,ITe,qvr,jvr,zJ,Dvr,Gvr,Ovr,xM,NTe,Vvr,Xvr,WJ,zvr,Wvr,Qvr,$M,qTe,Uvr,Hvr,QJ,Jvr,Yvr,Kvr,kM,jTe,Zvr,e6r,UJ,o6r,r6r,t6r,SM,a6r,DTe,n6r,s6r,GTe,l6r,i6r,RM,$He,fc,PM,OTe,zx,d6r,VTe,c6r,kHe,Zo,Wx,f6r,mc,m6r,HJ,g6r,h6r,JJ,p6r,_6r,u6r,Qx,b6r,XTe,v6r,F6r,T6r,Pt,Ux,M6r,zTe,E6r,C6r,gc,w6r,WTe,A6r,L6r,YJ,y6r,x6r,$6r,BM,k6r,uo,Hx,S6r,QTe,R6r,P6r,gn,B6r,UTe,I6r,N6r,HTe,q6r,j6r,JTe,D6r,G6r,O6r,Jx,IM,YTe,V6r,X6r,KJ,z6r,W6r,Q6r,NM,KTe,U6r,H6r,ZJ,J6r,Y6r,K6r,qM,Z6r,ZTe,eFr,oFr,eMe,rFr,tFr,jM,SHe,hc,DM,oMe,Yx,aFr,rMe,nFr,RHe,er,Kx,sFr,pc,lFr,eY,iFr,dFr,oY,cFr,fFr,mFr,Zx,gFr,tMe,hFr,pFr,_Fr,Bt,e$,uFr,aMe,bFr,vFr,_c,FFr,nMe,TFr,MFr,rY,EFr,CFr,wFr,GM,AFr,bo,o$,LFr,sMe,yFr,xFr,hn,$Fr,lMe,kFr,SFr,iMe,RFr,PFr,dMe,BFr,IFr,NFr,dt,OM,cMe,qFr,jFr,tY,DFr,GFr,OFr,VM,fMe,VFr,XFr,aY,zFr,WFr,QFr,XM,mMe,UFr,HFr,nY,JFr,YFr,KFr,zM,gMe,ZFr,eTr,sY,oTr,rTr,tTr,WM,hMe,aTr,nTr,lY,sTr,lTr,iTr,QM,dTr,pMe,cTr,fTr,_Me,mTr,gTr,UM,PHe,uc,HM,uMe,r$,hTr,bMe,pTr,BHe,or,t$,_Tr,bc,uTr,iY,bTr,vTr,dY,FTr,TTr,MTr,a$,ETr,vMe,CTr,wTr,ATr,It,n$,LTr,FMe,yTr,xTr,vc,$Tr,TMe,kTr,STr,cY,RTr,PTr,BTr,JM,ITr,vo,s$,NTr,MMe,qTr,jTr,pn,DTr,EMe,GTr,OTr,CMe,VTr,XTr,wMe,zTr,WTr,QTr,_n,YM,AMe,UTr,HTr,fY,JTr,YTr,KTr,KM,LMe,ZTr,eMr,mY,oMr,rMr,tMr,ZM,yMe,aMr,nMr,gY,sMr,lMr,iMr,eE,xMe,dMr,cMr,hY,fMr,mMr,gMr,oE,hMr,$Me,pMr,_Mr,kMe,uMr,bMr,rE,IHe,Fc,tE,SMe,l$,vMr,RMe,FMr,NHe,rr,i$,TMr,Tc,MMr,pY,EMr,CMr,_Y,wMr,AMr,LMr,d$,yMr,PMe,xMr,$Mr,kMr,Nt,c$,SMr,BMe,RMr,PMr,Mc,BMr,IMe,IMr,NMr,uY,qMr,jMr,DMr,aE,GMr,Fo,f$,OMr,NMe,VMr,XMr,un,zMr,qMe,WMr,QMr,jMe,UMr,HMr,DMe,JMr,YMr,KMr,m$,nE,GMe,ZMr,eEr,bY,oEr,rEr,tEr,sE,OMe,aEr,nEr,vY,sEr,lEr,iEr,lE,dEr,VMe,cEr,fEr,XMe,mEr,gEr,iE,qHe,Ec,dE,zMe,g$,hEr,WMe,pEr,jHe,tr,h$,_Er,Cc,uEr,FY,bEr,vEr,TY,FEr,TEr,MEr,p$,EEr,QMe,CEr,wEr,AEr,qt,_$,LEr,UMe,yEr,xEr,wc,$Er,HMe,kEr,SEr,MY,REr,PEr,BEr,cE,IEr,To,u$,NEr,JMe,qEr,jEr,bn,DEr,YMe,GEr,OEr,KMe,VEr,XEr,ZMe,zEr,WEr,QEr,eEe,fE,oEe,UEr,HEr,EY,JEr,YEr,KEr,mE,ZEr,rEe,e4r,o4r,tEe,r4r,t4r,gE,DHe,Ac,hE,aEe,b$,a4r,nEe,n4r,GHe,ar,v$,s4r,Lc,l4r,CY,i4r,d4r,wY,c4r,f4r,m4r,F$,g4r,sEe,h4r,p4r,_4r,jt,T$,u4r,lEe,b4r,v4r,yc,F4r,iEe,T4r,M4r,AY,E4r,C4r,w4r,pE,A4r,Mo,M$,L4r,dEe,y4r,x4r,vn,$4r,cEe,k4r,S4r,fEe,R4r,P4r,mEe,B4r,I4r,N4r,ct,_E,gEe,q4r,j4r,LY,D4r,G4r,O4r,uE,hEe,V4r,X4r,yY,z4r,W4r,Q4r,bE,pEe,U4r,H4r,xY,J4r,Y4r,K4r,vE,_Ee,Z4r,eCr,$Y,oCr,rCr,tCr,FE,uEe,aCr,nCr,kY,sCr,lCr,iCr,TE,dCr,bEe,cCr,fCr,vEe,mCr,gCr,ME,OHe,xc,EE,FEe,E$,hCr,TEe,pCr,VHe,nr,C$,_Cr,$c,uCr,SY,bCr,vCr,RY,FCr,TCr,MCr,w$,ECr,MEe,CCr,wCr,ACr,Dt,A$,LCr,EEe,yCr,xCr,kc,$Cr,CEe,kCr,SCr,PY,RCr,PCr,BCr,CE,ICr,Eo,L$,NCr,wEe,qCr,jCr,Fn,DCr,AEe,GCr,OCr,LEe,VCr,XCr,yEe,zCr,WCr,QCr,xEe,wE,$Ee,UCr,HCr,BY,JCr,YCr,KCr,AE,ZCr,kEe,e3r,o3r,SEe,r3r,t3r,LE,XHe,Sc,yE,REe,y$,a3r,PEe,n3r,zHe,sr,x$,s3r,Rc,l3r,IY,i3r,d3r,NY,c3r,f3r,m3r,$$,g3r,BEe,h3r,p3r,_3r,Gt,k$,u3r,IEe,b3r,v3r,Pc,F3r,NEe,T3r,M3r,qY,E3r,C3r,w3r,xE,A3r,Br,S$,L3r,qEe,y3r,x3r,Tn,$3r,jEe,k3r,S3r,DEe,R3r,P3r,GEe,B3r,I3r,N3r,q,$E,OEe,q3r,j3r,jY,D3r,G3r,O3r,kE,VEe,V3r,X3r,DY,z3r,W3r,Q3r,SE,XEe,U3r,H3r,GY,J3r,Y3r,K3r,RE,zEe,Z3r,e5r,OY,o5r,r5r,t5r,PE,WEe,a5r,n5r,VY,s5r,l5r,i5r,BE,QEe,d5r,c5r,XY,f5r,m5r,g5r,IE,UEe,h5r,p5r,zY,_5r,u5r,b5r,NE,HEe,v5r,F5r,WY,T5r,M5r,E5r,qE,JEe,C5r,w5r,QY,A5r,L5r,y5r,jE,YEe,x5r,$5r,UY,k5r,S5r,R5r,DE,KEe,P5r,B5r,HY,I5r,N5r,q5r,GE,ZEe,j5r,D5r,JY,G5r,O5r,V5r,OE,e4e,X5r,z5r,YY,W5r,Q5r,U5r,VE,o4e,H5r,J5r,KY,Y5r,K5r,Z5r,XE,r4e,e0r,o0r,ZY,r0r,t0r,a0r,zE,t4e,n0r,s0r,eK,l0r,i0r,d0r,WE,a4e,c0r,f0r,oK,m0r,g0r,h0r,QE,n4e,p0r,_0r,rK,u0r,b0r,v0r,gl,s4e,F0r,T0r,tK,M0r,E0r,aK,C0r,w0r,A0r,UE,l4e,L0r,y0r,nK,x0r,$0r,k0r,HE,i4e,S0r,R0r,sK,P0r,B0r,I0r,JE,d4e,N0r,q0r,lK,j0r,D0r,G0r,YE,c4e,O0r,V0r,iK,X0r,z0r,W0r,KE,f4e,Q0r,U0r,dK,H0r,J0r,Y0r,ZE,m4e,K0r,Z0r,cK,ewr,owr,rwr,e4,g4e,twr,awr,fK,nwr,swr,lwr,o4,h4e,iwr,dwr,mK,cwr,fwr,mwr,r4,p4e,gwr,hwr,gK,pwr,_wr,uwr,t4,_4e,bwr,vwr,hK,Fwr,Twr,Mwr,a4,u4e,Ewr,Cwr,pK,wwr,Awr,Lwr,n4,b4e,ywr,xwr,_K,$wr,kwr,Swr,s4,v4e,Rwr,Pwr,uK,Bwr,Iwr,Nwr,l4,F4e,qwr,jwr,bK,Dwr,Gwr,Owr,i4,T4e,Vwr,Xwr,vK,zwr,Wwr,Qwr,d4,M4e,Uwr,Hwr,FK,Jwr,Ywr,Kwr,c4,E4e,Zwr,eAr,TK,oAr,rAr,tAr,f4,C4e,aAr,nAr,MK,sAr,lAr,iAr,m4,w4e,dAr,cAr,EK,fAr,mAr,gAr,g4,A4e,hAr,pAr,CK,_Ar,uAr,bAr,h4,L4e,vAr,FAr,wK,TAr,MAr,EAr,p4,y4e,CAr,wAr,AK,AAr,LAr,yAr,_4,x4e,xAr,$Ar,LK,kAr,SAr,RAr,u4,$4e,PAr,BAr,yK,IAr,NAr,qAr,b4,k4e,jAr,DAr,xK,GAr,OAr,VAr,v4,S4e,XAr,zAr,$K,WAr,QAr,UAr,F4,R4e,HAr,JAr,kK,YAr,KAr,ZAr,T4,P4e,e7r,o7r,SK,r7r,t7r,a7r,M4,B4e,n7r,s7r,RK,l7r,i7r,d7r,E4,I4e,c7r,f7r,PK,m7r,g7r,h7r,C4,N4e,p7r,_7r,BK,u7r,b7r,v7r,w4,q4e,F7r,T7r,IK,M7r,E7r,C7r,A4,WHe,Bc,L4,j4e,R$,w7r,D4e,A7r,QHe,lr,P$,L7r,Ic,y7r,NK,x7r,$7r,qK,k7r,S7r,R7r,B$,P7r,G4e,B7r,I7r,N7r,Ot,I$,q7r,O4e,j7r,D7r,Nc,G7r,V4e,O7r,V7r,jK,X7r,z7r,W7r,y4,Q7r,Ir,N$,U7r,X4e,H7r,J7r,Mn,Y7r,z4e,K7r,Z7r,W4e,eLr,oLr,Q4e,rLr,tLr,aLr,se,x4,U4e,nLr,sLr,DK,lLr,iLr,dLr,$4,H4e,cLr,fLr,GK,mLr,gLr,hLr,k4,J4e,pLr,_Lr,OK,uLr,bLr,vLr,S4,Y4e,FLr,TLr,VK,MLr,ELr,CLr,R4,K4e,wLr,ALr,XK,LLr,yLr,xLr,P4,Z4e,$Lr,kLr,zK,SLr,RLr,PLr,B4,eCe,BLr,ILr,WK,NLr,qLr,jLr,I4,oCe,DLr,GLr,QK,OLr,VLr,XLr,N4,rCe,zLr,WLr,UK,QLr,ULr,HLr,q4,tCe,JLr,YLr,HK,KLr,ZLr,eyr,j4,aCe,oyr,ryr,JK,tyr,ayr,nyr,D4,nCe,syr,lyr,YK,iyr,dyr,cyr,G4,sCe,fyr,myr,KK,gyr,hyr,pyr,O4,lCe,_yr,uyr,ZK,byr,vyr,Fyr,V4,iCe,Tyr,Myr,eZ,Eyr,Cyr,wyr,X4,dCe,Ayr,Lyr,oZ,yyr,xyr,$yr,z4,cCe,kyr,Syr,rZ,Ryr,Pyr,Byr,W4,fCe,Iyr,Nyr,tZ,qyr,jyr,Dyr,Q4,mCe,Gyr,Oyr,aZ,Vyr,Xyr,zyr,U4,gCe,Wyr,Qyr,nZ,Uyr,Hyr,Jyr,H4,hCe,Yyr,Kyr,sZ,Zyr,e9r,o9r,J4,pCe,r9r,t9r,lZ,a9r,n9r,s9r,Y4,_Ce,l9r,i9r,iZ,d9r,c9r,f9r,K4,UHe,qc,Z4,uCe,q$,m9r,bCe,g9r,HHe,ir,j$,h9r,jc,p9r,dZ,_9r,u9r,cZ,b9r,v9r,F9r,D$,T9r,vCe,M9r,E9r,C9r,Vt,G$,w9r,FCe,A9r,L9r,Dc,y9r,TCe,x9r,$9r,fZ,k9r,S9r,R9r,eC,P9r,Nr,O$,B9r,MCe,I9r,N9r,En,q9r,ECe,j9r,D9r,CCe,G9r,O9r,wCe,V9r,X9r,z9r,Me,oC,ACe,W9r,Q9r,mZ,U9r,H9r,J9r,rC,LCe,Y9r,K9r,gZ,Z9r,exr,oxr,tC,yCe,rxr,txr,hZ,axr,nxr,sxr,aC,xCe,lxr,ixr,pZ,dxr,cxr,fxr,nC,$Ce,mxr,gxr,_Z,hxr,pxr,_xr,sC,kCe,uxr,bxr,uZ,vxr,Fxr,Txr,lC,SCe,Mxr,Exr,bZ,Cxr,wxr,Axr,iC,RCe,Lxr,yxr,vZ,xxr,$xr,kxr,dC,PCe,Sxr,Rxr,FZ,Pxr,Bxr,Ixr,cC,BCe,Nxr,qxr,TZ,jxr,Dxr,Gxr,fC,ICe,Oxr,Vxr,MZ,Xxr,zxr,Wxr,mC,NCe,Qxr,Uxr,EZ,Hxr,Jxr,Yxr,gC,qCe,Kxr,Zxr,CZ,e$r,o$r,r$r,hC,JHe,Gc,pC,jCe,V$,t$r,DCe,a$r,YHe,dr,X$,n$r,Oc,s$r,wZ,l$r,i$r,AZ,d$r,c$r,f$r,z$,m$r,GCe,g$r,h$r,p$r,Xt,W$,_$r,OCe,u$r,b$r,Vc,v$r,VCe,F$r,T$r,LZ,M$r,E$r,C$r,_C,w$r,qr,Q$,A$r,XCe,L$r,y$r,Cn,x$r,zCe,$$r,k$r,WCe,S$r,R$r,QCe,P$r,B$r,I$r,Ve,uC,UCe,N$r,q$r,yZ,j$r,D$r,G$r,bC,HCe,O$r,V$r,xZ,X$r,z$r,W$r,hl,JCe,Q$r,U$r,$Z,H$r,J$r,kZ,Y$r,K$r,Z$r,vC,YCe,ekr,okr,SZ,rkr,tkr,akr,FC,KCe,nkr,skr,RZ,lkr,ikr,dkr,TC,ZCe,ckr,fkr,PZ,mkr,gkr,hkr,MC,e3e,pkr,_kr,BZ,ukr,bkr,vkr,EC,o3e,Fkr,Tkr,IZ,Mkr,Ekr,Ckr,CC,KHe,Xc,wC,r3e,U$,wkr,t3e,Akr,ZHe,cr,H$,Lkr,zc,ykr,NZ,xkr,$kr,qZ,kkr,Skr,Rkr,J$,Pkr,a3e,Bkr,Ikr,Nkr,zt,Y$,qkr,n3e,jkr,Dkr,Wc,Gkr,s3e,Okr,Vkr,jZ,Xkr,zkr,Wkr,AC,Qkr,jr,K$,Ukr,l3e,Hkr,Jkr,wn,Ykr,i3e,Kkr,Zkr,d3e,eSr,oSr,c3e,rSr,tSr,aSr,Z$,LC,f3e,nSr,sSr,DZ,lSr,iSr,dSr,yC,m3e,cSr,fSr,GZ,mSr,gSr,hSr,xC,eJe,Qc,$C,g3e,ek,pSr,h3e,_Sr,oJe,fr,ok,uSr,Uc,bSr,OZ,vSr,FSr,VZ,TSr,MSr,ESr,rk,CSr,p3e,wSr,ASr,LSr,Wt,tk,ySr,_3e,xSr,$Sr,Hc,kSr,u3e,SSr,RSr,XZ,PSr,BSr,ISr,kC,NSr,Dr,ak,qSr,b3e,jSr,DSr,An,GSr,v3e,OSr,VSr,F3e,XSr,zSr,T3e,WSr,QSr,USr,de,SC,M3e,HSr,JSr,zZ,YSr,KSr,ZSr,RC,E3e,eRr,oRr,WZ,rRr,tRr,aRr,PC,C3e,nRr,sRr,QZ,lRr,iRr,dRr,BC,w3e,cRr,fRr,UZ,mRr,gRr,hRr,IC,A3e,pRr,_Rr,HZ,uRr,bRr,vRr,NC,L3e,FRr,TRr,JZ,MRr,ERr,CRr,qC,y3e,wRr,ARr,YZ,LRr,yRr,xRr,jC,x3e,$Rr,kRr,KZ,SRr,RRr,PRr,DC,$3e,BRr,IRr,ZZ,NRr,qRr,jRr,GC,k3e,DRr,GRr,eee,ORr,VRr,XRr,OC,S3e,zRr,WRr,oee,QRr,URr,HRr,VC,R3e,JRr,YRr,ree,KRr,ZRr,ePr,XC,P3e,oPr,rPr,tee,tPr,aPr,nPr,zC,B3e,sPr,lPr,aee,iPr,dPr,cPr,WC,I3e,fPr,mPr,nee,gPr,hPr,pPr,QC,N3e,_Pr,uPr,see,bPr,vPr,FPr,UC,q3e,TPr,MPr,lee,EPr,CPr,wPr,HC,j3e,APr,LPr,iee,yPr,xPr,$Pr,JC,D3e,kPr,SPr,dee,RPr,PPr,BPr,YC,G3e,IPr,NPr,cee,qPr,jPr,DPr,KC,rJe,Jc,ZC,O3e,nk,GPr,V3e,OPr,tJe,mr,sk,VPr,Yc,XPr,fee,zPr,WPr,mee,QPr,UPr,HPr,lk,JPr,X3e,YPr,KPr,ZPr,Qt,ik,eBr,z3e,oBr,rBr,Kc,tBr,W3e,aBr,nBr,gee,sBr,lBr,iBr,e3,dBr,Gr,dk,cBr,Q3e,fBr,mBr,Ln,gBr,U3e,hBr,pBr,H3e,_Br,uBr,J3e,bBr,vBr,FBr,ye,o3,Y3e,TBr,MBr,hee,EBr,CBr,wBr,r3,K3e,ABr,LBr,pee,yBr,xBr,$Br,t3,Z3e,kBr,SBr,_ee,RBr,PBr,BBr,a3,e5e,IBr,NBr,uee,qBr,jBr,DBr,n3,o5e,GBr,OBr,bee,VBr,XBr,zBr,s3,r5e,WBr,QBr,vee,UBr,HBr,JBr,l3,t5e,YBr,KBr,Fee,ZBr,eIr,oIr,i3,a5e,rIr,tIr,Tee,aIr,nIr,sIr,d3,n5e,lIr,iIr,Mee,dIr,cIr,fIr,c3,s5e,mIr,gIr,Eee,hIr,pIr,_Ir,f3,aJe,Zc,m3,l5e,ck,uIr,i5e,bIr,nJe,gr,fk,vIr,ef,FIr,Cee,TIr,MIr,wee,EIr,CIr,wIr,mk,AIr,d5e,LIr,yIr,xIr,Ut,gk,$Ir,c5e,kIr,SIr,of,RIr,f5e,PIr,BIr,Aee,IIr,NIr,qIr,g3,jIr,Or,hk,DIr,m5e,GIr,OIr,yn,VIr,g5e,XIr,zIr,h5e,WIr,QIr,p5e,UIr,HIr,JIr,te,h3,_5e,YIr,KIr,Lee,ZIr,eNr,oNr,p3,u5e,rNr,tNr,yee,aNr,nNr,sNr,_3,b5e,lNr,iNr,xee,dNr,cNr,fNr,u3,v5e,mNr,gNr,$ee,hNr,pNr,_Nr,b3,F5e,uNr,bNr,kee,vNr,FNr,TNr,v3,T5e,MNr,ENr,See,CNr,wNr,ANr,F3,M5e,LNr,yNr,Ree,xNr,$Nr,kNr,T3,E5e,SNr,RNr,Pee,PNr,BNr,INr,M3,C5e,NNr,qNr,Bee,jNr,DNr,GNr,E3,w5e,ONr,VNr,Iee,XNr,zNr,WNr,C3,A5e,QNr,UNr,Nee,HNr,JNr,YNr,w3,L5e,KNr,ZNr,qee,eqr,oqr,rqr,A3,y5e,tqr,aqr,jee,nqr,sqr,lqr,L3,x5e,iqr,dqr,Dee,cqr,fqr,mqr,y3,$5e,gqr,hqr,Gee,pqr,_qr,uqr,x3,k5e,bqr,vqr,Oee,Fqr,Tqr,Mqr,$3,S5e,Eqr,Cqr,Vee,wqr,Aqr,Lqr,k3,R5e,yqr,xqr,Xee,$qr,kqr,Sqr,S3,P5e,Rqr,Pqr,zee,Bqr,Iqr,Nqr,R3,B5e,qqr,jqr,Wee,Dqr,Gqr,Oqr,P3,I5e,Vqr,Xqr,Qee,zqr,Wqr,Qqr,B3,N5e,Uqr,Hqr,Uee,Jqr,Yqr,Kqr,I3,q5e,Zqr,ejr,Hee,ojr,rjr,tjr,N3,j5e,ajr,njr,Jee,sjr,ljr,ijr,q3,D5e,djr,cjr,Yee,fjr,mjr,gjr,j3,G5e,hjr,pjr,Kee,_jr,ujr,bjr,D3,sJe,rf,G3,O5e,pk,vjr,V5e,Fjr,lJe,hr,_k,Tjr,tf,Mjr,Zee,Ejr,Cjr,eoe,wjr,Ajr,Ljr,uk,yjr,X5e,xjr,$jr,kjr,Ht,bk,Sjr,z5e,Rjr,Pjr,af,Bjr,W5e,Ijr,Njr,ooe,qjr,jjr,Djr,O3,Gjr,Vr,vk,Ojr,Q5e,Vjr,Xjr,xn,zjr,U5e,Wjr,Qjr,H5e,Ujr,Hjr,J5e,Jjr,Yjr,Kjr,ve,V3,Y5e,Zjr,eDr,roe,oDr,rDr,tDr,X3,K5e,aDr,nDr,toe,sDr,lDr,iDr,z3,Z5e,dDr,cDr,aoe,fDr,mDr,gDr,W3,e0e,hDr,pDr,noe,_Dr,uDr,bDr,Q3,o0e,vDr,FDr,soe,TDr,MDr,EDr,U3,r0e,CDr,wDr,loe,ADr,LDr,yDr,H3,t0e,xDr,$Dr,ioe,kDr,SDr,RDr,J3,a0e,PDr,BDr,doe,IDr,NDr,qDr,Y3,n0e,jDr,DDr,coe,GDr,ODr,VDr,K3,s0e,XDr,zDr,foe,WDr,QDr,UDr,Z3,l0e,HDr,JDr,moe,YDr,KDr,ZDr,e5,i0e,eGr,oGr,goe,rGr,tGr,aGr,o5,d0e,nGr,sGr,hoe,lGr,iGr,dGr,r5,c0e,cGr,fGr,poe,mGr,gGr,hGr,t5,f0e,pGr,_Gr,_oe,uGr,bGr,vGr,a5,m0e,FGr,TGr,uoe,MGr,EGr,CGr,n5,g0e,wGr,AGr,boe,LGr,yGr,xGr,s5,iJe,nf,l5,h0e,Fk,$Gr,p0e,kGr,dJe,pr,Tk,SGr,sf,RGr,voe,PGr,BGr,Foe,IGr,NGr,qGr,Mk,jGr,_0e,DGr,GGr,OGr,Jt,Ek,VGr,u0e,XGr,zGr,lf,WGr,b0e,QGr,UGr,Toe,HGr,JGr,YGr,i5,KGr,Xr,Ck,ZGr,v0e,eOr,oOr,$n,rOr,F0e,tOr,aOr,T0e,nOr,sOr,M0e,lOr,iOr,dOr,wk,d5,E0e,cOr,fOr,Moe,mOr,gOr,hOr,c5,C0e,pOr,_Or,Eoe,uOr,bOr,vOr,f5,cJe,df,m5,w0e,Ak,FOr,A0e,TOr,fJe,_r,Lk,MOr,cf,EOr,Coe,COr,wOr,woe,AOr,LOr,yOr,yk,xOr,L0e,$Or,kOr,SOr,Yt,xk,ROr,y0e,POr,BOr,ff,IOr,x0e,NOr,qOr,Aoe,jOr,DOr,GOr,g5,OOr,zr,$k,VOr,$0e,XOr,zOr,kn,WOr,k0e,QOr,UOr,S0e,HOr,JOr,R0e,YOr,KOr,ZOr,P0e,h5,B0e,eVr,oVr,Loe,rVr,tVr,aVr,p5,mJe,mf,_5,I0e,kk,nVr,N0e,sVr,gJe,ur,Sk,lVr,gf,iVr,yoe,dVr,cVr,xoe,fVr,mVr,gVr,Rk,hVr,q0e,pVr,_Vr,uVr,Kt,Pk,bVr,j0e,vVr,FVr,hf,TVr,D0e,MVr,EVr,$oe,CVr,wVr,AVr,u5,LVr,Wr,Bk,yVr,G0e,xVr,$Vr,Sn,kVr,O0e,SVr,RVr,V0e,PVr,BVr,X0e,IVr,NVr,qVr,ce,b5,z0e,jVr,DVr,koe,GVr,OVr,VVr,v5,W0e,XVr,zVr,Soe,WVr,QVr,UVr,F5,Q0e,HVr,JVr,Roe,YVr,KVr,ZVr,T5,U0e,eXr,oXr,Poe,rXr,tXr,aXr,M5,H0e,nXr,sXr,Boe,lXr,iXr,dXr,E5,J0e,cXr,fXr,Ioe,mXr,gXr,hXr,C5,Y0e,pXr,_Xr,Noe,uXr,bXr,vXr,w5,K0e,FXr,TXr,qoe,MXr,EXr,CXr,A5,Z0e,wXr,AXr,joe,LXr,yXr,xXr,L5,ewe,$Xr,kXr,Doe,SXr,RXr,PXr,y5,owe,BXr,IXr,Goe,NXr,qXr,jXr,x5,rwe,DXr,GXr,Ooe,OXr,VXr,XXr,$5,twe,zXr,WXr,Voe,QXr,UXr,HXr,k5,awe,JXr,YXr,Xoe,KXr,ZXr,ezr,S5,nwe,ozr,rzr,zoe,tzr,azr,nzr,R5,swe,szr,lzr,Woe,izr,dzr,czr,P5,lwe,fzr,mzr,Qoe,gzr,hzr,pzr,B5,iwe,_zr,uzr,Uoe,bzr,vzr,Fzr,I5,dwe,Tzr,Mzr,Hoe,Ezr,Czr,wzr,N5,cwe,Azr,Lzr,Joe,yzr,xzr,$zr,q5,hJe,pf,j5,fwe,Ik,kzr,mwe,Szr,pJe,br,Nk,Rzr,_f,Pzr,Yoe,Bzr,Izr,Koe,Nzr,qzr,jzr,qk,Dzr,gwe,Gzr,Ozr,Vzr,Zt,jk,Xzr,hwe,zzr,Wzr,uf,Qzr,pwe,Uzr,Hzr,Zoe,Jzr,Yzr,Kzr,D5,Zzr,Qr,Dk,eWr,_we,oWr,rWr,Rn,tWr,uwe,aWr,nWr,bwe,sWr,lWr,vwe,iWr,dWr,cWr,fe,G5,Fwe,fWr,mWr,ere,gWr,hWr,pWr,O5,Twe,_Wr,uWr,ore,bWr,vWr,FWr,V5,Mwe,TWr,MWr,rre,EWr,CWr,wWr,X5,Ewe,AWr,LWr,tre,yWr,xWr,$Wr,z5,Cwe,kWr,SWr,are,RWr,PWr,BWr,W5,wwe,IWr,NWr,nre,qWr,jWr,DWr,Q5,Awe,GWr,OWr,sre,VWr,XWr,zWr,U5,Lwe,WWr,QWr,lre,UWr,HWr,JWr,H5,ywe,YWr,KWr,ire,ZWr,eQr,oQr,J5,xwe,rQr,tQr,dre,aQr,nQr,sQr,Y5,$we,lQr,iQr,cre,dQr,cQr,fQr,K5,kwe,mQr,gQr,fre,hQr,pQr,_Qr,Z5,Swe,uQr,bQr,mre,vQr,FQr,TQr,e0,Rwe,MQr,EQr,gre,CQr,wQr,AQr,o0,Pwe,LQr,yQr,hre,xQr,$Qr,kQr,r0,Bwe,SQr,RQr,pre,PQr,BQr,IQr,t0,Iwe,NQr,qQr,_re,jQr,DQr,GQr,a0,Nwe,OQr,VQr,ure,XQr,zQr,WQr,n0,qwe,QQr,UQr,bre,HQr,JQr,YQr,s0,jwe,KQr,ZQr,vre,eUr,oUr,rUr,l0,_Je,bf,i0,Dwe,Gk,tUr,Gwe,aUr,uJe,vr,Ok,nUr,vf,sUr,Fre,lUr,iUr,Tre,dUr,cUr,fUr,Vk,mUr,Owe,gUr,hUr,pUr,ea,Xk,_Ur,Vwe,uUr,bUr,Ff,vUr,Xwe,FUr,TUr,Mre,MUr,EUr,CUr,d0,wUr,Ur,zk,AUr,zwe,LUr,yUr,Pn,xUr,Wwe,$Ur,kUr,Qwe,SUr,RUr,Uwe,PUr,BUr,IUr,Hwe,c0,Jwe,NUr,qUr,Ere,jUr,DUr,GUr,f0,bJe,Tf,m0,Ywe,Wk,OUr,Kwe,VUr,vJe,Fr,Qk,XUr,Mf,zUr,Cre,WUr,QUr,wre,UUr,HUr,JUr,Uk,YUr,Zwe,KUr,ZUr,eHr,oa,Hk,oHr,eAe,rHr,tHr,Ef,aHr,oAe,nHr,sHr,Are,lHr,iHr,dHr,g0,cHr,Hr,Jk,fHr,rAe,mHr,gHr,Bn,hHr,tAe,pHr,_Hr,aAe,uHr,bHr,nAe,vHr,FHr,THr,sAe,h0,lAe,MHr,EHr,Lre,CHr,wHr,AHr,p0,FJe,Cf,_0,iAe,Yk,LHr,dAe,yHr,TJe,Tr,Kk,xHr,wf,$Hr,yre,kHr,SHr,xre,RHr,PHr,BHr,Zk,IHr,cAe,NHr,qHr,jHr,ra,eS,DHr,fAe,GHr,OHr,Af,VHr,mAe,XHr,zHr,$re,WHr,QHr,UHr,u0,HHr,Jr,oS,JHr,gAe,YHr,KHr,In,ZHr,hAe,eJr,oJr,pAe,rJr,tJr,_Ae,aJr,nJr,sJr,re,b0,uAe,lJr,iJr,kre,dJr,cJr,fJr,v0,bAe,mJr,gJr,Sre,hJr,pJr,_Jr,F0,vAe,uJr,bJr,Rre,vJr,FJr,TJr,T0,FAe,MJr,EJr,Pre,CJr,wJr,AJr,M0,TAe,LJr,yJr,Bre,xJr,$Jr,kJr,E0,MAe,SJr,RJr,Ire,PJr,BJr,IJr,C0,EAe,NJr,qJr,Nre,jJr,DJr,GJr,w0,CAe,OJr,VJr,qre,XJr,zJr,WJr,A0,wAe,QJr,UJr,jre,HJr,JJr,YJr,L0,AAe,KJr,ZJr,Dre,eYr,oYr,rYr,y0,LAe,tYr,aYr,Gre,nYr,sYr,lYr,x0,yAe,iYr,dYr,Ore,cYr,fYr,mYr,$0,xAe,gYr,hYr,Vre,pYr,_Yr,uYr,k0,$Ae,bYr,vYr,Xre,FYr,TYr,MYr,S0,kAe,EYr,CYr,zre,wYr,AYr,LYr,R0,SAe,yYr,xYr,Wre,$Yr,kYr,SYr,P0,RAe,RYr,PYr,Qre,BYr,IYr,NYr,B0,PAe,qYr,jYr,Ure,DYr,GYr,OYr,I0,BAe,VYr,XYr,Hre,zYr,WYr,QYr,N0,IAe,UYr,HYr,Jre,JYr,YYr,KYr,q0,NAe,ZYr,eKr,Yre,oKr,rKr,tKr,j0,qAe,aKr,nKr,Kre,sKr,lKr,iKr,D0,jAe,dKr,cKr,Zre,fKr,mKr,gKr,G0,DAe,hKr,pKr,ete,_Kr,uKr,bKr,O0,GAe,vKr,FKr,ote,TKr,MKr,EKr,V0,OAe,CKr,wKr,rte,AKr,LKr,yKr,X0,VAe,xKr,$Kr,tte,kKr,SKr,RKr,z0,MJe,Lf,W0,XAe,rS,PKr,zAe,BKr,EJe,Mr,tS,IKr,yf,NKr,ate,qKr,jKr,nte,DKr,GKr,OKr,aS,VKr,WAe,XKr,zKr,WKr,ta,nS,QKr,QAe,UKr,HKr,xf,JKr,UAe,YKr,KKr,ste,ZKr,eZr,oZr,Q0,rZr,Yr,sS,tZr,HAe,aZr,nZr,Nn,sZr,JAe,lZr,iZr,YAe,dZr,cZr,KAe,fZr,mZr,gZr,xe,U0,ZAe,hZr,pZr,lte,_Zr,uZr,bZr,H0,e7e,vZr,FZr,ite,TZr,MZr,EZr,J0,o7e,CZr,wZr,dte,AZr,LZr,yZr,Y0,r7e,xZr,$Zr,cte,kZr,SZr,RZr,K0,t7e,PZr,BZr,fte,IZr,NZr,qZr,Z0,a7e,jZr,DZr,mte,GZr,OZr,VZr,ew,n7e,XZr,zZr,gte,WZr,QZr,UZr,ow,s7e,HZr,JZr,hte,YZr,KZr,ZZr,rw,l7e,eet,oet,pte,ret,tet,aet,tw,i7e,net,set,_te,iet,det,cet,aw,CJe,$f,nw,d7e,lS,fet,c7e,met,wJe,Er,iS,get,kf,het,ute,pet,_et,bte,uet,bet,vet,dS,Fet,f7e,Tet,Met,Eet,aa,cS,Cet,m7e,wet,Aet,Sf,Let,g7e,yet,xet,vte,$et,ket,Set,sw,Ret,Kr,fS,Pet,h7e,Bet,Iet,qn,Net,p7e,qet,jet,_7e,Det,Get,u7e,Oet,Vet,Xet,Ee,lw,b7e,zet,Wet,Fte,Qet,Uet,Het,iw,v7e,Jet,Yet,Tte,Ket,Zet,eot,dw,F7e,oot,rot,Mte,tot,aot,not,cw,T7e,sot,lot,Ete,iot,dot,cot,fw,M7e,fot,mot,Cte,got,hot,pot,mw,E7e,_ot,uot,wte,bot,vot,Fot,gw,C7e,Tot,Mot,Ate,Eot,Cot,wot,hw,w7e,Aot,Lot,Lte,yot,xot,$ot,pw,A7e,kot,Sot,yte,Rot,Pot,Bot,_w,L7e,Iot,Not,xte,qot,jot,Dot,uw,y7e,Got,Oot,$te,Vot,Xot,zot,bw,x7e,Wot,Qot,kte,Uot,Hot,Jot,vw,$7e,Yot,Kot,Ste,Zot,ert,ort,Fw,AJe,Rf,Tw,k7e,mS,rrt,S7e,trt,LJe,Cr,gS,art,Pf,nrt,Rte,srt,lrt,Pte,irt,drt,crt,hS,frt,R7e,mrt,grt,hrt,na,pS,prt,P7e,_rt,urt,Bf,brt,B7e,vrt,Frt,Bte,Trt,Mrt,Ert,Mw,Crt,Zr,_S,wrt,I7e,Art,Lrt,jn,yrt,N7e,xrt,$rt,q7e,krt,Srt,j7e,Rrt,Prt,Brt,$e,Ew,D7e,Irt,Nrt,Ite,qrt,jrt,Drt,Cw,G7e,Grt,Ort,Nte,Vrt,Xrt,zrt,ww,O7e,Wrt,Qrt,qte,Urt,Hrt,Jrt,Aw,V7e,Yrt,Krt,jte,Zrt,ett,ott,Lw,X7e,rtt,ttt,Dte,att,ntt,stt,yw,z7e,ltt,itt,Gte,dtt,ctt,ftt,xw,W7e,mtt,gtt,Ote,htt,ptt,_tt,$w,Q7e,utt,btt,Vte,vtt,Ftt,Ttt,kw,U7e,Mtt,Ett,Xte,Ctt,wtt,Att,Sw,H7e,Ltt,ytt,zte,xtt,$tt,ktt,Rw,yJe,If,Pw,J7e,uS,Stt,Y7e,Rtt,xJe,wr,bS,Ptt,Nf,Btt,Wte,Itt,Ntt,Qte,qtt,jtt,Dtt,vS,Gtt,K7e,Ott,Vtt,Xtt,sa,FS,ztt,Z7e,Wtt,Qtt,qf,Utt,eLe,Htt,Jtt,Ute,Ytt,Ktt,Ztt,Bw,eat,et,TS,oat,oLe,rat,tat,Dn,aat,rLe,nat,sat,tLe,lat,iat,aLe,dat,cat,fat,ke,Iw,nLe,mat,gat,Hte,hat,pat,_at,Nw,sLe,uat,bat,Jte,vat,Fat,Tat,qw,lLe,Mat,Eat,Yte,Cat,wat,Aat,jw,iLe,Lat,yat,Kte,xat,$at,kat,Dw,dLe,Sat,Rat,Zte,Pat,Bat,Iat,Gw,cLe,Nat,qat,eae,jat,Dat,Gat,Ow,fLe,Oat,Vat,oae,Xat,zat,Wat,Vw,mLe,Qat,Uat,rae,Hat,Jat,Yat,Xw,gLe,Kat,Zat,tae,ent,ont,rnt,zw,hLe,tnt,ant,aae,nnt,snt,lnt,Ww,$Je,jf,Qw,pLe,MS,int,_Le,dnt,kJe,Ar,ES,cnt,Df,fnt,nae,mnt,gnt,sae,hnt,pnt,_nt,CS,unt,uLe,bnt,vnt,Fnt,la,wS,Tnt,bLe,Mnt,Ent,Gf,Cnt,vLe,wnt,Ant,lae,Lnt,ynt,xnt,Uw,$nt,ot,AS,knt,FLe,Snt,Rnt,Gn,Pnt,TLe,Bnt,Int,MLe,Nnt,qnt,ELe,jnt,Dnt,Gnt,Se,Hw,CLe,Ont,Vnt,iae,Xnt,znt,Wnt,Jw,wLe,Qnt,Unt,dae,Hnt,Jnt,Ynt,Yw,ALe,Knt,Znt,cae,est,ost,rst,Kw,LLe,tst,ast,fae,nst,sst,lst,Zw,yLe,ist,dst,mae,cst,fst,mst,eA,xLe,gst,hst,gae,pst,_st,ust,oA,$Le,bst,vst,hae,Fst,Tst,Mst,rA,kLe,Est,Cst,pae,wst,Ast,Lst,tA,SLe,yst,xst,_ae,$st,kst,Sst,aA,RLe,Rst,Pst,uae,Bst,Ist,Nst,nA,SJe,Of,sA,PLe,LS,qst,BLe,jst,RJe,Lr,yS,Dst,Vf,Gst,bae,Ost,Vst,vae,Xst,zst,Wst,xS,Qst,ILe,Ust,Hst,Jst,ia,$S,Yst,NLe,Kst,Zst,Xf,elt,qLe,olt,rlt,Fae,tlt,alt,nlt,lA,slt,rt,kS,llt,jLe,ilt,dlt,On,clt,DLe,flt,mlt,GLe,glt,hlt,OLe,plt,_lt,ult,Re,iA,VLe,blt,vlt,Tae,Flt,Tlt,Mlt,dA,XLe,Elt,Clt,Mae,wlt,Alt,Llt,cA,zLe,ylt,xlt,Eae,$lt,klt,Slt,fA,WLe,Rlt,Plt,Cae,Blt,Ilt,Nlt,mA,QLe,qlt,jlt,wae,Dlt,Glt,Olt,gA,ULe,Vlt,Xlt,Aae,zlt,Wlt,Qlt,hA,HLe,Ult,Hlt,Lae,Jlt,Ylt,Klt,pA,JLe,Zlt,eit,yae,oit,rit,tit,_A,YLe,ait,nit,xae,sit,lit,iit,uA,KLe,dit,cit,$ae,fit,mit,git,bA,PJe,zf,vA,ZLe,SS,hit,eye,pit,BJe,yr,RS,_it,Wf,uit,kae,bit,vit,Sae,Fit,Tit,Mit,PS,Eit,oye,Cit,wit,Ait,da,BS,Lit,rye,yit,xit,Qf,$it,tye,kit,Sit,Rae,Rit,Pit,Bit,FA,Iit,tt,IS,Nit,aye,qit,jit,Vn,Dit,nye,Git,Oit,sye,Vit,Xit,lye,zit,Wit,Qit,Xe,TA,iye,Uit,Hit,Pae,Jit,Yit,Kit,MA,dye,Zit,edt,Bae,odt,rdt,tdt,EA,cye,adt,ndt,Iae,sdt,ldt,idt,CA,fye,ddt,cdt,Nae,fdt,mdt,gdt,wA,mye,hdt,pdt,qae,_dt,udt,bdt,AA,gye,vdt,Fdt,jae,Tdt,Mdt,Edt,LA,hye,Cdt,wdt,Dae,Adt,Ldt,ydt,yA,pye,xdt,$dt,Gae,kdt,Sdt,Rdt,xA,IJe,Uf,$A,_ye,NS,Pdt,uye,Bdt,NJe,xr,qS,Idt,Hf,Ndt,Oae,qdt,jdt,Vae,Ddt,Gdt,Odt,jS,Vdt,bye,Xdt,zdt,Wdt,ca,DS,Qdt,vye,Udt,Hdt,Jf,Jdt,Fye,Ydt,Kdt,Xae,Zdt,ect,oct,kA,rct,at,GS,tct,Tye,act,nct,Xn,sct,Mye,lct,ict,Eye,dct,cct,Cye,fct,mct,gct,ze,SA,wye,hct,pct,zae,_ct,uct,bct,RA,Aye,vct,Fct,Wae,Tct,Mct,Ect,PA,Lye,Cct,wct,Qae,Act,Lct,yct,BA,yye,xct,$ct,Uae,kct,Sct,Rct,IA,xye,Pct,Bct,Hae,Ict,Nct,qct,NA,$ye,jct,Dct,Jae,Gct,Oct,Vct,qA,kye,Xct,zct,Yae,Wct,Qct,Uct,jA,Sye,Hct,Jct,Kae,Yct,Kct,Zct,DA,qJe,Yf,GA,Rye,OS,eft,Pye,oft,jJe,$r,VS,rft,Kf,tft,Zae,aft,nft,ene,sft,lft,ift,XS,dft,Bye,cft,fft,mft,fa,zS,gft,Iye,hft,pft,Zf,_ft,Nye,uft,bft,one,vft,Fft,Tft,OA,Mft,nt,WS,Eft,qye,Cft,wft,zn,Aft,jye,Lft,yft,Dye,xft,$ft,Gye,kft,Sft,Rft,Oye,VA,Vye,Pft,Bft,rne,Ift,Nft,qft,XA,DJe,em,zA,Xye,QS,jft,zye,Dft,GJe,kr,US,Gft,om,Oft,tne,Vft,Xft,ane,zft,Wft,Qft,HS,Uft,Wye,Hft,Jft,Yft,ma,JS,Kft,Qye,Zft,emt,rm,omt,Uye,rmt,tmt,nne,amt,nmt,smt,WA,lmt,st,YS,imt,Hye,dmt,cmt,Wn,fmt,Jye,mmt,gmt,Yye,hmt,pmt,Kye,_mt,umt,bmt,KS,QA,Zye,vmt,Fmt,sne,Tmt,Mmt,Emt,UA,e9e,Cmt,wmt,lne,Amt,Lmt,ymt,HA,OJe,tm,JA,o9e,ZS,xmt,r9e,$mt,VJe,Sr,eR,kmt,am,Smt,ine,Rmt,Pmt,dne,Bmt,Imt,Nmt,oR,qmt,t9e,jmt,Dmt,Gmt,ga,rR,Omt,a9e,Vmt,Xmt,nm,zmt,n9e,Wmt,Qmt,cne,Umt,Hmt,Jmt,YA,Ymt,lt,tR,Kmt,s9e,Zmt,egt,Qn,ogt,l9e,rgt,tgt,i9e,agt,ngt,d9e,sgt,lgt,igt,c9e,KA,f9e,dgt,cgt,fne,fgt,mgt,ggt,ZA,XJe;return d=new oe({}),Va=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),ky=new oe({}),Sy=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),hm=new hgt({props:{warning:!0,$$slots:{default:[Haa]},$$scope:{ctx:$}}}),Ry=new oe({}),Py=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/configuration_auto.py#L625"}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/configuration_auto.py#L648"}}),$h=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Jaa]},$$scope:{ctx:$}}}),qy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/configuration_auto.py#L771"}}),jy=new oe({}),Dy=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/tokenization_auto.py#L418"}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18618/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/tokenization_auto.py#L432"}}),mp=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Yaa]},$$scope:{ctx:$}}}),Xy=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/tokenization_auto.py#L633"}}),zy=new oe({}),Wy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/feature_extraction_auto.py#L199"}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18618/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/feature_extraction_auto.py#L213"}}),Zp=new hgt({props:{$$slots:{default:[Kaa]},$$scope:{ctx:$}}}),e_=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Zaa]},$$scope:{ctx:$}}}),Jy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/feature_extraction_auto.py#L340"}}),Yy=new oe({}),Ky=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/processing_auto.py#L91"}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/processing_auto.py#L105"}}),E_=new hgt({props:{$$slots:{default:[ena]},$$scope:{ctx:$}}}),C_=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[ona]},$$scope:{ctx:$}}}),r9=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/processing_auto.py#L258"}}),t9=new oe({}),a9=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L816"}}),s9=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),L_=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[rna]},$$scope:{ctx:$}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),I1=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[tna]},$$scope:{ctx:$}}}),i9=new oe({}),d9=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L823"}}),f9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),q1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[ana]},$$scope:{ctx:$}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),R8=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[nna]},$$scope:{ctx:$}}}),g9=new oe({}),h9=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L838"}}),_9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),B8=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[sna]},$$scope:{ctx:$}}}),u9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),Eb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[lna]},$$scope:{ctx:$}}}),b9=new oe({}),v9=new R({props:{name:"class transformers.AutoModelForDepthEstimation",anchor:"transformers.AutoModelForDepthEstimation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L961"}}),T9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForDepthEstimation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDepthEstimation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <code>DptForDepthEstimation</code> (DPT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <code>GlpnForDepthEstimation</code> (GLPN model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),wb=new B({props:{anchor:"transformers.AutoModelForDepthEstimation.from_config.example",$$slots:{default:[ina]},$$scope:{ctx:$}}}),M9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForDepthEstimation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),xb=new B({props:{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.example",$$slots:{default:[dna]},$$scope:{ctx:$}}}),C9=new oe({}),w9=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L845"}}),L9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),kb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[cna]},$$scope:{ctx:$}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),u2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[fna]},$$scope:{ctx:$}}}),x9=new oe({}),$9=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L852"}}),S9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),v2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[mna]},$$scope:{ctx:$}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),D2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[gna]},$$scope:{ctx:$}}}),P9=new oe({}),B9=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L861"}}),N9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),O2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[hna]},$$scope:{ctx:$}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),Ov=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[pna]},$$scope:{ctx:$}}}),j9=new oe({}),D9=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L906"}}),O9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),Xv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[_na]},$$scope:{ctx:$}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),E6=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[una]},$$scope:{ctx:$}}}),X9=new oe({}),z9=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L913"}}),Q9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),w6=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[bna]},$$scope:{ctx:$}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),R6=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[vna]},$$scope:{ctx:$}}}),H9=new oe({}),J9=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L899"}}),K9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),B6=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Fna]},$$scope:{ctx:$}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),FF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Tna]},$$scope:{ctx:$}}}),ex=new oe({}),ox=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L870"}}),tx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),MF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Mna]},$$scope:{ctx:$}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),gT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Ena]},$$scope:{ctx:$}}}),nx=new oe({}),sx=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L877"}}),ix=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),pT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Cna]},$$scope:{ctx:$}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),bT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[wna]},$$scope:{ctx:$}}}),cx=new oe({}),fx=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L922"}}),gx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18618/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18618/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18618/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18618/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),FT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Ana]},$$scope:{ctx:$}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),IT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Lna]},$$scope:{ctx:$}}}),px=new oe({}),_x=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L968"}}),bx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),qT=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[yna]},$$scope:{ctx:$}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),GT=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[xna]},$$scope:{ctx:$}}}),Fx=new oe({}),Tx=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L975"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),VT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[$na]},$$scope:{ctx:$}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),WT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[kna]},$$scope:{ctx:$}}}),wx=new oe({}),Ax=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L888"}}),yx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),UT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[Sna]},$$scope:{ctx:$}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),YT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Rna]},$$scope:{ctx:$}}}),$x=new oe({}),kx=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L982"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),ZT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Pna]},$$scope:{ctx:$}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),cM=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Bna]},$$scope:{ctx:$}}}),Bx=new oe({}),Ix=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L1005"}}),qx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),mM=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Ina]},$$scope:{ctx:$}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),vM=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Nna]},$$scope:{ctx:$}}}),Dx=new oe({}),Gx=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L989"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),TM=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[qna]},$$scope:{ctx:$}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),RM=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[jna]},$$scope:{ctx:$}}}),zx=new oe({}),Wx=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L996"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),BM=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Dna]},$$scope:{ctx:$}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),jM=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Gna]},$$scope:{ctx:$}}}),Yx=new oe({}),Kx=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L1014"}}),e$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),GM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Ona]},$$scope:{ctx:$}}}),o$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),UM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Vna]},$$scope:{ctx:$}}}),r$=new oe({}),t$=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L1021"}}),n$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),JM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Xna]},$$scope:{ctx:$}}}),s$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),rE=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[zna]},$$scope:{ctx:$}}}),l$=new oe({}),i$=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L954"}}),c$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),aE=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Wna]},$$scope:{ctx:$}}}),f$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),iE=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Qna]},$$scope:{ctx:$}}}),g$=new oe({}),h$=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L929"}}),_$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),cE=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Una]},$$scope:{ctx:$}}}),u$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),gE=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Hna]},$$scope:{ctx:$}}}),b$=new oe({}),v$=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L936"}}),T$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),pE=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Jna]},$$scope:{ctx:$}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Yna]},$$scope:{ctx:$}}}),E$=new oe({}),C$=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_auto.py#L945"}}),A$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Kna]},$$scope:{ctx:$}}}),L$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),LE=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Zna]},$$scope:{ctx:$}}}),y$=new oe({}),x$=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),k$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),xE=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[esa]},$$scope:{ctx:$}}}),S$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),A4=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[osa]},$$scope:{ctx:$}}}),R$=new oe({}),P$=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),I$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),y4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[rsa]},$$scope:{ctx:$}}}),N$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),K4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[tsa]},$$scope:{ctx:$}}}),q$=new oe({}),j$=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),G$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),eC=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[asa]},$$scope:{ctx:$}}}),O$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[nsa]},$$scope:{ctx:$}}}),V$=new oe({}),X$=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),W$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_18618/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[ssa]},$$scope:{ctx:$}}}),Q$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),CC=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[lsa]},$$scope:{ctx:$}}}),U$=new oe({}),H$=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_tf_auto.py#L463"}}),Y$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),AC=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[isa]},$$scope:{ctx:$}}}),K$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),xC=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[dsa]},$$scope:{ctx:$}}}),ek=new oe({}),ok=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),tk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),kC=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[csa]},$$scope:{ctx:$}}}),ak=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[fsa]},$$scope:{ctx:$}}}),nk=new oe({}),sk=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),ik=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[msa]},$$scope:{ctx:$}}}),dk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),f3=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[gsa]},$$scope:{ctx:$}}}),ck=new oe({}),fk=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_tf_auto.py#L495"}}),gk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),g3=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[hsa]},$$scope:{ctx:$}}}),hk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),D3=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[psa]},$$scope:{ctx:$}}}),pk=new oe({}),_k=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),bk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),O3=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[_sa]},$$scope:{ctx:$}}}),vk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),s5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[usa]},$$scope:{ctx:$}}}),Fk=new oe({}),Tk=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_tf_auto.py#L538"}}),Ek=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),i5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[bsa]},$$scope:{ctx:$}}}),Ck=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[vsa]},$$scope:{ctx:$}}}),Ak=new oe({}),Lk=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),xk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),g5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Fsa]},$$scope:{ctx:$}}}),$k=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),p5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Tsa]},$$scope:{ctx:$}}}),kk=new oe({}),Sk=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),Pk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),u5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Msa]},$$scope:{ctx:$}}}),Bk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),q5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Esa]},$$scope:{ctx:$}}}),Ik=new oe({}),Nk=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),jk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),D5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Csa]},$$scope:{ctx:$}}}),Dk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),l0=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[wsa]},$$scope:{ctx:$}}}),Gk=new oe({}),Ok=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),Xk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),d0=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Asa]},$$scope:{ctx:$}}}),zk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),f0=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Lsa]},$$scope:{ctx:$}}}),Wk=new oe({}),Qk=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_tf_auto.py#L547"}}),Hk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),g0=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[ysa]},$$scope:{ctx:$}}}),Jk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),p0=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[xsa]},$$scope:{ctx:$}}}),Yk=new oe({}),Kk=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),eS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),u0=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[$sa]},$$scope:{ctx:$}}}),oS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),z0=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[ksa]},$$scope:{ctx:$}}}),rS=new oe({}),tS=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),nS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),Q0=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Ssa]},$$scope:{ctx:$}}}),sS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),aw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Rsa]},$$scope:{ctx:$}}}),lS=new oe({}),iS=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),cS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),sw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Psa]},$$scope:{ctx:$}}}),fS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),Fw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Bsa]},$$scope:{ctx:$}}}),mS=new oe({}),gS=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),pS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),Mw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Isa]},$$scope:{ctx:$}}}),_S=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),Rw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Nsa]},$$scope:{ctx:$}}}),uS=new oe({}),bS=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),FS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),Bw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[qsa]},$$scope:{ctx:$}}}),TS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),Ww=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[jsa]},$$scope:{ctx:$}}}),MS=new oe({}),ES=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),wS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),Uw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Dsa]},$$scope:{ctx:$}}}),AS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),nA=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Gsa]},$$scope:{ctx:$}}}),LS=new oe({}),yS=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),$S=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),lA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Osa]},$$scope:{ctx:$}}}),kS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),bA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Vsa]},$$scope:{ctx:$}}}),SS=new oe({}),RS=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),BS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),FA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Xsa]},$$scope:{ctx:$}}}),IS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),xA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[zsa]},$$scope:{ctx:$}}}),NS=new oe({}),qS=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),DS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),kA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Wsa]},$$scope:{ctx:$}}}),GS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),DA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Qsa]},$$scope:{ctx:$}}}),OS=new oe({}),VS=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),zS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),OA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Usa]},$$scope:{ctx:$}}}),WS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),XA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Hsa]},$$scope:{ctx:$}}}),QS=new oe({}),US=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),JS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18618/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),WA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Jsa]},$$scope:{ctx:$}}}),YS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),HA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Ysa]},$$scope:{ctx:$}}}),ZS=new oe({}),eR=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),rR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18618/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18618/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L389"}}),YA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Ksa]},$$scope:{ctx:$}}}),tR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18618/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18618/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18618/src/transformers/models/auto/auto_factory.py#L417"}}),ZA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Zsa]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Lo=a("span"),Ui=o("Auto Classes"),dm=l(),gt=a("p"),Hi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ji=a("code"),Ly=o("from_pretrained()"),cm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),Yi=o("Instantiating one of "),Hn=a("a"),yy=o("AutoConfig"),Jn=o(", "),Yn=a("a"),xy=o("AutoModel"),Ki=o(`, and
`),Kn=a("a"),$y=o("AutoTokenizer"),Zi=o(" will directly create a class of the relevant architecture. For instance"),fm=l(),F(Va.$$.fragment),Ue=l(),Ae=a("p"),LP=o("will create a model that is an instance of "),ed=a("a"),yP=o("BertModel"),xP=o("."),yo=l(),Xa=a("p"),$P=o("There is one class of "),mm=a("code"),kP=o("AutoModel"),iZe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),RUe=l(),od=a("h2"),gm=a("a"),fle=a("span"),F(ky.$$.fragment),dZe=l(),mle=a("span"),cZe=o("Extending the Auto Classes"),PUe=l(),Zn=a("p"),fZe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),gle=a("code"),mZe=o("NewModel"),gZe=o(", make sure you have a "),hle=a("code"),hZe=o("NewModelConfig"),pZe=o(` then you can add those to the auto
classes like this:`),BUe=l(),F(Sy.$$.fragment),IUe=l(),SP=a("p"),_Ze=o("You will then be able to use the auto classes like you would usually do!"),NUe=l(),F(hm.$$.fragment),qUe=l(),rd=a("h2"),pm=a("a"),ple=a("span"),F(Ry.$$.fragment),uZe=l(),_le=a("span"),bZe=o("AutoConfig"),jUe=l(),xo=a("div"),F(Py.$$.fragment),vZe=l(),By=a("p"),FZe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),RP=a("a"),TZe=o("from_pretrained()"),MZe=o(" class method."),EZe=l(),Iy=a("p"),CZe=o("This class cannot be instantiated directly using "),ule=a("code"),wZe=o("__init__()"),AZe=o(" (throws an error)."),LZe=l(),Rr=a("div"),F(Ny.$$.fragment),yZe=l(),ble=a("p"),xZe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),$Ze=l(),td=a("p"),kZe=o("The configuration class to instantiate is selected based on the "),vle=a("code"),SZe=o("model_type"),RZe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Fle=a("code"),PZe=o("pretrained_model_name_or_path"),BZe=o(":"),IZe=l(),A=a("ul"),_m=a("li"),Tle=a("strong"),NZe=o("albert"),qZe=o(" \u2014 "),PP=a("a"),jZe=o("AlbertConfig"),DZe=o(" (ALBERT model)"),GZe=l(),um=a("li"),Mle=a("strong"),OZe=o("bart"),VZe=o(" \u2014 "),BP=a("a"),XZe=o("BartConfig"),zZe=o(" (BART model)"),WZe=l(),bm=a("li"),Ele=a("strong"),QZe=o("beit"),UZe=o(" \u2014 "),IP=a("a"),HZe=o("BeitConfig"),JZe=o(" (BEiT model)"),YZe=l(),vm=a("li"),Cle=a("strong"),KZe=o("bert"),ZZe=o(" \u2014 "),NP=a("a"),eeo=o("BertConfig"),oeo=o(" (BERT model)"),reo=l(),Fm=a("li"),wle=a("strong"),teo=o("bert-generation"),aeo=o(" \u2014 "),qP=a("a"),neo=o("BertGenerationConfig"),seo=o(" (Bert Generation model)"),leo=l(),Tm=a("li"),Ale=a("strong"),ieo=o("big_bird"),deo=o(" \u2014 "),jP=a("a"),ceo=o("BigBirdConfig"),feo=o(" (BigBird model)"),meo=l(),Mm=a("li"),Lle=a("strong"),geo=o("bigbird_pegasus"),heo=o(" \u2014 "),DP=a("a"),peo=o("BigBirdPegasusConfig"),_eo=o(" (BigBird-Pegasus model)"),ueo=l(),Em=a("li"),yle=a("strong"),beo=o("blenderbot"),veo=o(" \u2014 "),GP=a("a"),Feo=o("BlenderbotConfig"),Teo=o(" (Blenderbot model)"),Meo=l(),Cm=a("li"),xle=a("strong"),Eeo=o("blenderbot-small"),Ceo=o(" \u2014 "),OP=a("a"),weo=o("BlenderbotSmallConfig"),Aeo=o(" (BlenderbotSmall model)"),Leo=l(),wm=a("li"),$le=a("strong"),yeo=o("bloom"),xeo=o(" \u2014 "),VP=a("a"),$eo=o("BloomConfig"),keo=o(" (BLOOM model)"),Seo=l(),Am=a("li"),kle=a("strong"),Reo=o("camembert"),Peo=o(" \u2014 "),XP=a("a"),Beo=o("CamembertConfig"),Ieo=o(" (CamemBERT model)"),Neo=l(),Lm=a("li"),Sle=a("strong"),qeo=o("canine"),jeo=o(" \u2014 "),zP=a("a"),Deo=o("CanineConfig"),Geo=o(" (CANINE model)"),Oeo=l(),ym=a("li"),Rle=a("strong"),Veo=o("clip"),Xeo=o(" \u2014 "),WP=a("a"),zeo=o("CLIPConfig"),Weo=o(" (CLIP model)"),Qeo=l(),xm=a("li"),Ple=a("strong"),Ueo=o("codegen"),Heo=o(" \u2014 "),QP=a("a"),Jeo=o("CodeGenConfig"),Yeo=o(" (CodeGen model)"),Keo=l(),$m=a("li"),Ble=a("strong"),Zeo=o("convbert"),eoo=o(" \u2014 "),UP=a("a"),ooo=o("ConvBertConfig"),roo=o(" (ConvBERT model)"),too=l(),km=a("li"),Ile=a("strong"),aoo=o("convnext"),noo=o(" \u2014 "),HP=a("a"),soo=o("ConvNextConfig"),loo=o(" (ConvNeXT model)"),ioo=l(),Sm=a("li"),Nle=a("strong"),doo=o("ctrl"),coo=o(" \u2014 "),JP=a("a"),foo=o("CTRLConfig"),moo=o(" (CTRL model)"),goo=l(),Rm=a("li"),qle=a("strong"),hoo=o("cvt"),poo=o(" \u2014 "),YP=a("a"),_oo=o("CvtConfig"),uoo=o(" (CvT model)"),boo=l(),Pm=a("li"),jle=a("strong"),voo=o("data2vec-audio"),Foo=o(" \u2014 "),KP=a("a"),Too=o("Data2VecAudioConfig"),Moo=o(" (Data2VecAudio model)"),Eoo=l(),Bm=a("li"),Dle=a("strong"),Coo=o("data2vec-text"),woo=o(" \u2014 "),ZP=a("a"),Aoo=o("Data2VecTextConfig"),Loo=o(" (Data2VecText model)"),yoo=l(),Im=a("li"),Gle=a("strong"),xoo=o("data2vec-vision"),$oo=o(" \u2014 "),eB=a("a"),koo=o("Data2VecVisionConfig"),Soo=o(" (Data2VecVision model)"),Roo=l(),Nm=a("li"),Ole=a("strong"),Poo=o("deberta"),Boo=o(" \u2014 "),oB=a("a"),Ioo=o("DebertaConfig"),Noo=o(" (DeBERTa model)"),qoo=l(),qm=a("li"),Vle=a("strong"),joo=o("deberta-v2"),Doo=o(" \u2014 "),rB=a("a"),Goo=o("DebertaV2Config"),Ooo=o(" (DeBERTa-v2 model)"),Voo=l(),jm=a("li"),Xle=a("strong"),Xoo=o("decision_transformer"),zoo=o(" \u2014 "),tB=a("a"),Woo=o("DecisionTransformerConfig"),Qoo=o(" (Decision Transformer model)"),Uoo=l(),Dm=a("li"),zle=a("strong"),Hoo=o("deit"),Joo=o(" \u2014 "),aB=a("a"),Yoo=o("DeiTConfig"),Koo=o(" (DeiT model)"),Zoo=l(),Gm=a("li"),Wle=a("strong"),ero=o("detr"),oro=o(" \u2014 "),nB=a("a"),rro=o("DetrConfig"),tro=o(" (DETR model)"),aro=l(),Om=a("li"),Qle=a("strong"),nro=o("distilbert"),sro=o(" \u2014 "),sB=a("a"),lro=o("DistilBertConfig"),iro=o(" (DistilBERT model)"),dro=l(),Vm=a("li"),Ule=a("strong"),cro=o("donut-swin"),fro=o(" \u2014 "),lB=a("a"),mro=o("DonutSwinConfig"),gro=o(" (DonutSwin model)"),hro=l(),Xm=a("li"),Hle=a("strong"),pro=o("dpr"),_ro=o(" \u2014 "),iB=a("a"),uro=o("DPRConfig"),bro=o(" (DPR model)"),vro=l(),zm=a("li"),Jle=a("strong"),Fro=o("dpt"),Tro=o(" \u2014 "),dB=a("a"),Mro=o("DPTConfig"),Ero=o(" (DPT model)"),Cro=l(),Wm=a("li"),Yle=a("strong"),wro=o("electra"),Aro=o(" \u2014 "),cB=a("a"),Lro=o("ElectraConfig"),yro=o(" (ELECTRA model)"),xro=l(),Qm=a("li"),Kle=a("strong"),$ro=o("encoder-decoder"),kro=o(" \u2014 "),fB=a("a"),Sro=o("EncoderDecoderConfig"),Rro=o(" (Encoder decoder model)"),Pro=l(),Um=a("li"),Zle=a("strong"),Bro=o("flaubert"),Iro=o(" \u2014 "),mB=a("a"),Nro=o("FlaubertConfig"),qro=o(" (FlauBERT model)"),jro=l(),Hm=a("li"),eie=a("strong"),Dro=o("flava"),Gro=o(" \u2014 "),gB=a("a"),Oro=o("FlavaConfig"),Vro=o(" (FLAVA model)"),Xro=l(),Jm=a("li"),oie=a("strong"),zro=o("fnet"),Wro=o(" \u2014 "),hB=a("a"),Qro=o("FNetConfig"),Uro=o(" (FNet model)"),Hro=l(),Ym=a("li"),rie=a("strong"),Jro=o("fsmt"),Yro=o(" \u2014 "),pB=a("a"),Kro=o("FSMTConfig"),Zro=o(" (FairSeq Machine-Translation model)"),eto=l(),Km=a("li"),tie=a("strong"),oto=o("funnel"),rto=o(" \u2014 "),_B=a("a"),tto=o("FunnelConfig"),ato=o(" (Funnel Transformer model)"),nto=l(),Zm=a("li"),aie=a("strong"),sto=o("glpn"),lto=o(" \u2014 "),uB=a("a"),ito=o("GLPNConfig"),dto=o(" (GLPN model)"),cto=l(),eg=a("li"),nie=a("strong"),fto=o("gpt2"),mto=o(" \u2014 "),bB=a("a"),gto=o("GPT2Config"),hto=o(" (OpenAI GPT-2 model)"),pto=l(),og=a("li"),sie=a("strong"),_to=o("gpt_neo"),uto=o(" \u2014 "),vB=a("a"),bto=o("GPTNeoConfig"),vto=o(" (GPT Neo model)"),Fto=l(),rg=a("li"),lie=a("strong"),Tto=o("gpt_neox"),Mto=o(" \u2014 "),FB=a("a"),Eto=o("GPTNeoXConfig"),Cto=o(" (GPT NeoX model)"),wto=l(),tg=a("li"),iie=a("strong"),Ato=o("gptj"),Lto=o(" \u2014 "),TB=a("a"),yto=o("GPTJConfig"),xto=o(" (GPT-J model)"),$to=l(),ag=a("li"),die=a("strong"),kto=o("groupvit"),Sto=o(" \u2014 "),MB=a("a"),Rto=o("GroupViTConfig"),Pto=o(" (GroupViT model)"),Bto=l(),ng=a("li"),cie=a("strong"),Ito=o("hubert"),Nto=o(" \u2014 "),EB=a("a"),qto=o("HubertConfig"),jto=o(" (Hubert model)"),Dto=l(),sg=a("li"),fie=a("strong"),Gto=o("ibert"),Oto=o(" \u2014 "),CB=a("a"),Vto=o("IBertConfig"),Xto=o(" (I-BERT model)"),zto=l(),lg=a("li"),mie=a("strong"),Wto=o("imagegpt"),Qto=o(" \u2014 "),wB=a("a"),Uto=o("ImageGPTConfig"),Hto=o(" (ImageGPT model)"),Jto=l(),ig=a("li"),gie=a("strong"),Yto=o("layoutlm"),Kto=o(" \u2014 "),AB=a("a"),Zto=o("LayoutLMConfig"),eao=o(" (LayoutLM model)"),oao=l(),dg=a("li"),hie=a("strong"),rao=o("layoutlmv2"),tao=o(" \u2014 "),LB=a("a"),aao=o("LayoutLMv2Config"),nao=o(" (LayoutLMv2 model)"),sao=l(),cg=a("li"),pie=a("strong"),lao=o("layoutlmv3"),iao=o(" \u2014 "),yB=a("a"),dao=o("LayoutLMv3Config"),cao=o(" (LayoutLMv3 model)"),fao=l(),fg=a("li"),_ie=a("strong"),mao=o("led"),gao=o(" \u2014 "),xB=a("a"),hao=o("LEDConfig"),pao=o(" (LED model)"),_ao=l(),mg=a("li"),uie=a("strong"),uao=o("levit"),bao=o(" \u2014 "),$B=a("a"),vao=o("LevitConfig"),Fao=o(" (LeViT model)"),Tao=l(),gg=a("li"),bie=a("strong"),Mao=o("longformer"),Eao=o(" \u2014 "),kB=a("a"),Cao=o("LongformerConfig"),wao=o(" (Longformer model)"),Aao=l(),hg=a("li"),vie=a("strong"),Lao=o("longt5"),yao=o(" \u2014 "),SB=a("a"),xao=o("LongT5Config"),$ao=o(" (LongT5 model)"),kao=l(),pg=a("li"),Fie=a("strong"),Sao=o("luke"),Rao=o(" \u2014 "),RB=a("a"),Pao=o("LukeConfig"),Bao=o(" (LUKE model)"),Iao=l(),_g=a("li"),Tie=a("strong"),Nao=o("lxmert"),qao=o(" \u2014 "),PB=a("a"),jao=o("LxmertConfig"),Dao=o(" (LXMERT model)"),Gao=l(),ug=a("li"),Mie=a("strong"),Oao=o("m2m_100"),Vao=o(" \u2014 "),BB=a("a"),Xao=o("M2M100Config"),zao=o(" (M2M100 model)"),Wao=l(),bg=a("li"),Eie=a("strong"),Qao=o("marian"),Uao=o(" \u2014 "),IB=a("a"),Hao=o("MarianConfig"),Jao=o(" (Marian model)"),Yao=l(),vg=a("li"),Cie=a("strong"),Kao=o("maskformer"),Zao=o(" \u2014 "),NB=a("a"),eno=o("MaskFormerConfig"),ono=o(" (MaskFormer model)"),rno=l(),Fg=a("li"),wie=a("strong"),tno=o("mbart"),ano=o(" \u2014 "),qB=a("a"),nno=o("MBartConfig"),sno=o(" (mBART model)"),lno=l(),Tg=a("li"),Aie=a("strong"),ino=o("mctct"),dno=o(" \u2014 "),jB=a("a"),cno=o("MCTCTConfig"),fno=o(" (M-CTC-T model)"),mno=l(),Mg=a("li"),Lie=a("strong"),gno=o("megatron-bert"),hno=o(" \u2014 "),DB=a("a"),pno=o("MegatronBertConfig"),_no=o(" (Megatron-BERT model)"),uno=l(),Eg=a("li"),yie=a("strong"),bno=o("mobilebert"),vno=o(" \u2014 "),GB=a("a"),Fno=o("MobileBertConfig"),Tno=o(" (MobileBERT model)"),Mno=l(),Cg=a("li"),xie=a("strong"),Eno=o("mobilevit"),Cno=o(" \u2014 "),OB=a("a"),wno=o("MobileViTConfig"),Ano=o(" (MobileViT model)"),Lno=l(),wg=a("li"),$ie=a("strong"),yno=o("mpnet"),xno=o(" \u2014 "),VB=a("a"),$no=o("MPNetConfig"),kno=o(" (MPNet model)"),Sno=l(),Ag=a("li"),kie=a("strong"),Rno=o("mt5"),Pno=o(" \u2014 "),XB=a("a"),Bno=o("MT5Config"),Ino=o(" (MT5 model)"),Nno=l(),Lg=a("li"),Sie=a("strong"),qno=o("mvp"),jno=o(" \u2014 "),zB=a("a"),Dno=o("MvpConfig"),Gno=o(" (MVP model)"),Ono=l(),yg=a("li"),Rie=a("strong"),Vno=o("nezha"),Xno=o(" \u2014 "),WB=a("a"),zno=o("NezhaConfig"),Wno=o(" (Nezha model)"),Qno=l(),xg=a("li"),Pie=a("strong"),Uno=o("nystromformer"),Hno=o(" \u2014 "),QB=a("a"),Jno=o("NystromformerConfig"),Yno=o(" (Nystr\xF6mformer model)"),Kno=l(),$g=a("li"),Bie=a("strong"),Zno=o("openai-gpt"),eso=o(" \u2014 "),UB=a("a"),oso=o("OpenAIGPTConfig"),rso=o(" (OpenAI GPT model)"),tso=l(),kg=a("li"),Iie=a("strong"),aso=o("opt"),nso=o(" \u2014 "),HB=a("a"),sso=o("OPTConfig"),lso=o(" (OPT model)"),iso=l(),Sg=a("li"),Nie=a("strong"),dso=o("owlvit"),cso=o(" \u2014 "),JB=a("a"),fso=o("OwlViTConfig"),mso=o(" (OWL-ViT model)"),gso=l(),Rg=a("li"),qie=a("strong"),hso=o("pegasus"),pso=o(" \u2014 "),YB=a("a"),_so=o("PegasusConfig"),uso=o(" (Pegasus model)"),bso=l(),Pg=a("li"),jie=a("strong"),vso=o("perceiver"),Fso=o(" \u2014 "),KB=a("a"),Tso=o("PerceiverConfig"),Mso=o(" (Perceiver model)"),Eso=l(),Bg=a("li"),Die=a("strong"),Cso=o("plbart"),wso=o(" \u2014 "),ZB=a("a"),Aso=o("PLBartConfig"),Lso=o(" (PLBart model)"),yso=l(),Ig=a("li"),Gie=a("strong"),xso=o("poolformer"),$so=o(" \u2014 "),eI=a("a"),kso=o("PoolFormerConfig"),Sso=o(" (PoolFormer model)"),Rso=l(),Ng=a("li"),Oie=a("strong"),Pso=o("prophetnet"),Bso=o(" \u2014 "),oI=a("a"),Iso=o("ProphetNetConfig"),Nso=o(" (ProphetNet model)"),qso=l(),qg=a("li"),Vie=a("strong"),jso=o("qdqbert"),Dso=o(" \u2014 "),rI=a("a"),Gso=o("QDQBertConfig"),Oso=o(" (QDQBert model)"),Vso=l(),jg=a("li"),Xie=a("strong"),Xso=o("rag"),zso=o(" \u2014 "),tI=a("a"),Wso=o("RagConfig"),Qso=o(" (RAG model)"),Uso=l(),Dg=a("li"),zie=a("strong"),Hso=o("realm"),Jso=o(" \u2014 "),aI=a("a"),Yso=o("RealmConfig"),Kso=o(" (REALM model)"),Zso=l(),Gg=a("li"),Wie=a("strong"),elo=o("reformer"),olo=o(" \u2014 "),nI=a("a"),rlo=o("ReformerConfig"),tlo=o(" (Reformer model)"),alo=l(),Og=a("li"),Qie=a("strong"),nlo=o("regnet"),slo=o(" \u2014 "),sI=a("a"),llo=o("RegNetConfig"),ilo=o(" (RegNet model)"),dlo=l(),Vg=a("li"),Uie=a("strong"),clo=o("rembert"),flo=o(" \u2014 "),lI=a("a"),mlo=o("RemBertConfig"),glo=o(" (RemBERT model)"),hlo=l(),Xg=a("li"),Hie=a("strong"),plo=o("resnet"),_lo=o(" \u2014 "),iI=a("a"),ulo=o("ResNetConfig"),blo=o(" (ResNet model)"),vlo=l(),zg=a("li"),Jie=a("strong"),Flo=o("retribert"),Tlo=o(" \u2014 "),dI=a("a"),Mlo=o("RetriBertConfig"),Elo=o(" (RetriBERT model)"),Clo=l(),Wg=a("li"),Yie=a("strong"),wlo=o("roberta"),Alo=o(" \u2014 "),cI=a("a"),Llo=o("RobertaConfig"),ylo=o(" (RoBERTa model)"),xlo=l(),Qg=a("li"),Kie=a("strong"),$lo=o("roformer"),klo=o(" \u2014 "),fI=a("a"),Slo=o("RoFormerConfig"),Rlo=o(" (RoFormer model)"),Plo=l(),Ug=a("li"),Zie=a("strong"),Blo=o("segformer"),Ilo=o(" \u2014 "),mI=a("a"),Nlo=o("SegformerConfig"),qlo=o(" (SegFormer model)"),jlo=l(),Hg=a("li"),ede=a("strong"),Dlo=o("sew"),Glo=o(" \u2014 "),gI=a("a"),Olo=o("SEWConfig"),Vlo=o(" (SEW model)"),Xlo=l(),Jg=a("li"),ode=a("strong"),zlo=o("sew-d"),Wlo=o(" \u2014 "),hI=a("a"),Qlo=o("SEWDConfig"),Ulo=o(" (SEW-D model)"),Hlo=l(),Yg=a("li"),rde=a("strong"),Jlo=o("speech-encoder-decoder"),Ylo=o(" \u2014 "),pI=a("a"),Klo=o("SpeechEncoderDecoderConfig"),Zlo=o(" (Speech Encoder decoder model)"),eio=l(),Kg=a("li"),tde=a("strong"),oio=o("speech_to_text"),rio=o(" \u2014 "),_I=a("a"),tio=o("Speech2TextConfig"),aio=o(" (Speech2Text model)"),nio=l(),Zg=a("li"),ade=a("strong"),sio=o("speech_to_text_2"),lio=o(" \u2014 "),uI=a("a"),iio=o("Speech2Text2Config"),dio=o(" (Speech2Text2 model)"),cio=l(),eh=a("li"),nde=a("strong"),fio=o("splinter"),mio=o(" \u2014 "),bI=a("a"),gio=o("SplinterConfig"),hio=o(" (Splinter model)"),pio=l(),oh=a("li"),sde=a("strong"),_io=o("squeezebert"),uio=o(" \u2014 "),vI=a("a"),bio=o("SqueezeBertConfig"),vio=o(" (SqueezeBERT model)"),Fio=l(),rh=a("li"),lde=a("strong"),Tio=o("swin"),Mio=o(" \u2014 "),FI=a("a"),Eio=o("SwinConfig"),Cio=o(" (Swin Transformer model)"),wio=l(),th=a("li"),ide=a("strong"),Aio=o("swinv2"),Lio=o(" \u2014 "),TI=a("a"),yio=o("Swinv2Config"),xio=o(" (Swin Transformer V2 model)"),$io=l(),ah=a("li"),dde=a("strong"),kio=o("t5"),Sio=o(" \u2014 "),MI=a("a"),Rio=o("T5Config"),Pio=o(" (T5 model)"),Bio=l(),nh=a("li"),cde=a("strong"),Iio=o("tapas"),Nio=o(" \u2014 "),EI=a("a"),qio=o("TapasConfig"),jio=o(" (TAPAS model)"),Dio=l(),sh=a("li"),fde=a("strong"),Gio=o("trajectory_transformer"),Oio=o(" \u2014 "),CI=a("a"),Vio=o("TrajectoryTransformerConfig"),Xio=o(" (Trajectory Transformer model)"),zio=l(),lh=a("li"),mde=a("strong"),Wio=o("transfo-xl"),Qio=o(" \u2014 "),wI=a("a"),Uio=o("TransfoXLConfig"),Hio=o(" (Transformer-XL model)"),Jio=l(),ih=a("li"),gde=a("strong"),Yio=o("trocr"),Kio=o(" \u2014 "),AI=a("a"),Zio=o("TrOCRConfig"),edo=o(" (TrOCR model)"),odo=l(),dh=a("li"),hde=a("strong"),rdo=o("unispeech"),tdo=o(" \u2014 "),LI=a("a"),ado=o("UniSpeechConfig"),ndo=o(" (UniSpeech model)"),sdo=l(),ch=a("li"),pde=a("strong"),ldo=o("unispeech-sat"),ido=o(" \u2014 "),yI=a("a"),ddo=o("UniSpeechSatConfig"),cdo=o(" (UniSpeechSat model)"),fdo=l(),fh=a("li"),_de=a("strong"),mdo=o("van"),gdo=o(" \u2014 "),xI=a("a"),hdo=o("VanConfig"),pdo=o(" (VAN model)"),_do=l(),mh=a("li"),ude=a("strong"),udo=o("videomae"),bdo=o(" \u2014 "),$I=a("a"),vdo=o("VideoMAEConfig"),Fdo=o(" (VideoMAE model)"),Tdo=l(),gh=a("li"),bde=a("strong"),Mdo=o("vilt"),Edo=o(" \u2014 "),kI=a("a"),Cdo=o("ViltConfig"),wdo=o(" (ViLT model)"),Ado=l(),hh=a("li"),vde=a("strong"),Ldo=o("vision-encoder-decoder"),ydo=o(" \u2014 "),SI=a("a"),xdo=o("VisionEncoderDecoderConfig"),$do=o(" (Vision Encoder decoder model)"),kdo=l(),ph=a("li"),Fde=a("strong"),Sdo=o("vision-text-dual-encoder"),Rdo=o(" \u2014 "),RI=a("a"),Pdo=o("VisionTextDualEncoderConfig"),Bdo=o(" (VisionTextDualEncoder model)"),Ido=l(),_h=a("li"),Tde=a("strong"),Ndo=o("visual_bert"),qdo=o(" \u2014 "),PI=a("a"),jdo=o("VisualBertConfig"),Ddo=o(" (VisualBERT model)"),Gdo=l(),uh=a("li"),Mde=a("strong"),Odo=o("vit"),Vdo=o(" \u2014 "),BI=a("a"),Xdo=o("ViTConfig"),zdo=o(" (ViT model)"),Wdo=l(),bh=a("li"),Ede=a("strong"),Qdo=o("vit_mae"),Udo=o(" \u2014 "),II=a("a"),Hdo=o("ViTMAEConfig"),Jdo=o(" (ViTMAE model)"),Ydo=l(),vh=a("li"),Cde=a("strong"),Kdo=o("wav2vec2"),Zdo=o(" \u2014 "),NI=a("a"),eco=o("Wav2Vec2Config"),oco=o(" (Wav2Vec2 model)"),rco=l(),Fh=a("li"),wde=a("strong"),tco=o("wav2vec2-conformer"),aco=o(" \u2014 "),qI=a("a"),nco=o("Wav2Vec2ConformerConfig"),sco=o(" (Wav2Vec2-Conformer model)"),lco=l(),Th=a("li"),Ade=a("strong"),ico=o("wavlm"),dco=o(" \u2014 "),jI=a("a"),cco=o("WavLMConfig"),fco=o(" (WavLM model)"),mco=l(),Mh=a("li"),Lde=a("strong"),gco=o("xglm"),hco=o(" \u2014 "),DI=a("a"),pco=o("XGLMConfig"),_co=o(" (XGLM model)"),uco=l(),Eh=a("li"),yde=a("strong"),bco=o("xlm"),vco=o(" \u2014 "),GI=a("a"),Fco=o("XLMConfig"),Tco=o(" (XLM model)"),Mco=l(),Ch=a("li"),xde=a("strong"),Eco=o("xlm-prophetnet"),Cco=o(" \u2014 "),OI=a("a"),wco=o("XLMProphetNetConfig"),Aco=o(" (XLM-ProphetNet model)"),Lco=l(),wh=a("li"),$de=a("strong"),yco=o("xlm-roberta"),xco=o(" \u2014 "),VI=a("a"),$co=o("XLMRobertaConfig"),kco=o(" (XLM-RoBERTa model)"),Sco=l(),Ah=a("li"),kde=a("strong"),Rco=o("xlm-roberta-xl"),Pco=o(" \u2014 "),XI=a("a"),Bco=o("XLMRobertaXLConfig"),Ico=o(" (XLM-RoBERTa-XL model)"),Nco=l(),Lh=a("li"),Sde=a("strong"),qco=o("xlnet"),jco=o(" \u2014 "),zI=a("a"),Dco=o("XLNetConfig"),Gco=o(" (XLNet model)"),Oco=l(),yh=a("li"),Rde=a("strong"),Vco=o("yolos"),Xco=o(" \u2014 "),WI=a("a"),zco=o("YolosConfig"),Wco=o(" (YOLOS model)"),Qco=l(),xh=a("li"),Pde=a("strong"),Uco=o("yoso"),Hco=o(" \u2014 "),QI=a("a"),Jco=o("YosoConfig"),Yco=o(" (YOSO model)"),Kco=l(),F($h.$$.fragment),Zco=l(),kh=a("div"),F(qy.$$.fragment),efo=l(),Bde=a("p"),ofo=o("Register a new configuration for this class."),DUe=l(),ad=a("h2"),Sh=a("a"),Ide=a("span"),F(jy.$$.fragment),rfo=l(),Nde=a("span"),tfo=o("AutoTokenizer"),GUe=l(),$o=a("div"),F(Dy.$$.fragment),afo=l(),Gy=a("p"),nfo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),UI=a("a"),sfo=o("AutoTokenizer.from_pretrained()"),lfo=o(" class method."),ifo=l(),Oy=a("p"),dfo=o("This class cannot be instantiated directly using "),qde=a("code"),cfo=o("__init__()"),ffo=o(" (throws an error)."),mfo=l(),Pr=a("div"),F(Vy.$$.fragment),gfo=l(),jde=a("p"),hfo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),pfo=l(),za=a("p"),_fo=o("The tokenizer class to instantiate is selected based on the "),Dde=a("code"),ufo=o("model_type"),bfo=o(` property of the config object (either
passed as an argument or loaded from `),Gde=a("code"),vfo=o("pretrained_model_name_or_path"),Ffo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ode=a("code"),Tfo=o("pretrained_model_name_or_path"),Mfo=o(":"),Efo=l(),k=a("ul"),es=a("li"),Vde=a("strong"),Cfo=o("albert"),wfo=o(" \u2014 "),HI=a("a"),Afo=o("AlbertTokenizer"),Lfo=o(" or "),JI=a("a"),yfo=o("AlbertTokenizerFast"),xfo=o(" (ALBERT model)"),$fo=l(),os=a("li"),Xde=a("strong"),kfo=o("bart"),Sfo=o(" \u2014 "),YI=a("a"),Rfo=o("BartTokenizer"),Pfo=o(" or "),KI=a("a"),Bfo=o("BartTokenizerFast"),Ifo=o(" (BART model)"),Nfo=l(),rs=a("li"),zde=a("strong"),qfo=o("barthez"),jfo=o(" \u2014 "),ZI=a("a"),Dfo=o("BarthezTokenizer"),Gfo=o(" or "),eN=a("a"),Ofo=o("BarthezTokenizerFast"),Vfo=o(" (BARThez model)"),Xfo=l(),Rh=a("li"),Wde=a("strong"),zfo=o("bartpho"),Wfo=o(" \u2014 "),oN=a("a"),Qfo=o("BartphoTokenizer"),Ufo=o(" (BARTpho model)"),Hfo=l(),ts=a("li"),Qde=a("strong"),Jfo=o("bert"),Yfo=o(" \u2014 "),rN=a("a"),Kfo=o("BertTokenizer"),Zfo=o(" or "),tN=a("a"),emo=o("BertTokenizerFast"),omo=o(" (BERT model)"),rmo=l(),Ph=a("li"),Ude=a("strong"),tmo=o("bert-generation"),amo=o(" \u2014 "),aN=a("a"),nmo=o("BertGenerationTokenizer"),smo=o(" (Bert Generation model)"),lmo=l(),Bh=a("li"),Hde=a("strong"),imo=o("bert-japanese"),dmo=o(" \u2014 "),nN=a("a"),cmo=o("BertJapaneseTokenizer"),fmo=o(" (BertJapanese model)"),mmo=l(),Ih=a("li"),Jde=a("strong"),gmo=o("bertweet"),hmo=o(" \u2014 "),sN=a("a"),pmo=o("BertweetTokenizer"),_mo=o(" (BERTweet model)"),umo=l(),as=a("li"),Yde=a("strong"),bmo=o("big_bird"),vmo=o(" \u2014 "),lN=a("a"),Fmo=o("BigBirdTokenizer"),Tmo=o(" or "),iN=a("a"),Mmo=o("BigBirdTokenizerFast"),Emo=o(" (BigBird model)"),Cmo=l(),ns=a("li"),Kde=a("strong"),wmo=o("bigbird_pegasus"),Amo=o(" \u2014 "),dN=a("a"),Lmo=o("PegasusTokenizer"),ymo=o(" or "),cN=a("a"),xmo=o("PegasusTokenizerFast"),$mo=o(" (BigBird-Pegasus model)"),kmo=l(),ss=a("li"),Zde=a("strong"),Smo=o("blenderbot"),Rmo=o(" \u2014 "),fN=a("a"),Pmo=o("BlenderbotTokenizer"),Bmo=o(" or "),mN=a("a"),Imo=o("BlenderbotTokenizerFast"),Nmo=o(" (Blenderbot model)"),qmo=l(),Nh=a("li"),ece=a("strong"),jmo=o("blenderbot-small"),Dmo=o(" \u2014 "),gN=a("a"),Gmo=o("BlenderbotSmallTokenizer"),Omo=o(" (BlenderbotSmall model)"),Vmo=l(),qh=a("li"),oce=a("strong"),Xmo=o("bloom"),zmo=o(" \u2014 "),hN=a("a"),Wmo=o("BloomTokenizerFast"),Qmo=o(" (BLOOM model)"),Umo=l(),jh=a("li"),rce=a("strong"),Hmo=o("byt5"),Jmo=o(" \u2014 "),pN=a("a"),Ymo=o("ByT5Tokenizer"),Kmo=o(" (ByT5 model)"),Zmo=l(),ls=a("li"),tce=a("strong"),ego=o("camembert"),ogo=o(" \u2014 "),_N=a("a"),rgo=o("CamembertTokenizer"),tgo=o(" or "),uN=a("a"),ago=o("CamembertTokenizerFast"),ngo=o(" (CamemBERT model)"),sgo=l(),Dh=a("li"),ace=a("strong"),lgo=o("canine"),igo=o(" \u2014 "),bN=a("a"),dgo=o("CanineTokenizer"),cgo=o(" (CANINE model)"),fgo=l(),is=a("li"),nce=a("strong"),mgo=o("clip"),ggo=o(" \u2014 "),vN=a("a"),hgo=o("CLIPTokenizer"),pgo=o(" or "),FN=a("a"),_go=o("CLIPTokenizerFast"),ugo=o(" (CLIP model)"),bgo=l(),ds=a("li"),sce=a("strong"),vgo=o("codegen"),Fgo=o(" \u2014 "),TN=a("a"),Tgo=o("CodeGenTokenizer"),Mgo=o(" or "),MN=a("a"),Ego=o("CodeGenTokenizerFast"),Cgo=o(" (CodeGen model)"),wgo=l(),cs=a("li"),lce=a("strong"),Ago=o("convbert"),Lgo=o(" \u2014 "),EN=a("a"),ygo=o("ConvBertTokenizer"),xgo=o(" or "),CN=a("a"),$go=o("ConvBertTokenizerFast"),kgo=o(" (ConvBERT model)"),Sgo=l(),fs=a("li"),ice=a("strong"),Rgo=o("cpm"),Pgo=o(" \u2014 "),wN=a("a"),Bgo=o("CpmTokenizer"),Igo=o(" or "),AN=a("a"),Ngo=o("CpmTokenizerFast"),qgo=o(" (CPM model)"),jgo=l(),Gh=a("li"),dce=a("strong"),Dgo=o("ctrl"),Ggo=o(" \u2014 "),LN=a("a"),Ogo=o("CTRLTokenizer"),Vgo=o(" (CTRL model)"),Xgo=l(),ms=a("li"),cce=a("strong"),zgo=o("data2vec-text"),Wgo=o(" \u2014 "),yN=a("a"),Qgo=o("RobertaTokenizer"),Ugo=o(" or "),xN=a("a"),Hgo=o("RobertaTokenizerFast"),Jgo=o(" (Data2VecText model)"),Ygo=l(),gs=a("li"),fce=a("strong"),Kgo=o("deberta"),Zgo=o(" \u2014 "),$N=a("a"),eho=o("DebertaTokenizer"),oho=o(" or "),kN=a("a"),rho=o("DebertaTokenizerFast"),tho=o(" (DeBERTa model)"),aho=l(),hs=a("li"),mce=a("strong"),nho=o("deberta-v2"),sho=o(" \u2014 "),SN=a("a"),lho=o("DebertaV2Tokenizer"),iho=o(" or "),RN=a("a"),dho=o("DebertaV2TokenizerFast"),cho=o(" (DeBERTa-v2 model)"),fho=l(),ps=a("li"),gce=a("strong"),mho=o("distilbert"),gho=o(" \u2014 "),PN=a("a"),hho=o("DistilBertTokenizer"),pho=o(" or "),BN=a("a"),_ho=o("DistilBertTokenizerFast"),uho=o(" (DistilBERT model)"),bho=l(),_s=a("li"),hce=a("strong"),vho=o("dpr"),Fho=o(" \u2014 "),IN=a("a"),Tho=o("DPRQuestionEncoderTokenizer"),Mho=o(" or "),NN=a("a"),Eho=o("DPRQuestionEncoderTokenizerFast"),Cho=o(" (DPR model)"),who=l(),us=a("li"),pce=a("strong"),Aho=o("electra"),Lho=o(" \u2014 "),qN=a("a"),yho=o("ElectraTokenizer"),xho=o(" or "),jN=a("a"),$ho=o("ElectraTokenizerFast"),kho=o(" (ELECTRA model)"),Sho=l(),Oh=a("li"),_ce=a("strong"),Rho=o("flaubert"),Pho=o(" \u2014 "),DN=a("a"),Bho=o("FlaubertTokenizer"),Iho=o(" (FlauBERT model)"),Nho=l(),bs=a("li"),uce=a("strong"),qho=o("fnet"),jho=o(" \u2014 "),GN=a("a"),Dho=o("FNetTokenizer"),Gho=o(" or "),ON=a("a"),Oho=o("FNetTokenizerFast"),Vho=o(" (FNet model)"),Xho=l(),Vh=a("li"),bce=a("strong"),zho=o("fsmt"),Who=o(" \u2014 "),VN=a("a"),Qho=o("FSMTTokenizer"),Uho=o(" (FairSeq Machine-Translation model)"),Hho=l(),vs=a("li"),vce=a("strong"),Jho=o("funnel"),Yho=o(" \u2014 "),XN=a("a"),Kho=o("FunnelTokenizer"),Zho=o(" or "),zN=a("a"),epo=o("FunnelTokenizerFast"),opo=o(" (Funnel Transformer model)"),rpo=l(),Fs=a("li"),Fce=a("strong"),tpo=o("gpt2"),apo=o(" \u2014 "),WN=a("a"),npo=o("GPT2Tokenizer"),spo=o(" or "),QN=a("a"),lpo=o("GPT2TokenizerFast"),ipo=o(" (OpenAI GPT-2 model)"),dpo=l(),Ts=a("li"),Tce=a("strong"),cpo=o("gpt_neo"),fpo=o(" \u2014 "),UN=a("a"),mpo=o("GPT2Tokenizer"),gpo=o(" or "),HN=a("a"),hpo=o("GPT2TokenizerFast"),ppo=o(" (GPT Neo model)"),_po=l(),Xh=a("li"),Mce=a("strong"),upo=o("gpt_neox"),bpo=o(" \u2014 "),JN=a("a"),vpo=o("GPTNeoXTokenizerFast"),Fpo=o(" (GPT NeoX model)"),Tpo=l(),Ms=a("li"),Ece=a("strong"),Mpo=o("gptj"),Epo=o(" \u2014 "),YN=a("a"),Cpo=o("GPT2Tokenizer"),wpo=o(" or "),KN=a("a"),Apo=o("GPT2TokenizerFast"),Lpo=o(" (GPT-J model)"),ypo=l(),Es=a("li"),Cce=a("strong"),xpo=o("groupvit"),$po=o(" \u2014 "),ZN=a("a"),kpo=o("CLIPTokenizer"),Spo=o(" or "),eq=a("a"),Rpo=o("CLIPTokenizerFast"),Ppo=o(" (GroupViT model)"),Bpo=l(),Cs=a("li"),wce=a("strong"),Ipo=o("herbert"),Npo=o(" \u2014 "),oq=a("a"),qpo=o("HerbertTokenizer"),jpo=o(" or "),rq=a("a"),Dpo=o("HerbertTokenizerFast"),Gpo=o(" (HerBERT model)"),Opo=l(),zh=a("li"),Ace=a("strong"),Vpo=o("hubert"),Xpo=o(" \u2014 "),tq=a("a"),zpo=o("Wav2Vec2CTCTokenizer"),Wpo=o(" (Hubert model)"),Qpo=l(),ws=a("li"),Lce=a("strong"),Upo=o("ibert"),Hpo=o(" \u2014 "),aq=a("a"),Jpo=o("RobertaTokenizer"),Ypo=o(" or "),nq=a("a"),Kpo=o("RobertaTokenizerFast"),Zpo=o(" (I-BERT model)"),e_o=l(),As=a("li"),yce=a("strong"),o_o=o("layoutlm"),r_o=o(" \u2014 "),sq=a("a"),t_o=o("LayoutLMTokenizer"),a_o=o(" or "),lq=a("a"),n_o=o("LayoutLMTokenizerFast"),s_o=o(" (LayoutLM model)"),l_o=l(),Ls=a("li"),xce=a("strong"),i_o=o("layoutlmv2"),d_o=o(" \u2014 "),iq=a("a"),c_o=o("LayoutLMv2Tokenizer"),f_o=o(" or "),dq=a("a"),m_o=o("LayoutLMv2TokenizerFast"),g_o=o(" (LayoutLMv2 model)"),h_o=l(),ys=a("li"),$ce=a("strong"),p_o=o("layoutlmv3"),__o=o(" \u2014 "),cq=a("a"),u_o=o("LayoutLMv3Tokenizer"),b_o=o(" or "),fq=a("a"),v_o=o("LayoutLMv3TokenizerFast"),F_o=o(" (LayoutLMv3 model)"),T_o=l(),xs=a("li"),kce=a("strong"),M_o=o("layoutxlm"),E_o=o(" \u2014 "),mq=a("a"),C_o=o("LayoutXLMTokenizer"),w_o=o(" or "),gq=a("a"),A_o=o("LayoutXLMTokenizerFast"),L_o=o(" (LayoutXLM model)"),y_o=l(),$s=a("li"),Sce=a("strong"),x_o=o("led"),$_o=o(" \u2014 "),hq=a("a"),k_o=o("LEDTokenizer"),S_o=o(" or "),pq=a("a"),R_o=o("LEDTokenizerFast"),P_o=o(" (LED model)"),B_o=l(),ks=a("li"),Rce=a("strong"),I_o=o("longformer"),N_o=o(" \u2014 "),_q=a("a"),q_o=o("LongformerTokenizer"),j_o=o(" or "),uq=a("a"),D_o=o("LongformerTokenizerFast"),G_o=o(" (Longformer model)"),O_o=l(),Ss=a("li"),Pce=a("strong"),V_o=o("longt5"),X_o=o(" \u2014 "),bq=a("a"),z_o=o("T5Tokenizer"),W_o=o(" or "),vq=a("a"),Q_o=o("T5TokenizerFast"),U_o=o(" (LongT5 model)"),H_o=l(),Wh=a("li"),Bce=a("strong"),J_o=o("luke"),Y_o=o(" \u2014 "),Fq=a("a"),K_o=o("LukeTokenizer"),Z_o=o(" (LUKE model)"),euo=l(),Rs=a("li"),Ice=a("strong"),ouo=o("lxmert"),ruo=o(" \u2014 "),Tq=a("a"),tuo=o("LxmertTokenizer"),auo=o(" or "),Mq=a("a"),nuo=o("LxmertTokenizerFast"),suo=o(" (LXMERT model)"),luo=l(),Qh=a("li"),Nce=a("strong"),iuo=o("m2m_100"),duo=o(" \u2014 "),Eq=a("a"),cuo=o("M2M100Tokenizer"),fuo=o(" (M2M100 model)"),muo=l(),Uh=a("li"),qce=a("strong"),guo=o("marian"),huo=o(" \u2014 "),Cq=a("a"),puo=o("MarianTokenizer"),_uo=o(" (Marian model)"),uuo=l(),Ps=a("li"),jce=a("strong"),buo=o("mbart"),vuo=o(" \u2014 "),wq=a("a"),Fuo=o("MBartTokenizer"),Tuo=o(" or "),Aq=a("a"),Muo=o("MBartTokenizerFast"),Euo=o(" (mBART model)"),Cuo=l(),Bs=a("li"),Dce=a("strong"),wuo=o("mbart50"),Auo=o(" \u2014 "),Lq=a("a"),Luo=o("MBart50Tokenizer"),yuo=o(" or "),yq=a("a"),xuo=o("MBart50TokenizerFast"),$uo=o(" (mBART-50 model)"),kuo=l(),Is=a("li"),Gce=a("strong"),Suo=o("megatron-bert"),Ruo=o(" \u2014 "),xq=a("a"),Puo=o("BertTokenizer"),Buo=o(" or "),$q=a("a"),Iuo=o("BertTokenizerFast"),Nuo=o(" (Megatron-BERT model)"),quo=l(),Hh=a("li"),Oce=a("strong"),juo=o("mluke"),Duo=o(" \u2014 "),kq=a("a"),Guo=o("MLukeTokenizer"),Ouo=o(" (mLUKE model)"),Vuo=l(),Ns=a("li"),Vce=a("strong"),Xuo=o("mobilebert"),zuo=o(" \u2014 "),Sq=a("a"),Wuo=o("MobileBertTokenizer"),Quo=o(" or "),Rq=a("a"),Uuo=o("MobileBertTokenizerFast"),Huo=o(" (MobileBERT model)"),Juo=l(),qs=a("li"),Xce=a("strong"),Yuo=o("mpnet"),Kuo=o(" \u2014 "),Pq=a("a"),Zuo=o("MPNetTokenizer"),e1o=o(" or "),Bq=a("a"),o1o=o("MPNetTokenizerFast"),r1o=o(" (MPNet model)"),t1o=l(),js=a("li"),zce=a("strong"),a1o=o("mt5"),n1o=o(" \u2014 "),Iq=a("a"),s1o=o("MT5Tokenizer"),l1o=o(" or "),Nq=a("a"),i1o=o("MT5TokenizerFast"),d1o=o(" (MT5 model)"),c1o=l(),Ds=a("li"),Wce=a("strong"),f1o=o("mvp"),m1o=o(" \u2014 "),qq=a("a"),g1o=o("MvpTokenizer"),h1o=o(" or "),jq=a("a"),p1o=o("MvpTokenizerFast"),_1o=o(" (MVP model)"),u1o=l(),Gs=a("li"),Qce=a("strong"),b1o=o("nezha"),v1o=o(" \u2014 "),Dq=a("a"),F1o=o("BertTokenizer"),T1o=o(" or "),Gq=a("a"),M1o=o("BertTokenizerFast"),E1o=o(" (Nezha model)"),C1o=l(),Os=a("li"),Uce=a("strong"),w1o=o("nllb"),A1o=o(" \u2014 "),Oq=a("a"),L1o=o("NllbTokenizer"),y1o=o(" or "),Vq=a("a"),x1o=o("NllbTokenizerFast"),$1o=o(" (NLLB model)"),k1o=l(),Vs=a("li"),Hce=a("strong"),S1o=o("nystromformer"),R1o=o(" \u2014 "),Xq=a("a"),P1o=o("AlbertTokenizer"),B1o=o(" or "),zq=a("a"),I1o=o("AlbertTokenizerFast"),N1o=o(" (Nystr\xF6mformer model)"),q1o=l(),Xs=a("li"),Jce=a("strong"),j1o=o("openai-gpt"),D1o=o(" \u2014 "),Wq=a("a"),G1o=o("OpenAIGPTTokenizer"),O1o=o(" or "),Qq=a("a"),V1o=o("OpenAIGPTTokenizerFast"),X1o=o(" (OpenAI GPT model)"),z1o=l(),Jh=a("li"),Yce=a("strong"),W1o=o("opt"),Q1o=o(" \u2014 "),Uq=a("a"),U1o=o("GPT2Tokenizer"),H1o=o(" (OPT model)"),J1o=l(),zs=a("li"),Kce=a("strong"),Y1o=o("owlvit"),K1o=o(" \u2014 "),Hq=a("a"),Z1o=o("CLIPTokenizer"),e8o=o(" or "),Jq=a("a"),o8o=o("CLIPTokenizerFast"),r8o=o(" (OWL-ViT model)"),t8o=l(),Ws=a("li"),Zce=a("strong"),a8o=o("pegasus"),n8o=o(" \u2014 "),Yq=a("a"),s8o=o("PegasusTokenizer"),l8o=o(" or "),Kq=a("a"),i8o=o("PegasusTokenizerFast"),d8o=o(" (Pegasus model)"),c8o=l(),Yh=a("li"),efe=a("strong"),f8o=o("perceiver"),m8o=o(" \u2014 "),Zq=a("a"),g8o=o("PerceiverTokenizer"),h8o=o(" (Perceiver model)"),p8o=l(),Kh=a("li"),ofe=a("strong"),_8o=o("phobert"),u8o=o(" \u2014 "),ej=a("a"),b8o=o("PhobertTokenizer"),v8o=o(" (PhoBERT model)"),F8o=l(),Zh=a("li"),rfe=a("strong"),T8o=o("plbart"),M8o=o(" \u2014 "),oj=a("a"),E8o=o("PLBartTokenizer"),C8o=o(" (PLBart model)"),w8o=l(),ep=a("li"),tfe=a("strong"),A8o=o("prophetnet"),L8o=o(" \u2014 "),rj=a("a"),y8o=o("ProphetNetTokenizer"),x8o=o(" (ProphetNet model)"),$8o=l(),Qs=a("li"),afe=a("strong"),k8o=o("qdqbert"),S8o=o(" \u2014 "),tj=a("a"),R8o=o("BertTokenizer"),P8o=o(" or "),aj=a("a"),B8o=o("BertTokenizerFast"),I8o=o(" (QDQBert model)"),N8o=l(),op=a("li"),nfe=a("strong"),q8o=o("rag"),j8o=o(" \u2014 "),nj=a("a"),D8o=o("RagTokenizer"),G8o=o(" (RAG model)"),O8o=l(),Us=a("li"),sfe=a("strong"),V8o=o("realm"),X8o=o(" \u2014 "),sj=a("a"),z8o=o("RealmTokenizer"),W8o=o(" or "),lj=a("a"),Q8o=o("RealmTokenizerFast"),U8o=o(" (REALM model)"),H8o=l(),Hs=a("li"),lfe=a("strong"),J8o=o("reformer"),Y8o=o(" \u2014 "),ij=a("a"),K8o=o("ReformerTokenizer"),Z8o=o(" or "),dj=a("a"),ebo=o("ReformerTokenizerFast"),obo=o(" (Reformer model)"),rbo=l(),Js=a("li"),ife=a("strong"),tbo=o("rembert"),abo=o(" \u2014 "),cj=a("a"),nbo=o("RemBertTokenizer"),sbo=o(" or "),fj=a("a"),lbo=o("RemBertTokenizerFast"),ibo=o(" (RemBERT model)"),dbo=l(),Ys=a("li"),dfe=a("strong"),cbo=o("retribert"),fbo=o(" \u2014 "),mj=a("a"),mbo=o("RetriBertTokenizer"),gbo=o(" or "),gj=a("a"),hbo=o("RetriBertTokenizerFast"),pbo=o(" (RetriBERT model)"),_bo=l(),Ks=a("li"),cfe=a("strong"),ubo=o("roberta"),bbo=o(" \u2014 "),hj=a("a"),vbo=o("RobertaTokenizer"),Fbo=o(" or "),pj=a("a"),Tbo=o("RobertaTokenizerFast"),Mbo=o(" (RoBERTa model)"),Ebo=l(),Zs=a("li"),ffe=a("strong"),Cbo=o("roformer"),wbo=o(" \u2014 "),_j=a("a"),Abo=o("RoFormerTokenizer"),Lbo=o(" or "),uj=a("a"),ybo=o("RoFormerTokenizerFast"),xbo=o(" (RoFormer model)"),$bo=l(),rp=a("li"),mfe=a("strong"),kbo=o("speech_to_text"),Sbo=o(" \u2014 "),bj=a("a"),Rbo=o("Speech2TextTokenizer"),Pbo=o(" (Speech2Text model)"),Bbo=l(),tp=a("li"),gfe=a("strong"),Ibo=o("speech_to_text_2"),Nbo=o(" \u2014 "),vj=a("a"),qbo=o("Speech2Text2Tokenizer"),jbo=o(" (Speech2Text2 model)"),Dbo=l(),el=a("li"),hfe=a("strong"),Gbo=o("splinter"),Obo=o(" \u2014 "),Fj=a("a"),Vbo=o("SplinterTokenizer"),Xbo=o(" or "),Tj=a("a"),zbo=o("SplinterTokenizerFast"),Wbo=o(" (Splinter model)"),Qbo=l(),ol=a("li"),pfe=a("strong"),Ubo=o("squeezebert"),Hbo=o(" \u2014 "),Mj=a("a"),Jbo=o("SqueezeBertTokenizer"),Ybo=o(" or "),Ej=a("a"),Kbo=o("SqueezeBertTokenizerFast"),Zbo=o(" (SqueezeBERT model)"),e2o=l(),rl=a("li"),_fe=a("strong"),o2o=o("t5"),r2o=o(" \u2014 "),Cj=a("a"),t2o=o("T5Tokenizer"),a2o=o(" or "),wj=a("a"),n2o=o("T5TokenizerFast"),s2o=o(" (T5 model)"),l2o=l(),ap=a("li"),ufe=a("strong"),i2o=o("tapas"),d2o=o(" \u2014 "),Aj=a("a"),c2o=o("TapasTokenizer"),f2o=o(" (TAPAS model)"),m2o=l(),np=a("li"),bfe=a("strong"),g2o=o("tapex"),h2o=o(" \u2014 "),Lj=a("a"),p2o=o("TapexTokenizer"),_2o=o(" (TAPEX model)"),u2o=l(),sp=a("li"),vfe=a("strong"),b2o=o("transfo-xl"),v2o=o(" \u2014 "),yj=a("a"),F2o=o("TransfoXLTokenizer"),T2o=o(" (Transformer-XL model)"),M2o=l(),tl=a("li"),Ffe=a("strong"),E2o=o("vilt"),C2o=o(" \u2014 "),xj=a("a"),w2o=o("BertTokenizer"),A2o=o(" or "),$j=a("a"),L2o=o("BertTokenizerFast"),y2o=o(" (ViLT model)"),x2o=l(),al=a("li"),Tfe=a("strong"),$2o=o("visual_bert"),k2o=o(" \u2014 "),kj=a("a"),S2o=o("BertTokenizer"),R2o=o(" or "),Sj=a("a"),P2o=o("BertTokenizerFast"),B2o=o(" (VisualBERT model)"),I2o=l(),lp=a("li"),Mfe=a("strong"),N2o=o("wav2vec2"),q2o=o(" \u2014 "),Rj=a("a"),j2o=o("Wav2Vec2CTCTokenizer"),D2o=o(" (Wav2Vec2 model)"),G2o=l(),ip=a("li"),Efe=a("strong"),O2o=o("wav2vec2-conformer"),V2o=o(" \u2014 "),Pj=a("a"),X2o=o("Wav2Vec2CTCTokenizer"),z2o=o(" (Wav2Vec2-Conformer model)"),W2o=l(),dp=a("li"),Cfe=a("strong"),Q2o=o("wav2vec2_phoneme"),U2o=o(" \u2014 "),Bj=a("a"),H2o=o("Wav2Vec2PhonemeCTCTokenizer"),J2o=o(" (Wav2Vec2Phoneme model)"),Y2o=l(),nl=a("li"),wfe=a("strong"),K2o=o("xglm"),Z2o=o(" \u2014 "),Ij=a("a"),evo=o("XGLMTokenizer"),ovo=o(" or "),Nj=a("a"),rvo=o("XGLMTokenizerFast"),tvo=o(" (XGLM model)"),avo=l(),cp=a("li"),Afe=a("strong"),nvo=o("xlm"),svo=o(" \u2014 "),qj=a("a"),lvo=o("XLMTokenizer"),ivo=o(" (XLM model)"),dvo=l(),fp=a("li"),Lfe=a("strong"),cvo=o("xlm-prophetnet"),fvo=o(" \u2014 "),jj=a("a"),mvo=o("XLMProphetNetTokenizer"),gvo=o(" (XLM-ProphetNet model)"),hvo=l(),sl=a("li"),yfe=a("strong"),pvo=o("xlm-roberta"),_vo=o(" \u2014 "),Dj=a("a"),uvo=o("XLMRobertaTokenizer"),bvo=o(" or "),Gj=a("a"),vvo=o("XLMRobertaTokenizerFast"),Fvo=o(" (XLM-RoBERTa model)"),Tvo=l(),ll=a("li"),xfe=a("strong"),Mvo=o("xlm-roberta-xl"),Evo=o(" \u2014 "),Oj=a("a"),Cvo=o("RobertaTokenizer"),wvo=o(" or "),Vj=a("a"),Avo=o("RobertaTokenizerFast"),Lvo=o(" (XLM-RoBERTa-XL model)"),yvo=l(),il=a("li"),$fe=a("strong"),xvo=o("xlnet"),$vo=o(" \u2014 "),Xj=a("a"),kvo=o("XLNetTokenizer"),Svo=o(" or "),zj=a("a"),Rvo=o("XLNetTokenizerFast"),Pvo=o(" (XLNet model)"),Bvo=l(),dl=a("li"),kfe=a("strong"),Ivo=o("yoso"),Nvo=o(" \u2014 "),Wj=a("a"),qvo=o("AlbertTokenizer"),jvo=o(" or "),Qj=a("a"),Dvo=o("AlbertTokenizerFast"),Gvo=o(" (YOSO model)"),Ovo=l(),F(mp.$$.fragment),Vvo=l(),gp=a("div"),F(Xy.$$.fragment),Xvo=l(),Sfe=a("p"),zvo=o("Register a new tokenizer in this mapping."),OUe=l(),nd=a("h2"),hp=a("a"),Rfe=a("span"),F(zy.$$.fragment),Wvo=l(),Pfe=a("span"),Qvo=o("AutoFeatureExtractor"),VUe=l(),ko=a("div"),F(Wy.$$.fragment),Uvo=l(),Qy=a("p"),Hvo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Uj=a("a"),Jvo=o("AutoFeatureExtractor.from_pretrained()"),Yvo=o(" class method."),Kvo=l(),Uy=a("p"),Zvo=o("This class cannot be instantiated directly using "),Bfe=a("code"),e6o=o("__init__()"),o6o=o(" (throws an error)."),r6o=l(),He=a("div"),F(Hy.$$.fragment),t6o=l(),Ife=a("p"),a6o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),n6o=l(),Wa=a("p"),s6o=o("The feature extractor class to instantiate is selected based on the "),Nfe=a("code"),l6o=o("model_type"),i6o=o(` property of the config object
(either passed as an argument or loaded from `),qfe=a("code"),d6o=o("pretrained_model_name_or_path"),c6o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),jfe=a("code"),f6o=o("pretrained_model_name_or_path"),m6o=o(":"),g6o=l(),Q=a("ul"),pp=a("li"),Dfe=a("strong"),h6o=o("beit"),p6o=o(" \u2014 "),Hj=a("a"),_6o=o("BeitFeatureExtractor"),u6o=o(" (BEiT model)"),b6o=l(),_p=a("li"),Gfe=a("strong"),v6o=o("clip"),F6o=o(" \u2014 "),Jj=a("a"),T6o=o("CLIPFeatureExtractor"),M6o=o(" (CLIP model)"),E6o=l(),up=a("li"),Ofe=a("strong"),C6o=o("convnext"),w6o=o(" \u2014 "),Yj=a("a"),A6o=o("ConvNextFeatureExtractor"),L6o=o(" (ConvNeXT model)"),y6o=l(),bp=a("li"),Vfe=a("strong"),x6o=o("cvt"),$6o=o(" \u2014 "),Kj=a("a"),k6o=o("ConvNextFeatureExtractor"),S6o=o(" (CvT model)"),R6o=l(),vp=a("li"),Xfe=a("strong"),P6o=o("data2vec-audio"),B6o=o(" \u2014 "),Zj=a("a"),I6o=o("Wav2Vec2FeatureExtractor"),N6o=o(" (Data2VecAudio model)"),q6o=l(),Fp=a("li"),zfe=a("strong"),j6o=o("data2vec-vision"),D6o=o(" \u2014 "),eD=a("a"),G6o=o("BeitFeatureExtractor"),O6o=o(" (Data2VecVision model)"),V6o=l(),Tp=a("li"),Wfe=a("strong"),X6o=o("deit"),z6o=o(" \u2014 "),oD=a("a"),W6o=o("DeiTFeatureExtractor"),Q6o=o(" (DeiT model)"),U6o=l(),Mp=a("li"),Qfe=a("strong"),H6o=o("detr"),J6o=o(" \u2014 "),rD=a("a"),Y6o=o("DetrFeatureExtractor"),K6o=o(" (DETR model)"),Z6o=l(),Ep=a("li"),Ufe=a("strong"),eFo=o("donut"),oFo=o(" \u2014 "),tD=a("a"),rFo=o("DonutFeatureExtractor"),tFo=o(" (Donut model)"),aFo=l(),Cp=a("li"),Hfe=a("strong"),nFo=o("dpt"),sFo=o(" \u2014 "),aD=a("a"),lFo=o("DPTFeatureExtractor"),iFo=o(" (DPT model)"),dFo=l(),wp=a("li"),Jfe=a("strong"),cFo=o("flava"),fFo=o(" \u2014 "),nD=a("a"),mFo=o("FlavaFeatureExtractor"),gFo=o(" (FLAVA model)"),hFo=l(),Ap=a("li"),Yfe=a("strong"),pFo=o("glpn"),_Fo=o(" \u2014 "),sD=a("a"),uFo=o("GLPNFeatureExtractor"),bFo=o(" (GLPN model)"),vFo=l(),Lp=a("li"),Kfe=a("strong"),FFo=o("groupvit"),TFo=o(" \u2014 "),lD=a("a"),MFo=o("CLIPFeatureExtractor"),EFo=o(" (GroupViT model)"),CFo=l(),yp=a("li"),Zfe=a("strong"),wFo=o("hubert"),AFo=o(" \u2014 "),iD=a("a"),LFo=o("Wav2Vec2FeatureExtractor"),yFo=o(" (Hubert model)"),xFo=l(),xp=a("li"),eme=a("strong"),$Fo=o("imagegpt"),kFo=o(" \u2014 "),dD=a("a"),SFo=o("ImageGPTFeatureExtractor"),RFo=o(" (ImageGPT model)"),PFo=l(),$p=a("li"),ome=a("strong"),BFo=o("layoutlmv2"),IFo=o(" \u2014 "),cD=a("a"),NFo=o("LayoutLMv2FeatureExtractor"),qFo=o(" (LayoutLMv2 model)"),jFo=l(),kp=a("li"),rme=a("strong"),DFo=o("layoutlmv3"),GFo=o(" \u2014 "),fD=a("a"),OFo=o("LayoutLMv3FeatureExtractor"),VFo=o(" (LayoutLMv3 model)"),XFo=l(),Sp=a("li"),tme=a("strong"),zFo=o("levit"),WFo=o(" \u2014 "),mD=a("a"),QFo=o("LevitFeatureExtractor"),UFo=o(" (LeViT model)"),HFo=l(),Rp=a("li"),ame=a("strong"),JFo=o("maskformer"),YFo=o(" \u2014 "),gD=a("a"),KFo=o("MaskFormerFeatureExtractor"),ZFo=o(" (MaskFormer model)"),eTo=l(),Pp=a("li"),nme=a("strong"),oTo=o("mctct"),rTo=o(" \u2014 "),hD=a("a"),tTo=o("MCTCTFeatureExtractor"),aTo=o(" (M-CTC-T model)"),nTo=l(),Bp=a("li"),sme=a("strong"),sTo=o("mobilevit"),lTo=o(" \u2014 "),pD=a("a"),iTo=o("MobileViTFeatureExtractor"),dTo=o(" (MobileViT model)"),cTo=l(),Ip=a("li"),lme=a("strong"),fTo=o("owlvit"),mTo=o(" \u2014 "),_D=a("a"),gTo=o("OwlViTFeatureExtractor"),hTo=o(" (OWL-ViT model)"),pTo=l(),Np=a("li"),ime=a("strong"),_To=o("perceiver"),uTo=o(" \u2014 "),uD=a("a"),bTo=o("PerceiverFeatureExtractor"),vTo=o(" (Perceiver model)"),FTo=l(),qp=a("li"),dme=a("strong"),TTo=o("poolformer"),MTo=o(" \u2014 "),bD=a("a"),ETo=o("PoolFormerFeatureExtractor"),CTo=o(" (PoolFormer model)"),wTo=l(),jp=a("li"),cme=a("strong"),ATo=o("regnet"),LTo=o(" \u2014 "),vD=a("a"),yTo=o("ConvNextFeatureExtractor"),xTo=o(" (RegNet model)"),$To=l(),Dp=a("li"),fme=a("strong"),kTo=o("resnet"),STo=o(" \u2014 "),FD=a("a"),RTo=o("ConvNextFeatureExtractor"),PTo=o(" (ResNet model)"),BTo=l(),Gp=a("li"),mme=a("strong"),ITo=o("segformer"),NTo=o(" \u2014 "),TD=a("a"),qTo=o("SegformerFeatureExtractor"),jTo=o(" (SegFormer model)"),DTo=l(),Op=a("li"),gme=a("strong"),GTo=o("speech_to_text"),OTo=o(" \u2014 "),MD=a("a"),VTo=o("Speech2TextFeatureExtractor"),XTo=o(" (Speech2Text model)"),zTo=l(),Vp=a("li"),hme=a("strong"),WTo=o("swin"),QTo=o(" \u2014 "),ED=a("a"),UTo=o("ViTFeatureExtractor"),HTo=o(" (Swin Transformer model)"),JTo=l(),Xp=a("li"),pme=a("strong"),YTo=o("swinv2"),KTo=o(" \u2014 "),CD=a("a"),ZTo=o("ViTFeatureExtractor"),eMo=o(" (Swin Transformer V2 model)"),oMo=l(),zp=a("li"),_me=a("strong"),rMo=o("van"),tMo=o(" \u2014 "),wD=a("a"),aMo=o("ConvNextFeatureExtractor"),nMo=o(" (VAN model)"),sMo=l(),Wp=a("li"),ume=a("strong"),lMo=o("videomae"),iMo=o(" \u2014 "),AD=a("a"),dMo=o("ViTFeatureExtractor"),cMo=o(" (VideoMAE model)"),fMo=l(),Qp=a("li"),bme=a("strong"),mMo=o("vilt"),gMo=o(" \u2014 "),LD=a("a"),hMo=o("ViltFeatureExtractor"),pMo=o(" (ViLT model)"),_Mo=l(),Up=a("li"),vme=a("strong"),uMo=o("vit"),bMo=o(" \u2014 "),yD=a("a"),vMo=o("ViTFeatureExtractor"),FMo=o(" (ViT model)"),TMo=l(),Hp=a("li"),Fme=a("strong"),MMo=o("vit_mae"),EMo=o(" \u2014 "),xD=a("a"),CMo=o("ViTFeatureExtractor"),wMo=o(" (ViTMAE model)"),AMo=l(),Jp=a("li"),Tme=a("strong"),LMo=o("wav2vec2"),yMo=o(" \u2014 "),$D=a("a"),xMo=o("Wav2Vec2FeatureExtractor"),$Mo=o(" (Wav2Vec2 model)"),kMo=l(),Yp=a("li"),Mme=a("strong"),SMo=o("wav2vec2-conformer"),RMo=o(" \u2014 "),kD=a("a"),PMo=o("Wav2Vec2FeatureExtractor"),BMo=o(" (Wav2Vec2-Conformer model)"),IMo=l(),Kp=a("li"),Eme=a("strong"),NMo=o("yolos"),qMo=o(" \u2014 "),SD=a("a"),jMo=o("YolosFeatureExtractor"),DMo=o(" (YOLOS model)"),GMo=l(),F(Zp.$$.fragment),OMo=l(),F(e_.$$.fragment),VMo=l(),o_=a("div"),F(Jy.$$.fragment),XMo=l(),Cme=a("p"),zMo=o("Register a new feature extractor for this class."),XUe=l(),sd=a("h2"),r_=a("a"),wme=a("span"),F(Yy.$$.fragment),WMo=l(),Ame=a("span"),QMo=o("AutoProcessor"),zUe=l(),So=a("div"),F(Ky.$$.fragment),UMo=l(),Zy=a("p"),HMo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),RD=a("a"),JMo=o("AutoProcessor.from_pretrained()"),YMo=o(" class method."),KMo=l(),e9=a("p"),ZMo=o("This class cannot be instantiated directly using "),Lme=a("code"),eEo=o("__init__()"),oEo=o(" (throws an error)."),rEo=l(),Je=a("div"),F(o9.$$.fragment),tEo=l(),yme=a("p"),aEo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),nEo=l(),ld=a("p"),sEo=o("The processor class to instantiate is selected based on the "),xme=a("code"),lEo=o("model_type"),iEo=o(` property of the config object (either
passed as an argument or loaded from `),$me=a("code"),dEo=o("pretrained_model_name_or_path"),cEo=o(" if possible):"),fEo=l(),ie=a("ul"),t_=a("li"),kme=a("strong"),mEo=o("clip"),gEo=o(" \u2014 "),PD=a("a"),hEo=o("CLIPProcessor"),pEo=o(" (CLIP model)"),_Eo=l(),a_=a("li"),Sme=a("strong"),uEo=o("donut"),bEo=o(" \u2014 "),BD=a("a"),vEo=o("DonutProcessor"),FEo=o(" (Donut model)"),TEo=l(),n_=a("li"),Rme=a("strong"),MEo=o("flava"),EEo=o(" \u2014 "),ID=a("a"),CEo=o("FlavaProcessor"),wEo=o(" (FLAVA model)"),AEo=l(),s_=a("li"),Pme=a("strong"),LEo=o("groupvit"),yEo=o(" \u2014 "),ND=a("a"),xEo=o("CLIPProcessor"),$Eo=o(" (GroupViT model)"),kEo=l(),l_=a("li"),Bme=a("strong"),SEo=o("layoutlmv2"),REo=o(" \u2014 "),qD=a("a"),PEo=o("LayoutLMv2Processor"),BEo=o(" (LayoutLMv2 model)"),IEo=l(),i_=a("li"),Ime=a("strong"),NEo=o("layoutlmv3"),qEo=o(" \u2014 "),jD=a("a"),jEo=o("LayoutLMv3Processor"),DEo=o(" (LayoutLMv3 model)"),GEo=l(),d_=a("li"),Nme=a("strong"),OEo=o("layoutxlm"),VEo=o(" \u2014 "),DD=a("a"),XEo=o("LayoutXLMProcessor"),zEo=o(" (LayoutXLM model)"),WEo=l(),c_=a("li"),qme=a("strong"),QEo=o("owlvit"),UEo=o(" \u2014 "),GD=a("a"),HEo=o("OwlViTProcessor"),JEo=o(" (OWL-ViT model)"),YEo=l(),f_=a("li"),jme=a("strong"),KEo=o("sew"),ZEo=o(" \u2014 "),OD=a("a"),e4o=o("Wav2Vec2Processor"),o4o=o(" (SEW model)"),r4o=l(),m_=a("li"),Dme=a("strong"),t4o=o("sew-d"),a4o=o(" \u2014 "),VD=a("a"),n4o=o("Wav2Vec2Processor"),s4o=o(" (SEW-D model)"),l4o=l(),g_=a("li"),Gme=a("strong"),i4o=o("speech_to_text"),d4o=o(" \u2014 "),XD=a("a"),c4o=o("Speech2TextProcessor"),f4o=o(" (Speech2Text model)"),m4o=l(),h_=a("li"),Ome=a("strong"),g4o=o("speech_to_text_2"),h4o=o(" \u2014 "),zD=a("a"),p4o=o("Speech2Text2Processor"),_4o=o(" (Speech2Text2 model)"),u4o=l(),p_=a("li"),Vme=a("strong"),b4o=o("trocr"),v4o=o(" \u2014 "),WD=a("a"),F4o=o("TrOCRProcessor"),T4o=o(" (TrOCR model)"),M4o=l(),__=a("li"),Xme=a("strong"),E4o=o("unispeech"),C4o=o(" \u2014 "),QD=a("a"),w4o=o("Wav2Vec2Processor"),A4o=o(" (UniSpeech model)"),L4o=l(),u_=a("li"),zme=a("strong"),y4o=o("unispeech-sat"),x4o=o(" \u2014 "),UD=a("a"),$4o=o("Wav2Vec2Processor"),k4o=o(" (UniSpeechSat model)"),S4o=l(),b_=a("li"),Wme=a("strong"),R4o=o("vilt"),P4o=o(" \u2014 "),HD=a("a"),B4o=o("ViltProcessor"),I4o=o(" (ViLT model)"),N4o=l(),v_=a("li"),Qme=a("strong"),q4o=o("vision-text-dual-encoder"),j4o=o(" \u2014 "),JD=a("a"),D4o=o("VisionTextDualEncoderProcessor"),G4o=o(" (VisionTextDualEncoder model)"),O4o=l(),F_=a("li"),Ume=a("strong"),V4o=o("wav2vec2"),X4o=o(" \u2014 "),YD=a("a"),z4o=o("Wav2Vec2Processor"),W4o=o(" (Wav2Vec2 model)"),Q4o=l(),T_=a("li"),Hme=a("strong"),U4o=o("wav2vec2-conformer"),H4o=o(" \u2014 "),KD=a("a"),J4o=o("Wav2Vec2Processor"),Y4o=o(" (Wav2Vec2-Conformer model)"),K4o=l(),M_=a("li"),Jme=a("strong"),Z4o=o("wavlm"),eCo=o(" \u2014 "),ZD=a("a"),oCo=o("Wav2Vec2Processor"),rCo=o(" (WavLM model)"),tCo=l(),F(E_.$$.fragment),aCo=l(),F(C_.$$.fragment),nCo=l(),w_=a("div"),F(r9.$$.fragment),sCo=l(),Yme=a("p"),lCo=o("Register a new processor for this class."),WUe=l(),id=a("h2"),A_=a("a"),Kme=a("span"),F(t9.$$.fragment),iCo=l(),Zme=a("span"),dCo=o("AutoModel"),QUe=l(),Ro=a("div"),F(a9.$$.fragment),cCo=l(),dd=a("p"),fCo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eG=a("a"),mCo=o("from_pretrained()"),gCo=o(" class method or the "),oG=a("a"),hCo=o("from_config()"),pCo=o(` class
method.`),_Co=l(),n9=a("p"),uCo=o("This class cannot be instantiated directly using "),ege=a("code"),bCo=o("__init__()"),vCo=o(" (throws an error)."),FCo=l(),ht=a("div"),F(s9.$$.fragment),TCo=l(),oge=a("p"),MCo=o("Instantiates one of the base model classes of the library from a configuration."),ECo=l(),cd=a("p"),CCo=o(`Note:
Loading a model from its configuration file does `),rge=a("strong"),wCo=o("not"),ACo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rG=a("a"),LCo=o("from_pretrained()"),yCo=o(" to load the model weights."),xCo=l(),F(L_.$$.fragment),$Co=l(),Ye=a("div"),F(l9.$$.fragment),kCo=l(),tge=a("p"),SCo=o("Instantiate one of the base model classes of the library from a pretrained model."),RCo=l(),Qa=a("p"),PCo=o("The model class to instantiate is selected based on the "),age=a("code"),BCo=o("model_type"),ICo=o(` property of the config object (either
passed as an argument or loaded from `),nge=a("code"),NCo=o("pretrained_model_name_or_path"),qCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sge=a("code"),jCo=o("pretrained_model_name_or_path"),DCo=o(":"),GCo=l(),y=a("ul"),y_=a("li"),lge=a("strong"),OCo=o("albert"),VCo=o(" \u2014 "),tG=a("a"),XCo=o("AlbertModel"),zCo=o(" (ALBERT model)"),WCo=l(),x_=a("li"),ige=a("strong"),QCo=o("bart"),UCo=o(" \u2014 "),aG=a("a"),HCo=o("BartModel"),JCo=o(" (BART model)"),YCo=l(),$_=a("li"),dge=a("strong"),KCo=o("beit"),ZCo=o(" \u2014 "),nG=a("a"),e3o=o("BeitModel"),o3o=o(" (BEiT model)"),r3o=l(),k_=a("li"),cge=a("strong"),t3o=o("bert"),a3o=o(" \u2014 "),sG=a("a"),n3o=o("BertModel"),s3o=o(" (BERT model)"),l3o=l(),S_=a("li"),fge=a("strong"),i3o=o("bert-generation"),d3o=o(" \u2014 "),lG=a("a"),c3o=o("BertGenerationEncoder"),f3o=o(" (Bert Generation model)"),m3o=l(),R_=a("li"),mge=a("strong"),g3o=o("big_bird"),h3o=o(" \u2014 "),iG=a("a"),p3o=o("BigBirdModel"),_3o=o(" (BigBird model)"),u3o=l(),P_=a("li"),gge=a("strong"),b3o=o("bigbird_pegasus"),v3o=o(" \u2014 "),dG=a("a"),F3o=o("BigBirdPegasusModel"),T3o=o(" (BigBird-Pegasus model)"),M3o=l(),B_=a("li"),hge=a("strong"),E3o=o("blenderbot"),C3o=o(" \u2014 "),cG=a("a"),w3o=o("BlenderbotModel"),A3o=o(" (Blenderbot model)"),L3o=l(),I_=a("li"),pge=a("strong"),y3o=o("blenderbot-small"),x3o=o(" \u2014 "),fG=a("a"),$3o=o("BlenderbotSmallModel"),k3o=o(" (BlenderbotSmall model)"),S3o=l(),N_=a("li"),_ge=a("strong"),R3o=o("bloom"),P3o=o(" \u2014 "),mG=a("a"),B3o=o("BloomModel"),I3o=o(" (BLOOM model)"),N3o=l(),q_=a("li"),uge=a("strong"),q3o=o("camembert"),j3o=o(" \u2014 "),gG=a("a"),D3o=o("CamembertModel"),G3o=o(" (CamemBERT model)"),O3o=l(),j_=a("li"),bge=a("strong"),V3o=o("canine"),X3o=o(" \u2014 "),hG=a("a"),z3o=o("CanineModel"),W3o=o(" (CANINE model)"),Q3o=l(),D_=a("li"),vge=a("strong"),U3o=o("clip"),H3o=o(" \u2014 "),pG=a("a"),J3o=o("CLIPModel"),Y3o=o(" (CLIP model)"),K3o=l(),G_=a("li"),Fge=a("strong"),Z3o=o("codegen"),e5o=o(" \u2014 "),_G=a("a"),o5o=o("CodeGenModel"),r5o=o(" (CodeGen model)"),t5o=l(),O_=a("li"),Tge=a("strong"),a5o=o("convbert"),n5o=o(" \u2014 "),uG=a("a"),s5o=o("ConvBertModel"),l5o=o(" (ConvBERT model)"),i5o=l(),V_=a("li"),Mge=a("strong"),d5o=o("convnext"),c5o=o(" \u2014 "),bG=a("a"),f5o=o("ConvNextModel"),m5o=o(" (ConvNeXT model)"),g5o=l(),X_=a("li"),Ege=a("strong"),h5o=o("ctrl"),p5o=o(" \u2014 "),vG=a("a"),_5o=o("CTRLModel"),u5o=o(" (CTRL model)"),b5o=l(),z_=a("li"),Cge=a("strong"),v5o=o("cvt"),F5o=o(" \u2014 "),FG=a("a"),T5o=o("CvtModel"),M5o=o(" (CvT model)"),E5o=l(),W_=a("li"),wge=a("strong"),C5o=o("data2vec-audio"),w5o=o(" \u2014 "),TG=a("a"),A5o=o("Data2VecAudioModel"),L5o=o(" (Data2VecAudio model)"),y5o=l(),Q_=a("li"),Age=a("strong"),x5o=o("data2vec-text"),$5o=o(" \u2014 "),MG=a("a"),k5o=o("Data2VecTextModel"),S5o=o(" (Data2VecText model)"),R5o=l(),U_=a("li"),Lge=a("strong"),P5o=o("data2vec-vision"),B5o=o(" \u2014 "),EG=a("a"),I5o=o("Data2VecVisionModel"),N5o=o(" (Data2VecVision model)"),q5o=l(),H_=a("li"),yge=a("strong"),j5o=o("deberta"),D5o=o(" \u2014 "),CG=a("a"),G5o=o("DebertaModel"),O5o=o(" (DeBERTa model)"),V5o=l(),J_=a("li"),xge=a("strong"),X5o=o("deberta-v2"),z5o=o(" \u2014 "),wG=a("a"),W5o=o("DebertaV2Model"),Q5o=o(" (DeBERTa-v2 model)"),U5o=l(),Y_=a("li"),$ge=a("strong"),H5o=o("decision_transformer"),J5o=o(" \u2014 "),AG=a("a"),Y5o=o("DecisionTransformerModel"),K5o=o(" (Decision Transformer model)"),Z5o=l(),K_=a("li"),kge=a("strong"),e0o=o("deit"),o0o=o(" \u2014 "),LG=a("a"),r0o=o("DeiTModel"),t0o=o(" (DeiT model)"),a0o=l(),Z_=a("li"),Sge=a("strong"),n0o=o("detr"),s0o=o(" \u2014 "),yG=a("a"),l0o=o("DetrModel"),i0o=o(" (DETR model)"),d0o=l(),eu=a("li"),Rge=a("strong"),c0o=o("distilbert"),f0o=o(" \u2014 "),xG=a("a"),m0o=o("DistilBertModel"),g0o=o(" (DistilBERT model)"),h0o=l(),ou=a("li"),Pge=a("strong"),p0o=o("donut-swin"),_0o=o(" \u2014 "),$G=a("a"),u0o=o("DonutSwinModel"),b0o=o(" (DonutSwin model)"),v0o=l(),ru=a("li"),Bge=a("strong"),F0o=o("dpr"),T0o=o(" \u2014 "),kG=a("a"),M0o=o("DPRQuestionEncoder"),E0o=o(" (DPR model)"),C0o=l(),tu=a("li"),Ige=a("strong"),w0o=o("dpt"),A0o=o(" \u2014 "),SG=a("a"),L0o=o("DPTModel"),y0o=o(" (DPT model)"),x0o=l(),au=a("li"),Nge=a("strong"),$0o=o("electra"),k0o=o(" \u2014 "),RG=a("a"),S0o=o("ElectraModel"),R0o=o(" (ELECTRA model)"),P0o=l(),nu=a("li"),qge=a("strong"),B0o=o("flaubert"),I0o=o(" \u2014 "),PG=a("a"),N0o=o("FlaubertModel"),q0o=o(" (FlauBERT model)"),j0o=l(),su=a("li"),jge=a("strong"),D0o=o("flava"),G0o=o(" \u2014 "),BG=a("a"),O0o=o("FlavaModel"),V0o=o(" (FLAVA model)"),X0o=l(),lu=a("li"),Dge=a("strong"),z0o=o("fnet"),W0o=o(" \u2014 "),IG=a("a"),Q0o=o("FNetModel"),U0o=o(" (FNet model)"),H0o=l(),iu=a("li"),Gge=a("strong"),J0o=o("fsmt"),Y0o=o(" \u2014 "),NG=a("a"),K0o=o("FSMTModel"),Z0o=o(" (FairSeq Machine-Translation model)"),ewo=l(),cl=a("li"),Oge=a("strong"),owo=o("funnel"),rwo=o(" \u2014 "),qG=a("a"),two=o("FunnelModel"),awo=o(" or "),jG=a("a"),nwo=o("FunnelBaseModel"),swo=o(" (Funnel Transformer model)"),lwo=l(),du=a("li"),Vge=a("strong"),iwo=o("glpn"),dwo=o(" \u2014 "),DG=a("a"),cwo=o("GLPNModel"),fwo=o(" (GLPN model)"),mwo=l(),cu=a("li"),Xge=a("strong"),gwo=o("gpt2"),hwo=o(" \u2014 "),GG=a("a"),pwo=o("GPT2Model"),_wo=o(" (OpenAI GPT-2 model)"),uwo=l(),fu=a("li"),zge=a("strong"),bwo=o("gpt_neo"),vwo=o(" \u2014 "),OG=a("a"),Fwo=o("GPTNeoModel"),Two=o(" (GPT Neo model)"),Mwo=l(),mu=a("li"),Wge=a("strong"),Ewo=o("gpt_neox"),Cwo=o(" \u2014 "),VG=a("a"),wwo=o("GPTNeoXModel"),Awo=o(" (GPT NeoX model)"),Lwo=l(),gu=a("li"),Qge=a("strong"),ywo=o("gptj"),xwo=o(" \u2014 "),XG=a("a"),$wo=o("GPTJModel"),kwo=o(" (GPT-J model)"),Swo=l(),hu=a("li"),Uge=a("strong"),Rwo=o("groupvit"),Pwo=o(" \u2014 "),zG=a("a"),Bwo=o("GroupViTModel"),Iwo=o(" (GroupViT model)"),Nwo=l(),pu=a("li"),Hge=a("strong"),qwo=o("hubert"),jwo=o(" \u2014 "),WG=a("a"),Dwo=o("HubertModel"),Gwo=o(" (Hubert model)"),Owo=l(),_u=a("li"),Jge=a("strong"),Vwo=o("ibert"),Xwo=o(" \u2014 "),QG=a("a"),zwo=o("IBertModel"),Wwo=o(" (I-BERT model)"),Qwo=l(),uu=a("li"),Yge=a("strong"),Uwo=o("imagegpt"),Hwo=o(" \u2014 "),UG=a("a"),Jwo=o("ImageGPTModel"),Ywo=o(" (ImageGPT model)"),Kwo=l(),bu=a("li"),Kge=a("strong"),Zwo=o("layoutlm"),eAo=o(" \u2014 "),HG=a("a"),oAo=o("LayoutLMModel"),rAo=o(" (LayoutLM model)"),tAo=l(),vu=a("li"),Zge=a("strong"),aAo=o("layoutlmv2"),nAo=o(" \u2014 "),JG=a("a"),sAo=o("LayoutLMv2Model"),lAo=o(" (LayoutLMv2 model)"),iAo=l(),Fu=a("li"),ehe=a("strong"),dAo=o("layoutlmv3"),cAo=o(" \u2014 "),YG=a("a"),fAo=o("LayoutLMv3Model"),mAo=o(" (LayoutLMv3 model)"),gAo=l(),Tu=a("li"),ohe=a("strong"),hAo=o("led"),pAo=o(" \u2014 "),KG=a("a"),_Ao=o("LEDModel"),uAo=o(" (LED model)"),bAo=l(),Mu=a("li"),rhe=a("strong"),vAo=o("levit"),FAo=o(" \u2014 "),ZG=a("a"),TAo=o("LevitModel"),MAo=o(" (LeViT model)"),EAo=l(),Eu=a("li"),the=a("strong"),CAo=o("longformer"),wAo=o(" \u2014 "),eO=a("a"),AAo=o("LongformerModel"),LAo=o(" (Longformer model)"),yAo=l(),Cu=a("li"),ahe=a("strong"),xAo=o("longt5"),$Ao=o(" \u2014 "),oO=a("a"),kAo=o("LongT5Model"),SAo=o(" (LongT5 model)"),RAo=l(),wu=a("li"),nhe=a("strong"),PAo=o("luke"),BAo=o(" \u2014 "),rO=a("a"),IAo=o("LukeModel"),NAo=o(" (LUKE model)"),qAo=l(),Au=a("li"),she=a("strong"),jAo=o("lxmert"),DAo=o(" \u2014 "),tO=a("a"),GAo=o("LxmertModel"),OAo=o(" (LXMERT model)"),VAo=l(),Lu=a("li"),lhe=a("strong"),XAo=o("m2m_100"),zAo=o(" \u2014 "),aO=a("a"),WAo=o("M2M100Model"),QAo=o(" (M2M100 model)"),UAo=l(),yu=a("li"),ihe=a("strong"),HAo=o("marian"),JAo=o(" \u2014 "),nO=a("a"),YAo=o("MarianModel"),KAo=o(" (Marian model)"),ZAo=l(),xu=a("li"),dhe=a("strong"),e7o=o("maskformer"),o7o=o(" \u2014 "),sO=a("a"),r7o=o("MaskFormerModel"),t7o=o(" (MaskFormer model)"),a7o=l(),$u=a("li"),che=a("strong"),n7o=o("mbart"),s7o=o(" \u2014 "),lO=a("a"),l7o=o("MBartModel"),i7o=o(" (mBART model)"),d7o=l(),ku=a("li"),fhe=a("strong"),c7o=o("mctct"),f7o=o(" \u2014 "),iO=a("a"),m7o=o("MCTCTModel"),g7o=o(" (M-CTC-T model)"),h7o=l(),Su=a("li"),mhe=a("strong"),p7o=o("megatron-bert"),_7o=o(" \u2014 "),dO=a("a"),u7o=o("MegatronBertModel"),b7o=o(" (Megatron-BERT model)"),v7o=l(),Ru=a("li"),ghe=a("strong"),F7o=o("mobilebert"),T7o=o(" \u2014 "),cO=a("a"),M7o=o("MobileBertModel"),E7o=o(" (MobileBERT model)"),C7o=l(),Pu=a("li"),hhe=a("strong"),w7o=o("mobilevit"),A7o=o(" \u2014 "),fO=a("a"),L7o=o("MobileViTModel"),y7o=o(" (MobileViT model)"),x7o=l(),Bu=a("li"),phe=a("strong"),$7o=o("mpnet"),k7o=o(" \u2014 "),mO=a("a"),S7o=o("MPNetModel"),R7o=o(" (MPNet model)"),P7o=l(),Iu=a("li"),_he=a("strong"),B7o=o("mt5"),I7o=o(" \u2014 "),gO=a("a"),N7o=o("MT5Model"),q7o=o(" (MT5 model)"),j7o=l(),Nu=a("li"),uhe=a("strong"),D7o=o("mvp"),G7o=o(" \u2014 "),hO=a("a"),O7o=o("MvpModel"),V7o=o(" (MVP model)"),X7o=l(),qu=a("li"),bhe=a("strong"),z7o=o("nezha"),W7o=o(" \u2014 "),pO=a("a"),Q7o=o("NezhaModel"),U7o=o(" (Nezha model)"),H7o=l(),ju=a("li"),vhe=a("strong"),J7o=o("nllb"),Y7o=o(" \u2014 "),_O=a("a"),K7o=o("M2M100Model"),Z7o=o(" (NLLB model)"),eLo=l(),Du=a("li"),Fhe=a("strong"),oLo=o("nystromformer"),rLo=o(" \u2014 "),uO=a("a"),tLo=o("NystromformerModel"),aLo=o(" (Nystr\xF6mformer model)"),nLo=l(),Gu=a("li"),The=a("strong"),sLo=o("openai-gpt"),lLo=o(" \u2014 "),bO=a("a"),iLo=o("OpenAIGPTModel"),dLo=o(" (OpenAI GPT model)"),cLo=l(),Ou=a("li"),Mhe=a("strong"),fLo=o("opt"),mLo=o(" \u2014 "),vO=a("a"),gLo=o("OPTModel"),hLo=o(" (OPT model)"),pLo=l(),Vu=a("li"),Ehe=a("strong"),_Lo=o("owlvit"),uLo=o(" \u2014 "),FO=a("a"),bLo=o("OwlViTModel"),vLo=o(" (OWL-ViT model)"),FLo=l(),Xu=a("li"),Che=a("strong"),TLo=o("pegasus"),MLo=o(" \u2014 "),TO=a("a"),ELo=o("PegasusModel"),CLo=o(" (Pegasus model)"),wLo=l(),zu=a("li"),whe=a("strong"),ALo=o("perceiver"),LLo=o(" \u2014 "),MO=a("a"),yLo=o("PerceiverModel"),xLo=o(" (Perceiver model)"),$Lo=l(),Wu=a("li"),Ahe=a("strong"),kLo=o("plbart"),SLo=o(" \u2014 "),EO=a("a"),RLo=o("PLBartModel"),PLo=o(" (PLBart model)"),BLo=l(),Qu=a("li"),Lhe=a("strong"),ILo=o("poolformer"),NLo=o(" \u2014 "),CO=a("a"),qLo=o("PoolFormerModel"),jLo=o(" (PoolFormer model)"),DLo=l(),Uu=a("li"),yhe=a("strong"),GLo=o("prophetnet"),OLo=o(" \u2014 "),wO=a("a"),VLo=o("ProphetNetModel"),XLo=o(" (ProphetNet model)"),zLo=l(),Hu=a("li"),xhe=a("strong"),WLo=o("qdqbert"),QLo=o(" \u2014 "),AO=a("a"),ULo=o("QDQBertModel"),HLo=o(" (QDQBert model)"),JLo=l(),Ju=a("li"),$he=a("strong"),YLo=o("reformer"),KLo=o(" \u2014 "),LO=a("a"),ZLo=o("ReformerModel"),eyo=o(" (Reformer model)"),oyo=l(),Yu=a("li"),khe=a("strong"),ryo=o("regnet"),tyo=o(" \u2014 "),yO=a("a"),ayo=o("RegNetModel"),nyo=o(" (RegNet model)"),syo=l(),Ku=a("li"),She=a("strong"),lyo=o("rembert"),iyo=o(" \u2014 "),xO=a("a"),dyo=o("RemBertModel"),cyo=o(" (RemBERT model)"),fyo=l(),Zu=a("li"),Rhe=a("strong"),myo=o("resnet"),gyo=o(" \u2014 "),$O=a("a"),hyo=o("ResNetModel"),pyo=o(" (ResNet model)"),_yo=l(),e1=a("li"),Phe=a("strong"),uyo=o("retribert"),byo=o(" \u2014 "),kO=a("a"),vyo=o("RetriBertModel"),Fyo=o(" (RetriBERT model)"),Tyo=l(),o1=a("li"),Bhe=a("strong"),Myo=o("roberta"),Eyo=o(" \u2014 "),SO=a("a"),Cyo=o("RobertaModel"),wyo=o(" (RoBERTa model)"),Ayo=l(),r1=a("li"),Ihe=a("strong"),Lyo=o("roformer"),yyo=o(" \u2014 "),RO=a("a"),xyo=o("RoFormerModel"),$yo=o(" (RoFormer model)"),kyo=l(),t1=a("li"),Nhe=a("strong"),Syo=o("segformer"),Ryo=o(" \u2014 "),PO=a("a"),Pyo=o("SegformerModel"),Byo=o(" (SegFormer model)"),Iyo=l(),a1=a("li"),qhe=a("strong"),Nyo=o("sew"),qyo=o(" \u2014 "),BO=a("a"),jyo=o("SEWModel"),Dyo=o(" (SEW model)"),Gyo=l(),n1=a("li"),jhe=a("strong"),Oyo=o("sew-d"),Vyo=o(" \u2014 "),IO=a("a"),Xyo=o("SEWDModel"),zyo=o(" (SEW-D model)"),Wyo=l(),s1=a("li"),Dhe=a("strong"),Qyo=o("speech_to_text"),Uyo=o(" \u2014 "),NO=a("a"),Hyo=o("Speech2TextModel"),Jyo=o(" (Speech2Text model)"),Yyo=l(),l1=a("li"),Ghe=a("strong"),Kyo=o("splinter"),Zyo=o(" \u2014 "),qO=a("a"),e9o=o("SplinterModel"),o9o=o(" (Splinter model)"),r9o=l(),i1=a("li"),Ohe=a("strong"),t9o=o("squeezebert"),a9o=o(" \u2014 "),jO=a("a"),n9o=o("SqueezeBertModel"),s9o=o(" (SqueezeBERT model)"),l9o=l(),d1=a("li"),Vhe=a("strong"),i9o=o("swin"),d9o=o(" \u2014 "),DO=a("a"),c9o=o("SwinModel"),f9o=o(" (Swin Transformer model)"),m9o=l(),c1=a("li"),Xhe=a("strong"),g9o=o("swinv2"),h9o=o(" \u2014 "),GO=a("a"),p9o=o("Swinv2Model"),_9o=o(" (Swin Transformer V2 model)"),u9o=l(),f1=a("li"),zhe=a("strong"),b9o=o("t5"),v9o=o(" \u2014 "),OO=a("a"),F9o=o("T5Model"),T9o=o(" (T5 model)"),M9o=l(),m1=a("li"),Whe=a("strong"),E9o=o("tapas"),C9o=o(" \u2014 "),VO=a("a"),w9o=o("TapasModel"),A9o=o(" (TAPAS model)"),L9o=l(),g1=a("li"),Qhe=a("strong"),y9o=o("trajectory_transformer"),x9o=o(" \u2014 "),XO=a("a"),$9o=o("TrajectoryTransformerModel"),k9o=o(" (Trajectory Transformer model)"),S9o=l(),h1=a("li"),Uhe=a("strong"),R9o=o("transfo-xl"),P9o=o(" \u2014 "),zO=a("a"),B9o=o("TransfoXLModel"),I9o=o(" (Transformer-XL model)"),N9o=l(),p1=a("li"),Hhe=a("strong"),q9o=o("unispeech"),j9o=o(" \u2014 "),WO=a("a"),D9o=o("UniSpeechModel"),G9o=o(" (UniSpeech model)"),O9o=l(),_1=a("li"),Jhe=a("strong"),V9o=o("unispeech-sat"),X9o=o(" \u2014 "),QO=a("a"),z9o=o("UniSpeechSatModel"),W9o=o(" (UniSpeechSat model)"),Q9o=l(),u1=a("li"),Yhe=a("strong"),U9o=o("van"),H9o=o(" \u2014 "),UO=a("a"),J9o=o("VanModel"),Y9o=o(" (VAN model)"),K9o=l(),b1=a("li"),Khe=a("strong"),Z9o=o("videomae"),exo=o(" \u2014 "),HO=a("a"),oxo=o("VideoMAEModel"),rxo=o(" (VideoMAE model)"),txo=l(),v1=a("li"),Zhe=a("strong"),axo=o("vilt"),nxo=o(" \u2014 "),JO=a("a"),sxo=o("ViltModel"),lxo=o(" (ViLT model)"),ixo=l(),F1=a("li"),epe=a("strong"),dxo=o("vision-text-dual-encoder"),cxo=o(" \u2014 "),YO=a("a"),fxo=o("VisionTextDualEncoderModel"),mxo=o(" (VisionTextDualEncoder model)"),gxo=l(),T1=a("li"),ope=a("strong"),hxo=o("visual_bert"),pxo=o(" \u2014 "),KO=a("a"),_xo=o("VisualBertModel"),uxo=o(" (VisualBERT model)"),bxo=l(),M1=a("li"),rpe=a("strong"),vxo=o("vit"),Fxo=o(" \u2014 "),ZO=a("a"),Txo=o("ViTModel"),Mxo=o(" (ViT model)"),Exo=l(),E1=a("li"),tpe=a("strong"),Cxo=o("vit_mae"),wxo=o(" \u2014 "),eV=a("a"),Axo=o("ViTMAEModel"),Lxo=o(" (ViTMAE model)"),yxo=l(),C1=a("li"),ape=a("strong"),xxo=o("wav2vec2"),$xo=o(" \u2014 "),oV=a("a"),kxo=o("Wav2Vec2Model"),Sxo=o(" (Wav2Vec2 model)"),Rxo=l(),w1=a("li"),npe=a("strong"),Pxo=o("wav2vec2-conformer"),Bxo=o(" \u2014 "),rV=a("a"),Ixo=o("Wav2Vec2ConformerModel"),Nxo=o(" (Wav2Vec2-Conformer model)"),qxo=l(),A1=a("li"),spe=a("strong"),jxo=o("wavlm"),Dxo=o(" \u2014 "),tV=a("a"),Gxo=o("WavLMModel"),Oxo=o(" (WavLM model)"),Vxo=l(),L1=a("li"),lpe=a("strong"),Xxo=o("xglm"),zxo=o(" \u2014 "),aV=a("a"),Wxo=o("XGLMModel"),Qxo=o(" (XGLM model)"),Uxo=l(),y1=a("li"),ipe=a("strong"),Hxo=o("xlm"),Jxo=o(" \u2014 "),nV=a("a"),Yxo=o("XLMModel"),Kxo=o(" (XLM model)"),Zxo=l(),x1=a("li"),dpe=a("strong"),e$o=o("xlm-prophetnet"),o$o=o(" \u2014 "),sV=a("a"),r$o=o("XLMProphetNetModel"),t$o=o(" (XLM-ProphetNet model)"),a$o=l(),$1=a("li"),cpe=a("strong"),n$o=o("xlm-roberta"),s$o=o(" \u2014 "),lV=a("a"),l$o=o("XLMRobertaModel"),i$o=o(" (XLM-RoBERTa model)"),d$o=l(),k1=a("li"),fpe=a("strong"),c$o=o("xlm-roberta-xl"),f$o=o(" \u2014 "),iV=a("a"),m$o=o("XLMRobertaXLModel"),g$o=o(" (XLM-RoBERTa-XL model)"),h$o=l(),S1=a("li"),mpe=a("strong"),p$o=o("xlnet"),_$o=o(" \u2014 "),dV=a("a"),u$o=o("XLNetModel"),b$o=o(" (XLNet model)"),v$o=l(),R1=a("li"),gpe=a("strong"),F$o=o("yolos"),T$o=o(" \u2014 "),cV=a("a"),M$o=o("YolosModel"),E$o=o(" (YOLOS model)"),C$o=l(),P1=a("li"),hpe=a("strong"),w$o=o("yoso"),A$o=o(" \u2014 "),fV=a("a"),L$o=o("YosoModel"),y$o=o(" (YOSO model)"),x$o=l(),B1=a("p"),$$o=o("The model is set in evaluation mode by default using "),ppe=a("code"),k$o=o("model.eval()"),S$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_pe=a("code"),R$o=o("model.train()"),P$o=l(),F(I1.$$.fragment),UUe=l(),fd=a("h2"),N1=a("a"),upe=a("span"),F(i9.$$.fragment),B$o=l(),bpe=a("span"),I$o=o("AutoModelForPreTraining"),HUe=l(),Po=a("div"),F(d9.$$.fragment),N$o=l(),md=a("p"),q$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mV=a("a"),j$o=o("from_pretrained()"),D$o=o(" class method or the "),gV=a("a"),G$o=o("from_config()"),O$o=o(` class
method.`),V$o=l(),c9=a("p"),X$o=o("This class cannot be instantiated directly using "),vpe=a("code"),z$o=o("__init__()"),W$o=o(" (throws an error)."),Q$o=l(),pt=a("div"),F(f9.$$.fragment),U$o=l(),Fpe=a("p"),H$o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),J$o=l(),gd=a("p"),Y$o=o(`Note:
Loading a model from its configuration file does `),Tpe=a("strong"),K$o=o("not"),Z$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=a("a"),eko=o("from_pretrained()"),oko=o(" to load the model weights."),rko=l(),F(q1.$$.fragment),tko=l(),Ke=a("div"),F(m9.$$.fragment),ako=l(),Mpe=a("p"),nko=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sko=l(),Ua=a("p"),lko=o("The model class to instantiate is selected based on the "),Epe=a("code"),iko=o("model_type"),dko=o(` property of the config object (either
passed as an argument or loaded from `),Cpe=a("code"),cko=o("pretrained_model_name_or_path"),fko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=a("code"),mko=o("pretrained_model_name_or_path"),gko=o(":"),hko=l(),G=a("ul"),j1=a("li"),Ape=a("strong"),pko=o("albert"),_ko=o(" \u2014 "),pV=a("a"),uko=o("AlbertForPreTraining"),bko=o(" (ALBERT model)"),vko=l(),D1=a("li"),Lpe=a("strong"),Fko=o("bart"),Tko=o(" \u2014 "),_V=a("a"),Mko=o("BartForConditionalGeneration"),Eko=o(" (BART model)"),Cko=l(),G1=a("li"),ype=a("strong"),wko=o("bert"),Ako=o(" \u2014 "),uV=a("a"),Lko=o("BertForPreTraining"),yko=o(" (BERT model)"),xko=l(),O1=a("li"),xpe=a("strong"),$ko=o("big_bird"),kko=o(" \u2014 "),bV=a("a"),Sko=o("BigBirdForPreTraining"),Rko=o(" (BigBird model)"),Pko=l(),V1=a("li"),$pe=a("strong"),Bko=o("bloom"),Iko=o(" \u2014 "),vV=a("a"),Nko=o("BloomForCausalLM"),qko=o(" (BLOOM model)"),jko=l(),X1=a("li"),kpe=a("strong"),Dko=o("camembert"),Gko=o(" \u2014 "),FV=a("a"),Oko=o("CamembertForMaskedLM"),Vko=o(" (CamemBERT model)"),Xko=l(),z1=a("li"),Spe=a("strong"),zko=o("ctrl"),Wko=o(" \u2014 "),TV=a("a"),Qko=o("CTRLLMHeadModel"),Uko=o(" (CTRL model)"),Hko=l(),W1=a("li"),Rpe=a("strong"),Jko=o("data2vec-text"),Yko=o(" \u2014 "),MV=a("a"),Kko=o("Data2VecTextForMaskedLM"),Zko=o(" (Data2VecText model)"),eSo=l(),Q1=a("li"),Ppe=a("strong"),oSo=o("deberta"),rSo=o(" \u2014 "),EV=a("a"),tSo=o("DebertaForMaskedLM"),aSo=o(" (DeBERTa model)"),nSo=l(),U1=a("li"),Bpe=a("strong"),sSo=o("deberta-v2"),lSo=o(" \u2014 "),CV=a("a"),iSo=o("DebertaV2ForMaskedLM"),dSo=o(" (DeBERTa-v2 model)"),cSo=l(),H1=a("li"),Ipe=a("strong"),fSo=o("distilbert"),mSo=o(" \u2014 "),wV=a("a"),gSo=o("DistilBertForMaskedLM"),hSo=o(" (DistilBERT model)"),pSo=l(),J1=a("li"),Npe=a("strong"),_So=o("electra"),uSo=o(" \u2014 "),AV=a("a"),bSo=o("ElectraForPreTraining"),vSo=o(" (ELECTRA model)"),FSo=l(),Y1=a("li"),qpe=a("strong"),TSo=o("flaubert"),MSo=o(" \u2014 "),LV=a("a"),ESo=o("FlaubertWithLMHeadModel"),CSo=o(" (FlauBERT model)"),wSo=l(),K1=a("li"),jpe=a("strong"),ASo=o("flava"),LSo=o(" \u2014 "),yV=a("a"),ySo=o("FlavaForPreTraining"),xSo=o(" (FLAVA model)"),$So=l(),Z1=a("li"),Dpe=a("strong"),kSo=o("fnet"),SSo=o(" \u2014 "),xV=a("a"),RSo=o("FNetForPreTraining"),PSo=o(" (FNet model)"),BSo=l(),e8=a("li"),Gpe=a("strong"),ISo=o("fsmt"),NSo=o(" \u2014 "),$V=a("a"),qSo=o("FSMTForConditionalGeneration"),jSo=o(" (FairSeq Machine-Translation model)"),DSo=l(),o8=a("li"),Ope=a("strong"),GSo=o("funnel"),OSo=o(" \u2014 "),kV=a("a"),VSo=o("FunnelForPreTraining"),XSo=o(" (Funnel Transformer model)"),zSo=l(),r8=a("li"),Vpe=a("strong"),WSo=o("gpt2"),QSo=o(" \u2014 "),SV=a("a"),USo=o("GPT2LMHeadModel"),HSo=o(" (OpenAI GPT-2 model)"),JSo=l(),t8=a("li"),Xpe=a("strong"),YSo=o("ibert"),KSo=o(" \u2014 "),RV=a("a"),ZSo=o("IBertForMaskedLM"),eRo=o(" (I-BERT model)"),oRo=l(),a8=a("li"),zpe=a("strong"),rRo=o("layoutlm"),tRo=o(" \u2014 "),PV=a("a"),aRo=o("LayoutLMForMaskedLM"),nRo=o(" (LayoutLM model)"),sRo=l(),n8=a("li"),Wpe=a("strong"),lRo=o("longformer"),iRo=o(" \u2014 "),BV=a("a"),dRo=o("LongformerForMaskedLM"),cRo=o(" (Longformer model)"),fRo=l(),s8=a("li"),Qpe=a("strong"),mRo=o("luke"),gRo=o(" \u2014 "),IV=a("a"),hRo=o("LukeForMaskedLM"),pRo=o(" (LUKE model)"),_Ro=l(),l8=a("li"),Upe=a("strong"),uRo=o("lxmert"),bRo=o(" \u2014 "),NV=a("a"),vRo=o("LxmertForPreTraining"),FRo=o(" (LXMERT model)"),TRo=l(),i8=a("li"),Hpe=a("strong"),MRo=o("megatron-bert"),ERo=o(" \u2014 "),qV=a("a"),CRo=o("MegatronBertForPreTraining"),wRo=o(" (Megatron-BERT model)"),ARo=l(),d8=a("li"),Jpe=a("strong"),LRo=o("mobilebert"),yRo=o(" \u2014 "),jV=a("a"),xRo=o("MobileBertForPreTraining"),$Ro=o(" (MobileBERT model)"),kRo=l(),c8=a("li"),Ype=a("strong"),SRo=o("mpnet"),RRo=o(" \u2014 "),DV=a("a"),PRo=o("MPNetForMaskedLM"),BRo=o(" (MPNet model)"),IRo=l(),f8=a("li"),Kpe=a("strong"),NRo=o("mvp"),qRo=o(" \u2014 "),GV=a("a"),jRo=o("MvpForConditionalGeneration"),DRo=o(" (MVP model)"),GRo=l(),m8=a("li"),Zpe=a("strong"),ORo=o("nezha"),VRo=o(" \u2014 "),OV=a("a"),XRo=o("NezhaForPreTraining"),zRo=o(" (Nezha model)"),WRo=l(),g8=a("li"),e_e=a("strong"),QRo=o("openai-gpt"),URo=o(" \u2014 "),VV=a("a"),HRo=o("OpenAIGPTLMHeadModel"),JRo=o(" (OpenAI GPT model)"),YRo=l(),h8=a("li"),o_e=a("strong"),KRo=o("retribert"),ZRo=o(" \u2014 "),XV=a("a"),ePo=o("RetriBertModel"),oPo=o(" (RetriBERT model)"),rPo=l(),p8=a("li"),r_e=a("strong"),tPo=o("roberta"),aPo=o(" \u2014 "),zV=a("a"),nPo=o("RobertaForMaskedLM"),sPo=o(" (RoBERTa model)"),lPo=l(),_8=a("li"),t_e=a("strong"),iPo=o("splinter"),dPo=o(" \u2014 "),WV=a("a"),cPo=o("SplinterForPreTraining"),fPo=o(" (Splinter model)"),mPo=l(),u8=a("li"),a_e=a("strong"),gPo=o("squeezebert"),hPo=o(" \u2014 "),QV=a("a"),pPo=o("SqueezeBertForMaskedLM"),_Po=o(" (SqueezeBERT model)"),uPo=l(),b8=a("li"),n_e=a("strong"),bPo=o("t5"),vPo=o(" \u2014 "),UV=a("a"),FPo=o("T5ForConditionalGeneration"),TPo=o(" (T5 model)"),MPo=l(),v8=a("li"),s_e=a("strong"),EPo=o("tapas"),CPo=o(" \u2014 "),HV=a("a"),wPo=o("TapasForMaskedLM"),APo=o(" (TAPAS model)"),LPo=l(),F8=a("li"),l_e=a("strong"),yPo=o("transfo-xl"),xPo=o(" \u2014 "),JV=a("a"),$Po=o("TransfoXLLMHeadModel"),kPo=o(" (Transformer-XL model)"),SPo=l(),T8=a("li"),i_e=a("strong"),RPo=o("unispeech"),PPo=o(" \u2014 "),YV=a("a"),BPo=o("UniSpeechForPreTraining"),IPo=o(" (UniSpeech model)"),NPo=l(),M8=a("li"),d_e=a("strong"),qPo=o("unispeech-sat"),jPo=o(" \u2014 "),KV=a("a"),DPo=o("UniSpeechSatForPreTraining"),GPo=o(" (UniSpeechSat model)"),OPo=l(),E8=a("li"),c_e=a("strong"),VPo=o("videomae"),XPo=o(" \u2014 "),ZV=a("a"),zPo=o("VideoMAEForPreTraining"),WPo=o(" (VideoMAE model)"),QPo=l(),C8=a("li"),f_e=a("strong"),UPo=o("visual_bert"),HPo=o(" \u2014 "),eX=a("a"),JPo=o("VisualBertForPreTraining"),YPo=o(" (VisualBERT model)"),KPo=l(),w8=a("li"),m_e=a("strong"),ZPo=o("vit_mae"),eBo=o(" \u2014 "),oX=a("a"),oBo=o("ViTMAEForPreTraining"),rBo=o(" (ViTMAE model)"),tBo=l(),A8=a("li"),g_e=a("strong"),aBo=o("wav2vec2"),nBo=o(" \u2014 "),rX=a("a"),sBo=o("Wav2Vec2ForPreTraining"),lBo=o(" (Wav2Vec2 model)"),iBo=l(),L8=a("li"),h_e=a("strong"),dBo=o("wav2vec2-conformer"),cBo=o(" \u2014 "),tX=a("a"),fBo=o("Wav2Vec2ConformerForPreTraining"),mBo=o(" (Wav2Vec2-Conformer model)"),gBo=l(),y8=a("li"),p_e=a("strong"),hBo=o("xlm"),pBo=o(" \u2014 "),aX=a("a"),_Bo=o("XLMWithLMHeadModel"),uBo=o(" (XLM model)"),bBo=l(),x8=a("li"),__e=a("strong"),vBo=o("xlm-roberta"),FBo=o(" \u2014 "),nX=a("a"),TBo=o("XLMRobertaForMaskedLM"),MBo=o(" (XLM-RoBERTa model)"),EBo=l(),$8=a("li"),u_e=a("strong"),CBo=o("xlm-roberta-xl"),wBo=o(" \u2014 "),sX=a("a"),ABo=o("XLMRobertaXLForMaskedLM"),LBo=o(" (XLM-RoBERTa-XL model)"),yBo=l(),k8=a("li"),b_e=a("strong"),xBo=o("xlnet"),$Bo=o(" \u2014 "),lX=a("a"),kBo=o("XLNetLMHeadModel"),SBo=o(" (XLNet model)"),RBo=l(),S8=a("p"),PBo=o("The model is set in evaluation mode by default using "),v_e=a("code"),BBo=o("model.eval()"),IBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F_e=a("code"),NBo=o("model.train()"),qBo=l(),F(R8.$$.fragment),JUe=l(),hd=a("h2"),P8=a("a"),T_e=a("span"),F(g9.$$.fragment),jBo=l(),M_e=a("span"),DBo=o("AutoModelForCausalLM"),YUe=l(),Bo=a("div"),F(h9.$$.fragment),GBo=l(),pd=a("p"),OBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),iX=a("a"),VBo=o("from_pretrained()"),XBo=o(" class method or the "),dX=a("a"),zBo=o("from_config()"),WBo=o(` class
method.`),QBo=l(),p9=a("p"),UBo=o("This class cannot be instantiated directly using "),E_e=a("code"),HBo=o("__init__()"),JBo=o(" (throws an error)."),YBo=l(),_t=a("div"),F(_9.$$.fragment),KBo=l(),C_e=a("p"),ZBo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),eIo=l(),_d=a("p"),oIo=o(`Note:
Loading a model from its configuration file does `),w_e=a("strong"),rIo=o("not"),tIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=a("a"),aIo=o("from_pretrained()"),nIo=o(" to load the model weights."),sIo=l(),F(B8.$$.fragment),lIo=l(),Ze=a("div"),F(u9.$$.fragment),iIo=l(),A_e=a("p"),dIo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),cIo=l(),Ha=a("p"),fIo=o("The model class to instantiate is selected based on the "),L_e=a("code"),mIo=o("model_type"),gIo=o(` property of the config object (either
passed as an argument or loaded from `),y_e=a("code"),hIo=o("pretrained_model_name_or_path"),pIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=a("code"),_Io=o("pretrained_model_name_or_path"),uIo=o(":"),bIo=l(),z=a("ul"),I8=a("li"),$_e=a("strong"),vIo=o("bart"),FIo=o(" \u2014 "),fX=a("a"),TIo=o("BartForCausalLM"),MIo=o(" (BART model)"),EIo=l(),N8=a("li"),k_e=a("strong"),CIo=o("bert"),wIo=o(" \u2014 "),mX=a("a"),AIo=o("BertLMHeadModel"),LIo=o(" (BERT model)"),yIo=l(),q8=a("li"),S_e=a("strong"),xIo=o("bert-generation"),$Io=o(" \u2014 "),gX=a("a"),kIo=o("BertGenerationDecoder"),SIo=o(" (Bert Generation model)"),RIo=l(),j8=a("li"),R_e=a("strong"),PIo=o("big_bird"),BIo=o(" \u2014 "),hX=a("a"),IIo=o("BigBirdForCausalLM"),NIo=o(" (BigBird model)"),qIo=l(),D8=a("li"),P_e=a("strong"),jIo=o("bigbird_pegasus"),DIo=o(" \u2014 "),pX=a("a"),GIo=o("BigBirdPegasusForCausalLM"),OIo=o(" (BigBird-Pegasus model)"),VIo=l(),G8=a("li"),B_e=a("strong"),XIo=o("blenderbot"),zIo=o(" \u2014 "),_X=a("a"),WIo=o("BlenderbotForCausalLM"),QIo=o(" (Blenderbot model)"),UIo=l(),O8=a("li"),I_e=a("strong"),HIo=o("blenderbot-small"),JIo=o(" \u2014 "),uX=a("a"),YIo=o("BlenderbotSmallForCausalLM"),KIo=o(" (BlenderbotSmall model)"),ZIo=l(),V8=a("li"),N_e=a("strong"),eNo=o("bloom"),oNo=o(" \u2014 "),bX=a("a"),rNo=o("BloomForCausalLM"),tNo=o(" (BLOOM model)"),aNo=l(),X8=a("li"),q_e=a("strong"),nNo=o("camembert"),sNo=o(" \u2014 "),vX=a("a"),lNo=o("CamembertForCausalLM"),iNo=o(" (CamemBERT model)"),dNo=l(),z8=a("li"),j_e=a("strong"),cNo=o("codegen"),fNo=o(" \u2014 "),FX=a("a"),mNo=o("CodeGenForCausalLM"),gNo=o(" (CodeGen model)"),hNo=l(),W8=a("li"),D_e=a("strong"),pNo=o("ctrl"),_No=o(" \u2014 "),TX=a("a"),uNo=o("CTRLLMHeadModel"),bNo=o(" (CTRL model)"),vNo=l(),Q8=a("li"),G_e=a("strong"),FNo=o("data2vec-text"),TNo=o(" \u2014 "),MX=a("a"),MNo=o("Data2VecTextForCausalLM"),ENo=o(" (Data2VecText model)"),CNo=l(),U8=a("li"),O_e=a("strong"),wNo=o("electra"),ANo=o(" \u2014 "),EX=a("a"),LNo=o("ElectraForCausalLM"),yNo=o(" (ELECTRA model)"),xNo=l(),H8=a("li"),V_e=a("strong"),$No=o("gpt2"),kNo=o(" \u2014 "),CX=a("a"),SNo=o("GPT2LMHeadModel"),RNo=o(" (OpenAI GPT-2 model)"),PNo=l(),J8=a("li"),X_e=a("strong"),BNo=o("gpt_neo"),INo=o(" \u2014 "),wX=a("a"),NNo=o("GPTNeoForCausalLM"),qNo=o(" (GPT Neo model)"),jNo=l(),Y8=a("li"),z_e=a("strong"),DNo=o("gpt_neox"),GNo=o(" \u2014 "),AX=a("a"),ONo=o("GPTNeoXForCausalLM"),VNo=o(" (GPT NeoX model)"),XNo=l(),K8=a("li"),W_e=a("strong"),zNo=o("gptj"),WNo=o(" \u2014 "),LX=a("a"),QNo=o("GPTJForCausalLM"),UNo=o(" (GPT-J model)"),HNo=l(),Z8=a("li"),Q_e=a("strong"),JNo=o("marian"),YNo=o(" \u2014 "),yX=a("a"),KNo=o("MarianForCausalLM"),ZNo=o(" (Marian model)"),eqo=l(),eb=a("li"),U_e=a("strong"),oqo=o("mbart"),rqo=o(" \u2014 "),xX=a("a"),tqo=o("MBartForCausalLM"),aqo=o(" (mBART model)"),nqo=l(),ob=a("li"),H_e=a("strong"),sqo=o("megatron-bert"),lqo=o(" \u2014 "),$X=a("a"),iqo=o("MegatronBertForCausalLM"),dqo=o(" (Megatron-BERT model)"),cqo=l(),rb=a("li"),J_e=a("strong"),fqo=o("mvp"),mqo=o(" \u2014 "),kX=a("a"),gqo=o("MvpForCausalLM"),hqo=o(" (MVP model)"),pqo=l(),tb=a("li"),Y_e=a("strong"),_qo=o("openai-gpt"),uqo=o(" \u2014 "),SX=a("a"),bqo=o("OpenAIGPTLMHeadModel"),vqo=o(" (OpenAI GPT model)"),Fqo=l(),ab=a("li"),K_e=a("strong"),Tqo=o("opt"),Mqo=o(" \u2014 "),RX=a("a"),Eqo=o("OPTForCausalLM"),Cqo=o(" (OPT model)"),wqo=l(),nb=a("li"),Z_e=a("strong"),Aqo=o("pegasus"),Lqo=o(" \u2014 "),PX=a("a"),yqo=o("PegasusForCausalLM"),xqo=o(" (Pegasus model)"),$qo=l(),sb=a("li"),eue=a("strong"),kqo=o("plbart"),Sqo=o(" \u2014 "),BX=a("a"),Rqo=o("PLBartForCausalLM"),Pqo=o(" (PLBart model)"),Bqo=l(),lb=a("li"),oue=a("strong"),Iqo=o("prophetnet"),Nqo=o(" \u2014 "),IX=a("a"),qqo=o("ProphetNetForCausalLM"),jqo=o(" (ProphetNet model)"),Dqo=l(),ib=a("li"),rue=a("strong"),Gqo=o("qdqbert"),Oqo=o(" \u2014 "),NX=a("a"),Vqo=o("QDQBertLMHeadModel"),Xqo=o(" (QDQBert model)"),zqo=l(),db=a("li"),tue=a("strong"),Wqo=o("reformer"),Qqo=o(" \u2014 "),qX=a("a"),Uqo=o("ReformerModelWithLMHead"),Hqo=o(" (Reformer model)"),Jqo=l(),cb=a("li"),aue=a("strong"),Yqo=o("rembert"),Kqo=o(" \u2014 "),jX=a("a"),Zqo=o("RemBertForCausalLM"),ejo=o(" (RemBERT model)"),ojo=l(),fb=a("li"),nue=a("strong"),rjo=o("roberta"),tjo=o(" \u2014 "),DX=a("a"),ajo=o("RobertaForCausalLM"),njo=o(" (RoBERTa model)"),sjo=l(),mb=a("li"),sue=a("strong"),ljo=o("roformer"),ijo=o(" \u2014 "),GX=a("a"),djo=o("RoFormerForCausalLM"),cjo=o(" (RoFormer model)"),fjo=l(),gb=a("li"),lue=a("strong"),mjo=o("speech_to_text_2"),gjo=o(" \u2014 "),OX=a("a"),hjo=o("Speech2Text2ForCausalLM"),pjo=o(" (Speech2Text2 model)"),_jo=l(),hb=a("li"),iue=a("strong"),ujo=o("transfo-xl"),bjo=o(" \u2014 "),VX=a("a"),vjo=o("TransfoXLLMHeadModel"),Fjo=o(" (Transformer-XL model)"),Tjo=l(),pb=a("li"),due=a("strong"),Mjo=o("trocr"),Ejo=o(" \u2014 "),XX=a("a"),Cjo=o("TrOCRForCausalLM"),wjo=o(" (TrOCR model)"),Ajo=l(),_b=a("li"),cue=a("strong"),Ljo=o("xglm"),yjo=o(" \u2014 "),zX=a("a"),xjo=o("XGLMForCausalLM"),$jo=o(" (XGLM model)"),kjo=l(),ub=a("li"),fue=a("strong"),Sjo=o("xlm"),Rjo=o(" \u2014 "),WX=a("a"),Pjo=o("XLMWithLMHeadModel"),Bjo=o(" (XLM model)"),Ijo=l(),bb=a("li"),mue=a("strong"),Njo=o("xlm-prophetnet"),qjo=o(" \u2014 "),QX=a("a"),jjo=o("XLMProphetNetForCausalLM"),Djo=o(" (XLM-ProphetNet model)"),Gjo=l(),vb=a("li"),gue=a("strong"),Ojo=o("xlm-roberta"),Vjo=o(" \u2014 "),UX=a("a"),Xjo=o("XLMRobertaForCausalLM"),zjo=o(" (XLM-RoBERTa model)"),Wjo=l(),Fb=a("li"),hue=a("strong"),Qjo=o("xlm-roberta-xl"),Ujo=o(" \u2014 "),HX=a("a"),Hjo=o("XLMRobertaXLForCausalLM"),Jjo=o(" (XLM-RoBERTa-XL model)"),Yjo=l(),Tb=a("li"),pue=a("strong"),Kjo=o("xlnet"),Zjo=o(" \u2014 "),JX=a("a"),eDo=o("XLNetLMHeadModel"),oDo=o(" (XLNet model)"),rDo=l(),Mb=a("p"),tDo=o("The model is set in evaluation mode by default using "),_ue=a("code"),aDo=o("model.eval()"),nDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uue=a("code"),sDo=o("model.train()"),lDo=l(),F(Eb.$$.fragment),KUe=l(),ud=a("h2"),Cb=a("a"),bue=a("span"),F(b9.$$.fragment),iDo=l(),vue=a("span"),dDo=o("AutoModelForDepthEstimation"),ZUe=l(),Io=a("div"),F(v9.$$.fragment),cDo=l(),bd=a("p"),fDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a depth estimation head) when created
with the `),YX=a("a"),mDo=o("from_pretrained()"),gDo=o(" class method or the "),KX=a("a"),hDo=o("from_config()"),pDo=o(` class
method.`),_Do=l(),F9=a("p"),uDo=o("This class cannot be instantiated directly using "),Fue=a("code"),bDo=o("__init__()"),vDo=o(" (throws an error)."),FDo=l(),ut=a("div"),F(T9.$$.fragment),TDo=l(),Tue=a("p"),MDo=o("Instantiates one of the model classes of the library (with a depth estimation head) from a configuration."),EDo=l(),vd=a("p"),CDo=o(`Note:
Loading a model from its configuration file does `),Mue=a("strong"),wDo=o("not"),ADo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),LDo=o("from_pretrained()"),yDo=o(" to load the model weights."),xDo=l(),F(wb.$$.fragment),$Do=l(),eo=a("div"),F(M9.$$.fragment),kDo=l(),Eue=a("p"),SDo=o("Instantiate one of the model classes of the library (with a depth estimation head) from a pretrained model."),RDo=l(),Ja=a("p"),PDo=o("The model class to instantiate is selected based on the "),Cue=a("code"),BDo=o("model_type"),IDo=o(` property of the config object (either
passed as an argument or loaded from `),wue=a("code"),NDo=o("pretrained_model_name_or_path"),qDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=a("code"),jDo=o("pretrained_model_name_or_path"),DDo=o(":"),GDo=l(),E9=a("ul"),Ab=a("li"),Lue=a("strong"),ODo=o("dpt"),VDo=o(" \u2014 "),yue=a("code"),XDo=o("DptForDepthEstimation"),zDo=o(" (DPT model)"),WDo=l(),Lb=a("li"),xue=a("strong"),QDo=o("glpn"),UDo=o(" \u2014 "),$ue=a("code"),HDo=o("GlpnForDepthEstimation"),JDo=o(" (GLPN model)"),YDo=l(),yb=a("p"),KDo=o("The model is set in evaluation mode by default using "),kue=a("code"),ZDo=o("model.eval()"),eGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sue=a("code"),oGo=o("model.train()"),rGo=l(),F(xb.$$.fragment),eHe=l(),Fd=a("h2"),$b=a("a"),Rue=a("span"),F(C9.$$.fragment),tGo=l(),Pue=a("span"),aGo=o("AutoModelForMaskedLM"),oHe=l(),No=a("div"),F(w9.$$.fragment),nGo=l(),Td=a("p"),sGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ez=a("a"),lGo=o("from_pretrained()"),iGo=o(" class method or the "),oz=a("a"),dGo=o("from_config()"),cGo=o(` class
method.`),fGo=l(),A9=a("p"),mGo=o("This class cannot be instantiated directly using "),Bue=a("code"),gGo=o("__init__()"),hGo=o(" (throws an error)."),pGo=l(),bt=a("div"),F(L9.$$.fragment),_Go=l(),Iue=a("p"),uGo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bGo=l(),Md=a("p"),vGo=o(`Note:
Loading a model from its configuration file does `),Nue=a("strong"),FGo=o("not"),TGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=a("a"),MGo=o("from_pretrained()"),EGo=o(" to load the model weights."),CGo=l(),F(kb.$$.fragment),wGo=l(),oo=a("div"),F(y9.$$.fragment),AGo=l(),que=a("p"),LGo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),yGo=l(),Ya=a("p"),xGo=o("The model class to instantiate is selected based on the "),jue=a("code"),$Go=o("model_type"),kGo=o(` property of the config object (either
passed as an argument or loaded from `),Due=a("code"),SGo=o("pretrained_model_name_or_path"),RGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=a("code"),PGo=o("pretrained_model_name_or_path"),BGo=o(":"),IGo=l(),U=a("ul"),Sb=a("li"),Oue=a("strong"),NGo=o("albert"),qGo=o(" \u2014 "),tz=a("a"),jGo=o("AlbertForMaskedLM"),DGo=o(" (ALBERT model)"),GGo=l(),Rb=a("li"),Vue=a("strong"),OGo=o("bart"),VGo=o(" \u2014 "),az=a("a"),XGo=o("BartForConditionalGeneration"),zGo=o(" (BART model)"),WGo=l(),Pb=a("li"),Xue=a("strong"),QGo=o("bert"),UGo=o(" \u2014 "),nz=a("a"),HGo=o("BertForMaskedLM"),JGo=o(" (BERT model)"),YGo=l(),Bb=a("li"),zue=a("strong"),KGo=o("big_bird"),ZGo=o(" \u2014 "),sz=a("a"),eOo=o("BigBirdForMaskedLM"),oOo=o(" (BigBird model)"),rOo=l(),Ib=a("li"),Wue=a("strong"),tOo=o("camembert"),aOo=o(" \u2014 "),lz=a("a"),nOo=o("CamembertForMaskedLM"),sOo=o(" (CamemBERT model)"),lOo=l(),Nb=a("li"),Que=a("strong"),iOo=o("convbert"),dOo=o(" \u2014 "),iz=a("a"),cOo=o("ConvBertForMaskedLM"),fOo=o(" (ConvBERT model)"),mOo=l(),qb=a("li"),Uue=a("strong"),gOo=o("data2vec-text"),hOo=o(" \u2014 "),dz=a("a"),pOo=o("Data2VecTextForMaskedLM"),_Oo=o(" (Data2VecText model)"),uOo=l(),jb=a("li"),Hue=a("strong"),bOo=o("deberta"),vOo=o(" \u2014 "),cz=a("a"),FOo=o("DebertaForMaskedLM"),TOo=o(" (DeBERTa model)"),MOo=l(),Db=a("li"),Jue=a("strong"),EOo=o("deberta-v2"),COo=o(" \u2014 "),fz=a("a"),wOo=o("DebertaV2ForMaskedLM"),AOo=o(" (DeBERTa-v2 model)"),LOo=l(),Gb=a("li"),Yue=a("strong"),yOo=o("distilbert"),xOo=o(" \u2014 "),mz=a("a"),$Oo=o("DistilBertForMaskedLM"),kOo=o(" (DistilBERT model)"),SOo=l(),Ob=a("li"),Kue=a("strong"),ROo=o("electra"),POo=o(" \u2014 "),gz=a("a"),BOo=o("ElectraForMaskedLM"),IOo=o(" (ELECTRA model)"),NOo=l(),Vb=a("li"),Zue=a("strong"),qOo=o("flaubert"),jOo=o(" \u2014 "),hz=a("a"),DOo=o("FlaubertWithLMHeadModel"),GOo=o(" (FlauBERT model)"),OOo=l(),Xb=a("li"),e1e=a("strong"),VOo=o("fnet"),XOo=o(" \u2014 "),pz=a("a"),zOo=o("FNetForMaskedLM"),WOo=o(" (FNet model)"),QOo=l(),zb=a("li"),o1e=a("strong"),UOo=o("funnel"),HOo=o(" \u2014 "),_z=a("a"),JOo=o("FunnelForMaskedLM"),YOo=o(" (Funnel Transformer model)"),KOo=l(),Wb=a("li"),r1e=a("strong"),ZOo=o("ibert"),eVo=o(" \u2014 "),uz=a("a"),oVo=o("IBertForMaskedLM"),rVo=o(" (I-BERT model)"),tVo=l(),Qb=a("li"),t1e=a("strong"),aVo=o("layoutlm"),nVo=o(" \u2014 "),bz=a("a"),sVo=o("LayoutLMForMaskedLM"),lVo=o(" (LayoutLM model)"),iVo=l(),Ub=a("li"),a1e=a("strong"),dVo=o("longformer"),cVo=o(" \u2014 "),vz=a("a"),fVo=o("LongformerForMaskedLM"),mVo=o(" (Longformer model)"),gVo=l(),Hb=a("li"),n1e=a("strong"),hVo=o("luke"),pVo=o(" \u2014 "),Fz=a("a"),_Vo=o("LukeForMaskedLM"),uVo=o(" (LUKE model)"),bVo=l(),Jb=a("li"),s1e=a("strong"),vVo=o("mbart"),FVo=o(" \u2014 "),Tz=a("a"),TVo=o("MBartForConditionalGeneration"),MVo=o(" (mBART model)"),EVo=l(),Yb=a("li"),l1e=a("strong"),CVo=o("megatron-bert"),wVo=o(" \u2014 "),Mz=a("a"),AVo=o("MegatronBertForMaskedLM"),LVo=o(" (Megatron-BERT model)"),yVo=l(),Kb=a("li"),i1e=a("strong"),xVo=o("mobilebert"),$Vo=o(" \u2014 "),Ez=a("a"),kVo=o("MobileBertForMaskedLM"),SVo=o(" (MobileBERT model)"),RVo=l(),Zb=a("li"),d1e=a("strong"),PVo=o("mpnet"),BVo=o(" \u2014 "),Cz=a("a"),IVo=o("MPNetForMaskedLM"),NVo=o(" (MPNet model)"),qVo=l(),e2=a("li"),c1e=a("strong"),jVo=o("mvp"),DVo=o(" \u2014 "),wz=a("a"),GVo=o("MvpForConditionalGeneration"),OVo=o(" (MVP model)"),VVo=l(),o2=a("li"),f1e=a("strong"),XVo=o("nezha"),zVo=o(" \u2014 "),Az=a("a"),WVo=o("NezhaForMaskedLM"),QVo=o(" (Nezha model)"),UVo=l(),r2=a("li"),m1e=a("strong"),HVo=o("nystromformer"),JVo=o(" \u2014 "),Lz=a("a"),YVo=o("NystromformerForMaskedLM"),KVo=o(" (Nystr\xF6mformer model)"),ZVo=l(),t2=a("li"),g1e=a("strong"),eXo=o("perceiver"),oXo=o(" \u2014 "),yz=a("a"),rXo=o("PerceiverForMaskedLM"),tXo=o(" (Perceiver model)"),aXo=l(),a2=a("li"),h1e=a("strong"),nXo=o("qdqbert"),sXo=o(" \u2014 "),xz=a("a"),lXo=o("QDQBertForMaskedLM"),iXo=o(" (QDQBert model)"),dXo=l(),n2=a("li"),p1e=a("strong"),cXo=o("reformer"),fXo=o(" \u2014 "),$z=a("a"),mXo=o("ReformerForMaskedLM"),gXo=o(" (Reformer model)"),hXo=l(),s2=a("li"),_1e=a("strong"),pXo=o("rembert"),_Xo=o(" \u2014 "),kz=a("a"),uXo=o("RemBertForMaskedLM"),bXo=o(" (RemBERT model)"),vXo=l(),l2=a("li"),u1e=a("strong"),FXo=o("roberta"),TXo=o(" \u2014 "),Sz=a("a"),MXo=o("RobertaForMaskedLM"),EXo=o(" (RoBERTa model)"),CXo=l(),i2=a("li"),b1e=a("strong"),wXo=o("roformer"),AXo=o(" \u2014 "),Rz=a("a"),LXo=o("RoFormerForMaskedLM"),yXo=o(" (RoFormer model)"),xXo=l(),d2=a("li"),v1e=a("strong"),$Xo=o("squeezebert"),kXo=o(" \u2014 "),Pz=a("a"),SXo=o("SqueezeBertForMaskedLM"),RXo=o(" (SqueezeBERT model)"),PXo=l(),c2=a("li"),F1e=a("strong"),BXo=o("tapas"),IXo=o(" \u2014 "),Bz=a("a"),NXo=o("TapasForMaskedLM"),qXo=o(" (TAPAS model)"),jXo=l(),f2=a("li"),T1e=a("strong"),DXo=o("wav2vec2"),GXo=o(" \u2014 "),M1e=a("code"),OXo=o("Wav2Vec2ForMaskedLM"),VXo=o(" (Wav2Vec2 model)"),XXo=l(),m2=a("li"),E1e=a("strong"),zXo=o("xlm"),WXo=o(" \u2014 "),Iz=a("a"),QXo=o("XLMWithLMHeadModel"),UXo=o(" (XLM model)"),HXo=l(),g2=a("li"),C1e=a("strong"),JXo=o("xlm-roberta"),YXo=o(" \u2014 "),Nz=a("a"),KXo=o("XLMRobertaForMaskedLM"),ZXo=o(" (XLM-RoBERTa model)"),ezo=l(),h2=a("li"),w1e=a("strong"),ozo=o("xlm-roberta-xl"),rzo=o(" \u2014 "),qz=a("a"),tzo=o("XLMRobertaXLForMaskedLM"),azo=o(" (XLM-RoBERTa-XL model)"),nzo=l(),p2=a("li"),A1e=a("strong"),szo=o("yoso"),lzo=o(" \u2014 "),jz=a("a"),izo=o("YosoForMaskedLM"),dzo=o(" (YOSO model)"),czo=l(),_2=a("p"),fzo=o("The model is set in evaluation mode by default using "),L1e=a("code"),mzo=o("model.eval()"),gzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y1e=a("code"),hzo=o("model.train()"),pzo=l(),F(u2.$$.fragment),rHe=l(),Ed=a("h2"),b2=a("a"),x1e=a("span"),F(x9.$$.fragment),_zo=l(),$1e=a("span"),uzo=o("AutoModelForSeq2SeqLM"),tHe=l(),qo=a("div"),F($9.$$.fragment),bzo=l(),Cd=a("p"),vzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Dz=a("a"),Fzo=o("from_pretrained()"),Tzo=o(" class method or the "),Gz=a("a"),Mzo=o("from_config()"),Ezo=o(` class
method.`),Czo=l(),k9=a("p"),wzo=o("This class cannot be instantiated directly using "),k1e=a("code"),Azo=o("__init__()"),Lzo=o(" (throws an error)."),yzo=l(),vt=a("div"),F(S9.$$.fragment),xzo=l(),S1e=a("p"),$zo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),kzo=l(),wd=a("p"),Szo=o(`Note:
Loading a model from its configuration file does `),R1e=a("strong"),Rzo=o("not"),Pzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=a("a"),Bzo=o("from_pretrained()"),Izo=o(" to load the model weights."),Nzo=l(),F(v2.$$.fragment),qzo=l(),ro=a("div"),F(R9.$$.fragment),jzo=l(),P1e=a("p"),Dzo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Gzo=l(),Ka=a("p"),Ozo=o("The model class to instantiate is selected based on the "),B1e=a("code"),Vzo=o("model_type"),Xzo=o(` property of the config object (either
passed as an argument or loaded from `),I1e=a("code"),zzo=o("pretrained_model_name_or_path"),Wzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=a("code"),Qzo=o("pretrained_model_name_or_path"),Uzo=o(":"),Hzo=l(),me=a("ul"),F2=a("li"),q1e=a("strong"),Jzo=o("bart"),Yzo=o(" \u2014 "),Vz=a("a"),Kzo=o("BartForConditionalGeneration"),Zzo=o(" (BART model)"),eWo=l(),T2=a("li"),j1e=a("strong"),oWo=o("bigbird_pegasus"),rWo=o(" \u2014 "),Xz=a("a"),tWo=o("BigBirdPegasusForConditionalGeneration"),aWo=o(" (BigBird-Pegasus model)"),nWo=l(),M2=a("li"),D1e=a("strong"),sWo=o("blenderbot"),lWo=o(" \u2014 "),zz=a("a"),iWo=o("BlenderbotForConditionalGeneration"),dWo=o(" (Blenderbot model)"),cWo=l(),E2=a("li"),G1e=a("strong"),fWo=o("blenderbot-small"),mWo=o(" \u2014 "),Wz=a("a"),gWo=o("BlenderbotSmallForConditionalGeneration"),hWo=o(" (BlenderbotSmall model)"),pWo=l(),C2=a("li"),O1e=a("strong"),_Wo=o("encoder-decoder"),uWo=o(" \u2014 "),Qz=a("a"),bWo=o("EncoderDecoderModel"),vWo=o(" (Encoder decoder model)"),FWo=l(),w2=a("li"),V1e=a("strong"),TWo=o("fsmt"),MWo=o(" \u2014 "),Uz=a("a"),EWo=o("FSMTForConditionalGeneration"),CWo=o(" (FairSeq Machine-Translation model)"),wWo=l(),A2=a("li"),X1e=a("strong"),AWo=o("led"),LWo=o(" \u2014 "),Hz=a("a"),yWo=o("LEDForConditionalGeneration"),xWo=o(" (LED model)"),$Wo=l(),L2=a("li"),z1e=a("strong"),kWo=o("longt5"),SWo=o(" \u2014 "),Jz=a("a"),RWo=o("LongT5ForConditionalGeneration"),PWo=o(" (LongT5 model)"),BWo=l(),y2=a("li"),W1e=a("strong"),IWo=o("m2m_100"),NWo=o(" \u2014 "),Yz=a("a"),qWo=o("M2M100ForConditionalGeneration"),jWo=o(" (M2M100 model)"),DWo=l(),x2=a("li"),Q1e=a("strong"),GWo=o("marian"),OWo=o(" \u2014 "),Kz=a("a"),VWo=o("MarianMTModel"),XWo=o(" (Marian model)"),zWo=l(),$2=a("li"),U1e=a("strong"),WWo=o("mbart"),QWo=o(" \u2014 "),Zz=a("a"),UWo=o("MBartForConditionalGeneration"),HWo=o(" (mBART model)"),JWo=l(),k2=a("li"),H1e=a("strong"),YWo=o("mt5"),KWo=o(" \u2014 "),eW=a("a"),ZWo=o("MT5ForConditionalGeneration"),eQo=o(" (MT5 model)"),oQo=l(),S2=a("li"),J1e=a("strong"),rQo=o("mvp"),tQo=o(" \u2014 "),oW=a("a"),aQo=o("MvpForConditionalGeneration"),nQo=o(" (MVP model)"),sQo=l(),R2=a("li"),Y1e=a("strong"),lQo=o("nllb"),iQo=o(" \u2014 "),rW=a("a"),dQo=o("M2M100ForConditionalGeneration"),cQo=o(" (NLLB model)"),fQo=l(),P2=a("li"),K1e=a("strong"),mQo=o("pegasus"),gQo=o(" \u2014 "),tW=a("a"),hQo=o("PegasusForConditionalGeneration"),pQo=o(" (Pegasus model)"),_Qo=l(),B2=a("li"),Z1e=a("strong"),uQo=o("plbart"),bQo=o(" \u2014 "),aW=a("a"),vQo=o("PLBartForConditionalGeneration"),FQo=o(" (PLBart model)"),TQo=l(),I2=a("li"),e8e=a("strong"),MQo=o("prophetnet"),EQo=o(" \u2014 "),nW=a("a"),CQo=o("ProphetNetForConditionalGeneration"),wQo=o(" (ProphetNet model)"),AQo=l(),N2=a("li"),o8e=a("strong"),LQo=o("t5"),yQo=o(" \u2014 "),sW=a("a"),xQo=o("T5ForConditionalGeneration"),$Qo=o(" (T5 model)"),kQo=l(),q2=a("li"),r8e=a("strong"),SQo=o("xlm-prophetnet"),RQo=o(" \u2014 "),lW=a("a"),PQo=o("XLMProphetNetForConditionalGeneration"),BQo=o(" (XLM-ProphetNet model)"),IQo=l(),j2=a("p"),NQo=o("The model is set in evaluation mode by default using "),t8e=a("code"),qQo=o("model.eval()"),jQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a8e=a("code"),DQo=o("model.train()"),GQo=l(),F(D2.$$.fragment),aHe=l(),Ad=a("h2"),G2=a("a"),n8e=a("span"),F(P9.$$.fragment),OQo=l(),s8e=a("span"),VQo=o("AutoModelForSequenceClassification"),nHe=l(),jo=a("div"),F(B9.$$.fragment),XQo=l(),Ld=a("p"),zQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iW=a("a"),WQo=o("from_pretrained()"),QQo=o(" class method or the "),dW=a("a"),UQo=o("from_config()"),HQo=o(` class
method.`),JQo=l(),I9=a("p"),YQo=o("This class cannot be instantiated directly using "),l8e=a("code"),KQo=o("__init__()"),ZQo=o(" (throws an error)."),eUo=l(),Ft=a("div"),F(N9.$$.fragment),oUo=l(),i8e=a("p"),rUo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tUo=l(),yd=a("p"),aUo=o(`Note:
Loading a model from its configuration file does `),d8e=a("strong"),nUo=o("not"),sUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=a("a"),lUo=o("from_pretrained()"),iUo=o(" to load the model weights."),dUo=l(),F(O2.$$.fragment),cUo=l(),to=a("div"),F(q9.$$.fragment),fUo=l(),c8e=a("p"),mUo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gUo=l(),Za=a("p"),hUo=o("The model class to instantiate is selected based on the "),f8e=a("code"),pUo=o("model_type"),_Uo=o(` property of the config object (either
passed as an argument or loaded from `),m8e=a("code"),uUo=o("pretrained_model_name_or_path"),bUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g8e=a("code"),vUo=o("pretrained_model_name_or_path"),FUo=o(":"),TUo=l(),N=a("ul"),V2=a("li"),h8e=a("strong"),MUo=o("albert"),EUo=o(" \u2014 "),fW=a("a"),CUo=o("AlbertForSequenceClassification"),wUo=o(" (ALBERT model)"),AUo=l(),X2=a("li"),p8e=a("strong"),LUo=o("bart"),yUo=o(" \u2014 "),mW=a("a"),xUo=o("BartForSequenceClassification"),$Uo=o(" (BART model)"),kUo=l(),z2=a("li"),_8e=a("strong"),SUo=o("bert"),RUo=o(" \u2014 "),gW=a("a"),PUo=o("BertForSequenceClassification"),BUo=o(" (BERT model)"),IUo=l(),W2=a("li"),u8e=a("strong"),NUo=o("big_bird"),qUo=o(" \u2014 "),hW=a("a"),jUo=o("BigBirdForSequenceClassification"),DUo=o(" (BigBird model)"),GUo=l(),Q2=a("li"),b8e=a("strong"),OUo=o("bigbird_pegasus"),VUo=o(" \u2014 "),pW=a("a"),XUo=o("BigBirdPegasusForSequenceClassification"),zUo=o(" (BigBird-Pegasus model)"),WUo=l(),U2=a("li"),v8e=a("strong"),QUo=o("bloom"),UUo=o(" \u2014 "),_W=a("a"),HUo=o("BloomForSequenceClassification"),JUo=o(" (BLOOM model)"),YUo=l(),H2=a("li"),F8e=a("strong"),KUo=o("camembert"),ZUo=o(" \u2014 "),uW=a("a"),eHo=o("CamembertForSequenceClassification"),oHo=o(" (CamemBERT model)"),rHo=l(),J2=a("li"),T8e=a("strong"),tHo=o("canine"),aHo=o(" \u2014 "),bW=a("a"),nHo=o("CanineForSequenceClassification"),sHo=o(" (CANINE model)"),lHo=l(),Y2=a("li"),M8e=a("strong"),iHo=o("convbert"),dHo=o(" \u2014 "),vW=a("a"),cHo=o("ConvBertForSequenceClassification"),fHo=o(" (ConvBERT model)"),mHo=l(),K2=a("li"),E8e=a("strong"),gHo=o("ctrl"),hHo=o(" \u2014 "),FW=a("a"),pHo=o("CTRLForSequenceClassification"),_Ho=o(" (CTRL model)"),uHo=l(),Z2=a("li"),C8e=a("strong"),bHo=o("data2vec-text"),vHo=o(" \u2014 "),TW=a("a"),FHo=o("Data2VecTextForSequenceClassification"),THo=o(" (Data2VecText model)"),MHo=l(),ev=a("li"),w8e=a("strong"),EHo=o("deberta"),CHo=o(" \u2014 "),MW=a("a"),wHo=o("DebertaForSequenceClassification"),AHo=o(" (DeBERTa model)"),LHo=l(),ov=a("li"),A8e=a("strong"),yHo=o("deberta-v2"),xHo=o(" \u2014 "),EW=a("a"),$Ho=o("DebertaV2ForSequenceClassification"),kHo=o(" (DeBERTa-v2 model)"),SHo=l(),rv=a("li"),L8e=a("strong"),RHo=o("distilbert"),PHo=o(" \u2014 "),CW=a("a"),BHo=o("DistilBertForSequenceClassification"),IHo=o(" (DistilBERT model)"),NHo=l(),tv=a("li"),y8e=a("strong"),qHo=o("electra"),jHo=o(" \u2014 "),wW=a("a"),DHo=o("ElectraForSequenceClassification"),GHo=o(" (ELECTRA model)"),OHo=l(),av=a("li"),x8e=a("strong"),VHo=o("flaubert"),XHo=o(" \u2014 "),AW=a("a"),zHo=o("FlaubertForSequenceClassification"),WHo=o(" (FlauBERT model)"),QHo=l(),nv=a("li"),$8e=a("strong"),UHo=o("fnet"),HHo=o(" \u2014 "),LW=a("a"),JHo=o("FNetForSequenceClassification"),YHo=o(" (FNet model)"),KHo=l(),sv=a("li"),k8e=a("strong"),ZHo=o("funnel"),eJo=o(" \u2014 "),yW=a("a"),oJo=o("FunnelForSequenceClassification"),rJo=o(" (Funnel Transformer model)"),tJo=l(),lv=a("li"),S8e=a("strong"),aJo=o("gpt2"),nJo=o(" \u2014 "),xW=a("a"),sJo=o("GPT2ForSequenceClassification"),lJo=o(" (OpenAI GPT-2 model)"),iJo=l(),iv=a("li"),R8e=a("strong"),dJo=o("gpt_neo"),cJo=o(" \u2014 "),$W=a("a"),fJo=o("GPTNeoForSequenceClassification"),mJo=o(" (GPT Neo model)"),gJo=l(),dv=a("li"),P8e=a("strong"),hJo=o("gptj"),pJo=o(" \u2014 "),kW=a("a"),_Jo=o("GPTJForSequenceClassification"),uJo=o(" (GPT-J model)"),bJo=l(),cv=a("li"),B8e=a("strong"),vJo=o("ibert"),FJo=o(" \u2014 "),SW=a("a"),TJo=o("IBertForSequenceClassification"),MJo=o(" (I-BERT model)"),EJo=l(),fv=a("li"),I8e=a("strong"),CJo=o("layoutlm"),wJo=o(" \u2014 "),RW=a("a"),AJo=o("LayoutLMForSequenceClassification"),LJo=o(" (LayoutLM model)"),yJo=l(),mv=a("li"),N8e=a("strong"),xJo=o("layoutlmv2"),$Jo=o(" \u2014 "),PW=a("a"),kJo=o("LayoutLMv2ForSequenceClassification"),SJo=o(" (LayoutLMv2 model)"),RJo=l(),gv=a("li"),q8e=a("strong"),PJo=o("layoutlmv3"),BJo=o(" \u2014 "),BW=a("a"),IJo=o("LayoutLMv3ForSequenceClassification"),NJo=o(" (LayoutLMv3 model)"),qJo=l(),hv=a("li"),j8e=a("strong"),jJo=o("led"),DJo=o(" \u2014 "),IW=a("a"),GJo=o("LEDForSequenceClassification"),OJo=o(" (LED model)"),VJo=l(),pv=a("li"),D8e=a("strong"),XJo=o("longformer"),zJo=o(" \u2014 "),NW=a("a"),WJo=o("LongformerForSequenceClassification"),QJo=o(" (Longformer model)"),UJo=l(),_v=a("li"),G8e=a("strong"),HJo=o("luke"),JJo=o(" \u2014 "),qW=a("a"),YJo=o("LukeForSequenceClassification"),KJo=o(" (LUKE model)"),ZJo=l(),uv=a("li"),O8e=a("strong"),eYo=o("mbart"),oYo=o(" \u2014 "),jW=a("a"),rYo=o("MBartForSequenceClassification"),tYo=o(" (mBART model)"),aYo=l(),bv=a("li"),V8e=a("strong"),nYo=o("megatron-bert"),sYo=o(" \u2014 "),DW=a("a"),lYo=o("MegatronBertForSequenceClassification"),iYo=o(" (Megatron-BERT model)"),dYo=l(),vv=a("li"),X8e=a("strong"),cYo=o("mobilebert"),fYo=o(" \u2014 "),GW=a("a"),mYo=o("MobileBertForSequenceClassification"),gYo=o(" (MobileBERT model)"),hYo=l(),Fv=a("li"),z8e=a("strong"),pYo=o("mpnet"),_Yo=o(" \u2014 "),OW=a("a"),uYo=o("MPNetForSequenceClassification"),bYo=o(" (MPNet model)"),vYo=l(),Tv=a("li"),W8e=a("strong"),FYo=o("mvp"),TYo=o(" \u2014 "),VW=a("a"),MYo=o("MvpForSequenceClassification"),EYo=o(" (MVP model)"),CYo=l(),Mv=a("li"),Q8e=a("strong"),wYo=o("nezha"),AYo=o(" \u2014 "),XW=a("a"),LYo=o("NezhaForSequenceClassification"),yYo=o(" (Nezha model)"),xYo=l(),Ev=a("li"),U8e=a("strong"),$Yo=o("nystromformer"),kYo=o(" \u2014 "),zW=a("a"),SYo=o("NystromformerForSequenceClassification"),RYo=o(" (Nystr\xF6mformer model)"),PYo=l(),Cv=a("li"),H8e=a("strong"),BYo=o("openai-gpt"),IYo=o(" \u2014 "),WW=a("a"),NYo=o("OpenAIGPTForSequenceClassification"),qYo=o(" (OpenAI GPT model)"),jYo=l(),wv=a("li"),J8e=a("strong"),DYo=o("opt"),GYo=o(" \u2014 "),QW=a("a"),OYo=o("OPTForSequenceClassification"),VYo=o(" (OPT model)"),XYo=l(),Av=a("li"),Y8e=a("strong"),zYo=o("perceiver"),WYo=o(" \u2014 "),UW=a("a"),QYo=o("PerceiverForSequenceClassification"),UYo=o(" (Perceiver model)"),HYo=l(),Lv=a("li"),K8e=a("strong"),JYo=o("plbart"),YYo=o(" \u2014 "),HW=a("a"),KYo=o("PLBartForSequenceClassification"),ZYo=o(" (PLBart model)"),eKo=l(),yv=a("li"),Z8e=a("strong"),oKo=o("qdqbert"),rKo=o(" \u2014 "),JW=a("a"),tKo=o("QDQBertForSequenceClassification"),aKo=o(" (QDQBert model)"),nKo=l(),xv=a("li"),ebe=a("strong"),sKo=o("reformer"),lKo=o(" \u2014 "),YW=a("a"),iKo=o("ReformerForSequenceClassification"),dKo=o(" (Reformer model)"),cKo=l(),$v=a("li"),obe=a("strong"),fKo=o("rembert"),mKo=o(" \u2014 "),KW=a("a"),gKo=o("RemBertForSequenceClassification"),hKo=o(" (RemBERT model)"),pKo=l(),kv=a("li"),rbe=a("strong"),_Ko=o("roberta"),uKo=o(" \u2014 "),ZW=a("a"),bKo=o("RobertaForSequenceClassification"),vKo=o(" (RoBERTa model)"),FKo=l(),Sv=a("li"),tbe=a("strong"),TKo=o("roformer"),MKo=o(" \u2014 "),eQ=a("a"),EKo=o("RoFormerForSequenceClassification"),CKo=o(" (RoFormer model)"),wKo=l(),Rv=a("li"),abe=a("strong"),AKo=o("squeezebert"),LKo=o(" \u2014 "),oQ=a("a"),yKo=o("SqueezeBertForSequenceClassification"),xKo=o(" (SqueezeBERT model)"),$Ko=l(),Pv=a("li"),nbe=a("strong"),kKo=o("tapas"),SKo=o(" \u2014 "),rQ=a("a"),RKo=o("TapasForSequenceClassification"),PKo=o(" (TAPAS model)"),BKo=l(),Bv=a("li"),sbe=a("strong"),IKo=o("transfo-xl"),NKo=o(" \u2014 "),tQ=a("a"),qKo=o("TransfoXLForSequenceClassification"),jKo=o(" (Transformer-XL model)"),DKo=l(),Iv=a("li"),lbe=a("strong"),GKo=o("xlm"),OKo=o(" \u2014 "),aQ=a("a"),VKo=o("XLMForSequenceClassification"),XKo=o(" (XLM model)"),zKo=l(),Nv=a("li"),ibe=a("strong"),WKo=o("xlm-roberta"),QKo=o(" \u2014 "),nQ=a("a"),UKo=o("XLMRobertaForSequenceClassification"),HKo=o(" (XLM-RoBERTa model)"),JKo=l(),qv=a("li"),dbe=a("strong"),YKo=o("xlm-roberta-xl"),KKo=o(" \u2014 "),sQ=a("a"),ZKo=o("XLMRobertaXLForSequenceClassification"),eZo=o(" (XLM-RoBERTa-XL model)"),oZo=l(),jv=a("li"),cbe=a("strong"),rZo=o("xlnet"),tZo=o(" \u2014 "),lQ=a("a"),aZo=o("XLNetForSequenceClassification"),nZo=o(" (XLNet model)"),sZo=l(),Dv=a("li"),fbe=a("strong"),lZo=o("yoso"),iZo=o(" \u2014 "),iQ=a("a"),dZo=o("YosoForSequenceClassification"),cZo=o(" (YOSO model)"),fZo=l(),Gv=a("p"),mZo=o("The model is set in evaluation mode by default using "),mbe=a("code"),gZo=o("model.eval()"),hZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gbe=a("code"),pZo=o("model.train()"),_Zo=l(),F(Ov.$$.fragment),sHe=l(),xd=a("h2"),Vv=a("a"),hbe=a("span"),F(j9.$$.fragment),uZo=l(),pbe=a("span"),bZo=o("AutoModelForMultipleChoice"),lHe=l(),Do=a("div"),F(D9.$$.fragment),vZo=l(),$d=a("p"),FZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dQ=a("a"),TZo=o("from_pretrained()"),MZo=o(" class method or the "),cQ=a("a"),EZo=o("from_config()"),CZo=o(` class
method.`),wZo=l(),G9=a("p"),AZo=o("This class cannot be instantiated directly using "),_be=a("code"),LZo=o("__init__()"),yZo=o(" (throws an error)."),xZo=l(),Tt=a("div"),F(O9.$$.fragment),$Zo=l(),ube=a("p"),kZo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),SZo=l(),kd=a("p"),RZo=o(`Note:
Loading a model from its configuration file does `),bbe=a("strong"),PZo=o("not"),BZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=a("a"),IZo=o("from_pretrained()"),NZo=o(" to load the model weights."),qZo=l(),F(Xv.$$.fragment),jZo=l(),ao=a("div"),F(V9.$$.fragment),DZo=l(),vbe=a("p"),GZo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),OZo=l(),en=a("p"),VZo=o("The model class to instantiate is selected based on the "),Fbe=a("code"),XZo=o("model_type"),zZo=o(` property of the config object (either
passed as an argument or loaded from `),Tbe=a("code"),WZo=o("pretrained_model_name_or_path"),QZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=a("code"),UZo=o("pretrained_model_name_or_path"),HZo=o(":"),JZo=l(),Z=a("ul"),zv=a("li"),Ebe=a("strong"),YZo=o("albert"),KZo=o(" \u2014 "),mQ=a("a"),ZZo=o("AlbertForMultipleChoice"),eer=o(" (ALBERT model)"),oer=l(),Wv=a("li"),Cbe=a("strong"),rer=o("bert"),ter=o(" \u2014 "),gQ=a("a"),aer=o("BertForMultipleChoice"),ner=o(" (BERT model)"),ser=l(),Qv=a("li"),wbe=a("strong"),ler=o("big_bird"),ier=o(" \u2014 "),hQ=a("a"),der=o("BigBirdForMultipleChoice"),cer=o(" (BigBird model)"),fer=l(),Uv=a("li"),Abe=a("strong"),mer=o("camembert"),ger=o(" \u2014 "),pQ=a("a"),her=o("CamembertForMultipleChoice"),per=o(" (CamemBERT model)"),_er=l(),Hv=a("li"),Lbe=a("strong"),uer=o("canine"),ber=o(" \u2014 "),_Q=a("a"),ver=o("CanineForMultipleChoice"),Fer=o(" (CANINE model)"),Ter=l(),Jv=a("li"),ybe=a("strong"),Mer=o("convbert"),Eer=o(" \u2014 "),uQ=a("a"),Cer=o("ConvBertForMultipleChoice"),wer=o(" (ConvBERT model)"),Aer=l(),Yv=a("li"),xbe=a("strong"),Ler=o("data2vec-text"),yer=o(" \u2014 "),bQ=a("a"),xer=o("Data2VecTextForMultipleChoice"),$er=o(" (Data2VecText model)"),ker=l(),Kv=a("li"),$be=a("strong"),Ser=o("deberta-v2"),Rer=o(" \u2014 "),vQ=a("a"),Per=o("DebertaV2ForMultipleChoice"),Ber=o(" (DeBERTa-v2 model)"),Ier=l(),Zv=a("li"),kbe=a("strong"),Ner=o("distilbert"),qer=o(" \u2014 "),FQ=a("a"),jer=o("DistilBertForMultipleChoice"),Der=o(" (DistilBERT model)"),Ger=l(),e6=a("li"),Sbe=a("strong"),Oer=o("electra"),Ver=o(" \u2014 "),TQ=a("a"),Xer=o("ElectraForMultipleChoice"),zer=o(" (ELECTRA model)"),Wer=l(),o6=a("li"),Rbe=a("strong"),Qer=o("flaubert"),Uer=o(" \u2014 "),MQ=a("a"),Her=o("FlaubertForMultipleChoice"),Jer=o(" (FlauBERT model)"),Yer=l(),r6=a("li"),Pbe=a("strong"),Ker=o("fnet"),Zer=o(" \u2014 "),EQ=a("a"),eor=o("FNetForMultipleChoice"),oor=o(" (FNet model)"),ror=l(),t6=a("li"),Bbe=a("strong"),tor=o("funnel"),aor=o(" \u2014 "),CQ=a("a"),nor=o("FunnelForMultipleChoice"),sor=o(" (Funnel Transformer model)"),lor=l(),a6=a("li"),Ibe=a("strong"),ior=o("ibert"),dor=o(" \u2014 "),wQ=a("a"),cor=o("IBertForMultipleChoice"),mor=o(" (I-BERT model)"),gor=l(),n6=a("li"),Nbe=a("strong"),hor=o("longformer"),por=o(" \u2014 "),AQ=a("a"),_or=o("LongformerForMultipleChoice"),uor=o(" (Longformer model)"),bor=l(),s6=a("li"),qbe=a("strong"),vor=o("luke"),For=o(" \u2014 "),LQ=a("a"),Tor=o("LukeForMultipleChoice"),Mor=o(" (LUKE model)"),Eor=l(),l6=a("li"),jbe=a("strong"),Cor=o("megatron-bert"),wor=o(" \u2014 "),yQ=a("a"),Aor=o("MegatronBertForMultipleChoice"),Lor=o(" (Megatron-BERT model)"),yor=l(),i6=a("li"),Dbe=a("strong"),xor=o("mobilebert"),$or=o(" \u2014 "),xQ=a("a"),kor=o("MobileBertForMultipleChoice"),Sor=o(" (MobileBERT model)"),Ror=l(),d6=a("li"),Gbe=a("strong"),Por=o("mpnet"),Bor=o(" \u2014 "),$Q=a("a"),Ior=o("MPNetForMultipleChoice"),Nor=o(" (MPNet model)"),qor=l(),c6=a("li"),Obe=a("strong"),jor=o("nezha"),Dor=o(" \u2014 "),kQ=a("a"),Gor=o("NezhaForMultipleChoice"),Oor=o(" (Nezha model)"),Vor=l(),f6=a("li"),Vbe=a("strong"),Xor=o("nystromformer"),zor=o(" \u2014 "),SQ=a("a"),Wor=o("NystromformerForMultipleChoice"),Qor=o(" (Nystr\xF6mformer model)"),Uor=l(),m6=a("li"),Xbe=a("strong"),Hor=o("qdqbert"),Jor=o(" \u2014 "),RQ=a("a"),Yor=o("QDQBertForMultipleChoice"),Kor=o(" (QDQBert model)"),Zor=l(),g6=a("li"),zbe=a("strong"),err=o("rembert"),orr=o(" \u2014 "),PQ=a("a"),rrr=o("RemBertForMultipleChoice"),trr=o(" (RemBERT model)"),arr=l(),h6=a("li"),Wbe=a("strong"),nrr=o("roberta"),srr=o(" \u2014 "),BQ=a("a"),lrr=o("RobertaForMultipleChoice"),irr=o(" (RoBERTa model)"),drr=l(),p6=a("li"),Qbe=a("strong"),crr=o("roformer"),frr=o(" \u2014 "),IQ=a("a"),mrr=o("RoFormerForMultipleChoice"),grr=o(" (RoFormer model)"),hrr=l(),_6=a("li"),Ube=a("strong"),prr=o("squeezebert"),_rr=o(" \u2014 "),NQ=a("a"),urr=o("SqueezeBertForMultipleChoice"),brr=o(" (SqueezeBERT model)"),vrr=l(),u6=a("li"),Hbe=a("strong"),Frr=o("xlm"),Trr=o(" \u2014 "),qQ=a("a"),Mrr=o("XLMForMultipleChoice"),Err=o(" (XLM model)"),Crr=l(),b6=a("li"),Jbe=a("strong"),wrr=o("xlm-roberta"),Arr=o(" \u2014 "),jQ=a("a"),Lrr=o("XLMRobertaForMultipleChoice"),yrr=o(" (XLM-RoBERTa model)"),xrr=l(),v6=a("li"),Ybe=a("strong"),$rr=o("xlm-roberta-xl"),krr=o(" \u2014 "),DQ=a("a"),Srr=o("XLMRobertaXLForMultipleChoice"),Rrr=o(" (XLM-RoBERTa-XL model)"),Prr=l(),F6=a("li"),Kbe=a("strong"),Brr=o("xlnet"),Irr=o(" \u2014 "),GQ=a("a"),Nrr=o("XLNetForMultipleChoice"),qrr=o(" (XLNet model)"),jrr=l(),T6=a("li"),Zbe=a("strong"),Drr=o("yoso"),Grr=o(" \u2014 "),OQ=a("a"),Orr=o("YosoForMultipleChoice"),Vrr=o(" (YOSO model)"),Xrr=l(),M6=a("p"),zrr=o("The model is set in evaluation mode by default using "),e2e=a("code"),Wrr=o("model.eval()"),Qrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o2e=a("code"),Urr=o("model.train()"),Hrr=l(),F(E6.$$.fragment),iHe=l(),Sd=a("h2"),C6=a("a"),r2e=a("span"),F(X9.$$.fragment),Jrr=l(),t2e=a("span"),Yrr=o("AutoModelForNextSentencePrediction"),dHe=l(),Go=a("div"),F(z9.$$.fragment),Krr=l(),Rd=a("p"),Zrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),VQ=a("a"),etr=o("from_pretrained()"),otr=o(" class method or the "),XQ=a("a"),rtr=o("from_config()"),ttr=o(` class
method.`),atr=l(),W9=a("p"),ntr=o("This class cannot be instantiated directly using "),a2e=a("code"),str=o("__init__()"),ltr=o(" (throws an error)."),itr=l(),Mt=a("div"),F(Q9.$$.fragment),dtr=l(),n2e=a("p"),ctr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ftr=l(),Pd=a("p"),mtr=o(`Note:
Loading a model from its configuration file does `),s2e=a("strong"),gtr=o("not"),htr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zQ=a("a"),ptr=o("from_pretrained()"),_tr=o(" to load the model weights."),utr=l(),F(w6.$$.fragment),btr=l(),no=a("div"),F(U9.$$.fragment),vtr=l(),l2e=a("p"),Ftr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Ttr=l(),on=a("p"),Mtr=o("The model class to instantiate is selected based on the "),i2e=a("code"),Etr=o("model_type"),Ctr=o(` property of the config object (either
passed as an argument or loaded from `),d2e=a("code"),wtr=o("pretrained_model_name_or_path"),Atr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=a("code"),Ltr=o("pretrained_model_name_or_path"),ytr=o(":"),xtr=l(),Oo=a("ul"),A6=a("li"),f2e=a("strong"),$tr=o("bert"),ktr=o(" \u2014 "),WQ=a("a"),Str=o("BertForNextSentencePrediction"),Rtr=o(" (BERT model)"),Ptr=l(),L6=a("li"),m2e=a("strong"),Btr=o("fnet"),Itr=o(" \u2014 "),QQ=a("a"),Ntr=o("FNetForNextSentencePrediction"),qtr=o(" (FNet model)"),jtr=l(),y6=a("li"),g2e=a("strong"),Dtr=o("megatron-bert"),Gtr=o(" \u2014 "),UQ=a("a"),Otr=o("MegatronBertForNextSentencePrediction"),Vtr=o(" (Megatron-BERT model)"),Xtr=l(),x6=a("li"),h2e=a("strong"),ztr=o("mobilebert"),Wtr=o(" \u2014 "),HQ=a("a"),Qtr=o("MobileBertForNextSentencePrediction"),Utr=o(" (MobileBERT model)"),Htr=l(),$6=a("li"),p2e=a("strong"),Jtr=o("nezha"),Ytr=o(" \u2014 "),JQ=a("a"),Ktr=o("NezhaForNextSentencePrediction"),Ztr=o(" (Nezha model)"),ear=l(),k6=a("li"),_2e=a("strong"),oar=o("qdqbert"),rar=o(" \u2014 "),YQ=a("a"),tar=o("QDQBertForNextSentencePrediction"),aar=o(" (QDQBert model)"),nar=l(),S6=a("p"),sar=o("The model is set in evaluation mode by default using "),u2e=a("code"),lar=o("model.eval()"),iar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b2e=a("code"),dar=o("model.train()"),car=l(),F(R6.$$.fragment),cHe=l(),Bd=a("h2"),P6=a("a"),v2e=a("span"),F(H9.$$.fragment),far=l(),F2e=a("span"),mar=o("AutoModelForTokenClassification"),fHe=l(),Vo=a("div"),F(J9.$$.fragment),gar=l(),Id=a("p"),har=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),KQ=a("a"),par=o("from_pretrained()"),_ar=o(" class method or the "),ZQ=a("a"),uar=o("from_config()"),bar=o(` class
method.`),Far=l(),Y9=a("p"),Tar=o("This class cannot be instantiated directly using "),T2e=a("code"),Mar=o("__init__()"),Ear=o(" (throws an error)."),Car=l(),Et=a("div"),F(K9.$$.fragment),war=l(),M2e=a("p"),Aar=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Lar=l(),Nd=a("p"),yar=o(`Note:
Loading a model from its configuration file does `),E2e=a("strong"),xar=o("not"),$ar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eU=a("a"),kar=o("from_pretrained()"),Sar=o(" to load the model weights."),Rar=l(),F(B6.$$.fragment),Par=l(),so=a("div"),F(Z9.$$.fragment),Bar=l(),C2e=a("p"),Iar=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Nar=l(),rn=a("p"),qar=o("The model class to instantiate is selected based on the "),w2e=a("code"),jar=o("model_type"),Dar=o(` property of the config object (either
passed as an argument or loaded from `),A2e=a("code"),Gar=o("pretrained_model_name_or_path"),Oar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=a("code"),Var=o("pretrained_model_name_or_path"),Xar=o(":"),zar=l(),H=a("ul"),I6=a("li"),y2e=a("strong"),War=o("albert"),Qar=o(" \u2014 "),oU=a("a"),Uar=o("AlbertForTokenClassification"),Har=o(" (ALBERT model)"),Jar=l(),N6=a("li"),x2e=a("strong"),Yar=o("bert"),Kar=o(" \u2014 "),rU=a("a"),Zar=o("BertForTokenClassification"),enr=o(" (BERT model)"),onr=l(),q6=a("li"),$2e=a("strong"),rnr=o("big_bird"),tnr=o(" \u2014 "),tU=a("a"),anr=o("BigBirdForTokenClassification"),nnr=o(" (BigBird model)"),snr=l(),j6=a("li"),k2e=a("strong"),lnr=o("bloom"),inr=o(" \u2014 "),aU=a("a"),dnr=o("BloomForTokenClassification"),cnr=o(" (BLOOM model)"),fnr=l(),D6=a("li"),S2e=a("strong"),mnr=o("camembert"),gnr=o(" \u2014 "),nU=a("a"),hnr=o("CamembertForTokenClassification"),pnr=o(" (CamemBERT model)"),_nr=l(),G6=a("li"),R2e=a("strong"),unr=o("canine"),bnr=o(" \u2014 "),sU=a("a"),vnr=o("CanineForTokenClassification"),Fnr=o(" (CANINE model)"),Tnr=l(),O6=a("li"),P2e=a("strong"),Mnr=o("convbert"),Enr=o(" \u2014 "),lU=a("a"),Cnr=o("ConvBertForTokenClassification"),wnr=o(" (ConvBERT model)"),Anr=l(),V6=a("li"),B2e=a("strong"),Lnr=o("data2vec-text"),ynr=o(" \u2014 "),iU=a("a"),xnr=o("Data2VecTextForTokenClassification"),$nr=o(" (Data2VecText model)"),knr=l(),X6=a("li"),I2e=a("strong"),Snr=o("deberta"),Rnr=o(" \u2014 "),dU=a("a"),Pnr=o("DebertaForTokenClassification"),Bnr=o(" (DeBERTa model)"),Inr=l(),z6=a("li"),N2e=a("strong"),Nnr=o("deberta-v2"),qnr=o(" \u2014 "),cU=a("a"),jnr=o("DebertaV2ForTokenClassification"),Dnr=o(" (DeBERTa-v2 model)"),Gnr=l(),W6=a("li"),q2e=a("strong"),Onr=o("distilbert"),Vnr=o(" \u2014 "),fU=a("a"),Xnr=o("DistilBertForTokenClassification"),znr=o(" (DistilBERT model)"),Wnr=l(),Q6=a("li"),j2e=a("strong"),Qnr=o("electra"),Unr=o(" \u2014 "),mU=a("a"),Hnr=o("ElectraForTokenClassification"),Jnr=o(" (ELECTRA model)"),Ynr=l(),U6=a("li"),D2e=a("strong"),Knr=o("flaubert"),Znr=o(" \u2014 "),gU=a("a"),esr=o("FlaubertForTokenClassification"),osr=o(" (FlauBERT model)"),rsr=l(),H6=a("li"),G2e=a("strong"),tsr=o("fnet"),asr=o(" \u2014 "),hU=a("a"),nsr=o("FNetForTokenClassification"),ssr=o(" (FNet model)"),lsr=l(),J6=a("li"),O2e=a("strong"),isr=o("funnel"),dsr=o(" \u2014 "),pU=a("a"),csr=o("FunnelForTokenClassification"),fsr=o(" (Funnel Transformer model)"),msr=l(),Y6=a("li"),V2e=a("strong"),gsr=o("gpt2"),hsr=o(" \u2014 "),_U=a("a"),psr=o("GPT2ForTokenClassification"),_sr=o(" (OpenAI GPT-2 model)"),usr=l(),K6=a("li"),X2e=a("strong"),bsr=o("ibert"),vsr=o(" \u2014 "),uU=a("a"),Fsr=o("IBertForTokenClassification"),Tsr=o(" (I-BERT model)"),Msr=l(),Z6=a("li"),z2e=a("strong"),Esr=o("layoutlm"),Csr=o(" \u2014 "),bU=a("a"),wsr=o("LayoutLMForTokenClassification"),Asr=o(" (LayoutLM model)"),Lsr=l(),eF=a("li"),W2e=a("strong"),ysr=o("layoutlmv2"),xsr=o(" \u2014 "),vU=a("a"),$sr=o("LayoutLMv2ForTokenClassification"),ksr=o(" (LayoutLMv2 model)"),Ssr=l(),oF=a("li"),Q2e=a("strong"),Rsr=o("layoutlmv3"),Psr=o(" \u2014 "),FU=a("a"),Bsr=o("LayoutLMv3ForTokenClassification"),Isr=o(" (LayoutLMv3 model)"),Nsr=l(),rF=a("li"),U2e=a("strong"),qsr=o("longformer"),jsr=o(" \u2014 "),TU=a("a"),Dsr=o("LongformerForTokenClassification"),Gsr=o(" (Longformer model)"),Osr=l(),tF=a("li"),H2e=a("strong"),Vsr=o("luke"),Xsr=o(" \u2014 "),MU=a("a"),zsr=o("LukeForTokenClassification"),Wsr=o(" (LUKE model)"),Qsr=l(),aF=a("li"),J2e=a("strong"),Usr=o("megatron-bert"),Hsr=o(" \u2014 "),EU=a("a"),Jsr=o("MegatronBertForTokenClassification"),Ysr=o(" (Megatron-BERT model)"),Ksr=l(),nF=a("li"),Y2e=a("strong"),Zsr=o("mobilebert"),elr=o(" \u2014 "),CU=a("a"),olr=o("MobileBertForTokenClassification"),rlr=o(" (MobileBERT model)"),tlr=l(),sF=a("li"),K2e=a("strong"),alr=o("mpnet"),nlr=o(" \u2014 "),wU=a("a"),slr=o("MPNetForTokenClassification"),llr=o(" (MPNet model)"),ilr=l(),lF=a("li"),Z2e=a("strong"),dlr=o("nezha"),clr=o(" \u2014 "),AU=a("a"),flr=o("NezhaForTokenClassification"),mlr=o(" (Nezha model)"),glr=l(),iF=a("li"),eve=a("strong"),hlr=o("nystromformer"),plr=o(" \u2014 "),LU=a("a"),_lr=o("NystromformerForTokenClassification"),ulr=o(" (Nystr\xF6mformer model)"),blr=l(),dF=a("li"),ove=a("strong"),vlr=o("qdqbert"),Flr=o(" \u2014 "),yU=a("a"),Tlr=o("QDQBertForTokenClassification"),Mlr=o(" (QDQBert model)"),Elr=l(),cF=a("li"),rve=a("strong"),Clr=o("rembert"),wlr=o(" \u2014 "),xU=a("a"),Alr=o("RemBertForTokenClassification"),Llr=o(" (RemBERT model)"),ylr=l(),fF=a("li"),tve=a("strong"),xlr=o("roberta"),$lr=o(" \u2014 "),$U=a("a"),klr=o("RobertaForTokenClassification"),Slr=o(" (RoBERTa model)"),Rlr=l(),mF=a("li"),ave=a("strong"),Plr=o("roformer"),Blr=o(" \u2014 "),kU=a("a"),Ilr=o("RoFormerForTokenClassification"),Nlr=o(" (RoFormer model)"),qlr=l(),gF=a("li"),nve=a("strong"),jlr=o("squeezebert"),Dlr=o(" \u2014 "),SU=a("a"),Glr=o("SqueezeBertForTokenClassification"),Olr=o(" (SqueezeBERT model)"),Vlr=l(),hF=a("li"),sve=a("strong"),Xlr=o("xlm"),zlr=o(" \u2014 "),RU=a("a"),Wlr=o("XLMForTokenClassification"),Qlr=o(" (XLM model)"),Ulr=l(),pF=a("li"),lve=a("strong"),Hlr=o("xlm-roberta"),Jlr=o(" \u2014 "),PU=a("a"),Ylr=o("XLMRobertaForTokenClassification"),Klr=o(" (XLM-RoBERTa model)"),Zlr=l(),_F=a("li"),ive=a("strong"),eir=o("xlm-roberta-xl"),oir=o(" \u2014 "),BU=a("a"),rir=o("XLMRobertaXLForTokenClassification"),tir=o(" (XLM-RoBERTa-XL model)"),air=l(),uF=a("li"),dve=a("strong"),nir=o("xlnet"),sir=o(" \u2014 "),IU=a("a"),lir=o("XLNetForTokenClassification"),iir=o(" (XLNet model)"),dir=l(),bF=a("li"),cve=a("strong"),cir=o("yoso"),fir=o(" \u2014 "),NU=a("a"),mir=o("YosoForTokenClassification"),gir=o(" (YOSO model)"),hir=l(),vF=a("p"),pir=o("The model is set in evaluation mode by default using "),fve=a("code"),_ir=o("model.eval()"),uir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mve=a("code"),bir=o("model.train()"),vir=l(),F(FF.$$.fragment),mHe=l(),qd=a("h2"),TF=a("a"),gve=a("span"),F(ex.$$.fragment),Fir=l(),hve=a("span"),Tir=o("AutoModelForQuestionAnswering"),gHe=l(),Xo=a("div"),F(ox.$$.fragment),Mir=l(),jd=a("p"),Eir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qU=a("a"),Cir=o("from_pretrained()"),wir=o(" class method or the "),jU=a("a"),Air=o("from_config()"),Lir=o(` class
method.`),yir=l(),rx=a("p"),xir=o("This class cannot be instantiated directly using "),pve=a("code"),$ir=o("__init__()"),kir=o(" (throws an error)."),Sir=l(),Ct=a("div"),F(tx.$$.fragment),Rir=l(),_ve=a("p"),Pir=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Bir=l(),Dd=a("p"),Iir=o(`Note:
Loading a model from its configuration file does `),uve=a("strong"),Nir=o("not"),qir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DU=a("a"),jir=o("from_pretrained()"),Dir=o(" to load the model weights."),Gir=l(),F(MF.$$.fragment),Oir=l(),lo=a("div"),F(ax.$$.fragment),Vir=l(),bve=a("p"),Xir=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zir=l(),tn=a("p"),Wir=o("The model class to instantiate is selected based on the "),vve=a("code"),Qir=o("model_type"),Uir=o(` property of the config object (either
passed as an argument or loaded from `),Fve=a("code"),Hir=o("pretrained_model_name_or_path"),Jir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tve=a("code"),Yir=o("pretrained_model_name_or_path"),Kir=o(":"),Zir=l(),V=a("ul"),EF=a("li"),Mve=a("strong"),edr=o("albert"),odr=o(" \u2014 "),GU=a("a"),rdr=o("AlbertForQuestionAnswering"),tdr=o(" (ALBERT model)"),adr=l(),CF=a("li"),Eve=a("strong"),ndr=o("bart"),sdr=o(" \u2014 "),OU=a("a"),ldr=o("BartForQuestionAnswering"),idr=o(" (BART model)"),ddr=l(),wF=a("li"),Cve=a("strong"),cdr=o("bert"),fdr=o(" \u2014 "),VU=a("a"),mdr=o("BertForQuestionAnswering"),gdr=o(" (BERT model)"),hdr=l(),AF=a("li"),wve=a("strong"),pdr=o("big_bird"),_dr=o(" \u2014 "),XU=a("a"),udr=o("BigBirdForQuestionAnswering"),bdr=o(" (BigBird model)"),vdr=l(),LF=a("li"),Ave=a("strong"),Fdr=o("bigbird_pegasus"),Tdr=o(" \u2014 "),zU=a("a"),Mdr=o("BigBirdPegasusForQuestionAnswering"),Edr=o(" (BigBird-Pegasus model)"),Cdr=l(),yF=a("li"),Lve=a("strong"),wdr=o("camembert"),Adr=o(" \u2014 "),WU=a("a"),Ldr=o("CamembertForQuestionAnswering"),ydr=o(" (CamemBERT model)"),xdr=l(),xF=a("li"),yve=a("strong"),$dr=o("canine"),kdr=o(" \u2014 "),QU=a("a"),Sdr=o("CanineForQuestionAnswering"),Rdr=o(" (CANINE model)"),Pdr=l(),$F=a("li"),xve=a("strong"),Bdr=o("convbert"),Idr=o(" \u2014 "),UU=a("a"),Ndr=o("ConvBertForQuestionAnswering"),qdr=o(" (ConvBERT model)"),jdr=l(),kF=a("li"),$ve=a("strong"),Ddr=o("data2vec-text"),Gdr=o(" \u2014 "),HU=a("a"),Odr=o("Data2VecTextForQuestionAnswering"),Vdr=o(" (Data2VecText model)"),Xdr=l(),SF=a("li"),kve=a("strong"),zdr=o("deberta"),Wdr=o(" \u2014 "),JU=a("a"),Qdr=o("DebertaForQuestionAnswering"),Udr=o(" (DeBERTa model)"),Hdr=l(),RF=a("li"),Sve=a("strong"),Jdr=o("deberta-v2"),Ydr=o(" \u2014 "),YU=a("a"),Kdr=o("DebertaV2ForQuestionAnswering"),Zdr=o(" (DeBERTa-v2 model)"),ecr=l(),PF=a("li"),Rve=a("strong"),ocr=o("distilbert"),rcr=o(" \u2014 "),KU=a("a"),tcr=o("DistilBertForQuestionAnswering"),acr=o(" (DistilBERT model)"),ncr=l(),BF=a("li"),Pve=a("strong"),scr=o("electra"),lcr=o(" \u2014 "),ZU=a("a"),icr=o("ElectraForQuestionAnswering"),dcr=o(" (ELECTRA model)"),ccr=l(),IF=a("li"),Bve=a("strong"),fcr=o("flaubert"),mcr=o(" \u2014 "),eH=a("a"),gcr=o("FlaubertForQuestionAnsweringSimple"),hcr=o(" (FlauBERT model)"),pcr=l(),NF=a("li"),Ive=a("strong"),_cr=o("fnet"),ucr=o(" \u2014 "),oH=a("a"),bcr=o("FNetForQuestionAnswering"),vcr=o(" (FNet model)"),Fcr=l(),qF=a("li"),Nve=a("strong"),Tcr=o("funnel"),Mcr=o(" \u2014 "),rH=a("a"),Ecr=o("FunnelForQuestionAnswering"),Ccr=o(" (Funnel Transformer model)"),wcr=l(),jF=a("li"),qve=a("strong"),Acr=o("gptj"),Lcr=o(" \u2014 "),tH=a("a"),ycr=o("GPTJForQuestionAnswering"),xcr=o(" (GPT-J model)"),$cr=l(),DF=a("li"),jve=a("strong"),kcr=o("ibert"),Scr=o(" \u2014 "),aH=a("a"),Rcr=o("IBertForQuestionAnswering"),Pcr=o(" (I-BERT model)"),Bcr=l(),GF=a("li"),Dve=a("strong"),Icr=o("layoutlmv2"),Ncr=o(" \u2014 "),nH=a("a"),qcr=o("LayoutLMv2ForQuestionAnswering"),jcr=o(" (LayoutLMv2 model)"),Dcr=l(),OF=a("li"),Gve=a("strong"),Gcr=o("layoutlmv3"),Ocr=o(" \u2014 "),sH=a("a"),Vcr=o("LayoutLMv3ForQuestionAnswering"),Xcr=o(" (LayoutLMv3 model)"),zcr=l(),VF=a("li"),Ove=a("strong"),Wcr=o("led"),Qcr=o(" \u2014 "),lH=a("a"),Ucr=o("LEDForQuestionAnswering"),Hcr=o(" (LED model)"),Jcr=l(),XF=a("li"),Vve=a("strong"),Ycr=o("longformer"),Kcr=o(" \u2014 "),iH=a("a"),Zcr=o("LongformerForQuestionAnswering"),efr=o(" (Longformer model)"),ofr=l(),zF=a("li"),Xve=a("strong"),rfr=o("luke"),tfr=o(" \u2014 "),dH=a("a"),afr=o("LukeForQuestionAnswering"),nfr=o(" (LUKE model)"),sfr=l(),WF=a("li"),zve=a("strong"),lfr=o("lxmert"),ifr=o(" \u2014 "),cH=a("a"),dfr=o("LxmertForQuestionAnswering"),cfr=o(" (LXMERT model)"),ffr=l(),QF=a("li"),Wve=a("strong"),mfr=o("mbart"),gfr=o(" \u2014 "),fH=a("a"),hfr=o("MBartForQuestionAnswering"),pfr=o(" (mBART model)"),_fr=l(),UF=a("li"),Qve=a("strong"),ufr=o("megatron-bert"),bfr=o(" \u2014 "),mH=a("a"),vfr=o("MegatronBertForQuestionAnswering"),Ffr=o(" (Megatron-BERT model)"),Tfr=l(),HF=a("li"),Uve=a("strong"),Mfr=o("mobilebert"),Efr=o(" \u2014 "),gH=a("a"),Cfr=o("MobileBertForQuestionAnswering"),wfr=o(" (MobileBERT model)"),Afr=l(),JF=a("li"),Hve=a("strong"),Lfr=o("mpnet"),yfr=o(" \u2014 "),hH=a("a"),xfr=o("MPNetForQuestionAnswering"),$fr=o(" (MPNet model)"),kfr=l(),YF=a("li"),Jve=a("strong"),Sfr=o("mvp"),Rfr=o(" \u2014 "),pH=a("a"),Pfr=o("MvpForQuestionAnswering"),Bfr=o(" (MVP model)"),Ifr=l(),KF=a("li"),Yve=a("strong"),Nfr=o("nezha"),qfr=o(" \u2014 "),_H=a("a"),jfr=o("NezhaForQuestionAnswering"),Dfr=o(" (Nezha model)"),Gfr=l(),ZF=a("li"),Kve=a("strong"),Ofr=o("nystromformer"),Vfr=o(" \u2014 "),uH=a("a"),Xfr=o("NystromformerForQuestionAnswering"),zfr=o(" (Nystr\xF6mformer model)"),Wfr=l(),eT=a("li"),Zve=a("strong"),Qfr=o("qdqbert"),Ufr=o(" \u2014 "),bH=a("a"),Hfr=o("QDQBertForQuestionAnswering"),Jfr=o(" (QDQBert model)"),Yfr=l(),oT=a("li"),e6e=a("strong"),Kfr=o("reformer"),Zfr=o(" \u2014 "),vH=a("a"),emr=o("ReformerForQuestionAnswering"),omr=o(" (Reformer model)"),rmr=l(),rT=a("li"),o6e=a("strong"),tmr=o("rembert"),amr=o(" \u2014 "),FH=a("a"),nmr=o("RemBertForQuestionAnswering"),smr=o(" (RemBERT model)"),lmr=l(),tT=a("li"),r6e=a("strong"),imr=o("roberta"),dmr=o(" \u2014 "),TH=a("a"),cmr=o("RobertaForQuestionAnswering"),fmr=o(" (RoBERTa model)"),mmr=l(),aT=a("li"),t6e=a("strong"),gmr=o("roformer"),hmr=o(" \u2014 "),MH=a("a"),pmr=o("RoFormerForQuestionAnswering"),_mr=o(" (RoFormer model)"),umr=l(),nT=a("li"),a6e=a("strong"),bmr=o("splinter"),vmr=o(" \u2014 "),EH=a("a"),Fmr=o("SplinterForQuestionAnswering"),Tmr=o(" (Splinter model)"),Mmr=l(),sT=a("li"),n6e=a("strong"),Emr=o("squeezebert"),Cmr=o(" \u2014 "),CH=a("a"),wmr=o("SqueezeBertForQuestionAnswering"),Amr=o(" (SqueezeBERT model)"),Lmr=l(),lT=a("li"),s6e=a("strong"),ymr=o("xlm"),xmr=o(" \u2014 "),wH=a("a"),$mr=o("XLMForQuestionAnsweringSimple"),kmr=o(" (XLM model)"),Smr=l(),iT=a("li"),l6e=a("strong"),Rmr=o("xlm-roberta"),Pmr=o(" \u2014 "),AH=a("a"),Bmr=o("XLMRobertaForQuestionAnswering"),Imr=o(" (XLM-RoBERTa model)"),Nmr=l(),dT=a("li"),i6e=a("strong"),qmr=o("xlm-roberta-xl"),jmr=o(" \u2014 "),LH=a("a"),Dmr=o("XLMRobertaXLForQuestionAnswering"),Gmr=o(" (XLM-RoBERTa-XL model)"),Omr=l(),cT=a("li"),d6e=a("strong"),Vmr=o("xlnet"),Xmr=o(" \u2014 "),yH=a("a"),zmr=o("XLNetForQuestionAnsweringSimple"),Wmr=o(" (XLNet model)"),Qmr=l(),fT=a("li"),c6e=a("strong"),Umr=o("yoso"),Hmr=o(" \u2014 "),xH=a("a"),Jmr=o("YosoForQuestionAnswering"),Ymr=o(" (YOSO model)"),Kmr=l(),mT=a("p"),Zmr=o("The model is set in evaluation mode by default using "),f6e=a("code"),egr=o("model.eval()"),ogr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m6e=a("code"),rgr=o("model.train()"),tgr=l(),F(gT.$$.fragment),hHe=l(),Gd=a("h2"),hT=a("a"),g6e=a("span"),F(nx.$$.fragment),agr=l(),h6e=a("span"),ngr=o("AutoModelForTableQuestionAnswering"),pHe=l(),zo=a("div"),F(sx.$$.fragment),sgr=l(),Od=a("p"),lgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),$H=a("a"),igr=o("from_pretrained()"),dgr=o(" class method or the "),kH=a("a"),cgr=o("from_config()"),fgr=o(` class
method.`),mgr=l(),lx=a("p"),ggr=o("This class cannot be instantiated directly using "),p6e=a("code"),hgr=o("__init__()"),pgr=o(" (throws an error)."),_gr=l(),wt=a("div"),F(ix.$$.fragment),ugr=l(),_6e=a("p"),bgr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),vgr=l(),Vd=a("p"),Fgr=o(`Note:
Loading a model from its configuration file does `),u6e=a("strong"),Tgr=o("not"),Mgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=a("a"),Egr=o("from_pretrained()"),Cgr=o(" to load the model weights."),wgr=l(),F(pT.$$.fragment),Agr=l(),io=a("div"),F(dx.$$.fragment),Lgr=l(),b6e=a("p"),ygr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xgr=l(),an=a("p"),$gr=o("The model class to instantiate is selected based on the "),v6e=a("code"),kgr=o("model_type"),Sgr=o(` property of the config object (either
passed as an argument or loaded from `),F6e=a("code"),Rgr=o("pretrained_model_name_or_path"),Pgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T6e=a("code"),Bgr=o("pretrained_model_name_or_path"),Igr=o(":"),Ngr=l(),M6e=a("ul"),_T=a("li"),E6e=a("strong"),qgr=o("tapas"),jgr=o(" \u2014 "),RH=a("a"),Dgr=o("TapasForQuestionAnswering"),Ggr=o(" (TAPAS model)"),Ogr=l(),uT=a("p"),Vgr=o("The model is set in evaluation mode by default using "),C6e=a("code"),Xgr=o("model.eval()"),zgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w6e=a("code"),Wgr=o("model.train()"),Qgr=l(),F(bT.$$.fragment),_He=l(),Xd=a("h2"),vT=a("a"),A6e=a("span"),F(cx.$$.fragment),Ugr=l(),L6e=a("span"),Hgr=o("AutoModelForImageClassification"),uHe=l(),Wo=a("div"),F(fx.$$.fragment),Jgr=l(),zd=a("p"),Ygr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),PH=a("a"),Kgr=o("from_pretrained()"),Zgr=o(" class method or the "),BH=a("a"),ehr=o("from_config()"),ohr=o(` class
method.`),rhr=l(),mx=a("p"),thr=o("This class cannot be instantiated directly using "),y6e=a("code"),ahr=o("__init__()"),nhr=o(" (throws an error)."),shr=l(),At=a("div"),F(gx.$$.fragment),lhr=l(),x6e=a("p"),ihr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dhr=l(),Wd=a("p"),chr=o(`Note:
Loading a model from its configuration file does `),$6e=a("strong"),fhr=o("not"),mhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),ghr=o("from_pretrained()"),hhr=o(" to load the model weights."),phr=l(),F(FT.$$.fragment),_hr=l(),co=a("div"),F(hx.$$.fragment),uhr=l(),k6e=a("p"),bhr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vhr=l(),nn=a("p"),Fhr=o("The model class to instantiate is selected based on the "),S6e=a("code"),Thr=o("model_type"),Mhr=o(` property of the config object (either
passed as an argument or loaded from `),R6e=a("code"),Ehr=o("pretrained_model_name_or_path"),Chr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=a("code"),whr=o("pretrained_model_name_or_path"),Ahr=o(":"),Lhr=l(),be=a("ul"),TT=a("li"),B6e=a("strong"),yhr=o("beit"),xhr=o(" \u2014 "),NH=a("a"),$hr=o("BeitForImageClassification"),khr=o(" (BEiT model)"),Shr=l(),MT=a("li"),I6e=a("strong"),Rhr=o("convnext"),Phr=o(" \u2014 "),qH=a("a"),Bhr=o("ConvNextForImageClassification"),Ihr=o(" (ConvNeXT model)"),Nhr=l(),ET=a("li"),N6e=a("strong"),qhr=o("cvt"),jhr=o(" \u2014 "),jH=a("a"),Dhr=o("CvtForImageClassification"),Ghr=o(" (CvT model)"),Ohr=l(),CT=a("li"),q6e=a("strong"),Vhr=o("data2vec-vision"),Xhr=o(" \u2014 "),DH=a("a"),zhr=o("Data2VecVisionForImageClassification"),Whr=o(" (Data2VecVision model)"),Qhr=l(),fl=a("li"),j6e=a("strong"),Uhr=o("deit"),Hhr=o(" \u2014 "),GH=a("a"),Jhr=o("DeiTForImageClassification"),Yhr=o(" or "),OH=a("a"),Khr=o("DeiTForImageClassificationWithTeacher"),Zhr=o(" (DeiT model)"),epr=l(),wT=a("li"),D6e=a("strong"),opr=o("imagegpt"),rpr=o(" \u2014 "),VH=a("a"),tpr=o("ImageGPTForImageClassification"),apr=o(" (ImageGPT model)"),npr=l(),ml=a("li"),G6e=a("strong"),spr=o("levit"),lpr=o(" \u2014 "),XH=a("a"),ipr=o("LevitForImageClassification"),dpr=o(" or "),zH=a("a"),cpr=o("LevitForImageClassificationWithTeacher"),fpr=o(" (LeViT model)"),mpr=l(),AT=a("li"),O6e=a("strong"),gpr=o("mobilevit"),hpr=o(" \u2014 "),WH=a("a"),ppr=o("MobileViTForImageClassification"),_pr=o(" (MobileViT model)"),upr=l(),Lt=a("li"),V6e=a("strong"),bpr=o("perceiver"),vpr=o(" \u2014 "),QH=a("a"),Fpr=o("PerceiverForImageClassificationLearned"),Tpr=o(" or "),UH=a("a"),Mpr=o("PerceiverForImageClassificationFourier"),Epr=o(" or "),HH=a("a"),Cpr=o("PerceiverForImageClassificationConvProcessing"),wpr=o(" (Perceiver model)"),Apr=l(),LT=a("li"),X6e=a("strong"),Lpr=o("poolformer"),ypr=o(" \u2014 "),JH=a("a"),xpr=o("PoolFormerForImageClassification"),$pr=o(" (PoolFormer model)"),kpr=l(),yT=a("li"),z6e=a("strong"),Spr=o("regnet"),Rpr=o(" \u2014 "),YH=a("a"),Ppr=o("RegNetForImageClassification"),Bpr=o(" (RegNet model)"),Ipr=l(),xT=a("li"),W6e=a("strong"),Npr=o("resnet"),qpr=o(" \u2014 "),KH=a("a"),jpr=o("ResNetForImageClassification"),Dpr=o(" (ResNet model)"),Gpr=l(),$T=a("li"),Q6e=a("strong"),Opr=o("segformer"),Vpr=o(" \u2014 "),ZH=a("a"),Xpr=o("SegformerForImageClassification"),zpr=o(" (SegFormer model)"),Wpr=l(),kT=a("li"),U6e=a("strong"),Qpr=o("swin"),Upr=o(" \u2014 "),eJ=a("a"),Hpr=o("SwinForImageClassification"),Jpr=o(" (Swin Transformer model)"),Ypr=l(),ST=a("li"),H6e=a("strong"),Kpr=o("swinv2"),Zpr=o(" \u2014 "),oJ=a("a"),e_r=o("Swinv2ForImageClassification"),o_r=o(" (Swin Transformer V2 model)"),r_r=l(),RT=a("li"),J6e=a("strong"),t_r=o("van"),a_r=o(" \u2014 "),rJ=a("a"),n_r=o("VanForImageClassification"),s_r=o(" (VAN model)"),l_r=l(),PT=a("li"),Y6e=a("strong"),i_r=o("vit"),d_r=o(" \u2014 "),tJ=a("a"),c_r=o("ViTForImageClassification"),f_r=o(" (ViT model)"),m_r=l(),BT=a("p"),g_r=o("The model is set in evaluation mode by default using "),K6e=a("code"),h_r=o("model.eval()"),p_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z6e=a("code"),__r=o("model.train()"),u_r=l(),F(IT.$$.fragment),bHe=l(),Qd=a("h2"),NT=a("a"),eFe=a("span"),F(px.$$.fragment),b_r=l(),oFe=a("span"),v_r=o("AutoModelForVideoClassification"),vHe=l(),Qo=a("div"),F(_x.$$.fragment),F_r=l(),Ud=a("p"),T_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),aJ=a("a"),M_r=o("from_pretrained()"),E_r=o(" class method or the "),nJ=a("a"),C_r=o("from_config()"),w_r=o(` class
method.`),A_r=l(),ux=a("p"),L_r=o("This class cannot be instantiated directly using "),rFe=a("code"),y_r=o("__init__()"),x_r=o(" (throws an error)."),$_r=l(),yt=a("div"),F(bx.$$.fragment),k_r=l(),tFe=a("p"),S_r=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),R_r=l(),Hd=a("p"),P_r=o(`Note:
Loading a model from its configuration file does `),aFe=a("strong"),B_r=o("not"),I_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=a("a"),N_r=o("from_pretrained()"),q_r=o(" to load the model weights."),j_r=l(),F(qT.$$.fragment),D_r=l(),fo=a("div"),F(vx.$$.fragment),G_r=l(),nFe=a("p"),O_r=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),V_r=l(),sn=a("p"),X_r=o("The model class to instantiate is selected based on the "),sFe=a("code"),z_r=o("model_type"),W_r=o(` property of the config object (either
passed as an argument or loaded from `),lFe=a("code"),Q_r=o("pretrained_model_name_or_path"),U_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=a("code"),H_r=o("pretrained_model_name_or_path"),J_r=o(":"),Y_r=l(),dFe=a("ul"),jT=a("li"),cFe=a("strong"),K_r=o("videomae"),Z_r=o(" \u2014 "),lJ=a("a"),eur=o("VideoMAEForVideoClassification"),our=o(" (VideoMAE model)"),rur=l(),DT=a("p"),tur=o("The model is set in evaluation mode by default using "),fFe=a("code"),aur=o("model.eval()"),nur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mFe=a("code"),sur=o("model.train()"),lur=l(),F(GT.$$.fragment),FHe=l(),Jd=a("h2"),OT=a("a"),gFe=a("span"),F(Fx.$$.fragment),iur=l(),hFe=a("span"),dur=o("AutoModelForVision2Seq"),THe=l(),Uo=a("div"),F(Tx.$$.fragment),cur=l(),Yd=a("p"),fur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iJ=a("a"),mur=o("from_pretrained()"),gur=o(" class method or the "),dJ=a("a"),hur=o("from_config()"),pur=o(` class
method.`),_ur=l(),Mx=a("p"),uur=o("This class cannot be instantiated directly using "),pFe=a("code"),bur=o("__init__()"),vur=o(" (throws an error)."),Fur=l(),xt=a("div"),F(Ex.$$.fragment),Tur=l(),_Fe=a("p"),Mur=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Eur=l(),Kd=a("p"),Cur=o(`Note:
Loading a model from its configuration file does `),uFe=a("strong"),wur=o("not"),Aur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=a("a"),Lur=o("from_pretrained()"),yur=o(" to load the model weights."),xur=l(),F(VT.$$.fragment),$ur=l(),mo=a("div"),F(Cx.$$.fragment),kur=l(),bFe=a("p"),Sur=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Rur=l(),ln=a("p"),Pur=o("The model class to instantiate is selected based on the "),vFe=a("code"),Bur=o("model_type"),Iur=o(` property of the config object (either
passed as an argument or loaded from `),FFe=a("code"),Nur=o("pretrained_model_name_or_path"),qur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=a("code"),jur=o("pretrained_model_name_or_path"),Dur=o(":"),Gur=l(),MFe=a("ul"),XT=a("li"),EFe=a("strong"),Our=o("vision-encoder-decoder"),Vur=o(" \u2014 "),fJ=a("a"),Xur=o("VisionEncoderDecoderModel"),zur=o(" (Vision Encoder decoder model)"),Wur=l(),zT=a("p"),Qur=o("The model is set in evaluation mode by default using "),CFe=a("code"),Uur=o("model.eval()"),Hur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wFe=a("code"),Jur=o("model.train()"),Yur=l(),F(WT.$$.fragment),MHe=l(),Zd=a("h2"),QT=a("a"),AFe=a("span"),F(wx.$$.fragment),Kur=l(),LFe=a("span"),Zur=o("AutoModelForVisualQuestionAnswering"),EHe=l(),Ho=a("div"),F(Ax.$$.fragment),e1r=l(),ec=a("p"),o1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),mJ=a("a"),r1r=o("from_pretrained()"),t1r=o(" class method or the "),gJ=a("a"),a1r=o("from_config()"),n1r=o(` class
method.`),s1r=l(),Lx=a("p"),l1r=o("This class cannot be instantiated directly using "),yFe=a("code"),i1r=o("__init__()"),d1r=o(" (throws an error)."),c1r=l(),$t=a("div"),F(yx.$$.fragment),f1r=l(),xFe=a("p"),m1r=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),g1r=l(),oc=a("p"),h1r=o(`Note:
Loading a model from its configuration file does `),$Fe=a("strong"),p1r=o("not"),_1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),u1r=o("from_pretrained()"),b1r=o(" to load the model weights."),v1r=l(),F(UT.$$.fragment),F1r=l(),go=a("div"),F(xx.$$.fragment),T1r=l(),kFe=a("p"),M1r=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),E1r=l(),dn=a("p"),C1r=o("The model class to instantiate is selected based on the "),SFe=a("code"),w1r=o("model_type"),A1r=o(` property of the config object (either
passed as an argument or loaded from `),RFe=a("code"),L1r=o("pretrained_model_name_or_path"),y1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=a("code"),x1r=o("pretrained_model_name_or_path"),$1r=o(":"),k1r=l(),BFe=a("ul"),HT=a("li"),IFe=a("strong"),S1r=o("vilt"),R1r=o(" \u2014 "),pJ=a("a"),P1r=o("ViltForQuestionAnswering"),B1r=o(" (ViLT model)"),I1r=l(),JT=a("p"),N1r=o("The model is set in evaluation mode by default using "),NFe=a("code"),q1r=o("model.eval()"),j1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qFe=a("code"),D1r=o("model.train()"),G1r=l(),F(YT.$$.fragment),CHe=l(),rc=a("h2"),KT=a("a"),jFe=a("span"),F($x.$$.fragment),O1r=l(),DFe=a("span"),V1r=o("AutoModelForAudioClassification"),wHe=l(),Jo=a("div"),F(kx.$$.fragment),X1r=l(),tc=a("p"),z1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),_J=a("a"),W1r=o("from_pretrained()"),Q1r=o(" class method or the "),uJ=a("a"),U1r=o("from_config()"),H1r=o(` class
method.`),J1r=l(),Sx=a("p"),Y1r=o("This class cannot be instantiated directly using "),GFe=a("code"),K1r=o("__init__()"),Z1r=o(" (throws an error)."),e8r=l(),kt=a("div"),F(Rx.$$.fragment),o8r=l(),OFe=a("p"),r8r=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),t8r=l(),ac=a("p"),a8r=o(`Note:
Loading a model from its configuration file does `),VFe=a("strong"),n8r=o("not"),s8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=a("a"),l8r=o("from_pretrained()"),i8r=o(" to load the model weights."),d8r=l(),F(ZT.$$.fragment),c8r=l(),ho=a("div"),F(Px.$$.fragment),f8r=l(),XFe=a("p"),m8r=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),g8r=l(),cn=a("p"),h8r=o("The model class to instantiate is selected based on the "),zFe=a("code"),p8r=o("model_type"),_8r=o(` property of the config object (either
passed as an argument or loaded from `),WFe=a("code"),u8r=o("pretrained_model_name_or_path"),b8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=a("code"),v8r=o("pretrained_model_name_or_path"),F8r=o(":"),T8r=l(),Pe=a("ul"),eM=a("li"),UFe=a("strong"),M8r=o("data2vec-audio"),E8r=o(" \u2014 "),vJ=a("a"),C8r=o("Data2VecAudioForSequenceClassification"),w8r=o(" (Data2VecAudio model)"),A8r=l(),oM=a("li"),HFe=a("strong"),L8r=o("hubert"),y8r=o(" \u2014 "),FJ=a("a"),x8r=o("HubertForSequenceClassification"),$8r=o(" (Hubert model)"),k8r=l(),rM=a("li"),JFe=a("strong"),S8r=o("sew"),R8r=o(" \u2014 "),TJ=a("a"),P8r=o("SEWForSequenceClassification"),B8r=o(" (SEW model)"),I8r=l(),tM=a("li"),YFe=a("strong"),N8r=o("sew-d"),q8r=o(" \u2014 "),MJ=a("a"),j8r=o("SEWDForSequenceClassification"),D8r=o(" (SEW-D model)"),G8r=l(),aM=a("li"),KFe=a("strong"),O8r=o("unispeech"),V8r=o(" \u2014 "),EJ=a("a"),X8r=o("UniSpeechForSequenceClassification"),z8r=o(" (UniSpeech model)"),W8r=l(),nM=a("li"),ZFe=a("strong"),Q8r=o("unispeech-sat"),U8r=o(" \u2014 "),CJ=a("a"),H8r=o("UniSpeechSatForSequenceClassification"),J8r=o(" (UniSpeechSat model)"),Y8r=l(),sM=a("li"),eTe=a("strong"),K8r=o("wav2vec2"),Z8r=o(" \u2014 "),wJ=a("a"),ebr=o("Wav2Vec2ForSequenceClassification"),obr=o(" (Wav2Vec2 model)"),rbr=l(),lM=a("li"),oTe=a("strong"),tbr=o("wav2vec2-conformer"),abr=o(" \u2014 "),AJ=a("a"),nbr=o("Wav2Vec2ConformerForSequenceClassification"),sbr=o(" (Wav2Vec2-Conformer model)"),lbr=l(),iM=a("li"),rTe=a("strong"),ibr=o("wavlm"),dbr=o(" \u2014 "),LJ=a("a"),cbr=o("WavLMForSequenceClassification"),fbr=o(" (WavLM model)"),mbr=l(),dM=a("p"),gbr=o("The model is set in evaluation mode by default using "),tTe=a("code"),hbr=o("model.eval()"),pbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aTe=a("code"),_br=o("model.train()"),ubr=l(),F(cM.$$.fragment),AHe=l(),nc=a("h2"),fM=a("a"),nTe=a("span"),F(Bx.$$.fragment),bbr=l(),sTe=a("span"),vbr=o("AutoModelForAudioFrameClassification"),LHe=l(),Yo=a("div"),F(Ix.$$.fragment),Fbr=l(),sc=a("p"),Tbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),yJ=a("a"),Mbr=o("from_pretrained()"),Ebr=o(" class method or the "),xJ=a("a"),Cbr=o("from_config()"),wbr=o(` class
method.`),Abr=l(),Nx=a("p"),Lbr=o("This class cannot be instantiated directly using "),lTe=a("code"),ybr=o("__init__()"),xbr=o(" (throws an error)."),$br=l(),St=a("div"),F(qx.$$.fragment),kbr=l(),iTe=a("p"),Sbr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Rbr=l(),lc=a("p"),Pbr=o(`Note:
Loading a model from its configuration file does `),dTe=a("strong"),Bbr=o("not"),Ibr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=a("a"),Nbr=o("from_pretrained()"),qbr=o(" to load the model weights."),jbr=l(),F(mM.$$.fragment),Dbr=l(),po=a("div"),F(jx.$$.fragment),Gbr=l(),cTe=a("p"),Obr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Vbr=l(),fn=a("p"),Xbr=o("The model class to instantiate is selected based on the "),fTe=a("code"),zbr=o("model_type"),Wbr=o(` property of the config object (either
passed as an argument or loaded from `),mTe=a("code"),Qbr=o("pretrained_model_name_or_path"),Ubr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gTe=a("code"),Hbr=o("pretrained_model_name_or_path"),Jbr=o(":"),Ybr=l(),it=a("ul"),gM=a("li"),hTe=a("strong"),Kbr=o("data2vec-audio"),Zbr=o(" \u2014 "),kJ=a("a"),e2r=o("Data2VecAudioForAudioFrameClassification"),o2r=o(" (Data2VecAudio model)"),r2r=l(),hM=a("li"),pTe=a("strong"),t2r=o("unispeech-sat"),a2r=o(" \u2014 "),SJ=a("a"),n2r=o("UniSpeechSatForAudioFrameClassification"),s2r=o(" (UniSpeechSat model)"),l2r=l(),pM=a("li"),_Te=a("strong"),i2r=o("wav2vec2"),d2r=o(" \u2014 "),RJ=a("a"),c2r=o("Wav2Vec2ForAudioFrameClassification"),f2r=o(" (Wav2Vec2 model)"),m2r=l(),_M=a("li"),uTe=a("strong"),g2r=o("wav2vec2-conformer"),h2r=o(" \u2014 "),PJ=a("a"),p2r=o("Wav2Vec2ConformerForAudioFrameClassification"),_2r=o(" (Wav2Vec2-Conformer model)"),u2r=l(),uM=a("li"),bTe=a("strong"),b2r=o("wavlm"),v2r=o(" \u2014 "),BJ=a("a"),F2r=o("WavLMForAudioFrameClassification"),T2r=o(" (WavLM model)"),M2r=l(),bM=a("p"),E2r=o("The model is set in evaluation mode by default using "),vTe=a("code"),C2r=o("model.eval()"),w2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FTe=a("code"),A2r=o("model.train()"),L2r=l(),F(vM.$$.fragment),yHe=l(),ic=a("h2"),FM=a("a"),TTe=a("span"),F(Dx.$$.fragment),y2r=l(),MTe=a("span"),x2r=o("AutoModelForCTC"),xHe=l(),Ko=a("div"),F(Gx.$$.fragment),$2r=l(),dc=a("p"),k2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),IJ=a("a"),S2r=o("from_pretrained()"),R2r=o(" class method or the "),NJ=a("a"),P2r=o("from_config()"),B2r=o(` class
method.`),I2r=l(),Ox=a("p"),N2r=o("This class cannot be instantiated directly using "),ETe=a("code"),q2r=o("__init__()"),j2r=o(" (throws an error)."),D2r=l(),Rt=a("div"),F(Vx.$$.fragment),G2r=l(),CTe=a("p"),O2r=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),V2r=l(),cc=a("p"),X2r=o(`Note:
Loading a model from its configuration file does `),wTe=a("strong"),z2r=o("not"),W2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=a("a"),Q2r=o("from_pretrained()"),U2r=o(" to load the model weights."),H2r=l(),F(TM.$$.fragment),J2r=l(),_o=a("div"),F(Xx.$$.fragment),Y2r=l(),ATe=a("p"),K2r=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Z2r=l(),mn=a("p"),evr=o("The model class to instantiate is selected based on the "),LTe=a("code"),ovr=o("model_type"),rvr=o(` property of the config object (either
passed as an argument or loaded from `),yTe=a("code"),tvr=o("pretrained_model_name_or_path"),avr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=a("code"),nvr=o("pretrained_model_name_or_path"),svr=o(":"),lvr=l(),Le=a("ul"),MM=a("li"),$Te=a("strong"),ivr=o("data2vec-audio"),dvr=o(" \u2014 "),jJ=a("a"),cvr=o("Data2VecAudioForCTC"),fvr=o(" (Data2VecAudio model)"),mvr=l(),EM=a("li"),kTe=a("strong"),gvr=o("hubert"),hvr=o(" \u2014 "),DJ=a("a"),pvr=o("HubertForCTC"),_vr=o(" (Hubert model)"),uvr=l(),CM=a("li"),STe=a("strong"),bvr=o("mctct"),vvr=o(" \u2014 "),GJ=a("a"),Fvr=o("MCTCTForCTC"),Tvr=o(" (M-CTC-T model)"),Mvr=l(),wM=a("li"),RTe=a("strong"),Evr=o("sew"),Cvr=o(" \u2014 "),OJ=a("a"),wvr=o("SEWForCTC"),Avr=o(" (SEW model)"),Lvr=l(),AM=a("li"),PTe=a("strong"),yvr=o("sew-d"),xvr=o(" \u2014 "),VJ=a("a"),$vr=o("SEWDForCTC"),kvr=o(" (SEW-D model)"),Svr=l(),LM=a("li"),BTe=a("strong"),Rvr=o("unispeech"),Pvr=o(" \u2014 "),XJ=a("a"),Bvr=o("UniSpeechForCTC"),Ivr=o(" (UniSpeech model)"),Nvr=l(),yM=a("li"),ITe=a("strong"),qvr=o("unispeech-sat"),jvr=o(" \u2014 "),zJ=a("a"),Dvr=o("UniSpeechSatForCTC"),Gvr=o(" (UniSpeechSat model)"),Ovr=l(),xM=a("li"),NTe=a("strong"),Vvr=o("wav2vec2"),Xvr=o(" \u2014 "),WJ=a("a"),zvr=o("Wav2Vec2ForCTC"),Wvr=o(" (Wav2Vec2 model)"),Qvr=l(),$M=a("li"),qTe=a("strong"),Uvr=o("wav2vec2-conformer"),Hvr=o(" \u2014 "),QJ=a("a"),Jvr=o("Wav2Vec2ConformerForCTC"),Yvr=o(" (Wav2Vec2-Conformer model)"),Kvr=l(),kM=a("li"),jTe=a("strong"),Zvr=o("wavlm"),e6r=o(" \u2014 "),UJ=a("a"),o6r=o("WavLMForCTC"),r6r=o(" (WavLM model)"),t6r=l(),SM=a("p"),a6r=o("The model is set in evaluation mode by default using "),DTe=a("code"),n6r=o("model.eval()"),s6r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GTe=a("code"),l6r=o("model.train()"),i6r=l(),F(RM.$$.fragment),$He=l(),fc=a("h2"),PM=a("a"),OTe=a("span"),F(zx.$$.fragment),d6r=l(),VTe=a("span"),c6r=o("AutoModelForSpeechSeq2Seq"),kHe=l(),Zo=a("div"),F(Wx.$$.fragment),f6r=l(),mc=a("p"),m6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),HJ=a("a"),g6r=o("from_pretrained()"),h6r=o(" class method or the "),JJ=a("a"),p6r=o("from_config()"),_6r=o(` class
method.`),u6r=l(),Qx=a("p"),b6r=o("This class cannot be instantiated directly using "),XTe=a("code"),v6r=o("__init__()"),F6r=o(" (throws an error)."),T6r=l(),Pt=a("div"),F(Ux.$$.fragment),M6r=l(),zTe=a("p"),E6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),C6r=l(),gc=a("p"),w6r=o(`Note:
Loading a model from its configuration file does `),WTe=a("strong"),A6r=o("not"),L6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=a("a"),y6r=o("from_pretrained()"),x6r=o(" to load the model weights."),$6r=l(),F(BM.$$.fragment),k6r=l(),uo=a("div"),F(Hx.$$.fragment),S6r=l(),QTe=a("p"),R6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),P6r=l(),gn=a("p"),B6r=o("The model class to instantiate is selected based on the "),UTe=a("code"),I6r=o("model_type"),N6r=o(` property of the config object (either
passed as an argument or loaded from `),HTe=a("code"),q6r=o("pretrained_model_name_or_path"),j6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=a("code"),D6r=o("pretrained_model_name_or_path"),G6r=o(":"),O6r=l(),Jx=a("ul"),IM=a("li"),YTe=a("strong"),V6r=o("speech-encoder-decoder"),X6r=o(" \u2014 "),KJ=a("a"),z6r=o("SpeechEncoderDecoderModel"),W6r=o(" (Speech Encoder decoder model)"),Q6r=l(),NM=a("li"),KTe=a("strong"),U6r=o("speech_to_text"),H6r=o(" \u2014 "),ZJ=a("a"),J6r=o("Speech2TextForConditionalGeneration"),Y6r=o(" (Speech2Text model)"),K6r=l(),qM=a("p"),Z6r=o("The model is set in evaluation mode by default using "),ZTe=a("code"),eFr=o("model.eval()"),oFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eMe=a("code"),rFr=o("model.train()"),tFr=l(),F(jM.$$.fragment),SHe=l(),hc=a("h2"),DM=a("a"),oMe=a("span"),F(Yx.$$.fragment),aFr=l(),rMe=a("span"),nFr=o("AutoModelForAudioXVector"),RHe=l(),er=a("div"),F(Kx.$$.fragment),sFr=l(),pc=a("p"),lFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),eY=a("a"),iFr=o("from_pretrained()"),dFr=o(" class method or the "),oY=a("a"),cFr=o("from_config()"),fFr=o(` class
method.`),mFr=l(),Zx=a("p"),gFr=o("This class cannot be instantiated directly using "),tMe=a("code"),hFr=o("__init__()"),pFr=o(" (throws an error)."),_Fr=l(),Bt=a("div"),F(e$.$$.fragment),uFr=l(),aMe=a("p"),bFr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),vFr=l(),_c=a("p"),FFr=o(`Note:
Loading a model from its configuration file does `),nMe=a("strong"),TFr=o("not"),MFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=a("a"),EFr=o("from_pretrained()"),CFr=o(" to load the model weights."),wFr=l(),F(GM.$$.fragment),AFr=l(),bo=a("div"),F(o$.$$.fragment),LFr=l(),sMe=a("p"),yFr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),xFr=l(),hn=a("p"),$Fr=o("The model class to instantiate is selected based on the "),lMe=a("code"),kFr=o("model_type"),SFr=o(` property of the config object (either
passed as an argument or loaded from `),iMe=a("code"),RFr=o("pretrained_model_name_or_path"),PFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=a("code"),BFr=o("pretrained_model_name_or_path"),IFr=o(":"),NFr=l(),dt=a("ul"),OM=a("li"),cMe=a("strong"),qFr=o("data2vec-audio"),jFr=o(" \u2014 "),tY=a("a"),DFr=o("Data2VecAudioForXVector"),GFr=o(" (Data2VecAudio model)"),OFr=l(),VM=a("li"),fMe=a("strong"),VFr=o("unispeech-sat"),XFr=o(" \u2014 "),aY=a("a"),zFr=o("UniSpeechSatForXVector"),WFr=o(" (UniSpeechSat model)"),QFr=l(),XM=a("li"),mMe=a("strong"),UFr=o("wav2vec2"),HFr=o(" \u2014 "),nY=a("a"),JFr=o("Wav2Vec2ForXVector"),YFr=o(" (Wav2Vec2 model)"),KFr=l(),zM=a("li"),gMe=a("strong"),ZFr=o("wav2vec2-conformer"),eTr=o(" \u2014 "),sY=a("a"),oTr=o("Wav2Vec2ConformerForXVector"),rTr=o(" (Wav2Vec2-Conformer model)"),tTr=l(),WM=a("li"),hMe=a("strong"),aTr=o("wavlm"),nTr=o(" \u2014 "),lY=a("a"),sTr=o("WavLMForXVector"),lTr=o(" (WavLM model)"),iTr=l(),QM=a("p"),dTr=o("The model is set in evaluation mode by default using "),pMe=a("code"),cTr=o("model.eval()"),fTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_Me=a("code"),mTr=o("model.train()"),gTr=l(),F(UM.$$.fragment),PHe=l(),uc=a("h2"),HM=a("a"),uMe=a("span"),F(r$.$$.fragment),hTr=l(),bMe=a("span"),pTr=o("AutoModelForMaskedImageModeling"),BHe=l(),or=a("div"),F(t$.$$.fragment),_Tr=l(),bc=a("p"),uTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),iY=a("a"),bTr=o("from_pretrained()"),vTr=o(" class method or the "),dY=a("a"),FTr=o("from_config()"),TTr=o(` class
method.`),MTr=l(),a$=a("p"),ETr=o("This class cannot be instantiated directly using "),vMe=a("code"),CTr=o("__init__()"),wTr=o(" (throws an error)."),ATr=l(),It=a("div"),F(n$.$$.fragment),LTr=l(),FMe=a("p"),yTr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),xTr=l(),vc=a("p"),$Tr=o(`Note:
Loading a model from its configuration file does `),TMe=a("strong"),kTr=o("not"),STr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=a("a"),RTr=o("from_pretrained()"),PTr=o(" to load the model weights."),BTr=l(),F(JM.$$.fragment),ITr=l(),vo=a("div"),F(s$.$$.fragment),NTr=l(),MMe=a("p"),qTr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),jTr=l(),pn=a("p"),DTr=o("The model class to instantiate is selected based on the "),EMe=a("code"),GTr=o("model_type"),OTr=o(` property of the config object (either
passed as an argument or loaded from `),CMe=a("code"),VTr=o("pretrained_model_name_or_path"),XTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=a("code"),zTr=o("pretrained_model_name_or_path"),WTr=o(":"),QTr=l(),_n=a("ul"),YM=a("li"),AMe=a("strong"),UTr=o("deit"),HTr=o(" \u2014 "),fY=a("a"),JTr=o("DeiTForMaskedImageModeling"),YTr=o(" (DeiT model)"),KTr=l(),KM=a("li"),LMe=a("strong"),ZTr=o("swin"),eMr=o(" \u2014 "),mY=a("a"),oMr=o("SwinForMaskedImageModeling"),rMr=o(" (Swin Transformer model)"),tMr=l(),ZM=a("li"),yMe=a("strong"),aMr=o("swinv2"),nMr=o(" \u2014 "),gY=a("a"),sMr=o("Swinv2ForMaskedImageModeling"),lMr=o(" (Swin Transformer V2 model)"),iMr=l(),eE=a("li"),xMe=a("strong"),dMr=o("vit"),cMr=o(" \u2014 "),hY=a("a"),fMr=o("ViTForMaskedImageModeling"),mMr=o(" (ViT model)"),gMr=l(),oE=a("p"),hMr=o("The model is set in evaluation mode by default using "),$Me=a("code"),pMr=o("model.eval()"),_Mr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kMe=a("code"),uMr=o("model.train()"),bMr=l(),F(rE.$$.fragment),IHe=l(),Fc=a("h2"),tE=a("a"),SMe=a("span"),F(l$.$$.fragment),vMr=l(),RMe=a("span"),FMr=o("AutoModelForObjectDetection"),NHe=l(),rr=a("div"),F(i$.$$.fragment),TMr=l(),Tc=a("p"),MMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),pY=a("a"),EMr=o("from_pretrained()"),CMr=o(" class method or the "),_Y=a("a"),wMr=o("from_config()"),AMr=o(` class
method.`),LMr=l(),d$=a("p"),yMr=o("This class cannot be instantiated directly using "),PMe=a("code"),xMr=o("__init__()"),$Mr=o(" (throws an error)."),kMr=l(),Nt=a("div"),F(c$.$$.fragment),SMr=l(),BMe=a("p"),RMr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),PMr=l(),Mc=a("p"),BMr=o(`Note:
Loading a model from its configuration file does `),IMe=a("strong"),IMr=o("not"),NMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=a("a"),qMr=o("from_pretrained()"),jMr=o(" to load the model weights."),DMr=l(),F(aE.$$.fragment),GMr=l(),Fo=a("div"),F(f$.$$.fragment),OMr=l(),NMe=a("p"),VMr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),XMr=l(),un=a("p"),zMr=o("The model class to instantiate is selected based on the "),qMe=a("code"),WMr=o("model_type"),QMr=o(` property of the config object (either
passed as an argument or loaded from `),jMe=a("code"),UMr=o("pretrained_model_name_or_path"),HMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DMe=a("code"),JMr=o("pretrained_model_name_or_path"),YMr=o(":"),KMr=l(),m$=a("ul"),nE=a("li"),GMe=a("strong"),ZMr=o("detr"),eEr=o(" \u2014 "),bY=a("a"),oEr=o("DetrForObjectDetection"),rEr=o(" (DETR model)"),tEr=l(),sE=a("li"),OMe=a("strong"),aEr=o("yolos"),nEr=o(" \u2014 "),vY=a("a"),sEr=o("YolosForObjectDetection"),lEr=o(" (YOLOS model)"),iEr=l(),lE=a("p"),dEr=o("The model is set in evaluation mode by default using "),VMe=a("code"),cEr=o("model.eval()"),fEr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),XMe=a("code"),mEr=o("model.train()"),gEr=l(),F(iE.$$.fragment),qHe=l(),Ec=a("h2"),dE=a("a"),zMe=a("span"),F(g$.$$.fragment),hEr=l(),WMe=a("span"),pEr=o("AutoModelForImageSegmentation"),jHe=l(),tr=a("div"),F(h$.$$.fragment),_Er=l(),Cc=a("p"),uEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),FY=a("a"),bEr=o("from_pretrained()"),vEr=o(" class method or the "),TY=a("a"),FEr=o("from_config()"),TEr=o(` class
method.`),MEr=l(),p$=a("p"),EEr=o("This class cannot be instantiated directly using "),QMe=a("code"),CEr=o("__init__()"),wEr=o(" (throws an error)."),AEr=l(),qt=a("div"),F(_$.$$.fragment),LEr=l(),UMe=a("p"),yEr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),xEr=l(),wc=a("p"),$Er=o(`Note:
Loading a model from its configuration file does `),HMe=a("strong"),kEr=o("not"),SEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MY=a("a"),REr=o("from_pretrained()"),PEr=o(" to load the model weights."),BEr=l(),F(cE.$$.fragment),IEr=l(),To=a("div"),F(u$.$$.fragment),NEr=l(),JMe=a("p"),qEr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),jEr=l(),bn=a("p"),DEr=o("The model class to instantiate is selected based on the "),YMe=a("code"),GEr=o("model_type"),OEr=o(` property of the config object (either
passed as an argument or loaded from `),KMe=a("code"),VEr=o("pretrained_model_name_or_path"),XEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZMe=a("code"),zEr=o("pretrained_model_name_or_path"),WEr=o(":"),QEr=l(),eEe=a("ul"),fE=a("li"),oEe=a("strong"),UEr=o("detr"),HEr=o(" \u2014 "),EY=a("a"),JEr=o("DetrForSegmentation"),YEr=o(" (DETR model)"),KEr=l(),mE=a("p"),ZEr=o("The model is set in evaluation mode by default using "),rEe=a("code"),e4r=o("model.eval()"),o4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tEe=a("code"),r4r=o("model.train()"),t4r=l(),F(gE.$$.fragment),DHe=l(),Ac=a("h2"),hE=a("a"),aEe=a("span"),F(b$.$$.fragment),a4r=l(),nEe=a("span"),n4r=o("AutoModelForSemanticSegmentation"),GHe=l(),ar=a("div"),F(v$.$$.fragment),s4r=l(),Lc=a("p"),l4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),CY=a("a"),i4r=o("from_pretrained()"),d4r=o(" class method or the "),wY=a("a"),c4r=o("from_config()"),f4r=o(` class
method.`),m4r=l(),F$=a("p"),g4r=o("This class cannot be instantiated directly using "),sEe=a("code"),h4r=o("__init__()"),p4r=o(" (throws an error)."),_4r=l(),jt=a("div"),F(T$.$$.fragment),u4r=l(),lEe=a("p"),b4r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),v4r=l(),yc=a("p"),F4r=o(`Note:
Loading a model from its configuration file does `),iEe=a("strong"),T4r=o("not"),M4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AY=a("a"),E4r=o("from_pretrained()"),C4r=o(" to load the model weights."),w4r=l(),F(pE.$$.fragment),A4r=l(),Mo=a("div"),F(M$.$$.fragment),L4r=l(),dEe=a("p"),y4r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),x4r=l(),vn=a("p"),$4r=o("The model class to instantiate is selected based on the "),cEe=a("code"),k4r=o("model_type"),S4r=o(` property of the config object (either
passed as an argument or loaded from `),fEe=a("code"),R4r=o("pretrained_model_name_or_path"),P4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mEe=a("code"),B4r=o("pretrained_model_name_or_path"),I4r=o(":"),N4r=l(),ct=a("ul"),_E=a("li"),gEe=a("strong"),q4r=o("beit"),j4r=o(" \u2014 "),LY=a("a"),D4r=o("BeitForSemanticSegmentation"),G4r=o(" (BEiT model)"),O4r=l(),uE=a("li"),hEe=a("strong"),V4r=o("data2vec-vision"),X4r=o(" \u2014 "),yY=a("a"),z4r=o("Data2VecVisionForSemanticSegmentation"),W4r=o(" (Data2VecVision model)"),Q4r=l(),bE=a("li"),pEe=a("strong"),U4r=o("dpt"),H4r=o(" \u2014 "),xY=a("a"),J4r=o("DPTForSemanticSegmentation"),Y4r=o(" (DPT model)"),K4r=l(),vE=a("li"),_Ee=a("strong"),Z4r=o("mobilevit"),eCr=o(" \u2014 "),$Y=a("a"),oCr=o("MobileViTForSemanticSegmentation"),rCr=o(" (MobileViT model)"),tCr=l(),FE=a("li"),uEe=a("strong"),aCr=o("segformer"),nCr=o(" \u2014 "),kY=a("a"),sCr=o("SegformerForSemanticSegmentation"),lCr=o(" (SegFormer model)"),iCr=l(),TE=a("p"),dCr=o("The model is set in evaluation mode by default using "),bEe=a("code"),cCr=o("model.eval()"),fCr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vEe=a("code"),mCr=o("model.train()"),gCr=l(),F(ME.$$.fragment),OHe=l(),xc=a("h2"),EE=a("a"),FEe=a("span"),F(E$.$$.fragment),hCr=l(),TEe=a("span"),pCr=o("AutoModelForInstanceSegmentation"),VHe=l(),nr=a("div"),F(C$.$$.fragment),_Cr=l(),$c=a("p"),uCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),SY=a("a"),bCr=o("from_pretrained()"),vCr=o(" class method or the "),RY=a("a"),FCr=o("from_config()"),TCr=o(` class
method.`),MCr=l(),w$=a("p"),ECr=o("This class cannot be instantiated directly using "),MEe=a("code"),CCr=o("__init__()"),wCr=o(" (throws an error)."),ACr=l(),Dt=a("div"),F(A$.$$.fragment),LCr=l(),EEe=a("p"),yCr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),xCr=l(),kc=a("p"),$Cr=o(`Note:
Loading a model from its configuration file does `),CEe=a("strong"),kCr=o("not"),SCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=a("a"),RCr=o("from_pretrained()"),PCr=o(" to load the model weights."),BCr=l(),F(CE.$$.fragment),ICr=l(),Eo=a("div"),F(L$.$$.fragment),NCr=l(),wEe=a("p"),qCr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),jCr=l(),Fn=a("p"),DCr=o("The model class to instantiate is selected based on the "),AEe=a("code"),GCr=o("model_type"),OCr=o(` property of the config object (either
passed as an argument or loaded from `),LEe=a("code"),VCr=o("pretrained_model_name_or_path"),XCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yEe=a("code"),zCr=o("pretrained_model_name_or_path"),WCr=o(":"),QCr=l(),xEe=a("ul"),wE=a("li"),$Ee=a("strong"),UCr=o("maskformer"),HCr=o(" \u2014 "),BY=a("a"),JCr=o("MaskFormerForInstanceSegmentation"),YCr=o(" (MaskFormer model)"),KCr=l(),AE=a("p"),ZCr=o("The model is set in evaluation mode by default using "),kEe=a("code"),e3r=o("model.eval()"),o3r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SEe=a("code"),r3r=o("model.train()"),t3r=l(),F(LE.$$.fragment),XHe=l(),Sc=a("h2"),yE=a("a"),REe=a("span"),F(y$.$$.fragment),a3r=l(),PEe=a("span"),n3r=o("TFAutoModel"),zHe=l(),sr=a("div"),F(x$.$$.fragment),s3r=l(),Rc=a("p"),l3r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),IY=a("a"),i3r=o("from_pretrained()"),d3r=o(" class method or the "),NY=a("a"),c3r=o("from_config()"),f3r=o(` class
method.`),m3r=l(),$$=a("p"),g3r=o("This class cannot be instantiated directly using "),BEe=a("code"),h3r=o("__init__()"),p3r=o(" (throws an error)."),_3r=l(),Gt=a("div"),F(k$.$$.fragment),u3r=l(),IEe=a("p"),b3r=o("Instantiates one of the base model classes of the library from a configuration."),v3r=l(),Pc=a("p"),F3r=o(`Note:
Loading a model from its configuration file does `),NEe=a("strong"),T3r=o("not"),M3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=a("a"),E3r=o("from_pretrained()"),C3r=o(" to load the model weights."),w3r=l(),F(xE.$$.fragment),A3r=l(),Br=a("div"),F(S$.$$.fragment),L3r=l(),qEe=a("p"),y3r=o("Instantiate one of the base model classes of the library from a pretrained model."),x3r=l(),Tn=a("p"),$3r=o("The model class to instantiate is selected based on the "),jEe=a("code"),k3r=o("model_type"),S3r=o(` property of the config object (either
passed as an argument or loaded from `),DEe=a("code"),R3r=o("pretrained_model_name_or_path"),P3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=a("code"),B3r=o("pretrained_model_name_or_path"),I3r=o(":"),N3r=l(),q=a("ul"),$E=a("li"),OEe=a("strong"),q3r=o("albert"),j3r=o(" \u2014 "),jY=a("a"),D3r=o("TFAlbertModel"),G3r=o(" (ALBERT model)"),O3r=l(),kE=a("li"),VEe=a("strong"),V3r=o("bart"),X3r=o(" \u2014 "),DY=a("a"),z3r=o("TFBartModel"),W3r=o(" (BART model)"),Q3r=l(),SE=a("li"),XEe=a("strong"),U3r=o("bert"),H3r=o(" \u2014 "),GY=a("a"),J3r=o("TFBertModel"),Y3r=o(" (BERT model)"),K3r=l(),RE=a("li"),zEe=a("strong"),Z3r=o("blenderbot"),e5r=o(" \u2014 "),OY=a("a"),o5r=o("TFBlenderbotModel"),r5r=o(" (Blenderbot model)"),t5r=l(),PE=a("li"),WEe=a("strong"),a5r=o("blenderbot-small"),n5r=o(" \u2014 "),VY=a("a"),s5r=o("TFBlenderbotSmallModel"),l5r=o(" (BlenderbotSmall model)"),i5r=l(),BE=a("li"),QEe=a("strong"),d5r=o("camembert"),c5r=o(" \u2014 "),XY=a("a"),f5r=o("TFCamembertModel"),m5r=o(" (CamemBERT model)"),g5r=l(),IE=a("li"),UEe=a("strong"),h5r=o("clip"),p5r=o(" \u2014 "),zY=a("a"),_5r=o("TFCLIPModel"),u5r=o(" (CLIP model)"),b5r=l(),NE=a("li"),HEe=a("strong"),v5r=o("convbert"),F5r=o(" \u2014 "),WY=a("a"),T5r=o("TFConvBertModel"),M5r=o(" (ConvBERT model)"),E5r=l(),qE=a("li"),JEe=a("strong"),C5r=o("convnext"),w5r=o(" \u2014 "),QY=a("a"),A5r=o("TFConvNextModel"),L5r=o(" (ConvNeXT model)"),y5r=l(),jE=a("li"),YEe=a("strong"),x5r=o("ctrl"),$5r=o(" \u2014 "),UY=a("a"),k5r=o("TFCTRLModel"),S5r=o(" (CTRL model)"),R5r=l(),DE=a("li"),KEe=a("strong"),P5r=o("data2vec-vision"),B5r=o(" \u2014 "),HY=a("a"),I5r=o("TFData2VecVisionModel"),N5r=o(" (Data2VecVision model)"),q5r=l(),GE=a("li"),ZEe=a("strong"),j5r=o("deberta"),D5r=o(" \u2014 "),JY=a("a"),G5r=o("TFDebertaModel"),O5r=o(" (DeBERTa model)"),V5r=l(),OE=a("li"),e4e=a("strong"),X5r=o("deberta-v2"),z5r=o(" \u2014 "),YY=a("a"),W5r=o("TFDebertaV2Model"),Q5r=o(" (DeBERTa-v2 model)"),U5r=l(),VE=a("li"),o4e=a("strong"),H5r=o("deit"),J5r=o(" \u2014 "),KY=a("a"),Y5r=o("TFDeiTModel"),K5r=o(" (DeiT model)"),Z5r=l(),XE=a("li"),r4e=a("strong"),e0r=o("distilbert"),o0r=o(" \u2014 "),ZY=a("a"),r0r=o("TFDistilBertModel"),t0r=o(" (DistilBERT model)"),a0r=l(),zE=a("li"),t4e=a("strong"),n0r=o("dpr"),s0r=o(" \u2014 "),eK=a("a"),l0r=o("TFDPRQuestionEncoder"),i0r=o(" (DPR model)"),d0r=l(),WE=a("li"),a4e=a("strong"),c0r=o("electra"),f0r=o(" \u2014 "),oK=a("a"),m0r=o("TFElectraModel"),g0r=o(" (ELECTRA model)"),h0r=l(),QE=a("li"),n4e=a("strong"),p0r=o("flaubert"),_0r=o(" \u2014 "),rK=a("a"),u0r=o("TFFlaubertModel"),b0r=o(" (FlauBERT model)"),v0r=l(),gl=a("li"),s4e=a("strong"),F0r=o("funnel"),T0r=o(" \u2014 "),tK=a("a"),M0r=o("TFFunnelModel"),E0r=o(" or "),aK=a("a"),C0r=o("TFFunnelBaseModel"),w0r=o(" (Funnel Transformer model)"),A0r=l(),UE=a("li"),l4e=a("strong"),L0r=o("gpt2"),y0r=o(" \u2014 "),nK=a("a"),x0r=o("TFGPT2Model"),$0r=o(" (OpenAI GPT-2 model)"),k0r=l(),HE=a("li"),i4e=a("strong"),S0r=o("gptj"),R0r=o(" \u2014 "),sK=a("a"),P0r=o("TFGPTJModel"),B0r=o(" (GPT-J model)"),I0r=l(),JE=a("li"),d4e=a("strong"),N0r=o("hubert"),q0r=o(" \u2014 "),lK=a("a"),j0r=o("TFHubertModel"),D0r=o(" (Hubert model)"),G0r=l(),YE=a("li"),c4e=a("strong"),O0r=o("layoutlm"),V0r=o(" \u2014 "),iK=a("a"),X0r=o("TFLayoutLMModel"),z0r=o(" (LayoutLM model)"),W0r=l(),KE=a("li"),f4e=a("strong"),Q0r=o("led"),U0r=o(" \u2014 "),dK=a("a"),H0r=o("TFLEDModel"),J0r=o(" (LED model)"),Y0r=l(),ZE=a("li"),m4e=a("strong"),K0r=o("longformer"),Z0r=o(" \u2014 "),cK=a("a"),ewr=o("TFLongformerModel"),owr=o(" (Longformer model)"),rwr=l(),e4=a("li"),g4e=a("strong"),twr=o("lxmert"),awr=o(" \u2014 "),fK=a("a"),nwr=o("TFLxmertModel"),swr=o(" (LXMERT model)"),lwr=l(),o4=a("li"),h4e=a("strong"),iwr=o("marian"),dwr=o(" \u2014 "),mK=a("a"),cwr=o("TFMarianModel"),fwr=o(" (Marian model)"),mwr=l(),r4=a("li"),p4e=a("strong"),gwr=o("mbart"),hwr=o(" \u2014 "),gK=a("a"),pwr=o("TFMBartModel"),_wr=o(" (mBART model)"),uwr=l(),t4=a("li"),_4e=a("strong"),bwr=o("mobilebert"),vwr=o(" \u2014 "),hK=a("a"),Fwr=o("TFMobileBertModel"),Twr=o(" (MobileBERT model)"),Mwr=l(),a4=a("li"),u4e=a("strong"),Ewr=o("mpnet"),Cwr=o(" \u2014 "),pK=a("a"),wwr=o("TFMPNetModel"),Awr=o(" (MPNet model)"),Lwr=l(),n4=a("li"),b4e=a("strong"),ywr=o("mt5"),xwr=o(" \u2014 "),_K=a("a"),$wr=o("TFMT5Model"),kwr=o(" (MT5 model)"),Swr=l(),s4=a("li"),v4e=a("strong"),Rwr=o("openai-gpt"),Pwr=o(" \u2014 "),uK=a("a"),Bwr=o("TFOpenAIGPTModel"),Iwr=o(" (OpenAI GPT model)"),Nwr=l(),l4=a("li"),F4e=a("strong"),qwr=o("opt"),jwr=o(" \u2014 "),bK=a("a"),Dwr=o("TFOPTModel"),Gwr=o(" (OPT model)"),Owr=l(),i4=a("li"),T4e=a("strong"),Vwr=o("pegasus"),Xwr=o(" \u2014 "),vK=a("a"),zwr=o("TFPegasusModel"),Wwr=o(" (Pegasus model)"),Qwr=l(),d4=a("li"),M4e=a("strong"),Uwr=o("regnet"),Hwr=o(" \u2014 "),FK=a("a"),Jwr=o("TFRegNetModel"),Ywr=o(" (RegNet model)"),Kwr=l(),c4=a("li"),E4e=a("strong"),Zwr=o("rembert"),eAr=o(" \u2014 "),TK=a("a"),oAr=o("TFRemBertModel"),rAr=o(" (RemBERT model)"),tAr=l(),f4=a("li"),C4e=a("strong"),aAr=o("resnet"),nAr=o(" \u2014 "),MK=a("a"),sAr=o("TFResNetModel"),lAr=o(" (ResNet model)"),iAr=l(),m4=a("li"),w4e=a("strong"),dAr=o("roberta"),cAr=o(" \u2014 "),EK=a("a"),fAr=o("TFRobertaModel"),mAr=o(" (RoBERTa model)"),gAr=l(),g4=a("li"),A4e=a("strong"),hAr=o("roformer"),pAr=o(" \u2014 "),CK=a("a"),_Ar=o("TFRoFormerModel"),uAr=o(" (RoFormer model)"),bAr=l(),h4=a("li"),L4e=a("strong"),vAr=o("segformer"),FAr=o(" \u2014 "),wK=a("a"),TAr=o("TFSegformerModel"),MAr=o(" (SegFormer model)"),EAr=l(),p4=a("li"),y4e=a("strong"),CAr=o("speech_to_text"),wAr=o(" \u2014 "),AK=a("a"),AAr=o("TFSpeech2TextModel"),LAr=o(" (Speech2Text model)"),yAr=l(),_4=a("li"),x4e=a("strong"),xAr=o("swin"),$Ar=o(" \u2014 "),LK=a("a"),kAr=o("TFSwinModel"),SAr=o(" (Swin Transformer model)"),RAr=l(),u4=a("li"),$4e=a("strong"),PAr=o("t5"),BAr=o(" \u2014 "),yK=a("a"),IAr=o("TFT5Model"),NAr=o(" (T5 model)"),qAr=l(),b4=a("li"),k4e=a("strong"),jAr=o("tapas"),DAr=o(" \u2014 "),xK=a("a"),GAr=o("TFTapasModel"),OAr=o(" (TAPAS model)"),VAr=l(),v4=a("li"),S4e=a("strong"),XAr=o("transfo-xl"),zAr=o(" \u2014 "),$K=a("a"),WAr=o("TFTransfoXLModel"),QAr=o(" (Transformer-XL model)"),UAr=l(),F4=a("li"),R4e=a("strong"),HAr=o("vit"),JAr=o(" \u2014 "),kK=a("a"),YAr=o("TFViTModel"),KAr=o(" (ViT model)"),ZAr=l(),T4=a("li"),P4e=a("strong"),e7r=o("vit_mae"),o7r=o(" \u2014 "),SK=a("a"),r7r=o("TFViTMAEModel"),t7r=o(" (ViTMAE model)"),a7r=l(),M4=a("li"),B4e=a("strong"),n7r=o("wav2vec2"),s7r=o(" \u2014 "),RK=a("a"),l7r=o("TFWav2Vec2Model"),i7r=o(" (Wav2Vec2 model)"),d7r=l(),E4=a("li"),I4e=a("strong"),c7r=o("xlm"),f7r=o(" \u2014 "),PK=a("a"),m7r=o("TFXLMModel"),g7r=o(" (XLM model)"),h7r=l(),C4=a("li"),N4e=a("strong"),p7r=o("xlm-roberta"),_7r=o(" \u2014 "),BK=a("a"),u7r=o("TFXLMRobertaModel"),b7r=o(" (XLM-RoBERTa model)"),v7r=l(),w4=a("li"),q4e=a("strong"),F7r=o("xlnet"),T7r=o(" \u2014 "),IK=a("a"),M7r=o("TFXLNetModel"),E7r=o(" (XLNet model)"),C7r=l(),F(A4.$$.fragment),WHe=l(),Bc=a("h2"),L4=a("a"),j4e=a("span"),F(R$.$$.fragment),w7r=l(),D4e=a("span"),A7r=o("TFAutoModelForPreTraining"),QHe=l(),lr=a("div"),F(P$.$$.fragment),L7r=l(),Ic=a("p"),y7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NK=a("a"),x7r=o("from_pretrained()"),$7r=o(" class method or the "),qK=a("a"),k7r=o("from_config()"),S7r=o(` class
method.`),R7r=l(),B$=a("p"),P7r=o("This class cannot be instantiated directly using "),G4e=a("code"),B7r=o("__init__()"),I7r=o(" (throws an error)."),N7r=l(),Ot=a("div"),F(I$.$$.fragment),q7r=l(),O4e=a("p"),j7r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),D7r=l(),Nc=a("p"),G7r=o(`Note:
Loading a model from its configuration file does `),V4e=a("strong"),O7r=o("not"),V7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),X7r=o("from_pretrained()"),z7r=o(" to load the model weights."),W7r=l(),F(y4.$$.fragment),Q7r=l(),Ir=a("div"),F(N$.$$.fragment),U7r=l(),X4e=a("p"),H7r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),J7r=l(),Mn=a("p"),Y7r=o("The model class to instantiate is selected based on the "),z4e=a("code"),K7r=o("model_type"),Z7r=o(` property of the config object (either
passed as an argument or loaded from `),W4e=a("code"),eLr=o("pretrained_model_name_or_path"),oLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=a("code"),rLr=o("pretrained_model_name_or_path"),tLr=o(":"),aLr=l(),se=a("ul"),x4=a("li"),U4e=a("strong"),nLr=o("albert"),sLr=o(" \u2014 "),DK=a("a"),lLr=o("TFAlbertForPreTraining"),iLr=o(" (ALBERT model)"),dLr=l(),$4=a("li"),H4e=a("strong"),cLr=o("bart"),fLr=o(" \u2014 "),GK=a("a"),mLr=o("TFBartForConditionalGeneration"),gLr=o(" (BART model)"),hLr=l(),k4=a("li"),J4e=a("strong"),pLr=o("bert"),_Lr=o(" \u2014 "),OK=a("a"),uLr=o("TFBertForPreTraining"),bLr=o(" (BERT model)"),vLr=l(),S4=a("li"),Y4e=a("strong"),FLr=o("camembert"),TLr=o(" \u2014 "),VK=a("a"),MLr=o("TFCamembertForMaskedLM"),ELr=o(" (CamemBERT model)"),CLr=l(),R4=a("li"),K4e=a("strong"),wLr=o("ctrl"),ALr=o(" \u2014 "),XK=a("a"),LLr=o("TFCTRLLMHeadModel"),yLr=o(" (CTRL model)"),xLr=l(),P4=a("li"),Z4e=a("strong"),$Lr=o("distilbert"),kLr=o(" \u2014 "),zK=a("a"),SLr=o("TFDistilBertForMaskedLM"),RLr=o(" (DistilBERT model)"),PLr=l(),B4=a("li"),eCe=a("strong"),BLr=o("electra"),ILr=o(" \u2014 "),WK=a("a"),NLr=o("TFElectraForPreTraining"),qLr=o(" (ELECTRA model)"),jLr=l(),I4=a("li"),oCe=a("strong"),DLr=o("flaubert"),GLr=o(" \u2014 "),QK=a("a"),OLr=o("TFFlaubertWithLMHeadModel"),VLr=o(" (FlauBERT model)"),XLr=l(),N4=a("li"),rCe=a("strong"),zLr=o("funnel"),WLr=o(" \u2014 "),UK=a("a"),QLr=o("TFFunnelForPreTraining"),ULr=o(" (Funnel Transformer model)"),HLr=l(),q4=a("li"),tCe=a("strong"),JLr=o("gpt2"),YLr=o(" \u2014 "),HK=a("a"),KLr=o("TFGPT2LMHeadModel"),ZLr=o(" (OpenAI GPT-2 model)"),eyr=l(),j4=a("li"),aCe=a("strong"),oyr=o("layoutlm"),ryr=o(" \u2014 "),JK=a("a"),tyr=o("TFLayoutLMForMaskedLM"),ayr=o(" (LayoutLM model)"),nyr=l(),D4=a("li"),nCe=a("strong"),syr=o("lxmert"),lyr=o(" \u2014 "),YK=a("a"),iyr=o("TFLxmertForPreTraining"),dyr=o(" (LXMERT model)"),cyr=l(),G4=a("li"),sCe=a("strong"),fyr=o("mobilebert"),myr=o(" \u2014 "),KK=a("a"),gyr=o("TFMobileBertForPreTraining"),hyr=o(" (MobileBERT model)"),pyr=l(),O4=a("li"),lCe=a("strong"),_yr=o("mpnet"),uyr=o(" \u2014 "),ZK=a("a"),byr=o("TFMPNetForMaskedLM"),vyr=o(" (MPNet model)"),Fyr=l(),V4=a("li"),iCe=a("strong"),Tyr=o("openai-gpt"),Myr=o(" \u2014 "),eZ=a("a"),Eyr=o("TFOpenAIGPTLMHeadModel"),Cyr=o(" (OpenAI GPT model)"),wyr=l(),X4=a("li"),dCe=a("strong"),Ayr=o("roberta"),Lyr=o(" \u2014 "),oZ=a("a"),yyr=o("TFRobertaForMaskedLM"),xyr=o(" (RoBERTa model)"),$yr=l(),z4=a("li"),cCe=a("strong"),kyr=o("t5"),Syr=o(" \u2014 "),rZ=a("a"),Ryr=o("TFT5ForConditionalGeneration"),Pyr=o(" (T5 model)"),Byr=l(),W4=a("li"),fCe=a("strong"),Iyr=o("tapas"),Nyr=o(" \u2014 "),tZ=a("a"),qyr=o("TFTapasForMaskedLM"),jyr=o(" (TAPAS model)"),Dyr=l(),Q4=a("li"),mCe=a("strong"),Gyr=o("transfo-xl"),Oyr=o(" \u2014 "),aZ=a("a"),Vyr=o("TFTransfoXLLMHeadModel"),Xyr=o(" (Transformer-XL model)"),zyr=l(),U4=a("li"),gCe=a("strong"),Wyr=o("vit_mae"),Qyr=o(" \u2014 "),nZ=a("a"),Uyr=o("TFViTMAEForPreTraining"),Hyr=o(" (ViTMAE model)"),Jyr=l(),H4=a("li"),hCe=a("strong"),Yyr=o("xlm"),Kyr=o(" \u2014 "),sZ=a("a"),Zyr=o("TFXLMWithLMHeadModel"),e9r=o(" (XLM model)"),o9r=l(),J4=a("li"),pCe=a("strong"),r9r=o("xlm-roberta"),t9r=o(" \u2014 "),lZ=a("a"),a9r=o("TFXLMRobertaForMaskedLM"),n9r=o(" (XLM-RoBERTa model)"),s9r=l(),Y4=a("li"),_Ce=a("strong"),l9r=o("xlnet"),i9r=o(" \u2014 "),iZ=a("a"),d9r=o("TFXLNetLMHeadModel"),c9r=o(" (XLNet model)"),f9r=l(),F(K4.$$.fragment),UHe=l(),qc=a("h2"),Z4=a("a"),uCe=a("span"),F(q$.$$.fragment),m9r=l(),bCe=a("span"),g9r=o("TFAutoModelForCausalLM"),HHe=l(),ir=a("div"),F(j$.$$.fragment),h9r=l(),jc=a("p"),p9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dZ=a("a"),_9r=o("from_pretrained()"),u9r=o(" class method or the "),cZ=a("a"),b9r=o("from_config()"),v9r=o(` class
method.`),F9r=l(),D$=a("p"),T9r=o("This class cannot be instantiated directly using "),vCe=a("code"),M9r=o("__init__()"),E9r=o(" (throws an error)."),C9r=l(),Vt=a("div"),F(G$.$$.fragment),w9r=l(),FCe=a("p"),A9r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),L9r=l(),Dc=a("p"),y9r=o(`Note:
Loading a model from its configuration file does `),TCe=a("strong"),x9r=o("not"),$9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=a("a"),k9r=o("from_pretrained()"),S9r=o(" to load the model weights."),R9r=l(),F(eC.$$.fragment),P9r=l(),Nr=a("div"),F(O$.$$.fragment),B9r=l(),MCe=a("p"),I9r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),N9r=l(),En=a("p"),q9r=o("The model class to instantiate is selected based on the "),ECe=a("code"),j9r=o("model_type"),D9r=o(` property of the config object (either
passed as an argument or loaded from `),CCe=a("code"),G9r=o("pretrained_model_name_or_path"),O9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wCe=a("code"),V9r=o("pretrained_model_name_or_path"),X9r=o(":"),z9r=l(),Me=a("ul"),oC=a("li"),ACe=a("strong"),W9r=o("bert"),Q9r=o(" \u2014 "),mZ=a("a"),U9r=o("TFBertLMHeadModel"),H9r=o(" (BERT model)"),J9r=l(),rC=a("li"),LCe=a("strong"),Y9r=o("camembert"),K9r=o(" \u2014 "),gZ=a("a"),Z9r=o("TFCamembertForCausalLM"),exr=o(" (CamemBERT model)"),oxr=l(),tC=a("li"),yCe=a("strong"),rxr=o("ctrl"),txr=o(" \u2014 "),hZ=a("a"),axr=o("TFCTRLLMHeadModel"),nxr=o(" (CTRL model)"),sxr=l(),aC=a("li"),xCe=a("strong"),lxr=o("gpt2"),ixr=o(" \u2014 "),pZ=a("a"),dxr=o("TFGPT2LMHeadModel"),cxr=o(" (OpenAI GPT-2 model)"),fxr=l(),nC=a("li"),$Ce=a("strong"),mxr=o("gptj"),gxr=o(" \u2014 "),_Z=a("a"),hxr=o("TFGPTJForCausalLM"),pxr=o(" (GPT-J model)"),_xr=l(),sC=a("li"),kCe=a("strong"),uxr=o("openai-gpt"),bxr=o(" \u2014 "),uZ=a("a"),vxr=o("TFOpenAIGPTLMHeadModel"),Fxr=o(" (OpenAI GPT model)"),Txr=l(),lC=a("li"),SCe=a("strong"),Mxr=o("opt"),Exr=o(" \u2014 "),bZ=a("a"),Cxr=o("TFOPTForCausalLM"),wxr=o(" (OPT model)"),Axr=l(),iC=a("li"),RCe=a("strong"),Lxr=o("rembert"),yxr=o(" \u2014 "),vZ=a("a"),xxr=o("TFRemBertForCausalLM"),$xr=o(" (RemBERT model)"),kxr=l(),dC=a("li"),PCe=a("strong"),Sxr=o("roberta"),Rxr=o(" \u2014 "),FZ=a("a"),Pxr=o("TFRobertaForCausalLM"),Bxr=o(" (RoBERTa model)"),Ixr=l(),cC=a("li"),BCe=a("strong"),Nxr=o("roformer"),qxr=o(" \u2014 "),TZ=a("a"),jxr=o("TFRoFormerForCausalLM"),Dxr=o(" (RoFormer model)"),Gxr=l(),fC=a("li"),ICe=a("strong"),Oxr=o("transfo-xl"),Vxr=o(" \u2014 "),MZ=a("a"),Xxr=o("TFTransfoXLLMHeadModel"),zxr=o(" (Transformer-XL model)"),Wxr=l(),mC=a("li"),NCe=a("strong"),Qxr=o("xlm"),Uxr=o(" \u2014 "),EZ=a("a"),Hxr=o("TFXLMWithLMHeadModel"),Jxr=o(" (XLM model)"),Yxr=l(),gC=a("li"),qCe=a("strong"),Kxr=o("xlnet"),Zxr=o(" \u2014 "),CZ=a("a"),e$r=o("TFXLNetLMHeadModel"),o$r=o(" (XLNet model)"),r$r=l(),F(hC.$$.fragment),JHe=l(),Gc=a("h2"),pC=a("a"),jCe=a("span"),F(V$.$$.fragment),t$r=l(),DCe=a("span"),a$r=o("TFAutoModelForImageClassification"),YHe=l(),dr=a("div"),F(X$.$$.fragment),n$r=l(),Oc=a("p"),s$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wZ=a("a"),l$r=o("from_pretrained()"),i$r=o(" class method or the "),AZ=a("a"),d$r=o("from_config()"),c$r=o(` class
method.`),f$r=l(),z$=a("p"),m$r=o("This class cannot be instantiated directly using "),GCe=a("code"),g$r=o("__init__()"),h$r=o(" (throws an error)."),p$r=l(),Xt=a("div"),F(W$.$$.fragment),_$r=l(),OCe=a("p"),u$r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),b$r=l(),Vc=a("p"),v$r=o(`Note:
Loading a model from its configuration file does `),VCe=a("strong"),F$r=o("not"),T$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LZ=a("a"),M$r=o("from_pretrained()"),E$r=o(" to load the model weights."),C$r=l(),F(_C.$$.fragment),w$r=l(),qr=a("div"),F(Q$.$$.fragment),A$r=l(),XCe=a("p"),L$r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),y$r=l(),Cn=a("p"),x$r=o("The model class to instantiate is selected based on the "),zCe=a("code"),$$r=o("model_type"),k$r=o(` property of the config object (either
passed as an argument or loaded from `),WCe=a("code"),S$r=o("pretrained_model_name_or_path"),R$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QCe=a("code"),P$r=o("pretrained_model_name_or_path"),B$r=o(":"),I$r=l(),Ve=a("ul"),uC=a("li"),UCe=a("strong"),N$r=o("convnext"),q$r=o(" \u2014 "),yZ=a("a"),j$r=o("TFConvNextForImageClassification"),D$r=o(" (ConvNeXT model)"),G$r=l(),bC=a("li"),HCe=a("strong"),O$r=o("data2vec-vision"),V$r=o(" \u2014 "),xZ=a("a"),X$r=o("TFData2VecVisionForImageClassification"),z$r=o(" (Data2VecVision model)"),W$r=l(),hl=a("li"),JCe=a("strong"),Q$r=o("deit"),U$r=o(" \u2014 "),$Z=a("a"),H$r=o("TFDeiTForImageClassification"),J$r=o(" or "),kZ=a("a"),Y$r=o("TFDeiTForImageClassificationWithTeacher"),K$r=o(" (DeiT model)"),Z$r=l(),vC=a("li"),YCe=a("strong"),ekr=o("regnet"),okr=o(" \u2014 "),SZ=a("a"),rkr=o("TFRegNetForImageClassification"),tkr=o(" (RegNet model)"),akr=l(),FC=a("li"),KCe=a("strong"),nkr=o("resnet"),skr=o(" \u2014 "),RZ=a("a"),lkr=o("TFResNetForImageClassification"),ikr=o(" (ResNet model)"),dkr=l(),TC=a("li"),ZCe=a("strong"),ckr=o("segformer"),fkr=o(" \u2014 "),PZ=a("a"),mkr=o("TFSegformerForImageClassification"),gkr=o(" (SegFormer model)"),hkr=l(),MC=a("li"),e3e=a("strong"),pkr=o("swin"),_kr=o(" \u2014 "),BZ=a("a"),ukr=o("TFSwinForImageClassification"),bkr=o(" (Swin Transformer model)"),vkr=l(),EC=a("li"),o3e=a("strong"),Fkr=o("vit"),Tkr=o(" \u2014 "),IZ=a("a"),Mkr=o("TFViTForImageClassification"),Ekr=o(" (ViT model)"),Ckr=l(),F(CC.$$.fragment),KHe=l(),Xc=a("h2"),wC=a("a"),r3e=a("span"),F(U$.$$.fragment),wkr=l(),t3e=a("span"),Akr=o("TFAutoModelForSemanticSegmentation"),ZHe=l(),cr=a("div"),F(H$.$$.fragment),Lkr=l(),zc=a("p"),ykr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),NZ=a("a"),xkr=o("from_pretrained()"),$kr=o(" class method or the "),qZ=a("a"),kkr=o("from_config()"),Skr=o(` class
method.`),Rkr=l(),J$=a("p"),Pkr=o("This class cannot be instantiated directly using "),a3e=a("code"),Bkr=o("__init__()"),Ikr=o(" (throws an error)."),Nkr=l(),zt=a("div"),F(Y$.$$.fragment),qkr=l(),n3e=a("p"),jkr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Dkr=l(),Wc=a("p"),Gkr=o(`Note:
Loading a model from its configuration file does `),s3e=a("strong"),Okr=o("not"),Vkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=a("a"),Xkr=o("from_pretrained()"),zkr=o(" to load the model weights."),Wkr=l(),F(AC.$$.fragment),Qkr=l(),jr=a("div"),F(K$.$$.fragment),Ukr=l(),l3e=a("p"),Hkr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Jkr=l(),wn=a("p"),Ykr=o("The model class to instantiate is selected based on the "),i3e=a("code"),Kkr=o("model_type"),Zkr=o(` property of the config object (either
passed as an argument or loaded from `),d3e=a("code"),eSr=o("pretrained_model_name_or_path"),oSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=a("code"),rSr=o("pretrained_model_name_or_path"),tSr=o(":"),aSr=l(),Z$=a("ul"),LC=a("li"),f3e=a("strong"),nSr=o("data2vec-vision"),sSr=o(" \u2014 "),DZ=a("a"),lSr=o("TFData2VecVisionForSemanticSegmentation"),iSr=o(" (Data2VecVision model)"),dSr=l(),yC=a("li"),m3e=a("strong"),cSr=o("segformer"),fSr=o(" \u2014 "),GZ=a("a"),mSr=o("TFSegformerForSemanticSegmentation"),gSr=o(" (SegFormer model)"),hSr=l(),F(xC.$$.fragment),eJe=l(),Qc=a("h2"),$C=a("a"),g3e=a("span"),F(ek.$$.fragment),pSr=l(),h3e=a("span"),_Sr=o("TFAutoModelForMaskedLM"),oJe=l(),fr=a("div"),F(ok.$$.fragment),uSr=l(),Uc=a("p"),bSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),OZ=a("a"),vSr=o("from_pretrained()"),FSr=o(" class method or the "),VZ=a("a"),TSr=o("from_config()"),MSr=o(` class
method.`),ESr=l(),rk=a("p"),CSr=o("This class cannot be instantiated directly using "),p3e=a("code"),wSr=o("__init__()"),ASr=o(" (throws an error)."),LSr=l(),Wt=a("div"),F(tk.$$.fragment),ySr=l(),_3e=a("p"),xSr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$Sr=l(),Hc=a("p"),kSr=o(`Note:
Loading a model from its configuration file does `),u3e=a("strong"),SSr=o("not"),RSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=a("a"),PSr=o("from_pretrained()"),BSr=o(" to load the model weights."),ISr=l(),F(kC.$$.fragment),NSr=l(),Dr=a("div"),F(ak.$$.fragment),qSr=l(),b3e=a("p"),jSr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),DSr=l(),An=a("p"),GSr=o("The model class to instantiate is selected based on the "),v3e=a("code"),OSr=o("model_type"),VSr=o(` property of the config object (either
passed as an argument or loaded from `),F3e=a("code"),XSr=o("pretrained_model_name_or_path"),zSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T3e=a("code"),WSr=o("pretrained_model_name_or_path"),QSr=o(":"),USr=l(),de=a("ul"),SC=a("li"),M3e=a("strong"),HSr=o("albert"),JSr=o(" \u2014 "),zZ=a("a"),YSr=o("TFAlbertForMaskedLM"),KSr=o(" (ALBERT model)"),ZSr=l(),RC=a("li"),E3e=a("strong"),eRr=o("bert"),oRr=o(" \u2014 "),WZ=a("a"),rRr=o("TFBertForMaskedLM"),tRr=o(" (BERT model)"),aRr=l(),PC=a("li"),C3e=a("strong"),nRr=o("camembert"),sRr=o(" \u2014 "),QZ=a("a"),lRr=o("TFCamembertForMaskedLM"),iRr=o(" (CamemBERT model)"),dRr=l(),BC=a("li"),w3e=a("strong"),cRr=o("convbert"),fRr=o(" \u2014 "),UZ=a("a"),mRr=o("TFConvBertForMaskedLM"),gRr=o(" (ConvBERT model)"),hRr=l(),IC=a("li"),A3e=a("strong"),pRr=o("deberta"),_Rr=o(" \u2014 "),HZ=a("a"),uRr=o("TFDebertaForMaskedLM"),bRr=o(" (DeBERTa model)"),vRr=l(),NC=a("li"),L3e=a("strong"),FRr=o("deberta-v2"),TRr=o(" \u2014 "),JZ=a("a"),MRr=o("TFDebertaV2ForMaskedLM"),ERr=o(" (DeBERTa-v2 model)"),CRr=l(),qC=a("li"),y3e=a("strong"),wRr=o("distilbert"),ARr=o(" \u2014 "),YZ=a("a"),LRr=o("TFDistilBertForMaskedLM"),yRr=o(" (DistilBERT model)"),xRr=l(),jC=a("li"),x3e=a("strong"),$Rr=o("electra"),kRr=o(" \u2014 "),KZ=a("a"),SRr=o("TFElectraForMaskedLM"),RRr=o(" (ELECTRA model)"),PRr=l(),DC=a("li"),$3e=a("strong"),BRr=o("flaubert"),IRr=o(" \u2014 "),ZZ=a("a"),NRr=o("TFFlaubertWithLMHeadModel"),qRr=o(" (FlauBERT model)"),jRr=l(),GC=a("li"),k3e=a("strong"),DRr=o("funnel"),GRr=o(" \u2014 "),eee=a("a"),ORr=o("TFFunnelForMaskedLM"),VRr=o(" (Funnel Transformer model)"),XRr=l(),OC=a("li"),S3e=a("strong"),zRr=o("layoutlm"),WRr=o(" \u2014 "),oee=a("a"),QRr=o("TFLayoutLMForMaskedLM"),URr=o(" (LayoutLM model)"),HRr=l(),VC=a("li"),R3e=a("strong"),JRr=o("longformer"),YRr=o(" \u2014 "),ree=a("a"),KRr=o("TFLongformerForMaskedLM"),ZRr=o(" (Longformer model)"),ePr=l(),XC=a("li"),P3e=a("strong"),oPr=o("mobilebert"),rPr=o(" \u2014 "),tee=a("a"),tPr=o("TFMobileBertForMaskedLM"),aPr=o(" (MobileBERT model)"),nPr=l(),zC=a("li"),B3e=a("strong"),sPr=o("mpnet"),lPr=o(" \u2014 "),aee=a("a"),iPr=o("TFMPNetForMaskedLM"),dPr=o(" (MPNet model)"),cPr=l(),WC=a("li"),I3e=a("strong"),fPr=o("rembert"),mPr=o(" \u2014 "),nee=a("a"),gPr=o("TFRemBertForMaskedLM"),hPr=o(" (RemBERT model)"),pPr=l(),QC=a("li"),N3e=a("strong"),_Pr=o("roberta"),uPr=o(" \u2014 "),see=a("a"),bPr=o("TFRobertaForMaskedLM"),vPr=o(" (RoBERTa model)"),FPr=l(),UC=a("li"),q3e=a("strong"),TPr=o("roformer"),MPr=o(" \u2014 "),lee=a("a"),EPr=o("TFRoFormerForMaskedLM"),CPr=o(" (RoFormer model)"),wPr=l(),HC=a("li"),j3e=a("strong"),APr=o("tapas"),LPr=o(" \u2014 "),iee=a("a"),yPr=o("TFTapasForMaskedLM"),xPr=o(" (TAPAS model)"),$Pr=l(),JC=a("li"),D3e=a("strong"),kPr=o("xlm"),SPr=o(" \u2014 "),dee=a("a"),RPr=o("TFXLMWithLMHeadModel"),PPr=o(" (XLM model)"),BPr=l(),YC=a("li"),G3e=a("strong"),IPr=o("xlm-roberta"),NPr=o(" \u2014 "),cee=a("a"),qPr=o("TFXLMRobertaForMaskedLM"),jPr=o(" (XLM-RoBERTa model)"),DPr=l(),F(KC.$$.fragment),rJe=l(),Jc=a("h2"),ZC=a("a"),O3e=a("span"),F(nk.$$.fragment),GPr=l(),V3e=a("span"),OPr=o("TFAutoModelForSeq2SeqLM"),tJe=l(),mr=a("div"),F(sk.$$.fragment),VPr=l(),Yc=a("p"),XPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fee=a("a"),zPr=o("from_pretrained()"),WPr=o(" class method or the "),mee=a("a"),QPr=o("from_config()"),UPr=o(` class
method.`),HPr=l(),lk=a("p"),JPr=o("This class cannot be instantiated directly using "),X3e=a("code"),YPr=o("__init__()"),KPr=o(" (throws an error)."),ZPr=l(),Qt=a("div"),F(ik.$$.fragment),eBr=l(),z3e=a("p"),oBr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rBr=l(),Kc=a("p"),tBr=o(`Note:
Loading a model from its configuration file does `),W3e=a("strong"),aBr=o("not"),nBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=a("a"),sBr=o("from_pretrained()"),lBr=o(" to load the model weights."),iBr=l(),F(e3.$$.fragment),dBr=l(),Gr=a("div"),F(dk.$$.fragment),cBr=l(),Q3e=a("p"),fBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mBr=l(),Ln=a("p"),gBr=o("The model class to instantiate is selected based on the "),U3e=a("code"),hBr=o("model_type"),pBr=o(` property of the config object (either
passed as an argument or loaded from `),H3e=a("code"),_Br=o("pretrained_model_name_or_path"),uBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J3e=a("code"),bBr=o("pretrained_model_name_or_path"),vBr=o(":"),FBr=l(),ye=a("ul"),o3=a("li"),Y3e=a("strong"),TBr=o("bart"),MBr=o(" \u2014 "),hee=a("a"),EBr=o("TFBartForConditionalGeneration"),CBr=o(" (BART model)"),wBr=l(),r3=a("li"),K3e=a("strong"),ABr=o("blenderbot"),LBr=o(" \u2014 "),pee=a("a"),yBr=o("TFBlenderbotForConditionalGeneration"),xBr=o(" (Blenderbot model)"),$Br=l(),t3=a("li"),Z3e=a("strong"),kBr=o("blenderbot-small"),SBr=o(" \u2014 "),_ee=a("a"),RBr=o("TFBlenderbotSmallForConditionalGeneration"),PBr=o(" (BlenderbotSmall model)"),BBr=l(),a3=a("li"),e5e=a("strong"),IBr=o("encoder-decoder"),NBr=o(" \u2014 "),uee=a("a"),qBr=o("TFEncoderDecoderModel"),jBr=o(" (Encoder decoder model)"),DBr=l(),n3=a("li"),o5e=a("strong"),GBr=o("led"),OBr=o(" \u2014 "),bee=a("a"),VBr=o("TFLEDForConditionalGeneration"),XBr=o(" (LED model)"),zBr=l(),s3=a("li"),r5e=a("strong"),WBr=o("marian"),QBr=o(" \u2014 "),vee=a("a"),UBr=o("TFMarianMTModel"),HBr=o(" (Marian model)"),JBr=l(),l3=a("li"),t5e=a("strong"),YBr=o("mbart"),KBr=o(" \u2014 "),Fee=a("a"),ZBr=o("TFMBartForConditionalGeneration"),eIr=o(" (mBART model)"),oIr=l(),i3=a("li"),a5e=a("strong"),rIr=o("mt5"),tIr=o(" \u2014 "),Tee=a("a"),aIr=o("TFMT5ForConditionalGeneration"),nIr=o(" (MT5 model)"),sIr=l(),d3=a("li"),n5e=a("strong"),lIr=o("pegasus"),iIr=o(" \u2014 "),Mee=a("a"),dIr=o("TFPegasusForConditionalGeneration"),cIr=o(" (Pegasus model)"),fIr=l(),c3=a("li"),s5e=a("strong"),mIr=o("t5"),gIr=o(" \u2014 "),Eee=a("a"),hIr=o("TFT5ForConditionalGeneration"),pIr=o(" (T5 model)"),_Ir=l(),F(f3.$$.fragment),aJe=l(),Zc=a("h2"),m3=a("a"),l5e=a("span"),F(ck.$$.fragment),uIr=l(),i5e=a("span"),bIr=o("TFAutoModelForSequenceClassification"),nJe=l(),gr=a("div"),F(fk.$$.fragment),vIr=l(),ef=a("p"),FIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Cee=a("a"),TIr=o("from_pretrained()"),MIr=o(" class method or the "),wee=a("a"),EIr=o("from_config()"),CIr=o(` class
method.`),wIr=l(),mk=a("p"),AIr=o("This class cannot be instantiated directly using "),d5e=a("code"),LIr=o("__init__()"),yIr=o(" (throws an error)."),xIr=l(),Ut=a("div"),F(gk.$$.fragment),$Ir=l(),c5e=a("p"),kIr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),SIr=l(),of=a("p"),RIr=o(`Note:
Loading a model from its configuration file does `),f5e=a("strong"),PIr=o("not"),BIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aee=a("a"),IIr=o("from_pretrained()"),NIr=o(" to load the model weights."),qIr=l(),F(g3.$$.fragment),jIr=l(),Or=a("div"),F(hk.$$.fragment),DIr=l(),m5e=a("p"),GIr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),OIr=l(),yn=a("p"),VIr=o("The model class to instantiate is selected based on the "),g5e=a("code"),XIr=o("model_type"),zIr=o(` property of the config object (either
passed as an argument or loaded from `),h5e=a("code"),WIr=o("pretrained_model_name_or_path"),QIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p5e=a("code"),UIr=o("pretrained_model_name_or_path"),HIr=o(":"),JIr=l(),te=a("ul"),h3=a("li"),_5e=a("strong"),YIr=o("albert"),KIr=o(" \u2014 "),Lee=a("a"),ZIr=o("TFAlbertForSequenceClassification"),eNr=o(" (ALBERT model)"),oNr=l(),p3=a("li"),u5e=a("strong"),rNr=o("bert"),tNr=o(" \u2014 "),yee=a("a"),aNr=o("TFBertForSequenceClassification"),nNr=o(" (BERT model)"),sNr=l(),_3=a("li"),b5e=a("strong"),lNr=o("camembert"),iNr=o(" \u2014 "),xee=a("a"),dNr=o("TFCamembertForSequenceClassification"),cNr=o(" (CamemBERT model)"),fNr=l(),u3=a("li"),v5e=a("strong"),mNr=o("convbert"),gNr=o(" \u2014 "),$ee=a("a"),hNr=o("TFConvBertForSequenceClassification"),pNr=o(" (ConvBERT model)"),_Nr=l(),b3=a("li"),F5e=a("strong"),uNr=o("ctrl"),bNr=o(" \u2014 "),kee=a("a"),vNr=o("TFCTRLForSequenceClassification"),FNr=o(" (CTRL model)"),TNr=l(),v3=a("li"),T5e=a("strong"),MNr=o("deberta"),ENr=o(" \u2014 "),See=a("a"),CNr=o("TFDebertaForSequenceClassification"),wNr=o(" (DeBERTa model)"),ANr=l(),F3=a("li"),M5e=a("strong"),LNr=o("deberta-v2"),yNr=o(" \u2014 "),Ree=a("a"),xNr=o("TFDebertaV2ForSequenceClassification"),$Nr=o(" (DeBERTa-v2 model)"),kNr=l(),T3=a("li"),E5e=a("strong"),SNr=o("distilbert"),RNr=o(" \u2014 "),Pee=a("a"),PNr=o("TFDistilBertForSequenceClassification"),BNr=o(" (DistilBERT model)"),INr=l(),M3=a("li"),C5e=a("strong"),NNr=o("electra"),qNr=o(" \u2014 "),Bee=a("a"),jNr=o("TFElectraForSequenceClassification"),DNr=o(" (ELECTRA model)"),GNr=l(),E3=a("li"),w5e=a("strong"),ONr=o("flaubert"),VNr=o(" \u2014 "),Iee=a("a"),XNr=o("TFFlaubertForSequenceClassification"),zNr=o(" (FlauBERT model)"),WNr=l(),C3=a("li"),A5e=a("strong"),QNr=o("funnel"),UNr=o(" \u2014 "),Nee=a("a"),HNr=o("TFFunnelForSequenceClassification"),JNr=o(" (Funnel Transformer model)"),YNr=l(),w3=a("li"),L5e=a("strong"),KNr=o("gpt2"),ZNr=o(" \u2014 "),qee=a("a"),eqr=o("TFGPT2ForSequenceClassification"),oqr=o(" (OpenAI GPT-2 model)"),rqr=l(),A3=a("li"),y5e=a("strong"),tqr=o("gptj"),aqr=o(" \u2014 "),jee=a("a"),nqr=o("TFGPTJForSequenceClassification"),sqr=o(" (GPT-J model)"),lqr=l(),L3=a("li"),x5e=a("strong"),iqr=o("layoutlm"),dqr=o(" \u2014 "),Dee=a("a"),cqr=o("TFLayoutLMForSequenceClassification"),fqr=o(" (LayoutLM model)"),mqr=l(),y3=a("li"),$5e=a("strong"),gqr=o("longformer"),hqr=o(" \u2014 "),Gee=a("a"),pqr=o("TFLongformerForSequenceClassification"),_qr=o(" (Longformer model)"),uqr=l(),x3=a("li"),k5e=a("strong"),bqr=o("mobilebert"),vqr=o(" \u2014 "),Oee=a("a"),Fqr=o("TFMobileBertForSequenceClassification"),Tqr=o(" (MobileBERT model)"),Mqr=l(),$3=a("li"),S5e=a("strong"),Eqr=o("mpnet"),Cqr=o(" \u2014 "),Vee=a("a"),wqr=o("TFMPNetForSequenceClassification"),Aqr=o(" (MPNet model)"),Lqr=l(),k3=a("li"),R5e=a("strong"),yqr=o("openai-gpt"),xqr=o(" \u2014 "),Xee=a("a"),$qr=o("TFOpenAIGPTForSequenceClassification"),kqr=o(" (OpenAI GPT model)"),Sqr=l(),S3=a("li"),P5e=a("strong"),Rqr=o("rembert"),Pqr=o(" \u2014 "),zee=a("a"),Bqr=o("TFRemBertForSequenceClassification"),Iqr=o(" (RemBERT model)"),Nqr=l(),R3=a("li"),B5e=a("strong"),qqr=o("roberta"),jqr=o(" \u2014 "),Wee=a("a"),Dqr=o("TFRobertaForSequenceClassification"),Gqr=o(" (RoBERTa model)"),Oqr=l(),P3=a("li"),I5e=a("strong"),Vqr=o("roformer"),Xqr=o(" \u2014 "),Qee=a("a"),zqr=o("TFRoFormerForSequenceClassification"),Wqr=o(" (RoFormer model)"),Qqr=l(),B3=a("li"),N5e=a("strong"),Uqr=o("tapas"),Hqr=o(" \u2014 "),Uee=a("a"),Jqr=o("TFTapasForSequenceClassification"),Yqr=o(" (TAPAS model)"),Kqr=l(),I3=a("li"),q5e=a("strong"),Zqr=o("transfo-xl"),ejr=o(" \u2014 "),Hee=a("a"),ojr=o("TFTransfoXLForSequenceClassification"),rjr=o(" (Transformer-XL model)"),tjr=l(),N3=a("li"),j5e=a("strong"),ajr=o("xlm"),njr=o(" \u2014 "),Jee=a("a"),sjr=o("TFXLMForSequenceClassification"),ljr=o(" (XLM model)"),ijr=l(),q3=a("li"),D5e=a("strong"),djr=o("xlm-roberta"),cjr=o(" \u2014 "),Yee=a("a"),fjr=o("TFXLMRobertaForSequenceClassification"),mjr=o(" (XLM-RoBERTa model)"),gjr=l(),j3=a("li"),G5e=a("strong"),hjr=o("xlnet"),pjr=o(" \u2014 "),Kee=a("a"),_jr=o("TFXLNetForSequenceClassification"),ujr=o(" (XLNet model)"),bjr=l(),F(D3.$$.fragment),sJe=l(),rf=a("h2"),G3=a("a"),O5e=a("span"),F(pk.$$.fragment),vjr=l(),V5e=a("span"),Fjr=o("TFAutoModelForMultipleChoice"),lJe=l(),hr=a("div"),F(_k.$$.fragment),Tjr=l(),tf=a("p"),Mjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Zee=a("a"),Ejr=o("from_pretrained()"),Cjr=o(" class method or the "),eoe=a("a"),wjr=o("from_config()"),Ajr=o(` class
method.`),Ljr=l(),uk=a("p"),yjr=o("This class cannot be instantiated directly using "),X5e=a("code"),xjr=o("__init__()"),$jr=o(" (throws an error)."),kjr=l(),Ht=a("div"),F(bk.$$.fragment),Sjr=l(),z5e=a("p"),Rjr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Pjr=l(),af=a("p"),Bjr=o(`Note:
Loading a model from its configuration file does `),W5e=a("strong"),Ijr=o("not"),Njr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ooe=a("a"),qjr=o("from_pretrained()"),jjr=o(" to load the model weights."),Djr=l(),F(O3.$$.fragment),Gjr=l(),Vr=a("div"),F(vk.$$.fragment),Ojr=l(),Q5e=a("p"),Vjr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Xjr=l(),xn=a("p"),zjr=o("The model class to instantiate is selected based on the "),U5e=a("code"),Wjr=o("model_type"),Qjr=o(` property of the config object (either
passed as an argument or loaded from `),H5e=a("code"),Ujr=o("pretrained_model_name_or_path"),Hjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J5e=a("code"),Jjr=o("pretrained_model_name_or_path"),Yjr=o(":"),Kjr=l(),ve=a("ul"),V3=a("li"),Y5e=a("strong"),Zjr=o("albert"),eDr=o(" \u2014 "),roe=a("a"),oDr=o("TFAlbertForMultipleChoice"),rDr=o(" (ALBERT model)"),tDr=l(),X3=a("li"),K5e=a("strong"),aDr=o("bert"),nDr=o(" \u2014 "),toe=a("a"),sDr=o("TFBertForMultipleChoice"),lDr=o(" (BERT model)"),iDr=l(),z3=a("li"),Z5e=a("strong"),dDr=o("camembert"),cDr=o(" \u2014 "),aoe=a("a"),fDr=o("TFCamembertForMultipleChoice"),mDr=o(" (CamemBERT model)"),gDr=l(),W3=a("li"),e0e=a("strong"),hDr=o("convbert"),pDr=o(" \u2014 "),noe=a("a"),_Dr=o("TFConvBertForMultipleChoice"),uDr=o(" (ConvBERT model)"),bDr=l(),Q3=a("li"),o0e=a("strong"),vDr=o("distilbert"),FDr=o(" \u2014 "),soe=a("a"),TDr=o("TFDistilBertForMultipleChoice"),MDr=o(" (DistilBERT model)"),EDr=l(),U3=a("li"),r0e=a("strong"),CDr=o("electra"),wDr=o(" \u2014 "),loe=a("a"),ADr=o("TFElectraForMultipleChoice"),LDr=o(" (ELECTRA model)"),yDr=l(),H3=a("li"),t0e=a("strong"),xDr=o("flaubert"),$Dr=o(" \u2014 "),ioe=a("a"),kDr=o("TFFlaubertForMultipleChoice"),SDr=o(" (FlauBERT model)"),RDr=l(),J3=a("li"),a0e=a("strong"),PDr=o("funnel"),BDr=o(" \u2014 "),doe=a("a"),IDr=o("TFFunnelForMultipleChoice"),NDr=o(" (Funnel Transformer model)"),qDr=l(),Y3=a("li"),n0e=a("strong"),jDr=o("longformer"),DDr=o(" \u2014 "),coe=a("a"),GDr=o("TFLongformerForMultipleChoice"),ODr=o(" (Longformer model)"),VDr=l(),K3=a("li"),s0e=a("strong"),XDr=o("mobilebert"),zDr=o(" \u2014 "),foe=a("a"),WDr=o("TFMobileBertForMultipleChoice"),QDr=o(" (MobileBERT model)"),UDr=l(),Z3=a("li"),l0e=a("strong"),HDr=o("mpnet"),JDr=o(" \u2014 "),moe=a("a"),YDr=o("TFMPNetForMultipleChoice"),KDr=o(" (MPNet model)"),ZDr=l(),e5=a("li"),i0e=a("strong"),eGr=o("rembert"),oGr=o(" \u2014 "),goe=a("a"),rGr=o("TFRemBertForMultipleChoice"),tGr=o(" (RemBERT model)"),aGr=l(),o5=a("li"),d0e=a("strong"),nGr=o("roberta"),sGr=o(" \u2014 "),hoe=a("a"),lGr=o("TFRobertaForMultipleChoice"),iGr=o(" (RoBERTa model)"),dGr=l(),r5=a("li"),c0e=a("strong"),cGr=o("roformer"),fGr=o(" \u2014 "),poe=a("a"),mGr=o("TFRoFormerForMultipleChoice"),gGr=o(" (RoFormer model)"),hGr=l(),t5=a("li"),f0e=a("strong"),pGr=o("xlm"),_Gr=o(" \u2014 "),_oe=a("a"),uGr=o("TFXLMForMultipleChoice"),bGr=o(" (XLM model)"),vGr=l(),a5=a("li"),m0e=a("strong"),FGr=o("xlm-roberta"),TGr=o(" \u2014 "),uoe=a("a"),MGr=o("TFXLMRobertaForMultipleChoice"),EGr=o(" (XLM-RoBERTa model)"),CGr=l(),n5=a("li"),g0e=a("strong"),wGr=o("xlnet"),AGr=o(" \u2014 "),boe=a("a"),LGr=o("TFXLNetForMultipleChoice"),yGr=o(" (XLNet model)"),xGr=l(),F(s5.$$.fragment),iJe=l(),nf=a("h2"),l5=a("a"),h0e=a("span"),F(Fk.$$.fragment),$Gr=l(),p0e=a("span"),kGr=o("TFAutoModelForNextSentencePrediction"),dJe=l(),pr=a("div"),F(Tk.$$.fragment),SGr=l(),sf=a("p"),RGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),voe=a("a"),PGr=o("from_pretrained()"),BGr=o(" class method or the "),Foe=a("a"),IGr=o("from_config()"),NGr=o(` class
method.`),qGr=l(),Mk=a("p"),jGr=o("This class cannot be instantiated directly using "),_0e=a("code"),DGr=o("__init__()"),GGr=o(" (throws an error)."),OGr=l(),Jt=a("div"),F(Ek.$$.fragment),VGr=l(),u0e=a("p"),XGr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zGr=l(),lf=a("p"),WGr=o(`Note:
Loading a model from its configuration file does `),b0e=a("strong"),QGr=o("not"),UGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=a("a"),HGr=o("from_pretrained()"),JGr=o(" to load the model weights."),YGr=l(),F(i5.$$.fragment),KGr=l(),Xr=a("div"),F(Ck.$$.fragment),ZGr=l(),v0e=a("p"),eOr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oOr=l(),$n=a("p"),rOr=o("The model class to instantiate is selected based on the "),F0e=a("code"),tOr=o("model_type"),aOr=o(` property of the config object (either
passed as an argument or loaded from `),T0e=a("code"),nOr=o("pretrained_model_name_or_path"),sOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M0e=a("code"),lOr=o("pretrained_model_name_or_path"),iOr=o(":"),dOr=l(),wk=a("ul"),d5=a("li"),E0e=a("strong"),cOr=o("bert"),fOr=o(" \u2014 "),Moe=a("a"),mOr=o("TFBertForNextSentencePrediction"),gOr=o(" (BERT model)"),hOr=l(),c5=a("li"),C0e=a("strong"),pOr=o("mobilebert"),_Or=o(" \u2014 "),Eoe=a("a"),uOr=o("TFMobileBertForNextSentencePrediction"),bOr=o(" (MobileBERT model)"),vOr=l(),F(f5.$$.fragment),cJe=l(),df=a("h2"),m5=a("a"),w0e=a("span"),F(Ak.$$.fragment),FOr=l(),A0e=a("span"),TOr=o("TFAutoModelForTableQuestionAnswering"),fJe=l(),_r=a("div"),F(Lk.$$.fragment),MOr=l(),cf=a("p"),EOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Coe=a("a"),COr=o("from_pretrained()"),wOr=o(" class method or the "),woe=a("a"),AOr=o("from_config()"),LOr=o(` class
method.`),yOr=l(),yk=a("p"),xOr=o("This class cannot be instantiated directly using "),L0e=a("code"),$Or=o("__init__()"),kOr=o(" (throws an error)."),SOr=l(),Yt=a("div"),F(xk.$$.fragment),ROr=l(),y0e=a("p"),POr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),BOr=l(),ff=a("p"),IOr=o(`Note:
Loading a model from its configuration file does `),x0e=a("strong"),NOr=o("not"),qOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aoe=a("a"),jOr=o("from_pretrained()"),DOr=o(" to load the model weights."),GOr=l(),F(g5.$$.fragment),OOr=l(),zr=a("div"),F($k.$$.fragment),VOr=l(),$0e=a("p"),XOr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zOr=l(),kn=a("p"),WOr=o("The model class to instantiate is selected based on the "),k0e=a("code"),QOr=o("model_type"),UOr=o(` property of the config object (either
passed as an argument or loaded from `),S0e=a("code"),HOr=o("pretrained_model_name_or_path"),JOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R0e=a("code"),YOr=o("pretrained_model_name_or_path"),KOr=o(":"),ZOr=l(),P0e=a("ul"),h5=a("li"),B0e=a("strong"),eVr=o("tapas"),oVr=o(" \u2014 "),Loe=a("a"),rVr=o("TFTapasForQuestionAnswering"),tVr=o(" (TAPAS model)"),aVr=l(),F(p5.$$.fragment),mJe=l(),mf=a("h2"),_5=a("a"),I0e=a("span"),F(kk.$$.fragment),nVr=l(),N0e=a("span"),sVr=o("TFAutoModelForTokenClassification"),gJe=l(),ur=a("div"),F(Sk.$$.fragment),lVr=l(),gf=a("p"),iVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yoe=a("a"),dVr=o("from_pretrained()"),cVr=o(" class method or the "),xoe=a("a"),fVr=o("from_config()"),mVr=o(` class
method.`),gVr=l(),Rk=a("p"),hVr=o("This class cannot be instantiated directly using "),q0e=a("code"),pVr=o("__init__()"),_Vr=o(" (throws an error)."),uVr=l(),Kt=a("div"),F(Pk.$$.fragment),bVr=l(),j0e=a("p"),vVr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),FVr=l(),hf=a("p"),TVr=o(`Note:
Loading a model from its configuration file does `),D0e=a("strong"),MVr=o("not"),EVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$oe=a("a"),CVr=o("from_pretrained()"),wVr=o(" to load the model weights."),AVr=l(),F(u5.$$.fragment),LVr=l(),Wr=a("div"),F(Bk.$$.fragment),yVr=l(),G0e=a("p"),xVr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$Vr=l(),Sn=a("p"),kVr=o("The model class to instantiate is selected based on the "),O0e=a("code"),SVr=o("model_type"),RVr=o(` property of the config object (either
passed as an argument or loaded from `),V0e=a("code"),PVr=o("pretrained_model_name_or_path"),BVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X0e=a("code"),IVr=o("pretrained_model_name_or_path"),NVr=o(":"),qVr=l(),ce=a("ul"),b5=a("li"),z0e=a("strong"),jVr=o("albert"),DVr=o(" \u2014 "),koe=a("a"),GVr=o("TFAlbertForTokenClassification"),OVr=o(" (ALBERT model)"),VVr=l(),v5=a("li"),W0e=a("strong"),XVr=o("bert"),zVr=o(" \u2014 "),Soe=a("a"),WVr=o("TFBertForTokenClassification"),QVr=o(" (BERT model)"),UVr=l(),F5=a("li"),Q0e=a("strong"),HVr=o("camembert"),JVr=o(" \u2014 "),Roe=a("a"),YVr=o("TFCamembertForTokenClassification"),KVr=o(" (CamemBERT model)"),ZVr=l(),T5=a("li"),U0e=a("strong"),eXr=o("convbert"),oXr=o(" \u2014 "),Poe=a("a"),rXr=o("TFConvBertForTokenClassification"),tXr=o(" (ConvBERT model)"),aXr=l(),M5=a("li"),H0e=a("strong"),nXr=o("deberta"),sXr=o(" \u2014 "),Boe=a("a"),lXr=o("TFDebertaForTokenClassification"),iXr=o(" (DeBERTa model)"),dXr=l(),E5=a("li"),J0e=a("strong"),cXr=o("deberta-v2"),fXr=o(" \u2014 "),Ioe=a("a"),mXr=o("TFDebertaV2ForTokenClassification"),gXr=o(" (DeBERTa-v2 model)"),hXr=l(),C5=a("li"),Y0e=a("strong"),pXr=o("distilbert"),_Xr=o(" \u2014 "),Noe=a("a"),uXr=o("TFDistilBertForTokenClassification"),bXr=o(" (DistilBERT model)"),vXr=l(),w5=a("li"),K0e=a("strong"),FXr=o("electra"),TXr=o(" \u2014 "),qoe=a("a"),MXr=o("TFElectraForTokenClassification"),EXr=o(" (ELECTRA model)"),CXr=l(),A5=a("li"),Z0e=a("strong"),wXr=o("flaubert"),AXr=o(" \u2014 "),joe=a("a"),LXr=o("TFFlaubertForTokenClassification"),yXr=o(" (FlauBERT model)"),xXr=l(),L5=a("li"),ewe=a("strong"),$Xr=o("funnel"),kXr=o(" \u2014 "),Doe=a("a"),SXr=o("TFFunnelForTokenClassification"),RXr=o(" (Funnel Transformer model)"),PXr=l(),y5=a("li"),owe=a("strong"),BXr=o("layoutlm"),IXr=o(" \u2014 "),Goe=a("a"),NXr=o("TFLayoutLMForTokenClassification"),qXr=o(" (LayoutLM model)"),jXr=l(),x5=a("li"),rwe=a("strong"),DXr=o("longformer"),GXr=o(" \u2014 "),Ooe=a("a"),OXr=o("TFLongformerForTokenClassification"),VXr=o(" (Longformer model)"),XXr=l(),$5=a("li"),twe=a("strong"),zXr=o("mobilebert"),WXr=o(" \u2014 "),Voe=a("a"),QXr=o("TFMobileBertForTokenClassification"),UXr=o(" (MobileBERT model)"),HXr=l(),k5=a("li"),awe=a("strong"),JXr=o("mpnet"),YXr=o(" \u2014 "),Xoe=a("a"),KXr=o("TFMPNetForTokenClassification"),ZXr=o(" (MPNet model)"),ezr=l(),S5=a("li"),nwe=a("strong"),ozr=o("rembert"),rzr=o(" \u2014 "),zoe=a("a"),tzr=o("TFRemBertForTokenClassification"),azr=o(" (RemBERT model)"),nzr=l(),R5=a("li"),swe=a("strong"),szr=o("roberta"),lzr=o(" \u2014 "),Woe=a("a"),izr=o("TFRobertaForTokenClassification"),dzr=o(" (RoBERTa model)"),czr=l(),P5=a("li"),lwe=a("strong"),fzr=o("roformer"),mzr=o(" \u2014 "),Qoe=a("a"),gzr=o("TFRoFormerForTokenClassification"),hzr=o(" (RoFormer model)"),pzr=l(),B5=a("li"),iwe=a("strong"),_zr=o("xlm"),uzr=o(" \u2014 "),Uoe=a("a"),bzr=o("TFXLMForTokenClassification"),vzr=o(" (XLM model)"),Fzr=l(),I5=a("li"),dwe=a("strong"),Tzr=o("xlm-roberta"),Mzr=o(" \u2014 "),Hoe=a("a"),Ezr=o("TFXLMRobertaForTokenClassification"),Czr=o(" (XLM-RoBERTa model)"),wzr=l(),N5=a("li"),cwe=a("strong"),Azr=o("xlnet"),Lzr=o(" \u2014 "),Joe=a("a"),yzr=o("TFXLNetForTokenClassification"),xzr=o(" (XLNet model)"),$zr=l(),F(q5.$$.fragment),hJe=l(),pf=a("h2"),j5=a("a"),fwe=a("span"),F(Ik.$$.fragment),kzr=l(),mwe=a("span"),Szr=o("TFAutoModelForQuestionAnswering"),pJe=l(),br=a("div"),F(Nk.$$.fragment),Rzr=l(),_f=a("p"),Pzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Yoe=a("a"),Bzr=o("from_pretrained()"),Izr=o(" class method or the "),Koe=a("a"),Nzr=o("from_config()"),qzr=o(` class
method.`),jzr=l(),qk=a("p"),Dzr=o("This class cannot be instantiated directly using "),gwe=a("code"),Gzr=o("__init__()"),Ozr=o(" (throws an error)."),Vzr=l(),Zt=a("div"),F(jk.$$.fragment),Xzr=l(),hwe=a("p"),zzr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Wzr=l(),uf=a("p"),Qzr=o(`Note:
Loading a model from its configuration file does `),pwe=a("strong"),Uzr=o("not"),Hzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=a("a"),Jzr=o("from_pretrained()"),Yzr=o(" to load the model weights."),Kzr=l(),F(D5.$$.fragment),Zzr=l(),Qr=a("div"),F(Dk.$$.fragment),eWr=l(),_we=a("p"),oWr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rWr=l(),Rn=a("p"),tWr=o("The model class to instantiate is selected based on the "),uwe=a("code"),aWr=o("model_type"),nWr=o(` property of the config object (either
passed as an argument or loaded from `),bwe=a("code"),sWr=o("pretrained_model_name_or_path"),lWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vwe=a("code"),iWr=o("pretrained_model_name_or_path"),dWr=o(":"),cWr=l(),fe=a("ul"),G5=a("li"),Fwe=a("strong"),fWr=o("albert"),mWr=o(" \u2014 "),ere=a("a"),gWr=o("TFAlbertForQuestionAnswering"),hWr=o(" (ALBERT model)"),pWr=l(),O5=a("li"),Twe=a("strong"),_Wr=o("bert"),uWr=o(" \u2014 "),ore=a("a"),bWr=o("TFBertForQuestionAnswering"),vWr=o(" (BERT model)"),FWr=l(),V5=a("li"),Mwe=a("strong"),TWr=o("camembert"),MWr=o(" \u2014 "),rre=a("a"),EWr=o("TFCamembertForQuestionAnswering"),CWr=o(" (CamemBERT model)"),wWr=l(),X5=a("li"),Ewe=a("strong"),AWr=o("convbert"),LWr=o(" \u2014 "),tre=a("a"),yWr=o("TFConvBertForQuestionAnswering"),xWr=o(" (ConvBERT model)"),$Wr=l(),z5=a("li"),Cwe=a("strong"),kWr=o("deberta"),SWr=o(" \u2014 "),are=a("a"),RWr=o("TFDebertaForQuestionAnswering"),PWr=o(" (DeBERTa model)"),BWr=l(),W5=a("li"),wwe=a("strong"),IWr=o("deberta-v2"),NWr=o(" \u2014 "),nre=a("a"),qWr=o("TFDebertaV2ForQuestionAnswering"),jWr=o(" (DeBERTa-v2 model)"),DWr=l(),Q5=a("li"),Awe=a("strong"),GWr=o("distilbert"),OWr=o(" \u2014 "),sre=a("a"),VWr=o("TFDistilBertForQuestionAnswering"),XWr=o(" (DistilBERT model)"),zWr=l(),U5=a("li"),Lwe=a("strong"),WWr=o("electra"),QWr=o(" \u2014 "),lre=a("a"),UWr=o("TFElectraForQuestionAnswering"),HWr=o(" (ELECTRA model)"),JWr=l(),H5=a("li"),ywe=a("strong"),YWr=o("flaubert"),KWr=o(" \u2014 "),ire=a("a"),ZWr=o("TFFlaubertForQuestionAnsweringSimple"),eQr=o(" (FlauBERT model)"),oQr=l(),J5=a("li"),xwe=a("strong"),rQr=o("funnel"),tQr=o(" \u2014 "),dre=a("a"),aQr=o("TFFunnelForQuestionAnswering"),nQr=o(" (Funnel Transformer model)"),sQr=l(),Y5=a("li"),$we=a("strong"),lQr=o("gptj"),iQr=o(" \u2014 "),cre=a("a"),dQr=o("TFGPTJForQuestionAnswering"),cQr=o(" (GPT-J model)"),fQr=l(),K5=a("li"),kwe=a("strong"),mQr=o("longformer"),gQr=o(" \u2014 "),fre=a("a"),hQr=o("TFLongformerForQuestionAnswering"),pQr=o(" (Longformer model)"),_Qr=l(),Z5=a("li"),Swe=a("strong"),uQr=o("mobilebert"),bQr=o(" \u2014 "),mre=a("a"),vQr=o("TFMobileBertForQuestionAnswering"),FQr=o(" (MobileBERT model)"),TQr=l(),e0=a("li"),Rwe=a("strong"),MQr=o("mpnet"),EQr=o(" \u2014 "),gre=a("a"),CQr=o("TFMPNetForQuestionAnswering"),wQr=o(" (MPNet model)"),AQr=l(),o0=a("li"),Pwe=a("strong"),LQr=o("rembert"),yQr=o(" \u2014 "),hre=a("a"),xQr=o("TFRemBertForQuestionAnswering"),$Qr=o(" (RemBERT model)"),kQr=l(),r0=a("li"),Bwe=a("strong"),SQr=o("roberta"),RQr=o(" \u2014 "),pre=a("a"),PQr=o("TFRobertaForQuestionAnswering"),BQr=o(" (RoBERTa model)"),IQr=l(),t0=a("li"),Iwe=a("strong"),NQr=o("roformer"),qQr=o(" \u2014 "),_re=a("a"),jQr=o("TFRoFormerForQuestionAnswering"),DQr=o(" (RoFormer model)"),GQr=l(),a0=a("li"),Nwe=a("strong"),OQr=o("xlm"),VQr=o(" \u2014 "),ure=a("a"),XQr=o("TFXLMForQuestionAnsweringSimple"),zQr=o(" (XLM model)"),WQr=l(),n0=a("li"),qwe=a("strong"),QQr=o("xlm-roberta"),UQr=o(" \u2014 "),bre=a("a"),HQr=o("TFXLMRobertaForQuestionAnswering"),JQr=o(" (XLM-RoBERTa model)"),YQr=l(),s0=a("li"),jwe=a("strong"),KQr=o("xlnet"),ZQr=o(" \u2014 "),vre=a("a"),eUr=o("TFXLNetForQuestionAnsweringSimple"),oUr=o(" (XLNet model)"),rUr=l(),F(l0.$$.fragment),_Je=l(),bf=a("h2"),i0=a("a"),Dwe=a("span"),F(Gk.$$.fragment),tUr=l(),Gwe=a("span"),aUr=o("TFAutoModelForVision2Seq"),uJe=l(),vr=a("div"),F(Ok.$$.fragment),nUr=l(),vf=a("p"),sUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Fre=a("a"),lUr=o("from_pretrained()"),iUr=o(" class method or the "),Tre=a("a"),dUr=o("from_config()"),cUr=o(` class
method.`),fUr=l(),Vk=a("p"),mUr=o("This class cannot be instantiated directly using "),Owe=a("code"),gUr=o("__init__()"),hUr=o(" (throws an error)."),pUr=l(),ea=a("div"),F(Xk.$$.fragment),_Ur=l(),Vwe=a("p"),uUr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bUr=l(),Ff=a("p"),vUr=o(`Note:
Loading a model from its configuration file does `),Xwe=a("strong"),FUr=o("not"),TUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mre=a("a"),MUr=o("from_pretrained()"),EUr=o(" to load the model weights."),CUr=l(),F(d0.$$.fragment),wUr=l(),Ur=a("div"),F(zk.$$.fragment),AUr=l(),zwe=a("p"),LUr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yUr=l(),Pn=a("p"),xUr=o("The model class to instantiate is selected based on the "),Wwe=a("code"),$Ur=o("model_type"),kUr=o(` property of the config object (either
passed as an argument or loaded from `),Qwe=a("code"),SUr=o("pretrained_model_name_or_path"),RUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uwe=a("code"),PUr=o("pretrained_model_name_or_path"),BUr=o(":"),IUr=l(),Hwe=a("ul"),c0=a("li"),Jwe=a("strong"),NUr=o("vision-encoder-decoder"),qUr=o(" \u2014 "),Ere=a("a"),jUr=o("TFVisionEncoderDecoderModel"),DUr=o(" (Vision Encoder decoder model)"),GUr=l(),F(f0.$$.fragment),bJe=l(),Tf=a("h2"),m0=a("a"),Ywe=a("span"),F(Wk.$$.fragment),OUr=l(),Kwe=a("span"),VUr=o("TFAutoModelForSpeechSeq2Seq"),vJe=l(),Fr=a("div"),F(Qk.$$.fragment),XUr=l(),Mf=a("p"),zUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Cre=a("a"),WUr=o("from_pretrained()"),QUr=o(" class method or the "),wre=a("a"),UUr=o("from_config()"),HUr=o(` class
method.`),JUr=l(),Uk=a("p"),YUr=o("This class cannot be instantiated directly using "),Zwe=a("code"),KUr=o("__init__()"),ZUr=o(" (throws an error)."),eHr=l(),oa=a("div"),F(Hk.$$.fragment),oHr=l(),eAe=a("p"),rHr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tHr=l(),Ef=a("p"),aHr=o(`Note:
Loading a model from its configuration file does `),oAe=a("strong"),nHr=o("not"),sHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=a("a"),lHr=o("from_pretrained()"),iHr=o(" to load the model weights."),dHr=l(),F(g0.$$.fragment),cHr=l(),Hr=a("div"),F(Jk.$$.fragment),fHr=l(),rAe=a("p"),mHr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),gHr=l(),Bn=a("p"),hHr=o("The model class to instantiate is selected based on the "),tAe=a("code"),pHr=o("model_type"),_Hr=o(` property of the config object (either
passed as an argument or loaded from `),aAe=a("code"),uHr=o("pretrained_model_name_or_path"),bHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nAe=a("code"),vHr=o("pretrained_model_name_or_path"),FHr=o(":"),THr=l(),sAe=a("ul"),h0=a("li"),lAe=a("strong"),MHr=o("speech_to_text"),EHr=o(" \u2014 "),Lre=a("a"),CHr=o("TFSpeech2TextForConditionalGeneration"),wHr=o(" (Speech2Text model)"),AHr=l(),F(p0.$$.fragment),FJe=l(),Cf=a("h2"),_0=a("a"),iAe=a("span"),F(Yk.$$.fragment),LHr=l(),dAe=a("span"),yHr=o("FlaxAutoModel"),TJe=l(),Tr=a("div"),F(Kk.$$.fragment),xHr=l(),wf=a("p"),$Hr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yre=a("a"),kHr=o("from_pretrained()"),SHr=o(" class method or the "),xre=a("a"),RHr=o("from_config()"),PHr=o(` class
method.`),BHr=l(),Zk=a("p"),IHr=o("This class cannot be instantiated directly using "),cAe=a("code"),NHr=o("__init__()"),qHr=o(" (throws an error)."),jHr=l(),ra=a("div"),F(eS.$$.fragment),DHr=l(),fAe=a("p"),GHr=o("Instantiates one of the base model classes of the library from a configuration."),OHr=l(),Af=a("p"),VHr=o(`Note:
Loading a model from its configuration file does `),mAe=a("strong"),XHr=o("not"),zHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$re=a("a"),WHr=o("from_pretrained()"),QHr=o(" to load the model weights."),UHr=l(),F(u0.$$.fragment),HHr=l(),Jr=a("div"),F(oS.$$.fragment),JHr=l(),gAe=a("p"),YHr=o("Instantiate one of the base model classes of the library from a pretrained model."),KHr=l(),In=a("p"),ZHr=o("The model class to instantiate is selected based on the "),hAe=a("code"),eJr=o("model_type"),oJr=o(` property of the config object (either
passed as an argument or loaded from `),pAe=a("code"),rJr=o("pretrained_model_name_or_path"),tJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ae=a("code"),aJr=o("pretrained_model_name_or_path"),nJr=o(":"),sJr=l(),re=a("ul"),b0=a("li"),uAe=a("strong"),lJr=o("albert"),iJr=o(" \u2014 "),kre=a("a"),dJr=o("FlaxAlbertModel"),cJr=o(" (ALBERT model)"),fJr=l(),v0=a("li"),bAe=a("strong"),mJr=o("bart"),gJr=o(" \u2014 "),Sre=a("a"),hJr=o("FlaxBartModel"),pJr=o(" (BART model)"),_Jr=l(),F0=a("li"),vAe=a("strong"),uJr=o("beit"),bJr=o(" \u2014 "),Rre=a("a"),vJr=o("FlaxBeitModel"),FJr=o(" (BEiT model)"),TJr=l(),T0=a("li"),FAe=a("strong"),MJr=o("bert"),EJr=o(" \u2014 "),Pre=a("a"),CJr=o("FlaxBertModel"),wJr=o(" (BERT model)"),AJr=l(),M0=a("li"),TAe=a("strong"),LJr=o("big_bird"),yJr=o(" \u2014 "),Bre=a("a"),xJr=o("FlaxBigBirdModel"),$Jr=o(" (BigBird model)"),kJr=l(),E0=a("li"),MAe=a("strong"),SJr=o("blenderbot"),RJr=o(" \u2014 "),Ire=a("a"),PJr=o("FlaxBlenderbotModel"),BJr=o(" (Blenderbot model)"),IJr=l(),C0=a("li"),EAe=a("strong"),NJr=o("blenderbot-small"),qJr=o(" \u2014 "),Nre=a("a"),jJr=o("FlaxBlenderbotSmallModel"),DJr=o(" (BlenderbotSmall model)"),GJr=l(),w0=a("li"),CAe=a("strong"),OJr=o("clip"),VJr=o(" \u2014 "),qre=a("a"),XJr=o("FlaxCLIPModel"),zJr=o(" (CLIP model)"),WJr=l(),A0=a("li"),wAe=a("strong"),QJr=o("distilbert"),UJr=o(" \u2014 "),jre=a("a"),HJr=o("FlaxDistilBertModel"),JJr=o(" (DistilBERT model)"),YJr=l(),L0=a("li"),AAe=a("strong"),KJr=o("electra"),ZJr=o(" \u2014 "),Dre=a("a"),eYr=o("FlaxElectraModel"),oYr=o(" (ELECTRA model)"),rYr=l(),y0=a("li"),LAe=a("strong"),tYr=o("gpt2"),aYr=o(" \u2014 "),Gre=a("a"),nYr=o("FlaxGPT2Model"),sYr=o(" (OpenAI GPT-2 model)"),lYr=l(),x0=a("li"),yAe=a("strong"),iYr=o("gpt_neo"),dYr=o(" \u2014 "),Ore=a("a"),cYr=o("FlaxGPTNeoModel"),fYr=o(" (GPT Neo model)"),mYr=l(),$0=a("li"),xAe=a("strong"),gYr=o("gptj"),hYr=o(" \u2014 "),Vre=a("a"),pYr=o("FlaxGPTJModel"),_Yr=o(" (GPT-J model)"),uYr=l(),k0=a("li"),$Ae=a("strong"),bYr=o("longt5"),vYr=o(" \u2014 "),Xre=a("a"),FYr=o("FlaxLongT5Model"),TYr=o(" (LongT5 model)"),MYr=l(),S0=a("li"),kAe=a("strong"),EYr=o("marian"),CYr=o(" \u2014 "),zre=a("a"),wYr=o("FlaxMarianModel"),AYr=o(" (Marian model)"),LYr=l(),R0=a("li"),SAe=a("strong"),yYr=o("mbart"),xYr=o(" \u2014 "),Wre=a("a"),$Yr=o("FlaxMBartModel"),kYr=o(" (mBART model)"),SYr=l(),P0=a("li"),RAe=a("strong"),RYr=o("mt5"),PYr=o(" \u2014 "),Qre=a("a"),BYr=o("FlaxMT5Model"),IYr=o(" (MT5 model)"),NYr=l(),B0=a("li"),PAe=a("strong"),qYr=o("opt"),jYr=o(" \u2014 "),Ure=a("a"),DYr=o("FlaxOPTModel"),GYr=o(" (OPT model)"),OYr=l(),I0=a("li"),BAe=a("strong"),VYr=o("pegasus"),XYr=o(" \u2014 "),Hre=a("a"),zYr=o("FlaxPegasusModel"),WYr=o(" (Pegasus model)"),QYr=l(),N0=a("li"),IAe=a("strong"),UYr=o("roberta"),HYr=o(" \u2014 "),Jre=a("a"),JYr=o("FlaxRobertaModel"),YYr=o(" (RoBERTa model)"),KYr=l(),q0=a("li"),NAe=a("strong"),ZYr=o("roformer"),eKr=o(" \u2014 "),Yre=a("a"),oKr=o("FlaxRoFormerModel"),rKr=o(" (RoFormer model)"),tKr=l(),j0=a("li"),qAe=a("strong"),aKr=o("t5"),nKr=o(" \u2014 "),Kre=a("a"),sKr=o("FlaxT5Model"),lKr=o(" (T5 model)"),iKr=l(),D0=a("li"),jAe=a("strong"),dKr=o("vision-text-dual-encoder"),cKr=o(" \u2014 "),Zre=a("a"),fKr=o("FlaxVisionTextDualEncoderModel"),mKr=o(" (VisionTextDualEncoder model)"),gKr=l(),G0=a("li"),DAe=a("strong"),hKr=o("vit"),pKr=o(" \u2014 "),ete=a("a"),_Kr=o("FlaxViTModel"),uKr=o(" (ViT model)"),bKr=l(),O0=a("li"),GAe=a("strong"),vKr=o("wav2vec2"),FKr=o(" \u2014 "),ote=a("a"),TKr=o("FlaxWav2Vec2Model"),MKr=o(" (Wav2Vec2 model)"),EKr=l(),V0=a("li"),OAe=a("strong"),CKr=o("xglm"),wKr=o(" \u2014 "),rte=a("a"),AKr=o("FlaxXGLMModel"),LKr=o(" (XGLM model)"),yKr=l(),X0=a("li"),VAe=a("strong"),xKr=o("xlm-roberta"),$Kr=o(" \u2014 "),tte=a("a"),kKr=o("FlaxXLMRobertaModel"),SKr=o(" (XLM-RoBERTa model)"),RKr=l(),F(z0.$$.fragment),MJe=l(),Lf=a("h2"),W0=a("a"),XAe=a("span"),F(rS.$$.fragment),PKr=l(),zAe=a("span"),BKr=o("FlaxAutoModelForCausalLM"),EJe=l(),Mr=a("div"),F(tS.$$.fragment),IKr=l(),yf=a("p"),NKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ate=a("a"),qKr=o("from_pretrained()"),jKr=o(" class method or the "),nte=a("a"),DKr=o("from_config()"),GKr=o(` class
method.`),OKr=l(),aS=a("p"),VKr=o("This class cannot be instantiated directly using "),WAe=a("code"),XKr=o("__init__()"),zKr=o(" (throws an error)."),WKr=l(),ta=a("div"),F(nS.$$.fragment),QKr=l(),QAe=a("p"),UKr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),HKr=l(),xf=a("p"),JKr=o(`Note:
Loading a model from its configuration file does `),UAe=a("strong"),YKr=o("not"),KKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ste=a("a"),ZKr=o("from_pretrained()"),eZr=o(" to load the model weights."),oZr=l(),F(Q0.$$.fragment),rZr=l(),Yr=a("div"),F(sS.$$.fragment),tZr=l(),HAe=a("p"),aZr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nZr=l(),Nn=a("p"),sZr=o("The model class to instantiate is selected based on the "),JAe=a("code"),lZr=o("model_type"),iZr=o(` property of the config object (either
passed as an argument or loaded from `),YAe=a("code"),dZr=o("pretrained_model_name_or_path"),cZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KAe=a("code"),fZr=o("pretrained_model_name_or_path"),mZr=o(":"),gZr=l(),xe=a("ul"),U0=a("li"),ZAe=a("strong"),hZr=o("bart"),pZr=o(" \u2014 "),lte=a("a"),_Zr=o("FlaxBartForCausalLM"),uZr=o(" (BART model)"),bZr=l(),H0=a("li"),e7e=a("strong"),vZr=o("bert"),FZr=o(" \u2014 "),ite=a("a"),TZr=o("FlaxBertForCausalLM"),MZr=o(" (BERT model)"),EZr=l(),J0=a("li"),o7e=a("strong"),CZr=o("big_bird"),wZr=o(" \u2014 "),dte=a("a"),AZr=o("FlaxBigBirdForCausalLM"),LZr=o(" (BigBird model)"),yZr=l(),Y0=a("li"),r7e=a("strong"),xZr=o("electra"),$Zr=o(" \u2014 "),cte=a("a"),kZr=o("FlaxElectraForCausalLM"),SZr=o(" (ELECTRA model)"),RZr=l(),K0=a("li"),t7e=a("strong"),PZr=o("gpt2"),BZr=o(" \u2014 "),fte=a("a"),IZr=o("FlaxGPT2LMHeadModel"),NZr=o(" (OpenAI GPT-2 model)"),qZr=l(),Z0=a("li"),a7e=a("strong"),jZr=o("gpt_neo"),DZr=o(" \u2014 "),mte=a("a"),GZr=o("FlaxGPTNeoForCausalLM"),OZr=o(" (GPT Neo model)"),VZr=l(),ew=a("li"),n7e=a("strong"),XZr=o("gptj"),zZr=o(" \u2014 "),gte=a("a"),WZr=o("FlaxGPTJForCausalLM"),QZr=o(" (GPT-J model)"),UZr=l(),ow=a("li"),s7e=a("strong"),HZr=o("opt"),JZr=o(" \u2014 "),hte=a("a"),YZr=o("FlaxOPTForCausalLM"),KZr=o(" (OPT model)"),ZZr=l(),rw=a("li"),l7e=a("strong"),eet=o("roberta"),oet=o(" \u2014 "),pte=a("a"),ret=o("FlaxRobertaForCausalLM"),tet=o(" (RoBERTa model)"),aet=l(),tw=a("li"),i7e=a("strong"),net=o("xglm"),set=o(" \u2014 "),_te=a("a"),iet=o("FlaxXGLMForCausalLM"),det=o(" (XGLM model)"),cet=l(),F(aw.$$.fragment),CJe=l(),$f=a("h2"),nw=a("a"),d7e=a("span"),F(lS.$$.fragment),fet=l(),c7e=a("span"),met=o("FlaxAutoModelForPreTraining"),wJe=l(),Er=a("div"),F(iS.$$.fragment),get=l(),kf=a("p"),het=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ute=a("a"),pet=o("from_pretrained()"),_et=o(" class method or the "),bte=a("a"),uet=o("from_config()"),bet=o(` class
method.`),vet=l(),dS=a("p"),Fet=o("This class cannot be instantiated directly using "),f7e=a("code"),Tet=o("__init__()"),Met=o(" (throws an error)."),Eet=l(),aa=a("div"),F(cS.$$.fragment),Cet=l(),m7e=a("p"),wet=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Aet=l(),Sf=a("p"),Let=o(`Note:
Loading a model from its configuration file does `),g7e=a("strong"),yet=o("not"),xet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vte=a("a"),$et=o("from_pretrained()"),ket=o(" to load the model weights."),Set=l(),F(sw.$$.fragment),Ret=l(),Kr=a("div"),F(fS.$$.fragment),Pet=l(),h7e=a("p"),Bet=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Iet=l(),qn=a("p"),Net=o("The model class to instantiate is selected based on the "),p7e=a("code"),qet=o("model_type"),jet=o(` property of the config object (either
passed as an argument or loaded from `),_7e=a("code"),Det=o("pretrained_model_name_or_path"),Get=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u7e=a("code"),Oet=o("pretrained_model_name_or_path"),Vet=o(":"),Xet=l(),Ee=a("ul"),lw=a("li"),b7e=a("strong"),zet=o("albert"),Wet=o(" \u2014 "),Fte=a("a"),Qet=o("FlaxAlbertForPreTraining"),Uet=o(" (ALBERT model)"),Het=l(),iw=a("li"),v7e=a("strong"),Jet=o("bart"),Yet=o(" \u2014 "),Tte=a("a"),Ket=o("FlaxBartForConditionalGeneration"),Zet=o(" (BART model)"),eot=l(),dw=a("li"),F7e=a("strong"),oot=o("bert"),rot=o(" \u2014 "),Mte=a("a"),tot=o("FlaxBertForPreTraining"),aot=o(" (BERT model)"),not=l(),cw=a("li"),T7e=a("strong"),sot=o("big_bird"),lot=o(" \u2014 "),Ete=a("a"),iot=o("FlaxBigBirdForPreTraining"),dot=o(" (BigBird model)"),cot=l(),fw=a("li"),M7e=a("strong"),fot=o("electra"),mot=o(" \u2014 "),Cte=a("a"),got=o("FlaxElectraForPreTraining"),hot=o(" (ELECTRA model)"),pot=l(),mw=a("li"),E7e=a("strong"),_ot=o("longt5"),uot=o(" \u2014 "),wte=a("a"),bot=o("FlaxLongT5ForConditionalGeneration"),vot=o(" (LongT5 model)"),Fot=l(),gw=a("li"),C7e=a("strong"),Tot=o("mbart"),Mot=o(" \u2014 "),Ate=a("a"),Eot=o("FlaxMBartForConditionalGeneration"),Cot=o(" (mBART model)"),wot=l(),hw=a("li"),w7e=a("strong"),Aot=o("mt5"),Lot=o(" \u2014 "),Lte=a("a"),yot=o("FlaxMT5ForConditionalGeneration"),xot=o(" (MT5 model)"),$ot=l(),pw=a("li"),A7e=a("strong"),kot=o("roberta"),Sot=o(" \u2014 "),yte=a("a"),Rot=o("FlaxRobertaForMaskedLM"),Pot=o(" (RoBERTa model)"),Bot=l(),_w=a("li"),L7e=a("strong"),Iot=o("roformer"),Not=o(" \u2014 "),xte=a("a"),qot=o("FlaxRoFormerForMaskedLM"),jot=o(" (RoFormer model)"),Dot=l(),uw=a("li"),y7e=a("strong"),Got=o("t5"),Oot=o(" \u2014 "),$te=a("a"),Vot=o("FlaxT5ForConditionalGeneration"),Xot=o(" (T5 model)"),zot=l(),bw=a("li"),x7e=a("strong"),Wot=o("wav2vec2"),Qot=o(" \u2014 "),kte=a("a"),Uot=o("FlaxWav2Vec2ForPreTraining"),Hot=o(" (Wav2Vec2 model)"),Jot=l(),vw=a("li"),$7e=a("strong"),Yot=o("xlm-roberta"),Kot=o(" \u2014 "),Ste=a("a"),Zot=o("FlaxXLMRobertaForMaskedLM"),ert=o(" (XLM-RoBERTa model)"),ort=l(),F(Fw.$$.fragment),AJe=l(),Rf=a("h2"),Tw=a("a"),k7e=a("span"),F(mS.$$.fragment),rrt=l(),S7e=a("span"),trt=o("FlaxAutoModelForMaskedLM"),LJe=l(),Cr=a("div"),F(gS.$$.fragment),art=l(),Pf=a("p"),nrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Rte=a("a"),srt=o("from_pretrained()"),lrt=o(" class method or the "),Pte=a("a"),irt=o("from_config()"),drt=o(` class
method.`),crt=l(),hS=a("p"),frt=o("This class cannot be instantiated directly using "),R7e=a("code"),mrt=o("__init__()"),grt=o(" (throws an error)."),hrt=l(),na=a("div"),F(pS.$$.fragment),prt=l(),P7e=a("p"),_rt=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),urt=l(),Bf=a("p"),brt=o(`Note:
Loading a model from its configuration file does `),B7e=a("strong"),vrt=o("not"),Frt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bte=a("a"),Trt=o("from_pretrained()"),Mrt=o(" to load the model weights."),Ert=l(),F(Mw.$$.fragment),Crt=l(),Zr=a("div"),F(_S.$$.fragment),wrt=l(),I7e=a("p"),Art=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Lrt=l(),jn=a("p"),yrt=o("The model class to instantiate is selected based on the "),N7e=a("code"),xrt=o("model_type"),$rt=o(` property of the config object (either
passed as an argument or loaded from `),q7e=a("code"),krt=o("pretrained_model_name_or_path"),Srt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=a("code"),Rrt=o("pretrained_model_name_or_path"),Prt=o(":"),Brt=l(),$e=a("ul"),Ew=a("li"),D7e=a("strong"),Irt=o("albert"),Nrt=o(" \u2014 "),Ite=a("a"),qrt=o("FlaxAlbertForMaskedLM"),jrt=o(" (ALBERT model)"),Drt=l(),Cw=a("li"),G7e=a("strong"),Grt=o("bart"),Ort=o(" \u2014 "),Nte=a("a"),Vrt=o("FlaxBartForConditionalGeneration"),Xrt=o(" (BART model)"),zrt=l(),ww=a("li"),O7e=a("strong"),Wrt=o("bert"),Qrt=o(" \u2014 "),qte=a("a"),Urt=o("FlaxBertForMaskedLM"),Hrt=o(" (BERT model)"),Jrt=l(),Aw=a("li"),V7e=a("strong"),Yrt=o("big_bird"),Krt=o(" \u2014 "),jte=a("a"),Zrt=o("FlaxBigBirdForMaskedLM"),ett=o(" (BigBird model)"),ott=l(),Lw=a("li"),X7e=a("strong"),rtt=o("distilbert"),ttt=o(" \u2014 "),Dte=a("a"),att=o("FlaxDistilBertForMaskedLM"),ntt=o(" (DistilBERT model)"),stt=l(),yw=a("li"),z7e=a("strong"),ltt=o("electra"),itt=o(" \u2014 "),Gte=a("a"),dtt=o("FlaxElectraForMaskedLM"),ctt=o(" (ELECTRA model)"),ftt=l(),xw=a("li"),W7e=a("strong"),mtt=o("mbart"),gtt=o(" \u2014 "),Ote=a("a"),htt=o("FlaxMBartForConditionalGeneration"),ptt=o(" (mBART model)"),_tt=l(),$w=a("li"),Q7e=a("strong"),utt=o("roberta"),btt=o(" \u2014 "),Vte=a("a"),vtt=o("FlaxRobertaForMaskedLM"),Ftt=o(" (RoBERTa model)"),Ttt=l(),kw=a("li"),U7e=a("strong"),Mtt=o("roformer"),Ett=o(" \u2014 "),Xte=a("a"),Ctt=o("FlaxRoFormerForMaskedLM"),wtt=o(" (RoFormer model)"),Att=l(),Sw=a("li"),H7e=a("strong"),Ltt=o("xlm-roberta"),ytt=o(" \u2014 "),zte=a("a"),xtt=o("FlaxXLMRobertaForMaskedLM"),$tt=o(" (XLM-RoBERTa model)"),ktt=l(),F(Rw.$$.fragment),yJe=l(),If=a("h2"),Pw=a("a"),J7e=a("span"),F(uS.$$.fragment),Stt=l(),Y7e=a("span"),Rtt=o("FlaxAutoModelForSeq2SeqLM"),xJe=l(),wr=a("div"),F(bS.$$.fragment),Ptt=l(),Nf=a("p"),Btt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Wte=a("a"),Itt=o("from_pretrained()"),Ntt=o(" class method or the "),Qte=a("a"),qtt=o("from_config()"),jtt=o(` class
method.`),Dtt=l(),vS=a("p"),Gtt=o("This class cannot be instantiated directly using "),K7e=a("code"),Ott=o("__init__()"),Vtt=o(" (throws an error)."),Xtt=l(),sa=a("div"),F(FS.$$.fragment),ztt=l(),Z7e=a("p"),Wtt=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Qtt=l(),qf=a("p"),Utt=o(`Note:
Loading a model from its configuration file does `),eLe=a("strong"),Htt=o("not"),Jtt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ute=a("a"),Ytt=o("from_pretrained()"),Ktt=o(" to load the model weights."),Ztt=l(),F(Bw.$$.fragment),eat=l(),et=a("div"),F(TS.$$.fragment),oat=l(),oLe=a("p"),rat=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tat=l(),Dn=a("p"),aat=o("The model class to instantiate is selected based on the "),rLe=a("code"),nat=o("model_type"),sat=o(` property of the config object (either
passed as an argument or loaded from `),tLe=a("code"),lat=o("pretrained_model_name_or_path"),iat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aLe=a("code"),dat=o("pretrained_model_name_or_path"),cat=o(":"),fat=l(),ke=a("ul"),Iw=a("li"),nLe=a("strong"),mat=o("bart"),gat=o(" \u2014 "),Hte=a("a"),hat=o("FlaxBartForConditionalGeneration"),pat=o(" (BART model)"),_at=l(),Nw=a("li"),sLe=a("strong"),uat=o("blenderbot"),bat=o(" \u2014 "),Jte=a("a"),vat=o("FlaxBlenderbotForConditionalGeneration"),Fat=o(" (Blenderbot model)"),Tat=l(),qw=a("li"),lLe=a("strong"),Mat=o("blenderbot-small"),Eat=o(" \u2014 "),Yte=a("a"),Cat=o("FlaxBlenderbotSmallForConditionalGeneration"),wat=o(" (BlenderbotSmall model)"),Aat=l(),jw=a("li"),iLe=a("strong"),Lat=o("encoder-decoder"),yat=o(" \u2014 "),Kte=a("a"),xat=o("FlaxEncoderDecoderModel"),$at=o(" (Encoder decoder model)"),kat=l(),Dw=a("li"),dLe=a("strong"),Sat=o("longt5"),Rat=o(" \u2014 "),Zte=a("a"),Pat=o("FlaxLongT5ForConditionalGeneration"),Bat=o(" (LongT5 model)"),Iat=l(),Gw=a("li"),cLe=a("strong"),Nat=o("marian"),qat=o(" \u2014 "),eae=a("a"),jat=o("FlaxMarianMTModel"),Dat=o(" (Marian model)"),Gat=l(),Ow=a("li"),fLe=a("strong"),Oat=o("mbart"),Vat=o(" \u2014 "),oae=a("a"),Xat=o("FlaxMBartForConditionalGeneration"),zat=o(" (mBART model)"),Wat=l(),Vw=a("li"),mLe=a("strong"),Qat=o("mt5"),Uat=o(" \u2014 "),rae=a("a"),Hat=o("FlaxMT5ForConditionalGeneration"),Jat=o(" (MT5 model)"),Yat=l(),Xw=a("li"),gLe=a("strong"),Kat=o("pegasus"),Zat=o(" \u2014 "),tae=a("a"),ent=o("FlaxPegasusForConditionalGeneration"),ont=o(" (Pegasus model)"),rnt=l(),zw=a("li"),hLe=a("strong"),tnt=o("t5"),ant=o(" \u2014 "),aae=a("a"),nnt=o("FlaxT5ForConditionalGeneration"),snt=o(" (T5 model)"),lnt=l(),F(Ww.$$.fragment),$Je=l(),jf=a("h2"),Qw=a("a"),pLe=a("span"),F(MS.$$.fragment),int=l(),_Le=a("span"),dnt=o("FlaxAutoModelForSequenceClassification"),kJe=l(),Ar=a("div"),F(ES.$$.fragment),cnt=l(),Df=a("p"),fnt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nae=a("a"),mnt=o("from_pretrained()"),gnt=o(" class method or the "),sae=a("a"),hnt=o("from_config()"),pnt=o(` class
method.`),_nt=l(),CS=a("p"),unt=o("This class cannot be instantiated directly using "),uLe=a("code"),bnt=o("__init__()"),vnt=o(" (throws an error)."),Fnt=l(),la=a("div"),F(wS.$$.fragment),Tnt=l(),bLe=a("p"),Mnt=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ent=l(),Gf=a("p"),Cnt=o(`Note:
Loading a model from its configuration file does `),vLe=a("strong"),wnt=o("not"),Ant=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lae=a("a"),Lnt=o("from_pretrained()"),ynt=o(" to load the model weights."),xnt=l(),F(Uw.$$.fragment),$nt=l(),ot=a("div"),F(AS.$$.fragment),knt=l(),FLe=a("p"),Snt=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Rnt=l(),Gn=a("p"),Pnt=o("The model class to instantiate is selected based on the "),TLe=a("code"),Bnt=o("model_type"),Int=o(` property of the config object (either
passed as an argument or loaded from `),MLe=a("code"),Nnt=o("pretrained_model_name_or_path"),qnt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ELe=a("code"),jnt=o("pretrained_model_name_or_path"),Dnt=o(":"),Gnt=l(),Se=a("ul"),Hw=a("li"),CLe=a("strong"),Ont=o("albert"),Vnt=o(" \u2014 "),iae=a("a"),Xnt=o("FlaxAlbertForSequenceClassification"),znt=o(" (ALBERT model)"),Wnt=l(),Jw=a("li"),wLe=a("strong"),Qnt=o("bart"),Unt=o(" \u2014 "),dae=a("a"),Hnt=o("FlaxBartForSequenceClassification"),Jnt=o(" (BART model)"),Ynt=l(),Yw=a("li"),ALe=a("strong"),Knt=o("bert"),Znt=o(" \u2014 "),cae=a("a"),est=o("FlaxBertForSequenceClassification"),ost=o(" (BERT model)"),rst=l(),Kw=a("li"),LLe=a("strong"),tst=o("big_bird"),ast=o(" \u2014 "),fae=a("a"),nst=o("FlaxBigBirdForSequenceClassification"),sst=o(" (BigBird model)"),lst=l(),Zw=a("li"),yLe=a("strong"),ist=o("distilbert"),dst=o(" \u2014 "),mae=a("a"),cst=o("FlaxDistilBertForSequenceClassification"),fst=o(" (DistilBERT model)"),mst=l(),eA=a("li"),xLe=a("strong"),gst=o("electra"),hst=o(" \u2014 "),gae=a("a"),pst=o("FlaxElectraForSequenceClassification"),_st=o(" (ELECTRA model)"),ust=l(),oA=a("li"),$Le=a("strong"),bst=o("mbart"),vst=o(" \u2014 "),hae=a("a"),Fst=o("FlaxMBartForSequenceClassification"),Tst=o(" (mBART model)"),Mst=l(),rA=a("li"),kLe=a("strong"),Est=o("roberta"),Cst=o(" \u2014 "),pae=a("a"),wst=o("FlaxRobertaForSequenceClassification"),Ast=o(" (RoBERTa model)"),Lst=l(),tA=a("li"),SLe=a("strong"),yst=o("roformer"),xst=o(" \u2014 "),_ae=a("a"),$st=o("FlaxRoFormerForSequenceClassification"),kst=o(" (RoFormer model)"),Sst=l(),aA=a("li"),RLe=a("strong"),Rst=o("xlm-roberta"),Pst=o(" \u2014 "),uae=a("a"),Bst=o("FlaxXLMRobertaForSequenceClassification"),Ist=o(" (XLM-RoBERTa model)"),Nst=l(),F(nA.$$.fragment),SJe=l(),Of=a("h2"),sA=a("a"),PLe=a("span"),F(LS.$$.fragment),qst=l(),BLe=a("span"),jst=o("FlaxAutoModelForQuestionAnswering"),RJe=l(),Lr=a("div"),F(yS.$$.fragment),Dst=l(),Vf=a("p"),Gst=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bae=a("a"),Ost=o("from_pretrained()"),Vst=o(" class method or the "),vae=a("a"),Xst=o("from_config()"),zst=o(` class
method.`),Wst=l(),xS=a("p"),Qst=o("This class cannot be instantiated directly using "),ILe=a("code"),Ust=o("__init__()"),Hst=o(" (throws an error)."),Jst=l(),ia=a("div"),F($S.$$.fragment),Yst=l(),NLe=a("p"),Kst=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Zst=l(),Xf=a("p"),elt=o(`Note:
Loading a model from its configuration file does `),qLe=a("strong"),olt=o("not"),rlt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fae=a("a"),tlt=o("from_pretrained()"),alt=o(" to load the model weights."),nlt=l(),F(lA.$$.fragment),slt=l(),rt=a("div"),F(kS.$$.fragment),llt=l(),jLe=a("p"),ilt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),dlt=l(),On=a("p"),clt=o("The model class to instantiate is selected based on the "),DLe=a("code"),flt=o("model_type"),mlt=o(` property of the config object (either
passed as an argument or loaded from `),GLe=a("code"),glt=o("pretrained_model_name_or_path"),hlt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OLe=a("code"),plt=o("pretrained_model_name_or_path"),_lt=o(":"),ult=l(),Re=a("ul"),iA=a("li"),VLe=a("strong"),blt=o("albert"),vlt=o(" \u2014 "),Tae=a("a"),Flt=o("FlaxAlbertForQuestionAnswering"),Tlt=o(" (ALBERT model)"),Mlt=l(),dA=a("li"),XLe=a("strong"),Elt=o("bart"),Clt=o(" \u2014 "),Mae=a("a"),wlt=o("FlaxBartForQuestionAnswering"),Alt=o(" (BART model)"),Llt=l(),cA=a("li"),zLe=a("strong"),ylt=o("bert"),xlt=o(" \u2014 "),Eae=a("a"),$lt=o("FlaxBertForQuestionAnswering"),klt=o(" (BERT model)"),Slt=l(),fA=a("li"),WLe=a("strong"),Rlt=o("big_bird"),Plt=o(" \u2014 "),Cae=a("a"),Blt=o("FlaxBigBirdForQuestionAnswering"),Ilt=o(" (BigBird model)"),Nlt=l(),mA=a("li"),QLe=a("strong"),qlt=o("distilbert"),jlt=o(" \u2014 "),wae=a("a"),Dlt=o("FlaxDistilBertForQuestionAnswering"),Glt=o(" (DistilBERT model)"),Olt=l(),gA=a("li"),ULe=a("strong"),Vlt=o("electra"),Xlt=o(" \u2014 "),Aae=a("a"),zlt=o("FlaxElectraForQuestionAnswering"),Wlt=o(" (ELECTRA model)"),Qlt=l(),hA=a("li"),HLe=a("strong"),Ult=o("mbart"),Hlt=o(" \u2014 "),Lae=a("a"),Jlt=o("FlaxMBartForQuestionAnswering"),Ylt=o(" (mBART model)"),Klt=l(),pA=a("li"),JLe=a("strong"),Zlt=o("roberta"),eit=o(" \u2014 "),yae=a("a"),oit=o("FlaxRobertaForQuestionAnswering"),rit=o(" (RoBERTa model)"),tit=l(),_A=a("li"),YLe=a("strong"),ait=o("roformer"),nit=o(" \u2014 "),xae=a("a"),sit=o("FlaxRoFormerForQuestionAnswering"),lit=o(" (RoFormer model)"),iit=l(),uA=a("li"),KLe=a("strong"),dit=o("xlm-roberta"),cit=o(" \u2014 "),$ae=a("a"),fit=o("FlaxXLMRobertaForQuestionAnswering"),mit=o(" (XLM-RoBERTa model)"),git=l(),F(bA.$$.fragment),PJe=l(),zf=a("h2"),vA=a("a"),ZLe=a("span"),F(SS.$$.fragment),hit=l(),eye=a("span"),pit=o("FlaxAutoModelForTokenClassification"),BJe=l(),yr=a("div"),F(RS.$$.fragment),_it=l(),Wf=a("p"),uit=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kae=a("a"),bit=o("from_pretrained()"),vit=o(" class method or the "),Sae=a("a"),Fit=o("from_config()"),Tit=o(` class
method.`),Mit=l(),PS=a("p"),Eit=o("This class cannot be instantiated directly using "),oye=a("code"),Cit=o("__init__()"),wit=o(" (throws an error)."),Ait=l(),da=a("div"),F(BS.$$.fragment),Lit=l(),rye=a("p"),yit=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),xit=l(),Qf=a("p"),$it=o(`Note:
Loading a model from its configuration file does `),tye=a("strong"),kit=o("not"),Sit=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rae=a("a"),Rit=o("from_pretrained()"),Pit=o(" to load the model weights."),Bit=l(),F(FA.$$.fragment),Iit=l(),tt=a("div"),F(IS.$$.fragment),Nit=l(),aye=a("p"),qit=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jit=l(),Vn=a("p"),Dit=o("The model class to instantiate is selected based on the "),nye=a("code"),Git=o("model_type"),Oit=o(` property of the config object (either
passed as an argument or loaded from `),sye=a("code"),Vit=o("pretrained_model_name_or_path"),Xit=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lye=a("code"),zit=o("pretrained_model_name_or_path"),Wit=o(":"),Qit=l(),Xe=a("ul"),TA=a("li"),iye=a("strong"),Uit=o("albert"),Hit=o(" \u2014 "),Pae=a("a"),Jit=o("FlaxAlbertForTokenClassification"),Yit=o(" (ALBERT model)"),Kit=l(),MA=a("li"),dye=a("strong"),Zit=o("bert"),edt=o(" \u2014 "),Bae=a("a"),odt=o("FlaxBertForTokenClassification"),rdt=o(" (BERT model)"),tdt=l(),EA=a("li"),cye=a("strong"),adt=o("big_bird"),ndt=o(" \u2014 "),Iae=a("a"),sdt=o("FlaxBigBirdForTokenClassification"),ldt=o(" (BigBird model)"),idt=l(),CA=a("li"),fye=a("strong"),ddt=o("distilbert"),cdt=o(" \u2014 "),Nae=a("a"),fdt=o("FlaxDistilBertForTokenClassification"),mdt=o(" (DistilBERT model)"),gdt=l(),wA=a("li"),mye=a("strong"),hdt=o("electra"),pdt=o(" \u2014 "),qae=a("a"),_dt=o("FlaxElectraForTokenClassification"),udt=o(" (ELECTRA model)"),bdt=l(),AA=a("li"),gye=a("strong"),vdt=o("roberta"),Fdt=o(" \u2014 "),jae=a("a"),Tdt=o("FlaxRobertaForTokenClassification"),Mdt=o(" (RoBERTa model)"),Edt=l(),LA=a("li"),hye=a("strong"),Cdt=o("roformer"),wdt=o(" \u2014 "),Dae=a("a"),Adt=o("FlaxRoFormerForTokenClassification"),Ldt=o(" (RoFormer model)"),ydt=l(),yA=a("li"),pye=a("strong"),xdt=o("xlm-roberta"),$dt=o(" \u2014 "),Gae=a("a"),kdt=o("FlaxXLMRobertaForTokenClassification"),Sdt=o(" (XLM-RoBERTa model)"),Rdt=l(),F(xA.$$.fragment),IJe=l(),Uf=a("h2"),$A=a("a"),_ye=a("span"),F(NS.$$.fragment),Pdt=l(),uye=a("span"),Bdt=o("FlaxAutoModelForMultipleChoice"),NJe=l(),xr=a("div"),F(qS.$$.fragment),Idt=l(),Hf=a("p"),Ndt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Oae=a("a"),qdt=o("from_pretrained()"),jdt=o(" class method or the "),Vae=a("a"),Ddt=o("from_config()"),Gdt=o(` class
method.`),Odt=l(),jS=a("p"),Vdt=o("This class cannot be instantiated directly using "),bye=a("code"),Xdt=o("__init__()"),zdt=o(" (throws an error)."),Wdt=l(),ca=a("div"),F(DS.$$.fragment),Qdt=l(),vye=a("p"),Udt=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Hdt=l(),Jf=a("p"),Jdt=o(`Note:
Loading a model from its configuration file does `),Fye=a("strong"),Ydt=o("not"),Kdt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xae=a("a"),Zdt=o("from_pretrained()"),ect=o(" to load the model weights."),oct=l(),F(kA.$$.fragment),rct=l(),at=a("div"),F(GS.$$.fragment),tct=l(),Tye=a("p"),act=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),nct=l(),Xn=a("p"),sct=o("The model class to instantiate is selected based on the "),Mye=a("code"),lct=o("model_type"),ict=o(` property of the config object (either
passed as an argument or loaded from `),Eye=a("code"),dct=o("pretrained_model_name_or_path"),cct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cye=a("code"),fct=o("pretrained_model_name_or_path"),mct=o(":"),gct=l(),ze=a("ul"),SA=a("li"),wye=a("strong"),hct=o("albert"),pct=o(" \u2014 "),zae=a("a"),_ct=o("FlaxAlbertForMultipleChoice"),uct=o(" (ALBERT model)"),bct=l(),RA=a("li"),Aye=a("strong"),vct=o("bert"),Fct=o(" \u2014 "),Wae=a("a"),Tct=o("FlaxBertForMultipleChoice"),Mct=o(" (BERT model)"),Ect=l(),PA=a("li"),Lye=a("strong"),Cct=o("big_bird"),wct=o(" \u2014 "),Qae=a("a"),Act=o("FlaxBigBirdForMultipleChoice"),Lct=o(" (BigBird model)"),yct=l(),BA=a("li"),yye=a("strong"),xct=o("distilbert"),$ct=o(" \u2014 "),Uae=a("a"),kct=o("FlaxDistilBertForMultipleChoice"),Sct=o(" (DistilBERT model)"),Rct=l(),IA=a("li"),xye=a("strong"),Pct=o("electra"),Bct=o(" \u2014 "),Hae=a("a"),Ict=o("FlaxElectraForMultipleChoice"),Nct=o(" (ELECTRA model)"),qct=l(),NA=a("li"),$ye=a("strong"),jct=o("roberta"),Dct=o(" \u2014 "),Jae=a("a"),Gct=o("FlaxRobertaForMultipleChoice"),Oct=o(" (RoBERTa model)"),Vct=l(),qA=a("li"),kye=a("strong"),Xct=o("roformer"),zct=o(" \u2014 "),Yae=a("a"),Wct=o("FlaxRoFormerForMultipleChoice"),Qct=o(" (RoFormer model)"),Uct=l(),jA=a("li"),Sye=a("strong"),Hct=o("xlm-roberta"),Jct=o(" \u2014 "),Kae=a("a"),Yct=o("FlaxXLMRobertaForMultipleChoice"),Kct=o(" (XLM-RoBERTa model)"),Zct=l(),F(DA.$$.fragment),qJe=l(),Yf=a("h2"),GA=a("a"),Rye=a("span"),F(OS.$$.fragment),eft=l(),Pye=a("span"),oft=o("FlaxAutoModelForNextSentencePrediction"),jJe=l(),$r=a("div"),F(VS.$$.fragment),rft=l(),Kf=a("p"),tft=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Zae=a("a"),aft=o("from_pretrained()"),nft=o(" class method or the "),ene=a("a"),sft=o("from_config()"),lft=o(` class
method.`),ift=l(),XS=a("p"),dft=o("This class cannot be instantiated directly using "),Bye=a("code"),cft=o("__init__()"),fft=o(" (throws an error)."),mft=l(),fa=a("div"),F(zS.$$.fragment),gft=l(),Iye=a("p"),hft=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),pft=l(),Zf=a("p"),_ft=o(`Note:
Loading a model from its configuration file does `),Nye=a("strong"),uft=o("not"),bft=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),one=a("a"),vft=o("from_pretrained()"),Fft=o(" to load the model weights."),Tft=l(),F(OA.$$.fragment),Mft=l(),nt=a("div"),F(WS.$$.fragment),Eft=l(),qye=a("p"),Cft=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wft=l(),zn=a("p"),Aft=o("The model class to instantiate is selected based on the "),jye=a("code"),Lft=o("model_type"),yft=o(` property of the config object (either
passed as an argument or loaded from `),Dye=a("code"),xft=o("pretrained_model_name_or_path"),$ft=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gye=a("code"),kft=o("pretrained_model_name_or_path"),Sft=o(":"),Rft=l(),Oye=a("ul"),VA=a("li"),Vye=a("strong"),Pft=o("bert"),Bft=o(" \u2014 "),rne=a("a"),Ift=o("FlaxBertForNextSentencePrediction"),Nft=o(" (BERT model)"),qft=l(),F(XA.$$.fragment),DJe=l(),em=a("h2"),zA=a("a"),Xye=a("span"),F(QS.$$.fragment),jft=l(),zye=a("span"),Dft=o("FlaxAutoModelForImageClassification"),GJe=l(),kr=a("div"),F(US.$$.fragment),Gft=l(),om=a("p"),Oft=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tne=a("a"),Vft=o("from_pretrained()"),Xft=o(" class method or the "),ane=a("a"),zft=o("from_config()"),Wft=o(` class
method.`),Qft=l(),HS=a("p"),Uft=o("This class cannot be instantiated directly using "),Wye=a("code"),Hft=o("__init__()"),Jft=o(" (throws an error)."),Yft=l(),ma=a("div"),F(JS.$$.fragment),Kft=l(),Qye=a("p"),Zft=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),emt=l(),rm=a("p"),omt=o(`Note:
Loading a model from its configuration file does `),Uye=a("strong"),rmt=o("not"),tmt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nne=a("a"),amt=o("from_pretrained()"),nmt=o(" to load the model weights."),smt=l(),F(WA.$$.fragment),lmt=l(),st=a("div"),F(YS.$$.fragment),imt=l(),Hye=a("p"),dmt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cmt=l(),Wn=a("p"),fmt=o("The model class to instantiate is selected based on the "),Jye=a("code"),mmt=o("model_type"),gmt=o(` property of the config object (either
passed as an argument or loaded from `),Yye=a("code"),hmt=o("pretrained_model_name_or_path"),pmt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kye=a("code"),_mt=o("pretrained_model_name_or_path"),umt=o(":"),bmt=l(),KS=a("ul"),QA=a("li"),Zye=a("strong"),vmt=o("beit"),Fmt=o(" \u2014 "),sne=a("a"),Tmt=o("FlaxBeitForImageClassification"),Mmt=o(" (BEiT model)"),Emt=l(),UA=a("li"),e9e=a("strong"),Cmt=o("vit"),wmt=o(" \u2014 "),lne=a("a"),Amt=o("FlaxViTForImageClassification"),Lmt=o(" (ViT model)"),ymt=l(),F(HA.$$.fragment),OJe=l(),tm=a("h2"),JA=a("a"),o9e=a("span"),F(ZS.$$.fragment),xmt=l(),r9e=a("span"),$mt=o("FlaxAutoModelForVision2Seq"),VJe=l(),Sr=a("div"),F(eR.$$.fragment),kmt=l(),am=a("p"),Smt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ine=a("a"),Rmt=o("from_pretrained()"),Pmt=o(" class method or the "),dne=a("a"),Bmt=o("from_config()"),Imt=o(` class
method.`),Nmt=l(),oR=a("p"),qmt=o("This class cannot be instantiated directly using "),t9e=a("code"),jmt=o("__init__()"),Dmt=o(" (throws an error)."),Gmt=l(),ga=a("div"),F(rR.$$.fragment),Omt=l(),a9e=a("p"),Vmt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Xmt=l(),nm=a("p"),zmt=o(`Note:
Loading a model from its configuration file does `),n9e=a("strong"),Wmt=o("not"),Qmt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cne=a("a"),Umt=o("from_pretrained()"),Hmt=o(" to load the model weights."),Jmt=l(),F(YA.$$.fragment),Ymt=l(),lt=a("div"),F(tR.$$.fragment),Kmt=l(),s9e=a("p"),Zmt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),egt=l(),Qn=a("p"),ogt=o("The model class to instantiate is selected based on the "),l9e=a("code"),rgt=o("model_type"),tgt=o(` property of the config object (either
passed as an argument or loaded from `),i9e=a("code"),agt=o("pretrained_model_name_or_path"),ngt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d9e=a("code"),sgt=o("pretrained_model_name_or_path"),lgt=o(":"),igt=l(),c9e=a("ul"),KA=a("li"),f9e=a("strong"),dgt=o("vision-encoder-decoder"),cgt=o(" \u2014 "),fne=a("a"),fgt=o("FlaxVisionEncoderDecoderModel"),mgt=o(" (Vision Encoder decoder model)"),ggt=l(),F(ZA.$$.fragment),this.h()},l(f){const u=Qaa('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var aR=s(p);m=n(aR,"A",{id:!0,class:!0,href:!0});var m9e=s(m);_=n(m9e,"SPAN",{});var g9e=s(_);T(d.$$.fragment,g9e),g9e.forEach(t),m9e.forEach(t),h=i(aR),Lo=n(aR,"SPAN",{});var h9e=s(Lo);Ui=r(h9e,"Auto Classes"),h9e.forEach(t),aR.forEach(t),dm=i(f),gt=n(f,"P",{});var nR=s(gt);Hi=r(nR,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ji=n(nR,"CODE",{});var p9e=s(Ji);Ly=r(p9e,"from_pretrained()"),p9e.forEach(t),cm=r(nR,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),nR.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Un=s(Qe);Yi=r(Un,"Instantiating one of "),Hn=n(Un,"A",{href:!0});var _9e=s(Hn);yy=r(_9e,"AutoConfig"),_9e.forEach(t),Jn=r(Un,", "),Yn=n(Un,"A",{href:!0});var u9e=s(Yn);xy=r(u9e,"AutoModel"),u9e.forEach(t),Ki=r(Un,`, and
`),Kn=n(Un,"A",{href:!0});var b9e=s(Kn);$y=r(b9e,"AutoTokenizer"),b9e.forEach(t),Zi=r(Un," will directly create a class of the relevant architecture. For instance"),Un.forEach(t),fm=i(f),T(Va.$$.fragment,f),Ue=i(f),Ae=n(f,"P",{});var sR=s(Ae);LP=r(sR,"will create a model that is an instance of "),ed=n(sR,"A",{href:!0});var v9e=s(ed);yP=r(v9e,"BertModel"),v9e.forEach(t),xP=r(sR,"."),sR.forEach(t),yo=i(f),Xa=n(f,"P",{});var lR=s(Xa);$P=r(lR,"There is one class of "),mm=n(lR,"CODE",{});var F9e=s(mm);kP=r(F9e,"AutoModel"),F9e.forEach(t),iZe=r(lR," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),lR.forEach(t),RUe=i(f),od=n(f,"H2",{class:!0});var iR=s(od);gm=n(iR,"A",{id:!0,class:!0,href:!0});var T9e=s(gm);fle=n(T9e,"SPAN",{});var M9e=s(fle);T(ky.$$.fragment,M9e),M9e.forEach(t),T9e.forEach(t),dZe=i(iR),mle=n(iR,"SPAN",{});var E9e=s(mle);cZe=r(E9e,"Extending the Auto Classes"),E9e.forEach(t),iR.forEach(t),PUe=i(f),Zn=n(f,"P",{});var sm=s(Zn);fZe=r(sm,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),gle=n(sm,"CODE",{});var C9e=s(gle);mZe=r(C9e,"NewModel"),C9e.forEach(t),gZe=r(sm,", make sure you have a "),hle=n(sm,"CODE",{});var w9e=s(hle);hZe=r(w9e,"NewModelConfig"),w9e.forEach(t),pZe=r(sm,` then you can add those to the auto
classes like this:`),sm.forEach(t),BUe=i(f),T(Sy.$$.fragment,f),IUe=i(f),SP=n(f,"P",{});var A9e=s(SP);_Ze=r(A9e,"You will then be able to use the auto classes like you would usually do!"),A9e.forEach(t),NUe=i(f),T(hm.$$.fragment,f),qUe=i(f),rd=n(f,"H2",{class:!0});var dR=s(rd);pm=n(dR,"A",{id:!0,class:!0,href:!0});var L9e=s(pm);ple=n(L9e,"SPAN",{});var y9e=s(ple);T(Ry.$$.fragment,y9e),y9e.forEach(t),L9e.forEach(t),uZe=i(dR),_le=n(dR,"SPAN",{});var x9e=s(_le);bZe=r(x9e,"AutoConfig"),x9e.forEach(t),dR.forEach(t),jUe=i(f),xo=n(f,"DIV",{class:!0});var ft=s(xo);T(Py.$$.fragment,ft),vZe=i(ft),By=n(ft,"P",{});var cR=s(By);FZe=r(cR,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),RP=n(cR,"A",{href:!0});var $9e=s(RP);TZe=r($9e,"from_pretrained()"),$9e.forEach(t),MZe=r(cR," class method."),cR.forEach(t),EZe=i(ft),Iy=n(ft,"P",{});var fR=s(Iy);CZe=r(fR,"This class cannot be instantiated directly using "),ule=n(fR,"CODE",{});var k9e=s(ule);wZe=r(k9e,"__init__()"),k9e.forEach(t),AZe=r(fR," (throws an error)."),fR.forEach(t),LZe=i(ft),Rr=n(ft,"DIV",{class:!0});var mt=s(Rr);T(Ny.$$.fragment,mt),yZe=i(mt),ble=n(mt,"P",{});var S9e=s(ble);xZe=r(S9e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),S9e.forEach(t),$Ze=i(mt),td=n(mt,"P",{});var lm=s(td);kZe=r(lm,"The configuration class to instantiate is selected based on the "),vle=n(lm,"CODE",{});var R9e=s(vle);SZe=r(R9e,"model_type"),R9e.forEach(t),RZe=r(lm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Fle=n(lm,"CODE",{});var P9e=s(Fle);PZe=r(P9e,"pretrained_model_name_or_path"),P9e.forEach(t),BZe=r(lm,":"),lm.forEach(t),IZe=i(mt),A=n(mt,"UL",{});var L=s(A);_m=n(L,"LI",{});var e7=s(_m);Tle=n(e7,"STRONG",{});var B9e=s(Tle);NZe=r(B9e,"albert"),B9e.forEach(t),qZe=r(e7," \u2014 "),PP=n(e7,"A",{href:!0});var I9e=s(PP);jZe=r(I9e,"AlbertConfig"),I9e.forEach(t),DZe=r(e7," (ALBERT model)"),e7.forEach(t),GZe=i(L),um=n(L,"LI",{});var o7=s(um);Mle=n(o7,"STRONG",{});var N9e=s(Mle);OZe=r(N9e,"bart"),N9e.forEach(t),VZe=r(o7," \u2014 "),BP=n(o7,"A",{href:!0});var q9e=s(BP);XZe=r(q9e,"BartConfig"),q9e.forEach(t),zZe=r(o7," (BART model)"),o7.forEach(t),WZe=i(L),bm=n(L,"LI",{});var r7=s(bm);Ele=n(r7,"STRONG",{});var j9e=s(Ele);QZe=r(j9e,"beit"),j9e.forEach(t),UZe=r(r7," \u2014 "),IP=n(r7,"A",{href:!0});var D9e=s(IP);HZe=r(D9e,"BeitConfig"),D9e.forEach(t),JZe=r(r7," (BEiT model)"),r7.forEach(t),YZe=i(L),vm=n(L,"LI",{});var t7=s(vm);Cle=n(t7,"STRONG",{});var G9e=s(Cle);KZe=r(G9e,"bert"),G9e.forEach(t),ZZe=r(t7," \u2014 "),NP=n(t7,"A",{href:!0});var O9e=s(NP);eeo=r(O9e,"BertConfig"),O9e.forEach(t),oeo=r(t7," (BERT model)"),t7.forEach(t),reo=i(L),Fm=n(L,"LI",{});var a7=s(Fm);wle=n(a7,"STRONG",{});var V9e=s(wle);teo=r(V9e,"bert-generation"),V9e.forEach(t),aeo=r(a7," \u2014 "),qP=n(a7,"A",{href:!0});var X9e=s(qP);neo=r(X9e,"BertGenerationConfig"),X9e.forEach(t),seo=r(a7," (Bert Generation model)"),a7.forEach(t),leo=i(L),Tm=n(L,"LI",{});var n7=s(Tm);Ale=n(n7,"STRONG",{});var z9e=s(Ale);ieo=r(z9e,"big_bird"),z9e.forEach(t),deo=r(n7," \u2014 "),jP=n(n7,"A",{href:!0});var W9e=s(jP);ceo=r(W9e,"BigBirdConfig"),W9e.forEach(t),feo=r(n7," (BigBird model)"),n7.forEach(t),meo=i(L),Mm=n(L,"LI",{});var s7=s(Mm);Lle=n(s7,"STRONG",{});var Q9e=s(Lle);geo=r(Q9e,"bigbird_pegasus"),Q9e.forEach(t),heo=r(s7," \u2014 "),DP=n(s7,"A",{href:!0});var U9e=s(DP);peo=r(U9e,"BigBirdPegasusConfig"),U9e.forEach(t),_eo=r(s7," (BigBird-Pegasus model)"),s7.forEach(t),ueo=i(L),Em=n(L,"LI",{});var l7=s(Em);yle=n(l7,"STRONG",{});var H9e=s(yle);beo=r(H9e,"blenderbot"),H9e.forEach(t),veo=r(l7," \u2014 "),GP=n(l7,"A",{href:!0});var J9e=s(GP);Feo=r(J9e,"BlenderbotConfig"),J9e.forEach(t),Teo=r(l7," (Blenderbot model)"),l7.forEach(t),Meo=i(L),Cm=n(L,"LI",{});var i7=s(Cm);xle=n(i7,"STRONG",{});var Y9e=s(xle);Eeo=r(Y9e,"blenderbot-small"),Y9e.forEach(t),Ceo=r(i7," \u2014 "),OP=n(i7,"A",{href:!0});var K9e=s(OP);weo=r(K9e,"BlenderbotSmallConfig"),K9e.forEach(t),Aeo=r(i7," (BlenderbotSmall model)"),i7.forEach(t),Leo=i(L),wm=n(L,"LI",{});var d7=s(wm);$le=n(d7,"STRONG",{});var Z9e=s($le);yeo=r(Z9e,"bloom"),Z9e.forEach(t),xeo=r(d7," \u2014 "),VP=n(d7,"A",{href:!0});var exe=s(VP);$eo=r(exe,"BloomConfig"),exe.forEach(t),keo=r(d7," (BLOOM model)"),d7.forEach(t),Seo=i(L),Am=n(L,"LI",{});var c7=s(Am);kle=n(c7,"STRONG",{});var oxe=s(kle);Reo=r(oxe,"camembert"),oxe.forEach(t),Peo=r(c7," \u2014 "),XP=n(c7,"A",{href:!0});var rxe=s(XP);Beo=r(rxe,"CamembertConfig"),rxe.forEach(t),Ieo=r(c7," (CamemBERT model)"),c7.forEach(t),Neo=i(L),Lm=n(L,"LI",{});var f7=s(Lm);Sle=n(f7,"STRONG",{});var txe=s(Sle);qeo=r(txe,"canine"),txe.forEach(t),jeo=r(f7," \u2014 "),zP=n(f7,"A",{href:!0});var axe=s(zP);Deo=r(axe,"CanineConfig"),axe.forEach(t),Geo=r(f7," (CANINE model)"),f7.forEach(t),Oeo=i(L),ym=n(L,"LI",{});var m7=s(ym);Rle=n(m7,"STRONG",{});var nxe=s(Rle);Veo=r(nxe,"clip"),nxe.forEach(t),Xeo=r(m7," \u2014 "),WP=n(m7,"A",{href:!0});var sxe=s(WP);zeo=r(sxe,"CLIPConfig"),sxe.forEach(t),Weo=r(m7," (CLIP model)"),m7.forEach(t),Qeo=i(L),xm=n(L,"LI",{});var g7=s(xm);Ple=n(g7,"STRONG",{});var lxe=s(Ple);Ueo=r(lxe,"codegen"),lxe.forEach(t),Heo=r(g7," \u2014 "),QP=n(g7,"A",{href:!0});var ixe=s(QP);Jeo=r(ixe,"CodeGenConfig"),ixe.forEach(t),Yeo=r(g7," (CodeGen model)"),g7.forEach(t),Keo=i(L),$m=n(L,"LI",{});var h7=s($m);Ble=n(h7,"STRONG",{});var dxe=s(Ble);Zeo=r(dxe,"convbert"),dxe.forEach(t),eoo=r(h7," \u2014 "),UP=n(h7,"A",{href:!0});var cxe=s(UP);ooo=r(cxe,"ConvBertConfig"),cxe.forEach(t),roo=r(h7," (ConvBERT model)"),h7.forEach(t),too=i(L),km=n(L,"LI",{});var p7=s(km);Ile=n(p7,"STRONG",{});var fxe=s(Ile);aoo=r(fxe,"convnext"),fxe.forEach(t),noo=r(p7," \u2014 "),HP=n(p7,"A",{href:!0});var mxe=s(HP);soo=r(mxe,"ConvNextConfig"),mxe.forEach(t),loo=r(p7," (ConvNeXT model)"),p7.forEach(t),ioo=i(L),Sm=n(L,"LI",{});var _7=s(Sm);Nle=n(_7,"STRONG",{});var gxe=s(Nle);doo=r(gxe,"ctrl"),gxe.forEach(t),coo=r(_7," \u2014 "),JP=n(_7,"A",{href:!0});var hxe=s(JP);foo=r(hxe,"CTRLConfig"),hxe.forEach(t),moo=r(_7," (CTRL model)"),_7.forEach(t),goo=i(L),Rm=n(L,"LI",{});var u7=s(Rm);qle=n(u7,"STRONG",{});var pxe=s(qle);hoo=r(pxe,"cvt"),pxe.forEach(t),poo=r(u7," \u2014 "),YP=n(u7,"A",{href:!0});var _xe=s(YP);_oo=r(_xe,"CvtConfig"),_xe.forEach(t),uoo=r(u7," (CvT model)"),u7.forEach(t),boo=i(L),Pm=n(L,"LI",{});var b7=s(Pm);jle=n(b7,"STRONG",{});var uxe=s(jle);voo=r(uxe,"data2vec-audio"),uxe.forEach(t),Foo=r(b7," \u2014 "),KP=n(b7,"A",{href:!0});var bxe=s(KP);Too=r(bxe,"Data2VecAudioConfig"),bxe.forEach(t),Moo=r(b7," (Data2VecAudio model)"),b7.forEach(t),Eoo=i(L),Bm=n(L,"LI",{});var v7=s(Bm);Dle=n(v7,"STRONG",{});var vxe=s(Dle);Coo=r(vxe,"data2vec-text"),vxe.forEach(t),woo=r(v7," \u2014 "),ZP=n(v7,"A",{href:!0});var Fxe=s(ZP);Aoo=r(Fxe,"Data2VecTextConfig"),Fxe.forEach(t),Loo=r(v7," (Data2VecText model)"),v7.forEach(t),yoo=i(L),Im=n(L,"LI",{});var F7=s(Im);Gle=n(F7,"STRONG",{});var Txe=s(Gle);xoo=r(Txe,"data2vec-vision"),Txe.forEach(t),$oo=r(F7," \u2014 "),eB=n(F7,"A",{href:!0});var Mxe=s(eB);koo=r(Mxe,"Data2VecVisionConfig"),Mxe.forEach(t),Soo=r(F7," (Data2VecVision model)"),F7.forEach(t),Roo=i(L),Nm=n(L,"LI",{});var T7=s(Nm);Ole=n(T7,"STRONG",{});var Exe=s(Ole);Poo=r(Exe,"deberta"),Exe.forEach(t),Boo=r(T7," \u2014 "),oB=n(T7,"A",{href:!0});var Cxe=s(oB);Ioo=r(Cxe,"DebertaConfig"),Cxe.forEach(t),Noo=r(T7," (DeBERTa model)"),T7.forEach(t),qoo=i(L),qm=n(L,"LI",{});var M7=s(qm);Vle=n(M7,"STRONG",{});var wxe=s(Vle);joo=r(wxe,"deberta-v2"),wxe.forEach(t),Doo=r(M7," \u2014 "),rB=n(M7,"A",{href:!0});var Axe=s(rB);Goo=r(Axe,"DebertaV2Config"),Axe.forEach(t),Ooo=r(M7," (DeBERTa-v2 model)"),M7.forEach(t),Voo=i(L),jm=n(L,"LI",{});var E7=s(jm);Xle=n(E7,"STRONG",{});var Lxe=s(Xle);Xoo=r(Lxe,"decision_transformer"),Lxe.forEach(t),zoo=r(E7," \u2014 "),tB=n(E7,"A",{href:!0});var yxe=s(tB);Woo=r(yxe,"DecisionTransformerConfig"),yxe.forEach(t),Qoo=r(E7," (Decision Transformer model)"),E7.forEach(t),Uoo=i(L),Dm=n(L,"LI",{});var C7=s(Dm);zle=n(C7,"STRONG",{});var xxe=s(zle);Hoo=r(xxe,"deit"),xxe.forEach(t),Joo=r(C7," \u2014 "),aB=n(C7,"A",{href:!0});var $xe=s(aB);Yoo=r($xe,"DeiTConfig"),$xe.forEach(t),Koo=r(C7," (DeiT model)"),C7.forEach(t),Zoo=i(L),Gm=n(L,"LI",{});var w7=s(Gm);Wle=n(w7,"STRONG",{});var pgt=s(Wle);ero=r(pgt,"detr"),pgt.forEach(t),oro=r(w7," \u2014 "),nB=n(w7,"A",{href:!0});var _gt=s(nB);rro=r(_gt,"DetrConfig"),_gt.forEach(t),tro=r(w7," (DETR model)"),w7.forEach(t),aro=i(L),Om=n(L,"LI",{});var kxe=s(Om);Qle=n(kxe,"STRONG",{});var ugt=s(Qle);nro=r(ugt,"distilbert"),ugt.forEach(t),sro=r(kxe," \u2014 "),sB=n(kxe,"A",{href:!0});var bgt=s(sB);lro=r(bgt,"DistilBertConfig"),bgt.forEach(t),iro=r(kxe," (DistilBERT model)"),kxe.forEach(t),dro=i(L),Vm=n(L,"LI",{});var Sxe=s(Vm);Ule=n(Sxe,"STRONG",{});var vgt=s(Ule);cro=r(vgt,"donut-swin"),vgt.forEach(t),fro=r(Sxe," \u2014 "),lB=n(Sxe,"A",{href:!0});var Fgt=s(lB);mro=r(Fgt,"DonutSwinConfig"),Fgt.forEach(t),gro=r(Sxe," (DonutSwin model)"),Sxe.forEach(t),hro=i(L),Xm=n(L,"LI",{});var Rxe=s(Xm);Hle=n(Rxe,"STRONG",{});var Tgt=s(Hle);pro=r(Tgt,"dpr"),Tgt.forEach(t),_ro=r(Rxe," \u2014 "),iB=n(Rxe,"A",{href:!0});var Mgt=s(iB);uro=r(Mgt,"DPRConfig"),Mgt.forEach(t),bro=r(Rxe," (DPR model)"),Rxe.forEach(t),vro=i(L),zm=n(L,"LI",{});var Pxe=s(zm);Jle=n(Pxe,"STRONG",{});var Egt=s(Jle);Fro=r(Egt,"dpt"),Egt.forEach(t),Tro=r(Pxe," \u2014 "),dB=n(Pxe,"A",{href:!0});var Cgt=s(dB);Mro=r(Cgt,"DPTConfig"),Cgt.forEach(t),Ero=r(Pxe," (DPT model)"),Pxe.forEach(t),Cro=i(L),Wm=n(L,"LI",{});var Bxe=s(Wm);Yle=n(Bxe,"STRONG",{});var wgt=s(Yle);wro=r(wgt,"electra"),wgt.forEach(t),Aro=r(Bxe," \u2014 "),cB=n(Bxe,"A",{href:!0});var Agt=s(cB);Lro=r(Agt,"ElectraConfig"),Agt.forEach(t),yro=r(Bxe," (ELECTRA model)"),Bxe.forEach(t),xro=i(L),Qm=n(L,"LI",{});var Ixe=s(Qm);Kle=n(Ixe,"STRONG",{});var Lgt=s(Kle);$ro=r(Lgt,"encoder-decoder"),Lgt.forEach(t),kro=r(Ixe," \u2014 "),fB=n(Ixe,"A",{href:!0});var ygt=s(fB);Sro=r(ygt,"EncoderDecoderConfig"),ygt.forEach(t),Rro=r(Ixe," (Encoder decoder model)"),Ixe.forEach(t),Pro=i(L),Um=n(L,"LI",{});var Nxe=s(Um);Zle=n(Nxe,"STRONG",{});var xgt=s(Zle);Bro=r(xgt,"flaubert"),xgt.forEach(t),Iro=r(Nxe," \u2014 "),mB=n(Nxe,"A",{href:!0});var $gt=s(mB);Nro=r($gt,"FlaubertConfig"),$gt.forEach(t),qro=r(Nxe," (FlauBERT model)"),Nxe.forEach(t),jro=i(L),Hm=n(L,"LI",{});var qxe=s(Hm);eie=n(qxe,"STRONG",{});var kgt=s(eie);Dro=r(kgt,"flava"),kgt.forEach(t),Gro=r(qxe," \u2014 "),gB=n(qxe,"A",{href:!0});var Sgt=s(gB);Oro=r(Sgt,"FlavaConfig"),Sgt.forEach(t),Vro=r(qxe," (FLAVA model)"),qxe.forEach(t),Xro=i(L),Jm=n(L,"LI",{});var jxe=s(Jm);oie=n(jxe,"STRONG",{});var Rgt=s(oie);zro=r(Rgt,"fnet"),Rgt.forEach(t),Wro=r(jxe," \u2014 "),hB=n(jxe,"A",{href:!0});var Pgt=s(hB);Qro=r(Pgt,"FNetConfig"),Pgt.forEach(t),Uro=r(jxe," (FNet model)"),jxe.forEach(t),Hro=i(L),Ym=n(L,"LI",{});var Dxe=s(Ym);rie=n(Dxe,"STRONG",{});var Bgt=s(rie);Jro=r(Bgt,"fsmt"),Bgt.forEach(t),Yro=r(Dxe," \u2014 "),pB=n(Dxe,"A",{href:!0});var Igt=s(pB);Kro=r(Igt,"FSMTConfig"),Igt.forEach(t),Zro=r(Dxe," (FairSeq Machine-Translation model)"),Dxe.forEach(t),eto=i(L),Km=n(L,"LI",{});var Gxe=s(Km);tie=n(Gxe,"STRONG",{});var Ngt=s(tie);oto=r(Ngt,"funnel"),Ngt.forEach(t),rto=r(Gxe," \u2014 "),_B=n(Gxe,"A",{href:!0});var qgt=s(_B);tto=r(qgt,"FunnelConfig"),qgt.forEach(t),ato=r(Gxe," (Funnel Transformer model)"),Gxe.forEach(t),nto=i(L),Zm=n(L,"LI",{});var Oxe=s(Zm);aie=n(Oxe,"STRONG",{});var jgt=s(aie);sto=r(jgt,"glpn"),jgt.forEach(t),lto=r(Oxe," \u2014 "),uB=n(Oxe,"A",{href:!0});var Dgt=s(uB);ito=r(Dgt,"GLPNConfig"),Dgt.forEach(t),dto=r(Oxe," (GLPN model)"),Oxe.forEach(t),cto=i(L),eg=n(L,"LI",{});var Vxe=s(eg);nie=n(Vxe,"STRONG",{});var Ggt=s(nie);fto=r(Ggt,"gpt2"),Ggt.forEach(t),mto=r(Vxe," \u2014 "),bB=n(Vxe,"A",{href:!0});var Ogt=s(bB);gto=r(Ogt,"GPT2Config"),Ogt.forEach(t),hto=r(Vxe," (OpenAI GPT-2 model)"),Vxe.forEach(t),pto=i(L),og=n(L,"LI",{});var Xxe=s(og);sie=n(Xxe,"STRONG",{});var Vgt=s(sie);_to=r(Vgt,"gpt_neo"),Vgt.forEach(t),uto=r(Xxe," \u2014 "),vB=n(Xxe,"A",{href:!0});var Xgt=s(vB);bto=r(Xgt,"GPTNeoConfig"),Xgt.forEach(t),vto=r(Xxe," (GPT Neo model)"),Xxe.forEach(t),Fto=i(L),rg=n(L,"LI",{});var zxe=s(rg);lie=n(zxe,"STRONG",{});var zgt=s(lie);Tto=r(zgt,"gpt_neox"),zgt.forEach(t),Mto=r(zxe," \u2014 "),FB=n(zxe,"A",{href:!0});var Wgt=s(FB);Eto=r(Wgt,"GPTNeoXConfig"),Wgt.forEach(t),Cto=r(zxe," (GPT NeoX model)"),zxe.forEach(t),wto=i(L),tg=n(L,"LI",{});var Wxe=s(tg);iie=n(Wxe,"STRONG",{});var Qgt=s(iie);Ato=r(Qgt,"gptj"),Qgt.forEach(t),Lto=r(Wxe," \u2014 "),TB=n(Wxe,"A",{href:!0});var Ugt=s(TB);yto=r(Ugt,"GPTJConfig"),Ugt.forEach(t),xto=r(Wxe," (GPT-J model)"),Wxe.forEach(t),$to=i(L),ag=n(L,"LI",{});var Qxe=s(ag);die=n(Qxe,"STRONG",{});var Hgt=s(die);kto=r(Hgt,"groupvit"),Hgt.forEach(t),Sto=r(Qxe," \u2014 "),MB=n(Qxe,"A",{href:!0});var Jgt=s(MB);Rto=r(Jgt,"GroupViTConfig"),Jgt.forEach(t),Pto=r(Qxe," (GroupViT model)"),Qxe.forEach(t),Bto=i(L),ng=n(L,"LI",{});var Uxe=s(ng);cie=n(Uxe,"STRONG",{});var Ygt=s(cie);Ito=r(Ygt,"hubert"),Ygt.forEach(t),Nto=r(Uxe," \u2014 "),EB=n(Uxe,"A",{href:!0});var Kgt=s(EB);qto=r(Kgt,"HubertConfig"),Kgt.forEach(t),jto=r(Uxe," (Hubert model)"),Uxe.forEach(t),Dto=i(L),sg=n(L,"LI",{});var Hxe=s(sg);fie=n(Hxe,"STRONG",{});var Zgt=s(fie);Gto=r(Zgt,"ibert"),Zgt.forEach(t),Oto=r(Hxe," \u2014 "),CB=n(Hxe,"A",{href:!0});var eht=s(CB);Vto=r(eht,"IBertConfig"),eht.forEach(t),Xto=r(Hxe," (I-BERT model)"),Hxe.forEach(t),zto=i(L),lg=n(L,"LI",{});var Jxe=s(lg);mie=n(Jxe,"STRONG",{});var oht=s(mie);Wto=r(oht,"imagegpt"),oht.forEach(t),Qto=r(Jxe," \u2014 "),wB=n(Jxe,"A",{href:!0});var rht=s(wB);Uto=r(rht,"ImageGPTConfig"),rht.forEach(t),Hto=r(Jxe," (ImageGPT model)"),Jxe.forEach(t),Jto=i(L),ig=n(L,"LI",{});var Yxe=s(ig);gie=n(Yxe,"STRONG",{});var tht=s(gie);Yto=r(tht,"layoutlm"),tht.forEach(t),Kto=r(Yxe," \u2014 "),AB=n(Yxe,"A",{href:!0});var aht=s(AB);Zto=r(aht,"LayoutLMConfig"),aht.forEach(t),eao=r(Yxe," (LayoutLM model)"),Yxe.forEach(t),oao=i(L),dg=n(L,"LI",{});var Kxe=s(dg);hie=n(Kxe,"STRONG",{});var nht=s(hie);rao=r(nht,"layoutlmv2"),nht.forEach(t),tao=r(Kxe," \u2014 "),LB=n(Kxe,"A",{href:!0});var sht=s(LB);aao=r(sht,"LayoutLMv2Config"),sht.forEach(t),nao=r(Kxe," (LayoutLMv2 model)"),Kxe.forEach(t),sao=i(L),cg=n(L,"LI",{});var Zxe=s(cg);pie=n(Zxe,"STRONG",{});var lht=s(pie);lao=r(lht,"layoutlmv3"),lht.forEach(t),iao=r(Zxe," \u2014 "),yB=n(Zxe,"A",{href:!0});var iht=s(yB);dao=r(iht,"LayoutLMv3Config"),iht.forEach(t),cao=r(Zxe," (LayoutLMv3 model)"),Zxe.forEach(t),fao=i(L),fg=n(L,"LI",{});var e$e=s(fg);_ie=n(e$e,"STRONG",{});var dht=s(_ie);mao=r(dht,"led"),dht.forEach(t),gao=r(e$e," \u2014 "),xB=n(e$e,"A",{href:!0});var cht=s(xB);hao=r(cht,"LEDConfig"),cht.forEach(t),pao=r(e$e," (LED model)"),e$e.forEach(t),_ao=i(L),mg=n(L,"LI",{});var o$e=s(mg);uie=n(o$e,"STRONG",{});var fht=s(uie);uao=r(fht,"levit"),fht.forEach(t),bao=r(o$e," \u2014 "),$B=n(o$e,"A",{href:!0});var mht=s($B);vao=r(mht,"LevitConfig"),mht.forEach(t),Fao=r(o$e," (LeViT model)"),o$e.forEach(t),Tao=i(L),gg=n(L,"LI",{});var r$e=s(gg);bie=n(r$e,"STRONG",{});var ght=s(bie);Mao=r(ght,"longformer"),ght.forEach(t),Eao=r(r$e," \u2014 "),kB=n(r$e,"A",{href:!0});var hht=s(kB);Cao=r(hht,"LongformerConfig"),hht.forEach(t),wao=r(r$e," (Longformer model)"),r$e.forEach(t),Aao=i(L),hg=n(L,"LI",{});var t$e=s(hg);vie=n(t$e,"STRONG",{});var pht=s(vie);Lao=r(pht,"longt5"),pht.forEach(t),yao=r(t$e," \u2014 "),SB=n(t$e,"A",{href:!0});var _ht=s(SB);xao=r(_ht,"LongT5Config"),_ht.forEach(t),$ao=r(t$e," (LongT5 model)"),t$e.forEach(t),kao=i(L),pg=n(L,"LI",{});var a$e=s(pg);Fie=n(a$e,"STRONG",{});var uht=s(Fie);Sao=r(uht,"luke"),uht.forEach(t),Rao=r(a$e," \u2014 "),RB=n(a$e,"A",{href:!0});var bht=s(RB);Pao=r(bht,"LukeConfig"),bht.forEach(t),Bao=r(a$e," (LUKE model)"),a$e.forEach(t),Iao=i(L),_g=n(L,"LI",{});var n$e=s(_g);Tie=n(n$e,"STRONG",{});var vht=s(Tie);Nao=r(vht,"lxmert"),vht.forEach(t),qao=r(n$e," \u2014 "),PB=n(n$e,"A",{href:!0});var Fht=s(PB);jao=r(Fht,"LxmertConfig"),Fht.forEach(t),Dao=r(n$e," (LXMERT model)"),n$e.forEach(t),Gao=i(L),ug=n(L,"LI",{});var s$e=s(ug);Mie=n(s$e,"STRONG",{});var Tht=s(Mie);Oao=r(Tht,"m2m_100"),Tht.forEach(t),Vao=r(s$e," \u2014 "),BB=n(s$e,"A",{href:!0});var Mht=s(BB);Xao=r(Mht,"M2M100Config"),Mht.forEach(t),zao=r(s$e," (M2M100 model)"),s$e.forEach(t),Wao=i(L),bg=n(L,"LI",{});var l$e=s(bg);Eie=n(l$e,"STRONG",{});var Eht=s(Eie);Qao=r(Eht,"marian"),Eht.forEach(t),Uao=r(l$e," \u2014 "),IB=n(l$e,"A",{href:!0});var Cht=s(IB);Hao=r(Cht,"MarianConfig"),Cht.forEach(t),Jao=r(l$e," (Marian model)"),l$e.forEach(t),Yao=i(L),vg=n(L,"LI",{});var i$e=s(vg);Cie=n(i$e,"STRONG",{});var wht=s(Cie);Kao=r(wht,"maskformer"),wht.forEach(t),Zao=r(i$e," \u2014 "),NB=n(i$e,"A",{href:!0});var Aht=s(NB);eno=r(Aht,"MaskFormerConfig"),Aht.forEach(t),ono=r(i$e," (MaskFormer model)"),i$e.forEach(t),rno=i(L),Fg=n(L,"LI",{});var d$e=s(Fg);wie=n(d$e,"STRONG",{});var Lht=s(wie);tno=r(Lht,"mbart"),Lht.forEach(t),ano=r(d$e," \u2014 "),qB=n(d$e,"A",{href:!0});var yht=s(qB);nno=r(yht,"MBartConfig"),yht.forEach(t),sno=r(d$e," (mBART model)"),d$e.forEach(t),lno=i(L),Tg=n(L,"LI",{});var c$e=s(Tg);Aie=n(c$e,"STRONG",{});var xht=s(Aie);ino=r(xht,"mctct"),xht.forEach(t),dno=r(c$e," \u2014 "),jB=n(c$e,"A",{href:!0});var $ht=s(jB);cno=r($ht,"MCTCTConfig"),$ht.forEach(t),fno=r(c$e," (M-CTC-T model)"),c$e.forEach(t),mno=i(L),Mg=n(L,"LI",{});var f$e=s(Mg);Lie=n(f$e,"STRONG",{});var kht=s(Lie);gno=r(kht,"megatron-bert"),kht.forEach(t),hno=r(f$e," \u2014 "),DB=n(f$e,"A",{href:!0});var Sht=s(DB);pno=r(Sht,"MegatronBertConfig"),Sht.forEach(t),_no=r(f$e," (Megatron-BERT model)"),f$e.forEach(t),uno=i(L),Eg=n(L,"LI",{});var m$e=s(Eg);yie=n(m$e,"STRONG",{});var Rht=s(yie);bno=r(Rht,"mobilebert"),Rht.forEach(t),vno=r(m$e," \u2014 "),GB=n(m$e,"A",{href:!0});var Pht=s(GB);Fno=r(Pht,"MobileBertConfig"),Pht.forEach(t),Tno=r(m$e," (MobileBERT model)"),m$e.forEach(t),Mno=i(L),Cg=n(L,"LI",{});var g$e=s(Cg);xie=n(g$e,"STRONG",{});var Bht=s(xie);Eno=r(Bht,"mobilevit"),Bht.forEach(t),Cno=r(g$e," \u2014 "),OB=n(g$e,"A",{href:!0});var Iht=s(OB);wno=r(Iht,"MobileViTConfig"),Iht.forEach(t),Ano=r(g$e," (MobileViT model)"),g$e.forEach(t),Lno=i(L),wg=n(L,"LI",{});var h$e=s(wg);$ie=n(h$e,"STRONG",{});var Nht=s($ie);yno=r(Nht,"mpnet"),Nht.forEach(t),xno=r(h$e," \u2014 "),VB=n(h$e,"A",{href:!0});var qht=s(VB);$no=r(qht,"MPNetConfig"),qht.forEach(t),kno=r(h$e," (MPNet model)"),h$e.forEach(t),Sno=i(L),Ag=n(L,"LI",{});var p$e=s(Ag);kie=n(p$e,"STRONG",{});var jht=s(kie);Rno=r(jht,"mt5"),jht.forEach(t),Pno=r(p$e," \u2014 "),XB=n(p$e,"A",{href:!0});var Dht=s(XB);Bno=r(Dht,"MT5Config"),Dht.forEach(t),Ino=r(p$e," (MT5 model)"),p$e.forEach(t),Nno=i(L),Lg=n(L,"LI",{});var _$e=s(Lg);Sie=n(_$e,"STRONG",{});var Ght=s(Sie);qno=r(Ght,"mvp"),Ght.forEach(t),jno=r(_$e," \u2014 "),zB=n(_$e,"A",{href:!0});var Oht=s(zB);Dno=r(Oht,"MvpConfig"),Oht.forEach(t),Gno=r(_$e," (MVP model)"),_$e.forEach(t),Ono=i(L),yg=n(L,"LI",{});var u$e=s(yg);Rie=n(u$e,"STRONG",{});var Vht=s(Rie);Vno=r(Vht,"nezha"),Vht.forEach(t),Xno=r(u$e," \u2014 "),WB=n(u$e,"A",{href:!0});var Xht=s(WB);zno=r(Xht,"NezhaConfig"),Xht.forEach(t),Wno=r(u$e," (Nezha model)"),u$e.forEach(t),Qno=i(L),xg=n(L,"LI",{});var b$e=s(xg);Pie=n(b$e,"STRONG",{});var zht=s(Pie);Uno=r(zht,"nystromformer"),zht.forEach(t),Hno=r(b$e," \u2014 "),QB=n(b$e,"A",{href:!0});var Wht=s(QB);Jno=r(Wht,"NystromformerConfig"),Wht.forEach(t),Yno=r(b$e," (Nystr\xF6mformer model)"),b$e.forEach(t),Kno=i(L),$g=n(L,"LI",{});var v$e=s($g);Bie=n(v$e,"STRONG",{});var Qht=s(Bie);Zno=r(Qht,"openai-gpt"),Qht.forEach(t),eso=r(v$e," \u2014 "),UB=n(v$e,"A",{href:!0});var Uht=s(UB);oso=r(Uht,"OpenAIGPTConfig"),Uht.forEach(t),rso=r(v$e," (OpenAI GPT model)"),v$e.forEach(t),tso=i(L),kg=n(L,"LI",{});var F$e=s(kg);Iie=n(F$e,"STRONG",{});var Hht=s(Iie);aso=r(Hht,"opt"),Hht.forEach(t),nso=r(F$e," \u2014 "),HB=n(F$e,"A",{href:!0});var Jht=s(HB);sso=r(Jht,"OPTConfig"),Jht.forEach(t),lso=r(F$e," (OPT model)"),F$e.forEach(t),iso=i(L),Sg=n(L,"LI",{});var T$e=s(Sg);Nie=n(T$e,"STRONG",{});var Yht=s(Nie);dso=r(Yht,"owlvit"),Yht.forEach(t),cso=r(T$e," \u2014 "),JB=n(T$e,"A",{href:!0});var Kht=s(JB);fso=r(Kht,"OwlViTConfig"),Kht.forEach(t),mso=r(T$e," (OWL-ViT model)"),T$e.forEach(t),gso=i(L),Rg=n(L,"LI",{});var M$e=s(Rg);qie=n(M$e,"STRONG",{});var Zht=s(qie);hso=r(Zht,"pegasus"),Zht.forEach(t),pso=r(M$e," \u2014 "),YB=n(M$e,"A",{href:!0});var ept=s(YB);_so=r(ept,"PegasusConfig"),ept.forEach(t),uso=r(M$e," (Pegasus model)"),M$e.forEach(t),bso=i(L),Pg=n(L,"LI",{});var E$e=s(Pg);jie=n(E$e,"STRONG",{});var opt=s(jie);vso=r(opt,"perceiver"),opt.forEach(t),Fso=r(E$e," \u2014 "),KB=n(E$e,"A",{href:!0});var rpt=s(KB);Tso=r(rpt,"PerceiverConfig"),rpt.forEach(t),Mso=r(E$e," (Perceiver model)"),E$e.forEach(t),Eso=i(L),Bg=n(L,"LI",{});var C$e=s(Bg);Die=n(C$e,"STRONG",{});var tpt=s(Die);Cso=r(tpt,"plbart"),tpt.forEach(t),wso=r(C$e," \u2014 "),ZB=n(C$e,"A",{href:!0});var apt=s(ZB);Aso=r(apt,"PLBartConfig"),apt.forEach(t),Lso=r(C$e," (PLBart model)"),C$e.forEach(t),yso=i(L),Ig=n(L,"LI",{});var w$e=s(Ig);Gie=n(w$e,"STRONG",{});var npt=s(Gie);xso=r(npt,"poolformer"),npt.forEach(t),$so=r(w$e," \u2014 "),eI=n(w$e,"A",{href:!0});var spt=s(eI);kso=r(spt,"PoolFormerConfig"),spt.forEach(t),Sso=r(w$e," (PoolFormer model)"),w$e.forEach(t),Rso=i(L),Ng=n(L,"LI",{});var A$e=s(Ng);Oie=n(A$e,"STRONG",{});var lpt=s(Oie);Pso=r(lpt,"prophetnet"),lpt.forEach(t),Bso=r(A$e," \u2014 "),oI=n(A$e,"A",{href:!0});var ipt=s(oI);Iso=r(ipt,"ProphetNetConfig"),ipt.forEach(t),Nso=r(A$e," (ProphetNet model)"),A$e.forEach(t),qso=i(L),qg=n(L,"LI",{});var L$e=s(qg);Vie=n(L$e,"STRONG",{});var dpt=s(Vie);jso=r(dpt,"qdqbert"),dpt.forEach(t),Dso=r(L$e," \u2014 "),rI=n(L$e,"A",{href:!0});var cpt=s(rI);Gso=r(cpt,"QDQBertConfig"),cpt.forEach(t),Oso=r(L$e," (QDQBert model)"),L$e.forEach(t),Vso=i(L),jg=n(L,"LI",{});var y$e=s(jg);Xie=n(y$e,"STRONG",{});var fpt=s(Xie);Xso=r(fpt,"rag"),fpt.forEach(t),zso=r(y$e," \u2014 "),tI=n(y$e,"A",{href:!0});var mpt=s(tI);Wso=r(mpt,"RagConfig"),mpt.forEach(t),Qso=r(y$e," (RAG model)"),y$e.forEach(t),Uso=i(L),Dg=n(L,"LI",{});var x$e=s(Dg);zie=n(x$e,"STRONG",{});var gpt=s(zie);Hso=r(gpt,"realm"),gpt.forEach(t),Jso=r(x$e," \u2014 "),aI=n(x$e,"A",{href:!0});var hpt=s(aI);Yso=r(hpt,"RealmConfig"),hpt.forEach(t),Kso=r(x$e," (REALM model)"),x$e.forEach(t),Zso=i(L),Gg=n(L,"LI",{});var $$e=s(Gg);Wie=n($$e,"STRONG",{});var ppt=s(Wie);elo=r(ppt,"reformer"),ppt.forEach(t),olo=r($$e," \u2014 "),nI=n($$e,"A",{href:!0});var _pt=s(nI);rlo=r(_pt,"ReformerConfig"),_pt.forEach(t),tlo=r($$e," (Reformer model)"),$$e.forEach(t),alo=i(L),Og=n(L,"LI",{});var k$e=s(Og);Qie=n(k$e,"STRONG",{});var upt=s(Qie);nlo=r(upt,"regnet"),upt.forEach(t),slo=r(k$e," \u2014 "),sI=n(k$e,"A",{href:!0});var bpt=s(sI);llo=r(bpt,"RegNetConfig"),bpt.forEach(t),ilo=r(k$e," (RegNet model)"),k$e.forEach(t),dlo=i(L),Vg=n(L,"LI",{});var S$e=s(Vg);Uie=n(S$e,"STRONG",{});var vpt=s(Uie);clo=r(vpt,"rembert"),vpt.forEach(t),flo=r(S$e," \u2014 "),lI=n(S$e,"A",{href:!0});var Fpt=s(lI);mlo=r(Fpt,"RemBertConfig"),Fpt.forEach(t),glo=r(S$e," (RemBERT model)"),S$e.forEach(t),hlo=i(L),Xg=n(L,"LI",{});var R$e=s(Xg);Hie=n(R$e,"STRONG",{});var Tpt=s(Hie);plo=r(Tpt,"resnet"),Tpt.forEach(t),_lo=r(R$e," \u2014 "),iI=n(R$e,"A",{href:!0});var Mpt=s(iI);ulo=r(Mpt,"ResNetConfig"),Mpt.forEach(t),blo=r(R$e," (ResNet model)"),R$e.forEach(t),vlo=i(L),zg=n(L,"LI",{});var P$e=s(zg);Jie=n(P$e,"STRONG",{});var Ept=s(Jie);Flo=r(Ept,"retribert"),Ept.forEach(t),Tlo=r(P$e," \u2014 "),dI=n(P$e,"A",{href:!0});var Cpt=s(dI);Mlo=r(Cpt,"RetriBertConfig"),Cpt.forEach(t),Elo=r(P$e," (RetriBERT model)"),P$e.forEach(t),Clo=i(L),Wg=n(L,"LI",{});var B$e=s(Wg);Yie=n(B$e,"STRONG",{});var wpt=s(Yie);wlo=r(wpt,"roberta"),wpt.forEach(t),Alo=r(B$e," \u2014 "),cI=n(B$e,"A",{href:!0});var Apt=s(cI);Llo=r(Apt,"RobertaConfig"),Apt.forEach(t),ylo=r(B$e," (RoBERTa model)"),B$e.forEach(t),xlo=i(L),Qg=n(L,"LI",{});var I$e=s(Qg);Kie=n(I$e,"STRONG",{});var Lpt=s(Kie);$lo=r(Lpt,"roformer"),Lpt.forEach(t),klo=r(I$e," \u2014 "),fI=n(I$e,"A",{href:!0});var ypt=s(fI);Slo=r(ypt,"RoFormerConfig"),ypt.forEach(t),Rlo=r(I$e," (RoFormer model)"),I$e.forEach(t),Plo=i(L),Ug=n(L,"LI",{});var N$e=s(Ug);Zie=n(N$e,"STRONG",{});var xpt=s(Zie);Blo=r(xpt,"segformer"),xpt.forEach(t),Ilo=r(N$e," \u2014 "),mI=n(N$e,"A",{href:!0});var $pt=s(mI);Nlo=r($pt,"SegformerConfig"),$pt.forEach(t),qlo=r(N$e," (SegFormer model)"),N$e.forEach(t),jlo=i(L),Hg=n(L,"LI",{});var q$e=s(Hg);ede=n(q$e,"STRONG",{});var kpt=s(ede);Dlo=r(kpt,"sew"),kpt.forEach(t),Glo=r(q$e," \u2014 "),gI=n(q$e,"A",{href:!0});var Spt=s(gI);Olo=r(Spt,"SEWConfig"),Spt.forEach(t),Vlo=r(q$e," (SEW model)"),q$e.forEach(t),Xlo=i(L),Jg=n(L,"LI",{});var j$e=s(Jg);ode=n(j$e,"STRONG",{});var Rpt=s(ode);zlo=r(Rpt,"sew-d"),Rpt.forEach(t),Wlo=r(j$e," \u2014 "),hI=n(j$e,"A",{href:!0});var Ppt=s(hI);Qlo=r(Ppt,"SEWDConfig"),Ppt.forEach(t),Ulo=r(j$e," (SEW-D model)"),j$e.forEach(t),Hlo=i(L),Yg=n(L,"LI",{});var D$e=s(Yg);rde=n(D$e,"STRONG",{});var Bpt=s(rde);Jlo=r(Bpt,"speech-encoder-decoder"),Bpt.forEach(t),Ylo=r(D$e," \u2014 "),pI=n(D$e,"A",{href:!0});var Ipt=s(pI);Klo=r(Ipt,"SpeechEncoderDecoderConfig"),Ipt.forEach(t),Zlo=r(D$e," (Speech Encoder decoder model)"),D$e.forEach(t),eio=i(L),Kg=n(L,"LI",{});var G$e=s(Kg);tde=n(G$e,"STRONG",{});var Npt=s(tde);oio=r(Npt,"speech_to_text"),Npt.forEach(t),rio=r(G$e," \u2014 "),_I=n(G$e,"A",{href:!0});var qpt=s(_I);tio=r(qpt,"Speech2TextConfig"),qpt.forEach(t),aio=r(G$e," (Speech2Text model)"),G$e.forEach(t),nio=i(L),Zg=n(L,"LI",{});var O$e=s(Zg);ade=n(O$e,"STRONG",{});var jpt=s(ade);sio=r(jpt,"speech_to_text_2"),jpt.forEach(t),lio=r(O$e," \u2014 "),uI=n(O$e,"A",{href:!0});var Dpt=s(uI);iio=r(Dpt,"Speech2Text2Config"),Dpt.forEach(t),dio=r(O$e," (Speech2Text2 model)"),O$e.forEach(t),cio=i(L),eh=n(L,"LI",{});var V$e=s(eh);nde=n(V$e,"STRONG",{});var Gpt=s(nde);fio=r(Gpt,"splinter"),Gpt.forEach(t),mio=r(V$e," \u2014 "),bI=n(V$e,"A",{href:!0});var Opt=s(bI);gio=r(Opt,"SplinterConfig"),Opt.forEach(t),hio=r(V$e," (Splinter model)"),V$e.forEach(t),pio=i(L),oh=n(L,"LI",{});var X$e=s(oh);sde=n(X$e,"STRONG",{});var Vpt=s(sde);_io=r(Vpt,"squeezebert"),Vpt.forEach(t),uio=r(X$e," \u2014 "),vI=n(X$e,"A",{href:!0});var Xpt=s(vI);bio=r(Xpt,"SqueezeBertConfig"),Xpt.forEach(t),vio=r(X$e," (SqueezeBERT model)"),X$e.forEach(t),Fio=i(L),rh=n(L,"LI",{});var z$e=s(rh);lde=n(z$e,"STRONG",{});var zpt=s(lde);Tio=r(zpt,"swin"),zpt.forEach(t),Mio=r(z$e," \u2014 "),FI=n(z$e,"A",{href:!0});var Wpt=s(FI);Eio=r(Wpt,"SwinConfig"),Wpt.forEach(t),Cio=r(z$e," (Swin Transformer model)"),z$e.forEach(t),wio=i(L),th=n(L,"LI",{});var W$e=s(th);ide=n(W$e,"STRONG",{});var Qpt=s(ide);Aio=r(Qpt,"swinv2"),Qpt.forEach(t),Lio=r(W$e," \u2014 "),TI=n(W$e,"A",{href:!0});var Upt=s(TI);yio=r(Upt,"Swinv2Config"),Upt.forEach(t),xio=r(W$e," (Swin Transformer V2 model)"),W$e.forEach(t),$io=i(L),ah=n(L,"LI",{});var Q$e=s(ah);dde=n(Q$e,"STRONG",{});var Hpt=s(dde);kio=r(Hpt,"t5"),Hpt.forEach(t),Sio=r(Q$e," \u2014 "),MI=n(Q$e,"A",{href:!0});var Jpt=s(MI);Rio=r(Jpt,"T5Config"),Jpt.forEach(t),Pio=r(Q$e," (T5 model)"),Q$e.forEach(t),Bio=i(L),nh=n(L,"LI",{});var U$e=s(nh);cde=n(U$e,"STRONG",{});var Ypt=s(cde);Iio=r(Ypt,"tapas"),Ypt.forEach(t),Nio=r(U$e," \u2014 "),EI=n(U$e,"A",{href:!0});var Kpt=s(EI);qio=r(Kpt,"TapasConfig"),Kpt.forEach(t),jio=r(U$e," (TAPAS model)"),U$e.forEach(t),Dio=i(L),sh=n(L,"LI",{});var H$e=s(sh);fde=n(H$e,"STRONG",{});var Zpt=s(fde);Gio=r(Zpt,"trajectory_transformer"),Zpt.forEach(t),Oio=r(H$e," \u2014 "),CI=n(H$e,"A",{href:!0});var e_t=s(CI);Vio=r(e_t,"TrajectoryTransformerConfig"),e_t.forEach(t),Xio=r(H$e," (Trajectory Transformer model)"),H$e.forEach(t),zio=i(L),lh=n(L,"LI",{});var J$e=s(lh);mde=n(J$e,"STRONG",{});var o_t=s(mde);Wio=r(o_t,"transfo-xl"),o_t.forEach(t),Qio=r(J$e," \u2014 "),wI=n(J$e,"A",{href:!0});var r_t=s(wI);Uio=r(r_t,"TransfoXLConfig"),r_t.forEach(t),Hio=r(J$e," (Transformer-XL model)"),J$e.forEach(t),Jio=i(L),ih=n(L,"LI",{});var Y$e=s(ih);gde=n(Y$e,"STRONG",{});var t_t=s(gde);Yio=r(t_t,"trocr"),t_t.forEach(t),Kio=r(Y$e," \u2014 "),AI=n(Y$e,"A",{href:!0});var a_t=s(AI);Zio=r(a_t,"TrOCRConfig"),a_t.forEach(t),edo=r(Y$e," (TrOCR model)"),Y$e.forEach(t),odo=i(L),dh=n(L,"LI",{});var K$e=s(dh);hde=n(K$e,"STRONG",{});var n_t=s(hde);rdo=r(n_t,"unispeech"),n_t.forEach(t),tdo=r(K$e," \u2014 "),LI=n(K$e,"A",{href:!0});var s_t=s(LI);ado=r(s_t,"UniSpeechConfig"),s_t.forEach(t),ndo=r(K$e," (UniSpeech model)"),K$e.forEach(t),sdo=i(L),ch=n(L,"LI",{});var Z$e=s(ch);pde=n(Z$e,"STRONG",{});var l_t=s(pde);ldo=r(l_t,"unispeech-sat"),l_t.forEach(t),ido=r(Z$e," \u2014 "),yI=n(Z$e,"A",{href:!0});var i_t=s(yI);ddo=r(i_t,"UniSpeechSatConfig"),i_t.forEach(t),cdo=r(Z$e," (UniSpeechSat model)"),Z$e.forEach(t),fdo=i(L),fh=n(L,"LI",{});var eke=s(fh);_de=n(eke,"STRONG",{});var d_t=s(_de);mdo=r(d_t,"van"),d_t.forEach(t),gdo=r(eke," \u2014 "),xI=n(eke,"A",{href:!0});var c_t=s(xI);hdo=r(c_t,"VanConfig"),c_t.forEach(t),pdo=r(eke," (VAN model)"),eke.forEach(t),_do=i(L),mh=n(L,"LI",{});var oke=s(mh);ude=n(oke,"STRONG",{});var f_t=s(ude);udo=r(f_t,"videomae"),f_t.forEach(t),bdo=r(oke," \u2014 "),$I=n(oke,"A",{href:!0});var m_t=s($I);vdo=r(m_t,"VideoMAEConfig"),m_t.forEach(t),Fdo=r(oke," (VideoMAE model)"),oke.forEach(t),Tdo=i(L),gh=n(L,"LI",{});var rke=s(gh);bde=n(rke,"STRONG",{});var g_t=s(bde);Mdo=r(g_t,"vilt"),g_t.forEach(t),Edo=r(rke," \u2014 "),kI=n(rke,"A",{href:!0});var h_t=s(kI);Cdo=r(h_t,"ViltConfig"),h_t.forEach(t),wdo=r(rke," (ViLT model)"),rke.forEach(t),Ado=i(L),hh=n(L,"LI",{});var tke=s(hh);vde=n(tke,"STRONG",{});var p_t=s(vde);Ldo=r(p_t,"vision-encoder-decoder"),p_t.forEach(t),ydo=r(tke," \u2014 "),SI=n(tke,"A",{href:!0});var __t=s(SI);xdo=r(__t,"VisionEncoderDecoderConfig"),__t.forEach(t),$do=r(tke," (Vision Encoder decoder model)"),tke.forEach(t),kdo=i(L),ph=n(L,"LI",{});var ake=s(ph);Fde=n(ake,"STRONG",{});var u_t=s(Fde);Sdo=r(u_t,"vision-text-dual-encoder"),u_t.forEach(t),Rdo=r(ake," \u2014 "),RI=n(ake,"A",{href:!0});var b_t=s(RI);Pdo=r(b_t,"VisionTextDualEncoderConfig"),b_t.forEach(t),Bdo=r(ake," (VisionTextDualEncoder model)"),ake.forEach(t),Ido=i(L),_h=n(L,"LI",{});var nke=s(_h);Tde=n(nke,"STRONG",{});var v_t=s(Tde);Ndo=r(v_t,"visual_bert"),v_t.forEach(t),qdo=r(nke," \u2014 "),PI=n(nke,"A",{href:!0});var F_t=s(PI);jdo=r(F_t,"VisualBertConfig"),F_t.forEach(t),Ddo=r(nke," (VisualBERT model)"),nke.forEach(t),Gdo=i(L),uh=n(L,"LI",{});var ske=s(uh);Mde=n(ske,"STRONG",{});var T_t=s(Mde);Odo=r(T_t,"vit"),T_t.forEach(t),Vdo=r(ske," \u2014 "),BI=n(ske,"A",{href:!0});var M_t=s(BI);Xdo=r(M_t,"ViTConfig"),M_t.forEach(t),zdo=r(ske," (ViT model)"),ske.forEach(t),Wdo=i(L),bh=n(L,"LI",{});var lke=s(bh);Ede=n(lke,"STRONG",{});var E_t=s(Ede);Qdo=r(E_t,"vit_mae"),E_t.forEach(t),Udo=r(lke," \u2014 "),II=n(lke,"A",{href:!0});var C_t=s(II);Hdo=r(C_t,"ViTMAEConfig"),C_t.forEach(t),Jdo=r(lke," (ViTMAE model)"),lke.forEach(t),Ydo=i(L),vh=n(L,"LI",{});var ike=s(vh);Cde=n(ike,"STRONG",{});var w_t=s(Cde);Kdo=r(w_t,"wav2vec2"),w_t.forEach(t),Zdo=r(ike," \u2014 "),NI=n(ike,"A",{href:!0});var A_t=s(NI);eco=r(A_t,"Wav2Vec2Config"),A_t.forEach(t),oco=r(ike," (Wav2Vec2 model)"),ike.forEach(t),rco=i(L),Fh=n(L,"LI",{});var dke=s(Fh);wde=n(dke,"STRONG",{});var L_t=s(wde);tco=r(L_t,"wav2vec2-conformer"),L_t.forEach(t),aco=r(dke," \u2014 "),qI=n(dke,"A",{href:!0});var y_t=s(qI);nco=r(y_t,"Wav2Vec2ConformerConfig"),y_t.forEach(t),sco=r(dke," (Wav2Vec2-Conformer model)"),dke.forEach(t),lco=i(L),Th=n(L,"LI",{});var cke=s(Th);Ade=n(cke,"STRONG",{});var x_t=s(Ade);ico=r(x_t,"wavlm"),x_t.forEach(t),dco=r(cke," \u2014 "),jI=n(cke,"A",{href:!0});var $_t=s(jI);cco=r($_t,"WavLMConfig"),$_t.forEach(t),fco=r(cke," (WavLM model)"),cke.forEach(t),mco=i(L),Mh=n(L,"LI",{});var fke=s(Mh);Lde=n(fke,"STRONG",{});var k_t=s(Lde);gco=r(k_t,"xglm"),k_t.forEach(t),hco=r(fke," \u2014 "),DI=n(fke,"A",{href:!0});var S_t=s(DI);pco=r(S_t,"XGLMConfig"),S_t.forEach(t),_co=r(fke," (XGLM model)"),fke.forEach(t),uco=i(L),Eh=n(L,"LI",{});var mke=s(Eh);yde=n(mke,"STRONG",{});var R_t=s(yde);bco=r(R_t,"xlm"),R_t.forEach(t),vco=r(mke," \u2014 "),GI=n(mke,"A",{href:!0});var P_t=s(GI);Fco=r(P_t,"XLMConfig"),P_t.forEach(t),Tco=r(mke," (XLM model)"),mke.forEach(t),Mco=i(L),Ch=n(L,"LI",{});var gke=s(Ch);xde=n(gke,"STRONG",{});var B_t=s(xde);Eco=r(B_t,"xlm-prophetnet"),B_t.forEach(t),Cco=r(gke," \u2014 "),OI=n(gke,"A",{href:!0});var I_t=s(OI);wco=r(I_t,"XLMProphetNetConfig"),I_t.forEach(t),Aco=r(gke," (XLM-ProphetNet model)"),gke.forEach(t),Lco=i(L),wh=n(L,"LI",{});var hke=s(wh);$de=n(hke,"STRONG",{});var N_t=s($de);yco=r(N_t,"xlm-roberta"),N_t.forEach(t),xco=r(hke," \u2014 "),VI=n(hke,"A",{href:!0});var q_t=s(VI);$co=r(q_t,"XLMRobertaConfig"),q_t.forEach(t),kco=r(hke," (XLM-RoBERTa model)"),hke.forEach(t),Sco=i(L),Ah=n(L,"LI",{});var pke=s(Ah);kde=n(pke,"STRONG",{});var j_t=s(kde);Rco=r(j_t,"xlm-roberta-xl"),j_t.forEach(t),Pco=r(pke," \u2014 "),XI=n(pke,"A",{href:!0});var D_t=s(XI);Bco=r(D_t,"XLMRobertaXLConfig"),D_t.forEach(t),Ico=r(pke," (XLM-RoBERTa-XL model)"),pke.forEach(t),Nco=i(L),Lh=n(L,"LI",{});var _ke=s(Lh);Sde=n(_ke,"STRONG",{});var G_t=s(Sde);qco=r(G_t,"xlnet"),G_t.forEach(t),jco=r(_ke," \u2014 "),zI=n(_ke,"A",{href:!0});var O_t=s(zI);Dco=r(O_t,"XLNetConfig"),O_t.forEach(t),Gco=r(_ke," (XLNet model)"),_ke.forEach(t),Oco=i(L),yh=n(L,"LI",{});var uke=s(yh);Rde=n(uke,"STRONG",{});var V_t=s(Rde);Vco=r(V_t,"yolos"),V_t.forEach(t),Xco=r(uke," \u2014 "),WI=n(uke,"A",{href:!0});var X_t=s(WI);zco=r(X_t,"YolosConfig"),X_t.forEach(t),Wco=r(uke," (YOLOS model)"),uke.forEach(t),Qco=i(L),xh=n(L,"LI",{});var bke=s(xh);Pde=n(bke,"STRONG",{});var z_t=s(Pde);Uco=r(z_t,"yoso"),z_t.forEach(t),Hco=r(bke," \u2014 "),QI=n(bke,"A",{href:!0});var W_t=s(QI);Jco=r(W_t,"YosoConfig"),W_t.forEach(t),Yco=r(bke," (YOSO model)"),bke.forEach(t),L.forEach(t),Kco=i(mt),T($h.$$.fragment,mt),mt.forEach(t),Zco=i(ft),kh=n(ft,"DIV",{class:!0});var zJe=s(kh);T(qy.$$.fragment,zJe),efo=i(zJe),Bde=n(zJe,"P",{});var Q_t=s(Bde);ofo=r(Q_t,"Register a new configuration for this class."),Q_t.forEach(t),zJe.forEach(t),ft.forEach(t),DUe=i(f),ad=n(f,"H2",{class:!0});var WJe=s(ad);Sh=n(WJe,"A",{id:!0,class:!0,href:!0});var U_t=s(Sh);Ide=n(U_t,"SPAN",{});var H_t=s(Ide);T(jy.$$.fragment,H_t),H_t.forEach(t),U_t.forEach(t),rfo=i(WJe),Nde=n(WJe,"SPAN",{});var J_t=s(Nde);tfo=r(J_t,"AutoTokenizer"),J_t.forEach(t),WJe.forEach(t),GUe=i(f),$o=n(f,"DIV",{class:!0});var pl=s($o);T(Dy.$$.fragment,pl),afo=i(pl),Gy=n(pl,"P",{});var QJe=s(Gy);nfo=r(QJe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),UI=n(QJe,"A",{href:!0});var Y_t=s(UI);sfo=r(Y_t,"AutoTokenizer.from_pretrained()"),Y_t.forEach(t),lfo=r(QJe," class method."),QJe.forEach(t),ifo=i(pl),Oy=n(pl,"P",{});var UJe=s(Oy);dfo=r(UJe,"This class cannot be instantiated directly using "),qde=n(UJe,"CODE",{});var K_t=s(qde);cfo=r(K_t,"__init__()"),K_t.forEach(t),ffo=r(UJe," (throws an error)."),UJe.forEach(t),mfo=i(pl),Pr=n(pl,"DIV",{class:!0});var _l=s(Pr);T(Vy.$$.fragment,_l),gfo=i(_l),jde=n(_l,"P",{});var Z_t=s(jde);hfo=r(Z_t,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Z_t.forEach(t),pfo=i(_l),za=n(_l,"P",{});var A7=s(za);_fo=r(A7,"The tokenizer class to instantiate is selected based on the "),Dde=n(A7,"CODE",{});var eut=s(Dde);ufo=r(eut,"model_type"),eut.forEach(t),bfo=r(A7,` property of the config object (either
passed as an argument or loaded from `),Gde=n(A7,"CODE",{});var out=s(Gde);vfo=r(out,"pretrained_model_name_or_path"),out.forEach(t),Ffo=r(A7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ode=n(A7,"CODE",{});var rut=s(Ode);Tfo=r(rut,"pretrained_model_name_or_path"),rut.forEach(t),Mfo=r(A7,":"),A7.forEach(t),Efo=i(_l),k=n(_l,"UL",{});var S=s(k);es=n(S,"LI",{});var mR=s(es);Vde=n(mR,"STRONG",{});var tut=s(Vde);Cfo=r(tut,"albert"),tut.forEach(t),wfo=r(mR," \u2014 "),HI=n(mR,"A",{href:!0});var aut=s(HI);Afo=r(aut,"AlbertTokenizer"),aut.forEach(t),Lfo=r(mR," or "),JI=n(mR,"A",{href:!0});var nut=s(JI);yfo=r(nut,"AlbertTokenizerFast"),nut.forEach(t),xfo=r(mR," (ALBERT model)"),mR.forEach(t),$fo=i(S),os=n(S,"LI",{});var gR=s(os);Xde=n(gR,"STRONG",{});var sut=s(Xde);kfo=r(sut,"bart"),sut.forEach(t),Sfo=r(gR," \u2014 "),YI=n(gR,"A",{href:!0});var lut=s(YI);Rfo=r(lut,"BartTokenizer"),lut.forEach(t),Pfo=r(gR," or "),KI=n(gR,"A",{href:!0});var iut=s(KI);Bfo=r(iut,"BartTokenizerFast"),iut.forEach(t),Ifo=r(gR," (BART model)"),gR.forEach(t),Nfo=i(S),rs=n(S,"LI",{});var hR=s(rs);zde=n(hR,"STRONG",{});var dut=s(zde);qfo=r(dut,"barthez"),dut.forEach(t),jfo=r(hR," \u2014 "),ZI=n(hR,"A",{href:!0});var cut=s(ZI);Dfo=r(cut,"BarthezTokenizer"),cut.forEach(t),Gfo=r(hR," or "),eN=n(hR,"A",{href:!0});var fut=s(eN);Ofo=r(fut,"BarthezTokenizerFast"),fut.forEach(t),Vfo=r(hR," (BARThez model)"),hR.forEach(t),Xfo=i(S),Rh=n(S,"LI",{});var vke=s(Rh);Wde=n(vke,"STRONG",{});var mut=s(Wde);zfo=r(mut,"bartpho"),mut.forEach(t),Wfo=r(vke," \u2014 "),oN=n(vke,"A",{href:!0});var gut=s(oN);Qfo=r(gut,"BartphoTokenizer"),gut.forEach(t),Ufo=r(vke," (BARTpho model)"),vke.forEach(t),Hfo=i(S),ts=n(S,"LI",{});var pR=s(ts);Qde=n(pR,"STRONG",{});var hut=s(Qde);Jfo=r(hut,"bert"),hut.forEach(t),Yfo=r(pR," \u2014 "),rN=n(pR,"A",{href:!0});var put=s(rN);Kfo=r(put,"BertTokenizer"),put.forEach(t),Zfo=r(pR," or "),tN=n(pR,"A",{href:!0});var _ut=s(tN);emo=r(_ut,"BertTokenizerFast"),_ut.forEach(t),omo=r(pR," (BERT model)"),pR.forEach(t),rmo=i(S),Ph=n(S,"LI",{});var Fke=s(Ph);Ude=n(Fke,"STRONG",{});var uut=s(Ude);tmo=r(uut,"bert-generation"),uut.forEach(t),amo=r(Fke," \u2014 "),aN=n(Fke,"A",{href:!0});var but=s(aN);nmo=r(but,"BertGenerationTokenizer"),but.forEach(t),smo=r(Fke," (Bert Generation model)"),Fke.forEach(t),lmo=i(S),Bh=n(S,"LI",{});var Tke=s(Bh);Hde=n(Tke,"STRONG",{});var vut=s(Hde);imo=r(vut,"bert-japanese"),vut.forEach(t),dmo=r(Tke," \u2014 "),nN=n(Tke,"A",{href:!0});var Fut=s(nN);cmo=r(Fut,"BertJapaneseTokenizer"),Fut.forEach(t),fmo=r(Tke," (BertJapanese model)"),Tke.forEach(t),mmo=i(S),Ih=n(S,"LI",{});var Mke=s(Ih);Jde=n(Mke,"STRONG",{});var Tut=s(Jde);gmo=r(Tut,"bertweet"),Tut.forEach(t),hmo=r(Mke," \u2014 "),sN=n(Mke,"A",{href:!0});var Mut=s(sN);pmo=r(Mut,"BertweetTokenizer"),Mut.forEach(t),_mo=r(Mke," (BERTweet model)"),Mke.forEach(t),umo=i(S),as=n(S,"LI",{});var _R=s(as);Yde=n(_R,"STRONG",{});var Eut=s(Yde);bmo=r(Eut,"big_bird"),Eut.forEach(t),vmo=r(_R," \u2014 "),lN=n(_R,"A",{href:!0});var Cut=s(lN);Fmo=r(Cut,"BigBirdTokenizer"),Cut.forEach(t),Tmo=r(_R," or "),iN=n(_R,"A",{href:!0});var wut=s(iN);Mmo=r(wut,"BigBirdTokenizerFast"),wut.forEach(t),Emo=r(_R," (BigBird model)"),_R.forEach(t),Cmo=i(S),ns=n(S,"LI",{});var uR=s(ns);Kde=n(uR,"STRONG",{});var Aut=s(Kde);wmo=r(Aut,"bigbird_pegasus"),Aut.forEach(t),Amo=r(uR," \u2014 "),dN=n(uR,"A",{href:!0});var Lut=s(dN);Lmo=r(Lut,"PegasusTokenizer"),Lut.forEach(t),ymo=r(uR," or "),cN=n(uR,"A",{href:!0});var yut=s(cN);xmo=r(yut,"PegasusTokenizerFast"),yut.forEach(t),$mo=r(uR," (BigBird-Pegasus model)"),uR.forEach(t),kmo=i(S),ss=n(S,"LI",{});var bR=s(ss);Zde=n(bR,"STRONG",{});var xut=s(Zde);Smo=r(xut,"blenderbot"),xut.forEach(t),Rmo=r(bR," \u2014 "),fN=n(bR,"A",{href:!0});var $ut=s(fN);Pmo=r($ut,"BlenderbotTokenizer"),$ut.forEach(t),Bmo=r(bR," or "),mN=n(bR,"A",{href:!0});var kut=s(mN);Imo=r(kut,"BlenderbotTokenizerFast"),kut.forEach(t),Nmo=r(bR," (Blenderbot model)"),bR.forEach(t),qmo=i(S),Nh=n(S,"LI",{});var Eke=s(Nh);ece=n(Eke,"STRONG",{});var Sut=s(ece);jmo=r(Sut,"blenderbot-small"),Sut.forEach(t),Dmo=r(Eke," \u2014 "),gN=n(Eke,"A",{href:!0});var Rut=s(gN);Gmo=r(Rut,"BlenderbotSmallTokenizer"),Rut.forEach(t),Omo=r(Eke," (BlenderbotSmall model)"),Eke.forEach(t),Vmo=i(S),qh=n(S,"LI",{});var Cke=s(qh);oce=n(Cke,"STRONG",{});var Put=s(oce);Xmo=r(Put,"bloom"),Put.forEach(t),zmo=r(Cke," \u2014 "),hN=n(Cke,"A",{href:!0});var But=s(hN);Wmo=r(But,"BloomTokenizerFast"),But.forEach(t),Qmo=r(Cke," (BLOOM model)"),Cke.forEach(t),Umo=i(S),jh=n(S,"LI",{});var wke=s(jh);rce=n(wke,"STRONG",{});var Iut=s(rce);Hmo=r(Iut,"byt5"),Iut.forEach(t),Jmo=r(wke," \u2014 "),pN=n(wke,"A",{href:!0});var Nut=s(pN);Ymo=r(Nut,"ByT5Tokenizer"),Nut.forEach(t),Kmo=r(wke," (ByT5 model)"),wke.forEach(t),Zmo=i(S),ls=n(S,"LI",{});var vR=s(ls);tce=n(vR,"STRONG",{});var qut=s(tce);ego=r(qut,"camembert"),qut.forEach(t),ogo=r(vR," \u2014 "),_N=n(vR,"A",{href:!0});var jut=s(_N);rgo=r(jut,"CamembertTokenizer"),jut.forEach(t),tgo=r(vR," or "),uN=n(vR,"A",{href:!0});var Dut=s(uN);ago=r(Dut,"CamembertTokenizerFast"),Dut.forEach(t),ngo=r(vR," (CamemBERT model)"),vR.forEach(t),sgo=i(S),Dh=n(S,"LI",{});var Ake=s(Dh);ace=n(Ake,"STRONG",{});var Gut=s(ace);lgo=r(Gut,"canine"),Gut.forEach(t),igo=r(Ake," \u2014 "),bN=n(Ake,"A",{href:!0});var Out=s(bN);dgo=r(Out,"CanineTokenizer"),Out.forEach(t),cgo=r(Ake," (CANINE model)"),Ake.forEach(t),fgo=i(S),is=n(S,"LI",{});var FR=s(is);nce=n(FR,"STRONG",{});var Vut=s(nce);mgo=r(Vut,"clip"),Vut.forEach(t),ggo=r(FR," \u2014 "),vN=n(FR,"A",{href:!0});var Xut=s(vN);hgo=r(Xut,"CLIPTokenizer"),Xut.forEach(t),pgo=r(FR," or "),FN=n(FR,"A",{href:!0});var zut=s(FN);_go=r(zut,"CLIPTokenizerFast"),zut.forEach(t),ugo=r(FR," (CLIP model)"),FR.forEach(t),bgo=i(S),ds=n(S,"LI",{});var TR=s(ds);sce=n(TR,"STRONG",{});var Wut=s(sce);vgo=r(Wut,"codegen"),Wut.forEach(t),Fgo=r(TR," \u2014 "),TN=n(TR,"A",{href:!0});var Qut=s(TN);Tgo=r(Qut,"CodeGenTokenizer"),Qut.forEach(t),Mgo=r(TR," or "),MN=n(TR,"A",{href:!0});var Uut=s(MN);Ego=r(Uut,"CodeGenTokenizerFast"),Uut.forEach(t),Cgo=r(TR," (CodeGen model)"),TR.forEach(t),wgo=i(S),cs=n(S,"LI",{});var MR=s(cs);lce=n(MR,"STRONG",{});var Hut=s(lce);Ago=r(Hut,"convbert"),Hut.forEach(t),Lgo=r(MR," \u2014 "),EN=n(MR,"A",{href:!0});var Jut=s(EN);ygo=r(Jut,"ConvBertTokenizer"),Jut.forEach(t),xgo=r(MR," or "),CN=n(MR,"A",{href:!0});var Yut=s(CN);$go=r(Yut,"ConvBertTokenizerFast"),Yut.forEach(t),kgo=r(MR," (ConvBERT model)"),MR.forEach(t),Sgo=i(S),fs=n(S,"LI",{});var ER=s(fs);ice=n(ER,"STRONG",{});var Kut=s(ice);Rgo=r(Kut,"cpm"),Kut.forEach(t),Pgo=r(ER," \u2014 "),wN=n(ER,"A",{href:!0});var Zut=s(wN);Bgo=r(Zut,"CpmTokenizer"),Zut.forEach(t),Igo=r(ER," or "),AN=n(ER,"A",{href:!0});var e1t=s(AN);Ngo=r(e1t,"CpmTokenizerFast"),e1t.forEach(t),qgo=r(ER," (CPM model)"),ER.forEach(t),jgo=i(S),Gh=n(S,"LI",{});var Lke=s(Gh);dce=n(Lke,"STRONG",{});var o1t=s(dce);Dgo=r(o1t,"ctrl"),o1t.forEach(t),Ggo=r(Lke," \u2014 "),LN=n(Lke,"A",{href:!0});var r1t=s(LN);Ogo=r(r1t,"CTRLTokenizer"),r1t.forEach(t),Vgo=r(Lke," (CTRL model)"),Lke.forEach(t),Xgo=i(S),ms=n(S,"LI",{});var CR=s(ms);cce=n(CR,"STRONG",{});var t1t=s(cce);zgo=r(t1t,"data2vec-text"),t1t.forEach(t),Wgo=r(CR," \u2014 "),yN=n(CR,"A",{href:!0});var a1t=s(yN);Qgo=r(a1t,"RobertaTokenizer"),a1t.forEach(t),Ugo=r(CR," or "),xN=n(CR,"A",{href:!0});var n1t=s(xN);Hgo=r(n1t,"RobertaTokenizerFast"),n1t.forEach(t),Jgo=r(CR," (Data2VecText model)"),CR.forEach(t),Ygo=i(S),gs=n(S,"LI",{});var wR=s(gs);fce=n(wR,"STRONG",{});var s1t=s(fce);Kgo=r(s1t,"deberta"),s1t.forEach(t),Zgo=r(wR," \u2014 "),$N=n(wR,"A",{href:!0});var l1t=s($N);eho=r(l1t,"DebertaTokenizer"),l1t.forEach(t),oho=r(wR," or "),kN=n(wR,"A",{href:!0});var i1t=s(kN);rho=r(i1t,"DebertaTokenizerFast"),i1t.forEach(t),tho=r(wR," (DeBERTa model)"),wR.forEach(t),aho=i(S),hs=n(S,"LI",{});var AR=s(hs);mce=n(AR,"STRONG",{});var d1t=s(mce);nho=r(d1t,"deberta-v2"),d1t.forEach(t),sho=r(AR," \u2014 "),SN=n(AR,"A",{href:!0});var c1t=s(SN);lho=r(c1t,"DebertaV2Tokenizer"),c1t.forEach(t),iho=r(AR," or "),RN=n(AR,"A",{href:!0});var f1t=s(RN);dho=r(f1t,"DebertaV2TokenizerFast"),f1t.forEach(t),cho=r(AR," (DeBERTa-v2 model)"),AR.forEach(t),fho=i(S),ps=n(S,"LI",{});var LR=s(ps);gce=n(LR,"STRONG",{});var m1t=s(gce);mho=r(m1t,"distilbert"),m1t.forEach(t),gho=r(LR," \u2014 "),PN=n(LR,"A",{href:!0});var g1t=s(PN);hho=r(g1t,"DistilBertTokenizer"),g1t.forEach(t),pho=r(LR," or "),BN=n(LR,"A",{href:!0});var h1t=s(BN);_ho=r(h1t,"DistilBertTokenizerFast"),h1t.forEach(t),uho=r(LR," (DistilBERT model)"),LR.forEach(t),bho=i(S),_s=n(S,"LI",{});var yR=s(_s);hce=n(yR,"STRONG",{});var p1t=s(hce);vho=r(p1t,"dpr"),p1t.forEach(t),Fho=r(yR," \u2014 "),IN=n(yR,"A",{href:!0});var _1t=s(IN);Tho=r(_1t,"DPRQuestionEncoderTokenizer"),_1t.forEach(t),Mho=r(yR," or "),NN=n(yR,"A",{href:!0});var u1t=s(NN);Eho=r(u1t,"DPRQuestionEncoderTokenizerFast"),u1t.forEach(t),Cho=r(yR," (DPR model)"),yR.forEach(t),who=i(S),us=n(S,"LI",{});var xR=s(us);pce=n(xR,"STRONG",{});var b1t=s(pce);Aho=r(b1t,"electra"),b1t.forEach(t),Lho=r(xR," \u2014 "),qN=n(xR,"A",{href:!0});var v1t=s(qN);yho=r(v1t,"ElectraTokenizer"),v1t.forEach(t),xho=r(xR," or "),jN=n(xR,"A",{href:!0});var F1t=s(jN);$ho=r(F1t,"ElectraTokenizerFast"),F1t.forEach(t),kho=r(xR," (ELECTRA model)"),xR.forEach(t),Sho=i(S),Oh=n(S,"LI",{});var yke=s(Oh);_ce=n(yke,"STRONG",{});var T1t=s(_ce);Rho=r(T1t,"flaubert"),T1t.forEach(t),Pho=r(yke," \u2014 "),DN=n(yke,"A",{href:!0});var M1t=s(DN);Bho=r(M1t,"FlaubertTokenizer"),M1t.forEach(t),Iho=r(yke," (FlauBERT model)"),yke.forEach(t),Nho=i(S),bs=n(S,"LI",{});var $R=s(bs);uce=n($R,"STRONG",{});var E1t=s(uce);qho=r(E1t,"fnet"),E1t.forEach(t),jho=r($R," \u2014 "),GN=n($R,"A",{href:!0});var C1t=s(GN);Dho=r(C1t,"FNetTokenizer"),C1t.forEach(t),Gho=r($R," or "),ON=n($R,"A",{href:!0});var w1t=s(ON);Oho=r(w1t,"FNetTokenizerFast"),w1t.forEach(t),Vho=r($R," (FNet model)"),$R.forEach(t),Xho=i(S),Vh=n(S,"LI",{});var xke=s(Vh);bce=n(xke,"STRONG",{});var A1t=s(bce);zho=r(A1t,"fsmt"),A1t.forEach(t),Who=r(xke," \u2014 "),VN=n(xke,"A",{href:!0});var L1t=s(VN);Qho=r(L1t,"FSMTTokenizer"),L1t.forEach(t),Uho=r(xke," (FairSeq Machine-Translation model)"),xke.forEach(t),Hho=i(S),vs=n(S,"LI",{});var kR=s(vs);vce=n(kR,"STRONG",{});var y1t=s(vce);Jho=r(y1t,"funnel"),y1t.forEach(t),Yho=r(kR," \u2014 "),XN=n(kR,"A",{href:!0});var x1t=s(XN);Kho=r(x1t,"FunnelTokenizer"),x1t.forEach(t),Zho=r(kR," or "),zN=n(kR,"A",{href:!0});var $1t=s(zN);epo=r($1t,"FunnelTokenizerFast"),$1t.forEach(t),opo=r(kR," (Funnel Transformer model)"),kR.forEach(t),rpo=i(S),Fs=n(S,"LI",{});var SR=s(Fs);Fce=n(SR,"STRONG",{});var k1t=s(Fce);tpo=r(k1t,"gpt2"),k1t.forEach(t),apo=r(SR," \u2014 "),WN=n(SR,"A",{href:!0});var S1t=s(WN);npo=r(S1t,"GPT2Tokenizer"),S1t.forEach(t),spo=r(SR," or "),QN=n(SR,"A",{href:!0});var R1t=s(QN);lpo=r(R1t,"GPT2TokenizerFast"),R1t.forEach(t),ipo=r(SR," (OpenAI GPT-2 model)"),SR.forEach(t),dpo=i(S),Ts=n(S,"LI",{});var RR=s(Ts);Tce=n(RR,"STRONG",{});var P1t=s(Tce);cpo=r(P1t,"gpt_neo"),P1t.forEach(t),fpo=r(RR," \u2014 "),UN=n(RR,"A",{href:!0});var B1t=s(UN);mpo=r(B1t,"GPT2Tokenizer"),B1t.forEach(t),gpo=r(RR," or "),HN=n(RR,"A",{href:!0});var I1t=s(HN);hpo=r(I1t,"GPT2TokenizerFast"),I1t.forEach(t),ppo=r(RR," (GPT Neo model)"),RR.forEach(t),_po=i(S),Xh=n(S,"LI",{});var $ke=s(Xh);Mce=n($ke,"STRONG",{});var N1t=s(Mce);upo=r(N1t,"gpt_neox"),N1t.forEach(t),bpo=r($ke," \u2014 "),JN=n($ke,"A",{href:!0});var q1t=s(JN);vpo=r(q1t,"GPTNeoXTokenizerFast"),q1t.forEach(t),Fpo=r($ke," (GPT NeoX model)"),$ke.forEach(t),Tpo=i(S),Ms=n(S,"LI",{});var PR=s(Ms);Ece=n(PR,"STRONG",{});var j1t=s(Ece);Mpo=r(j1t,"gptj"),j1t.forEach(t),Epo=r(PR," \u2014 "),YN=n(PR,"A",{href:!0});var D1t=s(YN);Cpo=r(D1t,"GPT2Tokenizer"),D1t.forEach(t),wpo=r(PR," or "),KN=n(PR,"A",{href:!0});var G1t=s(KN);Apo=r(G1t,"GPT2TokenizerFast"),G1t.forEach(t),Lpo=r(PR," (GPT-J model)"),PR.forEach(t),ypo=i(S),Es=n(S,"LI",{});var BR=s(Es);Cce=n(BR,"STRONG",{});var O1t=s(Cce);xpo=r(O1t,"groupvit"),O1t.forEach(t),$po=r(BR," \u2014 "),ZN=n(BR,"A",{href:!0});var V1t=s(ZN);kpo=r(V1t,"CLIPTokenizer"),V1t.forEach(t),Spo=r(BR," or "),eq=n(BR,"A",{href:!0});var X1t=s(eq);Rpo=r(X1t,"CLIPTokenizerFast"),X1t.forEach(t),Ppo=r(BR," (GroupViT model)"),BR.forEach(t),Bpo=i(S),Cs=n(S,"LI",{});var IR=s(Cs);wce=n(IR,"STRONG",{});var z1t=s(wce);Ipo=r(z1t,"herbert"),z1t.forEach(t),Npo=r(IR," \u2014 "),oq=n(IR,"A",{href:!0});var W1t=s(oq);qpo=r(W1t,"HerbertTokenizer"),W1t.forEach(t),jpo=r(IR," or "),rq=n(IR,"A",{href:!0});var Q1t=s(rq);Dpo=r(Q1t,"HerbertTokenizerFast"),Q1t.forEach(t),Gpo=r(IR," (HerBERT model)"),IR.forEach(t),Opo=i(S),zh=n(S,"LI",{});var kke=s(zh);Ace=n(kke,"STRONG",{});var U1t=s(Ace);Vpo=r(U1t,"hubert"),U1t.forEach(t),Xpo=r(kke," \u2014 "),tq=n(kke,"A",{href:!0});var H1t=s(tq);zpo=r(H1t,"Wav2Vec2CTCTokenizer"),H1t.forEach(t),Wpo=r(kke," (Hubert model)"),kke.forEach(t),Qpo=i(S),ws=n(S,"LI",{});var NR=s(ws);Lce=n(NR,"STRONG",{});var J1t=s(Lce);Upo=r(J1t,"ibert"),J1t.forEach(t),Hpo=r(NR," \u2014 "),aq=n(NR,"A",{href:!0});var Y1t=s(aq);Jpo=r(Y1t,"RobertaTokenizer"),Y1t.forEach(t),Ypo=r(NR," or "),nq=n(NR,"A",{href:!0});var K1t=s(nq);Kpo=r(K1t,"RobertaTokenizerFast"),K1t.forEach(t),Zpo=r(NR," (I-BERT model)"),NR.forEach(t),e_o=i(S),As=n(S,"LI",{});var qR=s(As);yce=n(qR,"STRONG",{});var Z1t=s(yce);o_o=r(Z1t,"layoutlm"),Z1t.forEach(t),r_o=r(qR," \u2014 "),sq=n(qR,"A",{href:!0});var e8t=s(sq);t_o=r(e8t,"LayoutLMTokenizer"),e8t.forEach(t),a_o=r(qR," or "),lq=n(qR,"A",{href:!0});var o8t=s(lq);n_o=r(o8t,"LayoutLMTokenizerFast"),o8t.forEach(t),s_o=r(qR," (LayoutLM model)"),qR.forEach(t),l_o=i(S),Ls=n(S,"LI",{});var jR=s(Ls);xce=n(jR,"STRONG",{});var r8t=s(xce);i_o=r(r8t,"layoutlmv2"),r8t.forEach(t),d_o=r(jR," \u2014 "),iq=n(jR,"A",{href:!0});var t8t=s(iq);c_o=r(t8t,"LayoutLMv2Tokenizer"),t8t.forEach(t),f_o=r(jR," or "),dq=n(jR,"A",{href:!0});var a8t=s(dq);m_o=r(a8t,"LayoutLMv2TokenizerFast"),a8t.forEach(t),g_o=r(jR," (LayoutLMv2 model)"),jR.forEach(t),h_o=i(S),ys=n(S,"LI",{});var DR=s(ys);$ce=n(DR,"STRONG",{});var n8t=s($ce);p_o=r(n8t,"layoutlmv3"),n8t.forEach(t),__o=r(DR," \u2014 "),cq=n(DR,"A",{href:!0});var s8t=s(cq);u_o=r(s8t,"LayoutLMv3Tokenizer"),s8t.forEach(t),b_o=r(DR," or "),fq=n(DR,"A",{href:!0});var l8t=s(fq);v_o=r(l8t,"LayoutLMv3TokenizerFast"),l8t.forEach(t),F_o=r(DR," (LayoutLMv3 model)"),DR.forEach(t),T_o=i(S),xs=n(S,"LI",{});var GR=s(xs);kce=n(GR,"STRONG",{});var i8t=s(kce);M_o=r(i8t,"layoutxlm"),i8t.forEach(t),E_o=r(GR," \u2014 "),mq=n(GR,"A",{href:!0});var d8t=s(mq);C_o=r(d8t,"LayoutXLMTokenizer"),d8t.forEach(t),w_o=r(GR," or "),gq=n(GR,"A",{href:!0});var c8t=s(gq);A_o=r(c8t,"LayoutXLMTokenizerFast"),c8t.forEach(t),L_o=r(GR," (LayoutXLM model)"),GR.forEach(t),y_o=i(S),$s=n(S,"LI",{});var OR=s($s);Sce=n(OR,"STRONG",{});var f8t=s(Sce);x_o=r(f8t,"led"),f8t.forEach(t),$_o=r(OR," \u2014 "),hq=n(OR,"A",{href:!0});var m8t=s(hq);k_o=r(m8t,"LEDTokenizer"),m8t.forEach(t),S_o=r(OR," or "),pq=n(OR,"A",{href:!0});var g8t=s(pq);R_o=r(g8t,"LEDTokenizerFast"),g8t.forEach(t),P_o=r(OR," (LED model)"),OR.forEach(t),B_o=i(S),ks=n(S,"LI",{});var VR=s(ks);Rce=n(VR,"STRONG",{});var h8t=s(Rce);I_o=r(h8t,"longformer"),h8t.forEach(t),N_o=r(VR," \u2014 "),_q=n(VR,"A",{href:!0});var p8t=s(_q);q_o=r(p8t,"LongformerTokenizer"),p8t.forEach(t),j_o=r(VR," or "),uq=n(VR,"A",{href:!0});var _8t=s(uq);D_o=r(_8t,"LongformerTokenizerFast"),_8t.forEach(t),G_o=r(VR," (Longformer model)"),VR.forEach(t),O_o=i(S),Ss=n(S,"LI",{});var XR=s(Ss);Pce=n(XR,"STRONG",{});var u8t=s(Pce);V_o=r(u8t,"longt5"),u8t.forEach(t),X_o=r(XR," \u2014 "),bq=n(XR,"A",{href:!0});var b8t=s(bq);z_o=r(b8t,"T5Tokenizer"),b8t.forEach(t),W_o=r(XR," or "),vq=n(XR,"A",{href:!0});var v8t=s(vq);Q_o=r(v8t,"T5TokenizerFast"),v8t.forEach(t),U_o=r(XR," (LongT5 model)"),XR.forEach(t),H_o=i(S),Wh=n(S,"LI",{});var Ske=s(Wh);Bce=n(Ske,"STRONG",{});var F8t=s(Bce);J_o=r(F8t,"luke"),F8t.forEach(t),Y_o=r(Ske," \u2014 "),Fq=n(Ske,"A",{href:!0});var T8t=s(Fq);K_o=r(T8t,"LukeTokenizer"),T8t.forEach(t),Z_o=r(Ske," (LUKE model)"),Ske.forEach(t),euo=i(S),Rs=n(S,"LI",{});var zR=s(Rs);Ice=n(zR,"STRONG",{});var M8t=s(Ice);ouo=r(M8t,"lxmert"),M8t.forEach(t),ruo=r(zR," \u2014 "),Tq=n(zR,"A",{href:!0});var E8t=s(Tq);tuo=r(E8t,"LxmertTokenizer"),E8t.forEach(t),auo=r(zR," or "),Mq=n(zR,"A",{href:!0});var C8t=s(Mq);nuo=r(C8t,"LxmertTokenizerFast"),C8t.forEach(t),suo=r(zR," (LXMERT model)"),zR.forEach(t),luo=i(S),Qh=n(S,"LI",{});var Rke=s(Qh);Nce=n(Rke,"STRONG",{});var w8t=s(Nce);iuo=r(w8t,"m2m_100"),w8t.forEach(t),duo=r(Rke," \u2014 "),Eq=n(Rke,"A",{href:!0});var A8t=s(Eq);cuo=r(A8t,"M2M100Tokenizer"),A8t.forEach(t),fuo=r(Rke," (M2M100 model)"),Rke.forEach(t),muo=i(S),Uh=n(S,"LI",{});var Pke=s(Uh);qce=n(Pke,"STRONG",{});var L8t=s(qce);guo=r(L8t,"marian"),L8t.forEach(t),huo=r(Pke," \u2014 "),Cq=n(Pke,"A",{href:!0});var y8t=s(Cq);puo=r(y8t,"MarianTokenizer"),y8t.forEach(t),_uo=r(Pke," (Marian model)"),Pke.forEach(t),uuo=i(S),Ps=n(S,"LI",{});var WR=s(Ps);jce=n(WR,"STRONG",{});var x8t=s(jce);buo=r(x8t,"mbart"),x8t.forEach(t),vuo=r(WR," \u2014 "),wq=n(WR,"A",{href:!0});var $8t=s(wq);Fuo=r($8t,"MBartTokenizer"),$8t.forEach(t),Tuo=r(WR," or "),Aq=n(WR,"A",{href:!0});var k8t=s(Aq);Muo=r(k8t,"MBartTokenizerFast"),k8t.forEach(t),Euo=r(WR," (mBART model)"),WR.forEach(t),Cuo=i(S),Bs=n(S,"LI",{});var QR=s(Bs);Dce=n(QR,"STRONG",{});var S8t=s(Dce);wuo=r(S8t,"mbart50"),S8t.forEach(t),Auo=r(QR," \u2014 "),Lq=n(QR,"A",{href:!0});var R8t=s(Lq);Luo=r(R8t,"MBart50Tokenizer"),R8t.forEach(t),yuo=r(QR," or "),yq=n(QR,"A",{href:!0});var P8t=s(yq);xuo=r(P8t,"MBart50TokenizerFast"),P8t.forEach(t),$uo=r(QR," (mBART-50 model)"),QR.forEach(t),kuo=i(S),Is=n(S,"LI",{});var UR=s(Is);Gce=n(UR,"STRONG",{});var B8t=s(Gce);Suo=r(B8t,"megatron-bert"),B8t.forEach(t),Ruo=r(UR," \u2014 "),xq=n(UR,"A",{href:!0});var I8t=s(xq);Puo=r(I8t,"BertTokenizer"),I8t.forEach(t),Buo=r(UR," or "),$q=n(UR,"A",{href:!0});var N8t=s($q);Iuo=r(N8t,"BertTokenizerFast"),N8t.forEach(t),Nuo=r(UR," (Megatron-BERT model)"),UR.forEach(t),quo=i(S),Hh=n(S,"LI",{});var Bke=s(Hh);Oce=n(Bke,"STRONG",{});var q8t=s(Oce);juo=r(q8t,"mluke"),q8t.forEach(t),Duo=r(Bke," \u2014 "),kq=n(Bke,"A",{href:!0});var j8t=s(kq);Guo=r(j8t,"MLukeTokenizer"),j8t.forEach(t),Ouo=r(Bke," (mLUKE model)"),Bke.forEach(t),Vuo=i(S),Ns=n(S,"LI",{});var HR=s(Ns);Vce=n(HR,"STRONG",{});var D8t=s(Vce);Xuo=r(D8t,"mobilebert"),D8t.forEach(t),zuo=r(HR," \u2014 "),Sq=n(HR,"A",{href:!0});var G8t=s(Sq);Wuo=r(G8t,"MobileBertTokenizer"),G8t.forEach(t),Quo=r(HR," or "),Rq=n(HR,"A",{href:!0});var O8t=s(Rq);Uuo=r(O8t,"MobileBertTokenizerFast"),O8t.forEach(t),Huo=r(HR," (MobileBERT model)"),HR.forEach(t),Juo=i(S),qs=n(S,"LI",{});var JR=s(qs);Xce=n(JR,"STRONG",{});var V8t=s(Xce);Yuo=r(V8t,"mpnet"),V8t.forEach(t),Kuo=r(JR," \u2014 "),Pq=n(JR,"A",{href:!0});var X8t=s(Pq);Zuo=r(X8t,"MPNetTokenizer"),X8t.forEach(t),e1o=r(JR," or "),Bq=n(JR,"A",{href:!0});var z8t=s(Bq);o1o=r(z8t,"MPNetTokenizerFast"),z8t.forEach(t),r1o=r(JR," (MPNet model)"),JR.forEach(t),t1o=i(S),js=n(S,"LI",{});var YR=s(js);zce=n(YR,"STRONG",{});var W8t=s(zce);a1o=r(W8t,"mt5"),W8t.forEach(t),n1o=r(YR," \u2014 "),Iq=n(YR,"A",{href:!0});var Q8t=s(Iq);s1o=r(Q8t,"MT5Tokenizer"),Q8t.forEach(t),l1o=r(YR," or "),Nq=n(YR,"A",{href:!0});var U8t=s(Nq);i1o=r(U8t,"MT5TokenizerFast"),U8t.forEach(t),d1o=r(YR," (MT5 model)"),YR.forEach(t),c1o=i(S),Ds=n(S,"LI",{});var KR=s(Ds);Wce=n(KR,"STRONG",{});var H8t=s(Wce);f1o=r(H8t,"mvp"),H8t.forEach(t),m1o=r(KR," \u2014 "),qq=n(KR,"A",{href:!0});var J8t=s(qq);g1o=r(J8t,"MvpTokenizer"),J8t.forEach(t),h1o=r(KR," or "),jq=n(KR,"A",{href:!0});var Y8t=s(jq);p1o=r(Y8t,"MvpTokenizerFast"),Y8t.forEach(t),_1o=r(KR," (MVP model)"),KR.forEach(t),u1o=i(S),Gs=n(S,"LI",{});var ZR=s(Gs);Qce=n(ZR,"STRONG",{});var K8t=s(Qce);b1o=r(K8t,"nezha"),K8t.forEach(t),v1o=r(ZR," \u2014 "),Dq=n(ZR,"A",{href:!0});var Z8t=s(Dq);F1o=r(Z8t,"BertTokenizer"),Z8t.forEach(t),T1o=r(ZR," or "),Gq=n(ZR,"A",{href:!0});var ebt=s(Gq);M1o=r(ebt,"BertTokenizerFast"),ebt.forEach(t),E1o=r(ZR," (Nezha model)"),ZR.forEach(t),C1o=i(S),Os=n(S,"LI",{});var eP=s(Os);Uce=n(eP,"STRONG",{});var obt=s(Uce);w1o=r(obt,"nllb"),obt.forEach(t),A1o=r(eP," \u2014 "),Oq=n(eP,"A",{href:!0});var rbt=s(Oq);L1o=r(rbt,"NllbTokenizer"),rbt.forEach(t),y1o=r(eP," or "),Vq=n(eP,"A",{href:!0});var tbt=s(Vq);x1o=r(tbt,"NllbTokenizerFast"),tbt.forEach(t),$1o=r(eP," (NLLB model)"),eP.forEach(t),k1o=i(S),Vs=n(S,"LI",{});var oP=s(Vs);Hce=n(oP,"STRONG",{});var abt=s(Hce);S1o=r(abt,"nystromformer"),abt.forEach(t),R1o=r(oP," \u2014 "),Xq=n(oP,"A",{href:!0});var nbt=s(Xq);P1o=r(nbt,"AlbertTokenizer"),nbt.forEach(t),B1o=r(oP," or "),zq=n(oP,"A",{href:!0});var sbt=s(zq);I1o=r(sbt,"AlbertTokenizerFast"),sbt.forEach(t),N1o=r(oP," (Nystr\xF6mformer model)"),oP.forEach(t),q1o=i(S),Xs=n(S,"LI",{});var rP=s(Xs);Jce=n(rP,"STRONG",{});var lbt=s(Jce);j1o=r(lbt,"openai-gpt"),lbt.forEach(t),D1o=r(rP," \u2014 "),Wq=n(rP,"A",{href:!0});var ibt=s(Wq);G1o=r(ibt,"OpenAIGPTTokenizer"),ibt.forEach(t),O1o=r(rP," or "),Qq=n(rP,"A",{href:!0});var dbt=s(Qq);V1o=r(dbt,"OpenAIGPTTokenizerFast"),dbt.forEach(t),X1o=r(rP," (OpenAI GPT model)"),rP.forEach(t),z1o=i(S),Jh=n(S,"LI",{});var Ike=s(Jh);Yce=n(Ike,"STRONG",{});var cbt=s(Yce);W1o=r(cbt,"opt"),cbt.forEach(t),Q1o=r(Ike," \u2014 "),Uq=n(Ike,"A",{href:!0});var fbt=s(Uq);U1o=r(fbt,"GPT2Tokenizer"),fbt.forEach(t),H1o=r(Ike," (OPT model)"),Ike.forEach(t),J1o=i(S),zs=n(S,"LI",{});var tP=s(zs);Kce=n(tP,"STRONG",{});var mbt=s(Kce);Y1o=r(mbt,"owlvit"),mbt.forEach(t),K1o=r(tP," \u2014 "),Hq=n(tP,"A",{href:!0});var gbt=s(Hq);Z1o=r(gbt,"CLIPTokenizer"),gbt.forEach(t),e8o=r(tP," or "),Jq=n(tP,"A",{href:!0});var hbt=s(Jq);o8o=r(hbt,"CLIPTokenizerFast"),hbt.forEach(t),r8o=r(tP," (OWL-ViT model)"),tP.forEach(t),t8o=i(S),Ws=n(S,"LI",{});var aP=s(Ws);Zce=n(aP,"STRONG",{});var pbt=s(Zce);a8o=r(pbt,"pegasus"),pbt.forEach(t),n8o=r(aP," \u2014 "),Yq=n(aP,"A",{href:!0});var _bt=s(Yq);s8o=r(_bt,"PegasusTokenizer"),_bt.forEach(t),l8o=r(aP," or "),Kq=n(aP,"A",{href:!0});var ubt=s(Kq);i8o=r(ubt,"PegasusTokenizerFast"),ubt.forEach(t),d8o=r(aP," (Pegasus model)"),aP.forEach(t),c8o=i(S),Yh=n(S,"LI",{});var Nke=s(Yh);efe=n(Nke,"STRONG",{});var bbt=s(efe);f8o=r(bbt,"perceiver"),bbt.forEach(t),m8o=r(Nke," \u2014 "),Zq=n(Nke,"A",{href:!0});var vbt=s(Zq);g8o=r(vbt,"PerceiverTokenizer"),vbt.forEach(t),h8o=r(Nke," (Perceiver model)"),Nke.forEach(t),p8o=i(S),Kh=n(S,"LI",{});var qke=s(Kh);ofe=n(qke,"STRONG",{});var Fbt=s(ofe);_8o=r(Fbt,"phobert"),Fbt.forEach(t),u8o=r(qke," \u2014 "),ej=n(qke,"A",{href:!0});var Tbt=s(ej);b8o=r(Tbt,"PhobertTokenizer"),Tbt.forEach(t),v8o=r(qke," (PhoBERT model)"),qke.forEach(t),F8o=i(S),Zh=n(S,"LI",{});var jke=s(Zh);rfe=n(jke,"STRONG",{});var Mbt=s(rfe);T8o=r(Mbt,"plbart"),Mbt.forEach(t),M8o=r(jke," \u2014 "),oj=n(jke,"A",{href:!0});var Ebt=s(oj);E8o=r(Ebt,"PLBartTokenizer"),Ebt.forEach(t),C8o=r(jke," (PLBart model)"),jke.forEach(t),w8o=i(S),ep=n(S,"LI",{});var Dke=s(ep);tfe=n(Dke,"STRONG",{});var Cbt=s(tfe);A8o=r(Cbt,"prophetnet"),Cbt.forEach(t),L8o=r(Dke," \u2014 "),rj=n(Dke,"A",{href:!0});var wbt=s(rj);y8o=r(wbt,"ProphetNetTokenizer"),wbt.forEach(t),x8o=r(Dke," (ProphetNet model)"),Dke.forEach(t),$8o=i(S),Qs=n(S,"LI",{});var nP=s(Qs);afe=n(nP,"STRONG",{});var Abt=s(afe);k8o=r(Abt,"qdqbert"),Abt.forEach(t),S8o=r(nP," \u2014 "),tj=n(nP,"A",{href:!0});var Lbt=s(tj);R8o=r(Lbt,"BertTokenizer"),Lbt.forEach(t),P8o=r(nP," or "),aj=n(nP,"A",{href:!0});var ybt=s(aj);B8o=r(ybt,"BertTokenizerFast"),ybt.forEach(t),I8o=r(nP," (QDQBert model)"),nP.forEach(t),N8o=i(S),op=n(S,"LI",{});var Gke=s(op);nfe=n(Gke,"STRONG",{});var xbt=s(nfe);q8o=r(xbt,"rag"),xbt.forEach(t),j8o=r(Gke," \u2014 "),nj=n(Gke,"A",{href:!0});var $bt=s(nj);D8o=r($bt,"RagTokenizer"),$bt.forEach(t),G8o=r(Gke," (RAG model)"),Gke.forEach(t),O8o=i(S),Us=n(S,"LI",{});var sP=s(Us);sfe=n(sP,"STRONG",{});var kbt=s(sfe);V8o=r(kbt,"realm"),kbt.forEach(t),X8o=r(sP," \u2014 "),sj=n(sP,"A",{href:!0});var Sbt=s(sj);z8o=r(Sbt,"RealmTokenizer"),Sbt.forEach(t),W8o=r(sP," or "),lj=n(sP,"A",{href:!0});var Rbt=s(lj);Q8o=r(Rbt,"RealmTokenizerFast"),Rbt.forEach(t),U8o=r(sP," (REALM model)"),sP.forEach(t),H8o=i(S),Hs=n(S,"LI",{});var lP=s(Hs);lfe=n(lP,"STRONG",{});var Pbt=s(lfe);J8o=r(Pbt,"reformer"),Pbt.forEach(t),Y8o=r(lP," \u2014 "),ij=n(lP,"A",{href:!0});var Bbt=s(ij);K8o=r(Bbt,"ReformerTokenizer"),Bbt.forEach(t),Z8o=r(lP," or "),dj=n(lP,"A",{href:!0});var Ibt=s(dj);ebo=r(Ibt,"ReformerTokenizerFast"),Ibt.forEach(t),obo=r(lP," (Reformer model)"),lP.forEach(t),rbo=i(S),Js=n(S,"LI",{});var iP=s(Js);ife=n(iP,"STRONG",{});var Nbt=s(ife);tbo=r(Nbt,"rembert"),Nbt.forEach(t),abo=r(iP," \u2014 "),cj=n(iP,"A",{href:!0});var qbt=s(cj);nbo=r(qbt,"RemBertTokenizer"),qbt.forEach(t),sbo=r(iP," or "),fj=n(iP,"A",{href:!0});var jbt=s(fj);lbo=r(jbt,"RemBertTokenizerFast"),jbt.forEach(t),ibo=r(iP," (RemBERT model)"),iP.forEach(t),dbo=i(S),Ys=n(S,"LI",{});var dP=s(Ys);dfe=n(dP,"STRONG",{});var Dbt=s(dfe);cbo=r(Dbt,"retribert"),Dbt.forEach(t),fbo=r(dP," \u2014 "),mj=n(dP,"A",{href:!0});var Gbt=s(mj);mbo=r(Gbt,"RetriBertTokenizer"),Gbt.forEach(t),gbo=r(dP," or "),gj=n(dP,"A",{href:!0});var Obt=s(gj);hbo=r(Obt,"RetriBertTokenizerFast"),Obt.forEach(t),pbo=r(dP," (RetriBERT model)"),dP.forEach(t),_bo=i(S),Ks=n(S,"LI",{});var cP=s(Ks);cfe=n(cP,"STRONG",{});var Vbt=s(cfe);ubo=r(Vbt,"roberta"),Vbt.forEach(t),bbo=r(cP," \u2014 "),hj=n(cP,"A",{href:!0});var Xbt=s(hj);vbo=r(Xbt,"RobertaTokenizer"),Xbt.forEach(t),Fbo=r(cP," or "),pj=n(cP,"A",{href:!0});var zbt=s(pj);Tbo=r(zbt,"RobertaTokenizerFast"),zbt.forEach(t),Mbo=r(cP," (RoBERTa model)"),cP.forEach(t),Ebo=i(S),Zs=n(S,"LI",{});var fP=s(Zs);ffe=n(fP,"STRONG",{});var Wbt=s(ffe);Cbo=r(Wbt,"roformer"),Wbt.forEach(t),wbo=r(fP," \u2014 "),_j=n(fP,"A",{href:!0});var Qbt=s(_j);Abo=r(Qbt,"RoFormerTokenizer"),Qbt.forEach(t),Lbo=r(fP," or "),uj=n(fP,"A",{href:!0});var Ubt=s(uj);ybo=r(Ubt,"RoFormerTokenizerFast"),Ubt.forEach(t),xbo=r(fP," (RoFormer model)"),fP.forEach(t),$bo=i(S),rp=n(S,"LI",{});var Oke=s(rp);mfe=n(Oke,"STRONG",{});var Hbt=s(mfe);kbo=r(Hbt,"speech_to_text"),Hbt.forEach(t),Sbo=r(Oke," \u2014 "),bj=n(Oke,"A",{href:!0});var Jbt=s(bj);Rbo=r(Jbt,"Speech2TextTokenizer"),Jbt.forEach(t),Pbo=r(Oke," (Speech2Text model)"),Oke.forEach(t),Bbo=i(S),tp=n(S,"LI",{});var Vke=s(tp);gfe=n(Vke,"STRONG",{});var Ybt=s(gfe);Ibo=r(Ybt,"speech_to_text_2"),Ybt.forEach(t),Nbo=r(Vke," \u2014 "),vj=n(Vke,"A",{href:!0});var Kbt=s(vj);qbo=r(Kbt,"Speech2Text2Tokenizer"),Kbt.forEach(t),jbo=r(Vke," (Speech2Text2 model)"),Vke.forEach(t),Dbo=i(S),el=n(S,"LI",{});var mP=s(el);hfe=n(mP,"STRONG",{});var Zbt=s(hfe);Gbo=r(Zbt,"splinter"),Zbt.forEach(t),Obo=r(mP," \u2014 "),Fj=n(mP,"A",{href:!0});var e2t=s(Fj);Vbo=r(e2t,"SplinterTokenizer"),e2t.forEach(t),Xbo=r(mP," or "),Tj=n(mP,"A",{href:!0});var o2t=s(Tj);zbo=r(o2t,"SplinterTokenizerFast"),o2t.forEach(t),Wbo=r(mP," (Splinter model)"),mP.forEach(t),Qbo=i(S),ol=n(S,"LI",{});var gP=s(ol);pfe=n(gP,"STRONG",{});var r2t=s(pfe);Ubo=r(r2t,"squeezebert"),r2t.forEach(t),Hbo=r(gP," \u2014 "),Mj=n(gP,"A",{href:!0});var t2t=s(Mj);Jbo=r(t2t,"SqueezeBertTokenizer"),t2t.forEach(t),Ybo=r(gP," or "),Ej=n(gP,"A",{href:!0});var a2t=s(Ej);Kbo=r(a2t,"SqueezeBertTokenizerFast"),a2t.forEach(t),Zbo=r(gP," (SqueezeBERT model)"),gP.forEach(t),e2o=i(S),rl=n(S,"LI",{});var hP=s(rl);_fe=n(hP,"STRONG",{});var n2t=s(_fe);o2o=r(n2t,"t5"),n2t.forEach(t),r2o=r(hP," \u2014 "),Cj=n(hP,"A",{href:!0});var s2t=s(Cj);t2o=r(s2t,"T5Tokenizer"),s2t.forEach(t),a2o=r(hP," or "),wj=n(hP,"A",{href:!0});var l2t=s(wj);n2o=r(l2t,"T5TokenizerFast"),l2t.forEach(t),s2o=r(hP," (T5 model)"),hP.forEach(t),l2o=i(S),ap=n(S,"LI",{});var Xke=s(ap);ufe=n(Xke,"STRONG",{});var i2t=s(ufe);i2o=r(i2t,"tapas"),i2t.forEach(t),d2o=r(Xke," \u2014 "),Aj=n(Xke,"A",{href:!0});var d2t=s(Aj);c2o=r(d2t,"TapasTokenizer"),d2t.forEach(t),f2o=r(Xke," (TAPAS model)"),Xke.forEach(t),m2o=i(S),np=n(S,"LI",{});var zke=s(np);bfe=n(zke,"STRONG",{});var c2t=s(bfe);g2o=r(c2t,"tapex"),c2t.forEach(t),h2o=r(zke," \u2014 "),Lj=n(zke,"A",{href:!0});var f2t=s(Lj);p2o=r(f2t,"TapexTokenizer"),f2t.forEach(t),_2o=r(zke," (TAPEX model)"),zke.forEach(t),u2o=i(S),sp=n(S,"LI",{});var Wke=s(sp);vfe=n(Wke,"STRONG",{});var m2t=s(vfe);b2o=r(m2t,"transfo-xl"),m2t.forEach(t),v2o=r(Wke," \u2014 "),yj=n(Wke,"A",{href:!0});var g2t=s(yj);F2o=r(g2t,"TransfoXLTokenizer"),g2t.forEach(t),T2o=r(Wke," (Transformer-XL model)"),Wke.forEach(t),M2o=i(S),tl=n(S,"LI",{});var pP=s(tl);Ffe=n(pP,"STRONG",{});var h2t=s(Ffe);E2o=r(h2t,"vilt"),h2t.forEach(t),C2o=r(pP," \u2014 "),xj=n(pP,"A",{href:!0});var p2t=s(xj);w2o=r(p2t,"BertTokenizer"),p2t.forEach(t),A2o=r(pP," or "),$j=n(pP,"A",{href:!0});var _2t=s($j);L2o=r(_2t,"BertTokenizerFast"),_2t.forEach(t),y2o=r(pP," (ViLT model)"),pP.forEach(t),x2o=i(S),al=n(S,"LI",{});var _P=s(al);Tfe=n(_P,"STRONG",{});var u2t=s(Tfe);$2o=r(u2t,"visual_bert"),u2t.forEach(t),k2o=r(_P," \u2014 "),kj=n(_P,"A",{href:!0});var b2t=s(kj);S2o=r(b2t,"BertTokenizer"),b2t.forEach(t),R2o=r(_P," or "),Sj=n(_P,"A",{href:!0});var v2t=s(Sj);P2o=r(v2t,"BertTokenizerFast"),v2t.forEach(t),B2o=r(_P," (VisualBERT model)"),_P.forEach(t),I2o=i(S),lp=n(S,"LI",{});var Qke=s(lp);Mfe=n(Qke,"STRONG",{});var F2t=s(Mfe);N2o=r(F2t,"wav2vec2"),F2t.forEach(t),q2o=r(Qke," \u2014 "),Rj=n(Qke,"A",{href:!0});var T2t=s(Rj);j2o=r(T2t,"Wav2Vec2CTCTokenizer"),T2t.forEach(t),D2o=r(Qke," (Wav2Vec2 model)"),Qke.forEach(t),G2o=i(S),ip=n(S,"LI",{});var Uke=s(ip);Efe=n(Uke,"STRONG",{});var M2t=s(Efe);O2o=r(M2t,"wav2vec2-conformer"),M2t.forEach(t),V2o=r(Uke," \u2014 "),Pj=n(Uke,"A",{href:!0});var E2t=s(Pj);X2o=r(E2t,"Wav2Vec2CTCTokenizer"),E2t.forEach(t),z2o=r(Uke," (Wav2Vec2-Conformer model)"),Uke.forEach(t),W2o=i(S),dp=n(S,"LI",{});var Hke=s(dp);Cfe=n(Hke,"STRONG",{});var C2t=s(Cfe);Q2o=r(C2t,"wav2vec2_phoneme"),C2t.forEach(t),U2o=r(Hke," \u2014 "),Bj=n(Hke,"A",{href:!0});var w2t=s(Bj);H2o=r(w2t,"Wav2Vec2PhonemeCTCTokenizer"),w2t.forEach(t),J2o=r(Hke," (Wav2Vec2Phoneme model)"),Hke.forEach(t),Y2o=i(S),nl=n(S,"LI",{});var uP=s(nl);wfe=n(uP,"STRONG",{});var A2t=s(wfe);K2o=r(A2t,"xglm"),A2t.forEach(t),Z2o=r(uP," \u2014 "),Ij=n(uP,"A",{href:!0});var L2t=s(Ij);evo=r(L2t,"XGLMTokenizer"),L2t.forEach(t),ovo=r(uP," or "),Nj=n(uP,"A",{href:!0});var y2t=s(Nj);rvo=r(y2t,"XGLMTokenizerFast"),y2t.forEach(t),tvo=r(uP," (XGLM model)"),uP.forEach(t),avo=i(S),cp=n(S,"LI",{});var Jke=s(cp);Afe=n(Jke,"STRONG",{});var x2t=s(Afe);nvo=r(x2t,"xlm"),x2t.forEach(t),svo=r(Jke," \u2014 "),qj=n(Jke,"A",{href:!0});var $2t=s(qj);lvo=r($2t,"XLMTokenizer"),$2t.forEach(t),ivo=r(Jke," (XLM model)"),Jke.forEach(t),dvo=i(S),fp=n(S,"LI",{});var Yke=s(fp);Lfe=n(Yke,"STRONG",{});var k2t=s(Lfe);cvo=r(k2t,"xlm-prophetnet"),k2t.forEach(t),fvo=r(Yke," \u2014 "),jj=n(Yke,"A",{href:!0});var S2t=s(jj);mvo=r(S2t,"XLMProphetNetTokenizer"),S2t.forEach(t),gvo=r(Yke," (XLM-ProphetNet model)"),Yke.forEach(t),hvo=i(S),sl=n(S,"LI",{});var bP=s(sl);yfe=n(bP,"STRONG",{});var R2t=s(yfe);pvo=r(R2t,"xlm-roberta"),R2t.forEach(t),_vo=r(bP," \u2014 "),Dj=n(bP,"A",{href:!0});var P2t=s(Dj);uvo=r(P2t,"XLMRobertaTokenizer"),P2t.forEach(t),bvo=r(bP," or "),Gj=n(bP,"A",{href:!0});var B2t=s(Gj);vvo=r(B2t,"XLMRobertaTokenizerFast"),B2t.forEach(t),Fvo=r(bP," (XLM-RoBERTa model)"),bP.forEach(t),Tvo=i(S),ll=n(S,"LI",{});var vP=s(ll);xfe=n(vP,"STRONG",{});var I2t=s(xfe);Mvo=r(I2t,"xlm-roberta-xl"),I2t.forEach(t),Evo=r(vP," \u2014 "),Oj=n(vP,"A",{href:!0});var N2t=s(Oj);Cvo=r(N2t,"RobertaTokenizer"),N2t.forEach(t),wvo=r(vP," or "),Vj=n(vP,"A",{href:!0});var q2t=s(Vj);Avo=r(q2t,"RobertaTokenizerFast"),q2t.forEach(t),Lvo=r(vP," (XLM-RoBERTa-XL model)"),vP.forEach(t),yvo=i(S),il=n(S,"LI",{});var FP=s(il);$fe=n(FP,"STRONG",{});var j2t=s($fe);xvo=r(j2t,"xlnet"),j2t.forEach(t),$vo=r(FP," \u2014 "),Xj=n(FP,"A",{href:!0});var D2t=s(Xj);kvo=r(D2t,"XLNetTokenizer"),D2t.forEach(t),Svo=r(FP," or "),zj=n(FP,"A",{href:!0});var G2t=s(zj);Rvo=r(G2t,"XLNetTokenizerFast"),G2t.forEach(t),Pvo=r(FP," (XLNet model)"),FP.forEach(t),Bvo=i(S),dl=n(S,"LI",{});var TP=s(dl);kfe=n(TP,"STRONG",{});var O2t=s(kfe);Ivo=r(O2t,"yoso"),O2t.forEach(t),Nvo=r(TP," \u2014 "),Wj=n(TP,"A",{href:!0});var V2t=s(Wj);qvo=r(V2t,"AlbertTokenizer"),V2t.forEach(t),jvo=r(TP," or "),Qj=n(TP,"A",{href:!0});var X2t=s(Qj);Dvo=r(X2t,"AlbertTokenizerFast"),X2t.forEach(t),Gvo=r(TP," (YOSO model)"),TP.forEach(t),S.forEach(t),Ovo=i(_l),T(mp.$$.fragment,_l),_l.forEach(t),Vvo=i(pl),gp=n(pl,"DIV",{class:!0});var HJe=s(gp);T(Xy.$$.fragment,HJe),Xvo=i(HJe),Sfe=n(HJe,"P",{});var z2t=s(Sfe);zvo=r(z2t,"Register a new tokenizer in this mapping."),z2t.forEach(t),HJe.forEach(t),pl.forEach(t),OUe=i(f),nd=n(f,"H2",{class:!0});var JJe=s(nd);hp=n(JJe,"A",{id:!0,class:!0,href:!0});var W2t=s(hp);Rfe=n(W2t,"SPAN",{});var Q2t=s(Rfe);T(zy.$$.fragment,Q2t),Q2t.forEach(t),W2t.forEach(t),Wvo=i(JJe),Pfe=n(JJe,"SPAN",{});var U2t=s(Pfe);Qvo=r(U2t,"AutoFeatureExtractor"),U2t.forEach(t),JJe.forEach(t),VUe=i(f),ko=n(f,"DIV",{class:!0});var ul=s(ko);T(Wy.$$.fragment,ul),Uvo=i(ul),Qy=n(ul,"P",{});var YJe=s(Qy);Hvo=r(YJe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Uj=n(YJe,"A",{href:!0});var H2t=s(Uj);Jvo=r(H2t,"AutoFeatureExtractor.from_pretrained()"),H2t.forEach(t),Yvo=r(YJe," class method."),YJe.forEach(t),Kvo=i(ul),Uy=n(ul,"P",{});var KJe=s(Uy);Zvo=r(KJe,"This class cannot be instantiated directly using "),Bfe=n(KJe,"CODE",{});var J2t=s(Bfe);e6o=r(J2t,"__init__()"),J2t.forEach(t),o6o=r(KJe," (throws an error)."),KJe.forEach(t),r6o=i(ul),He=n(ul,"DIV",{class:!0});var ha=s(He);T(Hy.$$.fragment,ha),t6o=i(ha),Ife=n(ha,"P",{});var Y2t=s(Ife);a6o=r(Y2t,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Y2t.forEach(t),n6o=i(ha),Wa=n(ha,"P",{});var L7=s(Wa);s6o=r(L7,"The feature extractor class to instantiate is selected based on the "),Nfe=n(L7,"CODE",{});var K2t=s(Nfe);l6o=r(K2t,"model_type"),K2t.forEach(t),i6o=r(L7,` property of the config object
(either passed as an argument or loaded from `),qfe=n(L7,"CODE",{});var Z2t=s(qfe);d6o=r(Z2t,"pretrained_model_name_or_path"),Z2t.forEach(t),c6o=r(L7,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),jfe=n(L7,"CODE",{});var evt=s(jfe);f6o=r(evt,"pretrained_model_name_or_path"),evt.forEach(t),m6o=r(L7,":"),L7.forEach(t),g6o=i(ha),Q=n(ha,"UL",{});var J=s(Q);pp=n(J,"LI",{});var Kke=s(pp);Dfe=n(Kke,"STRONG",{});var ovt=s(Dfe);h6o=r(ovt,"beit"),ovt.forEach(t),p6o=r(Kke," \u2014 "),Hj=n(Kke,"A",{href:!0});var rvt=s(Hj);_6o=r(rvt,"BeitFeatureExtractor"),rvt.forEach(t),u6o=r(Kke," (BEiT model)"),Kke.forEach(t),b6o=i(J),_p=n(J,"LI",{});var Zke=s(_p);Gfe=n(Zke,"STRONG",{});var tvt=s(Gfe);v6o=r(tvt,"clip"),tvt.forEach(t),F6o=r(Zke," \u2014 "),Jj=n(Zke,"A",{href:!0});var avt=s(Jj);T6o=r(avt,"CLIPFeatureExtractor"),avt.forEach(t),M6o=r(Zke," (CLIP model)"),Zke.forEach(t),E6o=i(J),up=n(J,"LI",{});var eSe=s(up);Ofe=n(eSe,"STRONG",{});var nvt=s(Ofe);C6o=r(nvt,"convnext"),nvt.forEach(t),w6o=r(eSe," \u2014 "),Yj=n(eSe,"A",{href:!0});var svt=s(Yj);A6o=r(svt,"ConvNextFeatureExtractor"),svt.forEach(t),L6o=r(eSe," (ConvNeXT model)"),eSe.forEach(t),y6o=i(J),bp=n(J,"LI",{});var oSe=s(bp);Vfe=n(oSe,"STRONG",{});var lvt=s(Vfe);x6o=r(lvt,"cvt"),lvt.forEach(t),$6o=r(oSe," \u2014 "),Kj=n(oSe,"A",{href:!0});var ivt=s(Kj);k6o=r(ivt,"ConvNextFeatureExtractor"),ivt.forEach(t),S6o=r(oSe," (CvT model)"),oSe.forEach(t),R6o=i(J),vp=n(J,"LI",{});var rSe=s(vp);Xfe=n(rSe,"STRONG",{});var dvt=s(Xfe);P6o=r(dvt,"data2vec-audio"),dvt.forEach(t),B6o=r(rSe," \u2014 "),Zj=n(rSe,"A",{href:!0});var cvt=s(Zj);I6o=r(cvt,"Wav2Vec2FeatureExtractor"),cvt.forEach(t),N6o=r(rSe," (Data2VecAudio model)"),rSe.forEach(t),q6o=i(J),Fp=n(J,"LI",{});var tSe=s(Fp);zfe=n(tSe,"STRONG",{});var fvt=s(zfe);j6o=r(fvt,"data2vec-vision"),fvt.forEach(t),D6o=r(tSe," \u2014 "),eD=n(tSe,"A",{href:!0});var mvt=s(eD);G6o=r(mvt,"BeitFeatureExtractor"),mvt.forEach(t),O6o=r(tSe," (Data2VecVision model)"),tSe.forEach(t),V6o=i(J),Tp=n(J,"LI",{});var aSe=s(Tp);Wfe=n(aSe,"STRONG",{});var gvt=s(Wfe);X6o=r(gvt,"deit"),gvt.forEach(t),z6o=r(aSe," \u2014 "),oD=n(aSe,"A",{href:!0});var hvt=s(oD);W6o=r(hvt,"DeiTFeatureExtractor"),hvt.forEach(t),Q6o=r(aSe," (DeiT model)"),aSe.forEach(t),U6o=i(J),Mp=n(J,"LI",{});var nSe=s(Mp);Qfe=n(nSe,"STRONG",{});var pvt=s(Qfe);H6o=r(pvt,"detr"),pvt.forEach(t),J6o=r(nSe," \u2014 "),rD=n(nSe,"A",{href:!0});var _vt=s(rD);Y6o=r(_vt,"DetrFeatureExtractor"),_vt.forEach(t),K6o=r(nSe," (DETR model)"),nSe.forEach(t),Z6o=i(J),Ep=n(J,"LI",{});var sSe=s(Ep);Ufe=n(sSe,"STRONG",{});var uvt=s(Ufe);eFo=r(uvt,"donut"),uvt.forEach(t),oFo=r(sSe," \u2014 "),tD=n(sSe,"A",{href:!0});var bvt=s(tD);rFo=r(bvt,"DonutFeatureExtractor"),bvt.forEach(t),tFo=r(sSe," (Donut model)"),sSe.forEach(t),aFo=i(J),Cp=n(J,"LI",{});var lSe=s(Cp);Hfe=n(lSe,"STRONG",{});var vvt=s(Hfe);nFo=r(vvt,"dpt"),vvt.forEach(t),sFo=r(lSe," \u2014 "),aD=n(lSe,"A",{href:!0});var Fvt=s(aD);lFo=r(Fvt,"DPTFeatureExtractor"),Fvt.forEach(t),iFo=r(lSe," (DPT model)"),lSe.forEach(t),dFo=i(J),wp=n(J,"LI",{});var iSe=s(wp);Jfe=n(iSe,"STRONG",{});var Tvt=s(Jfe);cFo=r(Tvt,"flava"),Tvt.forEach(t),fFo=r(iSe," \u2014 "),nD=n(iSe,"A",{href:!0});var Mvt=s(nD);mFo=r(Mvt,"FlavaFeatureExtractor"),Mvt.forEach(t),gFo=r(iSe," (FLAVA model)"),iSe.forEach(t),hFo=i(J),Ap=n(J,"LI",{});var dSe=s(Ap);Yfe=n(dSe,"STRONG",{});var Evt=s(Yfe);pFo=r(Evt,"glpn"),Evt.forEach(t),_Fo=r(dSe," \u2014 "),sD=n(dSe,"A",{href:!0});var Cvt=s(sD);uFo=r(Cvt,"GLPNFeatureExtractor"),Cvt.forEach(t),bFo=r(dSe," (GLPN model)"),dSe.forEach(t),vFo=i(J),Lp=n(J,"LI",{});var cSe=s(Lp);Kfe=n(cSe,"STRONG",{});var wvt=s(Kfe);FFo=r(wvt,"groupvit"),wvt.forEach(t),TFo=r(cSe," \u2014 "),lD=n(cSe,"A",{href:!0});var Avt=s(lD);MFo=r(Avt,"CLIPFeatureExtractor"),Avt.forEach(t),EFo=r(cSe," (GroupViT model)"),cSe.forEach(t),CFo=i(J),yp=n(J,"LI",{});var fSe=s(yp);Zfe=n(fSe,"STRONG",{});var Lvt=s(Zfe);wFo=r(Lvt,"hubert"),Lvt.forEach(t),AFo=r(fSe," \u2014 "),iD=n(fSe,"A",{href:!0});var yvt=s(iD);LFo=r(yvt,"Wav2Vec2FeatureExtractor"),yvt.forEach(t),yFo=r(fSe," (Hubert model)"),fSe.forEach(t),xFo=i(J),xp=n(J,"LI",{});var mSe=s(xp);eme=n(mSe,"STRONG",{});var xvt=s(eme);$Fo=r(xvt,"imagegpt"),xvt.forEach(t),kFo=r(mSe," \u2014 "),dD=n(mSe,"A",{href:!0});var $vt=s(dD);SFo=r($vt,"ImageGPTFeatureExtractor"),$vt.forEach(t),RFo=r(mSe," (ImageGPT model)"),mSe.forEach(t),PFo=i(J),$p=n(J,"LI",{});var gSe=s($p);ome=n(gSe,"STRONG",{});var kvt=s(ome);BFo=r(kvt,"layoutlmv2"),kvt.forEach(t),IFo=r(gSe," \u2014 "),cD=n(gSe,"A",{href:!0});var Svt=s(cD);NFo=r(Svt,"LayoutLMv2FeatureExtractor"),Svt.forEach(t),qFo=r(gSe," (LayoutLMv2 model)"),gSe.forEach(t),jFo=i(J),kp=n(J,"LI",{});var hSe=s(kp);rme=n(hSe,"STRONG",{});var Rvt=s(rme);DFo=r(Rvt,"layoutlmv3"),Rvt.forEach(t),GFo=r(hSe," \u2014 "),fD=n(hSe,"A",{href:!0});var Pvt=s(fD);OFo=r(Pvt,"LayoutLMv3FeatureExtractor"),Pvt.forEach(t),VFo=r(hSe," (LayoutLMv3 model)"),hSe.forEach(t),XFo=i(J),Sp=n(J,"LI",{});var pSe=s(Sp);tme=n(pSe,"STRONG",{});var Bvt=s(tme);zFo=r(Bvt,"levit"),Bvt.forEach(t),WFo=r(pSe," \u2014 "),mD=n(pSe,"A",{href:!0});var Ivt=s(mD);QFo=r(Ivt,"LevitFeatureExtractor"),Ivt.forEach(t),UFo=r(pSe," (LeViT model)"),pSe.forEach(t),HFo=i(J),Rp=n(J,"LI",{});var _Se=s(Rp);ame=n(_Se,"STRONG",{});var Nvt=s(ame);JFo=r(Nvt,"maskformer"),Nvt.forEach(t),YFo=r(_Se," \u2014 "),gD=n(_Se,"A",{href:!0});var qvt=s(gD);KFo=r(qvt,"MaskFormerFeatureExtractor"),qvt.forEach(t),ZFo=r(_Se," (MaskFormer model)"),_Se.forEach(t),eTo=i(J),Pp=n(J,"LI",{});var uSe=s(Pp);nme=n(uSe,"STRONG",{});var jvt=s(nme);oTo=r(jvt,"mctct"),jvt.forEach(t),rTo=r(uSe," \u2014 "),hD=n(uSe,"A",{href:!0});var Dvt=s(hD);tTo=r(Dvt,"MCTCTFeatureExtractor"),Dvt.forEach(t),aTo=r(uSe," (M-CTC-T model)"),uSe.forEach(t),nTo=i(J),Bp=n(J,"LI",{});var bSe=s(Bp);sme=n(bSe,"STRONG",{});var Gvt=s(sme);sTo=r(Gvt,"mobilevit"),Gvt.forEach(t),lTo=r(bSe," \u2014 "),pD=n(bSe,"A",{href:!0});var Ovt=s(pD);iTo=r(Ovt,"MobileViTFeatureExtractor"),Ovt.forEach(t),dTo=r(bSe," (MobileViT model)"),bSe.forEach(t),cTo=i(J),Ip=n(J,"LI",{});var vSe=s(Ip);lme=n(vSe,"STRONG",{});var Vvt=s(lme);fTo=r(Vvt,"owlvit"),Vvt.forEach(t),mTo=r(vSe," \u2014 "),_D=n(vSe,"A",{href:!0});var Xvt=s(_D);gTo=r(Xvt,"OwlViTFeatureExtractor"),Xvt.forEach(t),hTo=r(vSe," (OWL-ViT model)"),vSe.forEach(t),pTo=i(J),Np=n(J,"LI",{});var FSe=s(Np);ime=n(FSe,"STRONG",{});var zvt=s(ime);_To=r(zvt,"perceiver"),zvt.forEach(t),uTo=r(FSe," \u2014 "),uD=n(FSe,"A",{href:!0});var Wvt=s(uD);bTo=r(Wvt,"PerceiverFeatureExtractor"),Wvt.forEach(t),vTo=r(FSe," (Perceiver model)"),FSe.forEach(t),FTo=i(J),qp=n(J,"LI",{});var TSe=s(qp);dme=n(TSe,"STRONG",{});var Qvt=s(dme);TTo=r(Qvt,"poolformer"),Qvt.forEach(t),MTo=r(TSe," \u2014 "),bD=n(TSe,"A",{href:!0});var Uvt=s(bD);ETo=r(Uvt,"PoolFormerFeatureExtractor"),Uvt.forEach(t),CTo=r(TSe," (PoolFormer model)"),TSe.forEach(t),wTo=i(J),jp=n(J,"LI",{});var MSe=s(jp);cme=n(MSe,"STRONG",{});var Hvt=s(cme);ATo=r(Hvt,"regnet"),Hvt.forEach(t),LTo=r(MSe," \u2014 "),vD=n(MSe,"A",{href:!0});var Jvt=s(vD);yTo=r(Jvt,"ConvNextFeatureExtractor"),Jvt.forEach(t),xTo=r(MSe," (RegNet model)"),MSe.forEach(t),$To=i(J),Dp=n(J,"LI",{});var ESe=s(Dp);fme=n(ESe,"STRONG",{});var Yvt=s(fme);kTo=r(Yvt,"resnet"),Yvt.forEach(t),STo=r(ESe," \u2014 "),FD=n(ESe,"A",{href:!0});var Kvt=s(FD);RTo=r(Kvt,"ConvNextFeatureExtractor"),Kvt.forEach(t),PTo=r(ESe," (ResNet model)"),ESe.forEach(t),BTo=i(J),Gp=n(J,"LI",{});var CSe=s(Gp);mme=n(CSe,"STRONG",{});var Zvt=s(mme);ITo=r(Zvt,"segformer"),Zvt.forEach(t),NTo=r(CSe," \u2014 "),TD=n(CSe,"A",{href:!0});var e6t=s(TD);qTo=r(e6t,"SegformerFeatureExtractor"),e6t.forEach(t),jTo=r(CSe," (SegFormer model)"),CSe.forEach(t),DTo=i(J),Op=n(J,"LI",{});var wSe=s(Op);gme=n(wSe,"STRONG",{});var o6t=s(gme);GTo=r(o6t,"speech_to_text"),o6t.forEach(t),OTo=r(wSe," \u2014 "),MD=n(wSe,"A",{href:!0});var r6t=s(MD);VTo=r(r6t,"Speech2TextFeatureExtractor"),r6t.forEach(t),XTo=r(wSe," (Speech2Text model)"),wSe.forEach(t),zTo=i(J),Vp=n(J,"LI",{});var ASe=s(Vp);hme=n(ASe,"STRONG",{});var t6t=s(hme);WTo=r(t6t,"swin"),t6t.forEach(t),QTo=r(ASe," \u2014 "),ED=n(ASe,"A",{href:!0});var a6t=s(ED);UTo=r(a6t,"ViTFeatureExtractor"),a6t.forEach(t),HTo=r(ASe," (Swin Transformer model)"),ASe.forEach(t),JTo=i(J),Xp=n(J,"LI",{});var LSe=s(Xp);pme=n(LSe,"STRONG",{});var n6t=s(pme);YTo=r(n6t,"swinv2"),n6t.forEach(t),KTo=r(LSe," \u2014 "),CD=n(LSe,"A",{href:!0});var s6t=s(CD);ZTo=r(s6t,"ViTFeatureExtractor"),s6t.forEach(t),eMo=r(LSe," (Swin Transformer V2 model)"),LSe.forEach(t),oMo=i(J),zp=n(J,"LI",{});var ySe=s(zp);_me=n(ySe,"STRONG",{});var l6t=s(_me);rMo=r(l6t,"van"),l6t.forEach(t),tMo=r(ySe," \u2014 "),wD=n(ySe,"A",{href:!0});var i6t=s(wD);aMo=r(i6t,"ConvNextFeatureExtractor"),i6t.forEach(t),nMo=r(ySe," (VAN model)"),ySe.forEach(t),sMo=i(J),Wp=n(J,"LI",{});var xSe=s(Wp);ume=n(xSe,"STRONG",{});var d6t=s(ume);lMo=r(d6t,"videomae"),d6t.forEach(t),iMo=r(xSe," \u2014 "),AD=n(xSe,"A",{href:!0});var c6t=s(AD);dMo=r(c6t,"ViTFeatureExtractor"),c6t.forEach(t),cMo=r(xSe," (VideoMAE model)"),xSe.forEach(t),fMo=i(J),Qp=n(J,"LI",{});var $Se=s(Qp);bme=n($Se,"STRONG",{});var f6t=s(bme);mMo=r(f6t,"vilt"),f6t.forEach(t),gMo=r($Se," \u2014 "),LD=n($Se,"A",{href:!0});var m6t=s(LD);hMo=r(m6t,"ViltFeatureExtractor"),m6t.forEach(t),pMo=r($Se," (ViLT model)"),$Se.forEach(t),_Mo=i(J),Up=n(J,"LI",{});var kSe=s(Up);vme=n(kSe,"STRONG",{});var g6t=s(vme);uMo=r(g6t,"vit"),g6t.forEach(t),bMo=r(kSe," \u2014 "),yD=n(kSe,"A",{href:!0});var h6t=s(yD);vMo=r(h6t,"ViTFeatureExtractor"),h6t.forEach(t),FMo=r(kSe," (ViT model)"),kSe.forEach(t),TMo=i(J),Hp=n(J,"LI",{});var SSe=s(Hp);Fme=n(SSe,"STRONG",{});var p6t=s(Fme);MMo=r(p6t,"vit_mae"),p6t.forEach(t),EMo=r(SSe," \u2014 "),xD=n(SSe,"A",{href:!0});var _6t=s(xD);CMo=r(_6t,"ViTFeatureExtractor"),_6t.forEach(t),wMo=r(SSe," (ViTMAE model)"),SSe.forEach(t),AMo=i(J),Jp=n(J,"LI",{});var RSe=s(Jp);Tme=n(RSe,"STRONG",{});var u6t=s(Tme);LMo=r(u6t,"wav2vec2"),u6t.forEach(t),yMo=r(RSe," \u2014 "),$D=n(RSe,"A",{href:!0});var b6t=s($D);xMo=r(b6t,"Wav2Vec2FeatureExtractor"),b6t.forEach(t),$Mo=r(RSe," (Wav2Vec2 model)"),RSe.forEach(t),kMo=i(J),Yp=n(J,"LI",{});var PSe=s(Yp);Mme=n(PSe,"STRONG",{});var v6t=s(Mme);SMo=r(v6t,"wav2vec2-conformer"),v6t.forEach(t),RMo=r(PSe," \u2014 "),kD=n(PSe,"A",{href:!0});var F6t=s(kD);PMo=r(F6t,"Wav2Vec2FeatureExtractor"),F6t.forEach(t),BMo=r(PSe," (Wav2Vec2-Conformer model)"),PSe.forEach(t),IMo=i(J),Kp=n(J,"LI",{});var BSe=s(Kp);Eme=n(BSe,"STRONG",{});var T6t=s(Eme);NMo=r(T6t,"yolos"),T6t.forEach(t),qMo=r(BSe," \u2014 "),SD=n(BSe,"A",{href:!0});var M6t=s(SD);jMo=r(M6t,"YolosFeatureExtractor"),M6t.forEach(t),DMo=r(BSe," (YOLOS model)"),BSe.forEach(t),J.forEach(t),GMo=i(ha),T(Zp.$$.fragment,ha),OMo=i(ha),T(e_.$$.fragment,ha),ha.forEach(t),VMo=i(ul),o_=n(ul,"DIV",{class:!0});var ZJe=s(o_);T(Jy.$$.fragment,ZJe),XMo=i(ZJe),Cme=n(ZJe,"P",{});var E6t=s(Cme);zMo=r(E6t,"Register a new feature extractor for this class."),E6t.forEach(t),ZJe.forEach(t),ul.forEach(t),XUe=i(f),sd=n(f,"H2",{class:!0});var eYe=s(sd);r_=n(eYe,"A",{id:!0,class:!0,href:!0});var C6t=s(r_);wme=n(C6t,"SPAN",{});var w6t=s(wme);T(Yy.$$.fragment,w6t),w6t.forEach(t),C6t.forEach(t),WMo=i(eYe),Ame=n(eYe,"SPAN",{});var A6t=s(Ame);QMo=r(A6t,"AutoProcessor"),A6t.forEach(t),eYe.forEach(t),zUe=i(f),So=n(f,"DIV",{class:!0});var bl=s(So);T(Ky.$$.fragment,bl),UMo=i(bl),Zy=n(bl,"P",{});var oYe=s(Zy);HMo=r(oYe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),RD=n(oYe,"A",{href:!0});var L6t=s(RD);JMo=r(L6t,"AutoProcessor.from_pretrained()"),L6t.forEach(t),YMo=r(oYe," class method."),oYe.forEach(t),KMo=i(bl),e9=n(bl,"P",{});var rYe=s(e9);ZMo=r(rYe,"This class cannot be instantiated directly using "),Lme=n(rYe,"CODE",{});var y6t=s(Lme);eEo=r(y6t,"__init__()"),y6t.forEach(t),oEo=r(rYe," (throws an error)."),rYe.forEach(t),rEo=i(bl),Je=n(bl,"DIV",{class:!0});var pa=s(Je);T(o9.$$.fragment,pa),tEo=i(pa),yme=n(pa,"P",{});var x6t=s(yme);aEo=r(x6t,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),x6t.forEach(t),nEo=i(pa),ld=n(pa,"P",{});var mne=s(ld);sEo=r(mne,"The processor class to instantiate is selected based on the "),xme=n(mne,"CODE",{});var $6t=s(xme);lEo=r($6t,"model_type"),$6t.forEach(t),iEo=r(mne,` property of the config object (either
passed as an argument or loaded from `),$me=n(mne,"CODE",{});var k6t=s($me);dEo=r(k6t,"pretrained_model_name_or_path"),k6t.forEach(t),cEo=r(mne," if possible):"),mne.forEach(t),fEo=i(pa),ie=n(pa,"UL",{});var ge=s(ie);t_=n(ge,"LI",{});var ISe=s(t_);kme=n(ISe,"STRONG",{});var S6t=s(kme);mEo=r(S6t,"clip"),S6t.forEach(t),gEo=r(ISe," \u2014 "),PD=n(ISe,"A",{href:!0});var R6t=s(PD);hEo=r(R6t,"CLIPProcessor"),R6t.forEach(t),pEo=r(ISe," (CLIP model)"),ISe.forEach(t),_Eo=i(ge),a_=n(ge,"LI",{});var NSe=s(a_);Sme=n(NSe,"STRONG",{});var P6t=s(Sme);uEo=r(P6t,"donut"),P6t.forEach(t),bEo=r(NSe," \u2014 "),BD=n(NSe,"A",{href:!0});var B6t=s(BD);vEo=r(B6t,"DonutProcessor"),B6t.forEach(t),FEo=r(NSe," (Donut model)"),NSe.forEach(t),TEo=i(ge),n_=n(ge,"LI",{});var qSe=s(n_);Rme=n(qSe,"STRONG",{});var I6t=s(Rme);MEo=r(I6t,"flava"),I6t.forEach(t),EEo=r(qSe," \u2014 "),ID=n(qSe,"A",{href:!0});var N6t=s(ID);CEo=r(N6t,"FlavaProcessor"),N6t.forEach(t),wEo=r(qSe," (FLAVA model)"),qSe.forEach(t),AEo=i(ge),s_=n(ge,"LI",{});var jSe=s(s_);Pme=n(jSe,"STRONG",{});var q6t=s(Pme);LEo=r(q6t,"groupvit"),q6t.forEach(t),yEo=r(jSe," \u2014 "),ND=n(jSe,"A",{href:!0});var j6t=s(ND);xEo=r(j6t,"CLIPProcessor"),j6t.forEach(t),$Eo=r(jSe," (GroupViT model)"),jSe.forEach(t),kEo=i(ge),l_=n(ge,"LI",{});var DSe=s(l_);Bme=n(DSe,"STRONG",{});var D6t=s(Bme);SEo=r(D6t,"layoutlmv2"),D6t.forEach(t),REo=r(DSe," \u2014 "),qD=n(DSe,"A",{href:!0});var G6t=s(qD);PEo=r(G6t,"LayoutLMv2Processor"),G6t.forEach(t),BEo=r(DSe," (LayoutLMv2 model)"),DSe.forEach(t),IEo=i(ge),i_=n(ge,"LI",{});var GSe=s(i_);Ime=n(GSe,"STRONG",{});var O6t=s(Ime);NEo=r(O6t,"layoutlmv3"),O6t.forEach(t),qEo=r(GSe," \u2014 "),jD=n(GSe,"A",{href:!0});var V6t=s(jD);jEo=r(V6t,"LayoutLMv3Processor"),V6t.forEach(t),DEo=r(GSe," (LayoutLMv3 model)"),GSe.forEach(t),GEo=i(ge),d_=n(ge,"LI",{});var OSe=s(d_);Nme=n(OSe,"STRONG",{});var X6t=s(Nme);OEo=r(X6t,"layoutxlm"),X6t.forEach(t),VEo=r(OSe," \u2014 "),DD=n(OSe,"A",{href:!0});var z6t=s(DD);XEo=r(z6t,"LayoutXLMProcessor"),z6t.forEach(t),zEo=r(OSe," (LayoutXLM model)"),OSe.forEach(t),WEo=i(ge),c_=n(ge,"LI",{});var VSe=s(c_);qme=n(VSe,"STRONG",{});var W6t=s(qme);QEo=r(W6t,"owlvit"),W6t.forEach(t),UEo=r(VSe," \u2014 "),GD=n(VSe,"A",{href:!0});var Q6t=s(GD);HEo=r(Q6t,"OwlViTProcessor"),Q6t.forEach(t),JEo=r(VSe," (OWL-ViT model)"),VSe.forEach(t),YEo=i(ge),f_=n(ge,"LI",{});var XSe=s(f_);jme=n(XSe,"STRONG",{});var U6t=s(jme);KEo=r(U6t,"sew"),U6t.forEach(t),ZEo=r(XSe," \u2014 "),OD=n(XSe,"A",{href:!0});var H6t=s(OD);e4o=r(H6t,"Wav2Vec2Processor"),H6t.forEach(t),o4o=r(XSe," (SEW model)"),XSe.forEach(t),r4o=i(ge),m_=n(ge,"LI",{});var zSe=s(m_);Dme=n(zSe,"STRONG",{});var J6t=s(Dme);t4o=r(J6t,"sew-d"),J6t.forEach(t),a4o=r(zSe," \u2014 "),VD=n(zSe,"A",{href:!0});var Y6t=s(VD);n4o=r(Y6t,"Wav2Vec2Processor"),Y6t.forEach(t),s4o=r(zSe," (SEW-D model)"),zSe.forEach(t),l4o=i(ge),g_=n(ge,"LI",{});var WSe=s(g_);Gme=n(WSe,"STRONG",{});var K6t=s(Gme);i4o=r(K6t,"speech_to_text"),K6t.forEach(t),d4o=r(WSe," \u2014 "),XD=n(WSe,"A",{href:!0});var Z6t=s(XD);c4o=r(Z6t,"Speech2TextProcessor"),Z6t.forEach(t),f4o=r(WSe," (Speech2Text model)"),WSe.forEach(t),m4o=i(ge),h_=n(ge,"LI",{});var QSe=s(h_);Ome=n(QSe,"STRONG",{});var eFt=s(Ome);g4o=r(eFt,"speech_to_text_2"),eFt.forEach(t),h4o=r(QSe," \u2014 "),zD=n(QSe,"A",{href:!0});var oFt=s(zD);p4o=r(oFt,"Speech2Text2Processor"),oFt.forEach(t),_4o=r(QSe," (Speech2Text2 model)"),QSe.forEach(t),u4o=i(ge),p_=n(ge,"LI",{});var USe=s(p_);Vme=n(USe,"STRONG",{});var rFt=s(Vme);b4o=r(rFt,"trocr"),rFt.forEach(t),v4o=r(USe," \u2014 "),WD=n(USe,"A",{href:!0});var tFt=s(WD);F4o=r(tFt,"TrOCRProcessor"),tFt.forEach(t),T4o=r(USe," (TrOCR model)"),USe.forEach(t),M4o=i(ge),__=n(ge,"LI",{});var HSe=s(__);Xme=n(HSe,"STRONG",{});var aFt=s(Xme);E4o=r(aFt,"unispeech"),aFt.forEach(t),C4o=r(HSe," \u2014 "),QD=n(HSe,"A",{href:!0});var nFt=s(QD);w4o=r(nFt,"Wav2Vec2Processor"),nFt.forEach(t),A4o=r(HSe," (UniSpeech model)"),HSe.forEach(t),L4o=i(ge),u_=n(ge,"LI",{});var JSe=s(u_);zme=n(JSe,"STRONG",{});var sFt=s(zme);y4o=r(sFt,"unispeech-sat"),sFt.forEach(t),x4o=r(JSe," \u2014 "),UD=n(JSe,"A",{href:!0});var lFt=s(UD);$4o=r(lFt,"Wav2Vec2Processor"),lFt.forEach(t),k4o=r(JSe," (UniSpeechSat model)"),JSe.forEach(t),S4o=i(ge),b_=n(ge,"LI",{});var YSe=s(b_);Wme=n(YSe,"STRONG",{});var iFt=s(Wme);R4o=r(iFt,"vilt"),iFt.forEach(t),P4o=r(YSe," \u2014 "),HD=n(YSe,"A",{href:!0});var dFt=s(HD);B4o=r(dFt,"ViltProcessor"),dFt.forEach(t),I4o=r(YSe," (ViLT model)"),YSe.forEach(t),N4o=i(ge),v_=n(ge,"LI",{});var KSe=s(v_);Qme=n(KSe,"STRONG",{});var cFt=s(Qme);q4o=r(cFt,"vision-text-dual-encoder"),cFt.forEach(t),j4o=r(KSe," \u2014 "),JD=n(KSe,"A",{href:!0});var fFt=s(JD);D4o=r(fFt,"VisionTextDualEncoderProcessor"),fFt.forEach(t),G4o=r(KSe," (VisionTextDualEncoder model)"),KSe.forEach(t),O4o=i(ge),F_=n(ge,"LI",{});var ZSe=s(F_);Ume=n(ZSe,"STRONG",{});var mFt=s(Ume);V4o=r(mFt,"wav2vec2"),mFt.forEach(t),X4o=r(ZSe," \u2014 "),YD=n(ZSe,"A",{href:!0});var gFt=s(YD);z4o=r(gFt,"Wav2Vec2Processor"),gFt.forEach(t),W4o=r(ZSe," (Wav2Vec2 model)"),ZSe.forEach(t),Q4o=i(ge),T_=n(ge,"LI",{});var eRe=s(T_);Hme=n(eRe,"STRONG",{});var hFt=s(Hme);U4o=r(hFt,"wav2vec2-conformer"),hFt.forEach(t),H4o=r(eRe," \u2014 "),KD=n(eRe,"A",{href:!0});var pFt=s(KD);J4o=r(pFt,"Wav2Vec2Processor"),pFt.forEach(t),Y4o=r(eRe," (Wav2Vec2-Conformer model)"),eRe.forEach(t),K4o=i(ge),M_=n(ge,"LI",{});var oRe=s(M_);Jme=n(oRe,"STRONG",{});var _Ft=s(Jme);Z4o=r(_Ft,"wavlm"),_Ft.forEach(t),eCo=r(oRe," \u2014 "),ZD=n(oRe,"A",{href:!0});var uFt=s(ZD);oCo=r(uFt,"Wav2Vec2Processor"),uFt.forEach(t),rCo=r(oRe," (WavLM model)"),oRe.forEach(t),ge.forEach(t),tCo=i(pa),T(E_.$$.fragment,pa),aCo=i(pa),T(C_.$$.fragment,pa),pa.forEach(t),nCo=i(bl),w_=n(bl,"DIV",{class:!0});var tYe=s(w_);T(r9.$$.fragment,tYe),sCo=i(tYe),Yme=n(tYe,"P",{});var bFt=s(Yme);lCo=r(bFt,"Register a new processor for this class."),bFt.forEach(t),tYe.forEach(t),bl.forEach(t),WUe=i(f),id=n(f,"H2",{class:!0});var aYe=s(id);A_=n(aYe,"A",{id:!0,class:!0,href:!0});var vFt=s(A_);Kme=n(vFt,"SPAN",{});var FFt=s(Kme);T(t9.$$.fragment,FFt),FFt.forEach(t),vFt.forEach(t),iCo=i(aYe),Zme=n(aYe,"SPAN",{});var TFt=s(Zme);dCo=r(TFt,"AutoModel"),TFt.forEach(t),aYe.forEach(t),QUe=i(f),Ro=n(f,"DIV",{class:!0});var vl=s(Ro);T(a9.$$.fragment,vl),cCo=i(vl),dd=n(vl,"P",{});var gne=s(dd);fCo=r(gne,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eG=n(gne,"A",{href:!0});var MFt=s(eG);mCo=r(MFt,"from_pretrained()"),MFt.forEach(t),gCo=r(gne," class method or the "),oG=n(gne,"A",{href:!0});var EFt=s(oG);hCo=r(EFt,"from_config()"),EFt.forEach(t),pCo=r(gne,` class
method.`),gne.forEach(t),_Co=i(vl),n9=n(vl,"P",{});var nYe=s(n9);uCo=r(nYe,"This class cannot be instantiated directly using "),ege=n(nYe,"CODE",{});var CFt=s(ege);bCo=r(CFt,"__init__()"),CFt.forEach(t),vCo=r(nYe," (throws an error)."),nYe.forEach(t),FCo=i(vl),ht=n(vl,"DIV",{class:!0});var y7=s(ht);T(s9.$$.fragment,y7),TCo=i(y7),oge=n(y7,"P",{});var wFt=s(oge);MCo=r(wFt,"Instantiates one of the base model classes of the library from a configuration."),wFt.forEach(t),ECo=i(y7),cd=n(y7,"P",{});var hne=s(cd);CCo=r(hne,`Note:
Loading a model from its configuration file does `),rge=n(hne,"STRONG",{});var AFt=s(rge);wCo=r(AFt,"not"),AFt.forEach(t),ACo=r(hne,` load the model weights. It only affects the
model\u2019s configuration. Use `),rG=n(hne,"A",{href:!0});var LFt=s(rG);LCo=r(LFt,"from_pretrained()"),LFt.forEach(t),yCo=r(hne," to load the model weights."),hne.forEach(t),xCo=i(y7),T(L_.$$.fragment,y7),y7.forEach(t),$Co=i(vl),Ye=n(vl,"DIV",{class:!0});var _a=s(Ye);T(l9.$$.fragment,_a),kCo=i(_a),tge=n(_a,"P",{});var yFt=s(tge);SCo=r(yFt,"Instantiate one of the base model classes of the library from a pretrained model."),yFt.forEach(t),RCo=i(_a),Qa=n(_a,"P",{});var x7=s(Qa);PCo=r(x7,"The model class to instantiate is selected based on the "),age=n(x7,"CODE",{});var xFt=s(age);BCo=r(xFt,"model_type"),xFt.forEach(t),ICo=r(x7,` property of the config object (either
passed as an argument or loaded from `),nge=n(x7,"CODE",{});var $Ft=s(nge);NCo=r($Ft,"pretrained_model_name_or_path"),$Ft.forEach(t),qCo=r(x7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sge=n(x7,"CODE",{});var kFt=s(sge);jCo=r(kFt,"pretrained_model_name_or_path"),kFt.forEach(t),DCo=r(x7,":"),x7.forEach(t),GCo=i(_a),y=n(_a,"UL",{});var x=s(y);y_=n(x,"LI",{});var rRe=s(y_);lge=n(rRe,"STRONG",{});var SFt=s(lge);OCo=r(SFt,"albert"),SFt.forEach(t),VCo=r(rRe," \u2014 "),tG=n(rRe,"A",{href:!0});var RFt=s(tG);XCo=r(RFt,"AlbertModel"),RFt.forEach(t),zCo=r(rRe," (ALBERT model)"),rRe.forEach(t),WCo=i(x),x_=n(x,"LI",{});var tRe=s(x_);ige=n(tRe,"STRONG",{});var PFt=s(ige);QCo=r(PFt,"bart"),PFt.forEach(t),UCo=r(tRe," \u2014 "),aG=n(tRe,"A",{href:!0});var BFt=s(aG);HCo=r(BFt,"BartModel"),BFt.forEach(t),JCo=r(tRe," (BART model)"),tRe.forEach(t),YCo=i(x),$_=n(x,"LI",{});var aRe=s($_);dge=n(aRe,"STRONG",{});var IFt=s(dge);KCo=r(IFt,"beit"),IFt.forEach(t),ZCo=r(aRe," \u2014 "),nG=n(aRe,"A",{href:!0});var NFt=s(nG);e3o=r(NFt,"BeitModel"),NFt.forEach(t),o3o=r(aRe," (BEiT model)"),aRe.forEach(t),r3o=i(x),k_=n(x,"LI",{});var nRe=s(k_);cge=n(nRe,"STRONG",{});var qFt=s(cge);t3o=r(qFt,"bert"),qFt.forEach(t),a3o=r(nRe," \u2014 "),sG=n(nRe,"A",{href:!0});var jFt=s(sG);n3o=r(jFt,"BertModel"),jFt.forEach(t),s3o=r(nRe," (BERT model)"),nRe.forEach(t),l3o=i(x),S_=n(x,"LI",{});var sRe=s(S_);fge=n(sRe,"STRONG",{});var DFt=s(fge);i3o=r(DFt,"bert-generation"),DFt.forEach(t),d3o=r(sRe," \u2014 "),lG=n(sRe,"A",{href:!0});var GFt=s(lG);c3o=r(GFt,"BertGenerationEncoder"),GFt.forEach(t),f3o=r(sRe," (Bert Generation model)"),sRe.forEach(t),m3o=i(x),R_=n(x,"LI",{});var lRe=s(R_);mge=n(lRe,"STRONG",{});var OFt=s(mge);g3o=r(OFt,"big_bird"),OFt.forEach(t),h3o=r(lRe," \u2014 "),iG=n(lRe,"A",{href:!0});var VFt=s(iG);p3o=r(VFt,"BigBirdModel"),VFt.forEach(t),_3o=r(lRe," (BigBird model)"),lRe.forEach(t),u3o=i(x),P_=n(x,"LI",{});var iRe=s(P_);gge=n(iRe,"STRONG",{});var XFt=s(gge);b3o=r(XFt,"bigbird_pegasus"),XFt.forEach(t),v3o=r(iRe," \u2014 "),dG=n(iRe,"A",{href:!0});var zFt=s(dG);F3o=r(zFt,"BigBirdPegasusModel"),zFt.forEach(t),T3o=r(iRe," (BigBird-Pegasus model)"),iRe.forEach(t),M3o=i(x),B_=n(x,"LI",{});var dRe=s(B_);hge=n(dRe,"STRONG",{});var WFt=s(hge);E3o=r(WFt,"blenderbot"),WFt.forEach(t),C3o=r(dRe," \u2014 "),cG=n(dRe,"A",{href:!0});var QFt=s(cG);w3o=r(QFt,"BlenderbotModel"),QFt.forEach(t),A3o=r(dRe," (Blenderbot model)"),dRe.forEach(t),L3o=i(x),I_=n(x,"LI",{});var cRe=s(I_);pge=n(cRe,"STRONG",{});var UFt=s(pge);y3o=r(UFt,"blenderbot-small"),UFt.forEach(t),x3o=r(cRe," \u2014 "),fG=n(cRe,"A",{href:!0});var HFt=s(fG);$3o=r(HFt,"BlenderbotSmallModel"),HFt.forEach(t),k3o=r(cRe," (BlenderbotSmall model)"),cRe.forEach(t),S3o=i(x),N_=n(x,"LI",{});var fRe=s(N_);_ge=n(fRe,"STRONG",{});var JFt=s(_ge);R3o=r(JFt,"bloom"),JFt.forEach(t),P3o=r(fRe," \u2014 "),mG=n(fRe,"A",{href:!0});var YFt=s(mG);B3o=r(YFt,"BloomModel"),YFt.forEach(t),I3o=r(fRe," (BLOOM model)"),fRe.forEach(t),N3o=i(x),q_=n(x,"LI",{});var mRe=s(q_);uge=n(mRe,"STRONG",{});var KFt=s(uge);q3o=r(KFt,"camembert"),KFt.forEach(t),j3o=r(mRe," \u2014 "),gG=n(mRe,"A",{href:!0});var ZFt=s(gG);D3o=r(ZFt,"CamembertModel"),ZFt.forEach(t),G3o=r(mRe," (CamemBERT model)"),mRe.forEach(t),O3o=i(x),j_=n(x,"LI",{});var gRe=s(j_);bge=n(gRe,"STRONG",{});var eTt=s(bge);V3o=r(eTt,"canine"),eTt.forEach(t),X3o=r(gRe," \u2014 "),hG=n(gRe,"A",{href:!0});var oTt=s(hG);z3o=r(oTt,"CanineModel"),oTt.forEach(t),W3o=r(gRe," (CANINE model)"),gRe.forEach(t),Q3o=i(x),D_=n(x,"LI",{});var hRe=s(D_);vge=n(hRe,"STRONG",{});var rTt=s(vge);U3o=r(rTt,"clip"),rTt.forEach(t),H3o=r(hRe," \u2014 "),pG=n(hRe,"A",{href:!0});var tTt=s(pG);J3o=r(tTt,"CLIPModel"),tTt.forEach(t),Y3o=r(hRe," (CLIP model)"),hRe.forEach(t),K3o=i(x),G_=n(x,"LI",{});var pRe=s(G_);Fge=n(pRe,"STRONG",{});var aTt=s(Fge);Z3o=r(aTt,"codegen"),aTt.forEach(t),e5o=r(pRe," \u2014 "),_G=n(pRe,"A",{href:!0});var nTt=s(_G);o5o=r(nTt,"CodeGenModel"),nTt.forEach(t),r5o=r(pRe," (CodeGen model)"),pRe.forEach(t),t5o=i(x),O_=n(x,"LI",{});var _Re=s(O_);Tge=n(_Re,"STRONG",{});var sTt=s(Tge);a5o=r(sTt,"convbert"),sTt.forEach(t),n5o=r(_Re," \u2014 "),uG=n(_Re,"A",{href:!0});var lTt=s(uG);s5o=r(lTt,"ConvBertModel"),lTt.forEach(t),l5o=r(_Re," (ConvBERT model)"),_Re.forEach(t),i5o=i(x),V_=n(x,"LI",{});var uRe=s(V_);Mge=n(uRe,"STRONG",{});var iTt=s(Mge);d5o=r(iTt,"convnext"),iTt.forEach(t),c5o=r(uRe," \u2014 "),bG=n(uRe,"A",{href:!0});var dTt=s(bG);f5o=r(dTt,"ConvNextModel"),dTt.forEach(t),m5o=r(uRe," (ConvNeXT model)"),uRe.forEach(t),g5o=i(x),X_=n(x,"LI",{});var bRe=s(X_);Ege=n(bRe,"STRONG",{});var cTt=s(Ege);h5o=r(cTt,"ctrl"),cTt.forEach(t),p5o=r(bRe," \u2014 "),vG=n(bRe,"A",{href:!0});var fTt=s(vG);_5o=r(fTt,"CTRLModel"),fTt.forEach(t),u5o=r(bRe," (CTRL model)"),bRe.forEach(t),b5o=i(x),z_=n(x,"LI",{});var vRe=s(z_);Cge=n(vRe,"STRONG",{});var mTt=s(Cge);v5o=r(mTt,"cvt"),mTt.forEach(t),F5o=r(vRe," \u2014 "),FG=n(vRe,"A",{href:!0});var gTt=s(FG);T5o=r(gTt,"CvtModel"),gTt.forEach(t),M5o=r(vRe," (CvT model)"),vRe.forEach(t),E5o=i(x),W_=n(x,"LI",{});var FRe=s(W_);wge=n(FRe,"STRONG",{});var hTt=s(wge);C5o=r(hTt,"data2vec-audio"),hTt.forEach(t),w5o=r(FRe," \u2014 "),TG=n(FRe,"A",{href:!0});var pTt=s(TG);A5o=r(pTt,"Data2VecAudioModel"),pTt.forEach(t),L5o=r(FRe," (Data2VecAudio model)"),FRe.forEach(t),y5o=i(x),Q_=n(x,"LI",{});var TRe=s(Q_);Age=n(TRe,"STRONG",{});var _Tt=s(Age);x5o=r(_Tt,"data2vec-text"),_Tt.forEach(t),$5o=r(TRe," \u2014 "),MG=n(TRe,"A",{href:!0});var uTt=s(MG);k5o=r(uTt,"Data2VecTextModel"),uTt.forEach(t),S5o=r(TRe," (Data2VecText model)"),TRe.forEach(t),R5o=i(x),U_=n(x,"LI",{});var MRe=s(U_);Lge=n(MRe,"STRONG",{});var bTt=s(Lge);P5o=r(bTt,"data2vec-vision"),bTt.forEach(t),B5o=r(MRe," \u2014 "),EG=n(MRe,"A",{href:!0});var vTt=s(EG);I5o=r(vTt,"Data2VecVisionModel"),vTt.forEach(t),N5o=r(MRe," (Data2VecVision model)"),MRe.forEach(t),q5o=i(x),H_=n(x,"LI",{});var ERe=s(H_);yge=n(ERe,"STRONG",{});var FTt=s(yge);j5o=r(FTt,"deberta"),FTt.forEach(t),D5o=r(ERe," \u2014 "),CG=n(ERe,"A",{href:!0});var TTt=s(CG);G5o=r(TTt,"DebertaModel"),TTt.forEach(t),O5o=r(ERe," (DeBERTa model)"),ERe.forEach(t),V5o=i(x),J_=n(x,"LI",{});var CRe=s(J_);xge=n(CRe,"STRONG",{});var MTt=s(xge);X5o=r(MTt,"deberta-v2"),MTt.forEach(t),z5o=r(CRe," \u2014 "),wG=n(CRe,"A",{href:!0});var ETt=s(wG);W5o=r(ETt,"DebertaV2Model"),ETt.forEach(t),Q5o=r(CRe," (DeBERTa-v2 model)"),CRe.forEach(t),U5o=i(x),Y_=n(x,"LI",{});var wRe=s(Y_);$ge=n(wRe,"STRONG",{});var CTt=s($ge);H5o=r(CTt,"decision_transformer"),CTt.forEach(t),J5o=r(wRe," \u2014 "),AG=n(wRe,"A",{href:!0});var wTt=s(AG);Y5o=r(wTt,"DecisionTransformerModel"),wTt.forEach(t),K5o=r(wRe," (Decision Transformer model)"),wRe.forEach(t),Z5o=i(x),K_=n(x,"LI",{});var ARe=s(K_);kge=n(ARe,"STRONG",{});var ATt=s(kge);e0o=r(ATt,"deit"),ATt.forEach(t),o0o=r(ARe," \u2014 "),LG=n(ARe,"A",{href:!0});var LTt=s(LG);r0o=r(LTt,"DeiTModel"),LTt.forEach(t),t0o=r(ARe," (DeiT model)"),ARe.forEach(t),a0o=i(x),Z_=n(x,"LI",{});var LRe=s(Z_);Sge=n(LRe,"STRONG",{});var yTt=s(Sge);n0o=r(yTt,"detr"),yTt.forEach(t),s0o=r(LRe," \u2014 "),yG=n(LRe,"A",{href:!0});var xTt=s(yG);l0o=r(xTt,"DetrModel"),xTt.forEach(t),i0o=r(LRe," (DETR model)"),LRe.forEach(t),d0o=i(x),eu=n(x,"LI",{});var yRe=s(eu);Rge=n(yRe,"STRONG",{});var $Tt=s(Rge);c0o=r($Tt,"distilbert"),$Tt.forEach(t),f0o=r(yRe," \u2014 "),xG=n(yRe,"A",{href:!0});var kTt=s(xG);m0o=r(kTt,"DistilBertModel"),kTt.forEach(t),g0o=r(yRe," (DistilBERT model)"),yRe.forEach(t),h0o=i(x),ou=n(x,"LI",{});var xRe=s(ou);Pge=n(xRe,"STRONG",{});var STt=s(Pge);p0o=r(STt,"donut-swin"),STt.forEach(t),_0o=r(xRe," \u2014 "),$G=n(xRe,"A",{href:!0});var RTt=s($G);u0o=r(RTt,"DonutSwinModel"),RTt.forEach(t),b0o=r(xRe," (DonutSwin model)"),xRe.forEach(t),v0o=i(x),ru=n(x,"LI",{});var $Re=s(ru);Bge=n($Re,"STRONG",{});var PTt=s(Bge);F0o=r(PTt,"dpr"),PTt.forEach(t),T0o=r($Re," \u2014 "),kG=n($Re,"A",{href:!0});var BTt=s(kG);M0o=r(BTt,"DPRQuestionEncoder"),BTt.forEach(t),E0o=r($Re," (DPR model)"),$Re.forEach(t),C0o=i(x),tu=n(x,"LI",{});var kRe=s(tu);Ige=n(kRe,"STRONG",{});var ITt=s(Ige);w0o=r(ITt,"dpt"),ITt.forEach(t),A0o=r(kRe," \u2014 "),SG=n(kRe,"A",{href:!0});var NTt=s(SG);L0o=r(NTt,"DPTModel"),NTt.forEach(t),y0o=r(kRe," (DPT model)"),kRe.forEach(t),x0o=i(x),au=n(x,"LI",{});var SRe=s(au);Nge=n(SRe,"STRONG",{});var qTt=s(Nge);$0o=r(qTt,"electra"),qTt.forEach(t),k0o=r(SRe," \u2014 "),RG=n(SRe,"A",{href:!0});var jTt=s(RG);S0o=r(jTt,"ElectraModel"),jTt.forEach(t),R0o=r(SRe," (ELECTRA model)"),SRe.forEach(t),P0o=i(x),nu=n(x,"LI",{});var RRe=s(nu);qge=n(RRe,"STRONG",{});var DTt=s(qge);B0o=r(DTt,"flaubert"),DTt.forEach(t),I0o=r(RRe," \u2014 "),PG=n(RRe,"A",{href:!0});var GTt=s(PG);N0o=r(GTt,"FlaubertModel"),GTt.forEach(t),q0o=r(RRe," (FlauBERT model)"),RRe.forEach(t),j0o=i(x),su=n(x,"LI",{});var PRe=s(su);jge=n(PRe,"STRONG",{});var OTt=s(jge);D0o=r(OTt,"flava"),OTt.forEach(t),G0o=r(PRe," \u2014 "),BG=n(PRe,"A",{href:!0});var VTt=s(BG);O0o=r(VTt,"FlavaModel"),VTt.forEach(t),V0o=r(PRe," (FLAVA model)"),PRe.forEach(t),X0o=i(x),lu=n(x,"LI",{});var BRe=s(lu);Dge=n(BRe,"STRONG",{});var XTt=s(Dge);z0o=r(XTt,"fnet"),XTt.forEach(t),W0o=r(BRe," \u2014 "),IG=n(BRe,"A",{href:!0});var zTt=s(IG);Q0o=r(zTt,"FNetModel"),zTt.forEach(t),U0o=r(BRe," (FNet model)"),BRe.forEach(t),H0o=i(x),iu=n(x,"LI",{});var IRe=s(iu);Gge=n(IRe,"STRONG",{});var WTt=s(Gge);J0o=r(WTt,"fsmt"),WTt.forEach(t),Y0o=r(IRe," \u2014 "),NG=n(IRe,"A",{href:!0});var QTt=s(NG);K0o=r(QTt,"FSMTModel"),QTt.forEach(t),Z0o=r(IRe," (FairSeq Machine-Translation model)"),IRe.forEach(t),ewo=i(x),cl=n(x,"LI",{});var MP=s(cl);Oge=n(MP,"STRONG",{});var UTt=s(Oge);owo=r(UTt,"funnel"),UTt.forEach(t),rwo=r(MP," \u2014 "),qG=n(MP,"A",{href:!0});var HTt=s(qG);two=r(HTt,"FunnelModel"),HTt.forEach(t),awo=r(MP," or "),jG=n(MP,"A",{href:!0});var JTt=s(jG);nwo=r(JTt,"FunnelBaseModel"),JTt.forEach(t),swo=r(MP," (Funnel Transformer model)"),MP.forEach(t),lwo=i(x),du=n(x,"LI",{});var NRe=s(du);Vge=n(NRe,"STRONG",{});var YTt=s(Vge);iwo=r(YTt,"glpn"),YTt.forEach(t),dwo=r(NRe," \u2014 "),DG=n(NRe,"A",{href:!0});var KTt=s(DG);cwo=r(KTt,"GLPNModel"),KTt.forEach(t),fwo=r(NRe," (GLPN model)"),NRe.forEach(t),mwo=i(x),cu=n(x,"LI",{});var qRe=s(cu);Xge=n(qRe,"STRONG",{});var ZTt=s(Xge);gwo=r(ZTt,"gpt2"),ZTt.forEach(t),hwo=r(qRe," \u2014 "),GG=n(qRe,"A",{href:!0});var eMt=s(GG);pwo=r(eMt,"GPT2Model"),eMt.forEach(t),_wo=r(qRe," (OpenAI GPT-2 model)"),qRe.forEach(t),uwo=i(x),fu=n(x,"LI",{});var jRe=s(fu);zge=n(jRe,"STRONG",{});var oMt=s(zge);bwo=r(oMt,"gpt_neo"),oMt.forEach(t),vwo=r(jRe," \u2014 "),OG=n(jRe,"A",{href:!0});var rMt=s(OG);Fwo=r(rMt,"GPTNeoModel"),rMt.forEach(t),Two=r(jRe," (GPT Neo model)"),jRe.forEach(t),Mwo=i(x),mu=n(x,"LI",{});var DRe=s(mu);Wge=n(DRe,"STRONG",{});var tMt=s(Wge);Ewo=r(tMt,"gpt_neox"),tMt.forEach(t),Cwo=r(DRe," \u2014 "),VG=n(DRe,"A",{href:!0});var aMt=s(VG);wwo=r(aMt,"GPTNeoXModel"),aMt.forEach(t),Awo=r(DRe," (GPT NeoX model)"),DRe.forEach(t),Lwo=i(x),gu=n(x,"LI",{});var GRe=s(gu);Qge=n(GRe,"STRONG",{});var nMt=s(Qge);ywo=r(nMt,"gptj"),nMt.forEach(t),xwo=r(GRe," \u2014 "),XG=n(GRe,"A",{href:!0});var sMt=s(XG);$wo=r(sMt,"GPTJModel"),sMt.forEach(t),kwo=r(GRe," (GPT-J model)"),GRe.forEach(t),Swo=i(x),hu=n(x,"LI",{});var ORe=s(hu);Uge=n(ORe,"STRONG",{});var lMt=s(Uge);Rwo=r(lMt,"groupvit"),lMt.forEach(t),Pwo=r(ORe," \u2014 "),zG=n(ORe,"A",{href:!0});var iMt=s(zG);Bwo=r(iMt,"GroupViTModel"),iMt.forEach(t),Iwo=r(ORe," (GroupViT model)"),ORe.forEach(t),Nwo=i(x),pu=n(x,"LI",{});var VRe=s(pu);Hge=n(VRe,"STRONG",{});var dMt=s(Hge);qwo=r(dMt,"hubert"),dMt.forEach(t),jwo=r(VRe," \u2014 "),WG=n(VRe,"A",{href:!0});var cMt=s(WG);Dwo=r(cMt,"HubertModel"),cMt.forEach(t),Gwo=r(VRe," (Hubert model)"),VRe.forEach(t),Owo=i(x),_u=n(x,"LI",{});var XRe=s(_u);Jge=n(XRe,"STRONG",{});var fMt=s(Jge);Vwo=r(fMt,"ibert"),fMt.forEach(t),Xwo=r(XRe," \u2014 "),QG=n(XRe,"A",{href:!0});var mMt=s(QG);zwo=r(mMt,"IBertModel"),mMt.forEach(t),Wwo=r(XRe," (I-BERT model)"),XRe.forEach(t),Qwo=i(x),uu=n(x,"LI",{});var zRe=s(uu);Yge=n(zRe,"STRONG",{});var gMt=s(Yge);Uwo=r(gMt,"imagegpt"),gMt.forEach(t),Hwo=r(zRe," \u2014 "),UG=n(zRe,"A",{href:!0});var hMt=s(UG);Jwo=r(hMt,"ImageGPTModel"),hMt.forEach(t),Ywo=r(zRe," (ImageGPT model)"),zRe.forEach(t),Kwo=i(x),bu=n(x,"LI",{});var WRe=s(bu);Kge=n(WRe,"STRONG",{});var pMt=s(Kge);Zwo=r(pMt,"layoutlm"),pMt.forEach(t),eAo=r(WRe," \u2014 "),HG=n(WRe,"A",{href:!0});var _Mt=s(HG);oAo=r(_Mt,"LayoutLMModel"),_Mt.forEach(t),rAo=r(WRe," (LayoutLM model)"),WRe.forEach(t),tAo=i(x),vu=n(x,"LI",{});var QRe=s(vu);Zge=n(QRe,"STRONG",{});var uMt=s(Zge);aAo=r(uMt,"layoutlmv2"),uMt.forEach(t),nAo=r(QRe," \u2014 "),JG=n(QRe,"A",{href:!0});var bMt=s(JG);sAo=r(bMt,"LayoutLMv2Model"),bMt.forEach(t),lAo=r(QRe," (LayoutLMv2 model)"),QRe.forEach(t),iAo=i(x),Fu=n(x,"LI",{});var URe=s(Fu);ehe=n(URe,"STRONG",{});var vMt=s(ehe);dAo=r(vMt,"layoutlmv3"),vMt.forEach(t),cAo=r(URe," \u2014 "),YG=n(URe,"A",{href:!0});var FMt=s(YG);fAo=r(FMt,"LayoutLMv3Model"),FMt.forEach(t),mAo=r(URe," (LayoutLMv3 model)"),URe.forEach(t),gAo=i(x),Tu=n(x,"LI",{});var HRe=s(Tu);ohe=n(HRe,"STRONG",{});var TMt=s(ohe);hAo=r(TMt,"led"),TMt.forEach(t),pAo=r(HRe," \u2014 "),KG=n(HRe,"A",{href:!0});var MMt=s(KG);_Ao=r(MMt,"LEDModel"),MMt.forEach(t),uAo=r(HRe," (LED model)"),HRe.forEach(t),bAo=i(x),Mu=n(x,"LI",{});var JRe=s(Mu);rhe=n(JRe,"STRONG",{});var EMt=s(rhe);vAo=r(EMt,"levit"),EMt.forEach(t),FAo=r(JRe," \u2014 "),ZG=n(JRe,"A",{href:!0});var CMt=s(ZG);TAo=r(CMt,"LevitModel"),CMt.forEach(t),MAo=r(JRe," (LeViT model)"),JRe.forEach(t),EAo=i(x),Eu=n(x,"LI",{});var YRe=s(Eu);the=n(YRe,"STRONG",{});var wMt=s(the);CAo=r(wMt,"longformer"),wMt.forEach(t),wAo=r(YRe," \u2014 "),eO=n(YRe,"A",{href:!0});var AMt=s(eO);AAo=r(AMt,"LongformerModel"),AMt.forEach(t),LAo=r(YRe," (Longformer model)"),YRe.forEach(t),yAo=i(x),Cu=n(x,"LI",{});var KRe=s(Cu);ahe=n(KRe,"STRONG",{});var LMt=s(ahe);xAo=r(LMt,"longt5"),LMt.forEach(t),$Ao=r(KRe," \u2014 "),oO=n(KRe,"A",{href:!0});var yMt=s(oO);kAo=r(yMt,"LongT5Model"),yMt.forEach(t),SAo=r(KRe," (LongT5 model)"),KRe.forEach(t),RAo=i(x),wu=n(x,"LI",{});var ZRe=s(wu);nhe=n(ZRe,"STRONG",{});var xMt=s(nhe);PAo=r(xMt,"luke"),xMt.forEach(t),BAo=r(ZRe," \u2014 "),rO=n(ZRe,"A",{href:!0});var $Mt=s(rO);IAo=r($Mt,"LukeModel"),$Mt.forEach(t),NAo=r(ZRe," (LUKE model)"),ZRe.forEach(t),qAo=i(x),Au=n(x,"LI",{});var ePe=s(Au);she=n(ePe,"STRONG",{});var kMt=s(she);jAo=r(kMt,"lxmert"),kMt.forEach(t),DAo=r(ePe," \u2014 "),tO=n(ePe,"A",{href:!0});var SMt=s(tO);GAo=r(SMt,"LxmertModel"),SMt.forEach(t),OAo=r(ePe," (LXMERT model)"),ePe.forEach(t),VAo=i(x),Lu=n(x,"LI",{});var oPe=s(Lu);lhe=n(oPe,"STRONG",{});var RMt=s(lhe);XAo=r(RMt,"m2m_100"),RMt.forEach(t),zAo=r(oPe," \u2014 "),aO=n(oPe,"A",{href:!0});var PMt=s(aO);WAo=r(PMt,"M2M100Model"),PMt.forEach(t),QAo=r(oPe," (M2M100 model)"),oPe.forEach(t),UAo=i(x),yu=n(x,"LI",{});var rPe=s(yu);ihe=n(rPe,"STRONG",{});var BMt=s(ihe);HAo=r(BMt,"marian"),BMt.forEach(t),JAo=r(rPe," \u2014 "),nO=n(rPe,"A",{href:!0});var IMt=s(nO);YAo=r(IMt,"MarianModel"),IMt.forEach(t),KAo=r(rPe," (Marian model)"),rPe.forEach(t),ZAo=i(x),xu=n(x,"LI",{});var tPe=s(xu);dhe=n(tPe,"STRONG",{});var NMt=s(dhe);e7o=r(NMt,"maskformer"),NMt.forEach(t),o7o=r(tPe," \u2014 "),sO=n(tPe,"A",{href:!0});var qMt=s(sO);r7o=r(qMt,"MaskFormerModel"),qMt.forEach(t),t7o=r(tPe," (MaskFormer model)"),tPe.forEach(t),a7o=i(x),$u=n(x,"LI",{});var aPe=s($u);che=n(aPe,"STRONG",{});var jMt=s(che);n7o=r(jMt,"mbart"),jMt.forEach(t),s7o=r(aPe," \u2014 "),lO=n(aPe,"A",{href:!0});var DMt=s(lO);l7o=r(DMt,"MBartModel"),DMt.forEach(t),i7o=r(aPe," (mBART model)"),aPe.forEach(t),d7o=i(x),ku=n(x,"LI",{});var nPe=s(ku);fhe=n(nPe,"STRONG",{});var GMt=s(fhe);c7o=r(GMt,"mctct"),GMt.forEach(t),f7o=r(nPe," \u2014 "),iO=n(nPe,"A",{href:!0});var OMt=s(iO);m7o=r(OMt,"MCTCTModel"),OMt.forEach(t),g7o=r(nPe," (M-CTC-T model)"),nPe.forEach(t),h7o=i(x),Su=n(x,"LI",{});var sPe=s(Su);mhe=n(sPe,"STRONG",{});var VMt=s(mhe);p7o=r(VMt,"megatron-bert"),VMt.forEach(t),_7o=r(sPe," \u2014 "),dO=n(sPe,"A",{href:!0});var XMt=s(dO);u7o=r(XMt,"MegatronBertModel"),XMt.forEach(t),b7o=r(sPe," (Megatron-BERT model)"),sPe.forEach(t),v7o=i(x),Ru=n(x,"LI",{});var lPe=s(Ru);ghe=n(lPe,"STRONG",{});var zMt=s(ghe);F7o=r(zMt,"mobilebert"),zMt.forEach(t),T7o=r(lPe," \u2014 "),cO=n(lPe,"A",{href:!0});var WMt=s(cO);M7o=r(WMt,"MobileBertModel"),WMt.forEach(t),E7o=r(lPe," (MobileBERT model)"),lPe.forEach(t),C7o=i(x),Pu=n(x,"LI",{});var iPe=s(Pu);hhe=n(iPe,"STRONG",{});var QMt=s(hhe);w7o=r(QMt,"mobilevit"),QMt.forEach(t),A7o=r(iPe," \u2014 "),fO=n(iPe,"A",{href:!0});var UMt=s(fO);L7o=r(UMt,"MobileViTModel"),UMt.forEach(t),y7o=r(iPe," (MobileViT model)"),iPe.forEach(t),x7o=i(x),Bu=n(x,"LI",{});var dPe=s(Bu);phe=n(dPe,"STRONG",{});var HMt=s(phe);$7o=r(HMt,"mpnet"),HMt.forEach(t),k7o=r(dPe," \u2014 "),mO=n(dPe,"A",{href:!0});var JMt=s(mO);S7o=r(JMt,"MPNetModel"),JMt.forEach(t),R7o=r(dPe," (MPNet model)"),dPe.forEach(t),P7o=i(x),Iu=n(x,"LI",{});var cPe=s(Iu);_he=n(cPe,"STRONG",{});var YMt=s(_he);B7o=r(YMt,"mt5"),YMt.forEach(t),I7o=r(cPe," \u2014 "),gO=n(cPe,"A",{href:!0});var KMt=s(gO);N7o=r(KMt,"MT5Model"),KMt.forEach(t),q7o=r(cPe," (MT5 model)"),cPe.forEach(t),j7o=i(x),Nu=n(x,"LI",{});var fPe=s(Nu);uhe=n(fPe,"STRONG",{});var ZMt=s(uhe);D7o=r(ZMt,"mvp"),ZMt.forEach(t),G7o=r(fPe," \u2014 "),hO=n(fPe,"A",{href:!0});var eEt=s(hO);O7o=r(eEt,"MvpModel"),eEt.forEach(t),V7o=r(fPe," (MVP model)"),fPe.forEach(t),X7o=i(x),qu=n(x,"LI",{});var mPe=s(qu);bhe=n(mPe,"STRONG",{});var oEt=s(bhe);z7o=r(oEt,"nezha"),oEt.forEach(t),W7o=r(mPe," \u2014 "),pO=n(mPe,"A",{href:!0});var rEt=s(pO);Q7o=r(rEt,"NezhaModel"),rEt.forEach(t),U7o=r(mPe," (Nezha model)"),mPe.forEach(t),H7o=i(x),ju=n(x,"LI",{});var gPe=s(ju);vhe=n(gPe,"STRONG",{});var tEt=s(vhe);J7o=r(tEt,"nllb"),tEt.forEach(t),Y7o=r(gPe," \u2014 "),_O=n(gPe,"A",{href:!0});var aEt=s(_O);K7o=r(aEt,"M2M100Model"),aEt.forEach(t),Z7o=r(gPe," (NLLB model)"),gPe.forEach(t),eLo=i(x),Du=n(x,"LI",{});var hPe=s(Du);Fhe=n(hPe,"STRONG",{});var nEt=s(Fhe);oLo=r(nEt,"nystromformer"),nEt.forEach(t),rLo=r(hPe," \u2014 "),uO=n(hPe,"A",{href:!0});var sEt=s(uO);tLo=r(sEt,"NystromformerModel"),sEt.forEach(t),aLo=r(hPe," (Nystr\xF6mformer model)"),hPe.forEach(t),nLo=i(x),Gu=n(x,"LI",{});var pPe=s(Gu);The=n(pPe,"STRONG",{});var lEt=s(The);sLo=r(lEt,"openai-gpt"),lEt.forEach(t),lLo=r(pPe," \u2014 "),bO=n(pPe,"A",{href:!0});var iEt=s(bO);iLo=r(iEt,"OpenAIGPTModel"),iEt.forEach(t),dLo=r(pPe," (OpenAI GPT model)"),pPe.forEach(t),cLo=i(x),Ou=n(x,"LI",{});var _Pe=s(Ou);Mhe=n(_Pe,"STRONG",{});var dEt=s(Mhe);fLo=r(dEt,"opt"),dEt.forEach(t),mLo=r(_Pe," \u2014 "),vO=n(_Pe,"A",{href:!0});var cEt=s(vO);gLo=r(cEt,"OPTModel"),cEt.forEach(t),hLo=r(_Pe," (OPT model)"),_Pe.forEach(t),pLo=i(x),Vu=n(x,"LI",{});var uPe=s(Vu);Ehe=n(uPe,"STRONG",{});var fEt=s(Ehe);_Lo=r(fEt,"owlvit"),fEt.forEach(t),uLo=r(uPe," \u2014 "),FO=n(uPe,"A",{href:!0});var mEt=s(FO);bLo=r(mEt,"OwlViTModel"),mEt.forEach(t),vLo=r(uPe," (OWL-ViT model)"),uPe.forEach(t),FLo=i(x),Xu=n(x,"LI",{});var bPe=s(Xu);Che=n(bPe,"STRONG",{});var gEt=s(Che);TLo=r(gEt,"pegasus"),gEt.forEach(t),MLo=r(bPe," \u2014 "),TO=n(bPe,"A",{href:!0});var hEt=s(TO);ELo=r(hEt,"PegasusModel"),hEt.forEach(t),CLo=r(bPe," (Pegasus model)"),bPe.forEach(t),wLo=i(x),zu=n(x,"LI",{});var vPe=s(zu);whe=n(vPe,"STRONG",{});var pEt=s(whe);ALo=r(pEt,"perceiver"),pEt.forEach(t),LLo=r(vPe," \u2014 "),MO=n(vPe,"A",{href:!0});var _Et=s(MO);yLo=r(_Et,"PerceiverModel"),_Et.forEach(t),xLo=r(vPe," (Perceiver model)"),vPe.forEach(t),$Lo=i(x),Wu=n(x,"LI",{});var FPe=s(Wu);Ahe=n(FPe,"STRONG",{});var uEt=s(Ahe);kLo=r(uEt,"plbart"),uEt.forEach(t),SLo=r(FPe," \u2014 "),EO=n(FPe,"A",{href:!0});var bEt=s(EO);RLo=r(bEt,"PLBartModel"),bEt.forEach(t),PLo=r(FPe," (PLBart model)"),FPe.forEach(t),BLo=i(x),Qu=n(x,"LI",{});var TPe=s(Qu);Lhe=n(TPe,"STRONG",{});var vEt=s(Lhe);ILo=r(vEt,"poolformer"),vEt.forEach(t),NLo=r(TPe," \u2014 "),CO=n(TPe,"A",{href:!0});var FEt=s(CO);qLo=r(FEt,"PoolFormerModel"),FEt.forEach(t),jLo=r(TPe," (PoolFormer model)"),TPe.forEach(t),DLo=i(x),Uu=n(x,"LI",{});var MPe=s(Uu);yhe=n(MPe,"STRONG",{});var TEt=s(yhe);GLo=r(TEt,"prophetnet"),TEt.forEach(t),OLo=r(MPe," \u2014 "),wO=n(MPe,"A",{href:!0});var MEt=s(wO);VLo=r(MEt,"ProphetNetModel"),MEt.forEach(t),XLo=r(MPe," (ProphetNet model)"),MPe.forEach(t),zLo=i(x),Hu=n(x,"LI",{});var EPe=s(Hu);xhe=n(EPe,"STRONG",{});var EEt=s(xhe);WLo=r(EEt,"qdqbert"),EEt.forEach(t),QLo=r(EPe," \u2014 "),AO=n(EPe,"A",{href:!0});var CEt=s(AO);ULo=r(CEt,"QDQBertModel"),CEt.forEach(t),HLo=r(EPe," (QDQBert model)"),EPe.forEach(t),JLo=i(x),Ju=n(x,"LI",{});var CPe=s(Ju);$he=n(CPe,"STRONG",{});var wEt=s($he);YLo=r(wEt,"reformer"),wEt.forEach(t),KLo=r(CPe," \u2014 "),LO=n(CPe,"A",{href:!0});var AEt=s(LO);ZLo=r(AEt,"ReformerModel"),AEt.forEach(t),eyo=r(CPe," (Reformer model)"),CPe.forEach(t),oyo=i(x),Yu=n(x,"LI",{});var wPe=s(Yu);khe=n(wPe,"STRONG",{});var LEt=s(khe);ryo=r(LEt,"regnet"),LEt.forEach(t),tyo=r(wPe," \u2014 "),yO=n(wPe,"A",{href:!0});var yEt=s(yO);ayo=r(yEt,"RegNetModel"),yEt.forEach(t),nyo=r(wPe," (RegNet model)"),wPe.forEach(t),syo=i(x),Ku=n(x,"LI",{});var APe=s(Ku);She=n(APe,"STRONG",{});var xEt=s(She);lyo=r(xEt,"rembert"),xEt.forEach(t),iyo=r(APe," \u2014 "),xO=n(APe,"A",{href:!0});var $Et=s(xO);dyo=r($Et,"RemBertModel"),$Et.forEach(t),cyo=r(APe," (RemBERT model)"),APe.forEach(t),fyo=i(x),Zu=n(x,"LI",{});var LPe=s(Zu);Rhe=n(LPe,"STRONG",{});var kEt=s(Rhe);myo=r(kEt,"resnet"),kEt.forEach(t),gyo=r(LPe," \u2014 "),$O=n(LPe,"A",{href:!0});var SEt=s($O);hyo=r(SEt,"ResNetModel"),SEt.forEach(t),pyo=r(LPe," (ResNet model)"),LPe.forEach(t),_yo=i(x),e1=n(x,"LI",{});var yPe=s(e1);Phe=n(yPe,"STRONG",{});var REt=s(Phe);uyo=r(REt,"retribert"),REt.forEach(t),byo=r(yPe," \u2014 "),kO=n(yPe,"A",{href:!0});var PEt=s(kO);vyo=r(PEt,"RetriBertModel"),PEt.forEach(t),Fyo=r(yPe," (RetriBERT model)"),yPe.forEach(t),Tyo=i(x),o1=n(x,"LI",{});var xPe=s(o1);Bhe=n(xPe,"STRONG",{});var BEt=s(Bhe);Myo=r(BEt,"roberta"),BEt.forEach(t),Eyo=r(xPe," \u2014 "),SO=n(xPe,"A",{href:!0});var IEt=s(SO);Cyo=r(IEt,"RobertaModel"),IEt.forEach(t),wyo=r(xPe," (RoBERTa model)"),xPe.forEach(t),Ayo=i(x),r1=n(x,"LI",{});var $Pe=s(r1);Ihe=n($Pe,"STRONG",{});var NEt=s(Ihe);Lyo=r(NEt,"roformer"),NEt.forEach(t),yyo=r($Pe," \u2014 "),RO=n($Pe,"A",{href:!0});var qEt=s(RO);xyo=r(qEt,"RoFormerModel"),qEt.forEach(t),$yo=r($Pe," (RoFormer model)"),$Pe.forEach(t),kyo=i(x),t1=n(x,"LI",{});var kPe=s(t1);Nhe=n(kPe,"STRONG",{});var jEt=s(Nhe);Syo=r(jEt,"segformer"),jEt.forEach(t),Ryo=r(kPe," \u2014 "),PO=n(kPe,"A",{href:!0});var DEt=s(PO);Pyo=r(DEt,"SegformerModel"),DEt.forEach(t),Byo=r(kPe," (SegFormer model)"),kPe.forEach(t),Iyo=i(x),a1=n(x,"LI",{});var SPe=s(a1);qhe=n(SPe,"STRONG",{});var GEt=s(qhe);Nyo=r(GEt,"sew"),GEt.forEach(t),qyo=r(SPe," \u2014 "),BO=n(SPe,"A",{href:!0});var OEt=s(BO);jyo=r(OEt,"SEWModel"),OEt.forEach(t),Dyo=r(SPe," (SEW model)"),SPe.forEach(t),Gyo=i(x),n1=n(x,"LI",{});var RPe=s(n1);jhe=n(RPe,"STRONG",{});var VEt=s(jhe);Oyo=r(VEt,"sew-d"),VEt.forEach(t),Vyo=r(RPe," \u2014 "),IO=n(RPe,"A",{href:!0});var XEt=s(IO);Xyo=r(XEt,"SEWDModel"),XEt.forEach(t),zyo=r(RPe," (SEW-D model)"),RPe.forEach(t),Wyo=i(x),s1=n(x,"LI",{});var PPe=s(s1);Dhe=n(PPe,"STRONG",{});var zEt=s(Dhe);Qyo=r(zEt,"speech_to_text"),zEt.forEach(t),Uyo=r(PPe," \u2014 "),NO=n(PPe,"A",{href:!0});var WEt=s(NO);Hyo=r(WEt,"Speech2TextModel"),WEt.forEach(t),Jyo=r(PPe," (Speech2Text model)"),PPe.forEach(t),Yyo=i(x),l1=n(x,"LI",{});var BPe=s(l1);Ghe=n(BPe,"STRONG",{});var QEt=s(Ghe);Kyo=r(QEt,"splinter"),QEt.forEach(t),Zyo=r(BPe," \u2014 "),qO=n(BPe,"A",{href:!0});var UEt=s(qO);e9o=r(UEt,"SplinterModel"),UEt.forEach(t),o9o=r(BPe," (Splinter model)"),BPe.forEach(t),r9o=i(x),i1=n(x,"LI",{});var IPe=s(i1);Ohe=n(IPe,"STRONG",{});var HEt=s(Ohe);t9o=r(HEt,"squeezebert"),HEt.forEach(t),a9o=r(IPe," \u2014 "),jO=n(IPe,"A",{href:!0});var JEt=s(jO);n9o=r(JEt,"SqueezeBertModel"),JEt.forEach(t),s9o=r(IPe," (SqueezeBERT model)"),IPe.forEach(t),l9o=i(x),d1=n(x,"LI",{});var NPe=s(d1);Vhe=n(NPe,"STRONG",{});var YEt=s(Vhe);i9o=r(YEt,"swin"),YEt.forEach(t),d9o=r(NPe," \u2014 "),DO=n(NPe,"A",{href:!0});var KEt=s(DO);c9o=r(KEt,"SwinModel"),KEt.forEach(t),f9o=r(NPe," (Swin Transformer model)"),NPe.forEach(t),m9o=i(x),c1=n(x,"LI",{});var qPe=s(c1);Xhe=n(qPe,"STRONG",{});var ZEt=s(Xhe);g9o=r(ZEt,"swinv2"),ZEt.forEach(t),h9o=r(qPe," \u2014 "),GO=n(qPe,"A",{href:!0});var e4t=s(GO);p9o=r(e4t,"Swinv2Model"),e4t.forEach(t),_9o=r(qPe," (Swin Transformer V2 model)"),qPe.forEach(t),u9o=i(x),f1=n(x,"LI",{});var jPe=s(f1);zhe=n(jPe,"STRONG",{});var o4t=s(zhe);b9o=r(o4t,"t5"),o4t.forEach(t),v9o=r(jPe," \u2014 "),OO=n(jPe,"A",{href:!0});var r4t=s(OO);F9o=r(r4t,"T5Model"),r4t.forEach(t),T9o=r(jPe," (T5 model)"),jPe.forEach(t),M9o=i(x),m1=n(x,"LI",{});var DPe=s(m1);Whe=n(DPe,"STRONG",{});var t4t=s(Whe);E9o=r(t4t,"tapas"),t4t.forEach(t),C9o=r(DPe," \u2014 "),VO=n(DPe,"A",{href:!0});var a4t=s(VO);w9o=r(a4t,"TapasModel"),a4t.forEach(t),A9o=r(DPe," (TAPAS model)"),DPe.forEach(t),L9o=i(x),g1=n(x,"LI",{});var GPe=s(g1);Qhe=n(GPe,"STRONG",{});var n4t=s(Qhe);y9o=r(n4t,"trajectory_transformer"),n4t.forEach(t),x9o=r(GPe," \u2014 "),XO=n(GPe,"A",{href:!0});var s4t=s(XO);$9o=r(s4t,"TrajectoryTransformerModel"),s4t.forEach(t),k9o=r(GPe," (Trajectory Transformer model)"),GPe.forEach(t),S9o=i(x),h1=n(x,"LI",{});var OPe=s(h1);Uhe=n(OPe,"STRONG",{});var l4t=s(Uhe);R9o=r(l4t,"transfo-xl"),l4t.forEach(t),P9o=r(OPe," \u2014 "),zO=n(OPe,"A",{href:!0});var i4t=s(zO);B9o=r(i4t,"TransfoXLModel"),i4t.forEach(t),I9o=r(OPe," (Transformer-XL model)"),OPe.forEach(t),N9o=i(x),p1=n(x,"LI",{});var VPe=s(p1);Hhe=n(VPe,"STRONG",{});var d4t=s(Hhe);q9o=r(d4t,"unispeech"),d4t.forEach(t),j9o=r(VPe," \u2014 "),WO=n(VPe,"A",{href:!0});var c4t=s(WO);D9o=r(c4t,"UniSpeechModel"),c4t.forEach(t),G9o=r(VPe," (UniSpeech model)"),VPe.forEach(t),O9o=i(x),_1=n(x,"LI",{});var XPe=s(_1);Jhe=n(XPe,"STRONG",{});var f4t=s(Jhe);V9o=r(f4t,"unispeech-sat"),f4t.forEach(t),X9o=r(XPe," \u2014 "),QO=n(XPe,"A",{href:!0});var m4t=s(QO);z9o=r(m4t,"UniSpeechSatModel"),m4t.forEach(t),W9o=r(XPe," (UniSpeechSat model)"),XPe.forEach(t),Q9o=i(x),u1=n(x,"LI",{});var zPe=s(u1);Yhe=n(zPe,"STRONG",{});var g4t=s(Yhe);U9o=r(g4t,"van"),g4t.forEach(t),H9o=r(zPe," \u2014 "),UO=n(zPe,"A",{href:!0});var h4t=s(UO);J9o=r(h4t,"VanModel"),h4t.forEach(t),Y9o=r(zPe," (VAN model)"),zPe.forEach(t),K9o=i(x),b1=n(x,"LI",{});var WPe=s(b1);Khe=n(WPe,"STRONG",{});var p4t=s(Khe);Z9o=r(p4t,"videomae"),p4t.forEach(t),exo=r(WPe," \u2014 "),HO=n(WPe,"A",{href:!0});var _4t=s(HO);oxo=r(_4t,"VideoMAEModel"),_4t.forEach(t),rxo=r(WPe," (VideoMAE model)"),WPe.forEach(t),txo=i(x),v1=n(x,"LI",{});var QPe=s(v1);Zhe=n(QPe,"STRONG",{});var u4t=s(Zhe);axo=r(u4t,"vilt"),u4t.forEach(t),nxo=r(QPe," \u2014 "),JO=n(QPe,"A",{href:!0});var b4t=s(JO);sxo=r(b4t,"ViltModel"),b4t.forEach(t),lxo=r(QPe," (ViLT model)"),QPe.forEach(t),ixo=i(x),F1=n(x,"LI",{});var UPe=s(F1);epe=n(UPe,"STRONG",{});var v4t=s(epe);dxo=r(v4t,"vision-text-dual-encoder"),v4t.forEach(t),cxo=r(UPe," \u2014 "),YO=n(UPe,"A",{href:!0});var F4t=s(YO);fxo=r(F4t,"VisionTextDualEncoderModel"),F4t.forEach(t),mxo=r(UPe," (VisionTextDualEncoder model)"),UPe.forEach(t),gxo=i(x),T1=n(x,"LI",{});var HPe=s(T1);ope=n(HPe,"STRONG",{});var T4t=s(ope);hxo=r(T4t,"visual_bert"),T4t.forEach(t),pxo=r(HPe," \u2014 "),KO=n(HPe,"A",{href:!0});var M4t=s(KO);_xo=r(M4t,"VisualBertModel"),M4t.forEach(t),uxo=r(HPe," (VisualBERT model)"),HPe.forEach(t),bxo=i(x),M1=n(x,"LI",{});var JPe=s(M1);rpe=n(JPe,"STRONG",{});var E4t=s(rpe);vxo=r(E4t,"vit"),E4t.forEach(t),Fxo=r(JPe," \u2014 "),ZO=n(JPe,"A",{href:!0});var C4t=s(ZO);Txo=r(C4t,"ViTModel"),C4t.forEach(t),Mxo=r(JPe," (ViT model)"),JPe.forEach(t),Exo=i(x),E1=n(x,"LI",{});var YPe=s(E1);tpe=n(YPe,"STRONG",{});var w4t=s(tpe);Cxo=r(w4t,"vit_mae"),w4t.forEach(t),wxo=r(YPe," \u2014 "),eV=n(YPe,"A",{href:!0});var A4t=s(eV);Axo=r(A4t,"ViTMAEModel"),A4t.forEach(t),Lxo=r(YPe," (ViTMAE model)"),YPe.forEach(t),yxo=i(x),C1=n(x,"LI",{});var KPe=s(C1);ape=n(KPe,"STRONG",{});var L4t=s(ape);xxo=r(L4t,"wav2vec2"),L4t.forEach(t),$xo=r(KPe," \u2014 "),oV=n(KPe,"A",{href:!0});var y4t=s(oV);kxo=r(y4t,"Wav2Vec2Model"),y4t.forEach(t),Sxo=r(KPe," (Wav2Vec2 model)"),KPe.forEach(t),Rxo=i(x),w1=n(x,"LI",{});var ZPe=s(w1);npe=n(ZPe,"STRONG",{});var x4t=s(npe);Pxo=r(x4t,"wav2vec2-conformer"),x4t.forEach(t),Bxo=r(ZPe," \u2014 "),rV=n(ZPe,"A",{href:!0});var $4t=s(rV);Ixo=r($4t,"Wav2Vec2ConformerModel"),$4t.forEach(t),Nxo=r(ZPe," (Wav2Vec2-Conformer model)"),ZPe.forEach(t),qxo=i(x),A1=n(x,"LI",{});var eBe=s(A1);spe=n(eBe,"STRONG",{});var k4t=s(spe);jxo=r(k4t,"wavlm"),k4t.forEach(t),Dxo=r(eBe," \u2014 "),tV=n(eBe,"A",{href:!0});var S4t=s(tV);Gxo=r(S4t,"WavLMModel"),S4t.forEach(t),Oxo=r(eBe," (WavLM model)"),eBe.forEach(t),Vxo=i(x),L1=n(x,"LI",{});var oBe=s(L1);lpe=n(oBe,"STRONG",{});var R4t=s(lpe);Xxo=r(R4t,"xglm"),R4t.forEach(t),zxo=r(oBe," \u2014 "),aV=n(oBe,"A",{href:!0});var P4t=s(aV);Wxo=r(P4t,"XGLMModel"),P4t.forEach(t),Qxo=r(oBe," (XGLM model)"),oBe.forEach(t),Uxo=i(x),y1=n(x,"LI",{});var rBe=s(y1);ipe=n(rBe,"STRONG",{});var B4t=s(ipe);Hxo=r(B4t,"xlm"),B4t.forEach(t),Jxo=r(rBe," \u2014 "),nV=n(rBe,"A",{href:!0});var I4t=s(nV);Yxo=r(I4t,"XLMModel"),I4t.forEach(t),Kxo=r(rBe," (XLM model)"),rBe.forEach(t),Zxo=i(x),x1=n(x,"LI",{});var tBe=s(x1);dpe=n(tBe,"STRONG",{});var N4t=s(dpe);e$o=r(N4t,"xlm-prophetnet"),N4t.forEach(t),o$o=r(tBe," \u2014 "),sV=n(tBe,"A",{href:!0});var q4t=s(sV);r$o=r(q4t,"XLMProphetNetModel"),q4t.forEach(t),t$o=r(tBe," (XLM-ProphetNet model)"),tBe.forEach(t),a$o=i(x),$1=n(x,"LI",{});var aBe=s($1);cpe=n(aBe,"STRONG",{});var j4t=s(cpe);n$o=r(j4t,"xlm-roberta"),j4t.forEach(t),s$o=r(aBe," \u2014 "),lV=n(aBe,"A",{href:!0});var D4t=s(lV);l$o=r(D4t,"XLMRobertaModel"),D4t.forEach(t),i$o=r(aBe," (XLM-RoBERTa model)"),aBe.forEach(t),d$o=i(x),k1=n(x,"LI",{});var nBe=s(k1);fpe=n(nBe,"STRONG",{});var G4t=s(fpe);c$o=r(G4t,"xlm-roberta-xl"),G4t.forEach(t),f$o=r(nBe," \u2014 "),iV=n(nBe,"A",{href:!0});var O4t=s(iV);m$o=r(O4t,"XLMRobertaXLModel"),O4t.forEach(t),g$o=r(nBe," (XLM-RoBERTa-XL model)"),nBe.forEach(t),h$o=i(x),S1=n(x,"LI",{});var sBe=s(S1);mpe=n(sBe,"STRONG",{});var V4t=s(mpe);p$o=r(V4t,"xlnet"),V4t.forEach(t),_$o=r(sBe," \u2014 "),dV=n(sBe,"A",{href:!0});var X4t=s(dV);u$o=r(X4t,"XLNetModel"),X4t.forEach(t),b$o=r(sBe," (XLNet model)"),sBe.forEach(t),v$o=i(x),R1=n(x,"LI",{});var lBe=s(R1);gpe=n(lBe,"STRONG",{});var z4t=s(gpe);F$o=r(z4t,"yolos"),z4t.forEach(t),T$o=r(lBe," \u2014 "),cV=n(lBe,"A",{href:!0});var W4t=s(cV);M$o=r(W4t,"YolosModel"),W4t.forEach(t),E$o=r(lBe," (YOLOS model)"),lBe.forEach(t),C$o=i(x),P1=n(x,"LI",{});var iBe=s(P1);hpe=n(iBe,"STRONG",{});var Q4t=s(hpe);w$o=r(Q4t,"yoso"),Q4t.forEach(t),A$o=r(iBe," \u2014 "),fV=n(iBe,"A",{href:!0});var U4t=s(fV);L$o=r(U4t,"YosoModel"),U4t.forEach(t),y$o=r(iBe," (YOSO model)"),iBe.forEach(t),x.forEach(t),x$o=i(_a),B1=n(_a,"P",{});var dBe=s(B1);$$o=r(dBe,"The model is set in evaluation mode by default using "),ppe=n(dBe,"CODE",{});var H4t=s(ppe);k$o=r(H4t,"model.eval()"),H4t.forEach(t),S$o=r(dBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_pe=n(dBe,"CODE",{});var J4t=s(_pe);R$o=r(J4t,"model.train()"),J4t.forEach(t),dBe.forEach(t),P$o=i(_a),T(I1.$$.fragment,_a),_a.forEach(t),vl.forEach(t),UUe=i(f),fd=n(f,"H2",{class:!0});var sYe=s(fd);N1=n(sYe,"A",{id:!0,class:!0,href:!0});var Y4t=s(N1);upe=n(Y4t,"SPAN",{});var K4t=s(upe);T(i9.$$.fragment,K4t),K4t.forEach(t),Y4t.forEach(t),B$o=i(sYe),bpe=n(sYe,"SPAN",{});var Z4t=s(bpe);I$o=r(Z4t,"AutoModelForPreTraining"),Z4t.forEach(t),sYe.forEach(t),HUe=i(f),Po=n(f,"DIV",{class:!0});var Fl=s(Po);T(d9.$$.fragment,Fl),N$o=i(Fl),md=n(Fl,"P",{});var pne=s(md);q$o=r(pne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mV=n(pne,"A",{href:!0});var eCt=s(mV);j$o=r(eCt,"from_pretrained()"),eCt.forEach(t),D$o=r(pne," class method or the "),gV=n(pne,"A",{href:!0});var oCt=s(gV);G$o=r(oCt,"from_config()"),oCt.forEach(t),O$o=r(pne,` class
method.`),pne.forEach(t),V$o=i(Fl),c9=n(Fl,"P",{});var lYe=s(c9);X$o=r(lYe,"This class cannot be instantiated directly using "),vpe=n(lYe,"CODE",{});var rCt=s(vpe);z$o=r(rCt,"__init__()"),rCt.forEach(t),W$o=r(lYe," (throws an error)."),lYe.forEach(t),Q$o=i(Fl),pt=n(Fl,"DIV",{class:!0});var $7=s(pt);T(f9.$$.fragment,$7),U$o=i($7),Fpe=n($7,"P",{});var tCt=s(Fpe);H$o=r(tCt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),tCt.forEach(t),J$o=i($7),gd=n($7,"P",{});var _ne=s(gd);Y$o=r(_ne,`Note:
Loading a model from its configuration file does `),Tpe=n(_ne,"STRONG",{});var aCt=s(Tpe);K$o=r(aCt,"not"),aCt.forEach(t),Z$o=r(_ne,` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=n(_ne,"A",{href:!0});var nCt=s(hV);eko=r(nCt,"from_pretrained()"),nCt.forEach(t),oko=r(_ne," to load the model weights."),_ne.forEach(t),rko=i($7),T(q1.$$.fragment,$7),$7.forEach(t),tko=i(Fl),Ke=n(Fl,"DIV",{class:!0});var ua=s(Ke);T(m9.$$.fragment,ua),ako=i(ua),Mpe=n(ua,"P",{});var sCt=s(Mpe);nko=r(sCt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sCt.forEach(t),sko=i(ua),Ua=n(ua,"P",{});var k7=s(Ua);lko=r(k7,"The model class to instantiate is selected based on the "),Epe=n(k7,"CODE",{});var lCt=s(Epe);iko=r(lCt,"model_type"),lCt.forEach(t),dko=r(k7,` property of the config object (either
passed as an argument or loaded from `),Cpe=n(k7,"CODE",{});var iCt=s(Cpe);cko=r(iCt,"pretrained_model_name_or_path"),iCt.forEach(t),fko=r(k7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=n(k7,"CODE",{});var dCt=s(wpe);mko=r(dCt,"pretrained_model_name_or_path"),dCt.forEach(t),gko=r(k7,":"),k7.forEach(t),hko=i(ua),G=n(ua,"UL",{});var O=s(G);j1=n(O,"LI",{});var cBe=s(j1);Ape=n(cBe,"STRONG",{});var cCt=s(Ape);pko=r(cCt,"albert"),cCt.forEach(t),_ko=r(cBe," \u2014 "),pV=n(cBe,"A",{href:!0});var fCt=s(pV);uko=r(fCt,"AlbertForPreTraining"),fCt.forEach(t),bko=r(cBe," (ALBERT model)"),cBe.forEach(t),vko=i(O),D1=n(O,"LI",{});var fBe=s(D1);Lpe=n(fBe,"STRONG",{});var mCt=s(Lpe);Fko=r(mCt,"bart"),mCt.forEach(t),Tko=r(fBe," \u2014 "),_V=n(fBe,"A",{href:!0});var gCt=s(_V);Mko=r(gCt,"BartForConditionalGeneration"),gCt.forEach(t),Eko=r(fBe," (BART model)"),fBe.forEach(t),Cko=i(O),G1=n(O,"LI",{});var mBe=s(G1);ype=n(mBe,"STRONG",{});var hCt=s(ype);wko=r(hCt,"bert"),hCt.forEach(t),Ako=r(mBe," \u2014 "),uV=n(mBe,"A",{href:!0});var pCt=s(uV);Lko=r(pCt,"BertForPreTraining"),pCt.forEach(t),yko=r(mBe," (BERT model)"),mBe.forEach(t),xko=i(O),O1=n(O,"LI",{});var gBe=s(O1);xpe=n(gBe,"STRONG",{});var _Ct=s(xpe);$ko=r(_Ct,"big_bird"),_Ct.forEach(t),kko=r(gBe," \u2014 "),bV=n(gBe,"A",{href:!0});var uCt=s(bV);Sko=r(uCt,"BigBirdForPreTraining"),uCt.forEach(t),Rko=r(gBe," (BigBird model)"),gBe.forEach(t),Pko=i(O),V1=n(O,"LI",{});var hBe=s(V1);$pe=n(hBe,"STRONG",{});var bCt=s($pe);Bko=r(bCt,"bloom"),bCt.forEach(t),Iko=r(hBe," \u2014 "),vV=n(hBe,"A",{href:!0});var vCt=s(vV);Nko=r(vCt,"BloomForCausalLM"),vCt.forEach(t),qko=r(hBe," (BLOOM model)"),hBe.forEach(t),jko=i(O),X1=n(O,"LI",{});var pBe=s(X1);kpe=n(pBe,"STRONG",{});var FCt=s(kpe);Dko=r(FCt,"camembert"),FCt.forEach(t),Gko=r(pBe," \u2014 "),FV=n(pBe,"A",{href:!0});var TCt=s(FV);Oko=r(TCt,"CamembertForMaskedLM"),TCt.forEach(t),Vko=r(pBe," (CamemBERT model)"),pBe.forEach(t),Xko=i(O),z1=n(O,"LI",{});var _Be=s(z1);Spe=n(_Be,"STRONG",{});var MCt=s(Spe);zko=r(MCt,"ctrl"),MCt.forEach(t),Wko=r(_Be," \u2014 "),TV=n(_Be,"A",{href:!0});var ECt=s(TV);Qko=r(ECt,"CTRLLMHeadModel"),ECt.forEach(t),Uko=r(_Be," (CTRL model)"),_Be.forEach(t),Hko=i(O),W1=n(O,"LI",{});var uBe=s(W1);Rpe=n(uBe,"STRONG",{});var CCt=s(Rpe);Jko=r(CCt,"data2vec-text"),CCt.forEach(t),Yko=r(uBe," \u2014 "),MV=n(uBe,"A",{href:!0});var wCt=s(MV);Kko=r(wCt,"Data2VecTextForMaskedLM"),wCt.forEach(t),Zko=r(uBe," (Data2VecText model)"),uBe.forEach(t),eSo=i(O),Q1=n(O,"LI",{});var bBe=s(Q1);Ppe=n(bBe,"STRONG",{});var ACt=s(Ppe);oSo=r(ACt,"deberta"),ACt.forEach(t),rSo=r(bBe," \u2014 "),EV=n(bBe,"A",{href:!0});var LCt=s(EV);tSo=r(LCt,"DebertaForMaskedLM"),LCt.forEach(t),aSo=r(bBe," (DeBERTa model)"),bBe.forEach(t),nSo=i(O),U1=n(O,"LI",{});var vBe=s(U1);Bpe=n(vBe,"STRONG",{});var yCt=s(Bpe);sSo=r(yCt,"deberta-v2"),yCt.forEach(t),lSo=r(vBe," \u2014 "),CV=n(vBe,"A",{href:!0});var xCt=s(CV);iSo=r(xCt,"DebertaV2ForMaskedLM"),xCt.forEach(t),dSo=r(vBe," (DeBERTa-v2 model)"),vBe.forEach(t),cSo=i(O),H1=n(O,"LI",{});var FBe=s(H1);Ipe=n(FBe,"STRONG",{});var $Ct=s(Ipe);fSo=r($Ct,"distilbert"),$Ct.forEach(t),mSo=r(FBe," \u2014 "),wV=n(FBe,"A",{href:!0});var kCt=s(wV);gSo=r(kCt,"DistilBertForMaskedLM"),kCt.forEach(t),hSo=r(FBe," (DistilBERT model)"),FBe.forEach(t),pSo=i(O),J1=n(O,"LI",{});var TBe=s(J1);Npe=n(TBe,"STRONG",{});var SCt=s(Npe);_So=r(SCt,"electra"),SCt.forEach(t),uSo=r(TBe," \u2014 "),AV=n(TBe,"A",{href:!0});var RCt=s(AV);bSo=r(RCt,"ElectraForPreTraining"),RCt.forEach(t),vSo=r(TBe," (ELECTRA model)"),TBe.forEach(t),FSo=i(O),Y1=n(O,"LI",{});var MBe=s(Y1);qpe=n(MBe,"STRONG",{});var PCt=s(qpe);TSo=r(PCt,"flaubert"),PCt.forEach(t),MSo=r(MBe," \u2014 "),LV=n(MBe,"A",{href:!0});var BCt=s(LV);ESo=r(BCt,"FlaubertWithLMHeadModel"),BCt.forEach(t),CSo=r(MBe," (FlauBERT model)"),MBe.forEach(t),wSo=i(O),K1=n(O,"LI",{});var EBe=s(K1);jpe=n(EBe,"STRONG",{});var ICt=s(jpe);ASo=r(ICt,"flava"),ICt.forEach(t),LSo=r(EBe," \u2014 "),yV=n(EBe,"A",{href:!0});var NCt=s(yV);ySo=r(NCt,"FlavaForPreTraining"),NCt.forEach(t),xSo=r(EBe," (FLAVA model)"),EBe.forEach(t),$So=i(O),Z1=n(O,"LI",{});var CBe=s(Z1);Dpe=n(CBe,"STRONG",{});var qCt=s(Dpe);kSo=r(qCt,"fnet"),qCt.forEach(t),SSo=r(CBe," \u2014 "),xV=n(CBe,"A",{href:!0});var jCt=s(xV);RSo=r(jCt,"FNetForPreTraining"),jCt.forEach(t),PSo=r(CBe," (FNet model)"),CBe.forEach(t),BSo=i(O),e8=n(O,"LI",{});var wBe=s(e8);Gpe=n(wBe,"STRONG",{});var DCt=s(Gpe);ISo=r(DCt,"fsmt"),DCt.forEach(t),NSo=r(wBe," \u2014 "),$V=n(wBe,"A",{href:!0});var GCt=s($V);qSo=r(GCt,"FSMTForConditionalGeneration"),GCt.forEach(t),jSo=r(wBe," (FairSeq Machine-Translation model)"),wBe.forEach(t),DSo=i(O),o8=n(O,"LI",{});var ABe=s(o8);Ope=n(ABe,"STRONG",{});var OCt=s(Ope);GSo=r(OCt,"funnel"),OCt.forEach(t),OSo=r(ABe," \u2014 "),kV=n(ABe,"A",{href:!0});var VCt=s(kV);VSo=r(VCt,"FunnelForPreTraining"),VCt.forEach(t),XSo=r(ABe," (Funnel Transformer model)"),ABe.forEach(t),zSo=i(O),r8=n(O,"LI",{});var LBe=s(r8);Vpe=n(LBe,"STRONG",{});var XCt=s(Vpe);WSo=r(XCt,"gpt2"),XCt.forEach(t),QSo=r(LBe," \u2014 "),SV=n(LBe,"A",{href:!0});var zCt=s(SV);USo=r(zCt,"GPT2LMHeadModel"),zCt.forEach(t),HSo=r(LBe," (OpenAI GPT-2 model)"),LBe.forEach(t),JSo=i(O),t8=n(O,"LI",{});var yBe=s(t8);Xpe=n(yBe,"STRONG",{});var WCt=s(Xpe);YSo=r(WCt,"ibert"),WCt.forEach(t),KSo=r(yBe," \u2014 "),RV=n(yBe,"A",{href:!0});var QCt=s(RV);ZSo=r(QCt,"IBertForMaskedLM"),QCt.forEach(t),eRo=r(yBe," (I-BERT model)"),yBe.forEach(t),oRo=i(O),a8=n(O,"LI",{});var xBe=s(a8);zpe=n(xBe,"STRONG",{});var UCt=s(zpe);rRo=r(UCt,"layoutlm"),UCt.forEach(t),tRo=r(xBe," \u2014 "),PV=n(xBe,"A",{href:!0});var HCt=s(PV);aRo=r(HCt,"LayoutLMForMaskedLM"),HCt.forEach(t),nRo=r(xBe," (LayoutLM model)"),xBe.forEach(t),sRo=i(O),n8=n(O,"LI",{});var $Be=s(n8);Wpe=n($Be,"STRONG",{});var JCt=s(Wpe);lRo=r(JCt,"longformer"),JCt.forEach(t),iRo=r($Be," \u2014 "),BV=n($Be,"A",{href:!0});var YCt=s(BV);dRo=r(YCt,"LongformerForMaskedLM"),YCt.forEach(t),cRo=r($Be," (Longformer model)"),$Be.forEach(t),fRo=i(O),s8=n(O,"LI",{});var kBe=s(s8);Qpe=n(kBe,"STRONG",{});var KCt=s(Qpe);mRo=r(KCt,"luke"),KCt.forEach(t),gRo=r(kBe," \u2014 "),IV=n(kBe,"A",{href:!0});var ZCt=s(IV);hRo=r(ZCt,"LukeForMaskedLM"),ZCt.forEach(t),pRo=r(kBe," (LUKE model)"),kBe.forEach(t),_Ro=i(O),l8=n(O,"LI",{});var SBe=s(l8);Upe=n(SBe,"STRONG",{});var e3t=s(Upe);uRo=r(e3t,"lxmert"),e3t.forEach(t),bRo=r(SBe," \u2014 "),NV=n(SBe,"A",{href:!0});var o3t=s(NV);vRo=r(o3t,"LxmertForPreTraining"),o3t.forEach(t),FRo=r(SBe," (LXMERT model)"),SBe.forEach(t),TRo=i(O),i8=n(O,"LI",{});var RBe=s(i8);Hpe=n(RBe,"STRONG",{});var r3t=s(Hpe);MRo=r(r3t,"megatron-bert"),r3t.forEach(t),ERo=r(RBe," \u2014 "),qV=n(RBe,"A",{href:!0});var t3t=s(qV);CRo=r(t3t,"MegatronBertForPreTraining"),t3t.forEach(t),wRo=r(RBe," (Megatron-BERT model)"),RBe.forEach(t),ARo=i(O),d8=n(O,"LI",{});var PBe=s(d8);Jpe=n(PBe,"STRONG",{});var a3t=s(Jpe);LRo=r(a3t,"mobilebert"),a3t.forEach(t),yRo=r(PBe," \u2014 "),jV=n(PBe,"A",{href:!0});var n3t=s(jV);xRo=r(n3t,"MobileBertForPreTraining"),n3t.forEach(t),$Ro=r(PBe," (MobileBERT model)"),PBe.forEach(t),kRo=i(O),c8=n(O,"LI",{});var BBe=s(c8);Ype=n(BBe,"STRONG",{});var s3t=s(Ype);SRo=r(s3t,"mpnet"),s3t.forEach(t),RRo=r(BBe," \u2014 "),DV=n(BBe,"A",{href:!0});var l3t=s(DV);PRo=r(l3t,"MPNetForMaskedLM"),l3t.forEach(t),BRo=r(BBe," (MPNet model)"),BBe.forEach(t),IRo=i(O),f8=n(O,"LI",{});var IBe=s(f8);Kpe=n(IBe,"STRONG",{});var i3t=s(Kpe);NRo=r(i3t,"mvp"),i3t.forEach(t),qRo=r(IBe," \u2014 "),GV=n(IBe,"A",{href:!0});var d3t=s(GV);jRo=r(d3t,"MvpForConditionalGeneration"),d3t.forEach(t),DRo=r(IBe," (MVP model)"),IBe.forEach(t),GRo=i(O),m8=n(O,"LI",{});var NBe=s(m8);Zpe=n(NBe,"STRONG",{});var c3t=s(Zpe);ORo=r(c3t,"nezha"),c3t.forEach(t),VRo=r(NBe," \u2014 "),OV=n(NBe,"A",{href:!0});var f3t=s(OV);XRo=r(f3t,"NezhaForPreTraining"),f3t.forEach(t),zRo=r(NBe," (Nezha model)"),NBe.forEach(t),WRo=i(O),g8=n(O,"LI",{});var qBe=s(g8);e_e=n(qBe,"STRONG",{});var m3t=s(e_e);QRo=r(m3t,"openai-gpt"),m3t.forEach(t),URo=r(qBe," \u2014 "),VV=n(qBe,"A",{href:!0});var g3t=s(VV);HRo=r(g3t,"OpenAIGPTLMHeadModel"),g3t.forEach(t),JRo=r(qBe," (OpenAI GPT model)"),qBe.forEach(t),YRo=i(O),h8=n(O,"LI",{});var jBe=s(h8);o_e=n(jBe,"STRONG",{});var h3t=s(o_e);KRo=r(h3t,"retribert"),h3t.forEach(t),ZRo=r(jBe," \u2014 "),XV=n(jBe,"A",{href:!0});var p3t=s(XV);ePo=r(p3t,"RetriBertModel"),p3t.forEach(t),oPo=r(jBe," (RetriBERT model)"),jBe.forEach(t),rPo=i(O),p8=n(O,"LI",{});var DBe=s(p8);r_e=n(DBe,"STRONG",{});var _3t=s(r_e);tPo=r(_3t,"roberta"),_3t.forEach(t),aPo=r(DBe," \u2014 "),zV=n(DBe,"A",{href:!0});var u3t=s(zV);nPo=r(u3t,"RobertaForMaskedLM"),u3t.forEach(t),sPo=r(DBe," (RoBERTa model)"),DBe.forEach(t),lPo=i(O),_8=n(O,"LI",{});var GBe=s(_8);t_e=n(GBe,"STRONG",{});var b3t=s(t_e);iPo=r(b3t,"splinter"),b3t.forEach(t),dPo=r(GBe," \u2014 "),WV=n(GBe,"A",{href:!0});var v3t=s(WV);cPo=r(v3t,"SplinterForPreTraining"),v3t.forEach(t),fPo=r(GBe," (Splinter model)"),GBe.forEach(t),mPo=i(O),u8=n(O,"LI",{});var OBe=s(u8);a_e=n(OBe,"STRONG",{});var F3t=s(a_e);gPo=r(F3t,"squeezebert"),F3t.forEach(t),hPo=r(OBe," \u2014 "),QV=n(OBe,"A",{href:!0});var T3t=s(QV);pPo=r(T3t,"SqueezeBertForMaskedLM"),T3t.forEach(t),_Po=r(OBe," (SqueezeBERT model)"),OBe.forEach(t),uPo=i(O),b8=n(O,"LI",{});var VBe=s(b8);n_e=n(VBe,"STRONG",{});var M3t=s(n_e);bPo=r(M3t,"t5"),M3t.forEach(t),vPo=r(VBe," \u2014 "),UV=n(VBe,"A",{href:!0});var E3t=s(UV);FPo=r(E3t,"T5ForConditionalGeneration"),E3t.forEach(t),TPo=r(VBe," (T5 model)"),VBe.forEach(t),MPo=i(O),v8=n(O,"LI",{});var XBe=s(v8);s_e=n(XBe,"STRONG",{});var C3t=s(s_e);EPo=r(C3t,"tapas"),C3t.forEach(t),CPo=r(XBe," \u2014 "),HV=n(XBe,"A",{href:!0});var w3t=s(HV);wPo=r(w3t,"TapasForMaskedLM"),w3t.forEach(t),APo=r(XBe," (TAPAS model)"),XBe.forEach(t),LPo=i(O),F8=n(O,"LI",{});var zBe=s(F8);l_e=n(zBe,"STRONG",{});var A3t=s(l_e);yPo=r(A3t,"transfo-xl"),A3t.forEach(t),xPo=r(zBe," \u2014 "),JV=n(zBe,"A",{href:!0});var L3t=s(JV);$Po=r(L3t,"TransfoXLLMHeadModel"),L3t.forEach(t),kPo=r(zBe," (Transformer-XL model)"),zBe.forEach(t),SPo=i(O),T8=n(O,"LI",{});var WBe=s(T8);i_e=n(WBe,"STRONG",{});var y3t=s(i_e);RPo=r(y3t,"unispeech"),y3t.forEach(t),PPo=r(WBe," \u2014 "),YV=n(WBe,"A",{href:!0});var x3t=s(YV);BPo=r(x3t,"UniSpeechForPreTraining"),x3t.forEach(t),IPo=r(WBe," (UniSpeech model)"),WBe.forEach(t),NPo=i(O),M8=n(O,"LI",{});var QBe=s(M8);d_e=n(QBe,"STRONG",{});var $3t=s(d_e);qPo=r($3t,"unispeech-sat"),$3t.forEach(t),jPo=r(QBe," \u2014 "),KV=n(QBe,"A",{href:!0});var k3t=s(KV);DPo=r(k3t,"UniSpeechSatForPreTraining"),k3t.forEach(t),GPo=r(QBe," (UniSpeechSat model)"),QBe.forEach(t),OPo=i(O),E8=n(O,"LI",{});var UBe=s(E8);c_e=n(UBe,"STRONG",{});var S3t=s(c_e);VPo=r(S3t,"videomae"),S3t.forEach(t),XPo=r(UBe," \u2014 "),ZV=n(UBe,"A",{href:!0});var R3t=s(ZV);zPo=r(R3t,"VideoMAEForPreTraining"),R3t.forEach(t),WPo=r(UBe," (VideoMAE model)"),UBe.forEach(t),QPo=i(O),C8=n(O,"LI",{});var HBe=s(C8);f_e=n(HBe,"STRONG",{});var P3t=s(f_e);UPo=r(P3t,"visual_bert"),P3t.forEach(t),HPo=r(HBe," \u2014 "),eX=n(HBe,"A",{href:!0});var B3t=s(eX);JPo=r(B3t,"VisualBertForPreTraining"),B3t.forEach(t),YPo=r(HBe," (VisualBERT model)"),HBe.forEach(t),KPo=i(O),w8=n(O,"LI",{});var JBe=s(w8);m_e=n(JBe,"STRONG",{});var I3t=s(m_e);ZPo=r(I3t,"vit_mae"),I3t.forEach(t),eBo=r(JBe," \u2014 "),oX=n(JBe,"A",{href:!0});var N3t=s(oX);oBo=r(N3t,"ViTMAEForPreTraining"),N3t.forEach(t),rBo=r(JBe," (ViTMAE model)"),JBe.forEach(t),tBo=i(O),A8=n(O,"LI",{});var YBe=s(A8);g_e=n(YBe,"STRONG",{});var q3t=s(g_e);aBo=r(q3t,"wav2vec2"),q3t.forEach(t),nBo=r(YBe," \u2014 "),rX=n(YBe,"A",{href:!0});var j3t=s(rX);sBo=r(j3t,"Wav2Vec2ForPreTraining"),j3t.forEach(t),lBo=r(YBe," (Wav2Vec2 model)"),YBe.forEach(t),iBo=i(O),L8=n(O,"LI",{});var KBe=s(L8);h_e=n(KBe,"STRONG",{});var D3t=s(h_e);dBo=r(D3t,"wav2vec2-conformer"),D3t.forEach(t),cBo=r(KBe," \u2014 "),tX=n(KBe,"A",{href:!0});var G3t=s(tX);fBo=r(G3t,"Wav2Vec2ConformerForPreTraining"),G3t.forEach(t),mBo=r(KBe," (Wav2Vec2-Conformer model)"),KBe.forEach(t),gBo=i(O),y8=n(O,"LI",{});var ZBe=s(y8);p_e=n(ZBe,"STRONG",{});var O3t=s(p_e);hBo=r(O3t,"xlm"),O3t.forEach(t),pBo=r(ZBe," \u2014 "),aX=n(ZBe,"A",{href:!0});var V3t=s(aX);_Bo=r(V3t,"XLMWithLMHeadModel"),V3t.forEach(t),uBo=r(ZBe," (XLM model)"),ZBe.forEach(t),bBo=i(O),x8=n(O,"LI",{});var eIe=s(x8);__e=n(eIe,"STRONG",{});var X3t=s(__e);vBo=r(X3t,"xlm-roberta"),X3t.forEach(t),FBo=r(eIe," \u2014 "),nX=n(eIe,"A",{href:!0});var z3t=s(nX);TBo=r(z3t,"XLMRobertaForMaskedLM"),z3t.forEach(t),MBo=r(eIe," (XLM-RoBERTa model)"),eIe.forEach(t),EBo=i(O),$8=n(O,"LI",{});var oIe=s($8);u_e=n(oIe,"STRONG",{});var W3t=s(u_e);CBo=r(W3t,"xlm-roberta-xl"),W3t.forEach(t),wBo=r(oIe," \u2014 "),sX=n(oIe,"A",{href:!0});var Q3t=s(sX);ABo=r(Q3t,"XLMRobertaXLForMaskedLM"),Q3t.forEach(t),LBo=r(oIe," (XLM-RoBERTa-XL model)"),oIe.forEach(t),yBo=i(O),k8=n(O,"LI",{});var rIe=s(k8);b_e=n(rIe,"STRONG",{});var U3t=s(b_e);xBo=r(U3t,"xlnet"),U3t.forEach(t),$Bo=r(rIe," \u2014 "),lX=n(rIe,"A",{href:!0});var H3t=s(lX);kBo=r(H3t,"XLNetLMHeadModel"),H3t.forEach(t),SBo=r(rIe," (XLNet model)"),rIe.forEach(t),O.forEach(t),RBo=i(ua),S8=n(ua,"P",{});var tIe=s(S8);PBo=r(tIe,"The model is set in evaluation mode by default using "),v_e=n(tIe,"CODE",{});var J3t=s(v_e);BBo=r(J3t,"model.eval()"),J3t.forEach(t),IBo=r(tIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F_e=n(tIe,"CODE",{});var Y3t=s(F_e);NBo=r(Y3t,"model.train()"),Y3t.forEach(t),tIe.forEach(t),qBo=i(ua),T(R8.$$.fragment,ua),ua.forEach(t),Fl.forEach(t),JUe=i(f),hd=n(f,"H2",{class:!0});var iYe=s(hd);P8=n(iYe,"A",{id:!0,class:!0,href:!0});var K3t=s(P8);T_e=n(K3t,"SPAN",{});var Z3t=s(T_e);T(g9.$$.fragment,Z3t),Z3t.forEach(t),K3t.forEach(t),jBo=i(iYe),M_e=n(iYe,"SPAN",{});var e5t=s(M_e);DBo=r(e5t,"AutoModelForCausalLM"),e5t.forEach(t),iYe.forEach(t),YUe=i(f),Bo=n(f,"DIV",{class:!0});var Tl=s(Bo);T(h9.$$.fragment,Tl),GBo=i(Tl),pd=n(Tl,"P",{});var une=s(pd);OBo=r(une,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),iX=n(une,"A",{href:!0});var o5t=s(iX);VBo=r(o5t,"from_pretrained()"),o5t.forEach(t),XBo=r(une," class method or the "),dX=n(une,"A",{href:!0});var r5t=s(dX);zBo=r(r5t,"from_config()"),r5t.forEach(t),WBo=r(une,` class
method.`),une.forEach(t),QBo=i(Tl),p9=n(Tl,"P",{});var dYe=s(p9);UBo=r(dYe,"This class cannot be instantiated directly using "),E_e=n(dYe,"CODE",{});var t5t=s(E_e);HBo=r(t5t,"__init__()"),t5t.forEach(t),JBo=r(dYe," (throws an error)."),dYe.forEach(t),YBo=i(Tl),_t=n(Tl,"DIV",{class:!0});var S7=s(_t);T(_9.$$.fragment,S7),KBo=i(S7),C_e=n(S7,"P",{});var a5t=s(C_e);ZBo=r(a5t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),a5t.forEach(t),eIo=i(S7),_d=n(S7,"P",{});var bne=s(_d);oIo=r(bne,`Note:
Loading a model from its configuration file does `),w_e=n(bne,"STRONG",{});var n5t=s(w_e);rIo=r(n5t,"not"),n5t.forEach(t),tIo=r(bne,` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=n(bne,"A",{href:!0});var s5t=s(cX);aIo=r(s5t,"from_pretrained()"),s5t.forEach(t),nIo=r(bne," to load the model weights."),bne.forEach(t),sIo=i(S7),T(B8.$$.fragment,S7),S7.forEach(t),lIo=i(Tl),Ze=n(Tl,"DIV",{class:!0});var ba=s(Ze);T(u9.$$.fragment,ba),iIo=i(ba),A_e=n(ba,"P",{});var l5t=s(A_e);dIo=r(l5t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),l5t.forEach(t),cIo=i(ba),Ha=n(ba,"P",{});var R7=s(Ha);fIo=r(R7,"The model class to instantiate is selected based on the "),L_e=n(R7,"CODE",{});var i5t=s(L_e);mIo=r(i5t,"model_type"),i5t.forEach(t),gIo=r(R7,` property of the config object (either
passed as an argument or loaded from `),y_e=n(R7,"CODE",{});var d5t=s(y_e);hIo=r(d5t,"pretrained_model_name_or_path"),d5t.forEach(t),pIo=r(R7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=n(R7,"CODE",{});var c5t=s(x_e);_Io=r(c5t,"pretrained_model_name_or_path"),c5t.forEach(t),uIo=r(R7,":"),R7.forEach(t),bIo=i(ba),z=n(ba,"UL",{});var W=s(z);I8=n(W,"LI",{});var aIe=s(I8);$_e=n(aIe,"STRONG",{});var f5t=s($_e);vIo=r(f5t,"bart"),f5t.forEach(t),FIo=r(aIe," \u2014 "),fX=n(aIe,"A",{href:!0});var m5t=s(fX);TIo=r(m5t,"BartForCausalLM"),m5t.forEach(t),MIo=r(aIe," (BART model)"),aIe.forEach(t),EIo=i(W),N8=n(W,"LI",{});var nIe=s(N8);k_e=n(nIe,"STRONG",{});var g5t=s(k_e);CIo=r(g5t,"bert"),g5t.forEach(t),wIo=r(nIe," \u2014 "),mX=n(nIe,"A",{href:!0});var h5t=s(mX);AIo=r(h5t,"BertLMHeadModel"),h5t.forEach(t),LIo=r(nIe," (BERT model)"),nIe.forEach(t),yIo=i(W),q8=n(W,"LI",{});var sIe=s(q8);S_e=n(sIe,"STRONG",{});var p5t=s(S_e);xIo=r(p5t,"bert-generation"),p5t.forEach(t),$Io=r(sIe," \u2014 "),gX=n(sIe,"A",{href:!0});var _5t=s(gX);kIo=r(_5t,"BertGenerationDecoder"),_5t.forEach(t),SIo=r(sIe," (Bert Generation model)"),sIe.forEach(t),RIo=i(W),j8=n(W,"LI",{});var lIe=s(j8);R_e=n(lIe,"STRONG",{});var u5t=s(R_e);PIo=r(u5t,"big_bird"),u5t.forEach(t),BIo=r(lIe," \u2014 "),hX=n(lIe,"A",{href:!0});var b5t=s(hX);IIo=r(b5t,"BigBirdForCausalLM"),b5t.forEach(t),NIo=r(lIe," (BigBird model)"),lIe.forEach(t),qIo=i(W),D8=n(W,"LI",{});var iIe=s(D8);P_e=n(iIe,"STRONG",{});var v5t=s(P_e);jIo=r(v5t,"bigbird_pegasus"),v5t.forEach(t),DIo=r(iIe," \u2014 "),pX=n(iIe,"A",{href:!0});var F5t=s(pX);GIo=r(F5t,"BigBirdPegasusForCausalLM"),F5t.forEach(t),OIo=r(iIe," (BigBird-Pegasus model)"),iIe.forEach(t),VIo=i(W),G8=n(W,"LI",{});var dIe=s(G8);B_e=n(dIe,"STRONG",{});var T5t=s(B_e);XIo=r(T5t,"blenderbot"),T5t.forEach(t),zIo=r(dIe," \u2014 "),_X=n(dIe,"A",{href:!0});var M5t=s(_X);WIo=r(M5t,"BlenderbotForCausalLM"),M5t.forEach(t),QIo=r(dIe," (Blenderbot model)"),dIe.forEach(t),UIo=i(W),O8=n(W,"LI",{});var cIe=s(O8);I_e=n(cIe,"STRONG",{});var E5t=s(I_e);HIo=r(E5t,"blenderbot-small"),E5t.forEach(t),JIo=r(cIe," \u2014 "),uX=n(cIe,"A",{href:!0});var C5t=s(uX);YIo=r(C5t,"BlenderbotSmallForCausalLM"),C5t.forEach(t),KIo=r(cIe," (BlenderbotSmall model)"),cIe.forEach(t),ZIo=i(W),V8=n(W,"LI",{});var fIe=s(V8);N_e=n(fIe,"STRONG",{});var w5t=s(N_e);eNo=r(w5t,"bloom"),w5t.forEach(t),oNo=r(fIe," \u2014 "),bX=n(fIe,"A",{href:!0});var A5t=s(bX);rNo=r(A5t,"BloomForCausalLM"),A5t.forEach(t),tNo=r(fIe," (BLOOM model)"),fIe.forEach(t),aNo=i(W),X8=n(W,"LI",{});var mIe=s(X8);q_e=n(mIe,"STRONG",{});var L5t=s(q_e);nNo=r(L5t,"camembert"),L5t.forEach(t),sNo=r(mIe," \u2014 "),vX=n(mIe,"A",{href:!0});var y5t=s(vX);lNo=r(y5t,"CamembertForCausalLM"),y5t.forEach(t),iNo=r(mIe," (CamemBERT model)"),mIe.forEach(t),dNo=i(W),z8=n(W,"LI",{});var gIe=s(z8);j_e=n(gIe,"STRONG",{});var x5t=s(j_e);cNo=r(x5t,"codegen"),x5t.forEach(t),fNo=r(gIe," \u2014 "),FX=n(gIe,"A",{href:!0});var $5t=s(FX);mNo=r($5t,"CodeGenForCausalLM"),$5t.forEach(t),gNo=r(gIe," (CodeGen model)"),gIe.forEach(t),hNo=i(W),W8=n(W,"LI",{});var hIe=s(W8);D_e=n(hIe,"STRONG",{});var k5t=s(D_e);pNo=r(k5t,"ctrl"),k5t.forEach(t),_No=r(hIe," \u2014 "),TX=n(hIe,"A",{href:!0});var S5t=s(TX);uNo=r(S5t,"CTRLLMHeadModel"),S5t.forEach(t),bNo=r(hIe," (CTRL model)"),hIe.forEach(t),vNo=i(W),Q8=n(W,"LI",{});var pIe=s(Q8);G_e=n(pIe,"STRONG",{});var R5t=s(G_e);FNo=r(R5t,"data2vec-text"),R5t.forEach(t),TNo=r(pIe," \u2014 "),MX=n(pIe,"A",{href:!0});var P5t=s(MX);MNo=r(P5t,"Data2VecTextForCausalLM"),P5t.forEach(t),ENo=r(pIe," (Data2VecText model)"),pIe.forEach(t),CNo=i(W),U8=n(W,"LI",{});var _Ie=s(U8);O_e=n(_Ie,"STRONG",{});var B5t=s(O_e);wNo=r(B5t,"electra"),B5t.forEach(t),ANo=r(_Ie," \u2014 "),EX=n(_Ie,"A",{href:!0});var I5t=s(EX);LNo=r(I5t,"ElectraForCausalLM"),I5t.forEach(t),yNo=r(_Ie," (ELECTRA model)"),_Ie.forEach(t),xNo=i(W),H8=n(W,"LI",{});var uIe=s(H8);V_e=n(uIe,"STRONG",{});var N5t=s(V_e);$No=r(N5t,"gpt2"),N5t.forEach(t),kNo=r(uIe," \u2014 "),CX=n(uIe,"A",{href:!0});var q5t=s(CX);SNo=r(q5t,"GPT2LMHeadModel"),q5t.forEach(t),RNo=r(uIe," (OpenAI GPT-2 model)"),uIe.forEach(t),PNo=i(W),J8=n(W,"LI",{});var bIe=s(J8);X_e=n(bIe,"STRONG",{});var j5t=s(X_e);BNo=r(j5t,"gpt_neo"),j5t.forEach(t),INo=r(bIe," \u2014 "),wX=n(bIe,"A",{href:!0});var D5t=s(wX);NNo=r(D5t,"GPTNeoForCausalLM"),D5t.forEach(t),qNo=r(bIe," (GPT Neo model)"),bIe.forEach(t),jNo=i(W),Y8=n(W,"LI",{});var vIe=s(Y8);z_e=n(vIe,"STRONG",{});var G5t=s(z_e);DNo=r(G5t,"gpt_neox"),G5t.forEach(t),GNo=r(vIe," \u2014 "),AX=n(vIe,"A",{href:!0});var O5t=s(AX);ONo=r(O5t,"GPTNeoXForCausalLM"),O5t.forEach(t),VNo=r(vIe," (GPT NeoX model)"),vIe.forEach(t),XNo=i(W),K8=n(W,"LI",{});var FIe=s(K8);W_e=n(FIe,"STRONG",{});var V5t=s(W_e);zNo=r(V5t,"gptj"),V5t.forEach(t),WNo=r(FIe," \u2014 "),LX=n(FIe,"A",{href:!0});var X5t=s(LX);QNo=r(X5t,"GPTJForCausalLM"),X5t.forEach(t),UNo=r(FIe," (GPT-J model)"),FIe.forEach(t),HNo=i(W),Z8=n(W,"LI",{});var TIe=s(Z8);Q_e=n(TIe,"STRONG",{});var z5t=s(Q_e);JNo=r(z5t,"marian"),z5t.forEach(t),YNo=r(TIe," \u2014 "),yX=n(TIe,"A",{href:!0});var W5t=s(yX);KNo=r(W5t,"MarianForCausalLM"),W5t.forEach(t),ZNo=r(TIe," (Marian model)"),TIe.forEach(t),eqo=i(W),eb=n(W,"LI",{});var MIe=s(eb);U_e=n(MIe,"STRONG",{});var Q5t=s(U_e);oqo=r(Q5t,"mbart"),Q5t.forEach(t),rqo=r(MIe," \u2014 "),xX=n(MIe,"A",{href:!0});var U5t=s(xX);tqo=r(U5t,"MBartForCausalLM"),U5t.forEach(t),aqo=r(MIe," (mBART model)"),MIe.forEach(t),nqo=i(W),ob=n(W,"LI",{});var EIe=s(ob);H_e=n(EIe,"STRONG",{});var H5t=s(H_e);sqo=r(H5t,"megatron-bert"),H5t.forEach(t),lqo=r(EIe," \u2014 "),$X=n(EIe,"A",{href:!0});var J5t=s($X);iqo=r(J5t,"MegatronBertForCausalLM"),J5t.forEach(t),dqo=r(EIe," (Megatron-BERT model)"),EIe.forEach(t),cqo=i(W),rb=n(W,"LI",{});var CIe=s(rb);J_e=n(CIe,"STRONG",{});var Y5t=s(J_e);fqo=r(Y5t,"mvp"),Y5t.forEach(t),mqo=r(CIe," \u2014 "),kX=n(CIe,"A",{href:!0});var K5t=s(kX);gqo=r(K5t,"MvpForCausalLM"),K5t.forEach(t),hqo=r(CIe," (MVP model)"),CIe.forEach(t),pqo=i(W),tb=n(W,"LI",{});var wIe=s(tb);Y_e=n(wIe,"STRONG",{});var Z5t=s(Y_e);_qo=r(Z5t,"openai-gpt"),Z5t.forEach(t),uqo=r(wIe," \u2014 "),SX=n(wIe,"A",{href:!0});var e0t=s(SX);bqo=r(e0t,"OpenAIGPTLMHeadModel"),e0t.forEach(t),vqo=r(wIe," (OpenAI GPT model)"),wIe.forEach(t),Fqo=i(W),ab=n(W,"LI",{});var AIe=s(ab);K_e=n(AIe,"STRONG",{});var o0t=s(K_e);Tqo=r(o0t,"opt"),o0t.forEach(t),Mqo=r(AIe," \u2014 "),RX=n(AIe,"A",{href:!0});var r0t=s(RX);Eqo=r(r0t,"OPTForCausalLM"),r0t.forEach(t),Cqo=r(AIe," (OPT model)"),AIe.forEach(t),wqo=i(W),nb=n(W,"LI",{});var LIe=s(nb);Z_e=n(LIe,"STRONG",{});var t0t=s(Z_e);Aqo=r(t0t,"pegasus"),t0t.forEach(t),Lqo=r(LIe," \u2014 "),PX=n(LIe,"A",{href:!0});var a0t=s(PX);yqo=r(a0t,"PegasusForCausalLM"),a0t.forEach(t),xqo=r(LIe," (Pegasus model)"),LIe.forEach(t),$qo=i(W),sb=n(W,"LI",{});var yIe=s(sb);eue=n(yIe,"STRONG",{});var n0t=s(eue);kqo=r(n0t,"plbart"),n0t.forEach(t),Sqo=r(yIe," \u2014 "),BX=n(yIe,"A",{href:!0});var s0t=s(BX);Rqo=r(s0t,"PLBartForCausalLM"),s0t.forEach(t),Pqo=r(yIe," (PLBart model)"),yIe.forEach(t),Bqo=i(W),lb=n(W,"LI",{});var xIe=s(lb);oue=n(xIe,"STRONG",{});var l0t=s(oue);Iqo=r(l0t,"prophetnet"),l0t.forEach(t),Nqo=r(xIe," \u2014 "),IX=n(xIe,"A",{href:!0});var i0t=s(IX);qqo=r(i0t,"ProphetNetForCausalLM"),i0t.forEach(t),jqo=r(xIe," (ProphetNet model)"),xIe.forEach(t),Dqo=i(W),ib=n(W,"LI",{});var $Ie=s(ib);rue=n($Ie,"STRONG",{});var d0t=s(rue);Gqo=r(d0t,"qdqbert"),d0t.forEach(t),Oqo=r($Ie," \u2014 "),NX=n($Ie,"A",{href:!0});var c0t=s(NX);Vqo=r(c0t,"QDQBertLMHeadModel"),c0t.forEach(t),Xqo=r($Ie," (QDQBert model)"),$Ie.forEach(t),zqo=i(W),db=n(W,"LI",{});var kIe=s(db);tue=n(kIe,"STRONG",{});var f0t=s(tue);Wqo=r(f0t,"reformer"),f0t.forEach(t),Qqo=r(kIe," \u2014 "),qX=n(kIe,"A",{href:!0});var m0t=s(qX);Uqo=r(m0t,"ReformerModelWithLMHead"),m0t.forEach(t),Hqo=r(kIe," (Reformer model)"),kIe.forEach(t),Jqo=i(W),cb=n(W,"LI",{});var SIe=s(cb);aue=n(SIe,"STRONG",{});var g0t=s(aue);Yqo=r(g0t,"rembert"),g0t.forEach(t),Kqo=r(SIe," \u2014 "),jX=n(SIe,"A",{href:!0});var h0t=s(jX);Zqo=r(h0t,"RemBertForCausalLM"),h0t.forEach(t),ejo=r(SIe," (RemBERT model)"),SIe.forEach(t),ojo=i(W),fb=n(W,"LI",{});var RIe=s(fb);nue=n(RIe,"STRONG",{});var p0t=s(nue);rjo=r(p0t,"roberta"),p0t.forEach(t),tjo=r(RIe," \u2014 "),DX=n(RIe,"A",{href:!0});var _0t=s(DX);ajo=r(_0t,"RobertaForCausalLM"),_0t.forEach(t),njo=r(RIe," (RoBERTa model)"),RIe.forEach(t),sjo=i(W),mb=n(W,"LI",{});var PIe=s(mb);sue=n(PIe,"STRONG",{});var u0t=s(sue);ljo=r(u0t,"roformer"),u0t.forEach(t),ijo=r(PIe," \u2014 "),GX=n(PIe,"A",{href:!0});var b0t=s(GX);djo=r(b0t,"RoFormerForCausalLM"),b0t.forEach(t),cjo=r(PIe," (RoFormer model)"),PIe.forEach(t),fjo=i(W),gb=n(W,"LI",{});var BIe=s(gb);lue=n(BIe,"STRONG",{});var v0t=s(lue);mjo=r(v0t,"speech_to_text_2"),v0t.forEach(t),gjo=r(BIe," \u2014 "),OX=n(BIe,"A",{href:!0});var F0t=s(OX);hjo=r(F0t,"Speech2Text2ForCausalLM"),F0t.forEach(t),pjo=r(BIe," (Speech2Text2 model)"),BIe.forEach(t),_jo=i(W),hb=n(W,"LI",{});var IIe=s(hb);iue=n(IIe,"STRONG",{});var T0t=s(iue);ujo=r(T0t,"transfo-xl"),T0t.forEach(t),bjo=r(IIe," \u2014 "),VX=n(IIe,"A",{href:!0});var M0t=s(VX);vjo=r(M0t,"TransfoXLLMHeadModel"),M0t.forEach(t),Fjo=r(IIe," (Transformer-XL model)"),IIe.forEach(t),Tjo=i(W),pb=n(W,"LI",{});var NIe=s(pb);due=n(NIe,"STRONG",{});var E0t=s(due);Mjo=r(E0t,"trocr"),E0t.forEach(t),Ejo=r(NIe," \u2014 "),XX=n(NIe,"A",{href:!0});var C0t=s(XX);Cjo=r(C0t,"TrOCRForCausalLM"),C0t.forEach(t),wjo=r(NIe," (TrOCR model)"),NIe.forEach(t),Ajo=i(W),_b=n(W,"LI",{});var qIe=s(_b);cue=n(qIe,"STRONG",{});var w0t=s(cue);Ljo=r(w0t,"xglm"),w0t.forEach(t),yjo=r(qIe," \u2014 "),zX=n(qIe,"A",{href:!0});var A0t=s(zX);xjo=r(A0t,"XGLMForCausalLM"),A0t.forEach(t),$jo=r(qIe," (XGLM model)"),qIe.forEach(t),kjo=i(W),ub=n(W,"LI",{});var jIe=s(ub);fue=n(jIe,"STRONG",{});var L0t=s(fue);Sjo=r(L0t,"xlm"),L0t.forEach(t),Rjo=r(jIe," \u2014 "),WX=n(jIe,"A",{href:!0});var y0t=s(WX);Pjo=r(y0t,"XLMWithLMHeadModel"),y0t.forEach(t),Bjo=r(jIe," (XLM model)"),jIe.forEach(t),Ijo=i(W),bb=n(W,"LI",{});var DIe=s(bb);mue=n(DIe,"STRONG",{});var x0t=s(mue);Njo=r(x0t,"xlm-prophetnet"),x0t.forEach(t),qjo=r(DIe," \u2014 "),QX=n(DIe,"A",{href:!0});var $0t=s(QX);jjo=r($0t,"XLMProphetNetForCausalLM"),$0t.forEach(t),Djo=r(DIe," (XLM-ProphetNet model)"),DIe.forEach(t),Gjo=i(W),vb=n(W,"LI",{});var GIe=s(vb);gue=n(GIe,"STRONG",{});var k0t=s(gue);Ojo=r(k0t,"xlm-roberta"),k0t.forEach(t),Vjo=r(GIe," \u2014 "),UX=n(GIe,"A",{href:!0});var S0t=s(UX);Xjo=r(S0t,"XLMRobertaForCausalLM"),S0t.forEach(t),zjo=r(GIe," (XLM-RoBERTa model)"),GIe.forEach(t),Wjo=i(W),Fb=n(W,"LI",{});var OIe=s(Fb);hue=n(OIe,"STRONG",{});var R0t=s(hue);Qjo=r(R0t,"xlm-roberta-xl"),R0t.forEach(t),Ujo=r(OIe," \u2014 "),HX=n(OIe,"A",{href:!0});var P0t=s(HX);Hjo=r(P0t,"XLMRobertaXLForCausalLM"),P0t.forEach(t),Jjo=r(OIe," (XLM-RoBERTa-XL model)"),OIe.forEach(t),Yjo=i(W),Tb=n(W,"LI",{});var VIe=s(Tb);pue=n(VIe,"STRONG",{});var B0t=s(pue);Kjo=r(B0t,"xlnet"),B0t.forEach(t),Zjo=r(VIe," \u2014 "),JX=n(VIe,"A",{href:!0});var I0t=s(JX);eDo=r(I0t,"XLNetLMHeadModel"),I0t.forEach(t),oDo=r(VIe," (XLNet model)"),VIe.forEach(t),W.forEach(t),rDo=i(ba),Mb=n(ba,"P",{});var XIe=s(Mb);tDo=r(XIe,"The model is set in evaluation mode by default using "),_ue=n(XIe,"CODE",{});var N0t=s(_ue);aDo=r(N0t,"model.eval()"),N0t.forEach(t),nDo=r(XIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uue=n(XIe,"CODE",{});var q0t=s(uue);sDo=r(q0t,"model.train()"),q0t.forEach(t),XIe.forEach(t),lDo=i(ba),T(Eb.$$.fragment,ba),ba.forEach(t),Tl.forEach(t),KUe=i(f),ud=n(f,"H2",{class:!0});var cYe=s(ud);Cb=n(cYe,"A",{id:!0,class:!0,href:!0});var j0t=s(Cb);bue=n(j0t,"SPAN",{});var D0t=s(bue);T(b9.$$.fragment,D0t),D0t.forEach(t),j0t.forEach(t),iDo=i(cYe),vue=n(cYe,"SPAN",{});var G0t=s(vue);dDo=r(G0t,"AutoModelForDepthEstimation"),G0t.forEach(t),cYe.forEach(t),ZUe=i(f),Io=n(f,"DIV",{class:!0});var Ml=s(Io);T(v9.$$.fragment,Ml),cDo=i(Ml),bd=n(Ml,"P",{});var vne=s(bd);fDo=r(vne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a depth estimation head) when created
with the `),YX=n(vne,"A",{href:!0});var O0t=s(YX);mDo=r(O0t,"from_pretrained()"),O0t.forEach(t),gDo=r(vne," class method or the "),KX=n(vne,"A",{href:!0});var V0t=s(KX);hDo=r(V0t,"from_config()"),V0t.forEach(t),pDo=r(vne,` class
method.`),vne.forEach(t),_Do=i(Ml),F9=n(Ml,"P",{});var fYe=s(F9);uDo=r(fYe,"This class cannot be instantiated directly using "),Fue=n(fYe,"CODE",{});var X0t=s(Fue);bDo=r(X0t,"__init__()"),X0t.forEach(t),vDo=r(fYe," (throws an error)."),fYe.forEach(t),FDo=i(Ml),ut=n(Ml,"DIV",{class:!0});var P7=s(ut);T(T9.$$.fragment,P7),TDo=i(P7),Tue=n(P7,"P",{});var z0t=s(Tue);MDo=r(z0t,"Instantiates one of the model classes of the library (with a depth estimation head) from a configuration."),z0t.forEach(t),EDo=i(P7),vd=n(P7,"P",{});var Fne=s(vd);CDo=r(Fne,`Note:
Loading a model from its configuration file does `),Mue=n(Fne,"STRONG",{});var W0t=s(Mue);wDo=r(W0t,"not"),W0t.forEach(t),ADo=r(Fne,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(Fne,"A",{href:!0});var Q0t=s(ZX);LDo=r(Q0t,"from_pretrained()"),Q0t.forEach(t),yDo=r(Fne," to load the model weights."),Fne.forEach(t),xDo=i(P7),T(wb.$$.fragment,P7),P7.forEach(t),$Do=i(Ml),eo=n(Ml,"DIV",{class:!0});var va=s(eo);T(M9.$$.fragment,va),kDo=i(va),Eue=n(va,"P",{});var U0t=s(Eue);SDo=r(U0t,"Instantiate one of the model classes of the library (with a depth estimation head) from a pretrained model."),U0t.forEach(t),RDo=i(va),Ja=n(va,"P",{});var B7=s(Ja);PDo=r(B7,"The model class to instantiate is selected based on the "),Cue=n(B7,"CODE",{});var H0t=s(Cue);BDo=r(H0t,"model_type"),H0t.forEach(t),IDo=r(B7,` property of the config object (either
passed as an argument or loaded from `),wue=n(B7,"CODE",{});var J0t=s(wue);NDo=r(J0t,"pretrained_model_name_or_path"),J0t.forEach(t),qDo=r(B7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=n(B7,"CODE",{});var Y0t=s(Aue);jDo=r(Y0t,"pretrained_model_name_or_path"),Y0t.forEach(t),DDo=r(B7,":"),B7.forEach(t),GDo=i(va),E9=n(va,"UL",{});var mYe=s(E9);Ab=n(mYe,"LI",{});var zIe=s(Ab);Lue=n(zIe,"STRONG",{});var K0t=s(Lue);ODo=r(K0t,"dpt"),K0t.forEach(t),VDo=r(zIe," \u2014 "),yue=n(zIe,"CODE",{});var Z0t=s(yue);XDo=r(Z0t,"DptForDepthEstimation"),Z0t.forEach(t),zDo=r(zIe," (DPT model)"),zIe.forEach(t),WDo=i(mYe),Lb=n(mYe,"LI",{});var WIe=s(Lb);xue=n(WIe,"STRONG",{});var ewt=s(xue);QDo=r(ewt,"glpn"),ewt.forEach(t),UDo=r(WIe," \u2014 "),$ue=n(WIe,"CODE",{});var owt=s($ue);HDo=r(owt,"GlpnForDepthEstimation"),owt.forEach(t),JDo=r(WIe," (GLPN model)"),WIe.forEach(t),mYe.forEach(t),YDo=i(va),yb=n(va,"P",{});var QIe=s(yb);KDo=r(QIe,"The model is set in evaluation mode by default using "),kue=n(QIe,"CODE",{});var rwt=s(kue);ZDo=r(rwt,"model.eval()"),rwt.forEach(t),eGo=r(QIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sue=n(QIe,"CODE",{});var twt=s(Sue);oGo=r(twt,"model.train()"),twt.forEach(t),QIe.forEach(t),rGo=i(va),T(xb.$$.fragment,va),va.forEach(t),Ml.forEach(t),eHe=i(f),Fd=n(f,"H2",{class:!0});var gYe=s(Fd);$b=n(gYe,"A",{id:!0,class:!0,href:!0});var awt=s($b);Rue=n(awt,"SPAN",{});var nwt=s(Rue);T(C9.$$.fragment,nwt),nwt.forEach(t),awt.forEach(t),tGo=i(gYe),Pue=n(gYe,"SPAN",{});var swt=s(Pue);aGo=r(swt,"AutoModelForMaskedLM"),swt.forEach(t),gYe.forEach(t),oHe=i(f),No=n(f,"DIV",{class:!0});var El=s(No);T(w9.$$.fragment,El),nGo=i(El),Td=n(El,"P",{});var Tne=s(Td);sGo=r(Tne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ez=n(Tne,"A",{href:!0});var lwt=s(ez);lGo=r(lwt,"from_pretrained()"),lwt.forEach(t),iGo=r(Tne," class method or the "),oz=n(Tne,"A",{href:!0});var iwt=s(oz);dGo=r(iwt,"from_config()"),iwt.forEach(t),cGo=r(Tne,` class
method.`),Tne.forEach(t),fGo=i(El),A9=n(El,"P",{});var hYe=s(A9);mGo=r(hYe,"This class cannot be instantiated directly using "),Bue=n(hYe,"CODE",{});var dwt=s(Bue);gGo=r(dwt,"__init__()"),dwt.forEach(t),hGo=r(hYe," (throws an error)."),hYe.forEach(t),pGo=i(El),bt=n(El,"DIV",{class:!0});var I7=s(bt);T(L9.$$.fragment,I7),_Go=i(I7),Iue=n(I7,"P",{});var cwt=s(Iue);uGo=r(cwt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),cwt.forEach(t),bGo=i(I7),Md=n(I7,"P",{});var Mne=s(Md);vGo=r(Mne,`Note:
Loading a model from its configuration file does `),Nue=n(Mne,"STRONG",{});var fwt=s(Nue);FGo=r(fwt,"not"),fwt.forEach(t),TGo=r(Mne,` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=n(Mne,"A",{href:!0});var mwt=s(rz);MGo=r(mwt,"from_pretrained()"),mwt.forEach(t),EGo=r(Mne," to load the model weights."),Mne.forEach(t),CGo=i(I7),T(kb.$$.fragment,I7),I7.forEach(t),wGo=i(El),oo=n(El,"DIV",{class:!0});var Fa=s(oo);T(y9.$$.fragment,Fa),AGo=i(Fa),que=n(Fa,"P",{});var gwt=s(que);LGo=r(gwt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),gwt.forEach(t),yGo=i(Fa),Ya=n(Fa,"P",{});var N7=s(Ya);xGo=r(N7,"The model class to instantiate is selected based on the "),jue=n(N7,"CODE",{});var hwt=s(jue);$Go=r(hwt,"model_type"),hwt.forEach(t),kGo=r(N7,` property of the config object (either
passed as an argument or loaded from `),Due=n(N7,"CODE",{});var pwt=s(Due);SGo=r(pwt,"pretrained_model_name_or_path"),pwt.forEach(t),RGo=r(N7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=n(N7,"CODE",{});var _wt=s(Gue);PGo=r(_wt,"pretrained_model_name_or_path"),_wt.forEach(t),BGo=r(N7,":"),N7.forEach(t),IGo=i(Fa),U=n(Fa,"UL",{});var Y=s(U);Sb=n(Y,"LI",{});var UIe=s(Sb);Oue=n(UIe,"STRONG",{});var uwt=s(Oue);NGo=r(uwt,"albert"),uwt.forEach(t),qGo=r(UIe," \u2014 "),tz=n(UIe,"A",{href:!0});var bwt=s(tz);jGo=r(bwt,"AlbertForMaskedLM"),bwt.forEach(t),DGo=r(UIe," (ALBERT model)"),UIe.forEach(t),GGo=i(Y),Rb=n(Y,"LI",{});var HIe=s(Rb);Vue=n(HIe,"STRONG",{});var vwt=s(Vue);OGo=r(vwt,"bart"),vwt.forEach(t),VGo=r(HIe," \u2014 "),az=n(HIe,"A",{href:!0});var Fwt=s(az);XGo=r(Fwt,"BartForConditionalGeneration"),Fwt.forEach(t),zGo=r(HIe," (BART model)"),HIe.forEach(t),WGo=i(Y),Pb=n(Y,"LI",{});var JIe=s(Pb);Xue=n(JIe,"STRONG",{});var Twt=s(Xue);QGo=r(Twt,"bert"),Twt.forEach(t),UGo=r(JIe," \u2014 "),nz=n(JIe,"A",{href:!0});var Mwt=s(nz);HGo=r(Mwt,"BertForMaskedLM"),Mwt.forEach(t),JGo=r(JIe," (BERT model)"),JIe.forEach(t),YGo=i(Y),Bb=n(Y,"LI",{});var YIe=s(Bb);zue=n(YIe,"STRONG",{});var Ewt=s(zue);KGo=r(Ewt,"big_bird"),Ewt.forEach(t),ZGo=r(YIe," \u2014 "),sz=n(YIe,"A",{href:!0});var Cwt=s(sz);eOo=r(Cwt,"BigBirdForMaskedLM"),Cwt.forEach(t),oOo=r(YIe," (BigBird model)"),YIe.forEach(t),rOo=i(Y),Ib=n(Y,"LI",{});var KIe=s(Ib);Wue=n(KIe,"STRONG",{});var wwt=s(Wue);tOo=r(wwt,"camembert"),wwt.forEach(t),aOo=r(KIe," \u2014 "),lz=n(KIe,"A",{href:!0});var Awt=s(lz);nOo=r(Awt,"CamembertForMaskedLM"),Awt.forEach(t),sOo=r(KIe," (CamemBERT model)"),KIe.forEach(t),lOo=i(Y),Nb=n(Y,"LI",{});var ZIe=s(Nb);Que=n(ZIe,"STRONG",{});var Lwt=s(Que);iOo=r(Lwt,"convbert"),Lwt.forEach(t),dOo=r(ZIe," \u2014 "),iz=n(ZIe,"A",{href:!0});var ywt=s(iz);cOo=r(ywt,"ConvBertForMaskedLM"),ywt.forEach(t),fOo=r(ZIe," (ConvBERT model)"),ZIe.forEach(t),mOo=i(Y),qb=n(Y,"LI",{});var eNe=s(qb);Uue=n(eNe,"STRONG",{});var xwt=s(Uue);gOo=r(xwt,"data2vec-text"),xwt.forEach(t),hOo=r(eNe," \u2014 "),dz=n(eNe,"A",{href:!0});var $wt=s(dz);pOo=r($wt,"Data2VecTextForMaskedLM"),$wt.forEach(t),_Oo=r(eNe," (Data2VecText model)"),eNe.forEach(t),uOo=i(Y),jb=n(Y,"LI",{});var oNe=s(jb);Hue=n(oNe,"STRONG",{});var kwt=s(Hue);bOo=r(kwt,"deberta"),kwt.forEach(t),vOo=r(oNe," \u2014 "),cz=n(oNe,"A",{href:!0});var Swt=s(cz);FOo=r(Swt,"DebertaForMaskedLM"),Swt.forEach(t),TOo=r(oNe," (DeBERTa model)"),oNe.forEach(t),MOo=i(Y),Db=n(Y,"LI",{});var rNe=s(Db);Jue=n(rNe,"STRONG",{});var Rwt=s(Jue);EOo=r(Rwt,"deberta-v2"),Rwt.forEach(t),COo=r(rNe," \u2014 "),fz=n(rNe,"A",{href:!0});var Pwt=s(fz);wOo=r(Pwt,"DebertaV2ForMaskedLM"),Pwt.forEach(t),AOo=r(rNe," (DeBERTa-v2 model)"),rNe.forEach(t),LOo=i(Y),Gb=n(Y,"LI",{});var tNe=s(Gb);Yue=n(tNe,"STRONG",{});var Bwt=s(Yue);yOo=r(Bwt,"distilbert"),Bwt.forEach(t),xOo=r(tNe," \u2014 "),mz=n(tNe,"A",{href:!0});var Iwt=s(mz);$Oo=r(Iwt,"DistilBertForMaskedLM"),Iwt.forEach(t),kOo=r(tNe," (DistilBERT model)"),tNe.forEach(t),SOo=i(Y),Ob=n(Y,"LI",{});var aNe=s(Ob);Kue=n(aNe,"STRONG",{});var Nwt=s(Kue);ROo=r(Nwt,"electra"),Nwt.forEach(t),POo=r(aNe," \u2014 "),gz=n(aNe,"A",{href:!0});var qwt=s(gz);BOo=r(qwt,"ElectraForMaskedLM"),qwt.forEach(t),IOo=r(aNe," (ELECTRA model)"),aNe.forEach(t),NOo=i(Y),Vb=n(Y,"LI",{});var nNe=s(Vb);Zue=n(nNe,"STRONG",{});var jwt=s(Zue);qOo=r(jwt,"flaubert"),jwt.forEach(t),jOo=r(nNe," \u2014 "),hz=n(nNe,"A",{href:!0});var Dwt=s(hz);DOo=r(Dwt,"FlaubertWithLMHeadModel"),Dwt.forEach(t),GOo=r(nNe," (FlauBERT model)"),nNe.forEach(t),OOo=i(Y),Xb=n(Y,"LI",{});var sNe=s(Xb);e1e=n(sNe,"STRONG",{});var Gwt=s(e1e);VOo=r(Gwt,"fnet"),Gwt.forEach(t),XOo=r(sNe," \u2014 "),pz=n(sNe,"A",{href:!0});var Owt=s(pz);zOo=r(Owt,"FNetForMaskedLM"),Owt.forEach(t),WOo=r(sNe," (FNet model)"),sNe.forEach(t),QOo=i(Y),zb=n(Y,"LI",{});var lNe=s(zb);o1e=n(lNe,"STRONG",{});var Vwt=s(o1e);UOo=r(Vwt,"funnel"),Vwt.forEach(t),HOo=r(lNe," \u2014 "),_z=n(lNe,"A",{href:!0});var Xwt=s(_z);JOo=r(Xwt,"FunnelForMaskedLM"),Xwt.forEach(t),YOo=r(lNe," (Funnel Transformer model)"),lNe.forEach(t),KOo=i(Y),Wb=n(Y,"LI",{});var iNe=s(Wb);r1e=n(iNe,"STRONG",{});var zwt=s(r1e);ZOo=r(zwt,"ibert"),zwt.forEach(t),eVo=r(iNe," \u2014 "),uz=n(iNe,"A",{href:!0});var Wwt=s(uz);oVo=r(Wwt,"IBertForMaskedLM"),Wwt.forEach(t),rVo=r(iNe," (I-BERT model)"),iNe.forEach(t),tVo=i(Y),Qb=n(Y,"LI",{});var dNe=s(Qb);t1e=n(dNe,"STRONG",{});var Qwt=s(t1e);aVo=r(Qwt,"layoutlm"),Qwt.forEach(t),nVo=r(dNe," \u2014 "),bz=n(dNe,"A",{href:!0});var Uwt=s(bz);sVo=r(Uwt,"LayoutLMForMaskedLM"),Uwt.forEach(t),lVo=r(dNe," (LayoutLM model)"),dNe.forEach(t),iVo=i(Y),Ub=n(Y,"LI",{});var cNe=s(Ub);a1e=n(cNe,"STRONG",{});var Hwt=s(a1e);dVo=r(Hwt,"longformer"),Hwt.forEach(t),cVo=r(cNe," \u2014 "),vz=n(cNe,"A",{href:!0});var Jwt=s(vz);fVo=r(Jwt,"LongformerForMaskedLM"),Jwt.forEach(t),mVo=r(cNe," (Longformer model)"),cNe.forEach(t),gVo=i(Y),Hb=n(Y,"LI",{});var fNe=s(Hb);n1e=n(fNe,"STRONG",{});var Ywt=s(n1e);hVo=r(Ywt,"luke"),Ywt.forEach(t),pVo=r(fNe," \u2014 "),Fz=n(fNe,"A",{href:!0});var Kwt=s(Fz);_Vo=r(Kwt,"LukeForMaskedLM"),Kwt.forEach(t),uVo=r(fNe," (LUKE model)"),fNe.forEach(t),bVo=i(Y),Jb=n(Y,"LI",{});var mNe=s(Jb);s1e=n(mNe,"STRONG",{});var Zwt=s(s1e);vVo=r(Zwt,"mbart"),Zwt.forEach(t),FVo=r(mNe," \u2014 "),Tz=n(mNe,"A",{href:!0});var eAt=s(Tz);TVo=r(eAt,"MBartForConditionalGeneration"),eAt.forEach(t),MVo=r(mNe," (mBART model)"),mNe.forEach(t),EVo=i(Y),Yb=n(Y,"LI",{});var gNe=s(Yb);l1e=n(gNe,"STRONG",{});var oAt=s(l1e);CVo=r(oAt,"megatron-bert"),oAt.forEach(t),wVo=r(gNe," \u2014 "),Mz=n(gNe,"A",{href:!0});var rAt=s(Mz);AVo=r(rAt,"MegatronBertForMaskedLM"),rAt.forEach(t),LVo=r(gNe," (Megatron-BERT model)"),gNe.forEach(t),yVo=i(Y),Kb=n(Y,"LI",{});var hNe=s(Kb);i1e=n(hNe,"STRONG",{});var tAt=s(i1e);xVo=r(tAt,"mobilebert"),tAt.forEach(t),$Vo=r(hNe," \u2014 "),Ez=n(hNe,"A",{href:!0});var aAt=s(Ez);kVo=r(aAt,"MobileBertForMaskedLM"),aAt.forEach(t),SVo=r(hNe," (MobileBERT model)"),hNe.forEach(t),RVo=i(Y),Zb=n(Y,"LI",{});var pNe=s(Zb);d1e=n(pNe,"STRONG",{});var nAt=s(d1e);PVo=r(nAt,"mpnet"),nAt.forEach(t),BVo=r(pNe," \u2014 "),Cz=n(pNe,"A",{href:!0});var sAt=s(Cz);IVo=r(sAt,"MPNetForMaskedLM"),sAt.forEach(t),NVo=r(pNe," (MPNet model)"),pNe.forEach(t),qVo=i(Y),e2=n(Y,"LI",{});var _Ne=s(e2);c1e=n(_Ne,"STRONG",{});var lAt=s(c1e);jVo=r(lAt,"mvp"),lAt.forEach(t),DVo=r(_Ne," \u2014 "),wz=n(_Ne,"A",{href:!0});var iAt=s(wz);GVo=r(iAt,"MvpForConditionalGeneration"),iAt.forEach(t),OVo=r(_Ne," (MVP model)"),_Ne.forEach(t),VVo=i(Y),o2=n(Y,"LI",{});var uNe=s(o2);f1e=n(uNe,"STRONG",{});var dAt=s(f1e);XVo=r(dAt,"nezha"),dAt.forEach(t),zVo=r(uNe," \u2014 "),Az=n(uNe,"A",{href:!0});var cAt=s(Az);WVo=r(cAt,"NezhaForMaskedLM"),cAt.forEach(t),QVo=r(uNe," (Nezha model)"),uNe.forEach(t),UVo=i(Y),r2=n(Y,"LI",{});var bNe=s(r2);m1e=n(bNe,"STRONG",{});var fAt=s(m1e);HVo=r(fAt,"nystromformer"),fAt.forEach(t),JVo=r(bNe," \u2014 "),Lz=n(bNe,"A",{href:!0});var mAt=s(Lz);YVo=r(mAt,"NystromformerForMaskedLM"),mAt.forEach(t),KVo=r(bNe," (Nystr\xF6mformer model)"),bNe.forEach(t),ZVo=i(Y),t2=n(Y,"LI",{});var vNe=s(t2);g1e=n(vNe,"STRONG",{});var gAt=s(g1e);eXo=r(gAt,"perceiver"),gAt.forEach(t),oXo=r(vNe," \u2014 "),yz=n(vNe,"A",{href:!0});var hAt=s(yz);rXo=r(hAt,"PerceiverForMaskedLM"),hAt.forEach(t),tXo=r(vNe," (Perceiver model)"),vNe.forEach(t),aXo=i(Y),a2=n(Y,"LI",{});var FNe=s(a2);h1e=n(FNe,"STRONG",{});var pAt=s(h1e);nXo=r(pAt,"qdqbert"),pAt.forEach(t),sXo=r(FNe," \u2014 "),xz=n(FNe,"A",{href:!0});var _At=s(xz);lXo=r(_At,"QDQBertForMaskedLM"),_At.forEach(t),iXo=r(FNe," (QDQBert model)"),FNe.forEach(t),dXo=i(Y),n2=n(Y,"LI",{});var TNe=s(n2);p1e=n(TNe,"STRONG",{});var uAt=s(p1e);cXo=r(uAt,"reformer"),uAt.forEach(t),fXo=r(TNe," \u2014 "),$z=n(TNe,"A",{href:!0});var bAt=s($z);mXo=r(bAt,"ReformerForMaskedLM"),bAt.forEach(t),gXo=r(TNe," (Reformer model)"),TNe.forEach(t),hXo=i(Y),s2=n(Y,"LI",{});var MNe=s(s2);_1e=n(MNe,"STRONG",{});var vAt=s(_1e);pXo=r(vAt,"rembert"),vAt.forEach(t),_Xo=r(MNe," \u2014 "),kz=n(MNe,"A",{href:!0});var FAt=s(kz);uXo=r(FAt,"RemBertForMaskedLM"),FAt.forEach(t),bXo=r(MNe," (RemBERT model)"),MNe.forEach(t),vXo=i(Y),l2=n(Y,"LI",{});var ENe=s(l2);u1e=n(ENe,"STRONG",{});var TAt=s(u1e);FXo=r(TAt,"roberta"),TAt.forEach(t),TXo=r(ENe," \u2014 "),Sz=n(ENe,"A",{href:!0});var MAt=s(Sz);MXo=r(MAt,"RobertaForMaskedLM"),MAt.forEach(t),EXo=r(ENe," (RoBERTa model)"),ENe.forEach(t),CXo=i(Y),i2=n(Y,"LI",{});var CNe=s(i2);b1e=n(CNe,"STRONG",{});var EAt=s(b1e);wXo=r(EAt,"roformer"),EAt.forEach(t),AXo=r(CNe," \u2014 "),Rz=n(CNe,"A",{href:!0});var CAt=s(Rz);LXo=r(CAt,"RoFormerForMaskedLM"),CAt.forEach(t),yXo=r(CNe," (RoFormer model)"),CNe.forEach(t),xXo=i(Y),d2=n(Y,"LI",{});var wNe=s(d2);v1e=n(wNe,"STRONG",{});var wAt=s(v1e);$Xo=r(wAt,"squeezebert"),wAt.forEach(t),kXo=r(wNe," \u2014 "),Pz=n(wNe,"A",{href:!0});var AAt=s(Pz);SXo=r(AAt,"SqueezeBertForMaskedLM"),AAt.forEach(t),RXo=r(wNe," (SqueezeBERT model)"),wNe.forEach(t),PXo=i(Y),c2=n(Y,"LI",{});var ANe=s(c2);F1e=n(ANe,"STRONG",{});var LAt=s(F1e);BXo=r(LAt,"tapas"),LAt.forEach(t),IXo=r(ANe," \u2014 "),Bz=n(ANe,"A",{href:!0});var yAt=s(Bz);NXo=r(yAt,"TapasForMaskedLM"),yAt.forEach(t),qXo=r(ANe," (TAPAS model)"),ANe.forEach(t),jXo=i(Y),f2=n(Y,"LI",{});var LNe=s(f2);T1e=n(LNe,"STRONG",{});var xAt=s(T1e);DXo=r(xAt,"wav2vec2"),xAt.forEach(t),GXo=r(LNe," \u2014 "),M1e=n(LNe,"CODE",{});var $At=s(M1e);OXo=r($At,"Wav2Vec2ForMaskedLM"),$At.forEach(t),VXo=r(LNe," (Wav2Vec2 model)"),LNe.forEach(t),XXo=i(Y),m2=n(Y,"LI",{});var yNe=s(m2);E1e=n(yNe,"STRONG",{});var kAt=s(E1e);zXo=r(kAt,"xlm"),kAt.forEach(t),WXo=r(yNe," \u2014 "),Iz=n(yNe,"A",{href:!0});var SAt=s(Iz);QXo=r(SAt,"XLMWithLMHeadModel"),SAt.forEach(t),UXo=r(yNe," (XLM model)"),yNe.forEach(t),HXo=i(Y),g2=n(Y,"LI",{});var xNe=s(g2);C1e=n(xNe,"STRONG",{});var RAt=s(C1e);JXo=r(RAt,"xlm-roberta"),RAt.forEach(t),YXo=r(xNe," \u2014 "),Nz=n(xNe,"A",{href:!0});var PAt=s(Nz);KXo=r(PAt,"XLMRobertaForMaskedLM"),PAt.forEach(t),ZXo=r(xNe," (XLM-RoBERTa model)"),xNe.forEach(t),ezo=i(Y),h2=n(Y,"LI",{});var $Ne=s(h2);w1e=n($Ne,"STRONG",{});var BAt=s(w1e);ozo=r(BAt,"xlm-roberta-xl"),BAt.forEach(t),rzo=r($Ne," \u2014 "),qz=n($Ne,"A",{href:!0});var IAt=s(qz);tzo=r(IAt,"XLMRobertaXLForMaskedLM"),IAt.forEach(t),azo=r($Ne," (XLM-RoBERTa-XL model)"),$Ne.forEach(t),nzo=i(Y),p2=n(Y,"LI",{});var kNe=s(p2);A1e=n(kNe,"STRONG",{});var NAt=s(A1e);szo=r(NAt,"yoso"),NAt.forEach(t),lzo=r(kNe," \u2014 "),jz=n(kNe,"A",{href:!0});var qAt=s(jz);izo=r(qAt,"YosoForMaskedLM"),qAt.forEach(t),dzo=r(kNe," (YOSO model)"),kNe.forEach(t),Y.forEach(t),czo=i(Fa),_2=n(Fa,"P",{});var SNe=s(_2);fzo=r(SNe,"The model is set in evaluation mode by default using "),L1e=n(SNe,"CODE",{});var jAt=s(L1e);mzo=r(jAt,"model.eval()"),jAt.forEach(t),gzo=r(SNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y1e=n(SNe,"CODE",{});var DAt=s(y1e);hzo=r(DAt,"model.train()"),DAt.forEach(t),SNe.forEach(t),pzo=i(Fa),T(u2.$$.fragment,Fa),Fa.forEach(t),El.forEach(t),rHe=i(f),Ed=n(f,"H2",{class:!0});var pYe=s(Ed);b2=n(pYe,"A",{id:!0,class:!0,href:!0});var GAt=s(b2);x1e=n(GAt,"SPAN",{});var OAt=s(x1e);T(x9.$$.fragment,OAt),OAt.forEach(t),GAt.forEach(t),_zo=i(pYe),$1e=n(pYe,"SPAN",{});var VAt=s($1e);uzo=r(VAt,"AutoModelForSeq2SeqLM"),VAt.forEach(t),pYe.forEach(t),tHe=i(f),qo=n(f,"DIV",{class:!0});var Cl=s(qo);T($9.$$.fragment,Cl),bzo=i(Cl),Cd=n(Cl,"P",{});var Ene=s(Cd);vzo=r(Ene,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Dz=n(Ene,"A",{href:!0});var XAt=s(Dz);Fzo=r(XAt,"from_pretrained()"),XAt.forEach(t),Tzo=r(Ene," class method or the "),Gz=n(Ene,"A",{href:!0});var zAt=s(Gz);Mzo=r(zAt,"from_config()"),zAt.forEach(t),Ezo=r(Ene,` class
method.`),Ene.forEach(t),Czo=i(Cl),k9=n(Cl,"P",{});var _Ye=s(k9);wzo=r(_Ye,"This class cannot be instantiated directly using "),k1e=n(_Ye,"CODE",{});var WAt=s(k1e);Azo=r(WAt,"__init__()"),WAt.forEach(t),Lzo=r(_Ye," (throws an error)."),_Ye.forEach(t),yzo=i(Cl),vt=n(Cl,"DIV",{class:!0});var q7=s(vt);T(S9.$$.fragment,q7),xzo=i(q7),S1e=n(q7,"P",{});var QAt=s(S1e);$zo=r(QAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),QAt.forEach(t),kzo=i(q7),wd=n(q7,"P",{});var Cne=s(wd);Szo=r(Cne,`Note:
Loading a model from its configuration file does `),R1e=n(Cne,"STRONG",{});var UAt=s(R1e);Rzo=r(UAt,"not"),UAt.forEach(t),Pzo=r(Cne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=n(Cne,"A",{href:!0});var HAt=s(Oz);Bzo=r(HAt,"from_pretrained()"),HAt.forEach(t),Izo=r(Cne," to load the model weights."),Cne.forEach(t),Nzo=i(q7),T(v2.$$.fragment,q7),q7.forEach(t),qzo=i(Cl),ro=n(Cl,"DIV",{class:!0});var Ta=s(ro);T(R9.$$.fragment,Ta),jzo=i(Ta),P1e=n(Ta,"P",{});var JAt=s(P1e);Dzo=r(JAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),JAt.forEach(t),Gzo=i(Ta),Ka=n(Ta,"P",{});var j7=s(Ka);Ozo=r(j7,"The model class to instantiate is selected based on the "),B1e=n(j7,"CODE",{});var YAt=s(B1e);Vzo=r(YAt,"model_type"),YAt.forEach(t),Xzo=r(j7,` property of the config object (either
passed as an argument or loaded from `),I1e=n(j7,"CODE",{});var KAt=s(I1e);zzo=r(KAt,"pretrained_model_name_or_path"),KAt.forEach(t),Wzo=r(j7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=n(j7,"CODE",{});var ZAt=s(N1e);Qzo=r(ZAt,"pretrained_model_name_or_path"),ZAt.forEach(t),Uzo=r(j7,":"),j7.forEach(t),Hzo=i(Ta),me=n(Ta,"UL",{});var ue=s(me);F2=n(ue,"LI",{});var RNe=s(F2);q1e=n(RNe,"STRONG",{});var e7t=s(q1e);Jzo=r(e7t,"bart"),e7t.forEach(t),Yzo=r(RNe," \u2014 "),Vz=n(RNe,"A",{href:!0});var o7t=s(Vz);Kzo=r(o7t,"BartForConditionalGeneration"),o7t.forEach(t),Zzo=r(RNe," (BART model)"),RNe.forEach(t),eWo=i(ue),T2=n(ue,"LI",{});var PNe=s(T2);j1e=n(PNe,"STRONG",{});var r7t=s(j1e);oWo=r(r7t,"bigbird_pegasus"),r7t.forEach(t),rWo=r(PNe," \u2014 "),Xz=n(PNe,"A",{href:!0});var t7t=s(Xz);tWo=r(t7t,"BigBirdPegasusForConditionalGeneration"),t7t.forEach(t),aWo=r(PNe," (BigBird-Pegasus model)"),PNe.forEach(t),nWo=i(ue),M2=n(ue,"LI",{});var BNe=s(M2);D1e=n(BNe,"STRONG",{});var a7t=s(D1e);sWo=r(a7t,"blenderbot"),a7t.forEach(t),lWo=r(BNe," \u2014 "),zz=n(BNe,"A",{href:!0});var n7t=s(zz);iWo=r(n7t,"BlenderbotForConditionalGeneration"),n7t.forEach(t),dWo=r(BNe," (Blenderbot model)"),BNe.forEach(t),cWo=i(ue),E2=n(ue,"LI",{});var INe=s(E2);G1e=n(INe,"STRONG",{});var s7t=s(G1e);fWo=r(s7t,"blenderbot-small"),s7t.forEach(t),mWo=r(INe," \u2014 "),Wz=n(INe,"A",{href:!0});var l7t=s(Wz);gWo=r(l7t,"BlenderbotSmallForConditionalGeneration"),l7t.forEach(t),hWo=r(INe," (BlenderbotSmall model)"),INe.forEach(t),pWo=i(ue),C2=n(ue,"LI",{});var NNe=s(C2);O1e=n(NNe,"STRONG",{});var i7t=s(O1e);_Wo=r(i7t,"encoder-decoder"),i7t.forEach(t),uWo=r(NNe," \u2014 "),Qz=n(NNe,"A",{href:!0});var d7t=s(Qz);bWo=r(d7t,"EncoderDecoderModel"),d7t.forEach(t),vWo=r(NNe," (Encoder decoder model)"),NNe.forEach(t),FWo=i(ue),w2=n(ue,"LI",{});var qNe=s(w2);V1e=n(qNe,"STRONG",{});var c7t=s(V1e);TWo=r(c7t,"fsmt"),c7t.forEach(t),MWo=r(qNe," \u2014 "),Uz=n(qNe,"A",{href:!0});var f7t=s(Uz);EWo=r(f7t,"FSMTForConditionalGeneration"),f7t.forEach(t),CWo=r(qNe," (FairSeq Machine-Translation model)"),qNe.forEach(t),wWo=i(ue),A2=n(ue,"LI",{});var jNe=s(A2);X1e=n(jNe,"STRONG",{});var m7t=s(X1e);AWo=r(m7t,"led"),m7t.forEach(t),LWo=r(jNe," \u2014 "),Hz=n(jNe,"A",{href:!0});var g7t=s(Hz);yWo=r(g7t,"LEDForConditionalGeneration"),g7t.forEach(t),xWo=r(jNe," (LED model)"),jNe.forEach(t),$Wo=i(ue),L2=n(ue,"LI",{});var DNe=s(L2);z1e=n(DNe,"STRONG",{});var h7t=s(z1e);kWo=r(h7t,"longt5"),h7t.forEach(t),SWo=r(DNe," \u2014 "),Jz=n(DNe,"A",{href:!0});var p7t=s(Jz);RWo=r(p7t,"LongT5ForConditionalGeneration"),p7t.forEach(t),PWo=r(DNe," (LongT5 model)"),DNe.forEach(t),BWo=i(ue),y2=n(ue,"LI",{});var GNe=s(y2);W1e=n(GNe,"STRONG",{});var _7t=s(W1e);IWo=r(_7t,"m2m_100"),_7t.forEach(t),NWo=r(GNe," \u2014 "),Yz=n(GNe,"A",{href:!0});var u7t=s(Yz);qWo=r(u7t,"M2M100ForConditionalGeneration"),u7t.forEach(t),jWo=r(GNe," (M2M100 model)"),GNe.forEach(t),DWo=i(ue),x2=n(ue,"LI",{});var ONe=s(x2);Q1e=n(ONe,"STRONG",{});var b7t=s(Q1e);GWo=r(b7t,"marian"),b7t.forEach(t),OWo=r(ONe," \u2014 "),Kz=n(ONe,"A",{href:!0});var v7t=s(Kz);VWo=r(v7t,"MarianMTModel"),v7t.forEach(t),XWo=r(ONe," (Marian model)"),ONe.forEach(t),zWo=i(ue),$2=n(ue,"LI",{});var VNe=s($2);U1e=n(VNe,"STRONG",{});var F7t=s(U1e);WWo=r(F7t,"mbart"),F7t.forEach(t),QWo=r(VNe," \u2014 "),Zz=n(VNe,"A",{href:!0});var T7t=s(Zz);UWo=r(T7t,"MBartForConditionalGeneration"),T7t.forEach(t),HWo=r(VNe," (mBART model)"),VNe.forEach(t),JWo=i(ue),k2=n(ue,"LI",{});var XNe=s(k2);H1e=n(XNe,"STRONG",{});var M7t=s(H1e);YWo=r(M7t,"mt5"),M7t.forEach(t),KWo=r(XNe," \u2014 "),eW=n(XNe,"A",{href:!0});var E7t=s(eW);ZWo=r(E7t,"MT5ForConditionalGeneration"),E7t.forEach(t),eQo=r(XNe," (MT5 model)"),XNe.forEach(t),oQo=i(ue),S2=n(ue,"LI",{});var zNe=s(S2);J1e=n(zNe,"STRONG",{});var C7t=s(J1e);rQo=r(C7t,"mvp"),C7t.forEach(t),tQo=r(zNe," \u2014 "),oW=n(zNe,"A",{href:!0});var w7t=s(oW);aQo=r(w7t,"MvpForConditionalGeneration"),w7t.forEach(t),nQo=r(zNe," (MVP model)"),zNe.forEach(t),sQo=i(ue),R2=n(ue,"LI",{});var WNe=s(R2);Y1e=n(WNe,"STRONG",{});var A7t=s(Y1e);lQo=r(A7t,"nllb"),A7t.forEach(t),iQo=r(WNe," \u2014 "),rW=n(WNe,"A",{href:!0});var L7t=s(rW);dQo=r(L7t,"M2M100ForConditionalGeneration"),L7t.forEach(t),cQo=r(WNe," (NLLB model)"),WNe.forEach(t),fQo=i(ue),P2=n(ue,"LI",{});var QNe=s(P2);K1e=n(QNe,"STRONG",{});var y7t=s(K1e);mQo=r(y7t,"pegasus"),y7t.forEach(t),gQo=r(QNe," \u2014 "),tW=n(QNe,"A",{href:!0});var x7t=s(tW);hQo=r(x7t,"PegasusForConditionalGeneration"),x7t.forEach(t),pQo=r(QNe," (Pegasus model)"),QNe.forEach(t),_Qo=i(ue),B2=n(ue,"LI",{});var UNe=s(B2);Z1e=n(UNe,"STRONG",{});var $7t=s(Z1e);uQo=r($7t,"plbart"),$7t.forEach(t),bQo=r(UNe," \u2014 "),aW=n(UNe,"A",{href:!0});var k7t=s(aW);vQo=r(k7t,"PLBartForConditionalGeneration"),k7t.forEach(t),FQo=r(UNe," (PLBart model)"),UNe.forEach(t),TQo=i(ue),I2=n(ue,"LI",{});var HNe=s(I2);e8e=n(HNe,"STRONG",{});var S7t=s(e8e);MQo=r(S7t,"prophetnet"),S7t.forEach(t),EQo=r(HNe," \u2014 "),nW=n(HNe,"A",{href:!0});var R7t=s(nW);CQo=r(R7t,"ProphetNetForConditionalGeneration"),R7t.forEach(t),wQo=r(HNe," (ProphetNet model)"),HNe.forEach(t),AQo=i(ue),N2=n(ue,"LI",{});var JNe=s(N2);o8e=n(JNe,"STRONG",{});var P7t=s(o8e);LQo=r(P7t,"t5"),P7t.forEach(t),yQo=r(JNe," \u2014 "),sW=n(JNe,"A",{href:!0});var B7t=s(sW);xQo=r(B7t,"T5ForConditionalGeneration"),B7t.forEach(t),$Qo=r(JNe," (T5 model)"),JNe.forEach(t),kQo=i(ue),q2=n(ue,"LI",{});var YNe=s(q2);r8e=n(YNe,"STRONG",{});var I7t=s(r8e);SQo=r(I7t,"xlm-prophetnet"),I7t.forEach(t),RQo=r(YNe," \u2014 "),lW=n(YNe,"A",{href:!0});var N7t=s(lW);PQo=r(N7t,"XLMProphetNetForConditionalGeneration"),N7t.forEach(t),BQo=r(YNe," (XLM-ProphetNet model)"),YNe.forEach(t),ue.forEach(t),IQo=i(Ta),j2=n(Ta,"P",{});var KNe=s(j2);NQo=r(KNe,"The model is set in evaluation mode by default using "),t8e=n(KNe,"CODE",{});var q7t=s(t8e);qQo=r(q7t,"model.eval()"),q7t.forEach(t),jQo=r(KNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a8e=n(KNe,"CODE",{});var j7t=s(a8e);DQo=r(j7t,"model.train()"),j7t.forEach(t),KNe.forEach(t),GQo=i(Ta),T(D2.$$.fragment,Ta),Ta.forEach(t),Cl.forEach(t),aHe=i(f),Ad=n(f,"H2",{class:!0});var uYe=s(Ad);G2=n(uYe,"A",{id:!0,class:!0,href:!0});var D7t=s(G2);n8e=n(D7t,"SPAN",{});var G7t=s(n8e);T(P9.$$.fragment,G7t),G7t.forEach(t),D7t.forEach(t),OQo=i(uYe),s8e=n(uYe,"SPAN",{});var O7t=s(s8e);VQo=r(O7t,"AutoModelForSequenceClassification"),O7t.forEach(t),uYe.forEach(t),nHe=i(f),jo=n(f,"DIV",{class:!0});var wl=s(jo);T(B9.$$.fragment,wl),XQo=i(wl),Ld=n(wl,"P",{});var wne=s(Ld);zQo=r(wne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iW=n(wne,"A",{href:!0});var V7t=s(iW);WQo=r(V7t,"from_pretrained()"),V7t.forEach(t),QQo=r(wne," class method or the "),dW=n(wne,"A",{href:!0});var X7t=s(dW);UQo=r(X7t,"from_config()"),X7t.forEach(t),HQo=r(wne,` class
method.`),wne.forEach(t),JQo=i(wl),I9=n(wl,"P",{});var bYe=s(I9);YQo=r(bYe,"This class cannot be instantiated directly using "),l8e=n(bYe,"CODE",{});var z7t=s(l8e);KQo=r(z7t,"__init__()"),z7t.forEach(t),ZQo=r(bYe," (throws an error)."),bYe.forEach(t),eUo=i(wl),Ft=n(wl,"DIV",{class:!0});var D7=s(Ft);T(N9.$$.fragment,D7),oUo=i(D7),i8e=n(D7,"P",{});var W7t=s(i8e);rUo=r(W7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),W7t.forEach(t),tUo=i(D7),yd=n(D7,"P",{});var Ane=s(yd);aUo=r(Ane,`Note:
Loading a model from its configuration file does `),d8e=n(Ane,"STRONG",{});var Q7t=s(d8e);nUo=r(Q7t,"not"),Q7t.forEach(t),sUo=r(Ane,` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=n(Ane,"A",{href:!0});var U7t=s(cW);lUo=r(U7t,"from_pretrained()"),U7t.forEach(t),iUo=r(Ane," to load the model weights."),Ane.forEach(t),dUo=i(D7),T(O2.$$.fragment,D7),D7.forEach(t),cUo=i(wl),to=n(wl,"DIV",{class:!0});var Ma=s(to);T(q9.$$.fragment,Ma),fUo=i(Ma),c8e=n(Ma,"P",{});var H7t=s(c8e);mUo=r(H7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),H7t.forEach(t),gUo=i(Ma),Za=n(Ma,"P",{});var G7=s(Za);hUo=r(G7,"The model class to instantiate is selected based on the "),f8e=n(G7,"CODE",{});var J7t=s(f8e);pUo=r(J7t,"model_type"),J7t.forEach(t),_Uo=r(G7,` property of the config object (either
passed as an argument or loaded from `),m8e=n(G7,"CODE",{});var Y7t=s(m8e);uUo=r(Y7t,"pretrained_model_name_or_path"),Y7t.forEach(t),bUo=r(G7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g8e=n(G7,"CODE",{});var K7t=s(g8e);vUo=r(K7t,"pretrained_model_name_or_path"),K7t.forEach(t),FUo=r(G7,":"),G7.forEach(t),TUo=i(Ma),N=n(Ma,"UL",{});var j=s(N);V2=n(j,"LI",{});var ZNe=s(V2);h8e=n(ZNe,"STRONG",{});var Z7t=s(h8e);MUo=r(Z7t,"albert"),Z7t.forEach(t),EUo=r(ZNe," \u2014 "),fW=n(ZNe,"A",{href:!0});var eLt=s(fW);CUo=r(eLt,"AlbertForSequenceClassification"),eLt.forEach(t),wUo=r(ZNe," (ALBERT model)"),ZNe.forEach(t),AUo=i(j),X2=n(j,"LI",{});var eqe=s(X2);p8e=n(eqe,"STRONG",{});var oLt=s(p8e);LUo=r(oLt,"bart"),oLt.forEach(t),yUo=r(eqe," \u2014 "),mW=n(eqe,"A",{href:!0});var rLt=s(mW);xUo=r(rLt,"BartForSequenceClassification"),rLt.forEach(t),$Uo=r(eqe," (BART model)"),eqe.forEach(t),kUo=i(j),z2=n(j,"LI",{});var oqe=s(z2);_8e=n(oqe,"STRONG",{});var tLt=s(_8e);SUo=r(tLt,"bert"),tLt.forEach(t),RUo=r(oqe," \u2014 "),gW=n(oqe,"A",{href:!0});var aLt=s(gW);PUo=r(aLt,"BertForSequenceClassification"),aLt.forEach(t),BUo=r(oqe," (BERT model)"),oqe.forEach(t),IUo=i(j),W2=n(j,"LI",{});var rqe=s(W2);u8e=n(rqe,"STRONG",{});var nLt=s(u8e);NUo=r(nLt,"big_bird"),nLt.forEach(t),qUo=r(rqe," \u2014 "),hW=n(rqe,"A",{href:!0});var sLt=s(hW);jUo=r(sLt,"BigBirdForSequenceClassification"),sLt.forEach(t),DUo=r(rqe," (BigBird model)"),rqe.forEach(t),GUo=i(j),Q2=n(j,"LI",{});var tqe=s(Q2);b8e=n(tqe,"STRONG",{});var lLt=s(b8e);OUo=r(lLt,"bigbird_pegasus"),lLt.forEach(t),VUo=r(tqe," \u2014 "),pW=n(tqe,"A",{href:!0});var iLt=s(pW);XUo=r(iLt,"BigBirdPegasusForSequenceClassification"),iLt.forEach(t),zUo=r(tqe," (BigBird-Pegasus model)"),tqe.forEach(t),WUo=i(j),U2=n(j,"LI",{});var aqe=s(U2);v8e=n(aqe,"STRONG",{});var dLt=s(v8e);QUo=r(dLt,"bloom"),dLt.forEach(t),UUo=r(aqe," \u2014 "),_W=n(aqe,"A",{href:!0});var cLt=s(_W);HUo=r(cLt,"BloomForSequenceClassification"),cLt.forEach(t),JUo=r(aqe," (BLOOM model)"),aqe.forEach(t),YUo=i(j),H2=n(j,"LI",{});var nqe=s(H2);F8e=n(nqe,"STRONG",{});var fLt=s(F8e);KUo=r(fLt,"camembert"),fLt.forEach(t),ZUo=r(nqe," \u2014 "),uW=n(nqe,"A",{href:!0});var mLt=s(uW);eHo=r(mLt,"CamembertForSequenceClassification"),mLt.forEach(t),oHo=r(nqe," (CamemBERT model)"),nqe.forEach(t),rHo=i(j),J2=n(j,"LI",{});var sqe=s(J2);T8e=n(sqe,"STRONG",{});var gLt=s(T8e);tHo=r(gLt,"canine"),gLt.forEach(t),aHo=r(sqe," \u2014 "),bW=n(sqe,"A",{href:!0});var hLt=s(bW);nHo=r(hLt,"CanineForSequenceClassification"),hLt.forEach(t),sHo=r(sqe," (CANINE model)"),sqe.forEach(t),lHo=i(j),Y2=n(j,"LI",{});var lqe=s(Y2);M8e=n(lqe,"STRONG",{});var pLt=s(M8e);iHo=r(pLt,"convbert"),pLt.forEach(t),dHo=r(lqe," \u2014 "),vW=n(lqe,"A",{href:!0});var _Lt=s(vW);cHo=r(_Lt,"ConvBertForSequenceClassification"),_Lt.forEach(t),fHo=r(lqe," (ConvBERT model)"),lqe.forEach(t),mHo=i(j),K2=n(j,"LI",{});var iqe=s(K2);E8e=n(iqe,"STRONG",{});var uLt=s(E8e);gHo=r(uLt,"ctrl"),uLt.forEach(t),hHo=r(iqe," \u2014 "),FW=n(iqe,"A",{href:!0});var bLt=s(FW);pHo=r(bLt,"CTRLForSequenceClassification"),bLt.forEach(t),_Ho=r(iqe," (CTRL model)"),iqe.forEach(t),uHo=i(j),Z2=n(j,"LI",{});var dqe=s(Z2);C8e=n(dqe,"STRONG",{});var vLt=s(C8e);bHo=r(vLt,"data2vec-text"),vLt.forEach(t),vHo=r(dqe," \u2014 "),TW=n(dqe,"A",{href:!0});var FLt=s(TW);FHo=r(FLt,"Data2VecTextForSequenceClassification"),FLt.forEach(t),THo=r(dqe," (Data2VecText model)"),dqe.forEach(t),MHo=i(j),ev=n(j,"LI",{});var cqe=s(ev);w8e=n(cqe,"STRONG",{});var TLt=s(w8e);EHo=r(TLt,"deberta"),TLt.forEach(t),CHo=r(cqe," \u2014 "),MW=n(cqe,"A",{href:!0});var MLt=s(MW);wHo=r(MLt,"DebertaForSequenceClassification"),MLt.forEach(t),AHo=r(cqe," (DeBERTa model)"),cqe.forEach(t),LHo=i(j),ov=n(j,"LI",{});var fqe=s(ov);A8e=n(fqe,"STRONG",{});var ELt=s(A8e);yHo=r(ELt,"deberta-v2"),ELt.forEach(t),xHo=r(fqe," \u2014 "),EW=n(fqe,"A",{href:!0});var CLt=s(EW);$Ho=r(CLt,"DebertaV2ForSequenceClassification"),CLt.forEach(t),kHo=r(fqe," (DeBERTa-v2 model)"),fqe.forEach(t),SHo=i(j),rv=n(j,"LI",{});var mqe=s(rv);L8e=n(mqe,"STRONG",{});var wLt=s(L8e);RHo=r(wLt,"distilbert"),wLt.forEach(t),PHo=r(mqe," \u2014 "),CW=n(mqe,"A",{href:!0});var ALt=s(CW);BHo=r(ALt,"DistilBertForSequenceClassification"),ALt.forEach(t),IHo=r(mqe," (DistilBERT model)"),mqe.forEach(t),NHo=i(j),tv=n(j,"LI",{});var gqe=s(tv);y8e=n(gqe,"STRONG",{});var LLt=s(y8e);qHo=r(LLt,"electra"),LLt.forEach(t),jHo=r(gqe," \u2014 "),wW=n(gqe,"A",{href:!0});var yLt=s(wW);DHo=r(yLt,"ElectraForSequenceClassification"),yLt.forEach(t),GHo=r(gqe," (ELECTRA model)"),gqe.forEach(t),OHo=i(j),av=n(j,"LI",{});var hqe=s(av);x8e=n(hqe,"STRONG",{});var xLt=s(x8e);VHo=r(xLt,"flaubert"),xLt.forEach(t),XHo=r(hqe," \u2014 "),AW=n(hqe,"A",{href:!0});var $Lt=s(AW);zHo=r($Lt,"FlaubertForSequenceClassification"),$Lt.forEach(t),WHo=r(hqe," (FlauBERT model)"),hqe.forEach(t),QHo=i(j),nv=n(j,"LI",{});var pqe=s(nv);$8e=n(pqe,"STRONG",{});var kLt=s($8e);UHo=r(kLt,"fnet"),kLt.forEach(t),HHo=r(pqe," \u2014 "),LW=n(pqe,"A",{href:!0});var SLt=s(LW);JHo=r(SLt,"FNetForSequenceClassification"),SLt.forEach(t),YHo=r(pqe," (FNet model)"),pqe.forEach(t),KHo=i(j),sv=n(j,"LI",{});var _qe=s(sv);k8e=n(_qe,"STRONG",{});var RLt=s(k8e);ZHo=r(RLt,"funnel"),RLt.forEach(t),eJo=r(_qe," \u2014 "),yW=n(_qe,"A",{href:!0});var PLt=s(yW);oJo=r(PLt,"FunnelForSequenceClassification"),PLt.forEach(t),rJo=r(_qe," (Funnel Transformer model)"),_qe.forEach(t),tJo=i(j),lv=n(j,"LI",{});var uqe=s(lv);S8e=n(uqe,"STRONG",{});var BLt=s(S8e);aJo=r(BLt,"gpt2"),BLt.forEach(t),nJo=r(uqe," \u2014 "),xW=n(uqe,"A",{href:!0});var ILt=s(xW);sJo=r(ILt,"GPT2ForSequenceClassification"),ILt.forEach(t),lJo=r(uqe," (OpenAI GPT-2 model)"),uqe.forEach(t),iJo=i(j),iv=n(j,"LI",{});var bqe=s(iv);R8e=n(bqe,"STRONG",{});var NLt=s(R8e);dJo=r(NLt,"gpt_neo"),NLt.forEach(t),cJo=r(bqe," \u2014 "),$W=n(bqe,"A",{href:!0});var qLt=s($W);fJo=r(qLt,"GPTNeoForSequenceClassification"),qLt.forEach(t),mJo=r(bqe," (GPT Neo model)"),bqe.forEach(t),gJo=i(j),dv=n(j,"LI",{});var vqe=s(dv);P8e=n(vqe,"STRONG",{});var jLt=s(P8e);hJo=r(jLt,"gptj"),jLt.forEach(t),pJo=r(vqe," \u2014 "),kW=n(vqe,"A",{href:!0});var DLt=s(kW);_Jo=r(DLt,"GPTJForSequenceClassification"),DLt.forEach(t),uJo=r(vqe," (GPT-J model)"),vqe.forEach(t),bJo=i(j),cv=n(j,"LI",{});var Fqe=s(cv);B8e=n(Fqe,"STRONG",{});var GLt=s(B8e);vJo=r(GLt,"ibert"),GLt.forEach(t),FJo=r(Fqe," \u2014 "),SW=n(Fqe,"A",{href:!0});var OLt=s(SW);TJo=r(OLt,"IBertForSequenceClassification"),OLt.forEach(t),MJo=r(Fqe," (I-BERT model)"),Fqe.forEach(t),EJo=i(j),fv=n(j,"LI",{});var Tqe=s(fv);I8e=n(Tqe,"STRONG",{});var VLt=s(I8e);CJo=r(VLt,"layoutlm"),VLt.forEach(t),wJo=r(Tqe," \u2014 "),RW=n(Tqe,"A",{href:!0});var XLt=s(RW);AJo=r(XLt,"LayoutLMForSequenceClassification"),XLt.forEach(t),LJo=r(Tqe," (LayoutLM model)"),Tqe.forEach(t),yJo=i(j),mv=n(j,"LI",{});var Mqe=s(mv);N8e=n(Mqe,"STRONG",{});var zLt=s(N8e);xJo=r(zLt,"layoutlmv2"),zLt.forEach(t),$Jo=r(Mqe," \u2014 "),PW=n(Mqe,"A",{href:!0});var WLt=s(PW);kJo=r(WLt,"LayoutLMv2ForSequenceClassification"),WLt.forEach(t),SJo=r(Mqe," (LayoutLMv2 model)"),Mqe.forEach(t),RJo=i(j),gv=n(j,"LI",{});var Eqe=s(gv);q8e=n(Eqe,"STRONG",{});var QLt=s(q8e);PJo=r(QLt,"layoutlmv3"),QLt.forEach(t),BJo=r(Eqe," \u2014 "),BW=n(Eqe,"A",{href:!0});var ULt=s(BW);IJo=r(ULt,"LayoutLMv3ForSequenceClassification"),ULt.forEach(t),NJo=r(Eqe," (LayoutLMv3 model)"),Eqe.forEach(t),qJo=i(j),hv=n(j,"LI",{});var Cqe=s(hv);j8e=n(Cqe,"STRONG",{});var HLt=s(j8e);jJo=r(HLt,"led"),HLt.forEach(t),DJo=r(Cqe," \u2014 "),IW=n(Cqe,"A",{href:!0});var JLt=s(IW);GJo=r(JLt,"LEDForSequenceClassification"),JLt.forEach(t),OJo=r(Cqe," (LED model)"),Cqe.forEach(t),VJo=i(j),pv=n(j,"LI",{});var wqe=s(pv);D8e=n(wqe,"STRONG",{});var YLt=s(D8e);XJo=r(YLt,"longformer"),YLt.forEach(t),zJo=r(wqe," \u2014 "),NW=n(wqe,"A",{href:!0});var KLt=s(NW);WJo=r(KLt,"LongformerForSequenceClassification"),KLt.forEach(t),QJo=r(wqe," (Longformer model)"),wqe.forEach(t),UJo=i(j),_v=n(j,"LI",{});var Aqe=s(_v);G8e=n(Aqe,"STRONG",{});var ZLt=s(G8e);HJo=r(ZLt,"luke"),ZLt.forEach(t),JJo=r(Aqe," \u2014 "),qW=n(Aqe,"A",{href:!0});var eyt=s(qW);YJo=r(eyt,"LukeForSequenceClassification"),eyt.forEach(t),KJo=r(Aqe," (LUKE model)"),Aqe.forEach(t),ZJo=i(j),uv=n(j,"LI",{});var Lqe=s(uv);O8e=n(Lqe,"STRONG",{});var oyt=s(O8e);eYo=r(oyt,"mbart"),oyt.forEach(t),oYo=r(Lqe," \u2014 "),jW=n(Lqe,"A",{href:!0});var ryt=s(jW);rYo=r(ryt,"MBartForSequenceClassification"),ryt.forEach(t),tYo=r(Lqe," (mBART model)"),Lqe.forEach(t),aYo=i(j),bv=n(j,"LI",{});var yqe=s(bv);V8e=n(yqe,"STRONG",{});var tyt=s(V8e);nYo=r(tyt,"megatron-bert"),tyt.forEach(t),sYo=r(yqe," \u2014 "),DW=n(yqe,"A",{href:!0});var ayt=s(DW);lYo=r(ayt,"MegatronBertForSequenceClassification"),ayt.forEach(t),iYo=r(yqe," (Megatron-BERT model)"),yqe.forEach(t),dYo=i(j),vv=n(j,"LI",{});var xqe=s(vv);X8e=n(xqe,"STRONG",{});var nyt=s(X8e);cYo=r(nyt,"mobilebert"),nyt.forEach(t),fYo=r(xqe," \u2014 "),GW=n(xqe,"A",{href:!0});var syt=s(GW);mYo=r(syt,"MobileBertForSequenceClassification"),syt.forEach(t),gYo=r(xqe," (MobileBERT model)"),xqe.forEach(t),hYo=i(j),Fv=n(j,"LI",{});var $qe=s(Fv);z8e=n($qe,"STRONG",{});var lyt=s(z8e);pYo=r(lyt,"mpnet"),lyt.forEach(t),_Yo=r($qe," \u2014 "),OW=n($qe,"A",{href:!0});var iyt=s(OW);uYo=r(iyt,"MPNetForSequenceClassification"),iyt.forEach(t),bYo=r($qe," (MPNet model)"),$qe.forEach(t),vYo=i(j),Tv=n(j,"LI",{});var kqe=s(Tv);W8e=n(kqe,"STRONG",{});var dyt=s(W8e);FYo=r(dyt,"mvp"),dyt.forEach(t),TYo=r(kqe," \u2014 "),VW=n(kqe,"A",{href:!0});var cyt=s(VW);MYo=r(cyt,"MvpForSequenceClassification"),cyt.forEach(t),EYo=r(kqe," (MVP model)"),kqe.forEach(t),CYo=i(j),Mv=n(j,"LI",{});var Sqe=s(Mv);Q8e=n(Sqe,"STRONG",{});var fyt=s(Q8e);wYo=r(fyt,"nezha"),fyt.forEach(t),AYo=r(Sqe," \u2014 "),XW=n(Sqe,"A",{href:!0});var myt=s(XW);LYo=r(myt,"NezhaForSequenceClassification"),myt.forEach(t),yYo=r(Sqe," (Nezha model)"),Sqe.forEach(t),xYo=i(j),Ev=n(j,"LI",{});var Rqe=s(Ev);U8e=n(Rqe,"STRONG",{});var gyt=s(U8e);$Yo=r(gyt,"nystromformer"),gyt.forEach(t),kYo=r(Rqe," \u2014 "),zW=n(Rqe,"A",{href:!0});var hyt=s(zW);SYo=r(hyt,"NystromformerForSequenceClassification"),hyt.forEach(t),RYo=r(Rqe," (Nystr\xF6mformer model)"),Rqe.forEach(t),PYo=i(j),Cv=n(j,"LI",{});var Pqe=s(Cv);H8e=n(Pqe,"STRONG",{});var pyt=s(H8e);BYo=r(pyt,"openai-gpt"),pyt.forEach(t),IYo=r(Pqe," \u2014 "),WW=n(Pqe,"A",{href:!0});var _yt=s(WW);NYo=r(_yt,"OpenAIGPTForSequenceClassification"),_yt.forEach(t),qYo=r(Pqe," (OpenAI GPT model)"),Pqe.forEach(t),jYo=i(j),wv=n(j,"LI",{});var Bqe=s(wv);J8e=n(Bqe,"STRONG",{});var uyt=s(J8e);DYo=r(uyt,"opt"),uyt.forEach(t),GYo=r(Bqe," \u2014 "),QW=n(Bqe,"A",{href:!0});var byt=s(QW);OYo=r(byt,"OPTForSequenceClassification"),byt.forEach(t),VYo=r(Bqe," (OPT model)"),Bqe.forEach(t),XYo=i(j),Av=n(j,"LI",{});var Iqe=s(Av);Y8e=n(Iqe,"STRONG",{});var vyt=s(Y8e);zYo=r(vyt,"perceiver"),vyt.forEach(t),WYo=r(Iqe," \u2014 "),UW=n(Iqe,"A",{href:!0});var Fyt=s(UW);QYo=r(Fyt,"PerceiverForSequenceClassification"),Fyt.forEach(t),UYo=r(Iqe," (Perceiver model)"),Iqe.forEach(t),HYo=i(j),Lv=n(j,"LI",{});var Nqe=s(Lv);K8e=n(Nqe,"STRONG",{});var Tyt=s(K8e);JYo=r(Tyt,"plbart"),Tyt.forEach(t),YYo=r(Nqe," \u2014 "),HW=n(Nqe,"A",{href:!0});var Myt=s(HW);KYo=r(Myt,"PLBartForSequenceClassification"),Myt.forEach(t),ZYo=r(Nqe," (PLBart model)"),Nqe.forEach(t),eKo=i(j),yv=n(j,"LI",{});var qqe=s(yv);Z8e=n(qqe,"STRONG",{});var Eyt=s(Z8e);oKo=r(Eyt,"qdqbert"),Eyt.forEach(t),rKo=r(qqe," \u2014 "),JW=n(qqe,"A",{href:!0});var Cyt=s(JW);tKo=r(Cyt,"QDQBertForSequenceClassification"),Cyt.forEach(t),aKo=r(qqe," (QDQBert model)"),qqe.forEach(t),nKo=i(j),xv=n(j,"LI",{});var jqe=s(xv);ebe=n(jqe,"STRONG",{});var wyt=s(ebe);sKo=r(wyt,"reformer"),wyt.forEach(t),lKo=r(jqe," \u2014 "),YW=n(jqe,"A",{href:!0});var Ayt=s(YW);iKo=r(Ayt,"ReformerForSequenceClassification"),Ayt.forEach(t),dKo=r(jqe," (Reformer model)"),jqe.forEach(t),cKo=i(j),$v=n(j,"LI",{});var Dqe=s($v);obe=n(Dqe,"STRONG",{});var Lyt=s(obe);fKo=r(Lyt,"rembert"),Lyt.forEach(t),mKo=r(Dqe," \u2014 "),KW=n(Dqe,"A",{href:!0});var yyt=s(KW);gKo=r(yyt,"RemBertForSequenceClassification"),yyt.forEach(t),hKo=r(Dqe," (RemBERT model)"),Dqe.forEach(t),pKo=i(j),kv=n(j,"LI",{});var Gqe=s(kv);rbe=n(Gqe,"STRONG",{});var xyt=s(rbe);_Ko=r(xyt,"roberta"),xyt.forEach(t),uKo=r(Gqe," \u2014 "),ZW=n(Gqe,"A",{href:!0});var $yt=s(ZW);bKo=r($yt,"RobertaForSequenceClassification"),$yt.forEach(t),vKo=r(Gqe," (RoBERTa model)"),Gqe.forEach(t),FKo=i(j),Sv=n(j,"LI",{});var Oqe=s(Sv);tbe=n(Oqe,"STRONG",{});var kyt=s(tbe);TKo=r(kyt,"roformer"),kyt.forEach(t),MKo=r(Oqe," \u2014 "),eQ=n(Oqe,"A",{href:!0});var Syt=s(eQ);EKo=r(Syt,"RoFormerForSequenceClassification"),Syt.forEach(t),CKo=r(Oqe," (RoFormer model)"),Oqe.forEach(t),wKo=i(j),Rv=n(j,"LI",{});var Vqe=s(Rv);abe=n(Vqe,"STRONG",{});var Ryt=s(abe);AKo=r(Ryt,"squeezebert"),Ryt.forEach(t),LKo=r(Vqe," \u2014 "),oQ=n(Vqe,"A",{href:!0});var Pyt=s(oQ);yKo=r(Pyt,"SqueezeBertForSequenceClassification"),Pyt.forEach(t),xKo=r(Vqe," (SqueezeBERT model)"),Vqe.forEach(t),$Ko=i(j),Pv=n(j,"LI",{});var Xqe=s(Pv);nbe=n(Xqe,"STRONG",{});var Byt=s(nbe);kKo=r(Byt,"tapas"),Byt.forEach(t),SKo=r(Xqe," \u2014 "),rQ=n(Xqe,"A",{href:!0});var Iyt=s(rQ);RKo=r(Iyt,"TapasForSequenceClassification"),Iyt.forEach(t),PKo=r(Xqe," (TAPAS model)"),Xqe.forEach(t),BKo=i(j),Bv=n(j,"LI",{});var zqe=s(Bv);sbe=n(zqe,"STRONG",{});var Nyt=s(sbe);IKo=r(Nyt,"transfo-xl"),Nyt.forEach(t),NKo=r(zqe," \u2014 "),tQ=n(zqe,"A",{href:!0});var qyt=s(tQ);qKo=r(qyt,"TransfoXLForSequenceClassification"),qyt.forEach(t),jKo=r(zqe," (Transformer-XL model)"),zqe.forEach(t),DKo=i(j),Iv=n(j,"LI",{});var Wqe=s(Iv);lbe=n(Wqe,"STRONG",{});var jyt=s(lbe);GKo=r(jyt,"xlm"),jyt.forEach(t),OKo=r(Wqe," \u2014 "),aQ=n(Wqe,"A",{href:!0});var Dyt=s(aQ);VKo=r(Dyt,"XLMForSequenceClassification"),Dyt.forEach(t),XKo=r(Wqe," (XLM model)"),Wqe.forEach(t),zKo=i(j),Nv=n(j,"LI",{});var Qqe=s(Nv);ibe=n(Qqe,"STRONG",{});var Gyt=s(ibe);WKo=r(Gyt,"xlm-roberta"),Gyt.forEach(t),QKo=r(Qqe," \u2014 "),nQ=n(Qqe,"A",{href:!0});var Oyt=s(nQ);UKo=r(Oyt,"XLMRobertaForSequenceClassification"),Oyt.forEach(t),HKo=r(Qqe," (XLM-RoBERTa model)"),Qqe.forEach(t),JKo=i(j),qv=n(j,"LI",{});var Uqe=s(qv);dbe=n(Uqe,"STRONG",{});var Vyt=s(dbe);YKo=r(Vyt,"xlm-roberta-xl"),Vyt.forEach(t),KKo=r(Uqe," \u2014 "),sQ=n(Uqe,"A",{href:!0});var Xyt=s(sQ);ZKo=r(Xyt,"XLMRobertaXLForSequenceClassification"),Xyt.forEach(t),eZo=r(Uqe," (XLM-RoBERTa-XL model)"),Uqe.forEach(t),oZo=i(j),jv=n(j,"LI",{});var Hqe=s(jv);cbe=n(Hqe,"STRONG",{});var zyt=s(cbe);rZo=r(zyt,"xlnet"),zyt.forEach(t),tZo=r(Hqe," \u2014 "),lQ=n(Hqe,"A",{href:!0});var Wyt=s(lQ);aZo=r(Wyt,"XLNetForSequenceClassification"),Wyt.forEach(t),nZo=r(Hqe," (XLNet model)"),Hqe.forEach(t),sZo=i(j),Dv=n(j,"LI",{});var Jqe=s(Dv);fbe=n(Jqe,"STRONG",{});var Qyt=s(fbe);lZo=r(Qyt,"yoso"),Qyt.forEach(t),iZo=r(Jqe," \u2014 "),iQ=n(Jqe,"A",{href:!0});var Uyt=s(iQ);dZo=r(Uyt,"YosoForSequenceClassification"),Uyt.forEach(t),cZo=r(Jqe," (YOSO model)"),Jqe.forEach(t),j.forEach(t),fZo=i(Ma),Gv=n(Ma,"P",{});var Yqe=s(Gv);mZo=r(Yqe,"The model is set in evaluation mode by default using "),mbe=n(Yqe,"CODE",{});var Hyt=s(mbe);gZo=r(Hyt,"model.eval()"),Hyt.forEach(t),hZo=r(Yqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gbe=n(Yqe,"CODE",{});var Jyt=s(gbe);pZo=r(Jyt,"model.train()"),Jyt.forEach(t),Yqe.forEach(t),_Zo=i(Ma),T(Ov.$$.fragment,Ma),Ma.forEach(t),wl.forEach(t),sHe=i(f),xd=n(f,"H2",{class:!0});var vYe=s(xd);Vv=n(vYe,"A",{id:!0,class:!0,href:!0});var Yyt=s(Vv);hbe=n(Yyt,"SPAN",{});var Kyt=s(hbe);T(j9.$$.fragment,Kyt),Kyt.forEach(t),Yyt.forEach(t),uZo=i(vYe),pbe=n(vYe,"SPAN",{});var Zyt=s(pbe);bZo=r(Zyt,"AutoModelForMultipleChoice"),Zyt.forEach(t),vYe.forEach(t),lHe=i(f),Do=n(f,"DIV",{class:!0});var Al=s(Do);T(D9.$$.fragment,Al),vZo=i(Al),$d=n(Al,"P",{});var Lne=s($d);FZo=r(Lne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dQ=n(Lne,"A",{href:!0});var e9t=s(dQ);TZo=r(e9t,"from_pretrained()"),e9t.forEach(t),MZo=r(Lne," class method or the "),cQ=n(Lne,"A",{href:!0});var o9t=s(cQ);EZo=r(o9t,"from_config()"),o9t.forEach(t),CZo=r(Lne,` class
method.`),Lne.forEach(t),wZo=i(Al),G9=n(Al,"P",{});var FYe=s(G9);AZo=r(FYe,"This class cannot be instantiated directly using "),_be=n(FYe,"CODE",{});var r9t=s(_be);LZo=r(r9t,"__init__()"),r9t.forEach(t),yZo=r(FYe," (throws an error)."),FYe.forEach(t),xZo=i(Al),Tt=n(Al,"DIV",{class:!0});var O7=s(Tt);T(O9.$$.fragment,O7),$Zo=i(O7),ube=n(O7,"P",{});var t9t=s(ube);kZo=r(t9t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),t9t.forEach(t),SZo=i(O7),kd=n(O7,"P",{});var yne=s(kd);RZo=r(yne,`Note:
Loading a model from its configuration file does `),bbe=n(yne,"STRONG",{});var a9t=s(bbe);PZo=r(a9t,"not"),a9t.forEach(t),BZo=r(yne,` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=n(yne,"A",{href:!0});var n9t=s(fQ);IZo=r(n9t,"from_pretrained()"),n9t.forEach(t),NZo=r(yne," to load the model weights."),yne.forEach(t),qZo=i(O7),T(Xv.$$.fragment,O7),O7.forEach(t),jZo=i(Al),ao=n(Al,"DIV",{class:!0});var Ea=s(ao);T(V9.$$.fragment,Ea),DZo=i(Ea),vbe=n(Ea,"P",{});var s9t=s(vbe);GZo=r(s9t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),s9t.forEach(t),OZo=i(Ea),en=n(Ea,"P",{});var V7=s(en);VZo=r(V7,"The model class to instantiate is selected based on the "),Fbe=n(V7,"CODE",{});var l9t=s(Fbe);XZo=r(l9t,"model_type"),l9t.forEach(t),zZo=r(V7,` property of the config object (either
passed as an argument or loaded from `),Tbe=n(V7,"CODE",{});var i9t=s(Tbe);WZo=r(i9t,"pretrained_model_name_or_path"),i9t.forEach(t),QZo=r(V7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=n(V7,"CODE",{});var d9t=s(Mbe);UZo=r(d9t,"pretrained_model_name_or_path"),d9t.forEach(t),HZo=r(V7,":"),V7.forEach(t),JZo=i(Ea),Z=n(Ea,"UL",{});var ee=s(Z);zv=n(ee,"LI",{});var Kqe=s(zv);Ebe=n(Kqe,"STRONG",{});var c9t=s(Ebe);YZo=r(c9t,"albert"),c9t.forEach(t),KZo=r(Kqe," \u2014 "),mQ=n(Kqe,"A",{href:!0});var f9t=s(mQ);ZZo=r(f9t,"AlbertForMultipleChoice"),f9t.forEach(t),eer=r(Kqe," (ALBERT model)"),Kqe.forEach(t),oer=i(ee),Wv=n(ee,"LI",{});var Zqe=s(Wv);Cbe=n(Zqe,"STRONG",{});var m9t=s(Cbe);rer=r(m9t,"bert"),m9t.forEach(t),ter=r(Zqe," \u2014 "),gQ=n(Zqe,"A",{href:!0});var g9t=s(gQ);aer=r(g9t,"BertForMultipleChoice"),g9t.forEach(t),ner=r(Zqe," (BERT model)"),Zqe.forEach(t),ser=i(ee),Qv=n(ee,"LI",{});var eje=s(Qv);wbe=n(eje,"STRONG",{});var h9t=s(wbe);ler=r(h9t,"big_bird"),h9t.forEach(t),ier=r(eje," \u2014 "),hQ=n(eje,"A",{href:!0});var p9t=s(hQ);der=r(p9t,"BigBirdForMultipleChoice"),p9t.forEach(t),cer=r(eje," (BigBird model)"),eje.forEach(t),fer=i(ee),Uv=n(ee,"LI",{});var oje=s(Uv);Abe=n(oje,"STRONG",{});var _9t=s(Abe);mer=r(_9t,"camembert"),_9t.forEach(t),ger=r(oje," \u2014 "),pQ=n(oje,"A",{href:!0});var u9t=s(pQ);her=r(u9t,"CamembertForMultipleChoice"),u9t.forEach(t),per=r(oje," (CamemBERT model)"),oje.forEach(t),_er=i(ee),Hv=n(ee,"LI",{});var rje=s(Hv);Lbe=n(rje,"STRONG",{});var b9t=s(Lbe);uer=r(b9t,"canine"),b9t.forEach(t),ber=r(rje," \u2014 "),_Q=n(rje,"A",{href:!0});var v9t=s(_Q);ver=r(v9t,"CanineForMultipleChoice"),v9t.forEach(t),Fer=r(rje," (CANINE model)"),rje.forEach(t),Ter=i(ee),Jv=n(ee,"LI",{});var tje=s(Jv);ybe=n(tje,"STRONG",{});var F9t=s(ybe);Mer=r(F9t,"convbert"),F9t.forEach(t),Eer=r(tje," \u2014 "),uQ=n(tje,"A",{href:!0});var T9t=s(uQ);Cer=r(T9t,"ConvBertForMultipleChoice"),T9t.forEach(t),wer=r(tje," (ConvBERT model)"),tje.forEach(t),Aer=i(ee),Yv=n(ee,"LI",{});var aje=s(Yv);xbe=n(aje,"STRONG",{});var M9t=s(xbe);Ler=r(M9t,"data2vec-text"),M9t.forEach(t),yer=r(aje," \u2014 "),bQ=n(aje,"A",{href:!0});var E9t=s(bQ);xer=r(E9t,"Data2VecTextForMultipleChoice"),E9t.forEach(t),$er=r(aje," (Data2VecText model)"),aje.forEach(t),ker=i(ee),Kv=n(ee,"LI",{});var nje=s(Kv);$be=n(nje,"STRONG",{});var C9t=s($be);Ser=r(C9t,"deberta-v2"),C9t.forEach(t),Rer=r(nje," \u2014 "),vQ=n(nje,"A",{href:!0});var w9t=s(vQ);Per=r(w9t,"DebertaV2ForMultipleChoice"),w9t.forEach(t),Ber=r(nje," (DeBERTa-v2 model)"),nje.forEach(t),Ier=i(ee),Zv=n(ee,"LI",{});var sje=s(Zv);kbe=n(sje,"STRONG",{});var A9t=s(kbe);Ner=r(A9t,"distilbert"),A9t.forEach(t),qer=r(sje," \u2014 "),FQ=n(sje,"A",{href:!0});var L9t=s(FQ);jer=r(L9t,"DistilBertForMultipleChoice"),L9t.forEach(t),Der=r(sje," (DistilBERT model)"),sje.forEach(t),Ger=i(ee),e6=n(ee,"LI",{});var lje=s(e6);Sbe=n(lje,"STRONG",{});var y9t=s(Sbe);Oer=r(y9t,"electra"),y9t.forEach(t),Ver=r(lje," \u2014 "),TQ=n(lje,"A",{href:!0});var x9t=s(TQ);Xer=r(x9t,"ElectraForMultipleChoice"),x9t.forEach(t),zer=r(lje," (ELECTRA model)"),lje.forEach(t),Wer=i(ee),o6=n(ee,"LI",{});var ije=s(o6);Rbe=n(ije,"STRONG",{});var $9t=s(Rbe);Qer=r($9t,"flaubert"),$9t.forEach(t),Uer=r(ije," \u2014 "),MQ=n(ije,"A",{href:!0});var k9t=s(MQ);Her=r(k9t,"FlaubertForMultipleChoice"),k9t.forEach(t),Jer=r(ije," (FlauBERT model)"),ije.forEach(t),Yer=i(ee),r6=n(ee,"LI",{});var dje=s(r6);Pbe=n(dje,"STRONG",{});var S9t=s(Pbe);Ker=r(S9t,"fnet"),S9t.forEach(t),Zer=r(dje," \u2014 "),EQ=n(dje,"A",{href:!0});var R9t=s(EQ);eor=r(R9t,"FNetForMultipleChoice"),R9t.forEach(t),oor=r(dje," (FNet model)"),dje.forEach(t),ror=i(ee),t6=n(ee,"LI",{});var cje=s(t6);Bbe=n(cje,"STRONG",{});var P9t=s(Bbe);tor=r(P9t,"funnel"),P9t.forEach(t),aor=r(cje," \u2014 "),CQ=n(cje,"A",{href:!0});var B9t=s(CQ);nor=r(B9t,"FunnelForMultipleChoice"),B9t.forEach(t),sor=r(cje," (Funnel Transformer model)"),cje.forEach(t),lor=i(ee),a6=n(ee,"LI",{});var fje=s(a6);Ibe=n(fje,"STRONG",{});var I9t=s(Ibe);ior=r(I9t,"ibert"),I9t.forEach(t),dor=r(fje," \u2014 "),wQ=n(fje,"A",{href:!0});var N9t=s(wQ);cor=r(N9t,"IBertForMultipleChoice"),N9t.forEach(t),mor=r(fje," (I-BERT model)"),fje.forEach(t),gor=i(ee),n6=n(ee,"LI",{});var mje=s(n6);Nbe=n(mje,"STRONG",{});var q9t=s(Nbe);hor=r(q9t,"longformer"),q9t.forEach(t),por=r(mje," \u2014 "),AQ=n(mje,"A",{href:!0});var j9t=s(AQ);_or=r(j9t,"LongformerForMultipleChoice"),j9t.forEach(t),uor=r(mje," (Longformer model)"),mje.forEach(t),bor=i(ee),s6=n(ee,"LI",{});var gje=s(s6);qbe=n(gje,"STRONG",{});var D9t=s(qbe);vor=r(D9t,"luke"),D9t.forEach(t),For=r(gje," \u2014 "),LQ=n(gje,"A",{href:!0});var G9t=s(LQ);Tor=r(G9t,"LukeForMultipleChoice"),G9t.forEach(t),Mor=r(gje," (LUKE model)"),gje.forEach(t),Eor=i(ee),l6=n(ee,"LI",{});var hje=s(l6);jbe=n(hje,"STRONG",{});var O9t=s(jbe);Cor=r(O9t,"megatron-bert"),O9t.forEach(t),wor=r(hje," \u2014 "),yQ=n(hje,"A",{href:!0});var V9t=s(yQ);Aor=r(V9t,"MegatronBertForMultipleChoice"),V9t.forEach(t),Lor=r(hje," (Megatron-BERT model)"),hje.forEach(t),yor=i(ee),i6=n(ee,"LI",{});var pje=s(i6);Dbe=n(pje,"STRONG",{});var X9t=s(Dbe);xor=r(X9t,"mobilebert"),X9t.forEach(t),$or=r(pje," \u2014 "),xQ=n(pje,"A",{href:!0});var z9t=s(xQ);kor=r(z9t,"MobileBertForMultipleChoice"),z9t.forEach(t),Sor=r(pje," (MobileBERT model)"),pje.forEach(t),Ror=i(ee),d6=n(ee,"LI",{});var _je=s(d6);Gbe=n(_je,"STRONG",{});var W9t=s(Gbe);Por=r(W9t,"mpnet"),W9t.forEach(t),Bor=r(_je," \u2014 "),$Q=n(_je,"A",{href:!0});var Q9t=s($Q);Ior=r(Q9t,"MPNetForMultipleChoice"),Q9t.forEach(t),Nor=r(_je," (MPNet model)"),_je.forEach(t),qor=i(ee),c6=n(ee,"LI",{});var uje=s(c6);Obe=n(uje,"STRONG",{});var U9t=s(Obe);jor=r(U9t,"nezha"),U9t.forEach(t),Dor=r(uje," \u2014 "),kQ=n(uje,"A",{href:!0});var H9t=s(kQ);Gor=r(H9t,"NezhaForMultipleChoice"),H9t.forEach(t),Oor=r(uje," (Nezha model)"),uje.forEach(t),Vor=i(ee),f6=n(ee,"LI",{});var bje=s(f6);Vbe=n(bje,"STRONG",{});var J9t=s(Vbe);Xor=r(J9t,"nystromformer"),J9t.forEach(t),zor=r(bje," \u2014 "),SQ=n(bje,"A",{href:!0});var Y9t=s(SQ);Wor=r(Y9t,"NystromformerForMultipleChoice"),Y9t.forEach(t),Qor=r(bje," (Nystr\xF6mformer model)"),bje.forEach(t),Uor=i(ee),m6=n(ee,"LI",{});var vje=s(m6);Xbe=n(vje,"STRONG",{});var K9t=s(Xbe);Hor=r(K9t,"qdqbert"),K9t.forEach(t),Jor=r(vje," \u2014 "),RQ=n(vje,"A",{href:!0});var Z9t=s(RQ);Yor=r(Z9t,"QDQBertForMultipleChoice"),Z9t.forEach(t),Kor=r(vje," (QDQBert model)"),vje.forEach(t),Zor=i(ee),g6=n(ee,"LI",{});var Fje=s(g6);zbe=n(Fje,"STRONG",{});var ext=s(zbe);err=r(ext,"rembert"),ext.forEach(t),orr=r(Fje," \u2014 "),PQ=n(Fje,"A",{href:!0});var oxt=s(PQ);rrr=r(oxt,"RemBertForMultipleChoice"),oxt.forEach(t),trr=r(Fje," (RemBERT model)"),Fje.forEach(t),arr=i(ee),h6=n(ee,"LI",{});var Tje=s(h6);Wbe=n(Tje,"STRONG",{});var rxt=s(Wbe);nrr=r(rxt,"roberta"),rxt.forEach(t),srr=r(Tje," \u2014 "),BQ=n(Tje,"A",{href:!0});var txt=s(BQ);lrr=r(txt,"RobertaForMultipleChoice"),txt.forEach(t),irr=r(Tje," (RoBERTa model)"),Tje.forEach(t),drr=i(ee),p6=n(ee,"LI",{});var Mje=s(p6);Qbe=n(Mje,"STRONG",{});var axt=s(Qbe);crr=r(axt,"roformer"),axt.forEach(t),frr=r(Mje," \u2014 "),IQ=n(Mje,"A",{href:!0});var nxt=s(IQ);mrr=r(nxt,"RoFormerForMultipleChoice"),nxt.forEach(t),grr=r(Mje," (RoFormer model)"),Mje.forEach(t),hrr=i(ee),_6=n(ee,"LI",{});var Eje=s(_6);Ube=n(Eje,"STRONG",{});var sxt=s(Ube);prr=r(sxt,"squeezebert"),sxt.forEach(t),_rr=r(Eje," \u2014 "),NQ=n(Eje,"A",{href:!0});var lxt=s(NQ);urr=r(lxt,"SqueezeBertForMultipleChoice"),lxt.forEach(t),brr=r(Eje," (SqueezeBERT model)"),Eje.forEach(t),vrr=i(ee),u6=n(ee,"LI",{});var Cje=s(u6);Hbe=n(Cje,"STRONG",{});var ixt=s(Hbe);Frr=r(ixt,"xlm"),ixt.forEach(t),Trr=r(Cje," \u2014 "),qQ=n(Cje,"A",{href:!0});var dxt=s(qQ);Mrr=r(dxt,"XLMForMultipleChoice"),dxt.forEach(t),Err=r(Cje," (XLM model)"),Cje.forEach(t),Crr=i(ee),b6=n(ee,"LI",{});var wje=s(b6);Jbe=n(wje,"STRONG",{});var cxt=s(Jbe);wrr=r(cxt,"xlm-roberta"),cxt.forEach(t),Arr=r(wje," \u2014 "),jQ=n(wje,"A",{href:!0});var fxt=s(jQ);Lrr=r(fxt,"XLMRobertaForMultipleChoice"),fxt.forEach(t),yrr=r(wje," (XLM-RoBERTa model)"),wje.forEach(t),xrr=i(ee),v6=n(ee,"LI",{});var Aje=s(v6);Ybe=n(Aje,"STRONG",{});var mxt=s(Ybe);$rr=r(mxt,"xlm-roberta-xl"),mxt.forEach(t),krr=r(Aje," \u2014 "),DQ=n(Aje,"A",{href:!0});var gxt=s(DQ);Srr=r(gxt,"XLMRobertaXLForMultipleChoice"),gxt.forEach(t),Rrr=r(Aje," (XLM-RoBERTa-XL model)"),Aje.forEach(t),Prr=i(ee),F6=n(ee,"LI",{});var Lje=s(F6);Kbe=n(Lje,"STRONG",{});var hxt=s(Kbe);Brr=r(hxt,"xlnet"),hxt.forEach(t),Irr=r(Lje," \u2014 "),GQ=n(Lje,"A",{href:!0});var pxt=s(GQ);Nrr=r(pxt,"XLNetForMultipleChoice"),pxt.forEach(t),qrr=r(Lje," (XLNet model)"),Lje.forEach(t),jrr=i(ee),T6=n(ee,"LI",{});var yje=s(T6);Zbe=n(yje,"STRONG",{});var _xt=s(Zbe);Drr=r(_xt,"yoso"),_xt.forEach(t),Grr=r(yje," \u2014 "),OQ=n(yje,"A",{href:!0});var uxt=s(OQ);Orr=r(uxt,"YosoForMultipleChoice"),uxt.forEach(t),Vrr=r(yje," (YOSO model)"),yje.forEach(t),ee.forEach(t),Xrr=i(Ea),M6=n(Ea,"P",{});var xje=s(M6);zrr=r(xje,"The model is set in evaluation mode by default using "),e2e=n(xje,"CODE",{});var bxt=s(e2e);Wrr=r(bxt,"model.eval()"),bxt.forEach(t),Qrr=r(xje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o2e=n(xje,"CODE",{});var vxt=s(o2e);Urr=r(vxt,"model.train()"),vxt.forEach(t),xje.forEach(t),Hrr=i(Ea),T(E6.$$.fragment,Ea),Ea.forEach(t),Al.forEach(t),iHe=i(f),Sd=n(f,"H2",{class:!0});var TYe=s(Sd);C6=n(TYe,"A",{id:!0,class:!0,href:!0});var Fxt=s(C6);r2e=n(Fxt,"SPAN",{});var Txt=s(r2e);T(X9.$$.fragment,Txt),Txt.forEach(t),Fxt.forEach(t),Jrr=i(TYe),t2e=n(TYe,"SPAN",{});var Mxt=s(t2e);Yrr=r(Mxt,"AutoModelForNextSentencePrediction"),Mxt.forEach(t),TYe.forEach(t),dHe=i(f),Go=n(f,"DIV",{class:!0});var Ll=s(Go);T(z9.$$.fragment,Ll),Krr=i(Ll),Rd=n(Ll,"P",{});var xne=s(Rd);Zrr=r(xne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),VQ=n(xne,"A",{href:!0});var Ext=s(VQ);etr=r(Ext,"from_pretrained()"),Ext.forEach(t),otr=r(xne," class method or the "),XQ=n(xne,"A",{href:!0});var Cxt=s(XQ);rtr=r(Cxt,"from_config()"),Cxt.forEach(t),ttr=r(xne,` class
method.`),xne.forEach(t),atr=i(Ll),W9=n(Ll,"P",{});var MYe=s(W9);ntr=r(MYe,"This class cannot be instantiated directly using "),a2e=n(MYe,"CODE",{});var wxt=s(a2e);str=r(wxt,"__init__()"),wxt.forEach(t),ltr=r(MYe," (throws an error)."),MYe.forEach(t),itr=i(Ll),Mt=n(Ll,"DIV",{class:!0});var X7=s(Mt);T(Q9.$$.fragment,X7),dtr=i(X7),n2e=n(X7,"P",{});var Axt=s(n2e);ctr=r(Axt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Axt.forEach(t),ftr=i(X7),Pd=n(X7,"P",{});var $ne=s(Pd);mtr=r($ne,`Note:
Loading a model from its configuration file does `),s2e=n($ne,"STRONG",{});var Lxt=s(s2e);gtr=r(Lxt,"not"),Lxt.forEach(t),htr=r($ne,` load the model weights. It only affects the
model\u2019s configuration. Use `),zQ=n($ne,"A",{href:!0});var yxt=s(zQ);ptr=r(yxt,"from_pretrained()"),yxt.forEach(t),_tr=r($ne," to load the model weights."),$ne.forEach(t),utr=i(X7),T(w6.$$.fragment,X7),X7.forEach(t),btr=i(Ll),no=n(Ll,"DIV",{class:!0});var Ca=s(no);T(U9.$$.fragment,Ca),vtr=i(Ca),l2e=n(Ca,"P",{});var xxt=s(l2e);Ftr=r(xxt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xxt.forEach(t),Ttr=i(Ca),on=n(Ca,"P",{});var z7=s(on);Mtr=r(z7,"The model class to instantiate is selected based on the "),i2e=n(z7,"CODE",{});var $xt=s(i2e);Etr=r($xt,"model_type"),$xt.forEach(t),Ctr=r(z7,` property of the config object (either
passed as an argument or loaded from `),d2e=n(z7,"CODE",{});var kxt=s(d2e);wtr=r(kxt,"pretrained_model_name_or_path"),kxt.forEach(t),Atr=r(z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=n(z7,"CODE",{});var Sxt=s(c2e);Ltr=r(Sxt,"pretrained_model_name_or_path"),Sxt.forEach(t),ytr=r(z7,":"),z7.forEach(t),xtr=i(Ca),Oo=n(Ca,"UL",{});var wa=s(Oo);A6=n(wa,"LI",{});var $je=s(A6);f2e=n($je,"STRONG",{});var Rxt=s(f2e);$tr=r(Rxt,"bert"),Rxt.forEach(t),ktr=r($je," \u2014 "),WQ=n($je,"A",{href:!0});var Pxt=s(WQ);Str=r(Pxt,"BertForNextSentencePrediction"),Pxt.forEach(t),Rtr=r($je," (BERT model)"),$je.forEach(t),Ptr=i(wa),L6=n(wa,"LI",{});var kje=s(L6);m2e=n(kje,"STRONG",{});var Bxt=s(m2e);Btr=r(Bxt,"fnet"),Bxt.forEach(t),Itr=r(kje," \u2014 "),QQ=n(kje,"A",{href:!0});var Ixt=s(QQ);Ntr=r(Ixt,"FNetForNextSentencePrediction"),Ixt.forEach(t),qtr=r(kje," (FNet model)"),kje.forEach(t),jtr=i(wa),y6=n(wa,"LI",{});var Sje=s(y6);g2e=n(Sje,"STRONG",{});var Nxt=s(g2e);Dtr=r(Nxt,"megatron-bert"),Nxt.forEach(t),Gtr=r(Sje," \u2014 "),UQ=n(Sje,"A",{href:!0});var qxt=s(UQ);Otr=r(qxt,"MegatronBertForNextSentencePrediction"),qxt.forEach(t),Vtr=r(Sje," (Megatron-BERT model)"),Sje.forEach(t),Xtr=i(wa),x6=n(wa,"LI",{});var Rje=s(x6);h2e=n(Rje,"STRONG",{});var jxt=s(h2e);ztr=r(jxt,"mobilebert"),jxt.forEach(t),Wtr=r(Rje," \u2014 "),HQ=n(Rje,"A",{href:!0});var Dxt=s(HQ);Qtr=r(Dxt,"MobileBertForNextSentencePrediction"),Dxt.forEach(t),Utr=r(Rje," (MobileBERT model)"),Rje.forEach(t),Htr=i(wa),$6=n(wa,"LI",{});var Pje=s($6);p2e=n(Pje,"STRONG",{});var Gxt=s(p2e);Jtr=r(Gxt,"nezha"),Gxt.forEach(t),Ytr=r(Pje," \u2014 "),JQ=n(Pje,"A",{href:!0});var Oxt=s(JQ);Ktr=r(Oxt,"NezhaForNextSentencePrediction"),Oxt.forEach(t),Ztr=r(Pje," (Nezha model)"),Pje.forEach(t),ear=i(wa),k6=n(wa,"LI",{});var Bje=s(k6);_2e=n(Bje,"STRONG",{});var Vxt=s(_2e);oar=r(Vxt,"qdqbert"),Vxt.forEach(t),rar=r(Bje," \u2014 "),YQ=n(Bje,"A",{href:!0});var Xxt=s(YQ);tar=r(Xxt,"QDQBertForNextSentencePrediction"),Xxt.forEach(t),aar=r(Bje," (QDQBert model)"),Bje.forEach(t),wa.forEach(t),nar=i(Ca),S6=n(Ca,"P",{});var Ije=s(S6);sar=r(Ije,"The model is set in evaluation mode by default using "),u2e=n(Ije,"CODE",{});var zxt=s(u2e);lar=r(zxt,"model.eval()"),zxt.forEach(t),iar=r(Ije,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b2e=n(Ije,"CODE",{});var Wxt=s(b2e);dar=r(Wxt,"model.train()"),Wxt.forEach(t),Ije.forEach(t),car=i(Ca),T(R6.$$.fragment,Ca),Ca.forEach(t),Ll.forEach(t),cHe=i(f),Bd=n(f,"H2",{class:!0});var EYe=s(Bd);P6=n(EYe,"A",{id:!0,class:!0,href:!0});var Qxt=s(P6);v2e=n(Qxt,"SPAN",{});var Uxt=s(v2e);T(H9.$$.fragment,Uxt),Uxt.forEach(t),Qxt.forEach(t),far=i(EYe),F2e=n(EYe,"SPAN",{});var Hxt=s(F2e);mar=r(Hxt,"AutoModelForTokenClassification"),Hxt.forEach(t),EYe.forEach(t),fHe=i(f),Vo=n(f,"DIV",{class:!0});var yl=s(Vo);T(J9.$$.fragment,yl),gar=i(yl),Id=n(yl,"P",{});var kne=s(Id);har=r(kne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),KQ=n(kne,"A",{href:!0});var Jxt=s(KQ);par=r(Jxt,"from_pretrained()"),Jxt.forEach(t),_ar=r(kne," class method or the "),ZQ=n(kne,"A",{href:!0});var Yxt=s(ZQ);uar=r(Yxt,"from_config()"),Yxt.forEach(t),bar=r(kne,` class
method.`),kne.forEach(t),Far=i(yl),Y9=n(yl,"P",{});var CYe=s(Y9);Tar=r(CYe,"This class cannot be instantiated directly using "),T2e=n(CYe,"CODE",{});var Kxt=s(T2e);Mar=r(Kxt,"__init__()"),Kxt.forEach(t),Ear=r(CYe," (throws an error)."),CYe.forEach(t),Car=i(yl),Et=n(yl,"DIV",{class:!0});var W7=s(Et);T(K9.$$.fragment,W7),war=i(W7),M2e=n(W7,"P",{});var Zxt=s(M2e);Aar=r(Zxt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Zxt.forEach(t),Lar=i(W7),Nd=n(W7,"P",{});var Sne=s(Nd);yar=r(Sne,`Note:
Loading a model from its configuration file does `),E2e=n(Sne,"STRONG",{});var e$t=s(E2e);xar=r(e$t,"not"),e$t.forEach(t),$ar=r(Sne,` load the model weights. It only affects the
model\u2019s configuration. Use `),eU=n(Sne,"A",{href:!0});var o$t=s(eU);kar=r(o$t,"from_pretrained()"),o$t.forEach(t),Sar=r(Sne," to load the model weights."),Sne.forEach(t),Rar=i(W7),T(B6.$$.fragment,W7),W7.forEach(t),Par=i(yl),so=n(yl,"DIV",{class:!0});var Aa=s(so);T(Z9.$$.fragment,Aa),Bar=i(Aa),C2e=n(Aa,"P",{});var r$t=s(C2e);Iar=r(r$t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),r$t.forEach(t),Nar=i(Aa),rn=n(Aa,"P",{});var Q7=s(rn);qar=r(Q7,"The model class to instantiate is selected based on the "),w2e=n(Q7,"CODE",{});var t$t=s(w2e);jar=r(t$t,"model_type"),t$t.forEach(t),Dar=r(Q7,` property of the config object (either
passed as an argument or loaded from `),A2e=n(Q7,"CODE",{});var a$t=s(A2e);Gar=r(a$t,"pretrained_model_name_or_path"),a$t.forEach(t),Oar=r(Q7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=n(Q7,"CODE",{});var n$t=s(L2e);Var=r(n$t,"pretrained_model_name_or_path"),n$t.forEach(t),Xar=r(Q7,":"),Q7.forEach(t),zar=i(Aa),H=n(Aa,"UL",{});var K=s(H);I6=n(K,"LI",{});var Nje=s(I6);y2e=n(Nje,"STRONG",{});var s$t=s(y2e);War=r(s$t,"albert"),s$t.forEach(t),Qar=r(Nje," \u2014 "),oU=n(Nje,"A",{href:!0});var l$t=s(oU);Uar=r(l$t,"AlbertForTokenClassification"),l$t.forEach(t),Har=r(Nje," (ALBERT model)"),Nje.forEach(t),Jar=i(K),N6=n(K,"LI",{});var qje=s(N6);x2e=n(qje,"STRONG",{});var i$t=s(x2e);Yar=r(i$t,"bert"),i$t.forEach(t),Kar=r(qje," \u2014 "),rU=n(qje,"A",{href:!0});var d$t=s(rU);Zar=r(d$t,"BertForTokenClassification"),d$t.forEach(t),enr=r(qje," (BERT model)"),qje.forEach(t),onr=i(K),q6=n(K,"LI",{});var jje=s(q6);$2e=n(jje,"STRONG",{});var c$t=s($2e);rnr=r(c$t,"big_bird"),c$t.forEach(t),tnr=r(jje," \u2014 "),tU=n(jje,"A",{href:!0});var f$t=s(tU);anr=r(f$t,"BigBirdForTokenClassification"),f$t.forEach(t),nnr=r(jje," (BigBird model)"),jje.forEach(t),snr=i(K),j6=n(K,"LI",{});var Dje=s(j6);k2e=n(Dje,"STRONG",{});var m$t=s(k2e);lnr=r(m$t,"bloom"),m$t.forEach(t),inr=r(Dje," \u2014 "),aU=n(Dje,"A",{href:!0});var g$t=s(aU);dnr=r(g$t,"BloomForTokenClassification"),g$t.forEach(t),cnr=r(Dje," (BLOOM model)"),Dje.forEach(t),fnr=i(K),D6=n(K,"LI",{});var Gje=s(D6);S2e=n(Gje,"STRONG",{});var h$t=s(S2e);mnr=r(h$t,"camembert"),h$t.forEach(t),gnr=r(Gje," \u2014 "),nU=n(Gje,"A",{href:!0});var p$t=s(nU);hnr=r(p$t,"CamembertForTokenClassification"),p$t.forEach(t),pnr=r(Gje," (CamemBERT model)"),Gje.forEach(t),_nr=i(K),G6=n(K,"LI",{});var Oje=s(G6);R2e=n(Oje,"STRONG",{});var _$t=s(R2e);unr=r(_$t,"canine"),_$t.forEach(t),bnr=r(Oje," \u2014 "),sU=n(Oje,"A",{href:!0});var u$t=s(sU);vnr=r(u$t,"CanineForTokenClassification"),u$t.forEach(t),Fnr=r(Oje," (CANINE model)"),Oje.forEach(t),Tnr=i(K),O6=n(K,"LI",{});var Vje=s(O6);P2e=n(Vje,"STRONG",{});var b$t=s(P2e);Mnr=r(b$t,"convbert"),b$t.forEach(t),Enr=r(Vje," \u2014 "),lU=n(Vje,"A",{href:!0});var v$t=s(lU);Cnr=r(v$t,"ConvBertForTokenClassification"),v$t.forEach(t),wnr=r(Vje," (ConvBERT model)"),Vje.forEach(t),Anr=i(K),V6=n(K,"LI",{});var Xje=s(V6);B2e=n(Xje,"STRONG",{});var F$t=s(B2e);Lnr=r(F$t,"data2vec-text"),F$t.forEach(t),ynr=r(Xje," \u2014 "),iU=n(Xje,"A",{href:!0});var T$t=s(iU);xnr=r(T$t,"Data2VecTextForTokenClassification"),T$t.forEach(t),$nr=r(Xje," (Data2VecText model)"),Xje.forEach(t),knr=i(K),X6=n(K,"LI",{});var zje=s(X6);I2e=n(zje,"STRONG",{});var M$t=s(I2e);Snr=r(M$t,"deberta"),M$t.forEach(t),Rnr=r(zje," \u2014 "),dU=n(zje,"A",{href:!0});var E$t=s(dU);Pnr=r(E$t,"DebertaForTokenClassification"),E$t.forEach(t),Bnr=r(zje," (DeBERTa model)"),zje.forEach(t),Inr=i(K),z6=n(K,"LI",{});var Wje=s(z6);N2e=n(Wje,"STRONG",{});var C$t=s(N2e);Nnr=r(C$t,"deberta-v2"),C$t.forEach(t),qnr=r(Wje," \u2014 "),cU=n(Wje,"A",{href:!0});var w$t=s(cU);jnr=r(w$t,"DebertaV2ForTokenClassification"),w$t.forEach(t),Dnr=r(Wje," (DeBERTa-v2 model)"),Wje.forEach(t),Gnr=i(K),W6=n(K,"LI",{});var Qje=s(W6);q2e=n(Qje,"STRONG",{});var A$t=s(q2e);Onr=r(A$t,"distilbert"),A$t.forEach(t),Vnr=r(Qje," \u2014 "),fU=n(Qje,"A",{href:!0});var L$t=s(fU);Xnr=r(L$t,"DistilBertForTokenClassification"),L$t.forEach(t),znr=r(Qje," (DistilBERT model)"),Qje.forEach(t),Wnr=i(K),Q6=n(K,"LI",{});var Uje=s(Q6);j2e=n(Uje,"STRONG",{});var y$t=s(j2e);Qnr=r(y$t,"electra"),y$t.forEach(t),Unr=r(Uje," \u2014 "),mU=n(Uje,"A",{href:!0});var x$t=s(mU);Hnr=r(x$t,"ElectraForTokenClassification"),x$t.forEach(t),Jnr=r(Uje," (ELECTRA model)"),Uje.forEach(t),Ynr=i(K),U6=n(K,"LI",{});var Hje=s(U6);D2e=n(Hje,"STRONG",{});var $$t=s(D2e);Knr=r($$t,"flaubert"),$$t.forEach(t),Znr=r(Hje," \u2014 "),gU=n(Hje,"A",{href:!0});var k$t=s(gU);esr=r(k$t,"FlaubertForTokenClassification"),k$t.forEach(t),osr=r(Hje," (FlauBERT model)"),Hje.forEach(t),rsr=i(K),H6=n(K,"LI",{});var Jje=s(H6);G2e=n(Jje,"STRONG",{});var S$t=s(G2e);tsr=r(S$t,"fnet"),S$t.forEach(t),asr=r(Jje," \u2014 "),hU=n(Jje,"A",{href:!0});var R$t=s(hU);nsr=r(R$t,"FNetForTokenClassification"),R$t.forEach(t),ssr=r(Jje," (FNet model)"),Jje.forEach(t),lsr=i(K),J6=n(K,"LI",{});var Yje=s(J6);O2e=n(Yje,"STRONG",{});var P$t=s(O2e);isr=r(P$t,"funnel"),P$t.forEach(t),dsr=r(Yje," \u2014 "),pU=n(Yje,"A",{href:!0});var B$t=s(pU);csr=r(B$t,"FunnelForTokenClassification"),B$t.forEach(t),fsr=r(Yje," (Funnel Transformer model)"),Yje.forEach(t),msr=i(K),Y6=n(K,"LI",{});var Kje=s(Y6);V2e=n(Kje,"STRONG",{});var I$t=s(V2e);gsr=r(I$t,"gpt2"),I$t.forEach(t),hsr=r(Kje," \u2014 "),_U=n(Kje,"A",{href:!0});var N$t=s(_U);psr=r(N$t,"GPT2ForTokenClassification"),N$t.forEach(t),_sr=r(Kje," (OpenAI GPT-2 model)"),Kje.forEach(t),usr=i(K),K6=n(K,"LI",{});var Zje=s(K6);X2e=n(Zje,"STRONG",{});var q$t=s(X2e);bsr=r(q$t,"ibert"),q$t.forEach(t),vsr=r(Zje," \u2014 "),uU=n(Zje,"A",{href:!0});var j$t=s(uU);Fsr=r(j$t,"IBertForTokenClassification"),j$t.forEach(t),Tsr=r(Zje," (I-BERT model)"),Zje.forEach(t),Msr=i(K),Z6=n(K,"LI",{});var eDe=s(Z6);z2e=n(eDe,"STRONG",{});var D$t=s(z2e);Esr=r(D$t,"layoutlm"),D$t.forEach(t),Csr=r(eDe," \u2014 "),bU=n(eDe,"A",{href:!0});var G$t=s(bU);wsr=r(G$t,"LayoutLMForTokenClassification"),G$t.forEach(t),Asr=r(eDe," (LayoutLM model)"),eDe.forEach(t),Lsr=i(K),eF=n(K,"LI",{});var oDe=s(eF);W2e=n(oDe,"STRONG",{});var O$t=s(W2e);ysr=r(O$t,"layoutlmv2"),O$t.forEach(t),xsr=r(oDe," \u2014 "),vU=n(oDe,"A",{href:!0});var V$t=s(vU);$sr=r(V$t,"LayoutLMv2ForTokenClassification"),V$t.forEach(t),ksr=r(oDe," (LayoutLMv2 model)"),oDe.forEach(t),Ssr=i(K),oF=n(K,"LI",{});var rDe=s(oF);Q2e=n(rDe,"STRONG",{});var X$t=s(Q2e);Rsr=r(X$t,"layoutlmv3"),X$t.forEach(t),Psr=r(rDe," \u2014 "),FU=n(rDe,"A",{href:!0});var z$t=s(FU);Bsr=r(z$t,"LayoutLMv3ForTokenClassification"),z$t.forEach(t),Isr=r(rDe," (LayoutLMv3 model)"),rDe.forEach(t),Nsr=i(K),rF=n(K,"LI",{});var tDe=s(rF);U2e=n(tDe,"STRONG",{});var W$t=s(U2e);qsr=r(W$t,"longformer"),W$t.forEach(t),jsr=r(tDe," \u2014 "),TU=n(tDe,"A",{href:!0});var Q$t=s(TU);Dsr=r(Q$t,"LongformerForTokenClassification"),Q$t.forEach(t),Gsr=r(tDe," (Longformer model)"),tDe.forEach(t),Osr=i(K),tF=n(K,"LI",{});var aDe=s(tF);H2e=n(aDe,"STRONG",{});var U$t=s(H2e);Vsr=r(U$t,"luke"),U$t.forEach(t),Xsr=r(aDe," \u2014 "),MU=n(aDe,"A",{href:!0});var H$t=s(MU);zsr=r(H$t,"LukeForTokenClassification"),H$t.forEach(t),Wsr=r(aDe," (LUKE model)"),aDe.forEach(t),Qsr=i(K),aF=n(K,"LI",{});var nDe=s(aF);J2e=n(nDe,"STRONG",{});var J$t=s(J2e);Usr=r(J$t,"megatron-bert"),J$t.forEach(t),Hsr=r(nDe," \u2014 "),EU=n(nDe,"A",{href:!0});var Y$t=s(EU);Jsr=r(Y$t,"MegatronBertForTokenClassification"),Y$t.forEach(t),Ysr=r(nDe," (Megatron-BERT model)"),nDe.forEach(t),Ksr=i(K),nF=n(K,"LI",{});var sDe=s(nF);Y2e=n(sDe,"STRONG",{});var K$t=s(Y2e);Zsr=r(K$t,"mobilebert"),K$t.forEach(t),elr=r(sDe," \u2014 "),CU=n(sDe,"A",{href:!0});var Z$t=s(CU);olr=r(Z$t,"MobileBertForTokenClassification"),Z$t.forEach(t),rlr=r(sDe," (MobileBERT model)"),sDe.forEach(t),tlr=i(K),sF=n(K,"LI",{});var lDe=s(sF);K2e=n(lDe,"STRONG",{});var ekt=s(K2e);alr=r(ekt,"mpnet"),ekt.forEach(t),nlr=r(lDe," \u2014 "),wU=n(lDe,"A",{href:!0});var okt=s(wU);slr=r(okt,"MPNetForTokenClassification"),okt.forEach(t),llr=r(lDe," (MPNet model)"),lDe.forEach(t),ilr=i(K),lF=n(K,"LI",{});var iDe=s(lF);Z2e=n(iDe,"STRONG",{});var rkt=s(Z2e);dlr=r(rkt,"nezha"),rkt.forEach(t),clr=r(iDe," \u2014 "),AU=n(iDe,"A",{href:!0});var tkt=s(AU);flr=r(tkt,"NezhaForTokenClassification"),tkt.forEach(t),mlr=r(iDe," (Nezha model)"),iDe.forEach(t),glr=i(K),iF=n(K,"LI",{});var dDe=s(iF);eve=n(dDe,"STRONG",{});var akt=s(eve);hlr=r(akt,"nystromformer"),akt.forEach(t),plr=r(dDe," \u2014 "),LU=n(dDe,"A",{href:!0});var nkt=s(LU);_lr=r(nkt,"NystromformerForTokenClassification"),nkt.forEach(t),ulr=r(dDe," (Nystr\xF6mformer model)"),dDe.forEach(t),blr=i(K),dF=n(K,"LI",{});var cDe=s(dF);ove=n(cDe,"STRONG",{});var skt=s(ove);vlr=r(skt,"qdqbert"),skt.forEach(t),Flr=r(cDe," \u2014 "),yU=n(cDe,"A",{href:!0});var lkt=s(yU);Tlr=r(lkt,"QDQBertForTokenClassification"),lkt.forEach(t),Mlr=r(cDe," (QDQBert model)"),cDe.forEach(t),Elr=i(K),cF=n(K,"LI",{});var fDe=s(cF);rve=n(fDe,"STRONG",{});var ikt=s(rve);Clr=r(ikt,"rembert"),ikt.forEach(t),wlr=r(fDe," \u2014 "),xU=n(fDe,"A",{href:!0});var dkt=s(xU);Alr=r(dkt,"RemBertForTokenClassification"),dkt.forEach(t),Llr=r(fDe," (RemBERT model)"),fDe.forEach(t),ylr=i(K),fF=n(K,"LI",{});var mDe=s(fF);tve=n(mDe,"STRONG",{});var ckt=s(tve);xlr=r(ckt,"roberta"),ckt.forEach(t),$lr=r(mDe," \u2014 "),$U=n(mDe,"A",{href:!0});var fkt=s($U);klr=r(fkt,"RobertaForTokenClassification"),fkt.forEach(t),Slr=r(mDe," (RoBERTa model)"),mDe.forEach(t),Rlr=i(K),mF=n(K,"LI",{});var gDe=s(mF);ave=n(gDe,"STRONG",{});var mkt=s(ave);Plr=r(mkt,"roformer"),mkt.forEach(t),Blr=r(gDe," \u2014 "),kU=n(gDe,"A",{href:!0});var gkt=s(kU);Ilr=r(gkt,"RoFormerForTokenClassification"),gkt.forEach(t),Nlr=r(gDe," (RoFormer model)"),gDe.forEach(t),qlr=i(K),gF=n(K,"LI",{});var hDe=s(gF);nve=n(hDe,"STRONG",{});var hkt=s(nve);jlr=r(hkt,"squeezebert"),hkt.forEach(t),Dlr=r(hDe," \u2014 "),SU=n(hDe,"A",{href:!0});var pkt=s(SU);Glr=r(pkt,"SqueezeBertForTokenClassification"),pkt.forEach(t),Olr=r(hDe," (SqueezeBERT model)"),hDe.forEach(t),Vlr=i(K),hF=n(K,"LI",{});var pDe=s(hF);sve=n(pDe,"STRONG",{});var _kt=s(sve);Xlr=r(_kt,"xlm"),_kt.forEach(t),zlr=r(pDe," \u2014 "),RU=n(pDe,"A",{href:!0});var ukt=s(RU);Wlr=r(ukt,"XLMForTokenClassification"),ukt.forEach(t),Qlr=r(pDe," (XLM model)"),pDe.forEach(t),Ulr=i(K),pF=n(K,"LI",{});var _De=s(pF);lve=n(_De,"STRONG",{});var bkt=s(lve);Hlr=r(bkt,"xlm-roberta"),bkt.forEach(t),Jlr=r(_De," \u2014 "),PU=n(_De,"A",{href:!0});var vkt=s(PU);Ylr=r(vkt,"XLMRobertaForTokenClassification"),vkt.forEach(t),Klr=r(_De," (XLM-RoBERTa model)"),_De.forEach(t),Zlr=i(K),_F=n(K,"LI",{});var uDe=s(_F);ive=n(uDe,"STRONG",{});var Fkt=s(ive);eir=r(Fkt,"xlm-roberta-xl"),Fkt.forEach(t),oir=r(uDe," \u2014 "),BU=n(uDe,"A",{href:!0});var Tkt=s(BU);rir=r(Tkt,"XLMRobertaXLForTokenClassification"),Tkt.forEach(t),tir=r(uDe," (XLM-RoBERTa-XL model)"),uDe.forEach(t),air=i(K),uF=n(K,"LI",{});var bDe=s(uF);dve=n(bDe,"STRONG",{});var Mkt=s(dve);nir=r(Mkt,"xlnet"),Mkt.forEach(t),sir=r(bDe," \u2014 "),IU=n(bDe,"A",{href:!0});var Ekt=s(IU);lir=r(Ekt,"XLNetForTokenClassification"),Ekt.forEach(t),iir=r(bDe," (XLNet model)"),bDe.forEach(t),dir=i(K),bF=n(K,"LI",{});var vDe=s(bF);cve=n(vDe,"STRONG",{});var Ckt=s(cve);cir=r(Ckt,"yoso"),Ckt.forEach(t),fir=r(vDe," \u2014 "),NU=n(vDe,"A",{href:!0});var wkt=s(NU);mir=r(wkt,"YosoForTokenClassification"),wkt.forEach(t),gir=r(vDe," (YOSO model)"),vDe.forEach(t),K.forEach(t),hir=i(Aa),vF=n(Aa,"P",{});var FDe=s(vF);pir=r(FDe,"The model is set in evaluation mode by default using "),fve=n(FDe,"CODE",{});var Akt=s(fve);_ir=r(Akt,"model.eval()"),Akt.forEach(t),uir=r(FDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mve=n(FDe,"CODE",{});var Lkt=s(mve);bir=r(Lkt,"model.train()"),Lkt.forEach(t),FDe.forEach(t),vir=i(Aa),T(FF.$$.fragment,Aa),Aa.forEach(t),yl.forEach(t),mHe=i(f),qd=n(f,"H2",{class:!0});var wYe=s(qd);TF=n(wYe,"A",{id:!0,class:!0,href:!0});var ykt=s(TF);gve=n(ykt,"SPAN",{});var xkt=s(gve);T(ex.$$.fragment,xkt),xkt.forEach(t),ykt.forEach(t),Fir=i(wYe),hve=n(wYe,"SPAN",{});var $kt=s(hve);Tir=r($kt,"AutoModelForQuestionAnswering"),$kt.forEach(t),wYe.forEach(t),gHe=i(f),Xo=n(f,"DIV",{class:!0});var xl=s(Xo);T(ox.$$.fragment,xl),Mir=i(xl),jd=n(xl,"P",{});var Rne=s(jd);Eir=r(Rne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qU=n(Rne,"A",{href:!0});var kkt=s(qU);Cir=r(kkt,"from_pretrained()"),kkt.forEach(t),wir=r(Rne," class method or the "),jU=n(Rne,"A",{href:!0});var Skt=s(jU);Air=r(Skt,"from_config()"),Skt.forEach(t),Lir=r(Rne,` class
method.`),Rne.forEach(t),yir=i(xl),rx=n(xl,"P",{});var AYe=s(rx);xir=r(AYe,"This class cannot be instantiated directly using "),pve=n(AYe,"CODE",{});var Rkt=s(pve);$ir=r(Rkt,"__init__()"),Rkt.forEach(t),kir=r(AYe," (throws an error)."),AYe.forEach(t),Sir=i(xl),Ct=n(xl,"DIV",{class:!0});var U7=s(Ct);T(tx.$$.fragment,U7),Rir=i(U7),_ve=n(U7,"P",{});var Pkt=s(_ve);Pir=r(Pkt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Pkt.forEach(t),Bir=i(U7),Dd=n(U7,"P",{});var Pne=s(Dd);Iir=r(Pne,`Note:
Loading a model from its configuration file does `),uve=n(Pne,"STRONG",{});var Bkt=s(uve);Nir=r(Bkt,"not"),Bkt.forEach(t),qir=r(Pne,` load the model weights. It only affects the
model\u2019s configuration. Use `),DU=n(Pne,"A",{href:!0});var Ikt=s(DU);jir=r(Ikt,"from_pretrained()"),Ikt.forEach(t),Dir=r(Pne," to load the model weights."),Pne.forEach(t),Gir=i(U7),T(MF.$$.fragment,U7),U7.forEach(t),Oir=i(xl),lo=n(xl,"DIV",{class:!0});var La=s(lo);T(ax.$$.fragment,La),Vir=i(La),bve=n(La,"P",{});var Nkt=s(bve);Xir=r(Nkt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Nkt.forEach(t),zir=i(La),tn=n(La,"P",{});var H7=s(tn);Wir=r(H7,"The model class to instantiate is selected based on the "),vve=n(H7,"CODE",{});var qkt=s(vve);Qir=r(qkt,"model_type"),qkt.forEach(t),Uir=r(H7,` property of the config object (either
passed as an argument or loaded from `),Fve=n(H7,"CODE",{});var jkt=s(Fve);Hir=r(jkt,"pretrained_model_name_or_path"),jkt.forEach(t),Jir=r(H7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tve=n(H7,"CODE",{});var Dkt=s(Tve);Yir=r(Dkt,"pretrained_model_name_or_path"),Dkt.forEach(t),Kir=r(H7,":"),H7.forEach(t),Zir=i(La),V=n(La,"UL",{});var X=s(V);EF=n(X,"LI",{});var TDe=s(EF);Mve=n(TDe,"STRONG",{});var Gkt=s(Mve);edr=r(Gkt,"albert"),Gkt.forEach(t),odr=r(TDe," \u2014 "),GU=n(TDe,"A",{href:!0});var Okt=s(GU);rdr=r(Okt,"AlbertForQuestionAnswering"),Okt.forEach(t),tdr=r(TDe," (ALBERT model)"),TDe.forEach(t),adr=i(X),CF=n(X,"LI",{});var MDe=s(CF);Eve=n(MDe,"STRONG",{});var Vkt=s(Eve);ndr=r(Vkt,"bart"),Vkt.forEach(t),sdr=r(MDe," \u2014 "),OU=n(MDe,"A",{href:!0});var Xkt=s(OU);ldr=r(Xkt,"BartForQuestionAnswering"),Xkt.forEach(t),idr=r(MDe," (BART model)"),MDe.forEach(t),ddr=i(X),wF=n(X,"LI",{});var EDe=s(wF);Cve=n(EDe,"STRONG",{});var zkt=s(Cve);cdr=r(zkt,"bert"),zkt.forEach(t),fdr=r(EDe," \u2014 "),VU=n(EDe,"A",{href:!0});var Wkt=s(VU);mdr=r(Wkt,"BertForQuestionAnswering"),Wkt.forEach(t),gdr=r(EDe," (BERT model)"),EDe.forEach(t),hdr=i(X),AF=n(X,"LI",{});var CDe=s(AF);wve=n(CDe,"STRONG",{});var Qkt=s(wve);pdr=r(Qkt,"big_bird"),Qkt.forEach(t),_dr=r(CDe," \u2014 "),XU=n(CDe,"A",{href:!0});var Ukt=s(XU);udr=r(Ukt,"BigBirdForQuestionAnswering"),Ukt.forEach(t),bdr=r(CDe," (BigBird model)"),CDe.forEach(t),vdr=i(X),LF=n(X,"LI",{});var wDe=s(LF);Ave=n(wDe,"STRONG",{});var Hkt=s(Ave);Fdr=r(Hkt,"bigbird_pegasus"),Hkt.forEach(t),Tdr=r(wDe," \u2014 "),zU=n(wDe,"A",{href:!0});var Jkt=s(zU);Mdr=r(Jkt,"BigBirdPegasusForQuestionAnswering"),Jkt.forEach(t),Edr=r(wDe," (BigBird-Pegasus model)"),wDe.forEach(t),Cdr=i(X),yF=n(X,"LI",{});var ADe=s(yF);Lve=n(ADe,"STRONG",{});var Ykt=s(Lve);wdr=r(Ykt,"camembert"),Ykt.forEach(t),Adr=r(ADe," \u2014 "),WU=n(ADe,"A",{href:!0});var Kkt=s(WU);Ldr=r(Kkt,"CamembertForQuestionAnswering"),Kkt.forEach(t),ydr=r(ADe," (CamemBERT model)"),ADe.forEach(t),xdr=i(X),xF=n(X,"LI",{});var LDe=s(xF);yve=n(LDe,"STRONG",{});var Zkt=s(yve);$dr=r(Zkt,"canine"),Zkt.forEach(t),kdr=r(LDe," \u2014 "),QU=n(LDe,"A",{href:!0});var eSt=s(QU);Sdr=r(eSt,"CanineForQuestionAnswering"),eSt.forEach(t),Rdr=r(LDe," (CANINE model)"),LDe.forEach(t),Pdr=i(X),$F=n(X,"LI",{});var yDe=s($F);xve=n(yDe,"STRONG",{});var oSt=s(xve);Bdr=r(oSt,"convbert"),oSt.forEach(t),Idr=r(yDe," \u2014 "),UU=n(yDe,"A",{href:!0});var rSt=s(UU);Ndr=r(rSt,"ConvBertForQuestionAnswering"),rSt.forEach(t),qdr=r(yDe," (ConvBERT model)"),yDe.forEach(t),jdr=i(X),kF=n(X,"LI",{});var xDe=s(kF);$ve=n(xDe,"STRONG",{});var tSt=s($ve);Ddr=r(tSt,"data2vec-text"),tSt.forEach(t),Gdr=r(xDe," \u2014 "),HU=n(xDe,"A",{href:!0});var aSt=s(HU);Odr=r(aSt,"Data2VecTextForQuestionAnswering"),aSt.forEach(t),Vdr=r(xDe," (Data2VecText model)"),xDe.forEach(t),Xdr=i(X),SF=n(X,"LI",{});var $De=s(SF);kve=n($De,"STRONG",{});var nSt=s(kve);zdr=r(nSt,"deberta"),nSt.forEach(t),Wdr=r($De," \u2014 "),JU=n($De,"A",{href:!0});var sSt=s(JU);Qdr=r(sSt,"DebertaForQuestionAnswering"),sSt.forEach(t),Udr=r($De," (DeBERTa model)"),$De.forEach(t),Hdr=i(X),RF=n(X,"LI",{});var kDe=s(RF);Sve=n(kDe,"STRONG",{});var lSt=s(Sve);Jdr=r(lSt,"deberta-v2"),lSt.forEach(t),Ydr=r(kDe," \u2014 "),YU=n(kDe,"A",{href:!0});var iSt=s(YU);Kdr=r(iSt,"DebertaV2ForQuestionAnswering"),iSt.forEach(t),Zdr=r(kDe," (DeBERTa-v2 model)"),kDe.forEach(t),ecr=i(X),PF=n(X,"LI",{});var SDe=s(PF);Rve=n(SDe,"STRONG",{});var dSt=s(Rve);ocr=r(dSt,"distilbert"),dSt.forEach(t),rcr=r(SDe," \u2014 "),KU=n(SDe,"A",{href:!0});var cSt=s(KU);tcr=r(cSt,"DistilBertForQuestionAnswering"),cSt.forEach(t),acr=r(SDe," (DistilBERT model)"),SDe.forEach(t),ncr=i(X),BF=n(X,"LI",{});var RDe=s(BF);Pve=n(RDe,"STRONG",{});var fSt=s(Pve);scr=r(fSt,"electra"),fSt.forEach(t),lcr=r(RDe," \u2014 "),ZU=n(RDe,"A",{href:!0});var mSt=s(ZU);icr=r(mSt,"ElectraForQuestionAnswering"),mSt.forEach(t),dcr=r(RDe," (ELECTRA model)"),RDe.forEach(t),ccr=i(X),IF=n(X,"LI",{});var PDe=s(IF);Bve=n(PDe,"STRONG",{});var gSt=s(Bve);fcr=r(gSt,"flaubert"),gSt.forEach(t),mcr=r(PDe," \u2014 "),eH=n(PDe,"A",{href:!0});var hSt=s(eH);gcr=r(hSt,"FlaubertForQuestionAnsweringSimple"),hSt.forEach(t),hcr=r(PDe," (FlauBERT model)"),PDe.forEach(t),pcr=i(X),NF=n(X,"LI",{});var BDe=s(NF);Ive=n(BDe,"STRONG",{});var pSt=s(Ive);_cr=r(pSt,"fnet"),pSt.forEach(t),ucr=r(BDe," \u2014 "),oH=n(BDe,"A",{href:!0});var _St=s(oH);bcr=r(_St,"FNetForQuestionAnswering"),_St.forEach(t),vcr=r(BDe," (FNet model)"),BDe.forEach(t),Fcr=i(X),qF=n(X,"LI",{});var IDe=s(qF);Nve=n(IDe,"STRONG",{});var uSt=s(Nve);Tcr=r(uSt,"funnel"),uSt.forEach(t),Mcr=r(IDe," \u2014 "),rH=n(IDe,"A",{href:!0});var bSt=s(rH);Ecr=r(bSt,"FunnelForQuestionAnswering"),bSt.forEach(t),Ccr=r(IDe," (Funnel Transformer model)"),IDe.forEach(t),wcr=i(X),jF=n(X,"LI",{});var NDe=s(jF);qve=n(NDe,"STRONG",{});var vSt=s(qve);Acr=r(vSt,"gptj"),vSt.forEach(t),Lcr=r(NDe," \u2014 "),tH=n(NDe,"A",{href:!0});var FSt=s(tH);ycr=r(FSt,"GPTJForQuestionAnswering"),FSt.forEach(t),xcr=r(NDe," (GPT-J model)"),NDe.forEach(t),$cr=i(X),DF=n(X,"LI",{});var qDe=s(DF);jve=n(qDe,"STRONG",{});var TSt=s(jve);kcr=r(TSt,"ibert"),TSt.forEach(t),Scr=r(qDe," \u2014 "),aH=n(qDe,"A",{href:!0});var MSt=s(aH);Rcr=r(MSt,"IBertForQuestionAnswering"),MSt.forEach(t),Pcr=r(qDe," (I-BERT model)"),qDe.forEach(t),Bcr=i(X),GF=n(X,"LI",{});var jDe=s(GF);Dve=n(jDe,"STRONG",{});var ESt=s(Dve);Icr=r(ESt,"layoutlmv2"),ESt.forEach(t),Ncr=r(jDe," \u2014 "),nH=n(jDe,"A",{href:!0});var CSt=s(nH);qcr=r(CSt,"LayoutLMv2ForQuestionAnswering"),CSt.forEach(t),jcr=r(jDe," (LayoutLMv2 model)"),jDe.forEach(t),Dcr=i(X),OF=n(X,"LI",{});var DDe=s(OF);Gve=n(DDe,"STRONG",{});var wSt=s(Gve);Gcr=r(wSt,"layoutlmv3"),wSt.forEach(t),Ocr=r(DDe," \u2014 "),sH=n(DDe,"A",{href:!0});var ASt=s(sH);Vcr=r(ASt,"LayoutLMv3ForQuestionAnswering"),ASt.forEach(t),Xcr=r(DDe," (LayoutLMv3 model)"),DDe.forEach(t),zcr=i(X),VF=n(X,"LI",{});var GDe=s(VF);Ove=n(GDe,"STRONG",{});var LSt=s(Ove);Wcr=r(LSt,"led"),LSt.forEach(t),Qcr=r(GDe," \u2014 "),lH=n(GDe,"A",{href:!0});var ySt=s(lH);Ucr=r(ySt,"LEDForQuestionAnswering"),ySt.forEach(t),Hcr=r(GDe," (LED model)"),GDe.forEach(t),Jcr=i(X),XF=n(X,"LI",{});var ODe=s(XF);Vve=n(ODe,"STRONG",{});var xSt=s(Vve);Ycr=r(xSt,"longformer"),xSt.forEach(t),Kcr=r(ODe," \u2014 "),iH=n(ODe,"A",{href:!0});var $St=s(iH);Zcr=r($St,"LongformerForQuestionAnswering"),$St.forEach(t),efr=r(ODe," (Longformer model)"),ODe.forEach(t),ofr=i(X),zF=n(X,"LI",{});var VDe=s(zF);Xve=n(VDe,"STRONG",{});var kSt=s(Xve);rfr=r(kSt,"luke"),kSt.forEach(t),tfr=r(VDe," \u2014 "),dH=n(VDe,"A",{href:!0});var SSt=s(dH);afr=r(SSt,"LukeForQuestionAnswering"),SSt.forEach(t),nfr=r(VDe," (LUKE model)"),VDe.forEach(t),sfr=i(X),WF=n(X,"LI",{});var XDe=s(WF);zve=n(XDe,"STRONG",{});var RSt=s(zve);lfr=r(RSt,"lxmert"),RSt.forEach(t),ifr=r(XDe," \u2014 "),cH=n(XDe,"A",{href:!0});var PSt=s(cH);dfr=r(PSt,"LxmertForQuestionAnswering"),PSt.forEach(t),cfr=r(XDe," (LXMERT model)"),XDe.forEach(t),ffr=i(X),QF=n(X,"LI",{});var zDe=s(QF);Wve=n(zDe,"STRONG",{});var BSt=s(Wve);mfr=r(BSt,"mbart"),BSt.forEach(t),gfr=r(zDe," \u2014 "),fH=n(zDe,"A",{href:!0});var ISt=s(fH);hfr=r(ISt,"MBartForQuestionAnswering"),ISt.forEach(t),pfr=r(zDe," (mBART model)"),zDe.forEach(t),_fr=i(X),UF=n(X,"LI",{});var WDe=s(UF);Qve=n(WDe,"STRONG",{});var NSt=s(Qve);ufr=r(NSt,"megatron-bert"),NSt.forEach(t),bfr=r(WDe," \u2014 "),mH=n(WDe,"A",{href:!0});var qSt=s(mH);vfr=r(qSt,"MegatronBertForQuestionAnswering"),qSt.forEach(t),Ffr=r(WDe," (Megatron-BERT model)"),WDe.forEach(t),Tfr=i(X),HF=n(X,"LI",{});var QDe=s(HF);Uve=n(QDe,"STRONG",{});var jSt=s(Uve);Mfr=r(jSt,"mobilebert"),jSt.forEach(t),Efr=r(QDe," \u2014 "),gH=n(QDe,"A",{href:!0});var DSt=s(gH);Cfr=r(DSt,"MobileBertForQuestionAnswering"),DSt.forEach(t),wfr=r(QDe," (MobileBERT model)"),QDe.forEach(t),Afr=i(X),JF=n(X,"LI",{});var UDe=s(JF);Hve=n(UDe,"STRONG",{});var GSt=s(Hve);Lfr=r(GSt,"mpnet"),GSt.forEach(t),yfr=r(UDe," \u2014 "),hH=n(UDe,"A",{href:!0});var OSt=s(hH);xfr=r(OSt,"MPNetForQuestionAnswering"),OSt.forEach(t),$fr=r(UDe," (MPNet model)"),UDe.forEach(t),kfr=i(X),YF=n(X,"LI",{});var HDe=s(YF);Jve=n(HDe,"STRONG",{});var VSt=s(Jve);Sfr=r(VSt,"mvp"),VSt.forEach(t),Rfr=r(HDe," \u2014 "),pH=n(HDe,"A",{href:!0});var XSt=s(pH);Pfr=r(XSt,"MvpForQuestionAnswering"),XSt.forEach(t),Bfr=r(HDe," (MVP model)"),HDe.forEach(t),Ifr=i(X),KF=n(X,"LI",{});var JDe=s(KF);Yve=n(JDe,"STRONG",{});var zSt=s(Yve);Nfr=r(zSt,"nezha"),zSt.forEach(t),qfr=r(JDe," \u2014 "),_H=n(JDe,"A",{href:!0});var WSt=s(_H);jfr=r(WSt,"NezhaForQuestionAnswering"),WSt.forEach(t),Dfr=r(JDe," (Nezha model)"),JDe.forEach(t),Gfr=i(X),ZF=n(X,"LI",{});var YDe=s(ZF);Kve=n(YDe,"STRONG",{});var QSt=s(Kve);Ofr=r(QSt,"nystromformer"),QSt.forEach(t),Vfr=r(YDe," \u2014 "),uH=n(YDe,"A",{href:!0});var USt=s(uH);Xfr=r(USt,"NystromformerForQuestionAnswering"),USt.forEach(t),zfr=r(YDe," (Nystr\xF6mformer model)"),YDe.forEach(t),Wfr=i(X),eT=n(X,"LI",{});var KDe=s(eT);Zve=n(KDe,"STRONG",{});var HSt=s(Zve);Qfr=r(HSt,"qdqbert"),HSt.forEach(t),Ufr=r(KDe," \u2014 "),bH=n(KDe,"A",{href:!0});var JSt=s(bH);Hfr=r(JSt,"QDQBertForQuestionAnswering"),JSt.forEach(t),Jfr=r(KDe," (QDQBert model)"),KDe.forEach(t),Yfr=i(X),oT=n(X,"LI",{});var ZDe=s(oT);e6e=n(ZDe,"STRONG",{});var YSt=s(e6e);Kfr=r(YSt,"reformer"),YSt.forEach(t),Zfr=r(ZDe," \u2014 "),vH=n(ZDe,"A",{href:!0});var KSt=s(vH);emr=r(KSt,"ReformerForQuestionAnswering"),KSt.forEach(t),omr=r(ZDe," (Reformer model)"),ZDe.forEach(t),rmr=i(X),rT=n(X,"LI",{});var eGe=s(rT);o6e=n(eGe,"STRONG",{});var ZSt=s(o6e);tmr=r(ZSt,"rembert"),ZSt.forEach(t),amr=r(eGe," \u2014 "),FH=n(eGe,"A",{href:!0});var eRt=s(FH);nmr=r(eRt,"RemBertForQuestionAnswering"),eRt.forEach(t),smr=r(eGe," (RemBERT model)"),eGe.forEach(t),lmr=i(X),tT=n(X,"LI",{});var oGe=s(tT);r6e=n(oGe,"STRONG",{});var oRt=s(r6e);imr=r(oRt,"roberta"),oRt.forEach(t),dmr=r(oGe," \u2014 "),TH=n(oGe,"A",{href:!0});var rRt=s(TH);cmr=r(rRt,"RobertaForQuestionAnswering"),rRt.forEach(t),fmr=r(oGe," (RoBERTa model)"),oGe.forEach(t),mmr=i(X),aT=n(X,"LI",{});var rGe=s(aT);t6e=n(rGe,"STRONG",{});var tRt=s(t6e);gmr=r(tRt,"roformer"),tRt.forEach(t),hmr=r(rGe," \u2014 "),MH=n(rGe,"A",{href:!0});var aRt=s(MH);pmr=r(aRt,"RoFormerForQuestionAnswering"),aRt.forEach(t),_mr=r(rGe," (RoFormer model)"),rGe.forEach(t),umr=i(X),nT=n(X,"LI",{});var tGe=s(nT);a6e=n(tGe,"STRONG",{});var nRt=s(a6e);bmr=r(nRt,"splinter"),nRt.forEach(t),vmr=r(tGe," \u2014 "),EH=n(tGe,"A",{href:!0});var sRt=s(EH);Fmr=r(sRt,"SplinterForQuestionAnswering"),sRt.forEach(t),Tmr=r(tGe," (Splinter model)"),tGe.forEach(t),Mmr=i(X),sT=n(X,"LI",{});var aGe=s(sT);n6e=n(aGe,"STRONG",{});var lRt=s(n6e);Emr=r(lRt,"squeezebert"),lRt.forEach(t),Cmr=r(aGe," \u2014 "),CH=n(aGe,"A",{href:!0});var iRt=s(CH);wmr=r(iRt,"SqueezeBertForQuestionAnswering"),iRt.forEach(t),Amr=r(aGe," (SqueezeBERT model)"),aGe.forEach(t),Lmr=i(X),lT=n(X,"LI",{});var nGe=s(lT);s6e=n(nGe,"STRONG",{});var dRt=s(s6e);ymr=r(dRt,"xlm"),dRt.forEach(t),xmr=r(nGe," \u2014 "),wH=n(nGe,"A",{href:!0});var cRt=s(wH);$mr=r(cRt,"XLMForQuestionAnsweringSimple"),cRt.forEach(t),kmr=r(nGe," (XLM model)"),nGe.forEach(t),Smr=i(X),iT=n(X,"LI",{});var sGe=s(iT);l6e=n(sGe,"STRONG",{});var fRt=s(l6e);Rmr=r(fRt,"xlm-roberta"),fRt.forEach(t),Pmr=r(sGe," \u2014 "),AH=n(sGe,"A",{href:!0});var mRt=s(AH);Bmr=r(mRt,"XLMRobertaForQuestionAnswering"),mRt.forEach(t),Imr=r(sGe," (XLM-RoBERTa model)"),sGe.forEach(t),Nmr=i(X),dT=n(X,"LI",{});var lGe=s(dT);i6e=n(lGe,"STRONG",{});var gRt=s(i6e);qmr=r(gRt,"xlm-roberta-xl"),gRt.forEach(t),jmr=r(lGe," \u2014 "),LH=n(lGe,"A",{href:!0});var hRt=s(LH);Dmr=r(hRt,"XLMRobertaXLForQuestionAnswering"),hRt.forEach(t),Gmr=r(lGe," (XLM-RoBERTa-XL model)"),lGe.forEach(t),Omr=i(X),cT=n(X,"LI",{});var iGe=s(cT);d6e=n(iGe,"STRONG",{});var pRt=s(d6e);Vmr=r(pRt,"xlnet"),pRt.forEach(t),Xmr=r(iGe," \u2014 "),yH=n(iGe,"A",{href:!0});var _Rt=s(yH);zmr=r(_Rt,"XLNetForQuestionAnsweringSimple"),_Rt.forEach(t),Wmr=r(iGe," (XLNet model)"),iGe.forEach(t),Qmr=i(X),fT=n(X,"LI",{});var dGe=s(fT);c6e=n(dGe,"STRONG",{});var uRt=s(c6e);Umr=r(uRt,"yoso"),uRt.forEach(t),Hmr=r(dGe," \u2014 "),xH=n(dGe,"A",{href:!0});var bRt=s(xH);Jmr=r(bRt,"YosoForQuestionAnswering"),bRt.forEach(t),Ymr=r(dGe," (YOSO model)"),dGe.forEach(t),X.forEach(t),Kmr=i(La),mT=n(La,"P",{});var cGe=s(mT);Zmr=r(cGe,"The model is set in evaluation mode by default using "),f6e=n(cGe,"CODE",{});var vRt=s(f6e);egr=r(vRt,"model.eval()"),vRt.forEach(t),ogr=r(cGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m6e=n(cGe,"CODE",{});var FRt=s(m6e);rgr=r(FRt,"model.train()"),FRt.forEach(t),cGe.forEach(t),tgr=i(La),T(gT.$$.fragment,La),La.forEach(t),xl.forEach(t),hHe=i(f),Gd=n(f,"H2",{class:!0});var LYe=s(Gd);hT=n(LYe,"A",{id:!0,class:!0,href:!0});var TRt=s(hT);g6e=n(TRt,"SPAN",{});var MRt=s(g6e);T(nx.$$.fragment,MRt),MRt.forEach(t),TRt.forEach(t),agr=i(LYe),h6e=n(LYe,"SPAN",{});var ERt=s(h6e);ngr=r(ERt,"AutoModelForTableQuestionAnswering"),ERt.forEach(t),LYe.forEach(t),pHe=i(f),zo=n(f,"DIV",{class:!0});var $l=s(zo);T(sx.$$.fragment,$l),sgr=i($l),Od=n($l,"P",{});var Bne=s(Od);lgr=r(Bne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),$H=n(Bne,"A",{href:!0});var CRt=s($H);igr=r(CRt,"from_pretrained()"),CRt.forEach(t),dgr=r(Bne," class method or the "),kH=n(Bne,"A",{href:!0});var wRt=s(kH);cgr=r(wRt,"from_config()"),wRt.forEach(t),fgr=r(Bne,` class
method.`),Bne.forEach(t),mgr=i($l),lx=n($l,"P",{});var yYe=s(lx);ggr=r(yYe,"This class cannot be instantiated directly using "),p6e=n(yYe,"CODE",{});var ARt=s(p6e);hgr=r(ARt,"__init__()"),ARt.forEach(t),pgr=r(yYe," (throws an error)."),yYe.forEach(t),_gr=i($l),wt=n($l,"DIV",{class:!0});var J7=s(wt);T(ix.$$.fragment,J7),ugr=i(J7),_6e=n(J7,"P",{});var LRt=s(_6e);bgr=r(LRt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),LRt.forEach(t),vgr=i(J7),Vd=n(J7,"P",{});var Ine=s(Vd);Fgr=r(Ine,`Note:
Loading a model from its configuration file does `),u6e=n(Ine,"STRONG",{});var yRt=s(u6e);Tgr=r(yRt,"not"),yRt.forEach(t),Mgr=r(Ine,` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=n(Ine,"A",{href:!0});var xRt=s(SH);Egr=r(xRt,"from_pretrained()"),xRt.forEach(t),Cgr=r(Ine," to load the model weights."),Ine.forEach(t),wgr=i(J7),T(pT.$$.fragment,J7),J7.forEach(t),Agr=i($l),io=n($l,"DIV",{class:!0});var ya=s(io);T(dx.$$.fragment,ya),Lgr=i(ya),b6e=n(ya,"P",{});var $Rt=s(b6e);ygr=r($Rt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$Rt.forEach(t),xgr=i(ya),an=n(ya,"P",{});var Y7=s(an);$gr=r(Y7,"The model class to instantiate is selected based on the "),v6e=n(Y7,"CODE",{});var kRt=s(v6e);kgr=r(kRt,"model_type"),kRt.forEach(t),Sgr=r(Y7,` property of the config object (either
passed as an argument or loaded from `),F6e=n(Y7,"CODE",{});var SRt=s(F6e);Rgr=r(SRt,"pretrained_model_name_or_path"),SRt.forEach(t),Pgr=r(Y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T6e=n(Y7,"CODE",{});var RRt=s(T6e);Bgr=r(RRt,"pretrained_model_name_or_path"),RRt.forEach(t),Igr=r(Y7,":"),Y7.forEach(t),Ngr=i(ya),M6e=n(ya,"UL",{});var PRt=s(M6e);_T=n(PRt,"LI",{});var fGe=s(_T);E6e=n(fGe,"STRONG",{});var BRt=s(E6e);qgr=r(BRt,"tapas"),BRt.forEach(t),jgr=r(fGe," \u2014 "),RH=n(fGe,"A",{href:!0});var IRt=s(RH);Dgr=r(IRt,"TapasForQuestionAnswering"),IRt.forEach(t),Ggr=r(fGe," (TAPAS model)"),fGe.forEach(t),PRt.forEach(t),Ogr=i(ya),uT=n(ya,"P",{});var mGe=s(uT);Vgr=r(mGe,"The model is set in evaluation mode by default using "),C6e=n(mGe,"CODE",{});var NRt=s(C6e);Xgr=r(NRt,"model.eval()"),NRt.forEach(t),zgr=r(mGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w6e=n(mGe,"CODE",{});var qRt=s(w6e);Wgr=r(qRt,"model.train()"),qRt.forEach(t),mGe.forEach(t),Qgr=i(ya),T(bT.$$.fragment,ya),ya.forEach(t),$l.forEach(t),_He=i(f),Xd=n(f,"H2",{class:!0});var xYe=s(Xd);vT=n(xYe,"A",{id:!0,class:!0,href:!0});var jRt=s(vT);A6e=n(jRt,"SPAN",{});var DRt=s(A6e);T(cx.$$.fragment,DRt),DRt.forEach(t),jRt.forEach(t),Ugr=i(xYe),L6e=n(xYe,"SPAN",{});var GRt=s(L6e);Hgr=r(GRt,"AutoModelForImageClassification"),GRt.forEach(t),xYe.forEach(t),uHe=i(f),Wo=n(f,"DIV",{class:!0});var kl=s(Wo);T(fx.$$.fragment,kl),Jgr=i(kl),zd=n(kl,"P",{});var Nne=s(zd);Ygr=r(Nne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),PH=n(Nne,"A",{href:!0});var ORt=s(PH);Kgr=r(ORt,"from_pretrained()"),ORt.forEach(t),Zgr=r(Nne," class method or the "),BH=n(Nne,"A",{href:!0});var VRt=s(BH);ehr=r(VRt,"from_config()"),VRt.forEach(t),ohr=r(Nne,` class
method.`),Nne.forEach(t),rhr=i(kl),mx=n(kl,"P",{});var $Ye=s(mx);thr=r($Ye,"This class cannot be instantiated directly using "),y6e=n($Ye,"CODE",{});var XRt=s(y6e);ahr=r(XRt,"__init__()"),XRt.forEach(t),nhr=r($Ye," (throws an error)."),$Ye.forEach(t),shr=i(kl),At=n(kl,"DIV",{class:!0});var K7=s(At);T(gx.$$.fragment,K7),lhr=i(K7),x6e=n(K7,"P",{});var zRt=s(x6e);ihr=r(zRt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zRt.forEach(t),dhr=i(K7),Wd=n(K7,"P",{});var qne=s(Wd);chr=r(qne,`Note:
Loading a model from its configuration file does `),$6e=n(qne,"STRONG",{});var WRt=s($6e);fhr=r(WRt,"not"),WRt.forEach(t),mhr=r(qne,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n(qne,"A",{href:!0});var QRt=s(IH);ghr=r(QRt,"from_pretrained()"),QRt.forEach(t),hhr=r(qne," to load the model weights."),qne.forEach(t),phr=i(K7),T(FT.$$.fragment,K7),K7.forEach(t),_hr=i(kl),co=n(kl,"DIV",{class:!0});var xa=s(co);T(hx.$$.fragment,xa),uhr=i(xa),k6e=n(xa,"P",{});var URt=s(k6e);bhr=r(URt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),URt.forEach(t),vhr=i(xa),nn=n(xa,"P",{});var Z7=s(nn);Fhr=r(Z7,"The model class to instantiate is selected based on the "),S6e=n(Z7,"CODE",{});var HRt=s(S6e);Thr=r(HRt,"model_type"),HRt.forEach(t),Mhr=r(Z7,` property of the config object (either
passed as an argument or loaded from `),R6e=n(Z7,"CODE",{});var JRt=s(R6e);Ehr=r(JRt,"pretrained_model_name_or_path"),JRt.forEach(t),Chr=r(Z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=n(Z7,"CODE",{});var YRt=s(P6e);whr=r(YRt,"pretrained_model_name_or_path"),YRt.forEach(t),Ahr=r(Z7,":"),Z7.forEach(t),Lhr=i(xa),be=n(xa,"UL",{});var Fe=s(be);TT=n(Fe,"LI",{});var gGe=s(TT);B6e=n(gGe,"STRONG",{});var KRt=s(B6e);yhr=r(KRt,"beit"),KRt.forEach(t),xhr=r(gGe," \u2014 "),NH=n(gGe,"A",{href:!0});var ZRt=s(NH);$hr=r(ZRt,"BeitForImageClassification"),ZRt.forEach(t),khr=r(gGe," (BEiT model)"),gGe.forEach(t),Shr=i(Fe),MT=n(Fe,"LI",{});var hGe=s(MT);I6e=n(hGe,"STRONG",{});var ePt=s(I6e);Rhr=r(ePt,"convnext"),ePt.forEach(t),Phr=r(hGe," \u2014 "),qH=n(hGe,"A",{href:!0});var oPt=s(qH);Bhr=r(oPt,"ConvNextForImageClassification"),oPt.forEach(t),Ihr=r(hGe," (ConvNeXT model)"),hGe.forEach(t),Nhr=i(Fe),ET=n(Fe,"LI",{});var pGe=s(ET);N6e=n(pGe,"STRONG",{});var rPt=s(N6e);qhr=r(rPt,"cvt"),rPt.forEach(t),jhr=r(pGe," \u2014 "),jH=n(pGe,"A",{href:!0});var tPt=s(jH);Dhr=r(tPt,"CvtForImageClassification"),tPt.forEach(t),Ghr=r(pGe," (CvT model)"),pGe.forEach(t),Ohr=i(Fe),CT=n(Fe,"LI",{});var _Ge=s(CT);q6e=n(_Ge,"STRONG",{});var aPt=s(q6e);Vhr=r(aPt,"data2vec-vision"),aPt.forEach(t),Xhr=r(_Ge," \u2014 "),DH=n(_Ge,"A",{href:!0});var nPt=s(DH);zhr=r(nPt,"Data2VecVisionForImageClassification"),nPt.forEach(t),Whr=r(_Ge," (Data2VecVision model)"),_Ge.forEach(t),Qhr=i(Fe),fl=n(Fe,"LI",{});var EP=s(fl);j6e=n(EP,"STRONG",{});var sPt=s(j6e);Uhr=r(sPt,"deit"),sPt.forEach(t),Hhr=r(EP," \u2014 "),GH=n(EP,"A",{href:!0});var lPt=s(GH);Jhr=r(lPt,"DeiTForImageClassification"),lPt.forEach(t),Yhr=r(EP," or "),OH=n(EP,"A",{href:!0});var iPt=s(OH);Khr=r(iPt,"DeiTForImageClassificationWithTeacher"),iPt.forEach(t),Zhr=r(EP," (DeiT model)"),EP.forEach(t),epr=i(Fe),wT=n(Fe,"LI",{});var uGe=s(wT);D6e=n(uGe,"STRONG",{});var dPt=s(D6e);opr=r(dPt,"imagegpt"),dPt.forEach(t),rpr=r(uGe," \u2014 "),VH=n(uGe,"A",{href:!0});var cPt=s(VH);tpr=r(cPt,"ImageGPTForImageClassification"),cPt.forEach(t),apr=r(uGe," (ImageGPT model)"),uGe.forEach(t),npr=i(Fe),ml=n(Fe,"LI",{});var CP=s(ml);G6e=n(CP,"STRONG",{});var fPt=s(G6e);spr=r(fPt,"levit"),fPt.forEach(t),lpr=r(CP," \u2014 "),XH=n(CP,"A",{href:!0});var mPt=s(XH);ipr=r(mPt,"LevitForImageClassification"),mPt.forEach(t),dpr=r(CP," or "),zH=n(CP,"A",{href:!0});var gPt=s(zH);cpr=r(gPt,"LevitForImageClassificationWithTeacher"),gPt.forEach(t),fpr=r(CP," (LeViT model)"),CP.forEach(t),mpr=i(Fe),AT=n(Fe,"LI",{});var bGe=s(AT);O6e=n(bGe,"STRONG",{});var hPt=s(O6e);gpr=r(hPt,"mobilevit"),hPt.forEach(t),hpr=r(bGe," \u2014 "),WH=n(bGe,"A",{href:!0});var pPt=s(WH);ppr=r(pPt,"MobileViTForImageClassification"),pPt.forEach(t),_pr=r(bGe," (MobileViT model)"),bGe.forEach(t),upr=i(Fe),Lt=n(Fe,"LI",{});var im=s(Lt);V6e=n(im,"STRONG",{});var _Pt=s(V6e);bpr=r(_Pt,"perceiver"),_Pt.forEach(t),vpr=r(im," \u2014 "),QH=n(im,"A",{href:!0});var uPt=s(QH);Fpr=r(uPt,"PerceiverForImageClassificationLearned"),uPt.forEach(t),Tpr=r(im," or "),UH=n(im,"A",{href:!0});var bPt=s(UH);Mpr=r(bPt,"PerceiverForImageClassificationFourier"),bPt.forEach(t),Epr=r(im," or "),HH=n(im,"A",{href:!0});var vPt=s(HH);Cpr=r(vPt,"PerceiverForImageClassificationConvProcessing"),vPt.forEach(t),wpr=r(im," (Perceiver model)"),im.forEach(t),Apr=i(Fe),LT=n(Fe,"LI",{});var vGe=s(LT);X6e=n(vGe,"STRONG",{});var FPt=s(X6e);Lpr=r(FPt,"poolformer"),FPt.forEach(t),ypr=r(vGe," \u2014 "),JH=n(vGe,"A",{href:!0});var TPt=s(JH);xpr=r(TPt,"PoolFormerForImageClassification"),TPt.forEach(t),$pr=r(vGe," (PoolFormer model)"),vGe.forEach(t),kpr=i(Fe),yT=n(Fe,"LI",{});var FGe=s(yT);z6e=n(FGe,"STRONG",{});var MPt=s(z6e);Spr=r(MPt,"regnet"),MPt.forEach(t),Rpr=r(FGe," \u2014 "),YH=n(FGe,"A",{href:!0});var EPt=s(YH);Ppr=r(EPt,"RegNetForImageClassification"),EPt.forEach(t),Bpr=r(FGe," (RegNet model)"),FGe.forEach(t),Ipr=i(Fe),xT=n(Fe,"LI",{});var TGe=s(xT);W6e=n(TGe,"STRONG",{});var CPt=s(W6e);Npr=r(CPt,"resnet"),CPt.forEach(t),qpr=r(TGe," \u2014 "),KH=n(TGe,"A",{href:!0});var wPt=s(KH);jpr=r(wPt,"ResNetForImageClassification"),wPt.forEach(t),Dpr=r(TGe," (ResNet model)"),TGe.forEach(t),Gpr=i(Fe),$T=n(Fe,"LI",{});var MGe=s($T);Q6e=n(MGe,"STRONG",{});var APt=s(Q6e);Opr=r(APt,"segformer"),APt.forEach(t),Vpr=r(MGe," \u2014 "),ZH=n(MGe,"A",{href:!0});var LPt=s(ZH);Xpr=r(LPt,"SegformerForImageClassification"),LPt.forEach(t),zpr=r(MGe," (SegFormer model)"),MGe.forEach(t),Wpr=i(Fe),kT=n(Fe,"LI",{});var EGe=s(kT);U6e=n(EGe,"STRONG",{});var yPt=s(U6e);Qpr=r(yPt,"swin"),yPt.forEach(t),Upr=r(EGe," \u2014 "),eJ=n(EGe,"A",{href:!0});var xPt=s(eJ);Hpr=r(xPt,"SwinForImageClassification"),xPt.forEach(t),Jpr=r(EGe," (Swin Transformer model)"),EGe.forEach(t),Ypr=i(Fe),ST=n(Fe,"LI",{});var CGe=s(ST);H6e=n(CGe,"STRONG",{});var $Pt=s(H6e);Kpr=r($Pt,"swinv2"),$Pt.forEach(t),Zpr=r(CGe," \u2014 "),oJ=n(CGe,"A",{href:!0});var kPt=s(oJ);e_r=r(kPt,"Swinv2ForImageClassification"),kPt.forEach(t),o_r=r(CGe," (Swin Transformer V2 model)"),CGe.forEach(t),r_r=i(Fe),RT=n(Fe,"LI",{});var wGe=s(RT);J6e=n(wGe,"STRONG",{});var SPt=s(J6e);t_r=r(SPt,"van"),SPt.forEach(t),a_r=r(wGe," \u2014 "),rJ=n(wGe,"A",{href:!0});var RPt=s(rJ);n_r=r(RPt,"VanForImageClassification"),RPt.forEach(t),s_r=r(wGe," (VAN model)"),wGe.forEach(t),l_r=i(Fe),PT=n(Fe,"LI",{});var AGe=s(PT);Y6e=n(AGe,"STRONG",{});var PPt=s(Y6e);i_r=r(PPt,"vit"),PPt.forEach(t),d_r=r(AGe," \u2014 "),tJ=n(AGe,"A",{href:!0});var BPt=s(tJ);c_r=r(BPt,"ViTForImageClassification"),BPt.forEach(t),f_r=r(AGe," (ViT model)"),AGe.forEach(t),Fe.forEach(t),m_r=i(xa),BT=n(xa,"P",{});var LGe=s(BT);g_r=r(LGe,"The model is set in evaluation mode by default using "),K6e=n(LGe,"CODE",{});var IPt=s(K6e);h_r=r(IPt,"model.eval()"),IPt.forEach(t),p_r=r(LGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z6e=n(LGe,"CODE",{});var NPt=s(Z6e);__r=r(NPt,"model.train()"),NPt.forEach(t),LGe.forEach(t),u_r=i(xa),T(IT.$$.fragment,xa),xa.forEach(t),kl.forEach(t),bHe=i(f),Qd=n(f,"H2",{class:!0});var kYe=s(Qd);NT=n(kYe,"A",{id:!0,class:!0,href:!0});var qPt=s(NT);eFe=n(qPt,"SPAN",{});var jPt=s(eFe);T(px.$$.fragment,jPt),jPt.forEach(t),qPt.forEach(t),b_r=i(kYe),oFe=n(kYe,"SPAN",{});var DPt=s(oFe);v_r=r(DPt,"AutoModelForVideoClassification"),DPt.forEach(t),kYe.forEach(t),vHe=i(f),Qo=n(f,"DIV",{class:!0});var Sl=s(Qo);T(_x.$$.fragment,Sl),F_r=i(Sl),Ud=n(Sl,"P",{});var jne=s(Ud);T_r=r(jne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),aJ=n(jne,"A",{href:!0});var GPt=s(aJ);M_r=r(GPt,"from_pretrained()"),GPt.forEach(t),E_r=r(jne," class method or the "),nJ=n(jne,"A",{href:!0});var OPt=s(nJ);C_r=r(OPt,"from_config()"),OPt.forEach(t),w_r=r(jne,` class
method.`),jne.forEach(t),A_r=i(Sl),ux=n(Sl,"P",{});var SYe=s(ux);L_r=r(SYe,"This class cannot be instantiated directly using "),rFe=n(SYe,"CODE",{});var VPt=s(rFe);y_r=r(VPt,"__init__()"),VPt.forEach(t),x_r=r(SYe," (throws an error)."),SYe.forEach(t),$_r=i(Sl),yt=n(Sl,"DIV",{class:!0});var eL=s(yt);T(bx.$$.fragment,eL),k_r=i(eL),tFe=n(eL,"P",{});var XPt=s(tFe);S_r=r(XPt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),XPt.forEach(t),R_r=i(eL),Hd=n(eL,"P",{});var Dne=s(Hd);P_r=r(Dne,`Note:
Loading a model from its configuration file does `),aFe=n(Dne,"STRONG",{});var zPt=s(aFe);B_r=r(zPt,"not"),zPt.forEach(t),I_r=r(Dne,` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=n(Dne,"A",{href:!0});var WPt=s(sJ);N_r=r(WPt,"from_pretrained()"),WPt.forEach(t),q_r=r(Dne," to load the model weights."),Dne.forEach(t),j_r=i(eL),T(qT.$$.fragment,eL),eL.forEach(t),D_r=i(Sl),fo=n(Sl,"DIV",{class:!0});var $a=s(fo);T(vx.$$.fragment,$a),G_r=i($a),nFe=n($a,"P",{});var QPt=s(nFe);O_r=r(QPt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),QPt.forEach(t),V_r=i($a),sn=n($a,"P",{});var oL=s(sn);X_r=r(oL,"The model class to instantiate is selected based on the "),sFe=n(oL,"CODE",{});var UPt=s(sFe);z_r=r(UPt,"model_type"),UPt.forEach(t),W_r=r(oL,` property of the config object (either
passed as an argument or loaded from `),lFe=n(oL,"CODE",{});var HPt=s(lFe);Q_r=r(HPt,"pretrained_model_name_or_path"),HPt.forEach(t),U_r=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=n(oL,"CODE",{});var JPt=s(iFe);H_r=r(JPt,"pretrained_model_name_or_path"),JPt.forEach(t),J_r=r(oL,":"),oL.forEach(t),Y_r=i($a),dFe=n($a,"UL",{});var YPt=s(dFe);jT=n(YPt,"LI",{});var yGe=s(jT);cFe=n(yGe,"STRONG",{});var KPt=s(cFe);K_r=r(KPt,"videomae"),KPt.forEach(t),Z_r=r(yGe," \u2014 "),lJ=n(yGe,"A",{href:!0});var ZPt=s(lJ);eur=r(ZPt,"VideoMAEForVideoClassification"),ZPt.forEach(t),our=r(yGe," (VideoMAE model)"),yGe.forEach(t),YPt.forEach(t),rur=i($a),DT=n($a,"P",{});var xGe=s(DT);tur=r(xGe,"The model is set in evaluation mode by default using "),fFe=n(xGe,"CODE",{});var eBt=s(fFe);aur=r(eBt,"model.eval()"),eBt.forEach(t),nur=r(xGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mFe=n(xGe,"CODE",{});var oBt=s(mFe);sur=r(oBt,"model.train()"),oBt.forEach(t),xGe.forEach(t),lur=i($a),T(GT.$$.fragment,$a),$a.forEach(t),Sl.forEach(t),FHe=i(f),Jd=n(f,"H2",{class:!0});var RYe=s(Jd);OT=n(RYe,"A",{id:!0,class:!0,href:!0});var rBt=s(OT);gFe=n(rBt,"SPAN",{});var tBt=s(gFe);T(Fx.$$.fragment,tBt),tBt.forEach(t),rBt.forEach(t),iur=i(RYe),hFe=n(RYe,"SPAN",{});var aBt=s(hFe);dur=r(aBt,"AutoModelForVision2Seq"),aBt.forEach(t),RYe.forEach(t),THe=i(f),Uo=n(f,"DIV",{class:!0});var Rl=s(Uo);T(Tx.$$.fragment,Rl),cur=i(Rl),Yd=n(Rl,"P",{});var Gne=s(Yd);fur=r(Gne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iJ=n(Gne,"A",{href:!0});var nBt=s(iJ);mur=r(nBt,"from_pretrained()"),nBt.forEach(t),gur=r(Gne," class method or the "),dJ=n(Gne,"A",{href:!0});var sBt=s(dJ);hur=r(sBt,"from_config()"),sBt.forEach(t),pur=r(Gne,` class
method.`),Gne.forEach(t),_ur=i(Rl),Mx=n(Rl,"P",{});var PYe=s(Mx);uur=r(PYe,"This class cannot be instantiated directly using "),pFe=n(PYe,"CODE",{});var lBt=s(pFe);bur=r(lBt,"__init__()"),lBt.forEach(t),vur=r(PYe," (throws an error)."),PYe.forEach(t),Fur=i(Rl),xt=n(Rl,"DIV",{class:!0});var rL=s(xt);T(Ex.$$.fragment,rL),Tur=i(rL),_Fe=n(rL,"P",{});var iBt=s(_Fe);Mur=r(iBt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),iBt.forEach(t),Eur=i(rL),Kd=n(rL,"P",{});var One=s(Kd);Cur=r(One,`Note:
Loading a model from its configuration file does `),uFe=n(One,"STRONG",{});var dBt=s(uFe);wur=r(dBt,"not"),dBt.forEach(t),Aur=r(One,` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=n(One,"A",{href:!0});var cBt=s(cJ);Lur=r(cBt,"from_pretrained()"),cBt.forEach(t),yur=r(One," to load the model weights."),One.forEach(t),xur=i(rL),T(VT.$$.fragment,rL),rL.forEach(t),$ur=i(Rl),mo=n(Rl,"DIV",{class:!0});var ka=s(mo);T(Cx.$$.fragment,ka),kur=i(ka),bFe=n(ka,"P",{});var fBt=s(bFe);Sur=r(fBt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),fBt.forEach(t),Rur=i(ka),ln=n(ka,"P",{});var tL=s(ln);Pur=r(tL,"The model class to instantiate is selected based on the "),vFe=n(tL,"CODE",{});var mBt=s(vFe);Bur=r(mBt,"model_type"),mBt.forEach(t),Iur=r(tL,` property of the config object (either
passed as an argument or loaded from `),FFe=n(tL,"CODE",{});var gBt=s(FFe);Nur=r(gBt,"pretrained_model_name_or_path"),gBt.forEach(t),qur=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=n(tL,"CODE",{});var hBt=s(TFe);jur=r(hBt,"pretrained_model_name_or_path"),hBt.forEach(t),Dur=r(tL,":"),tL.forEach(t),Gur=i(ka),MFe=n(ka,"UL",{});var pBt=s(MFe);XT=n(pBt,"LI",{});var $Ge=s(XT);EFe=n($Ge,"STRONG",{});var _Bt=s(EFe);Our=r(_Bt,"vision-encoder-decoder"),_Bt.forEach(t),Vur=r($Ge," \u2014 "),fJ=n($Ge,"A",{href:!0});var uBt=s(fJ);Xur=r(uBt,"VisionEncoderDecoderModel"),uBt.forEach(t),zur=r($Ge," (Vision Encoder decoder model)"),$Ge.forEach(t),pBt.forEach(t),Wur=i(ka),zT=n(ka,"P",{});var kGe=s(zT);Qur=r(kGe,"The model is set in evaluation mode by default using "),CFe=n(kGe,"CODE",{});var bBt=s(CFe);Uur=r(bBt,"model.eval()"),bBt.forEach(t),Hur=r(kGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wFe=n(kGe,"CODE",{});var vBt=s(wFe);Jur=r(vBt,"model.train()"),vBt.forEach(t),kGe.forEach(t),Yur=i(ka),T(WT.$$.fragment,ka),ka.forEach(t),Rl.forEach(t),MHe=i(f),Zd=n(f,"H2",{class:!0});var BYe=s(Zd);QT=n(BYe,"A",{id:!0,class:!0,href:!0});var FBt=s(QT);AFe=n(FBt,"SPAN",{});var TBt=s(AFe);T(wx.$$.fragment,TBt),TBt.forEach(t),FBt.forEach(t),Kur=i(BYe),LFe=n(BYe,"SPAN",{});var MBt=s(LFe);Zur=r(MBt,"AutoModelForVisualQuestionAnswering"),MBt.forEach(t),BYe.forEach(t),EHe=i(f),Ho=n(f,"DIV",{class:!0});var Pl=s(Ho);T(Ax.$$.fragment,Pl),e1r=i(Pl),ec=n(Pl,"P",{});var Vne=s(ec);o1r=r(Vne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),mJ=n(Vne,"A",{href:!0});var EBt=s(mJ);r1r=r(EBt,"from_pretrained()"),EBt.forEach(t),t1r=r(Vne," class method or the "),gJ=n(Vne,"A",{href:!0});var CBt=s(gJ);a1r=r(CBt,"from_config()"),CBt.forEach(t),n1r=r(Vne,` class
method.`),Vne.forEach(t),s1r=i(Pl),Lx=n(Pl,"P",{});var IYe=s(Lx);l1r=r(IYe,"This class cannot be instantiated directly using "),yFe=n(IYe,"CODE",{});var wBt=s(yFe);i1r=r(wBt,"__init__()"),wBt.forEach(t),d1r=r(IYe," (throws an error)."),IYe.forEach(t),c1r=i(Pl),$t=n(Pl,"DIV",{class:!0});var aL=s($t);T(yx.$$.fragment,aL),f1r=i(aL),xFe=n(aL,"P",{});var ABt=s(xFe);m1r=r(ABt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),ABt.forEach(t),g1r=i(aL),oc=n(aL,"P",{});var Xne=s(oc);h1r=r(Xne,`Note:
Loading a model from its configuration file does `),$Fe=n(Xne,"STRONG",{});var LBt=s($Fe);p1r=r(LBt,"not"),LBt.forEach(t),_1r=r(Xne,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(Xne,"A",{href:!0});var yBt=s(hJ);u1r=r(yBt,"from_pretrained()"),yBt.forEach(t),b1r=r(Xne," to load the model weights."),Xne.forEach(t),v1r=i(aL),T(UT.$$.fragment,aL),aL.forEach(t),F1r=i(Pl),go=n(Pl,"DIV",{class:!0});var Sa=s(go);T(xx.$$.fragment,Sa),T1r=i(Sa),kFe=n(Sa,"P",{});var xBt=s(kFe);M1r=r(xBt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),xBt.forEach(t),E1r=i(Sa),dn=n(Sa,"P",{});var nL=s(dn);C1r=r(nL,"The model class to instantiate is selected based on the "),SFe=n(nL,"CODE",{});var $Bt=s(SFe);w1r=r($Bt,"model_type"),$Bt.forEach(t),A1r=r(nL,` property of the config object (either
passed as an argument or loaded from `),RFe=n(nL,"CODE",{});var kBt=s(RFe);L1r=r(kBt,"pretrained_model_name_or_path"),kBt.forEach(t),y1r=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=n(nL,"CODE",{});var SBt=s(PFe);x1r=r(SBt,"pretrained_model_name_or_path"),SBt.forEach(t),$1r=r(nL,":"),nL.forEach(t),k1r=i(Sa),BFe=n(Sa,"UL",{});var RBt=s(BFe);HT=n(RBt,"LI",{});var SGe=s(HT);IFe=n(SGe,"STRONG",{});var PBt=s(IFe);S1r=r(PBt,"vilt"),PBt.forEach(t),R1r=r(SGe," \u2014 "),pJ=n(SGe,"A",{href:!0});var BBt=s(pJ);P1r=r(BBt,"ViltForQuestionAnswering"),BBt.forEach(t),B1r=r(SGe," (ViLT model)"),SGe.forEach(t),RBt.forEach(t),I1r=i(Sa),JT=n(Sa,"P",{});var RGe=s(JT);N1r=r(RGe,"The model is set in evaluation mode by default using "),NFe=n(RGe,"CODE",{});var IBt=s(NFe);q1r=r(IBt,"model.eval()"),IBt.forEach(t),j1r=r(RGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qFe=n(RGe,"CODE",{});var NBt=s(qFe);D1r=r(NBt,"model.train()"),NBt.forEach(t),RGe.forEach(t),G1r=i(Sa),T(YT.$$.fragment,Sa),Sa.forEach(t),Pl.forEach(t),CHe=i(f),rc=n(f,"H2",{class:!0});var NYe=s(rc);KT=n(NYe,"A",{id:!0,class:!0,href:!0});var qBt=s(KT);jFe=n(qBt,"SPAN",{});var jBt=s(jFe);T($x.$$.fragment,jBt),jBt.forEach(t),qBt.forEach(t),O1r=i(NYe),DFe=n(NYe,"SPAN",{});var DBt=s(DFe);V1r=r(DBt,"AutoModelForAudioClassification"),DBt.forEach(t),NYe.forEach(t),wHe=i(f),Jo=n(f,"DIV",{class:!0});var Bl=s(Jo);T(kx.$$.fragment,Bl),X1r=i(Bl),tc=n(Bl,"P",{});var zne=s(tc);z1r=r(zne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),_J=n(zne,"A",{href:!0});var GBt=s(_J);W1r=r(GBt,"from_pretrained()"),GBt.forEach(t),Q1r=r(zne," class method or the "),uJ=n(zne,"A",{href:!0});var OBt=s(uJ);U1r=r(OBt,"from_config()"),OBt.forEach(t),H1r=r(zne,` class
method.`),zne.forEach(t),J1r=i(Bl),Sx=n(Bl,"P",{});var qYe=s(Sx);Y1r=r(qYe,"This class cannot be instantiated directly using "),GFe=n(qYe,"CODE",{});var VBt=s(GFe);K1r=r(VBt,"__init__()"),VBt.forEach(t),Z1r=r(qYe," (throws an error)."),qYe.forEach(t),e8r=i(Bl),kt=n(Bl,"DIV",{class:!0});var sL=s(kt);T(Rx.$$.fragment,sL),o8r=i(sL),OFe=n(sL,"P",{});var XBt=s(OFe);r8r=r(XBt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),XBt.forEach(t),t8r=i(sL),ac=n(sL,"P",{});var Wne=s(ac);a8r=r(Wne,`Note:
Loading a model from its configuration file does `),VFe=n(Wne,"STRONG",{});var zBt=s(VFe);n8r=r(zBt,"not"),zBt.forEach(t),s8r=r(Wne,` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=n(Wne,"A",{href:!0});var WBt=s(bJ);l8r=r(WBt,"from_pretrained()"),WBt.forEach(t),i8r=r(Wne," to load the model weights."),Wne.forEach(t),d8r=i(sL),T(ZT.$$.fragment,sL),sL.forEach(t),c8r=i(Bl),ho=n(Bl,"DIV",{class:!0});var Ra=s(ho);T(Px.$$.fragment,Ra),f8r=i(Ra),XFe=n(Ra,"P",{});var QBt=s(XFe);m8r=r(QBt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),QBt.forEach(t),g8r=i(Ra),cn=n(Ra,"P",{});var lL=s(cn);h8r=r(lL,"The model class to instantiate is selected based on the "),zFe=n(lL,"CODE",{});var UBt=s(zFe);p8r=r(UBt,"model_type"),UBt.forEach(t),_8r=r(lL,` property of the config object (either
passed as an argument or loaded from `),WFe=n(lL,"CODE",{});var HBt=s(WFe);u8r=r(HBt,"pretrained_model_name_or_path"),HBt.forEach(t),b8r=r(lL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=n(lL,"CODE",{});var JBt=s(QFe);v8r=r(JBt,"pretrained_model_name_or_path"),JBt.forEach(t),F8r=r(lL,":"),lL.forEach(t),T8r=i(Ra),Pe=n(Ra,"UL",{});var We=s(Pe);eM=n(We,"LI",{});var PGe=s(eM);UFe=n(PGe,"STRONG",{});var YBt=s(UFe);M8r=r(YBt,"data2vec-audio"),YBt.forEach(t),E8r=r(PGe," \u2014 "),vJ=n(PGe,"A",{href:!0});var KBt=s(vJ);C8r=r(KBt,"Data2VecAudioForSequenceClassification"),KBt.forEach(t),w8r=r(PGe," (Data2VecAudio model)"),PGe.forEach(t),A8r=i(We),oM=n(We,"LI",{});var BGe=s(oM);HFe=n(BGe,"STRONG",{});var ZBt=s(HFe);L8r=r(ZBt,"hubert"),ZBt.forEach(t),y8r=r(BGe," \u2014 "),FJ=n(BGe,"A",{href:!0});var eIt=s(FJ);x8r=r(eIt,"HubertForSequenceClassification"),eIt.forEach(t),$8r=r(BGe," (Hubert model)"),BGe.forEach(t),k8r=i(We),rM=n(We,"LI",{});var IGe=s(rM);JFe=n(IGe,"STRONG",{});var oIt=s(JFe);S8r=r(oIt,"sew"),oIt.forEach(t),R8r=r(IGe," \u2014 "),TJ=n(IGe,"A",{href:!0});var rIt=s(TJ);P8r=r(rIt,"SEWForSequenceClassification"),rIt.forEach(t),B8r=r(IGe," (SEW model)"),IGe.forEach(t),I8r=i(We),tM=n(We,"LI",{});var NGe=s(tM);YFe=n(NGe,"STRONG",{});var tIt=s(YFe);N8r=r(tIt,"sew-d"),tIt.forEach(t),q8r=r(NGe," \u2014 "),MJ=n(NGe,"A",{href:!0});var aIt=s(MJ);j8r=r(aIt,"SEWDForSequenceClassification"),aIt.forEach(t),D8r=r(NGe," (SEW-D model)"),NGe.forEach(t),G8r=i(We),aM=n(We,"LI",{});var qGe=s(aM);KFe=n(qGe,"STRONG",{});var nIt=s(KFe);O8r=r(nIt,"unispeech"),nIt.forEach(t),V8r=r(qGe," \u2014 "),EJ=n(qGe,"A",{href:!0});var sIt=s(EJ);X8r=r(sIt,"UniSpeechForSequenceClassification"),sIt.forEach(t),z8r=r(qGe," (UniSpeech model)"),qGe.forEach(t),W8r=i(We),nM=n(We,"LI",{});var jGe=s(nM);ZFe=n(jGe,"STRONG",{});var lIt=s(ZFe);Q8r=r(lIt,"unispeech-sat"),lIt.forEach(t),U8r=r(jGe," \u2014 "),CJ=n(jGe,"A",{href:!0});var iIt=s(CJ);H8r=r(iIt,"UniSpeechSatForSequenceClassification"),iIt.forEach(t),J8r=r(jGe," (UniSpeechSat model)"),jGe.forEach(t),Y8r=i(We),sM=n(We,"LI",{});var DGe=s(sM);eTe=n(DGe,"STRONG",{});var dIt=s(eTe);K8r=r(dIt,"wav2vec2"),dIt.forEach(t),Z8r=r(DGe," \u2014 "),wJ=n(DGe,"A",{href:!0});var cIt=s(wJ);ebr=r(cIt,"Wav2Vec2ForSequenceClassification"),cIt.forEach(t),obr=r(DGe," (Wav2Vec2 model)"),DGe.forEach(t),rbr=i(We),lM=n(We,"LI",{});var GGe=s(lM);oTe=n(GGe,"STRONG",{});var fIt=s(oTe);tbr=r(fIt,"wav2vec2-conformer"),fIt.forEach(t),abr=r(GGe," \u2014 "),AJ=n(GGe,"A",{href:!0});var mIt=s(AJ);nbr=r(mIt,"Wav2Vec2ConformerForSequenceClassification"),mIt.forEach(t),sbr=r(GGe," (Wav2Vec2-Conformer model)"),GGe.forEach(t),lbr=i(We),iM=n(We,"LI",{});var OGe=s(iM);rTe=n(OGe,"STRONG",{});var gIt=s(rTe);ibr=r(gIt,"wavlm"),gIt.forEach(t),dbr=r(OGe," \u2014 "),LJ=n(OGe,"A",{href:!0});var hIt=s(LJ);cbr=r(hIt,"WavLMForSequenceClassification"),hIt.forEach(t),fbr=r(OGe," (WavLM model)"),OGe.forEach(t),We.forEach(t),mbr=i(Ra),dM=n(Ra,"P",{});var VGe=s(dM);gbr=r(VGe,"The model is set in evaluation mode by default using "),tTe=n(VGe,"CODE",{});var pIt=s(tTe);hbr=r(pIt,"model.eval()"),pIt.forEach(t),pbr=r(VGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aTe=n(VGe,"CODE",{});var _It=s(aTe);_br=r(_It,"model.train()"),_It.forEach(t),VGe.forEach(t),ubr=i(Ra),T(cM.$$.fragment,Ra),Ra.forEach(t),Bl.forEach(t),AHe=i(f),nc=n(f,"H2",{class:!0});var jYe=s(nc);fM=n(jYe,"A",{id:!0,class:!0,href:!0});var uIt=s(fM);nTe=n(uIt,"SPAN",{});var bIt=s(nTe);T(Bx.$$.fragment,bIt),bIt.forEach(t),uIt.forEach(t),bbr=i(jYe),sTe=n(jYe,"SPAN",{});var vIt=s(sTe);vbr=r(vIt,"AutoModelForAudioFrameClassification"),vIt.forEach(t),jYe.forEach(t),LHe=i(f),Yo=n(f,"DIV",{class:!0});var Il=s(Yo);T(Ix.$$.fragment,Il),Fbr=i(Il),sc=n(Il,"P",{});var Qne=s(sc);Tbr=r(Qne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),yJ=n(Qne,"A",{href:!0});var FIt=s(yJ);Mbr=r(FIt,"from_pretrained()"),FIt.forEach(t),Ebr=r(Qne," class method or the "),xJ=n(Qne,"A",{href:!0});var TIt=s(xJ);Cbr=r(TIt,"from_config()"),TIt.forEach(t),wbr=r(Qne,` class
method.`),Qne.forEach(t),Abr=i(Il),Nx=n(Il,"P",{});var DYe=s(Nx);Lbr=r(DYe,"This class cannot be instantiated directly using "),lTe=n(DYe,"CODE",{});var MIt=s(lTe);ybr=r(MIt,"__init__()"),MIt.forEach(t),xbr=r(DYe," (throws an error)."),DYe.forEach(t),$br=i(Il),St=n(Il,"DIV",{class:!0});var iL=s(St);T(qx.$$.fragment,iL),kbr=i(iL),iTe=n(iL,"P",{});var EIt=s(iTe);Sbr=r(EIt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),EIt.forEach(t),Rbr=i(iL),lc=n(iL,"P",{});var Une=s(lc);Pbr=r(Une,`Note:
Loading a model from its configuration file does `),dTe=n(Une,"STRONG",{});var CIt=s(dTe);Bbr=r(CIt,"not"),CIt.forEach(t),Ibr=r(Une,` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=n(Une,"A",{href:!0});var wIt=s($J);Nbr=r(wIt,"from_pretrained()"),wIt.forEach(t),qbr=r(Une," to load the model weights."),Une.forEach(t),jbr=i(iL),T(mM.$$.fragment,iL),iL.forEach(t),Dbr=i(Il),po=n(Il,"DIV",{class:!0});var Pa=s(po);T(jx.$$.fragment,Pa),Gbr=i(Pa),cTe=n(Pa,"P",{});var AIt=s(cTe);Obr=r(AIt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),AIt.forEach(t),Vbr=i(Pa),fn=n(Pa,"P",{});var dL=s(fn);Xbr=r(dL,"The model class to instantiate is selected based on the "),fTe=n(dL,"CODE",{});var LIt=s(fTe);zbr=r(LIt,"model_type"),LIt.forEach(t),Wbr=r(dL,` property of the config object (either
passed as an argument or loaded from `),mTe=n(dL,"CODE",{});var yIt=s(mTe);Qbr=r(yIt,"pretrained_model_name_or_path"),yIt.forEach(t),Ubr=r(dL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gTe=n(dL,"CODE",{});var xIt=s(gTe);Hbr=r(xIt,"pretrained_model_name_or_path"),xIt.forEach(t),Jbr=r(dL,":"),dL.forEach(t),Ybr=i(Pa),it=n(Pa,"UL",{});var Nl=s(it);gM=n(Nl,"LI",{});var XGe=s(gM);hTe=n(XGe,"STRONG",{});var $It=s(hTe);Kbr=r($It,"data2vec-audio"),$It.forEach(t),Zbr=r(XGe," \u2014 "),kJ=n(XGe,"A",{href:!0});var kIt=s(kJ);e2r=r(kIt,"Data2VecAudioForAudioFrameClassification"),kIt.forEach(t),o2r=r(XGe," (Data2VecAudio model)"),XGe.forEach(t),r2r=i(Nl),hM=n(Nl,"LI",{});var zGe=s(hM);pTe=n(zGe,"STRONG",{});var SIt=s(pTe);t2r=r(SIt,"unispeech-sat"),SIt.forEach(t),a2r=r(zGe," \u2014 "),SJ=n(zGe,"A",{href:!0});var RIt=s(SJ);n2r=r(RIt,"UniSpeechSatForAudioFrameClassification"),RIt.forEach(t),s2r=r(zGe," (UniSpeechSat model)"),zGe.forEach(t),l2r=i(Nl),pM=n(Nl,"LI",{});var WGe=s(pM);_Te=n(WGe,"STRONG",{});var PIt=s(_Te);i2r=r(PIt,"wav2vec2"),PIt.forEach(t),d2r=r(WGe," \u2014 "),RJ=n(WGe,"A",{href:!0});var BIt=s(RJ);c2r=r(BIt,"Wav2Vec2ForAudioFrameClassification"),BIt.forEach(t),f2r=r(WGe," (Wav2Vec2 model)"),WGe.forEach(t),m2r=i(Nl),_M=n(Nl,"LI",{});var QGe=s(_M);uTe=n(QGe,"STRONG",{});var IIt=s(uTe);g2r=r(IIt,"wav2vec2-conformer"),IIt.forEach(t),h2r=r(QGe," \u2014 "),PJ=n(QGe,"A",{href:!0});var NIt=s(PJ);p2r=r(NIt,"Wav2Vec2ConformerForAudioFrameClassification"),NIt.forEach(t),_2r=r(QGe," (Wav2Vec2-Conformer model)"),QGe.forEach(t),u2r=i(Nl),uM=n(Nl,"LI",{});var UGe=s(uM);bTe=n(UGe,"STRONG",{});var qIt=s(bTe);b2r=r(qIt,"wavlm"),qIt.forEach(t),v2r=r(UGe," \u2014 "),BJ=n(UGe,"A",{href:!0});var jIt=s(BJ);F2r=r(jIt,"WavLMForAudioFrameClassification"),jIt.forEach(t),T2r=r(UGe," (WavLM model)"),UGe.forEach(t),Nl.forEach(t),M2r=i(Pa),bM=n(Pa,"P",{});var HGe=s(bM);E2r=r(HGe,"The model is set in evaluation mode by default using "),vTe=n(HGe,"CODE",{});var DIt=s(vTe);C2r=r(DIt,"model.eval()"),DIt.forEach(t),w2r=r(HGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FTe=n(HGe,"CODE",{});var GIt=s(FTe);A2r=r(GIt,"model.train()"),GIt.forEach(t),HGe.forEach(t),L2r=i(Pa),T(vM.$$.fragment,Pa),Pa.forEach(t),Il.forEach(t),yHe=i(f),ic=n(f,"H2",{class:!0});var GYe=s(ic);FM=n(GYe,"A",{id:!0,class:!0,href:!0});var OIt=s(FM);TTe=n(OIt,"SPAN",{});var VIt=s(TTe);T(Dx.$$.fragment,VIt),VIt.forEach(t),OIt.forEach(t),y2r=i(GYe),MTe=n(GYe,"SPAN",{});var XIt=s(MTe);x2r=r(XIt,"AutoModelForCTC"),XIt.forEach(t),GYe.forEach(t),xHe=i(f),Ko=n(f,"DIV",{class:!0});var ql=s(Ko);T(Gx.$$.fragment,ql),$2r=i(ql),dc=n(ql,"P",{});var Hne=s(dc);k2r=r(Hne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),IJ=n(Hne,"A",{href:!0});var zIt=s(IJ);S2r=r(zIt,"from_pretrained()"),zIt.forEach(t),R2r=r(Hne," class method or the "),NJ=n(Hne,"A",{href:!0});var WIt=s(NJ);P2r=r(WIt,"from_config()"),WIt.forEach(t),B2r=r(Hne,` class
method.`),Hne.forEach(t),I2r=i(ql),Ox=n(ql,"P",{});var OYe=s(Ox);N2r=r(OYe,"This class cannot be instantiated directly using "),ETe=n(OYe,"CODE",{});var QIt=s(ETe);q2r=r(QIt,"__init__()"),QIt.forEach(t),j2r=r(OYe," (throws an error)."),OYe.forEach(t),D2r=i(ql),Rt=n(ql,"DIV",{class:!0});var cL=s(Rt);T(Vx.$$.fragment,cL),G2r=i(cL),CTe=n(cL,"P",{});var UIt=s(CTe);O2r=r(UIt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),UIt.forEach(t),V2r=i(cL),cc=n(cL,"P",{});var Jne=s(cc);X2r=r(Jne,`Note:
Loading a model from its configuration file does `),wTe=n(Jne,"STRONG",{});var HIt=s(wTe);z2r=r(HIt,"not"),HIt.forEach(t),W2r=r(Jne,` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=n(Jne,"A",{href:!0});var JIt=s(qJ);Q2r=r(JIt,"from_pretrained()"),JIt.forEach(t),U2r=r(Jne," to load the model weights."),Jne.forEach(t),H2r=i(cL),T(TM.$$.fragment,cL),cL.forEach(t),J2r=i(ql),_o=n(ql,"DIV",{class:!0});var Ba=s(_o);T(Xx.$$.fragment,Ba),Y2r=i(Ba),ATe=n(Ba,"P",{});var YIt=s(ATe);K2r=r(YIt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),YIt.forEach(t),Z2r=i(Ba),mn=n(Ba,"P",{});var fL=s(mn);evr=r(fL,"The model class to instantiate is selected based on the "),LTe=n(fL,"CODE",{});var KIt=s(LTe);ovr=r(KIt,"model_type"),KIt.forEach(t),rvr=r(fL,` property of the config object (either
passed as an argument or loaded from `),yTe=n(fL,"CODE",{});var ZIt=s(yTe);tvr=r(ZIt,"pretrained_model_name_or_path"),ZIt.forEach(t),avr=r(fL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=n(fL,"CODE",{});var eNt=s(xTe);nvr=r(eNt,"pretrained_model_name_or_path"),eNt.forEach(t),svr=r(fL,":"),fL.forEach(t),lvr=i(Ba),Le=n(Ba,"UL",{});var Be=s(Le);MM=n(Be,"LI",{});var JGe=s(MM);$Te=n(JGe,"STRONG",{});var oNt=s($Te);ivr=r(oNt,"data2vec-audio"),oNt.forEach(t),dvr=r(JGe," \u2014 "),jJ=n(JGe,"A",{href:!0});var rNt=s(jJ);cvr=r(rNt,"Data2VecAudioForCTC"),rNt.forEach(t),fvr=r(JGe," (Data2VecAudio model)"),JGe.forEach(t),mvr=i(Be),EM=n(Be,"LI",{});var YGe=s(EM);kTe=n(YGe,"STRONG",{});var tNt=s(kTe);gvr=r(tNt,"hubert"),tNt.forEach(t),hvr=r(YGe," \u2014 "),DJ=n(YGe,"A",{href:!0});var aNt=s(DJ);pvr=r(aNt,"HubertForCTC"),aNt.forEach(t),_vr=r(YGe," (Hubert model)"),YGe.forEach(t),uvr=i(Be),CM=n(Be,"LI",{});var KGe=s(CM);STe=n(KGe,"STRONG",{});var nNt=s(STe);bvr=r(nNt,"mctct"),nNt.forEach(t),vvr=r(KGe," \u2014 "),GJ=n(KGe,"A",{href:!0});var sNt=s(GJ);Fvr=r(sNt,"MCTCTForCTC"),sNt.forEach(t),Tvr=r(KGe," (M-CTC-T model)"),KGe.forEach(t),Mvr=i(Be),wM=n(Be,"LI",{});var ZGe=s(wM);RTe=n(ZGe,"STRONG",{});var lNt=s(RTe);Evr=r(lNt,"sew"),lNt.forEach(t),Cvr=r(ZGe," \u2014 "),OJ=n(ZGe,"A",{href:!0});var iNt=s(OJ);wvr=r(iNt,"SEWForCTC"),iNt.forEach(t),Avr=r(ZGe," (SEW model)"),ZGe.forEach(t),Lvr=i(Be),AM=n(Be,"LI",{});var eOe=s(AM);PTe=n(eOe,"STRONG",{});var dNt=s(PTe);yvr=r(dNt,"sew-d"),dNt.forEach(t),xvr=r(eOe," \u2014 "),VJ=n(eOe,"A",{href:!0});var cNt=s(VJ);$vr=r(cNt,"SEWDForCTC"),cNt.forEach(t),kvr=r(eOe," (SEW-D model)"),eOe.forEach(t),Svr=i(Be),LM=n(Be,"LI",{});var oOe=s(LM);BTe=n(oOe,"STRONG",{});var fNt=s(BTe);Rvr=r(fNt,"unispeech"),fNt.forEach(t),Pvr=r(oOe," \u2014 "),XJ=n(oOe,"A",{href:!0});var mNt=s(XJ);Bvr=r(mNt,"UniSpeechForCTC"),mNt.forEach(t),Ivr=r(oOe," (UniSpeech model)"),oOe.forEach(t),Nvr=i(Be),yM=n(Be,"LI",{});var rOe=s(yM);ITe=n(rOe,"STRONG",{});var gNt=s(ITe);qvr=r(gNt,"unispeech-sat"),gNt.forEach(t),jvr=r(rOe," \u2014 "),zJ=n(rOe,"A",{href:!0});var hNt=s(zJ);Dvr=r(hNt,"UniSpeechSatForCTC"),hNt.forEach(t),Gvr=r(rOe," (UniSpeechSat model)"),rOe.forEach(t),Ovr=i(Be),xM=n(Be,"LI",{});var tOe=s(xM);NTe=n(tOe,"STRONG",{});var pNt=s(NTe);Vvr=r(pNt,"wav2vec2"),pNt.forEach(t),Xvr=r(tOe," \u2014 "),WJ=n(tOe,"A",{href:!0});var _Nt=s(WJ);zvr=r(_Nt,"Wav2Vec2ForCTC"),_Nt.forEach(t),Wvr=r(tOe," (Wav2Vec2 model)"),tOe.forEach(t),Qvr=i(Be),$M=n(Be,"LI",{});var aOe=s($M);qTe=n(aOe,"STRONG",{});var uNt=s(qTe);Uvr=r(uNt,"wav2vec2-conformer"),uNt.forEach(t),Hvr=r(aOe," \u2014 "),QJ=n(aOe,"A",{href:!0});var bNt=s(QJ);Jvr=r(bNt,"Wav2Vec2ConformerForCTC"),bNt.forEach(t),Yvr=r(aOe," (Wav2Vec2-Conformer model)"),aOe.forEach(t),Kvr=i(Be),kM=n(Be,"LI",{});var nOe=s(kM);jTe=n(nOe,"STRONG",{});var vNt=s(jTe);Zvr=r(vNt,"wavlm"),vNt.forEach(t),e6r=r(nOe," \u2014 "),UJ=n(nOe,"A",{href:!0});var FNt=s(UJ);o6r=r(FNt,"WavLMForCTC"),FNt.forEach(t),r6r=r(nOe," (WavLM model)"),nOe.forEach(t),Be.forEach(t),t6r=i(Ba),SM=n(Ba,"P",{});var sOe=s(SM);a6r=r(sOe,"The model is set in evaluation mode by default using "),DTe=n(sOe,"CODE",{});var TNt=s(DTe);n6r=r(TNt,"model.eval()"),TNt.forEach(t),s6r=r(sOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GTe=n(sOe,"CODE",{});var MNt=s(GTe);l6r=r(MNt,"model.train()"),MNt.forEach(t),sOe.forEach(t),i6r=i(Ba),T(RM.$$.fragment,Ba),Ba.forEach(t),ql.forEach(t),$He=i(f),fc=n(f,"H2",{class:!0});var VYe=s(fc);PM=n(VYe,"A",{id:!0,class:!0,href:!0});var ENt=s(PM);OTe=n(ENt,"SPAN",{});var CNt=s(OTe);T(zx.$$.fragment,CNt),CNt.forEach(t),ENt.forEach(t),d6r=i(VYe),VTe=n(VYe,"SPAN",{});var wNt=s(VTe);c6r=r(wNt,"AutoModelForSpeechSeq2Seq"),wNt.forEach(t),VYe.forEach(t),kHe=i(f),Zo=n(f,"DIV",{class:!0});var jl=s(Zo);T(Wx.$$.fragment,jl),f6r=i(jl),mc=n(jl,"P",{});var Yne=s(mc);m6r=r(Yne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),HJ=n(Yne,"A",{href:!0});var ANt=s(HJ);g6r=r(ANt,"from_pretrained()"),ANt.forEach(t),h6r=r(Yne," class method or the "),JJ=n(Yne,"A",{href:!0});var LNt=s(JJ);p6r=r(LNt,"from_config()"),LNt.forEach(t),_6r=r(Yne,` class
method.`),Yne.forEach(t),u6r=i(jl),Qx=n(jl,"P",{});var XYe=s(Qx);b6r=r(XYe,"This class cannot be instantiated directly using "),XTe=n(XYe,"CODE",{});var yNt=s(XTe);v6r=r(yNt,"__init__()"),yNt.forEach(t),F6r=r(XYe," (throws an error)."),XYe.forEach(t),T6r=i(jl),Pt=n(jl,"DIV",{class:!0});var mL=s(Pt);T(Ux.$$.fragment,mL),M6r=i(mL),zTe=n(mL,"P",{});var xNt=s(zTe);E6r=r(xNt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xNt.forEach(t),C6r=i(mL),gc=n(mL,"P",{});var Kne=s(gc);w6r=r(Kne,`Note:
Loading a model from its configuration file does `),WTe=n(Kne,"STRONG",{});var $Nt=s(WTe);A6r=r($Nt,"not"),$Nt.forEach(t),L6r=r(Kne,` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=n(Kne,"A",{href:!0});var kNt=s(YJ);y6r=r(kNt,"from_pretrained()"),kNt.forEach(t),x6r=r(Kne," to load the model weights."),Kne.forEach(t),$6r=i(mL),T(BM.$$.fragment,mL),mL.forEach(t),k6r=i(jl),uo=n(jl,"DIV",{class:!0});var Ia=s(uo);T(Hx.$$.fragment,Ia),S6r=i(Ia),QTe=n(Ia,"P",{});var SNt=s(QTe);R6r=r(SNt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),SNt.forEach(t),P6r=i(Ia),gn=n(Ia,"P",{});var gL=s(gn);B6r=r(gL,"The model class to instantiate is selected based on the "),UTe=n(gL,"CODE",{});var RNt=s(UTe);I6r=r(RNt,"model_type"),RNt.forEach(t),N6r=r(gL,` property of the config object (either
passed as an argument or loaded from `),HTe=n(gL,"CODE",{});var PNt=s(HTe);q6r=r(PNt,"pretrained_model_name_or_path"),PNt.forEach(t),j6r=r(gL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=n(gL,"CODE",{});var BNt=s(JTe);D6r=r(BNt,"pretrained_model_name_or_path"),BNt.forEach(t),G6r=r(gL,":"),gL.forEach(t),O6r=i(Ia),Jx=n(Ia,"UL",{});var zYe=s(Jx);IM=n(zYe,"LI",{});var lOe=s(IM);YTe=n(lOe,"STRONG",{});var INt=s(YTe);V6r=r(INt,"speech-encoder-decoder"),INt.forEach(t),X6r=r(lOe," \u2014 "),KJ=n(lOe,"A",{href:!0});var NNt=s(KJ);z6r=r(NNt,"SpeechEncoderDecoderModel"),NNt.forEach(t),W6r=r(lOe," (Speech Encoder decoder model)"),lOe.forEach(t),Q6r=i(zYe),NM=n(zYe,"LI",{});var iOe=s(NM);KTe=n(iOe,"STRONG",{});var qNt=s(KTe);U6r=r(qNt,"speech_to_text"),qNt.forEach(t),H6r=r(iOe," \u2014 "),ZJ=n(iOe,"A",{href:!0});var jNt=s(ZJ);J6r=r(jNt,"Speech2TextForConditionalGeneration"),jNt.forEach(t),Y6r=r(iOe," (Speech2Text model)"),iOe.forEach(t),zYe.forEach(t),K6r=i(Ia),qM=n(Ia,"P",{});var dOe=s(qM);Z6r=r(dOe,"The model is set in evaluation mode by default using "),ZTe=n(dOe,"CODE",{});var DNt=s(ZTe);eFr=r(DNt,"model.eval()"),DNt.forEach(t),oFr=r(dOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eMe=n(dOe,"CODE",{});var GNt=s(eMe);rFr=r(GNt,"model.train()"),GNt.forEach(t),dOe.forEach(t),tFr=i(Ia),T(jM.$$.fragment,Ia),Ia.forEach(t),jl.forEach(t),SHe=i(f),hc=n(f,"H2",{class:!0});var WYe=s(hc);DM=n(WYe,"A",{id:!0,class:!0,href:!0});var ONt=s(DM);oMe=n(ONt,"SPAN",{});var VNt=s(oMe);T(Yx.$$.fragment,VNt),VNt.forEach(t),ONt.forEach(t),aFr=i(WYe),rMe=n(WYe,"SPAN",{});var XNt=s(rMe);nFr=r(XNt,"AutoModelForAudioXVector"),XNt.forEach(t),WYe.forEach(t),RHe=i(f),er=n(f,"DIV",{class:!0});var Dl=s(er);T(Kx.$$.fragment,Dl),sFr=i(Dl),pc=n(Dl,"P",{});var Zne=s(pc);lFr=r(Zne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),eY=n(Zne,"A",{href:!0});var zNt=s(eY);iFr=r(zNt,"from_pretrained()"),zNt.forEach(t),dFr=r(Zne," class method or the "),oY=n(Zne,"A",{href:!0});var WNt=s(oY);cFr=r(WNt,"from_config()"),WNt.forEach(t),fFr=r(Zne,` class
method.`),Zne.forEach(t),mFr=i(Dl),Zx=n(Dl,"P",{});var QYe=s(Zx);gFr=r(QYe,"This class cannot be instantiated directly using "),tMe=n(QYe,"CODE",{});var QNt=s(tMe);hFr=r(QNt,"__init__()"),QNt.forEach(t),pFr=r(QYe," (throws an error)."),QYe.forEach(t),_Fr=i(Dl),Bt=n(Dl,"DIV",{class:!0});var hL=s(Bt);T(e$.$$.fragment,hL),uFr=i(hL),aMe=n(hL,"P",{});var UNt=s(aMe);bFr=r(UNt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),UNt.forEach(t),vFr=i(hL),_c=n(hL,"P",{});var ese=s(_c);FFr=r(ese,`Note:
Loading a model from its configuration file does `),nMe=n(ese,"STRONG",{});var HNt=s(nMe);TFr=r(HNt,"not"),HNt.forEach(t),MFr=r(ese,` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=n(ese,"A",{href:!0});var JNt=s(rY);EFr=r(JNt,"from_pretrained()"),JNt.forEach(t),CFr=r(ese," to load the model weights."),ese.forEach(t),wFr=i(hL),T(GM.$$.fragment,hL),hL.forEach(t),AFr=i(Dl),bo=n(Dl,"DIV",{class:!0});var Na=s(bo);T(o$.$$.fragment,Na),LFr=i(Na),sMe=n(Na,"P",{});var YNt=s(sMe);yFr=r(YNt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),YNt.forEach(t),xFr=i(Na),hn=n(Na,"P",{});var pL=s(hn);$Fr=r(pL,"The model class to instantiate is selected based on the "),lMe=n(pL,"CODE",{});var KNt=s(lMe);kFr=r(KNt,"model_type"),KNt.forEach(t),SFr=r(pL,` property of the config object (either
passed as an argument or loaded from `),iMe=n(pL,"CODE",{});var ZNt=s(iMe);RFr=r(ZNt,"pretrained_model_name_or_path"),ZNt.forEach(t),PFr=r(pL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=n(pL,"CODE",{});var eqt=s(dMe);BFr=r(eqt,"pretrained_model_name_or_path"),eqt.forEach(t),IFr=r(pL,":"),pL.forEach(t),NFr=i(Na),dt=n(Na,"UL",{});var Gl=s(dt);OM=n(Gl,"LI",{});var cOe=s(OM);cMe=n(cOe,"STRONG",{});var oqt=s(cMe);qFr=r(oqt,"data2vec-audio"),oqt.forEach(t),jFr=r(cOe," \u2014 "),tY=n(cOe,"A",{href:!0});var rqt=s(tY);DFr=r(rqt,"Data2VecAudioForXVector"),rqt.forEach(t),GFr=r(cOe," (Data2VecAudio model)"),cOe.forEach(t),OFr=i(Gl),VM=n(Gl,"LI",{});var fOe=s(VM);fMe=n(fOe,"STRONG",{});var tqt=s(fMe);VFr=r(tqt,"unispeech-sat"),tqt.forEach(t),XFr=r(fOe," \u2014 "),aY=n(fOe,"A",{href:!0});var aqt=s(aY);zFr=r(aqt,"UniSpeechSatForXVector"),aqt.forEach(t),WFr=r(fOe," (UniSpeechSat model)"),fOe.forEach(t),QFr=i(Gl),XM=n(Gl,"LI",{});var mOe=s(XM);mMe=n(mOe,"STRONG",{});var nqt=s(mMe);UFr=r(nqt,"wav2vec2"),nqt.forEach(t),HFr=r(mOe," \u2014 "),nY=n(mOe,"A",{href:!0});var sqt=s(nY);JFr=r(sqt,"Wav2Vec2ForXVector"),sqt.forEach(t),YFr=r(mOe," (Wav2Vec2 model)"),mOe.forEach(t),KFr=i(Gl),zM=n(Gl,"LI",{});var gOe=s(zM);gMe=n(gOe,"STRONG",{});var lqt=s(gMe);ZFr=r(lqt,"wav2vec2-conformer"),lqt.forEach(t),eTr=r(gOe," \u2014 "),sY=n(gOe,"A",{href:!0});var iqt=s(sY);oTr=r(iqt,"Wav2Vec2ConformerForXVector"),iqt.forEach(t),rTr=r(gOe," (Wav2Vec2-Conformer model)"),gOe.forEach(t),tTr=i(Gl),WM=n(Gl,"LI",{});var hOe=s(WM);hMe=n(hOe,"STRONG",{});var dqt=s(hMe);aTr=r(dqt,"wavlm"),dqt.forEach(t),nTr=r(hOe," \u2014 "),lY=n(hOe,"A",{href:!0});var cqt=s(lY);sTr=r(cqt,"WavLMForXVector"),cqt.forEach(t),lTr=r(hOe," (WavLM model)"),hOe.forEach(t),Gl.forEach(t),iTr=i(Na),QM=n(Na,"P",{});var pOe=s(QM);dTr=r(pOe,"The model is set in evaluation mode by default using "),pMe=n(pOe,"CODE",{});var fqt=s(pMe);cTr=r(fqt,"model.eval()"),fqt.forEach(t),fTr=r(pOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_Me=n(pOe,"CODE",{});var mqt=s(_Me);mTr=r(mqt,"model.train()"),mqt.forEach(t),pOe.forEach(t),gTr=i(Na),T(UM.$$.fragment,Na),Na.forEach(t),Dl.forEach(t),PHe=i(f),uc=n(f,"H2",{class:!0});var UYe=s(uc);HM=n(UYe,"A",{id:!0,class:!0,href:!0});var gqt=s(HM);uMe=n(gqt,"SPAN",{});var hqt=s(uMe);T(r$.$$.fragment,hqt),hqt.forEach(t),gqt.forEach(t),hTr=i(UYe),bMe=n(UYe,"SPAN",{});var pqt=s(bMe);pTr=r(pqt,"AutoModelForMaskedImageModeling"),pqt.forEach(t),UYe.forEach(t),BHe=i(f),or=n(f,"DIV",{class:!0});var Ol=s(or);T(t$.$$.fragment,Ol),_Tr=i(Ol),bc=n(Ol,"P",{});var ose=s(bc);uTr=r(ose,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),iY=n(ose,"A",{href:!0});var _qt=s(iY);bTr=r(_qt,"from_pretrained()"),_qt.forEach(t),vTr=r(ose," class method or the "),dY=n(ose,"A",{href:!0});var uqt=s(dY);FTr=r(uqt,"from_config()"),uqt.forEach(t),TTr=r(ose,` class
method.`),ose.forEach(t),MTr=i(Ol),a$=n(Ol,"P",{});var HYe=s(a$);ETr=r(HYe,"This class cannot be instantiated directly using "),vMe=n(HYe,"CODE",{});var bqt=s(vMe);CTr=r(bqt,"__init__()"),bqt.forEach(t),wTr=r(HYe," (throws an error)."),HYe.forEach(t),ATr=i(Ol),It=n(Ol,"DIV",{class:!0});var _L=s(It);T(n$.$$.fragment,_L),LTr=i(_L),FMe=n(_L,"P",{});var vqt=s(FMe);yTr=r(vqt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),vqt.forEach(t),xTr=i(_L),vc=n(_L,"P",{});var rse=s(vc);$Tr=r(rse,`Note:
Loading a model from its configuration file does `),TMe=n(rse,"STRONG",{});var Fqt=s(TMe);kTr=r(Fqt,"not"),Fqt.forEach(t),STr=r(rse,` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=n(rse,"A",{href:!0});var Tqt=s(cY);RTr=r(Tqt,"from_pretrained()"),Tqt.forEach(t),PTr=r(rse," to load the model weights."),rse.forEach(t),BTr=i(_L),T(JM.$$.fragment,_L),_L.forEach(t),ITr=i(Ol),vo=n(Ol,"DIV",{class:!0});var qa=s(vo);T(s$.$$.fragment,qa),NTr=i(qa),MMe=n(qa,"P",{});var Mqt=s(MMe);qTr=r(Mqt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Mqt.forEach(t),jTr=i(qa),pn=n(qa,"P",{});var uL=s(pn);DTr=r(uL,"The model class to instantiate is selected based on the "),EMe=n(uL,"CODE",{});var Eqt=s(EMe);GTr=r(Eqt,"model_type"),Eqt.forEach(t),OTr=r(uL,` property of the config object (either
passed as an argument or loaded from `),CMe=n(uL,"CODE",{});var Cqt=s(CMe);VTr=r(Cqt,"pretrained_model_name_or_path"),Cqt.forEach(t),XTr=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=n(uL,"CODE",{});var wqt=s(wMe);zTr=r(wqt,"pretrained_model_name_or_path"),wqt.forEach(t),WTr=r(uL,":"),uL.forEach(t),QTr=i(qa),_n=n(qa,"UL",{});var bL=s(_n);YM=n(bL,"LI",{});var _Oe=s(YM);AMe=n(_Oe,"STRONG",{});var Aqt=s(AMe);UTr=r(Aqt,"deit"),Aqt.forEach(t),HTr=r(_Oe," \u2014 "),fY=n(_Oe,"A",{href:!0});var Lqt=s(fY);JTr=r(Lqt,"DeiTForMaskedImageModeling"),Lqt.forEach(t),YTr=r(_Oe," (DeiT model)"),_Oe.forEach(t),KTr=i(bL),KM=n(bL,"LI",{});var uOe=s(KM);LMe=n(uOe,"STRONG",{});var yqt=s(LMe);ZTr=r(yqt,"swin"),yqt.forEach(t),eMr=r(uOe," \u2014 "),mY=n(uOe,"A",{href:!0});var xqt=s(mY);oMr=r(xqt,"SwinForMaskedImageModeling"),xqt.forEach(t),rMr=r(uOe," (Swin Transformer model)"),uOe.forEach(t),tMr=i(bL),ZM=n(bL,"LI",{});var bOe=s(ZM);yMe=n(bOe,"STRONG",{});var $qt=s(yMe);aMr=r($qt,"swinv2"),$qt.forEach(t),nMr=r(bOe," \u2014 "),gY=n(bOe,"A",{href:!0});var kqt=s(gY);sMr=r(kqt,"Swinv2ForMaskedImageModeling"),kqt.forEach(t),lMr=r(bOe," (Swin Transformer V2 model)"),bOe.forEach(t),iMr=i(bL),eE=n(bL,"LI",{});var vOe=s(eE);xMe=n(vOe,"STRONG",{});var Sqt=s(xMe);dMr=r(Sqt,"vit"),Sqt.forEach(t),cMr=r(vOe," \u2014 "),hY=n(vOe,"A",{href:!0});var Rqt=s(hY);fMr=r(Rqt,"ViTForMaskedImageModeling"),Rqt.forEach(t),mMr=r(vOe," (ViT model)"),vOe.forEach(t),bL.forEach(t),gMr=i(qa),oE=n(qa,"P",{});var FOe=s(oE);hMr=r(FOe,"The model is set in evaluation mode by default using "),$Me=n(FOe,"CODE",{});var Pqt=s($Me);pMr=r(Pqt,"model.eval()"),Pqt.forEach(t),_Mr=r(FOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kMe=n(FOe,"CODE",{});var Bqt=s(kMe);uMr=r(Bqt,"model.train()"),Bqt.forEach(t),FOe.forEach(t),bMr=i(qa),T(rE.$$.fragment,qa),qa.forEach(t),Ol.forEach(t),IHe=i(f),Fc=n(f,"H2",{class:!0});var JYe=s(Fc);tE=n(JYe,"A",{id:!0,class:!0,href:!0});var Iqt=s(tE);SMe=n(Iqt,"SPAN",{});var Nqt=s(SMe);T(l$.$$.fragment,Nqt),Nqt.forEach(t),Iqt.forEach(t),vMr=i(JYe),RMe=n(JYe,"SPAN",{});var qqt=s(RMe);FMr=r(qqt,"AutoModelForObjectDetection"),qqt.forEach(t),JYe.forEach(t),NHe=i(f),rr=n(f,"DIV",{class:!0});var Vl=s(rr);T(i$.$$.fragment,Vl),TMr=i(Vl),Tc=n(Vl,"P",{});var tse=s(Tc);MMr=r(tse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),pY=n(tse,"A",{href:!0});var jqt=s(pY);EMr=r(jqt,"from_pretrained()"),jqt.forEach(t),CMr=r(tse," class method or the "),_Y=n(tse,"A",{href:!0});var Dqt=s(_Y);wMr=r(Dqt,"from_config()"),Dqt.forEach(t),AMr=r(tse,` class
method.`),tse.forEach(t),LMr=i(Vl),d$=n(Vl,"P",{});var YYe=s(d$);yMr=r(YYe,"This class cannot be instantiated directly using "),PMe=n(YYe,"CODE",{});var Gqt=s(PMe);xMr=r(Gqt,"__init__()"),Gqt.forEach(t),$Mr=r(YYe," (throws an error)."),YYe.forEach(t),kMr=i(Vl),Nt=n(Vl,"DIV",{class:!0});var vL=s(Nt);T(c$.$$.fragment,vL),SMr=i(vL),BMe=n(vL,"P",{});var Oqt=s(BMe);RMr=r(Oqt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Oqt.forEach(t),PMr=i(vL),Mc=n(vL,"P",{});var ase=s(Mc);BMr=r(ase,`Note:
Loading a model from its configuration file does `),IMe=n(ase,"STRONG",{});var Vqt=s(IMe);IMr=r(Vqt,"not"),Vqt.forEach(t),NMr=r(ase,` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=n(ase,"A",{href:!0});var Xqt=s(uY);qMr=r(Xqt,"from_pretrained()"),Xqt.forEach(t),jMr=r(ase," to load the model weights."),ase.forEach(t),DMr=i(vL),T(aE.$$.fragment,vL),vL.forEach(t),GMr=i(Vl),Fo=n(Vl,"DIV",{class:!0});var ja=s(Fo);T(f$.$$.fragment,ja),OMr=i(ja),NMe=n(ja,"P",{});var zqt=s(NMe);VMr=r(zqt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),zqt.forEach(t),XMr=i(ja),un=n(ja,"P",{});var FL=s(un);zMr=r(FL,"The model class to instantiate is selected based on the "),qMe=n(FL,"CODE",{});var Wqt=s(qMe);WMr=r(Wqt,"model_type"),Wqt.forEach(t),QMr=r(FL,` property of the config object (either
passed as an argument or loaded from `),jMe=n(FL,"CODE",{});var Qqt=s(jMe);UMr=r(Qqt,"pretrained_model_name_or_path"),Qqt.forEach(t),HMr=r(FL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DMe=n(FL,"CODE",{});var Uqt=s(DMe);JMr=r(Uqt,"pretrained_model_name_or_path"),Uqt.forEach(t),YMr=r(FL,":"),FL.forEach(t),KMr=i(ja),m$=n(ja,"UL",{});var KYe=s(m$);nE=n(KYe,"LI",{});var TOe=s(nE);GMe=n(TOe,"STRONG",{});var Hqt=s(GMe);ZMr=r(Hqt,"detr"),Hqt.forEach(t),eEr=r(TOe," \u2014 "),bY=n(TOe,"A",{href:!0});var Jqt=s(bY);oEr=r(Jqt,"DetrForObjectDetection"),Jqt.forEach(t),rEr=r(TOe," (DETR model)"),TOe.forEach(t),tEr=i(KYe),sE=n(KYe,"LI",{});var MOe=s(sE);OMe=n(MOe,"STRONG",{});var Yqt=s(OMe);aEr=r(Yqt,"yolos"),Yqt.forEach(t),nEr=r(MOe," \u2014 "),vY=n(MOe,"A",{href:!0});var Kqt=s(vY);sEr=r(Kqt,"YolosForObjectDetection"),Kqt.forEach(t),lEr=r(MOe," (YOLOS model)"),MOe.forEach(t),KYe.forEach(t),iEr=i(ja),lE=n(ja,"P",{});var EOe=s(lE);dEr=r(EOe,"The model is set in evaluation mode by default using "),VMe=n(EOe,"CODE",{});var Zqt=s(VMe);cEr=r(Zqt,"model.eval()"),Zqt.forEach(t),fEr=r(EOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),XMe=n(EOe,"CODE",{});var ejt=s(XMe);mEr=r(ejt,"model.train()"),ejt.forEach(t),EOe.forEach(t),gEr=i(ja),T(iE.$$.fragment,ja),ja.forEach(t),Vl.forEach(t),qHe=i(f),Ec=n(f,"H2",{class:!0});var ZYe=s(Ec);dE=n(ZYe,"A",{id:!0,class:!0,href:!0});var ojt=s(dE);zMe=n(ojt,"SPAN",{});var rjt=s(zMe);T(g$.$$.fragment,rjt),rjt.forEach(t),ojt.forEach(t),hEr=i(ZYe),WMe=n(ZYe,"SPAN",{});var tjt=s(WMe);pEr=r(tjt,"AutoModelForImageSegmentation"),tjt.forEach(t),ZYe.forEach(t),jHe=i(f),tr=n(f,"DIV",{class:!0});var Xl=s(tr);T(h$.$$.fragment,Xl),_Er=i(Xl),Cc=n(Xl,"P",{});var nse=s(Cc);uEr=r(nse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),FY=n(nse,"A",{href:!0});var ajt=s(FY);bEr=r(ajt,"from_pretrained()"),ajt.forEach(t),vEr=r(nse," class method or the "),TY=n(nse,"A",{href:!0});var njt=s(TY);FEr=r(njt,"from_config()"),njt.forEach(t),TEr=r(nse,` class
method.`),nse.forEach(t),MEr=i(Xl),p$=n(Xl,"P",{});var eKe=s(p$);EEr=r(eKe,"This class cannot be instantiated directly using "),QMe=n(eKe,"CODE",{});var sjt=s(QMe);CEr=r(sjt,"__init__()"),sjt.forEach(t),wEr=r(eKe," (throws an error)."),eKe.forEach(t),AEr=i(Xl),qt=n(Xl,"DIV",{class:!0});var TL=s(qt);T(_$.$$.fragment,TL),LEr=i(TL),UMe=n(TL,"P",{});var ljt=s(UMe);yEr=r(ljt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),ljt.forEach(t),xEr=i(TL),wc=n(TL,"P",{});var sse=s(wc);$Er=r(sse,`Note:
Loading a model from its configuration file does `),HMe=n(sse,"STRONG",{});var ijt=s(HMe);kEr=r(ijt,"not"),ijt.forEach(t),SEr=r(sse,` load the model weights. It only affects the
model\u2019s configuration. Use `),MY=n(sse,"A",{href:!0});var djt=s(MY);REr=r(djt,"from_pretrained()"),djt.forEach(t),PEr=r(sse," to load the model weights."),sse.forEach(t),BEr=i(TL),T(cE.$$.fragment,TL),TL.forEach(t),IEr=i(Xl),To=n(Xl,"DIV",{class:!0});var Da=s(To);T(u$.$$.fragment,Da),NEr=i(Da),JMe=n(Da,"P",{});var cjt=s(JMe);qEr=r(cjt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),cjt.forEach(t),jEr=i(Da),bn=n(Da,"P",{});var ML=s(bn);DEr=r(ML,"The model class to instantiate is selected based on the "),YMe=n(ML,"CODE",{});var fjt=s(YMe);GEr=r(fjt,"model_type"),fjt.forEach(t),OEr=r(ML,` property of the config object (either
passed as an argument or loaded from `),KMe=n(ML,"CODE",{});var mjt=s(KMe);VEr=r(mjt,"pretrained_model_name_or_path"),mjt.forEach(t),XEr=r(ML,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZMe=n(ML,"CODE",{});var gjt=s(ZMe);zEr=r(gjt,"pretrained_model_name_or_path"),gjt.forEach(t),WEr=r(ML,":"),ML.forEach(t),QEr=i(Da),eEe=n(Da,"UL",{});var hjt=s(eEe);fE=n(hjt,"LI",{});var COe=s(fE);oEe=n(COe,"STRONG",{});var pjt=s(oEe);UEr=r(pjt,"detr"),pjt.forEach(t),HEr=r(COe," \u2014 "),EY=n(COe,"A",{href:!0});var _jt=s(EY);JEr=r(_jt,"DetrForSegmentation"),_jt.forEach(t),YEr=r(COe," (DETR model)"),COe.forEach(t),hjt.forEach(t),KEr=i(Da),mE=n(Da,"P",{});var wOe=s(mE);ZEr=r(wOe,"The model is set in evaluation mode by default using "),rEe=n(wOe,"CODE",{});var ujt=s(rEe);e4r=r(ujt,"model.eval()"),ujt.forEach(t),o4r=r(wOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tEe=n(wOe,"CODE",{});var bjt=s(tEe);r4r=r(bjt,"model.train()"),bjt.forEach(t),wOe.forEach(t),t4r=i(Da),T(gE.$$.fragment,Da),Da.forEach(t),Xl.forEach(t),DHe=i(f),Ac=n(f,"H2",{class:!0});var oKe=s(Ac);hE=n(oKe,"A",{id:!0,class:!0,href:!0});var vjt=s(hE);aEe=n(vjt,"SPAN",{});var Fjt=s(aEe);T(b$.$$.fragment,Fjt),Fjt.forEach(t),vjt.forEach(t),a4r=i(oKe),nEe=n(oKe,"SPAN",{});var Tjt=s(nEe);n4r=r(Tjt,"AutoModelForSemanticSegmentation"),Tjt.forEach(t),oKe.forEach(t),GHe=i(f),ar=n(f,"DIV",{class:!0});var zl=s(ar);T(v$.$$.fragment,zl),s4r=i(zl),Lc=n(zl,"P",{});var lse=s(Lc);l4r=r(lse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),CY=n(lse,"A",{href:!0});var Mjt=s(CY);i4r=r(Mjt,"from_pretrained()"),Mjt.forEach(t),d4r=r(lse," class method or the "),wY=n(lse,"A",{href:!0});var Ejt=s(wY);c4r=r(Ejt,"from_config()"),Ejt.forEach(t),f4r=r(lse,` class
method.`),lse.forEach(t),m4r=i(zl),F$=n(zl,"P",{});var rKe=s(F$);g4r=r(rKe,"This class cannot be instantiated directly using "),sEe=n(rKe,"CODE",{});var Cjt=s(sEe);h4r=r(Cjt,"__init__()"),Cjt.forEach(t),p4r=r(rKe," (throws an error)."),rKe.forEach(t),_4r=i(zl),jt=n(zl,"DIV",{class:!0});var EL=s(jt);T(T$.$$.fragment,EL),u4r=i(EL),lEe=n(EL,"P",{});var wjt=s(lEe);b4r=r(wjt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),wjt.forEach(t),v4r=i(EL),yc=n(EL,"P",{});var ise=s(yc);F4r=r(ise,`Note:
Loading a model from its configuration file does `),iEe=n(ise,"STRONG",{});var Ajt=s(iEe);T4r=r(Ajt,"not"),Ajt.forEach(t),M4r=r(ise,` load the model weights. It only affects the
model\u2019s configuration. Use `),AY=n(ise,"A",{href:!0});var Ljt=s(AY);E4r=r(Ljt,"from_pretrained()"),Ljt.forEach(t),C4r=r(ise," to load the model weights."),ise.forEach(t),w4r=i(EL),T(pE.$$.fragment,EL),EL.forEach(t),A4r=i(zl),Mo=n(zl,"DIV",{class:!0});var Ga=s(Mo);T(M$.$$.fragment,Ga),L4r=i(Ga),dEe=n(Ga,"P",{});var yjt=s(dEe);y4r=r(yjt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),yjt.forEach(t),x4r=i(Ga),vn=n(Ga,"P",{});var CL=s(vn);$4r=r(CL,"The model class to instantiate is selected based on the "),cEe=n(CL,"CODE",{});var xjt=s(cEe);k4r=r(xjt,"model_type"),xjt.forEach(t),S4r=r(CL,` property of the config object (either
passed as an argument or loaded from `),fEe=n(CL,"CODE",{});var $jt=s(fEe);R4r=r($jt,"pretrained_model_name_or_path"),$jt.forEach(t),P4r=r(CL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mEe=n(CL,"CODE",{});var kjt=s(mEe);B4r=r(kjt,"pretrained_model_name_or_path"),kjt.forEach(t),I4r=r(CL,":"),CL.forEach(t),N4r=i(Ga),ct=n(Ga,"UL",{});var Wl=s(ct);_E=n(Wl,"LI",{});var AOe=s(_E);gEe=n(AOe,"STRONG",{});var Sjt=s(gEe);q4r=r(Sjt,"beit"),Sjt.forEach(t),j4r=r(AOe," \u2014 "),LY=n(AOe,"A",{href:!0});var Rjt=s(LY);D4r=r(Rjt,"BeitForSemanticSegmentation"),Rjt.forEach(t),G4r=r(AOe," (BEiT model)"),AOe.forEach(t),O4r=i(Wl),uE=n(Wl,"LI",{});var LOe=s(uE);hEe=n(LOe,"STRONG",{});var Pjt=s(hEe);V4r=r(Pjt,"data2vec-vision"),Pjt.forEach(t),X4r=r(LOe," \u2014 "),yY=n(LOe,"A",{href:!0});var Bjt=s(yY);z4r=r(Bjt,"Data2VecVisionForSemanticSegmentation"),Bjt.forEach(t),W4r=r(LOe," (Data2VecVision model)"),LOe.forEach(t),Q4r=i(Wl),bE=n(Wl,"LI",{});var yOe=s(bE);pEe=n(yOe,"STRONG",{});var Ijt=s(pEe);U4r=r(Ijt,"dpt"),Ijt.forEach(t),H4r=r(yOe," \u2014 "),xY=n(yOe,"A",{href:!0});var Njt=s(xY);J4r=r(Njt,"DPTForSemanticSegmentation"),Njt.forEach(t),Y4r=r(yOe," (DPT model)"),yOe.forEach(t),K4r=i(Wl),vE=n(Wl,"LI",{});var xOe=s(vE);_Ee=n(xOe,"STRONG",{});var qjt=s(_Ee);Z4r=r(qjt,"mobilevit"),qjt.forEach(t),eCr=r(xOe," \u2014 "),$Y=n(xOe,"A",{href:!0});var jjt=s($Y);oCr=r(jjt,"MobileViTForSemanticSegmentation"),jjt.forEach(t),rCr=r(xOe," (MobileViT model)"),xOe.forEach(t),tCr=i(Wl),FE=n(Wl,"LI",{});var $Oe=s(FE);uEe=n($Oe,"STRONG",{});var Djt=s(uEe);aCr=r(Djt,"segformer"),Djt.forEach(t),nCr=r($Oe," \u2014 "),kY=n($Oe,"A",{href:!0});var Gjt=s(kY);sCr=r(Gjt,"SegformerForSemanticSegmentation"),Gjt.forEach(t),lCr=r($Oe," (SegFormer model)"),$Oe.forEach(t),Wl.forEach(t),iCr=i(Ga),TE=n(Ga,"P",{});var kOe=s(TE);dCr=r(kOe,"The model is set in evaluation mode by default using "),bEe=n(kOe,"CODE",{});var Ojt=s(bEe);cCr=r(Ojt,"model.eval()"),Ojt.forEach(t),fCr=r(kOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vEe=n(kOe,"CODE",{});var Vjt=s(vEe);mCr=r(Vjt,"model.train()"),Vjt.forEach(t),kOe.forEach(t),gCr=i(Ga),T(ME.$$.fragment,Ga),Ga.forEach(t),zl.forEach(t),OHe=i(f),xc=n(f,"H2",{class:!0});var tKe=s(xc);EE=n(tKe,"A",{id:!0,class:!0,href:!0});var Xjt=s(EE);FEe=n(Xjt,"SPAN",{});var zjt=s(FEe);T(E$.$$.fragment,zjt),zjt.forEach(t),Xjt.forEach(t),hCr=i(tKe),TEe=n(tKe,"SPAN",{});var Wjt=s(TEe);pCr=r(Wjt,"AutoModelForInstanceSegmentation"),Wjt.forEach(t),tKe.forEach(t),VHe=i(f),nr=n(f,"DIV",{class:!0});var Ql=s(nr);T(C$.$$.fragment,Ql),_Cr=i(Ql),$c=n(Ql,"P",{});var dse=s($c);uCr=r(dse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),SY=n(dse,"A",{href:!0});var Qjt=s(SY);bCr=r(Qjt,"from_pretrained()"),Qjt.forEach(t),vCr=r(dse," class method or the "),RY=n(dse,"A",{href:!0});var Ujt=s(RY);FCr=r(Ujt,"from_config()"),Ujt.forEach(t),TCr=r(dse,` class
method.`),dse.forEach(t),MCr=i(Ql),w$=n(Ql,"P",{});var aKe=s(w$);ECr=r(aKe,"This class cannot be instantiated directly using "),MEe=n(aKe,"CODE",{});var Hjt=s(MEe);CCr=r(Hjt,"__init__()"),Hjt.forEach(t),wCr=r(aKe," (throws an error)."),aKe.forEach(t),ACr=i(Ql),Dt=n(Ql,"DIV",{class:!0});var wL=s(Dt);T(A$.$$.fragment,wL),LCr=i(wL),EEe=n(wL,"P",{});var Jjt=s(EEe);yCr=r(Jjt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Jjt.forEach(t),xCr=i(wL),kc=n(wL,"P",{});var cse=s(kc);$Cr=r(cse,`Note:
Loading a model from its configuration file does `),CEe=n(cse,"STRONG",{});var Yjt=s(CEe);kCr=r(Yjt,"not"),Yjt.forEach(t),SCr=r(cse,` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=n(cse,"A",{href:!0});var Kjt=s(PY);RCr=r(Kjt,"from_pretrained()"),Kjt.forEach(t),PCr=r(cse," to load the model weights."),cse.forEach(t),BCr=i(wL),T(CE.$$.fragment,wL),wL.forEach(t),ICr=i(Ql),Eo=n(Ql,"DIV",{class:!0});var Oa=s(Eo);T(L$.$$.fragment,Oa),NCr=i(Oa),wEe=n(Oa,"P",{});var Zjt=s(wEe);qCr=r(Zjt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Zjt.forEach(t),jCr=i(Oa),Fn=n(Oa,"P",{});var AL=s(Fn);DCr=r(AL,"The model class to instantiate is selected based on the "),AEe=n(AL,"CODE",{});var eDt=s(AEe);GCr=r(eDt,"model_type"),eDt.forEach(t),OCr=r(AL,` property of the config object (either
passed as an argument or loaded from `),LEe=n(AL,"CODE",{});var oDt=s(LEe);VCr=r(oDt,"pretrained_model_name_or_path"),oDt.forEach(t),XCr=r(AL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yEe=n(AL,"CODE",{});var rDt=s(yEe);zCr=r(rDt,"pretrained_model_name_or_path"),rDt.forEach(t),WCr=r(AL,":"),AL.forEach(t),QCr=i(Oa),xEe=n(Oa,"UL",{});var tDt=s(xEe);wE=n(tDt,"LI",{});var SOe=s(wE);$Ee=n(SOe,"STRONG",{});var aDt=s($Ee);UCr=r(aDt,"maskformer"),aDt.forEach(t),HCr=r(SOe," \u2014 "),BY=n(SOe,"A",{href:!0});var nDt=s(BY);JCr=r(nDt,"MaskFormerForInstanceSegmentation"),nDt.forEach(t),YCr=r(SOe," (MaskFormer model)"),SOe.forEach(t),tDt.forEach(t),KCr=i(Oa),AE=n(Oa,"P",{});var ROe=s(AE);ZCr=r(ROe,"The model is set in evaluation mode by default using "),kEe=n(ROe,"CODE",{});var sDt=s(kEe);e3r=r(sDt,"model.eval()"),sDt.forEach(t),o3r=r(ROe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SEe=n(ROe,"CODE",{});var lDt=s(SEe);r3r=r(lDt,"model.train()"),lDt.forEach(t),ROe.forEach(t),t3r=i(Oa),T(LE.$$.fragment,Oa),Oa.forEach(t),Ql.forEach(t),XHe=i(f),Sc=n(f,"H2",{class:!0});var nKe=s(Sc);yE=n(nKe,"A",{id:!0,class:!0,href:!0});var iDt=s(yE);REe=n(iDt,"SPAN",{});var dDt=s(REe);T(y$.$$.fragment,dDt),dDt.forEach(t),iDt.forEach(t),a3r=i(nKe),PEe=n(nKe,"SPAN",{});var cDt=s(PEe);n3r=r(cDt,"TFAutoModel"),cDt.forEach(t),nKe.forEach(t),zHe=i(f),sr=n(f,"DIV",{class:!0});var Ul=s(sr);T(x$.$$.fragment,Ul),s3r=i(Ul),Rc=n(Ul,"P",{});var fse=s(Rc);l3r=r(fse,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),IY=n(fse,"A",{href:!0});var fDt=s(IY);i3r=r(fDt,"from_pretrained()"),fDt.forEach(t),d3r=r(fse," class method or the "),NY=n(fse,"A",{href:!0});var mDt=s(NY);c3r=r(mDt,"from_config()"),mDt.forEach(t),f3r=r(fse,` class
method.`),fse.forEach(t),m3r=i(Ul),$$=n(Ul,"P",{});var sKe=s($$);g3r=r(sKe,"This class cannot be instantiated directly using "),BEe=n(sKe,"CODE",{});var gDt=s(BEe);h3r=r(gDt,"__init__()"),gDt.forEach(t),p3r=r(sKe," (throws an error)."),sKe.forEach(t),_3r=i(Ul),Gt=n(Ul,"DIV",{class:!0});var LL=s(Gt);T(k$.$$.fragment,LL),u3r=i(LL),IEe=n(LL,"P",{});var hDt=s(IEe);b3r=r(hDt,"Instantiates one of the base model classes of the library from a configuration."),hDt.forEach(t),v3r=i(LL),Pc=n(LL,"P",{});var mse=s(Pc);F3r=r(mse,`Note:
Loading a model from its configuration file does `),NEe=n(mse,"STRONG",{});var pDt=s(NEe);T3r=r(pDt,"not"),pDt.forEach(t),M3r=r(mse,` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=n(mse,"A",{href:!0});var _Dt=s(qY);E3r=r(_Dt,"from_pretrained()"),_Dt.forEach(t),C3r=r(mse," to load the model weights."),mse.forEach(t),w3r=i(LL),T(xE.$$.fragment,LL),LL.forEach(t),A3r=i(Ul),Br=n(Ul,"DIV",{class:!0});var Hl=s(Br);T(S$.$$.fragment,Hl),L3r=i(Hl),qEe=n(Hl,"P",{});var uDt=s(qEe);y3r=r(uDt,"Instantiate one of the base model classes of the library from a pretrained model."),uDt.forEach(t),x3r=i(Hl),Tn=n(Hl,"P",{});var yL=s(Tn);$3r=r(yL,"The model class to instantiate is selected based on the "),jEe=n(yL,"CODE",{});var bDt=s(jEe);k3r=r(bDt,"model_type"),bDt.forEach(t),S3r=r(yL,` property of the config object (either
passed as an argument or loaded from `),DEe=n(yL,"CODE",{});var vDt=s(DEe);R3r=r(vDt,"pretrained_model_name_or_path"),vDt.forEach(t),P3r=r(yL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=n(yL,"CODE",{});var FDt=s(GEe);B3r=r(FDt,"pretrained_model_name_or_path"),FDt.forEach(t),I3r=r(yL,":"),yL.forEach(t),N3r=i(Hl),q=n(Hl,"UL",{});var D=s(q);$E=n(D,"LI",{});var POe=s($E);OEe=n(POe,"STRONG",{});var TDt=s(OEe);q3r=r(TDt,"albert"),TDt.forEach(t),j3r=r(POe," \u2014 "),jY=n(POe,"A",{href:!0});var MDt=s(jY);D3r=r(MDt,"TFAlbertModel"),MDt.forEach(t),G3r=r(POe," (ALBERT model)"),POe.forEach(t),O3r=i(D),kE=n(D,"LI",{});var BOe=s(kE);VEe=n(BOe,"STRONG",{});var EDt=s(VEe);V3r=r(EDt,"bart"),EDt.forEach(t),X3r=r(BOe," \u2014 "),DY=n(BOe,"A",{href:!0});var CDt=s(DY);z3r=r(CDt,"TFBartModel"),CDt.forEach(t),W3r=r(BOe," (BART model)"),BOe.forEach(t),Q3r=i(D),SE=n(D,"LI",{});var IOe=s(SE);XEe=n(IOe,"STRONG",{});var wDt=s(XEe);U3r=r(wDt,"bert"),wDt.forEach(t),H3r=r(IOe," \u2014 "),GY=n(IOe,"A",{href:!0});var ADt=s(GY);J3r=r(ADt,"TFBertModel"),ADt.forEach(t),Y3r=r(IOe," (BERT model)"),IOe.forEach(t),K3r=i(D),RE=n(D,"LI",{});var NOe=s(RE);zEe=n(NOe,"STRONG",{});var LDt=s(zEe);Z3r=r(LDt,"blenderbot"),LDt.forEach(t),e5r=r(NOe," \u2014 "),OY=n(NOe,"A",{href:!0});var yDt=s(OY);o5r=r(yDt,"TFBlenderbotModel"),yDt.forEach(t),r5r=r(NOe," (Blenderbot model)"),NOe.forEach(t),t5r=i(D),PE=n(D,"LI",{});var qOe=s(PE);WEe=n(qOe,"STRONG",{});var xDt=s(WEe);a5r=r(xDt,"blenderbot-small"),xDt.forEach(t),n5r=r(qOe," \u2014 "),VY=n(qOe,"A",{href:!0});var $Dt=s(VY);s5r=r($Dt,"TFBlenderbotSmallModel"),$Dt.forEach(t),l5r=r(qOe," (BlenderbotSmall model)"),qOe.forEach(t),i5r=i(D),BE=n(D,"LI",{});var jOe=s(BE);QEe=n(jOe,"STRONG",{});var kDt=s(QEe);d5r=r(kDt,"camembert"),kDt.forEach(t),c5r=r(jOe," \u2014 "),XY=n(jOe,"A",{href:!0});var SDt=s(XY);f5r=r(SDt,"TFCamembertModel"),SDt.forEach(t),m5r=r(jOe," (CamemBERT model)"),jOe.forEach(t),g5r=i(D),IE=n(D,"LI",{});var DOe=s(IE);UEe=n(DOe,"STRONG",{});var RDt=s(UEe);h5r=r(RDt,"clip"),RDt.forEach(t),p5r=r(DOe," \u2014 "),zY=n(DOe,"A",{href:!0});var PDt=s(zY);_5r=r(PDt,"TFCLIPModel"),PDt.forEach(t),u5r=r(DOe," (CLIP model)"),DOe.forEach(t),b5r=i(D),NE=n(D,"LI",{});var GOe=s(NE);HEe=n(GOe,"STRONG",{});var BDt=s(HEe);v5r=r(BDt,"convbert"),BDt.forEach(t),F5r=r(GOe," \u2014 "),WY=n(GOe,"A",{href:!0});var IDt=s(WY);T5r=r(IDt,"TFConvBertModel"),IDt.forEach(t),M5r=r(GOe," (ConvBERT model)"),GOe.forEach(t),E5r=i(D),qE=n(D,"LI",{});var OOe=s(qE);JEe=n(OOe,"STRONG",{});var NDt=s(JEe);C5r=r(NDt,"convnext"),NDt.forEach(t),w5r=r(OOe," \u2014 "),QY=n(OOe,"A",{href:!0});var qDt=s(QY);A5r=r(qDt,"TFConvNextModel"),qDt.forEach(t),L5r=r(OOe," (ConvNeXT model)"),OOe.forEach(t),y5r=i(D),jE=n(D,"LI",{});var VOe=s(jE);YEe=n(VOe,"STRONG",{});var jDt=s(YEe);x5r=r(jDt,"ctrl"),jDt.forEach(t),$5r=r(VOe," \u2014 "),UY=n(VOe,"A",{href:!0});var DDt=s(UY);k5r=r(DDt,"TFCTRLModel"),DDt.forEach(t),S5r=r(VOe," (CTRL model)"),VOe.forEach(t),R5r=i(D),DE=n(D,"LI",{});var XOe=s(DE);KEe=n(XOe,"STRONG",{});var GDt=s(KEe);P5r=r(GDt,"data2vec-vision"),GDt.forEach(t),B5r=r(XOe," \u2014 "),HY=n(XOe,"A",{href:!0});var ODt=s(HY);I5r=r(ODt,"TFData2VecVisionModel"),ODt.forEach(t),N5r=r(XOe," (Data2VecVision model)"),XOe.forEach(t),q5r=i(D),GE=n(D,"LI",{});var zOe=s(GE);ZEe=n(zOe,"STRONG",{});var VDt=s(ZEe);j5r=r(VDt,"deberta"),VDt.forEach(t),D5r=r(zOe," \u2014 "),JY=n(zOe,"A",{href:!0});var XDt=s(JY);G5r=r(XDt,"TFDebertaModel"),XDt.forEach(t),O5r=r(zOe," (DeBERTa model)"),zOe.forEach(t),V5r=i(D),OE=n(D,"LI",{});var WOe=s(OE);e4e=n(WOe,"STRONG",{});var zDt=s(e4e);X5r=r(zDt,"deberta-v2"),zDt.forEach(t),z5r=r(WOe," \u2014 "),YY=n(WOe,"A",{href:!0});var WDt=s(YY);W5r=r(WDt,"TFDebertaV2Model"),WDt.forEach(t),Q5r=r(WOe," (DeBERTa-v2 model)"),WOe.forEach(t),U5r=i(D),VE=n(D,"LI",{});var QOe=s(VE);o4e=n(QOe,"STRONG",{});var QDt=s(o4e);H5r=r(QDt,"deit"),QDt.forEach(t),J5r=r(QOe," \u2014 "),KY=n(QOe,"A",{href:!0});var UDt=s(KY);Y5r=r(UDt,"TFDeiTModel"),UDt.forEach(t),K5r=r(QOe," (DeiT model)"),QOe.forEach(t),Z5r=i(D),XE=n(D,"LI",{});var UOe=s(XE);r4e=n(UOe,"STRONG",{});var HDt=s(r4e);e0r=r(HDt,"distilbert"),HDt.forEach(t),o0r=r(UOe," \u2014 "),ZY=n(UOe,"A",{href:!0});var JDt=s(ZY);r0r=r(JDt,"TFDistilBertModel"),JDt.forEach(t),t0r=r(UOe," (DistilBERT model)"),UOe.forEach(t),a0r=i(D),zE=n(D,"LI",{});var HOe=s(zE);t4e=n(HOe,"STRONG",{});var YDt=s(t4e);n0r=r(YDt,"dpr"),YDt.forEach(t),s0r=r(HOe," \u2014 "),eK=n(HOe,"A",{href:!0});var KDt=s(eK);l0r=r(KDt,"TFDPRQuestionEncoder"),KDt.forEach(t),i0r=r(HOe," (DPR model)"),HOe.forEach(t),d0r=i(D),WE=n(D,"LI",{});var JOe=s(WE);a4e=n(JOe,"STRONG",{});var ZDt=s(a4e);c0r=r(ZDt,"electra"),ZDt.forEach(t),f0r=r(JOe," \u2014 "),oK=n(JOe,"A",{href:!0});var eGt=s(oK);m0r=r(eGt,"TFElectraModel"),eGt.forEach(t),g0r=r(JOe," (ELECTRA model)"),JOe.forEach(t),h0r=i(D),QE=n(D,"LI",{});var YOe=s(QE);n4e=n(YOe,"STRONG",{});var oGt=s(n4e);p0r=r(oGt,"flaubert"),oGt.forEach(t),_0r=r(YOe," \u2014 "),rK=n(YOe,"A",{href:!0});var rGt=s(rK);u0r=r(rGt,"TFFlaubertModel"),rGt.forEach(t),b0r=r(YOe," (FlauBERT model)"),YOe.forEach(t),v0r=i(D),gl=n(D,"LI",{});var wP=s(gl);s4e=n(wP,"STRONG",{});var tGt=s(s4e);F0r=r(tGt,"funnel"),tGt.forEach(t),T0r=r(wP," \u2014 "),tK=n(wP,"A",{href:!0});var aGt=s(tK);M0r=r(aGt,"TFFunnelModel"),aGt.forEach(t),E0r=r(wP," or "),aK=n(wP,"A",{href:!0});var nGt=s(aK);C0r=r(nGt,"TFFunnelBaseModel"),nGt.forEach(t),w0r=r(wP," (Funnel Transformer model)"),wP.forEach(t),A0r=i(D),UE=n(D,"LI",{});var KOe=s(UE);l4e=n(KOe,"STRONG",{});var sGt=s(l4e);L0r=r(sGt,"gpt2"),sGt.forEach(t),y0r=r(KOe," \u2014 "),nK=n(KOe,"A",{href:!0});var lGt=s(nK);x0r=r(lGt,"TFGPT2Model"),lGt.forEach(t),$0r=r(KOe," (OpenAI GPT-2 model)"),KOe.forEach(t),k0r=i(D),HE=n(D,"LI",{});var ZOe=s(HE);i4e=n(ZOe,"STRONG",{});var iGt=s(i4e);S0r=r(iGt,"gptj"),iGt.forEach(t),R0r=r(ZOe," \u2014 "),sK=n(ZOe,"A",{href:!0});var dGt=s(sK);P0r=r(dGt,"TFGPTJModel"),dGt.forEach(t),B0r=r(ZOe," (GPT-J model)"),ZOe.forEach(t),I0r=i(D),JE=n(D,"LI",{});var eVe=s(JE);d4e=n(eVe,"STRONG",{});var cGt=s(d4e);N0r=r(cGt,"hubert"),cGt.forEach(t),q0r=r(eVe," \u2014 "),lK=n(eVe,"A",{href:!0});var fGt=s(lK);j0r=r(fGt,"TFHubertModel"),fGt.forEach(t),D0r=r(eVe," (Hubert model)"),eVe.forEach(t),G0r=i(D),YE=n(D,"LI",{});var oVe=s(YE);c4e=n(oVe,"STRONG",{});var mGt=s(c4e);O0r=r(mGt,"layoutlm"),mGt.forEach(t),V0r=r(oVe," \u2014 "),iK=n(oVe,"A",{href:!0});var gGt=s(iK);X0r=r(gGt,"TFLayoutLMModel"),gGt.forEach(t),z0r=r(oVe," (LayoutLM model)"),oVe.forEach(t),W0r=i(D),KE=n(D,"LI",{});var rVe=s(KE);f4e=n(rVe,"STRONG",{});var hGt=s(f4e);Q0r=r(hGt,"led"),hGt.forEach(t),U0r=r(rVe," \u2014 "),dK=n(rVe,"A",{href:!0});var pGt=s(dK);H0r=r(pGt,"TFLEDModel"),pGt.forEach(t),J0r=r(rVe," (LED model)"),rVe.forEach(t),Y0r=i(D),ZE=n(D,"LI",{});var tVe=s(ZE);m4e=n(tVe,"STRONG",{});var _Gt=s(m4e);K0r=r(_Gt,"longformer"),_Gt.forEach(t),Z0r=r(tVe," \u2014 "),cK=n(tVe,"A",{href:!0});var uGt=s(cK);ewr=r(uGt,"TFLongformerModel"),uGt.forEach(t),owr=r(tVe," (Longformer model)"),tVe.forEach(t),rwr=i(D),e4=n(D,"LI",{});var aVe=s(e4);g4e=n(aVe,"STRONG",{});var bGt=s(g4e);twr=r(bGt,"lxmert"),bGt.forEach(t),awr=r(aVe," \u2014 "),fK=n(aVe,"A",{href:!0});var vGt=s(fK);nwr=r(vGt,"TFLxmertModel"),vGt.forEach(t),swr=r(aVe," (LXMERT model)"),aVe.forEach(t),lwr=i(D),o4=n(D,"LI",{});var nVe=s(o4);h4e=n(nVe,"STRONG",{});var FGt=s(h4e);iwr=r(FGt,"marian"),FGt.forEach(t),dwr=r(nVe," \u2014 "),mK=n(nVe,"A",{href:!0});var TGt=s(mK);cwr=r(TGt,"TFMarianModel"),TGt.forEach(t),fwr=r(nVe," (Marian model)"),nVe.forEach(t),mwr=i(D),r4=n(D,"LI",{});var sVe=s(r4);p4e=n(sVe,"STRONG",{});var MGt=s(p4e);gwr=r(MGt,"mbart"),MGt.forEach(t),hwr=r(sVe," \u2014 "),gK=n(sVe,"A",{href:!0});var EGt=s(gK);pwr=r(EGt,"TFMBartModel"),EGt.forEach(t),_wr=r(sVe," (mBART model)"),sVe.forEach(t),uwr=i(D),t4=n(D,"LI",{});var lVe=s(t4);_4e=n(lVe,"STRONG",{});var CGt=s(_4e);bwr=r(CGt,"mobilebert"),CGt.forEach(t),vwr=r(lVe," \u2014 "),hK=n(lVe,"A",{href:!0});var wGt=s(hK);Fwr=r(wGt,"TFMobileBertModel"),wGt.forEach(t),Twr=r(lVe," (MobileBERT model)"),lVe.forEach(t),Mwr=i(D),a4=n(D,"LI",{});var iVe=s(a4);u4e=n(iVe,"STRONG",{});var AGt=s(u4e);Ewr=r(AGt,"mpnet"),AGt.forEach(t),Cwr=r(iVe," \u2014 "),pK=n(iVe,"A",{href:!0});var LGt=s(pK);wwr=r(LGt,"TFMPNetModel"),LGt.forEach(t),Awr=r(iVe," (MPNet model)"),iVe.forEach(t),Lwr=i(D),n4=n(D,"LI",{});var dVe=s(n4);b4e=n(dVe,"STRONG",{});var yGt=s(b4e);ywr=r(yGt,"mt5"),yGt.forEach(t),xwr=r(dVe," \u2014 "),_K=n(dVe,"A",{href:!0});var xGt=s(_K);$wr=r(xGt,"TFMT5Model"),xGt.forEach(t),kwr=r(dVe," (MT5 model)"),dVe.forEach(t),Swr=i(D),s4=n(D,"LI",{});var cVe=s(s4);v4e=n(cVe,"STRONG",{});var $Gt=s(v4e);Rwr=r($Gt,"openai-gpt"),$Gt.forEach(t),Pwr=r(cVe," \u2014 "),uK=n(cVe,"A",{href:!0});var kGt=s(uK);Bwr=r(kGt,"TFOpenAIGPTModel"),kGt.forEach(t),Iwr=r(cVe," (OpenAI GPT model)"),cVe.forEach(t),Nwr=i(D),l4=n(D,"LI",{});var fVe=s(l4);F4e=n(fVe,"STRONG",{});var SGt=s(F4e);qwr=r(SGt,"opt"),SGt.forEach(t),jwr=r(fVe," \u2014 "),bK=n(fVe,"A",{href:!0});var RGt=s(bK);Dwr=r(RGt,"TFOPTModel"),RGt.forEach(t),Gwr=r(fVe," (OPT model)"),fVe.forEach(t),Owr=i(D),i4=n(D,"LI",{});var mVe=s(i4);T4e=n(mVe,"STRONG",{});var PGt=s(T4e);Vwr=r(PGt,"pegasus"),PGt.forEach(t),Xwr=r(mVe," \u2014 "),vK=n(mVe,"A",{href:!0});var BGt=s(vK);zwr=r(BGt,"TFPegasusModel"),BGt.forEach(t),Wwr=r(mVe," (Pegasus model)"),mVe.forEach(t),Qwr=i(D),d4=n(D,"LI",{});var gVe=s(d4);M4e=n(gVe,"STRONG",{});var IGt=s(M4e);Uwr=r(IGt,"regnet"),IGt.forEach(t),Hwr=r(gVe," \u2014 "),FK=n(gVe,"A",{href:!0});var NGt=s(FK);Jwr=r(NGt,"TFRegNetModel"),NGt.forEach(t),Ywr=r(gVe," (RegNet model)"),gVe.forEach(t),Kwr=i(D),c4=n(D,"LI",{});var hVe=s(c4);E4e=n(hVe,"STRONG",{});var qGt=s(E4e);Zwr=r(qGt,"rembert"),qGt.forEach(t),eAr=r(hVe," \u2014 "),TK=n(hVe,"A",{href:!0});var jGt=s(TK);oAr=r(jGt,"TFRemBertModel"),jGt.forEach(t),rAr=r(hVe," (RemBERT model)"),hVe.forEach(t),tAr=i(D),f4=n(D,"LI",{});var pVe=s(f4);C4e=n(pVe,"STRONG",{});var DGt=s(C4e);aAr=r(DGt,"resnet"),DGt.forEach(t),nAr=r(pVe," \u2014 "),MK=n(pVe,"A",{href:!0});var GGt=s(MK);sAr=r(GGt,"TFResNetModel"),GGt.forEach(t),lAr=r(pVe," (ResNet model)"),pVe.forEach(t),iAr=i(D),m4=n(D,"LI",{});var _Ve=s(m4);w4e=n(_Ve,"STRONG",{});var OGt=s(w4e);dAr=r(OGt,"roberta"),OGt.forEach(t),cAr=r(_Ve," \u2014 "),EK=n(_Ve,"A",{href:!0});var VGt=s(EK);fAr=r(VGt,"TFRobertaModel"),VGt.forEach(t),mAr=r(_Ve," (RoBERTa model)"),_Ve.forEach(t),gAr=i(D),g4=n(D,"LI",{});var uVe=s(g4);A4e=n(uVe,"STRONG",{});var XGt=s(A4e);hAr=r(XGt,"roformer"),XGt.forEach(t),pAr=r(uVe," \u2014 "),CK=n(uVe,"A",{href:!0});var zGt=s(CK);_Ar=r(zGt,"TFRoFormerModel"),zGt.forEach(t),uAr=r(uVe," (RoFormer model)"),uVe.forEach(t),bAr=i(D),h4=n(D,"LI",{});var bVe=s(h4);L4e=n(bVe,"STRONG",{});var WGt=s(L4e);vAr=r(WGt,"segformer"),WGt.forEach(t),FAr=r(bVe," \u2014 "),wK=n(bVe,"A",{href:!0});var QGt=s(wK);TAr=r(QGt,"TFSegformerModel"),QGt.forEach(t),MAr=r(bVe," (SegFormer model)"),bVe.forEach(t),EAr=i(D),p4=n(D,"LI",{});var vVe=s(p4);y4e=n(vVe,"STRONG",{});var UGt=s(y4e);CAr=r(UGt,"speech_to_text"),UGt.forEach(t),wAr=r(vVe," \u2014 "),AK=n(vVe,"A",{href:!0});var HGt=s(AK);AAr=r(HGt,"TFSpeech2TextModel"),HGt.forEach(t),LAr=r(vVe," (Speech2Text model)"),vVe.forEach(t),yAr=i(D),_4=n(D,"LI",{});var FVe=s(_4);x4e=n(FVe,"STRONG",{});var JGt=s(x4e);xAr=r(JGt,"swin"),JGt.forEach(t),$Ar=r(FVe," \u2014 "),LK=n(FVe,"A",{href:!0});var YGt=s(LK);kAr=r(YGt,"TFSwinModel"),YGt.forEach(t),SAr=r(FVe," (Swin Transformer model)"),FVe.forEach(t),RAr=i(D),u4=n(D,"LI",{});var TVe=s(u4);$4e=n(TVe,"STRONG",{});var KGt=s($4e);PAr=r(KGt,"t5"),KGt.forEach(t),BAr=r(TVe," \u2014 "),yK=n(TVe,"A",{href:!0});var ZGt=s(yK);IAr=r(ZGt,"TFT5Model"),ZGt.forEach(t),NAr=r(TVe," (T5 model)"),TVe.forEach(t),qAr=i(D),b4=n(D,"LI",{});var MVe=s(b4);k4e=n(MVe,"STRONG",{});var eOt=s(k4e);jAr=r(eOt,"tapas"),eOt.forEach(t),DAr=r(MVe," \u2014 "),xK=n(MVe,"A",{href:!0});var oOt=s(xK);GAr=r(oOt,"TFTapasModel"),oOt.forEach(t),OAr=r(MVe," (TAPAS model)"),MVe.forEach(t),VAr=i(D),v4=n(D,"LI",{});var EVe=s(v4);S4e=n(EVe,"STRONG",{});var rOt=s(S4e);XAr=r(rOt,"transfo-xl"),rOt.forEach(t),zAr=r(EVe," \u2014 "),$K=n(EVe,"A",{href:!0});var tOt=s($K);WAr=r(tOt,"TFTransfoXLModel"),tOt.forEach(t),QAr=r(EVe," (Transformer-XL model)"),EVe.forEach(t),UAr=i(D),F4=n(D,"LI",{});var CVe=s(F4);R4e=n(CVe,"STRONG",{});var aOt=s(R4e);HAr=r(aOt,"vit"),aOt.forEach(t),JAr=r(CVe," \u2014 "),kK=n(CVe,"A",{href:!0});var nOt=s(kK);YAr=r(nOt,"TFViTModel"),nOt.forEach(t),KAr=r(CVe," (ViT model)"),CVe.forEach(t),ZAr=i(D),T4=n(D,"LI",{});var wVe=s(T4);P4e=n(wVe,"STRONG",{});var sOt=s(P4e);e7r=r(sOt,"vit_mae"),sOt.forEach(t),o7r=r(wVe," \u2014 "),SK=n(wVe,"A",{href:!0});var lOt=s(SK);r7r=r(lOt,"TFViTMAEModel"),lOt.forEach(t),t7r=r(wVe," (ViTMAE model)"),wVe.forEach(t),a7r=i(D),M4=n(D,"LI",{});var AVe=s(M4);B4e=n(AVe,"STRONG",{});var iOt=s(B4e);n7r=r(iOt,"wav2vec2"),iOt.forEach(t),s7r=r(AVe," \u2014 "),RK=n(AVe,"A",{href:!0});var dOt=s(RK);l7r=r(dOt,"TFWav2Vec2Model"),dOt.forEach(t),i7r=r(AVe," (Wav2Vec2 model)"),AVe.forEach(t),d7r=i(D),E4=n(D,"LI",{});var LVe=s(E4);I4e=n(LVe,"STRONG",{});var cOt=s(I4e);c7r=r(cOt,"xlm"),cOt.forEach(t),f7r=r(LVe," \u2014 "),PK=n(LVe,"A",{href:!0});var fOt=s(PK);m7r=r(fOt,"TFXLMModel"),fOt.forEach(t),g7r=r(LVe," (XLM model)"),LVe.forEach(t),h7r=i(D),C4=n(D,"LI",{});var yVe=s(C4);N4e=n(yVe,"STRONG",{});var mOt=s(N4e);p7r=r(mOt,"xlm-roberta"),mOt.forEach(t),_7r=r(yVe," \u2014 "),BK=n(yVe,"A",{href:!0});var gOt=s(BK);u7r=r(gOt,"TFXLMRobertaModel"),gOt.forEach(t),b7r=r(yVe," (XLM-RoBERTa model)"),yVe.forEach(t),v7r=i(D),w4=n(D,"LI",{});var xVe=s(w4);q4e=n(xVe,"STRONG",{});var hOt=s(q4e);F7r=r(hOt,"xlnet"),hOt.forEach(t),T7r=r(xVe," \u2014 "),IK=n(xVe,"A",{href:!0});var pOt=s(IK);M7r=r(pOt,"TFXLNetModel"),pOt.forEach(t),E7r=r(xVe," (XLNet model)"),xVe.forEach(t),D.forEach(t),C7r=i(Hl),T(A4.$$.fragment,Hl),Hl.forEach(t),Ul.forEach(t),WHe=i(f),Bc=n(f,"H2",{class:!0});var lKe=s(Bc);L4=n(lKe,"A",{id:!0,class:!0,href:!0});var _Ot=s(L4);j4e=n(_Ot,"SPAN",{});var uOt=s(j4e);T(R$.$$.fragment,uOt),uOt.forEach(t),_Ot.forEach(t),w7r=i(lKe),D4e=n(lKe,"SPAN",{});var bOt=s(D4e);A7r=r(bOt,"TFAutoModelForPreTraining"),bOt.forEach(t),lKe.forEach(t),QHe=i(f),lr=n(f,"DIV",{class:!0});var Jl=s(lr);T(P$.$$.fragment,Jl),L7r=i(Jl),Ic=n(Jl,"P",{});var gse=s(Ic);y7r=r(gse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NK=n(gse,"A",{href:!0});var vOt=s(NK);x7r=r(vOt,"from_pretrained()"),vOt.forEach(t),$7r=r(gse," class method or the "),qK=n(gse,"A",{href:!0});var FOt=s(qK);k7r=r(FOt,"from_config()"),FOt.forEach(t),S7r=r(gse,` class
method.`),gse.forEach(t),R7r=i(Jl),B$=n(Jl,"P",{});var iKe=s(B$);P7r=r(iKe,"This class cannot be instantiated directly using "),G4e=n(iKe,"CODE",{});var TOt=s(G4e);B7r=r(TOt,"__init__()"),TOt.forEach(t),I7r=r(iKe," (throws an error)."),iKe.forEach(t),N7r=i(Jl),Ot=n(Jl,"DIV",{class:!0});var xL=s(Ot);T(I$.$$.fragment,xL),q7r=i(xL),O4e=n(xL,"P",{});var MOt=s(O4e);j7r=r(MOt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),MOt.forEach(t),D7r=i(xL),Nc=n(xL,"P",{});var hse=s(Nc);G7r=r(hse,`Note:
Loading a model from its configuration file does `),V4e=n(hse,"STRONG",{});var EOt=s(V4e);O7r=r(EOt,"not"),EOt.forEach(t),V7r=r(hse,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(hse,"A",{href:!0});var COt=s(jK);X7r=r(COt,"from_pretrained()"),COt.forEach(t),z7r=r(hse," to load the model weights."),hse.forEach(t),W7r=i(xL),T(y4.$$.fragment,xL),xL.forEach(t),Q7r=i(Jl),Ir=n(Jl,"DIV",{class:!0});var Yl=s(Ir);T(N$.$$.fragment,Yl),U7r=i(Yl),X4e=n(Yl,"P",{});var wOt=s(X4e);H7r=r(wOt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wOt.forEach(t),J7r=i(Yl),Mn=n(Yl,"P",{});var $L=s(Mn);Y7r=r($L,"The model class to instantiate is selected based on the "),z4e=n($L,"CODE",{});var AOt=s(z4e);K7r=r(AOt,"model_type"),AOt.forEach(t),Z7r=r($L,` property of the config object (either
passed as an argument or loaded from `),W4e=n($L,"CODE",{});var LOt=s(W4e);eLr=r(LOt,"pretrained_model_name_or_path"),LOt.forEach(t),oLr=r($L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=n($L,"CODE",{});var yOt=s(Q4e);rLr=r(yOt,"pretrained_model_name_or_path"),yOt.forEach(t),tLr=r($L,":"),$L.forEach(t),aLr=i(Yl),se=n(Yl,"UL",{});var le=s(se);x4=n(le,"LI",{});var $Ve=s(x4);U4e=n($Ve,"STRONG",{});var xOt=s(U4e);nLr=r(xOt,"albert"),xOt.forEach(t),sLr=r($Ve," \u2014 "),DK=n($Ve,"A",{href:!0});var $Ot=s(DK);lLr=r($Ot,"TFAlbertForPreTraining"),$Ot.forEach(t),iLr=r($Ve," (ALBERT model)"),$Ve.forEach(t),dLr=i(le),$4=n(le,"LI",{});var kVe=s($4);H4e=n(kVe,"STRONG",{});var kOt=s(H4e);cLr=r(kOt,"bart"),kOt.forEach(t),fLr=r(kVe," \u2014 "),GK=n(kVe,"A",{href:!0});var SOt=s(GK);mLr=r(SOt,"TFBartForConditionalGeneration"),SOt.forEach(t),gLr=r(kVe," (BART model)"),kVe.forEach(t),hLr=i(le),k4=n(le,"LI",{});var SVe=s(k4);J4e=n(SVe,"STRONG",{});var ROt=s(J4e);pLr=r(ROt,"bert"),ROt.forEach(t),_Lr=r(SVe," \u2014 "),OK=n(SVe,"A",{href:!0});var POt=s(OK);uLr=r(POt,"TFBertForPreTraining"),POt.forEach(t),bLr=r(SVe," (BERT model)"),SVe.forEach(t),vLr=i(le),S4=n(le,"LI",{});var RVe=s(S4);Y4e=n(RVe,"STRONG",{});var BOt=s(Y4e);FLr=r(BOt,"camembert"),BOt.forEach(t),TLr=r(RVe," \u2014 "),VK=n(RVe,"A",{href:!0});var IOt=s(VK);MLr=r(IOt,"TFCamembertForMaskedLM"),IOt.forEach(t),ELr=r(RVe," (CamemBERT model)"),RVe.forEach(t),CLr=i(le),R4=n(le,"LI",{});var PVe=s(R4);K4e=n(PVe,"STRONG",{});var NOt=s(K4e);wLr=r(NOt,"ctrl"),NOt.forEach(t),ALr=r(PVe," \u2014 "),XK=n(PVe,"A",{href:!0});var qOt=s(XK);LLr=r(qOt,"TFCTRLLMHeadModel"),qOt.forEach(t),yLr=r(PVe," (CTRL model)"),PVe.forEach(t),xLr=i(le),P4=n(le,"LI",{});var BVe=s(P4);Z4e=n(BVe,"STRONG",{});var jOt=s(Z4e);$Lr=r(jOt,"distilbert"),jOt.forEach(t),kLr=r(BVe," \u2014 "),zK=n(BVe,"A",{href:!0});var DOt=s(zK);SLr=r(DOt,"TFDistilBertForMaskedLM"),DOt.forEach(t),RLr=r(BVe," (DistilBERT model)"),BVe.forEach(t),PLr=i(le),B4=n(le,"LI",{});var IVe=s(B4);eCe=n(IVe,"STRONG",{});var GOt=s(eCe);BLr=r(GOt,"electra"),GOt.forEach(t),ILr=r(IVe," \u2014 "),WK=n(IVe,"A",{href:!0});var OOt=s(WK);NLr=r(OOt,"TFElectraForPreTraining"),OOt.forEach(t),qLr=r(IVe," (ELECTRA model)"),IVe.forEach(t),jLr=i(le),I4=n(le,"LI",{});var NVe=s(I4);oCe=n(NVe,"STRONG",{});var VOt=s(oCe);DLr=r(VOt,"flaubert"),VOt.forEach(t),GLr=r(NVe," \u2014 "),QK=n(NVe,"A",{href:!0});var XOt=s(QK);OLr=r(XOt,"TFFlaubertWithLMHeadModel"),XOt.forEach(t),VLr=r(NVe," (FlauBERT model)"),NVe.forEach(t),XLr=i(le),N4=n(le,"LI",{});var qVe=s(N4);rCe=n(qVe,"STRONG",{});var zOt=s(rCe);zLr=r(zOt,"funnel"),zOt.forEach(t),WLr=r(qVe," \u2014 "),UK=n(qVe,"A",{href:!0});var WOt=s(UK);QLr=r(WOt,"TFFunnelForPreTraining"),WOt.forEach(t),ULr=r(qVe," (Funnel Transformer model)"),qVe.forEach(t),HLr=i(le),q4=n(le,"LI",{});var jVe=s(q4);tCe=n(jVe,"STRONG",{});var QOt=s(tCe);JLr=r(QOt,"gpt2"),QOt.forEach(t),YLr=r(jVe," \u2014 "),HK=n(jVe,"A",{href:!0});var UOt=s(HK);KLr=r(UOt,"TFGPT2LMHeadModel"),UOt.forEach(t),ZLr=r(jVe," (OpenAI GPT-2 model)"),jVe.forEach(t),eyr=i(le),j4=n(le,"LI",{});var DVe=s(j4);aCe=n(DVe,"STRONG",{});var HOt=s(aCe);oyr=r(HOt,"layoutlm"),HOt.forEach(t),ryr=r(DVe," \u2014 "),JK=n(DVe,"A",{href:!0});var JOt=s(JK);tyr=r(JOt,"TFLayoutLMForMaskedLM"),JOt.forEach(t),ayr=r(DVe," (LayoutLM model)"),DVe.forEach(t),nyr=i(le),D4=n(le,"LI",{});var GVe=s(D4);nCe=n(GVe,"STRONG",{});var YOt=s(nCe);syr=r(YOt,"lxmert"),YOt.forEach(t),lyr=r(GVe," \u2014 "),YK=n(GVe,"A",{href:!0});var KOt=s(YK);iyr=r(KOt,"TFLxmertForPreTraining"),KOt.forEach(t),dyr=r(GVe," (LXMERT model)"),GVe.forEach(t),cyr=i(le),G4=n(le,"LI",{});var OVe=s(G4);sCe=n(OVe,"STRONG",{});var ZOt=s(sCe);fyr=r(ZOt,"mobilebert"),ZOt.forEach(t),myr=r(OVe," \u2014 "),KK=n(OVe,"A",{href:!0});var eVt=s(KK);gyr=r(eVt,"TFMobileBertForPreTraining"),eVt.forEach(t),hyr=r(OVe," (MobileBERT model)"),OVe.forEach(t),pyr=i(le),O4=n(le,"LI",{});var VVe=s(O4);lCe=n(VVe,"STRONG",{});var oVt=s(lCe);_yr=r(oVt,"mpnet"),oVt.forEach(t),uyr=r(VVe," \u2014 "),ZK=n(VVe,"A",{href:!0});var rVt=s(ZK);byr=r(rVt,"TFMPNetForMaskedLM"),rVt.forEach(t),vyr=r(VVe," (MPNet model)"),VVe.forEach(t),Fyr=i(le),V4=n(le,"LI",{});var XVe=s(V4);iCe=n(XVe,"STRONG",{});var tVt=s(iCe);Tyr=r(tVt,"openai-gpt"),tVt.forEach(t),Myr=r(XVe," \u2014 "),eZ=n(XVe,"A",{href:!0});var aVt=s(eZ);Eyr=r(aVt,"TFOpenAIGPTLMHeadModel"),aVt.forEach(t),Cyr=r(XVe," (OpenAI GPT model)"),XVe.forEach(t),wyr=i(le),X4=n(le,"LI",{});var zVe=s(X4);dCe=n(zVe,"STRONG",{});var nVt=s(dCe);Ayr=r(nVt,"roberta"),nVt.forEach(t),Lyr=r(zVe," \u2014 "),oZ=n(zVe,"A",{href:!0});var sVt=s(oZ);yyr=r(sVt,"TFRobertaForMaskedLM"),sVt.forEach(t),xyr=r(zVe," (RoBERTa model)"),zVe.forEach(t),$yr=i(le),z4=n(le,"LI",{});var WVe=s(z4);cCe=n(WVe,"STRONG",{});var lVt=s(cCe);kyr=r(lVt,"t5"),lVt.forEach(t),Syr=r(WVe," \u2014 "),rZ=n(WVe,"A",{href:!0});var iVt=s(rZ);Ryr=r(iVt,"TFT5ForConditionalGeneration"),iVt.forEach(t),Pyr=r(WVe," (T5 model)"),WVe.forEach(t),Byr=i(le),W4=n(le,"LI",{});var QVe=s(W4);fCe=n(QVe,"STRONG",{});var dVt=s(fCe);Iyr=r(dVt,"tapas"),dVt.forEach(t),Nyr=r(QVe," \u2014 "),tZ=n(QVe,"A",{href:!0});var cVt=s(tZ);qyr=r(cVt,"TFTapasForMaskedLM"),cVt.forEach(t),jyr=r(QVe," (TAPAS model)"),QVe.forEach(t),Dyr=i(le),Q4=n(le,"LI",{});var UVe=s(Q4);mCe=n(UVe,"STRONG",{});var fVt=s(mCe);Gyr=r(fVt,"transfo-xl"),fVt.forEach(t),Oyr=r(UVe," \u2014 "),aZ=n(UVe,"A",{href:!0});var mVt=s(aZ);Vyr=r(mVt,"TFTransfoXLLMHeadModel"),mVt.forEach(t),Xyr=r(UVe," (Transformer-XL model)"),UVe.forEach(t),zyr=i(le),U4=n(le,"LI",{});var HVe=s(U4);gCe=n(HVe,"STRONG",{});var gVt=s(gCe);Wyr=r(gVt,"vit_mae"),gVt.forEach(t),Qyr=r(HVe," \u2014 "),nZ=n(HVe,"A",{href:!0});var hVt=s(nZ);Uyr=r(hVt,"TFViTMAEForPreTraining"),hVt.forEach(t),Hyr=r(HVe," (ViTMAE model)"),HVe.forEach(t),Jyr=i(le),H4=n(le,"LI",{});var JVe=s(H4);hCe=n(JVe,"STRONG",{});var pVt=s(hCe);Yyr=r(pVt,"xlm"),pVt.forEach(t),Kyr=r(JVe," \u2014 "),sZ=n(JVe,"A",{href:!0});var _Vt=s(sZ);Zyr=r(_Vt,"TFXLMWithLMHeadModel"),_Vt.forEach(t),e9r=r(JVe," (XLM model)"),JVe.forEach(t),o9r=i(le),J4=n(le,"LI",{});var YVe=s(J4);pCe=n(YVe,"STRONG",{});var uVt=s(pCe);r9r=r(uVt,"xlm-roberta"),uVt.forEach(t),t9r=r(YVe," \u2014 "),lZ=n(YVe,"A",{href:!0});var bVt=s(lZ);a9r=r(bVt,"TFXLMRobertaForMaskedLM"),bVt.forEach(t),n9r=r(YVe," (XLM-RoBERTa model)"),YVe.forEach(t),s9r=i(le),Y4=n(le,"LI",{});var KVe=s(Y4);_Ce=n(KVe,"STRONG",{});var vVt=s(_Ce);l9r=r(vVt,"xlnet"),vVt.forEach(t),i9r=r(KVe," \u2014 "),iZ=n(KVe,"A",{href:!0});var FVt=s(iZ);d9r=r(FVt,"TFXLNetLMHeadModel"),FVt.forEach(t),c9r=r(KVe," (XLNet model)"),KVe.forEach(t),le.forEach(t),f9r=i(Yl),T(K4.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),UHe=i(f),qc=n(f,"H2",{class:!0});var dKe=s(qc);Z4=n(dKe,"A",{id:!0,class:!0,href:!0});var TVt=s(Z4);uCe=n(TVt,"SPAN",{});var MVt=s(uCe);T(q$.$$.fragment,MVt),MVt.forEach(t),TVt.forEach(t),m9r=i(dKe),bCe=n(dKe,"SPAN",{});var EVt=s(bCe);g9r=r(EVt,"TFAutoModelForCausalLM"),EVt.forEach(t),dKe.forEach(t),HHe=i(f),ir=n(f,"DIV",{class:!0});var Kl=s(ir);T(j$.$$.fragment,Kl),h9r=i(Kl),jc=n(Kl,"P",{});var pse=s(jc);p9r=r(pse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dZ=n(pse,"A",{href:!0});var CVt=s(dZ);_9r=r(CVt,"from_pretrained()"),CVt.forEach(t),u9r=r(pse," class method or the "),cZ=n(pse,"A",{href:!0});var wVt=s(cZ);b9r=r(wVt,"from_config()"),wVt.forEach(t),v9r=r(pse,` class
method.`),pse.forEach(t),F9r=i(Kl),D$=n(Kl,"P",{});var cKe=s(D$);T9r=r(cKe,"This class cannot be instantiated directly using "),vCe=n(cKe,"CODE",{});var AVt=s(vCe);M9r=r(AVt,"__init__()"),AVt.forEach(t),E9r=r(cKe," (throws an error)."),cKe.forEach(t),C9r=i(Kl),Vt=n(Kl,"DIV",{class:!0});var kL=s(Vt);T(G$.$$.fragment,kL),w9r=i(kL),FCe=n(kL,"P",{});var LVt=s(FCe);A9r=r(LVt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),LVt.forEach(t),L9r=i(kL),Dc=n(kL,"P",{});var _se=s(Dc);y9r=r(_se,`Note:
Loading a model from its configuration file does `),TCe=n(_se,"STRONG",{});var yVt=s(TCe);x9r=r(yVt,"not"),yVt.forEach(t),$9r=r(_se,` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=n(_se,"A",{href:!0});var xVt=s(fZ);k9r=r(xVt,"from_pretrained()"),xVt.forEach(t),S9r=r(_se," to load the model weights."),_se.forEach(t),R9r=i(kL),T(eC.$$.fragment,kL),kL.forEach(t),P9r=i(Kl),Nr=n(Kl,"DIV",{class:!0});var Zl=s(Nr);T(O$.$$.fragment,Zl),B9r=i(Zl),MCe=n(Zl,"P",{});var $Vt=s(MCe);I9r=r($Vt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Vt.forEach(t),N9r=i(Zl),En=n(Zl,"P",{});var SL=s(En);q9r=r(SL,"The model class to instantiate is selected based on the "),ECe=n(SL,"CODE",{});var kVt=s(ECe);j9r=r(kVt,"model_type"),kVt.forEach(t),D9r=r(SL,` property of the config object (either
passed as an argument or loaded from `),CCe=n(SL,"CODE",{});var SVt=s(CCe);G9r=r(SVt,"pretrained_model_name_or_path"),SVt.forEach(t),O9r=r(SL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wCe=n(SL,"CODE",{});var RVt=s(wCe);V9r=r(RVt,"pretrained_model_name_or_path"),RVt.forEach(t),X9r=r(SL,":"),SL.forEach(t),z9r=i(Zl),Me=n(Zl,"UL",{});var Ce=s(Me);oC=n(Ce,"LI",{});var ZVe=s(oC);ACe=n(ZVe,"STRONG",{});var PVt=s(ACe);W9r=r(PVt,"bert"),PVt.forEach(t),Q9r=r(ZVe," \u2014 "),mZ=n(ZVe,"A",{href:!0});var BVt=s(mZ);U9r=r(BVt,"TFBertLMHeadModel"),BVt.forEach(t),H9r=r(ZVe," (BERT model)"),ZVe.forEach(t),J9r=i(Ce),rC=n(Ce,"LI",{});var eXe=s(rC);LCe=n(eXe,"STRONG",{});var IVt=s(LCe);Y9r=r(IVt,"camembert"),IVt.forEach(t),K9r=r(eXe," \u2014 "),gZ=n(eXe,"A",{href:!0});var NVt=s(gZ);Z9r=r(NVt,"TFCamembertForCausalLM"),NVt.forEach(t),exr=r(eXe," (CamemBERT model)"),eXe.forEach(t),oxr=i(Ce),tC=n(Ce,"LI",{});var oXe=s(tC);yCe=n(oXe,"STRONG",{});var qVt=s(yCe);rxr=r(qVt,"ctrl"),qVt.forEach(t),txr=r(oXe," \u2014 "),hZ=n(oXe,"A",{href:!0});var jVt=s(hZ);axr=r(jVt,"TFCTRLLMHeadModel"),jVt.forEach(t),nxr=r(oXe," (CTRL model)"),oXe.forEach(t),sxr=i(Ce),aC=n(Ce,"LI",{});var rXe=s(aC);xCe=n(rXe,"STRONG",{});var DVt=s(xCe);lxr=r(DVt,"gpt2"),DVt.forEach(t),ixr=r(rXe," \u2014 "),pZ=n(rXe,"A",{href:!0});var GVt=s(pZ);dxr=r(GVt,"TFGPT2LMHeadModel"),GVt.forEach(t),cxr=r(rXe," (OpenAI GPT-2 model)"),rXe.forEach(t),fxr=i(Ce),nC=n(Ce,"LI",{});var tXe=s(nC);$Ce=n(tXe,"STRONG",{});var OVt=s($Ce);mxr=r(OVt,"gptj"),OVt.forEach(t),gxr=r(tXe," \u2014 "),_Z=n(tXe,"A",{href:!0});var VVt=s(_Z);hxr=r(VVt,"TFGPTJForCausalLM"),VVt.forEach(t),pxr=r(tXe," (GPT-J model)"),tXe.forEach(t),_xr=i(Ce),sC=n(Ce,"LI",{});var aXe=s(sC);kCe=n(aXe,"STRONG",{});var XVt=s(kCe);uxr=r(XVt,"openai-gpt"),XVt.forEach(t),bxr=r(aXe," \u2014 "),uZ=n(aXe,"A",{href:!0});var zVt=s(uZ);vxr=r(zVt,"TFOpenAIGPTLMHeadModel"),zVt.forEach(t),Fxr=r(aXe," (OpenAI GPT model)"),aXe.forEach(t),Txr=i(Ce),lC=n(Ce,"LI",{});var nXe=s(lC);SCe=n(nXe,"STRONG",{});var WVt=s(SCe);Mxr=r(WVt,"opt"),WVt.forEach(t),Exr=r(nXe," \u2014 "),bZ=n(nXe,"A",{href:!0});var QVt=s(bZ);Cxr=r(QVt,"TFOPTForCausalLM"),QVt.forEach(t),wxr=r(nXe," (OPT model)"),nXe.forEach(t),Axr=i(Ce),iC=n(Ce,"LI",{});var sXe=s(iC);RCe=n(sXe,"STRONG",{});var UVt=s(RCe);Lxr=r(UVt,"rembert"),UVt.forEach(t),yxr=r(sXe," \u2014 "),vZ=n(sXe,"A",{href:!0});var HVt=s(vZ);xxr=r(HVt,"TFRemBertForCausalLM"),HVt.forEach(t),$xr=r(sXe," (RemBERT model)"),sXe.forEach(t),kxr=i(Ce),dC=n(Ce,"LI",{});var lXe=s(dC);PCe=n(lXe,"STRONG",{});var JVt=s(PCe);Sxr=r(JVt,"roberta"),JVt.forEach(t),Rxr=r(lXe," \u2014 "),FZ=n(lXe,"A",{href:!0});var YVt=s(FZ);Pxr=r(YVt,"TFRobertaForCausalLM"),YVt.forEach(t),Bxr=r(lXe," (RoBERTa model)"),lXe.forEach(t),Ixr=i(Ce),cC=n(Ce,"LI",{});var iXe=s(cC);BCe=n(iXe,"STRONG",{});var KVt=s(BCe);Nxr=r(KVt,"roformer"),KVt.forEach(t),qxr=r(iXe," \u2014 "),TZ=n(iXe,"A",{href:!0});var ZVt=s(TZ);jxr=r(ZVt,"TFRoFormerForCausalLM"),ZVt.forEach(t),Dxr=r(iXe," (RoFormer model)"),iXe.forEach(t),Gxr=i(Ce),fC=n(Ce,"LI",{});var dXe=s(fC);ICe=n(dXe,"STRONG",{});var eXt=s(ICe);Oxr=r(eXt,"transfo-xl"),eXt.forEach(t),Vxr=r(dXe," \u2014 "),MZ=n(dXe,"A",{href:!0});var oXt=s(MZ);Xxr=r(oXt,"TFTransfoXLLMHeadModel"),oXt.forEach(t),zxr=r(dXe," (Transformer-XL model)"),dXe.forEach(t),Wxr=i(Ce),mC=n(Ce,"LI",{});var cXe=s(mC);NCe=n(cXe,"STRONG",{});var rXt=s(NCe);Qxr=r(rXt,"xlm"),rXt.forEach(t),Uxr=r(cXe," \u2014 "),EZ=n(cXe,"A",{href:!0});var tXt=s(EZ);Hxr=r(tXt,"TFXLMWithLMHeadModel"),tXt.forEach(t),Jxr=r(cXe," (XLM model)"),cXe.forEach(t),Yxr=i(Ce),gC=n(Ce,"LI",{});var fXe=s(gC);qCe=n(fXe,"STRONG",{});var aXt=s(qCe);Kxr=r(aXt,"xlnet"),aXt.forEach(t),Zxr=r(fXe," \u2014 "),CZ=n(fXe,"A",{href:!0});var nXt=s(CZ);e$r=r(nXt,"TFXLNetLMHeadModel"),nXt.forEach(t),o$r=r(fXe," (XLNet model)"),fXe.forEach(t),Ce.forEach(t),r$r=i(Zl),T(hC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),JHe=i(f),Gc=n(f,"H2",{class:!0});var fKe=s(Gc);pC=n(fKe,"A",{id:!0,class:!0,href:!0});var sXt=s(pC);jCe=n(sXt,"SPAN",{});var lXt=s(jCe);T(V$.$$.fragment,lXt),lXt.forEach(t),sXt.forEach(t),t$r=i(fKe),DCe=n(fKe,"SPAN",{});var iXt=s(DCe);a$r=r(iXt,"TFAutoModelForImageClassification"),iXt.forEach(t),fKe.forEach(t),YHe=i(f),dr=n(f,"DIV",{class:!0});var ei=s(dr);T(X$.$$.fragment,ei),n$r=i(ei),Oc=n(ei,"P",{});var use=s(Oc);s$r=r(use,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wZ=n(use,"A",{href:!0});var dXt=s(wZ);l$r=r(dXt,"from_pretrained()"),dXt.forEach(t),i$r=r(use," class method or the "),AZ=n(use,"A",{href:!0});var cXt=s(AZ);d$r=r(cXt,"from_config()"),cXt.forEach(t),c$r=r(use,` class
method.`),use.forEach(t),f$r=i(ei),z$=n(ei,"P",{});var mKe=s(z$);m$r=r(mKe,"This class cannot be instantiated directly using "),GCe=n(mKe,"CODE",{});var fXt=s(GCe);g$r=r(fXt,"__init__()"),fXt.forEach(t),h$r=r(mKe," (throws an error)."),mKe.forEach(t),p$r=i(ei),Xt=n(ei,"DIV",{class:!0});var RL=s(Xt);T(W$.$$.fragment,RL),_$r=i(RL),OCe=n(RL,"P",{});var mXt=s(OCe);u$r=r(mXt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mXt.forEach(t),b$r=i(RL),Vc=n(RL,"P",{});var bse=s(Vc);v$r=r(bse,`Note:
Loading a model from its configuration file does `),VCe=n(bse,"STRONG",{});var gXt=s(VCe);F$r=r(gXt,"not"),gXt.forEach(t),T$r=r(bse,` load the model weights. It only affects the
model\u2019s configuration. Use `),LZ=n(bse,"A",{href:!0});var hXt=s(LZ);M$r=r(hXt,"from_pretrained()"),hXt.forEach(t),E$r=r(bse," to load the model weights."),bse.forEach(t),C$r=i(RL),T(_C.$$.fragment,RL),RL.forEach(t),w$r=i(ei),qr=n(ei,"DIV",{class:!0});var oi=s(qr);T(Q$.$$.fragment,oi),A$r=i(oi),XCe=n(oi,"P",{});var pXt=s(XCe);L$r=r(pXt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),pXt.forEach(t),y$r=i(oi),Cn=n(oi,"P",{});var PL=s(Cn);x$r=r(PL,"The model class to instantiate is selected based on the "),zCe=n(PL,"CODE",{});var _Xt=s(zCe);$$r=r(_Xt,"model_type"),_Xt.forEach(t),k$r=r(PL,` property of the config object (either
passed as an argument or loaded from `),WCe=n(PL,"CODE",{});var uXt=s(WCe);S$r=r(uXt,"pretrained_model_name_or_path"),uXt.forEach(t),R$r=r(PL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QCe=n(PL,"CODE",{});var bXt=s(QCe);P$r=r(bXt,"pretrained_model_name_or_path"),bXt.forEach(t),B$r=r(PL,":"),PL.forEach(t),I$r=i(oi),Ve=n(oi,"UL",{});var Co=s(Ve);uC=n(Co,"LI",{});var mXe=s(uC);UCe=n(mXe,"STRONG",{});var vXt=s(UCe);N$r=r(vXt,"convnext"),vXt.forEach(t),q$r=r(mXe," \u2014 "),yZ=n(mXe,"A",{href:!0});var FXt=s(yZ);j$r=r(FXt,"TFConvNextForImageClassification"),FXt.forEach(t),D$r=r(mXe," (ConvNeXT model)"),mXe.forEach(t),G$r=i(Co),bC=n(Co,"LI",{});var gXe=s(bC);HCe=n(gXe,"STRONG",{});var TXt=s(HCe);O$r=r(TXt,"data2vec-vision"),TXt.forEach(t),V$r=r(gXe," \u2014 "),xZ=n(gXe,"A",{href:!0});var MXt=s(xZ);X$r=r(MXt,"TFData2VecVisionForImageClassification"),MXt.forEach(t),z$r=r(gXe," (Data2VecVision model)"),gXe.forEach(t),W$r=i(Co),hl=n(Co,"LI",{});var AP=s(hl);JCe=n(AP,"STRONG",{});var EXt=s(JCe);Q$r=r(EXt,"deit"),EXt.forEach(t),U$r=r(AP," \u2014 "),$Z=n(AP,"A",{href:!0});var CXt=s($Z);H$r=r(CXt,"TFDeiTForImageClassification"),CXt.forEach(t),J$r=r(AP," or "),kZ=n(AP,"A",{href:!0});var wXt=s(kZ);Y$r=r(wXt,"TFDeiTForImageClassificationWithTeacher"),wXt.forEach(t),K$r=r(AP," (DeiT model)"),AP.forEach(t),Z$r=i(Co),vC=n(Co,"LI",{});var hXe=s(vC);YCe=n(hXe,"STRONG",{});var AXt=s(YCe);ekr=r(AXt,"regnet"),AXt.forEach(t),okr=r(hXe," \u2014 "),SZ=n(hXe,"A",{href:!0});var LXt=s(SZ);rkr=r(LXt,"TFRegNetForImageClassification"),LXt.forEach(t),tkr=r(hXe," (RegNet model)"),hXe.forEach(t),akr=i(Co),FC=n(Co,"LI",{});var pXe=s(FC);KCe=n(pXe,"STRONG",{});var yXt=s(KCe);nkr=r(yXt,"resnet"),yXt.forEach(t),skr=r(pXe," \u2014 "),RZ=n(pXe,"A",{href:!0});var xXt=s(RZ);lkr=r(xXt,"TFResNetForImageClassification"),xXt.forEach(t),ikr=r(pXe," (ResNet model)"),pXe.forEach(t),dkr=i(Co),TC=n(Co,"LI",{});var _Xe=s(TC);ZCe=n(_Xe,"STRONG",{});var $Xt=s(ZCe);ckr=r($Xt,"segformer"),$Xt.forEach(t),fkr=r(_Xe," \u2014 "),PZ=n(_Xe,"A",{href:!0});var kXt=s(PZ);mkr=r(kXt,"TFSegformerForImageClassification"),kXt.forEach(t),gkr=r(_Xe," (SegFormer model)"),_Xe.forEach(t),hkr=i(Co),MC=n(Co,"LI",{});var uXe=s(MC);e3e=n(uXe,"STRONG",{});var SXt=s(e3e);pkr=r(SXt,"swin"),SXt.forEach(t),_kr=r(uXe," \u2014 "),BZ=n(uXe,"A",{href:!0});var RXt=s(BZ);ukr=r(RXt,"TFSwinForImageClassification"),RXt.forEach(t),bkr=r(uXe," (Swin Transformer model)"),uXe.forEach(t),vkr=i(Co),EC=n(Co,"LI",{});var bXe=s(EC);o3e=n(bXe,"STRONG",{});var PXt=s(o3e);Fkr=r(PXt,"vit"),PXt.forEach(t),Tkr=r(bXe," \u2014 "),IZ=n(bXe,"A",{href:!0});var BXt=s(IZ);Mkr=r(BXt,"TFViTForImageClassification"),BXt.forEach(t),Ekr=r(bXe," (ViT model)"),bXe.forEach(t),Co.forEach(t),Ckr=i(oi),T(CC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),KHe=i(f),Xc=n(f,"H2",{class:!0});var gKe=s(Xc);wC=n(gKe,"A",{id:!0,class:!0,href:!0});var IXt=s(wC);r3e=n(IXt,"SPAN",{});var NXt=s(r3e);T(U$.$$.fragment,NXt),NXt.forEach(t),IXt.forEach(t),wkr=i(gKe),t3e=n(gKe,"SPAN",{});var qXt=s(t3e);Akr=r(qXt,"TFAutoModelForSemanticSegmentation"),qXt.forEach(t),gKe.forEach(t),ZHe=i(f),cr=n(f,"DIV",{class:!0});var ri=s(cr);T(H$.$$.fragment,ri),Lkr=i(ri),zc=n(ri,"P",{});var vse=s(zc);ykr=r(vse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),NZ=n(vse,"A",{href:!0});var jXt=s(NZ);xkr=r(jXt,"from_pretrained()"),jXt.forEach(t),$kr=r(vse," class method or the "),qZ=n(vse,"A",{href:!0});var DXt=s(qZ);kkr=r(DXt,"from_config()"),DXt.forEach(t),Skr=r(vse,` class
method.`),vse.forEach(t),Rkr=i(ri),J$=n(ri,"P",{});var hKe=s(J$);Pkr=r(hKe,"This class cannot be instantiated directly using "),a3e=n(hKe,"CODE",{});var GXt=s(a3e);Bkr=r(GXt,"__init__()"),GXt.forEach(t),Ikr=r(hKe," (throws an error)."),hKe.forEach(t),Nkr=i(ri),zt=n(ri,"DIV",{class:!0});var BL=s(zt);T(Y$.$$.fragment,BL),qkr=i(BL),n3e=n(BL,"P",{});var OXt=s(n3e);jkr=r(OXt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),OXt.forEach(t),Dkr=i(BL),Wc=n(BL,"P",{});var Fse=s(Wc);Gkr=r(Fse,`Note:
Loading a model from its configuration file does `),s3e=n(Fse,"STRONG",{});var VXt=s(s3e);Okr=r(VXt,"not"),VXt.forEach(t),Vkr=r(Fse,` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=n(Fse,"A",{href:!0});var XXt=s(jZ);Xkr=r(XXt,"from_pretrained()"),XXt.forEach(t),zkr=r(Fse," to load the model weights."),Fse.forEach(t),Wkr=i(BL),T(AC.$$.fragment,BL),BL.forEach(t),Qkr=i(ri),jr=n(ri,"DIV",{class:!0});var ti=s(jr);T(K$.$$.fragment,ti),Ukr=i(ti),l3e=n(ti,"P",{});var zXt=s(l3e);Hkr=r(zXt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),zXt.forEach(t),Jkr=i(ti),wn=n(ti,"P",{});var IL=s(wn);Ykr=r(IL,"The model class to instantiate is selected based on the "),i3e=n(IL,"CODE",{});var WXt=s(i3e);Kkr=r(WXt,"model_type"),WXt.forEach(t),Zkr=r(IL,` property of the config object (either
passed as an argument or loaded from `),d3e=n(IL,"CODE",{});var QXt=s(d3e);eSr=r(QXt,"pretrained_model_name_or_path"),QXt.forEach(t),oSr=r(IL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=n(IL,"CODE",{});var UXt=s(c3e);rSr=r(UXt,"pretrained_model_name_or_path"),UXt.forEach(t),tSr=r(IL,":"),IL.forEach(t),aSr=i(ti),Z$=n(ti,"UL",{});var pKe=s(Z$);LC=n(pKe,"LI",{});var vXe=s(LC);f3e=n(vXe,"STRONG",{});var HXt=s(f3e);nSr=r(HXt,"data2vec-vision"),HXt.forEach(t),sSr=r(vXe," \u2014 "),DZ=n(vXe,"A",{href:!0});var JXt=s(DZ);lSr=r(JXt,"TFData2VecVisionForSemanticSegmentation"),JXt.forEach(t),iSr=r(vXe," (Data2VecVision model)"),vXe.forEach(t),dSr=i(pKe),yC=n(pKe,"LI",{});var FXe=s(yC);m3e=n(FXe,"STRONG",{});var YXt=s(m3e);cSr=r(YXt,"segformer"),YXt.forEach(t),fSr=r(FXe," \u2014 "),GZ=n(FXe,"A",{href:!0});var KXt=s(GZ);mSr=r(KXt,"TFSegformerForSemanticSegmentation"),KXt.forEach(t),gSr=r(FXe," (SegFormer model)"),FXe.forEach(t),pKe.forEach(t),hSr=i(ti),T(xC.$$.fragment,ti),ti.forEach(t),ri.forEach(t),eJe=i(f),Qc=n(f,"H2",{class:!0});var _Ke=s(Qc);$C=n(_Ke,"A",{id:!0,class:!0,href:!0});var ZXt=s($C);g3e=n(ZXt,"SPAN",{});var ezt=s(g3e);T(ek.$$.fragment,ezt),ezt.forEach(t),ZXt.forEach(t),pSr=i(_Ke),h3e=n(_Ke,"SPAN",{});var ozt=s(h3e);_Sr=r(ozt,"TFAutoModelForMaskedLM"),ozt.forEach(t),_Ke.forEach(t),oJe=i(f),fr=n(f,"DIV",{class:!0});var ai=s(fr);T(ok.$$.fragment,ai),uSr=i(ai),Uc=n(ai,"P",{});var Tse=s(Uc);bSr=r(Tse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),OZ=n(Tse,"A",{href:!0});var rzt=s(OZ);vSr=r(rzt,"from_pretrained()"),rzt.forEach(t),FSr=r(Tse," class method or the "),VZ=n(Tse,"A",{href:!0});var tzt=s(VZ);TSr=r(tzt,"from_config()"),tzt.forEach(t),MSr=r(Tse,` class
method.`),Tse.forEach(t),ESr=i(ai),rk=n(ai,"P",{});var uKe=s(rk);CSr=r(uKe,"This class cannot be instantiated directly using "),p3e=n(uKe,"CODE",{});var azt=s(p3e);wSr=r(azt,"__init__()"),azt.forEach(t),ASr=r(uKe," (throws an error)."),uKe.forEach(t),LSr=i(ai),Wt=n(ai,"DIV",{class:!0});var NL=s(Wt);T(tk.$$.fragment,NL),ySr=i(NL),_3e=n(NL,"P",{});var nzt=s(_3e);xSr=r(nzt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),nzt.forEach(t),$Sr=i(NL),Hc=n(NL,"P",{});var Mse=s(Hc);kSr=r(Mse,`Note:
Loading a model from its configuration file does `),u3e=n(Mse,"STRONG",{});var szt=s(u3e);SSr=r(szt,"not"),szt.forEach(t),RSr=r(Mse,` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=n(Mse,"A",{href:!0});var lzt=s(XZ);PSr=r(lzt,"from_pretrained()"),lzt.forEach(t),BSr=r(Mse," to load the model weights."),Mse.forEach(t),ISr=i(NL),T(kC.$$.fragment,NL),NL.forEach(t),NSr=i(ai),Dr=n(ai,"DIV",{class:!0});var ni=s(Dr);T(ak.$$.fragment,ni),qSr=i(ni),b3e=n(ni,"P",{});var izt=s(b3e);jSr=r(izt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),izt.forEach(t),DSr=i(ni),An=n(ni,"P",{});var qL=s(An);GSr=r(qL,"The model class to instantiate is selected based on the "),v3e=n(qL,"CODE",{});var dzt=s(v3e);OSr=r(dzt,"model_type"),dzt.forEach(t),VSr=r(qL,` property of the config object (either
passed as an argument or loaded from `),F3e=n(qL,"CODE",{});var czt=s(F3e);XSr=r(czt,"pretrained_model_name_or_path"),czt.forEach(t),zSr=r(qL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T3e=n(qL,"CODE",{});var fzt=s(T3e);WSr=r(fzt,"pretrained_model_name_or_path"),fzt.forEach(t),QSr=r(qL,":"),qL.forEach(t),USr=i(ni),de=n(ni,"UL",{});var he=s(de);SC=n(he,"LI",{});var TXe=s(SC);M3e=n(TXe,"STRONG",{});var mzt=s(M3e);HSr=r(mzt,"albert"),mzt.forEach(t),JSr=r(TXe," \u2014 "),zZ=n(TXe,"A",{href:!0});var gzt=s(zZ);YSr=r(gzt,"TFAlbertForMaskedLM"),gzt.forEach(t),KSr=r(TXe," (ALBERT model)"),TXe.forEach(t),ZSr=i(he),RC=n(he,"LI",{});var MXe=s(RC);E3e=n(MXe,"STRONG",{});var hzt=s(E3e);eRr=r(hzt,"bert"),hzt.forEach(t),oRr=r(MXe," \u2014 "),WZ=n(MXe,"A",{href:!0});var pzt=s(WZ);rRr=r(pzt,"TFBertForMaskedLM"),pzt.forEach(t),tRr=r(MXe," (BERT model)"),MXe.forEach(t),aRr=i(he),PC=n(he,"LI",{});var EXe=s(PC);C3e=n(EXe,"STRONG",{});var _zt=s(C3e);nRr=r(_zt,"camembert"),_zt.forEach(t),sRr=r(EXe," \u2014 "),QZ=n(EXe,"A",{href:!0});var uzt=s(QZ);lRr=r(uzt,"TFCamembertForMaskedLM"),uzt.forEach(t),iRr=r(EXe," (CamemBERT model)"),EXe.forEach(t),dRr=i(he),BC=n(he,"LI",{});var CXe=s(BC);w3e=n(CXe,"STRONG",{});var bzt=s(w3e);cRr=r(bzt,"convbert"),bzt.forEach(t),fRr=r(CXe," \u2014 "),UZ=n(CXe,"A",{href:!0});var vzt=s(UZ);mRr=r(vzt,"TFConvBertForMaskedLM"),vzt.forEach(t),gRr=r(CXe," (ConvBERT model)"),CXe.forEach(t),hRr=i(he),IC=n(he,"LI",{});var wXe=s(IC);A3e=n(wXe,"STRONG",{});var Fzt=s(A3e);pRr=r(Fzt,"deberta"),Fzt.forEach(t),_Rr=r(wXe," \u2014 "),HZ=n(wXe,"A",{href:!0});var Tzt=s(HZ);uRr=r(Tzt,"TFDebertaForMaskedLM"),Tzt.forEach(t),bRr=r(wXe," (DeBERTa model)"),wXe.forEach(t),vRr=i(he),NC=n(he,"LI",{});var AXe=s(NC);L3e=n(AXe,"STRONG",{});var Mzt=s(L3e);FRr=r(Mzt,"deberta-v2"),Mzt.forEach(t),TRr=r(AXe," \u2014 "),JZ=n(AXe,"A",{href:!0});var Ezt=s(JZ);MRr=r(Ezt,"TFDebertaV2ForMaskedLM"),Ezt.forEach(t),ERr=r(AXe," (DeBERTa-v2 model)"),AXe.forEach(t),CRr=i(he),qC=n(he,"LI",{});var LXe=s(qC);y3e=n(LXe,"STRONG",{});var Czt=s(y3e);wRr=r(Czt,"distilbert"),Czt.forEach(t),ARr=r(LXe," \u2014 "),YZ=n(LXe,"A",{href:!0});var wzt=s(YZ);LRr=r(wzt,"TFDistilBertForMaskedLM"),wzt.forEach(t),yRr=r(LXe," (DistilBERT model)"),LXe.forEach(t),xRr=i(he),jC=n(he,"LI",{});var yXe=s(jC);x3e=n(yXe,"STRONG",{});var Azt=s(x3e);$Rr=r(Azt,"electra"),Azt.forEach(t),kRr=r(yXe," \u2014 "),KZ=n(yXe,"A",{href:!0});var Lzt=s(KZ);SRr=r(Lzt,"TFElectraForMaskedLM"),Lzt.forEach(t),RRr=r(yXe," (ELECTRA model)"),yXe.forEach(t),PRr=i(he),DC=n(he,"LI",{});var xXe=s(DC);$3e=n(xXe,"STRONG",{});var yzt=s($3e);BRr=r(yzt,"flaubert"),yzt.forEach(t),IRr=r(xXe," \u2014 "),ZZ=n(xXe,"A",{href:!0});var xzt=s(ZZ);NRr=r(xzt,"TFFlaubertWithLMHeadModel"),xzt.forEach(t),qRr=r(xXe," (FlauBERT model)"),xXe.forEach(t),jRr=i(he),GC=n(he,"LI",{});var $Xe=s(GC);k3e=n($Xe,"STRONG",{});var $zt=s(k3e);DRr=r($zt,"funnel"),$zt.forEach(t),GRr=r($Xe," \u2014 "),eee=n($Xe,"A",{href:!0});var kzt=s(eee);ORr=r(kzt,"TFFunnelForMaskedLM"),kzt.forEach(t),VRr=r($Xe," (Funnel Transformer model)"),$Xe.forEach(t),XRr=i(he),OC=n(he,"LI",{});var kXe=s(OC);S3e=n(kXe,"STRONG",{});var Szt=s(S3e);zRr=r(Szt,"layoutlm"),Szt.forEach(t),WRr=r(kXe," \u2014 "),oee=n(kXe,"A",{href:!0});var Rzt=s(oee);QRr=r(Rzt,"TFLayoutLMForMaskedLM"),Rzt.forEach(t),URr=r(kXe," (LayoutLM model)"),kXe.forEach(t),HRr=i(he),VC=n(he,"LI",{});var SXe=s(VC);R3e=n(SXe,"STRONG",{});var Pzt=s(R3e);JRr=r(Pzt,"longformer"),Pzt.forEach(t),YRr=r(SXe," \u2014 "),ree=n(SXe,"A",{href:!0});var Bzt=s(ree);KRr=r(Bzt,"TFLongformerForMaskedLM"),Bzt.forEach(t),ZRr=r(SXe," (Longformer model)"),SXe.forEach(t),ePr=i(he),XC=n(he,"LI",{});var RXe=s(XC);P3e=n(RXe,"STRONG",{});var Izt=s(P3e);oPr=r(Izt,"mobilebert"),Izt.forEach(t),rPr=r(RXe," \u2014 "),tee=n(RXe,"A",{href:!0});var Nzt=s(tee);tPr=r(Nzt,"TFMobileBertForMaskedLM"),Nzt.forEach(t),aPr=r(RXe," (MobileBERT model)"),RXe.forEach(t),nPr=i(he),zC=n(he,"LI",{});var PXe=s(zC);B3e=n(PXe,"STRONG",{});var qzt=s(B3e);sPr=r(qzt,"mpnet"),qzt.forEach(t),lPr=r(PXe," \u2014 "),aee=n(PXe,"A",{href:!0});var jzt=s(aee);iPr=r(jzt,"TFMPNetForMaskedLM"),jzt.forEach(t),dPr=r(PXe," (MPNet model)"),PXe.forEach(t),cPr=i(he),WC=n(he,"LI",{});var BXe=s(WC);I3e=n(BXe,"STRONG",{});var Dzt=s(I3e);fPr=r(Dzt,"rembert"),Dzt.forEach(t),mPr=r(BXe," \u2014 "),nee=n(BXe,"A",{href:!0});var Gzt=s(nee);gPr=r(Gzt,"TFRemBertForMaskedLM"),Gzt.forEach(t),hPr=r(BXe," (RemBERT model)"),BXe.forEach(t),pPr=i(he),QC=n(he,"LI",{});var IXe=s(QC);N3e=n(IXe,"STRONG",{});var Ozt=s(N3e);_Pr=r(Ozt,"roberta"),Ozt.forEach(t),uPr=r(IXe," \u2014 "),see=n(IXe,"A",{href:!0});var Vzt=s(see);bPr=r(Vzt,"TFRobertaForMaskedLM"),Vzt.forEach(t),vPr=r(IXe," (RoBERTa model)"),IXe.forEach(t),FPr=i(he),UC=n(he,"LI",{});var NXe=s(UC);q3e=n(NXe,"STRONG",{});var Xzt=s(q3e);TPr=r(Xzt,"roformer"),Xzt.forEach(t),MPr=r(NXe," \u2014 "),lee=n(NXe,"A",{href:!0});var zzt=s(lee);EPr=r(zzt,"TFRoFormerForMaskedLM"),zzt.forEach(t),CPr=r(NXe," (RoFormer model)"),NXe.forEach(t),wPr=i(he),HC=n(he,"LI",{});var qXe=s(HC);j3e=n(qXe,"STRONG",{});var Wzt=s(j3e);APr=r(Wzt,"tapas"),Wzt.forEach(t),LPr=r(qXe," \u2014 "),iee=n(qXe,"A",{href:!0});var Qzt=s(iee);yPr=r(Qzt,"TFTapasForMaskedLM"),Qzt.forEach(t),xPr=r(qXe," (TAPAS model)"),qXe.forEach(t),$Pr=i(he),JC=n(he,"LI",{});var jXe=s(JC);D3e=n(jXe,"STRONG",{});var Uzt=s(D3e);kPr=r(Uzt,"xlm"),Uzt.forEach(t),SPr=r(jXe," \u2014 "),dee=n(jXe,"A",{href:!0});var Hzt=s(dee);RPr=r(Hzt,"TFXLMWithLMHeadModel"),Hzt.forEach(t),PPr=r(jXe," (XLM model)"),jXe.forEach(t),BPr=i(he),YC=n(he,"LI",{});var DXe=s(YC);G3e=n(DXe,"STRONG",{});var Jzt=s(G3e);IPr=r(Jzt,"xlm-roberta"),Jzt.forEach(t),NPr=r(DXe," \u2014 "),cee=n(DXe,"A",{href:!0});var Yzt=s(cee);qPr=r(Yzt,"TFXLMRobertaForMaskedLM"),Yzt.forEach(t),jPr=r(DXe," (XLM-RoBERTa model)"),DXe.forEach(t),he.forEach(t),DPr=i(ni),T(KC.$$.fragment,ni),ni.forEach(t),ai.forEach(t),rJe=i(f),Jc=n(f,"H2",{class:!0});var bKe=s(Jc);ZC=n(bKe,"A",{id:!0,class:!0,href:!0});var Kzt=s(ZC);O3e=n(Kzt,"SPAN",{});var Zzt=s(O3e);T(nk.$$.fragment,Zzt),Zzt.forEach(t),Kzt.forEach(t),GPr=i(bKe),V3e=n(bKe,"SPAN",{});var eWt=s(V3e);OPr=r(eWt,"TFAutoModelForSeq2SeqLM"),eWt.forEach(t),bKe.forEach(t),tJe=i(f),mr=n(f,"DIV",{class:!0});var si=s(mr);T(sk.$$.fragment,si),VPr=i(si),Yc=n(si,"P",{});var Ese=s(Yc);XPr=r(Ese,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fee=n(Ese,"A",{href:!0});var oWt=s(fee);zPr=r(oWt,"from_pretrained()"),oWt.forEach(t),WPr=r(Ese," class method or the "),mee=n(Ese,"A",{href:!0});var rWt=s(mee);QPr=r(rWt,"from_config()"),rWt.forEach(t),UPr=r(Ese,` class
method.`),Ese.forEach(t),HPr=i(si),lk=n(si,"P",{});var vKe=s(lk);JPr=r(vKe,"This class cannot be instantiated directly using "),X3e=n(vKe,"CODE",{});var tWt=s(X3e);YPr=r(tWt,"__init__()"),tWt.forEach(t),KPr=r(vKe," (throws an error)."),vKe.forEach(t),ZPr=i(si),Qt=n(si,"DIV",{class:!0});var jL=s(Qt);T(ik.$$.fragment,jL),eBr=i(jL),z3e=n(jL,"P",{});var aWt=s(z3e);oBr=r(aWt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aWt.forEach(t),rBr=i(jL),Kc=n(jL,"P",{});var Cse=s(Kc);tBr=r(Cse,`Note:
Loading a model from its configuration file does `),W3e=n(Cse,"STRONG",{});var nWt=s(W3e);aBr=r(nWt,"not"),nWt.forEach(t),nBr=r(Cse,` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=n(Cse,"A",{href:!0});var sWt=s(gee);sBr=r(sWt,"from_pretrained()"),sWt.forEach(t),lBr=r(Cse," to load the model weights."),Cse.forEach(t),iBr=i(jL),T(e3.$$.fragment,jL),jL.forEach(t),dBr=i(si),Gr=n(si,"DIV",{class:!0});var li=s(Gr);T(dk.$$.fragment,li),cBr=i(li),Q3e=n(li,"P",{});var lWt=s(Q3e);fBr=r(lWt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lWt.forEach(t),mBr=i(li),Ln=n(li,"P",{});var DL=s(Ln);gBr=r(DL,"The model class to instantiate is selected based on the "),U3e=n(DL,"CODE",{});var iWt=s(U3e);hBr=r(iWt,"model_type"),iWt.forEach(t),pBr=r(DL,` property of the config object (either
passed as an argument or loaded from `),H3e=n(DL,"CODE",{});var dWt=s(H3e);_Br=r(dWt,"pretrained_model_name_or_path"),dWt.forEach(t),uBr=r(DL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J3e=n(DL,"CODE",{});var cWt=s(J3e);bBr=r(cWt,"pretrained_model_name_or_path"),cWt.forEach(t),vBr=r(DL,":"),DL.forEach(t),FBr=i(li),ye=n(li,"UL",{});var Ie=s(ye);o3=n(Ie,"LI",{});var GXe=s(o3);Y3e=n(GXe,"STRONG",{});var fWt=s(Y3e);TBr=r(fWt,"bart"),fWt.forEach(t),MBr=r(GXe," \u2014 "),hee=n(GXe,"A",{href:!0});var mWt=s(hee);EBr=r(mWt,"TFBartForConditionalGeneration"),mWt.forEach(t),CBr=r(GXe," (BART model)"),GXe.forEach(t),wBr=i(Ie),r3=n(Ie,"LI",{});var OXe=s(r3);K3e=n(OXe,"STRONG",{});var gWt=s(K3e);ABr=r(gWt,"blenderbot"),gWt.forEach(t),LBr=r(OXe," \u2014 "),pee=n(OXe,"A",{href:!0});var hWt=s(pee);yBr=r(hWt,"TFBlenderbotForConditionalGeneration"),hWt.forEach(t),xBr=r(OXe," (Blenderbot model)"),OXe.forEach(t),$Br=i(Ie),t3=n(Ie,"LI",{});var VXe=s(t3);Z3e=n(VXe,"STRONG",{});var pWt=s(Z3e);kBr=r(pWt,"blenderbot-small"),pWt.forEach(t),SBr=r(VXe," \u2014 "),_ee=n(VXe,"A",{href:!0});var _Wt=s(_ee);RBr=r(_Wt,"TFBlenderbotSmallForConditionalGeneration"),_Wt.forEach(t),PBr=r(VXe," (BlenderbotSmall model)"),VXe.forEach(t),BBr=i(Ie),a3=n(Ie,"LI",{});var XXe=s(a3);e5e=n(XXe,"STRONG",{});var uWt=s(e5e);IBr=r(uWt,"encoder-decoder"),uWt.forEach(t),NBr=r(XXe," \u2014 "),uee=n(XXe,"A",{href:!0});var bWt=s(uee);qBr=r(bWt,"TFEncoderDecoderModel"),bWt.forEach(t),jBr=r(XXe," (Encoder decoder model)"),XXe.forEach(t),DBr=i(Ie),n3=n(Ie,"LI",{});var zXe=s(n3);o5e=n(zXe,"STRONG",{});var vWt=s(o5e);GBr=r(vWt,"led"),vWt.forEach(t),OBr=r(zXe," \u2014 "),bee=n(zXe,"A",{href:!0});var FWt=s(bee);VBr=r(FWt,"TFLEDForConditionalGeneration"),FWt.forEach(t),XBr=r(zXe," (LED model)"),zXe.forEach(t),zBr=i(Ie),s3=n(Ie,"LI",{});var WXe=s(s3);r5e=n(WXe,"STRONG",{});var TWt=s(r5e);WBr=r(TWt,"marian"),TWt.forEach(t),QBr=r(WXe," \u2014 "),vee=n(WXe,"A",{href:!0});var MWt=s(vee);UBr=r(MWt,"TFMarianMTModel"),MWt.forEach(t),HBr=r(WXe," (Marian model)"),WXe.forEach(t),JBr=i(Ie),l3=n(Ie,"LI",{});var QXe=s(l3);t5e=n(QXe,"STRONG",{});var EWt=s(t5e);YBr=r(EWt,"mbart"),EWt.forEach(t),KBr=r(QXe," \u2014 "),Fee=n(QXe,"A",{href:!0});var CWt=s(Fee);ZBr=r(CWt,"TFMBartForConditionalGeneration"),CWt.forEach(t),eIr=r(QXe," (mBART model)"),QXe.forEach(t),oIr=i(Ie),i3=n(Ie,"LI",{});var UXe=s(i3);a5e=n(UXe,"STRONG",{});var wWt=s(a5e);rIr=r(wWt,"mt5"),wWt.forEach(t),tIr=r(UXe," \u2014 "),Tee=n(UXe,"A",{href:!0});var AWt=s(Tee);aIr=r(AWt,"TFMT5ForConditionalGeneration"),AWt.forEach(t),nIr=r(UXe," (MT5 model)"),UXe.forEach(t),sIr=i(Ie),d3=n(Ie,"LI",{});var HXe=s(d3);n5e=n(HXe,"STRONG",{});var LWt=s(n5e);lIr=r(LWt,"pegasus"),LWt.forEach(t),iIr=r(HXe," \u2014 "),Mee=n(HXe,"A",{href:!0});var yWt=s(Mee);dIr=r(yWt,"TFPegasusForConditionalGeneration"),yWt.forEach(t),cIr=r(HXe," (Pegasus model)"),HXe.forEach(t),fIr=i(Ie),c3=n(Ie,"LI",{});var JXe=s(c3);s5e=n(JXe,"STRONG",{});var xWt=s(s5e);mIr=r(xWt,"t5"),xWt.forEach(t),gIr=r(JXe," \u2014 "),Eee=n(JXe,"A",{href:!0});var $Wt=s(Eee);hIr=r($Wt,"TFT5ForConditionalGeneration"),$Wt.forEach(t),pIr=r(JXe," (T5 model)"),JXe.forEach(t),Ie.forEach(t),_Ir=i(li),T(f3.$$.fragment,li),li.forEach(t),si.forEach(t),aJe=i(f),Zc=n(f,"H2",{class:!0});var FKe=s(Zc);m3=n(FKe,"A",{id:!0,class:!0,href:!0});var kWt=s(m3);l5e=n(kWt,"SPAN",{});var SWt=s(l5e);T(ck.$$.fragment,SWt),SWt.forEach(t),kWt.forEach(t),uIr=i(FKe),i5e=n(FKe,"SPAN",{});var RWt=s(i5e);bIr=r(RWt,"TFAutoModelForSequenceClassification"),RWt.forEach(t),FKe.forEach(t),nJe=i(f),gr=n(f,"DIV",{class:!0});var ii=s(gr);T(fk.$$.fragment,ii),vIr=i(ii),ef=n(ii,"P",{});var wse=s(ef);FIr=r(wse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Cee=n(wse,"A",{href:!0});var PWt=s(Cee);TIr=r(PWt,"from_pretrained()"),PWt.forEach(t),MIr=r(wse," class method or the "),wee=n(wse,"A",{href:!0});var BWt=s(wee);EIr=r(BWt,"from_config()"),BWt.forEach(t),CIr=r(wse,` class
method.`),wse.forEach(t),wIr=i(ii),mk=n(ii,"P",{});var TKe=s(mk);AIr=r(TKe,"This class cannot be instantiated directly using "),d5e=n(TKe,"CODE",{});var IWt=s(d5e);LIr=r(IWt,"__init__()"),IWt.forEach(t),yIr=r(TKe," (throws an error)."),TKe.forEach(t),xIr=i(ii),Ut=n(ii,"DIV",{class:!0});var GL=s(Ut);T(gk.$$.fragment,GL),$Ir=i(GL),c5e=n(GL,"P",{});var NWt=s(c5e);kIr=r(NWt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),NWt.forEach(t),SIr=i(GL),of=n(GL,"P",{});var Ase=s(of);RIr=r(Ase,`Note:
Loading a model from its configuration file does `),f5e=n(Ase,"STRONG",{});var qWt=s(f5e);PIr=r(qWt,"not"),qWt.forEach(t),BIr=r(Ase,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aee=n(Ase,"A",{href:!0});var jWt=s(Aee);IIr=r(jWt,"from_pretrained()"),jWt.forEach(t),NIr=r(Ase," to load the model weights."),Ase.forEach(t),qIr=i(GL),T(g3.$$.fragment,GL),GL.forEach(t),jIr=i(ii),Or=n(ii,"DIV",{class:!0});var di=s(Or);T(hk.$$.fragment,di),DIr=i(di),m5e=n(di,"P",{});var DWt=s(m5e);GIr=r(DWt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),DWt.forEach(t),OIr=i(di),yn=n(di,"P",{});var OL=s(yn);VIr=r(OL,"The model class to instantiate is selected based on the "),g5e=n(OL,"CODE",{});var GWt=s(g5e);XIr=r(GWt,"model_type"),GWt.forEach(t),zIr=r(OL,` property of the config object (either
passed as an argument or loaded from `),h5e=n(OL,"CODE",{});var OWt=s(h5e);WIr=r(OWt,"pretrained_model_name_or_path"),OWt.forEach(t),QIr=r(OL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p5e=n(OL,"CODE",{});var VWt=s(p5e);UIr=r(VWt,"pretrained_model_name_or_path"),VWt.forEach(t),HIr=r(OL,":"),OL.forEach(t),JIr=i(di),te=n(di,"UL",{});var ne=s(te);h3=n(ne,"LI",{});var YXe=s(h3);_5e=n(YXe,"STRONG",{});var XWt=s(_5e);YIr=r(XWt,"albert"),XWt.forEach(t),KIr=r(YXe," \u2014 "),Lee=n(YXe,"A",{href:!0});var zWt=s(Lee);ZIr=r(zWt,"TFAlbertForSequenceClassification"),zWt.forEach(t),eNr=r(YXe," (ALBERT model)"),YXe.forEach(t),oNr=i(ne),p3=n(ne,"LI",{});var KXe=s(p3);u5e=n(KXe,"STRONG",{});var WWt=s(u5e);rNr=r(WWt,"bert"),WWt.forEach(t),tNr=r(KXe," \u2014 "),yee=n(KXe,"A",{href:!0});var QWt=s(yee);aNr=r(QWt,"TFBertForSequenceClassification"),QWt.forEach(t),nNr=r(KXe," (BERT model)"),KXe.forEach(t),sNr=i(ne),_3=n(ne,"LI",{});var ZXe=s(_3);b5e=n(ZXe,"STRONG",{});var UWt=s(b5e);lNr=r(UWt,"camembert"),UWt.forEach(t),iNr=r(ZXe," \u2014 "),xee=n(ZXe,"A",{href:!0});var HWt=s(xee);dNr=r(HWt,"TFCamembertForSequenceClassification"),HWt.forEach(t),cNr=r(ZXe," (CamemBERT model)"),ZXe.forEach(t),fNr=i(ne),u3=n(ne,"LI",{});var eze=s(u3);v5e=n(eze,"STRONG",{});var JWt=s(v5e);mNr=r(JWt,"convbert"),JWt.forEach(t),gNr=r(eze," \u2014 "),$ee=n(eze,"A",{href:!0});var YWt=s($ee);hNr=r(YWt,"TFConvBertForSequenceClassification"),YWt.forEach(t),pNr=r(eze," (ConvBERT model)"),eze.forEach(t),_Nr=i(ne),b3=n(ne,"LI",{});var oze=s(b3);F5e=n(oze,"STRONG",{});var KWt=s(F5e);uNr=r(KWt,"ctrl"),KWt.forEach(t),bNr=r(oze," \u2014 "),kee=n(oze,"A",{href:!0});var ZWt=s(kee);vNr=r(ZWt,"TFCTRLForSequenceClassification"),ZWt.forEach(t),FNr=r(oze," (CTRL model)"),oze.forEach(t),TNr=i(ne),v3=n(ne,"LI",{});var rze=s(v3);T5e=n(rze,"STRONG",{});var eQt=s(T5e);MNr=r(eQt,"deberta"),eQt.forEach(t),ENr=r(rze," \u2014 "),See=n(rze,"A",{href:!0});var oQt=s(See);CNr=r(oQt,"TFDebertaForSequenceClassification"),oQt.forEach(t),wNr=r(rze," (DeBERTa model)"),rze.forEach(t),ANr=i(ne),F3=n(ne,"LI",{});var tze=s(F3);M5e=n(tze,"STRONG",{});var rQt=s(M5e);LNr=r(rQt,"deberta-v2"),rQt.forEach(t),yNr=r(tze," \u2014 "),Ree=n(tze,"A",{href:!0});var tQt=s(Ree);xNr=r(tQt,"TFDebertaV2ForSequenceClassification"),tQt.forEach(t),$Nr=r(tze," (DeBERTa-v2 model)"),tze.forEach(t),kNr=i(ne),T3=n(ne,"LI",{});var aze=s(T3);E5e=n(aze,"STRONG",{});var aQt=s(E5e);SNr=r(aQt,"distilbert"),aQt.forEach(t),RNr=r(aze," \u2014 "),Pee=n(aze,"A",{href:!0});var nQt=s(Pee);PNr=r(nQt,"TFDistilBertForSequenceClassification"),nQt.forEach(t),BNr=r(aze," (DistilBERT model)"),aze.forEach(t),INr=i(ne),M3=n(ne,"LI",{});var nze=s(M3);C5e=n(nze,"STRONG",{});var sQt=s(C5e);NNr=r(sQt,"electra"),sQt.forEach(t),qNr=r(nze," \u2014 "),Bee=n(nze,"A",{href:!0});var lQt=s(Bee);jNr=r(lQt,"TFElectraForSequenceClassification"),lQt.forEach(t),DNr=r(nze," (ELECTRA model)"),nze.forEach(t),GNr=i(ne),E3=n(ne,"LI",{});var sze=s(E3);w5e=n(sze,"STRONG",{});var iQt=s(w5e);ONr=r(iQt,"flaubert"),iQt.forEach(t),VNr=r(sze," \u2014 "),Iee=n(sze,"A",{href:!0});var dQt=s(Iee);XNr=r(dQt,"TFFlaubertForSequenceClassification"),dQt.forEach(t),zNr=r(sze," (FlauBERT model)"),sze.forEach(t),WNr=i(ne),C3=n(ne,"LI",{});var lze=s(C3);A5e=n(lze,"STRONG",{});var cQt=s(A5e);QNr=r(cQt,"funnel"),cQt.forEach(t),UNr=r(lze," \u2014 "),Nee=n(lze,"A",{href:!0});var fQt=s(Nee);HNr=r(fQt,"TFFunnelForSequenceClassification"),fQt.forEach(t),JNr=r(lze," (Funnel Transformer model)"),lze.forEach(t),YNr=i(ne),w3=n(ne,"LI",{});var ize=s(w3);L5e=n(ize,"STRONG",{});var mQt=s(L5e);KNr=r(mQt,"gpt2"),mQt.forEach(t),ZNr=r(ize," \u2014 "),qee=n(ize,"A",{href:!0});var gQt=s(qee);eqr=r(gQt,"TFGPT2ForSequenceClassification"),gQt.forEach(t),oqr=r(ize," (OpenAI GPT-2 model)"),ize.forEach(t),rqr=i(ne),A3=n(ne,"LI",{});var dze=s(A3);y5e=n(dze,"STRONG",{});var hQt=s(y5e);tqr=r(hQt,"gptj"),hQt.forEach(t),aqr=r(dze," \u2014 "),jee=n(dze,"A",{href:!0});var pQt=s(jee);nqr=r(pQt,"TFGPTJForSequenceClassification"),pQt.forEach(t),sqr=r(dze," (GPT-J model)"),dze.forEach(t),lqr=i(ne),L3=n(ne,"LI",{});var cze=s(L3);x5e=n(cze,"STRONG",{});var _Qt=s(x5e);iqr=r(_Qt,"layoutlm"),_Qt.forEach(t),dqr=r(cze," \u2014 "),Dee=n(cze,"A",{href:!0});var uQt=s(Dee);cqr=r(uQt,"TFLayoutLMForSequenceClassification"),uQt.forEach(t),fqr=r(cze," (LayoutLM model)"),cze.forEach(t),mqr=i(ne),y3=n(ne,"LI",{});var fze=s(y3);$5e=n(fze,"STRONG",{});var bQt=s($5e);gqr=r(bQt,"longformer"),bQt.forEach(t),hqr=r(fze," \u2014 "),Gee=n(fze,"A",{href:!0});var vQt=s(Gee);pqr=r(vQt,"TFLongformerForSequenceClassification"),vQt.forEach(t),_qr=r(fze," (Longformer model)"),fze.forEach(t),uqr=i(ne),x3=n(ne,"LI",{});var mze=s(x3);k5e=n(mze,"STRONG",{});var FQt=s(k5e);bqr=r(FQt,"mobilebert"),FQt.forEach(t),vqr=r(mze," \u2014 "),Oee=n(mze,"A",{href:!0});var TQt=s(Oee);Fqr=r(TQt,"TFMobileBertForSequenceClassification"),TQt.forEach(t),Tqr=r(mze," (MobileBERT model)"),mze.forEach(t),Mqr=i(ne),$3=n(ne,"LI",{});var gze=s($3);S5e=n(gze,"STRONG",{});var MQt=s(S5e);Eqr=r(MQt,"mpnet"),MQt.forEach(t),Cqr=r(gze," \u2014 "),Vee=n(gze,"A",{href:!0});var EQt=s(Vee);wqr=r(EQt,"TFMPNetForSequenceClassification"),EQt.forEach(t),Aqr=r(gze," (MPNet model)"),gze.forEach(t),Lqr=i(ne),k3=n(ne,"LI",{});var hze=s(k3);R5e=n(hze,"STRONG",{});var CQt=s(R5e);yqr=r(CQt,"openai-gpt"),CQt.forEach(t),xqr=r(hze," \u2014 "),Xee=n(hze,"A",{href:!0});var wQt=s(Xee);$qr=r(wQt,"TFOpenAIGPTForSequenceClassification"),wQt.forEach(t),kqr=r(hze," (OpenAI GPT model)"),hze.forEach(t),Sqr=i(ne),S3=n(ne,"LI",{});var pze=s(S3);P5e=n(pze,"STRONG",{});var AQt=s(P5e);Rqr=r(AQt,"rembert"),AQt.forEach(t),Pqr=r(pze," \u2014 "),zee=n(pze,"A",{href:!0});var LQt=s(zee);Bqr=r(LQt,"TFRemBertForSequenceClassification"),LQt.forEach(t),Iqr=r(pze," (RemBERT model)"),pze.forEach(t),Nqr=i(ne),R3=n(ne,"LI",{});var _ze=s(R3);B5e=n(_ze,"STRONG",{});var yQt=s(B5e);qqr=r(yQt,"roberta"),yQt.forEach(t),jqr=r(_ze," \u2014 "),Wee=n(_ze,"A",{href:!0});var xQt=s(Wee);Dqr=r(xQt,"TFRobertaForSequenceClassification"),xQt.forEach(t),Gqr=r(_ze," (RoBERTa model)"),_ze.forEach(t),Oqr=i(ne),P3=n(ne,"LI",{});var uze=s(P3);I5e=n(uze,"STRONG",{});var $Qt=s(I5e);Vqr=r($Qt,"roformer"),$Qt.forEach(t),Xqr=r(uze," \u2014 "),Qee=n(uze,"A",{href:!0});var kQt=s(Qee);zqr=r(kQt,"TFRoFormerForSequenceClassification"),kQt.forEach(t),Wqr=r(uze," (RoFormer model)"),uze.forEach(t),Qqr=i(ne),B3=n(ne,"LI",{});var bze=s(B3);N5e=n(bze,"STRONG",{});var SQt=s(N5e);Uqr=r(SQt,"tapas"),SQt.forEach(t),Hqr=r(bze," \u2014 "),Uee=n(bze,"A",{href:!0});var RQt=s(Uee);Jqr=r(RQt,"TFTapasForSequenceClassification"),RQt.forEach(t),Yqr=r(bze," (TAPAS model)"),bze.forEach(t),Kqr=i(ne),I3=n(ne,"LI",{});var vze=s(I3);q5e=n(vze,"STRONG",{});var PQt=s(q5e);Zqr=r(PQt,"transfo-xl"),PQt.forEach(t),ejr=r(vze," \u2014 "),Hee=n(vze,"A",{href:!0});var BQt=s(Hee);ojr=r(BQt,"TFTransfoXLForSequenceClassification"),BQt.forEach(t),rjr=r(vze," (Transformer-XL model)"),vze.forEach(t),tjr=i(ne),N3=n(ne,"LI",{});var Fze=s(N3);j5e=n(Fze,"STRONG",{});var IQt=s(j5e);ajr=r(IQt,"xlm"),IQt.forEach(t),njr=r(Fze," \u2014 "),Jee=n(Fze,"A",{href:!0});var NQt=s(Jee);sjr=r(NQt,"TFXLMForSequenceClassification"),NQt.forEach(t),ljr=r(Fze," (XLM model)"),Fze.forEach(t),ijr=i(ne),q3=n(ne,"LI",{});var Tze=s(q3);D5e=n(Tze,"STRONG",{});var qQt=s(D5e);djr=r(qQt,"xlm-roberta"),qQt.forEach(t),cjr=r(Tze," \u2014 "),Yee=n(Tze,"A",{href:!0});var jQt=s(Yee);fjr=r(jQt,"TFXLMRobertaForSequenceClassification"),jQt.forEach(t),mjr=r(Tze," (XLM-RoBERTa model)"),Tze.forEach(t),gjr=i(ne),j3=n(ne,"LI",{});var Mze=s(j3);G5e=n(Mze,"STRONG",{});var DQt=s(G5e);hjr=r(DQt,"xlnet"),DQt.forEach(t),pjr=r(Mze," \u2014 "),Kee=n(Mze,"A",{href:!0});var GQt=s(Kee);_jr=r(GQt,"TFXLNetForSequenceClassification"),GQt.forEach(t),ujr=r(Mze," (XLNet model)"),Mze.forEach(t),ne.forEach(t),bjr=i(di),T(D3.$$.fragment,di),di.forEach(t),ii.forEach(t),sJe=i(f),rf=n(f,"H2",{class:!0});var MKe=s(rf);G3=n(MKe,"A",{id:!0,class:!0,href:!0});var OQt=s(G3);O5e=n(OQt,"SPAN",{});var VQt=s(O5e);T(pk.$$.fragment,VQt),VQt.forEach(t),OQt.forEach(t),vjr=i(MKe),V5e=n(MKe,"SPAN",{});var XQt=s(V5e);Fjr=r(XQt,"TFAutoModelForMultipleChoice"),XQt.forEach(t),MKe.forEach(t),lJe=i(f),hr=n(f,"DIV",{class:!0});var ci=s(hr);T(_k.$$.fragment,ci),Tjr=i(ci),tf=n(ci,"P",{});var Lse=s(tf);Mjr=r(Lse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Zee=n(Lse,"A",{href:!0});var zQt=s(Zee);Ejr=r(zQt,"from_pretrained()"),zQt.forEach(t),Cjr=r(Lse," class method or the "),eoe=n(Lse,"A",{href:!0});var WQt=s(eoe);wjr=r(WQt,"from_config()"),WQt.forEach(t),Ajr=r(Lse,` class
method.`),Lse.forEach(t),Ljr=i(ci),uk=n(ci,"P",{});var EKe=s(uk);yjr=r(EKe,"This class cannot be instantiated directly using "),X5e=n(EKe,"CODE",{});var QQt=s(X5e);xjr=r(QQt,"__init__()"),QQt.forEach(t),$jr=r(EKe," (throws an error)."),EKe.forEach(t),kjr=i(ci),Ht=n(ci,"DIV",{class:!0});var VL=s(Ht);T(bk.$$.fragment,VL),Sjr=i(VL),z5e=n(VL,"P",{});var UQt=s(z5e);Rjr=r(UQt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),UQt.forEach(t),Pjr=i(VL),af=n(VL,"P",{});var yse=s(af);Bjr=r(yse,`Note:
Loading a model from its configuration file does `),W5e=n(yse,"STRONG",{});var HQt=s(W5e);Ijr=r(HQt,"not"),HQt.forEach(t),Njr=r(yse,` load the model weights. It only affects the
model\u2019s configuration. Use `),ooe=n(yse,"A",{href:!0});var JQt=s(ooe);qjr=r(JQt,"from_pretrained()"),JQt.forEach(t),jjr=r(yse," to load the model weights."),yse.forEach(t),Djr=i(VL),T(O3.$$.fragment,VL),VL.forEach(t),Gjr=i(ci),Vr=n(ci,"DIV",{class:!0});var fi=s(Vr);T(vk.$$.fragment,fi),Ojr=i(fi),Q5e=n(fi,"P",{});var YQt=s(Q5e);Vjr=r(YQt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),YQt.forEach(t),Xjr=i(fi),xn=n(fi,"P",{});var XL=s(xn);zjr=r(XL,"The model class to instantiate is selected based on the "),U5e=n(XL,"CODE",{});var KQt=s(U5e);Wjr=r(KQt,"model_type"),KQt.forEach(t),Qjr=r(XL,` property of the config object (either
passed as an argument or loaded from `),H5e=n(XL,"CODE",{});var ZQt=s(H5e);Ujr=r(ZQt,"pretrained_model_name_or_path"),ZQt.forEach(t),Hjr=r(XL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J5e=n(XL,"CODE",{});var eUt=s(J5e);Jjr=r(eUt,"pretrained_model_name_or_path"),eUt.forEach(t),Yjr=r(XL,":"),XL.forEach(t),Kjr=i(fi),ve=n(fi,"UL",{});var Te=s(ve);V3=n(Te,"LI",{});var Eze=s(V3);Y5e=n(Eze,"STRONG",{});var oUt=s(Y5e);Zjr=r(oUt,"albert"),oUt.forEach(t),eDr=r(Eze," \u2014 "),roe=n(Eze,"A",{href:!0});var rUt=s(roe);oDr=r(rUt,"TFAlbertForMultipleChoice"),rUt.forEach(t),rDr=r(Eze," (ALBERT model)"),Eze.forEach(t),tDr=i(Te),X3=n(Te,"LI",{});var Cze=s(X3);K5e=n(Cze,"STRONG",{});var tUt=s(K5e);aDr=r(tUt,"bert"),tUt.forEach(t),nDr=r(Cze," \u2014 "),toe=n(Cze,"A",{href:!0});var aUt=s(toe);sDr=r(aUt,"TFBertForMultipleChoice"),aUt.forEach(t),lDr=r(Cze," (BERT model)"),Cze.forEach(t),iDr=i(Te),z3=n(Te,"LI",{});var wze=s(z3);Z5e=n(wze,"STRONG",{});var nUt=s(Z5e);dDr=r(nUt,"camembert"),nUt.forEach(t),cDr=r(wze," \u2014 "),aoe=n(wze,"A",{href:!0});var sUt=s(aoe);fDr=r(sUt,"TFCamembertForMultipleChoice"),sUt.forEach(t),mDr=r(wze," (CamemBERT model)"),wze.forEach(t),gDr=i(Te),W3=n(Te,"LI",{});var Aze=s(W3);e0e=n(Aze,"STRONG",{});var lUt=s(e0e);hDr=r(lUt,"convbert"),lUt.forEach(t),pDr=r(Aze," \u2014 "),noe=n(Aze,"A",{href:!0});var iUt=s(noe);_Dr=r(iUt,"TFConvBertForMultipleChoice"),iUt.forEach(t),uDr=r(Aze," (ConvBERT model)"),Aze.forEach(t),bDr=i(Te),Q3=n(Te,"LI",{});var Lze=s(Q3);o0e=n(Lze,"STRONG",{});var dUt=s(o0e);vDr=r(dUt,"distilbert"),dUt.forEach(t),FDr=r(Lze," \u2014 "),soe=n(Lze,"A",{href:!0});var cUt=s(soe);TDr=r(cUt,"TFDistilBertForMultipleChoice"),cUt.forEach(t),MDr=r(Lze," (DistilBERT model)"),Lze.forEach(t),EDr=i(Te),U3=n(Te,"LI",{});var yze=s(U3);r0e=n(yze,"STRONG",{});var fUt=s(r0e);CDr=r(fUt,"electra"),fUt.forEach(t),wDr=r(yze," \u2014 "),loe=n(yze,"A",{href:!0});var mUt=s(loe);ADr=r(mUt,"TFElectraForMultipleChoice"),mUt.forEach(t),LDr=r(yze," (ELECTRA model)"),yze.forEach(t),yDr=i(Te),H3=n(Te,"LI",{});var xze=s(H3);t0e=n(xze,"STRONG",{});var gUt=s(t0e);xDr=r(gUt,"flaubert"),gUt.forEach(t),$Dr=r(xze," \u2014 "),ioe=n(xze,"A",{href:!0});var hUt=s(ioe);kDr=r(hUt,"TFFlaubertForMultipleChoice"),hUt.forEach(t),SDr=r(xze," (FlauBERT model)"),xze.forEach(t),RDr=i(Te),J3=n(Te,"LI",{});var $ze=s(J3);a0e=n($ze,"STRONG",{});var pUt=s(a0e);PDr=r(pUt,"funnel"),pUt.forEach(t),BDr=r($ze," \u2014 "),doe=n($ze,"A",{href:!0});var _Ut=s(doe);IDr=r(_Ut,"TFFunnelForMultipleChoice"),_Ut.forEach(t),NDr=r($ze," (Funnel Transformer model)"),$ze.forEach(t),qDr=i(Te),Y3=n(Te,"LI",{});var kze=s(Y3);n0e=n(kze,"STRONG",{});var uUt=s(n0e);jDr=r(uUt,"longformer"),uUt.forEach(t),DDr=r(kze," \u2014 "),coe=n(kze,"A",{href:!0});var bUt=s(coe);GDr=r(bUt,"TFLongformerForMultipleChoice"),bUt.forEach(t),ODr=r(kze," (Longformer model)"),kze.forEach(t),VDr=i(Te),K3=n(Te,"LI",{});var Sze=s(K3);s0e=n(Sze,"STRONG",{});var vUt=s(s0e);XDr=r(vUt,"mobilebert"),vUt.forEach(t),zDr=r(Sze," \u2014 "),foe=n(Sze,"A",{href:!0});var FUt=s(foe);WDr=r(FUt,"TFMobileBertForMultipleChoice"),FUt.forEach(t),QDr=r(Sze," (MobileBERT model)"),Sze.forEach(t),UDr=i(Te),Z3=n(Te,"LI",{});var Rze=s(Z3);l0e=n(Rze,"STRONG",{});var TUt=s(l0e);HDr=r(TUt,"mpnet"),TUt.forEach(t),JDr=r(Rze," \u2014 "),moe=n(Rze,"A",{href:!0});var MUt=s(moe);YDr=r(MUt,"TFMPNetForMultipleChoice"),MUt.forEach(t),KDr=r(Rze," (MPNet model)"),Rze.forEach(t),ZDr=i(Te),e5=n(Te,"LI",{});var Pze=s(e5);i0e=n(Pze,"STRONG",{});var EUt=s(i0e);eGr=r(EUt,"rembert"),EUt.forEach(t),oGr=r(Pze," \u2014 "),goe=n(Pze,"A",{href:!0});var CUt=s(goe);rGr=r(CUt,"TFRemBertForMultipleChoice"),CUt.forEach(t),tGr=r(Pze," (RemBERT model)"),Pze.forEach(t),aGr=i(Te),o5=n(Te,"LI",{});var Bze=s(o5);d0e=n(Bze,"STRONG",{});var wUt=s(d0e);nGr=r(wUt,"roberta"),wUt.forEach(t),sGr=r(Bze," \u2014 "),hoe=n(Bze,"A",{href:!0});var AUt=s(hoe);lGr=r(AUt,"TFRobertaForMultipleChoice"),AUt.forEach(t),iGr=r(Bze," (RoBERTa model)"),Bze.forEach(t),dGr=i(Te),r5=n(Te,"LI",{});var Ize=s(r5);c0e=n(Ize,"STRONG",{});var LUt=s(c0e);cGr=r(LUt,"roformer"),LUt.forEach(t),fGr=r(Ize," \u2014 "),poe=n(Ize,"A",{href:!0});var yUt=s(poe);mGr=r(yUt,"TFRoFormerForMultipleChoice"),yUt.forEach(t),gGr=r(Ize," (RoFormer model)"),Ize.forEach(t),hGr=i(Te),t5=n(Te,"LI",{});var Nze=s(t5);f0e=n(Nze,"STRONG",{});var xUt=s(f0e);pGr=r(xUt,"xlm"),xUt.forEach(t),_Gr=r(Nze," \u2014 "),_oe=n(Nze,"A",{href:!0});var $Ut=s(_oe);uGr=r($Ut,"TFXLMForMultipleChoice"),$Ut.forEach(t),bGr=r(Nze," (XLM model)"),Nze.forEach(t),vGr=i(Te),a5=n(Te,"LI",{});var qze=s(a5);m0e=n(qze,"STRONG",{});var kUt=s(m0e);FGr=r(kUt,"xlm-roberta"),kUt.forEach(t),TGr=r(qze," \u2014 "),uoe=n(qze,"A",{href:!0});var SUt=s(uoe);MGr=r(SUt,"TFXLMRobertaForMultipleChoice"),SUt.forEach(t),EGr=r(qze," (XLM-RoBERTa model)"),qze.forEach(t),CGr=i(Te),n5=n(Te,"LI",{});var jze=s(n5);g0e=n(jze,"STRONG",{});var RUt=s(g0e);wGr=r(RUt,"xlnet"),RUt.forEach(t),AGr=r(jze," \u2014 "),boe=n(jze,"A",{href:!0});var PUt=s(boe);LGr=r(PUt,"TFXLNetForMultipleChoice"),PUt.forEach(t),yGr=r(jze," (XLNet model)"),jze.forEach(t),Te.forEach(t),xGr=i(fi),T(s5.$$.fragment,fi),fi.forEach(t),ci.forEach(t),iJe=i(f),nf=n(f,"H2",{class:!0});var CKe=s(nf);l5=n(CKe,"A",{id:!0,class:!0,href:!0});var BUt=s(l5);h0e=n(BUt,"SPAN",{});var IUt=s(h0e);T(Fk.$$.fragment,IUt),IUt.forEach(t),BUt.forEach(t),$Gr=i(CKe),p0e=n(CKe,"SPAN",{});var NUt=s(p0e);kGr=r(NUt,"TFAutoModelForNextSentencePrediction"),NUt.forEach(t),CKe.forEach(t),dJe=i(f),pr=n(f,"DIV",{class:!0});var mi=s(pr);T(Tk.$$.fragment,mi),SGr=i(mi),sf=n(mi,"P",{});var xse=s(sf);RGr=r(xse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),voe=n(xse,"A",{href:!0});var qUt=s(voe);PGr=r(qUt,"from_pretrained()"),qUt.forEach(t),BGr=r(xse," class method or the "),Foe=n(xse,"A",{href:!0});var jUt=s(Foe);IGr=r(jUt,"from_config()"),jUt.forEach(t),NGr=r(xse,` class
method.`),xse.forEach(t),qGr=i(mi),Mk=n(mi,"P",{});var wKe=s(Mk);jGr=r(wKe,"This class cannot be instantiated directly using "),_0e=n(wKe,"CODE",{});var DUt=s(_0e);DGr=r(DUt,"__init__()"),DUt.forEach(t),GGr=r(wKe," (throws an error)."),wKe.forEach(t),OGr=i(mi),Jt=n(mi,"DIV",{class:!0});var zL=s(Jt);T(Ek.$$.fragment,zL),VGr=i(zL),u0e=n(zL,"P",{});var GUt=s(u0e);XGr=r(GUt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),GUt.forEach(t),zGr=i(zL),lf=n(zL,"P",{});var $se=s(lf);WGr=r($se,`Note:
Loading a model from its configuration file does `),b0e=n($se,"STRONG",{});var OUt=s(b0e);QGr=r(OUt,"not"),OUt.forEach(t),UGr=r($se,` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=n($se,"A",{href:!0});var VUt=s(Toe);HGr=r(VUt,"from_pretrained()"),VUt.forEach(t),JGr=r($se," to load the model weights."),$se.forEach(t),YGr=i(zL),T(i5.$$.fragment,zL),zL.forEach(t),KGr=i(mi),Xr=n(mi,"DIV",{class:!0});var gi=s(Xr);T(Ck.$$.fragment,gi),ZGr=i(gi),v0e=n(gi,"P",{});var XUt=s(v0e);eOr=r(XUt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),XUt.forEach(t),oOr=i(gi),$n=n(gi,"P",{});var WL=s($n);rOr=r(WL,"The model class to instantiate is selected based on the "),F0e=n(WL,"CODE",{});var zUt=s(F0e);tOr=r(zUt,"model_type"),zUt.forEach(t),aOr=r(WL,` property of the config object (either
passed as an argument or loaded from `),T0e=n(WL,"CODE",{});var WUt=s(T0e);nOr=r(WUt,"pretrained_model_name_or_path"),WUt.forEach(t),sOr=r(WL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M0e=n(WL,"CODE",{});var QUt=s(M0e);lOr=r(QUt,"pretrained_model_name_or_path"),QUt.forEach(t),iOr=r(WL,":"),WL.forEach(t),dOr=i(gi),wk=n(gi,"UL",{});var AKe=s(wk);d5=n(AKe,"LI",{});var Dze=s(d5);E0e=n(Dze,"STRONG",{});var UUt=s(E0e);cOr=r(UUt,"bert"),UUt.forEach(t),fOr=r(Dze," \u2014 "),Moe=n(Dze,"A",{href:!0});var HUt=s(Moe);mOr=r(HUt,"TFBertForNextSentencePrediction"),HUt.forEach(t),gOr=r(Dze," (BERT model)"),Dze.forEach(t),hOr=i(AKe),c5=n(AKe,"LI",{});var Gze=s(c5);C0e=n(Gze,"STRONG",{});var JUt=s(C0e);pOr=r(JUt,"mobilebert"),JUt.forEach(t),_Or=r(Gze," \u2014 "),Eoe=n(Gze,"A",{href:!0});var YUt=s(Eoe);uOr=r(YUt,"TFMobileBertForNextSentencePrediction"),YUt.forEach(t),bOr=r(Gze," (MobileBERT model)"),Gze.forEach(t),AKe.forEach(t),vOr=i(gi),T(f5.$$.fragment,gi),gi.forEach(t),mi.forEach(t),cJe=i(f),df=n(f,"H2",{class:!0});var LKe=s(df);m5=n(LKe,"A",{id:!0,class:!0,href:!0});var KUt=s(m5);w0e=n(KUt,"SPAN",{});var ZUt=s(w0e);T(Ak.$$.fragment,ZUt),ZUt.forEach(t),KUt.forEach(t),FOr=i(LKe),A0e=n(LKe,"SPAN",{});var eHt=s(A0e);TOr=r(eHt,"TFAutoModelForTableQuestionAnswering"),eHt.forEach(t),LKe.forEach(t),fJe=i(f),_r=n(f,"DIV",{class:!0});var hi=s(_r);T(Lk.$$.fragment,hi),MOr=i(hi),cf=n(hi,"P",{});var kse=s(cf);EOr=r(kse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Coe=n(kse,"A",{href:!0});var oHt=s(Coe);COr=r(oHt,"from_pretrained()"),oHt.forEach(t),wOr=r(kse," class method or the "),woe=n(kse,"A",{href:!0});var rHt=s(woe);AOr=r(rHt,"from_config()"),rHt.forEach(t),LOr=r(kse,` class
method.`),kse.forEach(t),yOr=i(hi),yk=n(hi,"P",{});var yKe=s(yk);xOr=r(yKe,"This class cannot be instantiated directly using "),L0e=n(yKe,"CODE",{});var tHt=s(L0e);$Or=r(tHt,"__init__()"),tHt.forEach(t),kOr=r(yKe," (throws an error)."),yKe.forEach(t),SOr=i(hi),Yt=n(hi,"DIV",{class:!0});var QL=s(Yt);T(xk.$$.fragment,QL),ROr=i(QL),y0e=n(QL,"P",{});var aHt=s(y0e);POr=r(aHt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),aHt.forEach(t),BOr=i(QL),ff=n(QL,"P",{});var Sse=s(ff);IOr=r(Sse,`Note:
Loading a model from its configuration file does `),x0e=n(Sse,"STRONG",{});var nHt=s(x0e);NOr=r(nHt,"not"),nHt.forEach(t),qOr=r(Sse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aoe=n(Sse,"A",{href:!0});var sHt=s(Aoe);jOr=r(sHt,"from_pretrained()"),sHt.forEach(t),DOr=r(Sse," to load the model weights."),Sse.forEach(t),GOr=i(QL),T(g5.$$.fragment,QL),QL.forEach(t),OOr=i(hi),zr=n(hi,"DIV",{class:!0});var pi=s(zr);T($k.$$.fragment,pi),VOr=i(pi),$0e=n(pi,"P",{});var lHt=s($0e);XOr=r(lHt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),lHt.forEach(t),zOr=i(pi),kn=n(pi,"P",{});var UL=s(kn);WOr=r(UL,"The model class to instantiate is selected based on the "),k0e=n(UL,"CODE",{});var iHt=s(k0e);QOr=r(iHt,"model_type"),iHt.forEach(t),UOr=r(UL,` property of the config object (either
passed as an argument or loaded from `),S0e=n(UL,"CODE",{});var dHt=s(S0e);HOr=r(dHt,"pretrained_model_name_or_path"),dHt.forEach(t),JOr=r(UL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R0e=n(UL,"CODE",{});var cHt=s(R0e);YOr=r(cHt,"pretrained_model_name_or_path"),cHt.forEach(t),KOr=r(UL,":"),UL.forEach(t),ZOr=i(pi),P0e=n(pi,"UL",{});var fHt=s(P0e);h5=n(fHt,"LI",{});var Oze=s(h5);B0e=n(Oze,"STRONG",{});var mHt=s(B0e);eVr=r(mHt,"tapas"),mHt.forEach(t),oVr=r(Oze," \u2014 "),Loe=n(Oze,"A",{href:!0});var gHt=s(Loe);rVr=r(gHt,"TFTapasForQuestionAnswering"),gHt.forEach(t),tVr=r(Oze," (TAPAS model)"),Oze.forEach(t),fHt.forEach(t),aVr=i(pi),T(p5.$$.fragment,pi),pi.forEach(t),hi.forEach(t),mJe=i(f),mf=n(f,"H2",{class:!0});var xKe=s(mf);_5=n(xKe,"A",{id:!0,class:!0,href:!0});var hHt=s(_5);I0e=n(hHt,"SPAN",{});var pHt=s(I0e);T(kk.$$.fragment,pHt),pHt.forEach(t),hHt.forEach(t),nVr=i(xKe),N0e=n(xKe,"SPAN",{});var _Ht=s(N0e);sVr=r(_Ht,"TFAutoModelForTokenClassification"),_Ht.forEach(t),xKe.forEach(t),gJe=i(f),ur=n(f,"DIV",{class:!0});var _i=s(ur);T(Sk.$$.fragment,_i),lVr=i(_i),gf=n(_i,"P",{});var Rse=s(gf);iVr=r(Rse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yoe=n(Rse,"A",{href:!0});var uHt=s(yoe);dVr=r(uHt,"from_pretrained()"),uHt.forEach(t),cVr=r(Rse," class method or the "),xoe=n(Rse,"A",{href:!0});var bHt=s(xoe);fVr=r(bHt,"from_config()"),bHt.forEach(t),mVr=r(Rse,` class
method.`),Rse.forEach(t),gVr=i(_i),Rk=n(_i,"P",{});var $Ke=s(Rk);hVr=r($Ke,"This class cannot be instantiated directly using "),q0e=n($Ke,"CODE",{});var vHt=s(q0e);pVr=r(vHt,"__init__()"),vHt.forEach(t),_Vr=r($Ke," (throws an error)."),$Ke.forEach(t),uVr=i(_i),Kt=n(_i,"DIV",{class:!0});var HL=s(Kt);T(Pk.$$.fragment,HL),bVr=i(HL),j0e=n(HL,"P",{});var FHt=s(j0e);vVr=r(FHt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),FHt.forEach(t),FVr=i(HL),hf=n(HL,"P",{});var Pse=s(hf);TVr=r(Pse,`Note:
Loading a model from its configuration file does `),D0e=n(Pse,"STRONG",{});var THt=s(D0e);MVr=r(THt,"not"),THt.forEach(t),EVr=r(Pse,` load the model weights. It only affects the
model\u2019s configuration. Use `),$oe=n(Pse,"A",{href:!0});var MHt=s($oe);CVr=r(MHt,"from_pretrained()"),MHt.forEach(t),wVr=r(Pse," to load the model weights."),Pse.forEach(t),AVr=i(HL),T(u5.$$.fragment,HL),HL.forEach(t),LVr=i(_i),Wr=n(_i,"DIV",{class:!0});var ui=s(Wr);T(Bk.$$.fragment,ui),yVr=i(ui),G0e=n(ui,"P",{});var EHt=s(G0e);xVr=r(EHt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),EHt.forEach(t),$Vr=i(ui),Sn=n(ui,"P",{});var JL=s(Sn);kVr=r(JL,"The model class to instantiate is selected based on the "),O0e=n(JL,"CODE",{});var CHt=s(O0e);SVr=r(CHt,"model_type"),CHt.forEach(t),RVr=r(JL,` property of the config object (either
passed as an argument or loaded from `),V0e=n(JL,"CODE",{});var wHt=s(V0e);PVr=r(wHt,"pretrained_model_name_or_path"),wHt.forEach(t),BVr=r(JL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X0e=n(JL,"CODE",{});var AHt=s(X0e);IVr=r(AHt,"pretrained_model_name_or_path"),AHt.forEach(t),NVr=r(JL,":"),JL.forEach(t),qVr=i(ui),ce=n(ui,"UL",{});var pe=s(ce);b5=n(pe,"LI",{});var Vze=s(b5);z0e=n(Vze,"STRONG",{});var LHt=s(z0e);jVr=r(LHt,"albert"),LHt.forEach(t),DVr=r(Vze," \u2014 "),koe=n(Vze,"A",{href:!0});var yHt=s(koe);GVr=r(yHt,"TFAlbertForTokenClassification"),yHt.forEach(t),OVr=r(Vze," (ALBERT model)"),Vze.forEach(t),VVr=i(pe),v5=n(pe,"LI",{});var Xze=s(v5);W0e=n(Xze,"STRONG",{});var xHt=s(W0e);XVr=r(xHt,"bert"),xHt.forEach(t),zVr=r(Xze," \u2014 "),Soe=n(Xze,"A",{href:!0});var $Ht=s(Soe);WVr=r($Ht,"TFBertForTokenClassification"),$Ht.forEach(t),QVr=r(Xze," (BERT model)"),Xze.forEach(t),UVr=i(pe),F5=n(pe,"LI",{});var zze=s(F5);Q0e=n(zze,"STRONG",{});var kHt=s(Q0e);HVr=r(kHt,"camembert"),kHt.forEach(t),JVr=r(zze," \u2014 "),Roe=n(zze,"A",{href:!0});var SHt=s(Roe);YVr=r(SHt,"TFCamembertForTokenClassification"),SHt.forEach(t),KVr=r(zze," (CamemBERT model)"),zze.forEach(t),ZVr=i(pe),T5=n(pe,"LI",{});var Wze=s(T5);U0e=n(Wze,"STRONG",{});var RHt=s(U0e);eXr=r(RHt,"convbert"),RHt.forEach(t),oXr=r(Wze," \u2014 "),Poe=n(Wze,"A",{href:!0});var PHt=s(Poe);rXr=r(PHt,"TFConvBertForTokenClassification"),PHt.forEach(t),tXr=r(Wze," (ConvBERT model)"),Wze.forEach(t),aXr=i(pe),M5=n(pe,"LI",{});var Qze=s(M5);H0e=n(Qze,"STRONG",{});var BHt=s(H0e);nXr=r(BHt,"deberta"),BHt.forEach(t),sXr=r(Qze," \u2014 "),Boe=n(Qze,"A",{href:!0});var IHt=s(Boe);lXr=r(IHt,"TFDebertaForTokenClassification"),IHt.forEach(t),iXr=r(Qze," (DeBERTa model)"),Qze.forEach(t),dXr=i(pe),E5=n(pe,"LI",{});var Uze=s(E5);J0e=n(Uze,"STRONG",{});var NHt=s(J0e);cXr=r(NHt,"deberta-v2"),NHt.forEach(t),fXr=r(Uze," \u2014 "),Ioe=n(Uze,"A",{href:!0});var qHt=s(Ioe);mXr=r(qHt,"TFDebertaV2ForTokenClassification"),qHt.forEach(t),gXr=r(Uze," (DeBERTa-v2 model)"),Uze.forEach(t),hXr=i(pe),C5=n(pe,"LI",{});var Hze=s(C5);Y0e=n(Hze,"STRONG",{});var jHt=s(Y0e);pXr=r(jHt,"distilbert"),jHt.forEach(t),_Xr=r(Hze," \u2014 "),Noe=n(Hze,"A",{href:!0});var DHt=s(Noe);uXr=r(DHt,"TFDistilBertForTokenClassification"),DHt.forEach(t),bXr=r(Hze," (DistilBERT model)"),Hze.forEach(t),vXr=i(pe),w5=n(pe,"LI",{});var Jze=s(w5);K0e=n(Jze,"STRONG",{});var GHt=s(K0e);FXr=r(GHt,"electra"),GHt.forEach(t),TXr=r(Jze," \u2014 "),qoe=n(Jze,"A",{href:!0});var OHt=s(qoe);MXr=r(OHt,"TFElectraForTokenClassification"),OHt.forEach(t),EXr=r(Jze," (ELECTRA model)"),Jze.forEach(t),CXr=i(pe),A5=n(pe,"LI",{});var Yze=s(A5);Z0e=n(Yze,"STRONG",{});var VHt=s(Z0e);wXr=r(VHt,"flaubert"),VHt.forEach(t),AXr=r(Yze," \u2014 "),joe=n(Yze,"A",{href:!0});var XHt=s(joe);LXr=r(XHt,"TFFlaubertForTokenClassification"),XHt.forEach(t),yXr=r(Yze," (FlauBERT model)"),Yze.forEach(t),xXr=i(pe),L5=n(pe,"LI",{});var Kze=s(L5);ewe=n(Kze,"STRONG",{});var zHt=s(ewe);$Xr=r(zHt,"funnel"),zHt.forEach(t),kXr=r(Kze," \u2014 "),Doe=n(Kze,"A",{href:!0});var WHt=s(Doe);SXr=r(WHt,"TFFunnelForTokenClassification"),WHt.forEach(t),RXr=r(Kze," (Funnel Transformer model)"),Kze.forEach(t),PXr=i(pe),y5=n(pe,"LI",{});var Zze=s(y5);owe=n(Zze,"STRONG",{});var QHt=s(owe);BXr=r(QHt,"layoutlm"),QHt.forEach(t),IXr=r(Zze," \u2014 "),Goe=n(Zze,"A",{href:!0});var UHt=s(Goe);NXr=r(UHt,"TFLayoutLMForTokenClassification"),UHt.forEach(t),qXr=r(Zze," (LayoutLM model)"),Zze.forEach(t),jXr=i(pe),x5=n(pe,"LI",{});var eWe=s(x5);rwe=n(eWe,"STRONG",{});var HHt=s(rwe);DXr=r(HHt,"longformer"),HHt.forEach(t),GXr=r(eWe," \u2014 "),Ooe=n(eWe,"A",{href:!0});var JHt=s(Ooe);OXr=r(JHt,"TFLongformerForTokenClassification"),JHt.forEach(t),VXr=r(eWe," (Longformer model)"),eWe.forEach(t),XXr=i(pe),$5=n(pe,"LI",{});var oWe=s($5);twe=n(oWe,"STRONG",{});var YHt=s(twe);zXr=r(YHt,"mobilebert"),YHt.forEach(t),WXr=r(oWe," \u2014 "),Voe=n(oWe,"A",{href:!0});var KHt=s(Voe);QXr=r(KHt,"TFMobileBertForTokenClassification"),KHt.forEach(t),UXr=r(oWe," (MobileBERT model)"),oWe.forEach(t),HXr=i(pe),k5=n(pe,"LI",{});var rWe=s(k5);awe=n(rWe,"STRONG",{});var ZHt=s(awe);JXr=r(ZHt,"mpnet"),ZHt.forEach(t),YXr=r(rWe," \u2014 "),Xoe=n(rWe,"A",{href:!0});var eJt=s(Xoe);KXr=r(eJt,"TFMPNetForTokenClassification"),eJt.forEach(t),ZXr=r(rWe," (MPNet model)"),rWe.forEach(t),ezr=i(pe),S5=n(pe,"LI",{});var tWe=s(S5);nwe=n(tWe,"STRONG",{});var oJt=s(nwe);ozr=r(oJt,"rembert"),oJt.forEach(t),rzr=r(tWe," \u2014 "),zoe=n(tWe,"A",{href:!0});var rJt=s(zoe);tzr=r(rJt,"TFRemBertForTokenClassification"),rJt.forEach(t),azr=r(tWe," (RemBERT model)"),tWe.forEach(t),nzr=i(pe),R5=n(pe,"LI",{});var aWe=s(R5);swe=n(aWe,"STRONG",{});var tJt=s(swe);szr=r(tJt,"roberta"),tJt.forEach(t),lzr=r(aWe," \u2014 "),Woe=n(aWe,"A",{href:!0});var aJt=s(Woe);izr=r(aJt,"TFRobertaForTokenClassification"),aJt.forEach(t),dzr=r(aWe," (RoBERTa model)"),aWe.forEach(t),czr=i(pe),P5=n(pe,"LI",{});var nWe=s(P5);lwe=n(nWe,"STRONG",{});var nJt=s(lwe);fzr=r(nJt,"roformer"),nJt.forEach(t),mzr=r(nWe," \u2014 "),Qoe=n(nWe,"A",{href:!0});var sJt=s(Qoe);gzr=r(sJt,"TFRoFormerForTokenClassification"),sJt.forEach(t),hzr=r(nWe," (RoFormer model)"),nWe.forEach(t),pzr=i(pe),B5=n(pe,"LI",{});var sWe=s(B5);iwe=n(sWe,"STRONG",{});var lJt=s(iwe);_zr=r(lJt,"xlm"),lJt.forEach(t),uzr=r(sWe," \u2014 "),Uoe=n(sWe,"A",{href:!0});var iJt=s(Uoe);bzr=r(iJt,"TFXLMForTokenClassification"),iJt.forEach(t),vzr=r(sWe," (XLM model)"),sWe.forEach(t),Fzr=i(pe),I5=n(pe,"LI",{});var lWe=s(I5);dwe=n(lWe,"STRONG",{});var dJt=s(dwe);Tzr=r(dJt,"xlm-roberta"),dJt.forEach(t),Mzr=r(lWe," \u2014 "),Hoe=n(lWe,"A",{href:!0});var cJt=s(Hoe);Ezr=r(cJt,"TFXLMRobertaForTokenClassification"),cJt.forEach(t),Czr=r(lWe," (XLM-RoBERTa model)"),lWe.forEach(t),wzr=i(pe),N5=n(pe,"LI",{});var iWe=s(N5);cwe=n(iWe,"STRONG",{});var fJt=s(cwe);Azr=r(fJt,"xlnet"),fJt.forEach(t),Lzr=r(iWe," \u2014 "),Joe=n(iWe,"A",{href:!0});var mJt=s(Joe);yzr=r(mJt,"TFXLNetForTokenClassification"),mJt.forEach(t),xzr=r(iWe," (XLNet model)"),iWe.forEach(t),pe.forEach(t),$zr=i(ui),T(q5.$$.fragment,ui),ui.forEach(t),_i.forEach(t),hJe=i(f),pf=n(f,"H2",{class:!0});var kKe=s(pf);j5=n(kKe,"A",{id:!0,class:!0,href:!0});var gJt=s(j5);fwe=n(gJt,"SPAN",{});var hJt=s(fwe);T(Ik.$$.fragment,hJt),hJt.forEach(t),gJt.forEach(t),kzr=i(kKe),mwe=n(kKe,"SPAN",{});var pJt=s(mwe);Szr=r(pJt,"TFAutoModelForQuestionAnswering"),pJt.forEach(t),kKe.forEach(t),pJe=i(f),br=n(f,"DIV",{class:!0});var bi=s(br);T(Nk.$$.fragment,bi),Rzr=i(bi),_f=n(bi,"P",{});var Bse=s(_f);Pzr=r(Bse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Yoe=n(Bse,"A",{href:!0});var _Jt=s(Yoe);Bzr=r(_Jt,"from_pretrained()"),_Jt.forEach(t),Izr=r(Bse," class method or the "),Koe=n(Bse,"A",{href:!0});var uJt=s(Koe);Nzr=r(uJt,"from_config()"),uJt.forEach(t),qzr=r(Bse,` class
method.`),Bse.forEach(t),jzr=i(bi),qk=n(bi,"P",{});var SKe=s(qk);Dzr=r(SKe,"This class cannot be instantiated directly using "),gwe=n(SKe,"CODE",{});var bJt=s(gwe);Gzr=r(bJt,"__init__()"),bJt.forEach(t),Ozr=r(SKe," (throws an error)."),SKe.forEach(t),Vzr=i(bi),Zt=n(bi,"DIV",{class:!0});var YL=s(Zt);T(jk.$$.fragment,YL),Xzr=i(YL),hwe=n(YL,"P",{});var vJt=s(hwe);zzr=r(vJt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vJt.forEach(t),Wzr=i(YL),uf=n(YL,"P",{});var Ise=s(uf);Qzr=r(Ise,`Note:
Loading a model from its configuration file does `),pwe=n(Ise,"STRONG",{});var FJt=s(pwe);Uzr=r(FJt,"not"),FJt.forEach(t),Hzr=r(Ise,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=n(Ise,"A",{href:!0});var TJt=s(Zoe);Jzr=r(TJt,"from_pretrained()"),TJt.forEach(t),Yzr=r(Ise," to load the model weights."),Ise.forEach(t),Kzr=i(YL),T(D5.$$.fragment,YL),YL.forEach(t),Zzr=i(bi),Qr=n(bi,"DIV",{class:!0});var vi=s(Qr);T(Dk.$$.fragment,vi),eWr=i(vi),_we=n(vi,"P",{});var MJt=s(_we);oWr=r(MJt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),MJt.forEach(t),rWr=i(vi),Rn=n(vi,"P",{});var KL=s(Rn);tWr=r(KL,"The model class to instantiate is selected based on the "),uwe=n(KL,"CODE",{});var EJt=s(uwe);aWr=r(EJt,"model_type"),EJt.forEach(t),nWr=r(KL,` property of the config object (either
passed as an argument or loaded from `),bwe=n(KL,"CODE",{});var CJt=s(bwe);sWr=r(CJt,"pretrained_model_name_or_path"),CJt.forEach(t),lWr=r(KL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vwe=n(KL,"CODE",{});var wJt=s(vwe);iWr=r(wJt,"pretrained_model_name_or_path"),wJt.forEach(t),dWr=r(KL,":"),KL.forEach(t),cWr=i(vi),fe=n(vi,"UL",{});var _e=s(fe);G5=n(_e,"LI",{});var dWe=s(G5);Fwe=n(dWe,"STRONG",{});var AJt=s(Fwe);fWr=r(AJt,"albert"),AJt.forEach(t),mWr=r(dWe," \u2014 "),ere=n(dWe,"A",{href:!0});var LJt=s(ere);gWr=r(LJt,"TFAlbertForQuestionAnswering"),LJt.forEach(t),hWr=r(dWe," (ALBERT model)"),dWe.forEach(t),pWr=i(_e),O5=n(_e,"LI",{});var cWe=s(O5);Twe=n(cWe,"STRONG",{});var yJt=s(Twe);_Wr=r(yJt,"bert"),yJt.forEach(t),uWr=r(cWe," \u2014 "),ore=n(cWe,"A",{href:!0});var xJt=s(ore);bWr=r(xJt,"TFBertForQuestionAnswering"),xJt.forEach(t),vWr=r(cWe," (BERT model)"),cWe.forEach(t),FWr=i(_e),V5=n(_e,"LI",{});var fWe=s(V5);Mwe=n(fWe,"STRONG",{});var $Jt=s(Mwe);TWr=r($Jt,"camembert"),$Jt.forEach(t),MWr=r(fWe," \u2014 "),rre=n(fWe,"A",{href:!0});var kJt=s(rre);EWr=r(kJt,"TFCamembertForQuestionAnswering"),kJt.forEach(t),CWr=r(fWe," (CamemBERT model)"),fWe.forEach(t),wWr=i(_e),X5=n(_e,"LI",{});var mWe=s(X5);Ewe=n(mWe,"STRONG",{});var SJt=s(Ewe);AWr=r(SJt,"convbert"),SJt.forEach(t),LWr=r(mWe," \u2014 "),tre=n(mWe,"A",{href:!0});var RJt=s(tre);yWr=r(RJt,"TFConvBertForQuestionAnswering"),RJt.forEach(t),xWr=r(mWe," (ConvBERT model)"),mWe.forEach(t),$Wr=i(_e),z5=n(_e,"LI",{});var gWe=s(z5);Cwe=n(gWe,"STRONG",{});var PJt=s(Cwe);kWr=r(PJt,"deberta"),PJt.forEach(t),SWr=r(gWe," \u2014 "),are=n(gWe,"A",{href:!0});var BJt=s(are);RWr=r(BJt,"TFDebertaForQuestionAnswering"),BJt.forEach(t),PWr=r(gWe," (DeBERTa model)"),gWe.forEach(t),BWr=i(_e),W5=n(_e,"LI",{});var hWe=s(W5);wwe=n(hWe,"STRONG",{});var IJt=s(wwe);IWr=r(IJt,"deberta-v2"),IJt.forEach(t),NWr=r(hWe," \u2014 "),nre=n(hWe,"A",{href:!0});var NJt=s(nre);qWr=r(NJt,"TFDebertaV2ForQuestionAnswering"),NJt.forEach(t),jWr=r(hWe," (DeBERTa-v2 model)"),hWe.forEach(t),DWr=i(_e),Q5=n(_e,"LI",{});var pWe=s(Q5);Awe=n(pWe,"STRONG",{});var qJt=s(Awe);GWr=r(qJt,"distilbert"),qJt.forEach(t),OWr=r(pWe," \u2014 "),sre=n(pWe,"A",{href:!0});var jJt=s(sre);VWr=r(jJt,"TFDistilBertForQuestionAnswering"),jJt.forEach(t),XWr=r(pWe," (DistilBERT model)"),pWe.forEach(t),zWr=i(_e),U5=n(_e,"LI",{});var _We=s(U5);Lwe=n(_We,"STRONG",{});var DJt=s(Lwe);WWr=r(DJt,"electra"),DJt.forEach(t),QWr=r(_We," \u2014 "),lre=n(_We,"A",{href:!0});var GJt=s(lre);UWr=r(GJt,"TFElectraForQuestionAnswering"),GJt.forEach(t),HWr=r(_We," (ELECTRA model)"),_We.forEach(t),JWr=i(_e),H5=n(_e,"LI",{});var uWe=s(H5);ywe=n(uWe,"STRONG",{});var OJt=s(ywe);YWr=r(OJt,"flaubert"),OJt.forEach(t),KWr=r(uWe," \u2014 "),ire=n(uWe,"A",{href:!0});var VJt=s(ire);ZWr=r(VJt,"TFFlaubertForQuestionAnsweringSimple"),VJt.forEach(t),eQr=r(uWe," (FlauBERT model)"),uWe.forEach(t),oQr=i(_e),J5=n(_e,"LI",{});var bWe=s(J5);xwe=n(bWe,"STRONG",{});var XJt=s(xwe);rQr=r(XJt,"funnel"),XJt.forEach(t),tQr=r(bWe," \u2014 "),dre=n(bWe,"A",{href:!0});var zJt=s(dre);aQr=r(zJt,"TFFunnelForQuestionAnswering"),zJt.forEach(t),nQr=r(bWe," (Funnel Transformer model)"),bWe.forEach(t),sQr=i(_e),Y5=n(_e,"LI",{});var vWe=s(Y5);$we=n(vWe,"STRONG",{});var WJt=s($we);lQr=r(WJt,"gptj"),WJt.forEach(t),iQr=r(vWe," \u2014 "),cre=n(vWe,"A",{href:!0});var QJt=s(cre);dQr=r(QJt,"TFGPTJForQuestionAnswering"),QJt.forEach(t),cQr=r(vWe," (GPT-J model)"),vWe.forEach(t),fQr=i(_e),K5=n(_e,"LI",{});var FWe=s(K5);kwe=n(FWe,"STRONG",{});var UJt=s(kwe);mQr=r(UJt,"longformer"),UJt.forEach(t),gQr=r(FWe," \u2014 "),fre=n(FWe,"A",{href:!0});var HJt=s(fre);hQr=r(HJt,"TFLongformerForQuestionAnswering"),HJt.forEach(t),pQr=r(FWe," (Longformer model)"),FWe.forEach(t),_Qr=i(_e),Z5=n(_e,"LI",{});var TWe=s(Z5);Swe=n(TWe,"STRONG",{});var JJt=s(Swe);uQr=r(JJt,"mobilebert"),JJt.forEach(t),bQr=r(TWe," \u2014 "),mre=n(TWe,"A",{href:!0});var YJt=s(mre);vQr=r(YJt,"TFMobileBertForQuestionAnswering"),YJt.forEach(t),FQr=r(TWe," (MobileBERT model)"),TWe.forEach(t),TQr=i(_e),e0=n(_e,"LI",{});var MWe=s(e0);Rwe=n(MWe,"STRONG",{});var KJt=s(Rwe);MQr=r(KJt,"mpnet"),KJt.forEach(t),EQr=r(MWe," \u2014 "),gre=n(MWe,"A",{href:!0});var ZJt=s(gre);CQr=r(ZJt,"TFMPNetForQuestionAnswering"),ZJt.forEach(t),wQr=r(MWe," (MPNet model)"),MWe.forEach(t),AQr=i(_e),o0=n(_e,"LI",{});var EWe=s(o0);Pwe=n(EWe,"STRONG",{});var eYt=s(Pwe);LQr=r(eYt,"rembert"),eYt.forEach(t),yQr=r(EWe," \u2014 "),hre=n(EWe,"A",{href:!0});var oYt=s(hre);xQr=r(oYt,"TFRemBertForQuestionAnswering"),oYt.forEach(t),$Qr=r(EWe," (RemBERT model)"),EWe.forEach(t),kQr=i(_e),r0=n(_e,"LI",{});var CWe=s(r0);Bwe=n(CWe,"STRONG",{});var rYt=s(Bwe);SQr=r(rYt,"roberta"),rYt.forEach(t),RQr=r(CWe," \u2014 "),pre=n(CWe,"A",{href:!0});var tYt=s(pre);PQr=r(tYt,"TFRobertaForQuestionAnswering"),tYt.forEach(t),BQr=r(CWe," (RoBERTa model)"),CWe.forEach(t),IQr=i(_e),t0=n(_e,"LI",{});var wWe=s(t0);Iwe=n(wWe,"STRONG",{});var aYt=s(Iwe);NQr=r(aYt,"roformer"),aYt.forEach(t),qQr=r(wWe," \u2014 "),_re=n(wWe,"A",{href:!0});var nYt=s(_re);jQr=r(nYt,"TFRoFormerForQuestionAnswering"),nYt.forEach(t),DQr=r(wWe," (RoFormer model)"),wWe.forEach(t),GQr=i(_e),a0=n(_e,"LI",{});var AWe=s(a0);Nwe=n(AWe,"STRONG",{});var sYt=s(Nwe);OQr=r(sYt,"xlm"),sYt.forEach(t),VQr=r(AWe," \u2014 "),ure=n(AWe,"A",{href:!0});var lYt=s(ure);XQr=r(lYt,"TFXLMForQuestionAnsweringSimple"),lYt.forEach(t),zQr=r(AWe," (XLM model)"),AWe.forEach(t),WQr=i(_e),n0=n(_e,"LI",{});var LWe=s(n0);qwe=n(LWe,"STRONG",{});var iYt=s(qwe);QQr=r(iYt,"xlm-roberta"),iYt.forEach(t),UQr=r(LWe," \u2014 "),bre=n(LWe,"A",{href:!0});var dYt=s(bre);HQr=r(dYt,"TFXLMRobertaForQuestionAnswering"),dYt.forEach(t),JQr=r(LWe," (XLM-RoBERTa model)"),LWe.forEach(t),YQr=i(_e),s0=n(_e,"LI",{});var yWe=s(s0);jwe=n(yWe,"STRONG",{});var cYt=s(jwe);KQr=r(cYt,"xlnet"),cYt.forEach(t),ZQr=r(yWe," \u2014 "),vre=n(yWe,"A",{href:!0});var fYt=s(vre);eUr=r(fYt,"TFXLNetForQuestionAnsweringSimple"),fYt.forEach(t),oUr=r(yWe," (XLNet model)"),yWe.forEach(t),_e.forEach(t),rUr=i(vi),T(l0.$$.fragment,vi),vi.forEach(t),bi.forEach(t),_Je=i(f),bf=n(f,"H2",{class:!0});var RKe=s(bf);i0=n(RKe,"A",{id:!0,class:!0,href:!0});var mYt=s(i0);Dwe=n(mYt,"SPAN",{});var gYt=s(Dwe);T(Gk.$$.fragment,gYt),gYt.forEach(t),mYt.forEach(t),tUr=i(RKe),Gwe=n(RKe,"SPAN",{});var hYt=s(Gwe);aUr=r(hYt,"TFAutoModelForVision2Seq"),hYt.forEach(t),RKe.forEach(t),uJe=i(f),vr=n(f,"DIV",{class:!0});var Fi=s(vr);T(Ok.$$.fragment,Fi),nUr=i(Fi),vf=n(Fi,"P",{});var Nse=s(vf);sUr=r(Nse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Fre=n(Nse,"A",{href:!0});var pYt=s(Fre);lUr=r(pYt,"from_pretrained()"),pYt.forEach(t),iUr=r(Nse," class method or the "),Tre=n(Nse,"A",{href:!0});var _Yt=s(Tre);dUr=r(_Yt,"from_config()"),_Yt.forEach(t),cUr=r(Nse,` class
method.`),Nse.forEach(t),fUr=i(Fi),Vk=n(Fi,"P",{});var PKe=s(Vk);mUr=r(PKe,"This class cannot be instantiated directly using "),Owe=n(PKe,"CODE",{});var uYt=s(Owe);gUr=r(uYt,"__init__()"),uYt.forEach(t),hUr=r(PKe," (throws an error)."),PKe.forEach(t),pUr=i(Fi),ea=n(Fi,"DIV",{class:!0});var ZL=s(ea);T(Xk.$$.fragment,ZL),_Ur=i(ZL),Vwe=n(ZL,"P",{});var bYt=s(Vwe);uUr=r(bYt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bYt.forEach(t),bUr=i(ZL),Ff=n(ZL,"P",{});var qse=s(Ff);vUr=r(qse,`Note:
Loading a model from its configuration file does `),Xwe=n(qse,"STRONG",{});var vYt=s(Xwe);FUr=r(vYt,"not"),vYt.forEach(t),TUr=r(qse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mre=n(qse,"A",{href:!0});var FYt=s(Mre);MUr=r(FYt,"from_pretrained()"),FYt.forEach(t),EUr=r(qse," to load the model weights."),qse.forEach(t),CUr=i(ZL),T(d0.$$.fragment,ZL),ZL.forEach(t),wUr=i(Fi),Ur=n(Fi,"DIV",{class:!0});var Ti=s(Ur);T(zk.$$.fragment,Ti),AUr=i(Ti),zwe=n(Ti,"P",{});var TYt=s(zwe);LUr=r(TYt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),TYt.forEach(t),yUr=i(Ti),Pn=n(Ti,"P",{});var ey=s(Pn);xUr=r(ey,"The model class to instantiate is selected based on the "),Wwe=n(ey,"CODE",{});var MYt=s(Wwe);$Ur=r(MYt,"model_type"),MYt.forEach(t),kUr=r(ey,` property of the config object (either
passed as an argument or loaded from `),Qwe=n(ey,"CODE",{});var EYt=s(Qwe);SUr=r(EYt,"pretrained_model_name_or_path"),EYt.forEach(t),RUr=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uwe=n(ey,"CODE",{});var CYt=s(Uwe);PUr=r(CYt,"pretrained_model_name_or_path"),CYt.forEach(t),BUr=r(ey,":"),ey.forEach(t),IUr=i(Ti),Hwe=n(Ti,"UL",{});var wYt=s(Hwe);c0=n(wYt,"LI",{});var xWe=s(c0);Jwe=n(xWe,"STRONG",{});var AYt=s(Jwe);NUr=r(AYt,"vision-encoder-decoder"),AYt.forEach(t),qUr=r(xWe," \u2014 "),Ere=n(xWe,"A",{href:!0});var LYt=s(Ere);jUr=r(LYt,"TFVisionEncoderDecoderModel"),LYt.forEach(t),DUr=r(xWe," (Vision Encoder decoder model)"),xWe.forEach(t),wYt.forEach(t),GUr=i(Ti),T(f0.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),bJe=i(f),Tf=n(f,"H2",{class:!0});var BKe=s(Tf);m0=n(BKe,"A",{id:!0,class:!0,href:!0});var yYt=s(m0);Ywe=n(yYt,"SPAN",{});var xYt=s(Ywe);T(Wk.$$.fragment,xYt),xYt.forEach(t),yYt.forEach(t),OUr=i(BKe),Kwe=n(BKe,"SPAN",{});var $Yt=s(Kwe);VUr=r($Yt,"TFAutoModelForSpeechSeq2Seq"),$Yt.forEach(t),BKe.forEach(t),vJe=i(f),Fr=n(f,"DIV",{class:!0});var Mi=s(Fr);T(Qk.$$.fragment,Mi),XUr=i(Mi),Mf=n(Mi,"P",{});var jse=s(Mf);zUr=r(jse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Cre=n(jse,"A",{href:!0});var kYt=s(Cre);WUr=r(kYt,"from_pretrained()"),kYt.forEach(t),QUr=r(jse," class method or the "),wre=n(jse,"A",{href:!0});var SYt=s(wre);UUr=r(SYt,"from_config()"),SYt.forEach(t),HUr=r(jse,` class
method.`),jse.forEach(t),JUr=i(Mi),Uk=n(Mi,"P",{});var IKe=s(Uk);YUr=r(IKe,"This class cannot be instantiated directly using "),Zwe=n(IKe,"CODE",{});var RYt=s(Zwe);KUr=r(RYt,"__init__()"),RYt.forEach(t),ZUr=r(IKe," (throws an error)."),IKe.forEach(t),eHr=i(Mi),oa=n(Mi,"DIV",{class:!0});var oy=s(oa);T(Hk.$$.fragment,oy),oHr=i(oy),eAe=n(oy,"P",{});var PYt=s(eAe);rHr=r(PYt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),PYt.forEach(t),tHr=i(oy),Ef=n(oy,"P",{});var Dse=s(Ef);aHr=r(Dse,`Note:
Loading a model from its configuration file does `),oAe=n(Dse,"STRONG",{});var BYt=s(oAe);nHr=r(BYt,"not"),BYt.forEach(t),sHr=r(Dse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=n(Dse,"A",{href:!0});var IYt=s(Are);lHr=r(IYt,"from_pretrained()"),IYt.forEach(t),iHr=r(Dse," to load the model weights."),Dse.forEach(t),dHr=i(oy),T(g0.$$.fragment,oy),oy.forEach(t),cHr=i(Mi),Hr=n(Mi,"DIV",{class:!0});var Ei=s(Hr);T(Jk.$$.fragment,Ei),fHr=i(Ei),rAe=n(Ei,"P",{});var NYt=s(rAe);mHr=r(NYt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),NYt.forEach(t),gHr=i(Ei),Bn=n(Ei,"P",{});var ry=s(Bn);hHr=r(ry,"The model class to instantiate is selected based on the "),tAe=n(ry,"CODE",{});var qYt=s(tAe);pHr=r(qYt,"model_type"),qYt.forEach(t),_Hr=r(ry,` property of the config object (either
passed as an argument or loaded from `),aAe=n(ry,"CODE",{});var jYt=s(aAe);uHr=r(jYt,"pretrained_model_name_or_path"),jYt.forEach(t),bHr=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nAe=n(ry,"CODE",{});var DYt=s(nAe);vHr=r(DYt,"pretrained_model_name_or_path"),DYt.forEach(t),FHr=r(ry,":"),ry.forEach(t),THr=i(Ei),sAe=n(Ei,"UL",{});var GYt=s(sAe);h0=n(GYt,"LI",{});var $We=s(h0);lAe=n($We,"STRONG",{});var OYt=s(lAe);MHr=r(OYt,"speech_to_text"),OYt.forEach(t),EHr=r($We," \u2014 "),Lre=n($We,"A",{href:!0});var VYt=s(Lre);CHr=r(VYt,"TFSpeech2TextForConditionalGeneration"),VYt.forEach(t),wHr=r($We," (Speech2Text model)"),$We.forEach(t),GYt.forEach(t),AHr=i(Ei),T(p0.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),FJe=i(f),Cf=n(f,"H2",{class:!0});var NKe=s(Cf);_0=n(NKe,"A",{id:!0,class:!0,href:!0});var XYt=s(_0);iAe=n(XYt,"SPAN",{});var zYt=s(iAe);T(Yk.$$.fragment,zYt),zYt.forEach(t),XYt.forEach(t),LHr=i(NKe),dAe=n(NKe,"SPAN",{});var WYt=s(dAe);yHr=r(WYt,"FlaxAutoModel"),WYt.forEach(t),NKe.forEach(t),TJe=i(f),Tr=n(f,"DIV",{class:!0});var Ci=s(Tr);T(Kk.$$.fragment,Ci),xHr=i(Ci),wf=n(Ci,"P",{});var Gse=s(wf);$Hr=r(Gse,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yre=n(Gse,"A",{href:!0});var QYt=s(yre);kHr=r(QYt,"from_pretrained()"),QYt.forEach(t),SHr=r(Gse," class method or the "),xre=n(Gse,"A",{href:!0});var UYt=s(xre);RHr=r(UYt,"from_config()"),UYt.forEach(t),PHr=r(Gse,` class
method.`),Gse.forEach(t),BHr=i(Ci),Zk=n(Ci,"P",{});var qKe=s(Zk);IHr=r(qKe,"This class cannot be instantiated directly using "),cAe=n(qKe,"CODE",{});var HYt=s(cAe);NHr=r(HYt,"__init__()"),HYt.forEach(t),qHr=r(qKe," (throws an error)."),qKe.forEach(t),jHr=i(Ci),ra=n(Ci,"DIV",{class:!0});var ty=s(ra);T(eS.$$.fragment,ty),DHr=i(ty),fAe=n(ty,"P",{});var JYt=s(fAe);GHr=r(JYt,"Instantiates one of the base model classes of the library from a configuration."),JYt.forEach(t),OHr=i(ty),Af=n(ty,"P",{});var Ose=s(Af);VHr=r(Ose,`Note:
Loading a model from its configuration file does `),mAe=n(Ose,"STRONG",{});var YYt=s(mAe);XHr=r(YYt,"not"),YYt.forEach(t),zHr=r(Ose,` load the model weights. It only affects the
model\u2019s configuration. Use `),$re=n(Ose,"A",{href:!0});var KYt=s($re);WHr=r(KYt,"from_pretrained()"),KYt.forEach(t),QHr=r(Ose," to load the model weights."),Ose.forEach(t),UHr=i(ty),T(u0.$$.fragment,ty),ty.forEach(t),HHr=i(Ci),Jr=n(Ci,"DIV",{class:!0});var wi=s(Jr);T(oS.$$.fragment,wi),JHr=i(wi),gAe=n(wi,"P",{});var ZYt=s(gAe);YHr=r(ZYt,"Instantiate one of the base model classes of the library from a pretrained model."),ZYt.forEach(t),KHr=i(wi),In=n(wi,"P",{});var ay=s(In);ZHr=r(ay,"The model class to instantiate is selected based on the "),hAe=n(ay,"CODE",{});var eKt=s(hAe);eJr=r(eKt,"model_type"),eKt.forEach(t),oJr=r(ay,` property of the config object (either
passed as an argument or loaded from `),pAe=n(ay,"CODE",{});var oKt=s(pAe);rJr=r(oKt,"pretrained_model_name_or_path"),oKt.forEach(t),tJr=r(ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ae=n(ay,"CODE",{});var rKt=s(_Ae);aJr=r(rKt,"pretrained_model_name_or_path"),rKt.forEach(t),nJr=r(ay,":"),ay.forEach(t),sJr=i(wi),re=n(wi,"UL",{});var ae=s(re);b0=n(ae,"LI",{});var kWe=s(b0);uAe=n(kWe,"STRONG",{});var tKt=s(uAe);lJr=r(tKt,"albert"),tKt.forEach(t),iJr=r(kWe," \u2014 "),kre=n(kWe,"A",{href:!0});var aKt=s(kre);dJr=r(aKt,"FlaxAlbertModel"),aKt.forEach(t),cJr=r(kWe," (ALBERT model)"),kWe.forEach(t),fJr=i(ae),v0=n(ae,"LI",{});var SWe=s(v0);bAe=n(SWe,"STRONG",{});var nKt=s(bAe);mJr=r(nKt,"bart"),nKt.forEach(t),gJr=r(SWe," \u2014 "),Sre=n(SWe,"A",{href:!0});var sKt=s(Sre);hJr=r(sKt,"FlaxBartModel"),sKt.forEach(t),pJr=r(SWe," (BART model)"),SWe.forEach(t),_Jr=i(ae),F0=n(ae,"LI",{});var RWe=s(F0);vAe=n(RWe,"STRONG",{});var lKt=s(vAe);uJr=r(lKt,"beit"),lKt.forEach(t),bJr=r(RWe," \u2014 "),Rre=n(RWe,"A",{href:!0});var iKt=s(Rre);vJr=r(iKt,"FlaxBeitModel"),iKt.forEach(t),FJr=r(RWe," (BEiT model)"),RWe.forEach(t),TJr=i(ae),T0=n(ae,"LI",{});var PWe=s(T0);FAe=n(PWe,"STRONG",{});var dKt=s(FAe);MJr=r(dKt,"bert"),dKt.forEach(t),EJr=r(PWe," \u2014 "),Pre=n(PWe,"A",{href:!0});var cKt=s(Pre);CJr=r(cKt,"FlaxBertModel"),cKt.forEach(t),wJr=r(PWe," (BERT model)"),PWe.forEach(t),AJr=i(ae),M0=n(ae,"LI",{});var BWe=s(M0);TAe=n(BWe,"STRONG",{});var fKt=s(TAe);LJr=r(fKt,"big_bird"),fKt.forEach(t),yJr=r(BWe," \u2014 "),Bre=n(BWe,"A",{href:!0});var mKt=s(Bre);xJr=r(mKt,"FlaxBigBirdModel"),mKt.forEach(t),$Jr=r(BWe," (BigBird model)"),BWe.forEach(t),kJr=i(ae),E0=n(ae,"LI",{});var IWe=s(E0);MAe=n(IWe,"STRONG",{});var gKt=s(MAe);SJr=r(gKt,"blenderbot"),gKt.forEach(t),RJr=r(IWe," \u2014 "),Ire=n(IWe,"A",{href:!0});var hKt=s(Ire);PJr=r(hKt,"FlaxBlenderbotModel"),hKt.forEach(t),BJr=r(IWe," (Blenderbot model)"),IWe.forEach(t),IJr=i(ae),C0=n(ae,"LI",{});var NWe=s(C0);EAe=n(NWe,"STRONG",{});var pKt=s(EAe);NJr=r(pKt,"blenderbot-small"),pKt.forEach(t),qJr=r(NWe," \u2014 "),Nre=n(NWe,"A",{href:!0});var _Kt=s(Nre);jJr=r(_Kt,"FlaxBlenderbotSmallModel"),_Kt.forEach(t),DJr=r(NWe," (BlenderbotSmall model)"),NWe.forEach(t),GJr=i(ae),w0=n(ae,"LI",{});var qWe=s(w0);CAe=n(qWe,"STRONG",{});var uKt=s(CAe);OJr=r(uKt,"clip"),uKt.forEach(t),VJr=r(qWe," \u2014 "),qre=n(qWe,"A",{href:!0});var bKt=s(qre);XJr=r(bKt,"FlaxCLIPModel"),bKt.forEach(t),zJr=r(qWe," (CLIP model)"),qWe.forEach(t),WJr=i(ae),A0=n(ae,"LI",{});var jWe=s(A0);wAe=n(jWe,"STRONG",{});var vKt=s(wAe);QJr=r(vKt,"distilbert"),vKt.forEach(t),UJr=r(jWe," \u2014 "),jre=n(jWe,"A",{href:!0});var FKt=s(jre);HJr=r(FKt,"FlaxDistilBertModel"),FKt.forEach(t),JJr=r(jWe," (DistilBERT model)"),jWe.forEach(t),YJr=i(ae),L0=n(ae,"LI",{});var DWe=s(L0);AAe=n(DWe,"STRONG",{});var TKt=s(AAe);KJr=r(TKt,"electra"),TKt.forEach(t),ZJr=r(DWe," \u2014 "),Dre=n(DWe,"A",{href:!0});var MKt=s(Dre);eYr=r(MKt,"FlaxElectraModel"),MKt.forEach(t),oYr=r(DWe," (ELECTRA model)"),DWe.forEach(t),rYr=i(ae),y0=n(ae,"LI",{});var GWe=s(y0);LAe=n(GWe,"STRONG",{});var EKt=s(LAe);tYr=r(EKt,"gpt2"),EKt.forEach(t),aYr=r(GWe," \u2014 "),Gre=n(GWe,"A",{href:!0});var CKt=s(Gre);nYr=r(CKt,"FlaxGPT2Model"),CKt.forEach(t),sYr=r(GWe," (OpenAI GPT-2 model)"),GWe.forEach(t),lYr=i(ae),x0=n(ae,"LI",{});var OWe=s(x0);yAe=n(OWe,"STRONG",{});var wKt=s(yAe);iYr=r(wKt,"gpt_neo"),wKt.forEach(t),dYr=r(OWe," \u2014 "),Ore=n(OWe,"A",{href:!0});var AKt=s(Ore);cYr=r(AKt,"FlaxGPTNeoModel"),AKt.forEach(t),fYr=r(OWe," (GPT Neo model)"),OWe.forEach(t),mYr=i(ae),$0=n(ae,"LI",{});var VWe=s($0);xAe=n(VWe,"STRONG",{});var LKt=s(xAe);gYr=r(LKt,"gptj"),LKt.forEach(t),hYr=r(VWe," \u2014 "),Vre=n(VWe,"A",{href:!0});var yKt=s(Vre);pYr=r(yKt,"FlaxGPTJModel"),yKt.forEach(t),_Yr=r(VWe," (GPT-J model)"),VWe.forEach(t),uYr=i(ae),k0=n(ae,"LI",{});var XWe=s(k0);$Ae=n(XWe,"STRONG",{});var xKt=s($Ae);bYr=r(xKt,"longt5"),xKt.forEach(t),vYr=r(XWe," \u2014 "),Xre=n(XWe,"A",{href:!0});var $Kt=s(Xre);FYr=r($Kt,"FlaxLongT5Model"),$Kt.forEach(t),TYr=r(XWe," (LongT5 model)"),XWe.forEach(t),MYr=i(ae),S0=n(ae,"LI",{});var zWe=s(S0);kAe=n(zWe,"STRONG",{});var kKt=s(kAe);EYr=r(kKt,"marian"),kKt.forEach(t),CYr=r(zWe," \u2014 "),zre=n(zWe,"A",{href:!0});var SKt=s(zre);wYr=r(SKt,"FlaxMarianModel"),SKt.forEach(t),AYr=r(zWe," (Marian model)"),zWe.forEach(t),LYr=i(ae),R0=n(ae,"LI",{});var WWe=s(R0);SAe=n(WWe,"STRONG",{});var RKt=s(SAe);yYr=r(RKt,"mbart"),RKt.forEach(t),xYr=r(WWe," \u2014 "),Wre=n(WWe,"A",{href:!0});var PKt=s(Wre);$Yr=r(PKt,"FlaxMBartModel"),PKt.forEach(t),kYr=r(WWe," (mBART model)"),WWe.forEach(t),SYr=i(ae),P0=n(ae,"LI",{});var QWe=s(P0);RAe=n(QWe,"STRONG",{});var BKt=s(RAe);RYr=r(BKt,"mt5"),BKt.forEach(t),PYr=r(QWe," \u2014 "),Qre=n(QWe,"A",{href:!0});var IKt=s(Qre);BYr=r(IKt,"FlaxMT5Model"),IKt.forEach(t),IYr=r(QWe," (MT5 model)"),QWe.forEach(t),NYr=i(ae),B0=n(ae,"LI",{});var UWe=s(B0);PAe=n(UWe,"STRONG",{});var NKt=s(PAe);qYr=r(NKt,"opt"),NKt.forEach(t),jYr=r(UWe," \u2014 "),Ure=n(UWe,"A",{href:!0});var qKt=s(Ure);DYr=r(qKt,"FlaxOPTModel"),qKt.forEach(t),GYr=r(UWe," (OPT model)"),UWe.forEach(t),OYr=i(ae),I0=n(ae,"LI",{});var HWe=s(I0);BAe=n(HWe,"STRONG",{});var jKt=s(BAe);VYr=r(jKt,"pegasus"),jKt.forEach(t),XYr=r(HWe," \u2014 "),Hre=n(HWe,"A",{href:!0});var DKt=s(Hre);zYr=r(DKt,"FlaxPegasusModel"),DKt.forEach(t),WYr=r(HWe," (Pegasus model)"),HWe.forEach(t),QYr=i(ae),N0=n(ae,"LI",{});var JWe=s(N0);IAe=n(JWe,"STRONG",{});var GKt=s(IAe);UYr=r(GKt,"roberta"),GKt.forEach(t),HYr=r(JWe," \u2014 "),Jre=n(JWe,"A",{href:!0});var OKt=s(Jre);JYr=r(OKt,"FlaxRobertaModel"),OKt.forEach(t),YYr=r(JWe," (RoBERTa model)"),JWe.forEach(t),KYr=i(ae),q0=n(ae,"LI",{});var YWe=s(q0);NAe=n(YWe,"STRONG",{});var VKt=s(NAe);ZYr=r(VKt,"roformer"),VKt.forEach(t),eKr=r(YWe," \u2014 "),Yre=n(YWe,"A",{href:!0});var XKt=s(Yre);oKr=r(XKt,"FlaxRoFormerModel"),XKt.forEach(t),rKr=r(YWe," (RoFormer model)"),YWe.forEach(t),tKr=i(ae),j0=n(ae,"LI",{});var KWe=s(j0);qAe=n(KWe,"STRONG",{});var zKt=s(qAe);aKr=r(zKt,"t5"),zKt.forEach(t),nKr=r(KWe," \u2014 "),Kre=n(KWe,"A",{href:!0});var WKt=s(Kre);sKr=r(WKt,"FlaxT5Model"),WKt.forEach(t),lKr=r(KWe," (T5 model)"),KWe.forEach(t),iKr=i(ae),D0=n(ae,"LI",{});var ZWe=s(D0);jAe=n(ZWe,"STRONG",{});var QKt=s(jAe);dKr=r(QKt,"vision-text-dual-encoder"),QKt.forEach(t),cKr=r(ZWe," \u2014 "),Zre=n(ZWe,"A",{href:!0});var UKt=s(Zre);fKr=r(UKt,"FlaxVisionTextDualEncoderModel"),UKt.forEach(t),mKr=r(ZWe," (VisionTextDualEncoder model)"),ZWe.forEach(t),gKr=i(ae),G0=n(ae,"LI",{});var eQe=s(G0);DAe=n(eQe,"STRONG",{});var HKt=s(DAe);hKr=r(HKt,"vit"),HKt.forEach(t),pKr=r(eQe," \u2014 "),ete=n(eQe,"A",{href:!0});var JKt=s(ete);_Kr=r(JKt,"FlaxViTModel"),JKt.forEach(t),uKr=r(eQe," (ViT model)"),eQe.forEach(t),bKr=i(ae),O0=n(ae,"LI",{});var oQe=s(O0);GAe=n(oQe,"STRONG",{});var YKt=s(GAe);vKr=r(YKt,"wav2vec2"),YKt.forEach(t),FKr=r(oQe," \u2014 "),ote=n(oQe,"A",{href:!0});var KKt=s(ote);TKr=r(KKt,"FlaxWav2Vec2Model"),KKt.forEach(t),MKr=r(oQe," (Wav2Vec2 model)"),oQe.forEach(t),EKr=i(ae),V0=n(ae,"LI",{});var rQe=s(V0);OAe=n(rQe,"STRONG",{});var ZKt=s(OAe);CKr=r(ZKt,"xglm"),ZKt.forEach(t),wKr=r(rQe," \u2014 "),rte=n(rQe,"A",{href:!0});var eZt=s(rte);AKr=r(eZt,"FlaxXGLMModel"),eZt.forEach(t),LKr=r(rQe," (XGLM model)"),rQe.forEach(t),yKr=i(ae),X0=n(ae,"LI",{});var tQe=s(X0);VAe=n(tQe,"STRONG",{});var oZt=s(VAe);xKr=r(oZt,"xlm-roberta"),oZt.forEach(t),$Kr=r(tQe," \u2014 "),tte=n(tQe,"A",{href:!0});var rZt=s(tte);kKr=r(rZt,"FlaxXLMRobertaModel"),rZt.forEach(t),SKr=r(tQe," (XLM-RoBERTa model)"),tQe.forEach(t),ae.forEach(t),RKr=i(wi),T(z0.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),MJe=i(f),Lf=n(f,"H2",{class:!0});var jKe=s(Lf);W0=n(jKe,"A",{id:!0,class:!0,href:!0});var tZt=s(W0);XAe=n(tZt,"SPAN",{});var aZt=s(XAe);T(rS.$$.fragment,aZt),aZt.forEach(t),tZt.forEach(t),PKr=i(jKe),zAe=n(jKe,"SPAN",{});var nZt=s(zAe);BKr=r(nZt,"FlaxAutoModelForCausalLM"),nZt.forEach(t),jKe.forEach(t),EJe=i(f),Mr=n(f,"DIV",{class:!0});var Ai=s(Mr);T(tS.$$.fragment,Ai),IKr=i(Ai),yf=n(Ai,"P",{});var Vse=s(yf);NKr=r(Vse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ate=n(Vse,"A",{href:!0});var sZt=s(ate);qKr=r(sZt,"from_pretrained()"),sZt.forEach(t),jKr=r(Vse," class method or the "),nte=n(Vse,"A",{href:!0});var lZt=s(nte);DKr=r(lZt,"from_config()"),lZt.forEach(t),GKr=r(Vse,` class
method.`),Vse.forEach(t),OKr=i(Ai),aS=n(Ai,"P",{});var DKe=s(aS);VKr=r(DKe,"This class cannot be instantiated directly using "),WAe=n(DKe,"CODE",{});var iZt=s(WAe);XKr=r(iZt,"__init__()"),iZt.forEach(t),zKr=r(DKe," (throws an error)."),DKe.forEach(t),WKr=i(Ai),ta=n(Ai,"DIV",{class:!0});var ny=s(ta);T(nS.$$.fragment,ny),QKr=i(ny),QAe=n(ny,"P",{});var dZt=s(QAe);UKr=r(dZt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dZt.forEach(t),HKr=i(ny),xf=n(ny,"P",{});var Xse=s(xf);JKr=r(Xse,`Note:
Loading a model from its configuration file does `),UAe=n(Xse,"STRONG",{});var cZt=s(UAe);YKr=r(cZt,"not"),cZt.forEach(t),KKr=r(Xse,` load the model weights. It only affects the
model\u2019s configuration. Use `),ste=n(Xse,"A",{href:!0});var fZt=s(ste);ZKr=r(fZt,"from_pretrained()"),fZt.forEach(t),eZr=r(Xse," to load the model weights."),Xse.forEach(t),oZr=i(ny),T(Q0.$$.fragment,ny),ny.forEach(t),rZr=i(Ai),Yr=n(Ai,"DIV",{class:!0});var Li=s(Yr);T(sS.$$.fragment,Li),tZr=i(Li),HAe=n(Li,"P",{});var mZt=s(HAe);aZr=r(mZt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mZt.forEach(t),nZr=i(Li),Nn=n(Li,"P",{});var sy=s(Nn);sZr=r(sy,"The model class to instantiate is selected based on the "),JAe=n(sy,"CODE",{});var gZt=s(JAe);lZr=r(gZt,"model_type"),gZt.forEach(t),iZr=r(sy,` property of the config object (either
passed as an argument or loaded from `),YAe=n(sy,"CODE",{});var hZt=s(YAe);dZr=r(hZt,"pretrained_model_name_or_path"),hZt.forEach(t),cZr=r(sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KAe=n(sy,"CODE",{});var pZt=s(KAe);fZr=r(pZt,"pretrained_model_name_or_path"),pZt.forEach(t),mZr=r(sy,":"),sy.forEach(t),gZr=i(Li),xe=n(Li,"UL",{});var Ne=s(xe);U0=n(Ne,"LI",{});var aQe=s(U0);ZAe=n(aQe,"STRONG",{});var _Zt=s(ZAe);hZr=r(_Zt,"bart"),_Zt.forEach(t),pZr=r(aQe," \u2014 "),lte=n(aQe,"A",{href:!0});var uZt=s(lte);_Zr=r(uZt,"FlaxBartForCausalLM"),uZt.forEach(t),uZr=r(aQe," (BART model)"),aQe.forEach(t),bZr=i(Ne),H0=n(Ne,"LI",{});var nQe=s(H0);e7e=n(nQe,"STRONG",{});var bZt=s(e7e);vZr=r(bZt,"bert"),bZt.forEach(t),FZr=r(nQe," \u2014 "),ite=n(nQe,"A",{href:!0});var vZt=s(ite);TZr=r(vZt,"FlaxBertForCausalLM"),vZt.forEach(t),MZr=r(nQe," (BERT model)"),nQe.forEach(t),EZr=i(Ne),J0=n(Ne,"LI",{});var sQe=s(J0);o7e=n(sQe,"STRONG",{});var FZt=s(o7e);CZr=r(FZt,"big_bird"),FZt.forEach(t),wZr=r(sQe," \u2014 "),dte=n(sQe,"A",{href:!0});var TZt=s(dte);AZr=r(TZt,"FlaxBigBirdForCausalLM"),TZt.forEach(t),LZr=r(sQe," (BigBird model)"),sQe.forEach(t),yZr=i(Ne),Y0=n(Ne,"LI",{});var lQe=s(Y0);r7e=n(lQe,"STRONG",{});var MZt=s(r7e);xZr=r(MZt,"electra"),MZt.forEach(t),$Zr=r(lQe," \u2014 "),cte=n(lQe,"A",{href:!0});var EZt=s(cte);kZr=r(EZt,"FlaxElectraForCausalLM"),EZt.forEach(t),SZr=r(lQe," (ELECTRA model)"),lQe.forEach(t),RZr=i(Ne),K0=n(Ne,"LI",{});var iQe=s(K0);t7e=n(iQe,"STRONG",{});var CZt=s(t7e);PZr=r(CZt,"gpt2"),CZt.forEach(t),BZr=r(iQe," \u2014 "),fte=n(iQe,"A",{href:!0});var wZt=s(fte);IZr=r(wZt,"FlaxGPT2LMHeadModel"),wZt.forEach(t),NZr=r(iQe," (OpenAI GPT-2 model)"),iQe.forEach(t),qZr=i(Ne),Z0=n(Ne,"LI",{});var dQe=s(Z0);a7e=n(dQe,"STRONG",{});var AZt=s(a7e);jZr=r(AZt,"gpt_neo"),AZt.forEach(t),DZr=r(dQe," \u2014 "),mte=n(dQe,"A",{href:!0});var LZt=s(mte);GZr=r(LZt,"FlaxGPTNeoForCausalLM"),LZt.forEach(t),OZr=r(dQe," (GPT Neo model)"),dQe.forEach(t),VZr=i(Ne),ew=n(Ne,"LI",{});var cQe=s(ew);n7e=n(cQe,"STRONG",{});var yZt=s(n7e);XZr=r(yZt,"gptj"),yZt.forEach(t),zZr=r(cQe," \u2014 "),gte=n(cQe,"A",{href:!0});var xZt=s(gte);WZr=r(xZt,"FlaxGPTJForCausalLM"),xZt.forEach(t),QZr=r(cQe," (GPT-J model)"),cQe.forEach(t),UZr=i(Ne),ow=n(Ne,"LI",{});var fQe=s(ow);s7e=n(fQe,"STRONG",{});var $Zt=s(s7e);HZr=r($Zt,"opt"),$Zt.forEach(t),JZr=r(fQe," \u2014 "),hte=n(fQe,"A",{href:!0});var kZt=s(hte);YZr=r(kZt,"FlaxOPTForCausalLM"),kZt.forEach(t),KZr=r(fQe," (OPT model)"),fQe.forEach(t),ZZr=i(Ne),rw=n(Ne,"LI",{});var mQe=s(rw);l7e=n(mQe,"STRONG",{});var SZt=s(l7e);eet=r(SZt,"roberta"),SZt.forEach(t),oet=r(mQe," \u2014 "),pte=n(mQe,"A",{href:!0});var RZt=s(pte);ret=r(RZt,"FlaxRobertaForCausalLM"),RZt.forEach(t),tet=r(mQe," (RoBERTa model)"),mQe.forEach(t),aet=i(Ne),tw=n(Ne,"LI",{});var gQe=s(tw);i7e=n(gQe,"STRONG",{});var PZt=s(i7e);net=r(PZt,"xglm"),PZt.forEach(t),set=r(gQe," \u2014 "),_te=n(gQe,"A",{href:!0});var BZt=s(_te);iet=r(BZt,"FlaxXGLMForCausalLM"),BZt.forEach(t),det=r(gQe," (XGLM model)"),gQe.forEach(t),Ne.forEach(t),cet=i(Li),T(aw.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),CJe=i(f),$f=n(f,"H2",{class:!0});var GKe=s($f);nw=n(GKe,"A",{id:!0,class:!0,href:!0});var IZt=s(nw);d7e=n(IZt,"SPAN",{});var NZt=s(d7e);T(lS.$$.fragment,NZt),NZt.forEach(t),IZt.forEach(t),fet=i(GKe),c7e=n(GKe,"SPAN",{});var qZt=s(c7e);met=r(qZt,"FlaxAutoModelForPreTraining"),qZt.forEach(t),GKe.forEach(t),wJe=i(f),Er=n(f,"DIV",{class:!0});var yi=s(Er);T(iS.$$.fragment,yi),get=i(yi),kf=n(yi,"P",{});var zse=s(kf);het=r(zse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ute=n(zse,"A",{href:!0});var jZt=s(ute);pet=r(jZt,"from_pretrained()"),jZt.forEach(t),_et=r(zse," class method or the "),bte=n(zse,"A",{href:!0});var DZt=s(bte);uet=r(DZt,"from_config()"),DZt.forEach(t),bet=r(zse,` class
method.`),zse.forEach(t),vet=i(yi),dS=n(yi,"P",{});var OKe=s(dS);Fet=r(OKe,"This class cannot be instantiated directly using "),f7e=n(OKe,"CODE",{});var GZt=s(f7e);Tet=r(GZt,"__init__()"),GZt.forEach(t),Met=r(OKe," (throws an error)."),OKe.forEach(t),Eet=i(yi),aa=n(yi,"DIV",{class:!0});var ly=s(aa);T(cS.$$.fragment,ly),Cet=i(ly),m7e=n(ly,"P",{});var OZt=s(m7e);wet=r(OZt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),OZt.forEach(t),Aet=i(ly),Sf=n(ly,"P",{});var Wse=s(Sf);Let=r(Wse,`Note:
Loading a model from its configuration file does `),g7e=n(Wse,"STRONG",{});var VZt=s(g7e);yet=r(VZt,"not"),VZt.forEach(t),xet=r(Wse,` load the model weights. It only affects the
model\u2019s configuration. Use `),vte=n(Wse,"A",{href:!0});var XZt=s(vte);$et=r(XZt,"from_pretrained()"),XZt.forEach(t),ket=r(Wse," to load the model weights."),Wse.forEach(t),Set=i(ly),T(sw.$$.fragment,ly),ly.forEach(t),Ret=i(yi),Kr=n(yi,"DIV",{class:!0});var xi=s(Kr);T(fS.$$.fragment,xi),Pet=i(xi),h7e=n(xi,"P",{});var zZt=s(h7e);Bet=r(zZt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zZt.forEach(t),Iet=i(xi),qn=n(xi,"P",{});var iy=s(qn);Net=r(iy,"The model class to instantiate is selected based on the "),p7e=n(iy,"CODE",{});var WZt=s(p7e);qet=r(WZt,"model_type"),WZt.forEach(t),jet=r(iy,` property of the config object (either
passed as an argument or loaded from `),_7e=n(iy,"CODE",{});var QZt=s(_7e);Det=r(QZt,"pretrained_model_name_or_path"),QZt.forEach(t),Get=r(iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u7e=n(iy,"CODE",{});var UZt=s(u7e);Oet=r(UZt,"pretrained_model_name_or_path"),UZt.forEach(t),Vet=r(iy,":"),iy.forEach(t),Xet=i(xi),Ee=n(xi,"UL",{});var we=s(Ee);lw=n(we,"LI",{});var hQe=s(lw);b7e=n(hQe,"STRONG",{});var HZt=s(b7e);zet=r(HZt,"albert"),HZt.forEach(t),Wet=r(hQe," \u2014 "),Fte=n(hQe,"A",{href:!0});var JZt=s(Fte);Qet=r(JZt,"FlaxAlbertForPreTraining"),JZt.forEach(t),Uet=r(hQe," (ALBERT model)"),hQe.forEach(t),Het=i(we),iw=n(we,"LI",{});var pQe=s(iw);v7e=n(pQe,"STRONG",{});var YZt=s(v7e);Jet=r(YZt,"bart"),YZt.forEach(t),Yet=r(pQe," \u2014 "),Tte=n(pQe,"A",{href:!0});var KZt=s(Tte);Ket=r(KZt,"FlaxBartForConditionalGeneration"),KZt.forEach(t),Zet=r(pQe," (BART model)"),pQe.forEach(t),eot=i(we),dw=n(we,"LI",{});var _Qe=s(dw);F7e=n(_Qe,"STRONG",{});var ZZt=s(F7e);oot=r(ZZt,"bert"),ZZt.forEach(t),rot=r(_Qe," \u2014 "),Mte=n(_Qe,"A",{href:!0});var eea=s(Mte);tot=r(eea,"FlaxBertForPreTraining"),eea.forEach(t),aot=r(_Qe," (BERT model)"),_Qe.forEach(t),not=i(we),cw=n(we,"LI",{});var uQe=s(cw);T7e=n(uQe,"STRONG",{});var oea=s(T7e);sot=r(oea,"big_bird"),oea.forEach(t),lot=r(uQe," \u2014 "),Ete=n(uQe,"A",{href:!0});var rea=s(Ete);iot=r(rea,"FlaxBigBirdForPreTraining"),rea.forEach(t),dot=r(uQe," (BigBird model)"),uQe.forEach(t),cot=i(we),fw=n(we,"LI",{});var bQe=s(fw);M7e=n(bQe,"STRONG",{});var tea=s(M7e);fot=r(tea,"electra"),tea.forEach(t),mot=r(bQe," \u2014 "),Cte=n(bQe,"A",{href:!0});var aea=s(Cte);got=r(aea,"FlaxElectraForPreTraining"),aea.forEach(t),hot=r(bQe," (ELECTRA model)"),bQe.forEach(t),pot=i(we),mw=n(we,"LI",{});var vQe=s(mw);E7e=n(vQe,"STRONG",{});var nea=s(E7e);_ot=r(nea,"longt5"),nea.forEach(t),uot=r(vQe," \u2014 "),wte=n(vQe,"A",{href:!0});var sea=s(wte);bot=r(sea,"FlaxLongT5ForConditionalGeneration"),sea.forEach(t),vot=r(vQe," (LongT5 model)"),vQe.forEach(t),Fot=i(we),gw=n(we,"LI",{});var FQe=s(gw);C7e=n(FQe,"STRONG",{});var lea=s(C7e);Tot=r(lea,"mbart"),lea.forEach(t),Mot=r(FQe," \u2014 "),Ate=n(FQe,"A",{href:!0});var iea=s(Ate);Eot=r(iea,"FlaxMBartForConditionalGeneration"),iea.forEach(t),Cot=r(FQe," (mBART model)"),FQe.forEach(t),wot=i(we),hw=n(we,"LI",{});var TQe=s(hw);w7e=n(TQe,"STRONG",{});var dea=s(w7e);Aot=r(dea,"mt5"),dea.forEach(t),Lot=r(TQe," \u2014 "),Lte=n(TQe,"A",{href:!0});var cea=s(Lte);yot=r(cea,"FlaxMT5ForConditionalGeneration"),cea.forEach(t),xot=r(TQe," (MT5 model)"),TQe.forEach(t),$ot=i(we),pw=n(we,"LI",{});var MQe=s(pw);A7e=n(MQe,"STRONG",{});var fea=s(A7e);kot=r(fea,"roberta"),fea.forEach(t),Sot=r(MQe," \u2014 "),yte=n(MQe,"A",{href:!0});var mea=s(yte);Rot=r(mea,"FlaxRobertaForMaskedLM"),mea.forEach(t),Pot=r(MQe," (RoBERTa model)"),MQe.forEach(t),Bot=i(we),_w=n(we,"LI",{});var EQe=s(_w);L7e=n(EQe,"STRONG",{});var gea=s(L7e);Iot=r(gea,"roformer"),gea.forEach(t),Not=r(EQe," \u2014 "),xte=n(EQe,"A",{href:!0});var hea=s(xte);qot=r(hea,"FlaxRoFormerForMaskedLM"),hea.forEach(t),jot=r(EQe," (RoFormer model)"),EQe.forEach(t),Dot=i(we),uw=n(we,"LI",{});var CQe=s(uw);y7e=n(CQe,"STRONG",{});var pea=s(y7e);Got=r(pea,"t5"),pea.forEach(t),Oot=r(CQe," \u2014 "),$te=n(CQe,"A",{href:!0});var _ea=s($te);Vot=r(_ea,"FlaxT5ForConditionalGeneration"),_ea.forEach(t),Xot=r(CQe," (T5 model)"),CQe.forEach(t),zot=i(we),bw=n(we,"LI",{});var wQe=s(bw);x7e=n(wQe,"STRONG",{});var uea=s(x7e);Wot=r(uea,"wav2vec2"),uea.forEach(t),Qot=r(wQe," \u2014 "),kte=n(wQe,"A",{href:!0});var bea=s(kte);Uot=r(bea,"FlaxWav2Vec2ForPreTraining"),bea.forEach(t),Hot=r(wQe," (Wav2Vec2 model)"),wQe.forEach(t),Jot=i(we),vw=n(we,"LI",{});var AQe=s(vw);$7e=n(AQe,"STRONG",{});var vea=s($7e);Yot=r(vea,"xlm-roberta"),vea.forEach(t),Kot=r(AQe," \u2014 "),Ste=n(AQe,"A",{href:!0});var Fea=s(Ste);Zot=r(Fea,"FlaxXLMRobertaForMaskedLM"),Fea.forEach(t),ert=r(AQe," (XLM-RoBERTa model)"),AQe.forEach(t),we.forEach(t),ort=i(xi),T(Fw.$$.fragment,xi),xi.forEach(t),yi.forEach(t),AJe=i(f),Rf=n(f,"H2",{class:!0});var VKe=s(Rf);Tw=n(VKe,"A",{id:!0,class:!0,href:!0});var Tea=s(Tw);k7e=n(Tea,"SPAN",{});var Mea=s(k7e);T(mS.$$.fragment,Mea),Mea.forEach(t),Tea.forEach(t),rrt=i(VKe),S7e=n(VKe,"SPAN",{});var Eea=s(S7e);trt=r(Eea,"FlaxAutoModelForMaskedLM"),Eea.forEach(t),VKe.forEach(t),LJe=i(f),Cr=n(f,"DIV",{class:!0});var $i=s(Cr);T(gS.$$.fragment,$i),art=i($i),Pf=n($i,"P",{});var Qse=s(Pf);nrt=r(Qse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Rte=n(Qse,"A",{href:!0});var Cea=s(Rte);srt=r(Cea,"from_pretrained()"),Cea.forEach(t),lrt=r(Qse," class method or the "),Pte=n(Qse,"A",{href:!0});var wea=s(Pte);irt=r(wea,"from_config()"),wea.forEach(t),drt=r(Qse,` class
method.`),Qse.forEach(t),crt=i($i),hS=n($i,"P",{});var XKe=s(hS);frt=r(XKe,"This class cannot be instantiated directly using "),R7e=n(XKe,"CODE",{});var Aea=s(R7e);mrt=r(Aea,"__init__()"),Aea.forEach(t),grt=r(XKe," (throws an error)."),XKe.forEach(t),hrt=i($i),na=n($i,"DIV",{class:!0});var dy=s(na);T(pS.$$.fragment,dy),prt=i(dy),P7e=n(dy,"P",{});var Lea=s(P7e);_rt=r(Lea,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Lea.forEach(t),urt=i(dy),Bf=n(dy,"P",{});var Use=s(Bf);brt=r(Use,`Note:
Loading a model from its configuration file does `),B7e=n(Use,"STRONG",{});var yea=s(B7e);vrt=r(yea,"not"),yea.forEach(t),Frt=r(Use,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bte=n(Use,"A",{href:!0});var xea=s(Bte);Trt=r(xea,"from_pretrained()"),xea.forEach(t),Mrt=r(Use," to load the model weights."),Use.forEach(t),Ert=i(dy),T(Mw.$$.fragment,dy),dy.forEach(t),Crt=i($i),Zr=n($i,"DIV",{class:!0});var ki=s(Zr);T(_S.$$.fragment,ki),wrt=i(ki),I7e=n(ki,"P",{});var $ea=s(I7e);Art=r($ea,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$ea.forEach(t),Lrt=i(ki),jn=n(ki,"P",{});var cy=s(jn);yrt=r(cy,"The model class to instantiate is selected based on the "),N7e=n(cy,"CODE",{});var kea=s(N7e);xrt=r(kea,"model_type"),kea.forEach(t),$rt=r(cy,` property of the config object (either
passed as an argument or loaded from `),q7e=n(cy,"CODE",{});var Sea=s(q7e);krt=r(Sea,"pretrained_model_name_or_path"),Sea.forEach(t),Srt=r(cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=n(cy,"CODE",{});var Rea=s(j7e);Rrt=r(Rea,"pretrained_model_name_or_path"),Rea.forEach(t),Prt=r(cy,":"),cy.forEach(t),Brt=i(ki),$e=n(ki,"UL",{});var qe=s($e);Ew=n(qe,"LI",{});var LQe=s(Ew);D7e=n(LQe,"STRONG",{});var Pea=s(D7e);Irt=r(Pea,"albert"),Pea.forEach(t),Nrt=r(LQe," \u2014 "),Ite=n(LQe,"A",{href:!0});var Bea=s(Ite);qrt=r(Bea,"FlaxAlbertForMaskedLM"),Bea.forEach(t),jrt=r(LQe," (ALBERT model)"),LQe.forEach(t),Drt=i(qe),Cw=n(qe,"LI",{});var yQe=s(Cw);G7e=n(yQe,"STRONG",{});var Iea=s(G7e);Grt=r(Iea,"bart"),Iea.forEach(t),Ort=r(yQe," \u2014 "),Nte=n(yQe,"A",{href:!0});var Nea=s(Nte);Vrt=r(Nea,"FlaxBartForConditionalGeneration"),Nea.forEach(t),Xrt=r(yQe," (BART model)"),yQe.forEach(t),zrt=i(qe),ww=n(qe,"LI",{});var xQe=s(ww);O7e=n(xQe,"STRONG",{});var qea=s(O7e);Wrt=r(qea,"bert"),qea.forEach(t),Qrt=r(xQe," \u2014 "),qte=n(xQe,"A",{href:!0});var jea=s(qte);Urt=r(jea,"FlaxBertForMaskedLM"),jea.forEach(t),Hrt=r(xQe," (BERT model)"),xQe.forEach(t),Jrt=i(qe),Aw=n(qe,"LI",{});var $Qe=s(Aw);V7e=n($Qe,"STRONG",{});var Dea=s(V7e);Yrt=r(Dea,"big_bird"),Dea.forEach(t),Krt=r($Qe," \u2014 "),jte=n($Qe,"A",{href:!0});var Gea=s(jte);Zrt=r(Gea,"FlaxBigBirdForMaskedLM"),Gea.forEach(t),ett=r($Qe," (BigBird model)"),$Qe.forEach(t),ott=i(qe),Lw=n(qe,"LI",{});var kQe=s(Lw);X7e=n(kQe,"STRONG",{});var Oea=s(X7e);rtt=r(Oea,"distilbert"),Oea.forEach(t),ttt=r(kQe," \u2014 "),Dte=n(kQe,"A",{href:!0});var Vea=s(Dte);att=r(Vea,"FlaxDistilBertForMaskedLM"),Vea.forEach(t),ntt=r(kQe," (DistilBERT model)"),kQe.forEach(t),stt=i(qe),yw=n(qe,"LI",{});var SQe=s(yw);z7e=n(SQe,"STRONG",{});var Xea=s(z7e);ltt=r(Xea,"electra"),Xea.forEach(t),itt=r(SQe," \u2014 "),Gte=n(SQe,"A",{href:!0});var zea=s(Gte);dtt=r(zea,"FlaxElectraForMaskedLM"),zea.forEach(t),ctt=r(SQe," (ELECTRA model)"),SQe.forEach(t),ftt=i(qe),xw=n(qe,"LI",{});var RQe=s(xw);W7e=n(RQe,"STRONG",{});var Wea=s(W7e);mtt=r(Wea,"mbart"),Wea.forEach(t),gtt=r(RQe," \u2014 "),Ote=n(RQe,"A",{href:!0});var Qea=s(Ote);htt=r(Qea,"FlaxMBartForConditionalGeneration"),Qea.forEach(t),ptt=r(RQe," (mBART model)"),RQe.forEach(t),_tt=i(qe),$w=n(qe,"LI",{});var PQe=s($w);Q7e=n(PQe,"STRONG",{});var Uea=s(Q7e);utt=r(Uea,"roberta"),Uea.forEach(t),btt=r(PQe," \u2014 "),Vte=n(PQe,"A",{href:!0});var Hea=s(Vte);vtt=r(Hea,"FlaxRobertaForMaskedLM"),Hea.forEach(t),Ftt=r(PQe," (RoBERTa model)"),PQe.forEach(t),Ttt=i(qe),kw=n(qe,"LI",{});var BQe=s(kw);U7e=n(BQe,"STRONG",{});var Jea=s(U7e);Mtt=r(Jea,"roformer"),Jea.forEach(t),Ett=r(BQe," \u2014 "),Xte=n(BQe,"A",{href:!0});var Yea=s(Xte);Ctt=r(Yea,"FlaxRoFormerForMaskedLM"),Yea.forEach(t),wtt=r(BQe," (RoFormer model)"),BQe.forEach(t),Att=i(qe),Sw=n(qe,"LI",{});var IQe=s(Sw);H7e=n(IQe,"STRONG",{});var Kea=s(H7e);Ltt=r(Kea,"xlm-roberta"),Kea.forEach(t),ytt=r(IQe," \u2014 "),zte=n(IQe,"A",{href:!0});var Zea=s(zte);xtt=r(Zea,"FlaxXLMRobertaForMaskedLM"),Zea.forEach(t),$tt=r(IQe," (XLM-RoBERTa model)"),IQe.forEach(t),qe.forEach(t),ktt=i(ki),T(Rw.$$.fragment,ki),ki.forEach(t),$i.forEach(t),yJe=i(f),If=n(f,"H2",{class:!0});var zKe=s(If);Pw=n(zKe,"A",{id:!0,class:!0,href:!0});var eoa=s(Pw);J7e=n(eoa,"SPAN",{});var ooa=s(J7e);T(uS.$$.fragment,ooa),ooa.forEach(t),eoa.forEach(t),Stt=i(zKe),Y7e=n(zKe,"SPAN",{});var roa=s(Y7e);Rtt=r(roa,"FlaxAutoModelForSeq2SeqLM"),roa.forEach(t),zKe.forEach(t),xJe=i(f),wr=n(f,"DIV",{class:!0});var Si=s(wr);T(bS.$$.fragment,Si),Ptt=i(Si),Nf=n(Si,"P",{});var Hse=s(Nf);Btt=r(Hse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Wte=n(Hse,"A",{href:!0});var toa=s(Wte);Itt=r(toa,"from_pretrained()"),toa.forEach(t),Ntt=r(Hse," class method or the "),Qte=n(Hse,"A",{href:!0});var aoa=s(Qte);qtt=r(aoa,"from_config()"),aoa.forEach(t),jtt=r(Hse,` class
method.`),Hse.forEach(t),Dtt=i(Si),vS=n(Si,"P",{});var WKe=s(vS);Gtt=r(WKe,"This class cannot be instantiated directly using "),K7e=n(WKe,"CODE",{});var noa=s(K7e);Ott=r(noa,"__init__()"),noa.forEach(t),Vtt=r(WKe," (throws an error)."),WKe.forEach(t),Xtt=i(Si),sa=n(Si,"DIV",{class:!0});var fy=s(sa);T(FS.$$.fragment,fy),ztt=i(fy),Z7e=n(fy,"P",{});var soa=s(Z7e);Wtt=r(soa,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),soa.forEach(t),Qtt=i(fy),qf=n(fy,"P",{});var Jse=s(qf);Utt=r(Jse,`Note:
Loading a model from its configuration file does `),eLe=n(Jse,"STRONG",{});var loa=s(eLe);Htt=r(loa,"not"),loa.forEach(t),Jtt=r(Jse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ute=n(Jse,"A",{href:!0});var ioa=s(Ute);Ytt=r(ioa,"from_pretrained()"),ioa.forEach(t),Ktt=r(Jse," to load the model weights."),Jse.forEach(t),Ztt=i(fy),T(Bw.$$.fragment,fy),fy.forEach(t),eat=i(Si),et=n(Si,"DIV",{class:!0});var Ri=s(et);T(TS.$$.fragment,Ri),oat=i(Ri),oLe=n(Ri,"P",{});var doa=s(oLe);rat=r(doa,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),doa.forEach(t),tat=i(Ri),Dn=n(Ri,"P",{});var my=s(Dn);aat=r(my,"The model class to instantiate is selected based on the "),rLe=n(my,"CODE",{});var coa=s(rLe);nat=r(coa,"model_type"),coa.forEach(t),sat=r(my,` property of the config object (either
passed as an argument or loaded from `),tLe=n(my,"CODE",{});var foa=s(tLe);lat=r(foa,"pretrained_model_name_or_path"),foa.forEach(t),iat=r(my,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aLe=n(my,"CODE",{});var moa=s(aLe);dat=r(moa,"pretrained_model_name_or_path"),moa.forEach(t),cat=r(my,":"),my.forEach(t),fat=i(Ri),ke=n(Ri,"UL",{});var je=s(ke);Iw=n(je,"LI",{});var NQe=s(Iw);nLe=n(NQe,"STRONG",{});var goa=s(nLe);mat=r(goa,"bart"),goa.forEach(t),gat=r(NQe," \u2014 "),Hte=n(NQe,"A",{href:!0});var hoa=s(Hte);hat=r(hoa,"FlaxBartForConditionalGeneration"),hoa.forEach(t),pat=r(NQe," (BART model)"),NQe.forEach(t),_at=i(je),Nw=n(je,"LI",{});var qQe=s(Nw);sLe=n(qQe,"STRONG",{});var poa=s(sLe);uat=r(poa,"blenderbot"),poa.forEach(t),bat=r(qQe," \u2014 "),Jte=n(qQe,"A",{href:!0});var _oa=s(Jte);vat=r(_oa,"FlaxBlenderbotForConditionalGeneration"),_oa.forEach(t),Fat=r(qQe," (Blenderbot model)"),qQe.forEach(t),Tat=i(je),qw=n(je,"LI",{});var jQe=s(qw);lLe=n(jQe,"STRONG",{});var uoa=s(lLe);Mat=r(uoa,"blenderbot-small"),uoa.forEach(t),Eat=r(jQe," \u2014 "),Yte=n(jQe,"A",{href:!0});var boa=s(Yte);Cat=r(boa,"FlaxBlenderbotSmallForConditionalGeneration"),boa.forEach(t),wat=r(jQe," (BlenderbotSmall model)"),jQe.forEach(t),Aat=i(je),jw=n(je,"LI",{});var DQe=s(jw);iLe=n(DQe,"STRONG",{});var voa=s(iLe);Lat=r(voa,"encoder-decoder"),voa.forEach(t),yat=r(DQe," \u2014 "),Kte=n(DQe,"A",{href:!0});var Foa=s(Kte);xat=r(Foa,"FlaxEncoderDecoderModel"),Foa.forEach(t),$at=r(DQe," (Encoder decoder model)"),DQe.forEach(t),kat=i(je),Dw=n(je,"LI",{});var GQe=s(Dw);dLe=n(GQe,"STRONG",{});var Toa=s(dLe);Sat=r(Toa,"longt5"),Toa.forEach(t),Rat=r(GQe," \u2014 "),Zte=n(GQe,"A",{href:!0});var Moa=s(Zte);Pat=r(Moa,"FlaxLongT5ForConditionalGeneration"),Moa.forEach(t),Bat=r(GQe," (LongT5 model)"),GQe.forEach(t),Iat=i(je),Gw=n(je,"LI",{});var OQe=s(Gw);cLe=n(OQe,"STRONG",{});var Eoa=s(cLe);Nat=r(Eoa,"marian"),Eoa.forEach(t),qat=r(OQe," \u2014 "),eae=n(OQe,"A",{href:!0});var Coa=s(eae);jat=r(Coa,"FlaxMarianMTModel"),Coa.forEach(t),Dat=r(OQe," (Marian model)"),OQe.forEach(t),Gat=i(je),Ow=n(je,"LI",{});var VQe=s(Ow);fLe=n(VQe,"STRONG",{});var woa=s(fLe);Oat=r(woa,"mbart"),woa.forEach(t),Vat=r(VQe," \u2014 "),oae=n(VQe,"A",{href:!0});var Aoa=s(oae);Xat=r(Aoa,"FlaxMBartForConditionalGeneration"),Aoa.forEach(t),zat=r(VQe," (mBART model)"),VQe.forEach(t),Wat=i(je),Vw=n(je,"LI",{});var XQe=s(Vw);mLe=n(XQe,"STRONG",{});var Loa=s(mLe);Qat=r(Loa,"mt5"),Loa.forEach(t),Uat=r(XQe," \u2014 "),rae=n(XQe,"A",{href:!0});var yoa=s(rae);Hat=r(yoa,"FlaxMT5ForConditionalGeneration"),yoa.forEach(t),Jat=r(XQe," (MT5 model)"),XQe.forEach(t),Yat=i(je),Xw=n(je,"LI",{});var zQe=s(Xw);gLe=n(zQe,"STRONG",{});var xoa=s(gLe);Kat=r(xoa,"pegasus"),xoa.forEach(t),Zat=r(zQe," \u2014 "),tae=n(zQe,"A",{href:!0});var $oa=s(tae);ent=r($oa,"FlaxPegasusForConditionalGeneration"),$oa.forEach(t),ont=r(zQe," (Pegasus model)"),zQe.forEach(t),rnt=i(je),zw=n(je,"LI",{});var WQe=s(zw);hLe=n(WQe,"STRONG",{});var koa=s(hLe);tnt=r(koa,"t5"),koa.forEach(t),ant=r(WQe," \u2014 "),aae=n(WQe,"A",{href:!0});var Soa=s(aae);nnt=r(Soa,"FlaxT5ForConditionalGeneration"),Soa.forEach(t),snt=r(WQe," (T5 model)"),WQe.forEach(t),je.forEach(t),lnt=i(Ri),T(Ww.$$.fragment,Ri),Ri.forEach(t),Si.forEach(t),$Je=i(f),jf=n(f,"H2",{class:!0});var QKe=s(jf);Qw=n(QKe,"A",{id:!0,class:!0,href:!0});var Roa=s(Qw);pLe=n(Roa,"SPAN",{});var Poa=s(pLe);T(MS.$$.fragment,Poa),Poa.forEach(t),Roa.forEach(t),int=i(QKe),_Le=n(QKe,"SPAN",{});var Boa=s(_Le);dnt=r(Boa,"FlaxAutoModelForSequenceClassification"),Boa.forEach(t),QKe.forEach(t),kJe=i(f),Ar=n(f,"DIV",{class:!0});var Pi=s(Ar);T(ES.$$.fragment,Pi),cnt=i(Pi),Df=n(Pi,"P",{});var Yse=s(Df);fnt=r(Yse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nae=n(Yse,"A",{href:!0});var Ioa=s(nae);mnt=r(Ioa,"from_pretrained()"),Ioa.forEach(t),gnt=r(Yse," class method or the "),sae=n(Yse,"A",{href:!0});var Noa=s(sae);hnt=r(Noa,"from_config()"),Noa.forEach(t),pnt=r(Yse,` class
method.`),Yse.forEach(t),_nt=i(Pi),CS=n(Pi,"P",{});var UKe=s(CS);unt=r(UKe,"This class cannot be instantiated directly using "),uLe=n(UKe,"CODE",{});var qoa=s(uLe);bnt=r(qoa,"__init__()"),qoa.forEach(t),vnt=r(UKe," (throws an error)."),UKe.forEach(t),Fnt=i(Pi),la=n(Pi,"DIV",{class:!0});var gy=s(la);T(wS.$$.fragment,gy),Tnt=i(gy),bLe=n(gy,"P",{});var joa=s(bLe);Mnt=r(joa,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),joa.forEach(t),Ent=i(gy),Gf=n(gy,"P",{});var Kse=s(Gf);Cnt=r(Kse,`Note:
Loading a model from its configuration file does `),vLe=n(Kse,"STRONG",{});var Doa=s(vLe);wnt=r(Doa,"not"),Doa.forEach(t),Ant=r(Kse,` load the model weights. It only affects the
model\u2019s configuration. Use `),lae=n(Kse,"A",{href:!0});var Goa=s(lae);Lnt=r(Goa,"from_pretrained()"),Goa.forEach(t),ynt=r(Kse," to load the model weights."),Kse.forEach(t),xnt=i(gy),T(Uw.$$.fragment,gy),gy.forEach(t),$nt=i(Pi),ot=n(Pi,"DIV",{class:!0});var Bi=s(ot);T(AS.$$.fragment,Bi),knt=i(Bi),FLe=n(Bi,"P",{});var Ooa=s(FLe);Snt=r(Ooa,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ooa.forEach(t),Rnt=i(Bi),Gn=n(Bi,"P",{});var hy=s(Gn);Pnt=r(hy,"The model class to instantiate is selected based on the "),TLe=n(hy,"CODE",{});var Voa=s(TLe);Bnt=r(Voa,"model_type"),Voa.forEach(t),Int=r(hy,` property of the config object (either
passed as an argument or loaded from `),MLe=n(hy,"CODE",{});var Xoa=s(MLe);Nnt=r(Xoa,"pretrained_model_name_or_path"),Xoa.forEach(t),qnt=r(hy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ELe=n(hy,"CODE",{});var zoa=s(ELe);jnt=r(zoa,"pretrained_model_name_or_path"),zoa.forEach(t),Dnt=r(hy,":"),hy.forEach(t),Gnt=i(Bi),Se=n(Bi,"UL",{});var De=s(Se);Hw=n(De,"LI",{});var QQe=s(Hw);CLe=n(QQe,"STRONG",{});var Woa=s(CLe);Ont=r(Woa,"albert"),Woa.forEach(t),Vnt=r(QQe," \u2014 "),iae=n(QQe,"A",{href:!0});var Qoa=s(iae);Xnt=r(Qoa,"FlaxAlbertForSequenceClassification"),Qoa.forEach(t),znt=r(QQe," (ALBERT model)"),QQe.forEach(t),Wnt=i(De),Jw=n(De,"LI",{});var UQe=s(Jw);wLe=n(UQe,"STRONG",{});var Uoa=s(wLe);Qnt=r(Uoa,"bart"),Uoa.forEach(t),Unt=r(UQe," \u2014 "),dae=n(UQe,"A",{href:!0});var Hoa=s(dae);Hnt=r(Hoa,"FlaxBartForSequenceClassification"),Hoa.forEach(t),Jnt=r(UQe," (BART model)"),UQe.forEach(t),Ynt=i(De),Yw=n(De,"LI",{});var HQe=s(Yw);ALe=n(HQe,"STRONG",{});var Joa=s(ALe);Knt=r(Joa,"bert"),Joa.forEach(t),Znt=r(HQe," \u2014 "),cae=n(HQe,"A",{href:!0});var Yoa=s(cae);est=r(Yoa,"FlaxBertForSequenceClassification"),Yoa.forEach(t),ost=r(HQe," (BERT model)"),HQe.forEach(t),rst=i(De),Kw=n(De,"LI",{});var JQe=s(Kw);LLe=n(JQe,"STRONG",{});var Koa=s(LLe);tst=r(Koa,"big_bird"),Koa.forEach(t),ast=r(JQe," \u2014 "),fae=n(JQe,"A",{href:!0});var Zoa=s(fae);nst=r(Zoa,"FlaxBigBirdForSequenceClassification"),Zoa.forEach(t),sst=r(JQe," (BigBird model)"),JQe.forEach(t),lst=i(De),Zw=n(De,"LI",{});var YQe=s(Zw);yLe=n(YQe,"STRONG",{});var era=s(yLe);ist=r(era,"distilbert"),era.forEach(t),dst=r(YQe," \u2014 "),mae=n(YQe,"A",{href:!0});var ora=s(mae);cst=r(ora,"FlaxDistilBertForSequenceClassification"),ora.forEach(t),fst=r(YQe," (DistilBERT model)"),YQe.forEach(t),mst=i(De),eA=n(De,"LI",{});var KQe=s(eA);xLe=n(KQe,"STRONG",{});var rra=s(xLe);gst=r(rra,"electra"),rra.forEach(t),hst=r(KQe," \u2014 "),gae=n(KQe,"A",{href:!0});var tra=s(gae);pst=r(tra,"FlaxElectraForSequenceClassification"),tra.forEach(t),_st=r(KQe," (ELECTRA model)"),KQe.forEach(t),ust=i(De),oA=n(De,"LI",{});var ZQe=s(oA);$Le=n(ZQe,"STRONG",{});var ara=s($Le);bst=r(ara,"mbart"),ara.forEach(t),vst=r(ZQe," \u2014 "),hae=n(ZQe,"A",{href:!0});var nra=s(hae);Fst=r(nra,"FlaxMBartForSequenceClassification"),nra.forEach(t),Tst=r(ZQe," (mBART model)"),ZQe.forEach(t),Mst=i(De),rA=n(De,"LI",{});var eUe=s(rA);kLe=n(eUe,"STRONG",{});var sra=s(kLe);Est=r(sra,"roberta"),sra.forEach(t),Cst=r(eUe," \u2014 "),pae=n(eUe,"A",{href:!0});var lra=s(pae);wst=r(lra,"FlaxRobertaForSequenceClassification"),lra.forEach(t),Ast=r(eUe," (RoBERTa model)"),eUe.forEach(t),Lst=i(De),tA=n(De,"LI",{});var oUe=s(tA);SLe=n(oUe,"STRONG",{});var ira=s(SLe);yst=r(ira,"roformer"),ira.forEach(t),xst=r(oUe," \u2014 "),_ae=n(oUe,"A",{href:!0});var dra=s(_ae);$st=r(dra,"FlaxRoFormerForSequenceClassification"),dra.forEach(t),kst=r(oUe," (RoFormer model)"),oUe.forEach(t),Sst=i(De),aA=n(De,"LI",{});var rUe=s(aA);RLe=n(rUe,"STRONG",{});var cra=s(RLe);Rst=r(cra,"xlm-roberta"),cra.forEach(t),Pst=r(rUe," \u2014 "),uae=n(rUe,"A",{href:!0});var fra=s(uae);Bst=r(fra,"FlaxXLMRobertaForSequenceClassification"),fra.forEach(t),Ist=r(rUe," (XLM-RoBERTa model)"),rUe.forEach(t),De.forEach(t),Nst=i(Bi),T(nA.$$.fragment,Bi),Bi.forEach(t),Pi.forEach(t),SJe=i(f),Of=n(f,"H2",{class:!0});var HKe=s(Of);sA=n(HKe,"A",{id:!0,class:!0,href:!0});var mra=s(sA);PLe=n(mra,"SPAN",{});var gra=s(PLe);T(LS.$$.fragment,gra),gra.forEach(t),mra.forEach(t),qst=i(HKe),BLe=n(HKe,"SPAN",{});var hra=s(BLe);jst=r(hra,"FlaxAutoModelForQuestionAnswering"),hra.forEach(t),HKe.forEach(t),RJe=i(f),Lr=n(f,"DIV",{class:!0});var Ii=s(Lr);T(yS.$$.fragment,Ii),Dst=i(Ii),Vf=n(Ii,"P",{});var Zse=s(Vf);Gst=r(Zse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bae=n(Zse,"A",{href:!0});var pra=s(bae);Ost=r(pra,"from_pretrained()"),pra.forEach(t),Vst=r(Zse," class method or the "),vae=n(Zse,"A",{href:!0});var _ra=s(vae);Xst=r(_ra,"from_config()"),_ra.forEach(t),zst=r(Zse,` class
method.`),Zse.forEach(t),Wst=i(Ii),xS=n(Ii,"P",{});var JKe=s(xS);Qst=r(JKe,"This class cannot be instantiated directly using "),ILe=n(JKe,"CODE",{});var ura=s(ILe);Ust=r(ura,"__init__()"),ura.forEach(t),Hst=r(JKe," (throws an error)."),JKe.forEach(t),Jst=i(Ii),ia=n(Ii,"DIV",{class:!0});var py=s(ia);T($S.$$.fragment,py),Yst=i(py),NLe=n(py,"P",{});var bra=s(NLe);Kst=r(bra,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bra.forEach(t),Zst=i(py),Xf=n(py,"P",{});var ele=s(Xf);elt=r(ele,`Note:
Loading a model from its configuration file does `),qLe=n(ele,"STRONG",{});var vra=s(qLe);olt=r(vra,"not"),vra.forEach(t),rlt=r(ele,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fae=n(ele,"A",{href:!0});var Fra=s(Fae);tlt=r(Fra,"from_pretrained()"),Fra.forEach(t),alt=r(ele," to load the model weights."),ele.forEach(t),nlt=i(py),T(lA.$$.fragment,py),py.forEach(t),slt=i(Ii),rt=n(Ii,"DIV",{class:!0});var Ni=s(rt);T(kS.$$.fragment,Ni),llt=i(Ni),jLe=n(Ni,"P",{});var Tra=s(jLe);ilt=r(Tra,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Tra.forEach(t),dlt=i(Ni),On=n(Ni,"P",{});var _y=s(On);clt=r(_y,"The model class to instantiate is selected based on the "),DLe=n(_y,"CODE",{});var Mra=s(DLe);flt=r(Mra,"model_type"),Mra.forEach(t),mlt=r(_y,` property of the config object (either
passed as an argument or loaded from `),GLe=n(_y,"CODE",{});var Era=s(GLe);glt=r(Era,"pretrained_model_name_or_path"),Era.forEach(t),hlt=r(_y,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OLe=n(_y,"CODE",{});var Cra=s(OLe);plt=r(Cra,"pretrained_model_name_or_path"),Cra.forEach(t),_lt=r(_y,":"),_y.forEach(t),ult=i(Ni),Re=n(Ni,"UL",{});var Ge=s(Re);iA=n(Ge,"LI",{});var tUe=s(iA);VLe=n(tUe,"STRONG",{});var wra=s(VLe);blt=r(wra,"albert"),wra.forEach(t),vlt=r(tUe," \u2014 "),Tae=n(tUe,"A",{href:!0});var Ara=s(Tae);Flt=r(Ara,"FlaxAlbertForQuestionAnswering"),Ara.forEach(t),Tlt=r(tUe," (ALBERT model)"),tUe.forEach(t),Mlt=i(Ge),dA=n(Ge,"LI",{});var aUe=s(dA);XLe=n(aUe,"STRONG",{});var Lra=s(XLe);Elt=r(Lra,"bart"),Lra.forEach(t),Clt=r(aUe," \u2014 "),Mae=n(aUe,"A",{href:!0});var yra=s(Mae);wlt=r(yra,"FlaxBartForQuestionAnswering"),yra.forEach(t),Alt=r(aUe," (BART model)"),aUe.forEach(t),Llt=i(Ge),cA=n(Ge,"LI",{});var nUe=s(cA);zLe=n(nUe,"STRONG",{});var xra=s(zLe);ylt=r(xra,"bert"),xra.forEach(t),xlt=r(nUe," \u2014 "),Eae=n(nUe,"A",{href:!0});var $ra=s(Eae);$lt=r($ra,"FlaxBertForQuestionAnswering"),$ra.forEach(t),klt=r(nUe," (BERT model)"),nUe.forEach(t),Slt=i(Ge),fA=n(Ge,"LI",{});var sUe=s(fA);WLe=n(sUe,"STRONG",{});var kra=s(WLe);Rlt=r(kra,"big_bird"),kra.forEach(t),Plt=r(sUe," \u2014 "),Cae=n(sUe,"A",{href:!0});var Sra=s(Cae);Blt=r(Sra,"FlaxBigBirdForQuestionAnswering"),Sra.forEach(t),Ilt=r(sUe," (BigBird model)"),sUe.forEach(t),Nlt=i(Ge),mA=n(Ge,"LI",{});var lUe=s(mA);QLe=n(lUe,"STRONG",{});var Rra=s(QLe);qlt=r(Rra,"distilbert"),Rra.forEach(t),jlt=r(lUe," \u2014 "),wae=n(lUe,"A",{href:!0});var Pra=s(wae);Dlt=r(Pra,"FlaxDistilBertForQuestionAnswering"),Pra.forEach(t),Glt=r(lUe," (DistilBERT model)"),lUe.forEach(t),Olt=i(Ge),gA=n(Ge,"LI",{});var iUe=s(gA);ULe=n(iUe,"STRONG",{});var Bra=s(ULe);Vlt=r(Bra,"electra"),Bra.forEach(t),Xlt=r(iUe," \u2014 "),Aae=n(iUe,"A",{href:!0});var Ira=s(Aae);zlt=r(Ira,"FlaxElectraForQuestionAnswering"),Ira.forEach(t),Wlt=r(iUe," (ELECTRA model)"),iUe.forEach(t),Qlt=i(Ge),hA=n(Ge,"LI",{});var dUe=s(hA);HLe=n(dUe,"STRONG",{});var Nra=s(HLe);Ult=r(Nra,"mbart"),Nra.forEach(t),Hlt=r(dUe," \u2014 "),Lae=n(dUe,"A",{href:!0});var qra=s(Lae);Jlt=r(qra,"FlaxMBartForQuestionAnswering"),qra.forEach(t),Ylt=r(dUe," (mBART model)"),dUe.forEach(t),Klt=i(Ge),pA=n(Ge,"LI",{});var cUe=s(pA);JLe=n(cUe,"STRONG",{});var jra=s(JLe);Zlt=r(jra,"roberta"),jra.forEach(t),eit=r(cUe," \u2014 "),yae=n(cUe,"A",{href:!0});var Dra=s(yae);oit=r(Dra,"FlaxRobertaForQuestionAnswering"),Dra.forEach(t),rit=r(cUe," (RoBERTa model)"),cUe.forEach(t),tit=i(Ge),_A=n(Ge,"LI",{});var fUe=s(_A);YLe=n(fUe,"STRONG",{});var Gra=s(YLe);ait=r(Gra,"roformer"),Gra.forEach(t),nit=r(fUe," \u2014 "),xae=n(fUe,"A",{href:!0});var Ora=s(xae);sit=r(Ora,"FlaxRoFormerForQuestionAnswering"),Ora.forEach(t),lit=r(fUe," (RoFormer model)"),fUe.forEach(t),iit=i(Ge),uA=n(Ge,"LI",{});var mUe=s(uA);KLe=n(mUe,"STRONG",{});var Vra=s(KLe);dit=r(Vra,"xlm-roberta"),Vra.forEach(t),cit=r(mUe," \u2014 "),$ae=n(mUe,"A",{href:!0});var Xra=s($ae);fit=r(Xra,"FlaxXLMRobertaForQuestionAnswering"),Xra.forEach(t),mit=r(mUe," (XLM-RoBERTa model)"),mUe.forEach(t),Ge.forEach(t),git=i(Ni),T(bA.$$.fragment,Ni),Ni.forEach(t),Ii.forEach(t),PJe=i(f),zf=n(f,"H2",{class:!0});var YKe=s(zf);vA=n(YKe,"A",{id:!0,class:!0,href:!0});var zra=s(vA);ZLe=n(zra,"SPAN",{});var Wra=s(ZLe);T(SS.$$.fragment,Wra),Wra.forEach(t),zra.forEach(t),hit=i(YKe),eye=n(YKe,"SPAN",{});var Qra=s(eye);pit=r(Qra,"FlaxAutoModelForTokenClassification"),Qra.forEach(t),YKe.forEach(t),BJe=i(f),yr=n(f,"DIV",{class:!0});var qi=s(yr);T(RS.$$.fragment,qi),_it=i(qi),Wf=n(qi,"P",{});var ole=s(Wf);uit=r(ole,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kae=n(ole,"A",{href:!0});var Ura=s(kae);bit=r(Ura,"from_pretrained()"),Ura.forEach(t),vit=r(ole," class method or the "),Sae=n(ole,"A",{href:!0});var Hra=s(Sae);Fit=r(Hra,"from_config()"),Hra.forEach(t),Tit=r(ole,` class
method.`),ole.forEach(t),Mit=i(qi),PS=n(qi,"P",{});var KKe=s(PS);Eit=r(KKe,"This class cannot be instantiated directly using "),oye=n(KKe,"CODE",{});var Jra=s(oye);Cit=r(Jra,"__init__()"),Jra.forEach(t),wit=r(KKe," (throws an error)."),KKe.forEach(t),Ait=i(qi),da=n(qi,"DIV",{class:!0});var uy=s(da);T(BS.$$.fragment,uy),Lit=i(uy),rye=n(uy,"P",{});var Yra=s(rye);yit=r(Yra,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Yra.forEach(t),xit=i(uy),Qf=n(uy,"P",{});var rle=s(Qf);$it=r(rle,`Note:
Loading a model from its configuration file does `),tye=n(rle,"STRONG",{});var Kra=s(tye);kit=r(Kra,"not"),Kra.forEach(t),Sit=r(rle,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rae=n(rle,"A",{href:!0});var Zra=s(Rae);Rit=r(Zra,"from_pretrained()"),Zra.forEach(t),Pit=r(rle," to load the model weights."),rle.forEach(t),Bit=i(uy),T(FA.$$.fragment,uy),uy.forEach(t),Iit=i(qi),tt=n(qi,"DIV",{class:!0});var ji=s(tt);T(IS.$$.fragment,ji),Nit=i(ji),aye=n(ji,"P",{});var eta=s(aye);qit=r(eta,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),eta.forEach(t),jit=i(ji),Vn=n(ji,"P",{});var by=s(Vn);Dit=r(by,"The model class to instantiate is selected based on the "),nye=n(by,"CODE",{});var ota=s(nye);Git=r(ota,"model_type"),ota.forEach(t),Oit=r(by,` property of the config object (either
passed as an argument or loaded from `),sye=n(by,"CODE",{});var rta=s(sye);Vit=r(rta,"pretrained_model_name_or_path"),rta.forEach(t),Xit=r(by,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lye=n(by,"CODE",{});var tta=s(lye);zit=r(tta,"pretrained_model_name_or_path"),tta.forEach(t),Wit=r(by,":"),by.forEach(t),Qit=i(ji),Xe=n(ji,"UL",{});var wo=s(Xe);TA=n(wo,"LI",{});var gUe=s(TA);iye=n(gUe,"STRONG",{});var ata=s(iye);Uit=r(ata,"albert"),ata.forEach(t),Hit=r(gUe," \u2014 "),Pae=n(gUe,"A",{href:!0});var nta=s(Pae);Jit=r(nta,"FlaxAlbertForTokenClassification"),nta.forEach(t),Yit=r(gUe," (ALBERT model)"),gUe.forEach(t),Kit=i(wo),MA=n(wo,"LI",{});var hUe=s(MA);dye=n(hUe,"STRONG",{});var sta=s(dye);Zit=r(sta,"bert"),sta.forEach(t),edt=r(hUe," \u2014 "),Bae=n(hUe,"A",{href:!0});var lta=s(Bae);odt=r(lta,"FlaxBertForTokenClassification"),lta.forEach(t),rdt=r(hUe," (BERT model)"),hUe.forEach(t),tdt=i(wo),EA=n(wo,"LI",{});var pUe=s(EA);cye=n(pUe,"STRONG",{});var ita=s(cye);adt=r(ita,"big_bird"),ita.forEach(t),ndt=r(pUe," \u2014 "),Iae=n(pUe,"A",{href:!0});var dta=s(Iae);sdt=r(dta,"FlaxBigBirdForTokenClassification"),dta.forEach(t),ldt=r(pUe," (BigBird model)"),pUe.forEach(t),idt=i(wo),CA=n(wo,"LI",{});var _Ue=s(CA);fye=n(_Ue,"STRONG",{});var cta=s(fye);ddt=r(cta,"distilbert"),cta.forEach(t),cdt=r(_Ue," \u2014 "),Nae=n(_Ue,"A",{href:!0});var fta=s(Nae);fdt=r(fta,"FlaxDistilBertForTokenClassification"),fta.forEach(t),mdt=r(_Ue," (DistilBERT model)"),_Ue.forEach(t),gdt=i(wo),wA=n(wo,"LI",{});var uUe=s(wA);mye=n(uUe,"STRONG",{});var mta=s(mye);hdt=r(mta,"electra"),mta.forEach(t),pdt=r(uUe," \u2014 "),qae=n(uUe,"A",{href:!0});var gta=s(qae);_dt=r(gta,"FlaxElectraForTokenClassification"),gta.forEach(t),udt=r(uUe," (ELECTRA model)"),uUe.forEach(t),bdt=i(wo),AA=n(wo,"LI",{});var bUe=s(AA);gye=n(bUe,"STRONG",{});var hta=s(gye);vdt=r(hta,"roberta"),hta.forEach(t),Fdt=r(bUe," \u2014 "),jae=n(bUe,"A",{href:!0});var pta=s(jae);Tdt=r(pta,"FlaxRobertaForTokenClassification"),pta.forEach(t),Mdt=r(bUe," (RoBERTa model)"),bUe.forEach(t),Edt=i(wo),LA=n(wo,"LI",{});var vUe=s(LA);hye=n(vUe,"STRONG",{});var _ta=s(hye);Cdt=r(_ta,"roformer"),_ta.forEach(t),wdt=r(vUe," \u2014 "),Dae=n(vUe,"A",{href:!0});var uta=s(Dae);Adt=r(uta,"FlaxRoFormerForTokenClassification"),uta.forEach(t),Ldt=r(vUe," (RoFormer model)"),vUe.forEach(t),ydt=i(wo),yA=n(wo,"LI",{});var FUe=s(yA);pye=n(FUe,"STRONG",{});var bta=s(pye);xdt=r(bta,"xlm-roberta"),bta.forEach(t),$dt=r(FUe," \u2014 "),Gae=n(FUe,"A",{href:!0});var vta=s(Gae);kdt=r(vta,"FlaxXLMRobertaForTokenClassification"),vta.forEach(t),Sdt=r(FUe," (XLM-RoBERTa model)"),FUe.forEach(t),wo.forEach(t),Rdt=i(ji),T(xA.$$.fragment,ji),ji.forEach(t),qi.forEach(t),IJe=i(f),Uf=n(f,"H2",{class:!0});var ZKe=s(Uf);$A=n(ZKe,"A",{id:!0,class:!0,href:!0});var Fta=s($A);_ye=n(Fta,"SPAN",{});var Tta=s(_ye);T(NS.$$.fragment,Tta),Tta.forEach(t),Fta.forEach(t),Pdt=i(ZKe),uye=n(ZKe,"SPAN",{});var Mta=s(uye);Bdt=r(Mta,"FlaxAutoModelForMultipleChoice"),Mta.forEach(t),ZKe.forEach(t),NJe=i(f),xr=n(f,"DIV",{class:!0});var Di=s(xr);T(qS.$$.fragment,Di),Idt=i(Di),Hf=n(Di,"P",{});var tle=s(Hf);Ndt=r(tle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Oae=n(tle,"A",{href:!0});var Eta=s(Oae);qdt=r(Eta,"from_pretrained()"),Eta.forEach(t),jdt=r(tle," class method or the "),Vae=n(tle,"A",{href:!0});var Cta=s(Vae);Ddt=r(Cta,"from_config()"),Cta.forEach(t),Gdt=r(tle,` class
method.`),tle.forEach(t),Odt=i(Di),jS=n(Di,"P",{});var eZe=s(jS);Vdt=r(eZe,"This class cannot be instantiated directly using "),bye=n(eZe,"CODE",{});var wta=s(bye);Xdt=r(wta,"__init__()"),wta.forEach(t),zdt=r(eZe," (throws an error)."),eZe.forEach(t),Wdt=i(Di),ca=n(Di,"DIV",{class:!0});var vy=s(ca);T(DS.$$.fragment,vy),Qdt=i(vy),vye=n(vy,"P",{});var Ata=s(vye);Udt=r(Ata,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ata.forEach(t),Hdt=i(vy),Jf=n(vy,"P",{});var ale=s(Jf);Jdt=r(ale,`Note:
Loading a model from its configuration file does `),Fye=n(ale,"STRONG",{});var Lta=s(Fye);Ydt=r(Lta,"not"),Lta.forEach(t),Kdt=r(ale,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xae=n(ale,"A",{href:!0});var yta=s(Xae);Zdt=r(yta,"from_pretrained()"),yta.forEach(t),ect=r(ale," to load the model weights."),ale.forEach(t),oct=i(vy),T(kA.$$.fragment,vy),vy.forEach(t),rct=i(Di),at=n(Di,"DIV",{class:!0});var Gi=s(at);T(GS.$$.fragment,Gi),tct=i(Gi),Tye=n(Gi,"P",{});var xta=s(Tye);act=r(xta,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xta.forEach(t),nct=i(Gi),Xn=n(Gi,"P",{});var Fy=s(Xn);sct=r(Fy,"The model class to instantiate is selected based on the "),Mye=n(Fy,"CODE",{});var $ta=s(Mye);lct=r($ta,"model_type"),$ta.forEach(t),ict=r(Fy,` property of the config object (either
passed as an argument or loaded from `),Eye=n(Fy,"CODE",{});var kta=s(Eye);dct=r(kta,"pretrained_model_name_or_path"),kta.forEach(t),cct=r(Fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cye=n(Fy,"CODE",{});var Sta=s(Cye);fct=r(Sta,"pretrained_model_name_or_path"),Sta.forEach(t),mct=r(Fy,":"),Fy.forEach(t),gct=i(Gi),ze=n(Gi,"UL",{});var Ao=s(ze);SA=n(Ao,"LI",{});var TUe=s(SA);wye=n(TUe,"STRONG",{});var Rta=s(wye);hct=r(Rta,"albert"),Rta.forEach(t),pct=r(TUe," \u2014 "),zae=n(TUe,"A",{href:!0});var Pta=s(zae);_ct=r(Pta,"FlaxAlbertForMultipleChoice"),Pta.forEach(t),uct=r(TUe," (ALBERT model)"),TUe.forEach(t),bct=i(Ao),RA=n(Ao,"LI",{});var MUe=s(RA);Aye=n(MUe,"STRONG",{});var Bta=s(Aye);vct=r(Bta,"bert"),Bta.forEach(t),Fct=r(MUe," \u2014 "),Wae=n(MUe,"A",{href:!0});var Ita=s(Wae);Tct=r(Ita,"FlaxBertForMultipleChoice"),Ita.forEach(t),Mct=r(MUe," (BERT model)"),MUe.forEach(t),Ect=i(Ao),PA=n(Ao,"LI",{});var EUe=s(PA);Lye=n(EUe,"STRONG",{});var Nta=s(Lye);Cct=r(Nta,"big_bird"),Nta.forEach(t),wct=r(EUe," \u2014 "),Qae=n(EUe,"A",{href:!0});var qta=s(Qae);Act=r(qta,"FlaxBigBirdForMultipleChoice"),qta.forEach(t),Lct=r(EUe," (BigBird model)"),EUe.forEach(t),yct=i(Ao),BA=n(Ao,"LI",{});var CUe=s(BA);yye=n(CUe,"STRONG",{});var jta=s(yye);xct=r(jta,"distilbert"),jta.forEach(t),$ct=r(CUe," \u2014 "),Uae=n(CUe,"A",{href:!0});var Dta=s(Uae);kct=r(Dta,"FlaxDistilBertForMultipleChoice"),Dta.forEach(t),Sct=r(CUe," (DistilBERT model)"),CUe.forEach(t),Rct=i(Ao),IA=n(Ao,"LI",{});var wUe=s(IA);xye=n(wUe,"STRONG",{});var Gta=s(xye);Pct=r(Gta,"electra"),Gta.forEach(t),Bct=r(wUe," \u2014 "),Hae=n(wUe,"A",{href:!0});var Ota=s(Hae);Ict=r(Ota,"FlaxElectraForMultipleChoice"),Ota.forEach(t),Nct=r(wUe," (ELECTRA model)"),wUe.forEach(t),qct=i(Ao),NA=n(Ao,"LI",{});var AUe=s(NA);$ye=n(AUe,"STRONG",{});var Vta=s($ye);jct=r(Vta,"roberta"),Vta.forEach(t),Dct=r(AUe," \u2014 "),Jae=n(AUe,"A",{href:!0});var Xta=s(Jae);Gct=r(Xta,"FlaxRobertaForMultipleChoice"),Xta.forEach(t),Oct=r(AUe," (RoBERTa model)"),AUe.forEach(t),Vct=i(Ao),qA=n(Ao,"LI",{});var LUe=s(qA);kye=n(LUe,"STRONG",{});var zta=s(kye);Xct=r(zta,"roformer"),zta.forEach(t),zct=r(LUe," \u2014 "),Yae=n(LUe,"A",{href:!0});var Wta=s(Yae);Wct=r(Wta,"FlaxRoFormerForMultipleChoice"),Wta.forEach(t),Qct=r(LUe," (RoFormer model)"),LUe.forEach(t),Uct=i(Ao),jA=n(Ao,"LI",{});var yUe=s(jA);Sye=n(yUe,"STRONG",{});var Qta=s(Sye);Hct=r(Qta,"xlm-roberta"),Qta.forEach(t),Jct=r(yUe," \u2014 "),Kae=n(yUe,"A",{href:!0});var Uta=s(Kae);Yct=r(Uta,"FlaxXLMRobertaForMultipleChoice"),Uta.forEach(t),Kct=r(yUe," (XLM-RoBERTa model)"),yUe.forEach(t),Ao.forEach(t),Zct=i(Gi),T(DA.$$.fragment,Gi),Gi.forEach(t),Di.forEach(t),qJe=i(f),Yf=n(f,"H2",{class:!0});var oZe=s(Yf);GA=n(oZe,"A",{id:!0,class:!0,href:!0});var Hta=s(GA);Rye=n(Hta,"SPAN",{});var Jta=s(Rye);T(OS.$$.fragment,Jta),Jta.forEach(t),Hta.forEach(t),eft=i(oZe),Pye=n(oZe,"SPAN",{});var Yta=s(Pye);oft=r(Yta,"FlaxAutoModelForNextSentencePrediction"),Yta.forEach(t),oZe.forEach(t),jJe=i(f),$r=n(f,"DIV",{class:!0});var Oi=s($r);T(VS.$$.fragment,Oi),rft=i(Oi),Kf=n(Oi,"P",{});var nle=s(Kf);tft=r(nle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Zae=n(nle,"A",{href:!0});var Kta=s(Zae);aft=r(Kta,"from_pretrained()"),Kta.forEach(t),nft=r(nle," class method or the "),ene=n(nle,"A",{href:!0});var Zta=s(ene);sft=r(Zta,"from_config()"),Zta.forEach(t),lft=r(nle,` class
method.`),nle.forEach(t),ift=i(Oi),XS=n(Oi,"P",{});var rZe=s(XS);dft=r(rZe,"This class cannot be instantiated directly using "),Bye=n(rZe,"CODE",{});var eaa=s(Bye);cft=r(eaa,"__init__()"),eaa.forEach(t),fft=r(rZe," (throws an error)."),rZe.forEach(t),mft=i(Oi),fa=n(Oi,"DIV",{class:!0});var Ty=s(fa);T(zS.$$.fragment,Ty),gft=i(Ty),Iye=n(Ty,"P",{});var oaa=s(Iye);hft=r(oaa,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),oaa.forEach(t),pft=i(Ty),Zf=n(Ty,"P",{});var sle=s(Zf);_ft=r(sle,`Note:
Loading a model from its configuration file does `),Nye=n(sle,"STRONG",{});var raa=s(Nye);uft=r(raa,"not"),raa.forEach(t),bft=r(sle,` load the model weights. It only affects the
model\u2019s configuration. Use `),one=n(sle,"A",{href:!0});var taa=s(one);vft=r(taa,"from_pretrained()"),taa.forEach(t),Fft=r(sle," to load the model weights."),sle.forEach(t),Tft=i(Ty),T(OA.$$.fragment,Ty),Ty.forEach(t),Mft=i(Oi),nt=n(Oi,"DIV",{class:!0});var Vi=s(nt);T(WS.$$.fragment,Vi),Eft=i(Vi),qye=n(Vi,"P",{});var aaa=s(qye);Cft=r(aaa,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),aaa.forEach(t),wft=i(Vi),zn=n(Vi,"P",{});var My=s(zn);Aft=r(My,"The model class to instantiate is selected based on the "),jye=n(My,"CODE",{});var naa=s(jye);Lft=r(naa,"model_type"),naa.forEach(t),yft=r(My,` property of the config object (either
passed as an argument or loaded from `),Dye=n(My,"CODE",{});var saa=s(Dye);xft=r(saa,"pretrained_model_name_or_path"),saa.forEach(t),$ft=r(My,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gye=n(My,"CODE",{});var laa=s(Gye);kft=r(laa,"pretrained_model_name_or_path"),laa.forEach(t),Sft=r(My,":"),My.forEach(t),Rft=i(Vi),Oye=n(Vi,"UL",{});var iaa=s(Oye);VA=n(iaa,"LI",{});var xUe=s(VA);Vye=n(xUe,"STRONG",{});var daa=s(Vye);Pft=r(daa,"bert"),daa.forEach(t),Bft=r(xUe," \u2014 "),rne=n(xUe,"A",{href:!0});var caa=s(rne);Ift=r(caa,"FlaxBertForNextSentencePrediction"),caa.forEach(t),Nft=r(xUe," (BERT model)"),xUe.forEach(t),iaa.forEach(t),qft=i(Vi),T(XA.$$.fragment,Vi),Vi.forEach(t),Oi.forEach(t),DJe=i(f),em=n(f,"H2",{class:!0});var tZe=s(em);zA=n(tZe,"A",{id:!0,class:!0,href:!0});var faa=s(zA);Xye=n(faa,"SPAN",{});var maa=s(Xye);T(QS.$$.fragment,maa),maa.forEach(t),faa.forEach(t),jft=i(tZe),zye=n(tZe,"SPAN",{});var gaa=s(zye);Dft=r(gaa,"FlaxAutoModelForImageClassification"),gaa.forEach(t),tZe.forEach(t),GJe=i(f),kr=n(f,"DIV",{class:!0});var Xi=s(kr);T(US.$$.fragment,Xi),Gft=i(Xi),om=n(Xi,"P",{});var lle=s(om);Oft=r(lle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tne=n(lle,"A",{href:!0});var haa=s(tne);Vft=r(haa,"from_pretrained()"),haa.forEach(t),Xft=r(lle," class method or the "),ane=n(lle,"A",{href:!0});var paa=s(ane);zft=r(paa,"from_config()"),paa.forEach(t),Wft=r(lle,` class
method.`),lle.forEach(t),Qft=i(Xi),HS=n(Xi,"P",{});var aZe=s(HS);Uft=r(aZe,"This class cannot be instantiated directly using "),Wye=n(aZe,"CODE",{});var _aa=s(Wye);Hft=r(_aa,"__init__()"),_aa.forEach(t),Jft=r(aZe," (throws an error)."),aZe.forEach(t),Yft=i(Xi),ma=n(Xi,"DIV",{class:!0});var Ey=s(ma);T(JS.$$.fragment,Ey),Kft=i(Ey),Qye=n(Ey,"P",{});var uaa=s(Qye);Zft=r(uaa,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uaa.forEach(t),emt=i(Ey),rm=n(Ey,"P",{});var ile=s(rm);omt=r(ile,`Note:
Loading a model from its configuration file does `),Uye=n(ile,"STRONG",{});var baa=s(Uye);rmt=r(baa,"not"),baa.forEach(t),tmt=r(ile,` load the model weights. It only affects the
model\u2019s configuration. Use `),nne=n(ile,"A",{href:!0});var vaa=s(nne);amt=r(vaa,"from_pretrained()"),vaa.forEach(t),nmt=r(ile," to load the model weights."),ile.forEach(t),smt=i(Ey),T(WA.$$.fragment,Ey),Ey.forEach(t),lmt=i(Xi),st=n(Xi,"DIV",{class:!0});var zi=s(st);T(YS.$$.fragment,zi),imt=i(zi),Hye=n(zi,"P",{});var Faa=s(Hye);dmt=r(Faa,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Faa.forEach(t),cmt=i(zi),Wn=n(zi,"P",{});var Cy=s(Wn);fmt=r(Cy,"The model class to instantiate is selected based on the "),Jye=n(Cy,"CODE",{});var Taa=s(Jye);mmt=r(Taa,"model_type"),Taa.forEach(t),gmt=r(Cy,` property of the config object (either
passed as an argument or loaded from `),Yye=n(Cy,"CODE",{});var Maa=s(Yye);hmt=r(Maa,"pretrained_model_name_or_path"),Maa.forEach(t),pmt=r(Cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kye=n(Cy,"CODE",{});var Eaa=s(Kye);_mt=r(Eaa,"pretrained_model_name_or_path"),Eaa.forEach(t),umt=r(Cy,":"),Cy.forEach(t),bmt=i(zi),KS=n(zi,"UL",{});var nZe=s(KS);QA=n(nZe,"LI",{});var $Ue=s(QA);Zye=n($Ue,"STRONG",{});var Caa=s(Zye);vmt=r(Caa,"beit"),Caa.forEach(t),Fmt=r($Ue," \u2014 "),sne=n($Ue,"A",{href:!0});var waa=s(sne);Tmt=r(waa,"FlaxBeitForImageClassification"),waa.forEach(t),Mmt=r($Ue," (BEiT model)"),$Ue.forEach(t),Emt=i(nZe),UA=n(nZe,"LI",{});var kUe=s(UA);e9e=n(kUe,"STRONG",{});var Aaa=s(e9e);Cmt=r(Aaa,"vit"),Aaa.forEach(t),wmt=r(kUe," \u2014 "),lne=n(kUe,"A",{href:!0});var Laa=s(lne);Amt=r(Laa,"FlaxViTForImageClassification"),Laa.forEach(t),Lmt=r(kUe," (ViT model)"),kUe.forEach(t),nZe.forEach(t),ymt=i(zi),T(HA.$$.fragment,zi),zi.forEach(t),Xi.forEach(t),OJe=i(f),tm=n(f,"H2",{class:!0});var sZe=s(tm);JA=n(sZe,"A",{id:!0,class:!0,href:!0});var yaa=s(JA);o9e=n(yaa,"SPAN",{});var xaa=s(o9e);T(ZS.$$.fragment,xaa),xaa.forEach(t),yaa.forEach(t),xmt=i(sZe),r9e=n(sZe,"SPAN",{});var $aa=s(r9e);$mt=r($aa,"FlaxAutoModelForVision2Seq"),$aa.forEach(t),sZe.forEach(t),VJe=i(f),Sr=n(f,"DIV",{class:!0});var Wi=s(Sr);T(eR.$$.fragment,Wi),kmt=i(Wi),am=n(Wi,"P",{});var dle=s(am);Smt=r(dle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ine=n(dle,"A",{href:!0});var kaa=s(ine);Rmt=r(kaa,"from_pretrained()"),kaa.forEach(t),Pmt=r(dle," class method or the "),dne=n(dle,"A",{href:!0});var Saa=s(dne);Bmt=r(Saa,"from_config()"),Saa.forEach(t),Imt=r(dle,` class
method.`),dle.forEach(t),Nmt=i(Wi),oR=n(Wi,"P",{});var lZe=s(oR);qmt=r(lZe,"This class cannot be instantiated directly using "),t9e=n(lZe,"CODE",{});var Raa=s(t9e);jmt=r(Raa,"__init__()"),Raa.forEach(t),Dmt=r(lZe," (throws an error)."),lZe.forEach(t),Gmt=i(Wi),ga=n(Wi,"DIV",{class:!0});var wy=s(ga);T(rR.$$.fragment,wy),Omt=i(wy),a9e=n(wy,"P",{});var Paa=s(a9e);Vmt=r(Paa,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Paa.forEach(t),Xmt=i(wy),nm=n(wy,"P",{});var cle=s(nm);zmt=r(cle,`Note:
Loading a model from its configuration file does `),n9e=n(cle,"STRONG",{});var Baa=s(n9e);Wmt=r(Baa,"not"),Baa.forEach(t),Qmt=r(cle,` load the model weights. It only affects the
model\u2019s configuration. Use `),cne=n(cle,"A",{href:!0});var Iaa=s(cne);Umt=r(Iaa,"from_pretrained()"),Iaa.forEach(t),Hmt=r(cle," to load the model weights."),cle.forEach(t),Jmt=i(wy),T(YA.$$.fragment,wy),wy.forEach(t),Ymt=i(Wi),lt=n(Wi,"DIV",{class:!0});var Qi=s(lt);T(tR.$$.fragment,Qi),Kmt=i(Qi),s9e=n(Qi,"P",{});var Naa=s(s9e);Zmt=r(Naa,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Naa.forEach(t),egt=i(Qi),Qn=n(Qi,"P",{});var Ay=s(Qn);ogt=r(Ay,"The model class to instantiate is selected based on the "),l9e=n(Ay,"CODE",{});var qaa=s(l9e);rgt=r(qaa,"model_type"),qaa.forEach(t),tgt=r(Ay,` property of the config object (either
passed as an argument or loaded from `),i9e=n(Ay,"CODE",{});var jaa=s(i9e);agt=r(jaa,"pretrained_model_name_or_path"),jaa.forEach(t),ngt=r(Ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d9e=n(Ay,"CODE",{});var Daa=s(d9e);sgt=r(Daa,"pretrained_model_name_or_path"),Daa.forEach(t),lgt=r(Ay,":"),Ay.forEach(t),igt=i(Qi),c9e=n(Qi,"UL",{});var Gaa=s(c9e);KA=n(Gaa,"LI",{});var SUe=s(KA);f9e=n(SUe,"STRONG",{});var Oaa=s(f9e);dgt=r(Oaa,"vision-encoder-decoder"),Oaa.forEach(t),cgt=r(SUe," \u2014 "),fne=n(SUe,"A",{href:!0});var Vaa=s(fne);fgt=r(Vaa,"FlaxVisionEncoderDecoderModel"),Vaa.forEach(t),mgt=r(SUe," (Vision Encoder decoder model)"),SUe.forEach(t),Gaa.forEach(t),ggt=i(Qi),T(ZA.$$.fragment,Qi),Qi.forEach(t),Wi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(ola)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Hn,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.AutoConfig"),c(Yn,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.AutoModel"),c(Kn,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.AutoTokenizer"),c(ed,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertModel"),c(gm,"id","extending-the-auto-classes"),c(gm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gm,"href","#extending-the-auto-classes"),c(od,"class","relative group"),c(pm,"id","transformers.AutoConfig"),c(pm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pm,"href","#transformers.AutoConfig"),c(rd,"class","relative group"),c(RP,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(PP,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertConfig"),c(BP,"href","/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartConfig"),c(IP,"href","/docs/transformers/pr_18618/en/model_doc/beit#transformers.BeitConfig"),c(NP,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertConfig"),c(qP,"href","/docs/transformers/pr_18618/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(jP,"href","/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdConfig"),c(DP,"href","/docs/transformers/pr_18618/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(GP,"href","/docs/transformers/pr_18618/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(OP,"href","/docs/transformers/pr_18618/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(VP,"href","/docs/transformers/pr_18618/en/model_doc/bloom#transformers.BloomConfig"),c(XP,"href","/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertConfig"),c(zP,"href","/docs/transformers/pr_18618/en/model_doc/canine#transformers.CanineConfig"),c(WP,"href","/docs/transformers/pr_18618/en/model_doc/clip#transformers.CLIPConfig"),c(QP,"href","/docs/transformers/pr_18618/en/model_doc/codegen#transformers.CodeGenConfig"),c(UP,"href","/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertConfig"),c(HP,"href","/docs/transformers/pr_18618/en/model_doc/convnext#transformers.ConvNextConfig"),c(JP,"href","/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.CTRLConfig"),c(YP,"href","/docs/transformers/pr_18618/en/model_doc/cvt#transformers.CvtConfig"),c(KP,"href","/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(ZP,"href","/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(eB,"href","/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(oB,"href","/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaConfig"),c(rB,"href","/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(tB,"href","/docs/transformers/pr_18618/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(aB,"href","/docs/transformers/pr_18618/en/model_doc/deit#transformers.DeiTConfig"),c(nB,"href","/docs/transformers/pr_18618/en/model_doc/detr#transformers.DetrConfig"),c(sB,"href","/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertConfig"),c(lB,"href","/docs/transformers/pr_18618/en/model_doc/donut#transformers.DonutSwinConfig"),c(iB,"href","/docs/transformers/pr_18618/en/model_doc/dpr#transformers.DPRConfig"),c(dB,"href","/docs/transformers/pr_18618/en/model_doc/dpt#transformers.DPTConfig"),c(cB,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraConfig"),c(fB,"href","/docs/transformers/pr_18618/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(mB,"href","/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertConfig"),c(gB,"href","/docs/transformers/pr_18618/en/model_doc/flava#transformers.FlavaConfig"),c(hB,"href","/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetConfig"),c(pB,"href","/docs/transformers/pr_18618/en/model_doc/fsmt#transformers.FSMTConfig"),c(_B,"href","/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelConfig"),c(uB,"href","/docs/transformers/pr_18618/en/model_doc/glpn#transformers.GLPNConfig"),c(bB,"href","/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2Config"),c(vB,"href","/docs/transformers/pr_18618/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(FB,"href","/docs/transformers/pr_18618/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(TB,"href","/docs/transformers/pr_18618/en/model_doc/gptj#transformers.GPTJConfig"),c(MB,"href","/docs/transformers/pr_18618/en/model_doc/groupvit#transformers.GroupViTConfig"),c(EB,"href","/docs/transformers/pr_18618/en/model_doc/hubert#transformers.HubertConfig"),c(CB,"href","/docs/transformers/pr_18618/en/model_doc/ibert#transformers.IBertConfig"),c(wB,"href","/docs/transformers/pr_18618/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(AB,"href","/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(LB,"href","/docs/transformers/pr_18618/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(yB,"href","/docs/transformers/pr_18618/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(xB,"href","/docs/transformers/pr_18618/en/model_doc/led#transformers.LEDConfig"),c($B,"href","/docs/transformers/pr_18618/en/model_doc/levit#transformers.LevitConfig"),c(kB,"href","/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerConfig"),c(SB,"href","/docs/transformers/pr_18618/en/model_doc/longt5#transformers.LongT5Config"),c(RB,"href","/docs/transformers/pr_18618/en/model_doc/luke#transformers.LukeConfig"),c(PB,"href","/docs/transformers/pr_18618/en/model_doc/lxmert#transformers.LxmertConfig"),c(BB,"href","/docs/transformers/pr_18618/en/model_doc/m2m_100#transformers.M2M100Config"),c(IB,"href","/docs/transformers/pr_18618/en/model_doc/marian#transformers.MarianConfig"),c(NB,"href","/docs/transformers/pr_18618/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(qB,"href","/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartConfig"),c(jB,"href","/docs/transformers/pr_18618/en/model_doc/mctct#transformers.MCTCTConfig"),c(DB,"href","/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(GB,"href","/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(OB,"href","/docs/transformers/pr_18618/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(VB,"href","/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetConfig"),c(XB,"href","/docs/transformers/pr_18618/en/model_doc/mt5#transformers.MT5Config"),c(zB,"href","/docs/transformers/pr_18618/en/model_doc/mvp#transformers.MvpConfig"),c(WB,"href","/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaConfig"),c(QB,"href","/docs/transformers/pr_18618/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(UB,"href","/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(HB,"href","/docs/transformers/pr_18618/en/model_doc/opt#transformers.OPTConfig"),c(JB,"href","/docs/transformers/pr_18618/en/model_doc/owlvit#transformers.OwlViTConfig"),c(YB,"href","/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.PegasusConfig"),c(KB,"href","/docs/transformers/pr_18618/en/model_doc/perceiver#transformers.PerceiverConfig"),c(ZB,"href","/docs/transformers/pr_18618/en/model_doc/plbart#transformers.PLBartConfig"),c(eI,"href","/docs/transformers/pr_18618/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(oI,"href","/docs/transformers/pr_18618/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(rI,"href","/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(tI,"href","/docs/transformers/pr_18618/en/model_doc/rag#transformers.RagConfig"),c(aI,"href","/docs/transformers/pr_18618/en/model_doc/realm#transformers.RealmConfig"),c(nI,"href","/docs/transformers/pr_18618/en/model_doc/reformer#transformers.ReformerConfig"),c(sI,"href","/docs/transformers/pr_18618/en/model_doc/regnet#transformers.RegNetConfig"),c(lI,"href","/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertConfig"),c(iI,"href","/docs/transformers/pr_18618/en/model_doc/resnet#transformers.ResNetConfig"),c(dI,"href","/docs/transformers/pr_18618/en/model_doc/retribert#transformers.RetriBertConfig"),c(cI,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaConfig"),c(fI,"href","/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerConfig"),c(mI,"href","/docs/transformers/pr_18618/en/model_doc/segformer#transformers.SegformerConfig"),c(gI,"href","/docs/transformers/pr_18618/en/model_doc/sew#transformers.SEWConfig"),c(hI,"href","/docs/transformers/pr_18618/en/model_doc/sew-d#transformers.SEWDConfig"),c(pI,"href","/docs/transformers/pr_18618/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(_I,"href","/docs/transformers/pr_18618/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(uI,"href","/docs/transformers/pr_18618/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(bI,"href","/docs/transformers/pr_18618/en/model_doc/splinter#transformers.SplinterConfig"),c(vI,"href","/docs/transformers/pr_18618/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(FI,"href","/docs/transformers/pr_18618/en/model_doc/swin#transformers.SwinConfig"),c(TI,"href","/docs/transformers/pr_18618/en/model_doc/swinv2#transformers.Swinv2Config"),c(MI,"href","/docs/transformers/pr_18618/en/model_doc/t5#transformers.T5Config"),c(EI,"href","/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TapasConfig"),c(CI,"href","/docs/transformers/pr_18618/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(wI,"href","/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(AI,"href","/docs/transformers/pr_18618/en/model_doc/trocr#transformers.TrOCRConfig"),c(LI,"href","/docs/transformers/pr_18618/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(yI,"href","/docs/transformers/pr_18618/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(xI,"href","/docs/transformers/pr_18618/en/model_doc/van#transformers.VanConfig"),c($I,"href","/docs/transformers/pr_18618/en/model_doc/videomae#transformers.VideoMAEConfig"),c(kI,"href","/docs/transformers/pr_18618/en/model_doc/vilt#transformers.ViltConfig"),c(SI,"href","/docs/transformers/pr_18618/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(RI,"href","/docs/transformers/pr_18618/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(PI,"href","/docs/transformers/pr_18618/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(BI,"href","/docs/transformers/pr_18618/en/model_doc/vit#transformers.ViTConfig"),c(II,"href","/docs/transformers/pr_18618/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(NI,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(qI,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(jI,"href","/docs/transformers/pr_18618/en/model_doc/wavlm#transformers.WavLMConfig"),c(DI,"href","/docs/transformers/pr_18618/en/model_doc/xglm#transformers.XGLMConfig"),c(GI,"href","/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMConfig"),c(OI,"href","/docs/transformers/pr_18618/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(VI,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(XI,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(zI,"href","/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetConfig"),c(WI,"href","/docs/transformers/pr_18618/en/model_doc/yolos#transformers.YolosConfig"),c(QI,"href","/docs/transformers/pr_18618/en/model_doc/yoso#transformers.YosoConfig"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sh,"id","transformers.AutoTokenizer"),c(Sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sh,"href","#transformers.AutoTokenizer"),c(ad,"class","relative group"),c(UI,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(HI,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertTokenizer"),c(JI,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(YI,"href","/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartTokenizer"),c(KI,"href","/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartTokenizerFast"),c(ZI,"href","/docs/transformers/pr_18618/en/model_doc/barthez#transformers.BarthezTokenizer"),c(eN,"href","/docs/transformers/pr_18618/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(oN,"href","/docs/transformers/pr_18618/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(rN,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertTokenizer"),c(tN,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertTokenizerFast"),c(aN,"href","/docs/transformers/pr_18618/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(nN,"href","/docs/transformers/pr_18618/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(sN,"href","/docs/transformers/pr_18618/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(lN,"href","/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(iN,"href","/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(dN,"href","/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(cN,"href","/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(fN,"href","/docs/transformers/pr_18618/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(mN,"href","/docs/transformers/pr_18618/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(gN,"href","/docs/transformers/pr_18618/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(hN,"href","/docs/transformers/pr_18618/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(pN,"href","/docs/transformers/pr_18618/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(_N,"href","/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertTokenizer"),c(uN,"href","/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(bN,"href","/docs/transformers/pr_18618/en/model_doc/canine#transformers.CanineTokenizer"),c(vN,"href","/docs/transformers/pr_18618/en/model_doc/clip#transformers.CLIPTokenizer"),c(FN,"href","/docs/transformers/pr_18618/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(TN,"href","/docs/transformers/pr_18618/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(MN,"href","/docs/transformers/pr_18618/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(EN,"href","/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(CN,"href","/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(wN,"href","/docs/transformers/pr_18618/en/model_doc/cpm#transformers.CpmTokenizer"),c(AN,"href","/docs/transformers/pr_18618/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(LN,"href","/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(yN,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaTokenizer"),c(xN,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c($N,"href","/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaTokenizer"),c(kN,"href","/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(SN,"href","/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(RN,"href","/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(PN,"href","/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(BN,"href","/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(IN,"href","/docs/transformers/pr_18618/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(NN,"href","/docs/transformers/pr_18618/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(qN,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraTokenizer"),c(jN,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(DN,"href","/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(GN,"href","/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetTokenizer"),c(ON,"href","/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(VN,"href","/docs/transformers/pr_18618/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(XN,"href","/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelTokenizer"),c(zN,"href","/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(WN,"href","/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(QN,"href","/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(UN,"href","/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(HN,"href","/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(JN,"href","/docs/transformers/pr_18618/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(YN,"href","/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(KN,"href","/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(ZN,"href","/docs/transformers/pr_18618/en/model_doc/clip#transformers.CLIPTokenizer"),c(eq,"href","/docs/transformers/pr_18618/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(oq,"href","/docs/transformers/pr_18618/en/model_doc/herbert#transformers.HerbertTokenizer"),c(rq,"href","/docs/transformers/pr_18618/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(tq,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(aq,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaTokenizer"),c(nq,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(sq,"href","/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(lq,"href","/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(iq,"href","/docs/transformers/pr_18618/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(dq,"href","/docs/transformers/pr_18618/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(cq,"href","/docs/transformers/pr_18618/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(fq,"href","/docs/transformers/pr_18618/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(mq,"href","/docs/transformers/pr_18618/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(gq,"href","/docs/transformers/pr_18618/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(hq,"href","/docs/transformers/pr_18618/en/model_doc/led#transformers.LEDTokenizer"),c(pq,"href","/docs/transformers/pr_18618/en/model_doc/led#transformers.LEDTokenizerFast"),c(_q,"href","/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerTokenizer"),c(uq,"href","/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(bq,"href","/docs/transformers/pr_18618/en/model_doc/mt5#transformers.T5Tokenizer"),c(vq,"href","/docs/transformers/pr_18618/en/model_doc/mt5#transformers.T5TokenizerFast"),c(Fq,"href","/docs/transformers/pr_18618/en/model_doc/luke#transformers.LukeTokenizer"),c(Tq,"href","/docs/transformers/pr_18618/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(Mq,"href","/docs/transformers/pr_18618/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(Eq,"href","/docs/transformers/pr_18618/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(Cq,"href","/docs/transformers/pr_18618/en/model_doc/marian#transformers.MarianTokenizer"),c(wq,"href","/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartTokenizer"),c(Aq,"href","/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(Lq,"href","/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(yq,"href","/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(xq,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertTokenizer"),c($q,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertTokenizerFast"),c(kq,"href","/docs/transformers/pr_18618/en/model_doc/mluke#transformers.MLukeTokenizer"),c(Sq,"href","/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(Rq,"href","/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(Pq,"href","/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(Bq,"href","/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(Iq,"href","/docs/transformers/pr_18618/en/model_doc/mt5#transformers.T5Tokenizer"),c(Nq,"href","/docs/transformers/pr_18618/en/model_doc/mt5#transformers.T5TokenizerFast"),c(qq,"href","/docs/transformers/pr_18618/en/model_doc/mvp#transformers.MvpTokenizer"),c(jq,"href","/docs/transformers/pr_18618/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(Dq,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertTokenizer"),c(Gq,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertTokenizerFast"),c(Oq,"href","/docs/transformers/pr_18618/en/model_doc/nllb#transformers.NllbTokenizer"),c(Vq,"href","/docs/transformers/pr_18618/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(Xq,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertTokenizer"),c(zq,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Wq,"href","/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(Qq,"href","/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(Uq,"href","/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Hq,"href","/docs/transformers/pr_18618/en/model_doc/clip#transformers.CLIPTokenizer"),c(Jq,"href","/docs/transformers/pr_18618/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Yq,"href","/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Kq,"href","/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Zq,"href","/docs/transformers/pr_18618/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(ej,"href","/docs/transformers/pr_18618/en/model_doc/phobert#transformers.PhobertTokenizer"),c(oj,"href","/docs/transformers/pr_18618/en/model_doc/plbart#transformers.PLBartTokenizer"),c(rj,"href","/docs/transformers/pr_18618/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(tj,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertTokenizer"),c(aj,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertTokenizerFast"),c(nj,"href","/docs/transformers/pr_18618/en/model_doc/rag#transformers.RagTokenizer"),c(sj,"href","/docs/transformers/pr_18618/en/model_doc/realm#transformers.RealmTokenizer"),c(lj,"href","/docs/transformers/pr_18618/en/model_doc/realm#transformers.RealmTokenizerFast"),c(ij,"href","/docs/transformers/pr_18618/en/model_doc/reformer#transformers.ReformerTokenizer"),c(dj,"href","/docs/transformers/pr_18618/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(cj,"href","/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertTokenizer"),c(fj,"href","/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(mj,"href","/docs/transformers/pr_18618/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(gj,"href","/docs/transformers/pr_18618/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(hj,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaTokenizer"),c(pj,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(_j,"href","/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(uj,"href","/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(bj,"href","/docs/transformers/pr_18618/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(vj,"href","/docs/transformers/pr_18618/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(Fj,"href","/docs/transformers/pr_18618/en/model_doc/splinter#transformers.SplinterTokenizer"),c(Tj,"href","/docs/transformers/pr_18618/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(Mj,"href","/docs/transformers/pr_18618/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(Ej,"href","/docs/transformers/pr_18618/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(Cj,"href","/docs/transformers/pr_18618/en/model_doc/mt5#transformers.T5Tokenizer"),c(wj,"href","/docs/transformers/pr_18618/en/model_doc/mt5#transformers.T5TokenizerFast"),c(Aj,"href","/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TapasTokenizer"),c(Lj,"href","/docs/transformers/pr_18618/en/model_doc/tapex#transformers.TapexTokenizer"),c(yj,"href","/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(xj,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertTokenizer"),c($j,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertTokenizerFast"),c(kj,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertTokenizer"),c(Sj,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertTokenizerFast"),c(Rj,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Pj,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Bj,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(Ij,"href","/docs/transformers/pr_18618/en/model_doc/xglm#transformers.XGLMTokenizer"),c(Nj,"href","/docs/transformers/pr_18618/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(qj,"href","/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMTokenizer"),c(jj,"href","/docs/transformers/pr_18618/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(Dj,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(Gj,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(Oj,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Vj,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Xj,"href","/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(zj,"href","/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(Wj,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertTokenizer"),c(Qj,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hp,"id","transformers.AutoFeatureExtractor"),c(hp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hp,"href","#transformers.AutoFeatureExtractor"),c(nd,"class","relative group"),c(Uj,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(Hj,"href","/docs/transformers/pr_18618/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Jj,"href","/docs/transformers/pr_18618/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Yj,"href","/docs/transformers/pr_18618/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Kj,"href","/docs/transformers/pr_18618/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Zj,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(eD,"href","/docs/transformers/pr_18618/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(oD,"href","/docs/transformers/pr_18618/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(rD,"href","/docs/transformers/pr_18618/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(tD,"href","/docs/transformers/pr_18618/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(aD,"href","/docs/transformers/pr_18618/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(nD,"href","/docs/transformers/pr_18618/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(sD,"href","/docs/transformers/pr_18618/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(lD,"href","/docs/transformers/pr_18618/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(iD,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(dD,"href","/docs/transformers/pr_18618/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(cD,"href","/docs/transformers/pr_18618/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(fD,"href","/docs/transformers/pr_18618/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(mD,"href","/docs/transformers/pr_18618/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(gD,"href","/docs/transformers/pr_18618/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(hD,"href","/docs/transformers/pr_18618/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(pD,"href","/docs/transformers/pr_18618/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(_D,"href","/docs/transformers/pr_18618/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(uD,"href","/docs/transformers/pr_18618/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(bD,"href","/docs/transformers/pr_18618/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(vD,"href","/docs/transformers/pr_18618/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(FD,"href","/docs/transformers/pr_18618/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(TD,"href","/docs/transformers/pr_18618/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(MD,"href","/docs/transformers/pr_18618/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(ED,"href","/docs/transformers/pr_18618/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(CD,"href","/docs/transformers/pr_18618/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(wD,"href","/docs/transformers/pr_18618/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AD,"href","/docs/transformers/pr_18618/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(LD,"href","/docs/transformers/pr_18618/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(yD,"href","/docs/transformers/pr_18618/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(xD,"href","/docs/transformers/pr_18618/en/model_doc/vit#transformers.ViTFeatureExtractor"),c($D,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(kD,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(SD,"href","/docs/transformers/pr_18618/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r_,"id","transformers.AutoProcessor"),c(r_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r_,"href","#transformers.AutoProcessor"),c(sd,"class","relative group"),c(RD,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(PD,"href","/docs/transformers/pr_18618/en/model_doc/clip#transformers.CLIPProcessor"),c(BD,"href","/docs/transformers/pr_18618/en/model_doc/donut#transformers.DonutProcessor"),c(ID,"href","/docs/transformers/pr_18618/en/model_doc/flava#transformers.FlavaProcessor"),c(ND,"href","/docs/transformers/pr_18618/en/model_doc/clip#transformers.CLIPProcessor"),c(qD,"href","/docs/transformers/pr_18618/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(jD,"href","/docs/transformers/pr_18618/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(DD,"href","/docs/transformers/pr_18618/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(GD,"href","/docs/transformers/pr_18618/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(OD,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VD,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(XD,"href","/docs/transformers/pr_18618/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(zD,"href","/docs/transformers/pr_18618/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(WD,"href","/docs/transformers/pr_18618/en/model_doc/trocr#transformers.TrOCRProcessor"),c(QD,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(UD,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(HD,"href","/docs/transformers/pr_18618/en/model_doc/vilt#transformers.ViltProcessor"),c(JD,"href","/docs/transformers/pr_18618/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(YD,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KD,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ZD,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A_,"id","transformers.AutoModel"),c(A_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A_,"href","#transformers.AutoModel"),c(id,"class","relative group"),c(eG,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oG,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rG,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tG,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertModel"),c(aG,"href","/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartModel"),c(nG,"href","/docs/transformers/pr_18618/en/model_doc/beit#transformers.BeitModel"),c(sG,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertModel"),c(lG,"href","/docs/transformers/pr_18618/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(iG,"href","/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdModel"),c(dG,"href","/docs/transformers/pr_18618/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(cG,"href","/docs/transformers/pr_18618/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(fG,"href","/docs/transformers/pr_18618/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(mG,"href","/docs/transformers/pr_18618/en/model_doc/bloom#transformers.BloomModel"),c(gG,"href","/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertModel"),c(hG,"href","/docs/transformers/pr_18618/en/model_doc/canine#transformers.CanineModel"),c(pG,"href","/docs/transformers/pr_18618/en/model_doc/clip#transformers.CLIPModel"),c(_G,"href","/docs/transformers/pr_18618/en/model_doc/codegen#transformers.CodeGenModel"),c(uG,"href","/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertModel"),c(bG,"href","/docs/transformers/pr_18618/en/model_doc/convnext#transformers.ConvNextModel"),c(vG,"href","/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.CTRLModel"),c(FG,"href","/docs/transformers/pr_18618/en/model_doc/cvt#transformers.CvtModel"),c(TG,"href","/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(MG,"href","/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(EG,"href","/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(CG,"href","/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaModel"),c(wG,"href","/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(AG,"href","/docs/transformers/pr_18618/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(LG,"href","/docs/transformers/pr_18618/en/model_doc/deit#transformers.DeiTModel"),c(yG,"href","/docs/transformers/pr_18618/en/model_doc/detr#transformers.DetrModel"),c(xG,"href","/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertModel"),c($G,"href","/docs/transformers/pr_18618/en/model_doc/donut#transformers.DonutSwinModel"),c(kG,"href","/docs/transformers/pr_18618/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(SG,"href","/docs/transformers/pr_18618/en/model_doc/dpt#transformers.DPTModel"),c(RG,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraModel"),c(PG,"href","/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertModel"),c(BG,"href","/docs/transformers/pr_18618/en/model_doc/flava#transformers.FlavaModel"),c(IG,"href","/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetModel"),c(NG,"href","/docs/transformers/pr_18618/en/model_doc/fsmt#transformers.FSMTModel"),c(qG,"href","/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelModel"),c(jG,"href","/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelBaseModel"),c(DG,"href","/docs/transformers/pr_18618/en/model_doc/glpn#transformers.GLPNModel"),c(GG,"href","/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2Model"),c(OG,"href","/docs/transformers/pr_18618/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(VG,"href","/docs/transformers/pr_18618/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(XG,"href","/docs/transformers/pr_18618/en/model_doc/gptj#transformers.GPTJModel"),c(zG,"href","/docs/transformers/pr_18618/en/model_doc/groupvit#transformers.GroupViTModel"),c(WG,"href","/docs/transformers/pr_18618/en/model_doc/hubert#transformers.HubertModel"),c(QG,"href","/docs/transformers/pr_18618/en/model_doc/ibert#transformers.IBertModel"),c(UG,"href","/docs/transformers/pr_18618/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(HG,"href","/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(JG,"href","/docs/transformers/pr_18618/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(YG,"href","/docs/transformers/pr_18618/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(KG,"href","/docs/transformers/pr_18618/en/model_doc/led#transformers.LEDModel"),c(ZG,"href","/docs/transformers/pr_18618/en/model_doc/levit#transformers.LevitModel"),c(eO,"href","/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerModel"),c(oO,"href","/docs/transformers/pr_18618/en/model_doc/longt5#transformers.LongT5Model"),c(rO,"href","/docs/transformers/pr_18618/en/model_doc/luke#transformers.LukeModel"),c(tO,"href","/docs/transformers/pr_18618/en/model_doc/lxmert#transformers.LxmertModel"),c(aO,"href","/docs/transformers/pr_18618/en/model_doc/m2m_100#transformers.M2M100Model"),c(nO,"href","/docs/transformers/pr_18618/en/model_doc/marian#transformers.MarianModel"),c(sO,"href","/docs/transformers/pr_18618/en/model_doc/maskformer#transformers.MaskFormerModel"),c(lO,"href","/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartModel"),c(iO,"href","/docs/transformers/pr_18618/en/model_doc/mctct#transformers.MCTCTModel"),c(dO,"href","/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(cO,"href","/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertModel"),c(fO,"href","/docs/transformers/pr_18618/en/model_doc/mobilevit#transformers.MobileViTModel"),c(mO,"href","/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetModel"),c(gO,"href","/docs/transformers/pr_18618/en/model_doc/mt5#transformers.MT5Model"),c(hO,"href","/docs/transformers/pr_18618/en/model_doc/mvp#transformers.MvpModel"),c(pO,"href","/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaModel"),c(_O,"href","/docs/transformers/pr_18618/en/model_doc/m2m_100#transformers.M2M100Model"),c(uO,"href","/docs/transformers/pr_18618/en/model_doc/nystromformer#transformers.NystromformerModel"),c(bO,"href","/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(vO,"href","/docs/transformers/pr_18618/en/model_doc/opt#transformers.OPTModel"),c(FO,"href","/docs/transformers/pr_18618/en/model_doc/owlvit#transformers.OwlViTModel"),c(TO,"href","/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.PegasusModel"),c(MO,"href","/docs/transformers/pr_18618/en/model_doc/perceiver#transformers.PerceiverModel"),c(EO,"href","/docs/transformers/pr_18618/en/model_doc/plbart#transformers.PLBartModel"),c(CO,"href","/docs/transformers/pr_18618/en/model_doc/poolformer#transformers.PoolFormerModel"),c(wO,"href","/docs/transformers/pr_18618/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(AO,"href","/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertModel"),c(LO,"href","/docs/transformers/pr_18618/en/model_doc/reformer#transformers.ReformerModel"),c(yO,"href","/docs/transformers/pr_18618/en/model_doc/regnet#transformers.RegNetModel"),c(xO,"href","/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertModel"),c($O,"href","/docs/transformers/pr_18618/en/model_doc/resnet#transformers.ResNetModel"),c(kO,"href","/docs/transformers/pr_18618/en/model_doc/retribert#transformers.RetriBertModel"),c(SO,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaModel"),c(RO,"href","/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerModel"),c(PO,"href","/docs/transformers/pr_18618/en/model_doc/segformer#transformers.SegformerModel"),c(BO,"href","/docs/transformers/pr_18618/en/model_doc/sew#transformers.SEWModel"),c(IO,"href","/docs/transformers/pr_18618/en/model_doc/sew-d#transformers.SEWDModel"),c(NO,"href","/docs/transformers/pr_18618/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(qO,"href","/docs/transformers/pr_18618/en/model_doc/splinter#transformers.SplinterModel"),c(jO,"href","/docs/transformers/pr_18618/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(DO,"href","/docs/transformers/pr_18618/en/model_doc/swin#transformers.SwinModel"),c(GO,"href","/docs/transformers/pr_18618/en/model_doc/swinv2#transformers.Swinv2Model"),c(OO,"href","/docs/transformers/pr_18618/en/model_doc/t5#transformers.T5Model"),c(VO,"href","/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TapasModel"),c(XO,"href","/docs/transformers/pr_18618/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(zO,"href","/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(WO,"href","/docs/transformers/pr_18618/en/model_doc/unispeech#transformers.UniSpeechModel"),c(QO,"href","/docs/transformers/pr_18618/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(UO,"href","/docs/transformers/pr_18618/en/model_doc/van#transformers.VanModel"),c(HO,"href","/docs/transformers/pr_18618/en/model_doc/videomae#transformers.VideoMAEModel"),c(JO,"href","/docs/transformers/pr_18618/en/model_doc/vilt#transformers.ViltModel"),c(YO,"href","/docs/transformers/pr_18618/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(KO,"href","/docs/transformers/pr_18618/en/model_doc/visual_bert#transformers.VisualBertModel"),c(ZO,"href","/docs/transformers/pr_18618/en/model_doc/vit#transformers.ViTModel"),c(eV,"href","/docs/transformers/pr_18618/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(oV,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(rV,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(tV,"href","/docs/transformers/pr_18618/en/model_doc/wavlm#transformers.WavLMModel"),c(aV,"href","/docs/transformers/pr_18618/en/model_doc/xglm#transformers.XGLMModel"),c(nV,"href","/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMModel"),c(sV,"href","/docs/transformers/pr_18618/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(lV,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(iV,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(dV,"href","/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetModel"),c(cV,"href","/docs/transformers/pr_18618/en/model_doc/yolos#transformers.YolosModel"),c(fV,"href","/docs/transformers/pr_18618/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N1,"id","transformers.AutoModelForPreTraining"),c(N1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N1,"href","#transformers.AutoModelForPreTraining"),c(fd,"class","relative group"),c(mV,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gV,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hV,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pV,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertForPreTraining"),c(_V,"href","/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(uV,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertForPreTraining"),c(bV,"href","/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(vV,"href","/docs/transformers/pr_18618/en/model_doc/bloom#transformers.BloomForCausalLM"),c(FV,"href","/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(TV,"href","/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(MV,"href","/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(EV,"href","/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(CV,"href","/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(wV,"href","/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(AV,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraForPreTraining"),c(LV,"href","/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(yV,"href","/docs/transformers/pr_18618/en/model_doc/flava#transformers.FlavaForPreTraining"),c(xV,"href","/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetForPreTraining"),c($V,"href","/docs/transformers/pr_18618/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(kV,"href","/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(SV,"href","/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(RV,"href","/docs/transformers/pr_18618/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(PV,"href","/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(BV,"href","/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(IV,"href","/docs/transformers/pr_18618/en/model_doc/luke#transformers.LukeForMaskedLM"),c(NV,"href","/docs/transformers/pr_18618/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(qV,"href","/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(jV,"href","/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(DV,"href","/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(GV,"href","/docs/transformers/pr_18618/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(OV,"href","/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(VV,"href","/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(XV,"href","/docs/transformers/pr_18618/en/model_doc/retribert#transformers.RetriBertModel"),c(zV,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(WV,"href","/docs/transformers/pr_18618/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(QV,"href","/docs/transformers/pr_18618/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(UV,"href","/docs/transformers/pr_18618/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(HV,"href","/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(JV,"href","/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(YV,"href","/docs/transformers/pr_18618/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(KV,"href","/docs/transformers/pr_18618/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(ZV,"href","/docs/transformers/pr_18618/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(eX,"href","/docs/transformers/pr_18618/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(oX,"href","/docs/transformers/pr_18618/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(rX,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(tX,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(aX,"href","/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(nX,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(sX,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(lX,"href","/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P8,"id","transformers.AutoModelForCausalLM"),c(P8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P8,"href","#transformers.AutoModelForCausalLM"),c(hd,"class","relative group"),c(iX,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dX,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cX,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fX,"href","/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartForCausalLM"),c(mX,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertLMHeadModel"),c(gX,"href","/docs/transformers/pr_18618/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(hX,"href","/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(pX,"href","/docs/transformers/pr_18618/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(_X,"href","/docs/transformers/pr_18618/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(uX,"href","/docs/transformers/pr_18618/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(bX,"href","/docs/transformers/pr_18618/en/model_doc/bloom#transformers.BloomForCausalLM"),c(vX,"href","/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(FX,"href","/docs/transformers/pr_18618/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(TX,"href","/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(MX,"href","/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(EX,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraForCausalLM"),c(CX,"href","/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(wX,"href","/docs/transformers/pr_18618/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(AX,"href","/docs/transformers/pr_18618/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(LX,"href","/docs/transformers/pr_18618/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(yX,"href","/docs/transformers/pr_18618/en/model_doc/marian#transformers.MarianForCausalLM"),c(xX,"href","/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartForCausalLM"),c($X,"href","/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(kX,"href","/docs/transformers/pr_18618/en/model_doc/mvp#transformers.MvpForCausalLM"),c(SX,"href","/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(RX,"href","/docs/transformers/pr_18618/en/model_doc/opt#transformers.OPTForCausalLM"),c(PX,"href","/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(BX,"href","/docs/transformers/pr_18618/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(IX,"href","/docs/transformers/pr_18618/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(NX,"href","/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(qX,"href","/docs/transformers/pr_18618/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(jX,"href","/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(DX,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(GX,"href","/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(OX,"href","/docs/transformers/pr_18618/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(VX,"href","/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(XX,"href","/docs/transformers/pr_18618/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(zX,"href","/docs/transformers/pr_18618/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(WX,"href","/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(QX,"href","/docs/transformers/pr_18618/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(UX,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(HX,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(JX,"href","/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cb,"id","transformers.AutoModelForDepthEstimation"),c(Cb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cb,"href","#transformers.AutoModelForDepthEstimation"),c(ud,"class","relative group"),c(YX,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($b,"id","transformers.AutoModelForMaskedLM"),c($b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($b,"href","#transformers.AutoModelForMaskedLM"),c(Fd,"class","relative group"),c(ez,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oz,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rz,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tz,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(az,"href","/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(nz,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertForMaskedLM"),c(sz,"href","/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(lz,"href","/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(iz,"href","/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(dz,"href","/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(cz,"href","/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(fz,"href","/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(mz,"href","/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(gz,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(hz,"href","/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(pz,"href","/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(_z,"href","/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(uz,"href","/docs/transformers/pr_18618/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(bz,"href","/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(vz,"href","/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Fz,"href","/docs/transformers/pr_18618/en/model_doc/luke#transformers.LukeForMaskedLM"),c(Tz,"href","/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Mz,"href","/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Ez,"href","/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Cz,"href","/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(wz,"href","/docs/transformers/pr_18618/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(Az,"href","/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(Lz,"href","/docs/transformers/pr_18618/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(yz,"href","/docs/transformers/pr_18618/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(xz,"href","/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c($z,"href","/docs/transformers/pr_18618/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(kz,"href","/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Sz,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Rz,"href","/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Pz,"href","/docs/transformers/pr_18618/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Bz,"href","/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Iz,"href","/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Nz,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(qz,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(jz,"href","/docs/transformers/pr_18618/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b2,"id","transformers.AutoModelForSeq2SeqLM"),c(b2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ed,"class","relative group"),c(Dz,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gz,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oz,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vz,"href","/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Xz,"href","/docs/transformers/pr_18618/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(zz,"href","/docs/transformers/pr_18618/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Wz,"href","/docs/transformers/pr_18618/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Qz,"href","/docs/transformers/pr_18618/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Uz,"href","/docs/transformers/pr_18618/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Hz,"href","/docs/transformers/pr_18618/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Jz,"href","/docs/transformers/pr_18618/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(Yz,"href","/docs/transformers/pr_18618/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Kz,"href","/docs/transformers/pr_18618/en/model_doc/marian#transformers.MarianMTModel"),c(Zz,"href","/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(eW,"href","/docs/transformers/pr_18618/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(oW,"href","/docs/transformers/pr_18618/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(rW,"href","/docs/transformers/pr_18618/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(tW,"href","/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(aW,"href","/docs/transformers/pr_18618/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(nW,"href","/docs/transformers/pr_18618/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(sW,"href","/docs/transformers/pr_18618/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(lW,"href","/docs/transformers/pr_18618/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G2,"id","transformers.AutoModelForSequenceClassification"),c(G2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G2,"href","#transformers.AutoModelForSequenceClassification"),c(Ad,"class","relative group"),c(iW,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dW,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cW,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fW,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(mW,"href","/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartForSequenceClassification"),c(gW,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertForSequenceClassification"),c(hW,"href","/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(pW,"href","/docs/transformers/pr_18618/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(_W,"href","/docs/transformers/pr_18618/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(uW,"href","/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(bW,"href","/docs/transformers/pr_18618/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(vW,"href","/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(FW,"href","/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(TW,"href","/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(MW,"href","/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(EW,"href","/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(CW,"href","/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(wW,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(AW,"href","/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(LW,"href","/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(yW,"href","/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(xW,"href","/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c($W,"href","/docs/transformers/pr_18618/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(kW,"href","/docs/transformers/pr_18618/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(SW,"href","/docs/transformers/pr_18618/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(RW,"href","/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(PW,"href","/docs/transformers/pr_18618/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(BW,"href","/docs/transformers/pr_18618/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(IW,"href","/docs/transformers/pr_18618/en/model_doc/led#transformers.LEDForSequenceClassification"),c(NW,"href","/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(qW,"href","/docs/transformers/pr_18618/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(jW,"href","/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(DW,"href","/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(GW,"href","/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(OW,"href","/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(VW,"href","/docs/transformers/pr_18618/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(XW,"href","/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(zW,"href","/docs/transformers/pr_18618/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(WW,"href","/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(QW,"href","/docs/transformers/pr_18618/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(UW,"href","/docs/transformers/pr_18618/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(HW,"href","/docs/transformers/pr_18618/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(JW,"href","/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(YW,"href","/docs/transformers/pr_18618/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(KW,"href","/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(ZW,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(eQ,"href","/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(oQ,"href","/docs/transformers/pr_18618/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(rQ,"href","/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(tQ,"href","/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(aQ,"href","/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(nQ,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(sQ,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(lQ,"href","/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(iQ,"href","/docs/transformers/pr_18618/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vv,"id","transformers.AutoModelForMultipleChoice"),c(Vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vv,"href","#transformers.AutoModelForMultipleChoice"),c(xd,"class","relative group"),c(dQ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cQ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fQ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mQ,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(gQ,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertForMultipleChoice"),c(hQ,"href","/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(pQ,"href","/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(_Q,"href","/docs/transformers/pr_18618/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(uQ,"href","/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(bQ,"href","/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(vQ,"href","/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(FQ,"href","/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(TQ,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(MQ,"href","/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(EQ,"href","/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(CQ,"href","/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(wQ,"href","/docs/transformers/pr_18618/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(AQ,"href","/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(LQ,"href","/docs/transformers/pr_18618/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(yQ,"href","/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(xQ,"href","/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c($Q,"href","/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(kQ,"href","/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(SQ,"href","/docs/transformers/pr_18618/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(RQ,"href","/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(PQ,"href","/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(BQ,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(IQ,"href","/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(NQ,"href","/docs/transformers/pr_18618/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(qQ,"href","/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(jQ,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(DQ,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(GQ,"href","/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(OQ,"href","/docs/transformers/pr_18618/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C6,"id","transformers.AutoModelForNextSentencePrediction"),c(C6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C6,"href","#transformers.AutoModelForNextSentencePrediction"),c(Sd,"class","relative group"),c(VQ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XQ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zQ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WQ,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(QQ,"href","/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(UQ,"href","/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(HQ,"href","/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(JQ,"href","/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(YQ,"href","/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P6,"id","transformers.AutoModelForTokenClassification"),c(P6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P6,"href","#transformers.AutoModelForTokenClassification"),c(Bd,"class","relative group"),c(KQ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZQ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eU,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oU,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(rU,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertForTokenClassification"),c(tU,"href","/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(aU,"href","/docs/transformers/pr_18618/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(nU,"href","/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(sU,"href","/docs/transformers/pr_18618/en/model_doc/canine#transformers.CanineForTokenClassification"),c(lU,"href","/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(iU,"href","/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(dU,"href","/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(cU,"href","/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(fU,"href","/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(mU,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(gU,"href","/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(hU,"href","/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(pU,"href","/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(_U,"href","/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(uU,"href","/docs/transformers/pr_18618/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(bU,"href","/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(vU,"href","/docs/transformers/pr_18618/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(FU,"href","/docs/transformers/pr_18618/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(TU,"href","/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(MU,"href","/docs/transformers/pr_18618/en/model_doc/luke#transformers.LukeForTokenClassification"),c(EU,"href","/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(CU,"href","/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(wU,"href","/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(AU,"href","/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(LU,"href","/docs/transformers/pr_18618/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(yU,"href","/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(xU,"href","/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c($U,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(kU,"href","/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(SU,"href","/docs/transformers/pr_18618/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(RU,"href","/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(PU,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(BU,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(IU,"href","/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(NU,"href","/docs/transformers/pr_18618/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TF,"id","transformers.AutoModelForQuestionAnswering"),c(TF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TF,"href","#transformers.AutoModelForQuestionAnswering"),c(qd,"class","relative group"),c(qU,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jU,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DU,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GU,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_18618/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_18618/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_18618/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_18618/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_18618/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_18618/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(KU,"href","/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(ZU,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(eH,"href","/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(oH,"href","/docs/transformers/pr_18618/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(rH,"href","/docs/transformers/pr_18618/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(tH,"href","/docs/transformers/pr_18618/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(aH,"href","/docs/transformers/pr_18618/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(nH,"href","/docs/transformers/pr_18618/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(sH,"href","/docs/transformers/pr_18618/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(lH,"href","/docs/transformers/pr_18618/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(iH,"href","/docs/transformers/pr_18618/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(dH,"href","/docs/transformers/pr_18618/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(cH,"href","/docs/transformers/pr_18618/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(fH,"href","/docs/transformers/pr_18618/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(mH,"href","/docs/transformers/pr_18618/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(gH,"href","/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(hH,"href","/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(pH,"href","/docs/transformers/pr_18618/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(_H,"href","/docs/transformers/pr_18618/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(uH,"href","/docs/transformers/pr_18618/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(bH,"href","/docs/transformers/pr_18618/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(vH,"href","/docs/transformers/pr_18618/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(FH,"href","/docs/transformers/pr_18618/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(TH,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(MH,"href","/docs/transformers/pr_18618/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(EH,"href","/docs/transformers/pr_18618/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(CH,"href","/docs/transformers/pr_18618/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(wH,"href","/docs/transformers/pr_18618/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(AH,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(LH,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(yH,"href","/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(xH,"href","/docs/transformers/pr_18618/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hT,"id","transformers.AutoModelForTableQuestionAnswering"),c(hT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Gd,"class","relative group"),c($H,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kH,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SH,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RH,"href","/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vT,"id","transformers.AutoModelForImageClassification"),c(vT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vT,"href","#transformers.AutoModelForImageClassification"),c(Xd,"class","relative group"),c(PH,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BH,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IH,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NH,"href","/docs/transformers/pr_18618/en/model_doc/beit#transformers.BeitForImageClassification"),c(qH,"href","/docs/transformers/pr_18618/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(jH,"href","/docs/transformers/pr_18618/en/model_doc/cvt#transformers.CvtForImageClassification"),c(DH,"href","/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(GH,"href","/docs/transformers/pr_18618/en/model_doc/deit#transformers.DeiTForImageClassification"),c(OH,"href","/docs/transformers/pr_18618/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(VH,"href","/docs/transformers/pr_18618/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(XH,"href","/docs/transformers/pr_18618/en/model_doc/levit#transformers.LevitForImageClassification"),c(zH,"href","/docs/transformers/pr_18618/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(WH,"href","/docs/transformers/pr_18618/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(QH,"href","/docs/transformers/pr_18618/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(UH,"href","/docs/transformers/pr_18618/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(HH,"href","/docs/transformers/pr_18618/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(JH,"href","/docs/transformers/pr_18618/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(YH,"href","/docs/transformers/pr_18618/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(KH,"href","/docs/transformers/pr_18618/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(ZH,"href","/docs/transformers/pr_18618/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(eJ,"href","/docs/transformers/pr_18618/en/model_doc/swin#transformers.SwinForImageClassification"),c(oJ,"href","/docs/transformers/pr_18618/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(rJ,"href","/docs/transformers/pr_18618/en/model_doc/van#transformers.VanForImageClassification"),c(tJ,"href","/docs/transformers/pr_18618/en/model_doc/vit#transformers.ViTForImageClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.AutoModelForVideoClassification"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.AutoModelForVideoClassification"),c(Qd,"class","relative group"),c(aJ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nJ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sJ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lJ,"href","/docs/transformers/pr_18618/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OT,"id","transformers.AutoModelForVision2Seq"),c(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OT,"href","#transformers.AutoModelForVision2Seq"),c(Jd,"class","relative group"),c(iJ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dJ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cJ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fJ,"href","/docs/transformers/pr_18618/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(QT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Zd,"class","relative group"),c(mJ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/pr_18618/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KT,"id","transformers.AutoModelForAudioClassification"),c(KT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KT,"href","#transformers.AutoModelForAudioClassification"),c(rc,"class","relative group"),c(_J,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uJ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bJ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vJ,"href","/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(FJ,"href","/docs/transformers/pr_18618/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(TJ,"href","/docs/transformers/pr_18618/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(MJ,"href","/docs/transformers/pr_18618/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(EJ,"href","/docs/transformers/pr_18618/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(CJ,"href","/docs/transformers/pr_18618/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(wJ,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(AJ,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(LJ,"href","/docs/transformers/pr_18618/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fM,"id","transformers.AutoModelForAudioFrameClassification"),c(fM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fM,"href","#transformers.AutoModelForAudioFrameClassification"),c(nc,"class","relative group"),c(yJ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xJ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($J,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kJ,"href","/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(SJ,"href","/docs/transformers/pr_18618/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(RJ,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(PJ,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(BJ,"href","/docs/transformers/pr_18618/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FM,"id","transformers.AutoModelForCTC"),c(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FM,"href","#transformers.AutoModelForCTC"),c(ic,"class","relative group"),c(IJ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NJ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qJ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jJ,"href","/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(DJ,"href","/docs/transformers/pr_18618/en/model_doc/hubert#transformers.HubertForCTC"),c(GJ,"href","/docs/transformers/pr_18618/en/model_doc/mctct#transformers.MCTCTForCTC"),c(OJ,"href","/docs/transformers/pr_18618/en/model_doc/sew#transformers.SEWForCTC"),c(VJ,"href","/docs/transformers/pr_18618/en/model_doc/sew-d#transformers.SEWDForCTC"),c(XJ,"href","/docs/transformers/pr_18618/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(zJ,"href","/docs/transformers/pr_18618/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(WJ,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(QJ,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(UJ,"href","/docs/transformers/pr_18618/en/model_doc/wavlm#transformers.WavLMForCTC"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PM,"id","transformers.AutoModelForSpeechSeq2Seq"),c(PM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PM,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(fc,"class","relative group"),c(HJ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JJ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YJ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KJ,"href","/docs/transformers/pr_18618/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(ZJ,"href","/docs/transformers/pr_18618/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DM,"id","transformers.AutoModelForAudioXVector"),c(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DM,"href","#transformers.AutoModelForAudioXVector"),c(hc,"class","relative group"),c(eY,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oY,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rY,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tY,"href","/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(aY,"href","/docs/transformers/pr_18618/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(nY,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(sY,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(lY,"href","/docs/transformers/pr_18618/en/model_doc/wavlm#transformers.WavLMForXVector"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HM,"id","transformers.AutoModelForMaskedImageModeling"),c(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HM,"href","#transformers.AutoModelForMaskedImageModeling"),c(uc,"class","relative group"),c(iY,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dY,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cY,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fY,"href","/docs/transformers/pr_18618/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(mY,"href","/docs/transformers/pr_18618/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(gY,"href","/docs/transformers/pr_18618/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(hY,"href","/docs/transformers/pr_18618/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tE,"id","transformers.AutoModelForObjectDetection"),c(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tE,"href","#transformers.AutoModelForObjectDetection"),c(Fc,"class","relative group"),c(pY,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Y,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uY,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bY,"href","/docs/transformers/pr_18618/en/model_doc/detr#transformers.DetrForObjectDetection"),c(vY,"href","/docs/transformers/pr_18618/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dE,"id","transformers.AutoModelForImageSegmentation"),c(dE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dE,"href","#transformers.AutoModelForImageSegmentation"),c(Ec,"class","relative group"),c(FY,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TY,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MY,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EY,"href","/docs/transformers/pr_18618/en/model_doc/detr#transformers.DetrForSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hE,"id","transformers.AutoModelForSemanticSegmentation"),c(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hE,"href","#transformers.AutoModelForSemanticSegmentation"),c(Ac,"class","relative group"),c(CY,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wY,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AY,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LY,"href","/docs/transformers/pr_18618/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(yY,"href","/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(xY,"href","/docs/transformers/pr_18618/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c($Y,"href","/docs/transformers/pr_18618/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(kY,"href","/docs/transformers/pr_18618/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.AutoModelForInstanceSegmentation"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.AutoModelForInstanceSegmentation"),c(xc,"class","relative group"),c(SY,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RY,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PY,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BY,"href","/docs/transformers/pr_18618/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yE,"id","transformers.TFAutoModel"),c(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yE,"href","#transformers.TFAutoModel"),c(Sc,"class","relative group"),c(IY,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NY,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qY,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jY,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.TFAlbertModel"),c(DY,"href","/docs/transformers/pr_18618/en/model_doc/bart#transformers.TFBartModel"),c(GY,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.TFBertModel"),c(OY,"href","/docs/transformers/pr_18618/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(VY,"href","/docs/transformers/pr_18618/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(XY,"href","/docs/transformers/pr_18618/en/model_doc/camembert#transformers.TFCamembertModel"),c(zY,"href","/docs/transformers/pr_18618/en/model_doc/clip#transformers.TFCLIPModel"),c(WY,"href","/docs/transformers/pr_18618/en/model_doc/convbert#transformers.TFConvBertModel"),c(QY,"href","/docs/transformers/pr_18618/en/model_doc/convnext#transformers.TFConvNextModel"),c(UY,"href","/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.TFCTRLModel"),c(HY,"href","/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(JY,"href","/docs/transformers/pr_18618/en/model_doc/deberta#transformers.TFDebertaModel"),c(YY,"href","/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(KY,"href","/docs/transformers/pr_18618/en/model_doc/deit#transformers.TFDeiTModel"),c(ZY,"href","/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(eK,"href","/docs/transformers/pr_18618/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(oK,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.TFElectraModel"),c(rK,"href","/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(tK,"href","/docs/transformers/pr_18618/en/model_doc/funnel#transformers.TFFunnelModel"),c(aK,"href","/docs/transformers/pr_18618/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(nK,"href","/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.TFGPT2Model"),c(sK,"href","/docs/transformers/pr_18618/en/model_doc/gptj#transformers.TFGPTJModel"),c(lK,"href","/docs/transformers/pr_18618/en/model_doc/hubert#transformers.TFHubertModel"),c(iK,"href","/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(dK,"href","/docs/transformers/pr_18618/en/model_doc/led#transformers.TFLEDModel"),c(cK,"href","/docs/transformers/pr_18618/en/model_doc/longformer#transformers.TFLongformerModel"),c(fK,"href","/docs/transformers/pr_18618/en/model_doc/lxmert#transformers.TFLxmertModel"),c(mK,"href","/docs/transformers/pr_18618/en/model_doc/marian#transformers.TFMarianModel"),c(gK,"href","/docs/transformers/pr_18618/en/model_doc/mbart#transformers.TFMBartModel"),c(hK,"href","/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(pK,"href","/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.TFMPNetModel"),c(_K,"href","/docs/transformers/pr_18618/en/model_doc/mt5#transformers.TFMT5Model"),c(uK,"href","/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(bK,"href","/docs/transformers/pr_18618/en/model_doc/opt#transformers.TFOPTModel"),c(vK,"href","/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.TFPegasusModel"),c(FK,"href","/docs/transformers/pr_18618/en/model_doc/regnet#transformers.TFRegNetModel"),c(TK,"href","/docs/transformers/pr_18618/en/model_doc/rembert#transformers.TFRemBertModel"),c(MK,"href","/docs/transformers/pr_18618/en/model_doc/resnet#transformers.TFResNetModel"),c(EK,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.TFRobertaModel"),c(CK,"href","/docs/transformers/pr_18618/en/model_doc/roformer#transformers.TFRoFormerModel"),c(wK,"href","/docs/transformers/pr_18618/en/model_doc/segformer#transformers.TFSegformerModel"),c(AK,"href","/docs/transformers/pr_18618/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(LK,"href","/docs/transformers/pr_18618/en/model_doc/swin#transformers.TFSwinModel"),c(yK,"href","/docs/transformers/pr_18618/en/model_doc/t5#transformers.TFT5Model"),c(xK,"href","/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TFTapasModel"),c($K,"href","/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(kK,"href","/docs/transformers/pr_18618/en/model_doc/vit#transformers.TFViTModel"),c(SK,"href","/docs/transformers/pr_18618/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(RK,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(PK,"href","/docs/transformers/pr_18618/en/model_doc/xlm#transformers.TFXLMModel"),c(BK,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(IK,"href","/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L4,"id","transformers.TFAutoModelForPreTraining"),c(L4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L4,"href","#transformers.TFAutoModelForPreTraining"),c(Bc,"class","relative group"),c(NK,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qK,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jK,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DK,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(GK,"href","/docs/transformers/pr_18618/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(OK,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.TFBertForPreTraining"),c(VK,"href","/docs/transformers/pr_18618/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(XK,"href","/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(zK,"href","/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(WK,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(QK,"href","/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(UK,"href","/docs/transformers/pr_18618/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(HK,"href","/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(JK,"href","/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(YK,"href","/docs/transformers/pr_18618/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(KK,"href","/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(ZK,"href","/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(eZ,"href","/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(oZ,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(rZ,"href","/docs/transformers/pr_18618/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(tZ,"href","/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(aZ,"href","/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(nZ,"href","/docs/transformers/pr_18618/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(sZ,"href","/docs/transformers/pr_18618/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(lZ,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(iZ,"href","/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z4,"id","transformers.TFAutoModelForCausalLM"),c(Z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z4,"href","#transformers.TFAutoModelForCausalLM"),c(qc,"class","relative group"),c(dZ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cZ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fZ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mZ,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(gZ,"href","/docs/transformers/pr_18618/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(hZ,"href","/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(pZ,"href","/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(_Z,"href","/docs/transformers/pr_18618/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(uZ,"href","/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(bZ,"href","/docs/transformers/pr_18618/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(vZ,"href","/docs/transformers/pr_18618/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(FZ,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(TZ,"href","/docs/transformers/pr_18618/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(MZ,"href","/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(EZ,"href","/docs/transformers/pr_18618/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(CZ,"href","/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.TFAutoModelForImageClassification"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.TFAutoModelForImageClassification"),c(Gc,"class","relative group"),c(wZ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AZ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LZ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yZ,"href","/docs/transformers/pr_18618/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(xZ,"href","/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c($Z,"href","/docs/transformers/pr_18618/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(kZ,"href","/docs/transformers/pr_18618/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(SZ,"href","/docs/transformers/pr_18618/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(RZ,"href","/docs/transformers/pr_18618/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(PZ,"href","/docs/transformers/pr_18618/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(BZ,"href","/docs/transformers/pr_18618/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(IZ,"href","/docs/transformers/pr_18618/en/model_doc/vit#transformers.TFViTForImageClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wC,"id","transformers.TFAutoModelForSemanticSegmentation"),c(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wC,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(Xc,"class","relative group"),c(NZ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qZ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jZ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DZ,"href","/docs/transformers/pr_18618/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(GZ,"href","/docs/transformers/pr_18618/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($C,"id","transformers.TFAutoModelForMaskedLM"),c($C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($C,"href","#transformers.TFAutoModelForMaskedLM"),c(Qc,"class","relative group"),c(OZ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VZ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XZ,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zZ,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(WZ,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(QZ,"href","/docs/transformers/pr_18618/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(UZ,"href","/docs/transformers/pr_18618/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(HZ,"href","/docs/transformers/pr_18618/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(JZ,"href","/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(YZ,"href","/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(KZ,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(ZZ,"href","/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(eee,"href","/docs/transformers/pr_18618/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(oee,"href","/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(ree,"href","/docs/transformers/pr_18618/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(tee,"href","/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(aee,"href","/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(nee,"href","/docs/transformers/pr_18618/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(see,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(lee,"href","/docs/transformers/pr_18618/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(iee,"href","/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(dee,"href","/docs/transformers/pr_18618/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(cee,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZC,"id","transformers.TFAutoModelForSeq2SeqLM"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Jc,"class","relative group"),c(fee,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mee,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gee,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hee,"href","/docs/transformers/pr_18618/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(pee,"href","/docs/transformers/pr_18618/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(_ee,"href","/docs/transformers/pr_18618/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(uee,"href","/docs/transformers/pr_18618/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(bee,"href","/docs/transformers/pr_18618/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(vee,"href","/docs/transformers/pr_18618/en/model_doc/marian#transformers.TFMarianMTModel"),c(Fee,"href","/docs/transformers/pr_18618/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(Tee,"href","/docs/transformers/pr_18618/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(Mee,"href","/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(Eee,"href","/docs/transformers/pr_18618/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m3,"id","transformers.TFAutoModelForSequenceClassification"),c(m3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m3,"href","#transformers.TFAutoModelForSequenceClassification"),c(Zc,"class","relative group"),c(Cee,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wee,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Aee,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lee,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(yee,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(xee,"href","/docs/transformers/pr_18618/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c($ee,"href","/docs/transformers/pr_18618/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(kee,"href","/docs/transformers/pr_18618/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(See,"href","/docs/transformers/pr_18618/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(Ree,"href","/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(Pee,"href","/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(Bee,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(Iee,"href","/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(Nee,"href","/docs/transformers/pr_18618/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(qee,"href","/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(jee,"href","/docs/transformers/pr_18618/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(Dee,"href","/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(Gee,"href","/docs/transformers/pr_18618/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(Oee,"href","/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(Vee,"href","/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(Xee,"href","/docs/transformers/pr_18618/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(zee,"href","/docs/transformers/pr_18618/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(Wee,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Qee,"href","/docs/transformers/pr_18618/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(Uee,"href","/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(Hee,"href","/docs/transformers/pr_18618/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(Jee,"href","/docs/transformers/pr_18618/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(Yee,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(Kee,"href","/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G3,"id","transformers.TFAutoModelForMultipleChoice"),c(G3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G3,"href","#transformers.TFAutoModelForMultipleChoice"),c(rf,"class","relative group"),c(Zee,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eoe,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ooe,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(roe,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(toe,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(aoe,"href","/docs/transformers/pr_18618/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(noe,"href","/docs/transformers/pr_18618/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(soe,"href","/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(loe,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(ioe,"href","/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(doe,"href","/docs/transformers/pr_18618/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(coe,"href","/docs/transformers/pr_18618/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(foe,"href","/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(moe,"href","/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(goe,"href","/docs/transformers/pr_18618/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(hoe,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(poe,"href","/docs/transformers/pr_18618/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(_oe,"href","/docs/transformers/pr_18618/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(uoe,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(boe,"href","/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l5,"id","transformers.TFAutoModelForNextSentencePrediction"),c(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l5,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(nf,"class","relative group"),c(voe,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Foe,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Toe,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Moe,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(Eoe,"href","/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(df,"class","relative group"),c(Coe,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(woe,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Aoe,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Loe,"href","/docs/transformers/pr_18618/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_5,"id","transformers.TFAutoModelForTokenClassification"),c(_5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_5,"href","#transformers.TFAutoModelForTokenClassification"),c(mf,"class","relative group"),c(yoe,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xoe,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($oe,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(koe,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(Soe,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(Roe,"href","/docs/transformers/pr_18618/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(Poe,"href","/docs/transformers/pr_18618/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(Boe,"href","/docs/transformers/pr_18618/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(Ioe,"href","/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(Noe,"href","/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(qoe,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(joe,"href","/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(Doe,"href","/docs/transformers/pr_18618/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(Goe,"href","/docs/transformers/pr_18618/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(Ooe,"href","/docs/transformers/pr_18618/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(Voe,"href","/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(Xoe,"href","/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(zoe,"href","/docs/transformers/pr_18618/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(Woe,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Qoe,"href","/docs/transformers/pr_18618/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(Uoe,"href","/docs/transformers/pr_18618/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(Hoe,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(Joe,"href","/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j5,"id","transformers.TFAutoModelForQuestionAnswering"),c(j5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(pf,"class","relative group"),c(Yoe,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Koe,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zoe,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ere,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(ore,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(rre,"href","/docs/transformers/pr_18618/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(tre,"href","/docs/transformers/pr_18618/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(are,"href","/docs/transformers/pr_18618/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(nre,"href","/docs/transformers/pr_18618/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(sre,"href","/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(lre,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(ire,"href","/docs/transformers/pr_18618/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(dre,"href","/docs/transformers/pr_18618/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(cre,"href","/docs/transformers/pr_18618/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(fre,"href","/docs/transformers/pr_18618/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(mre,"href","/docs/transformers/pr_18618/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(gre,"href","/docs/transformers/pr_18618/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(hre,"href","/docs/transformers/pr_18618/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(pre,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(_re,"href","/docs/transformers/pr_18618/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(ure,"href","/docs/transformers/pr_18618/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(bre,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(vre,"href","/docs/transformers/pr_18618/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i0,"id","transformers.TFAutoModelForVision2Seq"),c(i0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i0,"href","#transformers.TFAutoModelForVision2Seq"),c(bf,"class","relative group"),c(Fre,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tre,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mre,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ere,"href","/docs/transformers/pr_18618/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m0,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(m0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m0,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Tf,"class","relative group"),c(Cre,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wre,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Are,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lre,"href","/docs/transformers/pr_18618/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_0,"id","transformers.FlaxAutoModel"),c(_0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_0,"href","#transformers.FlaxAutoModel"),c(Cf,"class","relative group"),c(yre,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xre,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($re,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kre,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.FlaxAlbertModel"),c(Sre,"href","/docs/transformers/pr_18618/en/model_doc/bart#transformers.FlaxBartModel"),c(Rre,"href","/docs/transformers/pr_18618/en/model_doc/beit#transformers.FlaxBeitModel"),c(Pre,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.FlaxBertModel"),c(Bre,"href","/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(Ire,"href","/docs/transformers/pr_18618/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(Nre,"href","/docs/transformers/pr_18618/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(qre,"href","/docs/transformers/pr_18618/en/model_doc/clip#transformers.FlaxCLIPModel"),c(jre,"href","/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(Dre,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.FlaxElectraModel"),c(Gre,"href","/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(Ore,"href","/docs/transformers/pr_18618/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(Vre,"href","/docs/transformers/pr_18618/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(Xre,"href","/docs/transformers/pr_18618/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(zre,"href","/docs/transformers/pr_18618/en/model_doc/marian#transformers.FlaxMarianModel"),c(Wre,"href","/docs/transformers/pr_18618/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Qre,"href","/docs/transformers/pr_18618/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Ure,"href","/docs/transformers/pr_18618/en/model_doc/opt#transformers.FlaxOPTModel"),c(Hre,"href","/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Jre,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Yre,"href","/docs/transformers/pr_18618/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(Kre,"href","/docs/transformers/pr_18618/en/model_doc/t5#transformers.FlaxT5Model"),c(Zre,"href","/docs/transformers/pr_18618/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(ete,"href","/docs/transformers/pr_18618/en/model_doc/vit#transformers.FlaxViTModel"),c(ote,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(rte,"href","/docs/transformers/pr_18618/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(tte,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W0,"id","transformers.FlaxAutoModelForCausalLM"),c(W0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W0,"href","#transformers.FlaxAutoModelForCausalLM"),c(Lf,"class","relative group"),c(ate,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nte,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ste,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lte,"href","/docs/transformers/pr_18618/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(ite,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(dte,"href","/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(cte,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(fte,"href","/docs/transformers/pr_18618/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(mte,"href","/docs/transformers/pr_18618/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(gte,"href","/docs/transformers/pr_18618/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(hte,"href","/docs/transformers/pr_18618/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(pte,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(_te,"href","/docs/transformers/pr_18618/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nw,"id","transformers.FlaxAutoModelForPreTraining"),c(nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nw,"href","#transformers.FlaxAutoModelForPreTraining"),c($f,"class","relative group"),c(ute,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bte,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vte,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fte,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Tte,"href","/docs/transformers/pr_18618/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Mte,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Ete,"href","/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Cte,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(wte,"href","/docs/transformers/pr_18618/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Ate,"href","/docs/transformers/pr_18618/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Lte,"href","/docs/transformers/pr_18618/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(yte,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(xte,"href","/docs/transformers/pr_18618/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c($te,"href","/docs/transformers/pr_18618/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(kte,"href","/docs/transformers/pr_18618/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Ste,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tw,"id","transformers.FlaxAutoModelForMaskedLM"),c(Tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tw,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Rf,"class","relative group"),c(Rte,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pte,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bte,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ite,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(Nte,"href","/docs/transformers/pr_18618/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(qte,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(jte,"href","/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(Dte,"href","/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(Gte,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Ote,"href","/docs/transformers/pr_18618/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Vte,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Xte,"href","/docs/transformers/pr_18618/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(zte,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(Pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(If,"class","relative group"),c(Wte,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qte,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ute,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hte,"href","/docs/transformers/pr_18618/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Jte,"href","/docs/transformers/pr_18618/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Yte,"href","/docs/transformers/pr_18618/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Kte,"href","/docs/transformers/pr_18618/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Zte,"href","/docs/transformers/pr_18618/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(eae,"href","/docs/transformers/pr_18618/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(oae,"href","/docs/transformers/pr_18618/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(rae,"href","/docs/transformers/pr_18618/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(tae,"href","/docs/transformers/pr_18618/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(aae,"href","/docs/transformers/pr_18618/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(Qw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(jf,"class","relative group"),c(nae,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sae,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lae,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iae,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(dae,"href","/docs/transformers/pr_18618/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(cae,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(fae,"href","/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(mae,"href","/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(gae,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(hae,"href","/docs/transformers/pr_18618/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(pae,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(_ae,"href","/docs/transformers/pr_18618/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(uae,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sA,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(sA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sA,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Of,"class","relative group"),c(bae,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vae,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fae,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tae,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Mae,"href","/docs/transformers/pr_18618/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Eae,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Cae,"href","/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(wae,"href","/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Aae,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Lae,"href","/docs/transformers/pr_18618/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(yae,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(xae,"href","/docs/transformers/pr_18618/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c($ae,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vA,"id","transformers.FlaxAutoModelForTokenClassification"),c(vA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(zf,"class","relative group"),c(kae,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sae,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rae,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pae,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Bae,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Iae,"href","/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Nae,"href","/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(qae,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(jae,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Dae,"href","/docs/transformers/pr_18618/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Gae,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($A,"id","transformers.FlaxAutoModelForMultipleChoice"),c($A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($A,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Uf,"class","relative group"),c(Oae,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vae,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xae,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zae,"href","/docs/transformers/pr_18618/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Wae,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Qae,"href","/docs/transformers/pr_18618/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Uae,"href","/docs/transformers/pr_18618/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Hae,"href","/docs/transformers/pr_18618/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Jae,"href","/docs/transformers/pr_18618/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Yae,"href","/docs/transformers/pr_18618/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Kae,"href","/docs/transformers/pr_18618/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(GA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Yf,"class","relative group"),c(Zae,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ene,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(one,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rne,"href","/docs/transformers/pr_18618/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zA,"id","transformers.FlaxAutoModelForImageClassification"),c(zA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zA,"href","#transformers.FlaxAutoModelForImageClassification"),c(em,"class","relative group"),c(tne,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ane,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nne,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sne,"href","/docs/transformers/pr_18618/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(lne,"href","/docs/transformers/pr_18618/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JA,"id","transformers.FlaxAutoModelForVision2Seq"),c(JA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(tm,"class","relative group"),c(ine,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dne,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cne,"href","/docs/transformers/pr_18618/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fne,"href","/docs/transformers/pr_18618/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Lo),e(Lo,Ui),b(f,dm,u),b(f,gt,u),e(gt,Hi),e(gt,Ji),e(Ji,Ly),e(gt,cm),b(f,Oe,u),b(f,Qe,u),e(Qe,Yi),e(Qe,Hn),e(Hn,yy),e(Qe,Jn),e(Qe,Yn),e(Yn,xy),e(Qe,Ki),e(Qe,Kn),e(Kn,$y),e(Qe,Zi),b(f,fm,u),M(Va,f,u),b(f,Ue,u),b(f,Ae,u),e(Ae,LP),e(Ae,ed),e(ed,yP),e(Ae,xP),b(f,yo,u),b(f,Xa,u),e(Xa,$P),e(Xa,mm),e(mm,kP),e(Xa,iZe),b(f,RUe,u),b(f,od,u),e(od,gm),e(gm,fle),M(ky,fle,null),e(od,dZe),e(od,mle),e(mle,cZe),b(f,PUe,u),b(f,Zn,u),e(Zn,fZe),e(Zn,gle),e(gle,mZe),e(Zn,gZe),e(Zn,hle),e(hle,hZe),e(Zn,pZe),b(f,BUe,u),M(Sy,f,u),b(f,IUe,u),b(f,SP,u),e(SP,_Ze),b(f,NUe,u),M(hm,f,u),b(f,qUe,u),b(f,rd,u),e(rd,pm),e(pm,ple),M(Ry,ple,null),e(rd,uZe),e(rd,_le),e(_le,bZe),b(f,jUe,u),b(f,xo,u),M(Py,xo,null),e(xo,vZe),e(xo,By),e(By,FZe),e(By,RP),e(RP,TZe),e(By,MZe),e(xo,EZe),e(xo,Iy),e(Iy,CZe),e(Iy,ule),e(ule,wZe),e(Iy,AZe),e(xo,LZe),e(xo,Rr),M(Ny,Rr,null),e(Rr,yZe),e(Rr,ble),e(ble,xZe),e(Rr,$Ze),e(Rr,td),e(td,kZe),e(td,vle),e(vle,SZe),e(td,RZe),e(td,Fle),e(Fle,PZe),e(td,BZe),e(Rr,IZe),e(Rr,A),e(A,_m),e(_m,Tle),e(Tle,NZe),e(_m,qZe),e(_m,PP),e(PP,jZe),e(_m,DZe),e(A,GZe),e(A,um),e(um,Mle),e(Mle,OZe),e(um,VZe),e(um,BP),e(BP,XZe),e(um,zZe),e(A,WZe),e(A,bm),e(bm,Ele),e(Ele,QZe),e(bm,UZe),e(bm,IP),e(IP,HZe),e(bm,JZe),e(A,YZe),e(A,vm),e(vm,Cle),e(Cle,KZe),e(vm,ZZe),e(vm,NP),e(NP,eeo),e(vm,oeo),e(A,reo),e(A,Fm),e(Fm,wle),e(wle,teo),e(Fm,aeo),e(Fm,qP),e(qP,neo),e(Fm,seo),e(A,leo),e(A,Tm),e(Tm,Ale),e(Ale,ieo),e(Tm,deo),e(Tm,jP),e(jP,ceo),e(Tm,feo),e(A,meo),e(A,Mm),e(Mm,Lle),e(Lle,geo),e(Mm,heo),e(Mm,DP),e(DP,peo),e(Mm,_eo),e(A,ueo),e(A,Em),e(Em,yle),e(yle,beo),e(Em,veo),e(Em,GP),e(GP,Feo),e(Em,Teo),e(A,Meo),e(A,Cm),e(Cm,xle),e(xle,Eeo),e(Cm,Ceo),e(Cm,OP),e(OP,weo),e(Cm,Aeo),e(A,Leo),e(A,wm),e(wm,$le),e($le,yeo),e(wm,xeo),e(wm,VP),e(VP,$eo),e(wm,keo),e(A,Seo),e(A,Am),e(Am,kle),e(kle,Reo),e(Am,Peo),e(Am,XP),e(XP,Beo),e(Am,Ieo),e(A,Neo),e(A,Lm),e(Lm,Sle),e(Sle,qeo),e(Lm,jeo),e(Lm,zP),e(zP,Deo),e(Lm,Geo),e(A,Oeo),e(A,ym),e(ym,Rle),e(Rle,Veo),e(ym,Xeo),e(ym,WP),e(WP,zeo),e(ym,Weo),e(A,Qeo),e(A,xm),e(xm,Ple),e(Ple,Ueo),e(xm,Heo),e(xm,QP),e(QP,Jeo),e(xm,Yeo),e(A,Keo),e(A,$m),e($m,Ble),e(Ble,Zeo),e($m,eoo),e($m,UP),e(UP,ooo),e($m,roo),e(A,too),e(A,km),e(km,Ile),e(Ile,aoo),e(km,noo),e(km,HP),e(HP,soo),e(km,loo),e(A,ioo),e(A,Sm),e(Sm,Nle),e(Nle,doo),e(Sm,coo),e(Sm,JP),e(JP,foo),e(Sm,moo),e(A,goo),e(A,Rm),e(Rm,qle),e(qle,hoo),e(Rm,poo),e(Rm,YP),e(YP,_oo),e(Rm,uoo),e(A,boo),e(A,Pm),e(Pm,jle),e(jle,voo),e(Pm,Foo),e(Pm,KP),e(KP,Too),e(Pm,Moo),e(A,Eoo),e(A,Bm),e(Bm,Dle),e(Dle,Coo),e(Bm,woo),e(Bm,ZP),e(ZP,Aoo),e(Bm,Loo),e(A,yoo),e(A,Im),e(Im,Gle),e(Gle,xoo),e(Im,$oo),e(Im,eB),e(eB,koo),e(Im,Soo),e(A,Roo),e(A,Nm),e(Nm,Ole),e(Ole,Poo),e(Nm,Boo),e(Nm,oB),e(oB,Ioo),e(Nm,Noo),e(A,qoo),e(A,qm),e(qm,Vle),e(Vle,joo),e(qm,Doo),e(qm,rB),e(rB,Goo),e(qm,Ooo),e(A,Voo),e(A,jm),e(jm,Xle),e(Xle,Xoo),e(jm,zoo),e(jm,tB),e(tB,Woo),e(jm,Qoo),e(A,Uoo),e(A,Dm),e(Dm,zle),e(zle,Hoo),e(Dm,Joo),e(Dm,aB),e(aB,Yoo),e(Dm,Koo),e(A,Zoo),e(A,Gm),e(Gm,Wle),e(Wle,ero),e(Gm,oro),e(Gm,nB),e(nB,rro),e(Gm,tro),e(A,aro),e(A,Om),e(Om,Qle),e(Qle,nro),e(Om,sro),e(Om,sB),e(sB,lro),e(Om,iro),e(A,dro),e(A,Vm),e(Vm,Ule),e(Ule,cro),e(Vm,fro),e(Vm,lB),e(lB,mro),e(Vm,gro),e(A,hro),e(A,Xm),e(Xm,Hle),e(Hle,pro),e(Xm,_ro),e(Xm,iB),e(iB,uro),e(Xm,bro),e(A,vro),e(A,zm),e(zm,Jle),e(Jle,Fro),e(zm,Tro),e(zm,dB),e(dB,Mro),e(zm,Ero),e(A,Cro),e(A,Wm),e(Wm,Yle),e(Yle,wro),e(Wm,Aro),e(Wm,cB),e(cB,Lro),e(Wm,yro),e(A,xro),e(A,Qm),e(Qm,Kle),e(Kle,$ro),e(Qm,kro),e(Qm,fB),e(fB,Sro),e(Qm,Rro),e(A,Pro),e(A,Um),e(Um,Zle),e(Zle,Bro),e(Um,Iro),e(Um,mB),e(mB,Nro),e(Um,qro),e(A,jro),e(A,Hm),e(Hm,eie),e(eie,Dro),e(Hm,Gro),e(Hm,gB),e(gB,Oro),e(Hm,Vro),e(A,Xro),e(A,Jm),e(Jm,oie),e(oie,zro),e(Jm,Wro),e(Jm,hB),e(hB,Qro),e(Jm,Uro),e(A,Hro),e(A,Ym),e(Ym,rie),e(rie,Jro),e(Ym,Yro),e(Ym,pB),e(pB,Kro),e(Ym,Zro),e(A,eto),e(A,Km),e(Km,tie),e(tie,oto),e(Km,rto),e(Km,_B),e(_B,tto),e(Km,ato),e(A,nto),e(A,Zm),e(Zm,aie),e(aie,sto),e(Zm,lto),e(Zm,uB),e(uB,ito),e(Zm,dto),e(A,cto),e(A,eg),e(eg,nie),e(nie,fto),e(eg,mto),e(eg,bB),e(bB,gto),e(eg,hto),e(A,pto),e(A,og),e(og,sie),e(sie,_to),e(og,uto),e(og,vB),e(vB,bto),e(og,vto),e(A,Fto),e(A,rg),e(rg,lie),e(lie,Tto),e(rg,Mto),e(rg,FB),e(FB,Eto),e(rg,Cto),e(A,wto),e(A,tg),e(tg,iie),e(iie,Ato),e(tg,Lto),e(tg,TB),e(TB,yto),e(tg,xto),e(A,$to),e(A,ag),e(ag,die),e(die,kto),e(ag,Sto),e(ag,MB),e(MB,Rto),e(ag,Pto),e(A,Bto),e(A,ng),e(ng,cie),e(cie,Ito),e(ng,Nto),e(ng,EB),e(EB,qto),e(ng,jto),e(A,Dto),e(A,sg),e(sg,fie),e(fie,Gto),e(sg,Oto),e(sg,CB),e(CB,Vto),e(sg,Xto),e(A,zto),e(A,lg),e(lg,mie),e(mie,Wto),e(lg,Qto),e(lg,wB),e(wB,Uto),e(lg,Hto),e(A,Jto),e(A,ig),e(ig,gie),e(gie,Yto),e(ig,Kto),e(ig,AB),e(AB,Zto),e(ig,eao),e(A,oao),e(A,dg),e(dg,hie),e(hie,rao),e(dg,tao),e(dg,LB),e(LB,aao),e(dg,nao),e(A,sao),e(A,cg),e(cg,pie),e(pie,lao),e(cg,iao),e(cg,yB),e(yB,dao),e(cg,cao),e(A,fao),e(A,fg),e(fg,_ie),e(_ie,mao),e(fg,gao),e(fg,xB),e(xB,hao),e(fg,pao),e(A,_ao),e(A,mg),e(mg,uie),e(uie,uao),e(mg,bao),e(mg,$B),e($B,vao),e(mg,Fao),e(A,Tao),e(A,gg),e(gg,bie),e(bie,Mao),e(gg,Eao),e(gg,kB),e(kB,Cao),e(gg,wao),e(A,Aao),e(A,hg),e(hg,vie),e(vie,Lao),e(hg,yao),e(hg,SB),e(SB,xao),e(hg,$ao),e(A,kao),e(A,pg),e(pg,Fie),e(Fie,Sao),e(pg,Rao),e(pg,RB),e(RB,Pao),e(pg,Bao),e(A,Iao),e(A,_g),e(_g,Tie),e(Tie,Nao),e(_g,qao),e(_g,PB),e(PB,jao),e(_g,Dao),e(A,Gao),e(A,ug),e(ug,Mie),e(Mie,Oao),e(ug,Vao),e(ug,BB),e(BB,Xao),e(ug,zao),e(A,Wao),e(A,bg),e(bg,Eie),e(Eie,Qao),e(bg,Uao),e(bg,IB),e(IB,Hao),e(bg,Jao),e(A,Yao),e(A,vg),e(vg,Cie),e(Cie,Kao),e(vg,Zao),e(vg,NB),e(NB,eno),e(vg,ono),e(A,rno),e(A,Fg),e(Fg,wie),e(wie,tno),e(Fg,ano),e(Fg,qB),e(qB,nno),e(Fg,sno),e(A,lno),e(A,Tg),e(Tg,Aie),e(Aie,ino),e(Tg,dno),e(Tg,jB),e(jB,cno),e(Tg,fno),e(A,mno),e(A,Mg),e(Mg,Lie),e(Lie,gno),e(Mg,hno),e(Mg,DB),e(DB,pno),e(Mg,_no),e(A,uno),e(A,Eg),e(Eg,yie),e(yie,bno),e(Eg,vno),e(Eg,GB),e(GB,Fno),e(Eg,Tno),e(A,Mno),e(A,Cg),e(Cg,xie),e(xie,Eno),e(Cg,Cno),e(Cg,OB),e(OB,wno),e(Cg,Ano),e(A,Lno),e(A,wg),e(wg,$ie),e($ie,yno),e(wg,xno),e(wg,VB),e(VB,$no),e(wg,kno),e(A,Sno),e(A,Ag),e(Ag,kie),e(kie,Rno),e(Ag,Pno),e(Ag,XB),e(XB,Bno),e(Ag,Ino),e(A,Nno),e(A,Lg),e(Lg,Sie),e(Sie,qno),e(Lg,jno),e(Lg,zB),e(zB,Dno),e(Lg,Gno),e(A,Ono),e(A,yg),e(yg,Rie),e(Rie,Vno),e(yg,Xno),e(yg,WB),e(WB,zno),e(yg,Wno),e(A,Qno),e(A,xg),e(xg,Pie),e(Pie,Uno),e(xg,Hno),e(xg,QB),e(QB,Jno),e(xg,Yno),e(A,Kno),e(A,$g),e($g,Bie),e(Bie,Zno),e($g,eso),e($g,UB),e(UB,oso),e($g,rso),e(A,tso),e(A,kg),e(kg,Iie),e(Iie,aso),e(kg,nso),e(kg,HB),e(HB,sso),e(kg,lso),e(A,iso),e(A,Sg),e(Sg,Nie),e(Nie,dso),e(Sg,cso),e(Sg,JB),e(JB,fso),e(Sg,mso),e(A,gso),e(A,Rg),e(Rg,qie),e(qie,hso),e(Rg,pso),e(Rg,YB),e(YB,_so),e(Rg,uso),e(A,bso),e(A,Pg),e(Pg,jie),e(jie,vso),e(Pg,Fso),e(Pg,KB),e(KB,Tso),e(Pg,Mso),e(A,Eso),e(A,Bg),e(Bg,Die),e(Die,Cso),e(Bg,wso),e(Bg,ZB),e(ZB,Aso),e(Bg,Lso),e(A,yso),e(A,Ig),e(Ig,Gie),e(Gie,xso),e(Ig,$so),e(Ig,eI),e(eI,kso),e(Ig,Sso),e(A,Rso),e(A,Ng),e(Ng,Oie),e(Oie,Pso),e(Ng,Bso),e(Ng,oI),e(oI,Iso),e(Ng,Nso),e(A,qso),e(A,qg),e(qg,Vie),e(Vie,jso),e(qg,Dso),e(qg,rI),e(rI,Gso),e(qg,Oso),e(A,Vso),e(A,jg),e(jg,Xie),e(Xie,Xso),e(jg,zso),e(jg,tI),e(tI,Wso),e(jg,Qso),e(A,Uso),e(A,Dg),e(Dg,zie),e(zie,Hso),e(Dg,Jso),e(Dg,aI),e(aI,Yso),e(Dg,Kso),e(A,Zso),e(A,Gg),e(Gg,Wie),e(Wie,elo),e(Gg,olo),e(Gg,nI),e(nI,rlo),e(Gg,tlo),e(A,alo),e(A,Og),e(Og,Qie),e(Qie,nlo),e(Og,slo),e(Og,sI),e(sI,llo),e(Og,ilo),e(A,dlo),e(A,Vg),e(Vg,Uie),e(Uie,clo),e(Vg,flo),e(Vg,lI),e(lI,mlo),e(Vg,glo),e(A,hlo),e(A,Xg),e(Xg,Hie),e(Hie,plo),e(Xg,_lo),e(Xg,iI),e(iI,ulo),e(Xg,blo),e(A,vlo),e(A,zg),e(zg,Jie),e(Jie,Flo),e(zg,Tlo),e(zg,dI),e(dI,Mlo),e(zg,Elo),e(A,Clo),e(A,Wg),e(Wg,Yie),e(Yie,wlo),e(Wg,Alo),e(Wg,cI),e(cI,Llo),e(Wg,ylo),e(A,xlo),e(A,Qg),e(Qg,Kie),e(Kie,$lo),e(Qg,klo),e(Qg,fI),e(fI,Slo),e(Qg,Rlo),e(A,Plo),e(A,Ug),e(Ug,Zie),e(Zie,Blo),e(Ug,Ilo),e(Ug,mI),e(mI,Nlo),e(Ug,qlo),e(A,jlo),e(A,Hg),e(Hg,ede),e(ede,Dlo),e(Hg,Glo),e(Hg,gI),e(gI,Olo),e(Hg,Vlo),e(A,Xlo),e(A,Jg),e(Jg,ode),e(ode,zlo),e(Jg,Wlo),e(Jg,hI),e(hI,Qlo),e(Jg,Ulo),e(A,Hlo),e(A,Yg),e(Yg,rde),e(rde,Jlo),e(Yg,Ylo),e(Yg,pI),e(pI,Klo),e(Yg,Zlo),e(A,eio),e(A,Kg),e(Kg,tde),e(tde,oio),e(Kg,rio),e(Kg,_I),e(_I,tio),e(Kg,aio),e(A,nio),e(A,Zg),e(Zg,ade),e(ade,sio),e(Zg,lio),e(Zg,uI),e(uI,iio),e(Zg,dio),e(A,cio),e(A,eh),e(eh,nde),e(nde,fio),e(eh,mio),e(eh,bI),e(bI,gio),e(eh,hio),e(A,pio),e(A,oh),e(oh,sde),e(sde,_io),e(oh,uio),e(oh,vI),e(vI,bio),e(oh,vio),e(A,Fio),e(A,rh),e(rh,lde),e(lde,Tio),e(rh,Mio),e(rh,FI),e(FI,Eio),e(rh,Cio),e(A,wio),e(A,th),e(th,ide),e(ide,Aio),e(th,Lio),e(th,TI),e(TI,yio),e(th,xio),e(A,$io),e(A,ah),e(ah,dde),e(dde,kio),e(ah,Sio),e(ah,MI),e(MI,Rio),e(ah,Pio),e(A,Bio),e(A,nh),e(nh,cde),e(cde,Iio),e(nh,Nio),e(nh,EI),e(EI,qio),e(nh,jio),e(A,Dio),e(A,sh),e(sh,fde),e(fde,Gio),e(sh,Oio),e(sh,CI),e(CI,Vio),e(sh,Xio),e(A,zio),e(A,lh),e(lh,mde),e(mde,Wio),e(lh,Qio),e(lh,wI),e(wI,Uio),e(lh,Hio),e(A,Jio),e(A,ih),e(ih,gde),e(gde,Yio),e(ih,Kio),e(ih,AI),e(AI,Zio),e(ih,edo),e(A,odo),e(A,dh),e(dh,hde),e(hde,rdo),e(dh,tdo),e(dh,LI),e(LI,ado),e(dh,ndo),e(A,sdo),e(A,ch),e(ch,pde),e(pde,ldo),e(ch,ido),e(ch,yI),e(yI,ddo),e(ch,cdo),e(A,fdo),e(A,fh),e(fh,_de),e(_de,mdo),e(fh,gdo),e(fh,xI),e(xI,hdo),e(fh,pdo),e(A,_do),e(A,mh),e(mh,ude),e(ude,udo),e(mh,bdo),e(mh,$I),e($I,vdo),e(mh,Fdo),e(A,Tdo),e(A,gh),e(gh,bde),e(bde,Mdo),e(gh,Edo),e(gh,kI),e(kI,Cdo),e(gh,wdo),e(A,Ado),e(A,hh),e(hh,vde),e(vde,Ldo),e(hh,ydo),e(hh,SI),e(SI,xdo),e(hh,$do),e(A,kdo),e(A,ph),e(ph,Fde),e(Fde,Sdo),e(ph,Rdo),e(ph,RI),e(RI,Pdo),e(ph,Bdo),e(A,Ido),e(A,_h),e(_h,Tde),e(Tde,Ndo),e(_h,qdo),e(_h,PI),e(PI,jdo),e(_h,Ddo),e(A,Gdo),e(A,uh),e(uh,Mde),e(Mde,Odo),e(uh,Vdo),e(uh,BI),e(BI,Xdo),e(uh,zdo),e(A,Wdo),e(A,bh),e(bh,Ede),e(Ede,Qdo),e(bh,Udo),e(bh,II),e(II,Hdo),e(bh,Jdo),e(A,Ydo),e(A,vh),e(vh,Cde),e(Cde,Kdo),e(vh,Zdo),e(vh,NI),e(NI,eco),e(vh,oco),e(A,rco),e(A,Fh),e(Fh,wde),e(wde,tco),e(Fh,aco),e(Fh,qI),e(qI,nco),e(Fh,sco),e(A,lco),e(A,Th),e(Th,Ade),e(Ade,ico),e(Th,dco),e(Th,jI),e(jI,cco),e(Th,fco),e(A,mco),e(A,Mh),e(Mh,Lde),e(Lde,gco),e(Mh,hco),e(Mh,DI),e(DI,pco),e(Mh,_co),e(A,uco),e(A,Eh),e(Eh,yde),e(yde,bco),e(Eh,vco),e(Eh,GI),e(GI,Fco),e(Eh,Tco),e(A,Mco),e(A,Ch),e(Ch,xde),e(xde,Eco),e(Ch,Cco),e(Ch,OI),e(OI,wco),e(Ch,Aco),e(A,Lco),e(A,wh),e(wh,$de),e($de,yco),e(wh,xco),e(wh,VI),e(VI,$co),e(wh,kco),e(A,Sco),e(A,Ah),e(Ah,kde),e(kde,Rco),e(Ah,Pco),e(Ah,XI),e(XI,Bco),e(Ah,Ico),e(A,Nco),e(A,Lh),e(Lh,Sde),e(Sde,qco),e(Lh,jco),e(Lh,zI),e(zI,Dco),e(Lh,Gco),e(A,Oco),e(A,yh),e(yh,Rde),e(Rde,Vco),e(yh,Xco),e(yh,WI),e(WI,zco),e(yh,Wco),e(A,Qco),e(A,xh),e(xh,Pde),e(Pde,Uco),e(xh,Hco),e(xh,QI),e(QI,Jco),e(xh,Yco),e(Rr,Kco),M($h,Rr,null),e(xo,Zco),e(xo,kh),M(qy,kh,null),e(kh,efo),e(kh,Bde),e(Bde,ofo),b(f,DUe,u),b(f,ad,u),e(ad,Sh),e(Sh,Ide),M(jy,Ide,null),e(ad,rfo),e(ad,Nde),e(Nde,tfo),b(f,GUe,u),b(f,$o,u),M(Dy,$o,null),e($o,afo),e($o,Gy),e(Gy,nfo),e(Gy,UI),e(UI,sfo),e(Gy,lfo),e($o,ifo),e($o,Oy),e(Oy,dfo),e(Oy,qde),e(qde,cfo),e(Oy,ffo),e($o,mfo),e($o,Pr),M(Vy,Pr,null),e(Pr,gfo),e(Pr,jde),e(jde,hfo),e(Pr,pfo),e(Pr,za),e(za,_fo),e(za,Dde),e(Dde,ufo),e(za,bfo),e(za,Gde),e(Gde,vfo),e(za,Ffo),e(za,Ode),e(Ode,Tfo),e(za,Mfo),e(Pr,Efo),e(Pr,k),e(k,es),e(es,Vde),e(Vde,Cfo),e(es,wfo),e(es,HI),e(HI,Afo),e(es,Lfo),e(es,JI),e(JI,yfo),e(es,xfo),e(k,$fo),e(k,os),e(os,Xde),e(Xde,kfo),e(os,Sfo),e(os,YI),e(YI,Rfo),e(os,Pfo),e(os,KI),e(KI,Bfo),e(os,Ifo),e(k,Nfo),e(k,rs),e(rs,zde),e(zde,qfo),e(rs,jfo),e(rs,ZI),e(ZI,Dfo),e(rs,Gfo),e(rs,eN),e(eN,Ofo),e(rs,Vfo),e(k,Xfo),e(k,Rh),e(Rh,Wde),e(Wde,zfo),e(Rh,Wfo),e(Rh,oN),e(oN,Qfo),e(Rh,Ufo),e(k,Hfo),e(k,ts),e(ts,Qde),e(Qde,Jfo),e(ts,Yfo),e(ts,rN),e(rN,Kfo),e(ts,Zfo),e(ts,tN),e(tN,emo),e(ts,omo),e(k,rmo),e(k,Ph),e(Ph,Ude),e(Ude,tmo),e(Ph,amo),e(Ph,aN),e(aN,nmo),e(Ph,smo),e(k,lmo),e(k,Bh),e(Bh,Hde),e(Hde,imo),e(Bh,dmo),e(Bh,nN),e(nN,cmo),e(Bh,fmo),e(k,mmo),e(k,Ih),e(Ih,Jde),e(Jde,gmo),e(Ih,hmo),e(Ih,sN),e(sN,pmo),e(Ih,_mo),e(k,umo),e(k,as),e(as,Yde),e(Yde,bmo),e(as,vmo),e(as,lN),e(lN,Fmo),e(as,Tmo),e(as,iN),e(iN,Mmo),e(as,Emo),e(k,Cmo),e(k,ns),e(ns,Kde),e(Kde,wmo),e(ns,Amo),e(ns,dN),e(dN,Lmo),e(ns,ymo),e(ns,cN),e(cN,xmo),e(ns,$mo),e(k,kmo),e(k,ss),e(ss,Zde),e(Zde,Smo),e(ss,Rmo),e(ss,fN),e(fN,Pmo),e(ss,Bmo),e(ss,mN),e(mN,Imo),e(ss,Nmo),e(k,qmo),e(k,Nh),e(Nh,ece),e(ece,jmo),e(Nh,Dmo),e(Nh,gN),e(gN,Gmo),e(Nh,Omo),e(k,Vmo),e(k,qh),e(qh,oce),e(oce,Xmo),e(qh,zmo),e(qh,hN),e(hN,Wmo),e(qh,Qmo),e(k,Umo),e(k,jh),e(jh,rce),e(rce,Hmo),e(jh,Jmo),e(jh,pN),e(pN,Ymo),e(jh,Kmo),e(k,Zmo),e(k,ls),e(ls,tce),e(tce,ego),e(ls,ogo),e(ls,_N),e(_N,rgo),e(ls,tgo),e(ls,uN),e(uN,ago),e(ls,ngo),e(k,sgo),e(k,Dh),e(Dh,ace),e(ace,lgo),e(Dh,igo),e(Dh,bN),e(bN,dgo),e(Dh,cgo),e(k,fgo),e(k,is),e(is,nce),e(nce,mgo),e(is,ggo),e(is,vN),e(vN,hgo),e(is,pgo),e(is,FN),e(FN,_go),e(is,ugo),e(k,bgo),e(k,ds),e(ds,sce),e(sce,vgo),e(ds,Fgo),e(ds,TN),e(TN,Tgo),e(ds,Mgo),e(ds,MN),e(MN,Ego),e(ds,Cgo),e(k,wgo),e(k,cs),e(cs,lce),e(lce,Ago),e(cs,Lgo),e(cs,EN),e(EN,ygo),e(cs,xgo),e(cs,CN),e(CN,$go),e(cs,kgo),e(k,Sgo),e(k,fs),e(fs,ice),e(ice,Rgo),e(fs,Pgo),e(fs,wN),e(wN,Bgo),e(fs,Igo),e(fs,AN),e(AN,Ngo),e(fs,qgo),e(k,jgo),e(k,Gh),e(Gh,dce),e(dce,Dgo),e(Gh,Ggo),e(Gh,LN),e(LN,Ogo),e(Gh,Vgo),e(k,Xgo),e(k,ms),e(ms,cce),e(cce,zgo),e(ms,Wgo),e(ms,yN),e(yN,Qgo),e(ms,Ugo),e(ms,xN),e(xN,Hgo),e(ms,Jgo),e(k,Ygo),e(k,gs),e(gs,fce),e(fce,Kgo),e(gs,Zgo),e(gs,$N),e($N,eho),e(gs,oho),e(gs,kN),e(kN,rho),e(gs,tho),e(k,aho),e(k,hs),e(hs,mce),e(mce,nho),e(hs,sho),e(hs,SN),e(SN,lho),e(hs,iho),e(hs,RN),e(RN,dho),e(hs,cho),e(k,fho),e(k,ps),e(ps,gce),e(gce,mho),e(ps,gho),e(ps,PN),e(PN,hho),e(ps,pho),e(ps,BN),e(BN,_ho),e(ps,uho),e(k,bho),e(k,_s),e(_s,hce),e(hce,vho),e(_s,Fho),e(_s,IN),e(IN,Tho),e(_s,Mho),e(_s,NN),e(NN,Eho),e(_s,Cho),e(k,who),e(k,us),e(us,pce),e(pce,Aho),e(us,Lho),e(us,qN),e(qN,yho),e(us,xho),e(us,jN),e(jN,$ho),e(us,kho),e(k,Sho),e(k,Oh),e(Oh,_ce),e(_ce,Rho),e(Oh,Pho),e(Oh,DN),e(DN,Bho),e(Oh,Iho),e(k,Nho),e(k,bs),e(bs,uce),e(uce,qho),e(bs,jho),e(bs,GN),e(GN,Dho),e(bs,Gho),e(bs,ON),e(ON,Oho),e(bs,Vho),e(k,Xho),e(k,Vh),e(Vh,bce),e(bce,zho),e(Vh,Who),e(Vh,VN),e(VN,Qho),e(Vh,Uho),e(k,Hho),e(k,vs),e(vs,vce),e(vce,Jho),e(vs,Yho),e(vs,XN),e(XN,Kho),e(vs,Zho),e(vs,zN),e(zN,epo),e(vs,opo),e(k,rpo),e(k,Fs),e(Fs,Fce),e(Fce,tpo),e(Fs,apo),e(Fs,WN),e(WN,npo),e(Fs,spo),e(Fs,QN),e(QN,lpo),e(Fs,ipo),e(k,dpo),e(k,Ts),e(Ts,Tce),e(Tce,cpo),e(Ts,fpo),e(Ts,UN),e(UN,mpo),e(Ts,gpo),e(Ts,HN),e(HN,hpo),e(Ts,ppo),e(k,_po),e(k,Xh),e(Xh,Mce),e(Mce,upo),e(Xh,bpo),e(Xh,JN),e(JN,vpo),e(Xh,Fpo),e(k,Tpo),e(k,Ms),e(Ms,Ece),e(Ece,Mpo),e(Ms,Epo),e(Ms,YN),e(YN,Cpo),e(Ms,wpo),e(Ms,KN),e(KN,Apo),e(Ms,Lpo),e(k,ypo),e(k,Es),e(Es,Cce),e(Cce,xpo),e(Es,$po),e(Es,ZN),e(ZN,kpo),e(Es,Spo),e(Es,eq),e(eq,Rpo),e(Es,Ppo),e(k,Bpo),e(k,Cs),e(Cs,wce),e(wce,Ipo),e(Cs,Npo),e(Cs,oq),e(oq,qpo),e(Cs,jpo),e(Cs,rq),e(rq,Dpo),e(Cs,Gpo),e(k,Opo),e(k,zh),e(zh,Ace),e(Ace,Vpo),e(zh,Xpo),e(zh,tq),e(tq,zpo),e(zh,Wpo),e(k,Qpo),e(k,ws),e(ws,Lce),e(Lce,Upo),e(ws,Hpo),e(ws,aq),e(aq,Jpo),e(ws,Ypo),e(ws,nq),e(nq,Kpo),e(ws,Zpo),e(k,e_o),e(k,As),e(As,yce),e(yce,o_o),e(As,r_o),e(As,sq),e(sq,t_o),e(As,a_o),e(As,lq),e(lq,n_o),e(As,s_o),e(k,l_o),e(k,Ls),e(Ls,xce),e(xce,i_o),e(Ls,d_o),e(Ls,iq),e(iq,c_o),e(Ls,f_o),e(Ls,dq),e(dq,m_o),e(Ls,g_o),e(k,h_o),e(k,ys),e(ys,$ce),e($ce,p_o),e(ys,__o),e(ys,cq),e(cq,u_o),e(ys,b_o),e(ys,fq),e(fq,v_o),e(ys,F_o),e(k,T_o),e(k,xs),e(xs,kce),e(kce,M_o),e(xs,E_o),e(xs,mq),e(mq,C_o),e(xs,w_o),e(xs,gq),e(gq,A_o),e(xs,L_o),e(k,y_o),e(k,$s),e($s,Sce),e(Sce,x_o),e($s,$_o),e($s,hq),e(hq,k_o),e($s,S_o),e($s,pq),e(pq,R_o),e($s,P_o),e(k,B_o),e(k,ks),e(ks,Rce),e(Rce,I_o),e(ks,N_o),e(ks,_q),e(_q,q_o),e(ks,j_o),e(ks,uq),e(uq,D_o),e(ks,G_o),e(k,O_o),e(k,Ss),e(Ss,Pce),e(Pce,V_o),e(Ss,X_o),e(Ss,bq),e(bq,z_o),e(Ss,W_o),e(Ss,vq),e(vq,Q_o),e(Ss,U_o),e(k,H_o),e(k,Wh),e(Wh,Bce),e(Bce,J_o),e(Wh,Y_o),e(Wh,Fq),e(Fq,K_o),e(Wh,Z_o),e(k,euo),e(k,Rs),e(Rs,Ice),e(Ice,ouo),e(Rs,ruo),e(Rs,Tq),e(Tq,tuo),e(Rs,auo),e(Rs,Mq),e(Mq,nuo),e(Rs,suo),e(k,luo),e(k,Qh),e(Qh,Nce),e(Nce,iuo),e(Qh,duo),e(Qh,Eq),e(Eq,cuo),e(Qh,fuo),e(k,muo),e(k,Uh),e(Uh,qce),e(qce,guo),e(Uh,huo),e(Uh,Cq),e(Cq,puo),e(Uh,_uo),e(k,uuo),e(k,Ps),e(Ps,jce),e(jce,buo),e(Ps,vuo),e(Ps,wq),e(wq,Fuo),e(Ps,Tuo),e(Ps,Aq),e(Aq,Muo),e(Ps,Euo),e(k,Cuo),e(k,Bs),e(Bs,Dce),e(Dce,wuo),e(Bs,Auo),e(Bs,Lq),e(Lq,Luo),e(Bs,yuo),e(Bs,yq),e(yq,xuo),e(Bs,$uo),e(k,kuo),e(k,Is),e(Is,Gce),e(Gce,Suo),e(Is,Ruo),e(Is,xq),e(xq,Puo),e(Is,Buo),e(Is,$q),e($q,Iuo),e(Is,Nuo),e(k,quo),e(k,Hh),e(Hh,Oce),e(Oce,juo),e(Hh,Duo),e(Hh,kq),e(kq,Guo),e(Hh,Ouo),e(k,Vuo),e(k,Ns),e(Ns,Vce),e(Vce,Xuo),e(Ns,zuo),e(Ns,Sq),e(Sq,Wuo),e(Ns,Quo),e(Ns,Rq),e(Rq,Uuo),e(Ns,Huo),e(k,Juo),e(k,qs),e(qs,Xce),e(Xce,Yuo),e(qs,Kuo),e(qs,Pq),e(Pq,Zuo),e(qs,e1o),e(qs,Bq),e(Bq,o1o),e(qs,r1o),e(k,t1o),e(k,js),e(js,zce),e(zce,a1o),e(js,n1o),e(js,Iq),e(Iq,s1o),e(js,l1o),e(js,Nq),e(Nq,i1o),e(js,d1o),e(k,c1o),e(k,Ds),e(Ds,Wce),e(Wce,f1o),e(Ds,m1o),e(Ds,qq),e(qq,g1o),e(Ds,h1o),e(Ds,jq),e(jq,p1o),e(Ds,_1o),e(k,u1o),e(k,Gs),e(Gs,Qce),e(Qce,b1o),e(Gs,v1o),e(Gs,Dq),e(Dq,F1o),e(Gs,T1o),e(Gs,Gq),e(Gq,M1o),e(Gs,E1o),e(k,C1o),e(k,Os),e(Os,Uce),e(Uce,w1o),e(Os,A1o),e(Os,Oq),e(Oq,L1o),e(Os,y1o),e(Os,Vq),e(Vq,x1o),e(Os,$1o),e(k,k1o),e(k,Vs),e(Vs,Hce),e(Hce,S1o),e(Vs,R1o),e(Vs,Xq),e(Xq,P1o),e(Vs,B1o),e(Vs,zq),e(zq,I1o),e(Vs,N1o),e(k,q1o),e(k,Xs),e(Xs,Jce),e(Jce,j1o),e(Xs,D1o),e(Xs,Wq),e(Wq,G1o),e(Xs,O1o),e(Xs,Qq),e(Qq,V1o),e(Xs,X1o),e(k,z1o),e(k,Jh),e(Jh,Yce),e(Yce,W1o),e(Jh,Q1o),e(Jh,Uq),e(Uq,U1o),e(Jh,H1o),e(k,J1o),e(k,zs),e(zs,Kce),e(Kce,Y1o),e(zs,K1o),e(zs,Hq),e(Hq,Z1o),e(zs,e8o),e(zs,Jq),e(Jq,o8o),e(zs,r8o),e(k,t8o),e(k,Ws),e(Ws,Zce),e(Zce,a8o),e(Ws,n8o),e(Ws,Yq),e(Yq,s8o),e(Ws,l8o),e(Ws,Kq),e(Kq,i8o),e(Ws,d8o),e(k,c8o),e(k,Yh),e(Yh,efe),e(efe,f8o),e(Yh,m8o),e(Yh,Zq),e(Zq,g8o),e(Yh,h8o),e(k,p8o),e(k,Kh),e(Kh,ofe),e(ofe,_8o),e(Kh,u8o),e(Kh,ej),e(ej,b8o),e(Kh,v8o),e(k,F8o),e(k,Zh),e(Zh,rfe),e(rfe,T8o),e(Zh,M8o),e(Zh,oj),e(oj,E8o),e(Zh,C8o),e(k,w8o),e(k,ep),e(ep,tfe),e(tfe,A8o),e(ep,L8o),e(ep,rj),e(rj,y8o),e(ep,x8o),e(k,$8o),e(k,Qs),e(Qs,afe),e(afe,k8o),e(Qs,S8o),e(Qs,tj),e(tj,R8o),e(Qs,P8o),e(Qs,aj),e(aj,B8o),e(Qs,I8o),e(k,N8o),e(k,op),e(op,nfe),e(nfe,q8o),e(op,j8o),e(op,nj),e(nj,D8o),e(op,G8o),e(k,O8o),e(k,Us),e(Us,sfe),e(sfe,V8o),e(Us,X8o),e(Us,sj),e(sj,z8o),e(Us,W8o),e(Us,lj),e(lj,Q8o),e(Us,U8o),e(k,H8o),e(k,Hs),e(Hs,lfe),e(lfe,J8o),e(Hs,Y8o),e(Hs,ij),e(ij,K8o),e(Hs,Z8o),e(Hs,dj),e(dj,ebo),e(Hs,obo),e(k,rbo),e(k,Js),e(Js,ife),e(ife,tbo),e(Js,abo),e(Js,cj),e(cj,nbo),e(Js,sbo),e(Js,fj),e(fj,lbo),e(Js,ibo),e(k,dbo),e(k,Ys),e(Ys,dfe),e(dfe,cbo),e(Ys,fbo),e(Ys,mj),e(mj,mbo),e(Ys,gbo),e(Ys,gj),e(gj,hbo),e(Ys,pbo),e(k,_bo),e(k,Ks),e(Ks,cfe),e(cfe,ubo),e(Ks,bbo),e(Ks,hj),e(hj,vbo),e(Ks,Fbo),e(Ks,pj),e(pj,Tbo),e(Ks,Mbo),e(k,Ebo),e(k,Zs),e(Zs,ffe),e(ffe,Cbo),e(Zs,wbo),e(Zs,_j),e(_j,Abo),e(Zs,Lbo),e(Zs,uj),e(uj,ybo),e(Zs,xbo),e(k,$bo),e(k,rp),e(rp,mfe),e(mfe,kbo),e(rp,Sbo),e(rp,bj),e(bj,Rbo),e(rp,Pbo),e(k,Bbo),e(k,tp),e(tp,gfe),e(gfe,Ibo),e(tp,Nbo),e(tp,vj),e(vj,qbo),e(tp,jbo),e(k,Dbo),e(k,el),e(el,hfe),e(hfe,Gbo),e(el,Obo),e(el,Fj),e(Fj,Vbo),e(el,Xbo),e(el,Tj),e(Tj,zbo),e(el,Wbo),e(k,Qbo),e(k,ol),e(ol,pfe),e(pfe,Ubo),e(ol,Hbo),e(ol,Mj),e(Mj,Jbo),e(ol,Ybo),e(ol,Ej),e(Ej,Kbo),e(ol,Zbo),e(k,e2o),e(k,rl),e(rl,_fe),e(_fe,o2o),e(rl,r2o),e(rl,Cj),e(Cj,t2o),e(rl,a2o),e(rl,wj),e(wj,n2o),e(rl,s2o),e(k,l2o),e(k,ap),e(ap,ufe),e(ufe,i2o),e(ap,d2o),e(ap,Aj),e(Aj,c2o),e(ap,f2o),e(k,m2o),e(k,np),e(np,bfe),e(bfe,g2o),e(np,h2o),e(np,Lj),e(Lj,p2o),e(np,_2o),e(k,u2o),e(k,sp),e(sp,vfe),e(vfe,b2o),e(sp,v2o),e(sp,yj),e(yj,F2o),e(sp,T2o),e(k,M2o),e(k,tl),e(tl,Ffe),e(Ffe,E2o),e(tl,C2o),e(tl,xj),e(xj,w2o),e(tl,A2o),e(tl,$j),e($j,L2o),e(tl,y2o),e(k,x2o),e(k,al),e(al,Tfe),e(Tfe,$2o),e(al,k2o),e(al,kj),e(kj,S2o),e(al,R2o),e(al,Sj),e(Sj,P2o),e(al,B2o),e(k,I2o),e(k,lp),e(lp,Mfe),e(Mfe,N2o),e(lp,q2o),e(lp,Rj),e(Rj,j2o),e(lp,D2o),e(k,G2o),e(k,ip),e(ip,Efe),e(Efe,O2o),e(ip,V2o),e(ip,Pj),e(Pj,X2o),e(ip,z2o),e(k,W2o),e(k,dp),e(dp,Cfe),e(Cfe,Q2o),e(dp,U2o),e(dp,Bj),e(Bj,H2o),e(dp,J2o),e(k,Y2o),e(k,nl),e(nl,wfe),e(wfe,K2o),e(nl,Z2o),e(nl,Ij),e(Ij,evo),e(nl,ovo),e(nl,Nj),e(Nj,rvo),e(nl,tvo),e(k,avo),e(k,cp),e(cp,Afe),e(Afe,nvo),e(cp,svo),e(cp,qj),e(qj,lvo),e(cp,ivo),e(k,dvo),e(k,fp),e(fp,Lfe),e(Lfe,cvo),e(fp,fvo),e(fp,jj),e(jj,mvo),e(fp,gvo),e(k,hvo),e(k,sl),e(sl,yfe),e(yfe,pvo),e(sl,_vo),e(sl,Dj),e(Dj,uvo),e(sl,bvo),e(sl,Gj),e(Gj,vvo),e(sl,Fvo),e(k,Tvo),e(k,ll),e(ll,xfe),e(xfe,Mvo),e(ll,Evo),e(ll,Oj),e(Oj,Cvo),e(ll,wvo),e(ll,Vj),e(Vj,Avo),e(ll,Lvo),e(k,yvo),e(k,il),e(il,$fe),e($fe,xvo),e(il,$vo),e(il,Xj),e(Xj,kvo),e(il,Svo),e(il,zj),e(zj,Rvo),e(il,Pvo),e(k,Bvo),e(k,dl),e(dl,kfe),e(kfe,Ivo),e(dl,Nvo),e(dl,Wj),e(Wj,qvo),e(dl,jvo),e(dl,Qj),e(Qj,Dvo),e(dl,Gvo),e(Pr,Ovo),M(mp,Pr,null),e($o,Vvo),e($o,gp),M(Xy,gp,null),e(gp,Xvo),e(gp,Sfe),e(Sfe,zvo),b(f,OUe,u),b(f,nd,u),e(nd,hp),e(hp,Rfe),M(zy,Rfe,null),e(nd,Wvo),e(nd,Pfe),e(Pfe,Qvo),b(f,VUe,u),b(f,ko,u),M(Wy,ko,null),e(ko,Uvo),e(ko,Qy),e(Qy,Hvo),e(Qy,Uj),e(Uj,Jvo),e(Qy,Yvo),e(ko,Kvo),e(ko,Uy),e(Uy,Zvo),e(Uy,Bfe),e(Bfe,e6o),e(Uy,o6o),e(ko,r6o),e(ko,He),M(Hy,He,null),e(He,t6o),e(He,Ife),e(Ife,a6o),e(He,n6o),e(He,Wa),e(Wa,s6o),e(Wa,Nfe),e(Nfe,l6o),e(Wa,i6o),e(Wa,qfe),e(qfe,d6o),e(Wa,c6o),e(Wa,jfe),e(jfe,f6o),e(Wa,m6o),e(He,g6o),e(He,Q),e(Q,pp),e(pp,Dfe),e(Dfe,h6o),e(pp,p6o),e(pp,Hj),e(Hj,_6o),e(pp,u6o),e(Q,b6o),e(Q,_p),e(_p,Gfe),e(Gfe,v6o),e(_p,F6o),e(_p,Jj),e(Jj,T6o),e(_p,M6o),e(Q,E6o),e(Q,up),e(up,Ofe),e(Ofe,C6o),e(up,w6o),e(up,Yj),e(Yj,A6o),e(up,L6o),e(Q,y6o),e(Q,bp),e(bp,Vfe),e(Vfe,x6o),e(bp,$6o),e(bp,Kj),e(Kj,k6o),e(bp,S6o),e(Q,R6o),e(Q,vp),e(vp,Xfe),e(Xfe,P6o),e(vp,B6o),e(vp,Zj),e(Zj,I6o),e(vp,N6o),e(Q,q6o),e(Q,Fp),e(Fp,zfe),e(zfe,j6o),e(Fp,D6o),e(Fp,eD),e(eD,G6o),e(Fp,O6o),e(Q,V6o),e(Q,Tp),e(Tp,Wfe),e(Wfe,X6o),e(Tp,z6o),e(Tp,oD),e(oD,W6o),e(Tp,Q6o),e(Q,U6o),e(Q,Mp),e(Mp,Qfe),e(Qfe,H6o),e(Mp,J6o),e(Mp,rD),e(rD,Y6o),e(Mp,K6o),e(Q,Z6o),e(Q,Ep),e(Ep,Ufe),e(Ufe,eFo),e(Ep,oFo),e(Ep,tD),e(tD,rFo),e(Ep,tFo),e(Q,aFo),e(Q,Cp),e(Cp,Hfe),e(Hfe,nFo),e(Cp,sFo),e(Cp,aD),e(aD,lFo),e(Cp,iFo),e(Q,dFo),e(Q,wp),e(wp,Jfe),e(Jfe,cFo),e(wp,fFo),e(wp,nD),e(nD,mFo),e(wp,gFo),e(Q,hFo),e(Q,Ap),e(Ap,Yfe),e(Yfe,pFo),e(Ap,_Fo),e(Ap,sD),e(sD,uFo),e(Ap,bFo),e(Q,vFo),e(Q,Lp),e(Lp,Kfe),e(Kfe,FFo),e(Lp,TFo),e(Lp,lD),e(lD,MFo),e(Lp,EFo),e(Q,CFo),e(Q,yp),e(yp,Zfe),e(Zfe,wFo),e(yp,AFo),e(yp,iD),e(iD,LFo),e(yp,yFo),e(Q,xFo),e(Q,xp),e(xp,eme),e(eme,$Fo),e(xp,kFo),e(xp,dD),e(dD,SFo),e(xp,RFo),e(Q,PFo),e(Q,$p),e($p,ome),e(ome,BFo),e($p,IFo),e($p,cD),e(cD,NFo),e($p,qFo),e(Q,jFo),e(Q,kp),e(kp,rme),e(rme,DFo),e(kp,GFo),e(kp,fD),e(fD,OFo),e(kp,VFo),e(Q,XFo),e(Q,Sp),e(Sp,tme),e(tme,zFo),e(Sp,WFo),e(Sp,mD),e(mD,QFo),e(Sp,UFo),e(Q,HFo),e(Q,Rp),e(Rp,ame),e(ame,JFo),e(Rp,YFo),e(Rp,gD),e(gD,KFo),e(Rp,ZFo),e(Q,eTo),e(Q,Pp),e(Pp,nme),e(nme,oTo),e(Pp,rTo),e(Pp,hD),e(hD,tTo),e(Pp,aTo),e(Q,nTo),e(Q,Bp),e(Bp,sme),e(sme,sTo),e(Bp,lTo),e(Bp,pD),e(pD,iTo),e(Bp,dTo),e(Q,cTo),e(Q,Ip),e(Ip,lme),e(lme,fTo),e(Ip,mTo),e(Ip,_D),e(_D,gTo),e(Ip,hTo),e(Q,pTo),e(Q,Np),e(Np,ime),e(ime,_To),e(Np,uTo),e(Np,uD),e(uD,bTo),e(Np,vTo),e(Q,FTo),e(Q,qp),e(qp,dme),e(dme,TTo),e(qp,MTo),e(qp,bD),e(bD,ETo),e(qp,CTo),e(Q,wTo),e(Q,jp),e(jp,cme),e(cme,ATo),e(jp,LTo),e(jp,vD),e(vD,yTo),e(jp,xTo),e(Q,$To),e(Q,Dp),e(Dp,fme),e(fme,kTo),e(Dp,STo),e(Dp,FD),e(FD,RTo),e(Dp,PTo),e(Q,BTo),e(Q,Gp),e(Gp,mme),e(mme,ITo),e(Gp,NTo),e(Gp,TD),e(TD,qTo),e(Gp,jTo),e(Q,DTo),e(Q,Op),e(Op,gme),e(gme,GTo),e(Op,OTo),e(Op,MD),e(MD,VTo),e(Op,XTo),e(Q,zTo),e(Q,Vp),e(Vp,hme),e(hme,WTo),e(Vp,QTo),e(Vp,ED),e(ED,UTo),e(Vp,HTo),e(Q,JTo),e(Q,Xp),e(Xp,pme),e(pme,YTo),e(Xp,KTo),e(Xp,CD),e(CD,ZTo),e(Xp,eMo),e(Q,oMo),e(Q,zp),e(zp,_me),e(_me,rMo),e(zp,tMo),e(zp,wD),e(wD,aMo),e(zp,nMo),e(Q,sMo),e(Q,Wp),e(Wp,ume),e(ume,lMo),e(Wp,iMo),e(Wp,AD),e(AD,dMo),e(Wp,cMo),e(Q,fMo),e(Q,Qp),e(Qp,bme),e(bme,mMo),e(Qp,gMo),e(Qp,LD),e(LD,hMo),e(Qp,pMo),e(Q,_Mo),e(Q,Up),e(Up,vme),e(vme,uMo),e(Up,bMo),e(Up,yD),e(yD,vMo),e(Up,FMo),e(Q,TMo),e(Q,Hp),e(Hp,Fme),e(Fme,MMo),e(Hp,EMo),e(Hp,xD),e(xD,CMo),e(Hp,wMo),e(Q,AMo),e(Q,Jp),e(Jp,Tme),e(Tme,LMo),e(Jp,yMo),e(Jp,$D),e($D,xMo),e(Jp,$Mo),e(Q,kMo),e(Q,Yp),e(Yp,Mme),e(Mme,SMo),e(Yp,RMo),e(Yp,kD),e(kD,PMo),e(Yp,BMo),e(Q,IMo),e(Q,Kp),e(Kp,Eme),e(Eme,NMo),e(Kp,qMo),e(Kp,SD),e(SD,jMo),e(Kp,DMo),e(He,GMo),M(Zp,He,null),e(He,OMo),M(e_,He,null),e(ko,VMo),e(ko,o_),M(Jy,o_,null),e(o_,XMo),e(o_,Cme),e(Cme,zMo),b(f,XUe,u),b(f,sd,u),e(sd,r_),e(r_,wme),M(Yy,wme,null),e(sd,WMo),e(sd,Ame),e(Ame,QMo),b(f,zUe,u),b(f,So,u),M(Ky,So,null),e(So,UMo),e(So,Zy),e(Zy,HMo),e(Zy,RD),e(RD,JMo),e(Zy,YMo),e(So,KMo),e(So,e9),e(e9,ZMo),e(e9,Lme),e(Lme,eEo),e(e9,oEo),e(So,rEo),e(So,Je),M(o9,Je,null),e(Je,tEo),e(Je,yme),e(yme,aEo),e(Je,nEo),e(Je,ld),e(ld,sEo),e(ld,xme),e(xme,lEo),e(ld,iEo),e(ld,$me),e($me,dEo),e(ld,cEo),e(Je,fEo),e(Je,ie),e(ie,t_),e(t_,kme),e(kme,mEo),e(t_,gEo),e(t_,PD),e(PD,hEo),e(t_,pEo),e(ie,_Eo),e(ie,a_),e(a_,Sme),e(Sme,uEo),e(a_,bEo),e(a_,BD),e(BD,vEo),e(a_,FEo),e(ie,TEo),e(ie,n_),e(n_,Rme),e(Rme,MEo),e(n_,EEo),e(n_,ID),e(ID,CEo),e(n_,wEo),e(ie,AEo),e(ie,s_),e(s_,Pme),e(Pme,LEo),e(s_,yEo),e(s_,ND),e(ND,xEo),e(s_,$Eo),e(ie,kEo),e(ie,l_),e(l_,Bme),e(Bme,SEo),e(l_,REo),e(l_,qD),e(qD,PEo),e(l_,BEo),e(ie,IEo),e(ie,i_),e(i_,Ime),e(Ime,NEo),e(i_,qEo),e(i_,jD),e(jD,jEo),e(i_,DEo),e(ie,GEo),e(ie,d_),e(d_,Nme),e(Nme,OEo),e(d_,VEo),e(d_,DD),e(DD,XEo),e(d_,zEo),e(ie,WEo),e(ie,c_),e(c_,qme),e(qme,QEo),e(c_,UEo),e(c_,GD),e(GD,HEo),e(c_,JEo),e(ie,YEo),e(ie,f_),e(f_,jme),e(jme,KEo),e(f_,ZEo),e(f_,OD),e(OD,e4o),e(f_,o4o),e(ie,r4o),e(ie,m_),e(m_,Dme),e(Dme,t4o),e(m_,a4o),e(m_,VD),e(VD,n4o),e(m_,s4o),e(ie,l4o),e(ie,g_),e(g_,Gme),e(Gme,i4o),e(g_,d4o),e(g_,XD),e(XD,c4o),e(g_,f4o),e(ie,m4o),e(ie,h_),e(h_,Ome),e(Ome,g4o),e(h_,h4o),e(h_,zD),e(zD,p4o),e(h_,_4o),e(ie,u4o),e(ie,p_),e(p_,Vme),e(Vme,b4o),e(p_,v4o),e(p_,WD),e(WD,F4o),e(p_,T4o),e(ie,M4o),e(ie,__),e(__,Xme),e(Xme,E4o),e(__,C4o),e(__,QD),e(QD,w4o),e(__,A4o),e(ie,L4o),e(ie,u_),e(u_,zme),e(zme,y4o),e(u_,x4o),e(u_,UD),e(UD,$4o),e(u_,k4o),e(ie,S4o),e(ie,b_),e(b_,Wme),e(Wme,R4o),e(b_,P4o),e(b_,HD),e(HD,B4o),e(b_,I4o),e(ie,N4o),e(ie,v_),e(v_,Qme),e(Qme,q4o),e(v_,j4o),e(v_,JD),e(JD,D4o),e(v_,G4o),e(ie,O4o),e(ie,F_),e(F_,Ume),e(Ume,V4o),e(F_,X4o),e(F_,YD),e(YD,z4o),e(F_,W4o),e(ie,Q4o),e(ie,T_),e(T_,Hme),e(Hme,U4o),e(T_,H4o),e(T_,KD),e(KD,J4o),e(T_,Y4o),e(ie,K4o),e(ie,M_),e(M_,Jme),e(Jme,Z4o),e(M_,eCo),e(M_,ZD),e(ZD,oCo),e(M_,rCo),e(Je,tCo),M(E_,Je,null),e(Je,aCo),M(C_,Je,null),e(So,nCo),e(So,w_),M(r9,w_,null),e(w_,sCo),e(w_,Yme),e(Yme,lCo),b(f,WUe,u),b(f,id,u),e(id,A_),e(A_,Kme),M(t9,Kme,null),e(id,iCo),e(id,Zme),e(Zme,dCo),b(f,QUe,u),b(f,Ro,u),M(a9,Ro,null),e(Ro,cCo),e(Ro,dd),e(dd,fCo),e(dd,eG),e(eG,mCo),e(dd,gCo),e(dd,oG),e(oG,hCo),e(dd,pCo),e(Ro,_Co),e(Ro,n9),e(n9,uCo),e(n9,ege),e(ege,bCo),e(n9,vCo),e(Ro,FCo),e(Ro,ht),M(s9,ht,null),e(ht,TCo),e(ht,oge),e(oge,MCo),e(ht,ECo),e(ht,cd),e(cd,CCo),e(cd,rge),e(rge,wCo),e(cd,ACo),e(cd,rG),e(rG,LCo),e(cd,yCo),e(ht,xCo),M(L_,ht,null),e(Ro,$Co),e(Ro,Ye),M(l9,Ye,null),e(Ye,kCo),e(Ye,tge),e(tge,SCo),e(Ye,RCo),e(Ye,Qa),e(Qa,PCo),e(Qa,age),e(age,BCo),e(Qa,ICo),e(Qa,nge),e(nge,NCo),e(Qa,qCo),e(Qa,sge),e(sge,jCo),e(Qa,DCo),e(Ye,GCo),e(Ye,y),e(y,y_),e(y_,lge),e(lge,OCo),e(y_,VCo),e(y_,tG),e(tG,XCo),e(y_,zCo),e(y,WCo),e(y,x_),e(x_,ige),e(ige,QCo),e(x_,UCo),e(x_,aG),e(aG,HCo),e(x_,JCo),e(y,YCo),e(y,$_),e($_,dge),e(dge,KCo),e($_,ZCo),e($_,nG),e(nG,e3o),e($_,o3o),e(y,r3o),e(y,k_),e(k_,cge),e(cge,t3o),e(k_,a3o),e(k_,sG),e(sG,n3o),e(k_,s3o),e(y,l3o),e(y,S_),e(S_,fge),e(fge,i3o),e(S_,d3o),e(S_,lG),e(lG,c3o),e(S_,f3o),e(y,m3o),e(y,R_),e(R_,mge),e(mge,g3o),e(R_,h3o),e(R_,iG),e(iG,p3o),e(R_,_3o),e(y,u3o),e(y,P_),e(P_,gge),e(gge,b3o),e(P_,v3o),e(P_,dG),e(dG,F3o),e(P_,T3o),e(y,M3o),e(y,B_),e(B_,hge),e(hge,E3o),e(B_,C3o),e(B_,cG),e(cG,w3o),e(B_,A3o),e(y,L3o),e(y,I_),e(I_,pge),e(pge,y3o),e(I_,x3o),e(I_,fG),e(fG,$3o),e(I_,k3o),e(y,S3o),e(y,N_),e(N_,_ge),e(_ge,R3o),e(N_,P3o),e(N_,mG),e(mG,B3o),e(N_,I3o),e(y,N3o),e(y,q_),e(q_,uge),e(uge,q3o),e(q_,j3o),e(q_,gG),e(gG,D3o),e(q_,G3o),e(y,O3o),e(y,j_),e(j_,bge),e(bge,V3o),e(j_,X3o),e(j_,hG),e(hG,z3o),e(j_,W3o),e(y,Q3o),e(y,D_),e(D_,vge),e(vge,U3o),e(D_,H3o),e(D_,pG),e(pG,J3o),e(D_,Y3o),e(y,K3o),e(y,G_),e(G_,Fge),e(Fge,Z3o),e(G_,e5o),e(G_,_G),e(_G,o5o),e(G_,r5o),e(y,t5o),e(y,O_),e(O_,Tge),e(Tge,a5o),e(O_,n5o),e(O_,uG),e(uG,s5o),e(O_,l5o),e(y,i5o),e(y,V_),e(V_,Mge),e(Mge,d5o),e(V_,c5o),e(V_,bG),e(bG,f5o),e(V_,m5o),e(y,g5o),e(y,X_),e(X_,Ege),e(Ege,h5o),e(X_,p5o),e(X_,vG),e(vG,_5o),e(X_,u5o),e(y,b5o),e(y,z_),e(z_,Cge),e(Cge,v5o),e(z_,F5o),e(z_,FG),e(FG,T5o),e(z_,M5o),e(y,E5o),e(y,W_),e(W_,wge),e(wge,C5o),e(W_,w5o),e(W_,TG),e(TG,A5o),e(W_,L5o),e(y,y5o),e(y,Q_),e(Q_,Age),e(Age,x5o),e(Q_,$5o),e(Q_,MG),e(MG,k5o),e(Q_,S5o),e(y,R5o),e(y,U_),e(U_,Lge),e(Lge,P5o),e(U_,B5o),e(U_,EG),e(EG,I5o),e(U_,N5o),e(y,q5o),e(y,H_),e(H_,yge),e(yge,j5o),e(H_,D5o),e(H_,CG),e(CG,G5o),e(H_,O5o),e(y,V5o),e(y,J_),e(J_,xge),e(xge,X5o),e(J_,z5o),e(J_,wG),e(wG,W5o),e(J_,Q5o),e(y,U5o),e(y,Y_),e(Y_,$ge),e($ge,H5o),e(Y_,J5o),e(Y_,AG),e(AG,Y5o),e(Y_,K5o),e(y,Z5o),e(y,K_),e(K_,kge),e(kge,e0o),e(K_,o0o),e(K_,LG),e(LG,r0o),e(K_,t0o),e(y,a0o),e(y,Z_),e(Z_,Sge),e(Sge,n0o),e(Z_,s0o),e(Z_,yG),e(yG,l0o),e(Z_,i0o),e(y,d0o),e(y,eu),e(eu,Rge),e(Rge,c0o),e(eu,f0o),e(eu,xG),e(xG,m0o),e(eu,g0o),e(y,h0o),e(y,ou),e(ou,Pge),e(Pge,p0o),e(ou,_0o),e(ou,$G),e($G,u0o),e(ou,b0o),e(y,v0o),e(y,ru),e(ru,Bge),e(Bge,F0o),e(ru,T0o),e(ru,kG),e(kG,M0o),e(ru,E0o),e(y,C0o),e(y,tu),e(tu,Ige),e(Ige,w0o),e(tu,A0o),e(tu,SG),e(SG,L0o),e(tu,y0o),e(y,x0o),e(y,au),e(au,Nge),e(Nge,$0o),e(au,k0o),e(au,RG),e(RG,S0o),e(au,R0o),e(y,P0o),e(y,nu),e(nu,qge),e(qge,B0o),e(nu,I0o),e(nu,PG),e(PG,N0o),e(nu,q0o),e(y,j0o),e(y,su),e(su,jge),e(jge,D0o),e(su,G0o),e(su,BG),e(BG,O0o),e(su,V0o),e(y,X0o),e(y,lu),e(lu,Dge),e(Dge,z0o),e(lu,W0o),e(lu,IG),e(IG,Q0o),e(lu,U0o),e(y,H0o),e(y,iu),e(iu,Gge),e(Gge,J0o),e(iu,Y0o),e(iu,NG),e(NG,K0o),e(iu,Z0o),e(y,ewo),e(y,cl),e(cl,Oge),e(Oge,owo),e(cl,rwo),e(cl,qG),e(qG,two),e(cl,awo),e(cl,jG),e(jG,nwo),e(cl,swo),e(y,lwo),e(y,du),e(du,Vge),e(Vge,iwo),e(du,dwo),e(du,DG),e(DG,cwo),e(du,fwo),e(y,mwo),e(y,cu),e(cu,Xge),e(Xge,gwo),e(cu,hwo),e(cu,GG),e(GG,pwo),e(cu,_wo),e(y,uwo),e(y,fu),e(fu,zge),e(zge,bwo),e(fu,vwo),e(fu,OG),e(OG,Fwo),e(fu,Two),e(y,Mwo),e(y,mu),e(mu,Wge),e(Wge,Ewo),e(mu,Cwo),e(mu,VG),e(VG,wwo),e(mu,Awo),e(y,Lwo),e(y,gu),e(gu,Qge),e(Qge,ywo),e(gu,xwo),e(gu,XG),e(XG,$wo),e(gu,kwo),e(y,Swo),e(y,hu),e(hu,Uge),e(Uge,Rwo),e(hu,Pwo),e(hu,zG),e(zG,Bwo),e(hu,Iwo),e(y,Nwo),e(y,pu),e(pu,Hge),e(Hge,qwo),e(pu,jwo),e(pu,WG),e(WG,Dwo),e(pu,Gwo),e(y,Owo),e(y,_u),e(_u,Jge),e(Jge,Vwo),e(_u,Xwo),e(_u,QG),e(QG,zwo),e(_u,Wwo),e(y,Qwo),e(y,uu),e(uu,Yge),e(Yge,Uwo),e(uu,Hwo),e(uu,UG),e(UG,Jwo),e(uu,Ywo),e(y,Kwo),e(y,bu),e(bu,Kge),e(Kge,Zwo),e(bu,eAo),e(bu,HG),e(HG,oAo),e(bu,rAo),e(y,tAo),e(y,vu),e(vu,Zge),e(Zge,aAo),e(vu,nAo),e(vu,JG),e(JG,sAo),e(vu,lAo),e(y,iAo),e(y,Fu),e(Fu,ehe),e(ehe,dAo),e(Fu,cAo),e(Fu,YG),e(YG,fAo),e(Fu,mAo),e(y,gAo),e(y,Tu),e(Tu,ohe),e(ohe,hAo),e(Tu,pAo),e(Tu,KG),e(KG,_Ao),e(Tu,uAo),e(y,bAo),e(y,Mu),e(Mu,rhe),e(rhe,vAo),e(Mu,FAo),e(Mu,ZG),e(ZG,TAo),e(Mu,MAo),e(y,EAo),e(y,Eu),e(Eu,the),e(the,CAo),e(Eu,wAo),e(Eu,eO),e(eO,AAo),e(Eu,LAo),e(y,yAo),e(y,Cu),e(Cu,ahe),e(ahe,xAo),e(Cu,$Ao),e(Cu,oO),e(oO,kAo),e(Cu,SAo),e(y,RAo),e(y,wu),e(wu,nhe),e(nhe,PAo),e(wu,BAo),e(wu,rO),e(rO,IAo),e(wu,NAo),e(y,qAo),e(y,Au),e(Au,she),e(she,jAo),e(Au,DAo),e(Au,tO),e(tO,GAo),e(Au,OAo),e(y,VAo),e(y,Lu),e(Lu,lhe),e(lhe,XAo),e(Lu,zAo),e(Lu,aO),e(aO,WAo),e(Lu,QAo),e(y,UAo),e(y,yu),e(yu,ihe),e(ihe,HAo),e(yu,JAo),e(yu,nO),e(nO,YAo),e(yu,KAo),e(y,ZAo),e(y,xu),e(xu,dhe),e(dhe,e7o),e(xu,o7o),e(xu,sO),e(sO,r7o),e(xu,t7o),e(y,a7o),e(y,$u),e($u,che),e(che,n7o),e($u,s7o),e($u,lO),e(lO,l7o),e($u,i7o),e(y,d7o),e(y,ku),e(ku,fhe),e(fhe,c7o),e(ku,f7o),e(ku,iO),e(iO,m7o),e(ku,g7o),e(y,h7o),e(y,Su),e(Su,mhe),e(mhe,p7o),e(Su,_7o),e(Su,dO),e(dO,u7o),e(Su,b7o),e(y,v7o),e(y,Ru),e(Ru,ghe),e(ghe,F7o),e(Ru,T7o),e(Ru,cO),e(cO,M7o),e(Ru,E7o),e(y,C7o),e(y,Pu),e(Pu,hhe),e(hhe,w7o),e(Pu,A7o),e(Pu,fO),e(fO,L7o),e(Pu,y7o),e(y,x7o),e(y,Bu),e(Bu,phe),e(phe,$7o),e(Bu,k7o),e(Bu,mO),e(mO,S7o),e(Bu,R7o),e(y,P7o),e(y,Iu),e(Iu,_he),e(_he,B7o),e(Iu,I7o),e(Iu,gO),e(gO,N7o),e(Iu,q7o),e(y,j7o),e(y,Nu),e(Nu,uhe),e(uhe,D7o),e(Nu,G7o),e(Nu,hO),e(hO,O7o),e(Nu,V7o),e(y,X7o),e(y,qu),e(qu,bhe),e(bhe,z7o),e(qu,W7o),e(qu,pO),e(pO,Q7o),e(qu,U7o),e(y,H7o),e(y,ju),e(ju,vhe),e(vhe,J7o),e(ju,Y7o),e(ju,_O),e(_O,K7o),e(ju,Z7o),e(y,eLo),e(y,Du),e(Du,Fhe),e(Fhe,oLo),e(Du,rLo),e(Du,uO),e(uO,tLo),e(Du,aLo),e(y,nLo),e(y,Gu),e(Gu,The),e(The,sLo),e(Gu,lLo),e(Gu,bO),e(bO,iLo),e(Gu,dLo),e(y,cLo),e(y,Ou),e(Ou,Mhe),e(Mhe,fLo),e(Ou,mLo),e(Ou,vO),e(vO,gLo),e(Ou,hLo),e(y,pLo),e(y,Vu),e(Vu,Ehe),e(Ehe,_Lo),e(Vu,uLo),e(Vu,FO),e(FO,bLo),e(Vu,vLo),e(y,FLo),e(y,Xu),e(Xu,Che),e(Che,TLo),e(Xu,MLo),e(Xu,TO),e(TO,ELo),e(Xu,CLo),e(y,wLo),e(y,zu),e(zu,whe),e(whe,ALo),e(zu,LLo),e(zu,MO),e(MO,yLo),e(zu,xLo),e(y,$Lo),e(y,Wu),e(Wu,Ahe),e(Ahe,kLo),e(Wu,SLo),e(Wu,EO),e(EO,RLo),e(Wu,PLo),e(y,BLo),e(y,Qu),e(Qu,Lhe),e(Lhe,ILo),e(Qu,NLo),e(Qu,CO),e(CO,qLo),e(Qu,jLo),e(y,DLo),e(y,Uu),e(Uu,yhe),e(yhe,GLo),e(Uu,OLo),e(Uu,wO),e(wO,VLo),e(Uu,XLo),e(y,zLo),e(y,Hu),e(Hu,xhe),e(xhe,WLo),e(Hu,QLo),e(Hu,AO),e(AO,ULo),e(Hu,HLo),e(y,JLo),e(y,Ju),e(Ju,$he),e($he,YLo),e(Ju,KLo),e(Ju,LO),e(LO,ZLo),e(Ju,eyo),e(y,oyo),e(y,Yu),e(Yu,khe),e(khe,ryo),e(Yu,tyo),e(Yu,yO),e(yO,ayo),e(Yu,nyo),e(y,syo),e(y,Ku),e(Ku,She),e(She,lyo),e(Ku,iyo),e(Ku,xO),e(xO,dyo),e(Ku,cyo),e(y,fyo),e(y,Zu),e(Zu,Rhe),e(Rhe,myo),e(Zu,gyo),e(Zu,$O),e($O,hyo),e(Zu,pyo),e(y,_yo),e(y,e1),e(e1,Phe),e(Phe,uyo),e(e1,byo),e(e1,kO),e(kO,vyo),e(e1,Fyo),e(y,Tyo),e(y,o1),e(o1,Bhe),e(Bhe,Myo),e(o1,Eyo),e(o1,SO),e(SO,Cyo),e(o1,wyo),e(y,Ayo),e(y,r1),e(r1,Ihe),e(Ihe,Lyo),e(r1,yyo),e(r1,RO),e(RO,xyo),e(r1,$yo),e(y,kyo),e(y,t1),e(t1,Nhe),e(Nhe,Syo),e(t1,Ryo),e(t1,PO),e(PO,Pyo),e(t1,Byo),e(y,Iyo),e(y,a1),e(a1,qhe),e(qhe,Nyo),e(a1,qyo),e(a1,BO),e(BO,jyo),e(a1,Dyo),e(y,Gyo),e(y,n1),e(n1,jhe),e(jhe,Oyo),e(n1,Vyo),e(n1,IO),e(IO,Xyo),e(n1,zyo),e(y,Wyo),e(y,s1),e(s1,Dhe),e(Dhe,Qyo),e(s1,Uyo),e(s1,NO),e(NO,Hyo),e(s1,Jyo),e(y,Yyo),e(y,l1),e(l1,Ghe),e(Ghe,Kyo),e(l1,Zyo),e(l1,qO),e(qO,e9o),e(l1,o9o),e(y,r9o),e(y,i1),e(i1,Ohe),e(Ohe,t9o),e(i1,a9o),e(i1,jO),e(jO,n9o),e(i1,s9o),e(y,l9o),e(y,d1),e(d1,Vhe),e(Vhe,i9o),e(d1,d9o),e(d1,DO),e(DO,c9o),e(d1,f9o),e(y,m9o),e(y,c1),e(c1,Xhe),e(Xhe,g9o),e(c1,h9o),e(c1,GO),e(GO,p9o),e(c1,_9o),e(y,u9o),e(y,f1),e(f1,zhe),e(zhe,b9o),e(f1,v9o),e(f1,OO),e(OO,F9o),e(f1,T9o),e(y,M9o),e(y,m1),e(m1,Whe),e(Whe,E9o),e(m1,C9o),e(m1,VO),e(VO,w9o),e(m1,A9o),e(y,L9o),e(y,g1),e(g1,Qhe),e(Qhe,y9o),e(g1,x9o),e(g1,XO),e(XO,$9o),e(g1,k9o),e(y,S9o),e(y,h1),e(h1,Uhe),e(Uhe,R9o),e(h1,P9o),e(h1,zO),e(zO,B9o),e(h1,I9o),e(y,N9o),e(y,p1),e(p1,Hhe),e(Hhe,q9o),e(p1,j9o),e(p1,WO),e(WO,D9o),e(p1,G9o),e(y,O9o),e(y,_1),e(_1,Jhe),e(Jhe,V9o),e(_1,X9o),e(_1,QO),e(QO,z9o),e(_1,W9o),e(y,Q9o),e(y,u1),e(u1,Yhe),e(Yhe,U9o),e(u1,H9o),e(u1,UO),e(UO,J9o),e(u1,Y9o),e(y,K9o),e(y,b1),e(b1,Khe),e(Khe,Z9o),e(b1,exo),e(b1,HO),e(HO,oxo),e(b1,rxo),e(y,txo),e(y,v1),e(v1,Zhe),e(Zhe,axo),e(v1,nxo),e(v1,JO),e(JO,sxo),e(v1,lxo),e(y,ixo),e(y,F1),e(F1,epe),e(epe,dxo),e(F1,cxo),e(F1,YO),e(YO,fxo),e(F1,mxo),e(y,gxo),e(y,T1),e(T1,ope),e(ope,hxo),e(T1,pxo),e(T1,KO),e(KO,_xo),e(T1,uxo),e(y,bxo),e(y,M1),e(M1,rpe),e(rpe,vxo),e(M1,Fxo),e(M1,ZO),e(ZO,Txo),e(M1,Mxo),e(y,Exo),e(y,E1),e(E1,tpe),e(tpe,Cxo),e(E1,wxo),e(E1,eV),e(eV,Axo),e(E1,Lxo),e(y,yxo),e(y,C1),e(C1,ape),e(ape,xxo),e(C1,$xo),e(C1,oV),e(oV,kxo),e(C1,Sxo),e(y,Rxo),e(y,w1),e(w1,npe),e(npe,Pxo),e(w1,Bxo),e(w1,rV),e(rV,Ixo),e(w1,Nxo),e(y,qxo),e(y,A1),e(A1,spe),e(spe,jxo),e(A1,Dxo),e(A1,tV),e(tV,Gxo),e(A1,Oxo),e(y,Vxo),e(y,L1),e(L1,lpe),e(lpe,Xxo),e(L1,zxo),e(L1,aV),e(aV,Wxo),e(L1,Qxo),e(y,Uxo),e(y,y1),e(y1,ipe),e(ipe,Hxo),e(y1,Jxo),e(y1,nV),e(nV,Yxo),e(y1,Kxo),e(y,Zxo),e(y,x1),e(x1,dpe),e(dpe,e$o),e(x1,o$o),e(x1,sV),e(sV,r$o),e(x1,t$o),e(y,a$o),e(y,$1),e($1,cpe),e(cpe,n$o),e($1,s$o),e($1,lV),e(lV,l$o),e($1,i$o),e(y,d$o),e(y,k1),e(k1,fpe),e(fpe,c$o),e(k1,f$o),e(k1,iV),e(iV,m$o),e(k1,g$o),e(y,h$o),e(y,S1),e(S1,mpe),e(mpe,p$o),e(S1,_$o),e(S1,dV),e(dV,u$o),e(S1,b$o),e(y,v$o),e(y,R1),e(R1,gpe),e(gpe,F$o),e(R1,T$o),e(R1,cV),e(cV,M$o),e(R1,E$o),e(y,C$o),e(y,P1),e(P1,hpe),e(hpe,w$o),e(P1,A$o),e(P1,fV),e(fV,L$o),e(P1,y$o),e(Ye,x$o),e(Ye,B1),e(B1,$$o),e(B1,ppe),e(ppe,k$o),e(B1,S$o),e(B1,_pe),e(_pe,R$o),e(Ye,P$o),M(I1,Ye,null),b(f,UUe,u),b(f,fd,u),e(fd,N1),e(N1,upe),M(i9,upe,null),e(fd,B$o),e(fd,bpe),e(bpe,I$o),b(f,HUe,u),b(f,Po,u),M(d9,Po,null),e(Po,N$o),e(Po,md),e(md,q$o),e(md,mV),e(mV,j$o),e(md,D$o),e(md,gV),e(gV,G$o),e(md,O$o),e(Po,V$o),e(Po,c9),e(c9,X$o),e(c9,vpe),e(vpe,z$o),e(c9,W$o),e(Po,Q$o),e(Po,pt),M(f9,pt,null),e(pt,U$o),e(pt,Fpe),e(Fpe,H$o),e(pt,J$o),e(pt,gd),e(gd,Y$o),e(gd,Tpe),e(Tpe,K$o),e(gd,Z$o),e(gd,hV),e(hV,eko),e(gd,oko),e(pt,rko),M(q1,pt,null),e(Po,tko),e(Po,Ke),M(m9,Ke,null),e(Ke,ako),e(Ke,Mpe),e(Mpe,nko),e(Ke,sko),e(Ke,Ua),e(Ua,lko),e(Ua,Epe),e(Epe,iko),e(Ua,dko),e(Ua,Cpe),e(Cpe,cko),e(Ua,fko),e(Ua,wpe),e(wpe,mko),e(Ua,gko),e(Ke,hko),e(Ke,G),e(G,j1),e(j1,Ape),e(Ape,pko),e(j1,_ko),e(j1,pV),e(pV,uko),e(j1,bko),e(G,vko),e(G,D1),e(D1,Lpe),e(Lpe,Fko),e(D1,Tko),e(D1,_V),e(_V,Mko),e(D1,Eko),e(G,Cko),e(G,G1),e(G1,ype),e(ype,wko),e(G1,Ako),e(G1,uV),e(uV,Lko),e(G1,yko),e(G,xko),e(G,O1),e(O1,xpe),e(xpe,$ko),e(O1,kko),e(O1,bV),e(bV,Sko),e(O1,Rko),e(G,Pko),e(G,V1),e(V1,$pe),e($pe,Bko),e(V1,Iko),e(V1,vV),e(vV,Nko),e(V1,qko),e(G,jko),e(G,X1),e(X1,kpe),e(kpe,Dko),e(X1,Gko),e(X1,FV),e(FV,Oko),e(X1,Vko),e(G,Xko),e(G,z1),e(z1,Spe),e(Spe,zko),e(z1,Wko),e(z1,TV),e(TV,Qko),e(z1,Uko),e(G,Hko),e(G,W1),e(W1,Rpe),e(Rpe,Jko),e(W1,Yko),e(W1,MV),e(MV,Kko),e(W1,Zko),e(G,eSo),e(G,Q1),e(Q1,Ppe),e(Ppe,oSo),e(Q1,rSo),e(Q1,EV),e(EV,tSo),e(Q1,aSo),e(G,nSo),e(G,U1),e(U1,Bpe),e(Bpe,sSo),e(U1,lSo),e(U1,CV),e(CV,iSo),e(U1,dSo),e(G,cSo),e(G,H1),e(H1,Ipe),e(Ipe,fSo),e(H1,mSo),e(H1,wV),e(wV,gSo),e(H1,hSo),e(G,pSo),e(G,J1),e(J1,Npe),e(Npe,_So),e(J1,uSo),e(J1,AV),e(AV,bSo),e(J1,vSo),e(G,FSo),e(G,Y1),e(Y1,qpe),e(qpe,TSo),e(Y1,MSo),e(Y1,LV),e(LV,ESo),e(Y1,CSo),e(G,wSo),e(G,K1),e(K1,jpe),e(jpe,ASo),e(K1,LSo),e(K1,yV),e(yV,ySo),e(K1,xSo),e(G,$So),e(G,Z1),e(Z1,Dpe),e(Dpe,kSo),e(Z1,SSo),e(Z1,xV),e(xV,RSo),e(Z1,PSo),e(G,BSo),e(G,e8),e(e8,Gpe),e(Gpe,ISo),e(e8,NSo),e(e8,$V),e($V,qSo),e(e8,jSo),e(G,DSo),e(G,o8),e(o8,Ope),e(Ope,GSo),e(o8,OSo),e(o8,kV),e(kV,VSo),e(o8,XSo),e(G,zSo),e(G,r8),e(r8,Vpe),e(Vpe,WSo),e(r8,QSo),e(r8,SV),e(SV,USo),e(r8,HSo),e(G,JSo),e(G,t8),e(t8,Xpe),e(Xpe,YSo),e(t8,KSo),e(t8,RV),e(RV,ZSo),e(t8,eRo),e(G,oRo),e(G,a8),e(a8,zpe),e(zpe,rRo),e(a8,tRo),e(a8,PV),e(PV,aRo),e(a8,nRo),e(G,sRo),e(G,n8),e(n8,Wpe),e(Wpe,lRo),e(n8,iRo),e(n8,BV),e(BV,dRo),e(n8,cRo),e(G,fRo),e(G,s8),e(s8,Qpe),e(Qpe,mRo),e(s8,gRo),e(s8,IV),e(IV,hRo),e(s8,pRo),e(G,_Ro),e(G,l8),e(l8,Upe),e(Upe,uRo),e(l8,bRo),e(l8,NV),e(NV,vRo),e(l8,FRo),e(G,TRo),e(G,i8),e(i8,Hpe),e(Hpe,MRo),e(i8,ERo),e(i8,qV),e(qV,CRo),e(i8,wRo),e(G,ARo),e(G,d8),e(d8,Jpe),e(Jpe,LRo),e(d8,yRo),e(d8,jV),e(jV,xRo),e(d8,$Ro),e(G,kRo),e(G,c8),e(c8,Ype),e(Ype,SRo),e(c8,RRo),e(c8,DV),e(DV,PRo),e(c8,BRo),e(G,IRo),e(G,f8),e(f8,Kpe),e(Kpe,NRo),e(f8,qRo),e(f8,GV),e(GV,jRo),e(f8,DRo),e(G,GRo),e(G,m8),e(m8,Zpe),e(Zpe,ORo),e(m8,VRo),e(m8,OV),e(OV,XRo),e(m8,zRo),e(G,WRo),e(G,g8),e(g8,e_e),e(e_e,QRo),e(g8,URo),e(g8,VV),e(VV,HRo),e(g8,JRo),e(G,YRo),e(G,h8),e(h8,o_e),e(o_e,KRo),e(h8,ZRo),e(h8,XV),e(XV,ePo),e(h8,oPo),e(G,rPo),e(G,p8),e(p8,r_e),e(r_e,tPo),e(p8,aPo),e(p8,zV),e(zV,nPo),e(p8,sPo),e(G,lPo),e(G,_8),e(_8,t_e),e(t_e,iPo),e(_8,dPo),e(_8,WV),e(WV,cPo),e(_8,fPo),e(G,mPo),e(G,u8),e(u8,a_e),e(a_e,gPo),e(u8,hPo),e(u8,QV),e(QV,pPo),e(u8,_Po),e(G,uPo),e(G,b8),e(b8,n_e),e(n_e,bPo),e(b8,vPo),e(b8,UV),e(UV,FPo),e(b8,TPo),e(G,MPo),e(G,v8),e(v8,s_e),e(s_e,EPo),e(v8,CPo),e(v8,HV),e(HV,wPo),e(v8,APo),e(G,LPo),e(G,F8),e(F8,l_e),e(l_e,yPo),e(F8,xPo),e(F8,JV),e(JV,$Po),e(F8,kPo),e(G,SPo),e(G,T8),e(T8,i_e),e(i_e,RPo),e(T8,PPo),e(T8,YV),e(YV,BPo),e(T8,IPo),e(G,NPo),e(G,M8),e(M8,d_e),e(d_e,qPo),e(M8,jPo),e(M8,KV),e(KV,DPo),e(M8,GPo),e(G,OPo),e(G,E8),e(E8,c_e),e(c_e,VPo),e(E8,XPo),e(E8,ZV),e(ZV,zPo),e(E8,WPo),e(G,QPo),e(G,C8),e(C8,f_e),e(f_e,UPo),e(C8,HPo),e(C8,eX),e(eX,JPo),e(C8,YPo),e(G,KPo),e(G,w8),e(w8,m_e),e(m_e,ZPo),e(w8,eBo),e(w8,oX),e(oX,oBo),e(w8,rBo),e(G,tBo),e(G,A8),e(A8,g_e),e(g_e,aBo),e(A8,nBo),e(A8,rX),e(rX,sBo),e(A8,lBo),e(G,iBo),e(G,L8),e(L8,h_e),e(h_e,dBo),e(L8,cBo),e(L8,tX),e(tX,fBo),e(L8,mBo),e(G,gBo),e(G,y8),e(y8,p_e),e(p_e,hBo),e(y8,pBo),e(y8,aX),e(aX,_Bo),e(y8,uBo),e(G,bBo),e(G,x8),e(x8,__e),e(__e,vBo),e(x8,FBo),e(x8,nX),e(nX,TBo),e(x8,MBo),e(G,EBo),e(G,$8),e($8,u_e),e(u_e,CBo),e($8,wBo),e($8,sX),e(sX,ABo),e($8,LBo),e(G,yBo),e(G,k8),e(k8,b_e),e(b_e,xBo),e(k8,$Bo),e(k8,lX),e(lX,kBo),e(k8,SBo),e(Ke,RBo),e(Ke,S8),e(S8,PBo),e(S8,v_e),e(v_e,BBo),e(S8,IBo),e(S8,F_e),e(F_e,NBo),e(Ke,qBo),M(R8,Ke,null),b(f,JUe,u),b(f,hd,u),e(hd,P8),e(P8,T_e),M(g9,T_e,null),e(hd,jBo),e(hd,M_e),e(M_e,DBo),b(f,YUe,u),b(f,Bo,u),M(h9,Bo,null),e(Bo,GBo),e(Bo,pd),e(pd,OBo),e(pd,iX),e(iX,VBo),e(pd,XBo),e(pd,dX),e(dX,zBo),e(pd,WBo),e(Bo,QBo),e(Bo,p9),e(p9,UBo),e(p9,E_e),e(E_e,HBo),e(p9,JBo),e(Bo,YBo),e(Bo,_t),M(_9,_t,null),e(_t,KBo),e(_t,C_e),e(C_e,ZBo),e(_t,eIo),e(_t,_d),e(_d,oIo),e(_d,w_e),e(w_e,rIo),e(_d,tIo),e(_d,cX),e(cX,aIo),e(_d,nIo),e(_t,sIo),M(B8,_t,null),e(Bo,lIo),e(Bo,Ze),M(u9,Ze,null),e(Ze,iIo),e(Ze,A_e),e(A_e,dIo),e(Ze,cIo),e(Ze,Ha),e(Ha,fIo),e(Ha,L_e),e(L_e,mIo),e(Ha,gIo),e(Ha,y_e),e(y_e,hIo),e(Ha,pIo),e(Ha,x_e),e(x_e,_Io),e(Ha,uIo),e(Ze,bIo),e(Ze,z),e(z,I8),e(I8,$_e),e($_e,vIo),e(I8,FIo),e(I8,fX),e(fX,TIo),e(I8,MIo),e(z,EIo),e(z,N8),e(N8,k_e),e(k_e,CIo),e(N8,wIo),e(N8,mX),e(mX,AIo),e(N8,LIo),e(z,yIo),e(z,q8),e(q8,S_e),e(S_e,xIo),e(q8,$Io),e(q8,gX),e(gX,kIo),e(q8,SIo),e(z,RIo),e(z,j8),e(j8,R_e),e(R_e,PIo),e(j8,BIo),e(j8,hX),e(hX,IIo),e(j8,NIo),e(z,qIo),e(z,D8),e(D8,P_e),e(P_e,jIo),e(D8,DIo),e(D8,pX),e(pX,GIo),e(D8,OIo),e(z,VIo),e(z,G8),e(G8,B_e),e(B_e,XIo),e(G8,zIo),e(G8,_X),e(_X,WIo),e(G8,QIo),e(z,UIo),e(z,O8),e(O8,I_e),e(I_e,HIo),e(O8,JIo),e(O8,uX),e(uX,YIo),e(O8,KIo),e(z,ZIo),e(z,V8),e(V8,N_e),e(N_e,eNo),e(V8,oNo),e(V8,bX),e(bX,rNo),e(V8,tNo),e(z,aNo),e(z,X8),e(X8,q_e),e(q_e,nNo),e(X8,sNo),e(X8,vX),e(vX,lNo),e(X8,iNo),e(z,dNo),e(z,z8),e(z8,j_e),e(j_e,cNo),e(z8,fNo),e(z8,FX),e(FX,mNo),e(z8,gNo),e(z,hNo),e(z,W8),e(W8,D_e),e(D_e,pNo),e(W8,_No),e(W8,TX),e(TX,uNo),e(W8,bNo),e(z,vNo),e(z,Q8),e(Q8,G_e),e(G_e,FNo),e(Q8,TNo),e(Q8,MX),e(MX,MNo),e(Q8,ENo),e(z,CNo),e(z,U8),e(U8,O_e),e(O_e,wNo),e(U8,ANo),e(U8,EX),e(EX,LNo),e(U8,yNo),e(z,xNo),e(z,H8),e(H8,V_e),e(V_e,$No),e(H8,kNo),e(H8,CX),e(CX,SNo),e(H8,RNo),e(z,PNo),e(z,J8),e(J8,X_e),e(X_e,BNo),e(J8,INo),e(J8,wX),e(wX,NNo),e(J8,qNo),e(z,jNo),e(z,Y8),e(Y8,z_e),e(z_e,DNo),e(Y8,GNo),e(Y8,AX),e(AX,ONo),e(Y8,VNo),e(z,XNo),e(z,K8),e(K8,W_e),e(W_e,zNo),e(K8,WNo),e(K8,LX),e(LX,QNo),e(K8,UNo),e(z,HNo),e(z,Z8),e(Z8,Q_e),e(Q_e,JNo),e(Z8,YNo),e(Z8,yX),e(yX,KNo),e(Z8,ZNo),e(z,eqo),e(z,eb),e(eb,U_e),e(U_e,oqo),e(eb,rqo),e(eb,xX),e(xX,tqo),e(eb,aqo),e(z,nqo),e(z,ob),e(ob,H_e),e(H_e,sqo),e(ob,lqo),e(ob,$X),e($X,iqo),e(ob,dqo),e(z,cqo),e(z,rb),e(rb,J_e),e(J_e,fqo),e(rb,mqo),e(rb,kX),e(kX,gqo),e(rb,hqo),e(z,pqo),e(z,tb),e(tb,Y_e),e(Y_e,_qo),e(tb,uqo),e(tb,SX),e(SX,bqo),e(tb,vqo),e(z,Fqo),e(z,ab),e(ab,K_e),e(K_e,Tqo),e(ab,Mqo),e(ab,RX),e(RX,Eqo),e(ab,Cqo),e(z,wqo),e(z,nb),e(nb,Z_e),e(Z_e,Aqo),e(nb,Lqo),e(nb,PX),e(PX,yqo),e(nb,xqo),e(z,$qo),e(z,sb),e(sb,eue),e(eue,kqo),e(sb,Sqo),e(sb,BX),e(BX,Rqo),e(sb,Pqo),e(z,Bqo),e(z,lb),e(lb,oue),e(oue,Iqo),e(lb,Nqo),e(lb,IX),e(IX,qqo),e(lb,jqo),e(z,Dqo),e(z,ib),e(ib,rue),e(rue,Gqo),e(ib,Oqo),e(ib,NX),e(NX,Vqo),e(ib,Xqo),e(z,zqo),e(z,db),e(db,tue),e(tue,Wqo),e(db,Qqo),e(db,qX),e(qX,Uqo),e(db,Hqo),e(z,Jqo),e(z,cb),e(cb,aue),e(aue,Yqo),e(cb,Kqo),e(cb,jX),e(jX,Zqo),e(cb,ejo),e(z,ojo),e(z,fb),e(fb,nue),e(nue,rjo),e(fb,tjo),e(fb,DX),e(DX,ajo),e(fb,njo),e(z,sjo),e(z,mb),e(mb,sue),e(sue,ljo),e(mb,ijo),e(mb,GX),e(GX,djo),e(mb,cjo),e(z,fjo),e(z,gb),e(gb,lue),e(lue,mjo),e(gb,gjo),e(gb,OX),e(OX,hjo),e(gb,pjo),e(z,_jo),e(z,hb),e(hb,iue),e(iue,ujo),e(hb,bjo),e(hb,VX),e(VX,vjo),e(hb,Fjo),e(z,Tjo),e(z,pb),e(pb,due),e(due,Mjo),e(pb,Ejo),e(pb,XX),e(XX,Cjo),e(pb,wjo),e(z,Ajo),e(z,_b),e(_b,cue),e(cue,Ljo),e(_b,yjo),e(_b,zX),e(zX,xjo),e(_b,$jo),e(z,kjo),e(z,ub),e(ub,fue),e(fue,Sjo),e(ub,Rjo),e(ub,WX),e(WX,Pjo),e(ub,Bjo),e(z,Ijo),e(z,bb),e(bb,mue),e(mue,Njo),e(bb,qjo),e(bb,QX),e(QX,jjo),e(bb,Djo),e(z,Gjo),e(z,vb),e(vb,gue),e(gue,Ojo),e(vb,Vjo),e(vb,UX),e(UX,Xjo),e(vb,zjo),e(z,Wjo),e(z,Fb),e(Fb,hue),e(hue,Qjo),e(Fb,Ujo),e(Fb,HX),e(HX,Hjo),e(Fb,Jjo),e(z,Yjo),e(z,Tb),e(Tb,pue),e(pue,Kjo),e(Tb,Zjo),e(Tb,JX),e(JX,eDo),e(Tb,oDo),e(Ze,rDo),e(Ze,Mb),e(Mb,tDo),e(Mb,_ue),e(_ue,aDo),e(Mb,nDo),e(Mb,uue),e(uue,sDo),e(Ze,lDo),M(Eb,Ze,null),b(f,KUe,u),b(f,ud,u),e(ud,Cb),e(Cb,bue),M(b9,bue,null),e(ud,iDo),e(ud,vue),e(vue,dDo),b(f,ZUe,u),b(f,Io,u),M(v9,Io,null),e(Io,cDo),e(Io,bd),e(bd,fDo),e(bd,YX),e(YX,mDo),e(bd,gDo),e(bd,KX),e(KX,hDo),e(bd,pDo),e(Io,_Do),e(Io,F9),e(F9,uDo),e(F9,Fue),e(Fue,bDo),e(F9,vDo),e(Io,FDo),e(Io,ut),M(T9,ut,null),e(ut,TDo),e(ut,Tue),e(Tue,MDo),e(ut,EDo),e(ut,vd),e(vd,CDo),e(vd,Mue),e(Mue,wDo),e(vd,ADo),e(vd,ZX),e(ZX,LDo),e(vd,yDo),e(ut,xDo),M(wb,ut,null),e(Io,$Do),e(Io,eo),M(M9,eo,null),e(eo,kDo),e(eo,Eue),e(Eue,SDo),e(eo,RDo),e(eo,Ja),e(Ja,PDo),e(Ja,Cue),e(Cue,BDo),e(Ja,IDo),e(Ja,wue),e(wue,NDo),e(Ja,qDo),e(Ja,Aue),e(Aue,jDo),e(Ja,DDo),e(eo,GDo),e(eo,E9),e(E9,Ab),e(Ab,Lue),e(Lue,ODo),e(Ab,VDo),e(Ab,yue),e(yue,XDo),e(Ab,zDo),e(E9,WDo),e(E9,Lb),e(Lb,xue),e(xue,QDo),e(Lb,UDo),e(Lb,$ue),e($ue,HDo),e(Lb,JDo),e(eo,YDo),e(eo,yb),e(yb,KDo),e(yb,kue),e(kue,ZDo),e(yb,eGo),e(yb,Sue),e(Sue,oGo),e(eo,rGo),M(xb,eo,null),b(f,eHe,u),b(f,Fd,u),e(Fd,$b),e($b,Rue),M(C9,Rue,null),e(Fd,tGo),e(Fd,Pue),e(Pue,aGo),b(f,oHe,u),b(f,No,u),M(w9,No,null),e(No,nGo),e(No,Td),e(Td,sGo),e(Td,ez),e(ez,lGo),e(Td,iGo),e(Td,oz),e(oz,dGo),e(Td,cGo),e(No,fGo),e(No,A9),e(A9,mGo),e(A9,Bue),e(Bue,gGo),e(A9,hGo),e(No,pGo),e(No,bt),M(L9,bt,null),e(bt,_Go),e(bt,Iue),e(Iue,uGo),e(bt,bGo),e(bt,Md),e(Md,vGo),e(Md,Nue),e(Nue,FGo),e(Md,TGo),e(Md,rz),e(rz,MGo),e(Md,EGo),e(bt,CGo),M(kb,bt,null),e(No,wGo),e(No,oo),M(y9,oo,null),e(oo,AGo),e(oo,que),e(que,LGo),e(oo,yGo),e(oo,Ya),e(Ya,xGo),e(Ya,jue),e(jue,$Go),e(Ya,kGo),e(Ya,Due),e(Due,SGo),e(Ya,RGo),e(Ya,Gue),e(Gue,PGo),e(Ya,BGo),e(oo,IGo),e(oo,U),e(U,Sb),e(Sb,Oue),e(Oue,NGo),e(Sb,qGo),e(Sb,tz),e(tz,jGo),e(Sb,DGo),e(U,GGo),e(U,Rb),e(Rb,Vue),e(Vue,OGo),e(Rb,VGo),e(Rb,az),e(az,XGo),e(Rb,zGo),e(U,WGo),e(U,Pb),e(Pb,Xue),e(Xue,QGo),e(Pb,UGo),e(Pb,nz),e(nz,HGo),e(Pb,JGo),e(U,YGo),e(U,Bb),e(Bb,zue),e(zue,KGo),e(Bb,ZGo),e(Bb,sz),e(sz,eOo),e(Bb,oOo),e(U,rOo),e(U,Ib),e(Ib,Wue),e(Wue,tOo),e(Ib,aOo),e(Ib,lz),e(lz,nOo),e(Ib,sOo),e(U,lOo),e(U,Nb),e(Nb,Que),e(Que,iOo),e(Nb,dOo),e(Nb,iz),e(iz,cOo),e(Nb,fOo),e(U,mOo),e(U,qb),e(qb,Uue),e(Uue,gOo),e(qb,hOo),e(qb,dz),e(dz,pOo),e(qb,_Oo),e(U,uOo),e(U,jb),e(jb,Hue),e(Hue,bOo),e(jb,vOo),e(jb,cz),e(cz,FOo),e(jb,TOo),e(U,MOo),e(U,Db),e(Db,Jue),e(Jue,EOo),e(Db,COo),e(Db,fz),e(fz,wOo),e(Db,AOo),e(U,LOo),e(U,Gb),e(Gb,Yue),e(Yue,yOo),e(Gb,xOo),e(Gb,mz),e(mz,$Oo),e(Gb,kOo),e(U,SOo),e(U,Ob),e(Ob,Kue),e(Kue,ROo),e(Ob,POo),e(Ob,gz),e(gz,BOo),e(Ob,IOo),e(U,NOo),e(U,Vb),e(Vb,Zue),e(Zue,qOo),e(Vb,jOo),e(Vb,hz),e(hz,DOo),e(Vb,GOo),e(U,OOo),e(U,Xb),e(Xb,e1e),e(e1e,VOo),e(Xb,XOo),e(Xb,pz),e(pz,zOo),e(Xb,WOo),e(U,QOo),e(U,zb),e(zb,o1e),e(o1e,UOo),e(zb,HOo),e(zb,_z),e(_z,JOo),e(zb,YOo),e(U,KOo),e(U,Wb),e(Wb,r1e),e(r1e,ZOo),e(Wb,eVo),e(Wb,uz),e(uz,oVo),e(Wb,rVo),e(U,tVo),e(U,Qb),e(Qb,t1e),e(t1e,aVo),e(Qb,nVo),e(Qb,bz),e(bz,sVo),e(Qb,lVo),e(U,iVo),e(U,Ub),e(Ub,a1e),e(a1e,dVo),e(Ub,cVo),e(Ub,vz),e(vz,fVo),e(Ub,mVo),e(U,gVo),e(U,Hb),e(Hb,n1e),e(n1e,hVo),e(Hb,pVo),e(Hb,Fz),e(Fz,_Vo),e(Hb,uVo),e(U,bVo),e(U,Jb),e(Jb,s1e),e(s1e,vVo),e(Jb,FVo),e(Jb,Tz),e(Tz,TVo),e(Jb,MVo),e(U,EVo),e(U,Yb),e(Yb,l1e),e(l1e,CVo),e(Yb,wVo),e(Yb,Mz),e(Mz,AVo),e(Yb,LVo),e(U,yVo),e(U,Kb),e(Kb,i1e),e(i1e,xVo),e(Kb,$Vo),e(Kb,Ez),e(Ez,kVo),e(Kb,SVo),e(U,RVo),e(U,Zb),e(Zb,d1e),e(d1e,PVo),e(Zb,BVo),e(Zb,Cz),e(Cz,IVo),e(Zb,NVo),e(U,qVo),e(U,e2),e(e2,c1e),e(c1e,jVo),e(e2,DVo),e(e2,wz),e(wz,GVo),e(e2,OVo),e(U,VVo),e(U,o2),e(o2,f1e),e(f1e,XVo),e(o2,zVo),e(o2,Az),e(Az,WVo),e(o2,QVo),e(U,UVo),e(U,r2),e(r2,m1e),e(m1e,HVo),e(r2,JVo),e(r2,Lz),e(Lz,YVo),e(r2,KVo),e(U,ZVo),e(U,t2),e(t2,g1e),e(g1e,eXo),e(t2,oXo),e(t2,yz),e(yz,rXo),e(t2,tXo),e(U,aXo),e(U,a2),e(a2,h1e),e(h1e,nXo),e(a2,sXo),e(a2,xz),e(xz,lXo),e(a2,iXo),e(U,dXo),e(U,n2),e(n2,p1e),e(p1e,cXo),e(n2,fXo),e(n2,$z),e($z,mXo),e(n2,gXo),e(U,hXo),e(U,s2),e(s2,_1e),e(_1e,pXo),e(s2,_Xo),e(s2,kz),e(kz,uXo),e(s2,bXo),e(U,vXo),e(U,l2),e(l2,u1e),e(u1e,FXo),e(l2,TXo),e(l2,Sz),e(Sz,MXo),e(l2,EXo),e(U,CXo),e(U,i2),e(i2,b1e),e(b1e,wXo),e(i2,AXo),e(i2,Rz),e(Rz,LXo),e(i2,yXo),e(U,xXo),e(U,d2),e(d2,v1e),e(v1e,$Xo),e(d2,kXo),e(d2,Pz),e(Pz,SXo),e(d2,RXo),e(U,PXo),e(U,c2),e(c2,F1e),e(F1e,BXo),e(c2,IXo),e(c2,Bz),e(Bz,NXo),e(c2,qXo),e(U,jXo),e(U,f2),e(f2,T1e),e(T1e,DXo),e(f2,GXo),e(f2,M1e),e(M1e,OXo),e(f2,VXo),e(U,XXo),e(U,m2),e(m2,E1e),e(E1e,zXo),e(m2,WXo),e(m2,Iz),e(Iz,QXo),e(m2,UXo),e(U,HXo),e(U,g2),e(g2,C1e),e(C1e,JXo),e(g2,YXo),e(g2,Nz),e(Nz,KXo),e(g2,ZXo),e(U,ezo),e(U,h2),e(h2,w1e),e(w1e,ozo),e(h2,rzo),e(h2,qz),e(qz,tzo),e(h2,azo),e(U,nzo),e(U,p2),e(p2,A1e),e(A1e,szo),e(p2,lzo),e(p2,jz),e(jz,izo),e(p2,dzo),e(oo,czo),e(oo,_2),e(_2,fzo),e(_2,L1e),e(L1e,mzo),e(_2,gzo),e(_2,y1e),e(y1e,hzo),e(oo,pzo),M(u2,oo,null),b(f,rHe,u),b(f,Ed,u),e(Ed,b2),e(b2,x1e),M(x9,x1e,null),e(Ed,_zo),e(Ed,$1e),e($1e,uzo),b(f,tHe,u),b(f,qo,u),M($9,qo,null),e(qo,bzo),e(qo,Cd),e(Cd,vzo),e(Cd,Dz),e(Dz,Fzo),e(Cd,Tzo),e(Cd,Gz),e(Gz,Mzo),e(Cd,Ezo),e(qo,Czo),e(qo,k9),e(k9,wzo),e(k9,k1e),e(k1e,Azo),e(k9,Lzo),e(qo,yzo),e(qo,vt),M(S9,vt,null),e(vt,xzo),e(vt,S1e),e(S1e,$zo),e(vt,kzo),e(vt,wd),e(wd,Szo),e(wd,R1e),e(R1e,Rzo),e(wd,Pzo),e(wd,Oz),e(Oz,Bzo),e(wd,Izo),e(vt,Nzo),M(v2,vt,null),e(qo,qzo),e(qo,ro),M(R9,ro,null),e(ro,jzo),e(ro,P1e),e(P1e,Dzo),e(ro,Gzo),e(ro,Ka),e(Ka,Ozo),e(Ka,B1e),e(B1e,Vzo),e(Ka,Xzo),e(Ka,I1e),e(I1e,zzo),e(Ka,Wzo),e(Ka,N1e),e(N1e,Qzo),e(Ka,Uzo),e(ro,Hzo),e(ro,me),e(me,F2),e(F2,q1e),e(q1e,Jzo),e(F2,Yzo),e(F2,Vz),e(Vz,Kzo),e(F2,Zzo),e(me,eWo),e(me,T2),e(T2,j1e),e(j1e,oWo),e(T2,rWo),e(T2,Xz),e(Xz,tWo),e(T2,aWo),e(me,nWo),e(me,M2),e(M2,D1e),e(D1e,sWo),e(M2,lWo),e(M2,zz),e(zz,iWo),e(M2,dWo),e(me,cWo),e(me,E2),e(E2,G1e),e(G1e,fWo),e(E2,mWo),e(E2,Wz),e(Wz,gWo),e(E2,hWo),e(me,pWo),e(me,C2),e(C2,O1e),e(O1e,_Wo),e(C2,uWo),e(C2,Qz),e(Qz,bWo),e(C2,vWo),e(me,FWo),e(me,w2),e(w2,V1e),e(V1e,TWo),e(w2,MWo),e(w2,Uz),e(Uz,EWo),e(w2,CWo),e(me,wWo),e(me,A2),e(A2,X1e),e(X1e,AWo),e(A2,LWo),e(A2,Hz),e(Hz,yWo),e(A2,xWo),e(me,$Wo),e(me,L2),e(L2,z1e),e(z1e,kWo),e(L2,SWo),e(L2,Jz),e(Jz,RWo),e(L2,PWo),e(me,BWo),e(me,y2),e(y2,W1e),e(W1e,IWo),e(y2,NWo),e(y2,Yz),e(Yz,qWo),e(y2,jWo),e(me,DWo),e(me,x2),e(x2,Q1e),e(Q1e,GWo),e(x2,OWo),e(x2,Kz),e(Kz,VWo),e(x2,XWo),e(me,zWo),e(me,$2),e($2,U1e),e(U1e,WWo),e($2,QWo),e($2,Zz),e(Zz,UWo),e($2,HWo),e(me,JWo),e(me,k2),e(k2,H1e),e(H1e,YWo),e(k2,KWo),e(k2,eW),e(eW,ZWo),e(k2,eQo),e(me,oQo),e(me,S2),e(S2,J1e),e(J1e,rQo),e(S2,tQo),e(S2,oW),e(oW,aQo),e(S2,nQo),e(me,sQo),e(me,R2),e(R2,Y1e),e(Y1e,lQo),e(R2,iQo),e(R2,rW),e(rW,dQo),e(R2,cQo),e(me,fQo),e(me,P2),e(P2,K1e),e(K1e,mQo),e(P2,gQo),e(P2,tW),e(tW,hQo),e(P2,pQo),e(me,_Qo),e(me,B2),e(B2,Z1e),e(Z1e,uQo),e(B2,bQo),e(B2,aW),e(aW,vQo),e(B2,FQo),e(me,TQo),e(me,I2),e(I2,e8e),e(e8e,MQo),e(I2,EQo),e(I2,nW),e(nW,CQo),e(I2,wQo),e(me,AQo),e(me,N2),e(N2,o8e),e(o8e,LQo),e(N2,yQo),e(N2,sW),e(sW,xQo),e(N2,$Qo),e(me,kQo),e(me,q2),e(q2,r8e),e(r8e,SQo),e(q2,RQo),e(q2,lW),e(lW,PQo),e(q2,BQo),e(ro,IQo),e(ro,j2),e(j2,NQo),e(j2,t8e),e(t8e,qQo),e(j2,jQo),e(j2,a8e),e(a8e,DQo),e(ro,GQo),M(D2,ro,null),b(f,aHe,u),b(f,Ad,u),e(Ad,G2),e(G2,n8e),M(P9,n8e,null),e(Ad,OQo),e(Ad,s8e),e(s8e,VQo),b(f,nHe,u),b(f,jo,u),M(B9,jo,null),e(jo,XQo),e(jo,Ld),e(Ld,zQo),e(Ld,iW),e(iW,WQo),e(Ld,QQo),e(Ld,dW),e(dW,UQo),e(Ld,HQo),e(jo,JQo),e(jo,I9),e(I9,YQo),e(I9,l8e),e(l8e,KQo),e(I9,ZQo),e(jo,eUo),e(jo,Ft),M(N9,Ft,null),e(Ft,oUo),e(Ft,i8e),e(i8e,rUo),e(Ft,tUo),e(Ft,yd),e(yd,aUo),e(yd,d8e),e(d8e,nUo),e(yd,sUo),e(yd,cW),e(cW,lUo),e(yd,iUo),e(Ft,dUo),M(O2,Ft,null),e(jo,cUo),e(jo,to),M(q9,to,null),e(to,fUo),e(to,c8e),e(c8e,mUo),e(to,gUo),e(to,Za),e(Za,hUo),e(Za,f8e),e(f8e,pUo),e(Za,_Uo),e(Za,m8e),e(m8e,uUo),e(Za,bUo),e(Za,g8e),e(g8e,vUo),e(Za,FUo),e(to,TUo),e(to,N),e(N,V2),e(V2,h8e),e(h8e,MUo),e(V2,EUo),e(V2,fW),e(fW,CUo),e(V2,wUo),e(N,AUo),e(N,X2),e(X2,p8e),e(p8e,LUo),e(X2,yUo),e(X2,mW),e(mW,xUo),e(X2,$Uo),e(N,kUo),e(N,z2),e(z2,_8e),e(_8e,SUo),e(z2,RUo),e(z2,gW),e(gW,PUo),e(z2,BUo),e(N,IUo),e(N,W2),e(W2,u8e),e(u8e,NUo),e(W2,qUo),e(W2,hW),e(hW,jUo),e(W2,DUo),e(N,GUo),e(N,Q2),e(Q2,b8e),e(b8e,OUo),e(Q2,VUo),e(Q2,pW),e(pW,XUo),e(Q2,zUo),e(N,WUo),e(N,U2),e(U2,v8e),e(v8e,QUo),e(U2,UUo),e(U2,_W),e(_W,HUo),e(U2,JUo),e(N,YUo),e(N,H2),e(H2,F8e),e(F8e,KUo),e(H2,ZUo),e(H2,uW),e(uW,eHo),e(H2,oHo),e(N,rHo),e(N,J2),e(J2,T8e),e(T8e,tHo),e(J2,aHo),e(J2,bW),e(bW,nHo),e(J2,sHo),e(N,lHo),e(N,Y2),e(Y2,M8e),e(M8e,iHo),e(Y2,dHo),e(Y2,vW),e(vW,cHo),e(Y2,fHo),e(N,mHo),e(N,K2),e(K2,E8e),e(E8e,gHo),e(K2,hHo),e(K2,FW),e(FW,pHo),e(K2,_Ho),e(N,uHo),e(N,Z2),e(Z2,C8e),e(C8e,bHo),e(Z2,vHo),e(Z2,TW),e(TW,FHo),e(Z2,THo),e(N,MHo),e(N,ev),e(ev,w8e),e(w8e,EHo),e(ev,CHo),e(ev,MW),e(MW,wHo),e(ev,AHo),e(N,LHo),e(N,ov),e(ov,A8e),e(A8e,yHo),e(ov,xHo),e(ov,EW),e(EW,$Ho),e(ov,kHo),e(N,SHo),e(N,rv),e(rv,L8e),e(L8e,RHo),e(rv,PHo),e(rv,CW),e(CW,BHo),e(rv,IHo),e(N,NHo),e(N,tv),e(tv,y8e),e(y8e,qHo),e(tv,jHo),e(tv,wW),e(wW,DHo),e(tv,GHo),e(N,OHo),e(N,av),e(av,x8e),e(x8e,VHo),e(av,XHo),e(av,AW),e(AW,zHo),e(av,WHo),e(N,QHo),e(N,nv),e(nv,$8e),e($8e,UHo),e(nv,HHo),e(nv,LW),e(LW,JHo),e(nv,YHo),e(N,KHo),e(N,sv),e(sv,k8e),e(k8e,ZHo),e(sv,eJo),e(sv,yW),e(yW,oJo),e(sv,rJo),e(N,tJo),e(N,lv),e(lv,S8e),e(S8e,aJo),e(lv,nJo),e(lv,xW),e(xW,sJo),e(lv,lJo),e(N,iJo),e(N,iv),e(iv,R8e),e(R8e,dJo),e(iv,cJo),e(iv,$W),e($W,fJo),e(iv,mJo),e(N,gJo),e(N,dv),e(dv,P8e),e(P8e,hJo),e(dv,pJo),e(dv,kW),e(kW,_Jo),e(dv,uJo),e(N,bJo),e(N,cv),e(cv,B8e),e(B8e,vJo),e(cv,FJo),e(cv,SW),e(SW,TJo),e(cv,MJo),e(N,EJo),e(N,fv),e(fv,I8e),e(I8e,CJo),e(fv,wJo),e(fv,RW),e(RW,AJo),e(fv,LJo),e(N,yJo),e(N,mv),e(mv,N8e),e(N8e,xJo),e(mv,$Jo),e(mv,PW),e(PW,kJo),e(mv,SJo),e(N,RJo),e(N,gv),e(gv,q8e),e(q8e,PJo),e(gv,BJo),e(gv,BW),e(BW,IJo),e(gv,NJo),e(N,qJo),e(N,hv),e(hv,j8e),e(j8e,jJo),e(hv,DJo),e(hv,IW),e(IW,GJo),e(hv,OJo),e(N,VJo),e(N,pv),e(pv,D8e),e(D8e,XJo),e(pv,zJo),e(pv,NW),e(NW,WJo),e(pv,QJo),e(N,UJo),e(N,_v),e(_v,G8e),e(G8e,HJo),e(_v,JJo),e(_v,qW),e(qW,YJo),e(_v,KJo),e(N,ZJo),e(N,uv),e(uv,O8e),e(O8e,eYo),e(uv,oYo),e(uv,jW),e(jW,rYo),e(uv,tYo),e(N,aYo),e(N,bv),e(bv,V8e),e(V8e,nYo),e(bv,sYo),e(bv,DW),e(DW,lYo),e(bv,iYo),e(N,dYo),e(N,vv),e(vv,X8e),e(X8e,cYo),e(vv,fYo),e(vv,GW),e(GW,mYo),e(vv,gYo),e(N,hYo),e(N,Fv),e(Fv,z8e),e(z8e,pYo),e(Fv,_Yo),e(Fv,OW),e(OW,uYo),e(Fv,bYo),e(N,vYo),e(N,Tv),e(Tv,W8e),e(W8e,FYo),e(Tv,TYo),e(Tv,VW),e(VW,MYo),e(Tv,EYo),e(N,CYo),e(N,Mv),e(Mv,Q8e),e(Q8e,wYo),e(Mv,AYo),e(Mv,XW),e(XW,LYo),e(Mv,yYo),e(N,xYo),e(N,Ev),e(Ev,U8e),e(U8e,$Yo),e(Ev,kYo),e(Ev,zW),e(zW,SYo),e(Ev,RYo),e(N,PYo),e(N,Cv),e(Cv,H8e),e(H8e,BYo),e(Cv,IYo),e(Cv,WW),e(WW,NYo),e(Cv,qYo),e(N,jYo),e(N,wv),e(wv,J8e),e(J8e,DYo),e(wv,GYo),e(wv,QW),e(QW,OYo),e(wv,VYo),e(N,XYo),e(N,Av),e(Av,Y8e),e(Y8e,zYo),e(Av,WYo),e(Av,UW),e(UW,QYo),e(Av,UYo),e(N,HYo),e(N,Lv),e(Lv,K8e),e(K8e,JYo),e(Lv,YYo),e(Lv,HW),e(HW,KYo),e(Lv,ZYo),e(N,eKo),e(N,yv),e(yv,Z8e),e(Z8e,oKo),e(yv,rKo),e(yv,JW),e(JW,tKo),e(yv,aKo),e(N,nKo),e(N,xv),e(xv,ebe),e(ebe,sKo),e(xv,lKo),e(xv,YW),e(YW,iKo),e(xv,dKo),e(N,cKo),e(N,$v),e($v,obe),e(obe,fKo),e($v,mKo),e($v,KW),e(KW,gKo),e($v,hKo),e(N,pKo),e(N,kv),e(kv,rbe),e(rbe,_Ko),e(kv,uKo),e(kv,ZW),e(ZW,bKo),e(kv,vKo),e(N,FKo),e(N,Sv),e(Sv,tbe),e(tbe,TKo),e(Sv,MKo),e(Sv,eQ),e(eQ,EKo),e(Sv,CKo),e(N,wKo),e(N,Rv),e(Rv,abe),e(abe,AKo),e(Rv,LKo),e(Rv,oQ),e(oQ,yKo),e(Rv,xKo),e(N,$Ko),e(N,Pv),e(Pv,nbe),e(nbe,kKo),e(Pv,SKo),e(Pv,rQ),e(rQ,RKo),e(Pv,PKo),e(N,BKo),e(N,Bv),e(Bv,sbe),e(sbe,IKo),e(Bv,NKo),e(Bv,tQ),e(tQ,qKo),e(Bv,jKo),e(N,DKo),e(N,Iv),e(Iv,lbe),e(lbe,GKo),e(Iv,OKo),e(Iv,aQ),e(aQ,VKo),e(Iv,XKo),e(N,zKo),e(N,Nv),e(Nv,ibe),e(ibe,WKo),e(Nv,QKo),e(Nv,nQ),e(nQ,UKo),e(Nv,HKo),e(N,JKo),e(N,qv),e(qv,dbe),e(dbe,YKo),e(qv,KKo),e(qv,sQ),e(sQ,ZKo),e(qv,eZo),e(N,oZo),e(N,jv),e(jv,cbe),e(cbe,rZo),e(jv,tZo),e(jv,lQ),e(lQ,aZo),e(jv,nZo),e(N,sZo),e(N,Dv),e(Dv,fbe),e(fbe,lZo),e(Dv,iZo),e(Dv,iQ),e(iQ,dZo),e(Dv,cZo),e(to,fZo),e(to,Gv),e(Gv,mZo),e(Gv,mbe),e(mbe,gZo),e(Gv,hZo),e(Gv,gbe),e(gbe,pZo),e(to,_Zo),M(Ov,to,null),b(f,sHe,u),b(f,xd,u),e(xd,Vv),e(Vv,hbe),M(j9,hbe,null),e(xd,uZo),e(xd,pbe),e(pbe,bZo),b(f,lHe,u),b(f,Do,u),M(D9,Do,null),e(Do,vZo),e(Do,$d),e($d,FZo),e($d,dQ),e(dQ,TZo),e($d,MZo),e($d,cQ),e(cQ,EZo),e($d,CZo),e(Do,wZo),e(Do,G9),e(G9,AZo),e(G9,_be),e(_be,LZo),e(G9,yZo),e(Do,xZo),e(Do,Tt),M(O9,Tt,null),e(Tt,$Zo),e(Tt,ube),e(ube,kZo),e(Tt,SZo),e(Tt,kd),e(kd,RZo),e(kd,bbe),e(bbe,PZo),e(kd,BZo),e(kd,fQ),e(fQ,IZo),e(kd,NZo),e(Tt,qZo),M(Xv,Tt,null),e(Do,jZo),e(Do,ao),M(V9,ao,null),e(ao,DZo),e(ao,vbe),e(vbe,GZo),e(ao,OZo),e(ao,en),e(en,VZo),e(en,Fbe),e(Fbe,XZo),e(en,zZo),e(en,Tbe),e(Tbe,WZo),e(en,QZo),e(en,Mbe),e(Mbe,UZo),e(en,HZo),e(ao,JZo),e(ao,Z),e(Z,zv),e(zv,Ebe),e(Ebe,YZo),e(zv,KZo),e(zv,mQ),e(mQ,ZZo),e(zv,eer),e(Z,oer),e(Z,Wv),e(Wv,Cbe),e(Cbe,rer),e(Wv,ter),e(Wv,gQ),e(gQ,aer),e(Wv,ner),e(Z,ser),e(Z,Qv),e(Qv,wbe),e(wbe,ler),e(Qv,ier),e(Qv,hQ),e(hQ,der),e(Qv,cer),e(Z,fer),e(Z,Uv),e(Uv,Abe),e(Abe,mer),e(Uv,ger),e(Uv,pQ),e(pQ,her),e(Uv,per),e(Z,_er),e(Z,Hv),e(Hv,Lbe),e(Lbe,uer),e(Hv,ber),e(Hv,_Q),e(_Q,ver),e(Hv,Fer),e(Z,Ter),e(Z,Jv),e(Jv,ybe),e(ybe,Mer),e(Jv,Eer),e(Jv,uQ),e(uQ,Cer),e(Jv,wer),e(Z,Aer),e(Z,Yv),e(Yv,xbe),e(xbe,Ler),e(Yv,yer),e(Yv,bQ),e(bQ,xer),e(Yv,$er),e(Z,ker),e(Z,Kv),e(Kv,$be),e($be,Ser),e(Kv,Rer),e(Kv,vQ),e(vQ,Per),e(Kv,Ber),e(Z,Ier),e(Z,Zv),e(Zv,kbe),e(kbe,Ner),e(Zv,qer),e(Zv,FQ),e(FQ,jer),e(Zv,Der),e(Z,Ger),e(Z,e6),e(e6,Sbe),e(Sbe,Oer),e(e6,Ver),e(e6,TQ),e(TQ,Xer),e(e6,zer),e(Z,Wer),e(Z,o6),e(o6,Rbe),e(Rbe,Qer),e(o6,Uer),e(o6,MQ),e(MQ,Her),e(o6,Jer),e(Z,Yer),e(Z,r6),e(r6,Pbe),e(Pbe,Ker),e(r6,Zer),e(r6,EQ),e(EQ,eor),e(r6,oor),e(Z,ror),e(Z,t6),e(t6,Bbe),e(Bbe,tor),e(t6,aor),e(t6,CQ),e(CQ,nor),e(t6,sor),e(Z,lor),e(Z,a6),e(a6,Ibe),e(Ibe,ior),e(a6,dor),e(a6,wQ),e(wQ,cor),e(a6,mor),e(Z,gor),e(Z,n6),e(n6,Nbe),e(Nbe,hor),e(n6,por),e(n6,AQ),e(AQ,_or),e(n6,uor),e(Z,bor),e(Z,s6),e(s6,qbe),e(qbe,vor),e(s6,For),e(s6,LQ),e(LQ,Tor),e(s6,Mor),e(Z,Eor),e(Z,l6),e(l6,jbe),e(jbe,Cor),e(l6,wor),e(l6,yQ),e(yQ,Aor),e(l6,Lor),e(Z,yor),e(Z,i6),e(i6,Dbe),e(Dbe,xor),e(i6,$or),e(i6,xQ),e(xQ,kor),e(i6,Sor),e(Z,Ror),e(Z,d6),e(d6,Gbe),e(Gbe,Por),e(d6,Bor),e(d6,$Q),e($Q,Ior),e(d6,Nor),e(Z,qor),e(Z,c6),e(c6,Obe),e(Obe,jor),e(c6,Dor),e(c6,kQ),e(kQ,Gor),e(c6,Oor),e(Z,Vor),e(Z,f6),e(f6,Vbe),e(Vbe,Xor),e(f6,zor),e(f6,SQ),e(SQ,Wor),e(f6,Qor),e(Z,Uor),e(Z,m6),e(m6,Xbe),e(Xbe,Hor),e(m6,Jor),e(m6,RQ),e(RQ,Yor),e(m6,Kor),e(Z,Zor),e(Z,g6),e(g6,zbe),e(zbe,err),e(g6,orr),e(g6,PQ),e(PQ,rrr),e(g6,trr),e(Z,arr),e(Z,h6),e(h6,Wbe),e(Wbe,nrr),e(h6,srr),e(h6,BQ),e(BQ,lrr),e(h6,irr),e(Z,drr),e(Z,p6),e(p6,Qbe),e(Qbe,crr),e(p6,frr),e(p6,IQ),e(IQ,mrr),e(p6,grr),e(Z,hrr),e(Z,_6),e(_6,Ube),e(Ube,prr),e(_6,_rr),e(_6,NQ),e(NQ,urr),e(_6,brr),e(Z,vrr),e(Z,u6),e(u6,Hbe),e(Hbe,Frr),e(u6,Trr),e(u6,qQ),e(qQ,Mrr),e(u6,Err),e(Z,Crr),e(Z,b6),e(b6,Jbe),e(Jbe,wrr),e(b6,Arr),e(b6,jQ),e(jQ,Lrr),e(b6,yrr),e(Z,xrr),e(Z,v6),e(v6,Ybe),e(Ybe,$rr),e(v6,krr),e(v6,DQ),e(DQ,Srr),e(v6,Rrr),e(Z,Prr),e(Z,F6),e(F6,Kbe),e(Kbe,Brr),e(F6,Irr),e(F6,GQ),e(GQ,Nrr),e(F6,qrr),e(Z,jrr),e(Z,T6),e(T6,Zbe),e(Zbe,Drr),e(T6,Grr),e(T6,OQ),e(OQ,Orr),e(T6,Vrr),e(ao,Xrr),e(ao,M6),e(M6,zrr),e(M6,e2e),e(e2e,Wrr),e(M6,Qrr),e(M6,o2e),e(o2e,Urr),e(ao,Hrr),M(E6,ao,null),b(f,iHe,u),b(f,Sd,u),e(Sd,C6),e(C6,r2e),M(X9,r2e,null),e(Sd,Jrr),e(Sd,t2e),e(t2e,Yrr),b(f,dHe,u),b(f,Go,u),M(z9,Go,null),e(Go,Krr),e(Go,Rd),e(Rd,Zrr),e(Rd,VQ),e(VQ,etr),e(Rd,otr),e(Rd,XQ),e(XQ,rtr),e(Rd,ttr),e(Go,atr),e(Go,W9),e(W9,ntr),e(W9,a2e),e(a2e,str),e(W9,ltr),e(Go,itr),e(Go,Mt),M(Q9,Mt,null),e(Mt,dtr),e(Mt,n2e),e(n2e,ctr),e(Mt,ftr),e(Mt,Pd),e(Pd,mtr),e(Pd,s2e),e(s2e,gtr),e(Pd,htr),e(Pd,zQ),e(zQ,ptr),e(Pd,_tr),e(Mt,utr),M(w6,Mt,null),e(Go,btr),e(Go,no),M(U9,no,null),e(no,vtr),e(no,l2e),e(l2e,Ftr),e(no,Ttr),e(no,on),e(on,Mtr),e(on,i2e),e(i2e,Etr),e(on,Ctr),e(on,d2e),e(d2e,wtr),e(on,Atr),e(on,c2e),e(c2e,Ltr),e(on,ytr),e(no,xtr),e(no,Oo),e(Oo,A6),e(A6,f2e),e(f2e,$tr),e(A6,ktr),e(A6,WQ),e(WQ,Str),e(A6,Rtr),e(Oo,Ptr),e(Oo,L6),e(L6,m2e),e(m2e,Btr),e(L6,Itr),e(L6,QQ),e(QQ,Ntr),e(L6,qtr),e(Oo,jtr),e(Oo,y6),e(y6,g2e),e(g2e,Dtr),e(y6,Gtr),e(y6,UQ),e(UQ,Otr),e(y6,Vtr),e(Oo,Xtr),e(Oo,x6),e(x6,h2e),e(h2e,ztr),e(x6,Wtr),e(x6,HQ),e(HQ,Qtr),e(x6,Utr),e(Oo,Htr),e(Oo,$6),e($6,p2e),e(p2e,Jtr),e($6,Ytr),e($6,JQ),e(JQ,Ktr),e($6,Ztr),e(Oo,ear),e(Oo,k6),e(k6,_2e),e(_2e,oar),e(k6,rar),e(k6,YQ),e(YQ,tar),e(k6,aar),e(no,nar),e(no,S6),e(S6,sar),e(S6,u2e),e(u2e,lar),e(S6,iar),e(S6,b2e),e(b2e,dar),e(no,car),M(R6,no,null),b(f,cHe,u),b(f,Bd,u),e(Bd,P6),e(P6,v2e),M(H9,v2e,null),e(Bd,far),e(Bd,F2e),e(F2e,mar),b(f,fHe,u),b(f,Vo,u),M(J9,Vo,null),e(Vo,gar),e(Vo,Id),e(Id,har),e(Id,KQ),e(KQ,par),e(Id,_ar),e(Id,ZQ),e(ZQ,uar),e(Id,bar),e(Vo,Far),e(Vo,Y9),e(Y9,Tar),e(Y9,T2e),e(T2e,Mar),e(Y9,Ear),e(Vo,Car),e(Vo,Et),M(K9,Et,null),e(Et,war),e(Et,M2e),e(M2e,Aar),e(Et,Lar),e(Et,Nd),e(Nd,yar),e(Nd,E2e),e(E2e,xar),e(Nd,$ar),e(Nd,eU),e(eU,kar),e(Nd,Sar),e(Et,Rar),M(B6,Et,null),e(Vo,Par),e(Vo,so),M(Z9,so,null),e(so,Bar),e(so,C2e),e(C2e,Iar),e(so,Nar),e(so,rn),e(rn,qar),e(rn,w2e),e(w2e,jar),e(rn,Dar),e(rn,A2e),e(A2e,Gar),e(rn,Oar),e(rn,L2e),e(L2e,Var),e(rn,Xar),e(so,zar),e(so,H),e(H,I6),e(I6,y2e),e(y2e,War),e(I6,Qar),e(I6,oU),e(oU,Uar),e(I6,Har),e(H,Jar),e(H,N6),e(N6,x2e),e(x2e,Yar),e(N6,Kar),e(N6,rU),e(rU,Zar),e(N6,enr),e(H,onr),e(H,q6),e(q6,$2e),e($2e,rnr),e(q6,tnr),e(q6,tU),e(tU,anr),e(q6,nnr),e(H,snr),e(H,j6),e(j6,k2e),e(k2e,lnr),e(j6,inr),e(j6,aU),e(aU,dnr),e(j6,cnr),e(H,fnr),e(H,D6),e(D6,S2e),e(S2e,mnr),e(D6,gnr),e(D6,nU),e(nU,hnr),e(D6,pnr),e(H,_nr),e(H,G6),e(G6,R2e),e(R2e,unr),e(G6,bnr),e(G6,sU),e(sU,vnr),e(G6,Fnr),e(H,Tnr),e(H,O6),e(O6,P2e),e(P2e,Mnr),e(O6,Enr),e(O6,lU),e(lU,Cnr),e(O6,wnr),e(H,Anr),e(H,V6),e(V6,B2e),e(B2e,Lnr),e(V6,ynr),e(V6,iU),e(iU,xnr),e(V6,$nr),e(H,knr),e(H,X6),e(X6,I2e),e(I2e,Snr),e(X6,Rnr),e(X6,dU),e(dU,Pnr),e(X6,Bnr),e(H,Inr),e(H,z6),e(z6,N2e),e(N2e,Nnr),e(z6,qnr),e(z6,cU),e(cU,jnr),e(z6,Dnr),e(H,Gnr),e(H,W6),e(W6,q2e),e(q2e,Onr),e(W6,Vnr),e(W6,fU),e(fU,Xnr),e(W6,znr),e(H,Wnr),e(H,Q6),e(Q6,j2e),e(j2e,Qnr),e(Q6,Unr),e(Q6,mU),e(mU,Hnr),e(Q6,Jnr),e(H,Ynr),e(H,U6),e(U6,D2e),e(D2e,Knr),e(U6,Znr),e(U6,gU),e(gU,esr),e(U6,osr),e(H,rsr),e(H,H6),e(H6,G2e),e(G2e,tsr),e(H6,asr),e(H6,hU),e(hU,nsr),e(H6,ssr),e(H,lsr),e(H,J6),e(J6,O2e),e(O2e,isr),e(J6,dsr),e(J6,pU),e(pU,csr),e(J6,fsr),e(H,msr),e(H,Y6),e(Y6,V2e),e(V2e,gsr),e(Y6,hsr),e(Y6,_U),e(_U,psr),e(Y6,_sr),e(H,usr),e(H,K6),e(K6,X2e),e(X2e,bsr),e(K6,vsr),e(K6,uU),e(uU,Fsr),e(K6,Tsr),e(H,Msr),e(H,Z6),e(Z6,z2e),e(z2e,Esr),e(Z6,Csr),e(Z6,bU),e(bU,wsr),e(Z6,Asr),e(H,Lsr),e(H,eF),e(eF,W2e),e(W2e,ysr),e(eF,xsr),e(eF,vU),e(vU,$sr),e(eF,ksr),e(H,Ssr),e(H,oF),e(oF,Q2e),e(Q2e,Rsr),e(oF,Psr),e(oF,FU),e(FU,Bsr),e(oF,Isr),e(H,Nsr),e(H,rF),e(rF,U2e),e(U2e,qsr),e(rF,jsr),e(rF,TU),e(TU,Dsr),e(rF,Gsr),e(H,Osr),e(H,tF),e(tF,H2e),e(H2e,Vsr),e(tF,Xsr),e(tF,MU),e(MU,zsr),e(tF,Wsr),e(H,Qsr),e(H,aF),e(aF,J2e),e(J2e,Usr),e(aF,Hsr),e(aF,EU),e(EU,Jsr),e(aF,Ysr),e(H,Ksr),e(H,nF),e(nF,Y2e),e(Y2e,Zsr),e(nF,elr),e(nF,CU),e(CU,olr),e(nF,rlr),e(H,tlr),e(H,sF),e(sF,K2e),e(K2e,alr),e(sF,nlr),e(sF,wU),e(wU,slr),e(sF,llr),e(H,ilr),e(H,lF),e(lF,Z2e),e(Z2e,dlr),e(lF,clr),e(lF,AU),e(AU,flr),e(lF,mlr),e(H,glr),e(H,iF),e(iF,eve),e(eve,hlr),e(iF,plr),e(iF,LU),e(LU,_lr),e(iF,ulr),e(H,blr),e(H,dF),e(dF,ove),e(ove,vlr),e(dF,Flr),e(dF,yU),e(yU,Tlr),e(dF,Mlr),e(H,Elr),e(H,cF),e(cF,rve),e(rve,Clr),e(cF,wlr),e(cF,xU),e(xU,Alr),e(cF,Llr),e(H,ylr),e(H,fF),e(fF,tve),e(tve,xlr),e(fF,$lr),e(fF,$U),e($U,klr),e(fF,Slr),e(H,Rlr),e(H,mF),e(mF,ave),e(ave,Plr),e(mF,Blr),e(mF,kU),e(kU,Ilr),e(mF,Nlr),e(H,qlr),e(H,gF),e(gF,nve),e(nve,jlr),e(gF,Dlr),e(gF,SU),e(SU,Glr),e(gF,Olr),e(H,Vlr),e(H,hF),e(hF,sve),e(sve,Xlr),e(hF,zlr),e(hF,RU),e(RU,Wlr),e(hF,Qlr),e(H,Ulr),e(H,pF),e(pF,lve),e(lve,Hlr),e(pF,Jlr),e(pF,PU),e(PU,Ylr),e(pF,Klr),e(H,Zlr),e(H,_F),e(_F,ive),e(ive,eir),e(_F,oir),e(_F,BU),e(BU,rir),e(_F,tir),e(H,air),e(H,uF),e(uF,dve),e(dve,nir),e(uF,sir),e(uF,IU),e(IU,lir),e(uF,iir),e(H,dir),e(H,bF),e(bF,cve),e(cve,cir),e(bF,fir),e(bF,NU),e(NU,mir),e(bF,gir),e(so,hir),e(so,vF),e(vF,pir),e(vF,fve),e(fve,_ir),e(vF,uir),e(vF,mve),e(mve,bir),e(so,vir),M(FF,so,null),b(f,mHe,u),b(f,qd,u),e(qd,TF),e(TF,gve),M(ex,gve,null),e(qd,Fir),e(qd,hve),e(hve,Tir),b(f,gHe,u),b(f,Xo,u),M(ox,Xo,null),e(Xo,Mir),e(Xo,jd),e(jd,Eir),e(jd,qU),e(qU,Cir),e(jd,wir),e(jd,jU),e(jU,Air),e(jd,Lir),e(Xo,yir),e(Xo,rx),e(rx,xir),e(rx,pve),e(pve,$ir),e(rx,kir),e(Xo,Sir),e(Xo,Ct),M(tx,Ct,null),e(Ct,Rir),e(Ct,_ve),e(_ve,Pir),e(Ct,Bir),e(Ct,Dd),e(Dd,Iir),e(Dd,uve),e(uve,Nir),e(Dd,qir),e(Dd,DU),e(DU,jir),e(Dd,Dir),e(Ct,Gir),M(MF,Ct,null),e(Xo,Oir),e(Xo,lo),M(ax,lo,null),e(lo,Vir),e(lo,bve),e(bve,Xir),e(lo,zir),e(lo,tn),e(tn,Wir),e(tn,vve),e(vve,Qir),e(tn,Uir),e(tn,Fve),e(Fve,Hir),e(tn,Jir),e(tn,Tve),e(Tve,Yir),e(tn,Kir),e(lo,Zir),e(lo,V),e(V,EF),e(EF,Mve),e(Mve,edr),e(EF,odr),e(EF,GU),e(GU,rdr),e(EF,tdr),e(V,adr),e(V,CF),e(CF,Eve),e(Eve,ndr),e(CF,sdr),e(CF,OU),e(OU,ldr),e(CF,idr),e(V,ddr),e(V,wF),e(wF,Cve),e(Cve,cdr),e(wF,fdr),e(wF,VU),e(VU,mdr),e(wF,gdr),e(V,hdr),e(V,AF),e(AF,wve),e(wve,pdr),e(AF,_dr),e(AF,XU),e(XU,udr),e(AF,bdr),e(V,vdr),e(V,LF),e(LF,Ave),e(Ave,Fdr),e(LF,Tdr),e(LF,zU),e(zU,Mdr),e(LF,Edr),e(V,Cdr),e(V,yF),e(yF,Lve),e(Lve,wdr),e(yF,Adr),e(yF,WU),e(WU,Ldr),e(yF,ydr),e(V,xdr),e(V,xF),e(xF,yve),e(yve,$dr),e(xF,kdr),e(xF,QU),e(QU,Sdr),e(xF,Rdr),e(V,Pdr),e(V,$F),e($F,xve),e(xve,Bdr),e($F,Idr),e($F,UU),e(UU,Ndr),e($F,qdr),e(V,jdr),e(V,kF),e(kF,$ve),e($ve,Ddr),e(kF,Gdr),e(kF,HU),e(HU,Odr),e(kF,Vdr),e(V,Xdr),e(V,SF),e(SF,kve),e(kve,zdr),e(SF,Wdr),e(SF,JU),e(JU,Qdr),e(SF,Udr),e(V,Hdr),e(V,RF),e(RF,Sve),e(Sve,Jdr),e(RF,Ydr),e(RF,YU),e(YU,Kdr),e(RF,Zdr),e(V,ecr),e(V,PF),e(PF,Rve),e(Rve,ocr),e(PF,rcr),e(PF,KU),e(KU,tcr),e(PF,acr),e(V,ncr),e(V,BF),e(BF,Pve),e(Pve,scr),e(BF,lcr),e(BF,ZU),e(ZU,icr),e(BF,dcr),e(V,ccr),e(V,IF),e(IF,Bve),e(Bve,fcr),e(IF,mcr),e(IF,eH),e(eH,gcr),e(IF,hcr),e(V,pcr),e(V,NF),e(NF,Ive),e(Ive,_cr),e(NF,ucr),e(NF,oH),e(oH,bcr),e(NF,vcr),e(V,Fcr),e(V,qF),e(qF,Nve),e(Nve,Tcr),e(qF,Mcr),e(qF,rH),e(rH,Ecr),e(qF,Ccr),e(V,wcr),e(V,jF),e(jF,qve),e(qve,Acr),e(jF,Lcr),e(jF,tH),e(tH,ycr),e(jF,xcr),e(V,$cr),e(V,DF),e(DF,jve),e(jve,kcr),e(DF,Scr),e(DF,aH),e(aH,Rcr),e(DF,Pcr),e(V,Bcr),e(V,GF),e(GF,Dve),e(Dve,Icr),e(GF,Ncr),e(GF,nH),e(nH,qcr),e(GF,jcr),e(V,Dcr),e(V,OF),e(OF,Gve),e(Gve,Gcr),e(OF,Ocr),e(OF,sH),e(sH,Vcr),e(OF,Xcr),e(V,zcr),e(V,VF),e(VF,Ove),e(Ove,Wcr),e(VF,Qcr),e(VF,lH),e(lH,Ucr),e(VF,Hcr),e(V,Jcr),e(V,XF),e(XF,Vve),e(Vve,Ycr),e(XF,Kcr),e(XF,iH),e(iH,Zcr),e(XF,efr),e(V,ofr),e(V,zF),e(zF,Xve),e(Xve,rfr),e(zF,tfr),e(zF,dH),e(dH,afr),e(zF,nfr),e(V,sfr),e(V,WF),e(WF,zve),e(zve,lfr),e(WF,ifr),e(WF,cH),e(cH,dfr),e(WF,cfr),e(V,ffr),e(V,QF),e(QF,Wve),e(Wve,mfr),e(QF,gfr),e(QF,fH),e(fH,hfr),e(QF,pfr),e(V,_fr),e(V,UF),e(UF,Qve),e(Qve,ufr),e(UF,bfr),e(UF,mH),e(mH,vfr),e(UF,Ffr),e(V,Tfr),e(V,HF),e(HF,Uve),e(Uve,Mfr),e(HF,Efr),e(HF,gH),e(gH,Cfr),e(HF,wfr),e(V,Afr),e(V,JF),e(JF,Hve),e(Hve,Lfr),e(JF,yfr),e(JF,hH),e(hH,xfr),e(JF,$fr),e(V,kfr),e(V,YF),e(YF,Jve),e(Jve,Sfr),e(YF,Rfr),e(YF,pH),e(pH,Pfr),e(YF,Bfr),e(V,Ifr),e(V,KF),e(KF,Yve),e(Yve,Nfr),e(KF,qfr),e(KF,_H),e(_H,jfr),e(KF,Dfr),e(V,Gfr),e(V,ZF),e(ZF,Kve),e(Kve,Ofr),e(ZF,Vfr),e(ZF,uH),e(uH,Xfr),e(ZF,zfr),e(V,Wfr),e(V,eT),e(eT,Zve),e(Zve,Qfr),e(eT,Ufr),e(eT,bH),e(bH,Hfr),e(eT,Jfr),e(V,Yfr),e(V,oT),e(oT,e6e),e(e6e,Kfr),e(oT,Zfr),e(oT,vH),e(vH,emr),e(oT,omr),e(V,rmr),e(V,rT),e(rT,o6e),e(o6e,tmr),e(rT,amr),e(rT,FH),e(FH,nmr),e(rT,smr),e(V,lmr),e(V,tT),e(tT,r6e),e(r6e,imr),e(tT,dmr),e(tT,TH),e(TH,cmr),e(tT,fmr),e(V,mmr),e(V,aT),e(aT,t6e),e(t6e,gmr),e(aT,hmr),e(aT,MH),e(MH,pmr),e(aT,_mr),e(V,umr),e(V,nT),e(nT,a6e),e(a6e,bmr),e(nT,vmr),e(nT,EH),e(EH,Fmr),e(nT,Tmr),e(V,Mmr),e(V,sT),e(sT,n6e),e(n6e,Emr),e(sT,Cmr),e(sT,CH),e(CH,wmr),e(sT,Amr),e(V,Lmr),e(V,lT),e(lT,s6e),e(s6e,ymr),e(lT,xmr),e(lT,wH),e(wH,$mr),e(lT,kmr),e(V,Smr),e(V,iT),e(iT,l6e),e(l6e,Rmr),e(iT,Pmr),e(iT,AH),e(AH,Bmr),e(iT,Imr),e(V,Nmr),e(V,dT),e(dT,i6e),e(i6e,qmr),e(dT,jmr),e(dT,LH),e(LH,Dmr),e(dT,Gmr),e(V,Omr),e(V,cT),e(cT,d6e),e(d6e,Vmr),e(cT,Xmr),e(cT,yH),e(yH,zmr),e(cT,Wmr),e(V,Qmr),e(V,fT),e(fT,c6e),e(c6e,Umr),e(fT,Hmr),e(fT,xH),e(xH,Jmr),e(fT,Ymr),e(lo,Kmr),e(lo,mT),e(mT,Zmr),e(mT,f6e),e(f6e,egr),e(mT,ogr),e(mT,m6e),e(m6e,rgr),e(lo,tgr),M(gT,lo,null),b(f,hHe,u),b(f,Gd,u),e(Gd,hT),e(hT,g6e),M(nx,g6e,null),e(Gd,agr),e(Gd,h6e),e(h6e,ngr),b(f,pHe,u),b(f,zo,u),M(sx,zo,null),e(zo,sgr),e(zo,Od),e(Od,lgr),e(Od,$H),e($H,igr),e(Od,dgr),e(Od,kH),e(kH,cgr),e(Od,fgr),e(zo,mgr),e(zo,lx),e(lx,ggr),e(lx,p6e),e(p6e,hgr),e(lx,pgr),e(zo,_gr),e(zo,wt),M(ix,wt,null),e(wt,ugr),e(wt,_6e),e(_6e,bgr),e(wt,vgr),e(wt,Vd),e(Vd,Fgr),e(Vd,u6e),e(u6e,Tgr),e(Vd,Mgr),e(Vd,SH),e(SH,Egr),e(Vd,Cgr),e(wt,wgr),M(pT,wt,null),e(zo,Agr),e(zo,io),M(dx,io,null),e(io,Lgr),e(io,b6e),e(b6e,ygr),e(io,xgr),e(io,an),e(an,$gr),e(an,v6e),e(v6e,kgr),e(an,Sgr),e(an,F6e),e(F6e,Rgr),e(an,Pgr),e(an,T6e),e(T6e,Bgr),e(an,Igr),e(io,Ngr),e(io,M6e),e(M6e,_T),e(_T,E6e),e(E6e,qgr),e(_T,jgr),e(_T,RH),e(RH,Dgr),e(_T,Ggr),e(io,Ogr),e(io,uT),e(uT,Vgr),e(uT,C6e),e(C6e,Xgr),e(uT,zgr),e(uT,w6e),e(w6e,Wgr),e(io,Qgr),M(bT,io,null),b(f,_He,u),b(f,Xd,u),e(Xd,vT),e(vT,A6e),M(cx,A6e,null),e(Xd,Ugr),e(Xd,L6e),e(L6e,Hgr),b(f,uHe,u),b(f,Wo,u),M(fx,Wo,null),e(Wo,Jgr),e(Wo,zd),e(zd,Ygr),e(zd,PH),e(PH,Kgr),e(zd,Zgr),e(zd,BH),e(BH,ehr),e(zd,ohr),e(Wo,rhr),e(Wo,mx),e(mx,thr),e(mx,y6e),e(y6e,ahr),e(mx,nhr),e(Wo,shr),e(Wo,At),M(gx,At,null),e(At,lhr),e(At,x6e),e(x6e,ihr),e(At,dhr),e(At,Wd),e(Wd,chr),e(Wd,$6e),e($6e,fhr),e(Wd,mhr),e(Wd,IH),e(IH,ghr),e(Wd,hhr),e(At,phr),M(FT,At,null),e(Wo,_hr),e(Wo,co),M(hx,co,null),e(co,uhr),e(co,k6e),e(k6e,bhr),e(co,vhr),e(co,nn),e(nn,Fhr),e(nn,S6e),e(S6e,Thr),e(nn,Mhr),e(nn,R6e),e(R6e,Ehr),e(nn,Chr),e(nn,P6e),e(P6e,whr),e(nn,Ahr),e(co,Lhr),e(co,be),e(be,TT),e(TT,B6e),e(B6e,yhr),e(TT,xhr),e(TT,NH),e(NH,$hr),e(TT,khr),e(be,Shr),e(be,MT),e(MT,I6e),e(I6e,Rhr),e(MT,Phr),e(MT,qH),e(qH,Bhr),e(MT,Ihr),e(be,Nhr),e(be,ET),e(ET,N6e),e(N6e,qhr),e(ET,jhr),e(ET,jH),e(jH,Dhr),e(ET,Ghr),e(be,Ohr),e(be,CT),e(CT,q6e),e(q6e,Vhr),e(CT,Xhr),e(CT,DH),e(DH,zhr),e(CT,Whr),e(be,Qhr),e(be,fl),e(fl,j6e),e(j6e,Uhr),e(fl,Hhr),e(fl,GH),e(GH,Jhr),e(fl,Yhr),e(fl,OH),e(OH,Khr),e(fl,Zhr),e(be,epr),e(be,wT),e(wT,D6e),e(D6e,opr),e(wT,rpr),e(wT,VH),e(VH,tpr),e(wT,apr),e(be,npr),e(be,ml),e(ml,G6e),e(G6e,spr),e(ml,lpr),e(ml,XH),e(XH,ipr),e(ml,dpr),e(ml,zH),e(zH,cpr),e(ml,fpr),e(be,mpr),e(be,AT),e(AT,O6e),e(O6e,gpr),e(AT,hpr),e(AT,WH),e(WH,ppr),e(AT,_pr),e(be,upr),e(be,Lt),e(Lt,V6e),e(V6e,bpr),e(Lt,vpr),e(Lt,QH),e(QH,Fpr),e(Lt,Tpr),e(Lt,UH),e(UH,Mpr),e(Lt,Epr),e(Lt,HH),e(HH,Cpr),e(Lt,wpr),e(be,Apr),e(be,LT),e(LT,X6e),e(X6e,Lpr),e(LT,ypr),e(LT,JH),e(JH,xpr),e(LT,$pr),e(be,kpr),e(be,yT),e(yT,z6e),e(z6e,Spr),e(yT,Rpr),e(yT,YH),e(YH,Ppr),e(yT,Bpr),e(be,Ipr),e(be,xT),e(xT,W6e),e(W6e,Npr),e(xT,qpr),e(xT,KH),e(KH,jpr),e(xT,Dpr),e(be,Gpr),e(be,$T),e($T,Q6e),e(Q6e,Opr),e($T,Vpr),e($T,ZH),e(ZH,Xpr),e($T,zpr),e(be,Wpr),e(be,kT),e(kT,U6e),e(U6e,Qpr),e(kT,Upr),e(kT,eJ),e(eJ,Hpr),e(kT,Jpr),e(be,Ypr),e(be,ST),e(ST,H6e),e(H6e,Kpr),e(ST,Zpr),e(ST,oJ),e(oJ,e_r),e(ST,o_r),e(be,r_r),e(be,RT),e(RT,J6e),e(J6e,t_r),e(RT,a_r),e(RT,rJ),e(rJ,n_r),e(RT,s_r),e(be,l_r),e(be,PT),e(PT,Y6e),e(Y6e,i_r),e(PT,d_r),e(PT,tJ),e(tJ,c_r),e(PT,f_r),e(co,m_r),e(co,BT),e(BT,g_r),e(BT,K6e),e(K6e,h_r),e(BT,p_r),e(BT,Z6e),e(Z6e,__r),e(co,u_r),M(IT,co,null),b(f,bHe,u),b(f,Qd,u),e(Qd,NT),e(NT,eFe),M(px,eFe,null),e(Qd,b_r),e(Qd,oFe),e(oFe,v_r),b(f,vHe,u),b(f,Qo,u),M(_x,Qo,null),e(Qo,F_r),e(Qo,Ud),e(Ud,T_r),e(Ud,aJ),e(aJ,M_r),e(Ud,E_r),e(Ud,nJ),e(nJ,C_r),e(Ud,w_r),e(Qo,A_r),e(Qo,ux),e(ux,L_r),e(ux,rFe),e(rFe,y_r),e(ux,x_r),e(Qo,$_r),e(Qo,yt),M(bx,yt,null),e(yt,k_r),e(yt,tFe),e(tFe,S_r),e(yt,R_r),e(yt,Hd),e(Hd,P_r),e(Hd,aFe),e(aFe,B_r),e(Hd,I_r),e(Hd,sJ),e(sJ,N_r),e(Hd,q_r),e(yt,j_r),M(qT,yt,null),e(Qo,D_r),e(Qo,fo),M(vx,fo,null),e(fo,G_r),e(fo,nFe),e(nFe,O_r),e(fo,V_r),e(fo,sn),e(sn,X_r),e(sn,sFe),e(sFe,z_r),e(sn,W_r),e(sn,lFe),e(lFe,Q_r),e(sn,U_r),e(sn,iFe),e(iFe,H_r),e(sn,J_r),e(fo,Y_r),e(fo,dFe),e(dFe,jT),e(jT,cFe),e(cFe,K_r),e(jT,Z_r),e(jT,lJ),e(lJ,eur),e(jT,our),e(fo,rur),e(fo,DT),e(DT,tur),e(DT,fFe),e(fFe,aur),e(DT,nur),e(DT,mFe),e(mFe,sur),e(fo,lur),M(GT,fo,null),b(f,FHe,u),b(f,Jd,u),e(Jd,OT),e(OT,gFe),M(Fx,gFe,null),e(Jd,iur),e(Jd,hFe),e(hFe,dur),b(f,THe,u),b(f,Uo,u),M(Tx,Uo,null),e(Uo,cur),e(Uo,Yd),e(Yd,fur),e(Yd,iJ),e(iJ,mur),e(Yd,gur),e(Yd,dJ),e(dJ,hur),e(Yd,pur),e(Uo,_ur),e(Uo,Mx),e(Mx,uur),e(Mx,pFe),e(pFe,bur),e(Mx,vur),e(Uo,Fur),e(Uo,xt),M(Ex,xt,null),e(xt,Tur),e(xt,_Fe),e(_Fe,Mur),e(xt,Eur),e(xt,Kd),e(Kd,Cur),e(Kd,uFe),e(uFe,wur),e(Kd,Aur),e(Kd,cJ),e(cJ,Lur),e(Kd,yur),e(xt,xur),M(VT,xt,null),e(Uo,$ur),e(Uo,mo),M(Cx,mo,null),e(mo,kur),e(mo,bFe),e(bFe,Sur),e(mo,Rur),e(mo,ln),e(ln,Pur),e(ln,vFe),e(vFe,Bur),e(ln,Iur),e(ln,FFe),e(FFe,Nur),e(ln,qur),e(ln,TFe),e(TFe,jur),e(ln,Dur),e(mo,Gur),e(mo,MFe),e(MFe,XT),e(XT,EFe),e(EFe,Our),e(XT,Vur),e(XT,fJ),e(fJ,Xur),e(XT,zur),e(mo,Wur),e(mo,zT),e(zT,Qur),e(zT,CFe),e(CFe,Uur),e(zT,Hur),e(zT,wFe),e(wFe,Jur),e(mo,Yur),M(WT,mo,null),b(f,MHe,u),b(f,Zd,u),e(Zd,QT),e(QT,AFe),M(wx,AFe,null),e(Zd,Kur),e(Zd,LFe),e(LFe,Zur),b(f,EHe,u),b(f,Ho,u),M(Ax,Ho,null),e(Ho,e1r),e(Ho,ec),e(ec,o1r),e(ec,mJ),e(mJ,r1r),e(ec,t1r),e(ec,gJ),e(gJ,a1r),e(ec,n1r),e(Ho,s1r),e(Ho,Lx),e(Lx,l1r),e(Lx,yFe),e(yFe,i1r),e(Lx,d1r),e(Ho,c1r),e(Ho,$t),M(yx,$t,null),e($t,f1r),e($t,xFe),e(xFe,m1r),e($t,g1r),e($t,oc),e(oc,h1r),e(oc,$Fe),e($Fe,p1r),e(oc,_1r),e(oc,hJ),e(hJ,u1r),e(oc,b1r),e($t,v1r),M(UT,$t,null),e(Ho,F1r),e(Ho,go),M(xx,go,null),e(go,T1r),e(go,kFe),e(kFe,M1r),e(go,E1r),e(go,dn),e(dn,C1r),e(dn,SFe),e(SFe,w1r),e(dn,A1r),e(dn,RFe),e(RFe,L1r),e(dn,y1r),e(dn,PFe),e(PFe,x1r),e(dn,$1r),e(go,k1r),e(go,BFe),e(BFe,HT),e(HT,IFe),e(IFe,S1r),e(HT,R1r),e(HT,pJ),e(pJ,P1r),e(HT,B1r),e(go,I1r),e(go,JT),e(JT,N1r),e(JT,NFe),e(NFe,q1r),e(JT,j1r),e(JT,qFe),e(qFe,D1r),e(go,G1r),M(YT,go,null),b(f,CHe,u),b(f,rc,u),e(rc,KT),e(KT,jFe),M($x,jFe,null),e(rc,O1r),e(rc,DFe),e(DFe,V1r),b(f,wHe,u),b(f,Jo,u),M(kx,Jo,null),e(Jo,X1r),e(Jo,tc),e(tc,z1r),e(tc,_J),e(_J,W1r),e(tc,Q1r),e(tc,uJ),e(uJ,U1r),e(tc,H1r),e(Jo,J1r),e(Jo,Sx),e(Sx,Y1r),e(Sx,GFe),e(GFe,K1r),e(Sx,Z1r),e(Jo,e8r),e(Jo,kt),M(Rx,kt,null),e(kt,o8r),e(kt,OFe),e(OFe,r8r),e(kt,t8r),e(kt,ac),e(ac,a8r),e(ac,VFe),e(VFe,n8r),e(ac,s8r),e(ac,bJ),e(bJ,l8r),e(ac,i8r),e(kt,d8r),M(ZT,kt,null),e(Jo,c8r),e(Jo,ho),M(Px,ho,null),e(ho,f8r),e(ho,XFe),e(XFe,m8r),e(ho,g8r),e(ho,cn),e(cn,h8r),e(cn,zFe),e(zFe,p8r),e(cn,_8r),e(cn,WFe),e(WFe,u8r),e(cn,b8r),e(cn,QFe),e(QFe,v8r),e(cn,F8r),e(ho,T8r),e(ho,Pe),e(Pe,eM),e(eM,UFe),e(UFe,M8r),e(eM,E8r),e(eM,vJ),e(vJ,C8r),e(eM,w8r),e(Pe,A8r),e(Pe,oM),e(oM,HFe),e(HFe,L8r),e(oM,y8r),e(oM,FJ),e(FJ,x8r),e(oM,$8r),e(Pe,k8r),e(Pe,rM),e(rM,JFe),e(JFe,S8r),e(rM,R8r),e(rM,TJ),e(TJ,P8r),e(rM,B8r),e(Pe,I8r),e(Pe,tM),e(tM,YFe),e(YFe,N8r),e(tM,q8r),e(tM,MJ),e(MJ,j8r),e(tM,D8r),e(Pe,G8r),e(Pe,aM),e(aM,KFe),e(KFe,O8r),e(aM,V8r),e(aM,EJ),e(EJ,X8r),e(aM,z8r),e(Pe,W8r),e(Pe,nM),e(nM,ZFe),e(ZFe,Q8r),e(nM,U8r),e(nM,CJ),e(CJ,H8r),e(nM,J8r),e(Pe,Y8r),e(Pe,sM),e(sM,eTe),e(eTe,K8r),e(sM,Z8r),e(sM,wJ),e(wJ,ebr),e(sM,obr),e(Pe,rbr),e(Pe,lM),e(lM,oTe),e(oTe,tbr),e(lM,abr),e(lM,AJ),e(AJ,nbr),e(lM,sbr),e(Pe,lbr),e(Pe,iM),e(iM,rTe),e(rTe,ibr),e(iM,dbr),e(iM,LJ),e(LJ,cbr),e(iM,fbr),e(ho,mbr),e(ho,dM),e(dM,gbr),e(dM,tTe),e(tTe,hbr),e(dM,pbr),e(dM,aTe),e(aTe,_br),e(ho,ubr),M(cM,ho,null),b(f,AHe,u),b(f,nc,u),e(nc,fM),e(fM,nTe),M(Bx,nTe,null),e(nc,bbr),e(nc,sTe),e(sTe,vbr),b(f,LHe,u),b(f,Yo,u),M(Ix,Yo,null),e(Yo,Fbr),e(Yo,sc),e(sc,Tbr),e(sc,yJ),e(yJ,Mbr),e(sc,Ebr),e(sc,xJ),e(xJ,Cbr),e(sc,wbr),e(Yo,Abr),e(Yo,Nx),e(Nx,Lbr),e(Nx,lTe),e(lTe,ybr),e(Nx,xbr),e(Yo,$br),e(Yo,St),M(qx,St,null),e(St,kbr),e(St,iTe),e(iTe,Sbr),e(St,Rbr),e(St,lc),e(lc,Pbr),e(lc,dTe),e(dTe,Bbr),e(lc,Ibr),e(lc,$J),e($J,Nbr),e(lc,qbr),e(St,jbr),M(mM,St,null),e(Yo,Dbr),e(Yo,po),M(jx,po,null),e(po,Gbr),e(po,cTe),e(cTe,Obr),e(po,Vbr),e(po,fn),e(fn,Xbr),e(fn,fTe),e(fTe,zbr),e(fn,Wbr),e(fn,mTe),e(mTe,Qbr),e(fn,Ubr),e(fn,gTe),e(gTe,Hbr),e(fn,Jbr),e(po,Ybr),e(po,it),e(it,gM),e(gM,hTe),e(hTe,Kbr),e(gM,Zbr),e(gM,kJ),e(kJ,e2r),e(gM,o2r),e(it,r2r),e(it,hM),e(hM,pTe),e(pTe,t2r),e(hM,a2r),e(hM,SJ),e(SJ,n2r),e(hM,s2r),e(it,l2r),e(it,pM),e(pM,_Te),e(_Te,i2r),e(pM,d2r),e(pM,RJ),e(RJ,c2r),e(pM,f2r),e(it,m2r),e(it,_M),e(_M,uTe),e(uTe,g2r),e(_M,h2r),e(_M,PJ),e(PJ,p2r),e(_M,_2r),e(it,u2r),e(it,uM),e(uM,bTe),e(bTe,b2r),e(uM,v2r),e(uM,BJ),e(BJ,F2r),e(uM,T2r),e(po,M2r),e(po,bM),e(bM,E2r),e(bM,vTe),e(vTe,C2r),e(bM,w2r),e(bM,FTe),e(FTe,A2r),e(po,L2r),M(vM,po,null),b(f,yHe,u),b(f,ic,u),e(ic,FM),e(FM,TTe),M(Dx,TTe,null),e(ic,y2r),e(ic,MTe),e(MTe,x2r),b(f,xHe,u),b(f,Ko,u),M(Gx,Ko,null),e(Ko,$2r),e(Ko,dc),e(dc,k2r),e(dc,IJ),e(IJ,S2r),e(dc,R2r),e(dc,NJ),e(NJ,P2r),e(dc,B2r),e(Ko,I2r),e(Ko,Ox),e(Ox,N2r),e(Ox,ETe),e(ETe,q2r),e(Ox,j2r),e(Ko,D2r),e(Ko,Rt),M(Vx,Rt,null),e(Rt,G2r),e(Rt,CTe),e(CTe,O2r),e(Rt,V2r),e(Rt,cc),e(cc,X2r),e(cc,wTe),e(wTe,z2r),e(cc,W2r),e(cc,qJ),e(qJ,Q2r),e(cc,U2r),e(Rt,H2r),M(TM,Rt,null),e(Ko,J2r),e(Ko,_o),M(Xx,_o,null),e(_o,Y2r),e(_o,ATe),e(ATe,K2r),e(_o,Z2r),e(_o,mn),e(mn,evr),e(mn,LTe),e(LTe,ovr),e(mn,rvr),e(mn,yTe),e(yTe,tvr),e(mn,avr),e(mn,xTe),e(xTe,nvr),e(mn,svr),e(_o,lvr),e(_o,Le),e(Le,MM),e(MM,$Te),e($Te,ivr),e(MM,dvr),e(MM,jJ),e(jJ,cvr),e(MM,fvr),e(Le,mvr),e(Le,EM),e(EM,kTe),e(kTe,gvr),e(EM,hvr),e(EM,DJ),e(DJ,pvr),e(EM,_vr),e(Le,uvr),e(Le,CM),e(CM,STe),e(STe,bvr),e(CM,vvr),e(CM,GJ),e(GJ,Fvr),e(CM,Tvr),e(Le,Mvr),e(Le,wM),e(wM,RTe),e(RTe,Evr),e(wM,Cvr),e(wM,OJ),e(OJ,wvr),e(wM,Avr),e(Le,Lvr),e(Le,AM),e(AM,PTe),e(PTe,yvr),e(AM,xvr),e(AM,VJ),e(VJ,$vr),e(AM,kvr),e(Le,Svr),e(Le,LM),e(LM,BTe),e(BTe,Rvr),e(LM,Pvr),e(LM,XJ),e(XJ,Bvr),e(LM,Ivr),e(Le,Nvr),e(Le,yM),e(yM,ITe),e(ITe,qvr),e(yM,jvr),e(yM,zJ),e(zJ,Dvr),e(yM,Gvr),e(Le,Ovr),e(Le,xM),e(xM,NTe),e(NTe,Vvr),e(xM,Xvr),e(xM,WJ),e(WJ,zvr),e(xM,Wvr),e(Le,Qvr),e(Le,$M),e($M,qTe),e(qTe,Uvr),e($M,Hvr),e($M,QJ),e(QJ,Jvr),e($M,Yvr),e(Le,Kvr),e(Le,kM),e(kM,jTe),e(jTe,Zvr),e(kM,e6r),e(kM,UJ),e(UJ,o6r),e(kM,r6r),e(_o,t6r),e(_o,SM),e(SM,a6r),e(SM,DTe),e(DTe,n6r),e(SM,s6r),e(SM,GTe),e(GTe,l6r),e(_o,i6r),M(RM,_o,null),b(f,$He,u),b(f,fc,u),e(fc,PM),e(PM,OTe),M(zx,OTe,null),e(fc,d6r),e(fc,VTe),e(VTe,c6r),b(f,kHe,u),b(f,Zo,u),M(Wx,Zo,null),e(Zo,f6r),e(Zo,mc),e(mc,m6r),e(mc,HJ),e(HJ,g6r),e(mc,h6r),e(mc,JJ),e(JJ,p6r),e(mc,_6r),e(Zo,u6r),e(Zo,Qx),e(Qx,b6r),e(Qx,XTe),e(XTe,v6r),e(Qx,F6r),e(Zo,T6r),e(Zo,Pt),M(Ux,Pt,null),e(Pt,M6r),e(Pt,zTe),e(zTe,E6r),e(Pt,C6r),e(Pt,gc),e(gc,w6r),e(gc,WTe),e(WTe,A6r),e(gc,L6r),e(gc,YJ),e(YJ,y6r),e(gc,x6r),e(Pt,$6r),M(BM,Pt,null),e(Zo,k6r),e(Zo,uo),M(Hx,uo,null),e(uo,S6r),e(uo,QTe),e(QTe,R6r),e(uo,P6r),e(uo,gn),e(gn,B6r),e(gn,UTe),e(UTe,I6r),e(gn,N6r),e(gn,HTe),e(HTe,q6r),e(gn,j6r),e(gn,JTe),e(JTe,D6r),e(gn,G6r),e(uo,O6r),e(uo,Jx),e(Jx,IM),e(IM,YTe),e(YTe,V6r),e(IM,X6r),e(IM,KJ),e(KJ,z6r),e(IM,W6r),e(Jx,Q6r),e(Jx,NM),e(NM,KTe),e(KTe,U6r),e(NM,H6r),e(NM,ZJ),e(ZJ,J6r),e(NM,Y6r),e(uo,K6r),e(uo,qM),e(qM,Z6r),e(qM,ZTe),e(ZTe,eFr),e(qM,oFr),e(qM,eMe),e(eMe,rFr),e(uo,tFr),M(jM,uo,null),b(f,SHe,u),b(f,hc,u),e(hc,DM),e(DM,oMe),M(Yx,oMe,null),e(hc,aFr),e(hc,rMe),e(rMe,nFr),b(f,RHe,u),b(f,er,u),M(Kx,er,null),e(er,sFr),e(er,pc),e(pc,lFr),e(pc,eY),e(eY,iFr),e(pc,dFr),e(pc,oY),e(oY,cFr),e(pc,fFr),e(er,mFr),e(er,Zx),e(Zx,gFr),e(Zx,tMe),e(tMe,hFr),e(Zx,pFr),e(er,_Fr),e(er,Bt),M(e$,Bt,null),e(Bt,uFr),e(Bt,aMe),e(aMe,bFr),e(Bt,vFr),e(Bt,_c),e(_c,FFr),e(_c,nMe),e(nMe,TFr),e(_c,MFr),e(_c,rY),e(rY,EFr),e(_c,CFr),e(Bt,wFr),M(GM,Bt,null),e(er,AFr),e(er,bo),M(o$,bo,null),e(bo,LFr),e(bo,sMe),e(sMe,yFr),e(bo,xFr),e(bo,hn),e(hn,$Fr),e(hn,lMe),e(lMe,kFr),e(hn,SFr),e(hn,iMe),e(iMe,RFr),e(hn,PFr),e(hn,dMe),e(dMe,BFr),e(hn,IFr),e(bo,NFr),e(bo,dt),e(dt,OM),e(OM,cMe),e(cMe,qFr),e(OM,jFr),e(OM,tY),e(tY,DFr),e(OM,GFr),e(dt,OFr),e(dt,VM),e(VM,fMe),e(fMe,VFr),e(VM,XFr),e(VM,aY),e(aY,zFr),e(VM,WFr),e(dt,QFr),e(dt,XM),e(XM,mMe),e(mMe,UFr),e(XM,HFr),e(XM,nY),e(nY,JFr),e(XM,YFr),e(dt,KFr),e(dt,zM),e(zM,gMe),e(gMe,ZFr),e(zM,eTr),e(zM,sY),e(sY,oTr),e(zM,rTr),e(dt,tTr),e(dt,WM),e(WM,hMe),e(hMe,aTr),e(WM,nTr),e(WM,lY),e(lY,sTr),e(WM,lTr),e(bo,iTr),e(bo,QM),e(QM,dTr),e(QM,pMe),e(pMe,cTr),e(QM,fTr),e(QM,_Me),e(_Me,mTr),e(bo,gTr),M(UM,bo,null),b(f,PHe,u),b(f,uc,u),e(uc,HM),e(HM,uMe),M(r$,uMe,null),e(uc,hTr),e(uc,bMe),e(bMe,pTr),b(f,BHe,u),b(f,or,u),M(t$,or,null),e(or,_Tr),e(or,bc),e(bc,uTr),e(bc,iY),e(iY,bTr),e(bc,vTr),e(bc,dY),e(dY,FTr),e(bc,TTr),e(or,MTr),e(or,a$),e(a$,ETr),e(a$,vMe),e(vMe,CTr),e(a$,wTr),e(or,ATr),e(or,It),M(n$,It,null),e(It,LTr),e(It,FMe),e(FMe,yTr),e(It,xTr),e(It,vc),e(vc,$Tr),e(vc,TMe),e(TMe,kTr),e(vc,STr),e(vc,cY),e(cY,RTr),e(vc,PTr),e(It,BTr),M(JM,It,null),e(or,ITr),e(or,vo),M(s$,vo,null),e(vo,NTr),e(vo,MMe),e(MMe,qTr),e(vo,jTr),e(vo,pn),e(pn,DTr),e(pn,EMe),e(EMe,GTr),e(pn,OTr),e(pn,CMe),e(CMe,VTr),e(pn,XTr),e(pn,wMe),e(wMe,zTr),e(pn,WTr),e(vo,QTr),e(vo,_n),e(_n,YM),e(YM,AMe),e(AMe,UTr),e(YM,HTr),e(YM,fY),e(fY,JTr),e(YM,YTr),e(_n,KTr),e(_n,KM),e(KM,LMe),e(LMe,ZTr),e(KM,eMr),e(KM,mY),e(mY,oMr),e(KM,rMr),e(_n,tMr),e(_n,ZM),e(ZM,yMe),e(yMe,aMr),e(ZM,nMr),e(ZM,gY),e(gY,sMr),e(ZM,lMr),e(_n,iMr),e(_n,eE),e(eE,xMe),e(xMe,dMr),e(eE,cMr),e(eE,hY),e(hY,fMr),e(eE,mMr),e(vo,gMr),e(vo,oE),e(oE,hMr),e(oE,$Me),e($Me,pMr),e(oE,_Mr),e(oE,kMe),e(kMe,uMr),e(vo,bMr),M(rE,vo,null),b(f,IHe,u),b(f,Fc,u),e(Fc,tE),e(tE,SMe),M(l$,SMe,null),e(Fc,vMr),e(Fc,RMe),e(RMe,FMr),b(f,NHe,u),b(f,rr,u),M(i$,rr,null),e(rr,TMr),e(rr,Tc),e(Tc,MMr),e(Tc,pY),e(pY,EMr),e(Tc,CMr),e(Tc,_Y),e(_Y,wMr),e(Tc,AMr),e(rr,LMr),e(rr,d$),e(d$,yMr),e(d$,PMe),e(PMe,xMr),e(d$,$Mr),e(rr,kMr),e(rr,Nt),M(c$,Nt,null),e(Nt,SMr),e(Nt,BMe),e(BMe,RMr),e(Nt,PMr),e(Nt,Mc),e(Mc,BMr),e(Mc,IMe),e(IMe,IMr),e(Mc,NMr),e(Mc,uY),e(uY,qMr),e(Mc,jMr),e(Nt,DMr),M(aE,Nt,null),e(rr,GMr),e(rr,Fo),M(f$,Fo,null),e(Fo,OMr),e(Fo,NMe),e(NMe,VMr),e(Fo,XMr),e(Fo,un),e(un,zMr),e(un,qMe),e(qMe,WMr),e(un,QMr),e(un,jMe),e(jMe,UMr),e(un,HMr),e(un,DMe),e(DMe,JMr),e(un,YMr),e(Fo,KMr),e(Fo,m$),e(m$,nE),e(nE,GMe),e(GMe,ZMr),e(nE,eEr),e(nE,bY),e(bY,oEr),e(nE,rEr),e(m$,tEr),e(m$,sE),e(sE,OMe),e(OMe,aEr),e(sE,nEr),e(sE,vY),e(vY,sEr),e(sE,lEr),e(Fo,iEr),e(Fo,lE),e(lE,dEr),e(lE,VMe),e(VMe,cEr),e(lE,fEr),e(lE,XMe),e(XMe,mEr),e(Fo,gEr),M(iE,Fo,null),b(f,qHe,u),b(f,Ec,u),e(Ec,dE),e(dE,zMe),M(g$,zMe,null),e(Ec,hEr),e(Ec,WMe),e(WMe,pEr),b(f,jHe,u),b(f,tr,u),M(h$,tr,null),e(tr,_Er),e(tr,Cc),e(Cc,uEr),e(Cc,FY),e(FY,bEr),e(Cc,vEr),e(Cc,TY),e(TY,FEr),e(Cc,TEr),e(tr,MEr),e(tr,p$),e(p$,EEr),e(p$,QMe),e(QMe,CEr),e(p$,wEr),e(tr,AEr),e(tr,qt),M(_$,qt,null),e(qt,LEr),e(qt,UMe),e(UMe,yEr),e(qt,xEr),e(qt,wc),e(wc,$Er),e(wc,HMe),e(HMe,kEr),e(wc,SEr),e(wc,MY),e(MY,REr),e(wc,PEr),e(qt,BEr),M(cE,qt,null),e(tr,IEr),e(tr,To),M(u$,To,null),e(To,NEr),e(To,JMe),e(JMe,qEr),e(To,jEr),e(To,bn),e(bn,DEr),e(bn,YMe),e(YMe,GEr),e(bn,OEr),e(bn,KMe),e(KMe,VEr),e(bn,XEr),e(bn,ZMe),e(ZMe,zEr),e(bn,WEr),e(To,QEr),e(To,eEe),e(eEe,fE),e(fE,oEe),e(oEe,UEr),e(fE,HEr),e(fE,EY),e(EY,JEr),e(fE,YEr),e(To,KEr),e(To,mE),e(mE,ZEr),e(mE,rEe),e(rEe,e4r),e(mE,o4r),e(mE,tEe),e(tEe,r4r),e(To,t4r),M(gE,To,null),b(f,DHe,u),b(f,Ac,u),e(Ac,hE),e(hE,aEe),M(b$,aEe,null),e(Ac,a4r),e(Ac,nEe),e(nEe,n4r),b(f,GHe,u),b(f,ar,u),M(v$,ar,null),e(ar,s4r),e(ar,Lc),e(Lc,l4r),e(Lc,CY),e(CY,i4r),e(Lc,d4r),e(Lc,wY),e(wY,c4r),e(Lc,f4r),e(ar,m4r),e(ar,F$),e(F$,g4r),e(F$,sEe),e(sEe,h4r),e(F$,p4r),e(ar,_4r),e(ar,jt),M(T$,jt,null),e(jt,u4r),e(jt,lEe),e(lEe,b4r),e(jt,v4r),e(jt,yc),e(yc,F4r),e(yc,iEe),e(iEe,T4r),e(yc,M4r),e(yc,AY),e(AY,E4r),e(yc,C4r),e(jt,w4r),M(pE,jt,null),e(ar,A4r),e(ar,Mo),M(M$,Mo,null),e(Mo,L4r),e(Mo,dEe),e(dEe,y4r),e(Mo,x4r),e(Mo,vn),e(vn,$4r),e(vn,cEe),e(cEe,k4r),e(vn,S4r),e(vn,fEe),e(fEe,R4r),e(vn,P4r),e(vn,mEe),e(mEe,B4r),e(vn,I4r),e(Mo,N4r),e(Mo,ct),e(ct,_E),e(_E,gEe),e(gEe,q4r),e(_E,j4r),e(_E,LY),e(LY,D4r),e(_E,G4r),e(ct,O4r),e(ct,uE),e(uE,hEe),e(hEe,V4r),e(uE,X4r),e(uE,yY),e(yY,z4r),e(uE,W4r),e(ct,Q4r),e(ct,bE),e(bE,pEe),e(pEe,U4r),e(bE,H4r),e(bE,xY),e(xY,J4r),e(bE,Y4r),e(ct,K4r),e(ct,vE),e(vE,_Ee),e(_Ee,Z4r),e(vE,eCr),e(vE,$Y),e($Y,oCr),e(vE,rCr),e(ct,tCr),e(ct,FE),e(FE,uEe),e(uEe,aCr),e(FE,nCr),e(FE,kY),e(kY,sCr),e(FE,lCr),e(Mo,iCr),e(Mo,TE),e(TE,dCr),e(TE,bEe),e(bEe,cCr),e(TE,fCr),e(TE,vEe),e(vEe,mCr),e(Mo,gCr),M(ME,Mo,null),b(f,OHe,u),b(f,xc,u),e(xc,EE),e(EE,FEe),M(E$,FEe,null),e(xc,hCr),e(xc,TEe),e(TEe,pCr),b(f,VHe,u),b(f,nr,u),M(C$,nr,null),e(nr,_Cr),e(nr,$c),e($c,uCr),e($c,SY),e(SY,bCr),e($c,vCr),e($c,RY),e(RY,FCr),e($c,TCr),e(nr,MCr),e(nr,w$),e(w$,ECr),e(w$,MEe),e(MEe,CCr),e(w$,wCr),e(nr,ACr),e(nr,Dt),M(A$,Dt,null),e(Dt,LCr),e(Dt,EEe),e(EEe,yCr),e(Dt,xCr),e(Dt,kc),e(kc,$Cr),e(kc,CEe),e(CEe,kCr),e(kc,SCr),e(kc,PY),e(PY,RCr),e(kc,PCr),e(Dt,BCr),M(CE,Dt,null),e(nr,ICr),e(nr,Eo),M(L$,Eo,null),e(Eo,NCr),e(Eo,wEe),e(wEe,qCr),e(Eo,jCr),e(Eo,Fn),e(Fn,DCr),e(Fn,AEe),e(AEe,GCr),e(Fn,OCr),e(Fn,LEe),e(LEe,VCr),e(Fn,XCr),e(Fn,yEe),e(yEe,zCr),e(Fn,WCr),e(Eo,QCr),e(Eo,xEe),e(xEe,wE),e(wE,$Ee),e($Ee,UCr),e(wE,HCr),e(wE,BY),e(BY,JCr),e(wE,YCr),e(Eo,KCr),e(Eo,AE),e(AE,ZCr),e(AE,kEe),e(kEe,e3r),e(AE,o3r),e(AE,SEe),e(SEe,r3r),e(Eo,t3r),M(LE,Eo,null),b(f,XHe,u),b(f,Sc,u),e(Sc,yE),e(yE,REe),M(y$,REe,null),e(Sc,a3r),e(Sc,PEe),e(PEe,n3r),b(f,zHe,u),b(f,sr,u),M(x$,sr,null),e(sr,s3r),e(sr,Rc),e(Rc,l3r),e(Rc,IY),e(IY,i3r),e(Rc,d3r),e(Rc,NY),e(NY,c3r),e(Rc,f3r),e(sr,m3r),e(sr,$$),e($$,g3r),e($$,BEe),e(BEe,h3r),e($$,p3r),e(sr,_3r),e(sr,Gt),M(k$,Gt,null),e(Gt,u3r),e(Gt,IEe),e(IEe,b3r),e(Gt,v3r),e(Gt,Pc),e(Pc,F3r),e(Pc,NEe),e(NEe,T3r),e(Pc,M3r),e(Pc,qY),e(qY,E3r),e(Pc,C3r),e(Gt,w3r),M(xE,Gt,null),e(sr,A3r),e(sr,Br),M(S$,Br,null),e(Br,L3r),e(Br,qEe),e(qEe,y3r),e(Br,x3r),e(Br,Tn),e(Tn,$3r),e(Tn,jEe),e(jEe,k3r),e(Tn,S3r),e(Tn,DEe),e(DEe,R3r),e(Tn,P3r),e(Tn,GEe),e(GEe,B3r),e(Tn,I3r),e(Br,N3r),e(Br,q),e(q,$E),e($E,OEe),e(OEe,q3r),e($E,j3r),e($E,jY),e(jY,D3r),e($E,G3r),e(q,O3r),e(q,kE),e(kE,VEe),e(VEe,V3r),e(kE,X3r),e(kE,DY),e(DY,z3r),e(kE,W3r),e(q,Q3r),e(q,SE),e(SE,XEe),e(XEe,U3r),e(SE,H3r),e(SE,GY),e(GY,J3r),e(SE,Y3r),e(q,K3r),e(q,RE),e(RE,zEe),e(zEe,Z3r),e(RE,e5r),e(RE,OY),e(OY,o5r),e(RE,r5r),e(q,t5r),e(q,PE),e(PE,WEe),e(WEe,a5r),e(PE,n5r),e(PE,VY),e(VY,s5r),e(PE,l5r),e(q,i5r),e(q,BE),e(BE,QEe),e(QEe,d5r),e(BE,c5r),e(BE,XY),e(XY,f5r),e(BE,m5r),e(q,g5r),e(q,IE),e(IE,UEe),e(UEe,h5r),e(IE,p5r),e(IE,zY),e(zY,_5r),e(IE,u5r),e(q,b5r),e(q,NE),e(NE,HEe),e(HEe,v5r),e(NE,F5r),e(NE,WY),e(WY,T5r),e(NE,M5r),e(q,E5r),e(q,qE),e(qE,JEe),e(JEe,C5r),e(qE,w5r),e(qE,QY),e(QY,A5r),e(qE,L5r),e(q,y5r),e(q,jE),e(jE,YEe),e(YEe,x5r),e(jE,$5r),e(jE,UY),e(UY,k5r),e(jE,S5r),e(q,R5r),e(q,DE),e(DE,KEe),e(KEe,P5r),e(DE,B5r),e(DE,HY),e(HY,I5r),e(DE,N5r),e(q,q5r),e(q,GE),e(GE,ZEe),e(ZEe,j5r),e(GE,D5r),e(GE,JY),e(JY,G5r),e(GE,O5r),e(q,V5r),e(q,OE),e(OE,e4e),e(e4e,X5r),e(OE,z5r),e(OE,YY),e(YY,W5r),e(OE,Q5r),e(q,U5r),e(q,VE),e(VE,o4e),e(o4e,H5r),e(VE,J5r),e(VE,KY),e(KY,Y5r),e(VE,K5r),e(q,Z5r),e(q,XE),e(XE,r4e),e(r4e,e0r),e(XE,o0r),e(XE,ZY),e(ZY,r0r),e(XE,t0r),e(q,a0r),e(q,zE),e(zE,t4e),e(t4e,n0r),e(zE,s0r),e(zE,eK),e(eK,l0r),e(zE,i0r),e(q,d0r),e(q,WE),e(WE,a4e),e(a4e,c0r),e(WE,f0r),e(WE,oK),e(oK,m0r),e(WE,g0r),e(q,h0r),e(q,QE),e(QE,n4e),e(n4e,p0r),e(QE,_0r),e(QE,rK),e(rK,u0r),e(QE,b0r),e(q,v0r),e(q,gl),e(gl,s4e),e(s4e,F0r),e(gl,T0r),e(gl,tK),e(tK,M0r),e(gl,E0r),e(gl,aK),e(aK,C0r),e(gl,w0r),e(q,A0r),e(q,UE),e(UE,l4e),e(l4e,L0r),e(UE,y0r),e(UE,nK),e(nK,x0r),e(UE,$0r),e(q,k0r),e(q,HE),e(HE,i4e),e(i4e,S0r),e(HE,R0r),e(HE,sK),e(sK,P0r),e(HE,B0r),e(q,I0r),e(q,JE),e(JE,d4e),e(d4e,N0r),e(JE,q0r),e(JE,lK),e(lK,j0r),e(JE,D0r),e(q,G0r),e(q,YE),e(YE,c4e),e(c4e,O0r),e(YE,V0r),e(YE,iK),e(iK,X0r),e(YE,z0r),e(q,W0r),e(q,KE),e(KE,f4e),e(f4e,Q0r),e(KE,U0r),e(KE,dK),e(dK,H0r),e(KE,J0r),e(q,Y0r),e(q,ZE),e(ZE,m4e),e(m4e,K0r),e(ZE,Z0r),e(ZE,cK),e(cK,ewr),e(ZE,owr),e(q,rwr),e(q,e4),e(e4,g4e),e(g4e,twr),e(e4,awr),e(e4,fK),e(fK,nwr),e(e4,swr),e(q,lwr),e(q,o4),e(o4,h4e),e(h4e,iwr),e(o4,dwr),e(o4,mK),e(mK,cwr),e(o4,fwr),e(q,mwr),e(q,r4),e(r4,p4e),e(p4e,gwr),e(r4,hwr),e(r4,gK),e(gK,pwr),e(r4,_wr),e(q,uwr),e(q,t4),e(t4,_4e),e(_4e,bwr),e(t4,vwr),e(t4,hK),e(hK,Fwr),e(t4,Twr),e(q,Mwr),e(q,a4),e(a4,u4e),e(u4e,Ewr),e(a4,Cwr),e(a4,pK),e(pK,wwr),e(a4,Awr),e(q,Lwr),e(q,n4),e(n4,b4e),e(b4e,ywr),e(n4,xwr),e(n4,_K),e(_K,$wr),e(n4,kwr),e(q,Swr),e(q,s4),e(s4,v4e),e(v4e,Rwr),e(s4,Pwr),e(s4,uK),e(uK,Bwr),e(s4,Iwr),e(q,Nwr),e(q,l4),e(l4,F4e),e(F4e,qwr),e(l4,jwr),e(l4,bK),e(bK,Dwr),e(l4,Gwr),e(q,Owr),e(q,i4),e(i4,T4e),e(T4e,Vwr),e(i4,Xwr),e(i4,vK),e(vK,zwr),e(i4,Wwr),e(q,Qwr),e(q,d4),e(d4,M4e),e(M4e,Uwr),e(d4,Hwr),e(d4,FK),e(FK,Jwr),e(d4,Ywr),e(q,Kwr),e(q,c4),e(c4,E4e),e(E4e,Zwr),e(c4,eAr),e(c4,TK),e(TK,oAr),e(c4,rAr),e(q,tAr),e(q,f4),e(f4,C4e),e(C4e,aAr),e(f4,nAr),e(f4,MK),e(MK,sAr),e(f4,lAr),e(q,iAr),e(q,m4),e(m4,w4e),e(w4e,dAr),e(m4,cAr),e(m4,EK),e(EK,fAr),e(m4,mAr),e(q,gAr),e(q,g4),e(g4,A4e),e(A4e,hAr),e(g4,pAr),e(g4,CK),e(CK,_Ar),e(g4,uAr),e(q,bAr),e(q,h4),e(h4,L4e),e(L4e,vAr),e(h4,FAr),e(h4,wK),e(wK,TAr),e(h4,MAr),e(q,EAr),e(q,p4),e(p4,y4e),e(y4e,CAr),e(p4,wAr),e(p4,AK),e(AK,AAr),e(p4,LAr),e(q,yAr),e(q,_4),e(_4,x4e),e(x4e,xAr),e(_4,$Ar),e(_4,LK),e(LK,kAr),e(_4,SAr),e(q,RAr),e(q,u4),e(u4,$4e),e($4e,PAr),e(u4,BAr),e(u4,yK),e(yK,IAr),e(u4,NAr),e(q,qAr),e(q,b4),e(b4,k4e),e(k4e,jAr),e(b4,DAr),e(b4,xK),e(xK,GAr),e(b4,OAr),e(q,VAr),e(q,v4),e(v4,S4e),e(S4e,XAr),e(v4,zAr),e(v4,$K),e($K,WAr),e(v4,QAr),e(q,UAr),e(q,F4),e(F4,R4e),e(R4e,HAr),e(F4,JAr),e(F4,kK),e(kK,YAr),e(F4,KAr),e(q,ZAr),e(q,T4),e(T4,P4e),e(P4e,e7r),e(T4,o7r),e(T4,SK),e(SK,r7r),e(T4,t7r),e(q,a7r),e(q,M4),e(M4,B4e),e(B4e,n7r),e(M4,s7r),e(M4,RK),e(RK,l7r),e(M4,i7r),e(q,d7r),e(q,E4),e(E4,I4e),e(I4e,c7r),e(E4,f7r),e(E4,PK),e(PK,m7r),e(E4,g7r),e(q,h7r),e(q,C4),e(C4,N4e),e(N4e,p7r),e(C4,_7r),e(C4,BK),e(BK,u7r),e(C4,b7r),e(q,v7r),e(q,w4),e(w4,q4e),e(q4e,F7r),e(w4,T7r),e(w4,IK),e(IK,M7r),e(w4,E7r),e(Br,C7r),M(A4,Br,null),b(f,WHe,u),b(f,Bc,u),e(Bc,L4),e(L4,j4e),M(R$,j4e,null),e(Bc,w7r),e(Bc,D4e),e(D4e,A7r),b(f,QHe,u),b(f,lr,u),M(P$,lr,null),e(lr,L7r),e(lr,Ic),e(Ic,y7r),e(Ic,NK),e(NK,x7r),e(Ic,$7r),e(Ic,qK),e(qK,k7r),e(Ic,S7r),e(lr,R7r),e(lr,B$),e(B$,P7r),e(B$,G4e),e(G4e,B7r),e(B$,I7r),e(lr,N7r),e(lr,Ot),M(I$,Ot,null),e(Ot,q7r),e(Ot,O4e),e(O4e,j7r),e(Ot,D7r),e(Ot,Nc),e(Nc,G7r),e(Nc,V4e),e(V4e,O7r),e(Nc,V7r),e(Nc,jK),e(jK,X7r),e(Nc,z7r),e(Ot,W7r),M(y4,Ot,null),e(lr,Q7r),e(lr,Ir),M(N$,Ir,null),e(Ir,U7r),e(Ir,X4e),e(X4e,H7r),e(Ir,J7r),e(Ir,Mn),e(Mn,Y7r),e(Mn,z4e),e(z4e,K7r),e(Mn,Z7r),e(Mn,W4e),e(W4e,eLr),e(Mn,oLr),e(Mn,Q4e),e(Q4e,rLr),e(Mn,tLr),e(Ir,aLr),e(Ir,se),e(se,x4),e(x4,U4e),e(U4e,nLr),e(x4,sLr),e(x4,DK),e(DK,lLr),e(x4,iLr),e(se,dLr),e(se,$4),e($4,H4e),e(H4e,cLr),e($4,fLr),e($4,GK),e(GK,mLr),e($4,gLr),e(se,hLr),e(se,k4),e(k4,J4e),e(J4e,pLr),e(k4,_Lr),e(k4,OK),e(OK,uLr),e(k4,bLr),e(se,vLr),e(se,S4),e(S4,Y4e),e(Y4e,FLr),e(S4,TLr),e(S4,VK),e(VK,MLr),e(S4,ELr),e(se,CLr),e(se,R4),e(R4,K4e),e(K4e,wLr),e(R4,ALr),e(R4,XK),e(XK,LLr),e(R4,yLr),e(se,xLr),e(se,P4),e(P4,Z4e),e(Z4e,$Lr),e(P4,kLr),e(P4,zK),e(zK,SLr),e(P4,RLr),e(se,PLr),e(se,B4),e(B4,eCe),e(eCe,BLr),e(B4,ILr),e(B4,WK),e(WK,NLr),e(B4,qLr),e(se,jLr),e(se,I4),e(I4,oCe),e(oCe,DLr),e(I4,GLr),e(I4,QK),e(QK,OLr),e(I4,VLr),e(se,XLr),e(se,N4),e(N4,rCe),e(rCe,zLr),e(N4,WLr),e(N4,UK),e(UK,QLr),e(N4,ULr),e(se,HLr),e(se,q4),e(q4,tCe),e(tCe,JLr),e(q4,YLr),e(q4,HK),e(HK,KLr),e(q4,ZLr),e(se,eyr),e(se,j4),e(j4,aCe),e(aCe,oyr),e(j4,ryr),e(j4,JK),e(JK,tyr),e(j4,ayr),e(se,nyr),e(se,D4),e(D4,nCe),e(nCe,syr),e(D4,lyr),e(D4,YK),e(YK,iyr),e(D4,dyr),e(se,cyr),e(se,G4),e(G4,sCe),e(sCe,fyr),e(G4,myr),e(G4,KK),e(KK,gyr),e(G4,hyr),e(se,pyr),e(se,O4),e(O4,lCe),e(lCe,_yr),e(O4,uyr),e(O4,ZK),e(ZK,byr),e(O4,vyr),e(se,Fyr),e(se,V4),e(V4,iCe),e(iCe,Tyr),e(V4,Myr),e(V4,eZ),e(eZ,Eyr),e(V4,Cyr),e(se,wyr),e(se,X4),e(X4,dCe),e(dCe,Ayr),e(X4,Lyr),e(X4,oZ),e(oZ,yyr),e(X4,xyr),e(se,$yr),e(se,z4),e(z4,cCe),e(cCe,kyr),e(z4,Syr),e(z4,rZ),e(rZ,Ryr),e(z4,Pyr),e(se,Byr),e(se,W4),e(W4,fCe),e(fCe,Iyr),e(W4,Nyr),e(W4,tZ),e(tZ,qyr),e(W4,jyr),e(se,Dyr),e(se,Q4),e(Q4,mCe),e(mCe,Gyr),e(Q4,Oyr),e(Q4,aZ),e(aZ,Vyr),e(Q4,Xyr),e(se,zyr),e(se,U4),e(U4,gCe),e(gCe,Wyr),e(U4,Qyr),e(U4,nZ),e(nZ,Uyr),e(U4,Hyr),e(se,Jyr),e(se,H4),e(H4,hCe),e(hCe,Yyr),e(H4,Kyr),e(H4,sZ),e(sZ,Zyr),e(H4,e9r),e(se,o9r),e(se,J4),e(J4,pCe),e(pCe,r9r),e(J4,t9r),e(J4,lZ),e(lZ,a9r),e(J4,n9r),e(se,s9r),e(se,Y4),e(Y4,_Ce),e(_Ce,l9r),e(Y4,i9r),e(Y4,iZ),e(iZ,d9r),e(Y4,c9r),e(Ir,f9r),M(K4,Ir,null),b(f,UHe,u),b(f,qc,u),e(qc,Z4),e(Z4,uCe),M(q$,uCe,null),e(qc,m9r),e(qc,bCe),e(bCe,g9r),b(f,HHe,u),b(f,ir,u),M(j$,ir,null),e(ir,h9r),e(ir,jc),e(jc,p9r),e(jc,dZ),e(dZ,_9r),e(jc,u9r),e(jc,cZ),e(cZ,b9r),e(jc,v9r),e(ir,F9r),e(ir,D$),e(D$,T9r),e(D$,vCe),e(vCe,M9r),e(D$,E9r),e(ir,C9r),e(ir,Vt),M(G$,Vt,null),e(Vt,w9r),e(Vt,FCe),e(FCe,A9r),e(Vt,L9r),e(Vt,Dc),e(Dc,y9r),e(Dc,TCe),e(TCe,x9r),e(Dc,$9r),e(Dc,fZ),e(fZ,k9r),e(Dc,S9r),e(Vt,R9r),M(eC,Vt,null),e(ir,P9r),e(ir,Nr),M(O$,Nr,null),e(Nr,B9r),e(Nr,MCe),e(MCe,I9r),e(Nr,N9r),e(Nr,En),e(En,q9r),e(En,ECe),e(ECe,j9r),e(En,D9r),e(En,CCe),e(CCe,G9r),e(En,O9r),e(En,wCe),e(wCe,V9r),e(En,X9r),e(Nr,z9r),e(Nr,Me),e(Me,oC),e(oC,ACe),e(ACe,W9r),e(oC,Q9r),e(oC,mZ),e(mZ,U9r),e(oC,H9r),e(Me,J9r),e(Me,rC),e(rC,LCe),e(LCe,Y9r),e(rC,K9r),e(rC,gZ),e(gZ,Z9r),e(rC,exr),e(Me,oxr),e(Me,tC),e(tC,yCe),e(yCe,rxr),e(tC,txr),e(tC,hZ),e(hZ,axr),e(tC,nxr),e(Me,sxr),e(Me,aC),e(aC,xCe),e(xCe,lxr),e(aC,ixr),e(aC,pZ),e(pZ,dxr),e(aC,cxr),e(Me,fxr),e(Me,nC),e(nC,$Ce),e($Ce,mxr),e(nC,gxr),e(nC,_Z),e(_Z,hxr),e(nC,pxr),e(Me,_xr),e(Me,sC),e(sC,kCe),e(kCe,uxr),e(sC,bxr),e(sC,uZ),e(uZ,vxr),e(sC,Fxr),e(Me,Txr),e(Me,lC),e(lC,SCe),e(SCe,Mxr),e(lC,Exr),e(lC,bZ),e(bZ,Cxr),e(lC,wxr),e(Me,Axr),e(Me,iC),e(iC,RCe),e(RCe,Lxr),e(iC,yxr),e(iC,vZ),e(vZ,xxr),e(iC,$xr),e(Me,kxr),e(Me,dC),e(dC,PCe),e(PCe,Sxr),e(dC,Rxr),e(dC,FZ),e(FZ,Pxr),e(dC,Bxr),e(Me,Ixr),e(Me,cC),e(cC,BCe),e(BCe,Nxr),e(cC,qxr),e(cC,TZ),e(TZ,jxr),e(cC,Dxr),e(Me,Gxr),e(Me,fC),e(fC,ICe),e(ICe,Oxr),e(fC,Vxr),e(fC,MZ),e(MZ,Xxr),e(fC,zxr),e(Me,Wxr),e(Me,mC),e(mC,NCe),e(NCe,Qxr),e(mC,Uxr),e(mC,EZ),e(EZ,Hxr),e(mC,Jxr),e(Me,Yxr),e(Me,gC),e(gC,qCe),e(qCe,Kxr),e(gC,Zxr),e(gC,CZ),e(CZ,e$r),e(gC,o$r),e(Nr,r$r),M(hC,Nr,null),b(f,JHe,u),b(f,Gc,u),e(Gc,pC),e(pC,jCe),M(V$,jCe,null),e(Gc,t$r),e(Gc,DCe),e(DCe,a$r),b(f,YHe,u),b(f,dr,u),M(X$,dr,null),e(dr,n$r),e(dr,Oc),e(Oc,s$r),e(Oc,wZ),e(wZ,l$r),e(Oc,i$r),e(Oc,AZ),e(AZ,d$r),e(Oc,c$r),e(dr,f$r),e(dr,z$),e(z$,m$r),e(z$,GCe),e(GCe,g$r),e(z$,h$r),e(dr,p$r),e(dr,Xt),M(W$,Xt,null),e(Xt,_$r),e(Xt,OCe),e(OCe,u$r),e(Xt,b$r),e(Xt,Vc),e(Vc,v$r),e(Vc,VCe),e(VCe,F$r),e(Vc,T$r),e(Vc,LZ),e(LZ,M$r),e(Vc,E$r),e(Xt,C$r),M(_C,Xt,null),e(dr,w$r),e(dr,qr),M(Q$,qr,null),e(qr,A$r),e(qr,XCe),e(XCe,L$r),e(qr,y$r),e(qr,Cn),e(Cn,x$r),e(Cn,zCe),e(zCe,$$r),e(Cn,k$r),e(Cn,WCe),e(WCe,S$r),e(Cn,R$r),e(Cn,QCe),e(QCe,P$r),e(Cn,B$r),e(qr,I$r),e(qr,Ve),e(Ve,uC),e(uC,UCe),e(UCe,N$r),e(uC,q$r),e(uC,yZ),e(yZ,j$r),e(uC,D$r),e(Ve,G$r),e(Ve,bC),e(bC,HCe),e(HCe,O$r),e(bC,V$r),e(bC,xZ),e(xZ,X$r),e(bC,z$r),e(Ve,W$r),e(Ve,hl),e(hl,JCe),e(JCe,Q$r),e(hl,U$r),e(hl,$Z),e($Z,H$r),e(hl,J$r),e(hl,kZ),e(kZ,Y$r),e(hl,K$r),e(Ve,Z$r),e(Ve,vC),e(vC,YCe),e(YCe,ekr),e(vC,okr),e(vC,SZ),e(SZ,rkr),e(vC,tkr),e(Ve,akr),e(Ve,FC),e(FC,KCe),e(KCe,nkr),e(FC,skr),e(FC,RZ),e(RZ,lkr),e(FC,ikr),e(Ve,dkr),e(Ve,TC),e(TC,ZCe),e(ZCe,ckr),e(TC,fkr),e(TC,PZ),e(PZ,mkr),e(TC,gkr),e(Ve,hkr),e(Ve,MC),e(MC,e3e),e(e3e,pkr),e(MC,_kr),e(MC,BZ),e(BZ,ukr),e(MC,bkr),e(Ve,vkr),e(Ve,EC),e(EC,o3e),e(o3e,Fkr),e(EC,Tkr),e(EC,IZ),e(IZ,Mkr),e(EC,Ekr),e(qr,Ckr),M(CC,qr,null),b(f,KHe,u),b(f,Xc,u),e(Xc,wC),e(wC,r3e),M(U$,r3e,null),e(Xc,wkr),e(Xc,t3e),e(t3e,Akr),b(f,ZHe,u),b(f,cr,u),M(H$,cr,null),e(cr,Lkr),e(cr,zc),e(zc,ykr),e(zc,NZ),e(NZ,xkr),e(zc,$kr),e(zc,qZ),e(qZ,kkr),e(zc,Skr),e(cr,Rkr),e(cr,J$),e(J$,Pkr),e(J$,a3e),e(a3e,Bkr),e(J$,Ikr),e(cr,Nkr),e(cr,zt),M(Y$,zt,null),e(zt,qkr),e(zt,n3e),e(n3e,jkr),e(zt,Dkr),e(zt,Wc),e(Wc,Gkr),e(Wc,s3e),e(s3e,Okr),e(Wc,Vkr),e(Wc,jZ),e(jZ,Xkr),e(Wc,zkr),e(zt,Wkr),M(AC,zt,null),e(cr,Qkr),e(cr,jr),M(K$,jr,null),e(jr,Ukr),e(jr,l3e),e(l3e,Hkr),e(jr,Jkr),e(jr,wn),e(wn,Ykr),e(wn,i3e),e(i3e,Kkr),e(wn,Zkr),e(wn,d3e),e(d3e,eSr),e(wn,oSr),e(wn,c3e),e(c3e,rSr),e(wn,tSr),e(jr,aSr),e(jr,Z$),e(Z$,LC),e(LC,f3e),e(f3e,nSr),e(LC,sSr),e(LC,DZ),e(DZ,lSr),e(LC,iSr),e(Z$,dSr),e(Z$,yC),e(yC,m3e),e(m3e,cSr),e(yC,fSr),e(yC,GZ),e(GZ,mSr),e(yC,gSr),e(jr,hSr),M(xC,jr,null),b(f,eJe,u),b(f,Qc,u),e(Qc,$C),e($C,g3e),M(ek,g3e,null),e(Qc,pSr),e(Qc,h3e),e(h3e,_Sr),b(f,oJe,u),b(f,fr,u),M(ok,fr,null),e(fr,uSr),e(fr,Uc),e(Uc,bSr),e(Uc,OZ),e(OZ,vSr),e(Uc,FSr),e(Uc,VZ),e(VZ,TSr),e(Uc,MSr),e(fr,ESr),e(fr,rk),e(rk,CSr),e(rk,p3e),e(p3e,wSr),e(rk,ASr),e(fr,LSr),e(fr,Wt),M(tk,Wt,null),e(Wt,ySr),e(Wt,_3e),e(_3e,xSr),e(Wt,$Sr),e(Wt,Hc),e(Hc,kSr),e(Hc,u3e),e(u3e,SSr),e(Hc,RSr),e(Hc,XZ),e(XZ,PSr),e(Hc,BSr),e(Wt,ISr),M(kC,Wt,null),e(fr,NSr),e(fr,Dr),M(ak,Dr,null),e(Dr,qSr),e(Dr,b3e),e(b3e,jSr),e(Dr,DSr),e(Dr,An),e(An,GSr),e(An,v3e),e(v3e,OSr),e(An,VSr),e(An,F3e),e(F3e,XSr),e(An,zSr),e(An,T3e),e(T3e,WSr),e(An,QSr),e(Dr,USr),e(Dr,de),e(de,SC),e(SC,M3e),e(M3e,HSr),e(SC,JSr),e(SC,zZ),e(zZ,YSr),e(SC,KSr),e(de,ZSr),e(de,RC),e(RC,E3e),e(E3e,eRr),e(RC,oRr),e(RC,WZ),e(WZ,rRr),e(RC,tRr),e(de,aRr),e(de,PC),e(PC,C3e),e(C3e,nRr),e(PC,sRr),e(PC,QZ),e(QZ,lRr),e(PC,iRr),e(de,dRr),e(de,BC),e(BC,w3e),e(w3e,cRr),e(BC,fRr),e(BC,UZ),e(UZ,mRr),e(BC,gRr),e(de,hRr),e(de,IC),e(IC,A3e),e(A3e,pRr),e(IC,_Rr),e(IC,HZ),e(HZ,uRr),e(IC,bRr),e(de,vRr),e(de,NC),e(NC,L3e),e(L3e,FRr),e(NC,TRr),e(NC,JZ),e(JZ,MRr),e(NC,ERr),e(de,CRr),e(de,qC),e(qC,y3e),e(y3e,wRr),e(qC,ARr),e(qC,YZ),e(YZ,LRr),e(qC,yRr),e(de,xRr),e(de,jC),e(jC,x3e),e(x3e,$Rr),e(jC,kRr),e(jC,KZ),e(KZ,SRr),e(jC,RRr),e(de,PRr),e(de,DC),e(DC,$3e),e($3e,BRr),e(DC,IRr),e(DC,ZZ),e(ZZ,NRr),e(DC,qRr),e(de,jRr),e(de,GC),e(GC,k3e),e(k3e,DRr),e(GC,GRr),e(GC,eee),e(eee,ORr),e(GC,VRr),e(de,XRr),e(de,OC),e(OC,S3e),e(S3e,zRr),e(OC,WRr),e(OC,oee),e(oee,QRr),e(OC,URr),e(de,HRr),e(de,VC),e(VC,R3e),e(R3e,JRr),e(VC,YRr),e(VC,ree),e(ree,KRr),e(VC,ZRr),e(de,ePr),e(de,XC),e(XC,P3e),e(P3e,oPr),e(XC,rPr),e(XC,tee),e(tee,tPr),e(XC,aPr),e(de,nPr),e(de,zC),e(zC,B3e),e(B3e,sPr),e(zC,lPr),e(zC,aee),e(aee,iPr),e(zC,dPr),e(de,cPr),e(de,WC),e(WC,I3e),e(I3e,fPr),e(WC,mPr),e(WC,nee),e(nee,gPr),e(WC,hPr),e(de,pPr),e(de,QC),e(QC,N3e),e(N3e,_Pr),e(QC,uPr),e(QC,see),e(see,bPr),e(QC,vPr),e(de,FPr),e(de,UC),e(UC,q3e),e(q3e,TPr),e(UC,MPr),e(UC,lee),e(lee,EPr),e(UC,CPr),e(de,wPr),e(de,HC),e(HC,j3e),e(j3e,APr),e(HC,LPr),e(HC,iee),e(iee,yPr),e(HC,xPr),e(de,$Pr),e(de,JC),e(JC,D3e),e(D3e,kPr),e(JC,SPr),e(JC,dee),e(dee,RPr),e(JC,PPr),e(de,BPr),e(de,YC),e(YC,G3e),e(G3e,IPr),e(YC,NPr),e(YC,cee),e(cee,qPr),e(YC,jPr),e(Dr,DPr),M(KC,Dr,null),b(f,rJe,u),b(f,Jc,u),e(Jc,ZC),e(ZC,O3e),M(nk,O3e,null),e(Jc,GPr),e(Jc,V3e),e(V3e,OPr),b(f,tJe,u),b(f,mr,u),M(sk,mr,null),e(mr,VPr),e(mr,Yc),e(Yc,XPr),e(Yc,fee),e(fee,zPr),e(Yc,WPr),e(Yc,mee),e(mee,QPr),e(Yc,UPr),e(mr,HPr),e(mr,lk),e(lk,JPr),e(lk,X3e),e(X3e,YPr),e(lk,KPr),e(mr,ZPr),e(mr,Qt),M(ik,Qt,null),e(Qt,eBr),e(Qt,z3e),e(z3e,oBr),e(Qt,rBr),e(Qt,Kc),e(Kc,tBr),e(Kc,W3e),e(W3e,aBr),e(Kc,nBr),e(Kc,gee),e(gee,sBr),e(Kc,lBr),e(Qt,iBr),M(e3,Qt,null),e(mr,dBr),e(mr,Gr),M(dk,Gr,null),e(Gr,cBr),e(Gr,Q3e),e(Q3e,fBr),e(Gr,mBr),e(Gr,Ln),e(Ln,gBr),e(Ln,U3e),e(U3e,hBr),e(Ln,pBr),e(Ln,H3e),e(H3e,_Br),e(Ln,uBr),e(Ln,J3e),e(J3e,bBr),e(Ln,vBr),e(Gr,FBr),e(Gr,ye),e(ye,o3),e(o3,Y3e),e(Y3e,TBr),e(o3,MBr),e(o3,hee),e(hee,EBr),e(o3,CBr),e(ye,wBr),e(ye,r3),e(r3,K3e),e(K3e,ABr),e(r3,LBr),e(r3,pee),e(pee,yBr),e(r3,xBr),e(ye,$Br),e(ye,t3),e(t3,Z3e),e(Z3e,kBr),e(t3,SBr),e(t3,_ee),e(_ee,RBr),e(t3,PBr),e(ye,BBr),e(ye,a3),e(a3,e5e),e(e5e,IBr),e(a3,NBr),e(a3,uee),e(uee,qBr),e(a3,jBr),e(ye,DBr),e(ye,n3),e(n3,o5e),e(o5e,GBr),e(n3,OBr),e(n3,bee),e(bee,VBr),e(n3,XBr),e(ye,zBr),e(ye,s3),e(s3,r5e),e(r5e,WBr),e(s3,QBr),e(s3,vee),e(vee,UBr),e(s3,HBr),e(ye,JBr),e(ye,l3),e(l3,t5e),e(t5e,YBr),e(l3,KBr),e(l3,Fee),e(Fee,ZBr),e(l3,eIr),e(ye,oIr),e(ye,i3),e(i3,a5e),e(a5e,rIr),e(i3,tIr),e(i3,Tee),e(Tee,aIr),e(i3,nIr),e(ye,sIr),e(ye,d3),e(d3,n5e),e(n5e,lIr),e(d3,iIr),e(d3,Mee),e(Mee,dIr),e(d3,cIr),e(ye,fIr),e(ye,c3),e(c3,s5e),e(s5e,mIr),e(c3,gIr),e(c3,Eee),e(Eee,hIr),e(c3,pIr),e(Gr,_Ir),M(f3,Gr,null),b(f,aJe,u),b(f,Zc,u),e(Zc,m3),e(m3,l5e),M(ck,l5e,null),e(Zc,uIr),e(Zc,i5e),e(i5e,bIr),b(f,nJe,u),b(f,gr,u),M(fk,gr,null),e(gr,vIr),e(gr,ef),e(ef,FIr),e(ef,Cee),e(Cee,TIr),e(ef,MIr),e(ef,wee),e(wee,EIr),e(ef,CIr),e(gr,wIr),e(gr,mk),e(mk,AIr),e(mk,d5e),e(d5e,LIr),e(mk,yIr),e(gr,xIr),e(gr,Ut),M(gk,Ut,null),e(Ut,$Ir),e(Ut,c5e),e(c5e,kIr),e(Ut,SIr),e(Ut,of),e(of,RIr),e(of,f5e),e(f5e,PIr),e(of,BIr),e(of,Aee),e(Aee,IIr),e(of,NIr),e(Ut,qIr),M(g3,Ut,null),e(gr,jIr),e(gr,Or),M(hk,Or,null),e(Or,DIr),e(Or,m5e),e(m5e,GIr),e(Or,OIr),e(Or,yn),e(yn,VIr),e(yn,g5e),e(g5e,XIr),e(yn,zIr),e(yn,h5e),e(h5e,WIr),e(yn,QIr),e(yn,p5e),e(p5e,UIr),e(yn,HIr),e(Or,JIr),e(Or,te),e(te,h3),e(h3,_5e),e(_5e,YIr),e(h3,KIr),e(h3,Lee),e(Lee,ZIr),e(h3,eNr),e(te,oNr),e(te,p3),e(p3,u5e),e(u5e,rNr),e(p3,tNr),e(p3,yee),e(yee,aNr),e(p3,nNr),e(te,sNr),e(te,_3),e(_3,b5e),e(b5e,lNr),e(_3,iNr),e(_3,xee),e(xee,dNr),e(_3,cNr),e(te,fNr),e(te,u3),e(u3,v5e),e(v5e,mNr),e(u3,gNr),e(u3,$ee),e($ee,hNr),e(u3,pNr),e(te,_Nr),e(te,b3),e(b3,F5e),e(F5e,uNr),e(b3,bNr),e(b3,kee),e(kee,vNr),e(b3,FNr),e(te,TNr),e(te,v3),e(v3,T5e),e(T5e,MNr),e(v3,ENr),e(v3,See),e(See,CNr),e(v3,wNr),e(te,ANr),e(te,F3),e(F3,M5e),e(M5e,LNr),e(F3,yNr),e(F3,Ree),e(Ree,xNr),e(F3,$Nr),e(te,kNr),e(te,T3),e(T3,E5e),e(E5e,SNr),e(T3,RNr),e(T3,Pee),e(Pee,PNr),e(T3,BNr),e(te,INr),e(te,M3),e(M3,C5e),e(C5e,NNr),e(M3,qNr),e(M3,Bee),e(Bee,jNr),e(M3,DNr),e(te,GNr),e(te,E3),e(E3,w5e),e(w5e,ONr),e(E3,VNr),e(E3,Iee),e(Iee,XNr),e(E3,zNr),e(te,WNr),e(te,C3),e(C3,A5e),e(A5e,QNr),e(C3,UNr),e(C3,Nee),e(Nee,HNr),e(C3,JNr),e(te,YNr),e(te,w3),e(w3,L5e),e(L5e,KNr),e(w3,ZNr),e(w3,qee),e(qee,eqr),e(w3,oqr),e(te,rqr),e(te,A3),e(A3,y5e),e(y5e,tqr),e(A3,aqr),e(A3,jee),e(jee,nqr),e(A3,sqr),e(te,lqr),e(te,L3),e(L3,x5e),e(x5e,iqr),e(L3,dqr),e(L3,Dee),e(Dee,cqr),e(L3,fqr),e(te,mqr),e(te,y3),e(y3,$5e),e($5e,gqr),e(y3,hqr),e(y3,Gee),e(Gee,pqr),e(y3,_qr),e(te,uqr),e(te,x3),e(x3,k5e),e(k5e,bqr),e(x3,vqr),e(x3,Oee),e(Oee,Fqr),e(x3,Tqr),e(te,Mqr),e(te,$3),e($3,S5e),e(S5e,Eqr),e($3,Cqr),e($3,Vee),e(Vee,wqr),e($3,Aqr),e(te,Lqr),e(te,k3),e(k3,R5e),e(R5e,yqr),e(k3,xqr),e(k3,Xee),e(Xee,$qr),e(k3,kqr),e(te,Sqr),e(te,S3),e(S3,P5e),e(P5e,Rqr),e(S3,Pqr),e(S3,zee),e(zee,Bqr),e(S3,Iqr),e(te,Nqr),e(te,R3),e(R3,B5e),e(B5e,qqr),e(R3,jqr),e(R3,Wee),e(Wee,Dqr),e(R3,Gqr),e(te,Oqr),e(te,P3),e(P3,I5e),e(I5e,Vqr),e(P3,Xqr),e(P3,Qee),e(Qee,zqr),e(P3,Wqr),e(te,Qqr),e(te,B3),e(B3,N5e),e(N5e,Uqr),e(B3,Hqr),e(B3,Uee),e(Uee,Jqr),e(B3,Yqr),e(te,Kqr),e(te,I3),e(I3,q5e),e(q5e,Zqr),e(I3,ejr),e(I3,Hee),e(Hee,ojr),e(I3,rjr),e(te,tjr),e(te,N3),e(N3,j5e),e(j5e,ajr),e(N3,njr),e(N3,Jee),e(Jee,sjr),e(N3,ljr),e(te,ijr),e(te,q3),e(q3,D5e),e(D5e,djr),e(q3,cjr),e(q3,Yee),e(Yee,fjr),e(q3,mjr),e(te,gjr),e(te,j3),e(j3,G5e),e(G5e,hjr),e(j3,pjr),e(j3,Kee),e(Kee,_jr),e(j3,ujr),e(Or,bjr),M(D3,Or,null),b(f,sJe,u),b(f,rf,u),e(rf,G3),e(G3,O5e),M(pk,O5e,null),e(rf,vjr),e(rf,V5e),e(V5e,Fjr),b(f,lJe,u),b(f,hr,u),M(_k,hr,null),e(hr,Tjr),e(hr,tf),e(tf,Mjr),e(tf,Zee),e(Zee,Ejr),e(tf,Cjr),e(tf,eoe),e(eoe,wjr),e(tf,Ajr),e(hr,Ljr),e(hr,uk),e(uk,yjr),e(uk,X5e),e(X5e,xjr),e(uk,$jr),e(hr,kjr),e(hr,Ht),M(bk,Ht,null),e(Ht,Sjr),e(Ht,z5e),e(z5e,Rjr),e(Ht,Pjr),e(Ht,af),e(af,Bjr),e(af,W5e),e(W5e,Ijr),e(af,Njr),e(af,ooe),e(ooe,qjr),e(af,jjr),e(Ht,Djr),M(O3,Ht,null),e(hr,Gjr),e(hr,Vr),M(vk,Vr,null),e(Vr,Ojr),e(Vr,Q5e),e(Q5e,Vjr),e(Vr,Xjr),e(Vr,xn),e(xn,zjr),e(xn,U5e),e(U5e,Wjr),e(xn,Qjr),e(xn,H5e),e(H5e,Ujr),e(xn,Hjr),e(xn,J5e),e(J5e,Jjr),e(xn,Yjr),e(Vr,Kjr),e(Vr,ve),e(ve,V3),e(V3,Y5e),e(Y5e,Zjr),e(V3,eDr),e(V3,roe),e(roe,oDr),e(V3,rDr),e(ve,tDr),e(ve,X3),e(X3,K5e),e(K5e,aDr),e(X3,nDr),e(X3,toe),e(toe,sDr),e(X3,lDr),e(ve,iDr),e(ve,z3),e(z3,Z5e),e(Z5e,dDr),e(z3,cDr),e(z3,aoe),e(aoe,fDr),e(z3,mDr),e(ve,gDr),e(ve,W3),e(W3,e0e),e(e0e,hDr),e(W3,pDr),e(W3,noe),e(noe,_Dr),e(W3,uDr),e(ve,bDr),e(ve,Q3),e(Q3,o0e),e(o0e,vDr),e(Q3,FDr),e(Q3,soe),e(soe,TDr),e(Q3,MDr),e(ve,EDr),e(ve,U3),e(U3,r0e),e(r0e,CDr),e(U3,wDr),e(U3,loe),e(loe,ADr),e(U3,LDr),e(ve,yDr),e(ve,H3),e(H3,t0e),e(t0e,xDr),e(H3,$Dr),e(H3,ioe),e(ioe,kDr),e(H3,SDr),e(ve,RDr),e(ve,J3),e(J3,a0e),e(a0e,PDr),e(J3,BDr),e(J3,doe),e(doe,IDr),e(J3,NDr),e(ve,qDr),e(ve,Y3),e(Y3,n0e),e(n0e,jDr),e(Y3,DDr),e(Y3,coe),e(coe,GDr),e(Y3,ODr),e(ve,VDr),e(ve,K3),e(K3,s0e),e(s0e,XDr),e(K3,zDr),e(K3,foe),e(foe,WDr),e(K3,QDr),e(ve,UDr),e(ve,Z3),e(Z3,l0e),e(l0e,HDr),e(Z3,JDr),e(Z3,moe),e(moe,YDr),e(Z3,KDr),e(ve,ZDr),e(ve,e5),e(e5,i0e),e(i0e,eGr),e(e5,oGr),e(e5,goe),e(goe,rGr),e(e5,tGr),e(ve,aGr),e(ve,o5),e(o5,d0e),e(d0e,nGr),e(o5,sGr),e(o5,hoe),e(hoe,lGr),e(o5,iGr),e(ve,dGr),e(ve,r5),e(r5,c0e),e(c0e,cGr),e(r5,fGr),e(r5,poe),e(poe,mGr),e(r5,gGr),e(ve,hGr),e(ve,t5),e(t5,f0e),e(f0e,pGr),e(t5,_Gr),e(t5,_oe),e(_oe,uGr),e(t5,bGr),e(ve,vGr),e(ve,a5),e(a5,m0e),e(m0e,FGr),e(a5,TGr),e(a5,uoe),e(uoe,MGr),e(a5,EGr),e(ve,CGr),e(ve,n5),e(n5,g0e),e(g0e,wGr),e(n5,AGr),e(n5,boe),e(boe,LGr),e(n5,yGr),e(Vr,xGr),M(s5,Vr,null),b(f,iJe,u),b(f,nf,u),e(nf,l5),e(l5,h0e),M(Fk,h0e,null),e(nf,$Gr),e(nf,p0e),e(p0e,kGr),b(f,dJe,u),b(f,pr,u),M(Tk,pr,null),e(pr,SGr),e(pr,sf),e(sf,RGr),e(sf,voe),e(voe,PGr),e(sf,BGr),e(sf,Foe),e(Foe,IGr),e(sf,NGr),e(pr,qGr),e(pr,Mk),e(Mk,jGr),e(Mk,_0e),e(_0e,DGr),e(Mk,GGr),e(pr,OGr),e(pr,Jt),M(Ek,Jt,null),e(Jt,VGr),e(Jt,u0e),e(u0e,XGr),e(Jt,zGr),e(Jt,lf),e(lf,WGr),e(lf,b0e),e(b0e,QGr),e(lf,UGr),e(lf,Toe),e(Toe,HGr),e(lf,JGr),e(Jt,YGr),M(i5,Jt,null),e(pr,KGr),e(pr,Xr),M(Ck,Xr,null),e(Xr,ZGr),e(Xr,v0e),e(v0e,eOr),e(Xr,oOr),e(Xr,$n),e($n,rOr),e($n,F0e),e(F0e,tOr),e($n,aOr),e($n,T0e),e(T0e,nOr),e($n,sOr),e($n,M0e),e(M0e,lOr),e($n,iOr),e(Xr,dOr),e(Xr,wk),e(wk,d5),e(d5,E0e),e(E0e,cOr),e(d5,fOr),e(d5,Moe),e(Moe,mOr),e(d5,gOr),e(wk,hOr),e(wk,c5),e(c5,C0e),e(C0e,pOr),e(c5,_Or),e(c5,Eoe),e(Eoe,uOr),e(c5,bOr),e(Xr,vOr),M(f5,Xr,null),b(f,cJe,u),b(f,df,u),e(df,m5),e(m5,w0e),M(Ak,w0e,null),e(df,FOr),e(df,A0e),e(A0e,TOr),b(f,fJe,u),b(f,_r,u),M(Lk,_r,null),e(_r,MOr),e(_r,cf),e(cf,EOr),e(cf,Coe),e(Coe,COr),e(cf,wOr),e(cf,woe),e(woe,AOr),e(cf,LOr),e(_r,yOr),e(_r,yk),e(yk,xOr),e(yk,L0e),e(L0e,$Or),e(yk,kOr),e(_r,SOr),e(_r,Yt),M(xk,Yt,null),e(Yt,ROr),e(Yt,y0e),e(y0e,POr),e(Yt,BOr),e(Yt,ff),e(ff,IOr),e(ff,x0e),e(x0e,NOr),e(ff,qOr),e(ff,Aoe),e(Aoe,jOr),e(ff,DOr),e(Yt,GOr),M(g5,Yt,null),e(_r,OOr),e(_r,zr),M($k,zr,null),e(zr,VOr),e(zr,$0e),e($0e,XOr),e(zr,zOr),e(zr,kn),e(kn,WOr),e(kn,k0e),e(k0e,QOr),e(kn,UOr),e(kn,S0e),e(S0e,HOr),e(kn,JOr),e(kn,R0e),e(R0e,YOr),e(kn,KOr),e(zr,ZOr),e(zr,P0e),e(P0e,h5),e(h5,B0e),e(B0e,eVr),e(h5,oVr),e(h5,Loe),e(Loe,rVr),e(h5,tVr),e(zr,aVr),M(p5,zr,null),b(f,mJe,u),b(f,mf,u),e(mf,_5),e(_5,I0e),M(kk,I0e,null),e(mf,nVr),e(mf,N0e),e(N0e,sVr),b(f,gJe,u),b(f,ur,u),M(Sk,ur,null),e(ur,lVr),e(ur,gf),e(gf,iVr),e(gf,yoe),e(yoe,dVr),e(gf,cVr),e(gf,xoe),e(xoe,fVr),e(gf,mVr),e(ur,gVr),e(ur,Rk),e(Rk,hVr),e(Rk,q0e),e(q0e,pVr),e(Rk,_Vr),e(ur,uVr),e(ur,Kt),M(Pk,Kt,null),e(Kt,bVr),e(Kt,j0e),e(j0e,vVr),e(Kt,FVr),e(Kt,hf),e(hf,TVr),e(hf,D0e),e(D0e,MVr),e(hf,EVr),e(hf,$oe),e($oe,CVr),e(hf,wVr),e(Kt,AVr),M(u5,Kt,null),e(ur,LVr),e(ur,Wr),M(Bk,Wr,null),e(Wr,yVr),e(Wr,G0e),e(G0e,xVr),e(Wr,$Vr),e(Wr,Sn),e(Sn,kVr),e(Sn,O0e),e(O0e,SVr),e(Sn,RVr),e(Sn,V0e),e(V0e,PVr),e(Sn,BVr),e(Sn,X0e),e(X0e,IVr),e(Sn,NVr),e(Wr,qVr),e(Wr,ce),e(ce,b5),e(b5,z0e),e(z0e,jVr),e(b5,DVr),e(b5,koe),e(koe,GVr),e(b5,OVr),e(ce,VVr),e(ce,v5),e(v5,W0e),e(W0e,XVr),e(v5,zVr),e(v5,Soe),e(Soe,WVr),e(v5,QVr),e(ce,UVr),e(ce,F5),e(F5,Q0e),e(Q0e,HVr),e(F5,JVr),e(F5,Roe),e(Roe,YVr),e(F5,KVr),e(ce,ZVr),e(ce,T5),e(T5,U0e),e(U0e,eXr),e(T5,oXr),e(T5,Poe),e(Poe,rXr),e(T5,tXr),e(ce,aXr),e(ce,M5),e(M5,H0e),e(H0e,nXr),e(M5,sXr),e(M5,Boe),e(Boe,lXr),e(M5,iXr),e(ce,dXr),e(ce,E5),e(E5,J0e),e(J0e,cXr),e(E5,fXr),e(E5,Ioe),e(Ioe,mXr),e(E5,gXr),e(ce,hXr),e(ce,C5),e(C5,Y0e),e(Y0e,pXr),e(C5,_Xr),e(C5,Noe),e(Noe,uXr),e(C5,bXr),e(ce,vXr),e(ce,w5),e(w5,K0e),e(K0e,FXr),e(w5,TXr),e(w5,qoe),e(qoe,MXr),e(w5,EXr),e(ce,CXr),e(ce,A5),e(A5,Z0e),e(Z0e,wXr),e(A5,AXr),e(A5,joe),e(joe,LXr),e(A5,yXr),e(ce,xXr),e(ce,L5),e(L5,ewe),e(ewe,$Xr),e(L5,kXr),e(L5,Doe),e(Doe,SXr),e(L5,RXr),e(ce,PXr),e(ce,y5),e(y5,owe),e(owe,BXr),e(y5,IXr),e(y5,Goe),e(Goe,NXr),e(y5,qXr),e(ce,jXr),e(ce,x5),e(x5,rwe),e(rwe,DXr),e(x5,GXr),e(x5,Ooe),e(Ooe,OXr),e(x5,VXr),e(ce,XXr),e(ce,$5),e($5,twe),e(twe,zXr),e($5,WXr),e($5,Voe),e(Voe,QXr),e($5,UXr),e(ce,HXr),e(ce,k5),e(k5,awe),e(awe,JXr),e(k5,YXr),e(k5,Xoe),e(Xoe,KXr),e(k5,ZXr),e(ce,ezr),e(ce,S5),e(S5,nwe),e(nwe,ozr),e(S5,rzr),e(S5,zoe),e(zoe,tzr),e(S5,azr),e(ce,nzr),e(ce,R5),e(R5,swe),e(swe,szr),e(R5,lzr),e(R5,Woe),e(Woe,izr),e(R5,dzr),e(ce,czr),e(ce,P5),e(P5,lwe),e(lwe,fzr),e(P5,mzr),e(P5,Qoe),e(Qoe,gzr),e(P5,hzr),e(ce,pzr),e(ce,B5),e(B5,iwe),e(iwe,_zr),e(B5,uzr),e(B5,Uoe),e(Uoe,bzr),e(B5,vzr),e(ce,Fzr),e(ce,I5),e(I5,dwe),e(dwe,Tzr),e(I5,Mzr),e(I5,Hoe),e(Hoe,Ezr),e(I5,Czr),e(ce,wzr),e(ce,N5),e(N5,cwe),e(cwe,Azr),e(N5,Lzr),e(N5,Joe),e(Joe,yzr),e(N5,xzr),e(Wr,$zr),M(q5,Wr,null),b(f,hJe,u),b(f,pf,u),e(pf,j5),e(j5,fwe),M(Ik,fwe,null),e(pf,kzr),e(pf,mwe),e(mwe,Szr),b(f,pJe,u),b(f,br,u),M(Nk,br,null),e(br,Rzr),e(br,_f),e(_f,Pzr),e(_f,Yoe),e(Yoe,Bzr),e(_f,Izr),e(_f,Koe),e(Koe,Nzr),e(_f,qzr),e(br,jzr),e(br,qk),e(qk,Dzr),e(qk,gwe),e(gwe,Gzr),e(qk,Ozr),e(br,Vzr),e(br,Zt),M(jk,Zt,null),e(Zt,Xzr),e(Zt,hwe),e(hwe,zzr),e(Zt,Wzr),e(Zt,uf),e(uf,Qzr),e(uf,pwe),e(pwe,Uzr),e(uf,Hzr),e(uf,Zoe),e(Zoe,Jzr),e(uf,Yzr),e(Zt,Kzr),M(D5,Zt,null),e(br,Zzr),e(br,Qr),M(Dk,Qr,null),e(Qr,eWr),e(Qr,_we),e(_we,oWr),e(Qr,rWr),e(Qr,Rn),e(Rn,tWr),e(Rn,uwe),e(uwe,aWr),e(Rn,nWr),e(Rn,bwe),e(bwe,sWr),e(Rn,lWr),e(Rn,vwe),e(vwe,iWr),e(Rn,dWr),e(Qr,cWr),e(Qr,fe),e(fe,G5),e(G5,Fwe),e(Fwe,fWr),e(G5,mWr),e(G5,ere),e(ere,gWr),e(G5,hWr),e(fe,pWr),e(fe,O5),e(O5,Twe),e(Twe,_Wr),e(O5,uWr),e(O5,ore),e(ore,bWr),e(O5,vWr),e(fe,FWr),e(fe,V5),e(V5,Mwe),e(Mwe,TWr),e(V5,MWr),e(V5,rre),e(rre,EWr),e(V5,CWr),e(fe,wWr),e(fe,X5),e(X5,Ewe),e(Ewe,AWr),e(X5,LWr),e(X5,tre),e(tre,yWr),e(X5,xWr),e(fe,$Wr),e(fe,z5),e(z5,Cwe),e(Cwe,kWr),e(z5,SWr),e(z5,are),e(are,RWr),e(z5,PWr),e(fe,BWr),e(fe,W5),e(W5,wwe),e(wwe,IWr),e(W5,NWr),e(W5,nre),e(nre,qWr),e(W5,jWr),e(fe,DWr),e(fe,Q5),e(Q5,Awe),e(Awe,GWr),e(Q5,OWr),e(Q5,sre),e(sre,VWr),e(Q5,XWr),e(fe,zWr),e(fe,U5),e(U5,Lwe),e(Lwe,WWr),e(U5,QWr),e(U5,lre),e(lre,UWr),e(U5,HWr),e(fe,JWr),e(fe,H5),e(H5,ywe),e(ywe,YWr),e(H5,KWr),e(H5,ire),e(ire,ZWr),e(H5,eQr),e(fe,oQr),e(fe,J5),e(J5,xwe),e(xwe,rQr),e(J5,tQr),e(J5,dre),e(dre,aQr),e(J5,nQr),e(fe,sQr),e(fe,Y5),e(Y5,$we),e($we,lQr),e(Y5,iQr),e(Y5,cre),e(cre,dQr),e(Y5,cQr),e(fe,fQr),e(fe,K5),e(K5,kwe),e(kwe,mQr),e(K5,gQr),e(K5,fre),e(fre,hQr),e(K5,pQr),e(fe,_Qr),e(fe,Z5),e(Z5,Swe),e(Swe,uQr),e(Z5,bQr),e(Z5,mre),e(mre,vQr),e(Z5,FQr),e(fe,TQr),e(fe,e0),e(e0,Rwe),e(Rwe,MQr),e(e0,EQr),e(e0,gre),e(gre,CQr),e(e0,wQr),e(fe,AQr),e(fe,o0),e(o0,Pwe),e(Pwe,LQr),e(o0,yQr),e(o0,hre),e(hre,xQr),e(o0,$Qr),e(fe,kQr),e(fe,r0),e(r0,Bwe),e(Bwe,SQr),e(r0,RQr),e(r0,pre),e(pre,PQr),e(r0,BQr),e(fe,IQr),e(fe,t0),e(t0,Iwe),e(Iwe,NQr),e(t0,qQr),e(t0,_re),e(_re,jQr),e(t0,DQr),e(fe,GQr),e(fe,a0),e(a0,Nwe),e(Nwe,OQr),e(a0,VQr),e(a0,ure),e(ure,XQr),e(a0,zQr),e(fe,WQr),e(fe,n0),e(n0,qwe),e(qwe,QQr),e(n0,UQr),e(n0,bre),e(bre,HQr),e(n0,JQr),e(fe,YQr),e(fe,s0),e(s0,jwe),e(jwe,KQr),e(s0,ZQr),e(s0,vre),e(vre,eUr),e(s0,oUr),e(Qr,rUr),M(l0,Qr,null),b(f,_Je,u),b(f,bf,u),e(bf,i0),e(i0,Dwe),M(Gk,Dwe,null),e(bf,tUr),e(bf,Gwe),e(Gwe,aUr),b(f,uJe,u),b(f,vr,u),M(Ok,vr,null),e(vr,nUr),e(vr,vf),e(vf,sUr),e(vf,Fre),e(Fre,lUr),e(vf,iUr),e(vf,Tre),e(Tre,dUr),e(vf,cUr),e(vr,fUr),e(vr,Vk),e(Vk,mUr),e(Vk,Owe),e(Owe,gUr),e(Vk,hUr),e(vr,pUr),e(vr,ea),M(Xk,ea,null),e(ea,_Ur),e(ea,Vwe),e(Vwe,uUr),e(ea,bUr),e(ea,Ff),e(Ff,vUr),e(Ff,Xwe),e(Xwe,FUr),e(Ff,TUr),e(Ff,Mre),e(Mre,MUr),e(Ff,EUr),e(ea,CUr),M(d0,ea,null),e(vr,wUr),e(vr,Ur),M(zk,Ur,null),e(Ur,AUr),e(Ur,zwe),e(zwe,LUr),e(Ur,yUr),e(Ur,Pn),e(Pn,xUr),e(Pn,Wwe),e(Wwe,$Ur),e(Pn,kUr),e(Pn,Qwe),e(Qwe,SUr),e(Pn,RUr),e(Pn,Uwe),e(Uwe,PUr),e(Pn,BUr),e(Ur,IUr),e(Ur,Hwe),e(Hwe,c0),e(c0,Jwe),e(Jwe,NUr),e(c0,qUr),e(c0,Ere),e(Ere,jUr),e(c0,DUr),e(Ur,GUr),M(f0,Ur,null),b(f,bJe,u),b(f,Tf,u),e(Tf,m0),e(m0,Ywe),M(Wk,Ywe,null),e(Tf,OUr),e(Tf,Kwe),e(Kwe,VUr),b(f,vJe,u),b(f,Fr,u),M(Qk,Fr,null),e(Fr,XUr),e(Fr,Mf),e(Mf,zUr),e(Mf,Cre),e(Cre,WUr),e(Mf,QUr),e(Mf,wre),e(wre,UUr),e(Mf,HUr),e(Fr,JUr),e(Fr,Uk),e(Uk,YUr),e(Uk,Zwe),e(Zwe,KUr),e(Uk,ZUr),e(Fr,eHr),e(Fr,oa),M(Hk,oa,null),e(oa,oHr),e(oa,eAe),e(eAe,rHr),e(oa,tHr),e(oa,Ef),e(Ef,aHr),e(Ef,oAe),e(oAe,nHr),e(Ef,sHr),e(Ef,Are),e(Are,lHr),e(Ef,iHr),e(oa,dHr),M(g0,oa,null),e(Fr,cHr),e(Fr,Hr),M(Jk,Hr,null),e(Hr,fHr),e(Hr,rAe),e(rAe,mHr),e(Hr,gHr),e(Hr,Bn),e(Bn,hHr),e(Bn,tAe),e(tAe,pHr),e(Bn,_Hr),e(Bn,aAe),e(aAe,uHr),e(Bn,bHr),e(Bn,nAe),e(nAe,vHr),e(Bn,FHr),e(Hr,THr),e(Hr,sAe),e(sAe,h0),e(h0,lAe),e(lAe,MHr),e(h0,EHr),e(h0,Lre),e(Lre,CHr),e(h0,wHr),e(Hr,AHr),M(p0,Hr,null),b(f,FJe,u),b(f,Cf,u),e(Cf,_0),e(_0,iAe),M(Yk,iAe,null),e(Cf,LHr),e(Cf,dAe),e(dAe,yHr),b(f,TJe,u),b(f,Tr,u),M(Kk,Tr,null),e(Tr,xHr),e(Tr,wf),e(wf,$Hr),e(wf,yre),e(yre,kHr),e(wf,SHr),e(wf,xre),e(xre,RHr),e(wf,PHr),e(Tr,BHr),e(Tr,Zk),e(Zk,IHr),e(Zk,cAe),e(cAe,NHr),e(Zk,qHr),e(Tr,jHr),e(Tr,ra),M(eS,ra,null),e(ra,DHr),e(ra,fAe),e(fAe,GHr),e(ra,OHr),e(ra,Af),e(Af,VHr),e(Af,mAe),e(mAe,XHr),e(Af,zHr),e(Af,$re),e($re,WHr),e(Af,QHr),e(ra,UHr),M(u0,ra,null),e(Tr,HHr),e(Tr,Jr),M(oS,Jr,null),e(Jr,JHr),e(Jr,gAe),e(gAe,YHr),e(Jr,KHr),e(Jr,In),e(In,ZHr),e(In,hAe),e(hAe,eJr),e(In,oJr),e(In,pAe),e(pAe,rJr),e(In,tJr),e(In,_Ae),e(_Ae,aJr),e(In,nJr),e(Jr,sJr),e(Jr,re),e(re,b0),e(b0,uAe),e(uAe,lJr),e(b0,iJr),e(b0,kre),e(kre,dJr),e(b0,cJr),e(re,fJr),e(re,v0),e(v0,bAe),e(bAe,mJr),e(v0,gJr),e(v0,Sre),e(Sre,hJr),e(v0,pJr),e(re,_Jr),e(re,F0),e(F0,vAe),e(vAe,uJr),e(F0,bJr),e(F0,Rre),e(Rre,vJr),e(F0,FJr),e(re,TJr),e(re,T0),e(T0,FAe),e(FAe,MJr),e(T0,EJr),e(T0,Pre),e(Pre,CJr),e(T0,wJr),e(re,AJr),e(re,M0),e(M0,TAe),e(TAe,LJr),e(M0,yJr),e(M0,Bre),e(Bre,xJr),e(M0,$Jr),e(re,kJr),e(re,E0),e(E0,MAe),e(MAe,SJr),e(E0,RJr),e(E0,Ire),e(Ire,PJr),e(E0,BJr),e(re,IJr),e(re,C0),e(C0,EAe),e(EAe,NJr),e(C0,qJr),e(C0,Nre),e(Nre,jJr),e(C0,DJr),e(re,GJr),e(re,w0),e(w0,CAe),e(CAe,OJr),e(w0,VJr),e(w0,qre),e(qre,XJr),e(w0,zJr),e(re,WJr),e(re,A0),e(A0,wAe),e(wAe,QJr),e(A0,UJr),e(A0,jre),e(jre,HJr),e(A0,JJr),e(re,YJr),e(re,L0),e(L0,AAe),e(AAe,KJr),e(L0,ZJr),e(L0,Dre),e(Dre,eYr),e(L0,oYr),e(re,rYr),e(re,y0),e(y0,LAe),e(LAe,tYr),e(y0,aYr),e(y0,Gre),e(Gre,nYr),e(y0,sYr),e(re,lYr),e(re,x0),e(x0,yAe),e(yAe,iYr),e(x0,dYr),e(x0,Ore),e(Ore,cYr),e(x0,fYr),e(re,mYr),e(re,$0),e($0,xAe),e(xAe,gYr),e($0,hYr),e($0,Vre),e(Vre,pYr),e($0,_Yr),e(re,uYr),e(re,k0),e(k0,$Ae),e($Ae,bYr),e(k0,vYr),e(k0,Xre),e(Xre,FYr),e(k0,TYr),e(re,MYr),e(re,S0),e(S0,kAe),e(kAe,EYr),e(S0,CYr),e(S0,zre),e(zre,wYr),e(S0,AYr),e(re,LYr),e(re,R0),e(R0,SAe),e(SAe,yYr),e(R0,xYr),e(R0,Wre),e(Wre,$Yr),e(R0,kYr),e(re,SYr),e(re,P0),e(P0,RAe),e(RAe,RYr),e(P0,PYr),e(P0,Qre),e(Qre,BYr),e(P0,IYr),e(re,NYr),e(re,B0),e(B0,PAe),e(PAe,qYr),e(B0,jYr),e(B0,Ure),e(Ure,DYr),e(B0,GYr),e(re,OYr),e(re,I0),e(I0,BAe),e(BAe,VYr),e(I0,XYr),e(I0,Hre),e(Hre,zYr),e(I0,WYr),e(re,QYr),e(re,N0),e(N0,IAe),e(IAe,UYr),e(N0,HYr),e(N0,Jre),e(Jre,JYr),e(N0,YYr),e(re,KYr),e(re,q0),e(q0,NAe),e(NAe,ZYr),e(q0,eKr),e(q0,Yre),e(Yre,oKr),e(q0,rKr),e(re,tKr),e(re,j0),e(j0,qAe),e(qAe,aKr),e(j0,nKr),e(j0,Kre),e(Kre,sKr),e(j0,lKr),e(re,iKr),e(re,D0),e(D0,jAe),e(jAe,dKr),e(D0,cKr),e(D0,Zre),e(Zre,fKr),e(D0,mKr),e(re,gKr),e(re,G0),e(G0,DAe),e(DAe,hKr),e(G0,pKr),e(G0,ete),e(ete,_Kr),e(G0,uKr),e(re,bKr),e(re,O0),e(O0,GAe),e(GAe,vKr),e(O0,FKr),e(O0,ote),e(ote,TKr),e(O0,MKr),e(re,EKr),e(re,V0),e(V0,OAe),e(OAe,CKr),e(V0,wKr),e(V0,rte),e(rte,AKr),e(V0,LKr),e(re,yKr),e(re,X0),e(X0,VAe),e(VAe,xKr),e(X0,$Kr),e(X0,tte),e(tte,kKr),e(X0,SKr),e(Jr,RKr),M(z0,Jr,null),b(f,MJe,u),b(f,Lf,u),e(Lf,W0),e(W0,XAe),M(rS,XAe,null),e(Lf,PKr),e(Lf,zAe),e(zAe,BKr),b(f,EJe,u),b(f,Mr,u),M(tS,Mr,null),e(Mr,IKr),e(Mr,yf),e(yf,NKr),e(yf,ate),e(ate,qKr),e(yf,jKr),e(yf,nte),e(nte,DKr),e(yf,GKr),e(Mr,OKr),e(Mr,aS),e(aS,VKr),e(aS,WAe),e(WAe,XKr),e(aS,zKr),e(Mr,WKr),e(Mr,ta),M(nS,ta,null),e(ta,QKr),e(ta,QAe),e(QAe,UKr),e(ta,HKr),e(ta,xf),e(xf,JKr),e(xf,UAe),e(UAe,YKr),e(xf,KKr),e(xf,ste),e(ste,ZKr),e(xf,eZr),e(ta,oZr),M(Q0,ta,null),e(Mr,rZr),e(Mr,Yr),M(sS,Yr,null),e(Yr,tZr),e(Yr,HAe),e(HAe,aZr),e(Yr,nZr),e(Yr,Nn),e(Nn,sZr),e(Nn,JAe),e(JAe,lZr),e(Nn,iZr),e(Nn,YAe),e(YAe,dZr),e(Nn,cZr),e(Nn,KAe),e(KAe,fZr),e(Nn,mZr),e(Yr,gZr),e(Yr,xe),e(xe,U0),e(U0,ZAe),e(ZAe,hZr),e(U0,pZr),e(U0,lte),e(lte,_Zr),e(U0,uZr),e(xe,bZr),e(xe,H0),e(H0,e7e),e(e7e,vZr),e(H0,FZr),e(H0,ite),e(ite,TZr),e(H0,MZr),e(xe,EZr),e(xe,J0),e(J0,o7e),e(o7e,CZr),e(J0,wZr),e(J0,dte),e(dte,AZr),e(J0,LZr),e(xe,yZr),e(xe,Y0),e(Y0,r7e),e(r7e,xZr),e(Y0,$Zr),e(Y0,cte),e(cte,kZr),e(Y0,SZr),e(xe,RZr),e(xe,K0),e(K0,t7e),e(t7e,PZr),e(K0,BZr),e(K0,fte),e(fte,IZr),e(K0,NZr),e(xe,qZr),e(xe,Z0),e(Z0,a7e),e(a7e,jZr),e(Z0,DZr),e(Z0,mte),e(mte,GZr),e(Z0,OZr),e(xe,VZr),e(xe,ew),e(ew,n7e),e(n7e,XZr),e(ew,zZr),e(ew,gte),e(gte,WZr),e(ew,QZr),e(xe,UZr),e(xe,ow),e(ow,s7e),e(s7e,HZr),e(ow,JZr),e(ow,hte),e(hte,YZr),e(ow,KZr),e(xe,ZZr),e(xe,rw),e(rw,l7e),e(l7e,eet),e(rw,oet),e(rw,pte),e(pte,ret),e(rw,tet),e(xe,aet),e(xe,tw),e(tw,i7e),e(i7e,net),e(tw,set),e(tw,_te),e(_te,iet),e(tw,det),e(Yr,cet),M(aw,Yr,null),b(f,CJe,u),b(f,$f,u),e($f,nw),e(nw,d7e),M(lS,d7e,null),e($f,fet),e($f,c7e),e(c7e,met),b(f,wJe,u),b(f,Er,u),M(iS,Er,null),e(Er,get),e(Er,kf),e(kf,het),e(kf,ute),e(ute,pet),e(kf,_et),e(kf,bte),e(bte,uet),e(kf,bet),e(Er,vet),e(Er,dS),e(dS,Fet),e(dS,f7e),e(f7e,Tet),e(dS,Met),e(Er,Eet),e(Er,aa),M(cS,aa,null),e(aa,Cet),e(aa,m7e),e(m7e,wet),e(aa,Aet),e(aa,Sf),e(Sf,Let),e(Sf,g7e),e(g7e,yet),e(Sf,xet),e(Sf,vte),e(vte,$et),e(Sf,ket),e(aa,Set),M(sw,aa,null),e(Er,Ret),e(Er,Kr),M(fS,Kr,null),e(Kr,Pet),e(Kr,h7e),e(h7e,Bet),e(Kr,Iet),e(Kr,qn),e(qn,Net),e(qn,p7e),e(p7e,qet),e(qn,jet),e(qn,_7e),e(_7e,Det),e(qn,Get),e(qn,u7e),e(u7e,Oet),e(qn,Vet),e(Kr,Xet),e(Kr,Ee),e(Ee,lw),e(lw,b7e),e(b7e,zet),e(lw,Wet),e(lw,Fte),e(Fte,Qet),e(lw,Uet),e(Ee,Het),e(Ee,iw),e(iw,v7e),e(v7e,Jet),e(iw,Yet),e(iw,Tte),e(Tte,Ket),e(iw,Zet),e(Ee,eot),e(Ee,dw),e(dw,F7e),e(F7e,oot),e(dw,rot),e(dw,Mte),e(Mte,tot),e(dw,aot),e(Ee,not),e(Ee,cw),e(cw,T7e),e(T7e,sot),e(cw,lot),e(cw,Ete),e(Ete,iot),e(cw,dot),e(Ee,cot),e(Ee,fw),e(fw,M7e),e(M7e,fot),e(fw,mot),e(fw,Cte),e(Cte,got),e(fw,hot),e(Ee,pot),e(Ee,mw),e(mw,E7e),e(E7e,_ot),e(mw,uot),e(mw,wte),e(wte,bot),e(mw,vot),e(Ee,Fot),e(Ee,gw),e(gw,C7e),e(C7e,Tot),e(gw,Mot),e(gw,Ate),e(Ate,Eot),e(gw,Cot),e(Ee,wot),e(Ee,hw),e(hw,w7e),e(w7e,Aot),e(hw,Lot),e(hw,Lte),e(Lte,yot),e(hw,xot),e(Ee,$ot),e(Ee,pw),e(pw,A7e),e(A7e,kot),e(pw,Sot),e(pw,yte),e(yte,Rot),e(pw,Pot),e(Ee,Bot),e(Ee,_w),e(_w,L7e),e(L7e,Iot),e(_w,Not),e(_w,xte),e(xte,qot),e(_w,jot),e(Ee,Dot),e(Ee,uw),e(uw,y7e),e(y7e,Got),e(uw,Oot),e(uw,$te),e($te,Vot),e(uw,Xot),e(Ee,zot),e(Ee,bw),e(bw,x7e),e(x7e,Wot),e(bw,Qot),e(bw,kte),e(kte,Uot),e(bw,Hot),e(Ee,Jot),e(Ee,vw),e(vw,$7e),e($7e,Yot),e(vw,Kot),e(vw,Ste),e(Ste,Zot),e(vw,ert),e(Kr,ort),M(Fw,Kr,null),b(f,AJe,u),b(f,Rf,u),e(Rf,Tw),e(Tw,k7e),M(mS,k7e,null),e(Rf,rrt),e(Rf,S7e),e(S7e,trt),b(f,LJe,u),b(f,Cr,u),M(gS,Cr,null),e(Cr,art),e(Cr,Pf),e(Pf,nrt),e(Pf,Rte),e(Rte,srt),e(Pf,lrt),e(Pf,Pte),e(Pte,irt),e(Pf,drt),e(Cr,crt),e(Cr,hS),e(hS,frt),e(hS,R7e),e(R7e,mrt),e(hS,grt),e(Cr,hrt),e(Cr,na),M(pS,na,null),e(na,prt),e(na,P7e),e(P7e,_rt),e(na,urt),e(na,Bf),e(Bf,brt),e(Bf,B7e),e(B7e,vrt),e(Bf,Frt),e(Bf,Bte),e(Bte,Trt),e(Bf,Mrt),e(na,Ert),M(Mw,na,null),e(Cr,Crt),e(Cr,Zr),M(_S,Zr,null),e(Zr,wrt),e(Zr,I7e),e(I7e,Art),e(Zr,Lrt),e(Zr,jn),e(jn,yrt),e(jn,N7e),e(N7e,xrt),e(jn,$rt),e(jn,q7e),e(q7e,krt),e(jn,Srt),e(jn,j7e),e(j7e,Rrt),e(jn,Prt),e(Zr,Brt),e(Zr,$e),e($e,Ew),e(Ew,D7e),e(D7e,Irt),e(Ew,Nrt),e(Ew,Ite),e(Ite,qrt),e(Ew,jrt),e($e,Drt),e($e,Cw),e(Cw,G7e),e(G7e,Grt),e(Cw,Ort),e(Cw,Nte),e(Nte,Vrt),e(Cw,Xrt),e($e,zrt),e($e,ww),e(ww,O7e),e(O7e,Wrt),e(ww,Qrt),e(ww,qte),e(qte,Urt),e(ww,Hrt),e($e,Jrt),e($e,Aw),e(Aw,V7e),e(V7e,Yrt),e(Aw,Krt),e(Aw,jte),e(jte,Zrt),e(Aw,ett),e($e,ott),e($e,Lw),e(Lw,X7e),e(X7e,rtt),e(Lw,ttt),e(Lw,Dte),e(Dte,att),e(Lw,ntt),e($e,stt),e($e,yw),e(yw,z7e),e(z7e,ltt),e(yw,itt),e(yw,Gte),e(Gte,dtt),e(yw,ctt),e($e,ftt),e($e,xw),e(xw,W7e),e(W7e,mtt),e(xw,gtt),e(xw,Ote),e(Ote,htt),e(xw,ptt),e($e,_tt),e($e,$w),e($w,Q7e),e(Q7e,utt),e($w,btt),e($w,Vte),e(Vte,vtt),e($w,Ftt),e($e,Ttt),e($e,kw),e(kw,U7e),e(U7e,Mtt),e(kw,Ett),e(kw,Xte),e(Xte,Ctt),e(kw,wtt),e($e,Att),e($e,Sw),e(Sw,H7e),e(H7e,Ltt),e(Sw,ytt),e(Sw,zte),e(zte,xtt),e(Sw,$tt),e(Zr,ktt),M(Rw,Zr,null),b(f,yJe,u),b(f,If,u),e(If,Pw),e(Pw,J7e),M(uS,J7e,null),e(If,Stt),e(If,Y7e),e(Y7e,Rtt),b(f,xJe,u),b(f,wr,u),M(bS,wr,null),e(wr,Ptt),e(wr,Nf),e(Nf,Btt),e(Nf,Wte),e(Wte,Itt),e(Nf,Ntt),e(Nf,Qte),e(Qte,qtt),e(Nf,jtt),e(wr,Dtt),e(wr,vS),e(vS,Gtt),e(vS,K7e),e(K7e,Ott),e(vS,Vtt),e(wr,Xtt),e(wr,sa),M(FS,sa,null),e(sa,ztt),e(sa,Z7e),e(Z7e,Wtt),e(sa,Qtt),e(sa,qf),e(qf,Utt),e(qf,eLe),e(eLe,Htt),e(qf,Jtt),e(qf,Ute),e(Ute,Ytt),e(qf,Ktt),e(sa,Ztt),M(Bw,sa,null),e(wr,eat),e(wr,et),M(TS,et,null),e(et,oat),e(et,oLe),e(oLe,rat),e(et,tat),e(et,Dn),e(Dn,aat),e(Dn,rLe),e(rLe,nat),e(Dn,sat),e(Dn,tLe),e(tLe,lat),e(Dn,iat),e(Dn,aLe),e(aLe,dat),e(Dn,cat),e(et,fat),e(et,ke),e(ke,Iw),e(Iw,nLe),e(nLe,mat),e(Iw,gat),e(Iw,Hte),e(Hte,hat),e(Iw,pat),e(ke,_at),e(ke,Nw),e(Nw,sLe),e(sLe,uat),e(Nw,bat),e(Nw,Jte),e(Jte,vat),e(Nw,Fat),e(ke,Tat),e(ke,qw),e(qw,lLe),e(lLe,Mat),e(qw,Eat),e(qw,Yte),e(Yte,Cat),e(qw,wat),e(ke,Aat),e(ke,jw),e(jw,iLe),e(iLe,Lat),e(jw,yat),e(jw,Kte),e(Kte,xat),e(jw,$at),e(ke,kat),e(ke,Dw),e(Dw,dLe),e(dLe,Sat),e(Dw,Rat),e(Dw,Zte),e(Zte,Pat),e(Dw,Bat),e(ke,Iat),e(ke,Gw),e(Gw,cLe),e(cLe,Nat),e(Gw,qat),e(Gw,eae),e(eae,jat),e(Gw,Dat),e(ke,Gat),e(ke,Ow),e(Ow,fLe),e(fLe,Oat),e(Ow,Vat),e(Ow,oae),e(oae,Xat),e(Ow,zat),e(ke,Wat),e(ke,Vw),e(Vw,mLe),e(mLe,Qat),e(Vw,Uat),e(Vw,rae),e(rae,Hat),e(Vw,Jat),e(ke,Yat),e(ke,Xw),e(Xw,gLe),e(gLe,Kat),e(Xw,Zat),e(Xw,tae),e(tae,ent),e(Xw,ont),e(ke,rnt),e(ke,zw),e(zw,hLe),e(hLe,tnt),e(zw,ant),e(zw,aae),e(aae,nnt),e(zw,snt),e(et,lnt),M(Ww,et,null),b(f,$Je,u),b(f,jf,u),e(jf,Qw),e(Qw,pLe),M(MS,pLe,null),e(jf,int),e(jf,_Le),e(_Le,dnt),b(f,kJe,u),b(f,Ar,u),M(ES,Ar,null),e(Ar,cnt),e(Ar,Df),e(Df,fnt),e(Df,nae),e(nae,mnt),e(Df,gnt),e(Df,sae),e(sae,hnt),e(Df,pnt),e(Ar,_nt),e(Ar,CS),e(CS,unt),e(CS,uLe),e(uLe,bnt),e(CS,vnt),e(Ar,Fnt),e(Ar,la),M(wS,la,null),e(la,Tnt),e(la,bLe),e(bLe,Mnt),e(la,Ent),e(la,Gf),e(Gf,Cnt),e(Gf,vLe),e(vLe,wnt),e(Gf,Ant),e(Gf,lae),e(lae,Lnt),e(Gf,ynt),e(la,xnt),M(Uw,la,null),e(Ar,$nt),e(Ar,ot),M(AS,ot,null),e(ot,knt),e(ot,FLe),e(FLe,Snt),e(ot,Rnt),e(ot,Gn),e(Gn,Pnt),e(Gn,TLe),e(TLe,Bnt),e(Gn,Int),e(Gn,MLe),e(MLe,Nnt),e(Gn,qnt),e(Gn,ELe),e(ELe,jnt),e(Gn,Dnt),e(ot,Gnt),e(ot,Se),e(Se,Hw),e(Hw,CLe),e(CLe,Ont),e(Hw,Vnt),e(Hw,iae),e(iae,Xnt),e(Hw,znt),e(Se,Wnt),e(Se,Jw),e(Jw,wLe),e(wLe,Qnt),e(Jw,Unt),e(Jw,dae),e(dae,Hnt),e(Jw,Jnt),e(Se,Ynt),e(Se,Yw),e(Yw,ALe),e(ALe,Knt),e(Yw,Znt),e(Yw,cae),e(cae,est),e(Yw,ost),e(Se,rst),e(Se,Kw),e(Kw,LLe),e(LLe,tst),e(Kw,ast),e(Kw,fae),e(fae,nst),e(Kw,sst),e(Se,lst),e(Se,Zw),e(Zw,yLe),e(yLe,ist),e(Zw,dst),e(Zw,mae),e(mae,cst),e(Zw,fst),e(Se,mst),e(Se,eA),e(eA,xLe),e(xLe,gst),e(eA,hst),e(eA,gae),e(gae,pst),e(eA,_st),e(Se,ust),e(Se,oA),e(oA,$Le),e($Le,bst),e(oA,vst),e(oA,hae),e(hae,Fst),e(oA,Tst),e(Se,Mst),e(Se,rA),e(rA,kLe),e(kLe,Est),e(rA,Cst),e(rA,pae),e(pae,wst),e(rA,Ast),e(Se,Lst),e(Se,tA),e(tA,SLe),e(SLe,yst),e(tA,xst),e(tA,_ae),e(_ae,$st),e(tA,kst),e(Se,Sst),e(Se,aA),e(aA,RLe),e(RLe,Rst),e(aA,Pst),e(aA,uae),e(uae,Bst),e(aA,Ist),e(ot,Nst),M(nA,ot,null),b(f,SJe,u),b(f,Of,u),e(Of,sA),e(sA,PLe),M(LS,PLe,null),e(Of,qst),e(Of,BLe),e(BLe,jst),b(f,RJe,u),b(f,Lr,u),M(yS,Lr,null),e(Lr,Dst),e(Lr,Vf),e(Vf,Gst),e(Vf,bae),e(bae,Ost),e(Vf,Vst),e(Vf,vae),e(vae,Xst),e(Vf,zst),e(Lr,Wst),e(Lr,xS),e(xS,Qst),e(xS,ILe),e(ILe,Ust),e(xS,Hst),e(Lr,Jst),e(Lr,ia),M($S,ia,null),e(ia,Yst),e(ia,NLe),e(NLe,Kst),e(ia,Zst),e(ia,Xf),e(Xf,elt),e(Xf,qLe),e(qLe,olt),e(Xf,rlt),e(Xf,Fae),e(Fae,tlt),e(Xf,alt),e(ia,nlt),M(lA,ia,null),e(Lr,slt),e(Lr,rt),M(kS,rt,null),e(rt,llt),e(rt,jLe),e(jLe,ilt),e(rt,dlt),e(rt,On),e(On,clt),e(On,DLe),e(DLe,flt),e(On,mlt),e(On,GLe),e(GLe,glt),e(On,hlt),e(On,OLe),e(OLe,plt),e(On,_lt),e(rt,ult),e(rt,Re),e(Re,iA),e(iA,VLe),e(VLe,blt),e(iA,vlt),e(iA,Tae),e(Tae,Flt),e(iA,Tlt),e(Re,Mlt),e(Re,dA),e(dA,XLe),e(XLe,Elt),e(dA,Clt),e(dA,Mae),e(Mae,wlt),e(dA,Alt),e(Re,Llt),e(Re,cA),e(cA,zLe),e(zLe,ylt),e(cA,xlt),e(cA,Eae),e(Eae,$lt),e(cA,klt),e(Re,Slt),e(Re,fA),e(fA,WLe),e(WLe,Rlt),e(fA,Plt),e(fA,Cae),e(Cae,Blt),e(fA,Ilt),e(Re,Nlt),e(Re,mA),e(mA,QLe),e(QLe,qlt),e(mA,jlt),e(mA,wae),e(wae,Dlt),e(mA,Glt),e(Re,Olt),e(Re,gA),e(gA,ULe),e(ULe,Vlt),e(gA,Xlt),e(gA,Aae),e(Aae,zlt),e(gA,Wlt),e(Re,Qlt),e(Re,hA),e(hA,HLe),e(HLe,Ult),e(hA,Hlt),e(hA,Lae),e(Lae,Jlt),e(hA,Ylt),e(Re,Klt),e(Re,pA),e(pA,JLe),e(JLe,Zlt),e(pA,eit),e(pA,yae),e(yae,oit),e(pA,rit),e(Re,tit),e(Re,_A),e(_A,YLe),e(YLe,ait),e(_A,nit),e(_A,xae),e(xae,sit),e(_A,lit),e(Re,iit),e(Re,uA),e(uA,KLe),e(KLe,dit),e(uA,cit),e(uA,$ae),e($ae,fit),e(uA,mit),e(rt,git),M(bA,rt,null),b(f,PJe,u),b(f,zf,u),e(zf,vA),e(vA,ZLe),M(SS,ZLe,null),e(zf,hit),e(zf,eye),e(eye,pit),b(f,BJe,u),b(f,yr,u),M(RS,yr,null),e(yr,_it),e(yr,Wf),e(Wf,uit),e(Wf,kae),e(kae,bit),e(Wf,vit),e(Wf,Sae),e(Sae,Fit),e(Wf,Tit),e(yr,Mit),e(yr,PS),e(PS,Eit),e(PS,oye),e(oye,Cit),e(PS,wit),e(yr,Ait),e(yr,da),M(BS,da,null),e(da,Lit),e(da,rye),e(rye,yit),e(da,xit),e(da,Qf),e(Qf,$it),e(Qf,tye),e(tye,kit),e(Qf,Sit),e(Qf,Rae),e(Rae,Rit),e(Qf,Pit),e(da,Bit),M(FA,da,null),e(yr,Iit),e(yr,tt),M(IS,tt,null),e(tt,Nit),e(tt,aye),e(aye,qit),e(tt,jit),e(tt,Vn),e(Vn,Dit),e(Vn,nye),e(nye,Git),e(Vn,Oit),e(Vn,sye),e(sye,Vit),e(Vn,Xit),e(Vn,lye),e(lye,zit),e(Vn,Wit),e(tt,Qit),e(tt,Xe),e(Xe,TA),e(TA,iye),e(iye,Uit),e(TA,Hit),e(TA,Pae),e(Pae,Jit),e(TA,Yit),e(Xe,Kit),e(Xe,MA),e(MA,dye),e(dye,Zit),e(MA,edt),e(MA,Bae),e(Bae,odt),e(MA,rdt),e(Xe,tdt),e(Xe,EA),e(EA,cye),e(cye,adt),e(EA,ndt),e(EA,Iae),e(Iae,sdt),e(EA,ldt),e(Xe,idt),e(Xe,CA),e(CA,fye),e(fye,ddt),e(CA,cdt),e(CA,Nae),e(Nae,fdt),e(CA,mdt),e(Xe,gdt),e(Xe,wA),e(wA,mye),e(mye,hdt),e(wA,pdt),e(wA,qae),e(qae,_dt),e(wA,udt),e(Xe,bdt),e(Xe,AA),e(AA,gye),e(gye,vdt),e(AA,Fdt),e(AA,jae),e(jae,Tdt),e(AA,Mdt),e(Xe,Edt),e(Xe,LA),e(LA,hye),e(hye,Cdt),e(LA,wdt),e(LA,Dae),e(Dae,Adt),e(LA,Ldt),e(Xe,ydt),e(Xe,yA),e(yA,pye),e(pye,xdt),e(yA,$dt),e(yA,Gae),e(Gae,kdt),e(yA,Sdt),e(tt,Rdt),M(xA,tt,null),b(f,IJe,u),b(f,Uf,u),e(Uf,$A),e($A,_ye),M(NS,_ye,null),e(Uf,Pdt),e(Uf,uye),e(uye,Bdt),b(f,NJe,u),b(f,xr,u),M(qS,xr,null),e(xr,Idt),e(xr,Hf),e(Hf,Ndt),e(Hf,Oae),e(Oae,qdt),e(Hf,jdt),e(Hf,Vae),e(Vae,Ddt),e(Hf,Gdt),e(xr,Odt),e(xr,jS),e(jS,Vdt),e(jS,bye),e(bye,Xdt),e(jS,zdt),e(xr,Wdt),e(xr,ca),M(DS,ca,null),e(ca,Qdt),e(ca,vye),e(vye,Udt),e(ca,Hdt),e(ca,Jf),e(Jf,Jdt),e(Jf,Fye),e(Fye,Ydt),e(Jf,Kdt),e(Jf,Xae),e(Xae,Zdt),e(Jf,ect),e(ca,oct),M(kA,ca,null),e(xr,rct),e(xr,at),M(GS,at,null),e(at,tct),e(at,Tye),e(Tye,act),e(at,nct),e(at,Xn),e(Xn,sct),e(Xn,Mye),e(Mye,lct),e(Xn,ict),e(Xn,Eye),e(Eye,dct),e(Xn,cct),e(Xn,Cye),e(Cye,fct),e(Xn,mct),e(at,gct),e(at,ze),e(ze,SA),e(SA,wye),e(wye,hct),e(SA,pct),e(SA,zae),e(zae,_ct),e(SA,uct),e(ze,bct),e(ze,RA),e(RA,Aye),e(Aye,vct),e(RA,Fct),e(RA,Wae),e(Wae,Tct),e(RA,Mct),e(ze,Ect),e(ze,PA),e(PA,Lye),e(Lye,Cct),e(PA,wct),e(PA,Qae),e(Qae,Act),e(PA,Lct),e(ze,yct),e(ze,BA),e(BA,yye),e(yye,xct),e(BA,$ct),e(BA,Uae),e(Uae,kct),e(BA,Sct),e(ze,Rct),e(ze,IA),e(IA,xye),e(xye,Pct),e(IA,Bct),e(IA,Hae),e(Hae,Ict),e(IA,Nct),e(ze,qct),e(ze,NA),e(NA,$ye),e($ye,jct),e(NA,Dct),e(NA,Jae),e(Jae,Gct),e(NA,Oct),e(ze,Vct),e(ze,qA),e(qA,kye),e(kye,Xct),e(qA,zct),e(qA,Yae),e(Yae,Wct),e(qA,Qct),e(ze,Uct),e(ze,jA),e(jA,Sye),e(Sye,Hct),e(jA,Jct),e(jA,Kae),e(Kae,Yct),e(jA,Kct),e(at,Zct),M(DA,at,null),b(f,qJe,u),b(f,Yf,u),e(Yf,GA),e(GA,Rye),M(OS,Rye,null),e(Yf,eft),e(Yf,Pye),e(Pye,oft),b(f,jJe,u),b(f,$r,u),M(VS,$r,null),e($r,rft),e($r,Kf),e(Kf,tft),e(Kf,Zae),e(Zae,aft),e(Kf,nft),e(Kf,ene),e(ene,sft),e(Kf,lft),e($r,ift),e($r,XS),e(XS,dft),e(XS,Bye),e(Bye,cft),e(XS,fft),e($r,mft),e($r,fa),M(zS,fa,null),e(fa,gft),e(fa,Iye),e(Iye,hft),e(fa,pft),e(fa,Zf),e(Zf,_ft),e(Zf,Nye),e(Nye,uft),e(Zf,bft),e(Zf,one),e(one,vft),e(Zf,Fft),e(fa,Tft),M(OA,fa,null),e($r,Mft),e($r,nt),M(WS,nt,null),e(nt,Eft),e(nt,qye),e(qye,Cft),e(nt,wft),e(nt,zn),e(zn,Aft),e(zn,jye),e(jye,Lft),e(zn,yft),e(zn,Dye),e(Dye,xft),e(zn,$ft),e(zn,Gye),e(Gye,kft),e(zn,Sft),e(nt,Rft),e(nt,Oye),e(Oye,VA),e(VA,Vye),e(Vye,Pft),e(VA,Bft),e(VA,rne),e(rne,Ift),e(VA,Nft),e(nt,qft),M(XA,nt,null),b(f,DJe,u),b(f,em,u),e(em,zA),e(zA,Xye),M(QS,Xye,null),e(em,jft),e(em,zye),e(zye,Dft),b(f,GJe,u),b(f,kr,u),M(US,kr,null),e(kr,Gft),e(kr,om),e(om,Oft),e(om,tne),e(tne,Vft),e(om,Xft),e(om,ane),e(ane,zft),e(om,Wft),e(kr,Qft),e(kr,HS),e(HS,Uft),e(HS,Wye),e(Wye,Hft),e(HS,Jft),e(kr,Yft),e(kr,ma),M(JS,ma,null),e(ma,Kft),e(ma,Qye),e(Qye,Zft),e(ma,emt),e(ma,rm),e(rm,omt),e(rm,Uye),e(Uye,rmt),e(rm,tmt),e(rm,nne),e(nne,amt),e(rm,nmt),e(ma,smt),M(WA,ma,null),e(kr,lmt),e(kr,st),M(YS,st,null),e(st,imt),e(st,Hye),e(Hye,dmt),e(st,cmt),e(st,Wn),e(Wn,fmt),e(Wn,Jye),e(Jye,mmt),e(Wn,gmt),e(Wn,Yye),e(Yye,hmt),e(Wn,pmt),e(Wn,Kye),e(Kye,_mt),e(Wn,umt),e(st,bmt),e(st,KS),e(KS,QA),e(QA,Zye),e(Zye,vmt),e(QA,Fmt),e(QA,sne),e(sne,Tmt),e(QA,Mmt),e(KS,Emt),e(KS,UA),e(UA,e9e),e(e9e,Cmt),e(UA,wmt),e(UA,lne),e(lne,Amt),e(UA,Lmt),e(st,ymt),M(HA,st,null),b(f,OJe,u),b(f,tm,u),e(tm,JA),e(JA,o9e),M(ZS,o9e,null),e(tm,xmt),e(tm,r9e),e(r9e,$mt),b(f,VJe,u),b(f,Sr,u),M(eR,Sr,null),e(Sr,kmt),e(Sr,am),e(am,Smt),e(am,ine),e(ine,Rmt),e(am,Pmt),e(am,dne),e(dne,Bmt),e(am,Imt),e(Sr,Nmt),e(Sr,oR),e(oR,qmt),e(oR,t9e),e(t9e,jmt),e(oR,Dmt),e(Sr,Gmt),e(Sr,ga),M(rR,ga,null),e(ga,Omt),e(ga,a9e),e(a9e,Vmt),e(ga,Xmt),e(ga,nm),e(nm,zmt),e(nm,n9e),e(n9e,Wmt),e(nm,Qmt),e(nm,cne),e(cne,Umt),e(nm,Hmt),e(ga,Jmt),M(YA,ga,null),e(Sr,Ymt),e(Sr,lt),M(tR,lt,null),e(lt,Kmt),e(lt,s9e),e(s9e,Zmt),e(lt,egt),e(lt,Qn),e(Qn,ogt),e(Qn,l9e),e(l9e,rgt),e(Qn,tgt),e(Qn,i9e),e(i9e,agt),e(Qn,ngt),e(Qn,d9e),e(d9e,sgt),e(Qn,lgt),e(lt,igt),e(lt,c9e),e(c9e,KA),e(KA,f9e),e(f9e,dgt),e(KA,cgt),e(KA,fne),e(fne,fgt),e(KA,mgt),e(lt,ggt),M(ZA,lt,null),XJe=!0},p(f,[u]){const aR={};u&2&&(aR.$$scope={dirty:u,ctx:f}),hm.$set(aR);const m9e={};u&2&&(m9e.$$scope={dirty:u,ctx:f}),$h.$set(m9e);const g9e={};u&2&&(g9e.$$scope={dirty:u,ctx:f}),mp.$set(g9e);const h9e={};u&2&&(h9e.$$scope={dirty:u,ctx:f}),Zp.$set(h9e);const nR={};u&2&&(nR.$$scope={dirty:u,ctx:f}),e_.$set(nR);const p9e={};u&2&&(p9e.$$scope={dirty:u,ctx:f}),E_.$set(p9e);const Un={};u&2&&(Un.$$scope={dirty:u,ctx:f}),C_.$set(Un);const _9e={};u&2&&(_9e.$$scope={dirty:u,ctx:f}),L_.$set(_9e);const u9e={};u&2&&(u9e.$$scope={dirty:u,ctx:f}),I1.$set(u9e);const b9e={};u&2&&(b9e.$$scope={dirty:u,ctx:f}),q1.$set(b9e);const sR={};u&2&&(sR.$$scope={dirty:u,ctx:f}),R8.$set(sR);const v9e={};u&2&&(v9e.$$scope={dirty:u,ctx:f}),B8.$set(v9e);const lR={};u&2&&(lR.$$scope={dirty:u,ctx:f}),Eb.$set(lR);const F9e={};u&2&&(F9e.$$scope={dirty:u,ctx:f}),wb.$set(F9e);const iR={};u&2&&(iR.$$scope={dirty:u,ctx:f}),xb.$set(iR);const T9e={};u&2&&(T9e.$$scope={dirty:u,ctx:f}),kb.$set(T9e);const M9e={};u&2&&(M9e.$$scope={dirty:u,ctx:f}),u2.$set(M9e);const E9e={};u&2&&(E9e.$$scope={dirty:u,ctx:f}),v2.$set(E9e);const sm={};u&2&&(sm.$$scope={dirty:u,ctx:f}),D2.$set(sm);const C9e={};u&2&&(C9e.$$scope={dirty:u,ctx:f}),O2.$set(C9e);const w9e={};u&2&&(w9e.$$scope={dirty:u,ctx:f}),Ov.$set(w9e);const A9e={};u&2&&(A9e.$$scope={dirty:u,ctx:f}),Xv.$set(A9e);const dR={};u&2&&(dR.$$scope={dirty:u,ctx:f}),E6.$set(dR);const L9e={};u&2&&(L9e.$$scope={dirty:u,ctx:f}),w6.$set(L9e);const y9e={};u&2&&(y9e.$$scope={dirty:u,ctx:f}),R6.$set(y9e);const x9e={};u&2&&(x9e.$$scope={dirty:u,ctx:f}),B6.$set(x9e);const ft={};u&2&&(ft.$$scope={dirty:u,ctx:f}),FF.$set(ft);const cR={};u&2&&(cR.$$scope={dirty:u,ctx:f}),MF.$set(cR);const $9e={};u&2&&($9e.$$scope={dirty:u,ctx:f}),gT.$set($9e);const fR={};u&2&&(fR.$$scope={dirty:u,ctx:f}),pT.$set(fR);const k9e={};u&2&&(k9e.$$scope={dirty:u,ctx:f}),bT.$set(k9e);const mt={};u&2&&(mt.$$scope={dirty:u,ctx:f}),FT.$set(mt);const S9e={};u&2&&(S9e.$$scope={dirty:u,ctx:f}),IT.$set(S9e);const lm={};u&2&&(lm.$$scope={dirty:u,ctx:f}),qT.$set(lm);const R9e={};u&2&&(R9e.$$scope={dirty:u,ctx:f}),GT.$set(R9e);const P9e={};u&2&&(P9e.$$scope={dirty:u,ctx:f}),VT.$set(P9e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),WT.$set(L);const e7={};u&2&&(e7.$$scope={dirty:u,ctx:f}),UT.$set(e7);const B9e={};u&2&&(B9e.$$scope={dirty:u,ctx:f}),YT.$set(B9e);const I9e={};u&2&&(I9e.$$scope={dirty:u,ctx:f}),ZT.$set(I9e);const o7={};u&2&&(o7.$$scope={dirty:u,ctx:f}),cM.$set(o7);const N9e={};u&2&&(N9e.$$scope={dirty:u,ctx:f}),mM.$set(N9e);const q9e={};u&2&&(q9e.$$scope={dirty:u,ctx:f}),vM.$set(q9e);const r7={};u&2&&(r7.$$scope={dirty:u,ctx:f}),TM.$set(r7);const j9e={};u&2&&(j9e.$$scope={dirty:u,ctx:f}),RM.$set(j9e);const D9e={};u&2&&(D9e.$$scope={dirty:u,ctx:f}),BM.$set(D9e);const t7={};u&2&&(t7.$$scope={dirty:u,ctx:f}),jM.$set(t7);const G9e={};u&2&&(G9e.$$scope={dirty:u,ctx:f}),GM.$set(G9e);const O9e={};u&2&&(O9e.$$scope={dirty:u,ctx:f}),UM.$set(O9e);const a7={};u&2&&(a7.$$scope={dirty:u,ctx:f}),JM.$set(a7);const V9e={};u&2&&(V9e.$$scope={dirty:u,ctx:f}),rE.$set(V9e);const X9e={};u&2&&(X9e.$$scope={dirty:u,ctx:f}),aE.$set(X9e);const n7={};u&2&&(n7.$$scope={dirty:u,ctx:f}),iE.$set(n7);const z9e={};u&2&&(z9e.$$scope={dirty:u,ctx:f}),cE.$set(z9e);const W9e={};u&2&&(W9e.$$scope={dirty:u,ctx:f}),gE.$set(W9e);const s7={};u&2&&(s7.$$scope={dirty:u,ctx:f}),pE.$set(s7);const Q9e={};u&2&&(Q9e.$$scope={dirty:u,ctx:f}),ME.$set(Q9e);const U9e={};u&2&&(U9e.$$scope={dirty:u,ctx:f}),CE.$set(U9e);const l7={};u&2&&(l7.$$scope={dirty:u,ctx:f}),LE.$set(l7);const H9e={};u&2&&(H9e.$$scope={dirty:u,ctx:f}),xE.$set(H9e);const J9e={};u&2&&(J9e.$$scope={dirty:u,ctx:f}),A4.$set(J9e);const i7={};u&2&&(i7.$$scope={dirty:u,ctx:f}),y4.$set(i7);const Y9e={};u&2&&(Y9e.$$scope={dirty:u,ctx:f}),K4.$set(Y9e);const K9e={};u&2&&(K9e.$$scope={dirty:u,ctx:f}),eC.$set(K9e);const d7={};u&2&&(d7.$$scope={dirty:u,ctx:f}),hC.$set(d7);const Z9e={};u&2&&(Z9e.$$scope={dirty:u,ctx:f}),_C.$set(Z9e);const exe={};u&2&&(exe.$$scope={dirty:u,ctx:f}),CC.$set(exe);const c7={};u&2&&(c7.$$scope={dirty:u,ctx:f}),AC.$set(c7);const oxe={};u&2&&(oxe.$$scope={dirty:u,ctx:f}),xC.$set(oxe);const rxe={};u&2&&(rxe.$$scope={dirty:u,ctx:f}),kC.$set(rxe);const f7={};u&2&&(f7.$$scope={dirty:u,ctx:f}),KC.$set(f7);const txe={};u&2&&(txe.$$scope={dirty:u,ctx:f}),e3.$set(txe);const axe={};u&2&&(axe.$$scope={dirty:u,ctx:f}),f3.$set(axe);const m7={};u&2&&(m7.$$scope={dirty:u,ctx:f}),g3.$set(m7);const nxe={};u&2&&(nxe.$$scope={dirty:u,ctx:f}),D3.$set(nxe);const sxe={};u&2&&(sxe.$$scope={dirty:u,ctx:f}),O3.$set(sxe);const g7={};u&2&&(g7.$$scope={dirty:u,ctx:f}),s5.$set(g7);const lxe={};u&2&&(lxe.$$scope={dirty:u,ctx:f}),i5.$set(lxe);const ixe={};u&2&&(ixe.$$scope={dirty:u,ctx:f}),f5.$set(ixe);const h7={};u&2&&(h7.$$scope={dirty:u,ctx:f}),g5.$set(h7);const dxe={};u&2&&(dxe.$$scope={dirty:u,ctx:f}),p5.$set(dxe);const cxe={};u&2&&(cxe.$$scope={dirty:u,ctx:f}),u5.$set(cxe);const p7={};u&2&&(p7.$$scope={dirty:u,ctx:f}),q5.$set(p7);const fxe={};u&2&&(fxe.$$scope={dirty:u,ctx:f}),D5.$set(fxe);const mxe={};u&2&&(mxe.$$scope={dirty:u,ctx:f}),l0.$set(mxe);const _7={};u&2&&(_7.$$scope={dirty:u,ctx:f}),d0.$set(_7);const gxe={};u&2&&(gxe.$$scope={dirty:u,ctx:f}),f0.$set(gxe);const hxe={};u&2&&(hxe.$$scope={dirty:u,ctx:f}),g0.$set(hxe);const u7={};u&2&&(u7.$$scope={dirty:u,ctx:f}),p0.$set(u7);const pxe={};u&2&&(pxe.$$scope={dirty:u,ctx:f}),u0.$set(pxe);const _xe={};u&2&&(_xe.$$scope={dirty:u,ctx:f}),z0.$set(_xe);const b7={};u&2&&(b7.$$scope={dirty:u,ctx:f}),Q0.$set(b7);const uxe={};u&2&&(uxe.$$scope={dirty:u,ctx:f}),aw.$set(uxe);const bxe={};u&2&&(bxe.$$scope={dirty:u,ctx:f}),sw.$set(bxe);const v7={};u&2&&(v7.$$scope={dirty:u,ctx:f}),Fw.$set(v7);const vxe={};u&2&&(vxe.$$scope={dirty:u,ctx:f}),Mw.$set(vxe);const Fxe={};u&2&&(Fxe.$$scope={dirty:u,ctx:f}),Rw.$set(Fxe);const F7={};u&2&&(F7.$$scope={dirty:u,ctx:f}),Bw.$set(F7);const Txe={};u&2&&(Txe.$$scope={dirty:u,ctx:f}),Ww.$set(Txe);const Mxe={};u&2&&(Mxe.$$scope={dirty:u,ctx:f}),Uw.$set(Mxe);const T7={};u&2&&(T7.$$scope={dirty:u,ctx:f}),nA.$set(T7);const Exe={};u&2&&(Exe.$$scope={dirty:u,ctx:f}),lA.$set(Exe);const Cxe={};u&2&&(Cxe.$$scope={dirty:u,ctx:f}),bA.$set(Cxe);const M7={};u&2&&(M7.$$scope={dirty:u,ctx:f}),FA.$set(M7);const wxe={};u&2&&(wxe.$$scope={dirty:u,ctx:f}),xA.$set(wxe);const Axe={};u&2&&(Axe.$$scope={dirty:u,ctx:f}),kA.$set(Axe);const E7={};u&2&&(E7.$$scope={dirty:u,ctx:f}),DA.$set(E7);const Lxe={};u&2&&(Lxe.$$scope={dirty:u,ctx:f}),OA.$set(Lxe);const yxe={};u&2&&(yxe.$$scope={dirty:u,ctx:f}),XA.$set(yxe);const C7={};u&2&&(C7.$$scope={dirty:u,ctx:f}),WA.$set(C7);const xxe={};u&2&&(xxe.$$scope={dirty:u,ctx:f}),HA.$set(xxe);const $xe={};u&2&&($xe.$$scope={dirty:u,ctx:f}),YA.$set($xe);const w7={};u&2&&(w7.$$scope={dirty:u,ctx:f}),ZA.$set(w7)},i(f){XJe||(E(d.$$.fragment,f),E(Va.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(hm.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(Ny.$$.fragment,f),E($h.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Vy.$$.fragment,f),E(mp.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Zp.$$.fragment,f),E(e_.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(o9.$$.fragment,f),E(E_.$$.fragment,f),E(C_.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(L_.$$.fragment,f),E(l9.$$.fragment,f),E(I1.$$.fragment,f),E(i9.$$.fragment,f),E(d9.$$.fragment,f),E(f9.$$.fragment,f),E(q1.$$.fragment,f),E(m9.$$.fragment,f),E(R8.$$.fragment,f),E(g9.$$.fragment,f),E(h9.$$.fragment,f),E(_9.$$.fragment,f),E(B8.$$.fragment,f),E(u9.$$.fragment,f),E(Eb.$$.fragment,f),E(b9.$$.fragment,f),E(v9.$$.fragment,f),E(T9.$$.fragment,f),E(wb.$$.fragment,f),E(M9.$$.fragment,f),E(xb.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(L9.$$.fragment,f),E(kb.$$.fragment,f),E(y9.$$.fragment,f),E(u2.$$.fragment,f),E(x9.$$.fragment,f),E($9.$$.fragment,f),E(S9.$$.fragment,f),E(v2.$$.fragment,f),E(R9.$$.fragment,f),E(D2.$$.fragment,f),E(P9.$$.fragment,f),E(B9.$$.fragment,f),E(N9.$$.fragment,f),E(O2.$$.fragment,f),E(q9.$$.fragment,f),E(Ov.$$.fragment,f),E(j9.$$.fragment,f),E(D9.$$.fragment,f),E(O9.$$.fragment,f),E(Xv.$$.fragment,f),E(V9.$$.fragment,f),E(E6.$$.fragment,f),E(X9.$$.fragment,f),E(z9.$$.fragment,f),E(Q9.$$.fragment,f),E(w6.$$.fragment,f),E(U9.$$.fragment,f),E(R6.$$.fragment,f),E(H9.$$.fragment,f),E(J9.$$.fragment,f),E(K9.$$.fragment,f),E(B6.$$.fragment,f),E(Z9.$$.fragment,f),E(FF.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(MF.$$.fragment,f),E(ax.$$.fragment,f),E(gT.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(pT.$$.fragment,f),E(dx.$$.fragment,f),E(bT.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(FT.$$.fragment,f),E(hx.$$.fragment,f),E(IT.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(qT.$$.fragment,f),E(vx.$$.fragment,f),E(GT.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(VT.$$.fragment,f),E(Cx.$$.fragment,f),E(WT.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(UT.$$.fragment,f),E(xx.$$.fragment,f),E(YT.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(ZT.$$.fragment,f),E(Px.$$.fragment,f),E(cM.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(mM.$$.fragment,f),E(jx.$$.fragment,f),E(vM.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(TM.$$.fragment,f),E(Xx.$$.fragment,f),E(RM.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(Ux.$$.fragment,f),E(BM.$$.fragment,f),E(Hx.$$.fragment,f),E(jM.$$.fragment,f),E(Yx.$$.fragment,f),E(Kx.$$.fragment,f),E(e$.$$.fragment,f),E(GM.$$.fragment,f),E(o$.$$.fragment,f),E(UM.$$.fragment,f),E(r$.$$.fragment,f),E(t$.$$.fragment,f),E(n$.$$.fragment,f),E(JM.$$.fragment,f),E(s$.$$.fragment,f),E(rE.$$.fragment,f),E(l$.$$.fragment,f),E(i$.$$.fragment,f),E(c$.$$.fragment,f),E(aE.$$.fragment,f),E(f$.$$.fragment,f),E(iE.$$.fragment,f),E(g$.$$.fragment,f),E(h$.$$.fragment,f),E(_$.$$.fragment,f),E(cE.$$.fragment,f),E(u$.$$.fragment,f),E(gE.$$.fragment,f),E(b$.$$.fragment,f),E(v$.$$.fragment,f),E(T$.$$.fragment,f),E(pE.$$.fragment,f),E(M$.$$.fragment,f),E(ME.$$.fragment,f),E(E$.$$.fragment,f),E(C$.$$.fragment,f),E(A$.$$.fragment,f),E(CE.$$.fragment,f),E(L$.$$.fragment,f),E(LE.$$.fragment,f),E(y$.$$.fragment,f),E(x$.$$.fragment,f),E(k$.$$.fragment,f),E(xE.$$.fragment,f),E(S$.$$.fragment,f),E(A4.$$.fragment,f),E(R$.$$.fragment,f),E(P$.$$.fragment,f),E(I$.$$.fragment,f),E(y4.$$.fragment,f),E(N$.$$.fragment,f),E(K4.$$.fragment,f),E(q$.$$.fragment,f),E(j$.$$.fragment,f),E(G$.$$.fragment,f),E(eC.$$.fragment,f),E(O$.$$.fragment,f),E(hC.$$.fragment,f),E(V$.$$.fragment,f),E(X$.$$.fragment,f),E(W$.$$.fragment,f),E(_C.$$.fragment,f),E(Q$.$$.fragment,f),E(CC.$$.fragment,f),E(U$.$$.fragment,f),E(H$.$$.fragment,f),E(Y$.$$.fragment,f),E(AC.$$.fragment,f),E(K$.$$.fragment,f),E(xC.$$.fragment,f),E(ek.$$.fragment,f),E(ok.$$.fragment,f),E(tk.$$.fragment,f),E(kC.$$.fragment,f),E(ak.$$.fragment,f),E(KC.$$.fragment,f),E(nk.$$.fragment,f),E(sk.$$.fragment,f),E(ik.$$.fragment,f),E(e3.$$.fragment,f),E(dk.$$.fragment,f),E(f3.$$.fragment,f),E(ck.$$.fragment,f),E(fk.$$.fragment,f),E(gk.$$.fragment,f),E(g3.$$.fragment,f),E(hk.$$.fragment,f),E(D3.$$.fragment,f),E(pk.$$.fragment,f),E(_k.$$.fragment,f),E(bk.$$.fragment,f),E(O3.$$.fragment,f),E(vk.$$.fragment,f),E(s5.$$.fragment,f),E(Fk.$$.fragment,f),E(Tk.$$.fragment,f),E(Ek.$$.fragment,f),E(i5.$$.fragment,f),E(Ck.$$.fragment,f),E(f5.$$.fragment,f),E(Ak.$$.fragment,f),E(Lk.$$.fragment,f),E(xk.$$.fragment,f),E(g5.$$.fragment,f),E($k.$$.fragment,f),E(p5.$$.fragment,f),E(kk.$$.fragment,f),E(Sk.$$.fragment,f),E(Pk.$$.fragment,f),E(u5.$$.fragment,f),E(Bk.$$.fragment,f),E(q5.$$.fragment,f),E(Ik.$$.fragment,f),E(Nk.$$.fragment,f),E(jk.$$.fragment,f),E(D5.$$.fragment,f),E(Dk.$$.fragment,f),E(l0.$$.fragment,f),E(Gk.$$.fragment,f),E(Ok.$$.fragment,f),E(Xk.$$.fragment,f),E(d0.$$.fragment,f),E(zk.$$.fragment,f),E(f0.$$.fragment,f),E(Wk.$$.fragment,f),E(Qk.$$.fragment,f),E(Hk.$$.fragment,f),E(g0.$$.fragment,f),E(Jk.$$.fragment,f),E(p0.$$.fragment,f),E(Yk.$$.fragment,f),E(Kk.$$.fragment,f),E(eS.$$.fragment,f),E(u0.$$.fragment,f),E(oS.$$.fragment,f),E(z0.$$.fragment,f),E(rS.$$.fragment,f),E(tS.$$.fragment,f),E(nS.$$.fragment,f),E(Q0.$$.fragment,f),E(sS.$$.fragment,f),E(aw.$$.fragment,f),E(lS.$$.fragment,f),E(iS.$$.fragment,f),E(cS.$$.fragment,f),E(sw.$$.fragment,f),E(fS.$$.fragment,f),E(Fw.$$.fragment,f),E(mS.$$.fragment,f),E(gS.$$.fragment,f),E(pS.$$.fragment,f),E(Mw.$$.fragment,f),E(_S.$$.fragment,f),E(Rw.$$.fragment,f),E(uS.$$.fragment,f),E(bS.$$.fragment,f),E(FS.$$.fragment,f),E(Bw.$$.fragment,f),E(TS.$$.fragment,f),E(Ww.$$.fragment,f),E(MS.$$.fragment,f),E(ES.$$.fragment,f),E(wS.$$.fragment,f),E(Uw.$$.fragment,f),E(AS.$$.fragment,f),E(nA.$$.fragment,f),E(LS.$$.fragment,f),E(yS.$$.fragment,f),E($S.$$.fragment,f),E(lA.$$.fragment,f),E(kS.$$.fragment,f),E(bA.$$.fragment,f),E(SS.$$.fragment,f),E(RS.$$.fragment,f),E(BS.$$.fragment,f),E(FA.$$.fragment,f),E(IS.$$.fragment,f),E(xA.$$.fragment,f),E(NS.$$.fragment,f),E(qS.$$.fragment,f),E(DS.$$.fragment,f),E(kA.$$.fragment,f),E(GS.$$.fragment,f),E(DA.$$.fragment,f),E(OS.$$.fragment,f),E(VS.$$.fragment,f),E(zS.$$.fragment,f),E(OA.$$.fragment,f),E(WS.$$.fragment,f),E(XA.$$.fragment,f),E(QS.$$.fragment,f),E(US.$$.fragment,f),E(JS.$$.fragment,f),E(WA.$$.fragment,f),E(YS.$$.fragment,f),E(HA.$$.fragment,f),E(ZS.$$.fragment,f),E(eR.$$.fragment,f),E(rR.$$.fragment,f),E(YA.$$.fragment,f),E(tR.$$.fragment,f),E(ZA.$$.fragment,f),XJe=!0)},o(f){C(d.$$.fragment,f),C(Va.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(hm.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(Ny.$$.fragment,f),C($h.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Vy.$$.fragment,f),C(mp.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Zp.$$.fragment,f),C(e_.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(o9.$$.fragment,f),C(E_.$$.fragment,f),C(C_.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(L_.$$.fragment,f),C(l9.$$.fragment,f),C(I1.$$.fragment,f),C(i9.$$.fragment,f),C(d9.$$.fragment,f),C(f9.$$.fragment,f),C(q1.$$.fragment,f),C(m9.$$.fragment,f),C(R8.$$.fragment,f),C(g9.$$.fragment,f),C(h9.$$.fragment,f),C(_9.$$.fragment,f),C(B8.$$.fragment,f),C(u9.$$.fragment,f),C(Eb.$$.fragment,f),C(b9.$$.fragment,f),C(v9.$$.fragment,f),C(T9.$$.fragment,f),C(wb.$$.fragment,f),C(M9.$$.fragment,f),C(xb.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(L9.$$.fragment,f),C(kb.$$.fragment,f),C(y9.$$.fragment,f),C(u2.$$.fragment,f),C(x9.$$.fragment,f),C($9.$$.fragment,f),C(S9.$$.fragment,f),C(v2.$$.fragment,f),C(R9.$$.fragment,f),C(D2.$$.fragment,f),C(P9.$$.fragment,f),C(B9.$$.fragment,f),C(N9.$$.fragment,f),C(O2.$$.fragment,f),C(q9.$$.fragment,f),C(Ov.$$.fragment,f),C(j9.$$.fragment,f),C(D9.$$.fragment,f),C(O9.$$.fragment,f),C(Xv.$$.fragment,f),C(V9.$$.fragment,f),C(E6.$$.fragment,f),C(X9.$$.fragment,f),C(z9.$$.fragment,f),C(Q9.$$.fragment,f),C(w6.$$.fragment,f),C(U9.$$.fragment,f),C(R6.$$.fragment,f),C(H9.$$.fragment,f),C(J9.$$.fragment,f),C(K9.$$.fragment,f),C(B6.$$.fragment,f),C(Z9.$$.fragment,f),C(FF.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(MF.$$.fragment,f),C(ax.$$.fragment,f),C(gT.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(pT.$$.fragment,f),C(dx.$$.fragment,f),C(bT.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(FT.$$.fragment,f),C(hx.$$.fragment,f),C(IT.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(qT.$$.fragment,f),C(vx.$$.fragment,f),C(GT.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(VT.$$.fragment,f),C(Cx.$$.fragment,f),C(WT.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(UT.$$.fragment,f),C(xx.$$.fragment,f),C(YT.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(ZT.$$.fragment,f),C(Px.$$.fragment,f),C(cM.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(mM.$$.fragment,f),C(jx.$$.fragment,f),C(vM.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(TM.$$.fragment,f),C(Xx.$$.fragment,f),C(RM.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(Ux.$$.fragment,f),C(BM.$$.fragment,f),C(Hx.$$.fragment,f),C(jM.$$.fragment,f),C(Yx.$$.fragment,f),C(Kx.$$.fragment,f),C(e$.$$.fragment,f),C(GM.$$.fragment,f),C(o$.$$.fragment,f),C(UM.$$.fragment,f),C(r$.$$.fragment,f),C(t$.$$.fragment,f),C(n$.$$.fragment,f),C(JM.$$.fragment,f),C(s$.$$.fragment,f),C(rE.$$.fragment,f),C(l$.$$.fragment,f),C(i$.$$.fragment,f),C(c$.$$.fragment,f),C(aE.$$.fragment,f),C(f$.$$.fragment,f),C(iE.$$.fragment,f),C(g$.$$.fragment,f),C(h$.$$.fragment,f),C(_$.$$.fragment,f),C(cE.$$.fragment,f),C(u$.$$.fragment,f),C(gE.$$.fragment,f),C(b$.$$.fragment,f),C(v$.$$.fragment,f),C(T$.$$.fragment,f),C(pE.$$.fragment,f),C(M$.$$.fragment,f),C(ME.$$.fragment,f),C(E$.$$.fragment,f),C(C$.$$.fragment,f),C(A$.$$.fragment,f),C(CE.$$.fragment,f),C(L$.$$.fragment,f),C(LE.$$.fragment,f),C(y$.$$.fragment,f),C(x$.$$.fragment,f),C(k$.$$.fragment,f),C(xE.$$.fragment,f),C(S$.$$.fragment,f),C(A4.$$.fragment,f),C(R$.$$.fragment,f),C(P$.$$.fragment,f),C(I$.$$.fragment,f),C(y4.$$.fragment,f),C(N$.$$.fragment,f),C(K4.$$.fragment,f),C(q$.$$.fragment,f),C(j$.$$.fragment,f),C(G$.$$.fragment,f),C(eC.$$.fragment,f),C(O$.$$.fragment,f),C(hC.$$.fragment,f),C(V$.$$.fragment,f),C(X$.$$.fragment,f),C(W$.$$.fragment,f),C(_C.$$.fragment,f),C(Q$.$$.fragment,f),C(CC.$$.fragment,f),C(U$.$$.fragment,f),C(H$.$$.fragment,f),C(Y$.$$.fragment,f),C(AC.$$.fragment,f),C(K$.$$.fragment,f),C(xC.$$.fragment,f),C(ek.$$.fragment,f),C(ok.$$.fragment,f),C(tk.$$.fragment,f),C(kC.$$.fragment,f),C(ak.$$.fragment,f),C(KC.$$.fragment,f),C(nk.$$.fragment,f),C(sk.$$.fragment,f),C(ik.$$.fragment,f),C(e3.$$.fragment,f),C(dk.$$.fragment,f),C(f3.$$.fragment,f),C(ck.$$.fragment,f),C(fk.$$.fragment,f),C(gk.$$.fragment,f),C(g3.$$.fragment,f),C(hk.$$.fragment,f),C(D3.$$.fragment,f),C(pk.$$.fragment,f),C(_k.$$.fragment,f),C(bk.$$.fragment,f),C(O3.$$.fragment,f),C(vk.$$.fragment,f),C(s5.$$.fragment,f),C(Fk.$$.fragment,f),C(Tk.$$.fragment,f),C(Ek.$$.fragment,f),C(i5.$$.fragment,f),C(Ck.$$.fragment,f),C(f5.$$.fragment,f),C(Ak.$$.fragment,f),C(Lk.$$.fragment,f),C(xk.$$.fragment,f),C(g5.$$.fragment,f),C($k.$$.fragment,f),C(p5.$$.fragment,f),C(kk.$$.fragment,f),C(Sk.$$.fragment,f),C(Pk.$$.fragment,f),C(u5.$$.fragment,f),C(Bk.$$.fragment,f),C(q5.$$.fragment,f),C(Ik.$$.fragment,f),C(Nk.$$.fragment,f),C(jk.$$.fragment,f),C(D5.$$.fragment,f),C(Dk.$$.fragment,f),C(l0.$$.fragment,f),C(Gk.$$.fragment,f),C(Ok.$$.fragment,f),C(Xk.$$.fragment,f),C(d0.$$.fragment,f),C(zk.$$.fragment,f),C(f0.$$.fragment,f),C(Wk.$$.fragment,f),C(Qk.$$.fragment,f),C(Hk.$$.fragment,f),C(g0.$$.fragment,f),C(Jk.$$.fragment,f),C(p0.$$.fragment,f),C(Yk.$$.fragment,f),C(Kk.$$.fragment,f),C(eS.$$.fragment,f),C(u0.$$.fragment,f),C(oS.$$.fragment,f),C(z0.$$.fragment,f),C(rS.$$.fragment,f),C(tS.$$.fragment,f),C(nS.$$.fragment,f),C(Q0.$$.fragment,f),C(sS.$$.fragment,f),C(aw.$$.fragment,f),C(lS.$$.fragment,f),C(iS.$$.fragment,f),C(cS.$$.fragment,f),C(sw.$$.fragment,f),C(fS.$$.fragment,f),C(Fw.$$.fragment,f),C(mS.$$.fragment,f),C(gS.$$.fragment,f),C(pS.$$.fragment,f),C(Mw.$$.fragment,f),C(_S.$$.fragment,f),C(Rw.$$.fragment,f),C(uS.$$.fragment,f),C(bS.$$.fragment,f),C(FS.$$.fragment,f),C(Bw.$$.fragment,f),C(TS.$$.fragment,f),C(Ww.$$.fragment,f),C(MS.$$.fragment,f),C(ES.$$.fragment,f),C(wS.$$.fragment,f),C(Uw.$$.fragment,f),C(AS.$$.fragment,f),C(nA.$$.fragment,f),C(LS.$$.fragment,f),C(yS.$$.fragment,f),C($S.$$.fragment,f),C(lA.$$.fragment,f),C(kS.$$.fragment,f),C(bA.$$.fragment,f),C(SS.$$.fragment,f),C(RS.$$.fragment,f),C(BS.$$.fragment,f),C(FA.$$.fragment,f),C(IS.$$.fragment,f),C(xA.$$.fragment,f),C(NS.$$.fragment,f),C(qS.$$.fragment,f),C(DS.$$.fragment,f),C(kA.$$.fragment,f),C(GS.$$.fragment,f),C(DA.$$.fragment,f),C(OS.$$.fragment,f),C(VS.$$.fragment,f),C(zS.$$.fragment,f),C(OA.$$.fragment,f),C(WS.$$.fragment,f),C(XA.$$.fragment,f),C(QS.$$.fragment,f),C(US.$$.fragment,f),C(JS.$$.fragment,f),C(WA.$$.fragment,f),C(YS.$$.fragment,f),C(HA.$$.fragment,f),C(ZS.$$.fragment,f),C(eR.$$.fragment,f),C(rR.$$.fragment,f),C(YA.$$.fragment,f),C(tR.$$.fragment,f),C(ZA.$$.fragment,f),XJe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(dm),f&&t(gt),f&&t(Oe),f&&t(Qe),f&&t(fm),w(Va,f),f&&t(Ue),f&&t(Ae),f&&t(yo),f&&t(Xa),f&&t(RUe),f&&t(od),w(ky),f&&t(PUe),f&&t(Zn),f&&t(BUe),w(Sy,f),f&&t(IUe),f&&t(SP),f&&t(NUe),w(hm,f),f&&t(qUe),f&&t(rd),w(Ry),f&&t(jUe),f&&t(xo),w(Py),w(Ny),w($h),w(qy),f&&t(DUe),f&&t(ad),w(jy),f&&t(GUe),f&&t($o),w(Dy),w(Vy),w(mp),w(Xy),f&&t(OUe),f&&t(nd),w(zy),f&&t(VUe),f&&t(ko),w(Wy),w(Hy),w(Zp),w(e_),w(Jy),f&&t(XUe),f&&t(sd),w(Yy),f&&t(zUe),f&&t(So),w(Ky),w(o9),w(E_),w(C_),w(r9),f&&t(WUe),f&&t(id),w(t9),f&&t(QUe),f&&t(Ro),w(a9),w(s9),w(L_),w(l9),w(I1),f&&t(UUe),f&&t(fd),w(i9),f&&t(HUe),f&&t(Po),w(d9),w(f9),w(q1),w(m9),w(R8),f&&t(JUe),f&&t(hd),w(g9),f&&t(YUe),f&&t(Bo),w(h9),w(_9),w(B8),w(u9),w(Eb),f&&t(KUe),f&&t(ud),w(b9),f&&t(ZUe),f&&t(Io),w(v9),w(T9),w(wb),w(M9),w(xb),f&&t(eHe),f&&t(Fd),w(C9),f&&t(oHe),f&&t(No),w(w9),w(L9),w(kb),w(y9),w(u2),f&&t(rHe),f&&t(Ed),w(x9),f&&t(tHe),f&&t(qo),w($9),w(S9),w(v2),w(R9),w(D2),f&&t(aHe),f&&t(Ad),w(P9),f&&t(nHe),f&&t(jo),w(B9),w(N9),w(O2),w(q9),w(Ov),f&&t(sHe),f&&t(xd),w(j9),f&&t(lHe),f&&t(Do),w(D9),w(O9),w(Xv),w(V9),w(E6),f&&t(iHe),f&&t(Sd),w(X9),f&&t(dHe),f&&t(Go),w(z9),w(Q9),w(w6),w(U9),w(R6),f&&t(cHe),f&&t(Bd),w(H9),f&&t(fHe),f&&t(Vo),w(J9),w(K9),w(B6),w(Z9),w(FF),f&&t(mHe),f&&t(qd),w(ex),f&&t(gHe),f&&t(Xo),w(ox),w(tx),w(MF),w(ax),w(gT),f&&t(hHe),f&&t(Gd),w(nx),f&&t(pHe),f&&t(zo),w(sx),w(ix),w(pT),w(dx),w(bT),f&&t(_He),f&&t(Xd),w(cx),f&&t(uHe),f&&t(Wo),w(fx),w(gx),w(FT),w(hx),w(IT),f&&t(bHe),f&&t(Qd),w(px),f&&t(vHe),f&&t(Qo),w(_x),w(bx),w(qT),w(vx),w(GT),f&&t(FHe),f&&t(Jd),w(Fx),f&&t(THe),f&&t(Uo),w(Tx),w(Ex),w(VT),w(Cx),w(WT),f&&t(MHe),f&&t(Zd),w(wx),f&&t(EHe),f&&t(Ho),w(Ax),w(yx),w(UT),w(xx),w(YT),f&&t(CHe),f&&t(rc),w($x),f&&t(wHe),f&&t(Jo),w(kx),w(Rx),w(ZT),w(Px),w(cM),f&&t(AHe),f&&t(nc),w(Bx),f&&t(LHe),f&&t(Yo),w(Ix),w(qx),w(mM),w(jx),w(vM),f&&t(yHe),f&&t(ic),w(Dx),f&&t(xHe),f&&t(Ko),w(Gx),w(Vx),w(TM),w(Xx),w(RM),f&&t($He),f&&t(fc),w(zx),f&&t(kHe),f&&t(Zo),w(Wx),w(Ux),w(BM),w(Hx),w(jM),f&&t(SHe),f&&t(hc),w(Yx),f&&t(RHe),f&&t(er),w(Kx),w(e$),w(GM),w(o$),w(UM),f&&t(PHe),f&&t(uc),w(r$),f&&t(BHe),f&&t(or),w(t$),w(n$),w(JM),w(s$),w(rE),f&&t(IHe),f&&t(Fc),w(l$),f&&t(NHe),f&&t(rr),w(i$),w(c$),w(aE),w(f$),w(iE),f&&t(qHe),f&&t(Ec),w(g$),f&&t(jHe),f&&t(tr),w(h$),w(_$),w(cE),w(u$),w(gE),f&&t(DHe),f&&t(Ac),w(b$),f&&t(GHe),f&&t(ar),w(v$),w(T$),w(pE),w(M$),w(ME),f&&t(OHe),f&&t(xc),w(E$),f&&t(VHe),f&&t(nr),w(C$),w(A$),w(CE),w(L$),w(LE),f&&t(XHe),f&&t(Sc),w(y$),f&&t(zHe),f&&t(sr),w(x$),w(k$),w(xE),w(S$),w(A4),f&&t(WHe),f&&t(Bc),w(R$),f&&t(QHe),f&&t(lr),w(P$),w(I$),w(y4),w(N$),w(K4),f&&t(UHe),f&&t(qc),w(q$),f&&t(HHe),f&&t(ir),w(j$),w(G$),w(eC),w(O$),w(hC),f&&t(JHe),f&&t(Gc),w(V$),f&&t(YHe),f&&t(dr),w(X$),w(W$),w(_C),w(Q$),w(CC),f&&t(KHe),f&&t(Xc),w(U$),f&&t(ZHe),f&&t(cr),w(H$),w(Y$),w(AC),w(K$),w(xC),f&&t(eJe),f&&t(Qc),w(ek),f&&t(oJe),f&&t(fr),w(ok),w(tk),w(kC),w(ak),w(KC),f&&t(rJe),f&&t(Jc),w(nk),f&&t(tJe),f&&t(mr),w(sk),w(ik),w(e3),w(dk),w(f3),f&&t(aJe),f&&t(Zc),w(ck),f&&t(nJe),f&&t(gr),w(fk),w(gk),w(g3),w(hk),w(D3),f&&t(sJe),f&&t(rf),w(pk),f&&t(lJe),f&&t(hr),w(_k),w(bk),w(O3),w(vk),w(s5),f&&t(iJe),f&&t(nf),w(Fk),f&&t(dJe),f&&t(pr),w(Tk),w(Ek),w(i5),w(Ck),w(f5),f&&t(cJe),f&&t(df),w(Ak),f&&t(fJe),f&&t(_r),w(Lk),w(xk),w(g5),w($k),w(p5),f&&t(mJe),f&&t(mf),w(kk),f&&t(gJe),f&&t(ur),w(Sk),w(Pk),w(u5),w(Bk),w(q5),f&&t(hJe),f&&t(pf),w(Ik),f&&t(pJe),f&&t(br),w(Nk),w(jk),w(D5),w(Dk),w(l0),f&&t(_Je),f&&t(bf),w(Gk),f&&t(uJe),f&&t(vr),w(Ok),w(Xk),w(d0),w(zk),w(f0),f&&t(bJe),f&&t(Tf),w(Wk),f&&t(vJe),f&&t(Fr),w(Qk),w(Hk),w(g0),w(Jk),w(p0),f&&t(FJe),f&&t(Cf),w(Yk),f&&t(TJe),f&&t(Tr),w(Kk),w(eS),w(u0),w(oS),w(z0),f&&t(MJe),f&&t(Lf),w(rS),f&&t(EJe),f&&t(Mr),w(tS),w(nS),w(Q0),w(sS),w(aw),f&&t(CJe),f&&t($f),w(lS),f&&t(wJe),f&&t(Er),w(iS),w(cS),w(sw),w(fS),w(Fw),f&&t(AJe),f&&t(Rf),w(mS),f&&t(LJe),f&&t(Cr),w(gS),w(pS),w(Mw),w(_S),w(Rw),f&&t(yJe),f&&t(If),w(uS),f&&t(xJe),f&&t(wr),w(bS),w(FS),w(Bw),w(TS),w(Ww),f&&t($Je),f&&t(jf),w(MS),f&&t(kJe),f&&t(Ar),w(ES),w(wS),w(Uw),w(AS),w(nA),f&&t(SJe),f&&t(Of),w(LS),f&&t(RJe),f&&t(Lr),w(yS),w($S),w(lA),w(kS),w(bA),f&&t(PJe),f&&t(zf),w(SS),f&&t(BJe),f&&t(yr),w(RS),w(BS),w(FA),w(IS),w(xA),f&&t(IJe),f&&t(Uf),w(NS),f&&t(NJe),f&&t(xr),w(qS),w(DS),w(kA),w(GS),w(DA),f&&t(qJe),f&&t(Yf),w(OS),f&&t(jJe),f&&t($r),w(VS),w(zS),w(OA),w(WS),w(XA),f&&t(DJe),f&&t(em),w(QS),f&&t(GJe),f&&t(kr),w(US),w(JS),w(WA),w(YS),w(HA),f&&t(OJe),f&&t(tm),w(ZS),f&&t(VJe),f&&t(Sr),w(eR),w(rR),w(YA),w(tR),w(ZA)}}}const ola={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForDepthEstimation",title:"AutoModelForDepthEstimation"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function rla($){return Uaa(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class dla extends Xaa{constructor(g){super();zaa(this,g,rla,ela,Waa,{})}}export{dla as default,ola as metadata};
